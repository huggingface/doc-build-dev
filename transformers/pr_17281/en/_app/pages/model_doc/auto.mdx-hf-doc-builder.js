import{S as AQt,i as LQt,s as yQt,e as a,k as l,w as F,t as o,M as xQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as $Qt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Zrt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function kQt($){let g,v,p,m,_,d,h,Eo,Ai,Pf,st,Li,yi,oL,Bf,Oe,Qe,xi,Rn,rL,Pn,Bn,tL,$i,In,aL,ki,If,ka;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Pf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),oL=o(")."),Bf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Rn=o("NewModel"),rL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),tL=o(`, make sure its
`),$i=a("code"),In=o("config_class"),aL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),If=o("NewModelConfig"),ka=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var PS=s(p);m=r(PS,"NewModelConfig"),PS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var BS=s(Ai);Pf=r(BS,"model_type"),BS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var IS=s(Li);yi=r(IS,'"new-model"'),IS.forEach(t),oL=r(Ae,")."),Ae.forEach(t),Bf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Sa=s(xi);Rn=r(Sa,"NewModel"),Sa.forEach(t),rL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var NS=s(Pn);Bn=r(NS,"PreTrainedModel"),NS.forEach(t),tL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Nf=s($i);In=r(Nf,"config_class"),Nf.forEach(t),aL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var qS=s(ki);If=r(qS,"NewModelConfig"),qS.forEach(t),ka=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Pf),e(g,st),e(g,Li),e(Li,yi),e(g,oL),b(We,Bf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Rn),e(Oe,rL),e(Oe,Pn),e(Pn,Bn),e(Oe,tL),e(Oe,$i),e($i,In),e(Oe,aL),e(Oe,ki),e(ki,If),e(Oe,ka)},d(We){We&&t(g),We&&t(Bf),We&&t(Oe)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_,d,h,Eo,Ai,Pf,st,Li,yi,oL,Bf,Oe,Qe,xi,Rn,rL,Pn,Bn,tL,$i,In,aL,ki,If,ka,We,Ae,PS,Si,BS,IS,Co,Sa,NS,Nf,qS,fHe,YVe,Ri,qf,Eae,nL,mHe,Cae,gHe,KVe,Nn,hHe,wae,pHe,_He,Aae,uHe,bHe,ZVe,sL,eXe,jS,vHe,oXe,jf,rXe,Pi,Df,Lae,lL,FHe,yae,THe,tXe,wo,iL,MHe,dL,EHe,DS,CHe,wHe,AHe,cL,LHe,xae,yHe,xHe,$He,Ar,fL,kHe,$ae,SHe,RHe,Bi,PHe,kae,BHe,IHe,Sae,NHe,qHe,jHe,A,Gf,Rae,DHe,GHe,GS,OHe,VHe,XHe,Of,Pae,zHe,QHe,OS,WHe,HHe,UHe,Vf,Bae,JHe,YHe,VS,KHe,ZHe,eUe,Xf,Iae,oUe,rUe,XS,tUe,aUe,nUe,zf,Nae,sUe,lUe,zS,iUe,dUe,cUe,Qf,qae,fUe,mUe,QS,gUe,hUe,pUe,Wf,jae,_Ue,uUe,WS,bUe,vUe,FUe,Hf,Dae,TUe,MUe,HS,EUe,CUe,wUe,Uf,Gae,AUe,LUe,US,yUe,xUe,$Ue,Jf,Oae,kUe,SUe,JS,RUe,PUe,BUe,Yf,Vae,IUe,NUe,YS,qUe,jUe,DUe,Kf,Xae,GUe,OUe,KS,VUe,XUe,zUe,Zf,zae,QUe,WUe,ZS,HUe,UUe,JUe,em,Qae,YUe,KUe,eR,ZUe,eJe,oJe,om,Wae,rJe,tJe,oR,aJe,nJe,sJe,rm,Hae,lJe,iJe,rR,dJe,cJe,fJe,tm,Uae,mJe,gJe,tR,hJe,pJe,_Je,am,Jae,uJe,bJe,aR,vJe,FJe,TJe,nm,Yae,MJe,EJe,nR,CJe,wJe,AJe,sm,Kae,LJe,yJe,sR,xJe,$Je,kJe,lm,Zae,SJe,RJe,lR,PJe,BJe,IJe,im,ene,NJe,qJe,iR,jJe,DJe,GJe,dm,one,OJe,VJe,dR,XJe,zJe,QJe,cm,rne,WJe,HJe,cR,UJe,JJe,YJe,fm,tne,KJe,ZJe,fR,eYe,oYe,rYe,mm,ane,tYe,aYe,mR,nYe,sYe,lYe,gm,nne,iYe,dYe,gR,cYe,fYe,mYe,hm,sne,gYe,hYe,hR,pYe,_Ye,uYe,pm,lne,bYe,vYe,pR,FYe,TYe,MYe,_m,ine,EYe,CYe,_R,wYe,AYe,LYe,um,dne,yYe,xYe,uR,$Ye,kYe,SYe,bm,cne,RYe,PYe,bR,BYe,IYe,NYe,vm,fne,qYe,jYe,vR,DYe,GYe,OYe,Fm,mne,VYe,XYe,FR,zYe,QYe,WYe,Tm,gne,HYe,UYe,TR,JYe,YYe,KYe,Mm,hne,ZYe,eKe,MR,oKe,rKe,tKe,Em,pne,aKe,nKe,ER,sKe,lKe,iKe,Cm,_ne,dKe,cKe,CR,fKe,mKe,gKe,wm,une,hKe,pKe,wR,_Ke,uKe,bKe,Am,bne,vKe,FKe,AR,TKe,MKe,EKe,Lm,vne,CKe,wKe,LR,AKe,LKe,yKe,ym,Fne,xKe,$Ke,yR,kKe,SKe,RKe,xm,Tne,PKe,BKe,xR,IKe,NKe,qKe,$m,Mne,jKe,DKe,$R,GKe,OKe,VKe,km,Ene,XKe,zKe,kR,QKe,WKe,HKe,Sm,Cne,UKe,JKe,SR,YKe,KKe,ZKe,Rm,wne,eZe,oZe,RR,rZe,tZe,aZe,Pm,Ane,nZe,sZe,PR,lZe,iZe,dZe,Bm,Lne,cZe,fZe,BR,mZe,gZe,hZe,Im,yne,pZe,_Ze,IR,uZe,bZe,vZe,Nm,xne,FZe,TZe,NR,MZe,EZe,CZe,qm,$ne,wZe,AZe,qR,LZe,yZe,xZe,jm,kne,$Ze,kZe,jR,SZe,RZe,PZe,Dm,Sne,BZe,IZe,DR,NZe,qZe,jZe,Gm,Rne,DZe,GZe,GR,OZe,VZe,XZe,Om,Pne,zZe,QZe,OR,WZe,HZe,UZe,Vm,Bne,JZe,YZe,VR,KZe,ZZe,eeo,Xm,Ine,oeo,reo,XR,teo,aeo,neo,zm,Nne,seo,leo,zR,ieo,deo,ceo,Qm,qne,feo,meo,QR,geo,heo,peo,Wm,jne,_eo,ueo,WR,beo,veo,Feo,Hm,Dne,Teo,Meo,HR,Eeo,Ceo,weo,Um,Gne,Aeo,Leo,UR,yeo,xeo,$eo,Jm,One,keo,Seo,JR,Reo,Peo,Beo,Ym,Vne,Ieo,Neo,YR,qeo,jeo,Deo,Km,Xne,Geo,Oeo,KR,Veo,Xeo,zeo,Zm,zne,Qeo,Weo,ZR,Heo,Ueo,Jeo,eg,Qne,Yeo,Keo,eP,Zeo,eoo,ooo,og,Wne,roo,too,oP,aoo,noo,soo,rg,Hne,loo,ioo,rP,doo,coo,foo,tg,Une,moo,goo,tP,hoo,poo,_oo,ag,Jne,uoo,boo,aP,voo,Foo,Too,ng,Yne,Moo,Eoo,nP,Coo,woo,Aoo,sg,Kne,Loo,yoo,sP,xoo,$oo,koo,lg,Zne,Soo,Roo,lP,Poo,Boo,Ioo,ig,ese,Noo,qoo,iP,joo,Doo,Goo,dg,ose,Ooo,Voo,dP,Xoo,zoo,Qoo,cg,rse,Woo,Hoo,cP,Uoo,Joo,Yoo,fg,tse,Koo,Zoo,fP,ero,oro,rro,mg,ase,tro,aro,mP,nro,sro,lro,gg,nse,iro,dro,gP,cro,fro,mro,hg,sse,gro,hro,hP,pro,_ro,uro,pg,lse,bro,vro,pP,Fro,Tro,Mro,_g,ise,Ero,Cro,_P,wro,Aro,Lro,ug,dse,yro,xro,uP,$ro,kro,Sro,bg,cse,Rro,Pro,bP,Bro,Iro,Nro,vg,fse,qro,jro,vP,Dro,Gro,Oro,Fg,mse,Vro,Xro,FP,zro,Qro,Wro,Tg,gse,Hro,Uro,TP,Jro,Yro,Kro,Mg,hse,Zro,eto,MP,oto,rto,tto,Eg,pse,ato,nto,EP,sto,lto,ito,Cg,_se,dto,cto,CP,fto,mto,gto,wg,use,hto,pto,wP,_to,uto,bto,Ag,bse,vto,Fto,AP,Tto,Mto,Eto,Lg,vse,Cto,wto,LP,Ato,Lto,yto,yg,Fse,xto,$to,yP,kto,Sto,Rto,xg,Tse,Pto,Bto,xP,Ito,Nto,qto,$g,Mse,jto,Dto,$P,Gto,Oto,Vto,kg,Ese,Xto,zto,kP,Qto,Wto,Hto,Sg,Cse,Uto,Jto,SP,Yto,Kto,Zto,Rg,wse,eao,oao,RP,rao,tao,aao,Pg,Ase,nao,sao,PP,lao,iao,dao,Bg,Lse,cao,fao,BP,mao,gao,hao,Ig,yse,pao,_ao,IP,uao,bao,vao,Ng,xse,Fao,Tao,NP,Mao,Eao,Cao,qg,$se,wao,Aao,qP,Lao,yao,xao,jg,kse,$ao,kao,jP,Sao,Rao,Pao,Dg,Sse,Bao,Iao,DP,Nao,qao,jao,Gg,Rse,Dao,Gao,GP,Oao,Vao,Xao,Og,Pse,zao,Qao,OP,Wao,Hao,Uao,Vg,Bse,Jao,Yao,VP,Kao,Zao,eno,Xg,Ise,ono,rno,XP,tno,ano,nno,zg,Nse,sno,lno,zP,ino,dno,cno,Qg,qse,fno,mno,QP,gno,hno,pno,Wg,jse,_no,uno,WP,bno,vno,Fno,Hg,Dse,Tno,Mno,HP,Eno,Cno,wno,Ug,Gse,Ano,Lno,UP,yno,xno,$no,Jg,Ose,kno,Sno,JP,Rno,Pno,Bno,Yg,Vse,Ino,Nno,YP,qno,jno,Dno,Kg,Gno,Zg,mL,Ono,Xse,Vno,aXe,Ii,eh,zse,gL,Xno,Qse,zno,nXe,Ao,hL,Qno,pL,Wno,KP,Hno,Uno,Jno,_L,Yno,Wse,Kno,Zno,eso,Lr,uL,oso,Hse,rso,tso,Ra,aso,Use,nso,sso,Jse,lso,iso,Yse,dso,cso,fso,k,qn,Kse,mso,gso,ZP,hso,pso,eB,_so,uso,bso,jn,Zse,vso,Fso,oB,Tso,Mso,rB,Eso,Cso,wso,Dn,ele,Aso,Lso,tB,yso,xso,aB,$so,kso,Sso,oh,ole,Rso,Pso,nB,Bso,Iso,Nso,Gn,rle,qso,jso,sB,Dso,Gso,lB,Oso,Vso,Xso,rh,tle,zso,Qso,iB,Wso,Hso,Uso,th,ale,Jso,Yso,dB,Kso,Zso,elo,ah,nle,olo,rlo,cB,tlo,alo,nlo,On,sle,slo,llo,fB,ilo,dlo,mB,clo,flo,mlo,Vn,lle,glo,hlo,gB,plo,_lo,hB,ulo,blo,vlo,Xn,ile,Flo,Tlo,pB,Mlo,Elo,_B,Clo,wlo,Alo,nh,dle,Llo,ylo,uB,xlo,$lo,klo,sh,cle,Slo,Rlo,bB,Plo,Blo,Ilo,lh,fle,Nlo,qlo,vB,jlo,Dlo,Glo,zn,mle,Olo,Vlo,FB,Xlo,zlo,TB,Qlo,Wlo,Hlo,ih,gle,Ulo,Jlo,MB,Ylo,Klo,Zlo,Qn,hle,eio,oio,EB,rio,tio,CB,aio,nio,sio,Wn,ple,lio,iio,wB,dio,cio,AB,fio,mio,gio,Hn,_le,hio,pio,LB,_io,uio,yB,bio,vio,Fio,Un,ule,Tio,Mio,xB,Eio,Cio,$B,wio,Aio,Lio,dh,ble,yio,xio,kB,$io,kio,Sio,Jn,vle,Rio,Pio,SB,Bio,Iio,RB,Nio,qio,jio,Yn,Fle,Dio,Gio,PB,Oio,Vio,BB,Xio,zio,Qio,Kn,Tle,Wio,Hio,IB,Uio,Jio,NB,Yio,Kio,Zio,Zn,Mle,edo,odo,qB,rdo,tdo,jB,ado,ndo,sdo,es,Ele,ldo,ido,DB,ddo,cdo,GB,fdo,mdo,gdo,os,Cle,hdo,pdo,OB,_do,udo,VB,bdo,vdo,Fdo,ch,wle,Tdo,Mdo,XB,Edo,Cdo,wdo,rs,Ale,Ado,Ldo,zB,ydo,xdo,QB,$do,kdo,Sdo,fh,Lle,Rdo,Pdo,WB,Bdo,Ido,Ndo,ts,yle,qdo,jdo,HB,Ddo,Gdo,UB,Odo,Vdo,Xdo,as,xle,zdo,Qdo,JB,Wdo,Hdo,YB,Udo,Jdo,Ydo,ns,$le,Kdo,Zdo,KB,eco,oco,ZB,rco,tco,aco,mh,kle,nco,sco,eI,lco,ico,dco,ss,Sle,cco,fco,oI,mco,gco,rI,hco,pco,_co,ls,Rle,uco,bco,tI,vco,Fco,aI,Tco,Mco,Eco,is,Ple,Cco,wco,nI,Aco,Lco,sI,yco,xco,$co,gh,Ble,kco,Sco,lI,Rco,Pco,Bco,ds,Ile,Ico,Nco,iI,qco,jco,dI,Dco,Gco,Oco,cs,Nle,Vco,Xco,cI,zco,Qco,fI,Wco,Hco,Uco,fs,qle,Jco,Yco,mI,Kco,Zco,gI,efo,ofo,rfo,ms,jle,tfo,afo,hI,nfo,sfo,pI,lfo,ifo,dfo,gs,Dle,cfo,ffo,_I,mfo,gfo,uI,hfo,pfo,_fo,hs,Gle,ufo,bfo,bI,vfo,Ffo,vI,Tfo,Mfo,Efo,ps,Ole,Cfo,wfo,FI,Afo,Lfo,TI,yfo,xfo,$fo,_s,Vle,kfo,Sfo,MI,Rfo,Pfo,EI,Bfo,Ifo,Nfo,hh,Xle,qfo,jfo,CI,Dfo,Gfo,Ofo,us,zle,Vfo,Xfo,wI,zfo,Qfo,AI,Wfo,Hfo,Ufo,ph,Qle,Jfo,Yfo,LI,Kfo,Zfo,emo,_h,Wle,omo,rmo,yI,tmo,amo,nmo,bs,Hle,smo,lmo,xI,imo,dmo,$I,cmo,fmo,mmo,vs,Ule,gmo,hmo,kI,pmo,_mo,SI,umo,bmo,vmo,Fs,Jle,Fmo,Tmo,RI,Mmo,Emo,PI,Cmo,wmo,Amo,uh,Yle,Lmo,ymo,BI,xmo,$mo,kmo,Ts,Kle,Smo,Rmo,II,Pmo,Bmo,NI,Imo,Nmo,qmo,Ms,Zle,jmo,Dmo,qI,Gmo,Omo,jI,Vmo,Xmo,zmo,Es,eie,Qmo,Wmo,DI,Hmo,Umo,GI,Jmo,Ymo,Kmo,Cs,oie,Zmo,ego,OI,ogo,rgo,VI,tgo,ago,ngo,ws,rie,sgo,lgo,XI,igo,dgo,zI,cgo,fgo,mgo,As,tie,ggo,hgo,QI,pgo,_go,WI,ugo,bgo,vgo,Ls,aie,Fgo,Tgo,HI,Mgo,Ego,UI,Cgo,wgo,Ago,bh,nie,Lgo,ygo,JI,xgo,$go,kgo,ys,sie,Sgo,Rgo,YI,Pgo,Bgo,KI,Igo,Ngo,qgo,vh,lie,jgo,Dgo,ZI,Ggo,Ogo,Vgo,Fh,iie,Xgo,zgo,eN,Qgo,Wgo,Hgo,Th,die,Ugo,Jgo,oN,Ygo,Kgo,Zgo,Mh,cie,eho,oho,rN,rho,tho,aho,xs,fie,nho,sho,tN,lho,iho,aN,dho,cho,fho,Eh,mie,mho,gho,nN,hho,pho,_ho,$s,gie,uho,bho,sN,vho,Fho,lN,Tho,Mho,Eho,ks,hie,Cho,who,iN,Aho,Lho,dN,yho,xho,$ho,Ss,pie,kho,Sho,cN,Rho,Pho,fN,Bho,Iho,Nho,Rs,_ie,qho,jho,mN,Dho,Gho,gN,Oho,Vho,Xho,Ps,uie,zho,Qho,hN,Who,Hho,pN,Uho,Jho,Yho,Bs,bie,Kho,Zho,_N,epo,opo,uN,rpo,tpo,apo,Ch,vie,npo,spo,bN,lpo,ipo,dpo,wh,Fie,cpo,fpo,vN,mpo,gpo,hpo,Is,Tie,ppo,_po,FN,upo,bpo,TN,vpo,Fpo,Tpo,Ns,Mie,Mpo,Epo,MN,Cpo,wpo,EN,Apo,Lpo,ypo,qs,Eie,xpo,$po,CN,kpo,Spo,wN,Rpo,Ppo,Bpo,Ah,Cie,Ipo,Npo,AN,qpo,jpo,Dpo,Lh,wie,Gpo,Opo,LN,Vpo,Xpo,zpo,yh,Aie,Qpo,Wpo,yN,Hpo,Upo,Jpo,js,Lie,Ypo,Kpo,xN,Zpo,e_o,$N,o_o,r_o,t_o,Ds,yie,a_o,n_o,kN,s_o,l_o,SN,i_o,d_o,c_o,xh,xie,f_o,m_o,RN,g_o,h_o,p_o,$h,$ie,__o,u_o,PN,b_o,v_o,F_o,kh,kie,T_o,M_o,BN,E_o,C_o,w_o,Gs,Sie,A_o,L_o,IN,y_o,x_o,NN,$_o,k_o,S_o,Sh,Rie,R_o,P_o,qN,B_o,I_o,N_o,Rh,Pie,q_o,j_o,jN,D_o,G_o,O_o,Os,Bie,V_o,X_o,DN,z_o,Q_o,GN,W_o,H_o,U_o,Vs,Iie,J_o,Y_o,ON,K_o,Z_o,VN,euo,ouo,ruo,Xs,Nie,tuo,auo,XN,nuo,suo,zN,luo,iuo,duo,zs,qie,cuo,fuo,QN,muo,guo,WN,huo,puo,_uo,Ph,uuo,Bh,bL,buo,jie,vuo,sXe,Ni,Ih,Die,vL,Fuo,Gie,Tuo,lXe,Lo,FL,Muo,TL,Euo,HN,Cuo,wuo,Auo,ML,Luo,Oie,yuo,xuo,$uo,He,EL,kuo,Vie,Suo,Ruo,Pa,Puo,Xie,Buo,Iuo,zie,Nuo,quo,Qie,juo,Duo,Guo,J,Nh,Wie,Ouo,Vuo,UN,Xuo,zuo,Quo,qh,Hie,Wuo,Huo,JN,Uuo,Juo,Yuo,jh,Uie,Kuo,Zuo,YN,e1o,o1o,r1o,Dh,Jie,t1o,a1o,KN,n1o,s1o,l1o,Gh,Yie,i1o,d1o,ZN,c1o,f1o,m1o,Oh,Kie,g1o,h1o,eq,p1o,_1o,u1o,Vh,Zie,b1o,v1o,oq,F1o,T1o,M1o,Xh,ede,E1o,C1o,rq,w1o,A1o,L1o,zh,ode,y1o,x1o,tq,$1o,k1o,S1o,Qh,rde,R1o,P1o,aq,B1o,I1o,N1o,Wh,tde,q1o,j1o,nq,D1o,G1o,O1o,Hh,ade,V1o,X1o,sq,z1o,Q1o,W1o,Uh,nde,H1o,U1o,lq,J1o,Y1o,K1o,Jh,sde,Z1o,e2o,iq,o2o,r2o,t2o,Yh,lde,a2o,n2o,dq,s2o,l2o,i2o,Kh,ide,d2o,c2o,cq,f2o,m2o,g2o,Zh,dde,h2o,p2o,fq,_2o,u2o,b2o,ep,cde,v2o,F2o,mq,T2o,M2o,E2o,op,fde,C2o,w2o,gq,A2o,L2o,y2o,rp,mde,x2o,$2o,hq,k2o,S2o,R2o,tp,gde,P2o,B2o,pq,I2o,N2o,q2o,ap,hde,j2o,D2o,_q,G2o,O2o,V2o,np,pde,X2o,z2o,uq,Q2o,W2o,H2o,sp,_de,U2o,J2o,bq,Y2o,K2o,Z2o,lp,ude,ebo,obo,vq,rbo,tbo,abo,ip,bde,nbo,sbo,Fq,lbo,ibo,dbo,dp,vde,cbo,fbo,Tq,mbo,gbo,hbo,cp,Fde,pbo,_bo,Mq,ubo,bbo,vbo,fp,Tde,Fbo,Tbo,Eq,Mbo,Ebo,Cbo,mp,Mde,wbo,Abo,Cq,Lbo,ybo,xbo,gp,Ede,$bo,kbo,wq,Sbo,Rbo,Pbo,hp,Cde,Bbo,Ibo,Aq,Nbo,qbo,jbo,pp,wde,Dbo,Gbo,Lq,Obo,Vbo,Xbo,_p,Ade,zbo,Qbo,yq,Wbo,Hbo,Ubo,up,Lde,Jbo,Ybo,xq,Kbo,Zbo,evo,bp,ovo,vp,rvo,Fp,CL,tvo,yde,avo,iXe,qi,Tp,xde,wL,nvo,$de,svo,dXe,yo,AL,lvo,LL,ivo,$q,dvo,cvo,fvo,yL,mvo,kde,gvo,hvo,pvo,Ue,xL,_vo,Sde,uvo,bvo,ji,vvo,Rde,Fvo,Tvo,Pde,Mvo,Evo,Cvo,he,Mp,Bde,wvo,Avo,kq,Lvo,yvo,xvo,Ep,Ide,$vo,kvo,Nde,Svo,Rvo,Pvo,Cp,qde,Bvo,Ivo,Sq,Nvo,qvo,jvo,wp,jde,Dvo,Gvo,Rq,Ovo,Vvo,Xvo,Ap,Dde,zvo,Qvo,Pq,Wvo,Hvo,Uvo,Lp,Gde,Jvo,Yvo,Bq,Kvo,Zvo,eFo,yp,Ode,oFo,rFo,Iq,tFo,aFo,nFo,xp,Vde,sFo,lFo,Nq,iFo,dFo,cFo,$p,Xde,fFo,mFo,qq,gFo,hFo,pFo,kp,zde,_Fo,uFo,jq,bFo,vFo,FFo,Sp,Qde,TFo,MFo,Dq,EFo,CFo,wFo,Rp,Wde,AFo,LFo,Gq,yFo,xFo,$Fo,Pp,Hde,kFo,SFo,Oq,RFo,PFo,BFo,Bp,Ude,IFo,NFo,Vq,qFo,jFo,DFo,Ip,Jde,GFo,OFo,Xq,VFo,XFo,zFo,Np,Yde,QFo,WFo,zq,HFo,UFo,JFo,qp,Kde,YFo,KFo,Qq,ZFo,eTo,oTo,jp,Zde,rTo,tTo,Wq,aTo,nTo,sTo,Dp,lTo,Gp,iTo,Op,$L,dTo,ece,cTo,cXe,Di,Vp,oce,kL,fTo,rce,mTo,fXe,xo,SL,gTo,Gi,hTo,Hq,pTo,_To,Uq,uTo,bTo,vTo,RL,FTo,tce,TTo,MTo,ETo,lt,PL,CTo,ace,wTo,ATo,Oi,LTo,nce,yTo,xTo,Jq,$To,kTo,STo,Xp,RTo,Je,BL,PTo,sce,BTo,ITo,Ba,NTo,lce,qTo,jTo,ice,DTo,GTo,dce,OTo,VTo,XTo,y,zp,cce,zTo,QTo,Yq,WTo,HTo,UTo,Qp,fce,JTo,YTo,Kq,KTo,ZTo,e7o,Wp,mce,o7o,r7o,Zq,t7o,a7o,n7o,Hp,gce,s7o,l7o,ej,i7o,d7o,c7o,Up,hce,f7o,m7o,oj,g7o,h7o,p7o,Jp,pce,_7o,u7o,rj,b7o,v7o,F7o,Yp,_ce,T7o,M7o,tj,E7o,C7o,w7o,Kp,uce,A7o,L7o,aj,y7o,x7o,$7o,Zp,bce,k7o,S7o,nj,R7o,P7o,B7o,e_,vce,I7o,N7o,sj,q7o,j7o,D7o,o_,Fce,G7o,O7o,lj,V7o,X7o,z7o,r_,Tce,Q7o,W7o,ij,H7o,U7o,J7o,t_,Mce,Y7o,K7o,dj,Z7o,e8o,o8o,a_,Ece,r8o,t8o,cj,a8o,n8o,s8o,n_,Cce,l8o,i8o,fj,d8o,c8o,f8o,s_,wce,m8o,g8o,mj,h8o,p8o,_8o,l_,Ace,u8o,b8o,gj,v8o,F8o,T8o,i_,Lce,M8o,E8o,hj,C8o,w8o,A8o,d_,yce,L8o,y8o,pj,x8o,$8o,k8o,c_,xce,S8o,R8o,_j,P8o,B8o,I8o,f_,$ce,N8o,q8o,uj,j8o,D8o,G8o,m_,kce,O8o,V8o,bj,X8o,z8o,Q8o,g_,Sce,W8o,H8o,vj,U8o,J8o,Y8o,h_,Rce,K8o,Z8o,Fj,eMo,oMo,rMo,p_,Pce,tMo,aMo,Tj,nMo,sMo,lMo,__,Bce,iMo,dMo,Mj,cMo,fMo,mMo,u_,Ice,gMo,hMo,Ej,pMo,_Mo,uMo,b_,Nce,bMo,vMo,Cj,FMo,TMo,MMo,v_,qce,EMo,CMo,wj,wMo,AMo,LMo,F_,jce,yMo,xMo,Aj,$Mo,kMo,SMo,T_,Dce,RMo,PMo,Lj,BMo,IMo,NMo,M_,Gce,qMo,jMo,yj,DMo,GMo,OMo,E_,Oce,VMo,XMo,xj,zMo,QMo,WMo,C_,Vce,HMo,UMo,$j,JMo,YMo,KMo,w_,Xce,ZMo,e4o,kj,o4o,r4o,t4o,Qs,zce,a4o,n4o,Sj,s4o,l4o,Rj,i4o,d4o,c4o,A_,Qce,f4o,m4o,Pj,g4o,h4o,p4o,L_,Wce,_4o,u4o,Bj,b4o,v4o,F4o,y_,Hce,T4o,M4o,Ij,E4o,C4o,w4o,x_,Uce,A4o,L4o,Nj,y4o,x4o,$4o,$_,Jce,k4o,S4o,qj,R4o,P4o,B4o,k_,Yce,I4o,N4o,jj,q4o,j4o,D4o,S_,Kce,G4o,O4o,Dj,V4o,X4o,z4o,R_,Zce,Q4o,W4o,Gj,H4o,U4o,J4o,P_,efe,Y4o,K4o,Oj,Z4o,eEo,oEo,B_,ofe,rEo,tEo,Vj,aEo,nEo,sEo,I_,rfe,lEo,iEo,Xj,dEo,cEo,fEo,N_,tfe,mEo,gEo,zj,hEo,pEo,_Eo,q_,afe,uEo,bEo,Qj,vEo,FEo,TEo,j_,nfe,MEo,EEo,Wj,CEo,wEo,AEo,D_,sfe,LEo,yEo,Hj,xEo,$Eo,kEo,G_,lfe,SEo,REo,Uj,PEo,BEo,IEo,O_,ife,NEo,qEo,Jj,jEo,DEo,GEo,V_,dfe,OEo,VEo,Yj,XEo,zEo,QEo,X_,cfe,WEo,HEo,Kj,UEo,JEo,YEo,z_,ffe,KEo,ZEo,Zj,eCo,oCo,rCo,Q_,mfe,tCo,aCo,eD,nCo,sCo,lCo,W_,gfe,iCo,dCo,oD,cCo,fCo,mCo,H_,hfe,gCo,hCo,rD,pCo,_Co,uCo,U_,pfe,bCo,vCo,tD,FCo,TCo,MCo,J_,_fe,ECo,CCo,aD,wCo,ACo,LCo,Y_,ufe,yCo,xCo,nD,$Co,kCo,SCo,K_,bfe,RCo,PCo,sD,BCo,ICo,NCo,Z_,vfe,qCo,jCo,lD,DCo,GCo,OCo,eu,Ffe,VCo,XCo,iD,zCo,QCo,WCo,ou,Tfe,HCo,UCo,dD,JCo,YCo,KCo,ru,Mfe,ZCo,e3o,cD,o3o,r3o,t3o,tu,Efe,a3o,n3o,fD,s3o,l3o,i3o,au,Cfe,d3o,c3o,mD,f3o,m3o,g3o,nu,wfe,h3o,p3o,gD,_3o,u3o,b3o,su,Afe,v3o,F3o,hD,T3o,M3o,E3o,lu,Lfe,C3o,w3o,pD,A3o,L3o,y3o,iu,yfe,x3o,$3o,_D,k3o,S3o,R3o,du,xfe,P3o,B3o,uD,I3o,N3o,q3o,cu,$fe,j3o,D3o,bD,G3o,O3o,V3o,fu,kfe,X3o,z3o,vD,Q3o,W3o,H3o,mu,Sfe,U3o,J3o,FD,Y3o,K3o,Z3o,gu,Rfe,e5o,o5o,TD,r5o,t5o,a5o,hu,Pfe,n5o,s5o,MD,l5o,i5o,d5o,pu,Bfe,c5o,f5o,ED,m5o,g5o,h5o,_u,Ife,p5o,_5o,CD,u5o,b5o,v5o,uu,Nfe,F5o,T5o,wD,M5o,E5o,C5o,bu,qfe,w5o,A5o,AD,L5o,y5o,x5o,vu,jfe,$5o,k5o,LD,S5o,R5o,P5o,Fu,Dfe,B5o,I5o,yD,N5o,q5o,j5o,Tu,Gfe,D5o,G5o,xD,O5o,V5o,X5o,Mu,Ofe,z5o,Q5o,$D,W5o,H5o,U5o,Eu,Vfe,J5o,Y5o,kD,K5o,Z5o,e0o,Cu,Xfe,o0o,r0o,SD,t0o,a0o,n0o,wu,zfe,s0o,l0o,RD,i0o,d0o,c0o,Au,Qfe,f0o,m0o,PD,g0o,h0o,p0o,Lu,Wfe,_0o,u0o,BD,b0o,v0o,F0o,yu,Hfe,T0o,M0o,ID,E0o,C0o,w0o,xu,Ufe,A0o,L0o,ND,y0o,x0o,$0o,$u,Jfe,k0o,S0o,qD,R0o,P0o,B0o,ku,Yfe,I0o,N0o,jD,q0o,j0o,D0o,Su,Kfe,G0o,O0o,DD,V0o,X0o,z0o,Ru,Zfe,Q0o,W0o,GD,H0o,U0o,J0o,Pu,eme,Y0o,K0o,OD,Z0o,ewo,owo,Bu,ome,rwo,two,VD,awo,nwo,swo,Iu,rme,lwo,iwo,XD,dwo,cwo,fwo,Nu,tme,mwo,gwo,zD,hwo,pwo,_wo,qu,ame,uwo,bwo,QD,vwo,Fwo,Two,ju,nme,Mwo,Ewo,WD,Cwo,wwo,Awo,Du,sme,Lwo,ywo,HD,xwo,$wo,kwo,Gu,lme,Swo,Rwo,UD,Pwo,Bwo,Iwo,Ou,ime,Nwo,qwo,JD,jwo,Dwo,Gwo,Vu,dme,Owo,Vwo,YD,Xwo,zwo,Qwo,Xu,cme,Wwo,Hwo,KD,Uwo,Jwo,Ywo,zu,fme,Kwo,Zwo,ZD,eAo,oAo,rAo,Qu,mme,tAo,aAo,eG,nAo,sAo,lAo,Wu,gme,iAo,dAo,oG,cAo,fAo,mAo,Hu,gAo,hme,hAo,pAo,pme,_Ao,uAo,Uu,mXe,Vi,Ju,_me,IL,bAo,ume,vAo,gXe,$o,NL,FAo,Xi,TAo,rG,MAo,EAo,tG,CAo,wAo,AAo,qL,LAo,bme,yAo,xAo,$Ao,it,jL,kAo,vme,SAo,RAo,zi,PAo,Fme,BAo,IAo,aG,NAo,qAo,jAo,Yu,DAo,Ye,DL,GAo,Tme,OAo,VAo,Ia,XAo,Mme,zAo,QAo,Eme,WAo,HAo,Cme,UAo,JAo,YAo,G,Ku,wme,KAo,ZAo,nG,e6o,o6o,r6o,Zu,Ame,t6o,a6o,sG,n6o,s6o,l6o,e1,Lme,i6o,d6o,lG,c6o,f6o,m6o,o1,yme,g6o,h6o,iG,p6o,_6o,u6o,r1,xme,b6o,v6o,dG,F6o,T6o,M6o,t1,$me,E6o,C6o,cG,w6o,A6o,L6o,a1,kme,y6o,x6o,fG,$6o,k6o,S6o,n1,Sme,R6o,P6o,mG,B6o,I6o,N6o,s1,Rme,q6o,j6o,gG,D6o,G6o,O6o,l1,Pme,V6o,X6o,hG,z6o,Q6o,W6o,i1,Bme,H6o,U6o,pG,J6o,Y6o,K6o,d1,Ime,Z6o,eLo,_G,oLo,rLo,tLo,c1,Nme,aLo,nLo,uG,sLo,lLo,iLo,f1,qme,dLo,cLo,bG,fLo,mLo,gLo,m1,jme,hLo,pLo,vG,_Lo,uLo,bLo,g1,Dme,vLo,FLo,FG,TLo,MLo,ELo,h1,Gme,CLo,wLo,TG,ALo,LLo,yLo,p1,Ome,xLo,$Lo,MG,kLo,SLo,RLo,_1,Vme,PLo,BLo,EG,ILo,NLo,qLo,u1,Xme,jLo,DLo,CG,GLo,OLo,VLo,b1,zme,XLo,zLo,wG,QLo,WLo,HLo,v1,Qme,ULo,JLo,AG,YLo,KLo,ZLo,F1,Wme,eyo,oyo,LG,ryo,tyo,ayo,T1,Hme,nyo,syo,yG,lyo,iyo,dyo,M1,Ume,cyo,fyo,xG,myo,gyo,hyo,E1,Jme,pyo,_yo,$G,uyo,byo,vyo,C1,Yme,Fyo,Tyo,kG,Myo,Eyo,Cyo,w1,Kme,wyo,Ayo,SG,Lyo,yyo,xyo,A1,Zme,$yo,kyo,RG,Syo,Ryo,Pyo,L1,ege,Byo,Iyo,PG,Nyo,qyo,jyo,y1,oge,Dyo,Gyo,BG,Oyo,Vyo,Xyo,x1,rge,zyo,Qyo,IG,Wyo,Hyo,Uyo,$1,tge,Jyo,Yyo,NG,Kyo,Zyo,e9o,k1,age,o9o,r9o,qG,t9o,a9o,n9o,S1,nge,s9o,l9o,jG,i9o,d9o,c9o,R1,sge,f9o,m9o,DG,g9o,h9o,p9o,P1,lge,_9o,u9o,GG,b9o,v9o,F9o,B1,ige,T9o,M9o,OG,E9o,C9o,w9o,I1,dge,A9o,L9o,VG,y9o,x9o,$9o,N1,cge,k9o,S9o,XG,R9o,P9o,B9o,q1,fge,I9o,N9o,zG,q9o,j9o,D9o,j1,mge,G9o,O9o,QG,V9o,X9o,z9o,D1,gge,Q9o,W9o,WG,H9o,U9o,J9o,G1,hge,Y9o,K9o,HG,Z9o,exo,oxo,O1,pge,rxo,txo,UG,axo,nxo,sxo,V1,lxo,_ge,ixo,dxo,uge,cxo,fxo,X1,hXe,Qi,z1,bge,GL,mxo,vge,gxo,pXe,ko,OL,hxo,Wi,pxo,JG,_xo,uxo,YG,bxo,vxo,Fxo,VL,Txo,Fge,Mxo,Exo,Cxo,dt,XL,wxo,Tge,Axo,Lxo,Hi,yxo,Mge,xxo,$xo,KG,kxo,Sxo,Rxo,Q1,Pxo,Ke,zL,Bxo,Ege,Ixo,Nxo,Na,qxo,Cge,jxo,Dxo,wge,Gxo,Oxo,Age,Vxo,Xxo,zxo,z,W1,Lge,Qxo,Wxo,ZG,Hxo,Uxo,Jxo,H1,yge,Yxo,Kxo,eO,Zxo,e$o,o$o,U1,xge,r$o,t$o,oO,a$o,n$o,s$o,J1,$ge,l$o,i$o,rO,d$o,c$o,f$o,Y1,kge,m$o,g$o,tO,h$o,p$o,_$o,K1,Sge,u$o,b$o,aO,v$o,F$o,T$o,Z1,Rge,M$o,E$o,nO,C$o,w$o,A$o,e2,Pge,L$o,y$o,sO,x$o,$$o,k$o,o2,Bge,S$o,R$o,lO,P$o,B$o,I$o,r2,Ige,N$o,q$o,iO,j$o,D$o,G$o,t2,Nge,O$o,V$o,dO,X$o,z$o,Q$o,a2,qge,W$o,H$o,cO,U$o,J$o,Y$o,n2,jge,K$o,Z$o,fO,eko,oko,rko,s2,Dge,tko,ako,mO,nko,sko,lko,l2,Gge,iko,dko,gO,cko,fko,mko,i2,Oge,gko,hko,hO,pko,_ko,uko,d2,Vge,bko,vko,pO,Fko,Tko,Mko,c2,Xge,Eko,Cko,_O,wko,Ako,Lko,f2,zge,yko,xko,uO,$ko,kko,Sko,m2,Qge,Rko,Pko,bO,Bko,Iko,Nko,g2,Wge,qko,jko,vO,Dko,Gko,Oko,h2,Hge,Vko,Xko,FO,zko,Qko,Wko,p2,Uge,Hko,Uko,TO,Jko,Yko,Kko,_2,Jge,Zko,eSo,MO,oSo,rSo,tSo,u2,Yge,aSo,nSo,EO,sSo,lSo,iSo,b2,Kge,dSo,cSo,CO,fSo,mSo,gSo,v2,Zge,hSo,pSo,wO,_So,uSo,bSo,F2,ehe,vSo,FSo,AO,TSo,MSo,ESo,T2,ohe,CSo,wSo,LO,ASo,LSo,ySo,M2,rhe,xSo,$So,yO,kSo,SSo,RSo,E2,the,PSo,BSo,xO,ISo,NSo,qSo,C2,ahe,jSo,DSo,$O,GSo,OSo,VSo,w2,nhe,XSo,zSo,kO,QSo,WSo,HSo,A2,she,USo,JSo,SO,YSo,KSo,ZSo,L2,lhe,eRo,oRo,RO,rRo,tRo,aRo,y2,ihe,nRo,sRo,PO,lRo,iRo,dRo,x2,dhe,cRo,fRo,BO,mRo,gRo,hRo,$2,che,pRo,_Ro,IO,uRo,bRo,vRo,k2,fhe,FRo,TRo,NO,MRo,ERo,CRo,S2,mhe,wRo,ARo,qO,LRo,yRo,xRo,R2,$Ro,ghe,kRo,SRo,hhe,RRo,PRo,P2,_Xe,Ui,B2,phe,QL,BRo,_he,IRo,uXe,So,WL,NRo,Ji,qRo,jO,jRo,DRo,DO,GRo,ORo,VRo,HL,XRo,uhe,zRo,QRo,WRo,ct,UL,HRo,bhe,URo,JRo,Yi,YRo,vhe,KRo,ZRo,GO,ePo,oPo,rPo,I2,tPo,Ze,JL,aPo,Fhe,nPo,sPo,qa,lPo,The,iPo,dPo,Mhe,cPo,fPo,Ehe,mPo,gPo,hPo,W,N2,Che,pPo,_Po,OO,uPo,bPo,vPo,q2,whe,FPo,TPo,VO,MPo,EPo,CPo,j2,Ahe,wPo,APo,XO,LPo,yPo,xPo,D2,Lhe,$Po,kPo,zO,SPo,RPo,PPo,G2,yhe,BPo,IPo,QO,NPo,qPo,jPo,O2,xhe,DPo,GPo,WO,OPo,VPo,XPo,V2,$he,zPo,QPo,HO,WPo,HPo,UPo,X2,khe,JPo,YPo,UO,KPo,ZPo,eBo,z2,She,oBo,rBo,JO,tBo,aBo,nBo,Q2,Rhe,sBo,lBo,YO,iBo,dBo,cBo,W2,Phe,fBo,mBo,KO,gBo,hBo,pBo,H2,Bhe,_Bo,uBo,ZO,bBo,vBo,FBo,U2,Ihe,TBo,MBo,eV,EBo,CBo,wBo,J2,Nhe,ABo,LBo,oV,yBo,xBo,$Bo,Y2,qhe,kBo,SBo,rV,RBo,PBo,BBo,K2,jhe,IBo,NBo,tV,qBo,jBo,DBo,Z2,Dhe,GBo,OBo,aV,VBo,XBo,zBo,eb,Ghe,QBo,WBo,nV,HBo,UBo,JBo,ob,Ohe,YBo,KBo,sV,ZBo,eIo,oIo,rb,Vhe,rIo,tIo,lV,aIo,nIo,sIo,tb,Xhe,lIo,iIo,iV,dIo,cIo,fIo,ab,zhe,mIo,gIo,dV,hIo,pIo,_Io,nb,Qhe,uIo,bIo,cV,vIo,FIo,TIo,sb,Whe,MIo,EIo,fV,CIo,wIo,AIo,lb,Hhe,LIo,yIo,mV,xIo,$Io,kIo,ib,Uhe,SIo,RIo,gV,PIo,BIo,IIo,db,Jhe,NIo,qIo,hV,jIo,DIo,GIo,cb,Yhe,OIo,VIo,pV,XIo,zIo,QIo,fb,Khe,WIo,HIo,_V,UIo,JIo,YIo,mb,Zhe,KIo,ZIo,uV,eNo,oNo,rNo,gb,epe,tNo,aNo,bV,nNo,sNo,lNo,hb,ope,iNo,dNo,vV,cNo,fNo,mNo,pb,rpe,gNo,hNo,FV,pNo,_No,uNo,_b,tpe,bNo,vNo,ape,FNo,TNo,MNo,ub,npe,ENo,CNo,TV,wNo,ANo,LNo,bb,spe,yNo,xNo,MV,$No,kNo,SNo,vb,lpe,RNo,PNo,EV,BNo,INo,NNo,Fb,ipe,qNo,jNo,CV,DNo,GNo,ONo,Tb,VNo,dpe,XNo,zNo,cpe,QNo,WNo,Mb,bXe,Ki,Eb,fpe,YL,HNo,mpe,UNo,vXe,Ro,KL,JNo,Zi,YNo,wV,KNo,ZNo,AV,eqo,oqo,rqo,ZL,tqo,gpe,aqo,nqo,sqo,ft,ey,lqo,hpe,iqo,dqo,ed,cqo,ppe,fqo,mqo,LV,gqo,hqo,pqo,Cb,_qo,eo,oy,uqo,_pe,bqo,vqo,ja,Fqo,upe,Tqo,Mqo,bpe,Eqo,Cqo,vpe,wqo,Aqo,Lqo,pe,wb,Fpe,yqo,xqo,yV,$qo,kqo,Sqo,Ab,Tpe,Rqo,Pqo,xV,Bqo,Iqo,Nqo,Lb,Mpe,qqo,jqo,$V,Dqo,Gqo,Oqo,yb,Epe,Vqo,Xqo,kV,zqo,Qqo,Wqo,xb,Cpe,Hqo,Uqo,SV,Jqo,Yqo,Kqo,$b,wpe,Zqo,ejo,RV,ojo,rjo,tjo,kb,Ape,ajo,njo,PV,sjo,ljo,ijo,Sb,Lpe,djo,cjo,BV,fjo,mjo,gjo,Rb,ype,hjo,pjo,IV,_jo,ujo,bjo,Pb,xpe,vjo,Fjo,NV,Tjo,Mjo,Ejo,Bb,$pe,Cjo,wjo,qV,Ajo,Ljo,yjo,Ib,kpe,xjo,$jo,jV,kjo,Sjo,Rjo,Nb,Spe,Pjo,Bjo,DV,Ijo,Njo,qjo,qb,Rpe,jjo,Djo,GV,Gjo,Ojo,Vjo,jb,Ppe,Xjo,zjo,OV,Qjo,Wjo,Hjo,Db,Bpe,Ujo,Jjo,VV,Yjo,Kjo,Zjo,Gb,Ipe,eDo,oDo,XV,rDo,tDo,aDo,Ob,Npe,nDo,sDo,zV,lDo,iDo,dDo,Vb,cDo,qpe,fDo,mDo,jpe,gDo,hDo,Xb,FXe,od,zb,Dpe,ry,pDo,Gpe,_Do,TXe,Po,ty,uDo,rd,bDo,QV,vDo,FDo,WV,TDo,MDo,EDo,ay,CDo,Ope,wDo,ADo,LDo,mt,ny,yDo,Vpe,xDo,$Do,td,kDo,Xpe,SDo,RDo,HV,PDo,BDo,IDo,Qb,NDo,oo,sy,qDo,zpe,jDo,DDo,Da,GDo,Qpe,ODo,VDo,Wpe,XDo,zDo,Hpe,QDo,WDo,HDo,N,Wb,Upe,UDo,JDo,UV,YDo,KDo,ZDo,Hb,Jpe,eGo,oGo,JV,rGo,tGo,aGo,Ub,Ype,nGo,sGo,YV,lGo,iGo,dGo,Jb,Kpe,cGo,fGo,KV,mGo,gGo,hGo,Yb,Zpe,pGo,_Go,ZV,uGo,bGo,vGo,Kb,e_e,FGo,TGo,eX,MGo,EGo,CGo,Zb,o_e,wGo,AGo,oX,LGo,yGo,xGo,ev,r_e,$Go,kGo,rX,SGo,RGo,PGo,ov,t_e,BGo,IGo,tX,NGo,qGo,jGo,rv,a_e,DGo,GGo,aX,OGo,VGo,XGo,tv,n_e,zGo,QGo,nX,WGo,HGo,UGo,av,s_e,JGo,YGo,sX,KGo,ZGo,eOo,nv,l_e,oOo,rOo,lX,tOo,aOo,nOo,sv,i_e,sOo,lOo,iX,iOo,dOo,cOo,lv,d_e,fOo,mOo,dX,gOo,hOo,pOo,iv,c_e,_Oo,uOo,cX,bOo,vOo,FOo,dv,f_e,TOo,MOo,fX,EOo,COo,wOo,cv,m_e,AOo,LOo,mX,yOo,xOo,$Oo,fv,g_e,kOo,SOo,gX,ROo,POo,BOo,mv,h_e,IOo,NOo,hX,qOo,jOo,DOo,gv,p_e,GOo,OOo,pX,VOo,XOo,zOo,hv,__e,QOo,WOo,_X,HOo,UOo,JOo,pv,u_e,YOo,KOo,uX,ZOo,eVo,oVo,_v,b_e,rVo,tVo,bX,aVo,nVo,sVo,uv,v_e,lVo,iVo,vX,dVo,cVo,fVo,bv,F_e,mVo,gVo,FX,hVo,pVo,_Vo,vv,T_e,uVo,bVo,TX,vVo,FVo,TVo,Fv,M_e,MVo,EVo,MX,CVo,wVo,AVo,Tv,E_e,LVo,yVo,EX,xVo,$Vo,kVo,Mv,C_e,SVo,RVo,CX,PVo,BVo,IVo,Ev,w_e,NVo,qVo,wX,jVo,DVo,GVo,Cv,A_e,OVo,VVo,AX,XVo,zVo,QVo,wv,L_e,WVo,HVo,LX,UVo,JVo,YVo,Av,y_e,KVo,ZVo,yX,eXo,oXo,rXo,Lv,x_e,tXo,aXo,xX,nXo,sXo,lXo,yv,$_e,iXo,dXo,$X,cXo,fXo,mXo,xv,k_e,gXo,hXo,kX,pXo,_Xo,uXo,$v,S_e,bXo,vXo,SX,FXo,TXo,MXo,kv,R_e,EXo,CXo,RX,wXo,AXo,LXo,Sv,P_e,yXo,xXo,PX,$Xo,kXo,SXo,Rv,B_e,RXo,PXo,BX,BXo,IXo,NXo,Pv,I_e,qXo,jXo,IX,DXo,GXo,OXo,Bv,N_e,VXo,XXo,NX,zXo,QXo,WXo,Iv,q_e,HXo,UXo,qX,JXo,YXo,KXo,Nv,j_e,ZXo,ezo,jX,ozo,rzo,tzo,qv,D_e,azo,nzo,DX,szo,lzo,izo,jv,G_e,dzo,czo,GX,fzo,mzo,gzo,Dv,O_e,hzo,pzo,OX,_zo,uzo,bzo,Gv,V_e,vzo,Fzo,VX,Tzo,Mzo,Ezo,Ov,X_e,Czo,wzo,XX,Azo,Lzo,yzo,Vv,xzo,z_e,$zo,kzo,Q_e,Szo,Rzo,Xv,MXe,ad,zv,W_e,ly,Pzo,H_e,Bzo,EXe,Bo,iy,Izo,nd,Nzo,zX,qzo,jzo,QX,Dzo,Gzo,Ozo,dy,Vzo,U_e,Xzo,zzo,Qzo,gt,cy,Wzo,J_e,Hzo,Uzo,sd,Jzo,Y_e,Yzo,Kzo,WX,Zzo,eQo,oQo,Qv,rQo,ro,fy,tQo,K_e,aQo,nQo,Ga,sQo,Z_e,lQo,iQo,eue,dQo,cQo,oue,fQo,mQo,gQo,Z,Wv,rue,hQo,pQo,HX,_Qo,uQo,bQo,Hv,tue,vQo,FQo,UX,TQo,MQo,EQo,Uv,aue,CQo,wQo,JX,AQo,LQo,yQo,Jv,nue,xQo,$Qo,YX,kQo,SQo,RQo,Yv,sue,PQo,BQo,KX,IQo,NQo,qQo,Kv,lue,jQo,DQo,ZX,GQo,OQo,VQo,Zv,iue,XQo,zQo,ez,QQo,WQo,HQo,eF,due,UQo,JQo,oz,YQo,KQo,ZQo,oF,cue,eWo,oWo,rz,rWo,tWo,aWo,rF,fue,nWo,sWo,tz,lWo,iWo,dWo,tF,mue,cWo,fWo,az,mWo,gWo,hWo,aF,gue,pWo,_Wo,nz,uWo,bWo,vWo,nF,hue,FWo,TWo,sz,MWo,EWo,CWo,sF,pue,wWo,AWo,lz,LWo,yWo,xWo,lF,_ue,$Wo,kWo,iz,SWo,RWo,PWo,iF,uue,BWo,IWo,dz,NWo,qWo,jWo,dF,bue,DWo,GWo,cz,OWo,VWo,XWo,cF,vue,zWo,QWo,fz,WWo,HWo,UWo,fF,Fue,JWo,YWo,mz,KWo,ZWo,eHo,mF,Tue,oHo,rHo,gz,tHo,aHo,nHo,gF,Mue,sHo,lHo,hz,iHo,dHo,cHo,hF,Eue,fHo,mHo,pz,gHo,hHo,pHo,pF,Cue,_Ho,uHo,_z,bHo,vHo,FHo,_F,wue,THo,MHo,uz,EHo,CHo,wHo,uF,Aue,AHo,LHo,bz,yHo,xHo,$Ho,bF,Lue,kHo,SHo,vz,RHo,PHo,BHo,vF,yue,IHo,NHo,Fz,qHo,jHo,DHo,FF,xue,GHo,OHo,Tz,VHo,XHo,zHo,TF,$ue,QHo,WHo,Mz,HHo,UHo,JHo,MF,kue,YHo,KHo,Ez,ZHo,eUo,oUo,EF,rUo,Sue,tUo,aUo,Rue,nUo,sUo,CF,CXe,ld,wF,Pue,my,lUo,Bue,iUo,wXe,Io,gy,dUo,id,cUo,Cz,fUo,mUo,wz,gUo,hUo,pUo,hy,_Uo,Iue,uUo,bUo,vUo,ht,py,FUo,Nue,TUo,MUo,dd,EUo,que,CUo,wUo,Az,AUo,LUo,yUo,AF,xUo,to,_y,$Uo,jue,kUo,SUo,Oa,RUo,Due,PUo,BUo,Gue,IUo,NUo,Oue,qUo,jUo,DUo,No,LF,Vue,GUo,OUo,Lz,VUo,XUo,zUo,yF,Xue,QUo,WUo,yz,HUo,UUo,JUo,xF,zue,YUo,KUo,xz,ZUo,eJo,oJo,$F,Que,rJo,tJo,$z,aJo,nJo,sJo,kF,Wue,lJo,iJo,kz,dJo,cJo,fJo,SF,Hue,mJo,gJo,Sz,hJo,pJo,_Jo,RF,uJo,Uue,bJo,vJo,Jue,FJo,TJo,PF,AXe,cd,BF,Yue,uy,MJo,Kue,EJo,LXe,qo,by,CJo,fd,wJo,Rz,AJo,LJo,Pz,yJo,xJo,$Jo,vy,kJo,Zue,SJo,RJo,PJo,pt,Fy,BJo,e1e,IJo,NJo,md,qJo,o1e,jJo,DJo,Bz,GJo,OJo,VJo,IF,XJo,ao,Ty,zJo,r1e,QJo,WJo,Va,HJo,t1e,UJo,JJo,a1e,YJo,KJo,n1e,ZJo,eYo,oYo,U,NF,s1e,rYo,tYo,Iz,aYo,nYo,sYo,qF,l1e,lYo,iYo,Nz,dYo,cYo,fYo,jF,i1e,mYo,gYo,qz,hYo,pYo,_Yo,DF,d1e,uYo,bYo,jz,vYo,FYo,TYo,GF,c1e,MYo,EYo,Dz,CYo,wYo,AYo,OF,f1e,LYo,yYo,Gz,xYo,$Yo,kYo,VF,m1e,SYo,RYo,Oz,PYo,BYo,IYo,XF,g1e,NYo,qYo,Vz,jYo,DYo,GYo,zF,h1e,OYo,VYo,Xz,XYo,zYo,QYo,QF,p1e,WYo,HYo,zz,UYo,JYo,YYo,WF,_1e,KYo,ZYo,Qz,eKo,oKo,rKo,HF,u1e,tKo,aKo,Wz,nKo,sKo,lKo,UF,b1e,iKo,dKo,Hz,cKo,fKo,mKo,JF,v1e,gKo,hKo,Uz,pKo,_Ko,uKo,YF,F1e,bKo,vKo,Jz,FKo,TKo,MKo,KF,T1e,EKo,CKo,Yz,wKo,AKo,LKo,ZF,M1e,yKo,xKo,Kz,$Ko,kKo,SKo,eT,E1e,RKo,PKo,Zz,BKo,IKo,NKo,oT,C1e,qKo,jKo,eQ,DKo,GKo,OKo,rT,w1e,VKo,XKo,oQ,zKo,QKo,WKo,tT,A1e,HKo,UKo,rQ,JKo,YKo,KKo,aT,L1e,ZKo,eZo,tQ,oZo,rZo,tZo,nT,y1e,aZo,nZo,aQ,sZo,lZo,iZo,sT,x1e,dZo,cZo,nQ,fZo,mZo,gZo,lT,$1e,hZo,pZo,sQ,_Zo,uZo,bZo,iT,k1e,vZo,FZo,lQ,TZo,MZo,EZo,dT,S1e,CZo,wZo,iQ,AZo,LZo,yZo,cT,R1e,xZo,$Zo,dQ,kZo,SZo,RZo,fT,P1e,PZo,BZo,cQ,IZo,NZo,qZo,mT,B1e,jZo,DZo,fQ,GZo,OZo,VZo,gT,I1e,XZo,zZo,mQ,QZo,WZo,HZo,hT,N1e,UZo,JZo,gQ,YZo,KZo,ZZo,pT,q1e,eer,oer,hQ,rer,ter,aer,_T,j1e,ner,ser,pQ,ler,ier,der,uT,D1e,cer,fer,_Q,mer,ger,her,bT,G1e,per,_er,uQ,uer,ber,ver,vT,Fer,O1e,Ter,Mer,V1e,Eer,Cer,FT,yXe,gd,TT,X1e,My,wer,z1e,Aer,xXe,jo,Ey,Ler,hd,yer,bQ,xer,$er,vQ,ker,Ser,Rer,Cy,Per,Q1e,Ber,Ier,Ner,_t,wy,qer,W1e,jer,Der,pd,Ger,H1e,Oer,Ver,FQ,Xer,zer,Qer,MT,Wer,no,Ay,Her,U1e,Uer,Jer,Xa,Yer,J1e,Ker,Zer,Y1e,eor,oor,K1e,ror,tor,aor,V,ET,Z1e,nor,sor,TQ,lor,ior,dor,CT,e2e,cor,mor,MQ,gor,hor,por,wT,o2e,_or,uor,EQ,bor,vor,For,AT,r2e,Tor,Mor,CQ,Eor,Cor,wor,LT,t2e,Aor,Lor,wQ,yor,xor,$or,yT,a2e,kor,Sor,AQ,Ror,Por,Bor,xT,n2e,Ior,Nor,LQ,qor,jor,Dor,$T,s2e,Gor,Oor,yQ,Vor,Xor,zor,kT,l2e,Qor,Wor,xQ,Hor,Uor,Jor,ST,i2e,Yor,Kor,$Q,Zor,err,orr,RT,d2e,rrr,trr,kQ,arr,nrr,srr,PT,c2e,lrr,irr,SQ,drr,crr,frr,BT,f2e,mrr,grr,RQ,hrr,prr,_rr,IT,m2e,urr,brr,PQ,vrr,Frr,Trr,NT,g2e,Mrr,Err,BQ,Crr,wrr,Arr,qT,h2e,Lrr,yrr,IQ,xrr,$rr,krr,jT,p2e,Srr,Rrr,NQ,Prr,Brr,Irr,DT,_2e,Nrr,qrr,qQ,jrr,Drr,Grr,GT,u2e,Orr,Vrr,jQ,Xrr,zrr,Qrr,OT,b2e,Wrr,Hrr,DQ,Urr,Jrr,Yrr,VT,v2e,Krr,Zrr,GQ,etr,otr,rtr,XT,F2e,ttr,atr,OQ,ntr,str,ltr,zT,T2e,itr,dtr,VQ,ctr,ftr,mtr,QT,M2e,gtr,htr,XQ,ptr,_tr,utr,WT,E2e,btr,vtr,zQ,Ftr,Ttr,Mtr,HT,C2e,Etr,Ctr,QQ,wtr,Atr,Ltr,UT,w2e,ytr,xtr,WQ,$tr,ktr,Str,JT,A2e,Rtr,Ptr,HQ,Btr,Itr,Ntr,YT,L2e,qtr,jtr,UQ,Dtr,Gtr,Otr,KT,y2e,Vtr,Xtr,JQ,ztr,Qtr,Wtr,ZT,x2e,Htr,Utr,YQ,Jtr,Ytr,Ktr,e7,$2e,Ztr,ear,KQ,oar,rar,tar,o7,k2e,aar,nar,ZQ,sar,lar,iar,r7,S2e,dar,car,eW,far,mar,gar,t7,R2e,har,par,oW,_ar,uar,bar,a7,P2e,Far,Tar,rW,Mar,Ear,Car,n7,B2e,war,Aar,tW,Lar,yar,xar,s7,I2e,$ar,kar,aW,Sar,Rar,Par,l7,N2e,Bar,Iar,nW,Nar,qar,jar,i7,q2e,Dar,Gar,sW,Oar,Var,Xar,d7,j2e,zar,Qar,lW,War,Har,Uar,c7,D2e,Jar,Yar,iW,Kar,Zar,enr,f7,onr,G2e,rnr,tnr,O2e,anr,nnr,m7,$Xe,_d,g7,V2e,Ly,snr,X2e,lnr,kXe,Do,yy,inr,ud,dnr,dW,cnr,fnr,cW,mnr,gnr,hnr,xy,pnr,z2e,_nr,unr,bnr,ut,$y,vnr,Q2e,Fnr,Tnr,bd,Mnr,W2e,Enr,Cnr,fW,wnr,Anr,Lnr,h7,ynr,so,ky,xnr,H2e,$nr,knr,za,Snr,U2e,Rnr,Pnr,J2e,Bnr,Inr,Y2e,Nnr,qnr,jnr,K2e,p7,Z2e,Dnr,Gnr,mW,Onr,Vnr,Xnr,_7,znr,ebe,Qnr,Wnr,obe,Hnr,Unr,u7,SXe,vd,b7,rbe,Sy,Jnr,tbe,Ynr,RXe,Go,Ry,Knr,Fd,Znr,gW,esr,osr,hW,rsr,tsr,asr,Py,nsr,abe,ssr,lsr,isr,bt,By,dsr,nbe,csr,fsr,Td,msr,sbe,gsr,hsr,pW,psr,_sr,usr,v7,bsr,lo,Iy,vsr,lbe,Fsr,Tsr,Qa,Msr,ibe,Esr,Csr,dbe,wsr,Asr,cbe,Lsr,ysr,xsr,ve,F7,fbe,$sr,ksr,_W,Ssr,Rsr,Psr,T7,mbe,Bsr,Isr,uW,Nsr,qsr,jsr,M7,gbe,Dsr,Gsr,bW,Osr,Vsr,Xsr,E7,hbe,zsr,Qsr,vW,Wsr,Hsr,Usr,Ws,pbe,Jsr,Ysr,FW,Ksr,Zsr,TW,elr,olr,rlr,C7,_be,tlr,alr,MW,nlr,slr,llr,Hs,ube,ilr,dlr,EW,clr,flr,CW,mlr,glr,hlr,w7,bbe,plr,_lr,wW,ulr,blr,vlr,vt,vbe,Flr,Tlr,AW,Mlr,Elr,LW,Clr,wlr,yW,Alr,Llr,ylr,A7,Fbe,xlr,$lr,xW,klr,Slr,Rlr,L7,Tbe,Plr,Blr,$W,Ilr,Nlr,qlr,y7,Mbe,jlr,Dlr,kW,Glr,Olr,Vlr,x7,Ebe,Xlr,zlr,SW,Qlr,Wlr,Hlr,$7,Cbe,Ulr,Jlr,RW,Ylr,Klr,Zlr,k7,wbe,eir,oir,PW,rir,tir,air,S7,Abe,nir,sir,BW,lir,iir,dir,R7,cir,Lbe,fir,mir,ybe,gir,hir,P7,PXe,Md,B7,xbe,Ny,pir,$be,_ir,BXe,Oo,qy,uir,Ed,bir,IW,vir,Fir,NW,Tir,Mir,Eir,jy,Cir,kbe,wir,Air,Lir,Ft,Dy,yir,Sbe,xir,$ir,Cd,kir,Rbe,Sir,Rir,qW,Pir,Bir,Iir,I7,Nir,io,Gy,qir,Pbe,jir,Dir,Wa,Gir,Bbe,Oir,Vir,Ibe,Xir,zir,Nbe,Qir,Wir,Hir,qbe,N7,jbe,Uir,Jir,jW,Yir,Kir,Zir,q7,edr,Dbe,odr,rdr,Gbe,tdr,adr,j7,IXe,wd,D7,Obe,Oy,ndr,Vbe,sdr,NXe,Vo,Vy,ldr,Ad,idr,DW,ddr,cdr,GW,fdr,mdr,gdr,Xy,hdr,Xbe,pdr,_dr,udr,Tt,zy,bdr,zbe,vdr,Fdr,Ld,Tdr,Qbe,Mdr,Edr,OW,Cdr,wdr,Adr,G7,Ldr,co,Qy,ydr,Wbe,xdr,$dr,Ha,kdr,Hbe,Sdr,Rdr,Ube,Pdr,Bdr,Jbe,Idr,Ndr,qdr,Ybe,O7,Kbe,jdr,Ddr,VW,Gdr,Odr,Vdr,V7,Xdr,Zbe,zdr,Qdr,eve,Wdr,Hdr,X7,qXe,yd,z7,ove,Wy,Udr,rve,Jdr,jXe,Xo,Hy,Ydr,xd,Kdr,XW,Zdr,ecr,zW,ocr,rcr,tcr,Uy,acr,tve,ncr,scr,lcr,Mt,Jy,icr,ave,dcr,ccr,$d,fcr,nve,mcr,gcr,QW,hcr,pcr,_cr,Q7,ucr,fo,Yy,bcr,sve,vcr,Fcr,Ua,Tcr,lve,Mcr,Ecr,ive,Ccr,wcr,dve,Acr,Lcr,ycr,Pe,W7,cve,xcr,$cr,WW,kcr,Scr,Rcr,H7,fve,Pcr,Bcr,HW,Icr,Ncr,qcr,U7,mve,jcr,Dcr,UW,Gcr,Ocr,Vcr,J7,gve,Xcr,zcr,JW,Qcr,Wcr,Hcr,Y7,hve,Ucr,Jcr,YW,Ycr,Kcr,Zcr,K7,pve,efr,ofr,KW,rfr,tfr,afr,Z7,_ve,nfr,sfr,ZW,lfr,ifr,dfr,e8,uve,cfr,ffr,eH,mfr,gfr,hfr,o8,bve,pfr,_fr,oH,ufr,bfr,vfr,r8,Ffr,vve,Tfr,Mfr,Fve,Efr,Cfr,t8,DXe,kd,a8,Tve,Ky,wfr,Mve,Afr,GXe,zo,Zy,Lfr,Sd,yfr,rH,xfr,$fr,tH,kfr,Sfr,Rfr,e9,Pfr,Eve,Bfr,Ifr,Nfr,Et,o9,qfr,Cve,jfr,Dfr,Rd,Gfr,wve,Ofr,Vfr,aH,Xfr,zfr,Qfr,n8,Wfr,mo,r9,Hfr,Ave,Ufr,Jfr,Ja,Yfr,Lve,Kfr,Zfr,yve,emr,omr,xve,rmr,tmr,amr,et,s8,$ve,nmr,smr,nH,lmr,imr,dmr,l8,kve,cmr,fmr,sH,mmr,gmr,hmr,i8,Sve,pmr,_mr,lH,umr,bmr,vmr,d8,Rve,Fmr,Tmr,iH,Mmr,Emr,Cmr,c8,Pve,wmr,Amr,dH,Lmr,ymr,xmr,f8,$mr,Bve,kmr,Smr,Ive,Rmr,Pmr,m8,OXe,Pd,g8,Nve,t9,Bmr,qve,Imr,VXe,Qo,a9,Nmr,Bd,qmr,cH,jmr,Dmr,fH,Gmr,Omr,Vmr,n9,Xmr,jve,zmr,Qmr,Wmr,Ct,s9,Hmr,Dve,Umr,Jmr,Id,Ymr,Gve,Kmr,Zmr,mH,egr,ogr,rgr,h8,tgr,go,l9,agr,Ove,ngr,sgr,Ya,lgr,Vve,igr,dgr,Xve,cgr,fgr,zve,mgr,ggr,hgr,Le,p8,Qve,pgr,_gr,gH,ugr,bgr,vgr,_8,Wve,Fgr,Tgr,hH,Mgr,Egr,Cgr,u8,Hve,wgr,Agr,pH,Lgr,ygr,xgr,b8,Uve,$gr,kgr,_H,Sgr,Rgr,Pgr,v8,Jve,Bgr,Igr,uH,Ngr,qgr,jgr,F8,Yve,Dgr,Ggr,bH,Ogr,Vgr,Xgr,T8,Kve,zgr,Qgr,vH,Wgr,Hgr,Ugr,M8,Zve,Jgr,Ygr,FH,Kgr,Zgr,ehr,E8,eFe,ohr,rhr,TH,thr,ahr,nhr,C8,oFe,shr,lhr,MH,ihr,dhr,chr,w8,fhr,rFe,mhr,ghr,tFe,hhr,phr,A8,XXe,Nd,L8,aFe,i9,_hr,nFe,uhr,zXe,Wo,d9,bhr,qd,vhr,EH,Fhr,Thr,CH,Mhr,Ehr,Chr,c9,whr,sFe,Ahr,Lhr,yhr,wt,f9,xhr,lFe,$hr,khr,jd,Shr,iFe,Rhr,Phr,wH,Bhr,Ihr,Nhr,y8,qhr,ho,m9,jhr,dFe,Dhr,Ghr,Ka,Ohr,cFe,Vhr,Xhr,fFe,zhr,Qhr,mFe,Whr,Hhr,Uhr,g9,x8,gFe,Jhr,Yhr,AH,Khr,Zhr,epr,$8,hFe,opr,rpr,LH,tpr,apr,npr,k8,spr,pFe,lpr,ipr,_Fe,dpr,cpr,S8,QXe,Dd,R8,uFe,h9,fpr,bFe,mpr,WXe,Ho,p9,gpr,Gd,hpr,yH,ppr,_pr,xH,upr,bpr,vpr,_9,Fpr,vFe,Tpr,Mpr,Epr,At,u9,Cpr,FFe,wpr,Apr,Od,Lpr,TFe,ypr,xpr,$H,$pr,kpr,Spr,P8,Rpr,po,b9,Ppr,MFe,Bpr,Ipr,Za,Npr,EFe,qpr,jpr,CFe,Dpr,Gpr,wFe,Opr,Vpr,Xpr,ot,B8,AFe,zpr,Qpr,kH,Wpr,Hpr,Upr,I8,LFe,Jpr,Ypr,SH,Kpr,Zpr,e_r,N8,yFe,o_r,r_r,RH,t_r,a_r,n_r,q8,xFe,s_r,l_r,PH,i_r,d_r,c_r,j8,$Fe,f_r,m_r,BH,g_r,h_r,p_r,D8,__r,kFe,u_r,b_r,SFe,v_r,F_r,G8,HXe,Vd,O8,RFe,v9,T_r,PFe,M_r,UXe,Uo,F9,E_r,Xd,C_r,IH,w_r,A_r,NH,L_r,y_r,x_r,T9,$_r,BFe,k_r,S_r,R_r,Lt,M9,P_r,IFe,B_r,I_r,zd,N_r,NFe,q_r,j_r,qH,D_r,G_r,O_r,V8,V_r,_o,E9,X_r,qFe,z_r,Q_r,en,W_r,jFe,H_r,U_r,DFe,J_r,Y_r,GFe,K_r,Z_r,eur,Qd,X8,OFe,our,rur,jH,tur,aur,nur,z8,VFe,sur,lur,DH,iur,dur,cur,Q8,XFe,fur,mur,GH,gur,hur,pur,W8,_ur,zFe,uur,bur,QFe,vur,Fur,H8,JXe,Wd,U8,WFe,C9,Tur,HFe,Mur,YXe,Jo,w9,Eur,Hd,Cur,OH,wur,Aur,VH,Lur,yur,xur,A9,$ur,UFe,kur,Sur,Rur,yt,L9,Pur,JFe,Bur,Iur,Ud,Nur,YFe,qur,jur,XH,Dur,Gur,Our,J8,Vur,uo,y9,Xur,KFe,zur,Qur,on,Wur,ZFe,Hur,Uur,eTe,Jur,Yur,oTe,Kur,Zur,e1r,Jd,Y8,rTe,o1r,r1r,zH,t1r,a1r,n1r,K8,tTe,s1r,l1r,QH,i1r,d1r,c1r,Z8,aTe,f1r,m1r,WH,g1r,h1r,p1r,eM,_1r,nTe,u1r,b1r,sTe,v1r,F1r,oM,KXe,Yd,rM,lTe,x9,T1r,iTe,M1r,ZXe,Yo,$9,E1r,Kd,C1r,HH,w1r,A1r,UH,L1r,y1r,x1r,k9,$1r,dTe,k1r,S1r,R1r,xt,S9,P1r,cTe,B1r,I1r,Zd,N1r,fTe,q1r,j1r,JH,D1r,G1r,O1r,tM,V1r,bo,R9,X1r,mTe,z1r,Q1r,rn,W1r,gTe,H1r,U1r,hTe,J1r,Y1r,pTe,K1r,Z1r,e2r,_Te,aM,uTe,o2r,r2r,YH,t2r,a2r,n2r,nM,s2r,bTe,l2r,i2r,vTe,d2r,c2r,sM,eze,ec,lM,FTe,P9,f2r,TTe,m2r,oze,Ko,B9,g2r,oc,h2r,KH,p2r,_2r,ZH,u2r,b2r,v2r,I9,F2r,MTe,T2r,M2r,E2r,$t,N9,C2r,ETe,w2r,A2r,rc,L2r,CTe,y2r,x2r,eU,$2r,k2r,S2r,iM,R2r,vo,q9,P2r,wTe,B2r,I2r,tn,N2r,ATe,q2r,j2r,LTe,D2r,G2r,yTe,O2r,V2r,X2r,rt,dM,xTe,z2r,Q2r,oU,W2r,H2r,U2r,cM,$Te,J2r,Y2r,rU,K2r,Z2r,ebr,fM,kTe,obr,rbr,tU,tbr,abr,nbr,mM,STe,sbr,lbr,aU,ibr,dbr,cbr,gM,RTe,fbr,mbr,nU,gbr,hbr,pbr,hM,_br,PTe,ubr,bbr,BTe,vbr,Fbr,pM,rze,tc,_M,ITe,j9,Tbr,NTe,Mbr,tze,Zo,D9,Ebr,ac,Cbr,sU,wbr,Abr,lU,Lbr,ybr,xbr,G9,$br,qTe,kbr,Sbr,Rbr,kt,O9,Pbr,jTe,Bbr,Ibr,nc,Nbr,DTe,qbr,jbr,iU,Dbr,Gbr,Obr,uM,Vbr,Fo,V9,Xbr,GTe,zbr,Qbr,an,Wbr,OTe,Hbr,Ubr,VTe,Jbr,Ybr,XTe,Kbr,Zbr,evr,zTe,bM,QTe,ovr,rvr,dU,tvr,avr,nvr,vM,svr,WTe,lvr,ivr,HTe,dvr,cvr,FM,aze,sc,TM,UTe,X9,fvr,JTe,mvr,nze,er,z9,gvr,lc,hvr,cU,pvr,_vr,fU,uvr,bvr,vvr,Q9,Fvr,YTe,Tvr,Mvr,Evr,St,W9,Cvr,KTe,wvr,Avr,ic,Lvr,ZTe,yvr,xvr,mU,$vr,kvr,Svr,MM,Rvr,yr,H9,Pvr,e7e,Bvr,Ivr,nn,Nvr,o7e,qvr,jvr,r7e,Dvr,Gvr,t7e,Ovr,Vvr,Xvr,j,EM,a7e,zvr,Qvr,gU,Wvr,Hvr,Uvr,CM,n7e,Jvr,Yvr,hU,Kvr,Zvr,eFr,wM,s7e,oFr,rFr,pU,tFr,aFr,nFr,AM,l7e,sFr,lFr,_U,iFr,dFr,cFr,LM,i7e,fFr,mFr,uU,gFr,hFr,pFr,yM,d7e,_Fr,uFr,bU,bFr,vFr,FFr,xM,c7e,TFr,MFr,vU,EFr,CFr,wFr,$M,f7e,AFr,LFr,FU,yFr,xFr,$Fr,kM,m7e,kFr,SFr,TU,RFr,PFr,BFr,SM,g7e,IFr,NFr,MU,qFr,jFr,DFr,RM,h7e,GFr,OFr,EU,VFr,XFr,zFr,PM,p7e,QFr,WFr,CU,HFr,UFr,JFr,BM,_7e,YFr,KFr,wU,ZFr,eTr,oTr,IM,u7e,rTr,tTr,AU,aTr,nTr,sTr,NM,b7e,lTr,iTr,LU,dTr,cTr,fTr,qM,v7e,mTr,gTr,yU,hTr,pTr,_Tr,jM,F7e,uTr,bTr,xU,vTr,FTr,TTr,Us,T7e,MTr,ETr,$U,CTr,wTr,kU,ATr,LTr,yTr,DM,M7e,xTr,$Tr,SU,kTr,STr,RTr,GM,E7e,PTr,BTr,RU,ITr,NTr,qTr,OM,C7e,jTr,DTr,PU,GTr,OTr,VTr,VM,w7e,XTr,zTr,BU,QTr,WTr,HTr,XM,A7e,UTr,JTr,IU,YTr,KTr,ZTr,zM,L7e,e7r,o7r,NU,r7r,t7r,a7r,QM,y7e,n7r,s7r,qU,l7r,i7r,d7r,WM,x7e,c7r,f7r,jU,m7r,g7r,h7r,HM,$7e,p7r,_7r,DU,u7r,b7r,v7r,UM,k7e,F7r,T7r,GU,M7r,E7r,C7r,JM,S7e,w7r,A7r,OU,L7r,y7r,x7r,YM,R7e,$7r,k7r,VU,S7r,R7r,P7r,KM,P7e,B7r,I7r,XU,N7r,q7r,j7r,ZM,B7e,D7r,G7r,zU,O7r,V7r,X7r,e4,I7e,z7r,Q7r,QU,W7r,H7r,U7r,o4,N7e,J7r,Y7r,WU,K7r,Z7r,e8r,r4,q7e,o8r,r8r,HU,t8r,a8r,n8r,t4,j7e,s8r,l8r,UU,i8r,d8r,c8r,a4,D7e,f8r,m8r,JU,g8r,h8r,p8r,n4,G7e,_8r,u8r,YU,b8r,v8r,F8r,s4,O7e,T8r,M8r,KU,E8r,C8r,w8r,l4,V7e,A8r,L8r,ZU,y8r,x8r,$8r,i4,X7e,k8r,S8r,eJ,R8r,P8r,B8r,d4,z7e,I8r,N8r,oJ,q8r,j8r,D8r,c4,Q7e,G8r,O8r,rJ,V8r,X8r,z8r,f4,W7e,Q8r,W8r,tJ,H8r,U8r,J8r,m4,H7e,Y8r,K8r,aJ,Z8r,eMr,oMr,g4,U7e,rMr,tMr,nJ,aMr,nMr,sMr,h4,J7e,lMr,iMr,sJ,dMr,cMr,fMr,p4,Y7e,mMr,gMr,lJ,hMr,pMr,_Mr,_4,sze,dc,u4,K7e,U9,uMr,Z7e,bMr,lze,or,J9,vMr,cc,FMr,iJ,TMr,MMr,dJ,EMr,CMr,wMr,Y9,AMr,e8e,LMr,yMr,xMr,Rt,K9,$Mr,o8e,kMr,SMr,fc,RMr,r8e,PMr,BMr,cJ,IMr,NMr,qMr,b4,jMr,xr,Z9,DMr,t8e,GMr,OMr,sn,VMr,a8e,XMr,zMr,n8e,QMr,WMr,s8e,HMr,UMr,JMr,se,v4,l8e,YMr,KMr,fJ,ZMr,e4r,o4r,F4,i8e,r4r,t4r,mJ,a4r,n4r,s4r,T4,d8e,l4r,i4r,gJ,d4r,c4r,f4r,M4,c8e,m4r,g4r,hJ,h4r,p4r,_4r,E4,f8e,u4r,b4r,pJ,v4r,F4r,T4r,C4,m8e,M4r,E4r,_J,C4r,w4r,A4r,w4,g8e,L4r,y4r,uJ,x4r,$4r,k4r,A4,h8e,S4r,R4r,bJ,P4r,B4r,I4r,L4,p8e,N4r,q4r,vJ,j4r,D4r,G4r,y4,_8e,O4r,V4r,FJ,X4r,z4r,Q4r,x4,u8e,W4r,H4r,TJ,U4r,J4r,Y4r,$4,b8e,K4r,Z4r,MJ,eEr,oEr,rEr,k4,v8e,tEr,aEr,EJ,nEr,sEr,lEr,S4,F8e,iEr,dEr,CJ,cEr,fEr,mEr,R4,T8e,gEr,hEr,wJ,pEr,_Er,uEr,P4,M8e,bEr,vEr,AJ,FEr,TEr,MEr,B4,E8e,EEr,CEr,LJ,wEr,AEr,LEr,I4,C8e,yEr,xEr,yJ,$Er,kEr,SEr,N4,w8e,REr,PEr,xJ,BEr,IEr,NEr,q4,A8e,qEr,jEr,$J,DEr,GEr,OEr,j4,L8e,VEr,XEr,kJ,zEr,QEr,WEr,D4,y8e,HEr,UEr,SJ,JEr,YEr,KEr,G4,x8e,ZEr,eCr,RJ,oCr,rCr,tCr,O4,ize,mc,V4,$8e,ex,aCr,k8e,nCr,dze,rr,ox,sCr,gc,lCr,PJ,iCr,dCr,BJ,cCr,fCr,mCr,rx,gCr,S8e,hCr,pCr,_Cr,Pt,tx,uCr,R8e,bCr,vCr,hc,FCr,P8e,TCr,MCr,IJ,ECr,CCr,wCr,X4,ACr,$r,ax,LCr,B8e,yCr,xCr,ln,$Cr,I8e,kCr,SCr,N8e,RCr,PCr,q8e,BCr,ICr,NCr,Me,z4,j8e,qCr,jCr,NJ,DCr,GCr,OCr,Q4,D8e,VCr,XCr,qJ,zCr,QCr,WCr,W4,G8e,HCr,UCr,jJ,JCr,YCr,KCr,H4,O8e,ZCr,e3r,DJ,o3r,r3r,t3r,U4,V8e,a3r,n3r,GJ,s3r,l3r,i3r,J4,X8e,d3r,c3r,OJ,f3r,m3r,g3r,Y4,z8e,h3r,p3r,VJ,_3r,u3r,b3r,K4,Q8e,v3r,F3r,XJ,T3r,M3r,E3r,Z4,W8e,C3r,w3r,zJ,A3r,L3r,y3r,eE,H8e,x3r,$3r,QJ,k3r,S3r,R3r,oE,U8e,P3r,B3r,WJ,I3r,N3r,q3r,rE,J8e,j3r,D3r,HJ,G3r,O3r,V3r,tE,Y8e,X3r,z3r,UJ,Q3r,W3r,H3r,aE,cze,pc,nE,K8e,nx,U3r,Z8e,J3r,fze,tr,sx,Y3r,_c,K3r,JJ,Z3r,e5r,YJ,o5r,r5r,t5r,lx,a5r,eMe,n5r,s5r,l5r,Bt,ix,i5r,oMe,d5r,c5r,uc,f5r,rMe,m5r,g5r,KJ,h5r,p5r,_5r,sE,u5r,kr,dx,b5r,tMe,v5r,F5r,dn,T5r,aMe,M5r,E5r,nMe,C5r,w5r,sMe,A5r,L5r,y5r,tt,lE,lMe,x5r,$5r,ZJ,k5r,S5r,R5r,iE,iMe,P5r,B5r,eY,I5r,N5r,q5r,dE,dMe,j5r,D5r,oY,G5r,O5r,V5r,cE,cMe,X5r,z5r,rY,Q5r,W5r,H5r,fE,fMe,U5r,J5r,tY,Y5r,K5r,Z5r,mE,mze,bc,gE,mMe,cx,e0r,gMe,o0r,gze,ar,fx,r0r,vc,t0r,aY,a0r,n0r,nY,s0r,l0r,i0r,mx,d0r,hMe,c0r,f0r,m0r,It,gx,g0r,pMe,h0r,p0r,Fc,_0r,_Me,u0r,b0r,sY,v0r,F0r,T0r,hE,M0r,Sr,hx,E0r,uMe,C0r,w0r,cn,A0r,bMe,L0r,y0r,vMe,x0r,$0r,FMe,k0r,S0r,R0r,ie,pE,TMe,P0r,B0r,lY,I0r,N0r,q0r,_E,MMe,j0r,D0r,iY,G0r,O0r,V0r,uE,EMe,X0r,z0r,dY,Q0r,W0r,H0r,bE,CMe,U0r,J0r,cY,Y0r,K0r,Z0r,vE,wMe,ewr,owr,fY,rwr,twr,awr,FE,AMe,nwr,swr,mY,lwr,iwr,dwr,TE,LMe,cwr,fwr,gY,mwr,gwr,hwr,ME,yMe,pwr,_wr,hY,uwr,bwr,vwr,EE,xMe,Fwr,Twr,pY,Mwr,Ewr,Cwr,CE,$Me,wwr,Awr,_Y,Lwr,ywr,xwr,wE,kMe,$wr,kwr,uY,Swr,Rwr,Pwr,AE,SMe,Bwr,Iwr,bY,Nwr,qwr,jwr,LE,RMe,Dwr,Gwr,vY,Owr,Vwr,Xwr,yE,PMe,zwr,Qwr,FY,Wwr,Hwr,Uwr,xE,BMe,Jwr,Ywr,TY,Kwr,Zwr,eAr,$E,IMe,oAr,rAr,MY,tAr,aAr,nAr,kE,NMe,sAr,lAr,EY,iAr,dAr,cAr,SE,qMe,fAr,mAr,CY,gAr,hAr,pAr,RE,jMe,_Ar,uAr,wY,bAr,vAr,FAr,PE,DMe,TAr,MAr,AY,EAr,CAr,wAr,BE,hze,Tc,IE,GMe,px,AAr,OMe,LAr,pze,nr,_x,yAr,Mc,xAr,LY,$Ar,kAr,yY,SAr,RAr,PAr,ux,BAr,VMe,IAr,NAr,qAr,Nt,bx,jAr,XMe,DAr,GAr,Ec,OAr,zMe,VAr,XAr,xY,zAr,QAr,WAr,NE,HAr,Rr,vx,UAr,QMe,JAr,YAr,fn,KAr,WMe,ZAr,e6r,HMe,o6r,r6r,UMe,t6r,a6r,n6r,ye,qE,JMe,s6r,l6r,$Y,i6r,d6r,c6r,jE,YMe,f6r,m6r,kY,g6r,h6r,p6r,DE,KMe,_6r,u6r,SY,b6r,v6r,F6r,GE,ZMe,T6r,M6r,RY,E6r,C6r,w6r,OE,e4e,A6r,L6r,PY,y6r,x6r,$6r,VE,o4e,k6r,S6r,BY,R6r,P6r,B6r,XE,r4e,I6r,N6r,IY,q6r,j6r,D6r,zE,t4e,G6r,O6r,NY,V6r,X6r,z6r,QE,a4e,Q6r,W6r,qY,H6r,U6r,J6r,WE,n4e,Y6r,K6r,jY,Z6r,eLr,oLr,HE,_ze,Cc,UE,s4e,Fx,rLr,l4e,tLr,uze,sr,Tx,aLr,wc,nLr,DY,sLr,lLr,GY,iLr,dLr,cLr,Mx,fLr,i4e,mLr,gLr,hLr,qt,Ex,pLr,d4e,_Lr,uLr,Ac,bLr,c4e,vLr,FLr,OY,TLr,MLr,ELr,JE,CLr,Pr,Cx,wLr,f4e,ALr,LLr,mn,yLr,m4e,xLr,$Lr,g4e,kLr,SLr,h4e,RLr,PLr,BLr,te,YE,p4e,ILr,NLr,VY,qLr,jLr,DLr,KE,_4e,GLr,OLr,XY,VLr,XLr,zLr,ZE,u4e,QLr,WLr,zY,HLr,ULr,JLr,eC,b4e,YLr,KLr,QY,ZLr,eyr,oyr,oC,v4e,ryr,tyr,WY,ayr,nyr,syr,rC,F4e,lyr,iyr,HY,dyr,cyr,fyr,tC,T4e,myr,gyr,UY,hyr,pyr,_yr,aC,M4e,uyr,byr,JY,vyr,Fyr,Tyr,nC,E4e,Myr,Eyr,YY,Cyr,wyr,Ayr,sC,C4e,Lyr,yyr,KY,xyr,$yr,kyr,lC,w4e,Syr,Ryr,ZY,Pyr,Byr,Iyr,iC,A4e,Nyr,qyr,eK,jyr,Dyr,Gyr,dC,L4e,Oyr,Vyr,oK,Xyr,zyr,Qyr,cC,y4e,Wyr,Hyr,rK,Uyr,Jyr,Yyr,fC,x4e,Kyr,Zyr,tK,e9r,o9r,r9r,mC,$4e,t9r,a9r,aK,n9r,s9r,l9r,gC,k4e,i9r,d9r,nK,c9r,f9r,m9r,hC,S4e,g9r,h9r,sK,p9r,_9r,u9r,pC,R4e,b9r,v9r,lK,F9r,T9r,M9r,_C,P4e,E9r,C9r,iK,w9r,A9r,L9r,uC,B4e,y9r,x9r,dK,$9r,k9r,S9r,bC,I4e,R9r,P9r,cK,B9r,I9r,N9r,vC,N4e,q9r,j9r,fK,D9r,G9r,O9r,FC,q4e,V9r,X9r,mK,z9r,Q9r,W9r,TC,j4e,H9r,U9r,gK,J9r,Y9r,K9r,MC,D4e,Z9r,exr,hK,oxr,rxr,txr,EC,bze,Lc,CC,G4e,wx,axr,O4e,nxr,vze,lr,Ax,sxr,yc,lxr,pK,ixr,dxr,_K,cxr,fxr,mxr,Lx,gxr,V4e,hxr,pxr,_xr,jt,yx,uxr,X4e,bxr,vxr,xc,Fxr,z4e,Txr,Mxr,uK,Exr,Cxr,wxr,wC,Axr,Br,xx,Lxr,Q4e,yxr,xxr,gn,$xr,W4e,kxr,Sxr,H4e,Rxr,Pxr,U4e,Bxr,Ixr,Nxr,_e,AC,J4e,qxr,jxr,bK,Dxr,Gxr,Oxr,LC,Y4e,Vxr,Xxr,vK,zxr,Qxr,Wxr,yC,K4e,Hxr,Uxr,FK,Jxr,Yxr,Kxr,xC,Z4e,Zxr,e$r,TK,o$r,r$r,t$r,$C,eEe,a$r,n$r,MK,s$r,l$r,i$r,kC,oEe,d$r,c$r,EK,f$r,m$r,g$r,SC,rEe,h$r,p$r,CK,_$r,u$r,b$r,RC,tEe,v$r,F$r,wK,T$r,M$r,E$r,PC,aEe,C$r,w$r,AK,A$r,L$r,y$r,BC,nEe,x$r,$$r,LK,k$r,S$r,R$r,IC,sEe,P$r,B$r,yK,I$r,N$r,q$r,NC,lEe,j$r,D$r,xK,G$r,O$r,V$r,qC,iEe,X$r,z$r,$K,Q$r,W$r,H$r,jC,dEe,U$r,J$r,kK,Y$r,K$r,Z$r,DC,cEe,ekr,okr,SK,rkr,tkr,akr,GC,fEe,nkr,skr,RK,lkr,ikr,dkr,OC,mEe,ckr,fkr,PK,mkr,gkr,hkr,VC,Fze,$c,XC,gEe,$x,pkr,hEe,_kr,Tze,ir,kx,ukr,kc,bkr,BK,vkr,Fkr,IK,Tkr,Mkr,Ekr,Sx,Ckr,pEe,wkr,Akr,Lkr,Dt,Rx,ykr,_Ee,xkr,$kr,Sc,kkr,uEe,Skr,Rkr,NK,Pkr,Bkr,Ikr,zC,Nkr,Ir,Px,qkr,bEe,jkr,Dkr,hn,Gkr,vEe,Okr,Vkr,FEe,Xkr,zkr,TEe,Qkr,Wkr,Hkr,Bx,QC,MEe,Ukr,Jkr,qK,Ykr,Kkr,Zkr,WC,EEe,eSr,oSr,jK,rSr,tSr,aSr,HC,Mze,Rc,UC,CEe,Ix,nSr,wEe,sSr,Eze,dr,Nx,lSr,Pc,iSr,DK,dSr,cSr,GK,fSr,mSr,gSr,qx,hSr,AEe,pSr,_Sr,uSr,Gt,jx,bSr,LEe,vSr,FSr,Bc,TSr,yEe,MSr,ESr,OK,CSr,wSr,ASr,JC,LSr,Nr,Dx,ySr,xEe,xSr,$Sr,pn,kSr,$Ee,SSr,RSr,kEe,PSr,BSr,SEe,ISr,NSr,qSr,REe,YC,PEe,jSr,DSr,VK,GSr,OSr,VSr,KC,Cze,Ic,ZC,BEe,Gx,XSr,IEe,zSr,wze,cr,Ox,QSr,Nc,WSr,XK,HSr,USr,zK,JSr,YSr,KSr,Vx,ZSr,NEe,eRr,oRr,rRr,Ot,Xx,tRr,qEe,aRr,nRr,qc,sRr,jEe,lRr,iRr,QK,dRr,cRr,fRr,e3,mRr,qr,zx,gRr,DEe,hRr,pRr,_n,_Rr,GEe,uRr,bRr,OEe,vRr,FRr,VEe,TRr,MRr,ERr,de,o3,XEe,CRr,wRr,WK,ARr,LRr,yRr,r3,zEe,xRr,$Rr,HK,kRr,SRr,RRr,t3,QEe,PRr,BRr,UK,IRr,NRr,qRr,a3,WEe,jRr,DRr,JK,GRr,ORr,VRr,n3,HEe,XRr,zRr,YK,QRr,WRr,HRr,s3,UEe,URr,JRr,KK,YRr,KRr,ZRr,l3,JEe,ePr,oPr,ZK,rPr,tPr,aPr,i3,YEe,nPr,sPr,eZ,lPr,iPr,dPr,d3,KEe,cPr,fPr,oZ,mPr,gPr,hPr,c3,ZEe,pPr,_Pr,rZ,uPr,bPr,vPr,f3,eCe,FPr,TPr,tZ,MPr,EPr,CPr,m3,oCe,wPr,APr,aZ,LPr,yPr,xPr,g3,rCe,$Pr,kPr,nZ,SPr,RPr,PPr,h3,tCe,BPr,IPr,sZ,NPr,qPr,jPr,p3,aCe,DPr,GPr,lZ,OPr,VPr,XPr,_3,nCe,zPr,QPr,iZ,WPr,HPr,UPr,u3,sCe,JPr,YPr,dZ,KPr,ZPr,eBr,b3,lCe,oBr,rBr,cZ,tBr,aBr,nBr,v3,iCe,sBr,lBr,fZ,iBr,dBr,cBr,F3,dCe,fBr,mBr,mZ,gBr,hBr,pBr,T3,Aze,jc,M3,cCe,Qx,_Br,fCe,uBr,Lze,fr,Wx,bBr,Dc,vBr,gZ,FBr,TBr,hZ,MBr,EBr,CBr,Hx,wBr,mCe,ABr,LBr,yBr,Vt,Ux,xBr,gCe,$Br,kBr,Gc,SBr,hCe,RBr,PBr,pZ,BBr,IBr,NBr,E3,qBr,jr,Jx,jBr,pCe,DBr,GBr,un,OBr,_Ce,VBr,XBr,uCe,zBr,QBr,bCe,WBr,HBr,UBr,ce,C3,vCe,JBr,YBr,_Z,KBr,ZBr,eIr,w3,FCe,oIr,rIr,uZ,tIr,aIr,nIr,A3,TCe,sIr,lIr,bZ,iIr,dIr,cIr,L3,MCe,fIr,mIr,vZ,gIr,hIr,pIr,y3,ECe,_Ir,uIr,FZ,bIr,vIr,FIr,x3,CCe,TIr,MIr,TZ,EIr,CIr,wIr,$3,wCe,AIr,LIr,MZ,yIr,xIr,$Ir,k3,ACe,kIr,SIr,EZ,RIr,PIr,BIr,S3,LCe,IIr,NIr,CZ,qIr,jIr,DIr,R3,yCe,GIr,OIr,wZ,VIr,XIr,zIr,P3,xCe,QIr,WIr,AZ,HIr,UIr,JIr,B3,$Ce,YIr,KIr,LZ,ZIr,eNr,oNr,I3,kCe,rNr,tNr,yZ,aNr,nNr,sNr,N3,SCe,lNr,iNr,xZ,dNr,cNr,fNr,q3,RCe,mNr,gNr,$Z,hNr,pNr,_Nr,j3,PCe,uNr,bNr,kZ,vNr,FNr,TNr,D3,BCe,MNr,ENr,SZ,CNr,wNr,ANr,G3,ICe,LNr,yNr,RZ,xNr,$Nr,kNr,O3,NCe,SNr,RNr,PZ,PNr,BNr,INr,V3,qCe,NNr,qNr,BZ,jNr,DNr,GNr,X3,yze,Oc,z3,jCe,Yx,ONr,DCe,VNr,xze,mr,Kx,XNr,Vc,zNr,IZ,QNr,WNr,NZ,HNr,UNr,JNr,Zx,YNr,GCe,KNr,ZNr,eqr,Xt,e$,oqr,OCe,rqr,tqr,Xc,aqr,VCe,nqr,sqr,qZ,lqr,iqr,dqr,Q3,cqr,Dr,o$,fqr,XCe,mqr,gqr,bn,hqr,zCe,pqr,_qr,QCe,uqr,bqr,WCe,vqr,Fqr,Tqr,HCe,W3,UCe,Mqr,Eqr,jZ,Cqr,wqr,Aqr,H3,$ze,zc,U3,JCe,r$,Lqr,YCe,yqr,kze,gr,t$,xqr,Qc,$qr,DZ,kqr,Sqr,GZ,Rqr,Pqr,Bqr,a$,Iqr,KCe,Nqr,qqr,jqr,zt,n$,Dqr,ZCe,Gqr,Oqr,Wc,Vqr,e3e,Xqr,zqr,OZ,Qqr,Wqr,Hqr,J3,Uqr,Gr,s$,Jqr,o3e,Yqr,Kqr,vn,Zqr,r3e,ejr,ojr,t3e,rjr,tjr,a3e,ajr,njr,sjr,n3e,Y3,s3e,ljr,ijr,VZ,djr,cjr,fjr,K3,Sze,Hc,Z3,l3e,l$,mjr,i3e,gjr,Rze,hr,i$,hjr,Uc,pjr,XZ,_jr,ujr,zZ,bjr,vjr,Fjr,d$,Tjr,d3e,Mjr,Ejr,Cjr,Qt,c$,wjr,c3e,Ajr,Ljr,Jc,yjr,f3e,xjr,$jr,QZ,kjr,Sjr,Rjr,e5,Pjr,Or,f$,Bjr,m3e,Ijr,Njr,Fn,qjr,g3e,jjr,Djr,h3e,Gjr,Ojr,p3e,Vjr,Xjr,zjr,oe,o5,_3e,Qjr,Wjr,WZ,Hjr,Ujr,Jjr,r5,u3e,Yjr,Kjr,HZ,Zjr,eDr,oDr,t5,b3e,rDr,tDr,UZ,aDr,nDr,sDr,a5,v3e,lDr,iDr,JZ,dDr,cDr,fDr,n5,F3e,mDr,gDr,YZ,hDr,pDr,_Dr,s5,T3e,uDr,bDr,KZ,vDr,FDr,TDr,l5,M3e,MDr,EDr,ZZ,CDr,wDr,ADr,i5,E3e,LDr,yDr,eee,xDr,$Dr,kDr,d5,C3e,SDr,RDr,oee,PDr,BDr,IDr,c5,w3e,NDr,qDr,ree,jDr,DDr,GDr,f5,A3e,ODr,VDr,tee,XDr,zDr,QDr,m5,L3e,WDr,HDr,aee,UDr,JDr,YDr,g5,y3e,KDr,ZDr,nee,eGr,oGr,rGr,h5,x3e,tGr,aGr,see,nGr,sGr,lGr,p5,$3e,iGr,dGr,lee,cGr,fGr,mGr,_5,k3e,gGr,hGr,iee,pGr,_Gr,uGr,u5,S3e,bGr,vGr,dee,FGr,TGr,MGr,b5,R3e,EGr,CGr,cee,wGr,AGr,LGr,v5,P3e,yGr,xGr,fee,$Gr,kGr,SGr,F5,B3e,RGr,PGr,mee,BGr,IGr,NGr,T5,I3e,qGr,jGr,gee,DGr,GGr,OGr,M5,N3e,VGr,XGr,hee,zGr,QGr,WGr,E5,q3e,HGr,UGr,pee,JGr,YGr,KGr,C5,j3e,ZGr,eOr,_ee,oOr,rOr,tOr,w5,D3e,aOr,nOr,uee,sOr,lOr,iOr,A5,G3e,dOr,cOr,bee,fOr,mOr,gOr,L5,O3e,hOr,pOr,vee,_Or,uOr,bOr,y5,Pze,Yc,x5,V3e,m$,vOr,X3e,FOr,Bze,pr,g$,TOr,Kc,MOr,Fee,EOr,COr,Tee,wOr,AOr,LOr,h$,yOr,z3e,xOr,$Or,kOr,Wt,p$,SOr,Q3e,ROr,POr,Zc,BOr,W3e,IOr,NOr,Mee,qOr,jOr,DOr,$5,GOr,Vr,_$,OOr,H3e,VOr,XOr,Tn,zOr,U3e,QOr,WOr,J3e,HOr,UOr,Y3e,JOr,YOr,KOr,xe,k5,K3e,ZOr,eVr,Eee,oVr,rVr,tVr,S5,Z3e,aVr,nVr,Cee,sVr,lVr,iVr,R5,e5e,dVr,cVr,wee,fVr,mVr,gVr,P5,o5e,hVr,pVr,Aee,_Vr,uVr,bVr,B5,r5e,vVr,FVr,Lee,TVr,MVr,EVr,I5,t5e,CVr,wVr,yee,AVr,LVr,yVr,N5,a5e,xVr,$Vr,xee,kVr,SVr,RVr,q5,n5e,PVr,BVr,$ee,IVr,NVr,qVr,j5,s5e,jVr,DVr,kee,GVr,OVr,VVr,D5,l5e,XVr,zVr,See,QVr,WVr,HVr,G5,Ize,ef,O5,i5e,u$,UVr,d5e,JVr,Nze,_r,b$,YVr,of,KVr,Ree,ZVr,eXr,Pee,oXr,rXr,tXr,v$,aXr,c5e,nXr,sXr,lXr,Ht,F$,iXr,f5e,dXr,cXr,rf,fXr,m5e,mXr,gXr,Bee,hXr,pXr,_Xr,V5,uXr,Xr,T$,bXr,g5e,vXr,FXr,Mn,TXr,h5e,MXr,EXr,p5e,CXr,wXr,_5e,AXr,LXr,yXr,Ee,X5,u5e,xXr,$Xr,Iee,kXr,SXr,RXr,z5,b5e,PXr,BXr,Nee,IXr,NXr,qXr,Q5,v5e,jXr,DXr,qee,GXr,OXr,VXr,W5,F5e,XXr,zXr,jee,QXr,WXr,HXr,H5,T5e,UXr,JXr,Dee,YXr,KXr,ZXr,U5,M5e,ezr,ozr,Gee,rzr,tzr,azr,J5,E5e,nzr,szr,Oee,lzr,izr,dzr,Y5,C5e,czr,fzr,Vee,mzr,gzr,hzr,K5,w5e,pzr,_zr,Xee,uzr,bzr,vzr,Z5,A5e,Fzr,Tzr,zee,Mzr,Ezr,Czr,e0,L5e,wzr,Azr,Qee,Lzr,yzr,xzr,o0,y5e,$zr,kzr,Wee,Szr,Rzr,Pzr,r0,x5e,Bzr,Izr,Hee,Nzr,qzr,jzr,t0,qze,tf,a0,$5e,M$,Dzr,k5e,Gzr,jze,ur,E$,Ozr,af,Vzr,Uee,Xzr,zzr,Jee,Qzr,Wzr,Hzr,C$,Uzr,S5e,Jzr,Yzr,Kzr,Ut,w$,Zzr,R5e,eQr,oQr,nf,rQr,P5e,tQr,aQr,Yee,nQr,sQr,lQr,n0,iQr,zr,A$,dQr,B5e,cQr,fQr,En,mQr,I5e,gQr,hQr,N5e,pQr,_Qr,q5e,uQr,bQr,vQr,$e,s0,j5e,FQr,TQr,Kee,MQr,EQr,CQr,l0,D5e,wQr,AQr,Zee,LQr,yQr,xQr,i0,G5e,$Qr,kQr,eoe,SQr,RQr,PQr,d0,O5e,BQr,IQr,ooe,NQr,qQr,jQr,c0,V5e,DQr,GQr,roe,OQr,VQr,XQr,f0,X5e,zQr,QQr,toe,WQr,HQr,UQr,m0,z5e,JQr,YQr,aoe,KQr,ZQr,eWr,g0,Q5e,oWr,rWr,noe,tWr,aWr,nWr,h0,W5e,sWr,lWr,soe,iWr,dWr,cWr,p0,H5e,fWr,mWr,loe,gWr,hWr,pWr,_0,Dze,sf,u0,U5e,L$,_Wr,J5e,uWr,Gze,br,y$,bWr,lf,vWr,ioe,FWr,TWr,doe,MWr,EWr,CWr,x$,wWr,Y5e,AWr,LWr,yWr,Jt,$$,xWr,K5e,$Wr,kWr,df,SWr,Z5e,RWr,PWr,coe,BWr,IWr,NWr,b0,qWr,Qr,k$,jWr,e0e,DWr,GWr,Cn,OWr,o0e,VWr,XWr,r0e,zWr,QWr,t0e,WWr,HWr,UWr,ke,v0,a0e,JWr,YWr,foe,KWr,ZWr,eHr,F0,n0e,oHr,rHr,moe,tHr,aHr,nHr,T0,s0e,sHr,lHr,goe,iHr,dHr,cHr,M0,l0e,fHr,mHr,hoe,gHr,hHr,pHr,E0,i0e,_Hr,uHr,poe,bHr,vHr,FHr,C0,d0e,THr,MHr,_oe,EHr,CHr,wHr,w0,c0e,AHr,LHr,uoe,yHr,xHr,$Hr,A0,f0e,kHr,SHr,boe,RHr,PHr,BHr,L0,m0e,IHr,NHr,voe,qHr,jHr,DHr,y0,g0e,GHr,OHr,Foe,VHr,XHr,zHr,x0,Oze,cf,$0,h0e,S$,QHr,p0e,WHr,Vze,vr,R$,HHr,ff,UHr,Toe,JHr,YHr,Moe,KHr,ZHr,eUr,P$,oUr,_0e,rUr,tUr,aUr,Yt,B$,nUr,u0e,sUr,lUr,mf,iUr,b0e,dUr,cUr,Eoe,fUr,mUr,gUr,k0,hUr,Wr,I$,pUr,v0e,_Ur,uUr,wn,bUr,F0e,vUr,FUr,T0e,TUr,MUr,M0e,EUr,CUr,wUr,Se,S0,E0e,AUr,LUr,Coe,yUr,xUr,$Ur,R0,C0e,kUr,SUr,woe,RUr,PUr,BUr,P0,w0e,IUr,NUr,Aoe,qUr,jUr,DUr,B0,A0e,GUr,OUr,Loe,VUr,XUr,zUr,I0,L0e,QUr,WUr,yoe,HUr,UUr,JUr,N0,y0e,YUr,KUr,xoe,ZUr,eJr,oJr,q0,x0e,rJr,tJr,$oe,aJr,nJr,sJr,j0,$0e,lJr,iJr,koe,dJr,cJr,fJr,D0,k0e,mJr,gJr,Soe,hJr,pJr,_Jr,G0,S0e,uJr,bJr,Roe,vJr,FJr,TJr,O0,Xze,gf,V0,R0e,N$,MJr,P0e,EJr,zze,Fr,q$,CJr,hf,wJr,Poe,AJr,LJr,Boe,yJr,xJr,$Jr,j$,kJr,B0e,SJr,RJr,PJr,Kt,D$,BJr,I0e,IJr,NJr,pf,qJr,N0e,jJr,DJr,Ioe,GJr,OJr,VJr,X0,XJr,Hr,G$,zJr,q0e,QJr,WJr,An,HJr,j0e,UJr,JJr,D0e,YJr,KJr,G0e,ZJr,eYr,oYr,Re,z0,O0e,rYr,tYr,Noe,aYr,nYr,sYr,Q0,V0e,lYr,iYr,qoe,dYr,cYr,fYr,W0,X0e,mYr,gYr,joe,hYr,pYr,_Yr,H0,z0e,uYr,bYr,Doe,vYr,FYr,TYr,U0,Q0e,MYr,EYr,Goe,CYr,wYr,AYr,J0,W0e,LYr,yYr,Ooe,xYr,$Yr,kYr,Y0,H0e,SYr,RYr,Voe,PYr,BYr,IYr,K0,U0e,NYr,qYr,Xoe,jYr,DYr,GYr,Z0,J0e,OYr,VYr,zoe,XYr,zYr,QYr,ew,Y0e,WYr,HYr,Qoe,UYr,JYr,YYr,ow,Qze,_f,rw,K0e,O$,KYr,Z0e,ZYr,Wze,Tr,V$,eKr,uf,oKr,Woe,rKr,tKr,Hoe,aKr,nKr,sKr,X$,lKr,ewe,iKr,dKr,cKr,Zt,z$,fKr,owe,mKr,gKr,bf,hKr,rwe,pKr,_Kr,Uoe,uKr,bKr,vKr,tw,FKr,Ur,Q$,TKr,twe,MKr,EKr,Ln,CKr,awe,wKr,AKr,nwe,LKr,yKr,swe,xKr,$Kr,kKr,Ve,aw,lwe,SKr,RKr,Joe,PKr,BKr,IKr,nw,iwe,NKr,qKr,Yoe,jKr,DKr,GKr,sw,dwe,OKr,VKr,Koe,XKr,zKr,QKr,lw,cwe,WKr,HKr,Zoe,UKr,JKr,YKr,iw,fwe,KKr,ZKr,ere,eZr,oZr,rZr,dw,mwe,tZr,aZr,ore,nZr,sZr,lZr,cw,gwe,iZr,dZr,rre,cZr,fZr,mZr,fw,hwe,gZr,hZr,tre,pZr,_Zr,uZr,mw,Hze,vf,gw,pwe,W$,bZr,_we,vZr,Uze,Mr,H$,FZr,Ff,TZr,are,MZr,EZr,nre,CZr,wZr,AZr,U$,LZr,uwe,yZr,xZr,$Zr,ea,J$,kZr,bwe,SZr,RZr,Tf,PZr,vwe,BZr,IZr,sre,NZr,qZr,jZr,hw,DZr,Jr,Y$,GZr,Fwe,OZr,VZr,yn,XZr,Twe,zZr,QZr,Mwe,WZr,HZr,Ewe,UZr,JZr,YZr,Xe,pw,Cwe,KZr,ZZr,lre,eet,oet,ret,_w,wwe,tet,aet,ire,net,set,iet,uw,Awe,det,cet,dre,fet,met,get,bw,Lwe,het,pet,cre,_et,uet,bet,vw,ywe,vet,Fet,fre,Tet,Met,Eet,Fw,xwe,Cet,wet,mre,Aet,Let,yet,Tw,$we,xet,$et,gre,ket,Set,Ret,Mw,kwe,Pet,Bet,hre,Iet,Net,qet,Ew,Jze,Mf,Cw,Swe,K$,jet,Rwe,Det,Yze,Er,Z$,Get,Ef,Oet,pre,Vet,Xet,_re,zet,Qet,Wet,ek,Het,Pwe,Uet,Jet,Yet,oa,ok,Ket,Bwe,Zet,eot,Cf,oot,Iwe,rot,tot,ure,aot,not,sot,ww,lot,Yr,rk,iot,Nwe,dot,cot,xn,fot,qwe,mot,got,jwe,hot,pot,Dwe,_ot,uot,bot,Gwe,Aw,Owe,vot,Fot,bre,Tot,Mot,Eot,Lw,Kze,wf,yw,Vwe,tk,Cot,Xwe,wot,Zze,Cr,ak,Aot,Af,Lot,vre,yot,xot,Fre,$ot,kot,Sot,nk,Rot,zwe,Pot,Bot,Iot,ra,sk,Not,Qwe,qot,jot,Lf,Dot,Wwe,Got,Oot,Tre,Vot,Xot,zot,xw,Qot,Kr,lk,Wot,Hwe,Hot,Uot,$n,Jot,Uwe,Yot,Kot,Jwe,Zot,ert,Ywe,ort,rrt,trt,ik,$w,Kwe,art,nrt,Mre,srt,lrt,irt,kw,Zwe,drt,crt,Ere,frt,mrt,grt,Sw,eQe,yf,Rw,eAe,dk,hrt,oAe,prt,oQe,wr,ck,_rt,xf,urt,Cre,brt,vrt,wre,Frt,Trt,Mrt,fk,Ert,rAe,Crt,wrt,Art,ta,mk,Lrt,tAe,yrt,xrt,$f,$rt,aAe,krt,Srt,Are,Rrt,Prt,Brt,Pw,Irt,Zr,gk,Nrt,nAe,qrt,jrt,kn,Drt,sAe,Grt,Ort,lAe,Vrt,Xrt,iAe,zrt,Qrt,Wrt,dAe,Bw,cAe,Hrt,Urt,Lre,Jrt,Yrt,Krt,Iw,rQe;return d=new re({}),ka=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nL=new re({}),sL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new Zrt({props:{warning:!0,$$slots:{default:[kQt]},$$scope:{ctx:$}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/configuration_auto.py#L613"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/configuration_auto.py#L636"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/configuration_auto.py#L759"}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/tokenization_auto.py#L403"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17281/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/tokenization_auto.py#L417"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/tokenization_auto.py#L616"}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17281/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),bp=new Zrt({props:{$$slots:{default:[PQt]},$$scope:{ctx:$}}}),vp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/processing_auto.py#L89"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/processing_auto.py#L103"}}),Dp=new Zrt({props:{$$slots:{default:[IQt]},$$scope:{ctx:$}}}),Gp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/processing_auto.py#L256"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L784"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Uu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L791"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Yu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L806"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L813"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),I2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L820"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L829"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L874"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L881"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L867"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L838"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L845"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L890"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L929"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L856"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L936"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L959"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L943"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),A8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L950"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L968"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L975"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),H8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L922"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L897"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L904"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L913"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),W$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),K$=new re({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),tk=new re({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Pf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),oL=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Rn=a("a"),rL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),tL=o("AutoModel"),$i=o(`, and
`),In=a("a"),aL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(ka.$$.fragment),We=l(),Ae=a("p"),PS=o("will create a model that is an instance of "),Si=a("a"),BS=o("BertModel"),IS=o("."),Co=l(),Sa=a("p"),NS=o("There is one class of "),Nf=a("code"),qS=o("AutoModel"),fHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YVe=l(),Ri=a("h2"),qf=a("a"),Eae=a("span"),F(nL.$$.fragment),mHe=l(),Cae=a("span"),gHe=o("Extending the Auto Classes"),KVe=l(),Nn=a("p"),hHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wae=a("code"),pHe=o("NewModel"),_He=o(", make sure you have a "),Aae=a("code"),uHe=o("NewModelConfig"),bHe=o(` then you can add those to the auto
classes like this:`),ZVe=l(),F(sL.$$.fragment),eXe=l(),jS=a("p"),vHe=o("You will then be able to use the auto classes like you would usually do!"),oXe=l(),F(jf.$$.fragment),rXe=l(),Pi=a("h2"),Df=a("a"),Lae=a("span"),F(lL.$$.fragment),FHe=l(),yae=a("span"),THe=o("AutoConfig"),tXe=l(),wo=a("div"),F(iL.$$.fragment),MHe=l(),dL=a("p"),EHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),DS=a("a"),CHe=o("from_pretrained()"),wHe=o(" class method."),AHe=l(),cL=a("p"),LHe=o("This class cannot be instantiated directly using "),xae=a("code"),yHe=o("__init__()"),xHe=o(" (throws an error)."),$He=l(),Ar=a("div"),F(fL.$$.fragment),kHe=l(),$ae=a("p"),SHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),RHe=l(),Bi=a("p"),PHe=o("The configuration class to instantiate is selected based on the "),kae=a("code"),BHe=o("model_type"),IHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Sae=a("code"),NHe=o("pretrained_model_name_or_path"),qHe=o(":"),jHe=l(),A=a("ul"),Gf=a("li"),Rae=a("strong"),DHe=o("albert"),GHe=o(" \u2014 "),GS=a("a"),OHe=o("AlbertConfig"),VHe=o(" (ALBERT model)"),XHe=l(),Of=a("li"),Pae=a("strong"),zHe=o("bart"),QHe=o(" \u2014 "),OS=a("a"),WHe=o("BartConfig"),HHe=o(" (BART model)"),UHe=l(),Vf=a("li"),Bae=a("strong"),JHe=o("beit"),YHe=o(" \u2014 "),VS=a("a"),KHe=o("BeitConfig"),ZHe=o(" (BEiT model)"),eUe=l(),Xf=a("li"),Iae=a("strong"),oUe=o("bert"),rUe=o(" \u2014 "),XS=a("a"),tUe=o("BertConfig"),aUe=o(" (BERT model)"),nUe=l(),zf=a("li"),Nae=a("strong"),sUe=o("bert-generation"),lUe=o(" \u2014 "),zS=a("a"),iUe=o("BertGenerationConfig"),dUe=o(" (Bert Generation model)"),cUe=l(),Qf=a("li"),qae=a("strong"),fUe=o("big_bird"),mUe=o(" \u2014 "),QS=a("a"),gUe=o("BigBirdConfig"),hUe=o(" (BigBird model)"),pUe=l(),Wf=a("li"),jae=a("strong"),_Ue=o("bigbird_pegasus"),uUe=o(" \u2014 "),WS=a("a"),bUe=o("BigBirdPegasusConfig"),vUe=o(" (BigBird-Pegasus model)"),FUe=l(),Hf=a("li"),Dae=a("strong"),TUe=o("blenderbot"),MUe=o(" \u2014 "),HS=a("a"),EUe=o("BlenderbotConfig"),CUe=o(" (Blenderbot model)"),wUe=l(),Uf=a("li"),Gae=a("strong"),AUe=o("blenderbot-small"),LUe=o(" \u2014 "),US=a("a"),yUe=o("BlenderbotSmallConfig"),xUe=o(" (BlenderbotSmall model)"),$Ue=l(),Jf=a("li"),Oae=a("strong"),kUe=o("bloom"),SUe=o(" \u2014 "),JS=a("a"),RUe=o("BloomConfig"),PUe=o(" (BLOOM model)"),BUe=l(),Yf=a("li"),Vae=a("strong"),IUe=o("camembert"),NUe=o(" \u2014 "),YS=a("a"),qUe=o("CamembertConfig"),jUe=o(" (CamemBERT model)"),DUe=l(),Kf=a("li"),Xae=a("strong"),GUe=o("canine"),OUe=o(" \u2014 "),KS=a("a"),VUe=o("CanineConfig"),XUe=o(" (CANINE model)"),zUe=l(),Zf=a("li"),zae=a("strong"),QUe=o("clip"),WUe=o(" \u2014 "),ZS=a("a"),HUe=o("CLIPConfig"),UUe=o(" (CLIP model)"),JUe=l(),em=a("li"),Qae=a("strong"),YUe=o("codegen"),KUe=o(" \u2014 "),eR=a("a"),ZUe=o("CodeGenConfig"),eJe=o(" (CodeGen model)"),oJe=l(),om=a("li"),Wae=a("strong"),rJe=o("convbert"),tJe=o(" \u2014 "),oR=a("a"),aJe=o("ConvBertConfig"),nJe=o(" (ConvBERT model)"),sJe=l(),rm=a("li"),Hae=a("strong"),lJe=o("convnext"),iJe=o(" \u2014 "),rR=a("a"),dJe=o("ConvNextConfig"),cJe=o(" (ConvNeXT model)"),fJe=l(),tm=a("li"),Uae=a("strong"),mJe=o("ctrl"),gJe=o(" \u2014 "),tR=a("a"),hJe=o("CTRLConfig"),pJe=o(" (CTRL model)"),_Je=l(),am=a("li"),Jae=a("strong"),uJe=o("cvt"),bJe=o(" \u2014 "),aR=a("a"),vJe=o("CvtConfig"),FJe=o(" (CvT model)"),TJe=l(),nm=a("li"),Yae=a("strong"),MJe=o("data2vec-audio"),EJe=o(" \u2014 "),nR=a("a"),CJe=o("Data2VecAudioConfig"),wJe=o(" (Data2VecAudio model)"),AJe=l(),sm=a("li"),Kae=a("strong"),LJe=o("data2vec-text"),yJe=o(" \u2014 "),sR=a("a"),xJe=o("Data2VecTextConfig"),$Je=o(" (Data2VecText model)"),kJe=l(),lm=a("li"),Zae=a("strong"),SJe=o("data2vec-vision"),RJe=o(" \u2014 "),lR=a("a"),PJe=o("Data2VecVisionConfig"),BJe=o(" (Data2VecVision model)"),IJe=l(),im=a("li"),ene=a("strong"),NJe=o("deberta"),qJe=o(" \u2014 "),iR=a("a"),jJe=o("DebertaConfig"),DJe=o(" (DeBERTa model)"),GJe=l(),dm=a("li"),one=a("strong"),OJe=o("deberta-v2"),VJe=o(" \u2014 "),dR=a("a"),XJe=o("DebertaV2Config"),zJe=o(" (DeBERTa-v2 model)"),QJe=l(),cm=a("li"),rne=a("strong"),WJe=o("decision_transformer"),HJe=o(" \u2014 "),cR=a("a"),UJe=o("DecisionTransformerConfig"),JJe=o(" (Decision Transformer model)"),YJe=l(),fm=a("li"),tne=a("strong"),KJe=o("deformable_detr"),ZJe=o(" \u2014 "),fR=a("a"),eYe=o("DeformableDetrConfig"),oYe=o(" (Deformable DETR model)"),rYe=l(),mm=a("li"),ane=a("strong"),tYe=o("deit"),aYe=o(" \u2014 "),mR=a("a"),nYe=o("DeiTConfig"),sYe=o(" (DeiT model)"),lYe=l(),gm=a("li"),nne=a("strong"),iYe=o("detr"),dYe=o(" \u2014 "),gR=a("a"),cYe=o("DetrConfig"),fYe=o(" (DETR model)"),mYe=l(),hm=a("li"),sne=a("strong"),gYe=o("distilbert"),hYe=o(" \u2014 "),hR=a("a"),pYe=o("DistilBertConfig"),_Ye=o(" (DistilBERT model)"),uYe=l(),pm=a("li"),lne=a("strong"),bYe=o("dpr"),vYe=o(" \u2014 "),pR=a("a"),FYe=o("DPRConfig"),TYe=o(" (DPR model)"),MYe=l(),_m=a("li"),ine=a("strong"),EYe=o("dpt"),CYe=o(" \u2014 "),_R=a("a"),wYe=o("DPTConfig"),AYe=o(" (DPT model)"),LYe=l(),um=a("li"),dne=a("strong"),yYe=o("electra"),xYe=o(" \u2014 "),uR=a("a"),$Ye=o("ElectraConfig"),kYe=o(" (ELECTRA model)"),SYe=l(),bm=a("li"),cne=a("strong"),RYe=o("encoder-decoder"),PYe=o(" \u2014 "),bR=a("a"),BYe=o("EncoderDecoderConfig"),IYe=o(" (Encoder decoder model)"),NYe=l(),vm=a("li"),fne=a("strong"),qYe=o("flaubert"),jYe=o(" \u2014 "),vR=a("a"),DYe=o("FlaubertConfig"),GYe=o(" (FlauBERT model)"),OYe=l(),Fm=a("li"),mne=a("strong"),VYe=o("flava"),XYe=o(" \u2014 "),FR=a("a"),zYe=o("FlavaConfig"),QYe=o(" (FLAVA model)"),WYe=l(),Tm=a("li"),gne=a("strong"),HYe=o("fnet"),UYe=o(" \u2014 "),TR=a("a"),JYe=o("FNetConfig"),YYe=o(" (FNet model)"),KYe=l(),Mm=a("li"),hne=a("strong"),ZYe=o("fsmt"),eKe=o(" \u2014 "),MR=a("a"),oKe=o("FSMTConfig"),rKe=o(" (FairSeq Machine-Translation model)"),tKe=l(),Em=a("li"),pne=a("strong"),aKe=o("funnel"),nKe=o(" \u2014 "),ER=a("a"),sKe=o("FunnelConfig"),lKe=o(" (Funnel Transformer model)"),iKe=l(),Cm=a("li"),_ne=a("strong"),dKe=o("glpn"),cKe=o(" \u2014 "),CR=a("a"),fKe=o("GLPNConfig"),mKe=o(" (GLPN model)"),gKe=l(),wm=a("li"),une=a("strong"),hKe=o("gpt2"),pKe=o(" \u2014 "),wR=a("a"),_Ke=o("GPT2Config"),uKe=o(" (OpenAI GPT-2 model)"),bKe=l(),Am=a("li"),bne=a("strong"),vKe=o("gpt_neo"),FKe=o(" \u2014 "),AR=a("a"),TKe=o("GPTNeoConfig"),MKe=o(" (GPT Neo model)"),EKe=l(),Lm=a("li"),vne=a("strong"),CKe=o("gpt_neox"),wKe=o(" \u2014 "),LR=a("a"),AKe=o("GPTNeoXConfig"),LKe=o(" (GPT NeoX model)"),yKe=l(),ym=a("li"),Fne=a("strong"),xKe=o("gptj"),$Ke=o(" \u2014 "),yR=a("a"),kKe=o("GPTJConfig"),SKe=o(" (GPT-J model)"),RKe=l(),xm=a("li"),Tne=a("strong"),PKe=o("groupvit"),BKe=o(" \u2014 "),xR=a("a"),IKe=o("GroupViTConfig"),NKe=o(" (GroupViT model)"),qKe=l(),$m=a("li"),Mne=a("strong"),jKe=o("hubert"),DKe=o(" \u2014 "),$R=a("a"),GKe=o("HubertConfig"),OKe=o(" (Hubert model)"),VKe=l(),km=a("li"),Ene=a("strong"),XKe=o("ibert"),zKe=o(" \u2014 "),kR=a("a"),QKe=o("IBertConfig"),WKe=o(" (I-BERT model)"),HKe=l(),Sm=a("li"),Cne=a("strong"),UKe=o("imagegpt"),JKe=o(" \u2014 "),SR=a("a"),YKe=o("ImageGPTConfig"),KKe=o(" (ImageGPT model)"),ZKe=l(),Rm=a("li"),wne=a("strong"),eZe=o("layoutlm"),oZe=o(" \u2014 "),RR=a("a"),rZe=o("LayoutLMConfig"),tZe=o(" (LayoutLM model)"),aZe=l(),Pm=a("li"),Ane=a("strong"),nZe=o("layoutlmv2"),sZe=o(" \u2014 "),PR=a("a"),lZe=o("LayoutLMv2Config"),iZe=o(" (LayoutLMv2 model)"),dZe=l(),Bm=a("li"),Lne=a("strong"),cZe=o("layoutlmv3"),fZe=o(" \u2014 "),BR=a("a"),mZe=o("LayoutLMv3Config"),gZe=o(" (LayoutLMv3 model)"),hZe=l(),Im=a("li"),yne=a("strong"),pZe=o("led"),_Ze=o(" \u2014 "),IR=a("a"),uZe=o("LEDConfig"),bZe=o(" (LED model)"),vZe=l(),Nm=a("li"),xne=a("strong"),FZe=o("levit"),TZe=o(" \u2014 "),NR=a("a"),MZe=o("LevitConfig"),EZe=o(" (LeViT model)"),CZe=l(),qm=a("li"),$ne=a("strong"),wZe=o("longformer"),AZe=o(" \u2014 "),qR=a("a"),LZe=o("LongformerConfig"),yZe=o(" (Longformer model)"),xZe=l(),jm=a("li"),kne=a("strong"),$Ze=o("longt5"),kZe=o(" \u2014 "),jR=a("a"),SZe=o("LongT5Config"),RZe=o(" (LongT5 model)"),PZe=l(),Dm=a("li"),Sne=a("strong"),BZe=o("luke"),IZe=o(" \u2014 "),DR=a("a"),NZe=o("LukeConfig"),qZe=o(" (LUKE model)"),jZe=l(),Gm=a("li"),Rne=a("strong"),DZe=o("lxmert"),GZe=o(" \u2014 "),GR=a("a"),OZe=o("LxmertConfig"),VZe=o(" (LXMERT model)"),XZe=l(),Om=a("li"),Pne=a("strong"),zZe=o("m2m_100"),QZe=o(" \u2014 "),OR=a("a"),WZe=o("M2M100Config"),HZe=o(" (M2M100 model)"),UZe=l(),Vm=a("li"),Bne=a("strong"),JZe=o("marian"),YZe=o(" \u2014 "),VR=a("a"),KZe=o("MarianConfig"),ZZe=o(" (Marian model)"),eeo=l(),Xm=a("li"),Ine=a("strong"),oeo=o("maskformer"),reo=o(" \u2014 "),XR=a("a"),teo=o("MaskFormerConfig"),aeo=o(" (MaskFormer model)"),neo=l(),zm=a("li"),Nne=a("strong"),seo=o("mbart"),leo=o(" \u2014 "),zR=a("a"),ieo=o("MBartConfig"),deo=o(" (mBART model)"),ceo=l(),Qm=a("li"),qne=a("strong"),feo=o("mctct"),meo=o(" \u2014 "),QR=a("a"),geo=o("MCTCTConfig"),heo=o(" (M-CTC-T model)"),peo=l(),Wm=a("li"),jne=a("strong"),_eo=o("megatron-bert"),ueo=o(" \u2014 "),WR=a("a"),beo=o("MegatronBertConfig"),veo=o(" (Megatron-BERT model)"),Feo=l(),Hm=a("li"),Dne=a("strong"),Teo=o("mobilebert"),Meo=o(" \u2014 "),HR=a("a"),Eeo=o("MobileBertConfig"),Ceo=o(" (MobileBERT model)"),weo=l(),Um=a("li"),Gne=a("strong"),Aeo=o("mobilevit"),Leo=o(" \u2014 "),UR=a("a"),yeo=o("MobileViTConfig"),xeo=o(" (MobileViT model)"),$eo=l(),Jm=a("li"),One=a("strong"),keo=o("mpnet"),Seo=o(" \u2014 "),JR=a("a"),Reo=o("MPNetConfig"),Peo=o(" (MPNet model)"),Beo=l(),Ym=a("li"),Vne=a("strong"),Ieo=o("mt5"),Neo=o(" \u2014 "),YR=a("a"),qeo=o("MT5Config"),jeo=o(" (MT5 model)"),Deo=l(),Km=a("li"),Xne=a("strong"),Geo=o("mvp"),Oeo=o(" \u2014 "),KR=a("a"),Veo=o("MvpConfig"),Xeo=o(" (MVP model)"),zeo=l(),Zm=a("li"),zne=a("strong"),Qeo=o("nezha"),Weo=o(" \u2014 "),ZR=a("a"),Heo=o("NezhaConfig"),Ueo=o(" (Nezha model)"),Jeo=l(),eg=a("li"),Qne=a("strong"),Yeo=o("nystromformer"),Keo=o(" \u2014 "),eP=a("a"),Zeo=o("NystromformerConfig"),eoo=o(" (Nystr\xF6mformer model)"),ooo=l(),og=a("li"),Wne=a("strong"),roo=o("openai-gpt"),too=o(" \u2014 "),oP=a("a"),aoo=o("OpenAIGPTConfig"),noo=o(" (OpenAI GPT model)"),soo=l(),rg=a("li"),Hne=a("strong"),loo=o("opt"),ioo=o(" \u2014 "),rP=a("a"),doo=o("OPTConfig"),coo=o(" (OPT model)"),foo=l(),tg=a("li"),Une=a("strong"),moo=o("pegasus"),goo=o(" \u2014 "),tP=a("a"),hoo=o("PegasusConfig"),poo=o(" (Pegasus model)"),_oo=l(),ag=a("li"),Jne=a("strong"),uoo=o("perceiver"),boo=o(" \u2014 "),aP=a("a"),voo=o("PerceiverConfig"),Foo=o(" (Perceiver model)"),Too=l(),ng=a("li"),Yne=a("strong"),Moo=o("plbart"),Eoo=o(" \u2014 "),nP=a("a"),Coo=o("PLBartConfig"),woo=o(" (PLBart model)"),Aoo=l(),sg=a("li"),Kne=a("strong"),Loo=o("poolformer"),yoo=o(" \u2014 "),sP=a("a"),xoo=o("PoolFormerConfig"),$oo=o(" (PoolFormer model)"),koo=l(),lg=a("li"),Zne=a("strong"),Soo=o("prophetnet"),Roo=o(" \u2014 "),lP=a("a"),Poo=o("ProphetNetConfig"),Boo=o(" (ProphetNet model)"),Ioo=l(),ig=a("li"),ese=a("strong"),Noo=o("qdqbert"),qoo=o(" \u2014 "),iP=a("a"),joo=o("QDQBertConfig"),Doo=o(" (QDQBert model)"),Goo=l(),dg=a("li"),ose=a("strong"),Ooo=o("rag"),Voo=o(" \u2014 "),dP=a("a"),Xoo=o("RagConfig"),zoo=o(" (RAG model)"),Qoo=l(),cg=a("li"),rse=a("strong"),Woo=o("realm"),Hoo=o(" \u2014 "),cP=a("a"),Uoo=o("RealmConfig"),Joo=o(" (REALM model)"),Yoo=l(),fg=a("li"),tse=a("strong"),Koo=o("reformer"),Zoo=o(" \u2014 "),fP=a("a"),ero=o("ReformerConfig"),oro=o(" (Reformer model)"),rro=l(),mg=a("li"),ase=a("strong"),tro=o("regnet"),aro=o(" \u2014 "),mP=a("a"),nro=o("RegNetConfig"),sro=o(" (RegNet model)"),lro=l(),gg=a("li"),nse=a("strong"),iro=o("rembert"),dro=o(" \u2014 "),gP=a("a"),cro=o("RemBertConfig"),fro=o(" (RemBERT model)"),mro=l(),hg=a("li"),sse=a("strong"),gro=o("resnet"),hro=o(" \u2014 "),hP=a("a"),pro=o("ResNetConfig"),_ro=o(" (ResNet model)"),uro=l(),pg=a("li"),lse=a("strong"),bro=o("retribert"),vro=o(" \u2014 "),pP=a("a"),Fro=o("RetriBertConfig"),Tro=o(" (RetriBERT model)"),Mro=l(),_g=a("li"),ise=a("strong"),Ero=o("roberta"),Cro=o(" \u2014 "),_P=a("a"),wro=o("RobertaConfig"),Aro=o(" (RoBERTa model)"),Lro=l(),ug=a("li"),dse=a("strong"),yro=o("roformer"),xro=o(" \u2014 "),uP=a("a"),$ro=o("RoFormerConfig"),kro=o(" (RoFormer model)"),Sro=l(),bg=a("li"),cse=a("strong"),Rro=o("segformer"),Pro=o(" \u2014 "),bP=a("a"),Bro=o("SegformerConfig"),Iro=o(" (SegFormer model)"),Nro=l(),vg=a("li"),fse=a("strong"),qro=o("sew"),jro=o(" \u2014 "),vP=a("a"),Dro=o("SEWConfig"),Gro=o(" (SEW model)"),Oro=l(),Fg=a("li"),mse=a("strong"),Vro=o("sew-d"),Xro=o(" \u2014 "),FP=a("a"),zro=o("SEWDConfig"),Qro=o(" (SEW-D model)"),Wro=l(),Tg=a("li"),gse=a("strong"),Hro=o("speech-encoder-decoder"),Uro=o(" \u2014 "),TP=a("a"),Jro=o("SpeechEncoderDecoderConfig"),Yro=o(" (Speech Encoder decoder model)"),Kro=l(),Mg=a("li"),hse=a("strong"),Zro=o("speech_to_text"),eto=o(" \u2014 "),MP=a("a"),oto=o("Speech2TextConfig"),rto=o(" (Speech2Text model)"),tto=l(),Eg=a("li"),pse=a("strong"),ato=o("speech_to_text_2"),nto=o(" \u2014 "),EP=a("a"),sto=o("Speech2Text2Config"),lto=o(" (Speech2Text2 model)"),ito=l(),Cg=a("li"),_se=a("strong"),dto=o("splinter"),cto=o(" \u2014 "),CP=a("a"),fto=o("SplinterConfig"),mto=o(" (Splinter model)"),gto=l(),wg=a("li"),use=a("strong"),hto=o("squeezebert"),pto=o(" \u2014 "),wP=a("a"),_to=o("SqueezeBertConfig"),uto=o(" (SqueezeBERT model)"),bto=l(),Ag=a("li"),bse=a("strong"),vto=o("swin"),Fto=o(" \u2014 "),AP=a("a"),Tto=o("SwinConfig"),Mto=o(" (Swin Transformer model)"),Eto=l(),Lg=a("li"),vse=a("strong"),Cto=o("t5"),wto=o(" \u2014 "),LP=a("a"),Ato=o("T5Config"),Lto=o(" (T5 model)"),yto=l(),yg=a("li"),Fse=a("strong"),xto=o("tapas"),$to=o(" \u2014 "),yP=a("a"),kto=o("TapasConfig"),Sto=o(" (TAPAS model)"),Rto=l(),xg=a("li"),Tse=a("strong"),Pto=o("trajectory_transformer"),Bto=o(" \u2014 "),xP=a("a"),Ito=o("TrajectoryTransformerConfig"),Nto=o(" (Trajectory Transformer model)"),qto=l(),$g=a("li"),Mse=a("strong"),jto=o("transfo-xl"),Dto=o(" \u2014 "),$P=a("a"),Gto=o("TransfoXLConfig"),Oto=o(" (Transformer-XL model)"),Vto=l(),kg=a("li"),Ese=a("strong"),Xto=o("trocr"),zto=o(" \u2014 "),kP=a("a"),Qto=o("TrOCRConfig"),Wto=o(" (TrOCR model)"),Hto=l(),Sg=a("li"),Cse=a("strong"),Uto=o("unispeech"),Jto=o(" \u2014 "),SP=a("a"),Yto=o("UniSpeechConfig"),Kto=o(" (UniSpeech model)"),Zto=l(),Rg=a("li"),wse=a("strong"),eao=o("unispeech-sat"),oao=o(" \u2014 "),RP=a("a"),rao=o("UniSpeechSatConfig"),tao=o(" (UniSpeechSat model)"),aao=l(),Pg=a("li"),Ase=a("strong"),nao=o("van"),sao=o(" \u2014 "),PP=a("a"),lao=o("VanConfig"),iao=o(" (VAN model)"),dao=l(),Bg=a("li"),Lse=a("strong"),cao=o("vilt"),fao=o(" \u2014 "),BP=a("a"),mao=o("ViltConfig"),gao=o(" (ViLT model)"),hao=l(),Ig=a("li"),yse=a("strong"),pao=o("vision-encoder-decoder"),_ao=o(" \u2014 "),IP=a("a"),uao=o("VisionEncoderDecoderConfig"),bao=o(" (Vision Encoder decoder model)"),vao=l(),Ng=a("li"),xse=a("strong"),Fao=o("vision-text-dual-encoder"),Tao=o(" \u2014 "),NP=a("a"),Mao=o("VisionTextDualEncoderConfig"),Eao=o(" (VisionTextDualEncoder model)"),Cao=l(),qg=a("li"),$se=a("strong"),wao=o("visual_bert"),Aao=o(" \u2014 "),qP=a("a"),Lao=o("VisualBertConfig"),yao=o(" (VisualBERT model)"),xao=l(),jg=a("li"),kse=a("strong"),$ao=o("vit"),kao=o(" \u2014 "),jP=a("a"),Sao=o("ViTConfig"),Rao=o(" (ViT model)"),Pao=l(),Dg=a("li"),Sse=a("strong"),Bao=o("vit_mae"),Iao=o(" \u2014 "),DP=a("a"),Nao=o("ViTMAEConfig"),qao=o(" (ViTMAE model)"),jao=l(),Gg=a("li"),Rse=a("strong"),Dao=o("wav2vec2"),Gao=o(" \u2014 "),GP=a("a"),Oao=o("Wav2Vec2Config"),Vao=o(" (Wav2Vec2 model)"),Xao=l(),Og=a("li"),Pse=a("strong"),zao=o("wav2vec2-conformer"),Qao=o(" \u2014 "),OP=a("a"),Wao=o("Wav2Vec2ConformerConfig"),Hao=o(" (Wav2Vec2-Conformer model)"),Uao=l(),Vg=a("li"),Bse=a("strong"),Jao=o("wavlm"),Yao=o(" \u2014 "),VP=a("a"),Kao=o("WavLMConfig"),Zao=o(" (WavLM model)"),eno=l(),Xg=a("li"),Ise=a("strong"),ono=o("xglm"),rno=o(" \u2014 "),XP=a("a"),tno=o("XGLMConfig"),ano=o(" (XGLM model)"),nno=l(),zg=a("li"),Nse=a("strong"),sno=o("xlm"),lno=o(" \u2014 "),zP=a("a"),ino=o("XLMConfig"),dno=o(" (XLM model)"),cno=l(),Qg=a("li"),qse=a("strong"),fno=o("xlm-prophetnet"),mno=o(" \u2014 "),QP=a("a"),gno=o("XLMProphetNetConfig"),hno=o(" (XLM-ProphetNet model)"),pno=l(),Wg=a("li"),jse=a("strong"),_no=o("xlm-roberta"),uno=o(" \u2014 "),WP=a("a"),bno=o("XLMRobertaConfig"),vno=o(" (XLM-RoBERTa model)"),Fno=l(),Hg=a("li"),Dse=a("strong"),Tno=o("xlm-roberta-xl"),Mno=o(" \u2014 "),HP=a("a"),Eno=o("XLMRobertaXLConfig"),Cno=o(" (XLM-RoBERTa-XL model)"),wno=l(),Ug=a("li"),Gse=a("strong"),Ano=o("xlnet"),Lno=o(" \u2014 "),UP=a("a"),yno=o("XLNetConfig"),xno=o(" (XLNet model)"),$no=l(),Jg=a("li"),Ose=a("strong"),kno=o("yolos"),Sno=o(" \u2014 "),JP=a("a"),Rno=o("YolosConfig"),Pno=o(" (YOLOS model)"),Bno=l(),Yg=a("li"),Vse=a("strong"),Ino=o("yoso"),Nno=o(" \u2014 "),YP=a("a"),qno=o("YosoConfig"),jno=o(" (YOSO model)"),Dno=l(),F(Kg.$$.fragment),Gno=l(),Zg=a("div"),F(mL.$$.fragment),Ono=l(),Xse=a("p"),Vno=o("Register a new configuration for this class."),aXe=l(),Ii=a("h2"),eh=a("a"),zse=a("span"),F(gL.$$.fragment),Xno=l(),Qse=a("span"),zno=o("AutoTokenizer"),nXe=l(),Ao=a("div"),F(hL.$$.fragment),Qno=l(),pL=a("p"),Wno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KP=a("a"),Hno=o("AutoTokenizer.from_pretrained()"),Uno=o(" class method."),Jno=l(),_L=a("p"),Yno=o("This class cannot be instantiated directly using "),Wse=a("code"),Kno=o("__init__()"),Zno=o(" (throws an error)."),eso=l(),Lr=a("div"),F(uL.$$.fragment),oso=l(),Hse=a("p"),rso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tso=l(),Ra=a("p"),aso=o("The tokenizer class to instantiate is selected based on the "),Use=a("code"),nso=o("model_type"),sso=o(` property of the config object (either
passed as an argument or loaded from `),Jse=a("code"),lso=o("pretrained_model_name_or_path"),iso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=a("code"),dso=o("pretrained_model_name_or_path"),cso=o(":"),fso=l(),k=a("ul"),qn=a("li"),Kse=a("strong"),mso=o("albert"),gso=o(" \u2014 "),ZP=a("a"),hso=o("AlbertTokenizer"),pso=o(" or "),eB=a("a"),_so=o("AlbertTokenizerFast"),uso=o(" (ALBERT model)"),bso=l(),jn=a("li"),Zse=a("strong"),vso=o("bart"),Fso=o(" \u2014 "),oB=a("a"),Tso=o("BartTokenizer"),Mso=o(" or "),rB=a("a"),Eso=o("BartTokenizerFast"),Cso=o(" (BART model)"),wso=l(),Dn=a("li"),ele=a("strong"),Aso=o("barthez"),Lso=o(" \u2014 "),tB=a("a"),yso=o("BarthezTokenizer"),xso=o(" or "),aB=a("a"),$so=o("BarthezTokenizerFast"),kso=o(" (BARThez model)"),Sso=l(),oh=a("li"),ole=a("strong"),Rso=o("bartpho"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("BartphoTokenizer"),Iso=o(" (BARTpho model)"),Nso=l(),Gn=a("li"),rle=a("strong"),qso=o("bert"),jso=o(" \u2014 "),sB=a("a"),Dso=o("BertTokenizer"),Gso=o(" or "),lB=a("a"),Oso=o("BertTokenizerFast"),Vso=o(" (BERT model)"),Xso=l(),rh=a("li"),tle=a("strong"),zso=o("bert-generation"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("BertGenerationTokenizer"),Hso=o(" (Bert Generation model)"),Uso=l(),th=a("li"),ale=a("strong"),Jso=o("bert-japanese"),Yso=o(" \u2014 "),dB=a("a"),Kso=o("BertJapaneseTokenizer"),Zso=o(" (BertJapanese model)"),elo=l(),ah=a("li"),nle=a("strong"),olo=o("bertweet"),rlo=o(" \u2014 "),cB=a("a"),tlo=o("BertweetTokenizer"),alo=o(" (BERTweet model)"),nlo=l(),On=a("li"),sle=a("strong"),slo=o("big_bird"),llo=o(" \u2014 "),fB=a("a"),ilo=o("BigBirdTokenizer"),dlo=o(" or "),mB=a("a"),clo=o("BigBirdTokenizerFast"),flo=o(" (BigBird model)"),mlo=l(),Vn=a("li"),lle=a("strong"),glo=o("bigbird_pegasus"),hlo=o(" \u2014 "),gB=a("a"),plo=o("PegasusTokenizer"),_lo=o(" or "),hB=a("a"),ulo=o("PegasusTokenizerFast"),blo=o(" (BigBird-Pegasus model)"),vlo=l(),Xn=a("li"),ile=a("strong"),Flo=o("blenderbot"),Tlo=o(" \u2014 "),pB=a("a"),Mlo=o("BlenderbotTokenizer"),Elo=o(" or "),_B=a("a"),Clo=o("BlenderbotTokenizerFast"),wlo=o(" (Blenderbot model)"),Alo=l(),nh=a("li"),dle=a("strong"),Llo=o("blenderbot-small"),ylo=o(" \u2014 "),uB=a("a"),xlo=o("BlenderbotSmallTokenizer"),$lo=o(" (BlenderbotSmall model)"),klo=l(),sh=a("li"),cle=a("strong"),Slo=o("bloom"),Rlo=o(" \u2014 "),bB=a("a"),Plo=o("BloomTokenizerFast"),Blo=o(" (BLOOM model)"),Ilo=l(),lh=a("li"),fle=a("strong"),Nlo=o("byt5"),qlo=o(" \u2014 "),vB=a("a"),jlo=o("ByT5Tokenizer"),Dlo=o(" (ByT5 model)"),Glo=l(),zn=a("li"),mle=a("strong"),Olo=o("camembert"),Vlo=o(" \u2014 "),FB=a("a"),Xlo=o("CamembertTokenizer"),zlo=o(" or "),TB=a("a"),Qlo=o("CamembertTokenizerFast"),Wlo=o(" (CamemBERT model)"),Hlo=l(),ih=a("li"),gle=a("strong"),Ulo=o("canine"),Jlo=o(" \u2014 "),MB=a("a"),Ylo=o("CanineTokenizer"),Klo=o(" (CANINE model)"),Zlo=l(),Qn=a("li"),hle=a("strong"),eio=o("clip"),oio=o(" \u2014 "),EB=a("a"),rio=o("CLIPTokenizer"),tio=o(" or "),CB=a("a"),aio=o("CLIPTokenizerFast"),nio=o(" (CLIP model)"),sio=l(),Wn=a("li"),ple=a("strong"),lio=o("codegen"),iio=o(" \u2014 "),wB=a("a"),dio=o("CodeGenTokenizer"),cio=o(" or "),AB=a("a"),fio=o("CodeGenTokenizerFast"),mio=o(" (CodeGen model)"),gio=l(),Hn=a("li"),_le=a("strong"),hio=o("convbert"),pio=o(" \u2014 "),LB=a("a"),_io=o("ConvBertTokenizer"),uio=o(" or "),yB=a("a"),bio=o("ConvBertTokenizerFast"),vio=o(" (ConvBERT model)"),Fio=l(),Un=a("li"),ule=a("strong"),Tio=o("cpm"),Mio=o(" \u2014 "),xB=a("a"),Eio=o("CpmTokenizer"),Cio=o(" or "),$B=a("a"),wio=o("CpmTokenizerFast"),Aio=o(" (CPM model)"),Lio=l(),dh=a("li"),ble=a("strong"),yio=o("ctrl"),xio=o(" \u2014 "),kB=a("a"),$io=o("CTRLTokenizer"),kio=o(" (CTRL model)"),Sio=l(),Jn=a("li"),vle=a("strong"),Rio=o("data2vec-text"),Pio=o(" \u2014 "),SB=a("a"),Bio=o("RobertaTokenizer"),Iio=o(" or "),RB=a("a"),Nio=o("RobertaTokenizerFast"),qio=o(" (Data2VecText model)"),jio=l(),Yn=a("li"),Fle=a("strong"),Dio=o("deberta"),Gio=o(" \u2014 "),PB=a("a"),Oio=o("DebertaTokenizer"),Vio=o(" or "),BB=a("a"),Xio=o("DebertaTokenizerFast"),zio=o(" (DeBERTa model)"),Qio=l(),Kn=a("li"),Tle=a("strong"),Wio=o("deberta-v2"),Hio=o(" \u2014 "),IB=a("a"),Uio=o("DebertaV2Tokenizer"),Jio=o(" or "),NB=a("a"),Yio=o("DebertaV2TokenizerFast"),Kio=o(" (DeBERTa-v2 model)"),Zio=l(),Zn=a("li"),Mle=a("strong"),edo=o("distilbert"),odo=o(" \u2014 "),qB=a("a"),rdo=o("DistilBertTokenizer"),tdo=o(" or "),jB=a("a"),ado=o("DistilBertTokenizerFast"),ndo=o(" (DistilBERT model)"),sdo=l(),es=a("li"),Ele=a("strong"),ldo=o("dpr"),ido=o(" \u2014 "),DB=a("a"),ddo=o("DPRQuestionEncoderTokenizer"),cdo=o(" or "),GB=a("a"),fdo=o("DPRQuestionEncoderTokenizerFast"),mdo=o(" (DPR model)"),gdo=l(),os=a("li"),Cle=a("strong"),hdo=o("electra"),pdo=o(" \u2014 "),OB=a("a"),_do=o("ElectraTokenizer"),udo=o(" or "),VB=a("a"),bdo=o("ElectraTokenizerFast"),vdo=o(" (ELECTRA model)"),Fdo=l(),ch=a("li"),wle=a("strong"),Tdo=o("flaubert"),Mdo=o(" \u2014 "),XB=a("a"),Edo=o("FlaubertTokenizer"),Cdo=o(" (FlauBERT model)"),wdo=l(),rs=a("li"),Ale=a("strong"),Ado=o("fnet"),Ldo=o(" \u2014 "),zB=a("a"),ydo=o("FNetTokenizer"),xdo=o(" or "),QB=a("a"),$do=o("FNetTokenizerFast"),kdo=o(" (FNet model)"),Sdo=l(),fh=a("li"),Lle=a("strong"),Rdo=o("fsmt"),Pdo=o(" \u2014 "),WB=a("a"),Bdo=o("FSMTTokenizer"),Ido=o(" (FairSeq Machine-Translation model)"),Ndo=l(),ts=a("li"),yle=a("strong"),qdo=o("funnel"),jdo=o(" \u2014 "),HB=a("a"),Ddo=o("FunnelTokenizer"),Gdo=o(" or "),UB=a("a"),Odo=o("FunnelTokenizerFast"),Vdo=o(" (Funnel Transformer model)"),Xdo=l(),as=a("li"),xle=a("strong"),zdo=o("gpt2"),Qdo=o(" \u2014 "),JB=a("a"),Wdo=o("GPT2Tokenizer"),Hdo=o(" or "),YB=a("a"),Udo=o("GPT2TokenizerFast"),Jdo=o(" (OpenAI GPT-2 model)"),Ydo=l(),ns=a("li"),$le=a("strong"),Kdo=o("gpt_neo"),Zdo=o(" \u2014 "),KB=a("a"),eco=o("GPT2Tokenizer"),oco=o(" or "),ZB=a("a"),rco=o("GPT2TokenizerFast"),tco=o(" (GPT Neo model)"),aco=l(),mh=a("li"),kle=a("strong"),nco=o("gpt_neox"),sco=o(" \u2014 "),eI=a("a"),lco=o("GPTNeoXTokenizerFast"),ico=o(" (GPT NeoX model)"),dco=l(),ss=a("li"),Sle=a("strong"),cco=o("gptj"),fco=o(" \u2014 "),oI=a("a"),mco=o("GPT2Tokenizer"),gco=o(" or "),rI=a("a"),hco=o("GPT2TokenizerFast"),pco=o(" (GPT-J model)"),_co=l(),ls=a("li"),Rle=a("strong"),uco=o("groupvit"),bco=o(" \u2014 "),tI=a("a"),vco=o("CLIPTokenizer"),Fco=o(" or "),aI=a("a"),Tco=o("CLIPTokenizerFast"),Mco=o(" (GroupViT model)"),Eco=l(),is=a("li"),Ple=a("strong"),Cco=o("herbert"),wco=o(" \u2014 "),nI=a("a"),Aco=o("HerbertTokenizer"),Lco=o(" or "),sI=a("a"),yco=o("HerbertTokenizerFast"),xco=o(" (HerBERT model)"),$co=l(),gh=a("li"),Ble=a("strong"),kco=o("hubert"),Sco=o(" \u2014 "),lI=a("a"),Rco=o("Wav2Vec2CTCTokenizer"),Pco=o(" (Hubert model)"),Bco=l(),ds=a("li"),Ile=a("strong"),Ico=o("ibert"),Nco=o(" \u2014 "),iI=a("a"),qco=o("RobertaTokenizer"),jco=o(" or "),dI=a("a"),Dco=o("RobertaTokenizerFast"),Gco=o(" (I-BERT model)"),Oco=l(),cs=a("li"),Nle=a("strong"),Vco=o("layoutlm"),Xco=o(" \u2014 "),cI=a("a"),zco=o("LayoutLMTokenizer"),Qco=o(" or "),fI=a("a"),Wco=o("LayoutLMTokenizerFast"),Hco=o(" (LayoutLM model)"),Uco=l(),fs=a("li"),qle=a("strong"),Jco=o("layoutlmv2"),Yco=o(" \u2014 "),mI=a("a"),Kco=o("LayoutLMv2Tokenizer"),Zco=o(" or "),gI=a("a"),efo=o("LayoutLMv2TokenizerFast"),ofo=o(" (LayoutLMv2 model)"),rfo=l(),ms=a("li"),jle=a("strong"),tfo=o("layoutlmv3"),afo=o(" \u2014 "),hI=a("a"),nfo=o("LayoutLMv3Tokenizer"),sfo=o(" or "),pI=a("a"),lfo=o("LayoutLMv3TokenizerFast"),ifo=o(" (LayoutLMv3 model)"),dfo=l(),gs=a("li"),Dle=a("strong"),cfo=o("layoutxlm"),ffo=o(" \u2014 "),_I=a("a"),mfo=o("LayoutXLMTokenizer"),gfo=o(" or "),uI=a("a"),hfo=o("LayoutXLMTokenizerFast"),pfo=o(" (LayoutXLM model)"),_fo=l(),hs=a("li"),Gle=a("strong"),ufo=o("led"),bfo=o(" \u2014 "),bI=a("a"),vfo=o("LEDTokenizer"),Ffo=o(" or "),vI=a("a"),Tfo=o("LEDTokenizerFast"),Mfo=o(" (LED model)"),Efo=l(),ps=a("li"),Ole=a("strong"),Cfo=o("longformer"),wfo=o(" \u2014 "),FI=a("a"),Afo=o("LongformerTokenizer"),Lfo=o(" or "),TI=a("a"),yfo=o("LongformerTokenizerFast"),xfo=o(" (Longformer model)"),$fo=l(),_s=a("li"),Vle=a("strong"),kfo=o("longt5"),Sfo=o(" \u2014 "),MI=a("a"),Rfo=o("T5Tokenizer"),Pfo=o(" or "),EI=a("a"),Bfo=o("T5TokenizerFast"),Ifo=o(" (LongT5 model)"),Nfo=l(),hh=a("li"),Xle=a("strong"),qfo=o("luke"),jfo=o(" \u2014 "),CI=a("a"),Dfo=o("LukeTokenizer"),Gfo=o(" (LUKE model)"),Ofo=l(),us=a("li"),zle=a("strong"),Vfo=o("lxmert"),Xfo=o(" \u2014 "),wI=a("a"),zfo=o("LxmertTokenizer"),Qfo=o(" or "),AI=a("a"),Wfo=o("LxmertTokenizerFast"),Hfo=o(" (LXMERT model)"),Ufo=l(),ph=a("li"),Qle=a("strong"),Jfo=o("m2m_100"),Yfo=o(" \u2014 "),LI=a("a"),Kfo=o("M2M100Tokenizer"),Zfo=o(" (M2M100 model)"),emo=l(),_h=a("li"),Wle=a("strong"),omo=o("marian"),rmo=o(" \u2014 "),yI=a("a"),tmo=o("MarianTokenizer"),amo=o(" (Marian model)"),nmo=l(),bs=a("li"),Hle=a("strong"),smo=o("mbart"),lmo=o(" \u2014 "),xI=a("a"),imo=o("MBartTokenizer"),dmo=o(" or "),$I=a("a"),cmo=o("MBartTokenizerFast"),fmo=o(" (mBART model)"),mmo=l(),vs=a("li"),Ule=a("strong"),gmo=o("mbart50"),hmo=o(" \u2014 "),kI=a("a"),pmo=o("MBart50Tokenizer"),_mo=o(" or "),SI=a("a"),umo=o("MBart50TokenizerFast"),bmo=o(" (mBART-50 model)"),vmo=l(),Fs=a("li"),Jle=a("strong"),Fmo=o("megatron-bert"),Tmo=o(" \u2014 "),RI=a("a"),Mmo=o("BertTokenizer"),Emo=o(" or "),PI=a("a"),Cmo=o("BertTokenizerFast"),wmo=o(" (Megatron-BERT model)"),Amo=l(),uh=a("li"),Yle=a("strong"),Lmo=o("mluke"),ymo=o(" \u2014 "),BI=a("a"),xmo=o("MLukeTokenizer"),$mo=o(" (mLUKE model)"),kmo=l(),Ts=a("li"),Kle=a("strong"),Smo=o("mobilebert"),Rmo=o(" \u2014 "),II=a("a"),Pmo=o("MobileBertTokenizer"),Bmo=o(" or "),NI=a("a"),Imo=o("MobileBertTokenizerFast"),Nmo=o(" (MobileBERT model)"),qmo=l(),Ms=a("li"),Zle=a("strong"),jmo=o("mpnet"),Dmo=o(" \u2014 "),qI=a("a"),Gmo=o("MPNetTokenizer"),Omo=o(" or "),jI=a("a"),Vmo=o("MPNetTokenizerFast"),Xmo=o(" (MPNet model)"),zmo=l(),Es=a("li"),eie=a("strong"),Qmo=o("mt5"),Wmo=o(" \u2014 "),DI=a("a"),Hmo=o("MT5Tokenizer"),Umo=o(" or "),GI=a("a"),Jmo=o("MT5TokenizerFast"),Ymo=o(" (MT5 model)"),Kmo=l(),Cs=a("li"),oie=a("strong"),Zmo=o("mvp"),ego=o(" \u2014 "),OI=a("a"),ogo=o("MvpTokenizer"),rgo=o(" or "),VI=a("a"),tgo=o("MvpTokenizerFast"),ago=o(" (MVP model)"),ngo=l(),ws=a("li"),rie=a("strong"),sgo=o("nezha"),lgo=o(" \u2014 "),XI=a("a"),igo=o("BertTokenizer"),dgo=o(" or "),zI=a("a"),cgo=o("BertTokenizerFast"),fgo=o(" (Nezha model)"),mgo=l(),As=a("li"),tie=a("strong"),ggo=o("nystromformer"),hgo=o(" \u2014 "),QI=a("a"),pgo=o("AlbertTokenizer"),_go=o(" or "),WI=a("a"),ugo=o("AlbertTokenizerFast"),bgo=o(" (Nystr\xF6mformer model)"),vgo=l(),Ls=a("li"),aie=a("strong"),Fgo=o("openai-gpt"),Tgo=o(" \u2014 "),HI=a("a"),Mgo=o("OpenAIGPTTokenizer"),Ego=o(" or "),UI=a("a"),Cgo=o("OpenAIGPTTokenizerFast"),wgo=o(" (OpenAI GPT model)"),Ago=l(),bh=a("li"),nie=a("strong"),Lgo=o("opt"),ygo=o(" \u2014 "),JI=a("a"),xgo=o("GPT2Tokenizer"),$go=o(" (OPT model)"),kgo=l(),ys=a("li"),sie=a("strong"),Sgo=o("pegasus"),Rgo=o(" \u2014 "),YI=a("a"),Pgo=o("PegasusTokenizer"),Bgo=o(" or "),KI=a("a"),Igo=o("PegasusTokenizerFast"),Ngo=o(" (Pegasus model)"),qgo=l(),vh=a("li"),lie=a("strong"),jgo=o("perceiver"),Dgo=o(" \u2014 "),ZI=a("a"),Ggo=o("PerceiverTokenizer"),Ogo=o(" (Perceiver model)"),Vgo=l(),Fh=a("li"),iie=a("strong"),Xgo=o("phobert"),zgo=o(" \u2014 "),eN=a("a"),Qgo=o("PhobertTokenizer"),Wgo=o(" (PhoBERT model)"),Hgo=l(),Th=a("li"),die=a("strong"),Ugo=o("plbart"),Jgo=o(" \u2014 "),oN=a("a"),Ygo=o("PLBartTokenizer"),Kgo=o(" (PLBart model)"),Zgo=l(),Mh=a("li"),cie=a("strong"),eho=o("prophetnet"),oho=o(" \u2014 "),rN=a("a"),rho=o("ProphetNetTokenizer"),tho=o(" (ProphetNet model)"),aho=l(),xs=a("li"),fie=a("strong"),nho=o("qdqbert"),sho=o(" \u2014 "),tN=a("a"),lho=o("BertTokenizer"),iho=o(" or "),aN=a("a"),dho=o("BertTokenizerFast"),cho=o(" (QDQBert model)"),fho=l(),Eh=a("li"),mie=a("strong"),mho=o("rag"),gho=o(" \u2014 "),nN=a("a"),hho=o("RagTokenizer"),pho=o(" (RAG model)"),_ho=l(),$s=a("li"),gie=a("strong"),uho=o("realm"),bho=o(" \u2014 "),sN=a("a"),vho=o("RealmTokenizer"),Fho=o(" or "),lN=a("a"),Tho=o("RealmTokenizerFast"),Mho=o(" (REALM model)"),Eho=l(),ks=a("li"),hie=a("strong"),Cho=o("reformer"),who=o(" \u2014 "),iN=a("a"),Aho=o("ReformerTokenizer"),Lho=o(" or "),dN=a("a"),yho=o("ReformerTokenizerFast"),xho=o(" (Reformer model)"),$ho=l(),Ss=a("li"),pie=a("strong"),kho=o("rembert"),Sho=o(" \u2014 "),cN=a("a"),Rho=o("RemBertTokenizer"),Pho=o(" or "),fN=a("a"),Bho=o("RemBertTokenizerFast"),Iho=o(" (RemBERT model)"),Nho=l(),Rs=a("li"),_ie=a("strong"),qho=o("retribert"),jho=o(" \u2014 "),mN=a("a"),Dho=o("RetriBertTokenizer"),Gho=o(" or "),gN=a("a"),Oho=o("RetriBertTokenizerFast"),Vho=o(" (RetriBERT model)"),Xho=l(),Ps=a("li"),uie=a("strong"),zho=o("roberta"),Qho=o(" \u2014 "),hN=a("a"),Who=o("RobertaTokenizer"),Hho=o(" or "),pN=a("a"),Uho=o("RobertaTokenizerFast"),Jho=o(" (RoBERTa model)"),Yho=l(),Bs=a("li"),bie=a("strong"),Kho=o("roformer"),Zho=o(" \u2014 "),_N=a("a"),epo=o("RoFormerTokenizer"),opo=o(" or "),uN=a("a"),rpo=o("RoFormerTokenizerFast"),tpo=o(" (RoFormer model)"),apo=l(),Ch=a("li"),vie=a("strong"),npo=o("speech_to_text"),spo=o(" \u2014 "),bN=a("a"),lpo=o("Speech2TextTokenizer"),ipo=o(" (Speech2Text model)"),dpo=l(),wh=a("li"),Fie=a("strong"),cpo=o("speech_to_text_2"),fpo=o(" \u2014 "),vN=a("a"),mpo=o("Speech2Text2Tokenizer"),gpo=o(" (Speech2Text2 model)"),hpo=l(),Is=a("li"),Tie=a("strong"),ppo=o("splinter"),_po=o(" \u2014 "),FN=a("a"),upo=o("SplinterTokenizer"),bpo=o(" or "),TN=a("a"),vpo=o("SplinterTokenizerFast"),Fpo=o(" (Splinter model)"),Tpo=l(),Ns=a("li"),Mie=a("strong"),Mpo=o("squeezebert"),Epo=o(" \u2014 "),MN=a("a"),Cpo=o("SqueezeBertTokenizer"),wpo=o(" or "),EN=a("a"),Apo=o("SqueezeBertTokenizerFast"),Lpo=o(" (SqueezeBERT model)"),ypo=l(),qs=a("li"),Eie=a("strong"),xpo=o("t5"),$po=o(" \u2014 "),CN=a("a"),kpo=o("T5Tokenizer"),Spo=o(" or "),wN=a("a"),Rpo=o("T5TokenizerFast"),Ppo=o(" (T5 model)"),Bpo=l(),Ah=a("li"),Cie=a("strong"),Ipo=o("tapas"),Npo=o(" \u2014 "),AN=a("a"),qpo=o("TapasTokenizer"),jpo=o(" (TAPAS model)"),Dpo=l(),Lh=a("li"),wie=a("strong"),Gpo=o("tapex"),Opo=o(" \u2014 "),LN=a("a"),Vpo=o("TapexTokenizer"),Xpo=o(" (TAPEX model)"),zpo=l(),yh=a("li"),Aie=a("strong"),Qpo=o("transfo-xl"),Wpo=o(" \u2014 "),yN=a("a"),Hpo=o("TransfoXLTokenizer"),Upo=o(" (Transformer-XL model)"),Jpo=l(),js=a("li"),Lie=a("strong"),Ypo=o("vilt"),Kpo=o(" \u2014 "),xN=a("a"),Zpo=o("BertTokenizer"),e_o=o(" or "),$N=a("a"),o_o=o("BertTokenizerFast"),r_o=o(" (ViLT model)"),t_o=l(),Ds=a("li"),yie=a("strong"),a_o=o("visual_bert"),n_o=o(" \u2014 "),kN=a("a"),s_o=o("BertTokenizer"),l_o=o(" or "),SN=a("a"),i_o=o("BertTokenizerFast"),d_o=o(" (VisualBERT model)"),c_o=l(),xh=a("li"),xie=a("strong"),f_o=o("wav2vec2"),m_o=o(" \u2014 "),RN=a("a"),g_o=o("Wav2Vec2CTCTokenizer"),h_o=o(" (Wav2Vec2 model)"),p_o=l(),$h=a("li"),$ie=a("strong"),__o=o("wav2vec2-conformer"),u_o=o(" \u2014 "),PN=a("a"),b_o=o("Wav2Vec2CTCTokenizer"),v_o=o(" (Wav2Vec2-Conformer model)"),F_o=l(),kh=a("li"),kie=a("strong"),T_o=o("wav2vec2_phoneme"),M_o=o(" \u2014 "),BN=a("a"),E_o=o("Wav2Vec2PhonemeCTCTokenizer"),C_o=o(" (Wav2Vec2Phoneme model)"),w_o=l(),Gs=a("li"),Sie=a("strong"),A_o=o("xglm"),L_o=o(" \u2014 "),IN=a("a"),y_o=o("XGLMTokenizer"),x_o=o(" or "),NN=a("a"),$_o=o("XGLMTokenizerFast"),k_o=o(" (XGLM model)"),S_o=l(),Sh=a("li"),Rie=a("strong"),R_o=o("xlm"),P_o=o(" \u2014 "),qN=a("a"),B_o=o("XLMTokenizer"),I_o=o(" (XLM model)"),N_o=l(),Rh=a("li"),Pie=a("strong"),q_o=o("xlm-prophetnet"),j_o=o(" \u2014 "),jN=a("a"),D_o=o("XLMProphetNetTokenizer"),G_o=o(" (XLM-ProphetNet model)"),O_o=l(),Os=a("li"),Bie=a("strong"),V_o=o("xlm-roberta"),X_o=o(" \u2014 "),DN=a("a"),z_o=o("XLMRobertaTokenizer"),Q_o=o(" or "),GN=a("a"),W_o=o("XLMRobertaTokenizerFast"),H_o=o(" (XLM-RoBERTa model)"),U_o=l(),Vs=a("li"),Iie=a("strong"),J_o=o("xlm-roberta-xl"),Y_o=o(" \u2014 "),ON=a("a"),K_o=o("RobertaTokenizer"),Z_o=o(" or "),VN=a("a"),euo=o("RobertaTokenizerFast"),ouo=o(" (XLM-RoBERTa-XL model)"),ruo=l(),Xs=a("li"),Nie=a("strong"),tuo=o("xlnet"),auo=o(" \u2014 "),XN=a("a"),nuo=o("XLNetTokenizer"),suo=o(" or "),zN=a("a"),luo=o("XLNetTokenizerFast"),iuo=o(" (XLNet model)"),duo=l(),zs=a("li"),qie=a("strong"),cuo=o("yoso"),fuo=o(" \u2014 "),QN=a("a"),muo=o("AlbertTokenizer"),guo=o(" or "),WN=a("a"),huo=o("AlbertTokenizerFast"),puo=o(" (YOSO model)"),_uo=l(),F(Ph.$$.fragment),uuo=l(),Bh=a("div"),F(bL.$$.fragment),buo=l(),jie=a("p"),vuo=o("Register a new tokenizer in this mapping."),sXe=l(),Ni=a("h2"),Ih=a("a"),Die=a("span"),F(vL.$$.fragment),Fuo=l(),Gie=a("span"),Tuo=o("AutoFeatureExtractor"),lXe=l(),Lo=a("div"),F(FL.$$.fragment),Muo=l(),TL=a("p"),Euo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HN=a("a"),Cuo=o("AutoFeatureExtractor.from_pretrained()"),wuo=o(" class method."),Auo=l(),ML=a("p"),Luo=o("This class cannot be instantiated directly using "),Oie=a("code"),yuo=o("__init__()"),xuo=o(" (throws an error)."),$uo=l(),He=a("div"),F(EL.$$.fragment),kuo=l(),Vie=a("p"),Suo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ruo=l(),Pa=a("p"),Puo=o("The feature extractor class to instantiate is selected based on the "),Xie=a("code"),Buo=o("model_type"),Iuo=o(` property of the config object
(either passed as an argument or loaded from `),zie=a("code"),Nuo=o("pretrained_model_name_or_path"),quo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qie=a("code"),juo=o("pretrained_model_name_or_path"),Duo=o(":"),Guo=l(),J=a("ul"),Nh=a("li"),Wie=a("strong"),Ouo=o("beit"),Vuo=o(" \u2014 "),UN=a("a"),Xuo=o("BeitFeatureExtractor"),zuo=o(" (BEiT model)"),Quo=l(),qh=a("li"),Hie=a("strong"),Wuo=o("clip"),Huo=o(" \u2014 "),JN=a("a"),Uuo=o("CLIPFeatureExtractor"),Juo=o(" (CLIP model)"),Yuo=l(),jh=a("li"),Uie=a("strong"),Kuo=o("convnext"),Zuo=o(" \u2014 "),YN=a("a"),e1o=o("ConvNextFeatureExtractor"),o1o=o(" (ConvNeXT model)"),r1o=l(),Dh=a("li"),Jie=a("strong"),t1o=o("cvt"),a1o=o(" \u2014 "),KN=a("a"),n1o=o("ConvNextFeatureExtractor"),s1o=o(" (CvT model)"),l1o=l(),Gh=a("li"),Yie=a("strong"),i1o=o("data2vec-audio"),d1o=o(" \u2014 "),ZN=a("a"),c1o=o("Wav2Vec2FeatureExtractor"),f1o=o(" (Data2VecAudio model)"),m1o=l(),Oh=a("li"),Kie=a("strong"),g1o=o("data2vec-vision"),h1o=o(" \u2014 "),eq=a("a"),p1o=o("BeitFeatureExtractor"),_1o=o(" (Data2VecVision model)"),u1o=l(),Vh=a("li"),Zie=a("strong"),b1o=o("deformable_detr"),v1o=o(" \u2014 "),oq=a("a"),F1o=o("DetrFeatureExtractor"),T1o=o(" (Deformable DETR model)"),M1o=l(),Xh=a("li"),ede=a("strong"),E1o=o("deit"),C1o=o(" \u2014 "),rq=a("a"),w1o=o("DeiTFeatureExtractor"),A1o=o(" (DeiT model)"),L1o=l(),zh=a("li"),ode=a("strong"),y1o=o("detr"),x1o=o(" \u2014 "),tq=a("a"),$1o=o("DetrFeatureExtractor"),k1o=o(" (DETR model)"),S1o=l(),Qh=a("li"),rde=a("strong"),R1o=o("dpt"),P1o=o(" \u2014 "),aq=a("a"),B1o=o("DPTFeatureExtractor"),I1o=o(" (DPT model)"),N1o=l(),Wh=a("li"),tde=a("strong"),q1o=o("flava"),j1o=o(" \u2014 "),nq=a("a"),D1o=o("FlavaFeatureExtractor"),G1o=o(" (FLAVA model)"),O1o=l(),Hh=a("li"),ade=a("strong"),V1o=o("glpn"),X1o=o(" \u2014 "),sq=a("a"),z1o=o("GLPNFeatureExtractor"),Q1o=o(" (GLPN model)"),W1o=l(),Uh=a("li"),nde=a("strong"),H1o=o("groupvit"),U1o=o(" \u2014 "),lq=a("a"),J1o=o("CLIPFeatureExtractor"),Y1o=o(" (GroupViT model)"),K1o=l(),Jh=a("li"),sde=a("strong"),Z1o=o("hubert"),e2o=o(" \u2014 "),iq=a("a"),o2o=o("Wav2Vec2FeatureExtractor"),r2o=o(" (Hubert model)"),t2o=l(),Yh=a("li"),lde=a("strong"),a2o=o("imagegpt"),n2o=o(" \u2014 "),dq=a("a"),s2o=o("ImageGPTFeatureExtractor"),l2o=o(" (ImageGPT model)"),i2o=l(),Kh=a("li"),ide=a("strong"),d2o=o("layoutlmv2"),c2o=o(" \u2014 "),cq=a("a"),f2o=o("LayoutLMv2FeatureExtractor"),m2o=o(" (LayoutLMv2 model)"),g2o=l(),Zh=a("li"),dde=a("strong"),h2o=o("layoutlmv3"),p2o=o(" \u2014 "),fq=a("a"),_2o=o("LayoutLMv3FeatureExtractor"),u2o=o(" (LayoutLMv3 model)"),b2o=l(),ep=a("li"),cde=a("strong"),v2o=o("levit"),F2o=o(" \u2014 "),mq=a("a"),T2o=o("LevitFeatureExtractor"),M2o=o(" (LeViT model)"),E2o=l(),op=a("li"),fde=a("strong"),C2o=o("maskformer"),w2o=o(" \u2014 "),gq=a("a"),A2o=o("MaskFormerFeatureExtractor"),L2o=o(" (MaskFormer model)"),y2o=l(),rp=a("li"),mde=a("strong"),x2o=o("mctct"),$2o=o(" \u2014 "),hq=a("a"),k2o=o("MCTCTFeatureExtractor"),S2o=o(" (M-CTC-T model)"),R2o=l(),tp=a("li"),gde=a("strong"),P2o=o("mobilevit"),B2o=o(" \u2014 "),pq=a("a"),I2o=o("MobileViTFeatureExtractor"),N2o=o(" (MobileViT model)"),q2o=l(),ap=a("li"),hde=a("strong"),j2o=o("perceiver"),D2o=o(" \u2014 "),_q=a("a"),G2o=o("PerceiverFeatureExtractor"),O2o=o(" (Perceiver model)"),V2o=l(),np=a("li"),pde=a("strong"),X2o=o("poolformer"),z2o=o(" \u2014 "),uq=a("a"),Q2o=o("PoolFormerFeatureExtractor"),W2o=o(" (PoolFormer model)"),H2o=l(),sp=a("li"),_de=a("strong"),U2o=o("regnet"),J2o=o(" \u2014 "),bq=a("a"),Y2o=o("ConvNextFeatureExtractor"),K2o=o(" (RegNet model)"),Z2o=l(),lp=a("li"),ude=a("strong"),ebo=o("resnet"),obo=o(" \u2014 "),vq=a("a"),rbo=o("ConvNextFeatureExtractor"),tbo=o(" (ResNet model)"),abo=l(),ip=a("li"),bde=a("strong"),nbo=o("segformer"),sbo=o(" \u2014 "),Fq=a("a"),lbo=o("SegformerFeatureExtractor"),ibo=o(" (SegFormer model)"),dbo=l(),dp=a("li"),vde=a("strong"),cbo=o("speech_to_text"),fbo=o(" \u2014 "),Tq=a("a"),mbo=o("Speech2TextFeatureExtractor"),gbo=o(" (Speech2Text model)"),hbo=l(),cp=a("li"),Fde=a("strong"),pbo=o("swin"),_bo=o(" \u2014 "),Mq=a("a"),ubo=o("ViTFeatureExtractor"),bbo=o(" (Swin Transformer model)"),vbo=l(),fp=a("li"),Tde=a("strong"),Fbo=o("van"),Tbo=o(" \u2014 "),Eq=a("a"),Mbo=o("ConvNextFeatureExtractor"),Ebo=o(" (VAN model)"),Cbo=l(),mp=a("li"),Mde=a("strong"),wbo=o("vilt"),Abo=o(" \u2014 "),Cq=a("a"),Lbo=o("ViltFeatureExtractor"),ybo=o(" (ViLT model)"),xbo=l(),gp=a("li"),Ede=a("strong"),$bo=o("vit"),kbo=o(" \u2014 "),wq=a("a"),Sbo=o("ViTFeatureExtractor"),Rbo=o(" (ViT model)"),Pbo=l(),hp=a("li"),Cde=a("strong"),Bbo=o("vit_mae"),Ibo=o(" \u2014 "),Aq=a("a"),Nbo=o("ViTFeatureExtractor"),qbo=o(" (ViTMAE model)"),jbo=l(),pp=a("li"),wde=a("strong"),Dbo=o("wav2vec2"),Gbo=o(" \u2014 "),Lq=a("a"),Obo=o("Wav2Vec2FeatureExtractor"),Vbo=o(" (Wav2Vec2 model)"),Xbo=l(),_p=a("li"),Ade=a("strong"),zbo=o("wav2vec2-conformer"),Qbo=o(" \u2014 "),yq=a("a"),Wbo=o("Wav2Vec2FeatureExtractor"),Hbo=o(" (Wav2Vec2-Conformer model)"),Ubo=l(),up=a("li"),Lde=a("strong"),Jbo=o("yolos"),Ybo=o(" \u2014 "),xq=a("a"),Kbo=o("YolosFeatureExtractor"),Zbo=o(" (YOLOS model)"),evo=l(),F(bp.$$.fragment),ovo=l(),F(vp.$$.fragment),rvo=l(),Fp=a("div"),F(CL.$$.fragment),tvo=l(),yde=a("p"),avo=o("Register a new feature extractor for this class."),iXe=l(),qi=a("h2"),Tp=a("a"),xde=a("span"),F(wL.$$.fragment),nvo=l(),$de=a("span"),svo=o("AutoProcessor"),dXe=l(),yo=a("div"),F(AL.$$.fragment),lvo=l(),LL=a("p"),ivo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$q=a("a"),dvo=o("AutoProcessor.from_pretrained()"),cvo=o(" class method."),fvo=l(),yL=a("p"),mvo=o("This class cannot be instantiated directly using "),kde=a("code"),gvo=o("__init__()"),hvo=o(" (throws an error)."),pvo=l(),Ue=a("div"),F(xL.$$.fragment),_vo=l(),Sde=a("p"),uvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bvo=l(),ji=a("p"),vvo=o("The processor class to instantiate is selected based on the "),Rde=a("code"),Fvo=o("model_type"),Tvo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),Mvo=o("pretrained_model_name_or_path"),Evo=o(" if possible):"),Cvo=l(),he=a("ul"),Mp=a("li"),Bde=a("strong"),wvo=o("clip"),Avo=o(" \u2014 "),kq=a("a"),Lvo=o("CLIPProcessor"),yvo=o(" (CLIP model)"),xvo=l(),Ep=a("li"),Ide=a("strong"),$vo=o("flava"),kvo=o(" \u2014 "),Nde=a("code"),Svo=o("FLAVAProcessor"),Rvo=o(" (FLAVA model)"),Pvo=l(),Cp=a("li"),qde=a("strong"),Bvo=o("groupvit"),Ivo=o(" \u2014 "),Sq=a("a"),Nvo=o("CLIPProcessor"),qvo=o(" (GroupViT model)"),jvo=l(),wp=a("li"),jde=a("strong"),Dvo=o("layoutlmv2"),Gvo=o(" \u2014 "),Rq=a("a"),Ovo=o("LayoutLMv2Processor"),Vvo=o(" (LayoutLMv2 model)"),Xvo=l(),Ap=a("li"),Dde=a("strong"),zvo=o("layoutlmv3"),Qvo=o(" \u2014 "),Pq=a("a"),Wvo=o("LayoutLMv3Processor"),Hvo=o(" (LayoutLMv3 model)"),Uvo=l(),Lp=a("li"),Gde=a("strong"),Jvo=o("layoutxlm"),Yvo=o(" \u2014 "),Bq=a("a"),Kvo=o("LayoutXLMProcessor"),Zvo=o(" (LayoutXLM model)"),eFo=l(),yp=a("li"),Ode=a("strong"),oFo=o("sew"),rFo=o(" \u2014 "),Iq=a("a"),tFo=o("Wav2Vec2Processor"),aFo=o(" (SEW model)"),nFo=l(),xp=a("li"),Vde=a("strong"),sFo=o("sew-d"),lFo=o(" \u2014 "),Nq=a("a"),iFo=o("Wav2Vec2Processor"),dFo=o(" (SEW-D model)"),cFo=l(),$p=a("li"),Xde=a("strong"),fFo=o("speech_to_text"),mFo=o(" \u2014 "),qq=a("a"),gFo=o("Speech2TextProcessor"),hFo=o(" (Speech2Text model)"),pFo=l(),kp=a("li"),zde=a("strong"),_Fo=o("speech_to_text_2"),uFo=o(" \u2014 "),jq=a("a"),bFo=o("Speech2Text2Processor"),vFo=o(" (Speech2Text2 model)"),FFo=l(),Sp=a("li"),Qde=a("strong"),TFo=o("trocr"),MFo=o(" \u2014 "),Dq=a("a"),EFo=o("TrOCRProcessor"),CFo=o(" (TrOCR model)"),wFo=l(),Rp=a("li"),Wde=a("strong"),AFo=o("unispeech"),LFo=o(" \u2014 "),Gq=a("a"),yFo=o("Wav2Vec2Processor"),xFo=o(" (UniSpeech model)"),$Fo=l(),Pp=a("li"),Hde=a("strong"),kFo=o("unispeech-sat"),SFo=o(" \u2014 "),Oq=a("a"),RFo=o("Wav2Vec2Processor"),PFo=o(" (UniSpeechSat model)"),BFo=l(),Bp=a("li"),Ude=a("strong"),IFo=o("vilt"),NFo=o(" \u2014 "),Vq=a("a"),qFo=o("ViltProcessor"),jFo=o(" (ViLT model)"),DFo=l(),Ip=a("li"),Jde=a("strong"),GFo=o("vision-text-dual-encoder"),OFo=o(" \u2014 "),Xq=a("a"),VFo=o("VisionTextDualEncoderProcessor"),XFo=o(" (VisionTextDualEncoder model)"),zFo=l(),Np=a("li"),Yde=a("strong"),QFo=o("wav2vec2"),WFo=o(" \u2014 "),zq=a("a"),HFo=o("Wav2Vec2Processor"),UFo=o(" (Wav2Vec2 model)"),JFo=l(),qp=a("li"),Kde=a("strong"),YFo=o("wav2vec2-conformer"),KFo=o(" \u2014 "),Qq=a("a"),ZFo=o("Wav2Vec2Processor"),eTo=o(" (Wav2Vec2-Conformer model)"),oTo=l(),jp=a("li"),Zde=a("strong"),rTo=o("wavlm"),tTo=o(" \u2014 "),Wq=a("a"),aTo=o("Wav2Vec2Processor"),nTo=o(" (WavLM model)"),sTo=l(),F(Dp.$$.fragment),lTo=l(),F(Gp.$$.fragment),iTo=l(),Op=a("div"),F($L.$$.fragment),dTo=l(),ece=a("p"),cTo=o("Register a new processor for this class."),cXe=l(),Di=a("h2"),Vp=a("a"),oce=a("span"),F(kL.$$.fragment),fTo=l(),rce=a("span"),mTo=o("AutoModel"),fXe=l(),xo=a("div"),F(SL.$$.fragment),gTo=l(),Gi=a("p"),hTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hq=a("a"),pTo=o("from_pretrained()"),_To=o(" class method or the "),Uq=a("a"),uTo=o("from_config()"),bTo=o(` class
method.`),vTo=l(),RL=a("p"),FTo=o("This class cannot be instantiated directly using "),tce=a("code"),TTo=o("__init__()"),MTo=o(" (throws an error)."),ETo=l(),lt=a("div"),F(PL.$$.fragment),CTo=l(),ace=a("p"),wTo=o("Instantiates one of the base model classes of the library from a configuration."),ATo=l(),Oi=a("p"),LTo=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),yTo=o("not"),xTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),$To=o("from_pretrained()"),kTo=o(" to load the model weights."),STo=l(),F(Xp.$$.fragment),RTo=l(),Je=a("div"),F(BL.$$.fragment),PTo=l(),sce=a("p"),BTo=o("Instantiate one of the base model classes of the library from a pretrained model."),ITo=l(),Ba=a("p"),NTo=o("The model class to instantiate is selected based on the "),lce=a("code"),qTo=o("model_type"),jTo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),DTo=o("pretrained_model_name_or_path"),GTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),OTo=o("pretrained_model_name_or_path"),VTo=o(":"),XTo=l(),y=a("ul"),zp=a("li"),cce=a("strong"),zTo=o("albert"),QTo=o(" \u2014 "),Yq=a("a"),WTo=o("AlbertModel"),HTo=o(" (ALBERT model)"),UTo=l(),Qp=a("li"),fce=a("strong"),JTo=o("bart"),YTo=o(" \u2014 "),Kq=a("a"),KTo=o("BartModel"),ZTo=o(" (BART model)"),e7o=l(),Wp=a("li"),mce=a("strong"),o7o=o("beit"),r7o=o(" \u2014 "),Zq=a("a"),t7o=o("BeitModel"),a7o=o(" (BEiT model)"),n7o=l(),Hp=a("li"),gce=a("strong"),s7o=o("bert"),l7o=o(" \u2014 "),ej=a("a"),i7o=o("BertModel"),d7o=o(" (BERT model)"),c7o=l(),Up=a("li"),hce=a("strong"),f7o=o("bert-generation"),m7o=o(" \u2014 "),oj=a("a"),g7o=o("BertGenerationEncoder"),h7o=o(" (Bert Generation model)"),p7o=l(),Jp=a("li"),pce=a("strong"),_7o=o("big_bird"),u7o=o(" \u2014 "),rj=a("a"),b7o=o("BigBirdModel"),v7o=o(" (BigBird model)"),F7o=l(),Yp=a("li"),_ce=a("strong"),T7o=o("bigbird_pegasus"),M7o=o(" \u2014 "),tj=a("a"),E7o=o("BigBirdPegasusModel"),C7o=o(" (BigBird-Pegasus model)"),w7o=l(),Kp=a("li"),uce=a("strong"),A7o=o("blenderbot"),L7o=o(" \u2014 "),aj=a("a"),y7o=o("BlenderbotModel"),x7o=o(" (Blenderbot model)"),$7o=l(),Zp=a("li"),bce=a("strong"),k7o=o("blenderbot-small"),S7o=o(" \u2014 "),nj=a("a"),R7o=o("BlenderbotSmallModel"),P7o=o(" (BlenderbotSmall model)"),B7o=l(),e_=a("li"),vce=a("strong"),I7o=o("bloom"),N7o=o(" \u2014 "),sj=a("a"),q7o=o("BloomModel"),j7o=o(" (BLOOM model)"),D7o=l(),o_=a("li"),Fce=a("strong"),G7o=o("camembert"),O7o=o(" \u2014 "),lj=a("a"),V7o=o("CamembertModel"),X7o=o(" (CamemBERT model)"),z7o=l(),r_=a("li"),Tce=a("strong"),Q7o=o("canine"),W7o=o(" \u2014 "),ij=a("a"),H7o=o("CanineModel"),U7o=o(" (CANINE model)"),J7o=l(),t_=a("li"),Mce=a("strong"),Y7o=o("clip"),K7o=o(" \u2014 "),dj=a("a"),Z7o=o("CLIPModel"),e8o=o(" (CLIP model)"),o8o=l(),a_=a("li"),Ece=a("strong"),r8o=o("codegen"),t8o=o(" \u2014 "),cj=a("a"),a8o=o("CodeGenModel"),n8o=o(" (CodeGen model)"),s8o=l(),n_=a("li"),Cce=a("strong"),l8o=o("convbert"),i8o=o(" \u2014 "),fj=a("a"),d8o=o("ConvBertModel"),c8o=o(" (ConvBERT model)"),f8o=l(),s_=a("li"),wce=a("strong"),m8o=o("convnext"),g8o=o(" \u2014 "),mj=a("a"),h8o=o("ConvNextModel"),p8o=o(" (ConvNeXT model)"),_8o=l(),l_=a("li"),Ace=a("strong"),u8o=o("ctrl"),b8o=o(" \u2014 "),gj=a("a"),v8o=o("CTRLModel"),F8o=o(" (CTRL model)"),T8o=l(),i_=a("li"),Lce=a("strong"),M8o=o("cvt"),E8o=o(" \u2014 "),hj=a("a"),C8o=o("CvtModel"),w8o=o(" (CvT model)"),A8o=l(),d_=a("li"),yce=a("strong"),L8o=o("data2vec-audio"),y8o=o(" \u2014 "),pj=a("a"),x8o=o("Data2VecAudioModel"),$8o=o(" (Data2VecAudio model)"),k8o=l(),c_=a("li"),xce=a("strong"),S8o=o("data2vec-text"),R8o=o(" \u2014 "),_j=a("a"),P8o=o("Data2VecTextModel"),B8o=o(" (Data2VecText model)"),I8o=l(),f_=a("li"),$ce=a("strong"),N8o=o("data2vec-vision"),q8o=o(" \u2014 "),uj=a("a"),j8o=o("Data2VecVisionModel"),D8o=o(" (Data2VecVision model)"),G8o=l(),m_=a("li"),kce=a("strong"),O8o=o("deberta"),V8o=o(" \u2014 "),bj=a("a"),X8o=o("DebertaModel"),z8o=o(" (DeBERTa model)"),Q8o=l(),g_=a("li"),Sce=a("strong"),W8o=o("deberta-v2"),H8o=o(" \u2014 "),vj=a("a"),U8o=o("DebertaV2Model"),J8o=o(" (DeBERTa-v2 model)"),Y8o=l(),h_=a("li"),Rce=a("strong"),K8o=o("decision_transformer"),Z8o=o(" \u2014 "),Fj=a("a"),eMo=o("DecisionTransformerModel"),oMo=o(" (Decision Transformer model)"),rMo=l(),p_=a("li"),Pce=a("strong"),tMo=o("deformable_detr"),aMo=o(" \u2014 "),Tj=a("a"),nMo=o("DeformableDetrModel"),sMo=o(" (Deformable DETR model)"),lMo=l(),__=a("li"),Bce=a("strong"),iMo=o("deit"),dMo=o(" \u2014 "),Mj=a("a"),cMo=o("DeiTModel"),fMo=o(" (DeiT model)"),mMo=l(),u_=a("li"),Ice=a("strong"),gMo=o("detr"),hMo=o(" \u2014 "),Ej=a("a"),pMo=o("DetrModel"),_Mo=o(" (DETR model)"),uMo=l(),b_=a("li"),Nce=a("strong"),bMo=o("distilbert"),vMo=o(" \u2014 "),Cj=a("a"),FMo=o("DistilBertModel"),TMo=o(" (DistilBERT model)"),MMo=l(),v_=a("li"),qce=a("strong"),EMo=o("dpr"),CMo=o(" \u2014 "),wj=a("a"),wMo=o("DPRQuestionEncoder"),AMo=o(" (DPR model)"),LMo=l(),F_=a("li"),jce=a("strong"),yMo=o("dpt"),xMo=o(" \u2014 "),Aj=a("a"),$Mo=o("DPTModel"),kMo=o(" (DPT model)"),SMo=l(),T_=a("li"),Dce=a("strong"),RMo=o("electra"),PMo=o(" \u2014 "),Lj=a("a"),BMo=o("ElectraModel"),IMo=o(" (ELECTRA model)"),NMo=l(),M_=a("li"),Gce=a("strong"),qMo=o("flaubert"),jMo=o(" \u2014 "),yj=a("a"),DMo=o("FlaubertModel"),GMo=o(" (FlauBERT model)"),OMo=l(),E_=a("li"),Oce=a("strong"),VMo=o("flava"),XMo=o(" \u2014 "),xj=a("a"),zMo=o("FlavaModel"),QMo=o(" (FLAVA model)"),WMo=l(),C_=a("li"),Vce=a("strong"),HMo=o("fnet"),UMo=o(" \u2014 "),$j=a("a"),JMo=o("FNetModel"),YMo=o(" (FNet model)"),KMo=l(),w_=a("li"),Xce=a("strong"),ZMo=o("fsmt"),e4o=o(" \u2014 "),kj=a("a"),o4o=o("FSMTModel"),r4o=o(" (FairSeq Machine-Translation model)"),t4o=l(),Qs=a("li"),zce=a("strong"),a4o=o("funnel"),n4o=o(" \u2014 "),Sj=a("a"),s4o=o("FunnelModel"),l4o=o(" or "),Rj=a("a"),i4o=o("FunnelBaseModel"),d4o=o(" (Funnel Transformer model)"),c4o=l(),A_=a("li"),Qce=a("strong"),f4o=o("glpn"),m4o=o(" \u2014 "),Pj=a("a"),g4o=o("GLPNModel"),h4o=o(" (GLPN model)"),p4o=l(),L_=a("li"),Wce=a("strong"),_4o=o("gpt2"),u4o=o(" \u2014 "),Bj=a("a"),b4o=o("GPT2Model"),v4o=o(" (OpenAI GPT-2 model)"),F4o=l(),y_=a("li"),Hce=a("strong"),T4o=o("gpt_neo"),M4o=o(" \u2014 "),Ij=a("a"),E4o=o("GPTNeoModel"),C4o=o(" (GPT Neo model)"),w4o=l(),x_=a("li"),Uce=a("strong"),A4o=o("gpt_neox"),L4o=o(" \u2014 "),Nj=a("a"),y4o=o("GPTNeoXModel"),x4o=o(" (GPT NeoX model)"),$4o=l(),$_=a("li"),Jce=a("strong"),k4o=o("gptj"),S4o=o(" \u2014 "),qj=a("a"),R4o=o("GPTJModel"),P4o=o(" (GPT-J model)"),B4o=l(),k_=a("li"),Yce=a("strong"),I4o=o("groupvit"),N4o=o(" \u2014 "),jj=a("a"),q4o=o("GroupViTModel"),j4o=o(" (GroupViT model)"),D4o=l(),S_=a("li"),Kce=a("strong"),G4o=o("hubert"),O4o=o(" \u2014 "),Dj=a("a"),V4o=o("HubertModel"),X4o=o(" (Hubert model)"),z4o=l(),R_=a("li"),Zce=a("strong"),Q4o=o("ibert"),W4o=o(" \u2014 "),Gj=a("a"),H4o=o("IBertModel"),U4o=o(" (I-BERT model)"),J4o=l(),P_=a("li"),efe=a("strong"),Y4o=o("imagegpt"),K4o=o(" \u2014 "),Oj=a("a"),Z4o=o("ImageGPTModel"),eEo=o(" (ImageGPT model)"),oEo=l(),B_=a("li"),ofe=a("strong"),rEo=o("layoutlm"),tEo=o(" \u2014 "),Vj=a("a"),aEo=o("LayoutLMModel"),nEo=o(" (LayoutLM model)"),sEo=l(),I_=a("li"),rfe=a("strong"),lEo=o("layoutlmv2"),iEo=o(" \u2014 "),Xj=a("a"),dEo=o("LayoutLMv2Model"),cEo=o(" (LayoutLMv2 model)"),fEo=l(),N_=a("li"),tfe=a("strong"),mEo=o("layoutlmv3"),gEo=o(" \u2014 "),zj=a("a"),hEo=o("LayoutLMv3Model"),pEo=o(" (LayoutLMv3 model)"),_Eo=l(),q_=a("li"),afe=a("strong"),uEo=o("led"),bEo=o(" \u2014 "),Qj=a("a"),vEo=o("LEDModel"),FEo=o(" (LED model)"),TEo=l(),j_=a("li"),nfe=a("strong"),MEo=o("levit"),EEo=o(" \u2014 "),Wj=a("a"),CEo=o("LevitModel"),wEo=o(" (LeViT model)"),AEo=l(),D_=a("li"),sfe=a("strong"),LEo=o("longformer"),yEo=o(" \u2014 "),Hj=a("a"),xEo=o("LongformerModel"),$Eo=o(" (Longformer model)"),kEo=l(),G_=a("li"),lfe=a("strong"),SEo=o("longt5"),REo=o(" \u2014 "),Uj=a("a"),PEo=o("LongT5Model"),BEo=o(" (LongT5 model)"),IEo=l(),O_=a("li"),ife=a("strong"),NEo=o("luke"),qEo=o(" \u2014 "),Jj=a("a"),jEo=o("LukeModel"),DEo=o(" (LUKE model)"),GEo=l(),V_=a("li"),dfe=a("strong"),OEo=o("lxmert"),VEo=o(" \u2014 "),Yj=a("a"),XEo=o("LxmertModel"),zEo=o(" (LXMERT model)"),QEo=l(),X_=a("li"),cfe=a("strong"),WEo=o("m2m_100"),HEo=o(" \u2014 "),Kj=a("a"),UEo=o("M2M100Model"),JEo=o(" (M2M100 model)"),YEo=l(),z_=a("li"),ffe=a("strong"),KEo=o("marian"),ZEo=o(" \u2014 "),Zj=a("a"),eCo=o("MarianModel"),oCo=o(" (Marian model)"),rCo=l(),Q_=a("li"),mfe=a("strong"),tCo=o("maskformer"),aCo=o(" \u2014 "),eD=a("a"),nCo=o("MaskFormerModel"),sCo=o(" (MaskFormer model)"),lCo=l(),W_=a("li"),gfe=a("strong"),iCo=o("mbart"),dCo=o(" \u2014 "),oD=a("a"),cCo=o("MBartModel"),fCo=o(" (mBART model)"),mCo=l(),H_=a("li"),hfe=a("strong"),gCo=o("mctct"),hCo=o(" \u2014 "),rD=a("a"),pCo=o("MCTCTModel"),_Co=o(" (M-CTC-T model)"),uCo=l(),U_=a("li"),pfe=a("strong"),bCo=o("megatron-bert"),vCo=o(" \u2014 "),tD=a("a"),FCo=o("MegatronBertModel"),TCo=o(" (Megatron-BERT model)"),MCo=l(),J_=a("li"),_fe=a("strong"),ECo=o("mobilebert"),CCo=o(" \u2014 "),aD=a("a"),wCo=o("MobileBertModel"),ACo=o(" (MobileBERT model)"),LCo=l(),Y_=a("li"),ufe=a("strong"),yCo=o("mobilevit"),xCo=o(" \u2014 "),nD=a("a"),$Co=o("MobileViTModel"),kCo=o(" (MobileViT model)"),SCo=l(),K_=a("li"),bfe=a("strong"),RCo=o("mpnet"),PCo=o(" \u2014 "),sD=a("a"),BCo=o("MPNetModel"),ICo=o(" (MPNet model)"),NCo=l(),Z_=a("li"),vfe=a("strong"),qCo=o("mt5"),jCo=o(" \u2014 "),lD=a("a"),DCo=o("MT5Model"),GCo=o(" (MT5 model)"),OCo=l(),eu=a("li"),Ffe=a("strong"),VCo=o("mvp"),XCo=o(" \u2014 "),iD=a("a"),zCo=o("MvpModel"),QCo=o(" (MVP model)"),WCo=l(),ou=a("li"),Tfe=a("strong"),HCo=o("nezha"),UCo=o(" \u2014 "),dD=a("a"),JCo=o("NezhaModel"),YCo=o(" (Nezha model)"),KCo=l(),ru=a("li"),Mfe=a("strong"),ZCo=o("nystromformer"),e3o=o(" \u2014 "),cD=a("a"),o3o=o("NystromformerModel"),r3o=o(" (Nystr\xF6mformer model)"),t3o=l(),tu=a("li"),Efe=a("strong"),a3o=o("openai-gpt"),n3o=o(" \u2014 "),fD=a("a"),s3o=o("OpenAIGPTModel"),l3o=o(" (OpenAI GPT model)"),i3o=l(),au=a("li"),Cfe=a("strong"),d3o=o("opt"),c3o=o(" \u2014 "),mD=a("a"),f3o=o("OPTModel"),m3o=o(" (OPT model)"),g3o=l(),nu=a("li"),wfe=a("strong"),h3o=o("pegasus"),p3o=o(" \u2014 "),gD=a("a"),_3o=o("PegasusModel"),u3o=o(" (Pegasus model)"),b3o=l(),su=a("li"),Afe=a("strong"),v3o=o("perceiver"),F3o=o(" \u2014 "),hD=a("a"),T3o=o("PerceiverModel"),M3o=o(" (Perceiver model)"),E3o=l(),lu=a("li"),Lfe=a("strong"),C3o=o("plbart"),w3o=o(" \u2014 "),pD=a("a"),A3o=o("PLBartModel"),L3o=o(" (PLBart model)"),y3o=l(),iu=a("li"),yfe=a("strong"),x3o=o("poolformer"),$3o=o(" \u2014 "),_D=a("a"),k3o=o("PoolFormerModel"),S3o=o(" (PoolFormer model)"),R3o=l(),du=a("li"),xfe=a("strong"),P3o=o("prophetnet"),B3o=o(" \u2014 "),uD=a("a"),I3o=o("ProphetNetModel"),N3o=o(" (ProphetNet model)"),q3o=l(),cu=a("li"),$fe=a("strong"),j3o=o("qdqbert"),D3o=o(" \u2014 "),bD=a("a"),G3o=o("QDQBertModel"),O3o=o(" (QDQBert model)"),V3o=l(),fu=a("li"),kfe=a("strong"),X3o=o("reformer"),z3o=o(" \u2014 "),vD=a("a"),Q3o=o("ReformerModel"),W3o=o(" (Reformer model)"),H3o=l(),mu=a("li"),Sfe=a("strong"),U3o=o("regnet"),J3o=o(" \u2014 "),FD=a("a"),Y3o=o("RegNetModel"),K3o=o(" (RegNet model)"),Z3o=l(),gu=a("li"),Rfe=a("strong"),e5o=o("rembert"),o5o=o(" \u2014 "),TD=a("a"),r5o=o("RemBertModel"),t5o=o(" (RemBERT model)"),a5o=l(),hu=a("li"),Pfe=a("strong"),n5o=o("resnet"),s5o=o(" \u2014 "),MD=a("a"),l5o=o("ResNetModel"),i5o=o(" (ResNet model)"),d5o=l(),pu=a("li"),Bfe=a("strong"),c5o=o("retribert"),f5o=o(" \u2014 "),ED=a("a"),m5o=o("RetriBertModel"),g5o=o(" (RetriBERT model)"),h5o=l(),_u=a("li"),Ife=a("strong"),p5o=o("roberta"),_5o=o(" \u2014 "),CD=a("a"),u5o=o("RobertaModel"),b5o=o(" (RoBERTa model)"),v5o=l(),uu=a("li"),Nfe=a("strong"),F5o=o("roformer"),T5o=o(" \u2014 "),wD=a("a"),M5o=o("RoFormerModel"),E5o=o(" (RoFormer model)"),C5o=l(),bu=a("li"),qfe=a("strong"),w5o=o("segformer"),A5o=o(" \u2014 "),AD=a("a"),L5o=o("SegformerModel"),y5o=o(" (SegFormer model)"),x5o=l(),vu=a("li"),jfe=a("strong"),$5o=o("sew"),k5o=o(" \u2014 "),LD=a("a"),S5o=o("SEWModel"),R5o=o(" (SEW model)"),P5o=l(),Fu=a("li"),Dfe=a("strong"),B5o=o("sew-d"),I5o=o(" \u2014 "),yD=a("a"),N5o=o("SEWDModel"),q5o=o(" (SEW-D model)"),j5o=l(),Tu=a("li"),Gfe=a("strong"),D5o=o("speech_to_text"),G5o=o(" \u2014 "),xD=a("a"),O5o=o("Speech2TextModel"),V5o=o(" (Speech2Text model)"),X5o=l(),Mu=a("li"),Ofe=a("strong"),z5o=o("splinter"),Q5o=o(" \u2014 "),$D=a("a"),W5o=o("SplinterModel"),H5o=o(" (Splinter model)"),U5o=l(),Eu=a("li"),Vfe=a("strong"),J5o=o("squeezebert"),Y5o=o(" \u2014 "),kD=a("a"),K5o=o("SqueezeBertModel"),Z5o=o(" (SqueezeBERT model)"),e0o=l(),Cu=a("li"),Xfe=a("strong"),o0o=o("swin"),r0o=o(" \u2014 "),SD=a("a"),t0o=o("SwinModel"),a0o=o(" (Swin Transformer model)"),n0o=l(),wu=a("li"),zfe=a("strong"),s0o=o("t5"),l0o=o(" \u2014 "),RD=a("a"),i0o=o("T5Model"),d0o=o(" (T5 model)"),c0o=l(),Au=a("li"),Qfe=a("strong"),f0o=o("tapas"),m0o=o(" \u2014 "),PD=a("a"),g0o=o("TapasModel"),h0o=o(" (TAPAS model)"),p0o=l(),Lu=a("li"),Wfe=a("strong"),_0o=o("trajectory_transformer"),u0o=o(" \u2014 "),BD=a("a"),b0o=o("TrajectoryTransformerModel"),v0o=o(" (Trajectory Transformer model)"),F0o=l(),yu=a("li"),Hfe=a("strong"),T0o=o("transfo-xl"),M0o=o(" \u2014 "),ID=a("a"),E0o=o("TransfoXLModel"),C0o=o(" (Transformer-XL model)"),w0o=l(),xu=a("li"),Ufe=a("strong"),A0o=o("unispeech"),L0o=o(" \u2014 "),ND=a("a"),y0o=o("UniSpeechModel"),x0o=o(" (UniSpeech model)"),$0o=l(),$u=a("li"),Jfe=a("strong"),k0o=o("unispeech-sat"),S0o=o(" \u2014 "),qD=a("a"),R0o=o("UniSpeechSatModel"),P0o=o(" (UniSpeechSat model)"),B0o=l(),ku=a("li"),Yfe=a("strong"),I0o=o("van"),N0o=o(" \u2014 "),jD=a("a"),q0o=o("VanModel"),j0o=o(" (VAN model)"),D0o=l(),Su=a("li"),Kfe=a("strong"),G0o=o("vilt"),O0o=o(" \u2014 "),DD=a("a"),V0o=o("ViltModel"),X0o=o(" (ViLT model)"),z0o=l(),Ru=a("li"),Zfe=a("strong"),Q0o=o("vision-text-dual-encoder"),W0o=o(" \u2014 "),GD=a("a"),H0o=o("VisionTextDualEncoderModel"),U0o=o(" (VisionTextDualEncoder model)"),J0o=l(),Pu=a("li"),eme=a("strong"),Y0o=o("visual_bert"),K0o=o(" \u2014 "),OD=a("a"),Z0o=o("VisualBertModel"),ewo=o(" (VisualBERT model)"),owo=l(),Bu=a("li"),ome=a("strong"),rwo=o("vit"),two=o(" \u2014 "),VD=a("a"),awo=o("ViTModel"),nwo=o(" (ViT model)"),swo=l(),Iu=a("li"),rme=a("strong"),lwo=o("vit_mae"),iwo=o(" \u2014 "),XD=a("a"),dwo=o("ViTMAEModel"),cwo=o(" (ViTMAE model)"),fwo=l(),Nu=a("li"),tme=a("strong"),mwo=o("wav2vec2"),gwo=o(" \u2014 "),zD=a("a"),hwo=o("Wav2Vec2Model"),pwo=o(" (Wav2Vec2 model)"),_wo=l(),qu=a("li"),ame=a("strong"),uwo=o("wav2vec2-conformer"),bwo=o(" \u2014 "),QD=a("a"),vwo=o("Wav2Vec2ConformerModel"),Fwo=o(" (Wav2Vec2-Conformer model)"),Two=l(),ju=a("li"),nme=a("strong"),Mwo=o("wavlm"),Ewo=o(" \u2014 "),WD=a("a"),Cwo=o("WavLMModel"),wwo=o(" (WavLM model)"),Awo=l(),Du=a("li"),sme=a("strong"),Lwo=o("xglm"),ywo=o(" \u2014 "),HD=a("a"),xwo=o("XGLMModel"),$wo=o(" (XGLM model)"),kwo=l(),Gu=a("li"),lme=a("strong"),Swo=o("xlm"),Rwo=o(" \u2014 "),UD=a("a"),Pwo=o("XLMModel"),Bwo=o(" (XLM model)"),Iwo=l(),Ou=a("li"),ime=a("strong"),Nwo=o("xlm-prophetnet"),qwo=o(" \u2014 "),JD=a("a"),jwo=o("XLMProphetNetModel"),Dwo=o(" (XLM-ProphetNet model)"),Gwo=l(),Vu=a("li"),dme=a("strong"),Owo=o("xlm-roberta"),Vwo=o(" \u2014 "),YD=a("a"),Xwo=o("XLMRobertaModel"),zwo=o(" (XLM-RoBERTa model)"),Qwo=l(),Xu=a("li"),cme=a("strong"),Wwo=o("xlm-roberta-xl"),Hwo=o(" \u2014 "),KD=a("a"),Uwo=o("XLMRobertaXLModel"),Jwo=o(" (XLM-RoBERTa-XL model)"),Ywo=l(),zu=a("li"),fme=a("strong"),Kwo=o("xlnet"),Zwo=o(" \u2014 "),ZD=a("a"),eAo=o("XLNetModel"),oAo=o(" (XLNet model)"),rAo=l(),Qu=a("li"),mme=a("strong"),tAo=o("yolos"),aAo=o(" \u2014 "),eG=a("a"),nAo=o("YolosModel"),sAo=o(" (YOLOS model)"),lAo=l(),Wu=a("li"),gme=a("strong"),iAo=o("yoso"),dAo=o(" \u2014 "),oG=a("a"),cAo=o("YosoModel"),fAo=o(" (YOSO model)"),mAo=l(),Hu=a("p"),gAo=o("The model is set in evaluation mode by default using "),hme=a("code"),hAo=o("model.eval()"),pAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),_Ao=o("model.train()"),uAo=l(),F(Uu.$$.fragment),mXe=l(),Vi=a("h2"),Ju=a("a"),_me=a("span"),F(IL.$$.fragment),bAo=l(),ume=a("span"),vAo=o("AutoModelForPreTraining"),gXe=l(),$o=a("div"),F(NL.$$.fragment),FAo=l(),Xi=a("p"),TAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rG=a("a"),MAo=o("from_pretrained()"),EAo=o(" class method or the "),tG=a("a"),CAo=o("from_config()"),wAo=o(` class
method.`),AAo=l(),qL=a("p"),LAo=o("This class cannot be instantiated directly using "),bme=a("code"),yAo=o("__init__()"),xAo=o(" (throws an error)."),$Ao=l(),it=a("div"),F(jL.$$.fragment),kAo=l(),vme=a("p"),SAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RAo=l(),zi=a("p"),PAo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),BAo=o("not"),IAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),NAo=o("from_pretrained()"),qAo=o(" to load the model weights."),jAo=l(),F(Yu.$$.fragment),DAo=l(),Ye=a("div"),F(DL.$$.fragment),GAo=l(),Tme=a("p"),OAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VAo=l(),Ia=a("p"),XAo=o("The model class to instantiate is selected based on the "),Mme=a("code"),zAo=o("model_type"),QAo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),WAo=o("pretrained_model_name_or_path"),HAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),UAo=o("pretrained_model_name_or_path"),JAo=o(":"),YAo=l(),G=a("ul"),Ku=a("li"),wme=a("strong"),KAo=o("albert"),ZAo=o(" \u2014 "),nG=a("a"),e6o=o("AlbertForPreTraining"),o6o=o(" (ALBERT model)"),r6o=l(),Zu=a("li"),Ame=a("strong"),t6o=o("bart"),a6o=o(" \u2014 "),sG=a("a"),n6o=o("BartForConditionalGeneration"),s6o=o(" (BART model)"),l6o=l(),e1=a("li"),Lme=a("strong"),i6o=o("bert"),d6o=o(" \u2014 "),lG=a("a"),c6o=o("BertForPreTraining"),f6o=o(" (BERT model)"),m6o=l(),o1=a("li"),yme=a("strong"),g6o=o("big_bird"),h6o=o(" \u2014 "),iG=a("a"),p6o=o("BigBirdForPreTraining"),_6o=o(" (BigBird model)"),u6o=l(),r1=a("li"),xme=a("strong"),b6o=o("bloom"),v6o=o(" \u2014 "),dG=a("a"),F6o=o("BloomForCausalLM"),T6o=o(" (BLOOM model)"),M6o=l(),t1=a("li"),$me=a("strong"),E6o=o("camembert"),C6o=o(" \u2014 "),cG=a("a"),w6o=o("CamembertForMaskedLM"),A6o=o(" (CamemBERT model)"),L6o=l(),a1=a("li"),kme=a("strong"),y6o=o("ctrl"),x6o=o(" \u2014 "),fG=a("a"),$6o=o("CTRLLMHeadModel"),k6o=o(" (CTRL model)"),S6o=l(),n1=a("li"),Sme=a("strong"),R6o=o("data2vec-text"),P6o=o(" \u2014 "),mG=a("a"),B6o=o("Data2VecTextForMaskedLM"),I6o=o(" (Data2VecText model)"),N6o=l(),s1=a("li"),Rme=a("strong"),q6o=o("deberta"),j6o=o(" \u2014 "),gG=a("a"),D6o=o("DebertaForMaskedLM"),G6o=o(" (DeBERTa model)"),O6o=l(),l1=a("li"),Pme=a("strong"),V6o=o("deberta-v2"),X6o=o(" \u2014 "),hG=a("a"),z6o=o("DebertaV2ForMaskedLM"),Q6o=o(" (DeBERTa-v2 model)"),W6o=l(),i1=a("li"),Bme=a("strong"),H6o=o("distilbert"),U6o=o(" \u2014 "),pG=a("a"),J6o=o("DistilBertForMaskedLM"),Y6o=o(" (DistilBERT model)"),K6o=l(),d1=a("li"),Ime=a("strong"),Z6o=o("electra"),eLo=o(" \u2014 "),_G=a("a"),oLo=o("ElectraForPreTraining"),rLo=o(" (ELECTRA model)"),tLo=l(),c1=a("li"),Nme=a("strong"),aLo=o("flaubert"),nLo=o(" \u2014 "),uG=a("a"),sLo=o("FlaubertWithLMHeadModel"),lLo=o(" (FlauBERT model)"),iLo=l(),f1=a("li"),qme=a("strong"),dLo=o("flava"),cLo=o(" \u2014 "),bG=a("a"),fLo=o("FlavaForPreTraining"),mLo=o(" (FLAVA model)"),gLo=l(),m1=a("li"),jme=a("strong"),hLo=o("fnet"),pLo=o(" \u2014 "),vG=a("a"),_Lo=o("FNetForPreTraining"),uLo=o(" (FNet model)"),bLo=l(),g1=a("li"),Dme=a("strong"),vLo=o("fsmt"),FLo=o(" \u2014 "),FG=a("a"),TLo=o("FSMTForConditionalGeneration"),MLo=o(" (FairSeq Machine-Translation model)"),ELo=l(),h1=a("li"),Gme=a("strong"),CLo=o("funnel"),wLo=o(" \u2014 "),TG=a("a"),ALo=o("FunnelForPreTraining"),LLo=o(" (Funnel Transformer model)"),yLo=l(),p1=a("li"),Ome=a("strong"),xLo=o("gpt2"),$Lo=o(" \u2014 "),MG=a("a"),kLo=o("GPT2LMHeadModel"),SLo=o(" (OpenAI GPT-2 model)"),RLo=l(),_1=a("li"),Vme=a("strong"),PLo=o("ibert"),BLo=o(" \u2014 "),EG=a("a"),ILo=o("IBertForMaskedLM"),NLo=o(" (I-BERT model)"),qLo=l(),u1=a("li"),Xme=a("strong"),jLo=o("layoutlm"),DLo=o(" \u2014 "),CG=a("a"),GLo=o("LayoutLMForMaskedLM"),OLo=o(" (LayoutLM model)"),VLo=l(),b1=a("li"),zme=a("strong"),XLo=o("longformer"),zLo=o(" \u2014 "),wG=a("a"),QLo=o("LongformerForMaskedLM"),WLo=o(" (Longformer model)"),HLo=l(),v1=a("li"),Qme=a("strong"),ULo=o("lxmert"),JLo=o(" \u2014 "),AG=a("a"),YLo=o("LxmertForPreTraining"),KLo=o(" (LXMERT model)"),ZLo=l(),F1=a("li"),Wme=a("strong"),eyo=o("megatron-bert"),oyo=o(" \u2014 "),LG=a("a"),ryo=o("MegatronBertForPreTraining"),tyo=o(" (Megatron-BERT model)"),ayo=l(),T1=a("li"),Hme=a("strong"),nyo=o("mobilebert"),syo=o(" \u2014 "),yG=a("a"),lyo=o("MobileBertForPreTraining"),iyo=o(" (MobileBERT model)"),dyo=l(),M1=a("li"),Ume=a("strong"),cyo=o("mpnet"),fyo=o(" \u2014 "),xG=a("a"),myo=o("MPNetForMaskedLM"),gyo=o(" (MPNet model)"),hyo=l(),E1=a("li"),Jme=a("strong"),pyo=o("mvp"),_yo=o(" \u2014 "),$G=a("a"),uyo=o("MvpForConditionalGeneration"),byo=o(" (MVP model)"),vyo=l(),C1=a("li"),Yme=a("strong"),Fyo=o("nezha"),Tyo=o(" \u2014 "),kG=a("a"),Myo=o("NezhaForPreTraining"),Eyo=o(" (Nezha model)"),Cyo=l(),w1=a("li"),Kme=a("strong"),wyo=o("openai-gpt"),Ayo=o(" \u2014 "),SG=a("a"),Lyo=o("OpenAIGPTLMHeadModel"),yyo=o(" (OpenAI GPT model)"),xyo=l(),A1=a("li"),Zme=a("strong"),$yo=o("retribert"),kyo=o(" \u2014 "),RG=a("a"),Syo=o("RetriBertModel"),Ryo=o(" (RetriBERT model)"),Pyo=l(),L1=a("li"),ege=a("strong"),Byo=o("roberta"),Iyo=o(" \u2014 "),PG=a("a"),Nyo=o("RobertaForMaskedLM"),qyo=o(" (RoBERTa model)"),jyo=l(),y1=a("li"),oge=a("strong"),Dyo=o("splinter"),Gyo=o(" \u2014 "),BG=a("a"),Oyo=o("SplinterForPreTraining"),Vyo=o(" (Splinter model)"),Xyo=l(),x1=a("li"),rge=a("strong"),zyo=o("squeezebert"),Qyo=o(" \u2014 "),IG=a("a"),Wyo=o("SqueezeBertForMaskedLM"),Hyo=o(" (SqueezeBERT model)"),Uyo=l(),$1=a("li"),tge=a("strong"),Jyo=o("t5"),Yyo=o(" \u2014 "),NG=a("a"),Kyo=o("T5ForConditionalGeneration"),Zyo=o(" (T5 model)"),e9o=l(),k1=a("li"),age=a("strong"),o9o=o("tapas"),r9o=o(" \u2014 "),qG=a("a"),t9o=o("TapasForMaskedLM"),a9o=o(" (TAPAS model)"),n9o=l(),S1=a("li"),nge=a("strong"),s9o=o("transfo-xl"),l9o=o(" \u2014 "),jG=a("a"),i9o=o("TransfoXLLMHeadModel"),d9o=o(" (Transformer-XL model)"),c9o=l(),R1=a("li"),sge=a("strong"),f9o=o("unispeech"),m9o=o(" \u2014 "),DG=a("a"),g9o=o("UniSpeechForPreTraining"),h9o=o(" (UniSpeech model)"),p9o=l(),P1=a("li"),lge=a("strong"),_9o=o("unispeech-sat"),u9o=o(" \u2014 "),GG=a("a"),b9o=o("UniSpeechSatForPreTraining"),v9o=o(" (UniSpeechSat model)"),F9o=l(),B1=a("li"),ige=a("strong"),T9o=o("visual_bert"),M9o=o(" \u2014 "),OG=a("a"),E9o=o("VisualBertForPreTraining"),C9o=o(" (VisualBERT model)"),w9o=l(),I1=a("li"),dge=a("strong"),A9o=o("vit_mae"),L9o=o(" \u2014 "),VG=a("a"),y9o=o("ViTMAEForPreTraining"),x9o=o(" (ViTMAE model)"),$9o=l(),N1=a("li"),cge=a("strong"),k9o=o("wav2vec2"),S9o=o(" \u2014 "),XG=a("a"),R9o=o("Wav2Vec2ForPreTraining"),P9o=o(" (Wav2Vec2 model)"),B9o=l(),q1=a("li"),fge=a("strong"),I9o=o("wav2vec2-conformer"),N9o=o(" \u2014 "),zG=a("a"),q9o=o("Wav2Vec2ConformerForPreTraining"),j9o=o(" (Wav2Vec2-Conformer model)"),D9o=l(),j1=a("li"),mge=a("strong"),G9o=o("xlm"),O9o=o(" \u2014 "),QG=a("a"),V9o=o("XLMWithLMHeadModel"),X9o=o(" (XLM model)"),z9o=l(),D1=a("li"),gge=a("strong"),Q9o=o("xlm-roberta"),W9o=o(" \u2014 "),WG=a("a"),H9o=o("XLMRobertaForMaskedLM"),U9o=o(" (XLM-RoBERTa model)"),J9o=l(),G1=a("li"),hge=a("strong"),Y9o=o("xlm-roberta-xl"),K9o=o(" \u2014 "),HG=a("a"),Z9o=o("XLMRobertaXLForMaskedLM"),exo=o(" (XLM-RoBERTa-XL model)"),oxo=l(),O1=a("li"),pge=a("strong"),rxo=o("xlnet"),txo=o(" \u2014 "),UG=a("a"),axo=o("XLNetLMHeadModel"),nxo=o(" (XLNet model)"),sxo=l(),V1=a("p"),lxo=o("The model is set in evaluation mode by default using "),_ge=a("code"),ixo=o("model.eval()"),dxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),cxo=o("model.train()"),fxo=l(),F(X1.$$.fragment),hXe=l(),Qi=a("h2"),z1=a("a"),bge=a("span"),F(GL.$$.fragment),mxo=l(),vge=a("span"),gxo=o("AutoModelForCausalLM"),pXe=l(),ko=a("div"),F(OL.$$.fragment),hxo=l(),Wi=a("p"),pxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JG=a("a"),_xo=o("from_pretrained()"),uxo=o(" class method or the "),YG=a("a"),bxo=o("from_config()"),vxo=o(` class
method.`),Fxo=l(),VL=a("p"),Txo=o("This class cannot be instantiated directly using "),Fge=a("code"),Mxo=o("__init__()"),Exo=o(" (throws an error)."),Cxo=l(),dt=a("div"),F(XL.$$.fragment),wxo=l(),Tge=a("p"),Axo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lxo=l(),Hi=a("p"),yxo=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),xxo=o("not"),$xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),kxo=o("from_pretrained()"),Sxo=o(" to load the model weights."),Rxo=l(),F(Q1.$$.fragment),Pxo=l(),Ke=a("div"),F(zL.$$.fragment),Bxo=l(),Ege=a("p"),Ixo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nxo=l(),Na=a("p"),qxo=o("The model class to instantiate is selected based on the "),Cge=a("code"),jxo=o("model_type"),Dxo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),Gxo=o("pretrained_model_name_or_path"),Oxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),Vxo=o("pretrained_model_name_or_path"),Xxo=o(":"),zxo=l(),z=a("ul"),W1=a("li"),Lge=a("strong"),Qxo=o("bart"),Wxo=o(" \u2014 "),ZG=a("a"),Hxo=o("BartForCausalLM"),Uxo=o(" (BART model)"),Jxo=l(),H1=a("li"),yge=a("strong"),Yxo=o("bert"),Kxo=o(" \u2014 "),eO=a("a"),Zxo=o("BertLMHeadModel"),e$o=o(" (BERT model)"),o$o=l(),U1=a("li"),xge=a("strong"),r$o=o("bert-generation"),t$o=o(" \u2014 "),oO=a("a"),a$o=o("BertGenerationDecoder"),n$o=o(" (Bert Generation model)"),s$o=l(),J1=a("li"),$ge=a("strong"),l$o=o("big_bird"),i$o=o(" \u2014 "),rO=a("a"),d$o=o("BigBirdForCausalLM"),c$o=o(" (BigBird model)"),f$o=l(),Y1=a("li"),kge=a("strong"),m$o=o("bigbird_pegasus"),g$o=o(" \u2014 "),tO=a("a"),h$o=o("BigBirdPegasusForCausalLM"),p$o=o(" (BigBird-Pegasus model)"),_$o=l(),K1=a("li"),Sge=a("strong"),u$o=o("blenderbot"),b$o=o(" \u2014 "),aO=a("a"),v$o=o("BlenderbotForCausalLM"),F$o=o(" (Blenderbot model)"),T$o=l(),Z1=a("li"),Rge=a("strong"),M$o=o("blenderbot-small"),E$o=o(" \u2014 "),nO=a("a"),C$o=o("BlenderbotSmallForCausalLM"),w$o=o(" (BlenderbotSmall model)"),A$o=l(),e2=a("li"),Pge=a("strong"),L$o=o("bloom"),y$o=o(" \u2014 "),sO=a("a"),x$o=o("BloomForCausalLM"),$$o=o(" (BLOOM model)"),k$o=l(),o2=a("li"),Bge=a("strong"),S$o=o("camembert"),R$o=o(" \u2014 "),lO=a("a"),P$o=o("CamembertForCausalLM"),B$o=o(" (CamemBERT model)"),I$o=l(),r2=a("li"),Ige=a("strong"),N$o=o("codegen"),q$o=o(" \u2014 "),iO=a("a"),j$o=o("CodeGenForCausalLM"),D$o=o(" (CodeGen model)"),G$o=l(),t2=a("li"),Nge=a("strong"),O$o=o("ctrl"),V$o=o(" \u2014 "),dO=a("a"),X$o=o("CTRLLMHeadModel"),z$o=o(" (CTRL model)"),Q$o=l(),a2=a("li"),qge=a("strong"),W$o=o("data2vec-text"),H$o=o(" \u2014 "),cO=a("a"),U$o=o("Data2VecTextForCausalLM"),J$o=o(" (Data2VecText model)"),Y$o=l(),n2=a("li"),jge=a("strong"),K$o=o("electra"),Z$o=o(" \u2014 "),fO=a("a"),eko=o("ElectraForCausalLM"),oko=o(" (ELECTRA model)"),rko=l(),s2=a("li"),Dge=a("strong"),tko=o("gpt2"),ako=o(" \u2014 "),mO=a("a"),nko=o("GPT2LMHeadModel"),sko=o(" (OpenAI GPT-2 model)"),lko=l(),l2=a("li"),Gge=a("strong"),iko=o("gpt_neo"),dko=o(" \u2014 "),gO=a("a"),cko=o("GPTNeoForCausalLM"),fko=o(" (GPT Neo model)"),mko=l(),i2=a("li"),Oge=a("strong"),gko=o("gpt_neox"),hko=o(" \u2014 "),hO=a("a"),pko=o("GPTNeoXForCausalLM"),_ko=o(" (GPT NeoX model)"),uko=l(),d2=a("li"),Vge=a("strong"),bko=o("gptj"),vko=o(" \u2014 "),pO=a("a"),Fko=o("GPTJForCausalLM"),Tko=o(" (GPT-J model)"),Mko=l(),c2=a("li"),Xge=a("strong"),Eko=o("marian"),Cko=o(" \u2014 "),_O=a("a"),wko=o("MarianForCausalLM"),Ako=o(" (Marian model)"),Lko=l(),f2=a("li"),zge=a("strong"),yko=o("mbart"),xko=o(" \u2014 "),uO=a("a"),$ko=o("MBartForCausalLM"),kko=o(" (mBART model)"),Sko=l(),m2=a("li"),Qge=a("strong"),Rko=o("megatron-bert"),Pko=o(" \u2014 "),bO=a("a"),Bko=o("MegatronBertForCausalLM"),Iko=o(" (Megatron-BERT model)"),Nko=l(),g2=a("li"),Wge=a("strong"),qko=o("mvp"),jko=o(" \u2014 "),vO=a("a"),Dko=o("MvpForCausalLM"),Gko=o(" (MVP model)"),Oko=l(),h2=a("li"),Hge=a("strong"),Vko=o("openai-gpt"),Xko=o(" \u2014 "),FO=a("a"),zko=o("OpenAIGPTLMHeadModel"),Qko=o(" (OpenAI GPT model)"),Wko=l(),p2=a("li"),Uge=a("strong"),Hko=o("opt"),Uko=o(" \u2014 "),TO=a("a"),Jko=o("OPTForCausalLM"),Yko=o(" (OPT model)"),Kko=l(),_2=a("li"),Jge=a("strong"),Zko=o("pegasus"),eSo=o(" \u2014 "),MO=a("a"),oSo=o("PegasusForCausalLM"),rSo=o(" (Pegasus model)"),tSo=l(),u2=a("li"),Yge=a("strong"),aSo=o("plbart"),nSo=o(" \u2014 "),EO=a("a"),sSo=o("PLBartForCausalLM"),lSo=o(" (PLBart model)"),iSo=l(),b2=a("li"),Kge=a("strong"),dSo=o("prophetnet"),cSo=o(" \u2014 "),CO=a("a"),fSo=o("ProphetNetForCausalLM"),mSo=o(" (ProphetNet model)"),gSo=l(),v2=a("li"),Zge=a("strong"),hSo=o("qdqbert"),pSo=o(" \u2014 "),wO=a("a"),_So=o("QDQBertLMHeadModel"),uSo=o(" (QDQBert model)"),bSo=l(),F2=a("li"),ehe=a("strong"),vSo=o("reformer"),FSo=o(" \u2014 "),AO=a("a"),TSo=o("ReformerModelWithLMHead"),MSo=o(" (Reformer model)"),ESo=l(),T2=a("li"),ohe=a("strong"),CSo=o("rembert"),wSo=o(" \u2014 "),LO=a("a"),ASo=o("RemBertForCausalLM"),LSo=o(" (RemBERT model)"),ySo=l(),M2=a("li"),rhe=a("strong"),xSo=o("roberta"),$So=o(" \u2014 "),yO=a("a"),kSo=o("RobertaForCausalLM"),SSo=o(" (RoBERTa model)"),RSo=l(),E2=a("li"),the=a("strong"),PSo=o("roformer"),BSo=o(" \u2014 "),xO=a("a"),ISo=o("RoFormerForCausalLM"),NSo=o(" (RoFormer model)"),qSo=l(),C2=a("li"),ahe=a("strong"),jSo=o("speech_to_text_2"),DSo=o(" \u2014 "),$O=a("a"),GSo=o("Speech2Text2ForCausalLM"),OSo=o(" (Speech2Text2 model)"),VSo=l(),w2=a("li"),nhe=a("strong"),XSo=o("transfo-xl"),zSo=o(" \u2014 "),kO=a("a"),QSo=o("TransfoXLLMHeadModel"),WSo=o(" (Transformer-XL model)"),HSo=l(),A2=a("li"),she=a("strong"),USo=o("trocr"),JSo=o(" \u2014 "),SO=a("a"),YSo=o("TrOCRForCausalLM"),KSo=o(" (TrOCR model)"),ZSo=l(),L2=a("li"),lhe=a("strong"),eRo=o("xglm"),oRo=o(" \u2014 "),RO=a("a"),rRo=o("XGLMForCausalLM"),tRo=o(" (XGLM model)"),aRo=l(),y2=a("li"),ihe=a("strong"),nRo=o("xlm"),sRo=o(" \u2014 "),PO=a("a"),lRo=o("XLMWithLMHeadModel"),iRo=o(" (XLM model)"),dRo=l(),x2=a("li"),dhe=a("strong"),cRo=o("xlm-prophetnet"),fRo=o(" \u2014 "),BO=a("a"),mRo=o("XLMProphetNetForCausalLM"),gRo=o(" (XLM-ProphetNet model)"),hRo=l(),$2=a("li"),che=a("strong"),pRo=o("xlm-roberta"),_Ro=o(" \u2014 "),IO=a("a"),uRo=o("XLMRobertaForCausalLM"),bRo=o(" (XLM-RoBERTa model)"),vRo=l(),k2=a("li"),fhe=a("strong"),FRo=o("xlm-roberta-xl"),TRo=o(" \u2014 "),NO=a("a"),MRo=o("XLMRobertaXLForCausalLM"),ERo=o(" (XLM-RoBERTa-XL model)"),CRo=l(),S2=a("li"),mhe=a("strong"),wRo=o("xlnet"),ARo=o(" \u2014 "),qO=a("a"),LRo=o("XLNetLMHeadModel"),yRo=o(" (XLNet model)"),xRo=l(),R2=a("p"),$Ro=o("The model is set in evaluation mode by default using "),ghe=a("code"),kRo=o("model.eval()"),SRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=a("code"),RRo=o("model.train()"),PRo=l(),F(P2.$$.fragment),_Xe=l(),Ui=a("h2"),B2=a("a"),phe=a("span"),F(QL.$$.fragment),BRo=l(),_he=a("span"),IRo=o("AutoModelForMaskedLM"),uXe=l(),So=a("div"),F(WL.$$.fragment),NRo=l(),Ji=a("p"),qRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jO=a("a"),jRo=o("from_pretrained()"),DRo=o(" class method or the "),DO=a("a"),GRo=o("from_config()"),ORo=o(` class
method.`),VRo=l(),HL=a("p"),XRo=o("This class cannot be instantiated directly using "),uhe=a("code"),zRo=o("__init__()"),QRo=o(" (throws an error)."),WRo=l(),ct=a("div"),F(UL.$$.fragment),HRo=l(),bhe=a("p"),URo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JRo=l(),Yi=a("p"),YRo=o(`Note:
Loading a model from its configuration file does `),vhe=a("strong"),KRo=o("not"),ZRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),ePo=o("from_pretrained()"),oPo=o(" to load the model weights."),rPo=l(),F(I2.$$.fragment),tPo=l(),Ze=a("div"),F(JL.$$.fragment),aPo=l(),Fhe=a("p"),nPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sPo=l(),qa=a("p"),lPo=o("The model class to instantiate is selected based on the "),The=a("code"),iPo=o("model_type"),dPo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),cPo=o("pretrained_model_name_or_path"),fPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),mPo=o("pretrained_model_name_or_path"),gPo=o(":"),hPo=l(),W=a("ul"),N2=a("li"),Che=a("strong"),pPo=o("albert"),_Po=o(" \u2014 "),OO=a("a"),uPo=o("AlbertForMaskedLM"),bPo=o(" (ALBERT model)"),vPo=l(),q2=a("li"),whe=a("strong"),FPo=o("bart"),TPo=o(" \u2014 "),VO=a("a"),MPo=o("BartForConditionalGeneration"),EPo=o(" (BART model)"),CPo=l(),j2=a("li"),Ahe=a("strong"),wPo=o("bert"),APo=o(" \u2014 "),XO=a("a"),LPo=o("BertForMaskedLM"),yPo=o(" (BERT model)"),xPo=l(),D2=a("li"),Lhe=a("strong"),$Po=o("big_bird"),kPo=o(" \u2014 "),zO=a("a"),SPo=o("BigBirdForMaskedLM"),RPo=o(" (BigBird model)"),PPo=l(),G2=a("li"),yhe=a("strong"),BPo=o("camembert"),IPo=o(" \u2014 "),QO=a("a"),NPo=o("CamembertForMaskedLM"),qPo=o(" (CamemBERT model)"),jPo=l(),O2=a("li"),xhe=a("strong"),DPo=o("convbert"),GPo=o(" \u2014 "),WO=a("a"),OPo=o("ConvBertForMaskedLM"),VPo=o(" (ConvBERT model)"),XPo=l(),V2=a("li"),$he=a("strong"),zPo=o("data2vec-text"),QPo=o(" \u2014 "),HO=a("a"),WPo=o("Data2VecTextForMaskedLM"),HPo=o(" (Data2VecText model)"),UPo=l(),X2=a("li"),khe=a("strong"),JPo=o("deberta"),YPo=o(" \u2014 "),UO=a("a"),KPo=o("DebertaForMaskedLM"),ZPo=o(" (DeBERTa model)"),eBo=l(),z2=a("li"),She=a("strong"),oBo=o("deberta-v2"),rBo=o(" \u2014 "),JO=a("a"),tBo=o("DebertaV2ForMaskedLM"),aBo=o(" (DeBERTa-v2 model)"),nBo=l(),Q2=a("li"),Rhe=a("strong"),sBo=o("distilbert"),lBo=o(" \u2014 "),YO=a("a"),iBo=o("DistilBertForMaskedLM"),dBo=o(" (DistilBERT model)"),cBo=l(),W2=a("li"),Phe=a("strong"),fBo=o("electra"),mBo=o(" \u2014 "),KO=a("a"),gBo=o("ElectraForMaskedLM"),hBo=o(" (ELECTRA model)"),pBo=l(),H2=a("li"),Bhe=a("strong"),_Bo=o("flaubert"),uBo=o(" \u2014 "),ZO=a("a"),bBo=o("FlaubertWithLMHeadModel"),vBo=o(" (FlauBERT model)"),FBo=l(),U2=a("li"),Ihe=a("strong"),TBo=o("fnet"),MBo=o(" \u2014 "),eV=a("a"),EBo=o("FNetForMaskedLM"),CBo=o(" (FNet model)"),wBo=l(),J2=a("li"),Nhe=a("strong"),ABo=o("funnel"),LBo=o(" \u2014 "),oV=a("a"),yBo=o("FunnelForMaskedLM"),xBo=o(" (Funnel Transformer model)"),$Bo=l(),Y2=a("li"),qhe=a("strong"),kBo=o("ibert"),SBo=o(" \u2014 "),rV=a("a"),RBo=o("IBertForMaskedLM"),PBo=o(" (I-BERT model)"),BBo=l(),K2=a("li"),jhe=a("strong"),IBo=o("layoutlm"),NBo=o(" \u2014 "),tV=a("a"),qBo=o("LayoutLMForMaskedLM"),jBo=o(" (LayoutLM model)"),DBo=l(),Z2=a("li"),Dhe=a("strong"),GBo=o("longformer"),OBo=o(" \u2014 "),aV=a("a"),VBo=o("LongformerForMaskedLM"),XBo=o(" (Longformer model)"),zBo=l(),eb=a("li"),Ghe=a("strong"),QBo=o("luke"),WBo=o(" \u2014 "),nV=a("a"),HBo=o("LukeForMaskedLM"),UBo=o(" (LUKE model)"),JBo=l(),ob=a("li"),Ohe=a("strong"),YBo=o("mbart"),KBo=o(" \u2014 "),sV=a("a"),ZBo=o("MBartForConditionalGeneration"),eIo=o(" (mBART model)"),oIo=l(),rb=a("li"),Vhe=a("strong"),rIo=o("megatron-bert"),tIo=o(" \u2014 "),lV=a("a"),aIo=o("MegatronBertForMaskedLM"),nIo=o(" (Megatron-BERT model)"),sIo=l(),tb=a("li"),Xhe=a("strong"),lIo=o("mobilebert"),iIo=o(" \u2014 "),iV=a("a"),dIo=o("MobileBertForMaskedLM"),cIo=o(" (MobileBERT model)"),fIo=l(),ab=a("li"),zhe=a("strong"),mIo=o("mpnet"),gIo=o(" \u2014 "),dV=a("a"),hIo=o("MPNetForMaskedLM"),pIo=o(" (MPNet model)"),_Io=l(),nb=a("li"),Qhe=a("strong"),uIo=o("mvp"),bIo=o(" \u2014 "),cV=a("a"),vIo=o("MvpForConditionalGeneration"),FIo=o(" (MVP model)"),TIo=l(),sb=a("li"),Whe=a("strong"),MIo=o("nezha"),EIo=o(" \u2014 "),fV=a("a"),CIo=o("NezhaForMaskedLM"),wIo=o(" (Nezha model)"),AIo=l(),lb=a("li"),Hhe=a("strong"),LIo=o("nystromformer"),yIo=o(" \u2014 "),mV=a("a"),xIo=o("NystromformerForMaskedLM"),$Io=o(" (Nystr\xF6mformer model)"),kIo=l(),ib=a("li"),Uhe=a("strong"),SIo=o("perceiver"),RIo=o(" \u2014 "),gV=a("a"),PIo=o("PerceiverForMaskedLM"),BIo=o(" (Perceiver model)"),IIo=l(),db=a("li"),Jhe=a("strong"),NIo=o("qdqbert"),qIo=o(" \u2014 "),hV=a("a"),jIo=o("QDQBertForMaskedLM"),DIo=o(" (QDQBert model)"),GIo=l(),cb=a("li"),Yhe=a("strong"),OIo=o("reformer"),VIo=o(" \u2014 "),pV=a("a"),XIo=o("ReformerForMaskedLM"),zIo=o(" (Reformer model)"),QIo=l(),fb=a("li"),Khe=a("strong"),WIo=o("rembert"),HIo=o(" \u2014 "),_V=a("a"),UIo=o("RemBertForMaskedLM"),JIo=o(" (RemBERT model)"),YIo=l(),mb=a("li"),Zhe=a("strong"),KIo=o("roberta"),ZIo=o(" \u2014 "),uV=a("a"),eNo=o("RobertaForMaskedLM"),oNo=o(" (RoBERTa model)"),rNo=l(),gb=a("li"),epe=a("strong"),tNo=o("roformer"),aNo=o(" \u2014 "),bV=a("a"),nNo=o("RoFormerForMaskedLM"),sNo=o(" (RoFormer model)"),lNo=l(),hb=a("li"),ope=a("strong"),iNo=o("squeezebert"),dNo=o(" \u2014 "),vV=a("a"),cNo=o("SqueezeBertForMaskedLM"),fNo=o(" (SqueezeBERT model)"),mNo=l(),pb=a("li"),rpe=a("strong"),gNo=o("tapas"),hNo=o(" \u2014 "),FV=a("a"),pNo=o("TapasForMaskedLM"),_No=o(" (TAPAS model)"),uNo=l(),_b=a("li"),tpe=a("strong"),bNo=o("wav2vec2"),vNo=o(" \u2014 "),ape=a("code"),FNo=o("Wav2Vec2ForMaskedLM"),TNo=o(" (Wav2Vec2 model)"),MNo=l(),ub=a("li"),npe=a("strong"),ENo=o("xlm"),CNo=o(" \u2014 "),TV=a("a"),wNo=o("XLMWithLMHeadModel"),ANo=o(" (XLM model)"),LNo=l(),bb=a("li"),spe=a("strong"),yNo=o("xlm-roberta"),xNo=o(" \u2014 "),MV=a("a"),$No=o("XLMRobertaForMaskedLM"),kNo=o(" (XLM-RoBERTa model)"),SNo=l(),vb=a("li"),lpe=a("strong"),RNo=o("xlm-roberta-xl"),PNo=o(" \u2014 "),EV=a("a"),BNo=o("XLMRobertaXLForMaskedLM"),INo=o(" (XLM-RoBERTa-XL model)"),NNo=l(),Fb=a("li"),ipe=a("strong"),qNo=o("yoso"),jNo=o(" \u2014 "),CV=a("a"),DNo=o("YosoForMaskedLM"),GNo=o(" (YOSO model)"),ONo=l(),Tb=a("p"),VNo=o("The model is set in evaluation mode by default using "),dpe=a("code"),XNo=o("model.eval()"),zNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),QNo=o("model.train()"),WNo=l(),F(Mb.$$.fragment),bXe=l(),Ki=a("h2"),Eb=a("a"),fpe=a("span"),F(YL.$$.fragment),HNo=l(),mpe=a("span"),UNo=o("AutoModelForSeq2SeqLM"),vXe=l(),Ro=a("div"),F(KL.$$.fragment),JNo=l(),Zi=a("p"),YNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wV=a("a"),KNo=o("from_pretrained()"),ZNo=o(" class method or the "),AV=a("a"),eqo=o("from_config()"),oqo=o(` class
method.`),rqo=l(),ZL=a("p"),tqo=o("This class cannot be instantiated directly using "),gpe=a("code"),aqo=o("__init__()"),nqo=o(" (throws an error)."),sqo=l(),ft=a("div"),F(ey.$$.fragment),lqo=l(),hpe=a("p"),iqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dqo=l(),ed=a("p"),cqo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),fqo=o("not"),mqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),gqo=o("from_pretrained()"),hqo=o(" to load the model weights."),pqo=l(),F(Cb.$$.fragment),_qo=l(),eo=a("div"),F(oy.$$.fragment),uqo=l(),_pe=a("p"),bqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vqo=l(),ja=a("p"),Fqo=o("The model class to instantiate is selected based on the "),upe=a("code"),Tqo=o("model_type"),Mqo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),Eqo=o("pretrained_model_name_or_path"),Cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),wqo=o("pretrained_model_name_or_path"),Aqo=o(":"),Lqo=l(),pe=a("ul"),wb=a("li"),Fpe=a("strong"),yqo=o("bart"),xqo=o(" \u2014 "),yV=a("a"),$qo=o("BartForConditionalGeneration"),kqo=o(" (BART model)"),Sqo=l(),Ab=a("li"),Tpe=a("strong"),Rqo=o("bigbird_pegasus"),Pqo=o(" \u2014 "),xV=a("a"),Bqo=o("BigBirdPegasusForConditionalGeneration"),Iqo=o(" (BigBird-Pegasus model)"),Nqo=l(),Lb=a("li"),Mpe=a("strong"),qqo=o("blenderbot"),jqo=o(" \u2014 "),$V=a("a"),Dqo=o("BlenderbotForConditionalGeneration"),Gqo=o(" (Blenderbot model)"),Oqo=l(),yb=a("li"),Epe=a("strong"),Vqo=o("blenderbot-small"),Xqo=o(" \u2014 "),kV=a("a"),zqo=o("BlenderbotSmallForConditionalGeneration"),Qqo=o(" (BlenderbotSmall model)"),Wqo=l(),xb=a("li"),Cpe=a("strong"),Hqo=o("encoder-decoder"),Uqo=o(" \u2014 "),SV=a("a"),Jqo=o("EncoderDecoderModel"),Yqo=o(" (Encoder decoder model)"),Kqo=l(),$b=a("li"),wpe=a("strong"),Zqo=o("fsmt"),ejo=o(" \u2014 "),RV=a("a"),ojo=o("FSMTForConditionalGeneration"),rjo=o(" (FairSeq Machine-Translation model)"),tjo=l(),kb=a("li"),Ape=a("strong"),ajo=o("led"),njo=o(" \u2014 "),PV=a("a"),sjo=o("LEDForConditionalGeneration"),ljo=o(" (LED model)"),ijo=l(),Sb=a("li"),Lpe=a("strong"),djo=o("longt5"),cjo=o(" \u2014 "),BV=a("a"),fjo=o("LongT5ForConditionalGeneration"),mjo=o(" (LongT5 model)"),gjo=l(),Rb=a("li"),ype=a("strong"),hjo=o("m2m_100"),pjo=o(" \u2014 "),IV=a("a"),_jo=o("M2M100ForConditionalGeneration"),ujo=o(" (M2M100 model)"),bjo=l(),Pb=a("li"),xpe=a("strong"),vjo=o("marian"),Fjo=o(" \u2014 "),NV=a("a"),Tjo=o("MarianMTModel"),Mjo=o(" (Marian model)"),Ejo=l(),Bb=a("li"),$pe=a("strong"),Cjo=o("mbart"),wjo=o(" \u2014 "),qV=a("a"),Ajo=o("MBartForConditionalGeneration"),Ljo=o(" (mBART model)"),yjo=l(),Ib=a("li"),kpe=a("strong"),xjo=o("mt5"),$jo=o(" \u2014 "),jV=a("a"),kjo=o("MT5ForConditionalGeneration"),Sjo=o(" (MT5 model)"),Rjo=l(),Nb=a("li"),Spe=a("strong"),Pjo=o("mvp"),Bjo=o(" \u2014 "),DV=a("a"),Ijo=o("MvpForConditionalGeneration"),Njo=o(" (MVP model)"),qjo=l(),qb=a("li"),Rpe=a("strong"),jjo=o("pegasus"),Djo=o(" \u2014 "),GV=a("a"),Gjo=o("PegasusForConditionalGeneration"),Ojo=o(" (Pegasus model)"),Vjo=l(),jb=a("li"),Ppe=a("strong"),Xjo=o("plbart"),zjo=o(" \u2014 "),OV=a("a"),Qjo=o("PLBartForConditionalGeneration"),Wjo=o(" (PLBart model)"),Hjo=l(),Db=a("li"),Bpe=a("strong"),Ujo=o("prophetnet"),Jjo=o(" \u2014 "),VV=a("a"),Yjo=o("ProphetNetForConditionalGeneration"),Kjo=o(" (ProphetNet model)"),Zjo=l(),Gb=a("li"),Ipe=a("strong"),eDo=o("t5"),oDo=o(" \u2014 "),XV=a("a"),rDo=o("T5ForConditionalGeneration"),tDo=o(" (T5 model)"),aDo=l(),Ob=a("li"),Npe=a("strong"),nDo=o("xlm-prophetnet"),sDo=o(" \u2014 "),zV=a("a"),lDo=o("XLMProphetNetForConditionalGeneration"),iDo=o(" (XLM-ProphetNet model)"),dDo=l(),Vb=a("p"),cDo=o("The model is set in evaluation mode by default using "),qpe=a("code"),fDo=o("model.eval()"),mDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),gDo=o("model.train()"),hDo=l(),F(Xb.$$.fragment),FXe=l(),od=a("h2"),zb=a("a"),Dpe=a("span"),F(ry.$$.fragment),pDo=l(),Gpe=a("span"),_Do=o("AutoModelForSequenceClassification"),TXe=l(),Po=a("div"),F(ty.$$.fragment),uDo=l(),rd=a("p"),bDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QV=a("a"),vDo=o("from_pretrained()"),FDo=o(" class method or the "),WV=a("a"),TDo=o("from_config()"),MDo=o(` class
method.`),EDo=l(),ay=a("p"),CDo=o("This class cannot be instantiated directly using "),Ope=a("code"),wDo=o("__init__()"),ADo=o(" (throws an error)."),LDo=l(),mt=a("div"),F(ny.$$.fragment),yDo=l(),Vpe=a("p"),xDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Do=l(),td=a("p"),kDo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),SDo=o("not"),RDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),PDo=o("from_pretrained()"),BDo=o(" to load the model weights."),IDo=l(),F(Qb.$$.fragment),NDo=l(),oo=a("div"),F(sy.$$.fragment),qDo=l(),zpe=a("p"),jDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DDo=l(),Da=a("p"),GDo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),ODo=o("model_type"),VDo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),QDo=o("pretrained_model_name_or_path"),WDo=o(":"),HDo=l(),N=a("ul"),Wb=a("li"),Upe=a("strong"),UDo=o("albert"),JDo=o(" \u2014 "),UV=a("a"),YDo=o("AlbertForSequenceClassification"),KDo=o(" (ALBERT model)"),ZDo=l(),Hb=a("li"),Jpe=a("strong"),eGo=o("bart"),oGo=o(" \u2014 "),JV=a("a"),rGo=o("BartForSequenceClassification"),tGo=o(" (BART model)"),aGo=l(),Ub=a("li"),Ype=a("strong"),nGo=o("bert"),sGo=o(" \u2014 "),YV=a("a"),lGo=o("BertForSequenceClassification"),iGo=o(" (BERT model)"),dGo=l(),Jb=a("li"),Kpe=a("strong"),cGo=o("big_bird"),fGo=o(" \u2014 "),KV=a("a"),mGo=o("BigBirdForSequenceClassification"),gGo=o(" (BigBird model)"),hGo=l(),Yb=a("li"),Zpe=a("strong"),pGo=o("bigbird_pegasus"),_Go=o(" \u2014 "),ZV=a("a"),uGo=o("BigBirdPegasusForSequenceClassification"),bGo=o(" (BigBird-Pegasus model)"),vGo=l(),Kb=a("li"),e_e=a("strong"),FGo=o("bloom"),TGo=o(" \u2014 "),eX=a("a"),MGo=o("BloomForSequenceClassification"),EGo=o(" (BLOOM model)"),CGo=l(),Zb=a("li"),o_e=a("strong"),wGo=o("camembert"),AGo=o(" \u2014 "),oX=a("a"),LGo=o("CamembertForSequenceClassification"),yGo=o(" (CamemBERT model)"),xGo=l(),ev=a("li"),r_e=a("strong"),$Go=o("canine"),kGo=o(" \u2014 "),rX=a("a"),SGo=o("CanineForSequenceClassification"),RGo=o(" (CANINE model)"),PGo=l(),ov=a("li"),t_e=a("strong"),BGo=o("convbert"),IGo=o(" \u2014 "),tX=a("a"),NGo=o("ConvBertForSequenceClassification"),qGo=o(" (ConvBERT model)"),jGo=l(),rv=a("li"),a_e=a("strong"),DGo=o("ctrl"),GGo=o(" \u2014 "),aX=a("a"),OGo=o("CTRLForSequenceClassification"),VGo=o(" (CTRL model)"),XGo=l(),tv=a("li"),n_e=a("strong"),zGo=o("data2vec-text"),QGo=o(" \u2014 "),nX=a("a"),WGo=o("Data2VecTextForSequenceClassification"),HGo=o(" (Data2VecText model)"),UGo=l(),av=a("li"),s_e=a("strong"),JGo=o("deberta"),YGo=o(" \u2014 "),sX=a("a"),KGo=o("DebertaForSequenceClassification"),ZGo=o(" (DeBERTa model)"),eOo=l(),nv=a("li"),l_e=a("strong"),oOo=o("deberta-v2"),rOo=o(" \u2014 "),lX=a("a"),tOo=o("DebertaV2ForSequenceClassification"),aOo=o(" (DeBERTa-v2 model)"),nOo=l(),sv=a("li"),i_e=a("strong"),sOo=o("distilbert"),lOo=o(" \u2014 "),iX=a("a"),iOo=o("DistilBertForSequenceClassification"),dOo=o(" (DistilBERT model)"),cOo=l(),lv=a("li"),d_e=a("strong"),fOo=o("electra"),mOo=o(" \u2014 "),dX=a("a"),gOo=o("ElectraForSequenceClassification"),hOo=o(" (ELECTRA model)"),pOo=l(),iv=a("li"),c_e=a("strong"),_Oo=o("flaubert"),uOo=o(" \u2014 "),cX=a("a"),bOo=o("FlaubertForSequenceClassification"),vOo=o(" (FlauBERT model)"),FOo=l(),dv=a("li"),f_e=a("strong"),TOo=o("fnet"),MOo=o(" \u2014 "),fX=a("a"),EOo=o("FNetForSequenceClassification"),COo=o(" (FNet model)"),wOo=l(),cv=a("li"),m_e=a("strong"),AOo=o("funnel"),LOo=o(" \u2014 "),mX=a("a"),yOo=o("FunnelForSequenceClassification"),xOo=o(" (Funnel Transformer model)"),$Oo=l(),fv=a("li"),g_e=a("strong"),kOo=o("gpt2"),SOo=o(" \u2014 "),gX=a("a"),ROo=o("GPT2ForSequenceClassification"),POo=o(" (OpenAI GPT-2 model)"),BOo=l(),mv=a("li"),h_e=a("strong"),IOo=o("gpt_neo"),NOo=o(" \u2014 "),hX=a("a"),qOo=o("GPTNeoForSequenceClassification"),jOo=o(" (GPT Neo model)"),DOo=l(),gv=a("li"),p_e=a("strong"),GOo=o("gptj"),OOo=o(" \u2014 "),pX=a("a"),VOo=o("GPTJForSequenceClassification"),XOo=o(" (GPT-J model)"),zOo=l(),hv=a("li"),__e=a("strong"),QOo=o("ibert"),WOo=o(" \u2014 "),_X=a("a"),HOo=o("IBertForSequenceClassification"),UOo=o(" (I-BERT model)"),JOo=l(),pv=a("li"),u_e=a("strong"),YOo=o("layoutlm"),KOo=o(" \u2014 "),uX=a("a"),ZOo=o("LayoutLMForSequenceClassification"),eVo=o(" (LayoutLM model)"),oVo=l(),_v=a("li"),b_e=a("strong"),rVo=o("layoutlmv2"),tVo=o(" \u2014 "),bX=a("a"),aVo=o("LayoutLMv2ForSequenceClassification"),nVo=o(" (LayoutLMv2 model)"),sVo=l(),uv=a("li"),v_e=a("strong"),lVo=o("layoutlmv3"),iVo=o(" \u2014 "),vX=a("a"),dVo=o("LayoutLMv3ForSequenceClassification"),cVo=o(" (LayoutLMv3 model)"),fVo=l(),bv=a("li"),F_e=a("strong"),mVo=o("led"),gVo=o(" \u2014 "),FX=a("a"),hVo=o("LEDForSequenceClassification"),pVo=o(" (LED model)"),_Vo=l(),vv=a("li"),T_e=a("strong"),uVo=o("longformer"),bVo=o(" \u2014 "),TX=a("a"),vVo=o("LongformerForSequenceClassification"),FVo=o(" (Longformer model)"),TVo=l(),Fv=a("li"),M_e=a("strong"),MVo=o("mbart"),EVo=o(" \u2014 "),MX=a("a"),CVo=o("MBartForSequenceClassification"),wVo=o(" (mBART model)"),AVo=l(),Tv=a("li"),E_e=a("strong"),LVo=o("megatron-bert"),yVo=o(" \u2014 "),EX=a("a"),xVo=o("MegatronBertForSequenceClassification"),$Vo=o(" (Megatron-BERT model)"),kVo=l(),Mv=a("li"),C_e=a("strong"),SVo=o("mobilebert"),RVo=o(" \u2014 "),CX=a("a"),PVo=o("MobileBertForSequenceClassification"),BVo=o(" (MobileBERT model)"),IVo=l(),Ev=a("li"),w_e=a("strong"),NVo=o("mpnet"),qVo=o(" \u2014 "),wX=a("a"),jVo=o("MPNetForSequenceClassification"),DVo=o(" (MPNet model)"),GVo=l(),Cv=a("li"),A_e=a("strong"),OVo=o("mvp"),VVo=o(" \u2014 "),AX=a("a"),XVo=o("MvpForSequenceClassification"),zVo=o(" (MVP model)"),QVo=l(),wv=a("li"),L_e=a("strong"),WVo=o("nezha"),HVo=o(" \u2014 "),LX=a("a"),UVo=o("NezhaForSequenceClassification"),JVo=o(" (Nezha model)"),YVo=l(),Av=a("li"),y_e=a("strong"),KVo=o("nystromformer"),ZVo=o(" \u2014 "),yX=a("a"),eXo=o("NystromformerForSequenceClassification"),oXo=o(" (Nystr\xF6mformer model)"),rXo=l(),Lv=a("li"),x_e=a("strong"),tXo=o("openai-gpt"),aXo=o(" \u2014 "),xX=a("a"),nXo=o("OpenAIGPTForSequenceClassification"),sXo=o(" (OpenAI GPT model)"),lXo=l(),yv=a("li"),$_e=a("strong"),iXo=o("perceiver"),dXo=o(" \u2014 "),$X=a("a"),cXo=o("PerceiverForSequenceClassification"),fXo=o(" (Perceiver model)"),mXo=l(),xv=a("li"),k_e=a("strong"),gXo=o("plbart"),hXo=o(" \u2014 "),kX=a("a"),pXo=o("PLBartForSequenceClassification"),_Xo=o(" (PLBart model)"),uXo=l(),$v=a("li"),S_e=a("strong"),bXo=o("qdqbert"),vXo=o(" \u2014 "),SX=a("a"),FXo=o("QDQBertForSequenceClassification"),TXo=o(" (QDQBert model)"),MXo=l(),kv=a("li"),R_e=a("strong"),EXo=o("reformer"),CXo=o(" \u2014 "),RX=a("a"),wXo=o("ReformerForSequenceClassification"),AXo=o(" (Reformer model)"),LXo=l(),Sv=a("li"),P_e=a("strong"),yXo=o("rembert"),xXo=o(" \u2014 "),PX=a("a"),$Xo=o("RemBertForSequenceClassification"),kXo=o(" (RemBERT model)"),SXo=l(),Rv=a("li"),B_e=a("strong"),RXo=o("roberta"),PXo=o(" \u2014 "),BX=a("a"),BXo=o("RobertaForSequenceClassification"),IXo=o(" (RoBERTa model)"),NXo=l(),Pv=a("li"),I_e=a("strong"),qXo=o("roformer"),jXo=o(" \u2014 "),IX=a("a"),DXo=o("RoFormerForSequenceClassification"),GXo=o(" (RoFormer model)"),OXo=l(),Bv=a("li"),N_e=a("strong"),VXo=o("squeezebert"),XXo=o(" \u2014 "),NX=a("a"),zXo=o("SqueezeBertForSequenceClassification"),QXo=o(" (SqueezeBERT model)"),WXo=l(),Iv=a("li"),q_e=a("strong"),HXo=o("tapas"),UXo=o(" \u2014 "),qX=a("a"),JXo=o("TapasForSequenceClassification"),YXo=o(" (TAPAS model)"),KXo=l(),Nv=a("li"),j_e=a("strong"),ZXo=o("transfo-xl"),ezo=o(" \u2014 "),jX=a("a"),ozo=o("TransfoXLForSequenceClassification"),rzo=o(" (Transformer-XL model)"),tzo=l(),qv=a("li"),D_e=a("strong"),azo=o("xlm"),nzo=o(" \u2014 "),DX=a("a"),szo=o("XLMForSequenceClassification"),lzo=o(" (XLM model)"),izo=l(),jv=a("li"),G_e=a("strong"),dzo=o("xlm-roberta"),czo=o(" \u2014 "),GX=a("a"),fzo=o("XLMRobertaForSequenceClassification"),mzo=o(" (XLM-RoBERTa model)"),gzo=l(),Dv=a("li"),O_e=a("strong"),hzo=o("xlm-roberta-xl"),pzo=o(" \u2014 "),OX=a("a"),_zo=o("XLMRobertaXLForSequenceClassification"),uzo=o(" (XLM-RoBERTa-XL model)"),bzo=l(),Gv=a("li"),V_e=a("strong"),vzo=o("xlnet"),Fzo=o(" \u2014 "),VX=a("a"),Tzo=o("XLNetForSequenceClassification"),Mzo=o(" (XLNet model)"),Ezo=l(),Ov=a("li"),X_e=a("strong"),Czo=o("yoso"),wzo=o(" \u2014 "),XX=a("a"),Azo=o("YosoForSequenceClassification"),Lzo=o(" (YOSO model)"),yzo=l(),Vv=a("p"),xzo=o("The model is set in evaluation mode by default using "),z_e=a("code"),$zo=o("model.eval()"),kzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=a("code"),Szo=o("model.train()"),Rzo=l(),F(Xv.$$.fragment),MXe=l(),ad=a("h2"),zv=a("a"),W_e=a("span"),F(ly.$$.fragment),Pzo=l(),H_e=a("span"),Bzo=o("AutoModelForMultipleChoice"),EXe=l(),Bo=a("div"),F(iy.$$.fragment),Izo=l(),nd=a("p"),Nzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=a("a"),qzo=o("from_pretrained()"),jzo=o(" class method or the "),QX=a("a"),Dzo=o("from_config()"),Gzo=o(` class
method.`),Ozo=l(),dy=a("p"),Vzo=o("This class cannot be instantiated directly using "),U_e=a("code"),Xzo=o("__init__()"),zzo=o(" (throws an error)."),Qzo=l(),gt=a("div"),F(cy.$$.fragment),Wzo=l(),J_e=a("p"),Hzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uzo=l(),sd=a("p"),Jzo=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Yzo=o("not"),Kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Zzo=o("from_pretrained()"),eQo=o(" to load the model weights."),oQo=l(),F(Qv.$$.fragment),rQo=l(),ro=a("div"),F(fy.$$.fragment),tQo=l(),K_e=a("p"),aQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nQo=l(),Ga=a("p"),sQo=o("The model class to instantiate is selected based on the "),Z_e=a("code"),lQo=o("model_type"),iQo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),fQo=o("pretrained_model_name_or_path"),mQo=o(":"),gQo=l(),Z=a("ul"),Wv=a("li"),rue=a("strong"),hQo=o("albert"),pQo=o(" \u2014 "),HX=a("a"),_Qo=o("AlbertForMultipleChoice"),uQo=o(" (ALBERT model)"),bQo=l(),Hv=a("li"),tue=a("strong"),vQo=o("bert"),FQo=o(" \u2014 "),UX=a("a"),TQo=o("BertForMultipleChoice"),MQo=o(" (BERT model)"),EQo=l(),Uv=a("li"),aue=a("strong"),CQo=o("big_bird"),wQo=o(" \u2014 "),JX=a("a"),AQo=o("BigBirdForMultipleChoice"),LQo=o(" (BigBird model)"),yQo=l(),Jv=a("li"),nue=a("strong"),xQo=o("camembert"),$Qo=o(" \u2014 "),YX=a("a"),kQo=o("CamembertForMultipleChoice"),SQo=o(" (CamemBERT model)"),RQo=l(),Yv=a("li"),sue=a("strong"),PQo=o("canine"),BQo=o(" \u2014 "),KX=a("a"),IQo=o("CanineForMultipleChoice"),NQo=o(" (CANINE model)"),qQo=l(),Kv=a("li"),lue=a("strong"),jQo=o("convbert"),DQo=o(" \u2014 "),ZX=a("a"),GQo=o("ConvBertForMultipleChoice"),OQo=o(" (ConvBERT model)"),VQo=l(),Zv=a("li"),iue=a("strong"),XQo=o("data2vec-text"),zQo=o(" \u2014 "),ez=a("a"),QQo=o("Data2VecTextForMultipleChoice"),WQo=o(" (Data2VecText model)"),HQo=l(),eF=a("li"),due=a("strong"),UQo=o("deberta-v2"),JQo=o(" \u2014 "),oz=a("a"),YQo=o("DebertaV2ForMultipleChoice"),KQo=o(" (DeBERTa-v2 model)"),ZQo=l(),oF=a("li"),cue=a("strong"),eWo=o("distilbert"),oWo=o(" \u2014 "),rz=a("a"),rWo=o("DistilBertForMultipleChoice"),tWo=o(" (DistilBERT model)"),aWo=l(),rF=a("li"),fue=a("strong"),nWo=o("electra"),sWo=o(" \u2014 "),tz=a("a"),lWo=o("ElectraForMultipleChoice"),iWo=o(" (ELECTRA model)"),dWo=l(),tF=a("li"),mue=a("strong"),cWo=o("flaubert"),fWo=o(" \u2014 "),az=a("a"),mWo=o("FlaubertForMultipleChoice"),gWo=o(" (FlauBERT model)"),hWo=l(),aF=a("li"),gue=a("strong"),pWo=o("fnet"),_Wo=o(" \u2014 "),nz=a("a"),uWo=o("FNetForMultipleChoice"),bWo=o(" (FNet model)"),vWo=l(),nF=a("li"),hue=a("strong"),FWo=o("funnel"),TWo=o(" \u2014 "),sz=a("a"),MWo=o("FunnelForMultipleChoice"),EWo=o(" (Funnel Transformer model)"),CWo=l(),sF=a("li"),pue=a("strong"),wWo=o("ibert"),AWo=o(" \u2014 "),lz=a("a"),LWo=o("IBertForMultipleChoice"),yWo=o(" (I-BERT model)"),xWo=l(),lF=a("li"),_ue=a("strong"),$Wo=o("longformer"),kWo=o(" \u2014 "),iz=a("a"),SWo=o("LongformerForMultipleChoice"),RWo=o(" (Longformer model)"),PWo=l(),iF=a("li"),uue=a("strong"),BWo=o("megatron-bert"),IWo=o(" \u2014 "),dz=a("a"),NWo=o("MegatronBertForMultipleChoice"),qWo=o(" (Megatron-BERT model)"),jWo=l(),dF=a("li"),bue=a("strong"),DWo=o("mobilebert"),GWo=o(" \u2014 "),cz=a("a"),OWo=o("MobileBertForMultipleChoice"),VWo=o(" (MobileBERT model)"),XWo=l(),cF=a("li"),vue=a("strong"),zWo=o("mpnet"),QWo=o(" \u2014 "),fz=a("a"),WWo=o("MPNetForMultipleChoice"),HWo=o(" (MPNet model)"),UWo=l(),fF=a("li"),Fue=a("strong"),JWo=o("nezha"),YWo=o(" \u2014 "),mz=a("a"),KWo=o("NezhaForMultipleChoice"),ZWo=o(" (Nezha model)"),eHo=l(),mF=a("li"),Tue=a("strong"),oHo=o("nystromformer"),rHo=o(" \u2014 "),gz=a("a"),tHo=o("NystromformerForMultipleChoice"),aHo=o(" (Nystr\xF6mformer model)"),nHo=l(),gF=a("li"),Mue=a("strong"),sHo=o("qdqbert"),lHo=o(" \u2014 "),hz=a("a"),iHo=o("QDQBertForMultipleChoice"),dHo=o(" (QDQBert model)"),cHo=l(),hF=a("li"),Eue=a("strong"),fHo=o("rembert"),mHo=o(" \u2014 "),pz=a("a"),gHo=o("RemBertForMultipleChoice"),hHo=o(" (RemBERT model)"),pHo=l(),pF=a("li"),Cue=a("strong"),_Ho=o("roberta"),uHo=o(" \u2014 "),_z=a("a"),bHo=o("RobertaForMultipleChoice"),vHo=o(" (RoBERTa model)"),FHo=l(),_F=a("li"),wue=a("strong"),THo=o("roformer"),MHo=o(" \u2014 "),uz=a("a"),EHo=o("RoFormerForMultipleChoice"),CHo=o(" (RoFormer model)"),wHo=l(),uF=a("li"),Aue=a("strong"),AHo=o("squeezebert"),LHo=o(" \u2014 "),bz=a("a"),yHo=o("SqueezeBertForMultipleChoice"),xHo=o(" (SqueezeBERT model)"),$Ho=l(),bF=a("li"),Lue=a("strong"),kHo=o("xlm"),SHo=o(" \u2014 "),vz=a("a"),RHo=o("XLMForMultipleChoice"),PHo=o(" (XLM model)"),BHo=l(),vF=a("li"),yue=a("strong"),IHo=o("xlm-roberta"),NHo=o(" \u2014 "),Fz=a("a"),qHo=o("XLMRobertaForMultipleChoice"),jHo=o(" (XLM-RoBERTa model)"),DHo=l(),FF=a("li"),xue=a("strong"),GHo=o("xlm-roberta-xl"),OHo=o(" \u2014 "),Tz=a("a"),VHo=o("XLMRobertaXLForMultipleChoice"),XHo=o(" (XLM-RoBERTa-XL model)"),zHo=l(),TF=a("li"),$ue=a("strong"),QHo=o("xlnet"),WHo=o(" \u2014 "),Mz=a("a"),HHo=o("XLNetForMultipleChoice"),UHo=o(" (XLNet model)"),JHo=l(),MF=a("li"),kue=a("strong"),YHo=o("yoso"),KHo=o(" \u2014 "),Ez=a("a"),ZHo=o("YosoForMultipleChoice"),eUo=o(" (YOSO model)"),oUo=l(),EF=a("p"),rUo=o("The model is set in evaluation mode by default using "),Sue=a("code"),tUo=o("model.eval()"),aUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),nUo=o("model.train()"),sUo=l(),F(CF.$$.fragment),CXe=l(),ld=a("h2"),wF=a("a"),Pue=a("span"),F(my.$$.fragment),lUo=l(),Bue=a("span"),iUo=o("AutoModelForNextSentencePrediction"),wXe=l(),Io=a("div"),F(gy.$$.fragment),dUo=l(),id=a("p"),cUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=a("a"),fUo=o("from_pretrained()"),mUo=o(" class method or the "),wz=a("a"),gUo=o("from_config()"),hUo=o(` class
method.`),pUo=l(),hy=a("p"),_Uo=o("This class cannot be instantiated directly using "),Iue=a("code"),uUo=o("__init__()"),bUo=o(" (throws an error)."),vUo=l(),ht=a("div"),F(py.$$.fragment),FUo=l(),Nue=a("p"),TUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MUo=l(),dd=a("p"),EUo=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),CUo=o("not"),wUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),AUo=o("from_pretrained()"),LUo=o(" to load the model weights."),yUo=l(),F(AF.$$.fragment),xUo=l(),to=a("div"),F(_y.$$.fragment),$Uo=l(),jue=a("p"),kUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SUo=l(),Oa=a("p"),RUo=o("The model class to instantiate is selected based on the "),Due=a("code"),PUo=o("model_type"),BUo=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),IUo=o("pretrained_model_name_or_path"),NUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),qUo=o("pretrained_model_name_or_path"),jUo=o(":"),DUo=l(),No=a("ul"),LF=a("li"),Vue=a("strong"),GUo=o("bert"),OUo=o(" \u2014 "),Lz=a("a"),VUo=o("BertForNextSentencePrediction"),XUo=o(" (BERT model)"),zUo=l(),yF=a("li"),Xue=a("strong"),QUo=o("fnet"),WUo=o(" \u2014 "),yz=a("a"),HUo=o("FNetForNextSentencePrediction"),UUo=o(" (FNet model)"),JUo=l(),xF=a("li"),zue=a("strong"),YUo=o("megatron-bert"),KUo=o(" \u2014 "),xz=a("a"),ZUo=o("MegatronBertForNextSentencePrediction"),eJo=o(" (Megatron-BERT model)"),oJo=l(),$F=a("li"),Que=a("strong"),rJo=o("mobilebert"),tJo=o(" \u2014 "),$z=a("a"),aJo=o("MobileBertForNextSentencePrediction"),nJo=o(" (MobileBERT model)"),sJo=l(),kF=a("li"),Wue=a("strong"),lJo=o("nezha"),iJo=o(" \u2014 "),kz=a("a"),dJo=o("NezhaForNextSentencePrediction"),cJo=o(" (Nezha model)"),fJo=l(),SF=a("li"),Hue=a("strong"),mJo=o("qdqbert"),gJo=o(" \u2014 "),Sz=a("a"),hJo=o("QDQBertForNextSentencePrediction"),pJo=o(" (QDQBert model)"),_Jo=l(),RF=a("p"),uJo=o("The model is set in evaluation mode by default using "),Uue=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),FJo=o("model.train()"),TJo=l(),F(PF.$$.fragment),AXe=l(),cd=a("h2"),BF=a("a"),Yue=a("span"),F(uy.$$.fragment),MJo=l(),Kue=a("span"),EJo=o("AutoModelForTokenClassification"),LXe=l(),qo=a("div"),F(by.$$.fragment),CJo=l(),fd=a("p"),wJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=a("a"),AJo=o("from_pretrained()"),LJo=o(" class method or the "),Pz=a("a"),yJo=o("from_config()"),xJo=o(` class
method.`),$Jo=l(),vy=a("p"),kJo=o("This class cannot be instantiated directly using "),Zue=a("code"),SJo=o("__init__()"),RJo=o(" (throws an error)."),PJo=l(),pt=a("div"),F(Fy.$$.fragment),BJo=l(),e1e=a("p"),IJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NJo=l(),md=a("p"),qJo=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),jJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),GJo=o("from_pretrained()"),OJo=o(" to load the model weights."),VJo=l(),F(IF.$$.fragment),XJo=l(),ao=a("div"),F(Ty.$$.fragment),zJo=l(),r1e=a("p"),QJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WJo=l(),Va=a("p"),HJo=o("The model class to instantiate is selected based on the "),t1e=a("code"),UJo=o("model_type"),JJo=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(":"),oYo=l(),U=a("ul"),NF=a("li"),s1e=a("strong"),rYo=o("albert"),tYo=o(" \u2014 "),Iz=a("a"),aYo=o("AlbertForTokenClassification"),nYo=o(" (ALBERT model)"),sYo=l(),qF=a("li"),l1e=a("strong"),lYo=o("bert"),iYo=o(" \u2014 "),Nz=a("a"),dYo=o("BertForTokenClassification"),cYo=o(" (BERT model)"),fYo=l(),jF=a("li"),i1e=a("strong"),mYo=o("big_bird"),gYo=o(" \u2014 "),qz=a("a"),hYo=o("BigBirdForTokenClassification"),pYo=o(" (BigBird model)"),_Yo=l(),DF=a("li"),d1e=a("strong"),uYo=o("bloom"),bYo=o(" \u2014 "),jz=a("a"),vYo=o("BloomForTokenClassification"),FYo=o(" (BLOOM model)"),TYo=l(),GF=a("li"),c1e=a("strong"),MYo=o("camembert"),EYo=o(" \u2014 "),Dz=a("a"),CYo=o("CamembertForTokenClassification"),wYo=o(" (CamemBERT model)"),AYo=l(),OF=a("li"),f1e=a("strong"),LYo=o("canine"),yYo=o(" \u2014 "),Gz=a("a"),xYo=o("CanineForTokenClassification"),$Yo=o(" (CANINE model)"),kYo=l(),VF=a("li"),m1e=a("strong"),SYo=o("convbert"),RYo=o(" \u2014 "),Oz=a("a"),PYo=o("ConvBertForTokenClassification"),BYo=o(" (ConvBERT model)"),IYo=l(),XF=a("li"),g1e=a("strong"),NYo=o("data2vec-text"),qYo=o(" \u2014 "),Vz=a("a"),jYo=o("Data2VecTextForTokenClassification"),DYo=o(" (Data2VecText model)"),GYo=l(),zF=a("li"),h1e=a("strong"),OYo=o("deberta"),VYo=o(" \u2014 "),Xz=a("a"),XYo=o("DebertaForTokenClassification"),zYo=o(" (DeBERTa model)"),QYo=l(),QF=a("li"),p1e=a("strong"),WYo=o("deberta-v2"),HYo=o(" \u2014 "),zz=a("a"),UYo=o("DebertaV2ForTokenClassification"),JYo=o(" (DeBERTa-v2 model)"),YYo=l(),WF=a("li"),_1e=a("strong"),KYo=o("distilbert"),ZYo=o(" \u2014 "),Qz=a("a"),eKo=o("DistilBertForTokenClassification"),oKo=o(" (DistilBERT model)"),rKo=l(),HF=a("li"),u1e=a("strong"),tKo=o("electra"),aKo=o(" \u2014 "),Wz=a("a"),nKo=o("ElectraForTokenClassification"),sKo=o(" (ELECTRA model)"),lKo=l(),UF=a("li"),b1e=a("strong"),iKo=o("flaubert"),dKo=o(" \u2014 "),Hz=a("a"),cKo=o("FlaubertForTokenClassification"),fKo=o(" (FlauBERT model)"),mKo=l(),JF=a("li"),v1e=a("strong"),gKo=o("fnet"),hKo=o(" \u2014 "),Uz=a("a"),pKo=o("FNetForTokenClassification"),_Ko=o(" (FNet model)"),uKo=l(),YF=a("li"),F1e=a("strong"),bKo=o("funnel"),vKo=o(" \u2014 "),Jz=a("a"),FKo=o("FunnelForTokenClassification"),TKo=o(" (Funnel Transformer model)"),MKo=l(),KF=a("li"),T1e=a("strong"),EKo=o("gpt2"),CKo=o(" \u2014 "),Yz=a("a"),wKo=o("GPT2ForTokenClassification"),AKo=o(" (OpenAI GPT-2 model)"),LKo=l(),ZF=a("li"),M1e=a("strong"),yKo=o("ibert"),xKo=o(" \u2014 "),Kz=a("a"),$Ko=o("IBertForTokenClassification"),kKo=o(" (I-BERT model)"),SKo=l(),eT=a("li"),E1e=a("strong"),RKo=o("layoutlm"),PKo=o(" \u2014 "),Zz=a("a"),BKo=o("LayoutLMForTokenClassification"),IKo=o(" (LayoutLM model)"),NKo=l(),oT=a("li"),C1e=a("strong"),qKo=o("layoutlmv2"),jKo=o(" \u2014 "),eQ=a("a"),DKo=o("LayoutLMv2ForTokenClassification"),GKo=o(" (LayoutLMv2 model)"),OKo=l(),rT=a("li"),w1e=a("strong"),VKo=o("layoutlmv3"),XKo=o(" \u2014 "),oQ=a("a"),zKo=o("LayoutLMv3ForTokenClassification"),QKo=o(" (LayoutLMv3 model)"),WKo=l(),tT=a("li"),A1e=a("strong"),HKo=o("longformer"),UKo=o(" \u2014 "),rQ=a("a"),JKo=o("LongformerForTokenClassification"),YKo=o(" (Longformer model)"),KKo=l(),aT=a("li"),L1e=a("strong"),ZKo=o("megatron-bert"),eZo=o(" \u2014 "),tQ=a("a"),oZo=o("MegatronBertForTokenClassification"),rZo=o(" (Megatron-BERT model)"),tZo=l(),nT=a("li"),y1e=a("strong"),aZo=o("mobilebert"),nZo=o(" \u2014 "),aQ=a("a"),sZo=o("MobileBertForTokenClassification"),lZo=o(" (MobileBERT model)"),iZo=l(),sT=a("li"),x1e=a("strong"),dZo=o("mpnet"),cZo=o(" \u2014 "),nQ=a("a"),fZo=o("MPNetForTokenClassification"),mZo=o(" (MPNet model)"),gZo=l(),lT=a("li"),$1e=a("strong"),hZo=o("nezha"),pZo=o(" \u2014 "),sQ=a("a"),_Zo=o("NezhaForTokenClassification"),uZo=o(" (Nezha model)"),bZo=l(),iT=a("li"),k1e=a("strong"),vZo=o("nystromformer"),FZo=o(" \u2014 "),lQ=a("a"),TZo=o("NystromformerForTokenClassification"),MZo=o(" (Nystr\xF6mformer model)"),EZo=l(),dT=a("li"),S1e=a("strong"),CZo=o("qdqbert"),wZo=o(" \u2014 "),iQ=a("a"),AZo=o("QDQBertForTokenClassification"),LZo=o(" (QDQBert model)"),yZo=l(),cT=a("li"),R1e=a("strong"),xZo=o("rembert"),$Zo=o(" \u2014 "),dQ=a("a"),kZo=o("RemBertForTokenClassification"),SZo=o(" (RemBERT model)"),RZo=l(),fT=a("li"),P1e=a("strong"),PZo=o("roberta"),BZo=o(" \u2014 "),cQ=a("a"),IZo=o("RobertaForTokenClassification"),NZo=o(" (RoBERTa model)"),qZo=l(),mT=a("li"),B1e=a("strong"),jZo=o("roformer"),DZo=o(" \u2014 "),fQ=a("a"),GZo=o("RoFormerForTokenClassification"),OZo=o(" (RoFormer model)"),VZo=l(),gT=a("li"),I1e=a("strong"),XZo=o("squeezebert"),zZo=o(" \u2014 "),mQ=a("a"),QZo=o("SqueezeBertForTokenClassification"),WZo=o(" (SqueezeBERT model)"),HZo=l(),hT=a("li"),N1e=a("strong"),UZo=o("xlm"),JZo=o(" \u2014 "),gQ=a("a"),YZo=o("XLMForTokenClassification"),KZo=o(" (XLM model)"),ZZo=l(),pT=a("li"),q1e=a("strong"),eer=o("xlm-roberta"),oer=o(" \u2014 "),hQ=a("a"),rer=o("XLMRobertaForTokenClassification"),ter=o(" (XLM-RoBERTa model)"),aer=l(),_T=a("li"),j1e=a("strong"),ner=o("xlm-roberta-xl"),ser=o(" \u2014 "),pQ=a("a"),ler=o("XLMRobertaXLForTokenClassification"),ier=o(" (XLM-RoBERTa-XL model)"),der=l(),uT=a("li"),D1e=a("strong"),cer=o("xlnet"),fer=o(" \u2014 "),_Q=a("a"),mer=o("XLNetForTokenClassification"),ger=o(" (XLNet model)"),her=l(),bT=a("li"),G1e=a("strong"),per=o("yoso"),_er=o(" \u2014 "),uQ=a("a"),uer=o("YosoForTokenClassification"),ber=o(" (YOSO model)"),ver=l(),vT=a("p"),Fer=o("The model is set in evaluation mode by default using "),O1e=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=a("code"),Eer=o("model.train()"),Cer=l(),F(FT.$$.fragment),yXe=l(),gd=a("h2"),TT=a("a"),X1e=a("span"),F(My.$$.fragment),wer=l(),z1e=a("span"),Aer=o("AutoModelForQuestionAnswering"),xXe=l(),jo=a("div"),F(Ey.$$.fragment),Ler=l(),hd=a("p"),yer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=a("a"),xer=o("from_pretrained()"),$er=o(" class method or the "),vQ=a("a"),ker=o("from_config()"),Ser=o(` class
method.`),Rer=l(),Cy=a("p"),Per=o("This class cannot be instantiated directly using "),Q1e=a("code"),Ber=o("__init__()"),Ier=o(" (throws an error)."),Ner=l(),_t=a("div"),F(wy.$$.fragment),qer=l(),W1e=a("p"),jer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Der=l(),pd=a("p"),Ger=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),Oer=o("not"),Ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Xer=o("from_pretrained()"),zer=o(" to load the model weights."),Qer=l(),F(MT.$$.fragment),Wer=l(),no=a("div"),F(Ay.$$.fragment),Her=l(),U1e=a("p"),Uer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jer=l(),Xa=a("p"),Yer=o("The model class to instantiate is selected based on the "),J1e=a("code"),Ker=o("model_type"),Zer=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(":"),aor=l(),V=a("ul"),ET=a("li"),Z1e=a("strong"),nor=o("albert"),sor=o(" \u2014 "),TQ=a("a"),lor=o("AlbertForQuestionAnswering"),ior=o(" (ALBERT model)"),dor=l(),CT=a("li"),e2e=a("strong"),cor=o("bart"),mor=o(" \u2014 "),MQ=a("a"),gor=o("BartForQuestionAnswering"),hor=o(" (BART model)"),por=l(),wT=a("li"),o2e=a("strong"),_or=o("bert"),uor=o(" \u2014 "),EQ=a("a"),bor=o("BertForQuestionAnswering"),vor=o(" (BERT model)"),For=l(),AT=a("li"),r2e=a("strong"),Tor=o("big_bird"),Mor=o(" \u2014 "),CQ=a("a"),Eor=o("BigBirdForQuestionAnswering"),Cor=o(" (BigBird model)"),wor=l(),LT=a("li"),t2e=a("strong"),Aor=o("bigbird_pegasus"),Lor=o(" \u2014 "),wQ=a("a"),yor=o("BigBirdPegasusForQuestionAnswering"),xor=o(" (BigBird-Pegasus model)"),$or=l(),yT=a("li"),a2e=a("strong"),kor=o("camembert"),Sor=o(" \u2014 "),AQ=a("a"),Ror=o("CamembertForQuestionAnswering"),Por=o(" (CamemBERT model)"),Bor=l(),xT=a("li"),n2e=a("strong"),Ior=o("canine"),Nor=o(" \u2014 "),LQ=a("a"),qor=o("CanineForQuestionAnswering"),jor=o(" (CANINE model)"),Dor=l(),$T=a("li"),s2e=a("strong"),Gor=o("convbert"),Oor=o(" \u2014 "),yQ=a("a"),Vor=o("ConvBertForQuestionAnswering"),Xor=o(" (ConvBERT model)"),zor=l(),kT=a("li"),l2e=a("strong"),Qor=o("data2vec-text"),Wor=o(" \u2014 "),xQ=a("a"),Hor=o("Data2VecTextForQuestionAnswering"),Uor=o(" (Data2VecText model)"),Jor=l(),ST=a("li"),i2e=a("strong"),Yor=o("deberta"),Kor=o(" \u2014 "),$Q=a("a"),Zor=o("DebertaForQuestionAnswering"),err=o(" (DeBERTa model)"),orr=l(),RT=a("li"),d2e=a("strong"),rrr=o("deberta-v2"),trr=o(" \u2014 "),kQ=a("a"),arr=o("DebertaV2ForQuestionAnswering"),nrr=o(" (DeBERTa-v2 model)"),srr=l(),PT=a("li"),c2e=a("strong"),lrr=o("distilbert"),irr=o(" \u2014 "),SQ=a("a"),drr=o("DistilBertForQuestionAnswering"),crr=o(" (DistilBERT model)"),frr=l(),BT=a("li"),f2e=a("strong"),mrr=o("electra"),grr=o(" \u2014 "),RQ=a("a"),hrr=o("ElectraForQuestionAnswering"),prr=o(" (ELECTRA model)"),_rr=l(),IT=a("li"),m2e=a("strong"),urr=o("flaubert"),brr=o(" \u2014 "),PQ=a("a"),vrr=o("FlaubertForQuestionAnsweringSimple"),Frr=o(" (FlauBERT model)"),Trr=l(),NT=a("li"),g2e=a("strong"),Mrr=o("fnet"),Err=o(" \u2014 "),BQ=a("a"),Crr=o("FNetForQuestionAnswering"),wrr=o(" (FNet model)"),Arr=l(),qT=a("li"),h2e=a("strong"),Lrr=o("funnel"),yrr=o(" \u2014 "),IQ=a("a"),xrr=o("FunnelForQuestionAnswering"),$rr=o(" (Funnel Transformer model)"),krr=l(),jT=a("li"),p2e=a("strong"),Srr=o("gptj"),Rrr=o(" \u2014 "),NQ=a("a"),Prr=o("GPTJForQuestionAnswering"),Brr=o(" (GPT-J model)"),Irr=l(),DT=a("li"),_2e=a("strong"),Nrr=o("ibert"),qrr=o(" \u2014 "),qQ=a("a"),jrr=o("IBertForQuestionAnswering"),Drr=o(" (I-BERT model)"),Grr=l(),GT=a("li"),u2e=a("strong"),Orr=o("layoutlmv2"),Vrr=o(" \u2014 "),jQ=a("a"),Xrr=o("LayoutLMv2ForQuestionAnswering"),zrr=o(" (LayoutLMv2 model)"),Qrr=l(),OT=a("li"),b2e=a("strong"),Wrr=o("layoutlmv3"),Hrr=o(" \u2014 "),DQ=a("a"),Urr=o("LayoutLMv3ForQuestionAnswering"),Jrr=o(" (LayoutLMv3 model)"),Yrr=l(),VT=a("li"),v2e=a("strong"),Krr=o("led"),Zrr=o(" \u2014 "),GQ=a("a"),etr=o("LEDForQuestionAnswering"),otr=o(" (LED model)"),rtr=l(),XT=a("li"),F2e=a("strong"),ttr=o("longformer"),atr=o(" \u2014 "),OQ=a("a"),ntr=o("LongformerForQuestionAnswering"),str=o(" (Longformer model)"),ltr=l(),zT=a("li"),T2e=a("strong"),itr=o("lxmert"),dtr=o(" \u2014 "),VQ=a("a"),ctr=o("LxmertForQuestionAnswering"),ftr=o(" (LXMERT model)"),mtr=l(),QT=a("li"),M2e=a("strong"),gtr=o("mbart"),htr=o(" \u2014 "),XQ=a("a"),ptr=o("MBartForQuestionAnswering"),_tr=o(" (mBART model)"),utr=l(),WT=a("li"),E2e=a("strong"),btr=o("megatron-bert"),vtr=o(" \u2014 "),zQ=a("a"),Ftr=o("MegatronBertForQuestionAnswering"),Ttr=o(" (Megatron-BERT model)"),Mtr=l(),HT=a("li"),C2e=a("strong"),Etr=o("mobilebert"),Ctr=o(" \u2014 "),QQ=a("a"),wtr=o("MobileBertForQuestionAnswering"),Atr=o(" (MobileBERT model)"),Ltr=l(),UT=a("li"),w2e=a("strong"),ytr=o("mpnet"),xtr=o(" \u2014 "),WQ=a("a"),$tr=o("MPNetForQuestionAnswering"),ktr=o(" (MPNet model)"),Str=l(),JT=a("li"),A2e=a("strong"),Rtr=o("mvp"),Ptr=o(" \u2014 "),HQ=a("a"),Btr=o("MvpForQuestionAnswering"),Itr=o(" (MVP model)"),Ntr=l(),YT=a("li"),L2e=a("strong"),qtr=o("nezha"),jtr=o(" \u2014 "),UQ=a("a"),Dtr=o("NezhaForQuestionAnswering"),Gtr=o(" (Nezha model)"),Otr=l(),KT=a("li"),y2e=a("strong"),Vtr=o("nystromformer"),Xtr=o(" \u2014 "),JQ=a("a"),ztr=o("NystromformerForQuestionAnswering"),Qtr=o(" (Nystr\xF6mformer model)"),Wtr=l(),ZT=a("li"),x2e=a("strong"),Htr=o("qdqbert"),Utr=o(" \u2014 "),YQ=a("a"),Jtr=o("QDQBertForQuestionAnswering"),Ytr=o(" (QDQBert model)"),Ktr=l(),e7=a("li"),$2e=a("strong"),Ztr=o("reformer"),ear=o(" \u2014 "),KQ=a("a"),oar=o("ReformerForQuestionAnswering"),rar=o(" (Reformer model)"),tar=l(),o7=a("li"),k2e=a("strong"),aar=o("rembert"),nar=o(" \u2014 "),ZQ=a("a"),sar=o("RemBertForQuestionAnswering"),lar=o(" (RemBERT model)"),iar=l(),r7=a("li"),S2e=a("strong"),dar=o("roberta"),car=o(" \u2014 "),eW=a("a"),far=o("RobertaForQuestionAnswering"),mar=o(" (RoBERTa model)"),gar=l(),t7=a("li"),R2e=a("strong"),har=o("roformer"),par=o(" \u2014 "),oW=a("a"),_ar=o("RoFormerForQuestionAnswering"),uar=o(" (RoFormer model)"),bar=l(),a7=a("li"),P2e=a("strong"),Far=o("splinter"),Tar=o(" \u2014 "),rW=a("a"),Mar=o("SplinterForQuestionAnswering"),Ear=o(" (Splinter model)"),Car=l(),n7=a("li"),B2e=a("strong"),war=o("squeezebert"),Aar=o(" \u2014 "),tW=a("a"),Lar=o("SqueezeBertForQuestionAnswering"),yar=o(" (SqueezeBERT model)"),xar=l(),s7=a("li"),I2e=a("strong"),$ar=o("xlm"),kar=o(" \u2014 "),aW=a("a"),Sar=o("XLMForQuestionAnsweringSimple"),Rar=o(" (XLM model)"),Par=l(),l7=a("li"),N2e=a("strong"),Bar=o("xlm-roberta"),Iar=o(" \u2014 "),nW=a("a"),Nar=o("XLMRobertaForQuestionAnswering"),qar=o(" (XLM-RoBERTa model)"),jar=l(),i7=a("li"),q2e=a("strong"),Dar=o("xlm-roberta-xl"),Gar=o(" \u2014 "),sW=a("a"),Oar=o("XLMRobertaXLForQuestionAnswering"),Var=o(" (XLM-RoBERTa-XL model)"),Xar=l(),d7=a("li"),j2e=a("strong"),zar=o("xlnet"),Qar=o(" \u2014 "),lW=a("a"),War=o("XLNetForQuestionAnsweringSimple"),Har=o(" (XLNet model)"),Uar=l(),c7=a("li"),D2e=a("strong"),Jar=o("yoso"),Yar=o(" \u2014 "),iW=a("a"),Kar=o("YosoForQuestionAnswering"),Zar=o(" (YOSO model)"),enr=l(),f7=a("p"),onr=o("The model is set in evaluation mode by default using "),G2e=a("code"),rnr=o("model.eval()"),tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),anr=o("model.train()"),nnr=l(),F(m7.$$.fragment),$Xe=l(),_d=a("h2"),g7=a("a"),V2e=a("span"),F(Ly.$$.fragment),snr=l(),X2e=a("span"),lnr=o("AutoModelForTableQuestionAnswering"),kXe=l(),Do=a("div"),F(yy.$$.fragment),inr=l(),ud=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=a("a"),cnr=o("from_pretrained()"),fnr=o(" class method or the "),cW=a("a"),mnr=o("from_config()"),gnr=o(` class
method.`),hnr=l(),xy=a("p"),pnr=o("This class cannot be instantiated directly using "),z2e=a("code"),_nr=o("__init__()"),unr=o(" (throws an error)."),bnr=l(),ut=a("div"),F($y.$$.fragment),vnr=l(),Q2e=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Tnr=l(),bd=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),Enr=o("not"),Cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),wnr=o("from_pretrained()"),Anr=o(" to load the model weights."),Lnr=l(),F(h7.$$.fragment),ynr=l(),so=a("div"),F(ky.$$.fragment),xnr=l(),H2e=a("p"),$nr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),knr=l(),za=a("p"),Snr=o("The model class to instantiate is selected based on the "),U2e=a("code"),Rnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(":"),jnr=l(),K2e=a("ul"),p7=a("li"),Z2e=a("strong"),Dnr=o("tapas"),Gnr=o(" \u2014 "),mW=a("a"),Onr=o("TapasForQuestionAnswering"),Vnr=o(" (TAPAS model)"),Xnr=l(),_7=a("p"),znr=o("The model is set in evaluation mode by default using "),ebe=a("code"),Qnr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),Hnr=o("model.train()"),Unr=l(),F(u7.$$.fragment),SXe=l(),vd=a("h2"),b7=a("a"),rbe=a("span"),F(Sy.$$.fragment),Jnr=l(),tbe=a("span"),Ynr=o("AutoModelForImageClassification"),RXe=l(),Go=a("div"),F(Ry.$$.fragment),Knr=l(),Fd=a("p"),Znr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=a("a"),esr=o("from_pretrained()"),osr=o(" class method or the "),hW=a("a"),rsr=o("from_config()"),tsr=o(` class
method.`),asr=l(),Py=a("p"),nsr=o("This class cannot be instantiated directly using "),abe=a("code"),ssr=o("__init__()"),lsr=o(" (throws an error)."),isr=l(),bt=a("div"),F(By.$$.fragment),dsr=l(),nbe=a("p"),csr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fsr=l(),Td=a("p"),msr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),gsr=o("not"),hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),psr=o("from_pretrained()"),_sr=o(" to load the model weights."),usr=l(),F(v7.$$.fragment),bsr=l(),lo=a("div"),F(Iy.$$.fragment),vsr=l(),lbe=a("p"),Fsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tsr=l(),Qa=a("p"),Msr=o("The model class to instantiate is selected based on the "),ibe=a("code"),Esr=o("model_type"),Csr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),Lsr=o("pretrained_model_name_or_path"),ysr=o(":"),xsr=l(),ve=a("ul"),F7=a("li"),fbe=a("strong"),$sr=o("beit"),ksr=o(" \u2014 "),_W=a("a"),Ssr=o("BeitForImageClassification"),Rsr=o(" (BEiT model)"),Psr=l(),T7=a("li"),mbe=a("strong"),Bsr=o("convnext"),Isr=o(" \u2014 "),uW=a("a"),Nsr=o("ConvNextForImageClassification"),qsr=o(" (ConvNeXT model)"),jsr=l(),M7=a("li"),gbe=a("strong"),Dsr=o("cvt"),Gsr=o(" \u2014 "),bW=a("a"),Osr=o("CvtForImageClassification"),Vsr=o(" (CvT model)"),Xsr=l(),E7=a("li"),hbe=a("strong"),zsr=o("data2vec-vision"),Qsr=o(" \u2014 "),vW=a("a"),Wsr=o("Data2VecVisionForImageClassification"),Hsr=o(" (Data2VecVision model)"),Usr=l(),Ws=a("li"),pbe=a("strong"),Jsr=o("deit"),Ysr=o(" \u2014 "),FW=a("a"),Ksr=o("DeiTForImageClassification"),Zsr=o(" or "),TW=a("a"),elr=o("DeiTForImageClassificationWithTeacher"),olr=o(" (DeiT model)"),rlr=l(),C7=a("li"),_be=a("strong"),tlr=o("imagegpt"),alr=o(" \u2014 "),MW=a("a"),nlr=o("ImageGPTForImageClassification"),slr=o(" (ImageGPT model)"),llr=l(),Hs=a("li"),ube=a("strong"),ilr=o("levit"),dlr=o(" \u2014 "),EW=a("a"),clr=o("LevitForImageClassification"),flr=o(" or "),CW=a("a"),mlr=o("LevitForImageClassificationWithTeacher"),glr=o(" (LeViT model)"),hlr=l(),w7=a("li"),bbe=a("strong"),plr=o("mobilevit"),_lr=o(" \u2014 "),wW=a("a"),ulr=o("MobileViTForImageClassification"),blr=o(" (MobileViT model)"),vlr=l(),vt=a("li"),vbe=a("strong"),Flr=o("perceiver"),Tlr=o(" \u2014 "),AW=a("a"),Mlr=o("PerceiverForImageClassificationLearned"),Elr=o(" or "),LW=a("a"),Clr=o("PerceiverForImageClassificationFourier"),wlr=o(" or "),yW=a("a"),Alr=o("PerceiverForImageClassificationConvProcessing"),Llr=o(" (Perceiver model)"),ylr=l(),A7=a("li"),Fbe=a("strong"),xlr=o("poolformer"),$lr=o(" \u2014 "),xW=a("a"),klr=o("PoolFormerForImageClassification"),Slr=o(" (PoolFormer model)"),Rlr=l(),L7=a("li"),Tbe=a("strong"),Plr=o("regnet"),Blr=o(" \u2014 "),$W=a("a"),Ilr=o("RegNetForImageClassification"),Nlr=o(" (RegNet model)"),qlr=l(),y7=a("li"),Mbe=a("strong"),jlr=o("resnet"),Dlr=o(" \u2014 "),kW=a("a"),Glr=o("ResNetForImageClassification"),Olr=o(" (ResNet model)"),Vlr=l(),x7=a("li"),Ebe=a("strong"),Xlr=o("segformer"),zlr=o(" \u2014 "),SW=a("a"),Qlr=o("SegformerForImageClassification"),Wlr=o(" (SegFormer model)"),Hlr=l(),$7=a("li"),Cbe=a("strong"),Ulr=o("swin"),Jlr=o(" \u2014 "),RW=a("a"),Ylr=o("SwinForImageClassification"),Klr=o(" (Swin Transformer model)"),Zlr=l(),k7=a("li"),wbe=a("strong"),eir=o("van"),oir=o(" \u2014 "),PW=a("a"),rir=o("VanForImageClassification"),tir=o(" (VAN model)"),air=l(),S7=a("li"),Abe=a("strong"),nir=o("vit"),sir=o(" \u2014 "),BW=a("a"),lir=o("ViTForImageClassification"),iir=o(" (ViT model)"),dir=l(),R7=a("p"),cir=o("The model is set in evaluation mode by default using "),Lbe=a("code"),fir=o("model.eval()"),mir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),gir=o("model.train()"),hir=l(),F(P7.$$.fragment),PXe=l(),Md=a("h2"),B7=a("a"),xbe=a("span"),F(Ny.$$.fragment),pir=l(),$be=a("span"),_ir=o("AutoModelForVision2Seq"),BXe=l(),Oo=a("div"),F(qy.$$.fragment),uir=l(),Ed=a("p"),bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=a("a"),vir=o("from_pretrained()"),Fir=o(" class method or the "),NW=a("a"),Tir=o("from_config()"),Mir=o(` class
method.`),Eir=l(),jy=a("p"),Cir=o("This class cannot be instantiated directly using "),kbe=a("code"),wir=o("__init__()"),Air=o(" (throws an error)."),Lir=l(),Ft=a("div"),F(Dy.$$.fragment),yir=l(),Sbe=a("p"),xir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$ir=l(),Cd=a("p"),kir=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Sir=o("not"),Rir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),Pir=o("from_pretrained()"),Bir=o(" to load the model weights."),Iir=l(),F(I7.$$.fragment),Nir=l(),io=a("div"),F(Gy.$$.fragment),qir=l(),Pbe=a("p"),jir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dir=l(),Wa=a("p"),Gir=o("The model class to instantiate is selected based on the "),Bbe=a("code"),Oir=o("model_type"),Vir=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),Qir=o("pretrained_model_name_or_path"),Wir=o(":"),Hir=l(),qbe=a("ul"),N7=a("li"),jbe=a("strong"),Uir=o("vision-encoder-decoder"),Jir=o(" \u2014 "),jW=a("a"),Yir=o("VisionEncoderDecoderModel"),Kir=o(" (Vision Encoder decoder model)"),Zir=l(),q7=a("p"),edr=o("The model is set in evaluation mode by default using "),Dbe=a("code"),odr=o("model.eval()"),rdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=a("code"),tdr=o("model.train()"),adr=l(),F(j7.$$.fragment),IXe=l(),wd=a("h2"),D7=a("a"),Obe=a("span"),F(Oy.$$.fragment),ndr=l(),Vbe=a("span"),sdr=o("AutoModelForVisualQuestionAnswering"),NXe=l(),Vo=a("div"),F(Vy.$$.fragment),ldr=l(),Ad=a("p"),idr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=a("a"),ddr=o("from_pretrained()"),cdr=o(" class method or the "),GW=a("a"),fdr=o("from_config()"),mdr=o(` class
method.`),gdr=l(),Xy=a("p"),hdr=o("This class cannot be instantiated directly using "),Xbe=a("code"),pdr=o("__init__()"),_dr=o(" (throws an error)."),udr=l(),Tt=a("div"),F(zy.$$.fragment),bdr=l(),zbe=a("p"),vdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Fdr=l(),Ld=a("p"),Tdr=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),Mdr=o("not"),Edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Cdr=o("from_pretrained()"),wdr=o(" to load the model weights."),Adr=l(),F(G7.$$.fragment),Ldr=l(),co=a("div"),F(Qy.$$.fragment),ydr=l(),Wbe=a("p"),xdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),$dr=l(),Ha=a("p"),kdr=o("The model class to instantiate is selected based on the "),Hbe=a("code"),Sdr=o("model_type"),Rdr=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),Pdr=o("pretrained_model_name_or_path"),Bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),Idr=o("pretrained_model_name_or_path"),Ndr=o(":"),qdr=l(),Ybe=a("ul"),O7=a("li"),Kbe=a("strong"),jdr=o("vilt"),Ddr=o(" \u2014 "),VW=a("a"),Gdr=o("ViltForQuestionAnswering"),Odr=o(" (ViLT model)"),Vdr=l(),V7=a("p"),Xdr=o("The model is set in evaluation mode by default using "),Zbe=a("code"),zdr=o("model.eval()"),Qdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=a("code"),Wdr=o("model.train()"),Hdr=l(),F(X7.$$.fragment),qXe=l(),yd=a("h2"),z7=a("a"),ove=a("span"),F(Wy.$$.fragment),Udr=l(),rve=a("span"),Jdr=o("AutoModelForAudioClassification"),jXe=l(),Xo=a("div"),F(Hy.$$.fragment),Ydr=l(),xd=a("p"),Kdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=a("a"),Zdr=o("from_pretrained()"),ecr=o(" class method or the "),zW=a("a"),ocr=o("from_config()"),rcr=o(` class
method.`),tcr=l(),Uy=a("p"),acr=o("This class cannot be instantiated directly using "),tve=a("code"),ncr=o("__init__()"),scr=o(" (throws an error)."),lcr=l(),Mt=a("div"),F(Jy.$$.fragment),icr=l(),ave=a("p"),dcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ccr=l(),$d=a("p"),fcr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),mcr=o("not"),gcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),hcr=o("from_pretrained()"),pcr=o(" to load the model weights."),_cr=l(),F(Q7.$$.fragment),ucr=l(),fo=a("div"),F(Yy.$$.fragment),bcr=l(),sve=a("p"),vcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fcr=l(),Ua=a("p"),Tcr=o("The model class to instantiate is selected based on the "),lve=a("code"),Mcr=o("model_type"),Ecr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),Ccr=o("pretrained_model_name_or_path"),wcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),Acr=o("pretrained_model_name_or_path"),Lcr=o(":"),ycr=l(),Pe=a("ul"),W7=a("li"),cve=a("strong"),xcr=o("data2vec-audio"),$cr=o(" \u2014 "),WW=a("a"),kcr=o("Data2VecAudioForSequenceClassification"),Scr=o(" (Data2VecAudio model)"),Rcr=l(),H7=a("li"),fve=a("strong"),Pcr=o("hubert"),Bcr=o(" \u2014 "),HW=a("a"),Icr=o("HubertForSequenceClassification"),Ncr=o(" (Hubert model)"),qcr=l(),U7=a("li"),mve=a("strong"),jcr=o("sew"),Dcr=o(" \u2014 "),UW=a("a"),Gcr=o("SEWForSequenceClassification"),Ocr=o(" (SEW model)"),Vcr=l(),J7=a("li"),gve=a("strong"),Xcr=o("sew-d"),zcr=o(" \u2014 "),JW=a("a"),Qcr=o("SEWDForSequenceClassification"),Wcr=o(" (SEW-D model)"),Hcr=l(),Y7=a("li"),hve=a("strong"),Ucr=o("unispeech"),Jcr=o(" \u2014 "),YW=a("a"),Ycr=o("UniSpeechForSequenceClassification"),Kcr=o(" (UniSpeech model)"),Zcr=l(),K7=a("li"),pve=a("strong"),efr=o("unispeech-sat"),ofr=o(" \u2014 "),KW=a("a"),rfr=o("UniSpeechSatForSequenceClassification"),tfr=o(" (UniSpeechSat model)"),afr=l(),Z7=a("li"),_ve=a("strong"),nfr=o("wav2vec2"),sfr=o(" \u2014 "),ZW=a("a"),lfr=o("Wav2Vec2ForSequenceClassification"),ifr=o(" (Wav2Vec2 model)"),dfr=l(),e8=a("li"),uve=a("strong"),cfr=o("wav2vec2-conformer"),ffr=o(" \u2014 "),eH=a("a"),mfr=o("Wav2Vec2ConformerForSequenceClassification"),gfr=o(" (Wav2Vec2-Conformer model)"),hfr=l(),o8=a("li"),bve=a("strong"),pfr=o("wavlm"),_fr=o(" \u2014 "),oH=a("a"),ufr=o("WavLMForSequenceClassification"),bfr=o(" (WavLM model)"),vfr=l(),r8=a("p"),Ffr=o("The model is set in evaluation mode by default using "),vve=a("code"),Tfr=o("model.eval()"),Mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fve=a("code"),Efr=o("model.train()"),Cfr=l(),F(t8.$$.fragment),DXe=l(),kd=a("h2"),a8=a("a"),Tve=a("span"),F(Ky.$$.fragment),wfr=l(),Mve=a("span"),Afr=o("AutoModelForAudioFrameClassification"),GXe=l(),zo=a("div"),F(Zy.$$.fragment),Lfr=l(),Sd=a("p"),yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=a("a"),xfr=o("from_pretrained()"),$fr=o(" class method or the "),tH=a("a"),kfr=o("from_config()"),Sfr=o(` class
method.`),Rfr=l(),e9=a("p"),Pfr=o("This class cannot be instantiated directly using "),Eve=a("code"),Bfr=o("__init__()"),Ifr=o(" (throws an error)."),Nfr=l(),Et=a("div"),F(o9.$$.fragment),qfr=l(),Cve=a("p"),jfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Dfr=l(),Rd=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),Ofr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),Xfr=o("from_pretrained()"),zfr=o(" to load the model weights."),Qfr=l(),F(n8.$$.fragment),Wfr=l(),mo=a("div"),F(r9.$$.fragment),Hfr=l(),Ave=a("p"),Ufr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jfr=l(),Ja=a("p"),Yfr=o("The model class to instantiate is selected based on the "),Lve=a("code"),Kfr=o("model_type"),Zfr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),et=a("ul"),s8=a("li"),$ve=a("strong"),nmr=o("data2vec-audio"),smr=o(" \u2014 "),nH=a("a"),lmr=o("Data2VecAudioForAudioFrameClassification"),imr=o(" (Data2VecAudio model)"),dmr=l(),l8=a("li"),kve=a("strong"),cmr=o("unispeech-sat"),fmr=o(" \u2014 "),sH=a("a"),mmr=o("UniSpeechSatForAudioFrameClassification"),gmr=o(" (UniSpeechSat model)"),hmr=l(),i8=a("li"),Sve=a("strong"),pmr=o("wav2vec2"),_mr=o(" \u2014 "),lH=a("a"),umr=o("Wav2Vec2ForAudioFrameClassification"),bmr=o(" (Wav2Vec2 model)"),vmr=l(),d8=a("li"),Rve=a("strong"),Fmr=o("wav2vec2-conformer"),Tmr=o(" \u2014 "),iH=a("a"),Mmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Emr=o(" (Wav2Vec2-Conformer model)"),Cmr=l(),c8=a("li"),Pve=a("strong"),wmr=o("wavlm"),Amr=o(" \u2014 "),dH=a("a"),Lmr=o("WavLMForAudioFrameClassification"),ymr=o(" (WavLM model)"),xmr=l(),f8=a("p"),$mr=o("The model is set in evaluation mode by default using "),Bve=a("code"),kmr=o("model.eval()"),Smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ive=a("code"),Rmr=o("model.train()"),Pmr=l(),F(m8.$$.fragment),OXe=l(),Pd=a("h2"),g8=a("a"),Nve=a("span"),F(t9.$$.fragment),Bmr=l(),qve=a("span"),Imr=o("AutoModelForCTC"),VXe=l(),Qo=a("div"),F(a9.$$.fragment),Nmr=l(),Bd=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=a("a"),jmr=o("from_pretrained()"),Dmr=o(" class method or the "),fH=a("a"),Gmr=o("from_config()"),Omr=o(` class
method.`),Vmr=l(),n9=a("p"),Xmr=o("This class cannot be instantiated directly using "),jve=a("code"),zmr=o("__init__()"),Qmr=o(" (throws an error)."),Wmr=l(),Ct=a("div"),F(s9.$$.fragment),Hmr=l(),Dve=a("p"),Umr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Jmr=l(),Id=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),egr=o("from_pretrained()"),ogr=o(" to load the model weights."),rgr=l(),F(h8.$$.fragment),tgr=l(),go=a("div"),F(l9.$$.fragment),agr=l(),Ove=a("p"),ngr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),sgr=l(),Ya=a("p"),lgr=o("The model class to instantiate is selected based on the "),Vve=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),Le=a("ul"),p8=a("li"),Qve=a("strong"),pgr=o("data2vec-audio"),_gr=o(" \u2014 "),gH=a("a"),ugr=o("Data2VecAudioForCTC"),bgr=o(" (Data2VecAudio model)"),vgr=l(),_8=a("li"),Wve=a("strong"),Fgr=o("hubert"),Tgr=o(" \u2014 "),hH=a("a"),Mgr=o("HubertForCTC"),Egr=o(" (Hubert model)"),Cgr=l(),u8=a("li"),Hve=a("strong"),wgr=o("mctct"),Agr=o(" \u2014 "),pH=a("a"),Lgr=o("MCTCTForCTC"),ygr=o(" (M-CTC-T model)"),xgr=l(),b8=a("li"),Uve=a("strong"),$gr=o("sew"),kgr=o(" \u2014 "),_H=a("a"),Sgr=o("SEWForCTC"),Rgr=o(" (SEW model)"),Pgr=l(),v8=a("li"),Jve=a("strong"),Bgr=o("sew-d"),Igr=o(" \u2014 "),uH=a("a"),Ngr=o("SEWDForCTC"),qgr=o(" (SEW-D model)"),jgr=l(),F8=a("li"),Yve=a("strong"),Dgr=o("unispeech"),Ggr=o(" \u2014 "),bH=a("a"),Ogr=o("UniSpeechForCTC"),Vgr=o(" (UniSpeech model)"),Xgr=l(),T8=a("li"),Kve=a("strong"),zgr=o("unispeech-sat"),Qgr=o(" \u2014 "),vH=a("a"),Wgr=o("UniSpeechSatForCTC"),Hgr=o(" (UniSpeechSat model)"),Ugr=l(),M8=a("li"),Zve=a("strong"),Jgr=o("wav2vec2"),Ygr=o(" \u2014 "),FH=a("a"),Kgr=o("Wav2Vec2ForCTC"),Zgr=o(" (Wav2Vec2 model)"),ehr=l(),E8=a("li"),eFe=a("strong"),ohr=o("wav2vec2-conformer"),rhr=o(" \u2014 "),TH=a("a"),thr=o("Wav2Vec2ConformerForCTC"),ahr=o(" (Wav2Vec2-Conformer model)"),nhr=l(),C8=a("li"),oFe=a("strong"),shr=o("wavlm"),lhr=o(" \u2014 "),MH=a("a"),ihr=o("WavLMForCTC"),dhr=o(" (WavLM model)"),chr=l(),w8=a("p"),fhr=o("The model is set in evaluation mode by default using "),rFe=a("code"),mhr=o("model.eval()"),ghr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tFe=a("code"),hhr=o("model.train()"),phr=l(),F(A8.$$.fragment),XXe=l(),Nd=a("h2"),L8=a("a"),aFe=a("span"),F(i9.$$.fragment),_hr=l(),nFe=a("span"),uhr=o("AutoModelForSpeechSeq2Seq"),zXe=l(),Wo=a("div"),F(d9.$$.fragment),bhr=l(),qd=a("p"),vhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=a("a"),Fhr=o("from_pretrained()"),Thr=o(" class method or the "),CH=a("a"),Mhr=o("from_config()"),Ehr=o(` class
method.`),Chr=l(),c9=a("p"),whr=o("This class cannot be instantiated directly using "),sFe=a("code"),Ahr=o("__init__()"),Lhr=o(" (throws an error)."),yhr=l(),wt=a("div"),F(f9.$$.fragment),xhr=l(),lFe=a("p"),$hr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),khr=l(),jd=a("p"),Shr=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),Rhr=o("not"),Phr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),Bhr=o("from_pretrained()"),Ihr=o(" to load the model weights."),Nhr=l(),F(y8.$$.fragment),qhr=l(),ho=a("div"),F(m9.$$.fragment),jhr=l(),dFe=a("p"),Dhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ghr=l(),Ka=a("p"),Ohr=o("The model class to instantiate is selected based on the "),cFe=a("code"),Vhr=o("model_type"),Xhr=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),zhr=o("pretrained_model_name_or_path"),Qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),Whr=o("pretrained_model_name_or_path"),Hhr=o(":"),Uhr=l(),g9=a("ul"),x8=a("li"),gFe=a("strong"),Jhr=o("speech-encoder-decoder"),Yhr=o(" \u2014 "),AH=a("a"),Khr=o("SpeechEncoderDecoderModel"),Zhr=o(" (Speech Encoder decoder model)"),epr=l(),$8=a("li"),hFe=a("strong"),opr=o("speech_to_text"),rpr=o(" \u2014 "),LH=a("a"),tpr=o("Speech2TextForConditionalGeneration"),apr=o(" (Speech2Text model)"),npr=l(),k8=a("p"),spr=o("The model is set in evaluation mode by default using "),pFe=a("code"),lpr=o("model.eval()"),ipr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=a("code"),dpr=o("model.train()"),cpr=l(),F(S8.$$.fragment),QXe=l(),Dd=a("h2"),R8=a("a"),uFe=a("span"),F(h9.$$.fragment),fpr=l(),bFe=a("span"),mpr=o("AutoModelForAudioXVector"),WXe=l(),Ho=a("div"),F(p9.$$.fragment),gpr=l(),Gd=a("p"),hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=a("a"),ppr=o("from_pretrained()"),_pr=o(" class method or the "),xH=a("a"),upr=o("from_config()"),bpr=o(` class
method.`),vpr=l(),_9=a("p"),Fpr=o("This class cannot be instantiated directly using "),vFe=a("code"),Tpr=o("__init__()"),Mpr=o(" (throws an error)."),Epr=l(),At=a("div"),F(u9.$$.fragment),Cpr=l(),FFe=a("p"),wpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Apr=l(),Od=a("p"),Lpr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),ypr=o("not"),xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),$pr=o("from_pretrained()"),kpr=o(" to load the model weights."),Spr=l(),F(P8.$$.fragment),Rpr=l(),po=a("div"),F(b9.$$.fragment),Ppr=l(),MFe=a("p"),Bpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ipr=l(),Za=a("p"),Npr=o("The model class to instantiate is selected based on the "),EFe=a("code"),qpr=o("model_type"),jpr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(":"),Xpr=l(),ot=a("ul"),B8=a("li"),AFe=a("strong"),zpr=o("data2vec-audio"),Qpr=o(" \u2014 "),kH=a("a"),Wpr=o("Data2VecAudioForXVector"),Hpr=o(" (Data2VecAudio model)"),Upr=l(),I8=a("li"),LFe=a("strong"),Jpr=o("unispeech-sat"),Ypr=o(" \u2014 "),SH=a("a"),Kpr=o("UniSpeechSatForXVector"),Zpr=o(" (UniSpeechSat model)"),e_r=l(),N8=a("li"),yFe=a("strong"),o_r=o("wav2vec2"),r_r=o(" \u2014 "),RH=a("a"),t_r=o("Wav2Vec2ForXVector"),a_r=o(" (Wav2Vec2 model)"),n_r=l(),q8=a("li"),xFe=a("strong"),s_r=o("wav2vec2-conformer"),l_r=o(" \u2014 "),PH=a("a"),i_r=o("Wav2Vec2ConformerForXVector"),d_r=o(" (Wav2Vec2-Conformer model)"),c_r=l(),j8=a("li"),$Fe=a("strong"),f_r=o("wavlm"),m_r=o(" \u2014 "),BH=a("a"),g_r=o("WavLMForXVector"),h_r=o(" (WavLM model)"),p_r=l(),D8=a("p"),__r=o("The model is set in evaluation mode by default using "),kFe=a("code"),u_r=o("model.eval()"),b_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=a("code"),v_r=o("model.train()"),F_r=l(),F(G8.$$.fragment),HXe=l(),Vd=a("h2"),O8=a("a"),RFe=a("span"),F(v9.$$.fragment),T_r=l(),PFe=a("span"),M_r=o("AutoModelForMaskedImageModeling"),UXe=l(),Uo=a("div"),F(F9.$$.fragment),E_r=l(),Xd=a("p"),C_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=a("a"),w_r=o("from_pretrained()"),A_r=o(" class method or the "),NH=a("a"),L_r=o("from_config()"),y_r=o(` class
method.`),x_r=l(),T9=a("p"),$_r=o("This class cannot be instantiated directly using "),BFe=a("code"),k_r=o("__init__()"),S_r=o(" (throws an error)."),R_r=l(),Lt=a("div"),F(M9.$$.fragment),P_r=l(),IFe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),I_r=l(),zd=a("p"),N_r=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),q_r=o("not"),j_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),D_r=o("from_pretrained()"),G_r=o(" to load the model weights."),O_r=l(),F(V8.$$.fragment),V_r=l(),_o=a("div"),F(E9.$$.fragment),X_r=l(),qFe=a("p"),z_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Q_r=l(),en=a("p"),W_r=o("The model class to instantiate is selected based on the "),jFe=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),eur=l(),Qd=a("ul"),X8=a("li"),OFe=a("strong"),our=o("deit"),rur=o(" \u2014 "),jH=a("a"),tur=o("DeiTForMaskedImageModeling"),aur=o(" (DeiT model)"),nur=l(),z8=a("li"),VFe=a("strong"),sur=o("swin"),lur=o(" \u2014 "),DH=a("a"),iur=o("SwinForMaskedImageModeling"),dur=o(" (Swin Transformer model)"),cur=l(),Q8=a("li"),XFe=a("strong"),fur=o("vit"),mur=o(" \u2014 "),GH=a("a"),gur=o("ViTForMaskedImageModeling"),hur=o(" (ViT model)"),pur=l(),W8=a("p"),_ur=o("The model is set in evaluation mode by default using "),zFe=a("code"),uur=o("model.eval()"),bur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=a("code"),vur=o("model.train()"),Fur=l(),F(H8.$$.fragment),JXe=l(),Wd=a("h2"),U8=a("a"),WFe=a("span"),F(C9.$$.fragment),Tur=l(),HFe=a("span"),Mur=o("AutoModelForObjectDetection"),YXe=l(),Jo=a("div"),F(w9.$$.fragment),Eur=l(),Hd=a("p"),Cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=a("a"),wur=o("from_pretrained()"),Aur=o(" class method or the "),VH=a("a"),Lur=o("from_config()"),yur=o(` class
method.`),xur=l(),A9=a("p"),$ur=o("This class cannot be instantiated directly using "),UFe=a("code"),kur=o("__init__()"),Sur=o(" (throws an error)."),Rur=l(),yt=a("div"),F(L9.$$.fragment),Pur=l(),JFe=a("p"),Bur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Iur=l(),Ud=a("p"),Nur=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),qur=o("not"),jur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Dur=o("from_pretrained()"),Gur=o(" to load the model weights."),Our=l(),F(J8.$$.fragment),Vur=l(),uo=a("div"),F(y9.$$.fragment),Xur=l(),KFe=a("p"),zur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Qur=l(),on=a("p"),Wur=o("The model class to instantiate is selected based on the "),ZFe=a("code"),Hur=o("model_type"),Uur=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(":"),e1r=l(),Jd=a("ul"),Y8=a("li"),rTe=a("strong"),o1r=o("deformable_detr"),r1r=o(" \u2014 "),zH=a("a"),t1r=o("DeformableDetrForObjectDetection"),a1r=o(" (Deformable DETR model)"),n1r=l(),K8=a("li"),tTe=a("strong"),s1r=o("detr"),l1r=o(" \u2014 "),QH=a("a"),i1r=o("DetrForObjectDetection"),d1r=o(" (DETR model)"),c1r=l(),Z8=a("li"),aTe=a("strong"),f1r=o("yolos"),m1r=o(" \u2014 "),WH=a("a"),g1r=o("YolosForObjectDetection"),h1r=o(" (YOLOS model)"),p1r=l(),eM=a("p"),_1r=o("The model is set in evaluation mode by default using "),nTe=a("code"),u1r=o("model.eval()"),b1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=a("code"),v1r=o("model.train()"),F1r=l(),F(oM.$$.fragment),KXe=l(),Yd=a("h2"),rM=a("a"),lTe=a("span"),F(x9.$$.fragment),T1r=l(),iTe=a("span"),M1r=o("AutoModelForImageSegmentation"),ZXe=l(),Yo=a("div"),F($9.$$.fragment),E1r=l(),Kd=a("p"),C1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),HH=a("a"),w1r=o("from_pretrained()"),A1r=o(" class method or the "),UH=a("a"),L1r=o("from_config()"),y1r=o(` class
method.`),x1r=l(),k9=a("p"),$1r=o("This class cannot be instantiated directly using "),dTe=a("code"),k1r=o("__init__()"),S1r=o(" (throws an error)."),R1r=l(),xt=a("div"),F(S9.$$.fragment),P1r=l(),cTe=a("p"),B1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),I1r=l(),Zd=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),q1r=o("not"),j1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),D1r=o("from_pretrained()"),G1r=o(" to load the model weights."),O1r=l(),F(tM.$$.fragment),V1r=l(),bo=a("div"),F(R9.$$.fragment),X1r=l(),mTe=a("p"),z1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Q1r=l(),rn=a("p"),W1r=o("The model class to instantiate is selected based on the "),gTe=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),e2r=l(),_Te=a("ul"),aM=a("li"),uTe=a("strong"),o2r=o("detr"),r2r=o(" \u2014 "),YH=a("a"),t2r=o("DetrForSegmentation"),a2r=o(" (DETR model)"),n2r=l(),nM=a("p"),s2r=o("The model is set in evaluation mode by default using "),bTe=a("code"),l2r=o("model.eval()"),i2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vTe=a("code"),d2r=o("model.train()"),c2r=l(),F(sM.$$.fragment),eze=l(),ec=a("h2"),lM=a("a"),FTe=a("span"),F(P9.$$.fragment),f2r=l(),TTe=a("span"),m2r=o("AutoModelForSemanticSegmentation"),oze=l(),Ko=a("div"),F(B9.$$.fragment),g2r=l(),oc=a("p"),h2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),KH=a("a"),p2r=o("from_pretrained()"),_2r=o(" class method or the "),ZH=a("a"),u2r=o("from_config()"),b2r=o(` class
method.`),v2r=l(),I9=a("p"),F2r=o("This class cannot be instantiated directly using "),MTe=a("code"),T2r=o("__init__()"),M2r=o(" (throws an error)."),E2r=l(),$t=a("div"),F(N9.$$.fragment),C2r=l(),ETe=a("p"),w2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),A2r=l(),rc=a("p"),L2r=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),y2r=o("not"),x2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),$2r=o("from_pretrained()"),k2r=o(" to load the model weights."),S2r=l(),F(iM.$$.fragment),R2r=l(),vo=a("div"),F(q9.$$.fragment),P2r=l(),wTe=a("p"),B2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),I2r=l(),tn=a("p"),N2r=o("The model class to instantiate is selected based on the "),ATe=a("code"),q2r=o("model_type"),j2r=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),D2r=o("pretrained_model_name_or_path"),G2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),O2r=o("pretrained_model_name_or_path"),V2r=o(":"),X2r=l(),rt=a("ul"),dM=a("li"),xTe=a("strong"),z2r=o("beit"),Q2r=o(" \u2014 "),oU=a("a"),W2r=o("BeitForSemanticSegmentation"),H2r=o(" (BEiT model)"),U2r=l(),cM=a("li"),$Te=a("strong"),J2r=o("data2vec-vision"),Y2r=o(" \u2014 "),rU=a("a"),K2r=o("Data2VecVisionForSemanticSegmentation"),Z2r=o(" (Data2VecVision model)"),ebr=l(),fM=a("li"),kTe=a("strong"),obr=o("dpt"),rbr=o(" \u2014 "),tU=a("a"),tbr=o("DPTForSemanticSegmentation"),abr=o(" (DPT model)"),nbr=l(),mM=a("li"),STe=a("strong"),sbr=o("mobilevit"),lbr=o(" \u2014 "),aU=a("a"),ibr=o("MobileViTForSemanticSegmentation"),dbr=o(" (MobileViT model)"),cbr=l(),gM=a("li"),RTe=a("strong"),fbr=o("segformer"),mbr=o(" \u2014 "),nU=a("a"),gbr=o("SegformerForSemanticSegmentation"),hbr=o(" (SegFormer model)"),pbr=l(),hM=a("p"),_br=o("The model is set in evaluation mode by default using "),PTe=a("code"),ubr=o("model.eval()"),bbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BTe=a("code"),vbr=o("model.train()"),Fbr=l(),F(pM.$$.fragment),rze=l(),tc=a("h2"),_M=a("a"),ITe=a("span"),F(j9.$$.fragment),Tbr=l(),NTe=a("span"),Mbr=o("AutoModelForInstanceSegmentation"),tze=l(),Zo=a("div"),F(D9.$$.fragment),Ebr=l(),ac=a("p"),Cbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sU=a("a"),wbr=o("from_pretrained()"),Abr=o(" class method or the "),lU=a("a"),Lbr=o("from_config()"),ybr=o(` class
method.`),xbr=l(),G9=a("p"),$br=o("This class cannot be instantiated directly using "),qTe=a("code"),kbr=o("__init__()"),Sbr=o(" (throws an error)."),Rbr=l(),kt=a("div"),F(O9.$$.fragment),Pbr=l(),jTe=a("p"),Bbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ibr=l(),nc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),qbr=o("not"),jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),Dbr=o("from_pretrained()"),Gbr=o(" to load the model weights."),Obr=l(),F(uM.$$.fragment),Vbr=l(),Fo=a("div"),F(V9.$$.fragment),Xbr=l(),GTe=a("p"),zbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Qbr=l(),an=a("p"),Wbr=o("The model class to instantiate is selected based on the "),OTe=a("code"),Hbr=o("model_type"),Ubr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(":"),evr=l(),zTe=a("ul"),bM=a("li"),QTe=a("strong"),ovr=o("maskformer"),rvr=o(" \u2014 "),dU=a("a"),tvr=o("MaskFormerForInstanceSegmentation"),avr=o(" (MaskFormer model)"),nvr=l(),vM=a("p"),svr=o("The model is set in evaluation mode by default using "),WTe=a("code"),lvr=o("model.eval()"),ivr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HTe=a("code"),dvr=o("model.train()"),cvr=l(),F(FM.$$.fragment),aze=l(),sc=a("h2"),TM=a("a"),UTe=a("span"),F(X9.$$.fragment),fvr=l(),JTe=a("span"),mvr=o("TFAutoModel"),nze=l(),er=a("div"),F(z9.$$.fragment),gvr=l(),lc=a("p"),hvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cU=a("a"),pvr=o("from_pretrained()"),_vr=o(" class method or the "),fU=a("a"),uvr=o("from_config()"),bvr=o(` class
method.`),vvr=l(),Q9=a("p"),Fvr=o("This class cannot be instantiated directly using "),YTe=a("code"),Tvr=o("__init__()"),Mvr=o(" (throws an error)."),Evr=l(),St=a("div"),F(W9.$$.fragment),Cvr=l(),KTe=a("p"),wvr=o("Instantiates one of the base model classes of the library from a configuration."),Avr=l(),ic=a("p"),Lvr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),yvr=o("not"),xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),$vr=o("from_pretrained()"),kvr=o(" to load the model weights."),Svr=l(),F(MM.$$.fragment),Rvr=l(),yr=a("div"),F(H9.$$.fragment),Pvr=l(),e7e=a("p"),Bvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ivr=l(),nn=a("p"),Nvr=o("The model class to instantiate is selected based on the "),o7e=a("code"),qvr=o("model_type"),jvr=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),Dvr=o("pretrained_model_name_or_path"),Gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(":"),Xvr=l(),j=a("ul"),EM=a("li"),a7e=a("strong"),zvr=o("albert"),Qvr=o(" \u2014 "),gU=a("a"),Wvr=o("TFAlbertModel"),Hvr=o(" (ALBERT model)"),Uvr=l(),CM=a("li"),n7e=a("strong"),Jvr=o("bart"),Yvr=o(" \u2014 "),hU=a("a"),Kvr=o("TFBartModel"),Zvr=o(" (BART model)"),eFr=l(),wM=a("li"),s7e=a("strong"),oFr=o("bert"),rFr=o(" \u2014 "),pU=a("a"),tFr=o("TFBertModel"),aFr=o(" (BERT model)"),nFr=l(),AM=a("li"),l7e=a("strong"),sFr=o("blenderbot"),lFr=o(" \u2014 "),_U=a("a"),iFr=o("TFBlenderbotModel"),dFr=o(" (Blenderbot model)"),cFr=l(),LM=a("li"),i7e=a("strong"),fFr=o("blenderbot-small"),mFr=o(" \u2014 "),uU=a("a"),gFr=o("TFBlenderbotSmallModel"),hFr=o(" (BlenderbotSmall model)"),pFr=l(),yM=a("li"),d7e=a("strong"),_Fr=o("camembert"),uFr=o(" \u2014 "),bU=a("a"),bFr=o("TFCamembertModel"),vFr=o(" (CamemBERT model)"),FFr=l(),xM=a("li"),c7e=a("strong"),TFr=o("clip"),MFr=o(" \u2014 "),vU=a("a"),EFr=o("TFCLIPModel"),CFr=o(" (CLIP model)"),wFr=l(),$M=a("li"),f7e=a("strong"),AFr=o("convbert"),LFr=o(" \u2014 "),FU=a("a"),yFr=o("TFConvBertModel"),xFr=o(" (ConvBERT model)"),$Fr=l(),kM=a("li"),m7e=a("strong"),kFr=o("convnext"),SFr=o(" \u2014 "),TU=a("a"),RFr=o("TFConvNextModel"),PFr=o(" (ConvNeXT model)"),BFr=l(),SM=a("li"),g7e=a("strong"),IFr=o("ctrl"),NFr=o(" \u2014 "),MU=a("a"),qFr=o("TFCTRLModel"),jFr=o(" (CTRL model)"),DFr=l(),RM=a("li"),h7e=a("strong"),GFr=o("data2vec-vision"),OFr=o(" \u2014 "),EU=a("a"),VFr=o("TFData2VecVisionModel"),XFr=o(" (Data2VecVision model)"),zFr=l(),PM=a("li"),p7e=a("strong"),QFr=o("deberta"),WFr=o(" \u2014 "),CU=a("a"),HFr=o("TFDebertaModel"),UFr=o(" (DeBERTa model)"),JFr=l(),BM=a("li"),_7e=a("strong"),YFr=o("deberta-v2"),KFr=o(" \u2014 "),wU=a("a"),ZFr=o("TFDebertaV2Model"),eTr=o(" (DeBERTa-v2 model)"),oTr=l(),IM=a("li"),u7e=a("strong"),rTr=o("distilbert"),tTr=o(" \u2014 "),AU=a("a"),aTr=o("TFDistilBertModel"),nTr=o(" (DistilBERT model)"),sTr=l(),NM=a("li"),b7e=a("strong"),lTr=o("dpr"),iTr=o(" \u2014 "),LU=a("a"),dTr=o("TFDPRQuestionEncoder"),cTr=o(" (DPR model)"),fTr=l(),qM=a("li"),v7e=a("strong"),mTr=o("electra"),gTr=o(" \u2014 "),yU=a("a"),hTr=o("TFElectraModel"),pTr=o(" (ELECTRA model)"),_Tr=l(),jM=a("li"),F7e=a("strong"),uTr=o("flaubert"),bTr=o(" \u2014 "),xU=a("a"),vTr=o("TFFlaubertModel"),FTr=o(" (FlauBERT model)"),TTr=l(),Us=a("li"),T7e=a("strong"),MTr=o("funnel"),ETr=o(" \u2014 "),$U=a("a"),CTr=o("TFFunnelModel"),wTr=o(" or "),kU=a("a"),ATr=o("TFFunnelBaseModel"),LTr=o(" (Funnel Transformer model)"),yTr=l(),DM=a("li"),M7e=a("strong"),xTr=o("gpt2"),$Tr=o(" \u2014 "),SU=a("a"),kTr=o("TFGPT2Model"),STr=o(" (OpenAI GPT-2 model)"),RTr=l(),GM=a("li"),E7e=a("strong"),PTr=o("gptj"),BTr=o(" \u2014 "),RU=a("a"),ITr=o("TFGPTJModel"),NTr=o(" (GPT-J model)"),qTr=l(),OM=a("li"),C7e=a("strong"),jTr=o("hubert"),DTr=o(" \u2014 "),PU=a("a"),GTr=o("TFHubertModel"),OTr=o(" (Hubert model)"),VTr=l(),VM=a("li"),w7e=a("strong"),XTr=o("layoutlm"),zTr=o(" \u2014 "),BU=a("a"),QTr=o("TFLayoutLMModel"),WTr=o(" (LayoutLM model)"),HTr=l(),XM=a("li"),A7e=a("strong"),UTr=o("led"),JTr=o(" \u2014 "),IU=a("a"),YTr=o("TFLEDModel"),KTr=o(" (LED model)"),ZTr=l(),zM=a("li"),L7e=a("strong"),e7r=o("longformer"),o7r=o(" \u2014 "),NU=a("a"),r7r=o("TFLongformerModel"),t7r=o(" (Longformer model)"),a7r=l(),QM=a("li"),y7e=a("strong"),n7r=o("lxmert"),s7r=o(" \u2014 "),qU=a("a"),l7r=o("TFLxmertModel"),i7r=o(" (LXMERT model)"),d7r=l(),WM=a("li"),x7e=a("strong"),c7r=o("marian"),f7r=o(" \u2014 "),jU=a("a"),m7r=o("TFMarianModel"),g7r=o(" (Marian model)"),h7r=l(),HM=a("li"),$7e=a("strong"),p7r=o("mbart"),_7r=o(" \u2014 "),DU=a("a"),u7r=o("TFMBartModel"),b7r=o(" (mBART model)"),v7r=l(),UM=a("li"),k7e=a("strong"),F7r=o("mobilebert"),T7r=o(" \u2014 "),GU=a("a"),M7r=o("TFMobileBertModel"),E7r=o(" (MobileBERT model)"),C7r=l(),JM=a("li"),S7e=a("strong"),w7r=o("mpnet"),A7r=o(" \u2014 "),OU=a("a"),L7r=o("TFMPNetModel"),y7r=o(" (MPNet model)"),x7r=l(),YM=a("li"),R7e=a("strong"),$7r=o("mt5"),k7r=o(" \u2014 "),VU=a("a"),S7r=o("TFMT5Model"),R7r=o(" (MT5 model)"),P7r=l(),KM=a("li"),P7e=a("strong"),B7r=o("openai-gpt"),I7r=o(" \u2014 "),XU=a("a"),N7r=o("TFOpenAIGPTModel"),q7r=o(" (OpenAI GPT model)"),j7r=l(),ZM=a("li"),B7e=a("strong"),D7r=o("opt"),G7r=o(" \u2014 "),zU=a("a"),O7r=o("TFOPTModel"),V7r=o(" (OPT model)"),X7r=l(),e4=a("li"),I7e=a("strong"),z7r=o("pegasus"),Q7r=o(" \u2014 "),QU=a("a"),W7r=o("TFPegasusModel"),H7r=o(" (Pegasus model)"),U7r=l(),o4=a("li"),N7e=a("strong"),J7r=o("regnet"),Y7r=o(" \u2014 "),WU=a("a"),K7r=o("TFRegNetModel"),Z7r=o(" (RegNet model)"),e8r=l(),r4=a("li"),q7e=a("strong"),o8r=o("rembert"),r8r=o(" \u2014 "),HU=a("a"),t8r=o("TFRemBertModel"),a8r=o(" (RemBERT model)"),n8r=l(),t4=a("li"),j7e=a("strong"),s8r=o("roberta"),l8r=o(" \u2014 "),UU=a("a"),i8r=o("TFRobertaModel"),d8r=o(" (RoBERTa model)"),c8r=l(),a4=a("li"),D7e=a("strong"),f8r=o("roformer"),m8r=o(" \u2014 "),JU=a("a"),g8r=o("TFRoFormerModel"),h8r=o(" (RoFormer model)"),p8r=l(),n4=a("li"),G7e=a("strong"),_8r=o("speech_to_text"),u8r=o(" \u2014 "),YU=a("a"),b8r=o("TFSpeech2TextModel"),v8r=o(" (Speech2Text model)"),F8r=l(),s4=a("li"),O7e=a("strong"),T8r=o("swin"),M8r=o(" \u2014 "),KU=a("a"),E8r=o("TFSwinModel"),C8r=o(" (Swin Transformer model)"),w8r=l(),l4=a("li"),V7e=a("strong"),A8r=o("t5"),L8r=o(" \u2014 "),ZU=a("a"),y8r=o("TFT5Model"),x8r=o(" (T5 model)"),$8r=l(),i4=a("li"),X7e=a("strong"),k8r=o("tapas"),S8r=o(" \u2014 "),eJ=a("a"),R8r=o("TFTapasModel"),P8r=o(" (TAPAS model)"),B8r=l(),d4=a("li"),z7e=a("strong"),I8r=o("transfo-xl"),N8r=o(" \u2014 "),oJ=a("a"),q8r=o("TFTransfoXLModel"),j8r=o(" (Transformer-XL model)"),D8r=l(),c4=a("li"),Q7e=a("strong"),G8r=o("vit"),O8r=o(" \u2014 "),rJ=a("a"),V8r=o("TFViTModel"),X8r=o(" (ViT model)"),z8r=l(),f4=a("li"),W7e=a("strong"),Q8r=o("vit_mae"),W8r=o(" \u2014 "),tJ=a("a"),H8r=o("TFViTMAEModel"),U8r=o(" (ViTMAE model)"),J8r=l(),m4=a("li"),H7e=a("strong"),Y8r=o("wav2vec2"),K8r=o(" \u2014 "),aJ=a("a"),Z8r=o("TFWav2Vec2Model"),eMr=o(" (Wav2Vec2 model)"),oMr=l(),g4=a("li"),U7e=a("strong"),rMr=o("xlm"),tMr=o(" \u2014 "),nJ=a("a"),aMr=o("TFXLMModel"),nMr=o(" (XLM model)"),sMr=l(),h4=a("li"),J7e=a("strong"),lMr=o("xlm-roberta"),iMr=o(" \u2014 "),sJ=a("a"),dMr=o("TFXLMRobertaModel"),cMr=o(" (XLM-RoBERTa model)"),fMr=l(),p4=a("li"),Y7e=a("strong"),mMr=o("xlnet"),gMr=o(" \u2014 "),lJ=a("a"),hMr=o("TFXLNetModel"),pMr=o(" (XLNet model)"),_Mr=l(),F(_4.$$.fragment),sze=l(),dc=a("h2"),u4=a("a"),K7e=a("span"),F(U9.$$.fragment),uMr=l(),Z7e=a("span"),bMr=o("TFAutoModelForPreTraining"),lze=l(),or=a("div"),F(J9.$$.fragment),vMr=l(),cc=a("p"),FMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iJ=a("a"),TMr=o("from_pretrained()"),MMr=o(" class method or the "),dJ=a("a"),EMr=o("from_config()"),CMr=o(` class
method.`),wMr=l(),Y9=a("p"),AMr=o("This class cannot be instantiated directly using "),e8e=a("code"),LMr=o("__init__()"),yMr=o(" (throws an error)."),xMr=l(),Rt=a("div"),F(K9.$$.fragment),$Mr=l(),o8e=a("p"),kMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SMr=l(),fc=a("p"),RMr=o(`Note:
Loading a model from its configuration file does `),r8e=a("strong"),PMr=o("not"),BMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),IMr=o("from_pretrained()"),NMr=o(" to load the model weights."),qMr=l(),F(b4.$$.fragment),jMr=l(),xr=a("div"),F(Z9.$$.fragment),DMr=l(),t8e=a("p"),GMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OMr=l(),sn=a("p"),VMr=o("The model class to instantiate is selected based on the "),a8e=a("code"),XMr=o("model_type"),zMr=o(` property of the config object (either
passed as an argument or loaded from `),n8e=a("code"),QMr=o("pretrained_model_name_or_path"),WMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=a("code"),HMr=o("pretrained_model_name_or_path"),UMr=o(":"),JMr=l(),se=a("ul"),v4=a("li"),l8e=a("strong"),YMr=o("albert"),KMr=o(" \u2014 "),fJ=a("a"),ZMr=o("TFAlbertForPreTraining"),e4r=o(" (ALBERT model)"),o4r=l(),F4=a("li"),i8e=a("strong"),r4r=o("bart"),t4r=o(" \u2014 "),mJ=a("a"),a4r=o("TFBartForConditionalGeneration"),n4r=o(" (BART model)"),s4r=l(),T4=a("li"),d8e=a("strong"),l4r=o("bert"),i4r=o(" \u2014 "),gJ=a("a"),d4r=o("TFBertForPreTraining"),c4r=o(" (BERT model)"),f4r=l(),M4=a("li"),c8e=a("strong"),m4r=o("camembert"),g4r=o(" \u2014 "),hJ=a("a"),h4r=o("TFCamembertForMaskedLM"),p4r=o(" (CamemBERT model)"),_4r=l(),E4=a("li"),f8e=a("strong"),u4r=o("ctrl"),b4r=o(" \u2014 "),pJ=a("a"),v4r=o("TFCTRLLMHeadModel"),F4r=o(" (CTRL model)"),T4r=l(),C4=a("li"),m8e=a("strong"),M4r=o("distilbert"),E4r=o(" \u2014 "),_J=a("a"),C4r=o("TFDistilBertForMaskedLM"),w4r=o(" (DistilBERT model)"),A4r=l(),w4=a("li"),g8e=a("strong"),L4r=o("electra"),y4r=o(" \u2014 "),uJ=a("a"),x4r=o("TFElectraForPreTraining"),$4r=o(" (ELECTRA model)"),k4r=l(),A4=a("li"),h8e=a("strong"),S4r=o("flaubert"),R4r=o(" \u2014 "),bJ=a("a"),P4r=o("TFFlaubertWithLMHeadModel"),B4r=o(" (FlauBERT model)"),I4r=l(),L4=a("li"),p8e=a("strong"),N4r=o("funnel"),q4r=o(" \u2014 "),vJ=a("a"),j4r=o("TFFunnelForPreTraining"),D4r=o(" (Funnel Transformer model)"),G4r=l(),y4=a("li"),_8e=a("strong"),O4r=o("gpt2"),V4r=o(" \u2014 "),FJ=a("a"),X4r=o("TFGPT2LMHeadModel"),z4r=o(" (OpenAI GPT-2 model)"),Q4r=l(),x4=a("li"),u8e=a("strong"),W4r=o("layoutlm"),H4r=o(" \u2014 "),TJ=a("a"),U4r=o("TFLayoutLMForMaskedLM"),J4r=o(" (LayoutLM model)"),Y4r=l(),$4=a("li"),b8e=a("strong"),K4r=o("lxmert"),Z4r=o(" \u2014 "),MJ=a("a"),eEr=o("TFLxmertForPreTraining"),oEr=o(" (LXMERT model)"),rEr=l(),k4=a("li"),v8e=a("strong"),tEr=o("mobilebert"),aEr=o(" \u2014 "),EJ=a("a"),nEr=o("TFMobileBertForPreTraining"),sEr=o(" (MobileBERT model)"),lEr=l(),S4=a("li"),F8e=a("strong"),iEr=o("mpnet"),dEr=o(" \u2014 "),CJ=a("a"),cEr=o("TFMPNetForMaskedLM"),fEr=o(" (MPNet model)"),mEr=l(),R4=a("li"),T8e=a("strong"),gEr=o("openai-gpt"),hEr=o(" \u2014 "),wJ=a("a"),pEr=o("TFOpenAIGPTLMHeadModel"),_Er=o(" (OpenAI GPT model)"),uEr=l(),P4=a("li"),M8e=a("strong"),bEr=o("roberta"),vEr=o(" \u2014 "),AJ=a("a"),FEr=o("TFRobertaForMaskedLM"),TEr=o(" (RoBERTa model)"),MEr=l(),B4=a("li"),E8e=a("strong"),EEr=o("t5"),CEr=o(" \u2014 "),LJ=a("a"),wEr=o("TFT5ForConditionalGeneration"),AEr=o(" (T5 model)"),LEr=l(),I4=a("li"),C8e=a("strong"),yEr=o("tapas"),xEr=o(" \u2014 "),yJ=a("a"),$Er=o("TFTapasForMaskedLM"),kEr=o(" (TAPAS model)"),SEr=l(),N4=a("li"),w8e=a("strong"),REr=o("transfo-xl"),PEr=o(" \u2014 "),xJ=a("a"),BEr=o("TFTransfoXLLMHeadModel"),IEr=o(" (Transformer-XL model)"),NEr=l(),q4=a("li"),A8e=a("strong"),qEr=o("vit_mae"),jEr=o(" \u2014 "),$J=a("a"),DEr=o("TFViTMAEForPreTraining"),GEr=o(" (ViTMAE model)"),OEr=l(),j4=a("li"),L8e=a("strong"),VEr=o("xlm"),XEr=o(" \u2014 "),kJ=a("a"),zEr=o("TFXLMWithLMHeadModel"),QEr=o(" (XLM model)"),WEr=l(),D4=a("li"),y8e=a("strong"),HEr=o("xlm-roberta"),UEr=o(" \u2014 "),SJ=a("a"),JEr=o("TFXLMRobertaForMaskedLM"),YEr=o(" (XLM-RoBERTa model)"),KEr=l(),G4=a("li"),x8e=a("strong"),ZEr=o("xlnet"),eCr=o(" \u2014 "),RJ=a("a"),oCr=o("TFXLNetLMHeadModel"),rCr=o(" (XLNet model)"),tCr=l(),F(O4.$$.fragment),ize=l(),mc=a("h2"),V4=a("a"),$8e=a("span"),F(ex.$$.fragment),aCr=l(),k8e=a("span"),nCr=o("TFAutoModelForCausalLM"),dze=l(),rr=a("div"),F(ox.$$.fragment),sCr=l(),gc=a("p"),lCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PJ=a("a"),iCr=o("from_pretrained()"),dCr=o(" class method or the "),BJ=a("a"),cCr=o("from_config()"),fCr=o(` class
method.`),mCr=l(),rx=a("p"),gCr=o("This class cannot be instantiated directly using "),S8e=a("code"),hCr=o("__init__()"),pCr=o(" (throws an error)."),_Cr=l(),Pt=a("div"),F(tx.$$.fragment),uCr=l(),R8e=a("p"),bCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vCr=l(),hc=a("p"),FCr=o(`Note:
Loading a model from its configuration file does `),P8e=a("strong"),TCr=o("not"),MCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),ECr=o("from_pretrained()"),CCr=o(" to load the model weights."),wCr=l(),F(X4.$$.fragment),ACr=l(),$r=a("div"),F(ax.$$.fragment),LCr=l(),B8e=a("p"),yCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xCr=l(),ln=a("p"),$Cr=o("The model class to instantiate is selected based on the "),I8e=a("code"),kCr=o("model_type"),SCr=o(` property of the config object (either
passed as an argument or loaded from `),N8e=a("code"),RCr=o("pretrained_model_name_or_path"),PCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(":"),NCr=l(),Me=a("ul"),z4=a("li"),j8e=a("strong"),qCr=o("bert"),jCr=o(" \u2014 "),NJ=a("a"),DCr=o("TFBertLMHeadModel"),GCr=o(" (BERT model)"),OCr=l(),Q4=a("li"),D8e=a("strong"),VCr=o("camembert"),XCr=o(" \u2014 "),qJ=a("a"),zCr=o("TFCamembertForCausalLM"),QCr=o(" (CamemBERT model)"),WCr=l(),W4=a("li"),G8e=a("strong"),HCr=o("ctrl"),UCr=o(" \u2014 "),jJ=a("a"),JCr=o("TFCTRLLMHeadModel"),YCr=o(" (CTRL model)"),KCr=l(),H4=a("li"),O8e=a("strong"),ZCr=o("gpt2"),e3r=o(" \u2014 "),DJ=a("a"),o3r=o("TFGPT2LMHeadModel"),r3r=o(" (OpenAI GPT-2 model)"),t3r=l(),U4=a("li"),V8e=a("strong"),a3r=o("gptj"),n3r=o(" \u2014 "),GJ=a("a"),s3r=o("TFGPTJForCausalLM"),l3r=o(" (GPT-J model)"),i3r=l(),J4=a("li"),X8e=a("strong"),d3r=o("openai-gpt"),c3r=o(" \u2014 "),OJ=a("a"),f3r=o("TFOpenAIGPTLMHeadModel"),m3r=o(" (OpenAI GPT model)"),g3r=l(),Y4=a("li"),z8e=a("strong"),h3r=o("opt"),p3r=o(" \u2014 "),VJ=a("a"),_3r=o("TFOPTForCausalLM"),u3r=o(" (OPT model)"),b3r=l(),K4=a("li"),Q8e=a("strong"),v3r=o("rembert"),F3r=o(" \u2014 "),XJ=a("a"),T3r=o("TFRemBertForCausalLM"),M3r=o(" (RemBERT model)"),E3r=l(),Z4=a("li"),W8e=a("strong"),C3r=o("roberta"),w3r=o(" \u2014 "),zJ=a("a"),A3r=o("TFRobertaForCausalLM"),L3r=o(" (RoBERTa model)"),y3r=l(),eE=a("li"),H8e=a("strong"),x3r=o("roformer"),$3r=o(" \u2014 "),QJ=a("a"),k3r=o("TFRoFormerForCausalLM"),S3r=o(" (RoFormer model)"),R3r=l(),oE=a("li"),U8e=a("strong"),P3r=o("transfo-xl"),B3r=o(" \u2014 "),WJ=a("a"),I3r=o("TFTransfoXLLMHeadModel"),N3r=o(" (Transformer-XL model)"),q3r=l(),rE=a("li"),J8e=a("strong"),j3r=o("xlm"),D3r=o(" \u2014 "),HJ=a("a"),G3r=o("TFXLMWithLMHeadModel"),O3r=o(" (XLM model)"),V3r=l(),tE=a("li"),Y8e=a("strong"),X3r=o("xlnet"),z3r=o(" \u2014 "),UJ=a("a"),Q3r=o("TFXLNetLMHeadModel"),W3r=o(" (XLNet model)"),H3r=l(),F(aE.$$.fragment),cze=l(),pc=a("h2"),nE=a("a"),K8e=a("span"),F(nx.$$.fragment),U3r=l(),Z8e=a("span"),J3r=o("TFAutoModelForImageClassification"),fze=l(),tr=a("div"),F(sx.$$.fragment),Y3r=l(),_c=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JJ=a("a"),Z3r=o("from_pretrained()"),e5r=o(" class method or the "),YJ=a("a"),o5r=o("from_config()"),r5r=o(` class
method.`),t5r=l(),lx=a("p"),a5r=o("This class cannot be instantiated directly using "),eMe=a("code"),n5r=o("__init__()"),s5r=o(" (throws an error)."),l5r=l(),Bt=a("div"),F(ix.$$.fragment),i5r=l(),oMe=a("p"),d5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),c5r=l(),uc=a("p"),f5r=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),m5r=o("not"),g5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),h5r=o("from_pretrained()"),p5r=o(" to load the model weights."),_5r=l(),F(sE.$$.fragment),u5r=l(),kr=a("div"),F(dx.$$.fragment),b5r=l(),tMe=a("p"),v5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),F5r=l(),dn=a("p"),T5r=o("The model class to instantiate is selected based on the "),aMe=a("code"),M5r=o("model_type"),E5r=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),A5r=o("pretrained_model_name_or_path"),L5r=o(":"),y5r=l(),tt=a("ul"),lE=a("li"),lMe=a("strong"),x5r=o("convnext"),$5r=o(" \u2014 "),ZJ=a("a"),k5r=o("TFConvNextForImageClassification"),S5r=o(" (ConvNeXT model)"),R5r=l(),iE=a("li"),iMe=a("strong"),P5r=o("data2vec-vision"),B5r=o(" \u2014 "),eY=a("a"),I5r=o("TFData2VecVisionForImageClassification"),N5r=o(" (Data2VecVision model)"),q5r=l(),dE=a("li"),dMe=a("strong"),j5r=o("regnet"),D5r=o(" \u2014 "),oY=a("a"),G5r=o("TFRegNetForImageClassification"),O5r=o(" (RegNet model)"),V5r=l(),cE=a("li"),cMe=a("strong"),X5r=o("swin"),z5r=o(" \u2014 "),rY=a("a"),Q5r=o("TFSwinForImageClassification"),W5r=o(" (Swin Transformer model)"),H5r=l(),fE=a("li"),fMe=a("strong"),U5r=o("vit"),J5r=o(" \u2014 "),tY=a("a"),Y5r=o("TFViTForImageClassification"),K5r=o(" (ViT model)"),Z5r=l(),F(mE.$$.fragment),mze=l(),bc=a("h2"),gE=a("a"),mMe=a("span"),F(cx.$$.fragment),e0r=l(),gMe=a("span"),o0r=o("TFAutoModelForMaskedLM"),gze=l(),ar=a("div"),F(fx.$$.fragment),r0r=l(),vc=a("p"),t0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=a("a"),a0r=o("from_pretrained()"),n0r=o(" class method or the "),nY=a("a"),s0r=o("from_config()"),l0r=o(` class
method.`),i0r=l(),mx=a("p"),d0r=o("This class cannot be instantiated directly using "),hMe=a("code"),c0r=o("__init__()"),f0r=o(" (throws an error)."),m0r=l(),It=a("div"),F(gx.$$.fragment),g0r=l(),pMe=a("p"),h0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p0r=l(),Fc=a("p"),_0r=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),u0r=o("not"),b0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),v0r=o("from_pretrained()"),F0r=o(" to load the model weights."),T0r=l(),F(hE.$$.fragment),M0r=l(),Sr=a("div"),F(hx.$$.fragment),E0r=l(),uMe=a("p"),C0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w0r=l(),cn=a("p"),A0r=o("The model class to instantiate is selected based on the "),bMe=a("code"),L0r=o("model_type"),y0r=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),x0r=o("pretrained_model_name_or_path"),$0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),k0r=o("pretrained_model_name_or_path"),S0r=o(":"),R0r=l(),ie=a("ul"),pE=a("li"),TMe=a("strong"),P0r=o("albert"),B0r=o(" \u2014 "),lY=a("a"),I0r=o("TFAlbertForMaskedLM"),N0r=o(" (ALBERT model)"),q0r=l(),_E=a("li"),MMe=a("strong"),j0r=o("bert"),D0r=o(" \u2014 "),iY=a("a"),G0r=o("TFBertForMaskedLM"),O0r=o(" (BERT model)"),V0r=l(),uE=a("li"),EMe=a("strong"),X0r=o("camembert"),z0r=o(" \u2014 "),dY=a("a"),Q0r=o("TFCamembertForMaskedLM"),W0r=o(" (CamemBERT model)"),H0r=l(),bE=a("li"),CMe=a("strong"),U0r=o("convbert"),J0r=o(" \u2014 "),cY=a("a"),Y0r=o("TFConvBertForMaskedLM"),K0r=o(" (ConvBERT model)"),Z0r=l(),vE=a("li"),wMe=a("strong"),ewr=o("deberta"),owr=o(" \u2014 "),fY=a("a"),rwr=o("TFDebertaForMaskedLM"),twr=o(" (DeBERTa model)"),awr=l(),FE=a("li"),AMe=a("strong"),nwr=o("deberta-v2"),swr=o(" \u2014 "),mY=a("a"),lwr=o("TFDebertaV2ForMaskedLM"),iwr=o(" (DeBERTa-v2 model)"),dwr=l(),TE=a("li"),LMe=a("strong"),cwr=o("distilbert"),fwr=o(" \u2014 "),gY=a("a"),mwr=o("TFDistilBertForMaskedLM"),gwr=o(" (DistilBERT model)"),hwr=l(),ME=a("li"),yMe=a("strong"),pwr=o("electra"),_wr=o(" \u2014 "),hY=a("a"),uwr=o("TFElectraForMaskedLM"),bwr=o(" (ELECTRA model)"),vwr=l(),EE=a("li"),xMe=a("strong"),Fwr=o("flaubert"),Twr=o(" \u2014 "),pY=a("a"),Mwr=o("TFFlaubertWithLMHeadModel"),Ewr=o(" (FlauBERT model)"),Cwr=l(),CE=a("li"),$Me=a("strong"),wwr=o("funnel"),Awr=o(" \u2014 "),_Y=a("a"),Lwr=o("TFFunnelForMaskedLM"),ywr=o(" (Funnel Transformer model)"),xwr=l(),wE=a("li"),kMe=a("strong"),$wr=o("layoutlm"),kwr=o(" \u2014 "),uY=a("a"),Swr=o("TFLayoutLMForMaskedLM"),Rwr=o(" (LayoutLM model)"),Pwr=l(),AE=a("li"),SMe=a("strong"),Bwr=o("longformer"),Iwr=o(" \u2014 "),bY=a("a"),Nwr=o("TFLongformerForMaskedLM"),qwr=o(" (Longformer model)"),jwr=l(),LE=a("li"),RMe=a("strong"),Dwr=o("mobilebert"),Gwr=o(" \u2014 "),vY=a("a"),Owr=o("TFMobileBertForMaskedLM"),Vwr=o(" (MobileBERT model)"),Xwr=l(),yE=a("li"),PMe=a("strong"),zwr=o("mpnet"),Qwr=o(" \u2014 "),FY=a("a"),Wwr=o("TFMPNetForMaskedLM"),Hwr=o(" (MPNet model)"),Uwr=l(),xE=a("li"),BMe=a("strong"),Jwr=o("rembert"),Ywr=o(" \u2014 "),TY=a("a"),Kwr=o("TFRemBertForMaskedLM"),Zwr=o(" (RemBERT model)"),eAr=l(),$E=a("li"),IMe=a("strong"),oAr=o("roberta"),rAr=o(" \u2014 "),MY=a("a"),tAr=o("TFRobertaForMaskedLM"),aAr=o(" (RoBERTa model)"),nAr=l(),kE=a("li"),NMe=a("strong"),sAr=o("roformer"),lAr=o(" \u2014 "),EY=a("a"),iAr=o("TFRoFormerForMaskedLM"),dAr=o(" (RoFormer model)"),cAr=l(),SE=a("li"),qMe=a("strong"),fAr=o("tapas"),mAr=o(" \u2014 "),CY=a("a"),gAr=o("TFTapasForMaskedLM"),hAr=o(" (TAPAS model)"),pAr=l(),RE=a("li"),jMe=a("strong"),_Ar=o("xlm"),uAr=o(" \u2014 "),wY=a("a"),bAr=o("TFXLMWithLMHeadModel"),vAr=o(" (XLM model)"),FAr=l(),PE=a("li"),DMe=a("strong"),TAr=o("xlm-roberta"),MAr=o(" \u2014 "),AY=a("a"),EAr=o("TFXLMRobertaForMaskedLM"),CAr=o(" (XLM-RoBERTa model)"),wAr=l(),F(BE.$$.fragment),hze=l(),Tc=a("h2"),IE=a("a"),GMe=a("span"),F(px.$$.fragment),AAr=l(),OMe=a("span"),LAr=o("TFAutoModelForSeq2SeqLM"),pze=l(),nr=a("div"),F(_x.$$.fragment),yAr=l(),Mc=a("p"),xAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=a("a"),$Ar=o("from_pretrained()"),kAr=o(" class method or the "),yY=a("a"),SAr=o("from_config()"),RAr=o(` class
method.`),PAr=l(),ux=a("p"),BAr=o("This class cannot be instantiated directly using "),VMe=a("code"),IAr=o("__init__()"),NAr=o(" (throws an error)."),qAr=l(),Nt=a("div"),F(bx.$$.fragment),jAr=l(),XMe=a("p"),DAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GAr=l(),Ec=a("p"),OAr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),VAr=o("not"),XAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),zAr=o("from_pretrained()"),QAr=o(" to load the model weights."),WAr=l(),F(NE.$$.fragment),HAr=l(),Rr=a("div"),F(vx.$$.fragment),UAr=l(),QMe=a("p"),JAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YAr=l(),fn=a("p"),KAr=o("The model class to instantiate is selected based on the "),WMe=a("code"),ZAr=o("model_type"),e6r=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),o6r=o("pretrained_model_name_or_path"),r6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(":"),n6r=l(),ye=a("ul"),qE=a("li"),JMe=a("strong"),s6r=o("bart"),l6r=o(" \u2014 "),$Y=a("a"),i6r=o("TFBartForConditionalGeneration"),d6r=o(" (BART model)"),c6r=l(),jE=a("li"),YMe=a("strong"),f6r=o("blenderbot"),m6r=o(" \u2014 "),kY=a("a"),g6r=o("TFBlenderbotForConditionalGeneration"),h6r=o(" (Blenderbot model)"),p6r=l(),DE=a("li"),KMe=a("strong"),_6r=o("blenderbot-small"),u6r=o(" \u2014 "),SY=a("a"),b6r=o("TFBlenderbotSmallForConditionalGeneration"),v6r=o(" (BlenderbotSmall model)"),F6r=l(),GE=a("li"),ZMe=a("strong"),T6r=o("encoder-decoder"),M6r=o(" \u2014 "),RY=a("a"),E6r=o("TFEncoderDecoderModel"),C6r=o(" (Encoder decoder model)"),w6r=l(),OE=a("li"),e4e=a("strong"),A6r=o("led"),L6r=o(" \u2014 "),PY=a("a"),y6r=o("TFLEDForConditionalGeneration"),x6r=o(" (LED model)"),$6r=l(),VE=a("li"),o4e=a("strong"),k6r=o("marian"),S6r=o(" \u2014 "),BY=a("a"),R6r=o("TFMarianMTModel"),P6r=o(" (Marian model)"),B6r=l(),XE=a("li"),r4e=a("strong"),I6r=o("mbart"),N6r=o(" \u2014 "),IY=a("a"),q6r=o("TFMBartForConditionalGeneration"),j6r=o(" (mBART model)"),D6r=l(),zE=a("li"),t4e=a("strong"),G6r=o("mt5"),O6r=o(" \u2014 "),NY=a("a"),V6r=o("TFMT5ForConditionalGeneration"),X6r=o(" (MT5 model)"),z6r=l(),QE=a("li"),a4e=a("strong"),Q6r=o("pegasus"),W6r=o(" \u2014 "),qY=a("a"),H6r=o("TFPegasusForConditionalGeneration"),U6r=o(" (Pegasus model)"),J6r=l(),WE=a("li"),n4e=a("strong"),Y6r=o("t5"),K6r=o(" \u2014 "),jY=a("a"),Z6r=o("TFT5ForConditionalGeneration"),eLr=o(" (T5 model)"),oLr=l(),F(HE.$$.fragment),_ze=l(),Cc=a("h2"),UE=a("a"),s4e=a("span"),F(Fx.$$.fragment),rLr=l(),l4e=a("span"),tLr=o("TFAutoModelForSequenceClassification"),uze=l(),sr=a("div"),F(Tx.$$.fragment),aLr=l(),wc=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),GY=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),Mx=a("p"),fLr=o("This class cannot be instantiated directly using "),i4e=a("code"),mLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),qt=a("div"),F(Ex.$$.fragment),pLr=l(),d4e=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uLr=l(),Ac=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),vLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),F(JE.$$.fragment),CLr=l(),Pr=a("div"),F(Cx.$$.fragment),wLr=l(),f4e=a("p"),ALr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LLr=l(),mn=a("p"),yLr=o("The model class to instantiate is selected based on the "),m4e=a("code"),xLr=o("model_type"),$Lr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),RLr=o("pretrained_model_name_or_path"),PLr=o(":"),BLr=l(),te=a("ul"),YE=a("li"),p4e=a("strong"),ILr=o("albert"),NLr=o(" \u2014 "),VY=a("a"),qLr=o("TFAlbertForSequenceClassification"),jLr=o(" (ALBERT model)"),DLr=l(),KE=a("li"),_4e=a("strong"),GLr=o("bert"),OLr=o(" \u2014 "),XY=a("a"),VLr=o("TFBertForSequenceClassification"),XLr=o(" (BERT model)"),zLr=l(),ZE=a("li"),u4e=a("strong"),QLr=o("camembert"),WLr=o(" \u2014 "),zY=a("a"),HLr=o("TFCamembertForSequenceClassification"),ULr=o(" (CamemBERT model)"),JLr=l(),eC=a("li"),b4e=a("strong"),YLr=o("convbert"),KLr=o(" \u2014 "),QY=a("a"),ZLr=o("TFConvBertForSequenceClassification"),eyr=o(" (ConvBERT model)"),oyr=l(),oC=a("li"),v4e=a("strong"),ryr=o("ctrl"),tyr=o(" \u2014 "),WY=a("a"),ayr=o("TFCTRLForSequenceClassification"),nyr=o(" (CTRL model)"),syr=l(),rC=a("li"),F4e=a("strong"),lyr=o("deberta"),iyr=o(" \u2014 "),HY=a("a"),dyr=o("TFDebertaForSequenceClassification"),cyr=o(" (DeBERTa model)"),fyr=l(),tC=a("li"),T4e=a("strong"),myr=o("deberta-v2"),gyr=o(" \u2014 "),UY=a("a"),hyr=o("TFDebertaV2ForSequenceClassification"),pyr=o(" (DeBERTa-v2 model)"),_yr=l(),aC=a("li"),M4e=a("strong"),uyr=o("distilbert"),byr=o(" \u2014 "),JY=a("a"),vyr=o("TFDistilBertForSequenceClassification"),Fyr=o(" (DistilBERT model)"),Tyr=l(),nC=a("li"),E4e=a("strong"),Myr=o("electra"),Eyr=o(" \u2014 "),YY=a("a"),Cyr=o("TFElectraForSequenceClassification"),wyr=o(" (ELECTRA model)"),Ayr=l(),sC=a("li"),C4e=a("strong"),Lyr=o("flaubert"),yyr=o(" \u2014 "),KY=a("a"),xyr=o("TFFlaubertForSequenceClassification"),$yr=o(" (FlauBERT model)"),kyr=l(),lC=a("li"),w4e=a("strong"),Syr=o("funnel"),Ryr=o(" \u2014 "),ZY=a("a"),Pyr=o("TFFunnelForSequenceClassification"),Byr=o(" (Funnel Transformer model)"),Iyr=l(),iC=a("li"),A4e=a("strong"),Nyr=o("gpt2"),qyr=o(" \u2014 "),eK=a("a"),jyr=o("TFGPT2ForSequenceClassification"),Dyr=o(" (OpenAI GPT-2 model)"),Gyr=l(),dC=a("li"),L4e=a("strong"),Oyr=o("gptj"),Vyr=o(" \u2014 "),oK=a("a"),Xyr=o("TFGPTJForSequenceClassification"),zyr=o(" (GPT-J model)"),Qyr=l(),cC=a("li"),y4e=a("strong"),Wyr=o("layoutlm"),Hyr=o(" \u2014 "),rK=a("a"),Uyr=o("TFLayoutLMForSequenceClassification"),Jyr=o(" (LayoutLM model)"),Yyr=l(),fC=a("li"),x4e=a("strong"),Kyr=o("longformer"),Zyr=o(" \u2014 "),tK=a("a"),e9r=o("TFLongformerForSequenceClassification"),o9r=o(" (Longformer model)"),r9r=l(),mC=a("li"),$4e=a("strong"),t9r=o("mobilebert"),a9r=o(" \u2014 "),aK=a("a"),n9r=o("TFMobileBertForSequenceClassification"),s9r=o(" (MobileBERT model)"),l9r=l(),gC=a("li"),k4e=a("strong"),i9r=o("mpnet"),d9r=o(" \u2014 "),nK=a("a"),c9r=o("TFMPNetForSequenceClassification"),f9r=o(" (MPNet model)"),m9r=l(),hC=a("li"),S4e=a("strong"),g9r=o("openai-gpt"),h9r=o(" \u2014 "),sK=a("a"),p9r=o("TFOpenAIGPTForSequenceClassification"),_9r=o(" (OpenAI GPT model)"),u9r=l(),pC=a("li"),R4e=a("strong"),b9r=o("rembert"),v9r=o(" \u2014 "),lK=a("a"),F9r=o("TFRemBertForSequenceClassification"),T9r=o(" (RemBERT model)"),M9r=l(),_C=a("li"),P4e=a("strong"),E9r=o("roberta"),C9r=o(" \u2014 "),iK=a("a"),w9r=o("TFRobertaForSequenceClassification"),A9r=o(" (RoBERTa model)"),L9r=l(),uC=a("li"),B4e=a("strong"),y9r=o("roformer"),x9r=o(" \u2014 "),dK=a("a"),$9r=o("TFRoFormerForSequenceClassification"),k9r=o(" (RoFormer model)"),S9r=l(),bC=a("li"),I4e=a("strong"),R9r=o("tapas"),P9r=o(" \u2014 "),cK=a("a"),B9r=o("TFTapasForSequenceClassification"),I9r=o(" (TAPAS model)"),N9r=l(),vC=a("li"),N4e=a("strong"),q9r=o("transfo-xl"),j9r=o(" \u2014 "),fK=a("a"),D9r=o("TFTransfoXLForSequenceClassification"),G9r=o(" (Transformer-XL model)"),O9r=l(),FC=a("li"),q4e=a("strong"),V9r=o("xlm"),X9r=o(" \u2014 "),mK=a("a"),z9r=o("TFXLMForSequenceClassification"),Q9r=o(" (XLM model)"),W9r=l(),TC=a("li"),j4e=a("strong"),H9r=o("xlm-roberta"),U9r=o(" \u2014 "),gK=a("a"),J9r=o("TFXLMRobertaForSequenceClassification"),Y9r=o(" (XLM-RoBERTa model)"),K9r=l(),MC=a("li"),D4e=a("strong"),Z9r=o("xlnet"),exr=o(" \u2014 "),hK=a("a"),oxr=o("TFXLNetForSequenceClassification"),rxr=o(" (XLNet model)"),txr=l(),F(EC.$$.fragment),bze=l(),Lc=a("h2"),CC=a("a"),G4e=a("span"),F(wx.$$.fragment),axr=l(),O4e=a("span"),nxr=o("TFAutoModelForMultipleChoice"),vze=l(),lr=a("div"),F(Ax.$$.fragment),sxr=l(),yc=a("p"),lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=a("a"),ixr=o("from_pretrained()"),dxr=o(" class method or the "),_K=a("a"),cxr=o("from_config()"),fxr=o(` class
method.`),mxr=l(),Lx=a("p"),gxr=o("This class cannot be instantiated directly using "),V4e=a("code"),hxr=o("__init__()"),pxr=o(" (throws an error)."),_xr=l(),jt=a("div"),F(yx.$$.fragment),uxr=l(),X4e=a("p"),bxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vxr=l(),xc=a("p"),Fxr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),Txr=o("not"),Mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),Exr=o("from_pretrained()"),Cxr=o(" to load the model weights."),wxr=l(),F(wC.$$.fragment),Axr=l(),Br=a("div"),F(xx.$$.fragment),Lxr=l(),Q4e=a("p"),yxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xxr=l(),gn=a("p"),$xr=o("The model class to instantiate is selected based on the "),W4e=a("code"),kxr=o("model_type"),Sxr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),Bxr=o("pretrained_model_name_or_path"),Ixr=o(":"),Nxr=l(),_e=a("ul"),AC=a("li"),J4e=a("strong"),qxr=o("albert"),jxr=o(" \u2014 "),bK=a("a"),Dxr=o("TFAlbertForMultipleChoice"),Gxr=o(" (ALBERT model)"),Oxr=l(),LC=a("li"),Y4e=a("strong"),Vxr=o("bert"),Xxr=o(" \u2014 "),vK=a("a"),zxr=o("TFBertForMultipleChoice"),Qxr=o(" (BERT model)"),Wxr=l(),yC=a("li"),K4e=a("strong"),Hxr=o("camembert"),Uxr=o(" \u2014 "),FK=a("a"),Jxr=o("TFCamembertForMultipleChoice"),Yxr=o(" (CamemBERT model)"),Kxr=l(),xC=a("li"),Z4e=a("strong"),Zxr=o("convbert"),e$r=o(" \u2014 "),TK=a("a"),o$r=o("TFConvBertForMultipleChoice"),r$r=o(" (ConvBERT model)"),t$r=l(),$C=a("li"),eEe=a("strong"),a$r=o("distilbert"),n$r=o(" \u2014 "),MK=a("a"),s$r=o("TFDistilBertForMultipleChoice"),l$r=o(" (DistilBERT model)"),i$r=l(),kC=a("li"),oEe=a("strong"),d$r=o("electra"),c$r=o(" \u2014 "),EK=a("a"),f$r=o("TFElectraForMultipleChoice"),m$r=o(" (ELECTRA model)"),g$r=l(),SC=a("li"),rEe=a("strong"),h$r=o("flaubert"),p$r=o(" \u2014 "),CK=a("a"),_$r=o("TFFlaubertForMultipleChoice"),u$r=o(" (FlauBERT model)"),b$r=l(),RC=a("li"),tEe=a("strong"),v$r=o("funnel"),F$r=o(" \u2014 "),wK=a("a"),T$r=o("TFFunnelForMultipleChoice"),M$r=o(" (Funnel Transformer model)"),E$r=l(),PC=a("li"),aEe=a("strong"),C$r=o("longformer"),w$r=o(" \u2014 "),AK=a("a"),A$r=o("TFLongformerForMultipleChoice"),L$r=o(" (Longformer model)"),y$r=l(),BC=a("li"),nEe=a("strong"),x$r=o("mobilebert"),$$r=o(" \u2014 "),LK=a("a"),k$r=o("TFMobileBertForMultipleChoice"),S$r=o(" (MobileBERT model)"),R$r=l(),IC=a("li"),sEe=a("strong"),P$r=o("mpnet"),B$r=o(" \u2014 "),yK=a("a"),I$r=o("TFMPNetForMultipleChoice"),N$r=o(" (MPNet model)"),q$r=l(),NC=a("li"),lEe=a("strong"),j$r=o("rembert"),D$r=o(" \u2014 "),xK=a("a"),G$r=o("TFRemBertForMultipleChoice"),O$r=o(" (RemBERT model)"),V$r=l(),qC=a("li"),iEe=a("strong"),X$r=o("roberta"),z$r=o(" \u2014 "),$K=a("a"),Q$r=o("TFRobertaForMultipleChoice"),W$r=o(" (RoBERTa model)"),H$r=l(),jC=a("li"),dEe=a("strong"),U$r=o("roformer"),J$r=o(" \u2014 "),kK=a("a"),Y$r=o("TFRoFormerForMultipleChoice"),K$r=o(" (RoFormer model)"),Z$r=l(),DC=a("li"),cEe=a("strong"),ekr=o("xlm"),okr=o(" \u2014 "),SK=a("a"),rkr=o("TFXLMForMultipleChoice"),tkr=o(" (XLM model)"),akr=l(),GC=a("li"),fEe=a("strong"),nkr=o("xlm-roberta"),skr=o(" \u2014 "),RK=a("a"),lkr=o("TFXLMRobertaForMultipleChoice"),ikr=o(" (XLM-RoBERTa model)"),dkr=l(),OC=a("li"),mEe=a("strong"),ckr=o("xlnet"),fkr=o(" \u2014 "),PK=a("a"),mkr=o("TFXLNetForMultipleChoice"),gkr=o(" (XLNet model)"),hkr=l(),F(VC.$$.fragment),Fze=l(),$c=a("h2"),XC=a("a"),gEe=a("span"),F($x.$$.fragment),pkr=l(),hEe=a("span"),_kr=o("TFAutoModelForNextSentencePrediction"),Tze=l(),ir=a("div"),F(kx.$$.fragment),ukr=l(),kc=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),IK=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),Sx=a("p"),Ckr=o("This class cannot be instantiated directly using "),pEe=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),Lkr=l(),Dt=a("div"),F(Rx.$$.fragment),ykr=l(),_Ee=a("p"),xkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$kr=l(),Sc=a("p"),kkr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),Skr=o("not"),Rkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),Pkr=o("from_pretrained()"),Bkr=o(" to load the model weights."),Ikr=l(),F(zC.$$.fragment),Nkr=l(),Ir=a("div"),F(Px.$$.fragment),qkr=l(),bEe=a("p"),jkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dkr=l(),hn=a("p"),Gkr=o("The model class to instantiate is selected based on the "),vEe=a("code"),Okr=o("model_type"),Vkr=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),Xkr=o("pretrained_model_name_or_path"),zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Hkr=l(),Bx=a("ul"),QC=a("li"),MEe=a("strong"),Ukr=o("bert"),Jkr=o(" \u2014 "),qK=a("a"),Ykr=o("TFBertForNextSentencePrediction"),Kkr=o(" (BERT model)"),Zkr=l(),WC=a("li"),EEe=a("strong"),eSr=o("mobilebert"),oSr=o(" \u2014 "),jK=a("a"),rSr=o("TFMobileBertForNextSentencePrediction"),tSr=o(" (MobileBERT model)"),aSr=l(),F(HC.$$.fragment),Mze=l(),Rc=a("h2"),UC=a("a"),CEe=a("span"),F(Ix.$$.fragment),nSr=l(),wEe=a("span"),sSr=o("TFAutoModelForTableQuestionAnswering"),Eze=l(),dr=a("div"),F(Nx.$$.fragment),lSr=l(),Pc=a("p"),iSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DK=a("a"),dSr=o("from_pretrained()"),cSr=o(" class method or the "),GK=a("a"),fSr=o("from_config()"),mSr=o(` class
method.`),gSr=l(),qx=a("p"),hSr=o("This class cannot be instantiated directly using "),AEe=a("code"),pSr=o("__init__()"),_Sr=o(" (throws an error)."),uSr=l(),Gt=a("div"),F(jx.$$.fragment),bSr=l(),LEe=a("p"),vSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FSr=l(),Bc=a("p"),TSr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),MSr=o("not"),ESr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),CSr=o("from_pretrained()"),wSr=o(" to load the model weights."),ASr=l(),F(JC.$$.fragment),LSr=l(),Nr=a("div"),F(Dx.$$.fragment),ySr=l(),xEe=a("p"),xSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Sr=l(),pn=a("p"),kSr=o("The model class to instantiate is selected based on the "),$Ee=a("code"),SSr=o("model_type"),RSr=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),ISr=o("pretrained_model_name_or_path"),NSr=o(":"),qSr=l(),REe=a("ul"),YC=a("li"),PEe=a("strong"),jSr=o("tapas"),DSr=o(" \u2014 "),VK=a("a"),GSr=o("TFTapasForQuestionAnswering"),OSr=o(" (TAPAS model)"),VSr=l(),F(KC.$$.fragment),Cze=l(),Ic=a("h2"),ZC=a("a"),BEe=a("span"),F(Gx.$$.fragment),XSr=l(),IEe=a("span"),zSr=o("TFAutoModelForTokenClassification"),wze=l(),cr=a("div"),F(Ox.$$.fragment),QSr=l(),Nc=a("p"),WSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XK=a("a"),HSr=o("from_pretrained()"),USr=o(" class method or the "),zK=a("a"),JSr=o("from_config()"),YSr=o(` class
method.`),KSr=l(),Vx=a("p"),ZSr=o("This class cannot be instantiated directly using "),NEe=a("code"),eRr=o("__init__()"),oRr=o(" (throws an error)."),rRr=l(),Ot=a("div"),F(Xx.$$.fragment),tRr=l(),qEe=a("p"),aRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nRr=l(),qc=a("p"),sRr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),lRr=o("not"),iRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),dRr=o("from_pretrained()"),cRr=o(" to load the model weights."),fRr=l(),F(e3.$$.fragment),mRr=l(),qr=a("div"),F(zx.$$.fragment),gRr=l(),DEe=a("p"),hRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pRr=l(),_n=a("p"),_Rr=o("The model class to instantiate is selected based on the "),GEe=a("code"),uRr=o("model_type"),bRr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),vRr=o("pretrained_model_name_or_path"),FRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),TRr=o("pretrained_model_name_or_path"),MRr=o(":"),ERr=l(),de=a("ul"),o3=a("li"),XEe=a("strong"),CRr=o("albert"),wRr=o(" \u2014 "),WK=a("a"),ARr=o("TFAlbertForTokenClassification"),LRr=o(" (ALBERT model)"),yRr=l(),r3=a("li"),zEe=a("strong"),xRr=o("bert"),$Rr=o(" \u2014 "),HK=a("a"),kRr=o("TFBertForTokenClassification"),SRr=o(" (BERT model)"),RRr=l(),t3=a("li"),QEe=a("strong"),PRr=o("camembert"),BRr=o(" \u2014 "),UK=a("a"),IRr=o("TFCamembertForTokenClassification"),NRr=o(" (CamemBERT model)"),qRr=l(),a3=a("li"),WEe=a("strong"),jRr=o("convbert"),DRr=o(" \u2014 "),JK=a("a"),GRr=o("TFConvBertForTokenClassification"),ORr=o(" (ConvBERT model)"),VRr=l(),n3=a("li"),HEe=a("strong"),XRr=o("deberta"),zRr=o(" \u2014 "),YK=a("a"),QRr=o("TFDebertaForTokenClassification"),WRr=o(" (DeBERTa model)"),HRr=l(),s3=a("li"),UEe=a("strong"),URr=o("deberta-v2"),JRr=o(" \u2014 "),KK=a("a"),YRr=o("TFDebertaV2ForTokenClassification"),KRr=o(" (DeBERTa-v2 model)"),ZRr=l(),l3=a("li"),JEe=a("strong"),ePr=o("distilbert"),oPr=o(" \u2014 "),ZK=a("a"),rPr=o("TFDistilBertForTokenClassification"),tPr=o(" (DistilBERT model)"),aPr=l(),i3=a("li"),YEe=a("strong"),nPr=o("electra"),sPr=o(" \u2014 "),eZ=a("a"),lPr=o("TFElectraForTokenClassification"),iPr=o(" (ELECTRA model)"),dPr=l(),d3=a("li"),KEe=a("strong"),cPr=o("flaubert"),fPr=o(" \u2014 "),oZ=a("a"),mPr=o("TFFlaubertForTokenClassification"),gPr=o(" (FlauBERT model)"),hPr=l(),c3=a("li"),ZEe=a("strong"),pPr=o("funnel"),_Pr=o(" \u2014 "),rZ=a("a"),uPr=o("TFFunnelForTokenClassification"),bPr=o(" (Funnel Transformer model)"),vPr=l(),f3=a("li"),eCe=a("strong"),FPr=o("layoutlm"),TPr=o(" \u2014 "),tZ=a("a"),MPr=o("TFLayoutLMForTokenClassification"),EPr=o(" (LayoutLM model)"),CPr=l(),m3=a("li"),oCe=a("strong"),wPr=o("longformer"),APr=o(" \u2014 "),aZ=a("a"),LPr=o("TFLongformerForTokenClassification"),yPr=o(" (Longformer model)"),xPr=l(),g3=a("li"),rCe=a("strong"),$Pr=o("mobilebert"),kPr=o(" \u2014 "),nZ=a("a"),SPr=o("TFMobileBertForTokenClassification"),RPr=o(" (MobileBERT model)"),PPr=l(),h3=a("li"),tCe=a("strong"),BPr=o("mpnet"),IPr=o(" \u2014 "),sZ=a("a"),NPr=o("TFMPNetForTokenClassification"),qPr=o(" (MPNet model)"),jPr=l(),p3=a("li"),aCe=a("strong"),DPr=o("rembert"),GPr=o(" \u2014 "),lZ=a("a"),OPr=o("TFRemBertForTokenClassification"),VPr=o(" (RemBERT model)"),XPr=l(),_3=a("li"),nCe=a("strong"),zPr=o("roberta"),QPr=o(" \u2014 "),iZ=a("a"),WPr=o("TFRobertaForTokenClassification"),HPr=o(" (RoBERTa model)"),UPr=l(),u3=a("li"),sCe=a("strong"),JPr=o("roformer"),YPr=o(" \u2014 "),dZ=a("a"),KPr=o("TFRoFormerForTokenClassification"),ZPr=o(" (RoFormer model)"),eBr=l(),b3=a("li"),lCe=a("strong"),oBr=o("xlm"),rBr=o(" \u2014 "),cZ=a("a"),tBr=o("TFXLMForTokenClassification"),aBr=o(" (XLM model)"),nBr=l(),v3=a("li"),iCe=a("strong"),sBr=o("xlm-roberta"),lBr=o(" \u2014 "),fZ=a("a"),iBr=o("TFXLMRobertaForTokenClassification"),dBr=o(" (XLM-RoBERTa model)"),cBr=l(),F3=a("li"),dCe=a("strong"),fBr=o("xlnet"),mBr=o(" \u2014 "),mZ=a("a"),gBr=o("TFXLNetForTokenClassification"),hBr=o(" (XLNet model)"),pBr=l(),F(T3.$$.fragment),Aze=l(),jc=a("h2"),M3=a("a"),cCe=a("span"),F(Qx.$$.fragment),_Br=l(),fCe=a("span"),uBr=o("TFAutoModelForQuestionAnswering"),Lze=l(),fr=a("div"),F(Wx.$$.fragment),bBr=l(),Dc=a("p"),vBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gZ=a("a"),FBr=o("from_pretrained()"),TBr=o(" class method or the "),hZ=a("a"),MBr=o("from_config()"),EBr=o(` class
method.`),CBr=l(),Hx=a("p"),wBr=o("This class cannot be instantiated directly using "),mCe=a("code"),ABr=o("__init__()"),LBr=o(" (throws an error)."),yBr=l(),Vt=a("div"),F(Ux.$$.fragment),xBr=l(),gCe=a("p"),$Br=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kBr=l(),Gc=a("p"),SBr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),RBr=o("not"),PBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),BBr=o("from_pretrained()"),IBr=o(" to load the model weights."),NBr=l(),F(E3.$$.fragment),qBr=l(),jr=a("div"),F(Jx.$$.fragment),jBr=l(),pCe=a("p"),DBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GBr=l(),un=a("p"),OBr=o("The model class to instantiate is selected based on the "),_Ce=a("code"),VBr=o("model_type"),XBr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),zBr=o("pretrained_model_name_or_path"),QBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),WBr=o("pretrained_model_name_or_path"),HBr=o(":"),UBr=l(),ce=a("ul"),C3=a("li"),vCe=a("strong"),JBr=o("albert"),YBr=o(" \u2014 "),_Z=a("a"),KBr=o("TFAlbertForQuestionAnswering"),ZBr=o(" (ALBERT model)"),eIr=l(),w3=a("li"),FCe=a("strong"),oIr=o("bert"),rIr=o(" \u2014 "),uZ=a("a"),tIr=o("TFBertForQuestionAnswering"),aIr=o(" (BERT model)"),nIr=l(),A3=a("li"),TCe=a("strong"),sIr=o("camembert"),lIr=o(" \u2014 "),bZ=a("a"),iIr=o("TFCamembertForQuestionAnswering"),dIr=o(" (CamemBERT model)"),cIr=l(),L3=a("li"),MCe=a("strong"),fIr=o("convbert"),mIr=o(" \u2014 "),vZ=a("a"),gIr=o("TFConvBertForQuestionAnswering"),hIr=o(" (ConvBERT model)"),pIr=l(),y3=a("li"),ECe=a("strong"),_Ir=o("deberta"),uIr=o(" \u2014 "),FZ=a("a"),bIr=o("TFDebertaForQuestionAnswering"),vIr=o(" (DeBERTa model)"),FIr=l(),x3=a("li"),CCe=a("strong"),TIr=o("deberta-v2"),MIr=o(" \u2014 "),TZ=a("a"),EIr=o("TFDebertaV2ForQuestionAnswering"),CIr=o(" (DeBERTa-v2 model)"),wIr=l(),$3=a("li"),wCe=a("strong"),AIr=o("distilbert"),LIr=o(" \u2014 "),MZ=a("a"),yIr=o("TFDistilBertForQuestionAnswering"),xIr=o(" (DistilBERT model)"),$Ir=l(),k3=a("li"),ACe=a("strong"),kIr=o("electra"),SIr=o(" \u2014 "),EZ=a("a"),RIr=o("TFElectraForQuestionAnswering"),PIr=o(" (ELECTRA model)"),BIr=l(),S3=a("li"),LCe=a("strong"),IIr=o("flaubert"),NIr=o(" \u2014 "),CZ=a("a"),qIr=o("TFFlaubertForQuestionAnsweringSimple"),jIr=o(" (FlauBERT model)"),DIr=l(),R3=a("li"),yCe=a("strong"),GIr=o("funnel"),OIr=o(" \u2014 "),wZ=a("a"),VIr=o("TFFunnelForQuestionAnswering"),XIr=o(" (Funnel Transformer model)"),zIr=l(),P3=a("li"),xCe=a("strong"),QIr=o("gptj"),WIr=o(" \u2014 "),AZ=a("a"),HIr=o("TFGPTJForQuestionAnswering"),UIr=o(" (GPT-J model)"),JIr=l(),B3=a("li"),$Ce=a("strong"),YIr=o("longformer"),KIr=o(" \u2014 "),LZ=a("a"),ZIr=o("TFLongformerForQuestionAnswering"),eNr=o(" (Longformer model)"),oNr=l(),I3=a("li"),kCe=a("strong"),rNr=o("mobilebert"),tNr=o(" \u2014 "),yZ=a("a"),aNr=o("TFMobileBertForQuestionAnswering"),nNr=o(" (MobileBERT model)"),sNr=l(),N3=a("li"),SCe=a("strong"),lNr=o("mpnet"),iNr=o(" \u2014 "),xZ=a("a"),dNr=o("TFMPNetForQuestionAnswering"),cNr=o(" (MPNet model)"),fNr=l(),q3=a("li"),RCe=a("strong"),mNr=o("rembert"),gNr=o(" \u2014 "),$Z=a("a"),hNr=o("TFRemBertForQuestionAnswering"),pNr=o(" (RemBERT model)"),_Nr=l(),j3=a("li"),PCe=a("strong"),uNr=o("roberta"),bNr=o(" \u2014 "),kZ=a("a"),vNr=o("TFRobertaForQuestionAnswering"),FNr=o(" (RoBERTa model)"),TNr=l(),D3=a("li"),BCe=a("strong"),MNr=o("roformer"),ENr=o(" \u2014 "),SZ=a("a"),CNr=o("TFRoFormerForQuestionAnswering"),wNr=o(" (RoFormer model)"),ANr=l(),G3=a("li"),ICe=a("strong"),LNr=o("xlm"),yNr=o(" \u2014 "),RZ=a("a"),xNr=o("TFXLMForQuestionAnsweringSimple"),$Nr=o(" (XLM model)"),kNr=l(),O3=a("li"),NCe=a("strong"),SNr=o("xlm-roberta"),RNr=o(" \u2014 "),PZ=a("a"),PNr=o("TFXLMRobertaForQuestionAnswering"),BNr=o(" (XLM-RoBERTa model)"),INr=l(),V3=a("li"),qCe=a("strong"),NNr=o("xlnet"),qNr=o(" \u2014 "),BZ=a("a"),jNr=o("TFXLNetForQuestionAnsweringSimple"),DNr=o(" (XLNet model)"),GNr=l(),F(X3.$$.fragment),yze=l(),Oc=a("h2"),z3=a("a"),jCe=a("span"),F(Yx.$$.fragment),ONr=l(),DCe=a("span"),VNr=o("TFAutoModelForVision2Seq"),xze=l(),mr=a("div"),F(Kx.$$.fragment),XNr=l(),Vc=a("p"),zNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IZ=a("a"),QNr=o("from_pretrained()"),WNr=o(" class method or the "),NZ=a("a"),HNr=o("from_config()"),UNr=o(` class
method.`),JNr=l(),Zx=a("p"),YNr=o("This class cannot be instantiated directly using "),GCe=a("code"),KNr=o("__init__()"),ZNr=o(" (throws an error)."),eqr=l(),Xt=a("div"),F(e$.$$.fragment),oqr=l(),OCe=a("p"),rqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tqr=l(),Xc=a("p"),aqr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),nqr=o("not"),sqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),lqr=o("from_pretrained()"),iqr=o(" to load the model weights."),dqr=l(),F(Q3.$$.fragment),cqr=l(),Dr=a("div"),F(o$.$$.fragment),fqr=l(),XCe=a("p"),mqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gqr=l(),bn=a("p"),hqr=o("The model class to instantiate is selected based on the "),zCe=a("code"),pqr=o("model_type"),_qr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),uqr=o("pretrained_model_name_or_path"),bqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),vqr=o("pretrained_model_name_or_path"),Fqr=o(":"),Tqr=l(),HCe=a("ul"),W3=a("li"),UCe=a("strong"),Mqr=o("vision-encoder-decoder"),Eqr=o(" \u2014 "),jZ=a("a"),Cqr=o("TFVisionEncoderDecoderModel"),wqr=o(" (Vision Encoder decoder model)"),Aqr=l(),F(H3.$$.fragment),$ze=l(),zc=a("h2"),U3=a("a"),JCe=a("span"),F(r$.$$.fragment),Lqr=l(),YCe=a("span"),yqr=o("TFAutoModelForSpeechSeq2Seq"),kze=l(),gr=a("div"),F(t$.$$.fragment),xqr=l(),Qc=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DZ=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),GZ=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),a$=a("p"),Iqr=o("This class cannot be instantiated directly using "),KCe=a("code"),Nqr=o("__init__()"),qqr=o(" (throws an error)."),jqr=l(),zt=a("div"),F(n$.$$.fragment),Dqr=l(),ZCe=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oqr=l(),Wc=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),e3e=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" to load the model weights."),Hqr=l(),F(J3.$$.fragment),Uqr=l(),Gr=a("div"),F(s$.$$.fragment),Jqr=l(),o3e=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kqr=l(),vn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),r3e=a("code"),ejr=o("model_type"),ojr=o(` property of the config object (either
passed as an argument or loaded from `),t3e=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(":"),sjr=l(),n3e=a("ul"),Y3=a("li"),s3e=a("strong"),ljr=o("speech_to_text"),ijr=o(" \u2014 "),VZ=a("a"),djr=o("TFSpeech2TextForConditionalGeneration"),cjr=o(" (Speech2Text model)"),fjr=l(),F(K3.$$.fragment),Sze=l(),Hc=a("h2"),Z3=a("a"),l3e=a("span"),F(l$.$$.fragment),mjr=l(),i3e=a("span"),gjr=o("FlaxAutoModel"),Rze=l(),hr=a("div"),F(i$.$$.fragment),hjr=l(),Uc=a("p"),pjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XZ=a("a"),_jr=o("from_pretrained()"),ujr=o(" class method or the "),zZ=a("a"),bjr=o("from_config()"),vjr=o(` class
method.`),Fjr=l(),d$=a("p"),Tjr=o("This class cannot be instantiated directly using "),d3e=a("code"),Mjr=o("__init__()"),Ejr=o(" (throws an error)."),Cjr=l(),Qt=a("div"),F(c$.$$.fragment),wjr=l(),c3e=a("p"),Ajr=o("Instantiates one of the base model classes of the library from a configuration."),Ljr=l(),Jc=a("p"),yjr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),xjr=o("not"),$jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),kjr=o("from_pretrained()"),Sjr=o(" to load the model weights."),Rjr=l(),F(e5.$$.fragment),Pjr=l(),Or=a("div"),F(f$.$$.fragment),Bjr=l(),m3e=a("p"),Ijr=o("Instantiate one of the base model classes of the library from a pretrained model."),Njr=l(),Fn=a("p"),qjr=o("The model class to instantiate is selected based on the "),g3e=a("code"),jjr=o("model_type"),Djr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(":"),zjr=l(),oe=a("ul"),o5=a("li"),_3e=a("strong"),Qjr=o("albert"),Wjr=o(" \u2014 "),WZ=a("a"),Hjr=o("FlaxAlbertModel"),Ujr=o(" (ALBERT model)"),Jjr=l(),r5=a("li"),u3e=a("strong"),Yjr=o("bart"),Kjr=o(" \u2014 "),HZ=a("a"),Zjr=o("FlaxBartModel"),eDr=o(" (BART model)"),oDr=l(),t5=a("li"),b3e=a("strong"),rDr=o("beit"),tDr=o(" \u2014 "),UZ=a("a"),aDr=o("FlaxBeitModel"),nDr=o(" (BEiT model)"),sDr=l(),a5=a("li"),v3e=a("strong"),lDr=o("bert"),iDr=o(" \u2014 "),JZ=a("a"),dDr=o("FlaxBertModel"),cDr=o(" (BERT model)"),fDr=l(),n5=a("li"),F3e=a("strong"),mDr=o("big_bird"),gDr=o(" \u2014 "),YZ=a("a"),hDr=o("FlaxBigBirdModel"),pDr=o(" (BigBird model)"),_Dr=l(),s5=a("li"),T3e=a("strong"),uDr=o("blenderbot"),bDr=o(" \u2014 "),KZ=a("a"),vDr=o("FlaxBlenderbotModel"),FDr=o(" (Blenderbot model)"),TDr=l(),l5=a("li"),M3e=a("strong"),MDr=o("blenderbot-small"),EDr=o(" \u2014 "),ZZ=a("a"),CDr=o("FlaxBlenderbotSmallModel"),wDr=o(" (BlenderbotSmall model)"),ADr=l(),i5=a("li"),E3e=a("strong"),LDr=o("clip"),yDr=o(" \u2014 "),eee=a("a"),xDr=o("FlaxCLIPModel"),$Dr=o(" (CLIP model)"),kDr=l(),d5=a("li"),C3e=a("strong"),SDr=o("distilbert"),RDr=o(" \u2014 "),oee=a("a"),PDr=o("FlaxDistilBertModel"),BDr=o(" (DistilBERT model)"),IDr=l(),c5=a("li"),w3e=a("strong"),NDr=o("electra"),qDr=o(" \u2014 "),ree=a("a"),jDr=o("FlaxElectraModel"),DDr=o(" (ELECTRA model)"),GDr=l(),f5=a("li"),A3e=a("strong"),ODr=o("gpt2"),VDr=o(" \u2014 "),tee=a("a"),XDr=o("FlaxGPT2Model"),zDr=o(" (OpenAI GPT-2 model)"),QDr=l(),m5=a("li"),L3e=a("strong"),WDr=o("gpt_neo"),HDr=o(" \u2014 "),aee=a("a"),UDr=o("FlaxGPTNeoModel"),JDr=o(" (GPT Neo model)"),YDr=l(),g5=a("li"),y3e=a("strong"),KDr=o("gptj"),ZDr=o(" \u2014 "),nee=a("a"),eGr=o("FlaxGPTJModel"),oGr=o(" (GPT-J model)"),rGr=l(),h5=a("li"),x3e=a("strong"),tGr=o("longt5"),aGr=o(" \u2014 "),see=a("a"),nGr=o("FlaxLongT5Model"),sGr=o(" (LongT5 model)"),lGr=l(),p5=a("li"),$3e=a("strong"),iGr=o("marian"),dGr=o(" \u2014 "),lee=a("a"),cGr=o("FlaxMarianModel"),fGr=o(" (Marian model)"),mGr=l(),_5=a("li"),k3e=a("strong"),gGr=o("mbart"),hGr=o(" \u2014 "),iee=a("a"),pGr=o("FlaxMBartModel"),_Gr=o(" (mBART model)"),uGr=l(),u5=a("li"),S3e=a("strong"),bGr=o("mt5"),vGr=o(" \u2014 "),dee=a("a"),FGr=o("FlaxMT5Model"),TGr=o(" (MT5 model)"),MGr=l(),b5=a("li"),R3e=a("strong"),EGr=o("opt"),CGr=o(" \u2014 "),cee=a("a"),wGr=o("FlaxOPTModel"),AGr=o(" (OPT model)"),LGr=l(),v5=a("li"),P3e=a("strong"),yGr=o("pegasus"),xGr=o(" \u2014 "),fee=a("a"),$Gr=o("FlaxPegasusModel"),kGr=o(" (Pegasus model)"),SGr=l(),F5=a("li"),B3e=a("strong"),RGr=o("roberta"),PGr=o(" \u2014 "),mee=a("a"),BGr=o("FlaxRobertaModel"),IGr=o(" (RoBERTa model)"),NGr=l(),T5=a("li"),I3e=a("strong"),qGr=o("roformer"),jGr=o(" \u2014 "),gee=a("a"),DGr=o("FlaxRoFormerModel"),GGr=o(" (RoFormer model)"),OGr=l(),M5=a("li"),N3e=a("strong"),VGr=o("t5"),XGr=o(" \u2014 "),hee=a("a"),zGr=o("FlaxT5Model"),QGr=o(" (T5 model)"),WGr=l(),E5=a("li"),q3e=a("strong"),HGr=o("vision-text-dual-encoder"),UGr=o(" \u2014 "),pee=a("a"),JGr=o("FlaxVisionTextDualEncoderModel"),YGr=o(" (VisionTextDualEncoder model)"),KGr=l(),C5=a("li"),j3e=a("strong"),ZGr=o("vit"),eOr=o(" \u2014 "),_ee=a("a"),oOr=o("FlaxViTModel"),rOr=o(" (ViT model)"),tOr=l(),w5=a("li"),D3e=a("strong"),aOr=o("wav2vec2"),nOr=o(" \u2014 "),uee=a("a"),sOr=o("FlaxWav2Vec2Model"),lOr=o(" (Wav2Vec2 model)"),iOr=l(),A5=a("li"),G3e=a("strong"),dOr=o("xglm"),cOr=o(" \u2014 "),bee=a("a"),fOr=o("FlaxXGLMModel"),mOr=o(" (XGLM model)"),gOr=l(),L5=a("li"),O3e=a("strong"),hOr=o("xlm-roberta"),pOr=o(" \u2014 "),vee=a("a"),_Or=o("FlaxXLMRobertaModel"),uOr=o(" (XLM-RoBERTa model)"),bOr=l(),F(y5.$$.fragment),Pze=l(),Yc=a("h2"),x5=a("a"),V3e=a("span"),F(m$.$$.fragment),vOr=l(),X3e=a("span"),FOr=o("FlaxAutoModelForCausalLM"),Bze=l(),pr=a("div"),F(g$.$$.fragment),TOr=l(),Kc=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fee=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),Tee=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),LOr=l(),h$=a("p"),yOr=o("This class cannot be instantiated directly using "),z3e=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Wt=a("div"),F(p$.$$.fragment),SOr=l(),Q3e=a("p"),ROr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),POr=l(),Zc=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F($5.$$.fragment),GOr=l(),Vr=a("div"),F(_$.$$.fragment),OOr=l(),H3e=a("p"),VOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XOr=l(),Tn=a("p"),zOr=o("The model class to instantiate is selected based on the "),U3e=a("code"),QOr=o("model_type"),WOr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),xe=a("ul"),k5=a("li"),K3e=a("strong"),ZOr=o("bart"),eVr=o(" \u2014 "),Eee=a("a"),oVr=o("FlaxBartForCausalLM"),rVr=o(" (BART model)"),tVr=l(),S5=a("li"),Z3e=a("strong"),aVr=o("bert"),nVr=o(" \u2014 "),Cee=a("a"),sVr=o("FlaxBertForCausalLM"),lVr=o(" (BERT model)"),iVr=l(),R5=a("li"),e5e=a("strong"),dVr=o("big_bird"),cVr=o(" \u2014 "),wee=a("a"),fVr=o("FlaxBigBirdForCausalLM"),mVr=o(" (BigBird model)"),gVr=l(),P5=a("li"),o5e=a("strong"),hVr=o("electra"),pVr=o(" \u2014 "),Aee=a("a"),_Vr=o("FlaxElectraForCausalLM"),uVr=o(" (ELECTRA model)"),bVr=l(),B5=a("li"),r5e=a("strong"),vVr=o("gpt2"),FVr=o(" \u2014 "),Lee=a("a"),TVr=o("FlaxGPT2LMHeadModel"),MVr=o(" (OpenAI GPT-2 model)"),EVr=l(),I5=a("li"),t5e=a("strong"),CVr=o("gpt_neo"),wVr=o(" \u2014 "),yee=a("a"),AVr=o("FlaxGPTNeoForCausalLM"),LVr=o(" (GPT Neo model)"),yVr=l(),N5=a("li"),a5e=a("strong"),xVr=o("gptj"),$Vr=o(" \u2014 "),xee=a("a"),kVr=o("FlaxGPTJForCausalLM"),SVr=o(" (GPT-J model)"),RVr=l(),q5=a("li"),n5e=a("strong"),PVr=o("opt"),BVr=o(" \u2014 "),$ee=a("a"),IVr=o("FlaxOPTForCausalLM"),NVr=o(" (OPT model)"),qVr=l(),j5=a("li"),s5e=a("strong"),jVr=o("roberta"),DVr=o(" \u2014 "),kee=a("a"),GVr=o("FlaxRobertaForCausalLM"),OVr=o(" (RoBERTa model)"),VVr=l(),D5=a("li"),l5e=a("strong"),XVr=o("xglm"),zVr=o(" \u2014 "),See=a("a"),QVr=o("FlaxXGLMForCausalLM"),WVr=o(" (XGLM model)"),HVr=l(),F(G5.$$.fragment),Ize=l(),ef=a("h2"),O5=a("a"),i5e=a("span"),F(u$.$$.fragment),UVr=l(),d5e=a("span"),JVr=o("FlaxAutoModelForPreTraining"),Nze=l(),_r=a("div"),F(b$.$$.fragment),YVr=l(),of=a("p"),KVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ree=a("a"),ZVr=o("from_pretrained()"),eXr=o(" class method or the "),Pee=a("a"),oXr=o("from_config()"),rXr=o(` class
method.`),tXr=l(),v$=a("p"),aXr=o("This class cannot be instantiated directly using "),c5e=a("code"),nXr=o("__init__()"),sXr=o(" (throws an error)."),lXr=l(),Ht=a("div"),F(F$.$$.fragment),iXr=l(),f5e=a("p"),dXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cXr=l(),rf=a("p"),fXr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),mXr=o("not"),gXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),hXr=o("from_pretrained()"),pXr=o(" to load the model weights."),_Xr=l(),F(V5.$$.fragment),uXr=l(),Xr=a("div"),F(T$.$$.fragment),bXr=l(),g5e=a("p"),vXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FXr=l(),Mn=a("p"),TXr=o("The model class to instantiate is selected based on the "),h5e=a("code"),MXr=o("model_type"),EXr=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),AXr=o("pretrained_model_name_or_path"),LXr=o(":"),yXr=l(),Ee=a("ul"),X5=a("li"),u5e=a("strong"),xXr=o("albert"),$Xr=o(" \u2014 "),Iee=a("a"),kXr=o("FlaxAlbertForPreTraining"),SXr=o(" (ALBERT model)"),RXr=l(),z5=a("li"),b5e=a("strong"),PXr=o("bart"),BXr=o(" \u2014 "),Nee=a("a"),IXr=o("FlaxBartForConditionalGeneration"),NXr=o(" (BART model)"),qXr=l(),Q5=a("li"),v5e=a("strong"),jXr=o("bert"),DXr=o(" \u2014 "),qee=a("a"),GXr=o("FlaxBertForPreTraining"),OXr=o(" (BERT model)"),VXr=l(),W5=a("li"),F5e=a("strong"),XXr=o("big_bird"),zXr=o(" \u2014 "),jee=a("a"),QXr=o("FlaxBigBirdForPreTraining"),WXr=o(" (BigBird model)"),HXr=l(),H5=a("li"),T5e=a("strong"),UXr=o("electra"),JXr=o(" \u2014 "),Dee=a("a"),YXr=o("FlaxElectraForPreTraining"),KXr=o(" (ELECTRA model)"),ZXr=l(),U5=a("li"),M5e=a("strong"),ezr=o("longt5"),ozr=o(" \u2014 "),Gee=a("a"),rzr=o("FlaxLongT5ForConditionalGeneration"),tzr=o(" (LongT5 model)"),azr=l(),J5=a("li"),E5e=a("strong"),nzr=o("mbart"),szr=o(" \u2014 "),Oee=a("a"),lzr=o("FlaxMBartForConditionalGeneration"),izr=o(" (mBART model)"),dzr=l(),Y5=a("li"),C5e=a("strong"),czr=o("mt5"),fzr=o(" \u2014 "),Vee=a("a"),mzr=o("FlaxMT5ForConditionalGeneration"),gzr=o(" (MT5 model)"),hzr=l(),K5=a("li"),w5e=a("strong"),pzr=o("roberta"),_zr=o(" \u2014 "),Xee=a("a"),uzr=o("FlaxRobertaForMaskedLM"),bzr=o(" (RoBERTa model)"),vzr=l(),Z5=a("li"),A5e=a("strong"),Fzr=o("roformer"),Tzr=o(" \u2014 "),zee=a("a"),Mzr=o("FlaxRoFormerForMaskedLM"),Ezr=o(" (RoFormer model)"),Czr=l(),e0=a("li"),L5e=a("strong"),wzr=o("t5"),Azr=o(" \u2014 "),Qee=a("a"),Lzr=o("FlaxT5ForConditionalGeneration"),yzr=o(" (T5 model)"),xzr=l(),o0=a("li"),y5e=a("strong"),$zr=o("wav2vec2"),kzr=o(" \u2014 "),Wee=a("a"),Szr=o("FlaxWav2Vec2ForPreTraining"),Rzr=o(" (Wav2Vec2 model)"),Pzr=l(),r0=a("li"),x5e=a("strong"),Bzr=o("xlm-roberta"),Izr=o(" \u2014 "),Hee=a("a"),Nzr=o("FlaxXLMRobertaForMaskedLM"),qzr=o(" (XLM-RoBERTa model)"),jzr=l(),F(t0.$$.fragment),qze=l(),tf=a("h2"),a0=a("a"),$5e=a("span"),F(M$.$$.fragment),Dzr=l(),k5e=a("span"),Gzr=o("FlaxAutoModelForMaskedLM"),jze=l(),ur=a("div"),F(E$.$$.fragment),Ozr=l(),af=a("p"),Vzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uee=a("a"),Xzr=o("from_pretrained()"),zzr=o(" class method or the "),Jee=a("a"),Qzr=o("from_config()"),Wzr=o(` class
method.`),Hzr=l(),C$=a("p"),Uzr=o("This class cannot be instantiated directly using "),S5e=a("code"),Jzr=o("__init__()"),Yzr=o(" (throws an error)."),Kzr=l(),Ut=a("div"),F(w$.$$.fragment),Zzr=l(),R5e=a("p"),eQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oQr=l(),nf=a("p"),rQr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),tQr=o("not"),aQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),nQr=o("from_pretrained()"),sQr=o(" to load the model weights."),lQr=l(),F(n0.$$.fragment),iQr=l(),zr=a("div"),F(A$.$$.fragment),dQr=l(),B5e=a("p"),cQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fQr=l(),En=a("p"),mQr=o("The model class to instantiate is selected based on the "),I5e=a("code"),gQr=o("model_type"),hQr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),pQr=o("pretrained_model_name_or_path"),_Qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),uQr=o("pretrained_model_name_or_path"),bQr=o(":"),vQr=l(),$e=a("ul"),s0=a("li"),j5e=a("strong"),FQr=o("albert"),TQr=o(" \u2014 "),Kee=a("a"),MQr=o("FlaxAlbertForMaskedLM"),EQr=o(" (ALBERT model)"),CQr=l(),l0=a("li"),D5e=a("strong"),wQr=o("bart"),AQr=o(" \u2014 "),Zee=a("a"),LQr=o("FlaxBartForConditionalGeneration"),yQr=o(" (BART model)"),xQr=l(),i0=a("li"),G5e=a("strong"),$Qr=o("bert"),kQr=o(" \u2014 "),eoe=a("a"),SQr=o("FlaxBertForMaskedLM"),RQr=o(" (BERT model)"),PQr=l(),d0=a("li"),O5e=a("strong"),BQr=o("big_bird"),IQr=o(" \u2014 "),ooe=a("a"),NQr=o("FlaxBigBirdForMaskedLM"),qQr=o(" (BigBird model)"),jQr=l(),c0=a("li"),V5e=a("strong"),DQr=o("distilbert"),GQr=o(" \u2014 "),roe=a("a"),OQr=o("FlaxDistilBertForMaskedLM"),VQr=o(" (DistilBERT model)"),XQr=l(),f0=a("li"),X5e=a("strong"),zQr=o("electra"),QQr=o(" \u2014 "),toe=a("a"),WQr=o("FlaxElectraForMaskedLM"),HQr=o(" (ELECTRA model)"),UQr=l(),m0=a("li"),z5e=a("strong"),JQr=o("mbart"),YQr=o(" \u2014 "),aoe=a("a"),KQr=o("FlaxMBartForConditionalGeneration"),ZQr=o(" (mBART model)"),eWr=l(),g0=a("li"),Q5e=a("strong"),oWr=o("roberta"),rWr=o(" \u2014 "),noe=a("a"),tWr=o("FlaxRobertaForMaskedLM"),aWr=o(" (RoBERTa model)"),nWr=l(),h0=a("li"),W5e=a("strong"),sWr=o("roformer"),lWr=o(" \u2014 "),soe=a("a"),iWr=o("FlaxRoFormerForMaskedLM"),dWr=o(" (RoFormer model)"),cWr=l(),p0=a("li"),H5e=a("strong"),fWr=o("xlm-roberta"),mWr=o(" \u2014 "),loe=a("a"),gWr=o("FlaxXLMRobertaForMaskedLM"),hWr=o(" (XLM-RoBERTa model)"),pWr=l(),F(_0.$$.fragment),Dze=l(),sf=a("h2"),u0=a("a"),U5e=a("span"),F(L$.$$.fragment),_Wr=l(),J5e=a("span"),uWr=o("FlaxAutoModelForSeq2SeqLM"),Gze=l(),br=a("div"),F(y$.$$.fragment),bWr=l(),lf=a("p"),vWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ioe=a("a"),FWr=o("from_pretrained()"),TWr=o(" class method or the "),doe=a("a"),MWr=o("from_config()"),EWr=o(` class
method.`),CWr=l(),x$=a("p"),wWr=o("This class cannot be instantiated directly using "),Y5e=a("code"),AWr=o("__init__()"),LWr=o(" (throws an error)."),yWr=l(),Jt=a("div"),F($$.$$.fragment),xWr=l(),K5e=a("p"),$Wr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kWr=l(),df=a("p"),SWr=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),RWr=o("not"),PWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),BWr=o("from_pretrained()"),IWr=o(" to load the model weights."),NWr=l(),F(b0.$$.fragment),qWr=l(),Qr=a("div"),F(k$.$$.fragment),jWr=l(),e0e=a("p"),DWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GWr=l(),Cn=a("p"),OWr=o("The model class to instantiate is selected based on the "),o0e=a("code"),VWr=o("model_type"),XWr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),zWr=o("pretrained_model_name_or_path"),QWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),WWr=o("pretrained_model_name_or_path"),HWr=o(":"),UWr=l(),ke=a("ul"),v0=a("li"),a0e=a("strong"),JWr=o("bart"),YWr=o(" \u2014 "),foe=a("a"),KWr=o("FlaxBartForConditionalGeneration"),ZWr=o(" (BART model)"),eHr=l(),F0=a("li"),n0e=a("strong"),oHr=o("blenderbot"),rHr=o(" \u2014 "),moe=a("a"),tHr=o("FlaxBlenderbotForConditionalGeneration"),aHr=o(" (Blenderbot model)"),nHr=l(),T0=a("li"),s0e=a("strong"),sHr=o("blenderbot-small"),lHr=o(" \u2014 "),goe=a("a"),iHr=o("FlaxBlenderbotSmallForConditionalGeneration"),dHr=o(" (BlenderbotSmall model)"),cHr=l(),M0=a("li"),l0e=a("strong"),fHr=o("encoder-decoder"),mHr=o(" \u2014 "),hoe=a("a"),gHr=o("FlaxEncoderDecoderModel"),hHr=o(" (Encoder decoder model)"),pHr=l(),E0=a("li"),i0e=a("strong"),_Hr=o("longt5"),uHr=o(" \u2014 "),poe=a("a"),bHr=o("FlaxLongT5ForConditionalGeneration"),vHr=o(" (LongT5 model)"),FHr=l(),C0=a("li"),d0e=a("strong"),THr=o("marian"),MHr=o(" \u2014 "),_oe=a("a"),EHr=o("FlaxMarianMTModel"),CHr=o(" (Marian model)"),wHr=l(),w0=a("li"),c0e=a("strong"),AHr=o("mbart"),LHr=o(" \u2014 "),uoe=a("a"),yHr=o("FlaxMBartForConditionalGeneration"),xHr=o(" (mBART model)"),$Hr=l(),A0=a("li"),f0e=a("strong"),kHr=o("mt5"),SHr=o(" \u2014 "),boe=a("a"),RHr=o("FlaxMT5ForConditionalGeneration"),PHr=o(" (MT5 model)"),BHr=l(),L0=a("li"),m0e=a("strong"),IHr=o("pegasus"),NHr=o(" \u2014 "),voe=a("a"),qHr=o("FlaxPegasusForConditionalGeneration"),jHr=o(" (Pegasus model)"),DHr=l(),y0=a("li"),g0e=a("strong"),GHr=o("t5"),OHr=o(" \u2014 "),Foe=a("a"),VHr=o("FlaxT5ForConditionalGeneration"),XHr=o(" (T5 model)"),zHr=l(),F(x0.$$.fragment),Oze=l(),cf=a("h2"),$0=a("a"),h0e=a("span"),F(S$.$$.fragment),QHr=l(),p0e=a("span"),WHr=o("FlaxAutoModelForSequenceClassification"),Vze=l(),vr=a("div"),F(R$.$$.fragment),HHr=l(),ff=a("p"),UHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Toe=a("a"),JHr=o("from_pretrained()"),YHr=o(" class method or the "),Moe=a("a"),KHr=o("from_config()"),ZHr=o(` class
method.`),eUr=l(),P$=a("p"),oUr=o("This class cannot be instantiated directly using "),_0e=a("code"),rUr=o("__init__()"),tUr=o(" (throws an error)."),aUr=l(),Yt=a("div"),F(B$.$$.fragment),nUr=l(),u0e=a("p"),sUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lUr=l(),mf=a("p"),iUr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),dUr=o("not"),cUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),fUr=o("from_pretrained()"),mUr=o(" to load the model weights."),gUr=l(),F(k0.$$.fragment),hUr=l(),Wr=a("div"),F(I$.$$.fragment),pUr=l(),v0e=a("p"),_Ur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uUr=l(),wn=a("p"),bUr=o("The model class to instantiate is selected based on the "),F0e=a("code"),vUr=o("model_type"),FUr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),TUr=o("pretrained_model_name_or_path"),MUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),EUr=o("pretrained_model_name_or_path"),CUr=o(":"),wUr=l(),Se=a("ul"),S0=a("li"),E0e=a("strong"),AUr=o("albert"),LUr=o(" \u2014 "),Coe=a("a"),yUr=o("FlaxAlbertForSequenceClassification"),xUr=o(" (ALBERT model)"),$Ur=l(),R0=a("li"),C0e=a("strong"),kUr=o("bart"),SUr=o(" \u2014 "),woe=a("a"),RUr=o("FlaxBartForSequenceClassification"),PUr=o(" (BART model)"),BUr=l(),P0=a("li"),w0e=a("strong"),IUr=o("bert"),NUr=o(" \u2014 "),Aoe=a("a"),qUr=o("FlaxBertForSequenceClassification"),jUr=o(" (BERT model)"),DUr=l(),B0=a("li"),A0e=a("strong"),GUr=o("big_bird"),OUr=o(" \u2014 "),Loe=a("a"),VUr=o("FlaxBigBirdForSequenceClassification"),XUr=o(" (BigBird model)"),zUr=l(),I0=a("li"),L0e=a("strong"),QUr=o("distilbert"),WUr=o(" \u2014 "),yoe=a("a"),HUr=o("FlaxDistilBertForSequenceClassification"),UUr=o(" (DistilBERT model)"),JUr=l(),N0=a("li"),y0e=a("strong"),YUr=o("electra"),KUr=o(" \u2014 "),xoe=a("a"),ZUr=o("FlaxElectraForSequenceClassification"),eJr=o(" (ELECTRA model)"),oJr=l(),q0=a("li"),x0e=a("strong"),rJr=o("mbart"),tJr=o(" \u2014 "),$oe=a("a"),aJr=o("FlaxMBartForSequenceClassification"),nJr=o(" (mBART model)"),sJr=l(),j0=a("li"),$0e=a("strong"),lJr=o("roberta"),iJr=o(" \u2014 "),koe=a("a"),dJr=o("FlaxRobertaForSequenceClassification"),cJr=o(" (RoBERTa model)"),fJr=l(),D0=a("li"),k0e=a("strong"),mJr=o("roformer"),gJr=o(" \u2014 "),Soe=a("a"),hJr=o("FlaxRoFormerForSequenceClassification"),pJr=o(" (RoFormer model)"),_Jr=l(),G0=a("li"),S0e=a("strong"),uJr=o("xlm-roberta"),bJr=o(" \u2014 "),Roe=a("a"),vJr=o("FlaxXLMRobertaForSequenceClassification"),FJr=o(" (XLM-RoBERTa model)"),TJr=l(),F(O0.$$.fragment),Xze=l(),gf=a("h2"),V0=a("a"),R0e=a("span"),F(N$.$$.fragment),MJr=l(),P0e=a("span"),EJr=o("FlaxAutoModelForQuestionAnswering"),zze=l(),Fr=a("div"),F(q$.$$.fragment),CJr=l(),hf=a("p"),wJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Poe=a("a"),AJr=o("from_pretrained()"),LJr=o(" class method or the "),Boe=a("a"),yJr=o("from_config()"),xJr=o(` class
method.`),$Jr=l(),j$=a("p"),kJr=o("This class cannot be instantiated directly using "),B0e=a("code"),SJr=o("__init__()"),RJr=o(" (throws an error)."),PJr=l(),Kt=a("div"),F(D$.$$.fragment),BJr=l(),I0e=a("p"),IJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NJr=l(),pf=a("p"),qJr=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),jJr=o("not"),DJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=a("a"),GJr=o("from_pretrained()"),OJr=o(" to load the model weights."),VJr=l(),F(X0.$$.fragment),XJr=l(),Hr=a("div"),F(G$.$$.fragment),zJr=l(),q0e=a("p"),QJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WJr=l(),An=a("p"),HJr=o("The model class to instantiate is selected based on the "),j0e=a("code"),UJr=o("model_type"),JJr=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),YJr=o("pretrained_model_name_or_path"),KJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),ZJr=o("pretrained_model_name_or_path"),eYr=o(":"),oYr=l(),Re=a("ul"),z0=a("li"),O0e=a("strong"),rYr=o("albert"),tYr=o(" \u2014 "),Noe=a("a"),aYr=o("FlaxAlbertForQuestionAnswering"),nYr=o(" (ALBERT model)"),sYr=l(),Q0=a("li"),V0e=a("strong"),lYr=o("bart"),iYr=o(" \u2014 "),qoe=a("a"),dYr=o("FlaxBartForQuestionAnswering"),cYr=o(" (BART model)"),fYr=l(),W0=a("li"),X0e=a("strong"),mYr=o("bert"),gYr=o(" \u2014 "),joe=a("a"),hYr=o("FlaxBertForQuestionAnswering"),pYr=o(" (BERT model)"),_Yr=l(),H0=a("li"),z0e=a("strong"),uYr=o("big_bird"),bYr=o(" \u2014 "),Doe=a("a"),vYr=o("FlaxBigBirdForQuestionAnswering"),FYr=o(" (BigBird model)"),TYr=l(),U0=a("li"),Q0e=a("strong"),MYr=o("distilbert"),EYr=o(" \u2014 "),Goe=a("a"),CYr=o("FlaxDistilBertForQuestionAnswering"),wYr=o(" (DistilBERT model)"),AYr=l(),J0=a("li"),W0e=a("strong"),LYr=o("electra"),yYr=o(" \u2014 "),Ooe=a("a"),xYr=o("FlaxElectraForQuestionAnswering"),$Yr=o(" (ELECTRA model)"),kYr=l(),Y0=a("li"),H0e=a("strong"),SYr=o("mbart"),RYr=o(" \u2014 "),Voe=a("a"),PYr=o("FlaxMBartForQuestionAnswering"),BYr=o(" (mBART model)"),IYr=l(),K0=a("li"),U0e=a("strong"),NYr=o("roberta"),qYr=o(" \u2014 "),Xoe=a("a"),jYr=o("FlaxRobertaForQuestionAnswering"),DYr=o(" (RoBERTa model)"),GYr=l(),Z0=a("li"),J0e=a("strong"),OYr=o("roformer"),VYr=o(" \u2014 "),zoe=a("a"),XYr=o("FlaxRoFormerForQuestionAnswering"),zYr=o(" (RoFormer model)"),QYr=l(),ew=a("li"),Y0e=a("strong"),WYr=o("xlm-roberta"),HYr=o(" \u2014 "),Qoe=a("a"),UYr=o("FlaxXLMRobertaForQuestionAnswering"),JYr=o(" (XLM-RoBERTa model)"),YYr=l(),F(ow.$$.fragment),Qze=l(),_f=a("h2"),rw=a("a"),K0e=a("span"),F(O$.$$.fragment),KYr=l(),Z0e=a("span"),ZYr=o("FlaxAutoModelForTokenClassification"),Wze=l(),Tr=a("div"),F(V$.$$.fragment),eKr=l(),uf=a("p"),oKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Woe=a("a"),rKr=o("from_pretrained()"),tKr=o(" class method or the "),Hoe=a("a"),aKr=o("from_config()"),nKr=o(` class
method.`),sKr=l(),X$=a("p"),lKr=o("This class cannot be instantiated directly using "),ewe=a("code"),iKr=o("__init__()"),dKr=o(" (throws an error)."),cKr=l(),Zt=a("div"),F(z$.$$.fragment),fKr=l(),owe=a("p"),mKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gKr=l(),bf=a("p"),hKr=o(`Note:
Loading a model from its configuration file does `),rwe=a("strong"),pKr=o("not"),_Kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uoe=a("a"),uKr=o("from_pretrained()"),bKr=o(" to load the model weights."),vKr=l(),F(tw.$$.fragment),FKr=l(),Ur=a("div"),F(Q$.$$.fragment),TKr=l(),twe=a("p"),MKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EKr=l(),Ln=a("p"),CKr=o("The model class to instantiate is selected based on the "),awe=a("code"),wKr=o("model_type"),AKr=o(` property of the config object (either
passed as an argument or loaded from `),nwe=a("code"),LKr=o("pretrained_model_name_or_path"),yKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=a("code"),xKr=o("pretrained_model_name_or_path"),$Kr=o(":"),kKr=l(),Ve=a("ul"),aw=a("li"),lwe=a("strong"),SKr=o("albert"),RKr=o(" \u2014 "),Joe=a("a"),PKr=o("FlaxAlbertForTokenClassification"),BKr=o(" (ALBERT model)"),IKr=l(),nw=a("li"),iwe=a("strong"),NKr=o("bert"),qKr=o(" \u2014 "),Yoe=a("a"),jKr=o("FlaxBertForTokenClassification"),DKr=o(" (BERT model)"),GKr=l(),sw=a("li"),dwe=a("strong"),OKr=o("big_bird"),VKr=o(" \u2014 "),Koe=a("a"),XKr=o("FlaxBigBirdForTokenClassification"),zKr=o(" (BigBird model)"),QKr=l(),lw=a("li"),cwe=a("strong"),WKr=o("distilbert"),HKr=o(" \u2014 "),Zoe=a("a"),UKr=o("FlaxDistilBertForTokenClassification"),JKr=o(" (DistilBERT model)"),YKr=l(),iw=a("li"),fwe=a("strong"),KKr=o("electra"),ZKr=o(" \u2014 "),ere=a("a"),eZr=o("FlaxElectraForTokenClassification"),oZr=o(" (ELECTRA model)"),rZr=l(),dw=a("li"),mwe=a("strong"),tZr=o("roberta"),aZr=o(" \u2014 "),ore=a("a"),nZr=o("FlaxRobertaForTokenClassification"),sZr=o(" (RoBERTa model)"),lZr=l(),cw=a("li"),gwe=a("strong"),iZr=o("roformer"),dZr=o(" \u2014 "),rre=a("a"),cZr=o("FlaxRoFormerForTokenClassification"),fZr=o(" (RoFormer model)"),mZr=l(),fw=a("li"),hwe=a("strong"),gZr=o("xlm-roberta"),hZr=o(" \u2014 "),tre=a("a"),pZr=o("FlaxXLMRobertaForTokenClassification"),_Zr=o(" (XLM-RoBERTa model)"),uZr=l(),F(mw.$$.fragment),Hze=l(),vf=a("h2"),gw=a("a"),pwe=a("span"),F(W$.$$.fragment),bZr=l(),_we=a("span"),vZr=o("FlaxAutoModelForMultipleChoice"),Uze=l(),Mr=a("div"),F(H$.$$.fragment),FZr=l(),Ff=a("p"),TZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),are=a("a"),MZr=o("from_pretrained()"),EZr=o(" class method or the "),nre=a("a"),CZr=o("from_config()"),wZr=o(` class
method.`),AZr=l(),U$=a("p"),LZr=o("This class cannot be instantiated directly using "),uwe=a("code"),yZr=o("__init__()"),xZr=o(" (throws an error)."),$Zr=l(),ea=a("div"),F(J$.$$.fragment),kZr=l(),bwe=a("p"),SZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RZr=l(),Tf=a("p"),PZr=o(`Note:
Loading a model from its configuration file does `),vwe=a("strong"),BZr=o("not"),IZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),NZr=o("from_pretrained()"),qZr=o(" to load the model weights."),jZr=l(),F(hw.$$.fragment),DZr=l(),Jr=a("div"),F(Y$.$$.fragment),GZr=l(),Fwe=a("p"),OZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VZr=l(),yn=a("p"),XZr=o("The model class to instantiate is selected based on the "),Twe=a("code"),zZr=o("model_type"),QZr=o(` property of the config object (either
passed as an argument or loaded from `),Mwe=a("code"),WZr=o("pretrained_model_name_or_path"),HZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=a("code"),UZr=o("pretrained_model_name_or_path"),JZr=o(":"),YZr=l(),Xe=a("ul"),pw=a("li"),Cwe=a("strong"),KZr=o("albert"),ZZr=o(" \u2014 "),lre=a("a"),eet=o("FlaxAlbertForMultipleChoice"),oet=o(" (ALBERT model)"),ret=l(),_w=a("li"),wwe=a("strong"),tet=o("bert"),aet=o(" \u2014 "),ire=a("a"),net=o("FlaxBertForMultipleChoice"),set=o(" (BERT model)"),iet=l(),uw=a("li"),Awe=a("strong"),det=o("big_bird"),cet=o(" \u2014 "),dre=a("a"),fet=o("FlaxBigBirdForMultipleChoice"),met=o(" (BigBird model)"),get=l(),bw=a("li"),Lwe=a("strong"),het=o("distilbert"),pet=o(" \u2014 "),cre=a("a"),_et=o("FlaxDistilBertForMultipleChoice"),uet=o(" (DistilBERT model)"),bet=l(),vw=a("li"),ywe=a("strong"),vet=o("electra"),Fet=o(" \u2014 "),fre=a("a"),Tet=o("FlaxElectraForMultipleChoice"),Met=o(" (ELECTRA model)"),Eet=l(),Fw=a("li"),xwe=a("strong"),Cet=o("roberta"),wet=o(" \u2014 "),mre=a("a"),Aet=o("FlaxRobertaForMultipleChoice"),Let=o(" (RoBERTa model)"),yet=l(),Tw=a("li"),$we=a("strong"),xet=o("roformer"),$et=o(" \u2014 "),gre=a("a"),ket=o("FlaxRoFormerForMultipleChoice"),Set=o(" (RoFormer model)"),Ret=l(),Mw=a("li"),kwe=a("strong"),Pet=o("xlm-roberta"),Bet=o(" \u2014 "),hre=a("a"),Iet=o("FlaxXLMRobertaForMultipleChoice"),Net=o(" (XLM-RoBERTa model)"),qet=l(),F(Ew.$$.fragment),Jze=l(),Mf=a("h2"),Cw=a("a"),Swe=a("span"),F(K$.$$.fragment),jet=l(),Rwe=a("span"),Det=o("FlaxAutoModelForNextSentencePrediction"),Yze=l(),Er=a("div"),F(Z$.$$.fragment),Get=l(),Ef=a("p"),Oet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pre=a("a"),Vet=o("from_pretrained()"),Xet=o(" class method or the "),_re=a("a"),zet=o("from_config()"),Qet=o(` class
method.`),Wet=l(),ek=a("p"),Het=o("This class cannot be instantiated directly using "),Pwe=a("code"),Uet=o("__init__()"),Jet=o(" (throws an error)."),Yet=l(),oa=a("div"),F(ok.$$.fragment),Ket=l(),Bwe=a("p"),Zet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eot=l(),Cf=a("p"),oot=o(`Note:
Loading a model from its configuration file does `),Iwe=a("strong"),rot=o("not"),tot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),aot=o("from_pretrained()"),not=o(" to load the model weights."),sot=l(),F(ww.$$.fragment),lot=l(),Yr=a("div"),F(rk.$$.fragment),iot=l(),Nwe=a("p"),dot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cot=l(),xn=a("p"),fot=o("The model class to instantiate is selected based on the "),qwe=a("code"),mot=o("model_type"),got=o(` property of the config object (either
passed as an argument or loaded from `),jwe=a("code"),hot=o("pretrained_model_name_or_path"),pot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=a("code"),_ot=o("pretrained_model_name_or_path"),uot=o(":"),bot=l(),Gwe=a("ul"),Aw=a("li"),Owe=a("strong"),vot=o("bert"),Fot=o(" \u2014 "),bre=a("a"),Tot=o("FlaxBertForNextSentencePrediction"),Mot=o(" (BERT model)"),Eot=l(),F(Lw.$$.fragment),Kze=l(),wf=a("h2"),yw=a("a"),Vwe=a("span"),F(tk.$$.fragment),Cot=l(),Xwe=a("span"),wot=o("FlaxAutoModelForImageClassification"),Zze=l(),Cr=a("div"),F(ak.$$.fragment),Aot=l(),Af=a("p"),Lot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vre=a("a"),yot=o("from_pretrained()"),xot=o(" class method or the "),Fre=a("a"),$ot=o("from_config()"),kot=o(` class
method.`),Sot=l(),nk=a("p"),Rot=o("This class cannot be instantiated directly using "),zwe=a("code"),Pot=o("__init__()"),Bot=o(" (throws an error)."),Iot=l(),ra=a("div"),F(sk.$$.fragment),Not=l(),Qwe=a("p"),qot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jot=l(),Lf=a("p"),Dot=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),Got=o("not"),Oot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),Vot=o("from_pretrained()"),Xot=o(" to load the model weights."),zot=l(),F(xw.$$.fragment),Qot=l(),Kr=a("div"),F(lk.$$.fragment),Wot=l(),Hwe=a("p"),Hot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uot=l(),$n=a("p"),Jot=o("The model class to instantiate is selected based on the "),Uwe=a("code"),Yot=o("model_type"),Kot=o(` property of the config object (either
passed as an argument or loaded from `),Jwe=a("code"),Zot=o("pretrained_model_name_or_path"),ert=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=a("code"),ort=o("pretrained_model_name_or_path"),rrt=o(":"),trt=l(),ik=a("ul"),$w=a("li"),Kwe=a("strong"),art=o("beit"),nrt=o(" \u2014 "),Mre=a("a"),srt=o("FlaxBeitForImageClassification"),lrt=o(" (BEiT model)"),irt=l(),kw=a("li"),Zwe=a("strong"),drt=o("vit"),crt=o(" \u2014 "),Ere=a("a"),frt=o("FlaxViTForImageClassification"),mrt=o(" (ViT model)"),grt=l(),F(Sw.$$.fragment),eQe=l(),yf=a("h2"),Rw=a("a"),eAe=a("span"),F(dk.$$.fragment),hrt=l(),oAe=a("span"),prt=o("FlaxAutoModelForVision2Seq"),oQe=l(),wr=a("div"),F(ck.$$.fragment),_rt=l(),xf=a("p"),urt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=a("a"),brt=o("from_pretrained()"),vrt=o(" class method or the "),wre=a("a"),Frt=o("from_config()"),Trt=o(` class
method.`),Mrt=l(),fk=a("p"),Ert=o("This class cannot be instantiated directly using "),rAe=a("code"),Crt=o("__init__()"),wrt=o(" (throws an error)."),Art=l(),ta=a("div"),F(mk.$$.fragment),Lrt=l(),tAe=a("p"),yrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xrt=l(),$f=a("p"),$rt=o(`Note:
Loading a model from its configuration file does `),aAe=a("strong"),krt=o("not"),Srt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),Rrt=o("from_pretrained()"),Prt=o(" to load the model weights."),Brt=l(),F(Pw.$$.fragment),Irt=l(),Zr=a("div"),F(gk.$$.fragment),Nrt=l(),nAe=a("p"),qrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jrt=l(),kn=a("p"),Drt=o("The model class to instantiate is selected based on the "),sAe=a("code"),Grt=o("model_type"),Ort=o(` property of the config object (either
passed as an argument or loaded from `),lAe=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=a("code"),zrt=o("pretrained_model_name_or_path"),Qrt=o(":"),Wrt=l(),dAe=a("ul"),Bw=a("li"),cAe=a("strong"),Hrt=o("vision-encoder-decoder"),Urt=o(" \u2014 "),Lre=a("a"),Jrt=o("FlaxVisionEncoderDecoderModel"),Yrt=o(" (Vision Encoder decoder model)"),Krt=l(),F(Iw.$$.fragment),this.h()},l(f){const u=xQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var hk=s(p);m=n(hk,"A",{id:!0,class:!0,href:!0});var fAe=s(m);_=n(fAe,"SPAN",{});var mAe=s(_);T(d.$$.fragment,mAe),mAe.forEach(t),fAe.forEach(t),h=i(hk),Eo=n(hk,"SPAN",{});var gAe=s(Eo);Ai=r(gAe,"Auto Classes"),gAe.forEach(t),hk.forEach(t),Pf=i(f),st=n(f,"P",{});var pk=s(st);Li=r(pk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(pk,"CODE",{});var hAe=s(yi);oL=r(hAe,"from_pretrained()"),hAe.forEach(t),Bf=r(pk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),pk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);xi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var pAe=s(Rn);rL=r(pAe,"AutoConfig"),pAe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var _Ae=s(Bn);tL=r(_Ae,"AutoModel"),_Ae.forEach(t),$i=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var uAe=s(In);aL=r(uAe,"AutoTokenizer"),uAe.forEach(t),ki=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),If=i(f),T(ka.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var _k=s(Ae);PS=r(_k,"will create a model that is an instance of "),Si=n(_k,"A",{href:!0});var bAe=s(Si);BS=r(bAe,"BertModel"),bAe.forEach(t),IS=r(_k,"."),_k.forEach(t),Co=i(f),Sa=n(f,"P",{});var uk=s(Sa);NS=r(uk,"There is one class of "),Nf=n(uk,"CODE",{});var vAe=s(Nf);qS=r(vAe,"AutoModel"),vAe.forEach(t),fHe=r(uk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uk.forEach(t),YVe=i(f),Ri=n(f,"H2",{class:!0});var bk=s(Ri);qf=n(bk,"A",{id:!0,class:!0,href:!0});var FAe=s(qf);Eae=n(FAe,"SPAN",{});var TAe=s(Eae);T(nL.$$.fragment,TAe),TAe.forEach(t),FAe.forEach(t),mHe=i(bk),Cae=n(bk,"SPAN",{});var MAe=s(Cae);gHe=r(MAe,"Extending the Auto Classes"),MAe.forEach(t),bk.forEach(t),KVe=i(f),Nn=n(f,"P",{});var kf=s(Nn);hHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wae=n(kf,"CODE",{});var EAe=s(wae);pHe=r(EAe,"NewModel"),EAe.forEach(t),_He=r(kf,", make sure you have a "),Aae=n(kf,"CODE",{});var CAe=s(Aae);uHe=r(CAe,"NewModelConfig"),CAe.forEach(t),bHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),ZVe=i(f),T(sL.$$.fragment,f),eXe=i(f),jS=n(f,"P",{});var wAe=s(jS);vHe=r(wAe,"You will then be able to use the auto classes like you would usually do!"),wAe.forEach(t),oXe=i(f),T(jf.$$.fragment,f),rXe=i(f),Pi=n(f,"H2",{class:!0});var vk=s(Pi);Df=n(vk,"A",{id:!0,class:!0,href:!0});var AAe=s(Df);Lae=n(AAe,"SPAN",{});var LAe=s(Lae);T(lL.$$.fragment,LAe),LAe.forEach(t),AAe.forEach(t),FHe=i(vk),yae=n(vk,"SPAN",{});var yAe=s(yae);THe=r(yAe,"AutoConfig"),yAe.forEach(t),vk.forEach(t),tXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(iL.$$.fragment,at),MHe=i(at),dL=n(at,"P",{});var Fk=s(dL);EHe=r(Fk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),DS=n(Fk,"A",{href:!0});var xAe=s(DS);CHe=r(xAe,"from_pretrained()"),xAe.forEach(t),wHe=r(Fk," class method."),Fk.forEach(t),AHe=i(at),cL=n(at,"P",{});var Tk=s(cL);LHe=r(Tk,"This class cannot be instantiated directly using "),xae=n(Tk,"CODE",{});var $Ae=s(xae);yHe=r($Ae,"__init__()"),$Ae.forEach(t),xHe=r(Tk," (throws an error)."),Tk.forEach(t),$He=i(at),Ar=n(at,"DIV",{class:!0});var nt=s(Ar);T(fL.$$.fragment,nt),kHe=i(nt),$ae=n(nt,"P",{});var kAe=s($ae);SHe=r(kAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),kAe.forEach(t),RHe=i(nt),Bi=n(nt,"P",{});var Sf=s(Bi);PHe=r(Sf,"The configuration class to instantiate is selected based on the "),kae=n(Sf,"CODE",{});var SAe=s(kae);BHe=r(SAe,"model_type"),SAe.forEach(t),IHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Sae=n(Sf,"CODE",{});var RAe=s(Sae);NHe=r(RAe,"pretrained_model_name_or_path"),RAe.forEach(t),qHe=r(Sf,":"),Sf.forEach(t),jHe=i(nt),A=n(nt,"UL",{});var L=s(A);Gf=n(L,"LI",{});var Nw=s(Gf);Rae=n(Nw,"STRONG",{});var PAe=s(Rae);DHe=r(PAe,"albert"),PAe.forEach(t),GHe=r(Nw," \u2014 "),GS=n(Nw,"A",{href:!0});var BAe=s(GS);OHe=r(BAe,"AlbertConfig"),BAe.forEach(t),VHe=r(Nw," (ALBERT model)"),Nw.forEach(t),XHe=i(L),Of=n(L,"LI",{});var qw=s(Of);Pae=n(qw,"STRONG",{});var IAe=s(Pae);zHe=r(IAe,"bart"),IAe.forEach(t),QHe=r(qw," \u2014 "),OS=n(qw,"A",{href:!0});var NAe=s(OS);WHe=r(NAe,"BartConfig"),NAe.forEach(t),HHe=r(qw," (BART model)"),qw.forEach(t),UHe=i(L),Vf=n(L,"LI",{});var jw=s(Vf);Bae=n(jw,"STRONG",{});var qAe=s(Bae);JHe=r(qAe,"beit"),qAe.forEach(t),YHe=r(jw," \u2014 "),VS=n(jw,"A",{href:!0});var jAe=s(VS);KHe=r(jAe,"BeitConfig"),jAe.forEach(t),ZHe=r(jw," (BEiT model)"),jw.forEach(t),eUe=i(L),Xf=n(L,"LI",{});var Dw=s(Xf);Iae=n(Dw,"STRONG",{});var DAe=s(Iae);oUe=r(DAe,"bert"),DAe.forEach(t),rUe=r(Dw," \u2014 "),XS=n(Dw,"A",{href:!0});var GAe=s(XS);tUe=r(GAe,"BertConfig"),GAe.forEach(t),aUe=r(Dw," (BERT model)"),Dw.forEach(t),nUe=i(L),zf=n(L,"LI",{});var Gw=s(zf);Nae=n(Gw,"STRONG",{});var OAe=s(Nae);sUe=r(OAe,"bert-generation"),OAe.forEach(t),lUe=r(Gw," \u2014 "),zS=n(Gw,"A",{href:!0});var VAe=s(zS);iUe=r(VAe,"BertGenerationConfig"),VAe.forEach(t),dUe=r(Gw," (Bert Generation model)"),Gw.forEach(t),cUe=i(L),Qf=n(L,"LI",{});var Ow=s(Qf);qae=n(Ow,"STRONG",{});var XAe=s(qae);fUe=r(XAe,"big_bird"),XAe.forEach(t),mUe=r(Ow," \u2014 "),QS=n(Ow,"A",{href:!0});var zAe=s(QS);gUe=r(zAe,"BigBirdConfig"),zAe.forEach(t),hUe=r(Ow," (BigBird model)"),Ow.forEach(t),pUe=i(L),Wf=n(L,"LI",{});var Vw=s(Wf);jae=n(Vw,"STRONG",{});var QAe=s(jae);_Ue=r(QAe,"bigbird_pegasus"),QAe.forEach(t),uUe=r(Vw," \u2014 "),WS=n(Vw,"A",{href:!0});var WAe=s(WS);bUe=r(WAe,"BigBirdPegasusConfig"),WAe.forEach(t),vUe=r(Vw," (BigBird-Pegasus model)"),Vw.forEach(t),FUe=i(L),Hf=n(L,"LI",{});var Xw=s(Hf);Dae=n(Xw,"STRONG",{});var HAe=s(Dae);TUe=r(HAe,"blenderbot"),HAe.forEach(t),MUe=r(Xw," \u2014 "),HS=n(Xw,"A",{href:!0});var UAe=s(HS);EUe=r(UAe,"BlenderbotConfig"),UAe.forEach(t),CUe=r(Xw," (Blenderbot model)"),Xw.forEach(t),wUe=i(L),Uf=n(L,"LI",{});var zw=s(Uf);Gae=n(zw,"STRONG",{});var JAe=s(Gae);AUe=r(JAe,"blenderbot-small"),JAe.forEach(t),LUe=r(zw," \u2014 "),US=n(zw,"A",{href:!0});var YAe=s(US);yUe=r(YAe,"BlenderbotSmallConfig"),YAe.forEach(t),xUe=r(zw," (BlenderbotSmall model)"),zw.forEach(t),$Ue=i(L),Jf=n(L,"LI",{});var Qw=s(Jf);Oae=n(Qw,"STRONG",{});var KAe=s(Oae);kUe=r(KAe,"bloom"),KAe.forEach(t),SUe=r(Qw," \u2014 "),JS=n(Qw,"A",{href:!0});var ZAe=s(JS);RUe=r(ZAe,"BloomConfig"),ZAe.forEach(t),PUe=r(Qw," (BLOOM model)"),Qw.forEach(t),BUe=i(L),Yf=n(L,"LI",{});var Ww=s(Yf);Vae=n(Ww,"STRONG",{});var e6e=s(Vae);IUe=r(e6e,"camembert"),e6e.forEach(t),NUe=r(Ww," \u2014 "),YS=n(Ww,"A",{href:!0});var o6e=s(YS);qUe=r(o6e,"CamembertConfig"),o6e.forEach(t),jUe=r(Ww," (CamemBERT model)"),Ww.forEach(t),DUe=i(L),Kf=n(L,"LI",{});var Hw=s(Kf);Xae=n(Hw,"STRONG",{});var r6e=s(Xae);GUe=r(r6e,"canine"),r6e.forEach(t),OUe=r(Hw," \u2014 "),KS=n(Hw,"A",{href:!0});var t6e=s(KS);VUe=r(t6e,"CanineConfig"),t6e.forEach(t),XUe=r(Hw," (CANINE model)"),Hw.forEach(t),zUe=i(L),Zf=n(L,"LI",{});var Uw=s(Zf);zae=n(Uw,"STRONG",{});var a6e=s(zae);QUe=r(a6e,"clip"),a6e.forEach(t),WUe=r(Uw," \u2014 "),ZS=n(Uw,"A",{href:!0});var n6e=s(ZS);HUe=r(n6e,"CLIPConfig"),n6e.forEach(t),UUe=r(Uw," (CLIP model)"),Uw.forEach(t),JUe=i(L),em=n(L,"LI",{});var Jw=s(em);Qae=n(Jw,"STRONG",{});var s6e=s(Qae);YUe=r(s6e,"codegen"),s6e.forEach(t),KUe=r(Jw," \u2014 "),eR=n(Jw,"A",{href:!0});var l6e=s(eR);ZUe=r(l6e,"CodeGenConfig"),l6e.forEach(t),eJe=r(Jw," (CodeGen model)"),Jw.forEach(t),oJe=i(L),om=n(L,"LI",{});var Yw=s(om);Wae=n(Yw,"STRONG",{});var i6e=s(Wae);rJe=r(i6e,"convbert"),i6e.forEach(t),tJe=r(Yw," \u2014 "),oR=n(Yw,"A",{href:!0});var d6e=s(oR);aJe=r(d6e,"ConvBertConfig"),d6e.forEach(t),nJe=r(Yw," (ConvBERT model)"),Yw.forEach(t),sJe=i(L),rm=n(L,"LI",{});var Kw=s(rm);Hae=n(Kw,"STRONG",{});var c6e=s(Hae);lJe=r(c6e,"convnext"),c6e.forEach(t),iJe=r(Kw," \u2014 "),rR=n(Kw,"A",{href:!0});var f6e=s(rR);dJe=r(f6e,"ConvNextConfig"),f6e.forEach(t),cJe=r(Kw," (ConvNeXT model)"),Kw.forEach(t),fJe=i(L),tm=n(L,"LI",{});var Zw=s(tm);Uae=n(Zw,"STRONG",{});var m6e=s(Uae);mJe=r(m6e,"ctrl"),m6e.forEach(t),gJe=r(Zw," \u2014 "),tR=n(Zw,"A",{href:!0});var g6e=s(tR);hJe=r(g6e,"CTRLConfig"),g6e.forEach(t),pJe=r(Zw," (CTRL model)"),Zw.forEach(t),_Je=i(L),am=n(L,"LI",{});var eA=s(am);Jae=n(eA,"STRONG",{});var h6e=s(Jae);uJe=r(h6e,"cvt"),h6e.forEach(t),bJe=r(eA," \u2014 "),aR=n(eA,"A",{href:!0});var p6e=s(aR);vJe=r(p6e,"CvtConfig"),p6e.forEach(t),FJe=r(eA," (CvT model)"),eA.forEach(t),TJe=i(L),nm=n(L,"LI",{});var oA=s(nm);Yae=n(oA,"STRONG",{});var _6e=s(Yae);MJe=r(_6e,"data2vec-audio"),_6e.forEach(t),EJe=r(oA," \u2014 "),nR=n(oA,"A",{href:!0});var u6e=s(nR);CJe=r(u6e,"Data2VecAudioConfig"),u6e.forEach(t),wJe=r(oA," (Data2VecAudio model)"),oA.forEach(t),AJe=i(L),sm=n(L,"LI",{});var rA=s(sm);Kae=n(rA,"STRONG",{});var b6e=s(Kae);LJe=r(b6e,"data2vec-text"),b6e.forEach(t),yJe=r(rA," \u2014 "),sR=n(rA,"A",{href:!0});var v6e=s(sR);xJe=r(v6e,"Data2VecTextConfig"),v6e.forEach(t),$Je=r(rA," (Data2VecText model)"),rA.forEach(t),kJe=i(L),lm=n(L,"LI",{});var tA=s(lm);Zae=n(tA,"STRONG",{});var F6e=s(Zae);SJe=r(F6e,"data2vec-vision"),F6e.forEach(t),RJe=r(tA," \u2014 "),lR=n(tA,"A",{href:!0});var T6e=s(lR);PJe=r(T6e,"Data2VecVisionConfig"),T6e.forEach(t),BJe=r(tA," (Data2VecVision model)"),tA.forEach(t),IJe=i(L),im=n(L,"LI",{});var aA=s(im);ene=n(aA,"STRONG",{});var M6e=s(ene);NJe=r(M6e,"deberta"),M6e.forEach(t),qJe=r(aA," \u2014 "),iR=n(aA,"A",{href:!0});var E6e=s(iR);jJe=r(E6e,"DebertaConfig"),E6e.forEach(t),DJe=r(aA," (DeBERTa model)"),aA.forEach(t),GJe=i(L),dm=n(L,"LI",{});var nA=s(dm);one=n(nA,"STRONG",{});var C6e=s(one);OJe=r(C6e,"deberta-v2"),C6e.forEach(t),VJe=r(nA," \u2014 "),dR=n(nA,"A",{href:!0});var w6e=s(dR);XJe=r(w6e,"DebertaV2Config"),w6e.forEach(t),zJe=r(nA," (DeBERTa-v2 model)"),nA.forEach(t),QJe=i(L),cm=n(L,"LI",{});var sA=s(cm);rne=n(sA,"STRONG",{});var ett=s(rne);WJe=r(ett,"decision_transformer"),ett.forEach(t),HJe=r(sA," \u2014 "),cR=n(sA,"A",{href:!0});var ott=s(cR);UJe=r(ott,"DecisionTransformerConfig"),ott.forEach(t),JJe=r(sA," (Decision Transformer model)"),sA.forEach(t),YJe=i(L),fm=n(L,"LI",{});var A6e=s(fm);tne=n(A6e,"STRONG",{});var rtt=s(tne);KJe=r(rtt,"deformable_detr"),rtt.forEach(t),ZJe=r(A6e," \u2014 "),fR=n(A6e,"A",{href:!0});var ttt=s(fR);eYe=r(ttt,"DeformableDetrConfig"),ttt.forEach(t),oYe=r(A6e," (Deformable DETR model)"),A6e.forEach(t),rYe=i(L),mm=n(L,"LI",{});var L6e=s(mm);ane=n(L6e,"STRONG",{});var att=s(ane);tYe=r(att,"deit"),att.forEach(t),aYe=r(L6e," \u2014 "),mR=n(L6e,"A",{href:!0});var ntt=s(mR);nYe=r(ntt,"DeiTConfig"),ntt.forEach(t),sYe=r(L6e," (DeiT model)"),L6e.forEach(t),lYe=i(L),gm=n(L,"LI",{});var y6e=s(gm);nne=n(y6e,"STRONG",{});var stt=s(nne);iYe=r(stt,"detr"),stt.forEach(t),dYe=r(y6e," \u2014 "),gR=n(y6e,"A",{href:!0});var ltt=s(gR);cYe=r(ltt,"DetrConfig"),ltt.forEach(t),fYe=r(y6e," (DETR model)"),y6e.forEach(t),mYe=i(L),hm=n(L,"LI",{});var x6e=s(hm);sne=n(x6e,"STRONG",{});var itt=s(sne);gYe=r(itt,"distilbert"),itt.forEach(t),hYe=r(x6e," \u2014 "),hR=n(x6e,"A",{href:!0});var dtt=s(hR);pYe=r(dtt,"DistilBertConfig"),dtt.forEach(t),_Ye=r(x6e," (DistilBERT model)"),x6e.forEach(t),uYe=i(L),pm=n(L,"LI",{});var $6e=s(pm);lne=n($6e,"STRONG",{});var ctt=s(lne);bYe=r(ctt,"dpr"),ctt.forEach(t),vYe=r($6e," \u2014 "),pR=n($6e,"A",{href:!0});var ftt=s(pR);FYe=r(ftt,"DPRConfig"),ftt.forEach(t),TYe=r($6e," (DPR model)"),$6e.forEach(t),MYe=i(L),_m=n(L,"LI",{});var k6e=s(_m);ine=n(k6e,"STRONG",{});var mtt=s(ine);EYe=r(mtt,"dpt"),mtt.forEach(t),CYe=r(k6e," \u2014 "),_R=n(k6e,"A",{href:!0});var gtt=s(_R);wYe=r(gtt,"DPTConfig"),gtt.forEach(t),AYe=r(k6e," (DPT model)"),k6e.forEach(t),LYe=i(L),um=n(L,"LI",{});var S6e=s(um);dne=n(S6e,"STRONG",{});var htt=s(dne);yYe=r(htt,"electra"),htt.forEach(t),xYe=r(S6e," \u2014 "),uR=n(S6e,"A",{href:!0});var ptt=s(uR);$Ye=r(ptt,"ElectraConfig"),ptt.forEach(t),kYe=r(S6e," (ELECTRA model)"),S6e.forEach(t),SYe=i(L),bm=n(L,"LI",{});var R6e=s(bm);cne=n(R6e,"STRONG",{});var _tt=s(cne);RYe=r(_tt,"encoder-decoder"),_tt.forEach(t),PYe=r(R6e," \u2014 "),bR=n(R6e,"A",{href:!0});var utt=s(bR);BYe=r(utt,"EncoderDecoderConfig"),utt.forEach(t),IYe=r(R6e," (Encoder decoder model)"),R6e.forEach(t),NYe=i(L),vm=n(L,"LI",{});var P6e=s(vm);fne=n(P6e,"STRONG",{});var btt=s(fne);qYe=r(btt,"flaubert"),btt.forEach(t),jYe=r(P6e," \u2014 "),vR=n(P6e,"A",{href:!0});var vtt=s(vR);DYe=r(vtt,"FlaubertConfig"),vtt.forEach(t),GYe=r(P6e," (FlauBERT model)"),P6e.forEach(t),OYe=i(L),Fm=n(L,"LI",{});var B6e=s(Fm);mne=n(B6e,"STRONG",{});var Ftt=s(mne);VYe=r(Ftt,"flava"),Ftt.forEach(t),XYe=r(B6e," \u2014 "),FR=n(B6e,"A",{href:!0});var Ttt=s(FR);zYe=r(Ttt,"FlavaConfig"),Ttt.forEach(t),QYe=r(B6e," (FLAVA model)"),B6e.forEach(t),WYe=i(L),Tm=n(L,"LI",{});var I6e=s(Tm);gne=n(I6e,"STRONG",{});var Mtt=s(gne);HYe=r(Mtt,"fnet"),Mtt.forEach(t),UYe=r(I6e," \u2014 "),TR=n(I6e,"A",{href:!0});var Ett=s(TR);JYe=r(Ett,"FNetConfig"),Ett.forEach(t),YYe=r(I6e," (FNet model)"),I6e.forEach(t),KYe=i(L),Mm=n(L,"LI",{});var N6e=s(Mm);hne=n(N6e,"STRONG",{});var Ctt=s(hne);ZYe=r(Ctt,"fsmt"),Ctt.forEach(t),eKe=r(N6e," \u2014 "),MR=n(N6e,"A",{href:!0});var wtt=s(MR);oKe=r(wtt,"FSMTConfig"),wtt.forEach(t),rKe=r(N6e," (FairSeq Machine-Translation model)"),N6e.forEach(t),tKe=i(L),Em=n(L,"LI",{});var q6e=s(Em);pne=n(q6e,"STRONG",{});var Att=s(pne);aKe=r(Att,"funnel"),Att.forEach(t),nKe=r(q6e," \u2014 "),ER=n(q6e,"A",{href:!0});var Ltt=s(ER);sKe=r(Ltt,"FunnelConfig"),Ltt.forEach(t),lKe=r(q6e," (Funnel Transformer model)"),q6e.forEach(t),iKe=i(L),Cm=n(L,"LI",{});var j6e=s(Cm);_ne=n(j6e,"STRONG",{});var ytt=s(_ne);dKe=r(ytt,"glpn"),ytt.forEach(t),cKe=r(j6e," \u2014 "),CR=n(j6e,"A",{href:!0});var xtt=s(CR);fKe=r(xtt,"GLPNConfig"),xtt.forEach(t),mKe=r(j6e," (GLPN model)"),j6e.forEach(t),gKe=i(L),wm=n(L,"LI",{});var D6e=s(wm);une=n(D6e,"STRONG",{});var $tt=s(une);hKe=r($tt,"gpt2"),$tt.forEach(t),pKe=r(D6e," \u2014 "),wR=n(D6e,"A",{href:!0});var ktt=s(wR);_Ke=r(ktt,"GPT2Config"),ktt.forEach(t),uKe=r(D6e," (OpenAI GPT-2 model)"),D6e.forEach(t),bKe=i(L),Am=n(L,"LI",{});var G6e=s(Am);bne=n(G6e,"STRONG",{});var Stt=s(bne);vKe=r(Stt,"gpt_neo"),Stt.forEach(t),FKe=r(G6e," \u2014 "),AR=n(G6e,"A",{href:!0});var Rtt=s(AR);TKe=r(Rtt,"GPTNeoConfig"),Rtt.forEach(t),MKe=r(G6e," (GPT Neo model)"),G6e.forEach(t),EKe=i(L),Lm=n(L,"LI",{});var O6e=s(Lm);vne=n(O6e,"STRONG",{});var Ptt=s(vne);CKe=r(Ptt,"gpt_neox"),Ptt.forEach(t),wKe=r(O6e," \u2014 "),LR=n(O6e,"A",{href:!0});var Btt=s(LR);AKe=r(Btt,"GPTNeoXConfig"),Btt.forEach(t),LKe=r(O6e," (GPT NeoX model)"),O6e.forEach(t),yKe=i(L),ym=n(L,"LI",{});var V6e=s(ym);Fne=n(V6e,"STRONG",{});var Itt=s(Fne);xKe=r(Itt,"gptj"),Itt.forEach(t),$Ke=r(V6e," \u2014 "),yR=n(V6e,"A",{href:!0});var Ntt=s(yR);kKe=r(Ntt,"GPTJConfig"),Ntt.forEach(t),SKe=r(V6e," (GPT-J model)"),V6e.forEach(t),RKe=i(L),xm=n(L,"LI",{});var X6e=s(xm);Tne=n(X6e,"STRONG",{});var qtt=s(Tne);PKe=r(qtt,"groupvit"),qtt.forEach(t),BKe=r(X6e," \u2014 "),xR=n(X6e,"A",{href:!0});var jtt=s(xR);IKe=r(jtt,"GroupViTConfig"),jtt.forEach(t),NKe=r(X6e," (GroupViT model)"),X6e.forEach(t),qKe=i(L),$m=n(L,"LI",{});var z6e=s($m);Mne=n(z6e,"STRONG",{});var Dtt=s(Mne);jKe=r(Dtt,"hubert"),Dtt.forEach(t),DKe=r(z6e," \u2014 "),$R=n(z6e,"A",{href:!0});var Gtt=s($R);GKe=r(Gtt,"HubertConfig"),Gtt.forEach(t),OKe=r(z6e," (Hubert model)"),z6e.forEach(t),VKe=i(L),km=n(L,"LI",{});var Q6e=s(km);Ene=n(Q6e,"STRONG",{});var Ott=s(Ene);XKe=r(Ott,"ibert"),Ott.forEach(t),zKe=r(Q6e," \u2014 "),kR=n(Q6e,"A",{href:!0});var Vtt=s(kR);QKe=r(Vtt,"IBertConfig"),Vtt.forEach(t),WKe=r(Q6e," (I-BERT model)"),Q6e.forEach(t),HKe=i(L),Sm=n(L,"LI",{});var W6e=s(Sm);Cne=n(W6e,"STRONG",{});var Xtt=s(Cne);UKe=r(Xtt,"imagegpt"),Xtt.forEach(t),JKe=r(W6e," \u2014 "),SR=n(W6e,"A",{href:!0});var ztt=s(SR);YKe=r(ztt,"ImageGPTConfig"),ztt.forEach(t),KKe=r(W6e," (ImageGPT model)"),W6e.forEach(t),ZKe=i(L),Rm=n(L,"LI",{});var H6e=s(Rm);wne=n(H6e,"STRONG",{});var Qtt=s(wne);eZe=r(Qtt,"layoutlm"),Qtt.forEach(t),oZe=r(H6e," \u2014 "),RR=n(H6e,"A",{href:!0});var Wtt=s(RR);rZe=r(Wtt,"LayoutLMConfig"),Wtt.forEach(t),tZe=r(H6e," (LayoutLM model)"),H6e.forEach(t),aZe=i(L),Pm=n(L,"LI",{});var U6e=s(Pm);Ane=n(U6e,"STRONG",{});var Htt=s(Ane);nZe=r(Htt,"layoutlmv2"),Htt.forEach(t),sZe=r(U6e," \u2014 "),PR=n(U6e,"A",{href:!0});var Utt=s(PR);lZe=r(Utt,"LayoutLMv2Config"),Utt.forEach(t),iZe=r(U6e," (LayoutLMv2 model)"),U6e.forEach(t),dZe=i(L),Bm=n(L,"LI",{});var J6e=s(Bm);Lne=n(J6e,"STRONG",{});var Jtt=s(Lne);cZe=r(Jtt,"layoutlmv3"),Jtt.forEach(t),fZe=r(J6e," \u2014 "),BR=n(J6e,"A",{href:!0});var Ytt=s(BR);mZe=r(Ytt,"LayoutLMv3Config"),Ytt.forEach(t),gZe=r(J6e," (LayoutLMv3 model)"),J6e.forEach(t),hZe=i(L),Im=n(L,"LI",{});var Y6e=s(Im);yne=n(Y6e,"STRONG",{});var Ktt=s(yne);pZe=r(Ktt,"led"),Ktt.forEach(t),_Ze=r(Y6e," \u2014 "),IR=n(Y6e,"A",{href:!0});var Ztt=s(IR);uZe=r(Ztt,"LEDConfig"),Ztt.forEach(t),bZe=r(Y6e," (LED model)"),Y6e.forEach(t),vZe=i(L),Nm=n(L,"LI",{});var K6e=s(Nm);xne=n(K6e,"STRONG",{});var eat=s(xne);FZe=r(eat,"levit"),eat.forEach(t),TZe=r(K6e," \u2014 "),NR=n(K6e,"A",{href:!0});var oat=s(NR);MZe=r(oat,"LevitConfig"),oat.forEach(t),EZe=r(K6e," (LeViT model)"),K6e.forEach(t),CZe=i(L),qm=n(L,"LI",{});var Z6e=s(qm);$ne=n(Z6e,"STRONG",{});var rat=s($ne);wZe=r(rat,"longformer"),rat.forEach(t),AZe=r(Z6e," \u2014 "),qR=n(Z6e,"A",{href:!0});var tat=s(qR);LZe=r(tat,"LongformerConfig"),tat.forEach(t),yZe=r(Z6e," (Longformer model)"),Z6e.forEach(t),xZe=i(L),jm=n(L,"LI",{});var eLe=s(jm);kne=n(eLe,"STRONG",{});var aat=s(kne);$Ze=r(aat,"longt5"),aat.forEach(t),kZe=r(eLe," \u2014 "),jR=n(eLe,"A",{href:!0});var nat=s(jR);SZe=r(nat,"LongT5Config"),nat.forEach(t),RZe=r(eLe," (LongT5 model)"),eLe.forEach(t),PZe=i(L),Dm=n(L,"LI",{});var oLe=s(Dm);Sne=n(oLe,"STRONG",{});var sat=s(Sne);BZe=r(sat,"luke"),sat.forEach(t),IZe=r(oLe," \u2014 "),DR=n(oLe,"A",{href:!0});var lat=s(DR);NZe=r(lat,"LukeConfig"),lat.forEach(t),qZe=r(oLe," (LUKE model)"),oLe.forEach(t),jZe=i(L),Gm=n(L,"LI",{});var rLe=s(Gm);Rne=n(rLe,"STRONG",{});var iat=s(Rne);DZe=r(iat,"lxmert"),iat.forEach(t),GZe=r(rLe," \u2014 "),GR=n(rLe,"A",{href:!0});var dat=s(GR);OZe=r(dat,"LxmertConfig"),dat.forEach(t),VZe=r(rLe," (LXMERT model)"),rLe.forEach(t),XZe=i(L),Om=n(L,"LI",{});var tLe=s(Om);Pne=n(tLe,"STRONG",{});var cat=s(Pne);zZe=r(cat,"m2m_100"),cat.forEach(t),QZe=r(tLe," \u2014 "),OR=n(tLe,"A",{href:!0});var fat=s(OR);WZe=r(fat,"M2M100Config"),fat.forEach(t),HZe=r(tLe," (M2M100 model)"),tLe.forEach(t),UZe=i(L),Vm=n(L,"LI",{});var aLe=s(Vm);Bne=n(aLe,"STRONG",{});var mat=s(Bne);JZe=r(mat,"marian"),mat.forEach(t),YZe=r(aLe," \u2014 "),VR=n(aLe,"A",{href:!0});var gat=s(VR);KZe=r(gat,"MarianConfig"),gat.forEach(t),ZZe=r(aLe," (Marian model)"),aLe.forEach(t),eeo=i(L),Xm=n(L,"LI",{});var nLe=s(Xm);Ine=n(nLe,"STRONG",{});var hat=s(Ine);oeo=r(hat,"maskformer"),hat.forEach(t),reo=r(nLe," \u2014 "),XR=n(nLe,"A",{href:!0});var pat=s(XR);teo=r(pat,"MaskFormerConfig"),pat.forEach(t),aeo=r(nLe," (MaskFormer model)"),nLe.forEach(t),neo=i(L),zm=n(L,"LI",{});var sLe=s(zm);Nne=n(sLe,"STRONG",{});var _at=s(Nne);seo=r(_at,"mbart"),_at.forEach(t),leo=r(sLe," \u2014 "),zR=n(sLe,"A",{href:!0});var uat=s(zR);ieo=r(uat,"MBartConfig"),uat.forEach(t),deo=r(sLe," (mBART model)"),sLe.forEach(t),ceo=i(L),Qm=n(L,"LI",{});var lLe=s(Qm);qne=n(lLe,"STRONG",{});var bat=s(qne);feo=r(bat,"mctct"),bat.forEach(t),meo=r(lLe," \u2014 "),QR=n(lLe,"A",{href:!0});var vat=s(QR);geo=r(vat,"MCTCTConfig"),vat.forEach(t),heo=r(lLe," (M-CTC-T model)"),lLe.forEach(t),peo=i(L),Wm=n(L,"LI",{});var iLe=s(Wm);jne=n(iLe,"STRONG",{});var Fat=s(jne);_eo=r(Fat,"megatron-bert"),Fat.forEach(t),ueo=r(iLe," \u2014 "),WR=n(iLe,"A",{href:!0});var Tat=s(WR);beo=r(Tat,"MegatronBertConfig"),Tat.forEach(t),veo=r(iLe," (Megatron-BERT model)"),iLe.forEach(t),Feo=i(L),Hm=n(L,"LI",{});var dLe=s(Hm);Dne=n(dLe,"STRONG",{});var Mat=s(Dne);Teo=r(Mat,"mobilebert"),Mat.forEach(t),Meo=r(dLe," \u2014 "),HR=n(dLe,"A",{href:!0});var Eat=s(HR);Eeo=r(Eat,"MobileBertConfig"),Eat.forEach(t),Ceo=r(dLe," (MobileBERT model)"),dLe.forEach(t),weo=i(L),Um=n(L,"LI",{});var cLe=s(Um);Gne=n(cLe,"STRONG",{});var Cat=s(Gne);Aeo=r(Cat,"mobilevit"),Cat.forEach(t),Leo=r(cLe," \u2014 "),UR=n(cLe,"A",{href:!0});var wat=s(UR);yeo=r(wat,"MobileViTConfig"),wat.forEach(t),xeo=r(cLe," (MobileViT model)"),cLe.forEach(t),$eo=i(L),Jm=n(L,"LI",{});var fLe=s(Jm);One=n(fLe,"STRONG",{});var Aat=s(One);keo=r(Aat,"mpnet"),Aat.forEach(t),Seo=r(fLe," \u2014 "),JR=n(fLe,"A",{href:!0});var Lat=s(JR);Reo=r(Lat,"MPNetConfig"),Lat.forEach(t),Peo=r(fLe," (MPNet model)"),fLe.forEach(t),Beo=i(L),Ym=n(L,"LI",{});var mLe=s(Ym);Vne=n(mLe,"STRONG",{});var yat=s(Vne);Ieo=r(yat,"mt5"),yat.forEach(t),Neo=r(mLe," \u2014 "),YR=n(mLe,"A",{href:!0});var xat=s(YR);qeo=r(xat,"MT5Config"),xat.forEach(t),jeo=r(mLe," (MT5 model)"),mLe.forEach(t),Deo=i(L),Km=n(L,"LI",{});var gLe=s(Km);Xne=n(gLe,"STRONG",{});var $at=s(Xne);Geo=r($at,"mvp"),$at.forEach(t),Oeo=r(gLe," \u2014 "),KR=n(gLe,"A",{href:!0});var kat=s(KR);Veo=r(kat,"MvpConfig"),kat.forEach(t),Xeo=r(gLe," (MVP model)"),gLe.forEach(t),zeo=i(L),Zm=n(L,"LI",{});var hLe=s(Zm);zne=n(hLe,"STRONG",{});var Sat=s(zne);Qeo=r(Sat,"nezha"),Sat.forEach(t),Weo=r(hLe," \u2014 "),ZR=n(hLe,"A",{href:!0});var Rat=s(ZR);Heo=r(Rat,"NezhaConfig"),Rat.forEach(t),Ueo=r(hLe," (Nezha model)"),hLe.forEach(t),Jeo=i(L),eg=n(L,"LI",{});var pLe=s(eg);Qne=n(pLe,"STRONG",{});var Pat=s(Qne);Yeo=r(Pat,"nystromformer"),Pat.forEach(t),Keo=r(pLe," \u2014 "),eP=n(pLe,"A",{href:!0});var Bat=s(eP);Zeo=r(Bat,"NystromformerConfig"),Bat.forEach(t),eoo=r(pLe," (Nystr\xF6mformer model)"),pLe.forEach(t),ooo=i(L),og=n(L,"LI",{});var _Le=s(og);Wne=n(_Le,"STRONG",{});var Iat=s(Wne);roo=r(Iat,"openai-gpt"),Iat.forEach(t),too=r(_Le," \u2014 "),oP=n(_Le,"A",{href:!0});var Nat=s(oP);aoo=r(Nat,"OpenAIGPTConfig"),Nat.forEach(t),noo=r(_Le," (OpenAI GPT model)"),_Le.forEach(t),soo=i(L),rg=n(L,"LI",{});var uLe=s(rg);Hne=n(uLe,"STRONG",{});var qat=s(Hne);loo=r(qat,"opt"),qat.forEach(t),ioo=r(uLe," \u2014 "),rP=n(uLe,"A",{href:!0});var jat=s(rP);doo=r(jat,"OPTConfig"),jat.forEach(t),coo=r(uLe," (OPT model)"),uLe.forEach(t),foo=i(L),tg=n(L,"LI",{});var bLe=s(tg);Une=n(bLe,"STRONG",{});var Dat=s(Une);moo=r(Dat,"pegasus"),Dat.forEach(t),goo=r(bLe," \u2014 "),tP=n(bLe,"A",{href:!0});var Gat=s(tP);hoo=r(Gat,"PegasusConfig"),Gat.forEach(t),poo=r(bLe," (Pegasus model)"),bLe.forEach(t),_oo=i(L),ag=n(L,"LI",{});var vLe=s(ag);Jne=n(vLe,"STRONG",{});var Oat=s(Jne);uoo=r(Oat,"perceiver"),Oat.forEach(t),boo=r(vLe," \u2014 "),aP=n(vLe,"A",{href:!0});var Vat=s(aP);voo=r(Vat,"PerceiverConfig"),Vat.forEach(t),Foo=r(vLe," (Perceiver model)"),vLe.forEach(t),Too=i(L),ng=n(L,"LI",{});var FLe=s(ng);Yne=n(FLe,"STRONG",{});var Xat=s(Yne);Moo=r(Xat,"plbart"),Xat.forEach(t),Eoo=r(FLe," \u2014 "),nP=n(FLe,"A",{href:!0});var zat=s(nP);Coo=r(zat,"PLBartConfig"),zat.forEach(t),woo=r(FLe," (PLBart model)"),FLe.forEach(t),Aoo=i(L),sg=n(L,"LI",{});var TLe=s(sg);Kne=n(TLe,"STRONG",{});var Qat=s(Kne);Loo=r(Qat,"poolformer"),Qat.forEach(t),yoo=r(TLe," \u2014 "),sP=n(TLe,"A",{href:!0});var Wat=s(sP);xoo=r(Wat,"PoolFormerConfig"),Wat.forEach(t),$oo=r(TLe," (PoolFormer model)"),TLe.forEach(t),koo=i(L),lg=n(L,"LI",{});var MLe=s(lg);Zne=n(MLe,"STRONG",{});var Hat=s(Zne);Soo=r(Hat,"prophetnet"),Hat.forEach(t),Roo=r(MLe," \u2014 "),lP=n(MLe,"A",{href:!0});var Uat=s(lP);Poo=r(Uat,"ProphetNetConfig"),Uat.forEach(t),Boo=r(MLe," (ProphetNet model)"),MLe.forEach(t),Ioo=i(L),ig=n(L,"LI",{});var ELe=s(ig);ese=n(ELe,"STRONG",{});var Jat=s(ese);Noo=r(Jat,"qdqbert"),Jat.forEach(t),qoo=r(ELe," \u2014 "),iP=n(ELe,"A",{href:!0});var Yat=s(iP);joo=r(Yat,"QDQBertConfig"),Yat.forEach(t),Doo=r(ELe," (QDQBert model)"),ELe.forEach(t),Goo=i(L),dg=n(L,"LI",{});var CLe=s(dg);ose=n(CLe,"STRONG",{});var Kat=s(ose);Ooo=r(Kat,"rag"),Kat.forEach(t),Voo=r(CLe," \u2014 "),dP=n(CLe,"A",{href:!0});var Zat=s(dP);Xoo=r(Zat,"RagConfig"),Zat.forEach(t),zoo=r(CLe," (RAG model)"),CLe.forEach(t),Qoo=i(L),cg=n(L,"LI",{});var wLe=s(cg);rse=n(wLe,"STRONG",{});var ent=s(rse);Woo=r(ent,"realm"),ent.forEach(t),Hoo=r(wLe," \u2014 "),cP=n(wLe,"A",{href:!0});var ont=s(cP);Uoo=r(ont,"RealmConfig"),ont.forEach(t),Joo=r(wLe," (REALM model)"),wLe.forEach(t),Yoo=i(L),fg=n(L,"LI",{});var ALe=s(fg);tse=n(ALe,"STRONG",{});var rnt=s(tse);Koo=r(rnt,"reformer"),rnt.forEach(t),Zoo=r(ALe," \u2014 "),fP=n(ALe,"A",{href:!0});var tnt=s(fP);ero=r(tnt,"ReformerConfig"),tnt.forEach(t),oro=r(ALe," (Reformer model)"),ALe.forEach(t),rro=i(L),mg=n(L,"LI",{});var LLe=s(mg);ase=n(LLe,"STRONG",{});var ant=s(ase);tro=r(ant,"regnet"),ant.forEach(t),aro=r(LLe," \u2014 "),mP=n(LLe,"A",{href:!0});var nnt=s(mP);nro=r(nnt,"RegNetConfig"),nnt.forEach(t),sro=r(LLe," (RegNet model)"),LLe.forEach(t),lro=i(L),gg=n(L,"LI",{});var yLe=s(gg);nse=n(yLe,"STRONG",{});var snt=s(nse);iro=r(snt,"rembert"),snt.forEach(t),dro=r(yLe," \u2014 "),gP=n(yLe,"A",{href:!0});var lnt=s(gP);cro=r(lnt,"RemBertConfig"),lnt.forEach(t),fro=r(yLe," (RemBERT model)"),yLe.forEach(t),mro=i(L),hg=n(L,"LI",{});var xLe=s(hg);sse=n(xLe,"STRONG",{});var int=s(sse);gro=r(int,"resnet"),int.forEach(t),hro=r(xLe," \u2014 "),hP=n(xLe,"A",{href:!0});var dnt=s(hP);pro=r(dnt,"ResNetConfig"),dnt.forEach(t),_ro=r(xLe," (ResNet model)"),xLe.forEach(t),uro=i(L),pg=n(L,"LI",{});var $Le=s(pg);lse=n($Le,"STRONG",{});var cnt=s(lse);bro=r(cnt,"retribert"),cnt.forEach(t),vro=r($Le," \u2014 "),pP=n($Le,"A",{href:!0});var fnt=s(pP);Fro=r(fnt,"RetriBertConfig"),fnt.forEach(t),Tro=r($Le," (RetriBERT model)"),$Le.forEach(t),Mro=i(L),_g=n(L,"LI",{});var kLe=s(_g);ise=n(kLe,"STRONG",{});var mnt=s(ise);Ero=r(mnt,"roberta"),mnt.forEach(t),Cro=r(kLe," \u2014 "),_P=n(kLe,"A",{href:!0});var gnt=s(_P);wro=r(gnt,"RobertaConfig"),gnt.forEach(t),Aro=r(kLe," (RoBERTa model)"),kLe.forEach(t),Lro=i(L),ug=n(L,"LI",{});var SLe=s(ug);dse=n(SLe,"STRONG",{});var hnt=s(dse);yro=r(hnt,"roformer"),hnt.forEach(t),xro=r(SLe," \u2014 "),uP=n(SLe,"A",{href:!0});var pnt=s(uP);$ro=r(pnt,"RoFormerConfig"),pnt.forEach(t),kro=r(SLe," (RoFormer model)"),SLe.forEach(t),Sro=i(L),bg=n(L,"LI",{});var RLe=s(bg);cse=n(RLe,"STRONG",{});var _nt=s(cse);Rro=r(_nt,"segformer"),_nt.forEach(t),Pro=r(RLe," \u2014 "),bP=n(RLe,"A",{href:!0});var unt=s(bP);Bro=r(unt,"SegformerConfig"),unt.forEach(t),Iro=r(RLe," (SegFormer model)"),RLe.forEach(t),Nro=i(L),vg=n(L,"LI",{});var PLe=s(vg);fse=n(PLe,"STRONG",{});var bnt=s(fse);qro=r(bnt,"sew"),bnt.forEach(t),jro=r(PLe," \u2014 "),vP=n(PLe,"A",{href:!0});var vnt=s(vP);Dro=r(vnt,"SEWConfig"),vnt.forEach(t),Gro=r(PLe," (SEW model)"),PLe.forEach(t),Oro=i(L),Fg=n(L,"LI",{});var BLe=s(Fg);mse=n(BLe,"STRONG",{});var Fnt=s(mse);Vro=r(Fnt,"sew-d"),Fnt.forEach(t),Xro=r(BLe," \u2014 "),FP=n(BLe,"A",{href:!0});var Tnt=s(FP);zro=r(Tnt,"SEWDConfig"),Tnt.forEach(t),Qro=r(BLe," (SEW-D model)"),BLe.forEach(t),Wro=i(L),Tg=n(L,"LI",{});var ILe=s(Tg);gse=n(ILe,"STRONG",{});var Mnt=s(gse);Hro=r(Mnt,"speech-encoder-decoder"),Mnt.forEach(t),Uro=r(ILe," \u2014 "),TP=n(ILe,"A",{href:!0});var Ent=s(TP);Jro=r(Ent,"SpeechEncoderDecoderConfig"),Ent.forEach(t),Yro=r(ILe," (Speech Encoder decoder model)"),ILe.forEach(t),Kro=i(L),Mg=n(L,"LI",{});var NLe=s(Mg);hse=n(NLe,"STRONG",{});var Cnt=s(hse);Zro=r(Cnt,"speech_to_text"),Cnt.forEach(t),eto=r(NLe," \u2014 "),MP=n(NLe,"A",{href:!0});var wnt=s(MP);oto=r(wnt,"Speech2TextConfig"),wnt.forEach(t),rto=r(NLe," (Speech2Text model)"),NLe.forEach(t),tto=i(L),Eg=n(L,"LI",{});var qLe=s(Eg);pse=n(qLe,"STRONG",{});var Ant=s(pse);ato=r(Ant,"speech_to_text_2"),Ant.forEach(t),nto=r(qLe," \u2014 "),EP=n(qLe,"A",{href:!0});var Lnt=s(EP);sto=r(Lnt,"Speech2Text2Config"),Lnt.forEach(t),lto=r(qLe," (Speech2Text2 model)"),qLe.forEach(t),ito=i(L),Cg=n(L,"LI",{});var jLe=s(Cg);_se=n(jLe,"STRONG",{});var ynt=s(_se);dto=r(ynt,"splinter"),ynt.forEach(t),cto=r(jLe," \u2014 "),CP=n(jLe,"A",{href:!0});var xnt=s(CP);fto=r(xnt,"SplinterConfig"),xnt.forEach(t),mto=r(jLe," (Splinter model)"),jLe.forEach(t),gto=i(L),wg=n(L,"LI",{});var DLe=s(wg);use=n(DLe,"STRONG",{});var $nt=s(use);hto=r($nt,"squeezebert"),$nt.forEach(t),pto=r(DLe," \u2014 "),wP=n(DLe,"A",{href:!0});var knt=s(wP);_to=r(knt,"SqueezeBertConfig"),knt.forEach(t),uto=r(DLe," (SqueezeBERT model)"),DLe.forEach(t),bto=i(L),Ag=n(L,"LI",{});var GLe=s(Ag);bse=n(GLe,"STRONG",{});var Snt=s(bse);vto=r(Snt,"swin"),Snt.forEach(t),Fto=r(GLe," \u2014 "),AP=n(GLe,"A",{href:!0});var Rnt=s(AP);Tto=r(Rnt,"SwinConfig"),Rnt.forEach(t),Mto=r(GLe," (Swin Transformer model)"),GLe.forEach(t),Eto=i(L),Lg=n(L,"LI",{});var OLe=s(Lg);vse=n(OLe,"STRONG",{});var Pnt=s(vse);Cto=r(Pnt,"t5"),Pnt.forEach(t),wto=r(OLe," \u2014 "),LP=n(OLe,"A",{href:!0});var Bnt=s(LP);Ato=r(Bnt,"T5Config"),Bnt.forEach(t),Lto=r(OLe," (T5 model)"),OLe.forEach(t),yto=i(L),yg=n(L,"LI",{});var VLe=s(yg);Fse=n(VLe,"STRONG",{});var Int=s(Fse);xto=r(Int,"tapas"),Int.forEach(t),$to=r(VLe," \u2014 "),yP=n(VLe,"A",{href:!0});var Nnt=s(yP);kto=r(Nnt,"TapasConfig"),Nnt.forEach(t),Sto=r(VLe," (TAPAS model)"),VLe.forEach(t),Rto=i(L),xg=n(L,"LI",{});var XLe=s(xg);Tse=n(XLe,"STRONG",{});var qnt=s(Tse);Pto=r(qnt,"trajectory_transformer"),qnt.forEach(t),Bto=r(XLe," \u2014 "),xP=n(XLe,"A",{href:!0});var jnt=s(xP);Ito=r(jnt,"TrajectoryTransformerConfig"),jnt.forEach(t),Nto=r(XLe," (Trajectory Transformer model)"),XLe.forEach(t),qto=i(L),$g=n(L,"LI",{});var zLe=s($g);Mse=n(zLe,"STRONG",{});var Dnt=s(Mse);jto=r(Dnt,"transfo-xl"),Dnt.forEach(t),Dto=r(zLe," \u2014 "),$P=n(zLe,"A",{href:!0});var Gnt=s($P);Gto=r(Gnt,"TransfoXLConfig"),Gnt.forEach(t),Oto=r(zLe," (Transformer-XL model)"),zLe.forEach(t),Vto=i(L),kg=n(L,"LI",{});var QLe=s(kg);Ese=n(QLe,"STRONG",{});var Ont=s(Ese);Xto=r(Ont,"trocr"),Ont.forEach(t),zto=r(QLe," \u2014 "),kP=n(QLe,"A",{href:!0});var Vnt=s(kP);Qto=r(Vnt,"TrOCRConfig"),Vnt.forEach(t),Wto=r(QLe," (TrOCR model)"),QLe.forEach(t),Hto=i(L),Sg=n(L,"LI",{});var WLe=s(Sg);Cse=n(WLe,"STRONG",{});var Xnt=s(Cse);Uto=r(Xnt,"unispeech"),Xnt.forEach(t),Jto=r(WLe," \u2014 "),SP=n(WLe,"A",{href:!0});var znt=s(SP);Yto=r(znt,"UniSpeechConfig"),znt.forEach(t),Kto=r(WLe," (UniSpeech model)"),WLe.forEach(t),Zto=i(L),Rg=n(L,"LI",{});var HLe=s(Rg);wse=n(HLe,"STRONG",{});var Qnt=s(wse);eao=r(Qnt,"unispeech-sat"),Qnt.forEach(t),oao=r(HLe," \u2014 "),RP=n(HLe,"A",{href:!0});var Wnt=s(RP);rao=r(Wnt,"UniSpeechSatConfig"),Wnt.forEach(t),tao=r(HLe," (UniSpeechSat model)"),HLe.forEach(t),aao=i(L),Pg=n(L,"LI",{});var ULe=s(Pg);Ase=n(ULe,"STRONG",{});var Hnt=s(Ase);nao=r(Hnt,"van"),Hnt.forEach(t),sao=r(ULe," \u2014 "),PP=n(ULe,"A",{href:!0});var Unt=s(PP);lao=r(Unt,"VanConfig"),Unt.forEach(t),iao=r(ULe," (VAN model)"),ULe.forEach(t),dao=i(L),Bg=n(L,"LI",{});var JLe=s(Bg);Lse=n(JLe,"STRONG",{});var Jnt=s(Lse);cao=r(Jnt,"vilt"),Jnt.forEach(t),fao=r(JLe," \u2014 "),BP=n(JLe,"A",{href:!0});var Ynt=s(BP);mao=r(Ynt,"ViltConfig"),Ynt.forEach(t),gao=r(JLe," (ViLT model)"),JLe.forEach(t),hao=i(L),Ig=n(L,"LI",{});var YLe=s(Ig);yse=n(YLe,"STRONG",{});var Knt=s(yse);pao=r(Knt,"vision-encoder-decoder"),Knt.forEach(t),_ao=r(YLe," \u2014 "),IP=n(YLe,"A",{href:!0});var Znt=s(IP);uao=r(Znt,"VisionEncoderDecoderConfig"),Znt.forEach(t),bao=r(YLe," (Vision Encoder decoder model)"),YLe.forEach(t),vao=i(L),Ng=n(L,"LI",{});var KLe=s(Ng);xse=n(KLe,"STRONG",{});var est=s(xse);Fao=r(est,"vision-text-dual-encoder"),est.forEach(t),Tao=r(KLe," \u2014 "),NP=n(KLe,"A",{href:!0});var ost=s(NP);Mao=r(ost,"VisionTextDualEncoderConfig"),ost.forEach(t),Eao=r(KLe," (VisionTextDualEncoder model)"),KLe.forEach(t),Cao=i(L),qg=n(L,"LI",{});var ZLe=s(qg);$se=n(ZLe,"STRONG",{});var rst=s($se);wao=r(rst,"visual_bert"),rst.forEach(t),Aao=r(ZLe," \u2014 "),qP=n(ZLe,"A",{href:!0});var tst=s(qP);Lao=r(tst,"VisualBertConfig"),tst.forEach(t),yao=r(ZLe," (VisualBERT model)"),ZLe.forEach(t),xao=i(L),jg=n(L,"LI",{});var eye=s(jg);kse=n(eye,"STRONG",{});var ast=s(kse);$ao=r(ast,"vit"),ast.forEach(t),kao=r(eye," \u2014 "),jP=n(eye,"A",{href:!0});var nst=s(jP);Sao=r(nst,"ViTConfig"),nst.forEach(t),Rao=r(eye," (ViT model)"),eye.forEach(t),Pao=i(L),Dg=n(L,"LI",{});var oye=s(Dg);Sse=n(oye,"STRONG",{});var sst=s(Sse);Bao=r(sst,"vit_mae"),sst.forEach(t),Iao=r(oye," \u2014 "),DP=n(oye,"A",{href:!0});var lst=s(DP);Nao=r(lst,"ViTMAEConfig"),lst.forEach(t),qao=r(oye," (ViTMAE model)"),oye.forEach(t),jao=i(L),Gg=n(L,"LI",{});var rye=s(Gg);Rse=n(rye,"STRONG",{});var ist=s(Rse);Dao=r(ist,"wav2vec2"),ist.forEach(t),Gao=r(rye," \u2014 "),GP=n(rye,"A",{href:!0});var dst=s(GP);Oao=r(dst,"Wav2Vec2Config"),dst.forEach(t),Vao=r(rye," (Wav2Vec2 model)"),rye.forEach(t),Xao=i(L),Og=n(L,"LI",{});var tye=s(Og);Pse=n(tye,"STRONG",{});var cst=s(Pse);zao=r(cst,"wav2vec2-conformer"),cst.forEach(t),Qao=r(tye," \u2014 "),OP=n(tye,"A",{href:!0});var fst=s(OP);Wao=r(fst,"Wav2Vec2ConformerConfig"),fst.forEach(t),Hao=r(tye," (Wav2Vec2-Conformer model)"),tye.forEach(t),Uao=i(L),Vg=n(L,"LI",{});var aye=s(Vg);Bse=n(aye,"STRONG",{});var mst=s(Bse);Jao=r(mst,"wavlm"),mst.forEach(t),Yao=r(aye," \u2014 "),VP=n(aye,"A",{href:!0});var gst=s(VP);Kao=r(gst,"WavLMConfig"),gst.forEach(t),Zao=r(aye," (WavLM model)"),aye.forEach(t),eno=i(L),Xg=n(L,"LI",{});var nye=s(Xg);Ise=n(nye,"STRONG",{});var hst=s(Ise);ono=r(hst,"xglm"),hst.forEach(t),rno=r(nye," \u2014 "),XP=n(nye,"A",{href:!0});var pst=s(XP);tno=r(pst,"XGLMConfig"),pst.forEach(t),ano=r(nye," (XGLM model)"),nye.forEach(t),nno=i(L),zg=n(L,"LI",{});var sye=s(zg);Nse=n(sye,"STRONG",{});var _st=s(Nse);sno=r(_st,"xlm"),_st.forEach(t),lno=r(sye," \u2014 "),zP=n(sye,"A",{href:!0});var ust=s(zP);ino=r(ust,"XLMConfig"),ust.forEach(t),dno=r(sye," (XLM model)"),sye.forEach(t),cno=i(L),Qg=n(L,"LI",{});var lye=s(Qg);qse=n(lye,"STRONG",{});var bst=s(qse);fno=r(bst,"xlm-prophetnet"),bst.forEach(t),mno=r(lye," \u2014 "),QP=n(lye,"A",{href:!0});var vst=s(QP);gno=r(vst,"XLMProphetNetConfig"),vst.forEach(t),hno=r(lye," (XLM-ProphetNet model)"),lye.forEach(t),pno=i(L),Wg=n(L,"LI",{});var iye=s(Wg);jse=n(iye,"STRONG",{});var Fst=s(jse);_no=r(Fst,"xlm-roberta"),Fst.forEach(t),uno=r(iye," \u2014 "),WP=n(iye,"A",{href:!0});var Tst=s(WP);bno=r(Tst,"XLMRobertaConfig"),Tst.forEach(t),vno=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),Fno=i(L),Hg=n(L,"LI",{});var dye=s(Hg);Dse=n(dye,"STRONG",{});var Mst=s(Dse);Tno=r(Mst,"xlm-roberta-xl"),Mst.forEach(t),Mno=r(dye," \u2014 "),HP=n(dye,"A",{href:!0});var Est=s(HP);Eno=r(Est,"XLMRobertaXLConfig"),Est.forEach(t),Cno=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),wno=i(L),Ug=n(L,"LI",{});var cye=s(Ug);Gse=n(cye,"STRONG",{});var Cst=s(Gse);Ano=r(Cst,"xlnet"),Cst.forEach(t),Lno=r(cye," \u2014 "),UP=n(cye,"A",{href:!0});var wst=s(UP);yno=r(wst,"XLNetConfig"),wst.forEach(t),xno=r(cye," (XLNet model)"),cye.forEach(t),$no=i(L),Jg=n(L,"LI",{});var fye=s(Jg);Ose=n(fye,"STRONG",{});var Ast=s(Ose);kno=r(Ast,"yolos"),Ast.forEach(t),Sno=r(fye," \u2014 "),JP=n(fye,"A",{href:!0});var Lst=s(JP);Rno=r(Lst,"YolosConfig"),Lst.forEach(t),Pno=r(fye," (YOLOS model)"),fye.forEach(t),Bno=i(L),Yg=n(L,"LI",{});var mye=s(Yg);Vse=n(mye,"STRONG",{});var yst=s(Vse);Ino=r(yst,"yoso"),yst.forEach(t),Nno=r(mye," \u2014 "),YP=n(mye,"A",{href:!0});var xst=s(YP);qno=r(xst,"YosoConfig"),xst.forEach(t),jno=r(mye," (YOSO model)"),mye.forEach(t),L.forEach(t),Dno=i(nt),T(Kg.$$.fragment,nt),nt.forEach(t),Gno=i(at),Zg=n(at,"DIV",{class:!0});var tQe=s(Zg);T(mL.$$.fragment,tQe),Ono=i(tQe),Xse=n(tQe,"P",{});var $st=s(Xse);Vno=r($st,"Register a new configuration for this class."),$st.forEach(t),tQe.forEach(t),at.forEach(t),aXe=i(f),Ii=n(f,"H2",{class:!0});var aQe=s(Ii);eh=n(aQe,"A",{id:!0,class:!0,href:!0});var kst=s(eh);zse=n(kst,"SPAN",{});var Sst=s(zse);T(gL.$$.fragment,Sst),Sst.forEach(t),kst.forEach(t),Xno=i(aQe),Qse=n(aQe,"SPAN",{});var Rst=s(Qse);zno=r(Rst,"AutoTokenizer"),Rst.forEach(t),aQe.forEach(t),nXe=i(f),Ao=n(f,"DIV",{class:!0});var Js=s(Ao);T(hL.$$.fragment,Js),Qno=i(Js),pL=n(Js,"P",{});var nQe=s(pL);Wno=r(nQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),KP=n(nQe,"A",{href:!0});var Pst=s(KP);Hno=r(Pst,"AutoTokenizer.from_pretrained()"),Pst.forEach(t),Uno=r(nQe," class method."),nQe.forEach(t),Jno=i(Js),_L=n(Js,"P",{});var sQe=s(_L);Yno=r(sQe,"This class cannot be instantiated directly using "),Wse=n(sQe,"CODE",{});var Bst=s(Wse);Kno=r(Bst,"__init__()"),Bst.forEach(t),Zno=r(sQe," (throws an error)."),sQe.forEach(t),eso=i(Js),Lr=n(Js,"DIV",{class:!0});var Ys=s(Lr);T(uL.$$.fragment,Ys),oso=i(Ys),Hse=n(Ys,"P",{});var Ist=s(Hse);rso=r(Ist,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ist.forEach(t),tso=i(Ys),Ra=n(Ys,"P",{});var lA=s(Ra);aso=r(lA,"The tokenizer class to instantiate is selected based on the "),Use=n(lA,"CODE",{});var Nst=s(Use);nso=r(Nst,"model_type"),Nst.forEach(t),sso=r(lA,` property of the config object (either
passed as an argument or loaded from `),Jse=n(lA,"CODE",{});var qst=s(Jse);lso=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),iso=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yse=n(lA,"CODE",{});var jst=s(Yse);dso=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),cso=r(lA,":"),lA.forEach(t),fso=i(Ys),k=n(Ys,"UL",{});var S=s(k);qn=n(S,"LI",{});var Mk=s(qn);Kse=n(Mk,"STRONG",{});var Dst=s(Kse);mso=r(Dst,"albert"),Dst.forEach(t),gso=r(Mk," \u2014 "),ZP=n(Mk,"A",{href:!0});var Gst=s(ZP);hso=r(Gst,"AlbertTokenizer"),Gst.forEach(t),pso=r(Mk," or "),eB=n(Mk,"A",{href:!0});var Ost=s(eB);_so=r(Ost,"AlbertTokenizerFast"),Ost.forEach(t),uso=r(Mk," (ALBERT model)"),Mk.forEach(t),bso=i(S),jn=n(S,"LI",{});var Ek=s(jn);Zse=n(Ek,"STRONG",{});var Vst=s(Zse);vso=r(Vst,"bart"),Vst.forEach(t),Fso=r(Ek," \u2014 "),oB=n(Ek,"A",{href:!0});var Xst=s(oB);Tso=r(Xst,"BartTokenizer"),Xst.forEach(t),Mso=r(Ek," or "),rB=n(Ek,"A",{href:!0});var zst=s(rB);Eso=r(zst,"BartTokenizerFast"),zst.forEach(t),Cso=r(Ek," (BART model)"),Ek.forEach(t),wso=i(S),Dn=n(S,"LI",{});var Ck=s(Dn);ele=n(Ck,"STRONG",{});var Qst=s(ele);Aso=r(Qst,"barthez"),Qst.forEach(t),Lso=r(Ck," \u2014 "),tB=n(Ck,"A",{href:!0});var Wst=s(tB);yso=r(Wst,"BarthezTokenizer"),Wst.forEach(t),xso=r(Ck," or "),aB=n(Ck,"A",{href:!0});var Hst=s(aB);$so=r(Hst,"BarthezTokenizerFast"),Hst.forEach(t),kso=r(Ck," (BARThez model)"),Ck.forEach(t),Sso=i(S),oh=n(S,"LI",{});var gye=s(oh);ole=n(gye,"STRONG",{});var Ust=s(ole);Rso=r(Ust,"bartpho"),Ust.forEach(t),Pso=r(gye," \u2014 "),nB=n(gye,"A",{href:!0});var Jst=s(nB);Bso=r(Jst,"BartphoTokenizer"),Jst.forEach(t),Iso=r(gye," (BARTpho model)"),gye.forEach(t),Nso=i(S),Gn=n(S,"LI",{});var wk=s(Gn);rle=n(wk,"STRONG",{});var Yst=s(rle);qso=r(Yst,"bert"),Yst.forEach(t),jso=r(wk," \u2014 "),sB=n(wk,"A",{href:!0});var Kst=s(sB);Dso=r(Kst,"BertTokenizer"),Kst.forEach(t),Gso=r(wk," or "),lB=n(wk,"A",{href:!0});var Zst=s(lB);Oso=r(Zst,"BertTokenizerFast"),Zst.forEach(t),Vso=r(wk," (BERT model)"),wk.forEach(t),Xso=i(S),rh=n(S,"LI",{});var hye=s(rh);tle=n(hye,"STRONG",{});var elt=s(tle);zso=r(elt,"bert-generation"),elt.forEach(t),Qso=r(hye," \u2014 "),iB=n(hye,"A",{href:!0});var olt=s(iB);Wso=r(olt,"BertGenerationTokenizer"),olt.forEach(t),Hso=r(hye," (Bert Generation model)"),hye.forEach(t),Uso=i(S),th=n(S,"LI",{});var pye=s(th);ale=n(pye,"STRONG",{});var rlt=s(ale);Jso=r(rlt,"bert-japanese"),rlt.forEach(t),Yso=r(pye," \u2014 "),dB=n(pye,"A",{href:!0});var tlt=s(dB);Kso=r(tlt,"BertJapaneseTokenizer"),tlt.forEach(t),Zso=r(pye," (BertJapanese model)"),pye.forEach(t),elo=i(S),ah=n(S,"LI",{});var _ye=s(ah);nle=n(_ye,"STRONG",{});var alt=s(nle);olo=r(alt,"bertweet"),alt.forEach(t),rlo=r(_ye," \u2014 "),cB=n(_ye,"A",{href:!0});var nlt=s(cB);tlo=r(nlt,"BertweetTokenizer"),nlt.forEach(t),alo=r(_ye," (BERTweet model)"),_ye.forEach(t),nlo=i(S),On=n(S,"LI",{});var Ak=s(On);sle=n(Ak,"STRONG",{});var slt=s(sle);slo=r(slt,"big_bird"),slt.forEach(t),llo=r(Ak," \u2014 "),fB=n(Ak,"A",{href:!0});var llt=s(fB);ilo=r(llt,"BigBirdTokenizer"),llt.forEach(t),dlo=r(Ak," or "),mB=n(Ak,"A",{href:!0});var ilt=s(mB);clo=r(ilt,"BigBirdTokenizerFast"),ilt.forEach(t),flo=r(Ak," (BigBird model)"),Ak.forEach(t),mlo=i(S),Vn=n(S,"LI",{});var Lk=s(Vn);lle=n(Lk,"STRONG",{});var dlt=s(lle);glo=r(dlt,"bigbird_pegasus"),dlt.forEach(t),hlo=r(Lk," \u2014 "),gB=n(Lk,"A",{href:!0});var clt=s(gB);plo=r(clt,"PegasusTokenizer"),clt.forEach(t),_lo=r(Lk," or "),hB=n(Lk,"A",{href:!0});var flt=s(hB);ulo=r(flt,"PegasusTokenizerFast"),flt.forEach(t),blo=r(Lk," (BigBird-Pegasus model)"),Lk.forEach(t),vlo=i(S),Xn=n(S,"LI",{});var yk=s(Xn);ile=n(yk,"STRONG",{});var mlt=s(ile);Flo=r(mlt,"blenderbot"),mlt.forEach(t),Tlo=r(yk," \u2014 "),pB=n(yk,"A",{href:!0});var glt=s(pB);Mlo=r(glt,"BlenderbotTokenizer"),glt.forEach(t),Elo=r(yk," or "),_B=n(yk,"A",{href:!0});var hlt=s(_B);Clo=r(hlt,"BlenderbotTokenizerFast"),hlt.forEach(t),wlo=r(yk," (Blenderbot model)"),yk.forEach(t),Alo=i(S),nh=n(S,"LI",{});var uye=s(nh);dle=n(uye,"STRONG",{});var plt=s(dle);Llo=r(plt,"blenderbot-small"),plt.forEach(t),ylo=r(uye," \u2014 "),uB=n(uye,"A",{href:!0});var _lt=s(uB);xlo=r(_lt,"BlenderbotSmallTokenizer"),_lt.forEach(t),$lo=r(uye," (BlenderbotSmall model)"),uye.forEach(t),klo=i(S),sh=n(S,"LI",{});var bye=s(sh);cle=n(bye,"STRONG",{});var ult=s(cle);Slo=r(ult,"bloom"),ult.forEach(t),Rlo=r(bye," \u2014 "),bB=n(bye,"A",{href:!0});var blt=s(bB);Plo=r(blt,"BloomTokenizerFast"),blt.forEach(t),Blo=r(bye," (BLOOM model)"),bye.forEach(t),Ilo=i(S),lh=n(S,"LI",{});var vye=s(lh);fle=n(vye,"STRONG",{});var vlt=s(fle);Nlo=r(vlt,"byt5"),vlt.forEach(t),qlo=r(vye," \u2014 "),vB=n(vye,"A",{href:!0});var Flt=s(vB);jlo=r(Flt,"ByT5Tokenizer"),Flt.forEach(t),Dlo=r(vye," (ByT5 model)"),vye.forEach(t),Glo=i(S),zn=n(S,"LI",{});var xk=s(zn);mle=n(xk,"STRONG",{});var Tlt=s(mle);Olo=r(Tlt,"camembert"),Tlt.forEach(t),Vlo=r(xk," \u2014 "),FB=n(xk,"A",{href:!0});var Mlt=s(FB);Xlo=r(Mlt,"CamembertTokenizer"),Mlt.forEach(t),zlo=r(xk," or "),TB=n(xk,"A",{href:!0});var Elt=s(TB);Qlo=r(Elt,"CamembertTokenizerFast"),Elt.forEach(t),Wlo=r(xk," (CamemBERT model)"),xk.forEach(t),Hlo=i(S),ih=n(S,"LI",{});var Fye=s(ih);gle=n(Fye,"STRONG",{});var Clt=s(gle);Ulo=r(Clt,"canine"),Clt.forEach(t),Jlo=r(Fye," \u2014 "),MB=n(Fye,"A",{href:!0});var wlt=s(MB);Ylo=r(wlt,"CanineTokenizer"),wlt.forEach(t),Klo=r(Fye," (CANINE model)"),Fye.forEach(t),Zlo=i(S),Qn=n(S,"LI",{});var $k=s(Qn);hle=n($k,"STRONG",{});var Alt=s(hle);eio=r(Alt,"clip"),Alt.forEach(t),oio=r($k," \u2014 "),EB=n($k,"A",{href:!0});var Llt=s(EB);rio=r(Llt,"CLIPTokenizer"),Llt.forEach(t),tio=r($k," or "),CB=n($k,"A",{href:!0});var ylt=s(CB);aio=r(ylt,"CLIPTokenizerFast"),ylt.forEach(t),nio=r($k," (CLIP model)"),$k.forEach(t),sio=i(S),Wn=n(S,"LI",{});var kk=s(Wn);ple=n(kk,"STRONG",{});var xlt=s(ple);lio=r(xlt,"codegen"),xlt.forEach(t),iio=r(kk," \u2014 "),wB=n(kk,"A",{href:!0});var $lt=s(wB);dio=r($lt,"CodeGenTokenizer"),$lt.forEach(t),cio=r(kk," or "),AB=n(kk,"A",{href:!0});var klt=s(AB);fio=r(klt,"CodeGenTokenizerFast"),klt.forEach(t),mio=r(kk," (CodeGen model)"),kk.forEach(t),gio=i(S),Hn=n(S,"LI",{});var Sk=s(Hn);_le=n(Sk,"STRONG",{});var Slt=s(_le);hio=r(Slt,"convbert"),Slt.forEach(t),pio=r(Sk," \u2014 "),LB=n(Sk,"A",{href:!0});var Rlt=s(LB);_io=r(Rlt,"ConvBertTokenizer"),Rlt.forEach(t),uio=r(Sk," or "),yB=n(Sk,"A",{href:!0});var Plt=s(yB);bio=r(Plt,"ConvBertTokenizerFast"),Plt.forEach(t),vio=r(Sk," (ConvBERT model)"),Sk.forEach(t),Fio=i(S),Un=n(S,"LI",{});var Rk=s(Un);ule=n(Rk,"STRONG",{});var Blt=s(ule);Tio=r(Blt,"cpm"),Blt.forEach(t),Mio=r(Rk," \u2014 "),xB=n(Rk,"A",{href:!0});var Ilt=s(xB);Eio=r(Ilt,"CpmTokenizer"),Ilt.forEach(t),Cio=r(Rk," or "),$B=n(Rk,"A",{href:!0});var Nlt=s($B);wio=r(Nlt,"CpmTokenizerFast"),Nlt.forEach(t),Aio=r(Rk," (CPM model)"),Rk.forEach(t),Lio=i(S),dh=n(S,"LI",{});var Tye=s(dh);ble=n(Tye,"STRONG",{});var qlt=s(ble);yio=r(qlt,"ctrl"),qlt.forEach(t),xio=r(Tye," \u2014 "),kB=n(Tye,"A",{href:!0});var jlt=s(kB);$io=r(jlt,"CTRLTokenizer"),jlt.forEach(t),kio=r(Tye," (CTRL model)"),Tye.forEach(t),Sio=i(S),Jn=n(S,"LI",{});var Pk=s(Jn);vle=n(Pk,"STRONG",{});var Dlt=s(vle);Rio=r(Dlt,"data2vec-text"),Dlt.forEach(t),Pio=r(Pk," \u2014 "),SB=n(Pk,"A",{href:!0});var Glt=s(SB);Bio=r(Glt,"RobertaTokenizer"),Glt.forEach(t),Iio=r(Pk," or "),RB=n(Pk,"A",{href:!0});var Olt=s(RB);Nio=r(Olt,"RobertaTokenizerFast"),Olt.forEach(t),qio=r(Pk," (Data2VecText model)"),Pk.forEach(t),jio=i(S),Yn=n(S,"LI",{});var Bk=s(Yn);Fle=n(Bk,"STRONG",{});var Vlt=s(Fle);Dio=r(Vlt,"deberta"),Vlt.forEach(t),Gio=r(Bk," \u2014 "),PB=n(Bk,"A",{href:!0});var Xlt=s(PB);Oio=r(Xlt,"DebertaTokenizer"),Xlt.forEach(t),Vio=r(Bk," or "),BB=n(Bk,"A",{href:!0});var zlt=s(BB);Xio=r(zlt,"DebertaTokenizerFast"),zlt.forEach(t),zio=r(Bk," (DeBERTa model)"),Bk.forEach(t),Qio=i(S),Kn=n(S,"LI",{});var Ik=s(Kn);Tle=n(Ik,"STRONG",{});var Qlt=s(Tle);Wio=r(Qlt,"deberta-v2"),Qlt.forEach(t),Hio=r(Ik," \u2014 "),IB=n(Ik,"A",{href:!0});var Wlt=s(IB);Uio=r(Wlt,"DebertaV2Tokenizer"),Wlt.forEach(t),Jio=r(Ik," or "),NB=n(Ik,"A",{href:!0});var Hlt=s(NB);Yio=r(Hlt,"DebertaV2TokenizerFast"),Hlt.forEach(t),Kio=r(Ik," (DeBERTa-v2 model)"),Ik.forEach(t),Zio=i(S),Zn=n(S,"LI",{});var Nk=s(Zn);Mle=n(Nk,"STRONG",{});var Ult=s(Mle);edo=r(Ult,"distilbert"),Ult.forEach(t),odo=r(Nk," \u2014 "),qB=n(Nk,"A",{href:!0});var Jlt=s(qB);rdo=r(Jlt,"DistilBertTokenizer"),Jlt.forEach(t),tdo=r(Nk," or "),jB=n(Nk,"A",{href:!0});var Ylt=s(jB);ado=r(Ylt,"DistilBertTokenizerFast"),Ylt.forEach(t),ndo=r(Nk," (DistilBERT model)"),Nk.forEach(t),sdo=i(S),es=n(S,"LI",{});var qk=s(es);Ele=n(qk,"STRONG",{});var Klt=s(Ele);ldo=r(Klt,"dpr"),Klt.forEach(t),ido=r(qk," \u2014 "),DB=n(qk,"A",{href:!0});var Zlt=s(DB);ddo=r(Zlt,"DPRQuestionEncoderTokenizer"),Zlt.forEach(t),cdo=r(qk," or "),GB=n(qk,"A",{href:!0});var eit=s(GB);fdo=r(eit,"DPRQuestionEncoderTokenizerFast"),eit.forEach(t),mdo=r(qk," (DPR model)"),qk.forEach(t),gdo=i(S),os=n(S,"LI",{});var jk=s(os);Cle=n(jk,"STRONG",{});var oit=s(Cle);hdo=r(oit,"electra"),oit.forEach(t),pdo=r(jk," \u2014 "),OB=n(jk,"A",{href:!0});var rit=s(OB);_do=r(rit,"ElectraTokenizer"),rit.forEach(t),udo=r(jk," or "),VB=n(jk,"A",{href:!0});var tit=s(VB);bdo=r(tit,"ElectraTokenizerFast"),tit.forEach(t),vdo=r(jk," (ELECTRA model)"),jk.forEach(t),Fdo=i(S),ch=n(S,"LI",{});var Mye=s(ch);wle=n(Mye,"STRONG",{});var ait=s(wle);Tdo=r(ait,"flaubert"),ait.forEach(t),Mdo=r(Mye," \u2014 "),XB=n(Mye,"A",{href:!0});var nit=s(XB);Edo=r(nit,"FlaubertTokenizer"),nit.forEach(t),Cdo=r(Mye," (FlauBERT model)"),Mye.forEach(t),wdo=i(S),rs=n(S,"LI",{});var Dk=s(rs);Ale=n(Dk,"STRONG",{});var sit=s(Ale);Ado=r(sit,"fnet"),sit.forEach(t),Ldo=r(Dk," \u2014 "),zB=n(Dk,"A",{href:!0});var lit=s(zB);ydo=r(lit,"FNetTokenizer"),lit.forEach(t),xdo=r(Dk," or "),QB=n(Dk,"A",{href:!0});var iit=s(QB);$do=r(iit,"FNetTokenizerFast"),iit.forEach(t),kdo=r(Dk," (FNet model)"),Dk.forEach(t),Sdo=i(S),fh=n(S,"LI",{});var Eye=s(fh);Lle=n(Eye,"STRONG",{});var dit=s(Lle);Rdo=r(dit,"fsmt"),dit.forEach(t),Pdo=r(Eye," \u2014 "),WB=n(Eye,"A",{href:!0});var cit=s(WB);Bdo=r(cit,"FSMTTokenizer"),cit.forEach(t),Ido=r(Eye," (FairSeq Machine-Translation model)"),Eye.forEach(t),Ndo=i(S),ts=n(S,"LI",{});var Gk=s(ts);yle=n(Gk,"STRONG",{});var fit=s(yle);qdo=r(fit,"funnel"),fit.forEach(t),jdo=r(Gk," \u2014 "),HB=n(Gk,"A",{href:!0});var mit=s(HB);Ddo=r(mit,"FunnelTokenizer"),mit.forEach(t),Gdo=r(Gk," or "),UB=n(Gk,"A",{href:!0});var git=s(UB);Odo=r(git,"FunnelTokenizerFast"),git.forEach(t),Vdo=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),Xdo=i(S),as=n(S,"LI",{});var Ok=s(as);xle=n(Ok,"STRONG",{});var hit=s(xle);zdo=r(hit,"gpt2"),hit.forEach(t),Qdo=r(Ok," \u2014 "),JB=n(Ok,"A",{href:!0});var pit=s(JB);Wdo=r(pit,"GPT2Tokenizer"),pit.forEach(t),Hdo=r(Ok," or "),YB=n(Ok,"A",{href:!0});var _it=s(YB);Udo=r(_it,"GPT2TokenizerFast"),_it.forEach(t),Jdo=r(Ok," (OpenAI GPT-2 model)"),Ok.forEach(t),Ydo=i(S),ns=n(S,"LI",{});var Vk=s(ns);$le=n(Vk,"STRONG",{});var uit=s($le);Kdo=r(uit,"gpt_neo"),uit.forEach(t),Zdo=r(Vk," \u2014 "),KB=n(Vk,"A",{href:!0});var bit=s(KB);eco=r(bit,"GPT2Tokenizer"),bit.forEach(t),oco=r(Vk," or "),ZB=n(Vk,"A",{href:!0});var vit=s(ZB);rco=r(vit,"GPT2TokenizerFast"),vit.forEach(t),tco=r(Vk," (GPT Neo model)"),Vk.forEach(t),aco=i(S),mh=n(S,"LI",{});var Cye=s(mh);kle=n(Cye,"STRONG",{});var Fit=s(kle);nco=r(Fit,"gpt_neox"),Fit.forEach(t),sco=r(Cye," \u2014 "),eI=n(Cye,"A",{href:!0});var Tit=s(eI);lco=r(Tit,"GPTNeoXTokenizerFast"),Tit.forEach(t),ico=r(Cye," (GPT NeoX model)"),Cye.forEach(t),dco=i(S),ss=n(S,"LI",{});var Xk=s(ss);Sle=n(Xk,"STRONG",{});var Mit=s(Sle);cco=r(Mit,"gptj"),Mit.forEach(t),fco=r(Xk," \u2014 "),oI=n(Xk,"A",{href:!0});var Eit=s(oI);mco=r(Eit,"GPT2Tokenizer"),Eit.forEach(t),gco=r(Xk," or "),rI=n(Xk,"A",{href:!0});var Cit=s(rI);hco=r(Cit,"GPT2TokenizerFast"),Cit.forEach(t),pco=r(Xk," (GPT-J model)"),Xk.forEach(t),_co=i(S),ls=n(S,"LI",{});var zk=s(ls);Rle=n(zk,"STRONG",{});var wit=s(Rle);uco=r(wit,"groupvit"),wit.forEach(t),bco=r(zk," \u2014 "),tI=n(zk,"A",{href:!0});var Ait=s(tI);vco=r(Ait,"CLIPTokenizer"),Ait.forEach(t),Fco=r(zk," or "),aI=n(zk,"A",{href:!0});var Lit=s(aI);Tco=r(Lit,"CLIPTokenizerFast"),Lit.forEach(t),Mco=r(zk," (GroupViT model)"),zk.forEach(t),Eco=i(S),is=n(S,"LI",{});var Qk=s(is);Ple=n(Qk,"STRONG",{});var yit=s(Ple);Cco=r(yit,"herbert"),yit.forEach(t),wco=r(Qk," \u2014 "),nI=n(Qk,"A",{href:!0});var xit=s(nI);Aco=r(xit,"HerbertTokenizer"),xit.forEach(t),Lco=r(Qk," or "),sI=n(Qk,"A",{href:!0});var $it=s(sI);yco=r($it,"HerbertTokenizerFast"),$it.forEach(t),xco=r(Qk," (HerBERT model)"),Qk.forEach(t),$co=i(S),gh=n(S,"LI",{});var wye=s(gh);Ble=n(wye,"STRONG",{});var kit=s(Ble);kco=r(kit,"hubert"),kit.forEach(t),Sco=r(wye," \u2014 "),lI=n(wye,"A",{href:!0});var Sit=s(lI);Rco=r(Sit,"Wav2Vec2CTCTokenizer"),Sit.forEach(t),Pco=r(wye," (Hubert model)"),wye.forEach(t),Bco=i(S),ds=n(S,"LI",{});var Wk=s(ds);Ile=n(Wk,"STRONG",{});var Rit=s(Ile);Ico=r(Rit,"ibert"),Rit.forEach(t),Nco=r(Wk," \u2014 "),iI=n(Wk,"A",{href:!0});var Pit=s(iI);qco=r(Pit,"RobertaTokenizer"),Pit.forEach(t),jco=r(Wk," or "),dI=n(Wk,"A",{href:!0});var Bit=s(dI);Dco=r(Bit,"RobertaTokenizerFast"),Bit.forEach(t),Gco=r(Wk," (I-BERT model)"),Wk.forEach(t),Oco=i(S),cs=n(S,"LI",{});var Hk=s(cs);Nle=n(Hk,"STRONG",{});var Iit=s(Nle);Vco=r(Iit,"layoutlm"),Iit.forEach(t),Xco=r(Hk," \u2014 "),cI=n(Hk,"A",{href:!0});var Nit=s(cI);zco=r(Nit,"LayoutLMTokenizer"),Nit.forEach(t),Qco=r(Hk," or "),fI=n(Hk,"A",{href:!0});var qit=s(fI);Wco=r(qit,"LayoutLMTokenizerFast"),qit.forEach(t),Hco=r(Hk," (LayoutLM model)"),Hk.forEach(t),Uco=i(S),fs=n(S,"LI",{});var Uk=s(fs);qle=n(Uk,"STRONG",{});var jit=s(qle);Jco=r(jit,"layoutlmv2"),jit.forEach(t),Yco=r(Uk," \u2014 "),mI=n(Uk,"A",{href:!0});var Dit=s(mI);Kco=r(Dit,"LayoutLMv2Tokenizer"),Dit.forEach(t),Zco=r(Uk," or "),gI=n(Uk,"A",{href:!0});var Git=s(gI);efo=r(Git,"LayoutLMv2TokenizerFast"),Git.forEach(t),ofo=r(Uk," (LayoutLMv2 model)"),Uk.forEach(t),rfo=i(S),ms=n(S,"LI",{});var Jk=s(ms);jle=n(Jk,"STRONG",{});var Oit=s(jle);tfo=r(Oit,"layoutlmv3"),Oit.forEach(t),afo=r(Jk," \u2014 "),hI=n(Jk,"A",{href:!0});var Vit=s(hI);nfo=r(Vit,"LayoutLMv3Tokenizer"),Vit.forEach(t),sfo=r(Jk," or "),pI=n(Jk,"A",{href:!0});var Xit=s(pI);lfo=r(Xit,"LayoutLMv3TokenizerFast"),Xit.forEach(t),ifo=r(Jk," (LayoutLMv3 model)"),Jk.forEach(t),dfo=i(S),gs=n(S,"LI",{});var Yk=s(gs);Dle=n(Yk,"STRONG",{});var zit=s(Dle);cfo=r(zit,"layoutxlm"),zit.forEach(t),ffo=r(Yk," \u2014 "),_I=n(Yk,"A",{href:!0});var Qit=s(_I);mfo=r(Qit,"LayoutXLMTokenizer"),Qit.forEach(t),gfo=r(Yk," or "),uI=n(Yk,"A",{href:!0});var Wit=s(uI);hfo=r(Wit,"LayoutXLMTokenizerFast"),Wit.forEach(t),pfo=r(Yk," (LayoutXLM model)"),Yk.forEach(t),_fo=i(S),hs=n(S,"LI",{});var Kk=s(hs);Gle=n(Kk,"STRONG",{});var Hit=s(Gle);ufo=r(Hit,"led"),Hit.forEach(t),bfo=r(Kk," \u2014 "),bI=n(Kk,"A",{href:!0});var Uit=s(bI);vfo=r(Uit,"LEDTokenizer"),Uit.forEach(t),Ffo=r(Kk," or "),vI=n(Kk,"A",{href:!0});var Jit=s(vI);Tfo=r(Jit,"LEDTokenizerFast"),Jit.forEach(t),Mfo=r(Kk," (LED model)"),Kk.forEach(t),Efo=i(S),ps=n(S,"LI",{});var Zk=s(ps);Ole=n(Zk,"STRONG",{});var Yit=s(Ole);Cfo=r(Yit,"longformer"),Yit.forEach(t),wfo=r(Zk," \u2014 "),FI=n(Zk,"A",{href:!0});var Kit=s(FI);Afo=r(Kit,"LongformerTokenizer"),Kit.forEach(t),Lfo=r(Zk," or "),TI=n(Zk,"A",{href:!0});var Zit=s(TI);yfo=r(Zit,"LongformerTokenizerFast"),Zit.forEach(t),xfo=r(Zk," (Longformer model)"),Zk.forEach(t),$fo=i(S),_s=n(S,"LI",{});var eS=s(_s);Vle=n(eS,"STRONG",{});var edt=s(Vle);kfo=r(edt,"longt5"),edt.forEach(t),Sfo=r(eS," \u2014 "),MI=n(eS,"A",{href:!0});var odt=s(MI);Rfo=r(odt,"T5Tokenizer"),odt.forEach(t),Pfo=r(eS," or "),EI=n(eS,"A",{href:!0});var rdt=s(EI);Bfo=r(rdt,"T5TokenizerFast"),rdt.forEach(t),Ifo=r(eS," (LongT5 model)"),eS.forEach(t),Nfo=i(S),hh=n(S,"LI",{});var Aye=s(hh);Xle=n(Aye,"STRONG",{});var tdt=s(Xle);qfo=r(tdt,"luke"),tdt.forEach(t),jfo=r(Aye," \u2014 "),CI=n(Aye,"A",{href:!0});var adt=s(CI);Dfo=r(adt,"LukeTokenizer"),adt.forEach(t),Gfo=r(Aye," (LUKE model)"),Aye.forEach(t),Ofo=i(S),us=n(S,"LI",{});var oS=s(us);zle=n(oS,"STRONG",{});var ndt=s(zle);Vfo=r(ndt,"lxmert"),ndt.forEach(t),Xfo=r(oS," \u2014 "),wI=n(oS,"A",{href:!0});var sdt=s(wI);zfo=r(sdt,"LxmertTokenizer"),sdt.forEach(t),Qfo=r(oS," or "),AI=n(oS,"A",{href:!0});var ldt=s(AI);Wfo=r(ldt,"LxmertTokenizerFast"),ldt.forEach(t),Hfo=r(oS," (LXMERT model)"),oS.forEach(t),Ufo=i(S),ph=n(S,"LI",{});var Lye=s(ph);Qle=n(Lye,"STRONG",{});var idt=s(Qle);Jfo=r(idt,"m2m_100"),idt.forEach(t),Yfo=r(Lye," \u2014 "),LI=n(Lye,"A",{href:!0});var ddt=s(LI);Kfo=r(ddt,"M2M100Tokenizer"),ddt.forEach(t),Zfo=r(Lye," (M2M100 model)"),Lye.forEach(t),emo=i(S),_h=n(S,"LI",{});var yye=s(_h);Wle=n(yye,"STRONG",{});var cdt=s(Wle);omo=r(cdt,"marian"),cdt.forEach(t),rmo=r(yye," \u2014 "),yI=n(yye,"A",{href:!0});var fdt=s(yI);tmo=r(fdt,"MarianTokenizer"),fdt.forEach(t),amo=r(yye," (Marian model)"),yye.forEach(t),nmo=i(S),bs=n(S,"LI",{});var rS=s(bs);Hle=n(rS,"STRONG",{});var mdt=s(Hle);smo=r(mdt,"mbart"),mdt.forEach(t),lmo=r(rS," \u2014 "),xI=n(rS,"A",{href:!0});var gdt=s(xI);imo=r(gdt,"MBartTokenizer"),gdt.forEach(t),dmo=r(rS," or "),$I=n(rS,"A",{href:!0});var hdt=s($I);cmo=r(hdt,"MBartTokenizerFast"),hdt.forEach(t),fmo=r(rS," (mBART model)"),rS.forEach(t),mmo=i(S),vs=n(S,"LI",{});var tS=s(vs);Ule=n(tS,"STRONG",{});var pdt=s(Ule);gmo=r(pdt,"mbart50"),pdt.forEach(t),hmo=r(tS," \u2014 "),kI=n(tS,"A",{href:!0});var _dt=s(kI);pmo=r(_dt,"MBart50Tokenizer"),_dt.forEach(t),_mo=r(tS," or "),SI=n(tS,"A",{href:!0});var udt=s(SI);umo=r(udt,"MBart50TokenizerFast"),udt.forEach(t),bmo=r(tS," (mBART-50 model)"),tS.forEach(t),vmo=i(S),Fs=n(S,"LI",{});var aS=s(Fs);Jle=n(aS,"STRONG",{});var bdt=s(Jle);Fmo=r(bdt,"megatron-bert"),bdt.forEach(t),Tmo=r(aS," \u2014 "),RI=n(aS,"A",{href:!0});var vdt=s(RI);Mmo=r(vdt,"BertTokenizer"),vdt.forEach(t),Emo=r(aS," or "),PI=n(aS,"A",{href:!0});var Fdt=s(PI);Cmo=r(Fdt,"BertTokenizerFast"),Fdt.forEach(t),wmo=r(aS," (Megatron-BERT model)"),aS.forEach(t),Amo=i(S),uh=n(S,"LI",{});var xye=s(uh);Yle=n(xye,"STRONG",{});var Tdt=s(Yle);Lmo=r(Tdt,"mluke"),Tdt.forEach(t),ymo=r(xye," \u2014 "),BI=n(xye,"A",{href:!0});var Mdt=s(BI);xmo=r(Mdt,"MLukeTokenizer"),Mdt.forEach(t),$mo=r(xye," (mLUKE model)"),xye.forEach(t),kmo=i(S),Ts=n(S,"LI",{});var nS=s(Ts);Kle=n(nS,"STRONG",{});var Edt=s(Kle);Smo=r(Edt,"mobilebert"),Edt.forEach(t),Rmo=r(nS," \u2014 "),II=n(nS,"A",{href:!0});var Cdt=s(II);Pmo=r(Cdt,"MobileBertTokenizer"),Cdt.forEach(t),Bmo=r(nS," or "),NI=n(nS,"A",{href:!0});var wdt=s(NI);Imo=r(wdt,"MobileBertTokenizerFast"),wdt.forEach(t),Nmo=r(nS," (MobileBERT model)"),nS.forEach(t),qmo=i(S),Ms=n(S,"LI",{});var sS=s(Ms);Zle=n(sS,"STRONG",{});var Adt=s(Zle);jmo=r(Adt,"mpnet"),Adt.forEach(t),Dmo=r(sS," \u2014 "),qI=n(sS,"A",{href:!0});var Ldt=s(qI);Gmo=r(Ldt,"MPNetTokenizer"),Ldt.forEach(t),Omo=r(sS," or "),jI=n(sS,"A",{href:!0});var ydt=s(jI);Vmo=r(ydt,"MPNetTokenizerFast"),ydt.forEach(t),Xmo=r(sS," (MPNet model)"),sS.forEach(t),zmo=i(S),Es=n(S,"LI",{});var lS=s(Es);eie=n(lS,"STRONG",{});var xdt=s(eie);Qmo=r(xdt,"mt5"),xdt.forEach(t),Wmo=r(lS," \u2014 "),DI=n(lS,"A",{href:!0});var $dt=s(DI);Hmo=r($dt,"MT5Tokenizer"),$dt.forEach(t),Umo=r(lS," or "),GI=n(lS,"A",{href:!0});var kdt=s(GI);Jmo=r(kdt,"MT5TokenizerFast"),kdt.forEach(t),Ymo=r(lS," (MT5 model)"),lS.forEach(t),Kmo=i(S),Cs=n(S,"LI",{});var iS=s(Cs);oie=n(iS,"STRONG",{});var Sdt=s(oie);Zmo=r(Sdt,"mvp"),Sdt.forEach(t),ego=r(iS," \u2014 "),OI=n(iS,"A",{href:!0});var Rdt=s(OI);ogo=r(Rdt,"MvpTokenizer"),Rdt.forEach(t),rgo=r(iS," or "),VI=n(iS,"A",{href:!0});var Pdt=s(VI);tgo=r(Pdt,"MvpTokenizerFast"),Pdt.forEach(t),ago=r(iS," (MVP model)"),iS.forEach(t),ngo=i(S),ws=n(S,"LI",{});var dS=s(ws);rie=n(dS,"STRONG",{});var Bdt=s(rie);sgo=r(Bdt,"nezha"),Bdt.forEach(t),lgo=r(dS," \u2014 "),XI=n(dS,"A",{href:!0});var Idt=s(XI);igo=r(Idt,"BertTokenizer"),Idt.forEach(t),dgo=r(dS," or "),zI=n(dS,"A",{href:!0});var Ndt=s(zI);cgo=r(Ndt,"BertTokenizerFast"),Ndt.forEach(t),fgo=r(dS," (Nezha model)"),dS.forEach(t),mgo=i(S),As=n(S,"LI",{});var cS=s(As);tie=n(cS,"STRONG",{});var qdt=s(tie);ggo=r(qdt,"nystromformer"),qdt.forEach(t),hgo=r(cS," \u2014 "),QI=n(cS,"A",{href:!0});var jdt=s(QI);pgo=r(jdt,"AlbertTokenizer"),jdt.forEach(t),_go=r(cS," or "),WI=n(cS,"A",{href:!0});var Ddt=s(WI);ugo=r(Ddt,"AlbertTokenizerFast"),Ddt.forEach(t),bgo=r(cS," (Nystr\xF6mformer model)"),cS.forEach(t),vgo=i(S),Ls=n(S,"LI",{});var fS=s(Ls);aie=n(fS,"STRONG",{});var Gdt=s(aie);Fgo=r(Gdt,"openai-gpt"),Gdt.forEach(t),Tgo=r(fS," \u2014 "),HI=n(fS,"A",{href:!0});var Odt=s(HI);Mgo=r(Odt,"OpenAIGPTTokenizer"),Odt.forEach(t),Ego=r(fS," or "),UI=n(fS,"A",{href:!0});var Vdt=s(UI);Cgo=r(Vdt,"OpenAIGPTTokenizerFast"),Vdt.forEach(t),wgo=r(fS," (OpenAI GPT model)"),fS.forEach(t),Ago=i(S),bh=n(S,"LI",{});var $ye=s(bh);nie=n($ye,"STRONG",{});var Xdt=s(nie);Lgo=r(Xdt,"opt"),Xdt.forEach(t),ygo=r($ye," \u2014 "),JI=n($ye,"A",{href:!0});var zdt=s(JI);xgo=r(zdt,"GPT2Tokenizer"),zdt.forEach(t),$go=r($ye," (OPT model)"),$ye.forEach(t),kgo=i(S),ys=n(S,"LI",{});var mS=s(ys);sie=n(mS,"STRONG",{});var Qdt=s(sie);Sgo=r(Qdt,"pegasus"),Qdt.forEach(t),Rgo=r(mS," \u2014 "),YI=n(mS,"A",{href:!0});var Wdt=s(YI);Pgo=r(Wdt,"PegasusTokenizer"),Wdt.forEach(t),Bgo=r(mS," or "),KI=n(mS,"A",{href:!0});var Hdt=s(KI);Igo=r(Hdt,"PegasusTokenizerFast"),Hdt.forEach(t),Ngo=r(mS," (Pegasus model)"),mS.forEach(t),qgo=i(S),vh=n(S,"LI",{});var kye=s(vh);lie=n(kye,"STRONG",{});var Udt=s(lie);jgo=r(Udt,"perceiver"),Udt.forEach(t),Dgo=r(kye," \u2014 "),ZI=n(kye,"A",{href:!0});var Jdt=s(ZI);Ggo=r(Jdt,"PerceiverTokenizer"),Jdt.forEach(t),Ogo=r(kye," (Perceiver model)"),kye.forEach(t),Vgo=i(S),Fh=n(S,"LI",{});var Sye=s(Fh);iie=n(Sye,"STRONG",{});var Ydt=s(iie);Xgo=r(Ydt,"phobert"),Ydt.forEach(t),zgo=r(Sye," \u2014 "),eN=n(Sye,"A",{href:!0});var Kdt=s(eN);Qgo=r(Kdt,"PhobertTokenizer"),Kdt.forEach(t),Wgo=r(Sye," (PhoBERT model)"),Sye.forEach(t),Hgo=i(S),Th=n(S,"LI",{});var Rye=s(Th);die=n(Rye,"STRONG",{});var Zdt=s(die);Ugo=r(Zdt,"plbart"),Zdt.forEach(t),Jgo=r(Rye," \u2014 "),oN=n(Rye,"A",{href:!0});var ect=s(oN);Ygo=r(ect,"PLBartTokenizer"),ect.forEach(t),Kgo=r(Rye," (PLBart model)"),Rye.forEach(t),Zgo=i(S),Mh=n(S,"LI",{});var Pye=s(Mh);cie=n(Pye,"STRONG",{});var oct=s(cie);eho=r(oct,"prophetnet"),oct.forEach(t),oho=r(Pye," \u2014 "),rN=n(Pye,"A",{href:!0});var rct=s(rN);rho=r(rct,"ProphetNetTokenizer"),rct.forEach(t),tho=r(Pye," (ProphetNet model)"),Pye.forEach(t),aho=i(S),xs=n(S,"LI",{});var gS=s(xs);fie=n(gS,"STRONG",{});var tct=s(fie);nho=r(tct,"qdqbert"),tct.forEach(t),sho=r(gS," \u2014 "),tN=n(gS,"A",{href:!0});var act=s(tN);lho=r(act,"BertTokenizer"),act.forEach(t),iho=r(gS," or "),aN=n(gS,"A",{href:!0});var nct=s(aN);dho=r(nct,"BertTokenizerFast"),nct.forEach(t),cho=r(gS," (QDQBert model)"),gS.forEach(t),fho=i(S),Eh=n(S,"LI",{});var Bye=s(Eh);mie=n(Bye,"STRONG",{});var sct=s(mie);mho=r(sct,"rag"),sct.forEach(t),gho=r(Bye," \u2014 "),nN=n(Bye,"A",{href:!0});var lct=s(nN);hho=r(lct,"RagTokenizer"),lct.forEach(t),pho=r(Bye," (RAG model)"),Bye.forEach(t),_ho=i(S),$s=n(S,"LI",{});var hS=s($s);gie=n(hS,"STRONG",{});var ict=s(gie);uho=r(ict,"realm"),ict.forEach(t),bho=r(hS," \u2014 "),sN=n(hS,"A",{href:!0});var dct=s(sN);vho=r(dct,"RealmTokenizer"),dct.forEach(t),Fho=r(hS," or "),lN=n(hS,"A",{href:!0});var cct=s(lN);Tho=r(cct,"RealmTokenizerFast"),cct.forEach(t),Mho=r(hS," (REALM model)"),hS.forEach(t),Eho=i(S),ks=n(S,"LI",{});var pS=s(ks);hie=n(pS,"STRONG",{});var fct=s(hie);Cho=r(fct,"reformer"),fct.forEach(t),who=r(pS," \u2014 "),iN=n(pS,"A",{href:!0});var mct=s(iN);Aho=r(mct,"ReformerTokenizer"),mct.forEach(t),Lho=r(pS," or "),dN=n(pS,"A",{href:!0});var gct=s(dN);yho=r(gct,"ReformerTokenizerFast"),gct.forEach(t),xho=r(pS," (Reformer model)"),pS.forEach(t),$ho=i(S),Ss=n(S,"LI",{});var _S=s(Ss);pie=n(_S,"STRONG",{});var hct=s(pie);kho=r(hct,"rembert"),hct.forEach(t),Sho=r(_S," \u2014 "),cN=n(_S,"A",{href:!0});var pct=s(cN);Rho=r(pct,"RemBertTokenizer"),pct.forEach(t),Pho=r(_S," or "),fN=n(_S,"A",{href:!0});var _ct=s(fN);Bho=r(_ct,"RemBertTokenizerFast"),_ct.forEach(t),Iho=r(_S," (RemBERT model)"),_S.forEach(t),Nho=i(S),Rs=n(S,"LI",{});var uS=s(Rs);_ie=n(uS,"STRONG",{});var uct=s(_ie);qho=r(uct,"retribert"),uct.forEach(t),jho=r(uS," \u2014 "),mN=n(uS,"A",{href:!0});var bct=s(mN);Dho=r(bct,"RetriBertTokenizer"),bct.forEach(t),Gho=r(uS," or "),gN=n(uS,"A",{href:!0});var vct=s(gN);Oho=r(vct,"RetriBertTokenizerFast"),vct.forEach(t),Vho=r(uS," (RetriBERT model)"),uS.forEach(t),Xho=i(S),Ps=n(S,"LI",{});var bS=s(Ps);uie=n(bS,"STRONG",{});var Fct=s(uie);zho=r(Fct,"roberta"),Fct.forEach(t),Qho=r(bS," \u2014 "),hN=n(bS,"A",{href:!0});var Tct=s(hN);Who=r(Tct,"RobertaTokenizer"),Tct.forEach(t),Hho=r(bS," or "),pN=n(bS,"A",{href:!0});var Mct=s(pN);Uho=r(Mct,"RobertaTokenizerFast"),Mct.forEach(t),Jho=r(bS," (RoBERTa model)"),bS.forEach(t),Yho=i(S),Bs=n(S,"LI",{});var vS=s(Bs);bie=n(vS,"STRONG",{});var Ect=s(bie);Kho=r(Ect,"roformer"),Ect.forEach(t),Zho=r(vS," \u2014 "),_N=n(vS,"A",{href:!0});var Cct=s(_N);epo=r(Cct,"RoFormerTokenizer"),Cct.forEach(t),opo=r(vS," or "),uN=n(vS,"A",{href:!0});var wct=s(uN);rpo=r(wct,"RoFormerTokenizerFast"),wct.forEach(t),tpo=r(vS," (RoFormer model)"),vS.forEach(t),apo=i(S),Ch=n(S,"LI",{});var Iye=s(Ch);vie=n(Iye,"STRONG",{});var Act=s(vie);npo=r(Act,"speech_to_text"),Act.forEach(t),spo=r(Iye," \u2014 "),bN=n(Iye,"A",{href:!0});var Lct=s(bN);lpo=r(Lct,"Speech2TextTokenizer"),Lct.forEach(t),ipo=r(Iye," (Speech2Text model)"),Iye.forEach(t),dpo=i(S),wh=n(S,"LI",{});var Nye=s(wh);Fie=n(Nye,"STRONG",{});var yct=s(Fie);cpo=r(yct,"speech_to_text_2"),yct.forEach(t),fpo=r(Nye," \u2014 "),vN=n(Nye,"A",{href:!0});var xct=s(vN);mpo=r(xct,"Speech2Text2Tokenizer"),xct.forEach(t),gpo=r(Nye," (Speech2Text2 model)"),Nye.forEach(t),hpo=i(S),Is=n(S,"LI",{});var FS=s(Is);Tie=n(FS,"STRONG",{});var $ct=s(Tie);ppo=r($ct,"splinter"),$ct.forEach(t),_po=r(FS," \u2014 "),FN=n(FS,"A",{href:!0});var kct=s(FN);upo=r(kct,"SplinterTokenizer"),kct.forEach(t),bpo=r(FS," or "),TN=n(FS,"A",{href:!0});var Sct=s(TN);vpo=r(Sct,"SplinterTokenizerFast"),Sct.forEach(t),Fpo=r(FS," (Splinter model)"),FS.forEach(t),Tpo=i(S),Ns=n(S,"LI",{});var TS=s(Ns);Mie=n(TS,"STRONG",{});var Rct=s(Mie);Mpo=r(Rct,"squeezebert"),Rct.forEach(t),Epo=r(TS," \u2014 "),MN=n(TS,"A",{href:!0});var Pct=s(MN);Cpo=r(Pct,"SqueezeBertTokenizer"),Pct.forEach(t),wpo=r(TS," or "),EN=n(TS,"A",{href:!0});var Bct=s(EN);Apo=r(Bct,"SqueezeBertTokenizerFast"),Bct.forEach(t),Lpo=r(TS," (SqueezeBERT model)"),TS.forEach(t),ypo=i(S),qs=n(S,"LI",{});var MS=s(qs);Eie=n(MS,"STRONG",{});var Ict=s(Eie);xpo=r(Ict,"t5"),Ict.forEach(t),$po=r(MS," \u2014 "),CN=n(MS,"A",{href:!0});var Nct=s(CN);kpo=r(Nct,"T5Tokenizer"),Nct.forEach(t),Spo=r(MS," or "),wN=n(MS,"A",{href:!0});var qct=s(wN);Rpo=r(qct,"T5TokenizerFast"),qct.forEach(t),Ppo=r(MS," (T5 model)"),MS.forEach(t),Bpo=i(S),Ah=n(S,"LI",{});var qye=s(Ah);Cie=n(qye,"STRONG",{});var jct=s(Cie);Ipo=r(jct,"tapas"),jct.forEach(t),Npo=r(qye," \u2014 "),AN=n(qye,"A",{href:!0});var Dct=s(AN);qpo=r(Dct,"TapasTokenizer"),Dct.forEach(t),jpo=r(qye," (TAPAS model)"),qye.forEach(t),Dpo=i(S),Lh=n(S,"LI",{});var jye=s(Lh);wie=n(jye,"STRONG",{});var Gct=s(wie);Gpo=r(Gct,"tapex"),Gct.forEach(t),Opo=r(jye," \u2014 "),LN=n(jye,"A",{href:!0});var Oct=s(LN);Vpo=r(Oct,"TapexTokenizer"),Oct.forEach(t),Xpo=r(jye," (TAPEX model)"),jye.forEach(t),zpo=i(S),yh=n(S,"LI",{});var Dye=s(yh);Aie=n(Dye,"STRONG",{});var Vct=s(Aie);Qpo=r(Vct,"transfo-xl"),Vct.forEach(t),Wpo=r(Dye," \u2014 "),yN=n(Dye,"A",{href:!0});var Xct=s(yN);Hpo=r(Xct,"TransfoXLTokenizer"),Xct.forEach(t),Upo=r(Dye," (Transformer-XL model)"),Dye.forEach(t),Jpo=i(S),js=n(S,"LI",{});var ES=s(js);Lie=n(ES,"STRONG",{});var zct=s(Lie);Ypo=r(zct,"vilt"),zct.forEach(t),Kpo=r(ES," \u2014 "),xN=n(ES,"A",{href:!0});var Qct=s(xN);Zpo=r(Qct,"BertTokenizer"),Qct.forEach(t),e_o=r(ES," or "),$N=n(ES,"A",{href:!0});var Wct=s($N);o_o=r(Wct,"BertTokenizerFast"),Wct.forEach(t),r_o=r(ES," (ViLT model)"),ES.forEach(t),t_o=i(S),Ds=n(S,"LI",{});var CS=s(Ds);yie=n(CS,"STRONG",{});var Hct=s(yie);a_o=r(Hct,"visual_bert"),Hct.forEach(t),n_o=r(CS," \u2014 "),kN=n(CS,"A",{href:!0});var Uct=s(kN);s_o=r(Uct,"BertTokenizer"),Uct.forEach(t),l_o=r(CS," or "),SN=n(CS,"A",{href:!0});var Jct=s(SN);i_o=r(Jct,"BertTokenizerFast"),Jct.forEach(t),d_o=r(CS," (VisualBERT model)"),CS.forEach(t),c_o=i(S),xh=n(S,"LI",{});var Gye=s(xh);xie=n(Gye,"STRONG",{});var Yct=s(xie);f_o=r(Yct,"wav2vec2"),Yct.forEach(t),m_o=r(Gye," \u2014 "),RN=n(Gye,"A",{href:!0});var Kct=s(RN);g_o=r(Kct,"Wav2Vec2CTCTokenizer"),Kct.forEach(t),h_o=r(Gye," (Wav2Vec2 model)"),Gye.forEach(t),p_o=i(S),$h=n(S,"LI",{});var Oye=s($h);$ie=n(Oye,"STRONG",{});var Zct=s($ie);__o=r(Zct,"wav2vec2-conformer"),Zct.forEach(t),u_o=r(Oye," \u2014 "),PN=n(Oye,"A",{href:!0});var eft=s(PN);b_o=r(eft,"Wav2Vec2CTCTokenizer"),eft.forEach(t),v_o=r(Oye," (Wav2Vec2-Conformer model)"),Oye.forEach(t),F_o=i(S),kh=n(S,"LI",{});var Vye=s(kh);kie=n(Vye,"STRONG",{});var oft=s(kie);T_o=r(oft,"wav2vec2_phoneme"),oft.forEach(t),M_o=r(Vye," \u2014 "),BN=n(Vye,"A",{href:!0});var rft=s(BN);E_o=r(rft,"Wav2Vec2PhonemeCTCTokenizer"),rft.forEach(t),C_o=r(Vye," (Wav2Vec2Phoneme model)"),Vye.forEach(t),w_o=i(S),Gs=n(S,"LI",{});var wS=s(Gs);Sie=n(wS,"STRONG",{});var tft=s(Sie);A_o=r(tft,"xglm"),tft.forEach(t),L_o=r(wS," \u2014 "),IN=n(wS,"A",{href:!0});var aft=s(IN);y_o=r(aft,"XGLMTokenizer"),aft.forEach(t),x_o=r(wS," or "),NN=n(wS,"A",{href:!0});var nft=s(NN);$_o=r(nft,"XGLMTokenizerFast"),nft.forEach(t),k_o=r(wS," (XGLM model)"),wS.forEach(t),S_o=i(S),Sh=n(S,"LI",{});var Xye=s(Sh);Rie=n(Xye,"STRONG",{});var sft=s(Rie);R_o=r(sft,"xlm"),sft.forEach(t),P_o=r(Xye," \u2014 "),qN=n(Xye,"A",{href:!0});var lft=s(qN);B_o=r(lft,"XLMTokenizer"),lft.forEach(t),I_o=r(Xye," (XLM model)"),Xye.forEach(t),N_o=i(S),Rh=n(S,"LI",{});var zye=s(Rh);Pie=n(zye,"STRONG",{});var ift=s(Pie);q_o=r(ift,"xlm-prophetnet"),ift.forEach(t),j_o=r(zye," \u2014 "),jN=n(zye,"A",{href:!0});var dft=s(jN);D_o=r(dft,"XLMProphetNetTokenizer"),dft.forEach(t),G_o=r(zye," (XLM-ProphetNet model)"),zye.forEach(t),O_o=i(S),Os=n(S,"LI",{});var AS=s(Os);Bie=n(AS,"STRONG",{});var cft=s(Bie);V_o=r(cft,"xlm-roberta"),cft.forEach(t),X_o=r(AS," \u2014 "),DN=n(AS,"A",{href:!0});var fft=s(DN);z_o=r(fft,"XLMRobertaTokenizer"),fft.forEach(t),Q_o=r(AS," or "),GN=n(AS,"A",{href:!0});var mft=s(GN);W_o=r(mft,"XLMRobertaTokenizerFast"),mft.forEach(t),H_o=r(AS," (XLM-RoBERTa model)"),AS.forEach(t),U_o=i(S),Vs=n(S,"LI",{});var LS=s(Vs);Iie=n(LS,"STRONG",{});var gft=s(Iie);J_o=r(gft,"xlm-roberta-xl"),gft.forEach(t),Y_o=r(LS," \u2014 "),ON=n(LS,"A",{href:!0});var hft=s(ON);K_o=r(hft,"RobertaTokenizer"),hft.forEach(t),Z_o=r(LS," or "),VN=n(LS,"A",{href:!0});var pft=s(VN);euo=r(pft,"RobertaTokenizerFast"),pft.forEach(t),ouo=r(LS," (XLM-RoBERTa-XL model)"),LS.forEach(t),ruo=i(S),Xs=n(S,"LI",{});var yS=s(Xs);Nie=n(yS,"STRONG",{});var _ft=s(Nie);tuo=r(_ft,"xlnet"),_ft.forEach(t),auo=r(yS," \u2014 "),XN=n(yS,"A",{href:!0});var uft=s(XN);nuo=r(uft,"XLNetTokenizer"),uft.forEach(t),suo=r(yS," or "),zN=n(yS,"A",{href:!0});var bft=s(zN);luo=r(bft,"XLNetTokenizerFast"),bft.forEach(t),iuo=r(yS," (XLNet model)"),yS.forEach(t),duo=i(S),zs=n(S,"LI",{});var xS=s(zs);qie=n(xS,"STRONG",{});var vft=s(qie);cuo=r(vft,"yoso"),vft.forEach(t),fuo=r(xS," \u2014 "),QN=n(xS,"A",{href:!0});var Fft=s(QN);muo=r(Fft,"AlbertTokenizer"),Fft.forEach(t),guo=r(xS," or "),WN=n(xS,"A",{href:!0});var Tft=s(WN);huo=r(Tft,"AlbertTokenizerFast"),Tft.forEach(t),puo=r(xS," (YOSO model)"),xS.forEach(t),S.forEach(t),_uo=i(Ys),T(Ph.$$.fragment,Ys),Ys.forEach(t),uuo=i(Js),Bh=n(Js,"DIV",{class:!0});var lQe=s(Bh);T(bL.$$.fragment,lQe),buo=i(lQe),jie=n(lQe,"P",{});var Mft=s(jie);vuo=r(Mft,"Register a new tokenizer in this mapping."),Mft.forEach(t),lQe.forEach(t),Js.forEach(t),sXe=i(f),Ni=n(f,"H2",{class:!0});var iQe=s(Ni);Ih=n(iQe,"A",{id:!0,class:!0,href:!0});var Eft=s(Ih);Die=n(Eft,"SPAN",{});var Cft=s(Die);T(vL.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),Fuo=i(iQe),Gie=n(iQe,"SPAN",{});var wft=s(Gie);Tuo=r(wft,"AutoFeatureExtractor"),wft.forEach(t),iQe.forEach(t),lXe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(FL.$$.fragment,Ks),Muo=i(Ks),TL=n(Ks,"P",{});var dQe=s(TL);Euo=r(dQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HN=n(dQe,"A",{href:!0});var Aft=s(HN);Cuo=r(Aft,"AutoFeatureExtractor.from_pretrained()"),Aft.forEach(t),wuo=r(dQe," class method."),dQe.forEach(t),Auo=i(Ks),ML=n(Ks,"P",{});var cQe=s(ML);Luo=r(cQe,"This class cannot be instantiated directly using "),Oie=n(cQe,"CODE",{});var Lft=s(Oie);yuo=r(Lft,"__init__()"),Lft.forEach(t),xuo=r(cQe," (throws an error)."),cQe.forEach(t),$uo=i(Ks),He=n(Ks,"DIV",{class:!0});var aa=s(He);T(EL.$$.fragment,aa),kuo=i(aa),Vie=n(aa,"P",{});var yft=s(Vie);Suo=r(yft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yft.forEach(t),Ruo=i(aa),Pa=n(aa,"P",{});var iA=s(Pa);Puo=r(iA,"The feature extractor class to instantiate is selected based on the "),Xie=n(iA,"CODE",{});var xft=s(Xie);Buo=r(xft,"model_type"),xft.forEach(t),Iuo=r(iA,` property of the config object
(either passed as an argument or loaded from `),zie=n(iA,"CODE",{});var $ft=s(zie);Nuo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),quo=r(iA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qie=n(iA,"CODE",{});var kft=s(Qie);juo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Duo=r(iA,":"),iA.forEach(t),Guo=i(aa),J=n(aa,"UL",{});var K=s(J);Nh=n(K,"LI",{});var Qye=s(Nh);Wie=n(Qye,"STRONG",{});var Sft=s(Wie);Ouo=r(Sft,"beit"),Sft.forEach(t),Vuo=r(Qye," \u2014 "),UN=n(Qye,"A",{href:!0});var Rft=s(UN);Xuo=r(Rft,"BeitFeatureExtractor"),Rft.forEach(t),zuo=r(Qye," (BEiT model)"),Qye.forEach(t),Quo=i(K),qh=n(K,"LI",{});var Wye=s(qh);Hie=n(Wye,"STRONG",{});var Pft=s(Hie);Wuo=r(Pft,"clip"),Pft.forEach(t),Huo=r(Wye," \u2014 "),JN=n(Wye,"A",{href:!0});var Bft=s(JN);Uuo=r(Bft,"CLIPFeatureExtractor"),Bft.forEach(t),Juo=r(Wye," (CLIP model)"),Wye.forEach(t),Yuo=i(K),jh=n(K,"LI",{});var Hye=s(jh);Uie=n(Hye,"STRONG",{});var Ift=s(Uie);Kuo=r(Ift,"convnext"),Ift.forEach(t),Zuo=r(Hye," \u2014 "),YN=n(Hye,"A",{href:!0});var Nft=s(YN);e1o=r(Nft,"ConvNextFeatureExtractor"),Nft.forEach(t),o1o=r(Hye," (ConvNeXT model)"),Hye.forEach(t),r1o=i(K),Dh=n(K,"LI",{});var Uye=s(Dh);Jie=n(Uye,"STRONG",{});var qft=s(Jie);t1o=r(qft,"cvt"),qft.forEach(t),a1o=r(Uye," \u2014 "),KN=n(Uye,"A",{href:!0});var jft=s(KN);n1o=r(jft,"ConvNextFeatureExtractor"),jft.forEach(t),s1o=r(Uye," (CvT model)"),Uye.forEach(t),l1o=i(K),Gh=n(K,"LI",{});var Jye=s(Gh);Yie=n(Jye,"STRONG",{});var Dft=s(Yie);i1o=r(Dft,"data2vec-audio"),Dft.forEach(t),d1o=r(Jye," \u2014 "),ZN=n(Jye,"A",{href:!0});var Gft=s(ZN);c1o=r(Gft,"Wav2Vec2FeatureExtractor"),Gft.forEach(t),f1o=r(Jye," (Data2VecAudio model)"),Jye.forEach(t),m1o=i(K),Oh=n(K,"LI",{});var Yye=s(Oh);Kie=n(Yye,"STRONG",{});var Oft=s(Kie);g1o=r(Oft,"data2vec-vision"),Oft.forEach(t),h1o=r(Yye," \u2014 "),eq=n(Yye,"A",{href:!0});var Vft=s(eq);p1o=r(Vft,"BeitFeatureExtractor"),Vft.forEach(t),_1o=r(Yye," (Data2VecVision model)"),Yye.forEach(t),u1o=i(K),Vh=n(K,"LI",{});var Kye=s(Vh);Zie=n(Kye,"STRONG",{});var Xft=s(Zie);b1o=r(Xft,"deformable_detr"),Xft.forEach(t),v1o=r(Kye," \u2014 "),oq=n(Kye,"A",{href:!0});var zft=s(oq);F1o=r(zft,"DetrFeatureExtractor"),zft.forEach(t),T1o=r(Kye," (Deformable DETR model)"),Kye.forEach(t),M1o=i(K),Xh=n(K,"LI",{});var Zye=s(Xh);ede=n(Zye,"STRONG",{});var Qft=s(ede);E1o=r(Qft,"deit"),Qft.forEach(t),C1o=r(Zye," \u2014 "),rq=n(Zye,"A",{href:!0});var Wft=s(rq);w1o=r(Wft,"DeiTFeatureExtractor"),Wft.forEach(t),A1o=r(Zye," (DeiT model)"),Zye.forEach(t),L1o=i(K),zh=n(K,"LI",{});var e9e=s(zh);ode=n(e9e,"STRONG",{});var Hft=s(ode);y1o=r(Hft,"detr"),Hft.forEach(t),x1o=r(e9e," \u2014 "),tq=n(e9e,"A",{href:!0});var Uft=s(tq);$1o=r(Uft,"DetrFeatureExtractor"),Uft.forEach(t),k1o=r(e9e," (DETR model)"),e9e.forEach(t),S1o=i(K),Qh=n(K,"LI",{});var o9e=s(Qh);rde=n(o9e,"STRONG",{});var Jft=s(rde);R1o=r(Jft,"dpt"),Jft.forEach(t),P1o=r(o9e," \u2014 "),aq=n(o9e,"A",{href:!0});var Yft=s(aq);B1o=r(Yft,"DPTFeatureExtractor"),Yft.forEach(t),I1o=r(o9e," (DPT model)"),o9e.forEach(t),N1o=i(K),Wh=n(K,"LI",{});var r9e=s(Wh);tde=n(r9e,"STRONG",{});var Kft=s(tde);q1o=r(Kft,"flava"),Kft.forEach(t),j1o=r(r9e," \u2014 "),nq=n(r9e,"A",{href:!0});var Zft=s(nq);D1o=r(Zft,"FlavaFeatureExtractor"),Zft.forEach(t),G1o=r(r9e," (FLAVA model)"),r9e.forEach(t),O1o=i(K),Hh=n(K,"LI",{});var t9e=s(Hh);ade=n(t9e,"STRONG",{});var emt=s(ade);V1o=r(emt,"glpn"),emt.forEach(t),X1o=r(t9e," \u2014 "),sq=n(t9e,"A",{href:!0});var omt=s(sq);z1o=r(omt,"GLPNFeatureExtractor"),omt.forEach(t),Q1o=r(t9e," (GLPN model)"),t9e.forEach(t),W1o=i(K),Uh=n(K,"LI",{});var a9e=s(Uh);nde=n(a9e,"STRONG",{});var rmt=s(nde);H1o=r(rmt,"groupvit"),rmt.forEach(t),U1o=r(a9e," \u2014 "),lq=n(a9e,"A",{href:!0});var tmt=s(lq);J1o=r(tmt,"CLIPFeatureExtractor"),tmt.forEach(t),Y1o=r(a9e," (GroupViT model)"),a9e.forEach(t),K1o=i(K),Jh=n(K,"LI",{});var n9e=s(Jh);sde=n(n9e,"STRONG",{});var amt=s(sde);Z1o=r(amt,"hubert"),amt.forEach(t),e2o=r(n9e," \u2014 "),iq=n(n9e,"A",{href:!0});var nmt=s(iq);o2o=r(nmt,"Wav2Vec2FeatureExtractor"),nmt.forEach(t),r2o=r(n9e," (Hubert model)"),n9e.forEach(t),t2o=i(K),Yh=n(K,"LI",{});var s9e=s(Yh);lde=n(s9e,"STRONG",{});var smt=s(lde);a2o=r(smt,"imagegpt"),smt.forEach(t),n2o=r(s9e," \u2014 "),dq=n(s9e,"A",{href:!0});var lmt=s(dq);s2o=r(lmt,"ImageGPTFeatureExtractor"),lmt.forEach(t),l2o=r(s9e," (ImageGPT model)"),s9e.forEach(t),i2o=i(K),Kh=n(K,"LI",{});var l9e=s(Kh);ide=n(l9e,"STRONG",{});var imt=s(ide);d2o=r(imt,"layoutlmv2"),imt.forEach(t),c2o=r(l9e," \u2014 "),cq=n(l9e,"A",{href:!0});var dmt=s(cq);f2o=r(dmt,"LayoutLMv2FeatureExtractor"),dmt.forEach(t),m2o=r(l9e," (LayoutLMv2 model)"),l9e.forEach(t),g2o=i(K),Zh=n(K,"LI",{});var i9e=s(Zh);dde=n(i9e,"STRONG",{});var cmt=s(dde);h2o=r(cmt,"layoutlmv3"),cmt.forEach(t),p2o=r(i9e," \u2014 "),fq=n(i9e,"A",{href:!0});var fmt=s(fq);_2o=r(fmt,"LayoutLMv3FeatureExtractor"),fmt.forEach(t),u2o=r(i9e," (LayoutLMv3 model)"),i9e.forEach(t),b2o=i(K),ep=n(K,"LI",{});var d9e=s(ep);cde=n(d9e,"STRONG",{});var mmt=s(cde);v2o=r(mmt,"levit"),mmt.forEach(t),F2o=r(d9e," \u2014 "),mq=n(d9e,"A",{href:!0});var gmt=s(mq);T2o=r(gmt,"LevitFeatureExtractor"),gmt.forEach(t),M2o=r(d9e," (LeViT model)"),d9e.forEach(t),E2o=i(K),op=n(K,"LI",{});var c9e=s(op);fde=n(c9e,"STRONG",{});var hmt=s(fde);C2o=r(hmt,"maskformer"),hmt.forEach(t),w2o=r(c9e," \u2014 "),gq=n(c9e,"A",{href:!0});var pmt=s(gq);A2o=r(pmt,"MaskFormerFeatureExtractor"),pmt.forEach(t),L2o=r(c9e," (MaskFormer model)"),c9e.forEach(t),y2o=i(K),rp=n(K,"LI",{});var f9e=s(rp);mde=n(f9e,"STRONG",{});var _mt=s(mde);x2o=r(_mt,"mctct"),_mt.forEach(t),$2o=r(f9e," \u2014 "),hq=n(f9e,"A",{href:!0});var umt=s(hq);k2o=r(umt,"MCTCTFeatureExtractor"),umt.forEach(t),S2o=r(f9e," (M-CTC-T model)"),f9e.forEach(t),R2o=i(K),tp=n(K,"LI",{});var m9e=s(tp);gde=n(m9e,"STRONG",{});var bmt=s(gde);P2o=r(bmt,"mobilevit"),bmt.forEach(t),B2o=r(m9e," \u2014 "),pq=n(m9e,"A",{href:!0});var vmt=s(pq);I2o=r(vmt,"MobileViTFeatureExtractor"),vmt.forEach(t),N2o=r(m9e," (MobileViT model)"),m9e.forEach(t),q2o=i(K),ap=n(K,"LI",{});var g9e=s(ap);hde=n(g9e,"STRONG",{});var Fmt=s(hde);j2o=r(Fmt,"perceiver"),Fmt.forEach(t),D2o=r(g9e," \u2014 "),_q=n(g9e,"A",{href:!0});var Tmt=s(_q);G2o=r(Tmt,"PerceiverFeatureExtractor"),Tmt.forEach(t),O2o=r(g9e," (Perceiver model)"),g9e.forEach(t),V2o=i(K),np=n(K,"LI",{});var h9e=s(np);pde=n(h9e,"STRONG",{});var Mmt=s(pde);X2o=r(Mmt,"poolformer"),Mmt.forEach(t),z2o=r(h9e," \u2014 "),uq=n(h9e,"A",{href:!0});var Emt=s(uq);Q2o=r(Emt,"PoolFormerFeatureExtractor"),Emt.forEach(t),W2o=r(h9e," (PoolFormer model)"),h9e.forEach(t),H2o=i(K),sp=n(K,"LI",{});var p9e=s(sp);_de=n(p9e,"STRONG",{});var Cmt=s(_de);U2o=r(Cmt,"regnet"),Cmt.forEach(t),J2o=r(p9e," \u2014 "),bq=n(p9e,"A",{href:!0});var wmt=s(bq);Y2o=r(wmt,"ConvNextFeatureExtractor"),wmt.forEach(t),K2o=r(p9e," (RegNet model)"),p9e.forEach(t),Z2o=i(K),lp=n(K,"LI",{});var _9e=s(lp);ude=n(_9e,"STRONG",{});var Amt=s(ude);ebo=r(Amt,"resnet"),Amt.forEach(t),obo=r(_9e," \u2014 "),vq=n(_9e,"A",{href:!0});var Lmt=s(vq);rbo=r(Lmt,"ConvNextFeatureExtractor"),Lmt.forEach(t),tbo=r(_9e," (ResNet model)"),_9e.forEach(t),abo=i(K),ip=n(K,"LI",{});var u9e=s(ip);bde=n(u9e,"STRONG",{});var ymt=s(bde);nbo=r(ymt,"segformer"),ymt.forEach(t),sbo=r(u9e," \u2014 "),Fq=n(u9e,"A",{href:!0});var xmt=s(Fq);lbo=r(xmt,"SegformerFeatureExtractor"),xmt.forEach(t),ibo=r(u9e," (SegFormer model)"),u9e.forEach(t),dbo=i(K),dp=n(K,"LI",{});var b9e=s(dp);vde=n(b9e,"STRONG",{});var $mt=s(vde);cbo=r($mt,"speech_to_text"),$mt.forEach(t),fbo=r(b9e," \u2014 "),Tq=n(b9e,"A",{href:!0});var kmt=s(Tq);mbo=r(kmt,"Speech2TextFeatureExtractor"),kmt.forEach(t),gbo=r(b9e," (Speech2Text model)"),b9e.forEach(t),hbo=i(K),cp=n(K,"LI",{});var v9e=s(cp);Fde=n(v9e,"STRONG",{});var Smt=s(Fde);pbo=r(Smt,"swin"),Smt.forEach(t),_bo=r(v9e," \u2014 "),Mq=n(v9e,"A",{href:!0});var Rmt=s(Mq);ubo=r(Rmt,"ViTFeatureExtractor"),Rmt.forEach(t),bbo=r(v9e," (Swin Transformer model)"),v9e.forEach(t),vbo=i(K),fp=n(K,"LI",{});var F9e=s(fp);Tde=n(F9e,"STRONG",{});var Pmt=s(Tde);Fbo=r(Pmt,"van"),Pmt.forEach(t),Tbo=r(F9e," \u2014 "),Eq=n(F9e,"A",{href:!0});var Bmt=s(Eq);Mbo=r(Bmt,"ConvNextFeatureExtractor"),Bmt.forEach(t),Ebo=r(F9e," (VAN model)"),F9e.forEach(t),Cbo=i(K),mp=n(K,"LI",{});var T9e=s(mp);Mde=n(T9e,"STRONG",{});var Imt=s(Mde);wbo=r(Imt,"vilt"),Imt.forEach(t),Abo=r(T9e," \u2014 "),Cq=n(T9e,"A",{href:!0});var Nmt=s(Cq);Lbo=r(Nmt,"ViltFeatureExtractor"),Nmt.forEach(t),ybo=r(T9e," (ViLT model)"),T9e.forEach(t),xbo=i(K),gp=n(K,"LI",{});var M9e=s(gp);Ede=n(M9e,"STRONG",{});var qmt=s(Ede);$bo=r(qmt,"vit"),qmt.forEach(t),kbo=r(M9e," \u2014 "),wq=n(M9e,"A",{href:!0});var jmt=s(wq);Sbo=r(jmt,"ViTFeatureExtractor"),jmt.forEach(t),Rbo=r(M9e," (ViT model)"),M9e.forEach(t),Pbo=i(K),hp=n(K,"LI",{});var E9e=s(hp);Cde=n(E9e,"STRONG",{});var Dmt=s(Cde);Bbo=r(Dmt,"vit_mae"),Dmt.forEach(t),Ibo=r(E9e," \u2014 "),Aq=n(E9e,"A",{href:!0});var Gmt=s(Aq);Nbo=r(Gmt,"ViTFeatureExtractor"),Gmt.forEach(t),qbo=r(E9e," (ViTMAE model)"),E9e.forEach(t),jbo=i(K),pp=n(K,"LI",{});var C9e=s(pp);wde=n(C9e,"STRONG",{});var Omt=s(wde);Dbo=r(Omt,"wav2vec2"),Omt.forEach(t),Gbo=r(C9e," \u2014 "),Lq=n(C9e,"A",{href:!0});var Vmt=s(Lq);Obo=r(Vmt,"Wav2Vec2FeatureExtractor"),Vmt.forEach(t),Vbo=r(C9e," (Wav2Vec2 model)"),C9e.forEach(t),Xbo=i(K),_p=n(K,"LI",{});var w9e=s(_p);Ade=n(w9e,"STRONG",{});var Xmt=s(Ade);zbo=r(Xmt,"wav2vec2-conformer"),Xmt.forEach(t),Qbo=r(w9e," \u2014 "),yq=n(w9e,"A",{href:!0});var zmt=s(yq);Wbo=r(zmt,"Wav2Vec2FeatureExtractor"),zmt.forEach(t),Hbo=r(w9e," (Wav2Vec2-Conformer model)"),w9e.forEach(t),Ubo=i(K),up=n(K,"LI",{});var A9e=s(up);Lde=n(A9e,"STRONG",{});var Qmt=s(Lde);Jbo=r(Qmt,"yolos"),Qmt.forEach(t),Ybo=r(A9e," \u2014 "),xq=n(A9e,"A",{href:!0});var Wmt=s(xq);Kbo=r(Wmt,"YolosFeatureExtractor"),Wmt.forEach(t),Zbo=r(A9e," (YOLOS model)"),A9e.forEach(t),K.forEach(t),evo=i(aa),T(bp.$$.fragment,aa),ovo=i(aa),T(vp.$$.fragment,aa),aa.forEach(t),rvo=i(Ks),Fp=n(Ks,"DIV",{class:!0});var fQe=s(Fp);T(CL.$$.fragment,fQe),tvo=i(fQe),yde=n(fQe,"P",{});var Hmt=s(yde);avo=r(Hmt,"Register a new feature extractor for this class."),Hmt.forEach(t),fQe.forEach(t),Ks.forEach(t),iXe=i(f),qi=n(f,"H2",{class:!0});var mQe=s(qi);Tp=n(mQe,"A",{id:!0,class:!0,href:!0});var Umt=s(Tp);xde=n(Umt,"SPAN",{});var Jmt=s(xde);T(wL.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),nvo=i(mQe),$de=n(mQe,"SPAN",{});var Ymt=s($de);svo=r(Ymt,"AutoProcessor"),Ymt.forEach(t),mQe.forEach(t),dXe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(AL.$$.fragment,Zs),lvo=i(Zs),LL=n(Zs,"P",{});var gQe=s(LL);ivo=r(gQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$q=n(gQe,"A",{href:!0});var Kmt=s($q);dvo=r(Kmt,"AutoProcessor.from_pretrained()"),Kmt.forEach(t),cvo=r(gQe," class method."),gQe.forEach(t),fvo=i(Zs),yL=n(Zs,"P",{});var hQe=s(yL);mvo=r(hQe,"This class cannot be instantiated directly using "),kde=n(hQe,"CODE",{});var Zmt=s(kde);gvo=r(Zmt,"__init__()"),Zmt.forEach(t),hvo=r(hQe," (throws an error)."),hQe.forEach(t),pvo=i(Zs),Ue=n(Zs,"DIV",{class:!0});var na=s(Ue);T(xL.$$.fragment,na),_vo=i(na),Sde=n(na,"P",{});var egt=s(Sde);uvo=r(egt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),egt.forEach(t),bvo=i(na),ji=n(na,"P",{});var yre=s(ji);vvo=r(yre,"The processor class to instantiate is selected based on the "),Rde=n(yre,"CODE",{});var ogt=s(Rde);Fvo=r(ogt,"model_type"),ogt.forEach(t),Tvo=r(yre,` property of the config object (either
passed as an argument or loaded from `),Pde=n(yre,"CODE",{});var rgt=s(Pde);Mvo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),Evo=r(yre," if possible):"),yre.forEach(t),Cvo=i(na),he=n(na,"UL",{});var ue=s(he);Mp=n(ue,"LI",{});var L9e=s(Mp);Bde=n(L9e,"STRONG",{});var tgt=s(Bde);wvo=r(tgt,"clip"),tgt.forEach(t),Avo=r(L9e," \u2014 "),kq=n(L9e,"A",{href:!0});var agt=s(kq);Lvo=r(agt,"CLIPProcessor"),agt.forEach(t),yvo=r(L9e," (CLIP model)"),L9e.forEach(t),xvo=i(ue),Ep=n(ue,"LI",{});var y9e=s(Ep);Ide=n(y9e,"STRONG",{});var ngt=s(Ide);$vo=r(ngt,"flava"),ngt.forEach(t),kvo=r(y9e," \u2014 "),Nde=n(y9e,"CODE",{});var sgt=s(Nde);Svo=r(sgt,"FLAVAProcessor"),sgt.forEach(t),Rvo=r(y9e," (FLAVA model)"),y9e.forEach(t),Pvo=i(ue),Cp=n(ue,"LI",{});var x9e=s(Cp);qde=n(x9e,"STRONG",{});var lgt=s(qde);Bvo=r(lgt,"groupvit"),lgt.forEach(t),Ivo=r(x9e," \u2014 "),Sq=n(x9e,"A",{href:!0});var igt=s(Sq);Nvo=r(igt,"CLIPProcessor"),igt.forEach(t),qvo=r(x9e," (GroupViT model)"),x9e.forEach(t),jvo=i(ue),wp=n(ue,"LI",{});var $9e=s(wp);jde=n($9e,"STRONG",{});var dgt=s(jde);Dvo=r(dgt,"layoutlmv2"),dgt.forEach(t),Gvo=r($9e," \u2014 "),Rq=n($9e,"A",{href:!0});var cgt=s(Rq);Ovo=r(cgt,"LayoutLMv2Processor"),cgt.forEach(t),Vvo=r($9e," (LayoutLMv2 model)"),$9e.forEach(t),Xvo=i(ue),Ap=n(ue,"LI",{});var k9e=s(Ap);Dde=n(k9e,"STRONG",{});var fgt=s(Dde);zvo=r(fgt,"layoutlmv3"),fgt.forEach(t),Qvo=r(k9e," \u2014 "),Pq=n(k9e,"A",{href:!0});var mgt=s(Pq);Wvo=r(mgt,"LayoutLMv3Processor"),mgt.forEach(t),Hvo=r(k9e," (LayoutLMv3 model)"),k9e.forEach(t),Uvo=i(ue),Lp=n(ue,"LI",{});var S9e=s(Lp);Gde=n(S9e,"STRONG",{});var ggt=s(Gde);Jvo=r(ggt,"layoutxlm"),ggt.forEach(t),Yvo=r(S9e," \u2014 "),Bq=n(S9e,"A",{href:!0});var hgt=s(Bq);Kvo=r(hgt,"LayoutXLMProcessor"),hgt.forEach(t),Zvo=r(S9e," (LayoutXLM model)"),S9e.forEach(t),eFo=i(ue),yp=n(ue,"LI",{});var R9e=s(yp);Ode=n(R9e,"STRONG",{});var pgt=s(Ode);oFo=r(pgt,"sew"),pgt.forEach(t),rFo=r(R9e," \u2014 "),Iq=n(R9e,"A",{href:!0});var _gt=s(Iq);tFo=r(_gt,"Wav2Vec2Processor"),_gt.forEach(t),aFo=r(R9e," (SEW model)"),R9e.forEach(t),nFo=i(ue),xp=n(ue,"LI",{});var P9e=s(xp);Vde=n(P9e,"STRONG",{});var ugt=s(Vde);sFo=r(ugt,"sew-d"),ugt.forEach(t),lFo=r(P9e," \u2014 "),Nq=n(P9e,"A",{href:!0});var bgt=s(Nq);iFo=r(bgt,"Wav2Vec2Processor"),bgt.forEach(t),dFo=r(P9e," (SEW-D model)"),P9e.forEach(t),cFo=i(ue),$p=n(ue,"LI",{});var B9e=s($p);Xde=n(B9e,"STRONG",{});var vgt=s(Xde);fFo=r(vgt,"speech_to_text"),vgt.forEach(t),mFo=r(B9e," \u2014 "),qq=n(B9e,"A",{href:!0});var Fgt=s(qq);gFo=r(Fgt,"Speech2TextProcessor"),Fgt.forEach(t),hFo=r(B9e," (Speech2Text model)"),B9e.forEach(t),pFo=i(ue),kp=n(ue,"LI",{});var I9e=s(kp);zde=n(I9e,"STRONG",{});var Tgt=s(zde);_Fo=r(Tgt,"speech_to_text_2"),Tgt.forEach(t),uFo=r(I9e," \u2014 "),jq=n(I9e,"A",{href:!0});var Mgt=s(jq);bFo=r(Mgt,"Speech2Text2Processor"),Mgt.forEach(t),vFo=r(I9e," (Speech2Text2 model)"),I9e.forEach(t),FFo=i(ue),Sp=n(ue,"LI",{});var N9e=s(Sp);Qde=n(N9e,"STRONG",{});var Egt=s(Qde);TFo=r(Egt,"trocr"),Egt.forEach(t),MFo=r(N9e," \u2014 "),Dq=n(N9e,"A",{href:!0});var Cgt=s(Dq);EFo=r(Cgt,"TrOCRProcessor"),Cgt.forEach(t),CFo=r(N9e," (TrOCR model)"),N9e.forEach(t),wFo=i(ue),Rp=n(ue,"LI",{});var q9e=s(Rp);Wde=n(q9e,"STRONG",{});var wgt=s(Wde);AFo=r(wgt,"unispeech"),wgt.forEach(t),LFo=r(q9e," \u2014 "),Gq=n(q9e,"A",{href:!0});var Agt=s(Gq);yFo=r(Agt,"Wav2Vec2Processor"),Agt.forEach(t),xFo=r(q9e," (UniSpeech model)"),q9e.forEach(t),$Fo=i(ue),Pp=n(ue,"LI",{});var j9e=s(Pp);Hde=n(j9e,"STRONG",{});var Lgt=s(Hde);kFo=r(Lgt,"unispeech-sat"),Lgt.forEach(t),SFo=r(j9e," \u2014 "),Oq=n(j9e,"A",{href:!0});var ygt=s(Oq);RFo=r(ygt,"Wav2Vec2Processor"),ygt.forEach(t),PFo=r(j9e," (UniSpeechSat model)"),j9e.forEach(t),BFo=i(ue),Bp=n(ue,"LI",{});var D9e=s(Bp);Ude=n(D9e,"STRONG",{});var xgt=s(Ude);IFo=r(xgt,"vilt"),xgt.forEach(t),NFo=r(D9e," \u2014 "),Vq=n(D9e,"A",{href:!0});var $gt=s(Vq);qFo=r($gt,"ViltProcessor"),$gt.forEach(t),jFo=r(D9e," (ViLT model)"),D9e.forEach(t),DFo=i(ue),Ip=n(ue,"LI",{});var G9e=s(Ip);Jde=n(G9e,"STRONG",{});var kgt=s(Jde);GFo=r(kgt,"vision-text-dual-encoder"),kgt.forEach(t),OFo=r(G9e," \u2014 "),Xq=n(G9e,"A",{href:!0});var Sgt=s(Xq);VFo=r(Sgt,"VisionTextDualEncoderProcessor"),Sgt.forEach(t),XFo=r(G9e," (VisionTextDualEncoder model)"),G9e.forEach(t),zFo=i(ue),Np=n(ue,"LI",{});var O9e=s(Np);Yde=n(O9e,"STRONG",{});var Rgt=s(Yde);QFo=r(Rgt,"wav2vec2"),Rgt.forEach(t),WFo=r(O9e," \u2014 "),zq=n(O9e,"A",{href:!0});var Pgt=s(zq);HFo=r(Pgt,"Wav2Vec2Processor"),Pgt.forEach(t),UFo=r(O9e," (Wav2Vec2 model)"),O9e.forEach(t),JFo=i(ue),qp=n(ue,"LI",{});var V9e=s(qp);Kde=n(V9e,"STRONG",{});var Bgt=s(Kde);YFo=r(Bgt,"wav2vec2-conformer"),Bgt.forEach(t),KFo=r(V9e," \u2014 "),Qq=n(V9e,"A",{href:!0});var Igt=s(Qq);ZFo=r(Igt,"Wav2Vec2Processor"),Igt.forEach(t),eTo=r(V9e," (Wav2Vec2-Conformer model)"),V9e.forEach(t),oTo=i(ue),jp=n(ue,"LI",{});var X9e=s(jp);Zde=n(X9e,"STRONG",{});var Ngt=s(Zde);rTo=r(Ngt,"wavlm"),Ngt.forEach(t),tTo=r(X9e," \u2014 "),Wq=n(X9e,"A",{href:!0});var qgt=s(Wq);aTo=r(qgt,"Wav2Vec2Processor"),qgt.forEach(t),nTo=r(X9e," (WavLM model)"),X9e.forEach(t),ue.forEach(t),sTo=i(na),T(Dp.$$.fragment,na),lTo=i(na),T(Gp.$$.fragment,na),na.forEach(t),iTo=i(Zs),Op=n(Zs,"DIV",{class:!0});var pQe=s(Op);T($L.$$.fragment,pQe),dTo=i(pQe),ece=n(pQe,"P",{});var jgt=s(ece);cTo=r(jgt,"Register a new processor for this class."),jgt.forEach(t),pQe.forEach(t),Zs.forEach(t),cXe=i(f),Di=n(f,"H2",{class:!0});var _Qe=s(Di);Vp=n(_Qe,"A",{id:!0,class:!0,href:!0});var Dgt=s(Vp);oce=n(Dgt,"SPAN",{});var Ggt=s(oce);T(kL.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),fTo=i(_Qe),rce=n(_Qe,"SPAN",{});var Ogt=s(rce);mTo=r(Ogt,"AutoModel"),Ogt.forEach(t),_Qe.forEach(t),fXe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T(SL.$$.fragment,el),gTo=i(el),Gi=n(el,"P",{});var xre=s(Gi);hTo=r(xre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hq=n(xre,"A",{href:!0});var Vgt=s(Hq);pTo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),_To=r(xre," class method or the "),Uq=n(xre,"A",{href:!0});var Xgt=s(Uq);uTo=r(Xgt,"from_config()"),Xgt.forEach(t),bTo=r(xre,` class
method.`),xre.forEach(t),vTo=i(el),RL=n(el,"P",{});var uQe=s(RL);FTo=r(uQe,"This class cannot be instantiated directly using "),tce=n(uQe,"CODE",{});var zgt=s(tce);TTo=r(zgt,"__init__()"),zgt.forEach(t),MTo=r(uQe," (throws an error)."),uQe.forEach(t),ETo=i(el),lt=n(el,"DIV",{class:!0});var dA=s(lt);T(PL.$$.fragment,dA),CTo=i(dA),ace=n(dA,"P",{});var Qgt=s(ace);wTo=r(Qgt,"Instantiates one of the base model classes of the library from a configuration."),Qgt.forEach(t),ATo=i(dA),Oi=n(dA,"P",{});var $re=s(Oi);LTo=r($re,`Note:
Loading a model from its configuration file does `),nce=n($re,"STRONG",{});var Wgt=s(nce);yTo=r(Wgt,"not"),Wgt.forEach(t),xTo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n($re,"A",{href:!0});var Hgt=s(Jq);$To=r(Hgt,"from_pretrained()"),Hgt.forEach(t),kTo=r($re," to load the model weights."),$re.forEach(t),STo=i(dA),T(Xp.$$.fragment,dA),dA.forEach(t),RTo=i(el),Je=n(el,"DIV",{class:!0});var sa=s(Je);T(BL.$$.fragment,sa),PTo=i(sa),sce=n(sa,"P",{});var Ugt=s(sce);BTo=r(Ugt,"Instantiate one of the base model classes of the library from a pretrained model."),Ugt.forEach(t),ITo=i(sa),Ba=n(sa,"P",{});var cA=s(Ba);NTo=r(cA,"The model class to instantiate is selected based on the "),lce=n(cA,"CODE",{});var Jgt=s(lce);qTo=r(Jgt,"model_type"),Jgt.forEach(t),jTo=r(cA,` property of the config object (either
passed as an argument or loaded from `),ice=n(cA,"CODE",{});var Ygt=s(ice);DTo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),GTo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(cA,"CODE",{});var Kgt=s(dce);OTo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),VTo=r(cA,":"),cA.forEach(t),XTo=i(sa),y=n(sa,"UL",{});var x=s(y);zp=n(x,"LI",{});var z9e=s(zp);cce=n(z9e,"STRONG",{});var Zgt=s(cce);zTo=r(Zgt,"albert"),Zgt.forEach(t),QTo=r(z9e," \u2014 "),Yq=n(z9e,"A",{href:!0});var eht=s(Yq);WTo=r(eht,"AlbertModel"),eht.forEach(t),HTo=r(z9e," (ALBERT model)"),z9e.forEach(t),UTo=i(x),Qp=n(x,"LI",{});var Q9e=s(Qp);fce=n(Q9e,"STRONG",{});var oht=s(fce);JTo=r(oht,"bart"),oht.forEach(t),YTo=r(Q9e," \u2014 "),Kq=n(Q9e,"A",{href:!0});var rht=s(Kq);KTo=r(rht,"BartModel"),rht.forEach(t),ZTo=r(Q9e," (BART model)"),Q9e.forEach(t),e7o=i(x),Wp=n(x,"LI",{});var W9e=s(Wp);mce=n(W9e,"STRONG",{});var tht=s(mce);o7o=r(tht,"beit"),tht.forEach(t),r7o=r(W9e," \u2014 "),Zq=n(W9e,"A",{href:!0});var aht=s(Zq);t7o=r(aht,"BeitModel"),aht.forEach(t),a7o=r(W9e," (BEiT model)"),W9e.forEach(t),n7o=i(x),Hp=n(x,"LI",{});var H9e=s(Hp);gce=n(H9e,"STRONG",{});var nht=s(gce);s7o=r(nht,"bert"),nht.forEach(t),l7o=r(H9e," \u2014 "),ej=n(H9e,"A",{href:!0});var sht=s(ej);i7o=r(sht,"BertModel"),sht.forEach(t),d7o=r(H9e," (BERT model)"),H9e.forEach(t),c7o=i(x),Up=n(x,"LI",{});var U9e=s(Up);hce=n(U9e,"STRONG",{});var lht=s(hce);f7o=r(lht,"bert-generation"),lht.forEach(t),m7o=r(U9e," \u2014 "),oj=n(U9e,"A",{href:!0});var iht=s(oj);g7o=r(iht,"BertGenerationEncoder"),iht.forEach(t),h7o=r(U9e," (Bert Generation model)"),U9e.forEach(t),p7o=i(x),Jp=n(x,"LI",{});var J9e=s(Jp);pce=n(J9e,"STRONG",{});var dht=s(pce);_7o=r(dht,"big_bird"),dht.forEach(t),u7o=r(J9e," \u2014 "),rj=n(J9e,"A",{href:!0});var cht=s(rj);b7o=r(cht,"BigBirdModel"),cht.forEach(t),v7o=r(J9e," (BigBird model)"),J9e.forEach(t),F7o=i(x),Yp=n(x,"LI",{});var Y9e=s(Yp);_ce=n(Y9e,"STRONG",{});var fht=s(_ce);T7o=r(fht,"bigbird_pegasus"),fht.forEach(t),M7o=r(Y9e," \u2014 "),tj=n(Y9e,"A",{href:!0});var mht=s(tj);E7o=r(mht,"BigBirdPegasusModel"),mht.forEach(t),C7o=r(Y9e," (BigBird-Pegasus model)"),Y9e.forEach(t),w7o=i(x),Kp=n(x,"LI",{});var K9e=s(Kp);uce=n(K9e,"STRONG",{});var ght=s(uce);A7o=r(ght,"blenderbot"),ght.forEach(t),L7o=r(K9e," \u2014 "),aj=n(K9e,"A",{href:!0});var hht=s(aj);y7o=r(hht,"BlenderbotModel"),hht.forEach(t),x7o=r(K9e," (Blenderbot model)"),K9e.forEach(t),$7o=i(x),Zp=n(x,"LI",{});var Z9e=s(Zp);bce=n(Z9e,"STRONG",{});var pht=s(bce);k7o=r(pht,"blenderbot-small"),pht.forEach(t),S7o=r(Z9e," \u2014 "),nj=n(Z9e,"A",{href:!0});var _ht=s(nj);R7o=r(_ht,"BlenderbotSmallModel"),_ht.forEach(t),P7o=r(Z9e," (BlenderbotSmall model)"),Z9e.forEach(t),B7o=i(x),e_=n(x,"LI",{});var exe=s(e_);vce=n(exe,"STRONG",{});var uht=s(vce);I7o=r(uht,"bloom"),uht.forEach(t),N7o=r(exe," \u2014 "),sj=n(exe,"A",{href:!0});var bht=s(sj);q7o=r(bht,"BloomModel"),bht.forEach(t),j7o=r(exe," (BLOOM model)"),exe.forEach(t),D7o=i(x),o_=n(x,"LI",{});var oxe=s(o_);Fce=n(oxe,"STRONG",{});var vht=s(Fce);G7o=r(vht,"camembert"),vht.forEach(t),O7o=r(oxe," \u2014 "),lj=n(oxe,"A",{href:!0});var Fht=s(lj);V7o=r(Fht,"CamembertModel"),Fht.forEach(t),X7o=r(oxe," (CamemBERT model)"),oxe.forEach(t),z7o=i(x),r_=n(x,"LI",{});var rxe=s(r_);Tce=n(rxe,"STRONG",{});var Tht=s(Tce);Q7o=r(Tht,"canine"),Tht.forEach(t),W7o=r(rxe," \u2014 "),ij=n(rxe,"A",{href:!0});var Mht=s(ij);H7o=r(Mht,"CanineModel"),Mht.forEach(t),U7o=r(rxe," (CANINE model)"),rxe.forEach(t),J7o=i(x),t_=n(x,"LI",{});var txe=s(t_);Mce=n(txe,"STRONG",{});var Eht=s(Mce);Y7o=r(Eht,"clip"),Eht.forEach(t),K7o=r(txe," \u2014 "),dj=n(txe,"A",{href:!0});var Cht=s(dj);Z7o=r(Cht,"CLIPModel"),Cht.forEach(t),e8o=r(txe," (CLIP model)"),txe.forEach(t),o8o=i(x),a_=n(x,"LI",{});var axe=s(a_);Ece=n(axe,"STRONG",{});var wht=s(Ece);r8o=r(wht,"codegen"),wht.forEach(t),t8o=r(axe," \u2014 "),cj=n(axe,"A",{href:!0});var Aht=s(cj);a8o=r(Aht,"CodeGenModel"),Aht.forEach(t),n8o=r(axe," (CodeGen model)"),axe.forEach(t),s8o=i(x),n_=n(x,"LI",{});var nxe=s(n_);Cce=n(nxe,"STRONG",{});var Lht=s(Cce);l8o=r(Lht,"convbert"),Lht.forEach(t),i8o=r(nxe," \u2014 "),fj=n(nxe,"A",{href:!0});var yht=s(fj);d8o=r(yht,"ConvBertModel"),yht.forEach(t),c8o=r(nxe," (ConvBERT model)"),nxe.forEach(t),f8o=i(x),s_=n(x,"LI",{});var sxe=s(s_);wce=n(sxe,"STRONG",{});var xht=s(wce);m8o=r(xht,"convnext"),xht.forEach(t),g8o=r(sxe," \u2014 "),mj=n(sxe,"A",{href:!0});var $ht=s(mj);h8o=r($ht,"ConvNextModel"),$ht.forEach(t),p8o=r(sxe," (ConvNeXT model)"),sxe.forEach(t),_8o=i(x),l_=n(x,"LI",{});var lxe=s(l_);Ace=n(lxe,"STRONG",{});var kht=s(Ace);u8o=r(kht,"ctrl"),kht.forEach(t),b8o=r(lxe," \u2014 "),gj=n(lxe,"A",{href:!0});var Sht=s(gj);v8o=r(Sht,"CTRLModel"),Sht.forEach(t),F8o=r(lxe," (CTRL model)"),lxe.forEach(t),T8o=i(x),i_=n(x,"LI",{});var ixe=s(i_);Lce=n(ixe,"STRONG",{});var Rht=s(Lce);M8o=r(Rht,"cvt"),Rht.forEach(t),E8o=r(ixe," \u2014 "),hj=n(ixe,"A",{href:!0});var Pht=s(hj);C8o=r(Pht,"CvtModel"),Pht.forEach(t),w8o=r(ixe," (CvT model)"),ixe.forEach(t),A8o=i(x),d_=n(x,"LI",{});var dxe=s(d_);yce=n(dxe,"STRONG",{});var Bht=s(yce);L8o=r(Bht,"data2vec-audio"),Bht.forEach(t),y8o=r(dxe," \u2014 "),pj=n(dxe,"A",{href:!0});var Iht=s(pj);x8o=r(Iht,"Data2VecAudioModel"),Iht.forEach(t),$8o=r(dxe," (Data2VecAudio model)"),dxe.forEach(t),k8o=i(x),c_=n(x,"LI",{});var cxe=s(c_);xce=n(cxe,"STRONG",{});var Nht=s(xce);S8o=r(Nht,"data2vec-text"),Nht.forEach(t),R8o=r(cxe," \u2014 "),_j=n(cxe,"A",{href:!0});var qht=s(_j);P8o=r(qht,"Data2VecTextModel"),qht.forEach(t),B8o=r(cxe," (Data2VecText model)"),cxe.forEach(t),I8o=i(x),f_=n(x,"LI",{});var fxe=s(f_);$ce=n(fxe,"STRONG",{});var jht=s($ce);N8o=r(jht,"data2vec-vision"),jht.forEach(t),q8o=r(fxe," \u2014 "),uj=n(fxe,"A",{href:!0});var Dht=s(uj);j8o=r(Dht,"Data2VecVisionModel"),Dht.forEach(t),D8o=r(fxe," (Data2VecVision model)"),fxe.forEach(t),G8o=i(x),m_=n(x,"LI",{});var mxe=s(m_);kce=n(mxe,"STRONG",{});var Ght=s(kce);O8o=r(Ght,"deberta"),Ght.forEach(t),V8o=r(mxe," \u2014 "),bj=n(mxe,"A",{href:!0});var Oht=s(bj);X8o=r(Oht,"DebertaModel"),Oht.forEach(t),z8o=r(mxe," (DeBERTa model)"),mxe.forEach(t),Q8o=i(x),g_=n(x,"LI",{});var gxe=s(g_);Sce=n(gxe,"STRONG",{});var Vht=s(Sce);W8o=r(Vht,"deberta-v2"),Vht.forEach(t),H8o=r(gxe," \u2014 "),vj=n(gxe,"A",{href:!0});var Xht=s(vj);U8o=r(Xht,"DebertaV2Model"),Xht.forEach(t),J8o=r(gxe," (DeBERTa-v2 model)"),gxe.forEach(t),Y8o=i(x),h_=n(x,"LI",{});var hxe=s(h_);Rce=n(hxe,"STRONG",{});var zht=s(Rce);K8o=r(zht,"decision_transformer"),zht.forEach(t),Z8o=r(hxe," \u2014 "),Fj=n(hxe,"A",{href:!0});var Qht=s(Fj);eMo=r(Qht,"DecisionTransformerModel"),Qht.forEach(t),oMo=r(hxe," (Decision Transformer model)"),hxe.forEach(t),rMo=i(x),p_=n(x,"LI",{});var pxe=s(p_);Pce=n(pxe,"STRONG",{});var Wht=s(Pce);tMo=r(Wht,"deformable_detr"),Wht.forEach(t),aMo=r(pxe," \u2014 "),Tj=n(pxe,"A",{href:!0});var Hht=s(Tj);nMo=r(Hht,"DeformableDetrModel"),Hht.forEach(t),sMo=r(pxe," (Deformable DETR model)"),pxe.forEach(t),lMo=i(x),__=n(x,"LI",{});var _xe=s(__);Bce=n(_xe,"STRONG",{});var Uht=s(Bce);iMo=r(Uht,"deit"),Uht.forEach(t),dMo=r(_xe," \u2014 "),Mj=n(_xe,"A",{href:!0});var Jht=s(Mj);cMo=r(Jht,"DeiTModel"),Jht.forEach(t),fMo=r(_xe," (DeiT model)"),_xe.forEach(t),mMo=i(x),u_=n(x,"LI",{});var uxe=s(u_);Ice=n(uxe,"STRONG",{});var Yht=s(Ice);gMo=r(Yht,"detr"),Yht.forEach(t),hMo=r(uxe," \u2014 "),Ej=n(uxe,"A",{href:!0});var Kht=s(Ej);pMo=r(Kht,"DetrModel"),Kht.forEach(t),_Mo=r(uxe," (DETR model)"),uxe.forEach(t),uMo=i(x),b_=n(x,"LI",{});var bxe=s(b_);Nce=n(bxe,"STRONG",{});var Zht=s(Nce);bMo=r(Zht,"distilbert"),Zht.forEach(t),vMo=r(bxe," \u2014 "),Cj=n(bxe,"A",{href:!0});var ept=s(Cj);FMo=r(ept,"DistilBertModel"),ept.forEach(t),TMo=r(bxe," (DistilBERT model)"),bxe.forEach(t),MMo=i(x),v_=n(x,"LI",{});var vxe=s(v_);qce=n(vxe,"STRONG",{});var opt=s(qce);EMo=r(opt,"dpr"),opt.forEach(t),CMo=r(vxe," \u2014 "),wj=n(vxe,"A",{href:!0});var rpt=s(wj);wMo=r(rpt,"DPRQuestionEncoder"),rpt.forEach(t),AMo=r(vxe," (DPR model)"),vxe.forEach(t),LMo=i(x),F_=n(x,"LI",{});var Fxe=s(F_);jce=n(Fxe,"STRONG",{});var tpt=s(jce);yMo=r(tpt,"dpt"),tpt.forEach(t),xMo=r(Fxe," \u2014 "),Aj=n(Fxe,"A",{href:!0});var apt=s(Aj);$Mo=r(apt,"DPTModel"),apt.forEach(t),kMo=r(Fxe," (DPT model)"),Fxe.forEach(t),SMo=i(x),T_=n(x,"LI",{});var Txe=s(T_);Dce=n(Txe,"STRONG",{});var npt=s(Dce);RMo=r(npt,"electra"),npt.forEach(t),PMo=r(Txe," \u2014 "),Lj=n(Txe,"A",{href:!0});var spt=s(Lj);BMo=r(spt,"ElectraModel"),spt.forEach(t),IMo=r(Txe," (ELECTRA model)"),Txe.forEach(t),NMo=i(x),M_=n(x,"LI",{});var Mxe=s(M_);Gce=n(Mxe,"STRONG",{});var lpt=s(Gce);qMo=r(lpt,"flaubert"),lpt.forEach(t),jMo=r(Mxe," \u2014 "),yj=n(Mxe,"A",{href:!0});var ipt=s(yj);DMo=r(ipt,"FlaubertModel"),ipt.forEach(t),GMo=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),OMo=i(x),E_=n(x,"LI",{});var Exe=s(E_);Oce=n(Exe,"STRONG",{});var dpt=s(Oce);VMo=r(dpt,"flava"),dpt.forEach(t),XMo=r(Exe," \u2014 "),xj=n(Exe,"A",{href:!0});var cpt=s(xj);zMo=r(cpt,"FlavaModel"),cpt.forEach(t),QMo=r(Exe," (FLAVA model)"),Exe.forEach(t),WMo=i(x),C_=n(x,"LI",{});var Cxe=s(C_);Vce=n(Cxe,"STRONG",{});var fpt=s(Vce);HMo=r(fpt,"fnet"),fpt.forEach(t),UMo=r(Cxe," \u2014 "),$j=n(Cxe,"A",{href:!0});var mpt=s($j);JMo=r(mpt,"FNetModel"),mpt.forEach(t),YMo=r(Cxe," (FNet model)"),Cxe.forEach(t),KMo=i(x),w_=n(x,"LI",{});var wxe=s(w_);Xce=n(wxe,"STRONG",{});var gpt=s(Xce);ZMo=r(gpt,"fsmt"),gpt.forEach(t),e4o=r(wxe," \u2014 "),kj=n(wxe,"A",{href:!0});var hpt=s(kj);o4o=r(hpt,"FSMTModel"),hpt.forEach(t),r4o=r(wxe," (FairSeq Machine-Translation model)"),wxe.forEach(t),t4o=i(x),Qs=n(x,"LI",{});var $S=s(Qs);zce=n($S,"STRONG",{});var ppt=s(zce);a4o=r(ppt,"funnel"),ppt.forEach(t),n4o=r($S," \u2014 "),Sj=n($S,"A",{href:!0});var _pt=s(Sj);s4o=r(_pt,"FunnelModel"),_pt.forEach(t),l4o=r($S," or "),Rj=n($S,"A",{href:!0});var upt=s(Rj);i4o=r(upt,"FunnelBaseModel"),upt.forEach(t),d4o=r($S," (Funnel Transformer model)"),$S.forEach(t),c4o=i(x),A_=n(x,"LI",{});var Axe=s(A_);Qce=n(Axe,"STRONG",{});var bpt=s(Qce);f4o=r(bpt,"glpn"),bpt.forEach(t),m4o=r(Axe," \u2014 "),Pj=n(Axe,"A",{href:!0});var vpt=s(Pj);g4o=r(vpt,"GLPNModel"),vpt.forEach(t),h4o=r(Axe," (GLPN model)"),Axe.forEach(t),p4o=i(x),L_=n(x,"LI",{});var Lxe=s(L_);Wce=n(Lxe,"STRONG",{});var Fpt=s(Wce);_4o=r(Fpt,"gpt2"),Fpt.forEach(t),u4o=r(Lxe," \u2014 "),Bj=n(Lxe,"A",{href:!0});var Tpt=s(Bj);b4o=r(Tpt,"GPT2Model"),Tpt.forEach(t),v4o=r(Lxe," (OpenAI GPT-2 model)"),Lxe.forEach(t),F4o=i(x),y_=n(x,"LI",{});var yxe=s(y_);Hce=n(yxe,"STRONG",{});var Mpt=s(Hce);T4o=r(Mpt,"gpt_neo"),Mpt.forEach(t),M4o=r(yxe," \u2014 "),Ij=n(yxe,"A",{href:!0});var Ept=s(Ij);E4o=r(Ept,"GPTNeoModel"),Ept.forEach(t),C4o=r(yxe," (GPT Neo model)"),yxe.forEach(t),w4o=i(x),x_=n(x,"LI",{});var xxe=s(x_);Uce=n(xxe,"STRONG",{});var Cpt=s(Uce);A4o=r(Cpt,"gpt_neox"),Cpt.forEach(t),L4o=r(xxe," \u2014 "),Nj=n(xxe,"A",{href:!0});var wpt=s(Nj);y4o=r(wpt,"GPTNeoXModel"),wpt.forEach(t),x4o=r(xxe," (GPT NeoX model)"),xxe.forEach(t),$4o=i(x),$_=n(x,"LI",{});var $xe=s($_);Jce=n($xe,"STRONG",{});var Apt=s(Jce);k4o=r(Apt,"gptj"),Apt.forEach(t),S4o=r($xe," \u2014 "),qj=n($xe,"A",{href:!0});var Lpt=s(qj);R4o=r(Lpt,"GPTJModel"),Lpt.forEach(t),P4o=r($xe," (GPT-J model)"),$xe.forEach(t),B4o=i(x),k_=n(x,"LI",{});var kxe=s(k_);Yce=n(kxe,"STRONG",{});var ypt=s(Yce);I4o=r(ypt,"groupvit"),ypt.forEach(t),N4o=r(kxe," \u2014 "),jj=n(kxe,"A",{href:!0});var xpt=s(jj);q4o=r(xpt,"GroupViTModel"),xpt.forEach(t),j4o=r(kxe," (GroupViT model)"),kxe.forEach(t),D4o=i(x),S_=n(x,"LI",{});var Sxe=s(S_);Kce=n(Sxe,"STRONG",{});var $pt=s(Kce);G4o=r($pt,"hubert"),$pt.forEach(t),O4o=r(Sxe," \u2014 "),Dj=n(Sxe,"A",{href:!0});var kpt=s(Dj);V4o=r(kpt,"HubertModel"),kpt.forEach(t),X4o=r(Sxe," (Hubert model)"),Sxe.forEach(t),z4o=i(x),R_=n(x,"LI",{});var Rxe=s(R_);Zce=n(Rxe,"STRONG",{});var Spt=s(Zce);Q4o=r(Spt,"ibert"),Spt.forEach(t),W4o=r(Rxe," \u2014 "),Gj=n(Rxe,"A",{href:!0});var Rpt=s(Gj);H4o=r(Rpt,"IBertModel"),Rpt.forEach(t),U4o=r(Rxe," (I-BERT model)"),Rxe.forEach(t),J4o=i(x),P_=n(x,"LI",{});var Pxe=s(P_);efe=n(Pxe,"STRONG",{});var Ppt=s(efe);Y4o=r(Ppt,"imagegpt"),Ppt.forEach(t),K4o=r(Pxe," \u2014 "),Oj=n(Pxe,"A",{href:!0});var Bpt=s(Oj);Z4o=r(Bpt,"ImageGPTModel"),Bpt.forEach(t),eEo=r(Pxe," (ImageGPT model)"),Pxe.forEach(t),oEo=i(x),B_=n(x,"LI",{});var Bxe=s(B_);ofe=n(Bxe,"STRONG",{});var Ipt=s(ofe);rEo=r(Ipt,"layoutlm"),Ipt.forEach(t),tEo=r(Bxe," \u2014 "),Vj=n(Bxe,"A",{href:!0});var Npt=s(Vj);aEo=r(Npt,"LayoutLMModel"),Npt.forEach(t),nEo=r(Bxe," (LayoutLM model)"),Bxe.forEach(t),sEo=i(x),I_=n(x,"LI",{});var Ixe=s(I_);rfe=n(Ixe,"STRONG",{});var qpt=s(rfe);lEo=r(qpt,"layoutlmv2"),qpt.forEach(t),iEo=r(Ixe," \u2014 "),Xj=n(Ixe,"A",{href:!0});var jpt=s(Xj);dEo=r(jpt,"LayoutLMv2Model"),jpt.forEach(t),cEo=r(Ixe," (LayoutLMv2 model)"),Ixe.forEach(t),fEo=i(x),N_=n(x,"LI",{});var Nxe=s(N_);tfe=n(Nxe,"STRONG",{});var Dpt=s(tfe);mEo=r(Dpt,"layoutlmv3"),Dpt.forEach(t),gEo=r(Nxe," \u2014 "),zj=n(Nxe,"A",{href:!0});var Gpt=s(zj);hEo=r(Gpt,"LayoutLMv3Model"),Gpt.forEach(t),pEo=r(Nxe," (LayoutLMv3 model)"),Nxe.forEach(t),_Eo=i(x),q_=n(x,"LI",{});var qxe=s(q_);afe=n(qxe,"STRONG",{});var Opt=s(afe);uEo=r(Opt,"led"),Opt.forEach(t),bEo=r(qxe," \u2014 "),Qj=n(qxe,"A",{href:!0});var Vpt=s(Qj);vEo=r(Vpt,"LEDModel"),Vpt.forEach(t),FEo=r(qxe," (LED model)"),qxe.forEach(t),TEo=i(x),j_=n(x,"LI",{});var jxe=s(j_);nfe=n(jxe,"STRONG",{});var Xpt=s(nfe);MEo=r(Xpt,"levit"),Xpt.forEach(t),EEo=r(jxe," \u2014 "),Wj=n(jxe,"A",{href:!0});var zpt=s(Wj);CEo=r(zpt,"LevitModel"),zpt.forEach(t),wEo=r(jxe," (LeViT model)"),jxe.forEach(t),AEo=i(x),D_=n(x,"LI",{});var Dxe=s(D_);sfe=n(Dxe,"STRONG",{});var Qpt=s(sfe);LEo=r(Qpt,"longformer"),Qpt.forEach(t),yEo=r(Dxe," \u2014 "),Hj=n(Dxe,"A",{href:!0});var Wpt=s(Hj);xEo=r(Wpt,"LongformerModel"),Wpt.forEach(t),$Eo=r(Dxe," (Longformer model)"),Dxe.forEach(t),kEo=i(x),G_=n(x,"LI",{});var Gxe=s(G_);lfe=n(Gxe,"STRONG",{});var Hpt=s(lfe);SEo=r(Hpt,"longt5"),Hpt.forEach(t),REo=r(Gxe," \u2014 "),Uj=n(Gxe,"A",{href:!0});var Upt=s(Uj);PEo=r(Upt,"LongT5Model"),Upt.forEach(t),BEo=r(Gxe," (LongT5 model)"),Gxe.forEach(t),IEo=i(x),O_=n(x,"LI",{});var Oxe=s(O_);ife=n(Oxe,"STRONG",{});var Jpt=s(ife);NEo=r(Jpt,"luke"),Jpt.forEach(t),qEo=r(Oxe," \u2014 "),Jj=n(Oxe,"A",{href:!0});var Ypt=s(Jj);jEo=r(Ypt,"LukeModel"),Ypt.forEach(t),DEo=r(Oxe," (LUKE model)"),Oxe.forEach(t),GEo=i(x),V_=n(x,"LI",{});var Vxe=s(V_);dfe=n(Vxe,"STRONG",{});var Kpt=s(dfe);OEo=r(Kpt,"lxmert"),Kpt.forEach(t),VEo=r(Vxe," \u2014 "),Yj=n(Vxe,"A",{href:!0});var Zpt=s(Yj);XEo=r(Zpt,"LxmertModel"),Zpt.forEach(t),zEo=r(Vxe," (LXMERT model)"),Vxe.forEach(t),QEo=i(x),X_=n(x,"LI",{});var Xxe=s(X_);cfe=n(Xxe,"STRONG",{});var e_t=s(cfe);WEo=r(e_t,"m2m_100"),e_t.forEach(t),HEo=r(Xxe," \u2014 "),Kj=n(Xxe,"A",{href:!0});var o_t=s(Kj);UEo=r(o_t,"M2M100Model"),o_t.forEach(t),JEo=r(Xxe," (M2M100 model)"),Xxe.forEach(t),YEo=i(x),z_=n(x,"LI",{});var zxe=s(z_);ffe=n(zxe,"STRONG",{});var r_t=s(ffe);KEo=r(r_t,"marian"),r_t.forEach(t),ZEo=r(zxe," \u2014 "),Zj=n(zxe,"A",{href:!0});var t_t=s(Zj);eCo=r(t_t,"MarianModel"),t_t.forEach(t),oCo=r(zxe," (Marian model)"),zxe.forEach(t),rCo=i(x),Q_=n(x,"LI",{});var Qxe=s(Q_);mfe=n(Qxe,"STRONG",{});var a_t=s(mfe);tCo=r(a_t,"maskformer"),a_t.forEach(t),aCo=r(Qxe," \u2014 "),eD=n(Qxe,"A",{href:!0});var n_t=s(eD);nCo=r(n_t,"MaskFormerModel"),n_t.forEach(t),sCo=r(Qxe," (MaskFormer model)"),Qxe.forEach(t),lCo=i(x),W_=n(x,"LI",{});var Wxe=s(W_);gfe=n(Wxe,"STRONG",{});var s_t=s(gfe);iCo=r(s_t,"mbart"),s_t.forEach(t),dCo=r(Wxe," \u2014 "),oD=n(Wxe,"A",{href:!0});var l_t=s(oD);cCo=r(l_t,"MBartModel"),l_t.forEach(t),fCo=r(Wxe," (mBART model)"),Wxe.forEach(t),mCo=i(x),H_=n(x,"LI",{});var Hxe=s(H_);hfe=n(Hxe,"STRONG",{});var i_t=s(hfe);gCo=r(i_t,"mctct"),i_t.forEach(t),hCo=r(Hxe," \u2014 "),rD=n(Hxe,"A",{href:!0});var d_t=s(rD);pCo=r(d_t,"MCTCTModel"),d_t.forEach(t),_Co=r(Hxe," (M-CTC-T model)"),Hxe.forEach(t),uCo=i(x),U_=n(x,"LI",{});var Uxe=s(U_);pfe=n(Uxe,"STRONG",{});var c_t=s(pfe);bCo=r(c_t,"megatron-bert"),c_t.forEach(t),vCo=r(Uxe," \u2014 "),tD=n(Uxe,"A",{href:!0});var f_t=s(tD);FCo=r(f_t,"MegatronBertModel"),f_t.forEach(t),TCo=r(Uxe," (Megatron-BERT model)"),Uxe.forEach(t),MCo=i(x),J_=n(x,"LI",{});var Jxe=s(J_);_fe=n(Jxe,"STRONG",{});var m_t=s(_fe);ECo=r(m_t,"mobilebert"),m_t.forEach(t),CCo=r(Jxe," \u2014 "),aD=n(Jxe,"A",{href:!0});var g_t=s(aD);wCo=r(g_t,"MobileBertModel"),g_t.forEach(t),ACo=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),LCo=i(x),Y_=n(x,"LI",{});var Yxe=s(Y_);ufe=n(Yxe,"STRONG",{});var h_t=s(ufe);yCo=r(h_t,"mobilevit"),h_t.forEach(t),xCo=r(Yxe," \u2014 "),nD=n(Yxe,"A",{href:!0});var p_t=s(nD);$Co=r(p_t,"MobileViTModel"),p_t.forEach(t),kCo=r(Yxe," (MobileViT model)"),Yxe.forEach(t),SCo=i(x),K_=n(x,"LI",{});var Kxe=s(K_);bfe=n(Kxe,"STRONG",{});var __t=s(bfe);RCo=r(__t,"mpnet"),__t.forEach(t),PCo=r(Kxe," \u2014 "),sD=n(Kxe,"A",{href:!0});var u_t=s(sD);BCo=r(u_t,"MPNetModel"),u_t.forEach(t),ICo=r(Kxe," (MPNet model)"),Kxe.forEach(t),NCo=i(x),Z_=n(x,"LI",{});var Zxe=s(Z_);vfe=n(Zxe,"STRONG",{});var b_t=s(vfe);qCo=r(b_t,"mt5"),b_t.forEach(t),jCo=r(Zxe," \u2014 "),lD=n(Zxe,"A",{href:!0});var v_t=s(lD);DCo=r(v_t,"MT5Model"),v_t.forEach(t),GCo=r(Zxe," (MT5 model)"),Zxe.forEach(t),OCo=i(x),eu=n(x,"LI",{});var e$e=s(eu);Ffe=n(e$e,"STRONG",{});var F_t=s(Ffe);VCo=r(F_t,"mvp"),F_t.forEach(t),XCo=r(e$e," \u2014 "),iD=n(e$e,"A",{href:!0});var T_t=s(iD);zCo=r(T_t,"MvpModel"),T_t.forEach(t),QCo=r(e$e," (MVP model)"),e$e.forEach(t),WCo=i(x),ou=n(x,"LI",{});var o$e=s(ou);Tfe=n(o$e,"STRONG",{});var M_t=s(Tfe);HCo=r(M_t,"nezha"),M_t.forEach(t),UCo=r(o$e," \u2014 "),dD=n(o$e,"A",{href:!0});var E_t=s(dD);JCo=r(E_t,"NezhaModel"),E_t.forEach(t),YCo=r(o$e," (Nezha model)"),o$e.forEach(t),KCo=i(x),ru=n(x,"LI",{});var r$e=s(ru);Mfe=n(r$e,"STRONG",{});var C_t=s(Mfe);ZCo=r(C_t,"nystromformer"),C_t.forEach(t),e3o=r(r$e," \u2014 "),cD=n(r$e,"A",{href:!0});var w_t=s(cD);o3o=r(w_t,"NystromformerModel"),w_t.forEach(t),r3o=r(r$e," (Nystr\xF6mformer model)"),r$e.forEach(t),t3o=i(x),tu=n(x,"LI",{});var t$e=s(tu);Efe=n(t$e,"STRONG",{});var A_t=s(Efe);a3o=r(A_t,"openai-gpt"),A_t.forEach(t),n3o=r(t$e," \u2014 "),fD=n(t$e,"A",{href:!0});var L_t=s(fD);s3o=r(L_t,"OpenAIGPTModel"),L_t.forEach(t),l3o=r(t$e," (OpenAI GPT model)"),t$e.forEach(t),i3o=i(x),au=n(x,"LI",{});var a$e=s(au);Cfe=n(a$e,"STRONG",{});var y_t=s(Cfe);d3o=r(y_t,"opt"),y_t.forEach(t),c3o=r(a$e," \u2014 "),mD=n(a$e,"A",{href:!0});var x_t=s(mD);f3o=r(x_t,"OPTModel"),x_t.forEach(t),m3o=r(a$e," (OPT model)"),a$e.forEach(t),g3o=i(x),nu=n(x,"LI",{});var n$e=s(nu);wfe=n(n$e,"STRONG",{});var $_t=s(wfe);h3o=r($_t,"pegasus"),$_t.forEach(t),p3o=r(n$e," \u2014 "),gD=n(n$e,"A",{href:!0});var k_t=s(gD);_3o=r(k_t,"PegasusModel"),k_t.forEach(t),u3o=r(n$e," (Pegasus model)"),n$e.forEach(t),b3o=i(x),su=n(x,"LI",{});var s$e=s(su);Afe=n(s$e,"STRONG",{});var S_t=s(Afe);v3o=r(S_t,"perceiver"),S_t.forEach(t),F3o=r(s$e," \u2014 "),hD=n(s$e,"A",{href:!0});var R_t=s(hD);T3o=r(R_t,"PerceiverModel"),R_t.forEach(t),M3o=r(s$e," (Perceiver model)"),s$e.forEach(t),E3o=i(x),lu=n(x,"LI",{});var l$e=s(lu);Lfe=n(l$e,"STRONG",{});var P_t=s(Lfe);C3o=r(P_t,"plbart"),P_t.forEach(t),w3o=r(l$e," \u2014 "),pD=n(l$e,"A",{href:!0});var B_t=s(pD);A3o=r(B_t,"PLBartModel"),B_t.forEach(t),L3o=r(l$e," (PLBart model)"),l$e.forEach(t),y3o=i(x),iu=n(x,"LI",{});var i$e=s(iu);yfe=n(i$e,"STRONG",{});var I_t=s(yfe);x3o=r(I_t,"poolformer"),I_t.forEach(t),$3o=r(i$e," \u2014 "),_D=n(i$e,"A",{href:!0});var N_t=s(_D);k3o=r(N_t,"PoolFormerModel"),N_t.forEach(t),S3o=r(i$e," (PoolFormer model)"),i$e.forEach(t),R3o=i(x),du=n(x,"LI",{});var d$e=s(du);xfe=n(d$e,"STRONG",{});var q_t=s(xfe);P3o=r(q_t,"prophetnet"),q_t.forEach(t),B3o=r(d$e," \u2014 "),uD=n(d$e,"A",{href:!0});var j_t=s(uD);I3o=r(j_t,"ProphetNetModel"),j_t.forEach(t),N3o=r(d$e," (ProphetNet model)"),d$e.forEach(t),q3o=i(x),cu=n(x,"LI",{});var c$e=s(cu);$fe=n(c$e,"STRONG",{});var D_t=s($fe);j3o=r(D_t,"qdqbert"),D_t.forEach(t),D3o=r(c$e," \u2014 "),bD=n(c$e,"A",{href:!0});var G_t=s(bD);G3o=r(G_t,"QDQBertModel"),G_t.forEach(t),O3o=r(c$e," (QDQBert model)"),c$e.forEach(t),V3o=i(x),fu=n(x,"LI",{});var f$e=s(fu);kfe=n(f$e,"STRONG",{});var O_t=s(kfe);X3o=r(O_t,"reformer"),O_t.forEach(t),z3o=r(f$e," \u2014 "),vD=n(f$e,"A",{href:!0});var V_t=s(vD);Q3o=r(V_t,"ReformerModel"),V_t.forEach(t),W3o=r(f$e," (Reformer model)"),f$e.forEach(t),H3o=i(x),mu=n(x,"LI",{});var m$e=s(mu);Sfe=n(m$e,"STRONG",{});var X_t=s(Sfe);U3o=r(X_t,"regnet"),X_t.forEach(t),J3o=r(m$e," \u2014 "),FD=n(m$e,"A",{href:!0});var z_t=s(FD);Y3o=r(z_t,"RegNetModel"),z_t.forEach(t),K3o=r(m$e," (RegNet model)"),m$e.forEach(t),Z3o=i(x),gu=n(x,"LI",{});var g$e=s(gu);Rfe=n(g$e,"STRONG",{});var Q_t=s(Rfe);e5o=r(Q_t,"rembert"),Q_t.forEach(t),o5o=r(g$e," \u2014 "),TD=n(g$e,"A",{href:!0});var W_t=s(TD);r5o=r(W_t,"RemBertModel"),W_t.forEach(t),t5o=r(g$e," (RemBERT model)"),g$e.forEach(t),a5o=i(x),hu=n(x,"LI",{});var h$e=s(hu);Pfe=n(h$e,"STRONG",{});var H_t=s(Pfe);n5o=r(H_t,"resnet"),H_t.forEach(t),s5o=r(h$e," \u2014 "),MD=n(h$e,"A",{href:!0});var U_t=s(MD);l5o=r(U_t,"ResNetModel"),U_t.forEach(t),i5o=r(h$e," (ResNet model)"),h$e.forEach(t),d5o=i(x),pu=n(x,"LI",{});var p$e=s(pu);Bfe=n(p$e,"STRONG",{});var J_t=s(Bfe);c5o=r(J_t,"retribert"),J_t.forEach(t),f5o=r(p$e," \u2014 "),ED=n(p$e,"A",{href:!0});var Y_t=s(ED);m5o=r(Y_t,"RetriBertModel"),Y_t.forEach(t),g5o=r(p$e," (RetriBERT model)"),p$e.forEach(t),h5o=i(x),_u=n(x,"LI",{});var _$e=s(_u);Ife=n(_$e,"STRONG",{});var K_t=s(Ife);p5o=r(K_t,"roberta"),K_t.forEach(t),_5o=r(_$e," \u2014 "),CD=n(_$e,"A",{href:!0});var Z_t=s(CD);u5o=r(Z_t,"RobertaModel"),Z_t.forEach(t),b5o=r(_$e," (RoBERTa model)"),_$e.forEach(t),v5o=i(x),uu=n(x,"LI",{});var u$e=s(uu);Nfe=n(u$e,"STRONG",{});var eut=s(Nfe);F5o=r(eut,"roformer"),eut.forEach(t),T5o=r(u$e," \u2014 "),wD=n(u$e,"A",{href:!0});var out=s(wD);M5o=r(out,"RoFormerModel"),out.forEach(t),E5o=r(u$e," (RoFormer model)"),u$e.forEach(t),C5o=i(x),bu=n(x,"LI",{});var b$e=s(bu);qfe=n(b$e,"STRONG",{});var rut=s(qfe);w5o=r(rut,"segformer"),rut.forEach(t),A5o=r(b$e," \u2014 "),AD=n(b$e,"A",{href:!0});var tut=s(AD);L5o=r(tut,"SegformerModel"),tut.forEach(t),y5o=r(b$e," (SegFormer model)"),b$e.forEach(t),x5o=i(x),vu=n(x,"LI",{});var v$e=s(vu);jfe=n(v$e,"STRONG",{});var aut=s(jfe);$5o=r(aut,"sew"),aut.forEach(t),k5o=r(v$e," \u2014 "),LD=n(v$e,"A",{href:!0});var nut=s(LD);S5o=r(nut,"SEWModel"),nut.forEach(t),R5o=r(v$e," (SEW model)"),v$e.forEach(t),P5o=i(x),Fu=n(x,"LI",{});var F$e=s(Fu);Dfe=n(F$e,"STRONG",{});var sut=s(Dfe);B5o=r(sut,"sew-d"),sut.forEach(t),I5o=r(F$e," \u2014 "),yD=n(F$e,"A",{href:!0});var lut=s(yD);N5o=r(lut,"SEWDModel"),lut.forEach(t),q5o=r(F$e," (SEW-D model)"),F$e.forEach(t),j5o=i(x),Tu=n(x,"LI",{});var T$e=s(Tu);Gfe=n(T$e,"STRONG",{});var iut=s(Gfe);D5o=r(iut,"speech_to_text"),iut.forEach(t),G5o=r(T$e," \u2014 "),xD=n(T$e,"A",{href:!0});var dut=s(xD);O5o=r(dut,"Speech2TextModel"),dut.forEach(t),V5o=r(T$e," (Speech2Text model)"),T$e.forEach(t),X5o=i(x),Mu=n(x,"LI",{});var M$e=s(Mu);Ofe=n(M$e,"STRONG",{});var cut=s(Ofe);z5o=r(cut,"splinter"),cut.forEach(t),Q5o=r(M$e," \u2014 "),$D=n(M$e,"A",{href:!0});var fut=s($D);W5o=r(fut,"SplinterModel"),fut.forEach(t),H5o=r(M$e," (Splinter model)"),M$e.forEach(t),U5o=i(x),Eu=n(x,"LI",{});var E$e=s(Eu);Vfe=n(E$e,"STRONG",{});var mut=s(Vfe);J5o=r(mut,"squeezebert"),mut.forEach(t),Y5o=r(E$e," \u2014 "),kD=n(E$e,"A",{href:!0});var gut=s(kD);K5o=r(gut,"SqueezeBertModel"),gut.forEach(t),Z5o=r(E$e," (SqueezeBERT model)"),E$e.forEach(t),e0o=i(x),Cu=n(x,"LI",{});var C$e=s(Cu);Xfe=n(C$e,"STRONG",{});var hut=s(Xfe);o0o=r(hut,"swin"),hut.forEach(t),r0o=r(C$e," \u2014 "),SD=n(C$e,"A",{href:!0});var put=s(SD);t0o=r(put,"SwinModel"),put.forEach(t),a0o=r(C$e," (Swin Transformer model)"),C$e.forEach(t),n0o=i(x),wu=n(x,"LI",{});var w$e=s(wu);zfe=n(w$e,"STRONG",{});var _ut=s(zfe);s0o=r(_ut,"t5"),_ut.forEach(t),l0o=r(w$e," \u2014 "),RD=n(w$e,"A",{href:!0});var uut=s(RD);i0o=r(uut,"T5Model"),uut.forEach(t),d0o=r(w$e," (T5 model)"),w$e.forEach(t),c0o=i(x),Au=n(x,"LI",{});var A$e=s(Au);Qfe=n(A$e,"STRONG",{});var but=s(Qfe);f0o=r(but,"tapas"),but.forEach(t),m0o=r(A$e," \u2014 "),PD=n(A$e,"A",{href:!0});var vut=s(PD);g0o=r(vut,"TapasModel"),vut.forEach(t),h0o=r(A$e," (TAPAS model)"),A$e.forEach(t),p0o=i(x),Lu=n(x,"LI",{});var L$e=s(Lu);Wfe=n(L$e,"STRONG",{});var Fut=s(Wfe);_0o=r(Fut,"trajectory_transformer"),Fut.forEach(t),u0o=r(L$e," \u2014 "),BD=n(L$e,"A",{href:!0});var Tut=s(BD);b0o=r(Tut,"TrajectoryTransformerModel"),Tut.forEach(t),v0o=r(L$e," (Trajectory Transformer model)"),L$e.forEach(t),F0o=i(x),yu=n(x,"LI",{});var y$e=s(yu);Hfe=n(y$e,"STRONG",{});var Mut=s(Hfe);T0o=r(Mut,"transfo-xl"),Mut.forEach(t),M0o=r(y$e," \u2014 "),ID=n(y$e,"A",{href:!0});var Eut=s(ID);E0o=r(Eut,"TransfoXLModel"),Eut.forEach(t),C0o=r(y$e," (Transformer-XL model)"),y$e.forEach(t),w0o=i(x),xu=n(x,"LI",{});var x$e=s(xu);Ufe=n(x$e,"STRONG",{});var Cut=s(Ufe);A0o=r(Cut,"unispeech"),Cut.forEach(t),L0o=r(x$e," \u2014 "),ND=n(x$e,"A",{href:!0});var wut=s(ND);y0o=r(wut,"UniSpeechModel"),wut.forEach(t),x0o=r(x$e," (UniSpeech model)"),x$e.forEach(t),$0o=i(x),$u=n(x,"LI",{});var $$e=s($u);Jfe=n($$e,"STRONG",{});var Aut=s(Jfe);k0o=r(Aut,"unispeech-sat"),Aut.forEach(t),S0o=r($$e," \u2014 "),qD=n($$e,"A",{href:!0});var Lut=s(qD);R0o=r(Lut,"UniSpeechSatModel"),Lut.forEach(t),P0o=r($$e," (UniSpeechSat model)"),$$e.forEach(t),B0o=i(x),ku=n(x,"LI",{});var k$e=s(ku);Yfe=n(k$e,"STRONG",{});var yut=s(Yfe);I0o=r(yut,"van"),yut.forEach(t),N0o=r(k$e," \u2014 "),jD=n(k$e,"A",{href:!0});var xut=s(jD);q0o=r(xut,"VanModel"),xut.forEach(t),j0o=r(k$e," (VAN model)"),k$e.forEach(t),D0o=i(x),Su=n(x,"LI",{});var S$e=s(Su);Kfe=n(S$e,"STRONG",{});var $ut=s(Kfe);G0o=r($ut,"vilt"),$ut.forEach(t),O0o=r(S$e," \u2014 "),DD=n(S$e,"A",{href:!0});var kut=s(DD);V0o=r(kut,"ViltModel"),kut.forEach(t),X0o=r(S$e," (ViLT model)"),S$e.forEach(t),z0o=i(x),Ru=n(x,"LI",{});var R$e=s(Ru);Zfe=n(R$e,"STRONG",{});var Sut=s(Zfe);Q0o=r(Sut,"vision-text-dual-encoder"),Sut.forEach(t),W0o=r(R$e," \u2014 "),GD=n(R$e,"A",{href:!0});var Rut=s(GD);H0o=r(Rut,"VisionTextDualEncoderModel"),Rut.forEach(t),U0o=r(R$e," (VisionTextDualEncoder model)"),R$e.forEach(t),J0o=i(x),Pu=n(x,"LI",{});var P$e=s(Pu);eme=n(P$e,"STRONG",{});var Put=s(eme);Y0o=r(Put,"visual_bert"),Put.forEach(t),K0o=r(P$e," \u2014 "),OD=n(P$e,"A",{href:!0});var But=s(OD);Z0o=r(But,"VisualBertModel"),But.forEach(t),ewo=r(P$e," (VisualBERT model)"),P$e.forEach(t),owo=i(x),Bu=n(x,"LI",{});var B$e=s(Bu);ome=n(B$e,"STRONG",{});var Iut=s(ome);rwo=r(Iut,"vit"),Iut.forEach(t),two=r(B$e," \u2014 "),VD=n(B$e,"A",{href:!0});var Nut=s(VD);awo=r(Nut,"ViTModel"),Nut.forEach(t),nwo=r(B$e," (ViT model)"),B$e.forEach(t),swo=i(x),Iu=n(x,"LI",{});var I$e=s(Iu);rme=n(I$e,"STRONG",{});var qut=s(rme);lwo=r(qut,"vit_mae"),qut.forEach(t),iwo=r(I$e," \u2014 "),XD=n(I$e,"A",{href:!0});var jut=s(XD);dwo=r(jut,"ViTMAEModel"),jut.forEach(t),cwo=r(I$e," (ViTMAE model)"),I$e.forEach(t),fwo=i(x),Nu=n(x,"LI",{});var N$e=s(Nu);tme=n(N$e,"STRONG",{});var Dut=s(tme);mwo=r(Dut,"wav2vec2"),Dut.forEach(t),gwo=r(N$e," \u2014 "),zD=n(N$e,"A",{href:!0});var Gut=s(zD);hwo=r(Gut,"Wav2Vec2Model"),Gut.forEach(t),pwo=r(N$e," (Wav2Vec2 model)"),N$e.forEach(t),_wo=i(x),qu=n(x,"LI",{});var q$e=s(qu);ame=n(q$e,"STRONG",{});var Out=s(ame);uwo=r(Out,"wav2vec2-conformer"),Out.forEach(t),bwo=r(q$e," \u2014 "),QD=n(q$e,"A",{href:!0});var Vut=s(QD);vwo=r(Vut,"Wav2Vec2ConformerModel"),Vut.forEach(t),Fwo=r(q$e," (Wav2Vec2-Conformer model)"),q$e.forEach(t),Two=i(x),ju=n(x,"LI",{});var j$e=s(ju);nme=n(j$e,"STRONG",{});var Xut=s(nme);Mwo=r(Xut,"wavlm"),Xut.forEach(t),Ewo=r(j$e," \u2014 "),WD=n(j$e,"A",{href:!0});var zut=s(WD);Cwo=r(zut,"WavLMModel"),zut.forEach(t),wwo=r(j$e," (WavLM model)"),j$e.forEach(t),Awo=i(x),Du=n(x,"LI",{});var D$e=s(Du);sme=n(D$e,"STRONG",{});var Qut=s(sme);Lwo=r(Qut,"xglm"),Qut.forEach(t),ywo=r(D$e," \u2014 "),HD=n(D$e,"A",{href:!0});var Wut=s(HD);xwo=r(Wut,"XGLMModel"),Wut.forEach(t),$wo=r(D$e," (XGLM model)"),D$e.forEach(t),kwo=i(x),Gu=n(x,"LI",{});var G$e=s(Gu);lme=n(G$e,"STRONG",{});var Hut=s(lme);Swo=r(Hut,"xlm"),Hut.forEach(t),Rwo=r(G$e," \u2014 "),UD=n(G$e,"A",{href:!0});var Uut=s(UD);Pwo=r(Uut,"XLMModel"),Uut.forEach(t),Bwo=r(G$e," (XLM model)"),G$e.forEach(t),Iwo=i(x),Ou=n(x,"LI",{});var O$e=s(Ou);ime=n(O$e,"STRONG",{});var Jut=s(ime);Nwo=r(Jut,"xlm-prophetnet"),Jut.forEach(t),qwo=r(O$e," \u2014 "),JD=n(O$e,"A",{href:!0});var Yut=s(JD);jwo=r(Yut,"XLMProphetNetModel"),Yut.forEach(t),Dwo=r(O$e," (XLM-ProphetNet model)"),O$e.forEach(t),Gwo=i(x),Vu=n(x,"LI",{});var V$e=s(Vu);dme=n(V$e,"STRONG",{});var Kut=s(dme);Owo=r(Kut,"xlm-roberta"),Kut.forEach(t),Vwo=r(V$e," \u2014 "),YD=n(V$e,"A",{href:!0});var Zut=s(YD);Xwo=r(Zut,"XLMRobertaModel"),Zut.forEach(t),zwo=r(V$e," (XLM-RoBERTa model)"),V$e.forEach(t),Qwo=i(x),Xu=n(x,"LI",{});var X$e=s(Xu);cme=n(X$e,"STRONG",{});var e1t=s(cme);Wwo=r(e1t,"xlm-roberta-xl"),e1t.forEach(t),Hwo=r(X$e," \u2014 "),KD=n(X$e,"A",{href:!0});var o1t=s(KD);Uwo=r(o1t,"XLMRobertaXLModel"),o1t.forEach(t),Jwo=r(X$e," (XLM-RoBERTa-XL model)"),X$e.forEach(t),Ywo=i(x),zu=n(x,"LI",{});var z$e=s(zu);fme=n(z$e,"STRONG",{});var r1t=s(fme);Kwo=r(r1t,"xlnet"),r1t.forEach(t),Zwo=r(z$e," \u2014 "),ZD=n(z$e,"A",{href:!0});var t1t=s(ZD);eAo=r(t1t,"XLNetModel"),t1t.forEach(t),oAo=r(z$e," (XLNet model)"),z$e.forEach(t),rAo=i(x),Qu=n(x,"LI",{});var Q$e=s(Qu);mme=n(Q$e,"STRONG",{});var a1t=s(mme);tAo=r(a1t,"yolos"),a1t.forEach(t),aAo=r(Q$e," \u2014 "),eG=n(Q$e,"A",{href:!0});var n1t=s(eG);nAo=r(n1t,"YolosModel"),n1t.forEach(t),sAo=r(Q$e," (YOLOS model)"),Q$e.forEach(t),lAo=i(x),Wu=n(x,"LI",{});var W$e=s(Wu);gme=n(W$e,"STRONG",{});var s1t=s(gme);iAo=r(s1t,"yoso"),s1t.forEach(t),dAo=r(W$e," \u2014 "),oG=n(W$e,"A",{href:!0});var l1t=s(oG);cAo=r(l1t,"YosoModel"),l1t.forEach(t),fAo=r(W$e," (YOSO model)"),W$e.forEach(t),x.forEach(t),mAo=i(sa),Hu=n(sa,"P",{});var H$e=s(Hu);gAo=r(H$e,"The model is set in evaluation mode by default using "),hme=n(H$e,"CODE",{});var i1t=s(hme);hAo=r(i1t,"model.eval()"),i1t.forEach(t),pAo=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(H$e,"CODE",{});var d1t=s(pme);_Ao=r(d1t,"model.train()"),d1t.forEach(t),H$e.forEach(t),uAo=i(sa),T(Uu.$$.fragment,sa),sa.forEach(t),el.forEach(t),mXe=i(f),Vi=n(f,"H2",{class:!0});var bQe=s(Vi);Ju=n(bQe,"A",{id:!0,class:!0,href:!0});var c1t=s(Ju);_me=n(c1t,"SPAN",{});var f1t=s(_me);T(IL.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),bAo=i(bQe),ume=n(bQe,"SPAN",{});var m1t=s(ume);vAo=r(m1t,"AutoModelForPreTraining"),m1t.forEach(t),bQe.forEach(t),gXe=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(NL.$$.fragment,ol),FAo=i(ol),Xi=n(ol,"P",{});var kre=s(Xi);TAo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rG=n(kre,"A",{href:!0});var g1t=s(rG);MAo=r(g1t,"from_pretrained()"),g1t.forEach(t),EAo=r(kre," class method or the "),tG=n(kre,"A",{href:!0});var h1t=s(tG);CAo=r(h1t,"from_config()"),h1t.forEach(t),wAo=r(kre,` class
method.`),kre.forEach(t),AAo=i(ol),qL=n(ol,"P",{});var vQe=s(qL);LAo=r(vQe,"This class cannot be instantiated directly using "),bme=n(vQe,"CODE",{});var p1t=s(bme);yAo=r(p1t,"__init__()"),p1t.forEach(t),xAo=r(vQe," (throws an error)."),vQe.forEach(t),$Ao=i(ol),it=n(ol,"DIV",{class:!0});var fA=s(it);T(jL.$$.fragment,fA),kAo=i(fA),vme=n(fA,"P",{});var _1t=s(vme);SAo=r(_1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_1t.forEach(t),RAo=i(fA),zi=n(fA,"P",{});var Sre=s(zi);PAo=r(Sre,`Note:
Loading a model from its configuration file does `),Fme=n(Sre,"STRONG",{});var u1t=s(Fme);BAo=r(u1t,"not"),u1t.forEach(t),IAo=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(Sre,"A",{href:!0});var b1t=s(aG);NAo=r(b1t,"from_pretrained()"),b1t.forEach(t),qAo=r(Sre," to load the model weights."),Sre.forEach(t),jAo=i(fA),T(Yu.$$.fragment,fA),fA.forEach(t),DAo=i(ol),Ye=n(ol,"DIV",{class:!0});var la=s(Ye);T(DL.$$.fragment,la),GAo=i(la),Tme=n(la,"P",{});var v1t=s(Tme);OAo=r(v1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v1t.forEach(t),VAo=i(la),Ia=n(la,"P",{});var mA=s(Ia);XAo=r(mA,"The model class to instantiate is selected based on the "),Mme=n(mA,"CODE",{});var F1t=s(Mme);zAo=r(F1t,"model_type"),F1t.forEach(t),QAo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Eme=n(mA,"CODE",{});var T1t=s(Eme);WAo=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),HAo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(mA,"CODE",{});var M1t=s(Cme);UAo=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),JAo=r(mA,":"),mA.forEach(t),YAo=i(la),G=n(la,"UL",{});var O=s(G);Ku=n(O,"LI",{});var U$e=s(Ku);wme=n(U$e,"STRONG",{});var E1t=s(wme);KAo=r(E1t,"albert"),E1t.forEach(t),ZAo=r(U$e," \u2014 "),nG=n(U$e,"A",{href:!0});var C1t=s(nG);e6o=r(C1t,"AlbertForPreTraining"),C1t.forEach(t),o6o=r(U$e," (ALBERT model)"),U$e.forEach(t),r6o=i(O),Zu=n(O,"LI",{});var J$e=s(Zu);Ame=n(J$e,"STRONG",{});var w1t=s(Ame);t6o=r(w1t,"bart"),w1t.forEach(t),a6o=r(J$e," \u2014 "),sG=n(J$e,"A",{href:!0});var A1t=s(sG);n6o=r(A1t,"BartForConditionalGeneration"),A1t.forEach(t),s6o=r(J$e," (BART model)"),J$e.forEach(t),l6o=i(O),e1=n(O,"LI",{});var Y$e=s(e1);Lme=n(Y$e,"STRONG",{});var L1t=s(Lme);i6o=r(L1t,"bert"),L1t.forEach(t),d6o=r(Y$e," \u2014 "),lG=n(Y$e,"A",{href:!0});var y1t=s(lG);c6o=r(y1t,"BertForPreTraining"),y1t.forEach(t),f6o=r(Y$e," (BERT model)"),Y$e.forEach(t),m6o=i(O),o1=n(O,"LI",{});var K$e=s(o1);yme=n(K$e,"STRONG",{});var x1t=s(yme);g6o=r(x1t,"big_bird"),x1t.forEach(t),h6o=r(K$e," \u2014 "),iG=n(K$e,"A",{href:!0});var $1t=s(iG);p6o=r($1t,"BigBirdForPreTraining"),$1t.forEach(t),_6o=r(K$e," (BigBird model)"),K$e.forEach(t),u6o=i(O),r1=n(O,"LI",{});var Z$e=s(r1);xme=n(Z$e,"STRONG",{});var k1t=s(xme);b6o=r(k1t,"bloom"),k1t.forEach(t),v6o=r(Z$e," \u2014 "),dG=n(Z$e,"A",{href:!0});var S1t=s(dG);F6o=r(S1t,"BloomForCausalLM"),S1t.forEach(t),T6o=r(Z$e," (BLOOM model)"),Z$e.forEach(t),M6o=i(O),t1=n(O,"LI",{});var eke=s(t1);$me=n(eke,"STRONG",{});var R1t=s($me);E6o=r(R1t,"camembert"),R1t.forEach(t),C6o=r(eke," \u2014 "),cG=n(eke,"A",{href:!0});var P1t=s(cG);w6o=r(P1t,"CamembertForMaskedLM"),P1t.forEach(t),A6o=r(eke," (CamemBERT model)"),eke.forEach(t),L6o=i(O),a1=n(O,"LI",{});var oke=s(a1);kme=n(oke,"STRONG",{});var B1t=s(kme);y6o=r(B1t,"ctrl"),B1t.forEach(t),x6o=r(oke," \u2014 "),fG=n(oke,"A",{href:!0});var I1t=s(fG);$6o=r(I1t,"CTRLLMHeadModel"),I1t.forEach(t),k6o=r(oke," (CTRL model)"),oke.forEach(t),S6o=i(O),n1=n(O,"LI",{});var rke=s(n1);Sme=n(rke,"STRONG",{});var N1t=s(Sme);R6o=r(N1t,"data2vec-text"),N1t.forEach(t),P6o=r(rke," \u2014 "),mG=n(rke,"A",{href:!0});var q1t=s(mG);B6o=r(q1t,"Data2VecTextForMaskedLM"),q1t.forEach(t),I6o=r(rke," (Data2VecText model)"),rke.forEach(t),N6o=i(O),s1=n(O,"LI",{});var tke=s(s1);Rme=n(tke,"STRONG",{});var j1t=s(Rme);q6o=r(j1t,"deberta"),j1t.forEach(t),j6o=r(tke," \u2014 "),gG=n(tke,"A",{href:!0});var D1t=s(gG);D6o=r(D1t,"DebertaForMaskedLM"),D1t.forEach(t),G6o=r(tke," (DeBERTa model)"),tke.forEach(t),O6o=i(O),l1=n(O,"LI",{});var ake=s(l1);Pme=n(ake,"STRONG",{});var G1t=s(Pme);V6o=r(G1t,"deberta-v2"),G1t.forEach(t),X6o=r(ake," \u2014 "),hG=n(ake,"A",{href:!0});var O1t=s(hG);z6o=r(O1t,"DebertaV2ForMaskedLM"),O1t.forEach(t),Q6o=r(ake," (DeBERTa-v2 model)"),ake.forEach(t),W6o=i(O),i1=n(O,"LI",{});var nke=s(i1);Bme=n(nke,"STRONG",{});var V1t=s(Bme);H6o=r(V1t,"distilbert"),V1t.forEach(t),U6o=r(nke," \u2014 "),pG=n(nke,"A",{href:!0});var X1t=s(pG);J6o=r(X1t,"DistilBertForMaskedLM"),X1t.forEach(t),Y6o=r(nke," (DistilBERT model)"),nke.forEach(t),K6o=i(O),d1=n(O,"LI",{});var ske=s(d1);Ime=n(ske,"STRONG",{});var z1t=s(Ime);Z6o=r(z1t,"electra"),z1t.forEach(t),eLo=r(ske," \u2014 "),_G=n(ske,"A",{href:!0});var Q1t=s(_G);oLo=r(Q1t,"ElectraForPreTraining"),Q1t.forEach(t),rLo=r(ske," (ELECTRA model)"),ske.forEach(t),tLo=i(O),c1=n(O,"LI",{});var lke=s(c1);Nme=n(lke,"STRONG",{});var W1t=s(Nme);aLo=r(W1t,"flaubert"),W1t.forEach(t),nLo=r(lke," \u2014 "),uG=n(lke,"A",{href:!0});var H1t=s(uG);sLo=r(H1t,"FlaubertWithLMHeadModel"),H1t.forEach(t),lLo=r(lke," (FlauBERT model)"),lke.forEach(t),iLo=i(O),f1=n(O,"LI",{});var ike=s(f1);qme=n(ike,"STRONG",{});var U1t=s(qme);dLo=r(U1t,"flava"),U1t.forEach(t),cLo=r(ike," \u2014 "),bG=n(ike,"A",{href:!0});var J1t=s(bG);fLo=r(J1t,"FlavaForPreTraining"),J1t.forEach(t),mLo=r(ike," (FLAVA model)"),ike.forEach(t),gLo=i(O),m1=n(O,"LI",{});var dke=s(m1);jme=n(dke,"STRONG",{});var Y1t=s(jme);hLo=r(Y1t,"fnet"),Y1t.forEach(t),pLo=r(dke," \u2014 "),vG=n(dke,"A",{href:!0});var K1t=s(vG);_Lo=r(K1t,"FNetForPreTraining"),K1t.forEach(t),uLo=r(dke," (FNet model)"),dke.forEach(t),bLo=i(O),g1=n(O,"LI",{});var cke=s(g1);Dme=n(cke,"STRONG",{});var Z1t=s(Dme);vLo=r(Z1t,"fsmt"),Z1t.forEach(t),FLo=r(cke," \u2014 "),FG=n(cke,"A",{href:!0});var e2t=s(FG);TLo=r(e2t,"FSMTForConditionalGeneration"),e2t.forEach(t),MLo=r(cke," (FairSeq Machine-Translation model)"),cke.forEach(t),ELo=i(O),h1=n(O,"LI",{});var fke=s(h1);Gme=n(fke,"STRONG",{});var o2t=s(Gme);CLo=r(o2t,"funnel"),o2t.forEach(t),wLo=r(fke," \u2014 "),TG=n(fke,"A",{href:!0});var r2t=s(TG);ALo=r(r2t,"FunnelForPreTraining"),r2t.forEach(t),LLo=r(fke," (Funnel Transformer model)"),fke.forEach(t),yLo=i(O),p1=n(O,"LI",{});var mke=s(p1);Ome=n(mke,"STRONG",{});var t2t=s(Ome);xLo=r(t2t,"gpt2"),t2t.forEach(t),$Lo=r(mke," \u2014 "),MG=n(mke,"A",{href:!0});var a2t=s(MG);kLo=r(a2t,"GPT2LMHeadModel"),a2t.forEach(t),SLo=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),RLo=i(O),_1=n(O,"LI",{});var gke=s(_1);Vme=n(gke,"STRONG",{});var n2t=s(Vme);PLo=r(n2t,"ibert"),n2t.forEach(t),BLo=r(gke," \u2014 "),EG=n(gke,"A",{href:!0});var s2t=s(EG);ILo=r(s2t,"IBertForMaskedLM"),s2t.forEach(t),NLo=r(gke," (I-BERT model)"),gke.forEach(t),qLo=i(O),u1=n(O,"LI",{});var hke=s(u1);Xme=n(hke,"STRONG",{});var l2t=s(Xme);jLo=r(l2t,"layoutlm"),l2t.forEach(t),DLo=r(hke," \u2014 "),CG=n(hke,"A",{href:!0});var i2t=s(CG);GLo=r(i2t,"LayoutLMForMaskedLM"),i2t.forEach(t),OLo=r(hke," (LayoutLM model)"),hke.forEach(t),VLo=i(O),b1=n(O,"LI",{});var pke=s(b1);zme=n(pke,"STRONG",{});var d2t=s(zme);XLo=r(d2t,"longformer"),d2t.forEach(t),zLo=r(pke," \u2014 "),wG=n(pke,"A",{href:!0});var c2t=s(wG);QLo=r(c2t,"LongformerForMaskedLM"),c2t.forEach(t),WLo=r(pke," (Longformer model)"),pke.forEach(t),HLo=i(O),v1=n(O,"LI",{});var _ke=s(v1);Qme=n(_ke,"STRONG",{});var f2t=s(Qme);ULo=r(f2t,"lxmert"),f2t.forEach(t),JLo=r(_ke," \u2014 "),AG=n(_ke,"A",{href:!0});var m2t=s(AG);YLo=r(m2t,"LxmertForPreTraining"),m2t.forEach(t),KLo=r(_ke," (LXMERT model)"),_ke.forEach(t),ZLo=i(O),F1=n(O,"LI",{});var uke=s(F1);Wme=n(uke,"STRONG",{});var g2t=s(Wme);eyo=r(g2t,"megatron-bert"),g2t.forEach(t),oyo=r(uke," \u2014 "),LG=n(uke,"A",{href:!0});var h2t=s(LG);ryo=r(h2t,"MegatronBertForPreTraining"),h2t.forEach(t),tyo=r(uke," (Megatron-BERT model)"),uke.forEach(t),ayo=i(O),T1=n(O,"LI",{});var bke=s(T1);Hme=n(bke,"STRONG",{});var p2t=s(Hme);nyo=r(p2t,"mobilebert"),p2t.forEach(t),syo=r(bke," \u2014 "),yG=n(bke,"A",{href:!0});var _2t=s(yG);lyo=r(_2t,"MobileBertForPreTraining"),_2t.forEach(t),iyo=r(bke," (MobileBERT model)"),bke.forEach(t),dyo=i(O),M1=n(O,"LI",{});var vke=s(M1);Ume=n(vke,"STRONG",{});var u2t=s(Ume);cyo=r(u2t,"mpnet"),u2t.forEach(t),fyo=r(vke," \u2014 "),xG=n(vke,"A",{href:!0});var b2t=s(xG);myo=r(b2t,"MPNetForMaskedLM"),b2t.forEach(t),gyo=r(vke," (MPNet model)"),vke.forEach(t),hyo=i(O),E1=n(O,"LI",{});var Fke=s(E1);Jme=n(Fke,"STRONG",{});var v2t=s(Jme);pyo=r(v2t,"mvp"),v2t.forEach(t),_yo=r(Fke," \u2014 "),$G=n(Fke,"A",{href:!0});var F2t=s($G);uyo=r(F2t,"MvpForConditionalGeneration"),F2t.forEach(t),byo=r(Fke," (MVP model)"),Fke.forEach(t),vyo=i(O),C1=n(O,"LI",{});var Tke=s(C1);Yme=n(Tke,"STRONG",{});var T2t=s(Yme);Fyo=r(T2t,"nezha"),T2t.forEach(t),Tyo=r(Tke," \u2014 "),kG=n(Tke,"A",{href:!0});var M2t=s(kG);Myo=r(M2t,"NezhaForPreTraining"),M2t.forEach(t),Eyo=r(Tke," (Nezha model)"),Tke.forEach(t),Cyo=i(O),w1=n(O,"LI",{});var Mke=s(w1);Kme=n(Mke,"STRONG",{});var E2t=s(Kme);wyo=r(E2t,"openai-gpt"),E2t.forEach(t),Ayo=r(Mke," \u2014 "),SG=n(Mke,"A",{href:!0});var C2t=s(SG);Lyo=r(C2t,"OpenAIGPTLMHeadModel"),C2t.forEach(t),yyo=r(Mke," (OpenAI GPT model)"),Mke.forEach(t),xyo=i(O),A1=n(O,"LI",{});var Eke=s(A1);Zme=n(Eke,"STRONG",{});var w2t=s(Zme);$yo=r(w2t,"retribert"),w2t.forEach(t),kyo=r(Eke," \u2014 "),RG=n(Eke,"A",{href:!0});var A2t=s(RG);Syo=r(A2t,"RetriBertModel"),A2t.forEach(t),Ryo=r(Eke," (RetriBERT model)"),Eke.forEach(t),Pyo=i(O),L1=n(O,"LI",{});var Cke=s(L1);ege=n(Cke,"STRONG",{});var L2t=s(ege);Byo=r(L2t,"roberta"),L2t.forEach(t),Iyo=r(Cke," \u2014 "),PG=n(Cke,"A",{href:!0});var y2t=s(PG);Nyo=r(y2t,"RobertaForMaskedLM"),y2t.forEach(t),qyo=r(Cke," (RoBERTa model)"),Cke.forEach(t),jyo=i(O),y1=n(O,"LI",{});var wke=s(y1);oge=n(wke,"STRONG",{});var x2t=s(oge);Dyo=r(x2t,"splinter"),x2t.forEach(t),Gyo=r(wke," \u2014 "),BG=n(wke,"A",{href:!0});var $2t=s(BG);Oyo=r($2t,"SplinterForPreTraining"),$2t.forEach(t),Vyo=r(wke," (Splinter model)"),wke.forEach(t),Xyo=i(O),x1=n(O,"LI",{});var Ake=s(x1);rge=n(Ake,"STRONG",{});var k2t=s(rge);zyo=r(k2t,"squeezebert"),k2t.forEach(t),Qyo=r(Ake," \u2014 "),IG=n(Ake,"A",{href:!0});var S2t=s(IG);Wyo=r(S2t,"SqueezeBertForMaskedLM"),S2t.forEach(t),Hyo=r(Ake," (SqueezeBERT model)"),Ake.forEach(t),Uyo=i(O),$1=n(O,"LI",{});var Lke=s($1);tge=n(Lke,"STRONG",{});var R2t=s(tge);Jyo=r(R2t,"t5"),R2t.forEach(t),Yyo=r(Lke," \u2014 "),NG=n(Lke,"A",{href:!0});var P2t=s(NG);Kyo=r(P2t,"T5ForConditionalGeneration"),P2t.forEach(t),Zyo=r(Lke," (T5 model)"),Lke.forEach(t),e9o=i(O),k1=n(O,"LI",{});var yke=s(k1);age=n(yke,"STRONG",{});var B2t=s(age);o9o=r(B2t,"tapas"),B2t.forEach(t),r9o=r(yke," \u2014 "),qG=n(yke,"A",{href:!0});var I2t=s(qG);t9o=r(I2t,"TapasForMaskedLM"),I2t.forEach(t),a9o=r(yke," (TAPAS model)"),yke.forEach(t),n9o=i(O),S1=n(O,"LI",{});var xke=s(S1);nge=n(xke,"STRONG",{});var N2t=s(nge);s9o=r(N2t,"transfo-xl"),N2t.forEach(t),l9o=r(xke," \u2014 "),jG=n(xke,"A",{href:!0});var q2t=s(jG);i9o=r(q2t,"TransfoXLLMHeadModel"),q2t.forEach(t),d9o=r(xke," (Transformer-XL model)"),xke.forEach(t),c9o=i(O),R1=n(O,"LI",{});var $ke=s(R1);sge=n($ke,"STRONG",{});var j2t=s(sge);f9o=r(j2t,"unispeech"),j2t.forEach(t),m9o=r($ke," \u2014 "),DG=n($ke,"A",{href:!0});var D2t=s(DG);g9o=r(D2t,"UniSpeechForPreTraining"),D2t.forEach(t),h9o=r($ke," (UniSpeech model)"),$ke.forEach(t),p9o=i(O),P1=n(O,"LI",{});var kke=s(P1);lge=n(kke,"STRONG",{});var G2t=s(lge);_9o=r(G2t,"unispeech-sat"),G2t.forEach(t),u9o=r(kke," \u2014 "),GG=n(kke,"A",{href:!0});var O2t=s(GG);b9o=r(O2t,"UniSpeechSatForPreTraining"),O2t.forEach(t),v9o=r(kke," (UniSpeechSat model)"),kke.forEach(t),F9o=i(O),B1=n(O,"LI",{});var Ske=s(B1);ige=n(Ske,"STRONG",{});var V2t=s(ige);T9o=r(V2t,"visual_bert"),V2t.forEach(t),M9o=r(Ske," \u2014 "),OG=n(Ske,"A",{href:!0});var X2t=s(OG);E9o=r(X2t,"VisualBertForPreTraining"),X2t.forEach(t),C9o=r(Ske," (VisualBERT model)"),Ske.forEach(t),w9o=i(O),I1=n(O,"LI",{});var Rke=s(I1);dge=n(Rke,"STRONG",{});var z2t=s(dge);A9o=r(z2t,"vit_mae"),z2t.forEach(t),L9o=r(Rke," \u2014 "),VG=n(Rke,"A",{href:!0});var Q2t=s(VG);y9o=r(Q2t,"ViTMAEForPreTraining"),Q2t.forEach(t),x9o=r(Rke," (ViTMAE model)"),Rke.forEach(t),$9o=i(O),N1=n(O,"LI",{});var Pke=s(N1);cge=n(Pke,"STRONG",{});var W2t=s(cge);k9o=r(W2t,"wav2vec2"),W2t.forEach(t),S9o=r(Pke," \u2014 "),XG=n(Pke,"A",{href:!0});var H2t=s(XG);R9o=r(H2t,"Wav2Vec2ForPreTraining"),H2t.forEach(t),P9o=r(Pke," (Wav2Vec2 model)"),Pke.forEach(t),B9o=i(O),q1=n(O,"LI",{});var Bke=s(q1);fge=n(Bke,"STRONG",{});var U2t=s(fge);I9o=r(U2t,"wav2vec2-conformer"),U2t.forEach(t),N9o=r(Bke," \u2014 "),zG=n(Bke,"A",{href:!0});var J2t=s(zG);q9o=r(J2t,"Wav2Vec2ConformerForPreTraining"),J2t.forEach(t),j9o=r(Bke," (Wav2Vec2-Conformer model)"),Bke.forEach(t),D9o=i(O),j1=n(O,"LI",{});var Ike=s(j1);mge=n(Ike,"STRONG",{});var Y2t=s(mge);G9o=r(Y2t,"xlm"),Y2t.forEach(t),O9o=r(Ike," \u2014 "),QG=n(Ike,"A",{href:!0});var K2t=s(QG);V9o=r(K2t,"XLMWithLMHeadModel"),K2t.forEach(t),X9o=r(Ike," (XLM model)"),Ike.forEach(t),z9o=i(O),D1=n(O,"LI",{});var Nke=s(D1);gge=n(Nke,"STRONG",{});var Z2t=s(gge);Q9o=r(Z2t,"xlm-roberta"),Z2t.forEach(t),W9o=r(Nke," \u2014 "),WG=n(Nke,"A",{href:!0});var ebt=s(WG);H9o=r(ebt,"XLMRobertaForMaskedLM"),ebt.forEach(t),U9o=r(Nke," (XLM-RoBERTa model)"),Nke.forEach(t),J9o=i(O),G1=n(O,"LI",{});var qke=s(G1);hge=n(qke,"STRONG",{});var obt=s(hge);Y9o=r(obt,"xlm-roberta-xl"),obt.forEach(t),K9o=r(qke," \u2014 "),HG=n(qke,"A",{href:!0});var rbt=s(HG);Z9o=r(rbt,"XLMRobertaXLForMaskedLM"),rbt.forEach(t),exo=r(qke," (XLM-RoBERTa-XL model)"),qke.forEach(t),oxo=i(O),O1=n(O,"LI",{});var jke=s(O1);pge=n(jke,"STRONG",{});var tbt=s(pge);rxo=r(tbt,"xlnet"),tbt.forEach(t),txo=r(jke," \u2014 "),UG=n(jke,"A",{href:!0});var abt=s(UG);axo=r(abt,"XLNetLMHeadModel"),abt.forEach(t),nxo=r(jke," (XLNet model)"),jke.forEach(t),O.forEach(t),sxo=i(la),V1=n(la,"P",{});var Dke=s(V1);lxo=r(Dke,"The model is set in evaluation mode by default using "),_ge=n(Dke,"CODE",{});var nbt=s(_ge);ixo=r(nbt,"model.eval()"),nbt.forEach(t),dxo=r(Dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(Dke,"CODE",{});var sbt=s(uge);cxo=r(sbt,"model.train()"),sbt.forEach(t),Dke.forEach(t),fxo=i(la),T(X1.$$.fragment,la),la.forEach(t),ol.forEach(t),hXe=i(f),Qi=n(f,"H2",{class:!0});var FQe=s(Qi);z1=n(FQe,"A",{id:!0,class:!0,href:!0});var lbt=s(z1);bge=n(lbt,"SPAN",{});var ibt=s(bge);T(GL.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),mxo=i(FQe),vge=n(FQe,"SPAN",{});var dbt=s(vge);gxo=r(dbt,"AutoModelForCausalLM"),dbt.forEach(t),FQe.forEach(t),pXe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(OL.$$.fragment,rl),hxo=i(rl),Wi=n(rl,"P",{});var Rre=s(Wi);pxo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JG=n(Rre,"A",{href:!0});var cbt=s(JG);_xo=r(cbt,"from_pretrained()"),cbt.forEach(t),uxo=r(Rre," class method or the "),YG=n(Rre,"A",{href:!0});var fbt=s(YG);bxo=r(fbt,"from_config()"),fbt.forEach(t),vxo=r(Rre,` class
method.`),Rre.forEach(t),Fxo=i(rl),VL=n(rl,"P",{});var TQe=s(VL);Txo=r(TQe,"This class cannot be instantiated directly using "),Fge=n(TQe,"CODE",{});var mbt=s(Fge);Mxo=r(mbt,"__init__()"),mbt.forEach(t),Exo=r(TQe," (throws an error)."),TQe.forEach(t),Cxo=i(rl),dt=n(rl,"DIV",{class:!0});var gA=s(dt);T(XL.$$.fragment,gA),wxo=i(gA),Tge=n(gA,"P",{});var gbt=s(Tge);Axo=r(gbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gbt.forEach(t),Lxo=i(gA),Hi=n(gA,"P",{});var Pre=s(Hi);yxo=r(Pre,`Note:
Loading a model from its configuration file does `),Mge=n(Pre,"STRONG",{});var hbt=s(Mge);xxo=r(hbt,"not"),hbt.forEach(t),$xo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(Pre,"A",{href:!0});var pbt=s(KG);kxo=r(pbt,"from_pretrained()"),pbt.forEach(t),Sxo=r(Pre," to load the model weights."),Pre.forEach(t),Rxo=i(gA),T(Q1.$$.fragment,gA),gA.forEach(t),Pxo=i(rl),Ke=n(rl,"DIV",{class:!0});var ia=s(Ke);T(zL.$$.fragment,ia),Bxo=i(ia),Ege=n(ia,"P",{});var _bt=s(Ege);Ixo=r(_bt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_bt.forEach(t),Nxo=i(ia),Na=n(ia,"P",{});var hA=s(Na);qxo=r(hA,"The model class to instantiate is selected based on the "),Cge=n(hA,"CODE",{});var ubt=s(Cge);jxo=r(ubt,"model_type"),ubt.forEach(t),Dxo=r(hA,` property of the config object (either
passed as an argument or loaded from `),wge=n(hA,"CODE",{});var bbt=s(wge);Gxo=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Oxo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(hA,"CODE",{});var vbt=s(Age);Vxo=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),Xxo=r(hA,":"),hA.forEach(t),zxo=i(ia),z=n(ia,"UL",{});var Q=s(z);W1=n(Q,"LI",{});var Gke=s(W1);Lge=n(Gke,"STRONG",{});var Fbt=s(Lge);Qxo=r(Fbt,"bart"),Fbt.forEach(t),Wxo=r(Gke," \u2014 "),ZG=n(Gke,"A",{href:!0});var Tbt=s(ZG);Hxo=r(Tbt,"BartForCausalLM"),Tbt.forEach(t),Uxo=r(Gke," (BART model)"),Gke.forEach(t),Jxo=i(Q),H1=n(Q,"LI",{});var Oke=s(H1);yge=n(Oke,"STRONG",{});var Mbt=s(yge);Yxo=r(Mbt,"bert"),Mbt.forEach(t),Kxo=r(Oke," \u2014 "),eO=n(Oke,"A",{href:!0});var Ebt=s(eO);Zxo=r(Ebt,"BertLMHeadModel"),Ebt.forEach(t),e$o=r(Oke," (BERT model)"),Oke.forEach(t),o$o=i(Q),U1=n(Q,"LI",{});var Vke=s(U1);xge=n(Vke,"STRONG",{});var Cbt=s(xge);r$o=r(Cbt,"bert-generation"),Cbt.forEach(t),t$o=r(Vke," \u2014 "),oO=n(Vke,"A",{href:!0});var wbt=s(oO);a$o=r(wbt,"BertGenerationDecoder"),wbt.forEach(t),n$o=r(Vke," (Bert Generation model)"),Vke.forEach(t),s$o=i(Q),J1=n(Q,"LI",{});var Xke=s(J1);$ge=n(Xke,"STRONG",{});var Abt=s($ge);l$o=r(Abt,"big_bird"),Abt.forEach(t),i$o=r(Xke," \u2014 "),rO=n(Xke,"A",{href:!0});var Lbt=s(rO);d$o=r(Lbt,"BigBirdForCausalLM"),Lbt.forEach(t),c$o=r(Xke," (BigBird model)"),Xke.forEach(t),f$o=i(Q),Y1=n(Q,"LI",{});var zke=s(Y1);kge=n(zke,"STRONG",{});var ybt=s(kge);m$o=r(ybt,"bigbird_pegasus"),ybt.forEach(t),g$o=r(zke," \u2014 "),tO=n(zke,"A",{href:!0});var xbt=s(tO);h$o=r(xbt,"BigBirdPegasusForCausalLM"),xbt.forEach(t),p$o=r(zke," (BigBird-Pegasus model)"),zke.forEach(t),_$o=i(Q),K1=n(Q,"LI",{});var Qke=s(K1);Sge=n(Qke,"STRONG",{});var $bt=s(Sge);u$o=r($bt,"blenderbot"),$bt.forEach(t),b$o=r(Qke," \u2014 "),aO=n(Qke,"A",{href:!0});var kbt=s(aO);v$o=r(kbt,"BlenderbotForCausalLM"),kbt.forEach(t),F$o=r(Qke," (Blenderbot model)"),Qke.forEach(t),T$o=i(Q),Z1=n(Q,"LI",{});var Wke=s(Z1);Rge=n(Wke,"STRONG",{});var Sbt=s(Rge);M$o=r(Sbt,"blenderbot-small"),Sbt.forEach(t),E$o=r(Wke," \u2014 "),nO=n(Wke,"A",{href:!0});var Rbt=s(nO);C$o=r(Rbt,"BlenderbotSmallForCausalLM"),Rbt.forEach(t),w$o=r(Wke," (BlenderbotSmall model)"),Wke.forEach(t),A$o=i(Q),e2=n(Q,"LI",{});var Hke=s(e2);Pge=n(Hke,"STRONG",{});var Pbt=s(Pge);L$o=r(Pbt,"bloom"),Pbt.forEach(t),y$o=r(Hke," \u2014 "),sO=n(Hke,"A",{href:!0});var Bbt=s(sO);x$o=r(Bbt,"BloomForCausalLM"),Bbt.forEach(t),$$o=r(Hke," (BLOOM model)"),Hke.forEach(t),k$o=i(Q),o2=n(Q,"LI",{});var Uke=s(o2);Bge=n(Uke,"STRONG",{});var Ibt=s(Bge);S$o=r(Ibt,"camembert"),Ibt.forEach(t),R$o=r(Uke," \u2014 "),lO=n(Uke,"A",{href:!0});var Nbt=s(lO);P$o=r(Nbt,"CamembertForCausalLM"),Nbt.forEach(t),B$o=r(Uke," (CamemBERT model)"),Uke.forEach(t),I$o=i(Q),r2=n(Q,"LI",{});var Jke=s(r2);Ige=n(Jke,"STRONG",{});var qbt=s(Ige);N$o=r(qbt,"codegen"),qbt.forEach(t),q$o=r(Jke," \u2014 "),iO=n(Jke,"A",{href:!0});var jbt=s(iO);j$o=r(jbt,"CodeGenForCausalLM"),jbt.forEach(t),D$o=r(Jke," (CodeGen model)"),Jke.forEach(t),G$o=i(Q),t2=n(Q,"LI",{});var Yke=s(t2);Nge=n(Yke,"STRONG",{});var Dbt=s(Nge);O$o=r(Dbt,"ctrl"),Dbt.forEach(t),V$o=r(Yke," \u2014 "),dO=n(Yke,"A",{href:!0});var Gbt=s(dO);X$o=r(Gbt,"CTRLLMHeadModel"),Gbt.forEach(t),z$o=r(Yke," (CTRL model)"),Yke.forEach(t),Q$o=i(Q),a2=n(Q,"LI",{});var Kke=s(a2);qge=n(Kke,"STRONG",{});var Obt=s(qge);W$o=r(Obt,"data2vec-text"),Obt.forEach(t),H$o=r(Kke," \u2014 "),cO=n(Kke,"A",{href:!0});var Vbt=s(cO);U$o=r(Vbt,"Data2VecTextForCausalLM"),Vbt.forEach(t),J$o=r(Kke," (Data2VecText model)"),Kke.forEach(t),Y$o=i(Q),n2=n(Q,"LI",{});var Zke=s(n2);jge=n(Zke,"STRONG",{});var Xbt=s(jge);K$o=r(Xbt,"electra"),Xbt.forEach(t),Z$o=r(Zke," \u2014 "),fO=n(Zke,"A",{href:!0});var zbt=s(fO);eko=r(zbt,"ElectraForCausalLM"),zbt.forEach(t),oko=r(Zke," (ELECTRA model)"),Zke.forEach(t),rko=i(Q),s2=n(Q,"LI",{});var eSe=s(s2);Dge=n(eSe,"STRONG",{});var Qbt=s(Dge);tko=r(Qbt,"gpt2"),Qbt.forEach(t),ako=r(eSe," \u2014 "),mO=n(eSe,"A",{href:!0});var Wbt=s(mO);nko=r(Wbt,"GPT2LMHeadModel"),Wbt.forEach(t),sko=r(eSe," (OpenAI GPT-2 model)"),eSe.forEach(t),lko=i(Q),l2=n(Q,"LI",{});var oSe=s(l2);Gge=n(oSe,"STRONG",{});var Hbt=s(Gge);iko=r(Hbt,"gpt_neo"),Hbt.forEach(t),dko=r(oSe," \u2014 "),gO=n(oSe,"A",{href:!0});var Ubt=s(gO);cko=r(Ubt,"GPTNeoForCausalLM"),Ubt.forEach(t),fko=r(oSe," (GPT Neo model)"),oSe.forEach(t),mko=i(Q),i2=n(Q,"LI",{});var rSe=s(i2);Oge=n(rSe,"STRONG",{});var Jbt=s(Oge);gko=r(Jbt,"gpt_neox"),Jbt.forEach(t),hko=r(rSe," \u2014 "),hO=n(rSe,"A",{href:!0});var Ybt=s(hO);pko=r(Ybt,"GPTNeoXForCausalLM"),Ybt.forEach(t),_ko=r(rSe," (GPT NeoX model)"),rSe.forEach(t),uko=i(Q),d2=n(Q,"LI",{});var tSe=s(d2);Vge=n(tSe,"STRONG",{});var Kbt=s(Vge);bko=r(Kbt,"gptj"),Kbt.forEach(t),vko=r(tSe," \u2014 "),pO=n(tSe,"A",{href:!0});var Zbt=s(pO);Fko=r(Zbt,"GPTJForCausalLM"),Zbt.forEach(t),Tko=r(tSe," (GPT-J model)"),tSe.forEach(t),Mko=i(Q),c2=n(Q,"LI",{});var aSe=s(c2);Xge=n(aSe,"STRONG",{});var evt=s(Xge);Eko=r(evt,"marian"),evt.forEach(t),Cko=r(aSe," \u2014 "),_O=n(aSe,"A",{href:!0});var ovt=s(_O);wko=r(ovt,"MarianForCausalLM"),ovt.forEach(t),Ako=r(aSe," (Marian model)"),aSe.forEach(t),Lko=i(Q),f2=n(Q,"LI",{});var nSe=s(f2);zge=n(nSe,"STRONG",{});var rvt=s(zge);yko=r(rvt,"mbart"),rvt.forEach(t),xko=r(nSe," \u2014 "),uO=n(nSe,"A",{href:!0});var tvt=s(uO);$ko=r(tvt,"MBartForCausalLM"),tvt.forEach(t),kko=r(nSe," (mBART model)"),nSe.forEach(t),Sko=i(Q),m2=n(Q,"LI",{});var sSe=s(m2);Qge=n(sSe,"STRONG",{});var avt=s(Qge);Rko=r(avt,"megatron-bert"),avt.forEach(t),Pko=r(sSe," \u2014 "),bO=n(sSe,"A",{href:!0});var nvt=s(bO);Bko=r(nvt,"MegatronBertForCausalLM"),nvt.forEach(t),Iko=r(sSe," (Megatron-BERT model)"),sSe.forEach(t),Nko=i(Q),g2=n(Q,"LI",{});var lSe=s(g2);Wge=n(lSe,"STRONG",{});var svt=s(Wge);qko=r(svt,"mvp"),svt.forEach(t),jko=r(lSe," \u2014 "),vO=n(lSe,"A",{href:!0});var lvt=s(vO);Dko=r(lvt,"MvpForCausalLM"),lvt.forEach(t),Gko=r(lSe," (MVP model)"),lSe.forEach(t),Oko=i(Q),h2=n(Q,"LI",{});var iSe=s(h2);Hge=n(iSe,"STRONG",{});var ivt=s(Hge);Vko=r(ivt,"openai-gpt"),ivt.forEach(t),Xko=r(iSe," \u2014 "),FO=n(iSe,"A",{href:!0});var dvt=s(FO);zko=r(dvt,"OpenAIGPTLMHeadModel"),dvt.forEach(t),Qko=r(iSe," (OpenAI GPT model)"),iSe.forEach(t),Wko=i(Q),p2=n(Q,"LI",{});var dSe=s(p2);Uge=n(dSe,"STRONG",{});var cvt=s(Uge);Hko=r(cvt,"opt"),cvt.forEach(t),Uko=r(dSe," \u2014 "),TO=n(dSe,"A",{href:!0});var fvt=s(TO);Jko=r(fvt,"OPTForCausalLM"),fvt.forEach(t),Yko=r(dSe," (OPT model)"),dSe.forEach(t),Kko=i(Q),_2=n(Q,"LI",{});var cSe=s(_2);Jge=n(cSe,"STRONG",{});var mvt=s(Jge);Zko=r(mvt,"pegasus"),mvt.forEach(t),eSo=r(cSe," \u2014 "),MO=n(cSe,"A",{href:!0});var gvt=s(MO);oSo=r(gvt,"PegasusForCausalLM"),gvt.forEach(t),rSo=r(cSe," (Pegasus model)"),cSe.forEach(t),tSo=i(Q),u2=n(Q,"LI",{});var fSe=s(u2);Yge=n(fSe,"STRONG",{});var hvt=s(Yge);aSo=r(hvt,"plbart"),hvt.forEach(t),nSo=r(fSe," \u2014 "),EO=n(fSe,"A",{href:!0});var pvt=s(EO);sSo=r(pvt,"PLBartForCausalLM"),pvt.forEach(t),lSo=r(fSe," (PLBart model)"),fSe.forEach(t),iSo=i(Q),b2=n(Q,"LI",{});var mSe=s(b2);Kge=n(mSe,"STRONG",{});var _vt=s(Kge);dSo=r(_vt,"prophetnet"),_vt.forEach(t),cSo=r(mSe," \u2014 "),CO=n(mSe,"A",{href:!0});var uvt=s(CO);fSo=r(uvt,"ProphetNetForCausalLM"),uvt.forEach(t),mSo=r(mSe," (ProphetNet model)"),mSe.forEach(t),gSo=i(Q),v2=n(Q,"LI",{});var gSe=s(v2);Zge=n(gSe,"STRONG",{});var bvt=s(Zge);hSo=r(bvt,"qdqbert"),bvt.forEach(t),pSo=r(gSe," \u2014 "),wO=n(gSe,"A",{href:!0});var vvt=s(wO);_So=r(vvt,"QDQBertLMHeadModel"),vvt.forEach(t),uSo=r(gSe," (QDQBert model)"),gSe.forEach(t),bSo=i(Q),F2=n(Q,"LI",{});var hSe=s(F2);ehe=n(hSe,"STRONG",{});var Fvt=s(ehe);vSo=r(Fvt,"reformer"),Fvt.forEach(t),FSo=r(hSe," \u2014 "),AO=n(hSe,"A",{href:!0});var Tvt=s(AO);TSo=r(Tvt,"ReformerModelWithLMHead"),Tvt.forEach(t),MSo=r(hSe," (Reformer model)"),hSe.forEach(t),ESo=i(Q),T2=n(Q,"LI",{});var pSe=s(T2);ohe=n(pSe,"STRONG",{});var Mvt=s(ohe);CSo=r(Mvt,"rembert"),Mvt.forEach(t),wSo=r(pSe," \u2014 "),LO=n(pSe,"A",{href:!0});var Evt=s(LO);ASo=r(Evt,"RemBertForCausalLM"),Evt.forEach(t),LSo=r(pSe," (RemBERT model)"),pSe.forEach(t),ySo=i(Q),M2=n(Q,"LI",{});var _Se=s(M2);rhe=n(_Se,"STRONG",{});var Cvt=s(rhe);xSo=r(Cvt,"roberta"),Cvt.forEach(t),$So=r(_Se," \u2014 "),yO=n(_Se,"A",{href:!0});var wvt=s(yO);kSo=r(wvt,"RobertaForCausalLM"),wvt.forEach(t),SSo=r(_Se," (RoBERTa model)"),_Se.forEach(t),RSo=i(Q),E2=n(Q,"LI",{});var uSe=s(E2);the=n(uSe,"STRONG",{});var Avt=s(the);PSo=r(Avt,"roformer"),Avt.forEach(t),BSo=r(uSe," \u2014 "),xO=n(uSe,"A",{href:!0});var Lvt=s(xO);ISo=r(Lvt,"RoFormerForCausalLM"),Lvt.forEach(t),NSo=r(uSe," (RoFormer model)"),uSe.forEach(t),qSo=i(Q),C2=n(Q,"LI",{});var bSe=s(C2);ahe=n(bSe,"STRONG",{});var yvt=s(ahe);jSo=r(yvt,"speech_to_text_2"),yvt.forEach(t),DSo=r(bSe," \u2014 "),$O=n(bSe,"A",{href:!0});var xvt=s($O);GSo=r(xvt,"Speech2Text2ForCausalLM"),xvt.forEach(t),OSo=r(bSe," (Speech2Text2 model)"),bSe.forEach(t),VSo=i(Q),w2=n(Q,"LI",{});var vSe=s(w2);nhe=n(vSe,"STRONG",{});var $vt=s(nhe);XSo=r($vt,"transfo-xl"),$vt.forEach(t),zSo=r(vSe," \u2014 "),kO=n(vSe,"A",{href:!0});var kvt=s(kO);QSo=r(kvt,"TransfoXLLMHeadModel"),kvt.forEach(t),WSo=r(vSe," (Transformer-XL model)"),vSe.forEach(t),HSo=i(Q),A2=n(Q,"LI",{});var FSe=s(A2);she=n(FSe,"STRONG",{});var Svt=s(she);USo=r(Svt,"trocr"),Svt.forEach(t),JSo=r(FSe," \u2014 "),SO=n(FSe,"A",{href:!0});var Rvt=s(SO);YSo=r(Rvt,"TrOCRForCausalLM"),Rvt.forEach(t),KSo=r(FSe," (TrOCR model)"),FSe.forEach(t),ZSo=i(Q),L2=n(Q,"LI",{});var TSe=s(L2);lhe=n(TSe,"STRONG",{});var Pvt=s(lhe);eRo=r(Pvt,"xglm"),Pvt.forEach(t),oRo=r(TSe," \u2014 "),RO=n(TSe,"A",{href:!0});var Bvt=s(RO);rRo=r(Bvt,"XGLMForCausalLM"),Bvt.forEach(t),tRo=r(TSe," (XGLM model)"),TSe.forEach(t),aRo=i(Q),y2=n(Q,"LI",{});var MSe=s(y2);ihe=n(MSe,"STRONG",{});var Ivt=s(ihe);nRo=r(Ivt,"xlm"),Ivt.forEach(t),sRo=r(MSe," \u2014 "),PO=n(MSe,"A",{href:!0});var Nvt=s(PO);lRo=r(Nvt,"XLMWithLMHeadModel"),Nvt.forEach(t),iRo=r(MSe," (XLM model)"),MSe.forEach(t),dRo=i(Q),x2=n(Q,"LI",{});var ESe=s(x2);dhe=n(ESe,"STRONG",{});var qvt=s(dhe);cRo=r(qvt,"xlm-prophetnet"),qvt.forEach(t),fRo=r(ESe," \u2014 "),BO=n(ESe,"A",{href:!0});var jvt=s(BO);mRo=r(jvt,"XLMProphetNetForCausalLM"),jvt.forEach(t),gRo=r(ESe," (XLM-ProphetNet model)"),ESe.forEach(t),hRo=i(Q),$2=n(Q,"LI",{});var CSe=s($2);che=n(CSe,"STRONG",{});var Dvt=s(che);pRo=r(Dvt,"xlm-roberta"),Dvt.forEach(t),_Ro=r(CSe," \u2014 "),IO=n(CSe,"A",{href:!0});var Gvt=s(IO);uRo=r(Gvt,"XLMRobertaForCausalLM"),Gvt.forEach(t),bRo=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),vRo=i(Q),k2=n(Q,"LI",{});var wSe=s(k2);fhe=n(wSe,"STRONG",{});var Ovt=s(fhe);FRo=r(Ovt,"xlm-roberta-xl"),Ovt.forEach(t),TRo=r(wSe," \u2014 "),NO=n(wSe,"A",{href:!0});var Vvt=s(NO);MRo=r(Vvt,"XLMRobertaXLForCausalLM"),Vvt.forEach(t),ERo=r(wSe," (XLM-RoBERTa-XL model)"),wSe.forEach(t),CRo=i(Q),S2=n(Q,"LI",{});var ASe=s(S2);mhe=n(ASe,"STRONG",{});var Xvt=s(mhe);wRo=r(Xvt,"xlnet"),Xvt.forEach(t),ARo=r(ASe," \u2014 "),qO=n(ASe,"A",{href:!0});var zvt=s(qO);LRo=r(zvt,"XLNetLMHeadModel"),zvt.forEach(t),yRo=r(ASe," (XLNet model)"),ASe.forEach(t),Q.forEach(t),xRo=i(ia),R2=n(ia,"P",{});var LSe=s(R2);$Ro=r(LSe,"The model is set in evaluation mode by default using "),ghe=n(LSe,"CODE",{});var Qvt=s(ghe);kRo=r(Qvt,"model.eval()"),Qvt.forEach(t),SRo=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=n(LSe,"CODE",{});var Wvt=s(hhe);RRo=r(Wvt,"model.train()"),Wvt.forEach(t),LSe.forEach(t),PRo=i(ia),T(P2.$$.fragment,ia),ia.forEach(t),rl.forEach(t),_Xe=i(f),Ui=n(f,"H2",{class:!0});var MQe=s(Ui);B2=n(MQe,"A",{id:!0,class:!0,href:!0});var Hvt=s(B2);phe=n(Hvt,"SPAN",{});var Uvt=s(phe);T(QL.$$.fragment,Uvt),Uvt.forEach(t),Hvt.forEach(t),BRo=i(MQe),_he=n(MQe,"SPAN",{});var Jvt=s(_he);IRo=r(Jvt,"AutoModelForMaskedLM"),Jvt.forEach(t),MQe.forEach(t),uXe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(WL.$$.fragment,tl),NRo=i(tl),Ji=n(tl,"P",{});var Bre=s(Ji);qRo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jO=n(Bre,"A",{href:!0});var Yvt=s(jO);jRo=r(Yvt,"from_pretrained()"),Yvt.forEach(t),DRo=r(Bre," class method or the "),DO=n(Bre,"A",{href:!0});var Kvt=s(DO);GRo=r(Kvt,"from_config()"),Kvt.forEach(t),ORo=r(Bre,` class
method.`),Bre.forEach(t),VRo=i(tl),HL=n(tl,"P",{});var EQe=s(HL);XRo=r(EQe,"This class cannot be instantiated directly using "),uhe=n(EQe,"CODE",{});var Zvt=s(uhe);zRo=r(Zvt,"__init__()"),Zvt.forEach(t),QRo=r(EQe," (throws an error)."),EQe.forEach(t),WRo=i(tl),ct=n(tl,"DIV",{class:!0});var pA=s(ct);T(UL.$$.fragment,pA),HRo=i(pA),bhe=n(pA,"P",{});var eFt=s(bhe);URo=r(eFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eFt.forEach(t),JRo=i(pA),Yi=n(pA,"P",{});var Ire=s(Yi);YRo=r(Ire,`Note:
Loading a model from its configuration file does `),vhe=n(Ire,"STRONG",{});var oFt=s(vhe);KRo=r(oFt,"not"),oFt.forEach(t),ZRo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(Ire,"A",{href:!0});var rFt=s(GO);ePo=r(rFt,"from_pretrained()"),rFt.forEach(t),oPo=r(Ire," to load the model weights."),Ire.forEach(t),rPo=i(pA),T(I2.$$.fragment,pA),pA.forEach(t),tPo=i(tl),Ze=n(tl,"DIV",{class:!0});var da=s(Ze);T(JL.$$.fragment,da),aPo=i(da),Fhe=n(da,"P",{});var tFt=s(Fhe);nPo=r(tFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tFt.forEach(t),sPo=i(da),qa=n(da,"P",{});var _A=s(qa);lPo=r(_A,"The model class to instantiate is selected based on the "),The=n(_A,"CODE",{});var aFt=s(The);iPo=r(aFt,"model_type"),aFt.forEach(t),dPo=r(_A,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(_A,"CODE",{});var nFt=s(Mhe);cPo=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),fPo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(_A,"CODE",{});var sFt=s(Ehe);mPo=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),gPo=r(_A,":"),_A.forEach(t),hPo=i(da),W=n(da,"UL",{});var H=s(W);N2=n(H,"LI",{});var ySe=s(N2);Che=n(ySe,"STRONG",{});var lFt=s(Che);pPo=r(lFt,"albert"),lFt.forEach(t),_Po=r(ySe," \u2014 "),OO=n(ySe,"A",{href:!0});var iFt=s(OO);uPo=r(iFt,"AlbertForMaskedLM"),iFt.forEach(t),bPo=r(ySe," (ALBERT model)"),ySe.forEach(t),vPo=i(H),q2=n(H,"LI",{});var xSe=s(q2);whe=n(xSe,"STRONG",{});var dFt=s(whe);FPo=r(dFt,"bart"),dFt.forEach(t),TPo=r(xSe," \u2014 "),VO=n(xSe,"A",{href:!0});var cFt=s(VO);MPo=r(cFt,"BartForConditionalGeneration"),cFt.forEach(t),EPo=r(xSe," (BART model)"),xSe.forEach(t),CPo=i(H),j2=n(H,"LI",{});var $Se=s(j2);Ahe=n($Se,"STRONG",{});var fFt=s(Ahe);wPo=r(fFt,"bert"),fFt.forEach(t),APo=r($Se," \u2014 "),XO=n($Se,"A",{href:!0});var mFt=s(XO);LPo=r(mFt,"BertForMaskedLM"),mFt.forEach(t),yPo=r($Se," (BERT model)"),$Se.forEach(t),xPo=i(H),D2=n(H,"LI",{});var kSe=s(D2);Lhe=n(kSe,"STRONG",{});var gFt=s(Lhe);$Po=r(gFt,"big_bird"),gFt.forEach(t),kPo=r(kSe," \u2014 "),zO=n(kSe,"A",{href:!0});var hFt=s(zO);SPo=r(hFt,"BigBirdForMaskedLM"),hFt.forEach(t),RPo=r(kSe," (BigBird model)"),kSe.forEach(t),PPo=i(H),G2=n(H,"LI",{});var SSe=s(G2);yhe=n(SSe,"STRONG",{});var pFt=s(yhe);BPo=r(pFt,"camembert"),pFt.forEach(t),IPo=r(SSe," \u2014 "),QO=n(SSe,"A",{href:!0});var _Ft=s(QO);NPo=r(_Ft,"CamembertForMaskedLM"),_Ft.forEach(t),qPo=r(SSe," (CamemBERT model)"),SSe.forEach(t),jPo=i(H),O2=n(H,"LI",{});var RSe=s(O2);xhe=n(RSe,"STRONG",{});var uFt=s(xhe);DPo=r(uFt,"convbert"),uFt.forEach(t),GPo=r(RSe," \u2014 "),WO=n(RSe,"A",{href:!0});var bFt=s(WO);OPo=r(bFt,"ConvBertForMaskedLM"),bFt.forEach(t),VPo=r(RSe," (ConvBERT model)"),RSe.forEach(t),XPo=i(H),V2=n(H,"LI",{});var PSe=s(V2);$he=n(PSe,"STRONG",{});var vFt=s($he);zPo=r(vFt,"data2vec-text"),vFt.forEach(t),QPo=r(PSe," \u2014 "),HO=n(PSe,"A",{href:!0});var FFt=s(HO);WPo=r(FFt,"Data2VecTextForMaskedLM"),FFt.forEach(t),HPo=r(PSe," (Data2VecText model)"),PSe.forEach(t),UPo=i(H),X2=n(H,"LI",{});var BSe=s(X2);khe=n(BSe,"STRONG",{});var TFt=s(khe);JPo=r(TFt,"deberta"),TFt.forEach(t),YPo=r(BSe," \u2014 "),UO=n(BSe,"A",{href:!0});var MFt=s(UO);KPo=r(MFt,"DebertaForMaskedLM"),MFt.forEach(t),ZPo=r(BSe," (DeBERTa model)"),BSe.forEach(t),eBo=i(H),z2=n(H,"LI",{});var ISe=s(z2);She=n(ISe,"STRONG",{});var EFt=s(She);oBo=r(EFt,"deberta-v2"),EFt.forEach(t),rBo=r(ISe," \u2014 "),JO=n(ISe,"A",{href:!0});var CFt=s(JO);tBo=r(CFt,"DebertaV2ForMaskedLM"),CFt.forEach(t),aBo=r(ISe," (DeBERTa-v2 model)"),ISe.forEach(t),nBo=i(H),Q2=n(H,"LI",{});var NSe=s(Q2);Rhe=n(NSe,"STRONG",{});var wFt=s(Rhe);sBo=r(wFt,"distilbert"),wFt.forEach(t),lBo=r(NSe," \u2014 "),YO=n(NSe,"A",{href:!0});var AFt=s(YO);iBo=r(AFt,"DistilBertForMaskedLM"),AFt.forEach(t),dBo=r(NSe," (DistilBERT model)"),NSe.forEach(t),cBo=i(H),W2=n(H,"LI",{});var qSe=s(W2);Phe=n(qSe,"STRONG",{});var LFt=s(Phe);fBo=r(LFt,"electra"),LFt.forEach(t),mBo=r(qSe," \u2014 "),KO=n(qSe,"A",{href:!0});var yFt=s(KO);gBo=r(yFt,"ElectraForMaskedLM"),yFt.forEach(t),hBo=r(qSe," (ELECTRA model)"),qSe.forEach(t),pBo=i(H),H2=n(H,"LI",{});var jSe=s(H2);Bhe=n(jSe,"STRONG",{});var xFt=s(Bhe);_Bo=r(xFt,"flaubert"),xFt.forEach(t),uBo=r(jSe," \u2014 "),ZO=n(jSe,"A",{href:!0});var $Ft=s(ZO);bBo=r($Ft,"FlaubertWithLMHeadModel"),$Ft.forEach(t),vBo=r(jSe," (FlauBERT model)"),jSe.forEach(t),FBo=i(H),U2=n(H,"LI",{});var DSe=s(U2);Ihe=n(DSe,"STRONG",{});var kFt=s(Ihe);TBo=r(kFt,"fnet"),kFt.forEach(t),MBo=r(DSe," \u2014 "),eV=n(DSe,"A",{href:!0});var SFt=s(eV);EBo=r(SFt,"FNetForMaskedLM"),SFt.forEach(t),CBo=r(DSe," (FNet model)"),DSe.forEach(t),wBo=i(H),J2=n(H,"LI",{});var GSe=s(J2);Nhe=n(GSe,"STRONG",{});var RFt=s(Nhe);ABo=r(RFt,"funnel"),RFt.forEach(t),LBo=r(GSe," \u2014 "),oV=n(GSe,"A",{href:!0});var PFt=s(oV);yBo=r(PFt,"FunnelForMaskedLM"),PFt.forEach(t),xBo=r(GSe," (Funnel Transformer model)"),GSe.forEach(t),$Bo=i(H),Y2=n(H,"LI",{});var OSe=s(Y2);qhe=n(OSe,"STRONG",{});var BFt=s(qhe);kBo=r(BFt,"ibert"),BFt.forEach(t),SBo=r(OSe," \u2014 "),rV=n(OSe,"A",{href:!0});var IFt=s(rV);RBo=r(IFt,"IBertForMaskedLM"),IFt.forEach(t),PBo=r(OSe," (I-BERT model)"),OSe.forEach(t),BBo=i(H),K2=n(H,"LI",{});var VSe=s(K2);jhe=n(VSe,"STRONG",{});var NFt=s(jhe);IBo=r(NFt,"layoutlm"),NFt.forEach(t),NBo=r(VSe," \u2014 "),tV=n(VSe,"A",{href:!0});var qFt=s(tV);qBo=r(qFt,"LayoutLMForMaskedLM"),qFt.forEach(t),jBo=r(VSe," (LayoutLM model)"),VSe.forEach(t),DBo=i(H),Z2=n(H,"LI",{});var XSe=s(Z2);Dhe=n(XSe,"STRONG",{});var jFt=s(Dhe);GBo=r(jFt,"longformer"),jFt.forEach(t),OBo=r(XSe," \u2014 "),aV=n(XSe,"A",{href:!0});var DFt=s(aV);VBo=r(DFt,"LongformerForMaskedLM"),DFt.forEach(t),XBo=r(XSe," (Longformer model)"),XSe.forEach(t),zBo=i(H),eb=n(H,"LI",{});var zSe=s(eb);Ghe=n(zSe,"STRONG",{});var GFt=s(Ghe);QBo=r(GFt,"luke"),GFt.forEach(t),WBo=r(zSe," \u2014 "),nV=n(zSe,"A",{href:!0});var OFt=s(nV);HBo=r(OFt,"LukeForMaskedLM"),OFt.forEach(t),UBo=r(zSe," (LUKE model)"),zSe.forEach(t),JBo=i(H),ob=n(H,"LI",{});var QSe=s(ob);Ohe=n(QSe,"STRONG",{});var VFt=s(Ohe);YBo=r(VFt,"mbart"),VFt.forEach(t),KBo=r(QSe," \u2014 "),sV=n(QSe,"A",{href:!0});var XFt=s(sV);ZBo=r(XFt,"MBartForConditionalGeneration"),XFt.forEach(t),eIo=r(QSe," (mBART model)"),QSe.forEach(t),oIo=i(H),rb=n(H,"LI",{});var WSe=s(rb);Vhe=n(WSe,"STRONG",{});var zFt=s(Vhe);rIo=r(zFt,"megatron-bert"),zFt.forEach(t),tIo=r(WSe," \u2014 "),lV=n(WSe,"A",{href:!0});var QFt=s(lV);aIo=r(QFt,"MegatronBertForMaskedLM"),QFt.forEach(t),nIo=r(WSe," (Megatron-BERT model)"),WSe.forEach(t),sIo=i(H),tb=n(H,"LI",{});var HSe=s(tb);Xhe=n(HSe,"STRONG",{});var WFt=s(Xhe);lIo=r(WFt,"mobilebert"),WFt.forEach(t),iIo=r(HSe," \u2014 "),iV=n(HSe,"A",{href:!0});var HFt=s(iV);dIo=r(HFt,"MobileBertForMaskedLM"),HFt.forEach(t),cIo=r(HSe," (MobileBERT model)"),HSe.forEach(t),fIo=i(H),ab=n(H,"LI",{});var USe=s(ab);zhe=n(USe,"STRONG",{});var UFt=s(zhe);mIo=r(UFt,"mpnet"),UFt.forEach(t),gIo=r(USe," \u2014 "),dV=n(USe,"A",{href:!0});var JFt=s(dV);hIo=r(JFt,"MPNetForMaskedLM"),JFt.forEach(t),pIo=r(USe," (MPNet model)"),USe.forEach(t),_Io=i(H),nb=n(H,"LI",{});var JSe=s(nb);Qhe=n(JSe,"STRONG",{});var YFt=s(Qhe);uIo=r(YFt,"mvp"),YFt.forEach(t),bIo=r(JSe," \u2014 "),cV=n(JSe,"A",{href:!0});var KFt=s(cV);vIo=r(KFt,"MvpForConditionalGeneration"),KFt.forEach(t),FIo=r(JSe," (MVP model)"),JSe.forEach(t),TIo=i(H),sb=n(H,"LI",{});var YSe=s(sb);Whe=n(YSe,"STRONG",{});var ZFt=s(Whe);MIo=r(ZFt,"nezha"),ZFt.forEach(t),EIo=r(YSe," \u2014 "),fV=n(YSe,"A",{href:!0});var eTt=s(fV);CIo=r(eTt,"NezhaForMaskedLM"),eTt.forEach(t),wIo=r(YSe," (Nezha model)"),YSe.forEach(t),AIo=i(H),lb=n(H,"LI",{});var KSe=s(lb);Hhe=n(KSe,"STRONG",{});var oTt=s(Hhe);LIo=r(oTt,"nystromformer"),oTt.forEach(t),yIo=r(KSe," \u2014 "),mV=n(KSe,"A",{href:!0});var rTt=s(mV);xIo=r(rTt,"NystromformerForMaskedLM"),rTt.forEach(t),$Io=r(KSe," (Nystr\xF6mformer model)"),KSe.forEach(t),kIo=i(H),ib=n(H,"LI",{});var ZSe=s(ib);Uhe=n(ZSe,"STRONG",{});var tTt=s(Uhe);SIo=r(tTt,"perceiver"),tTt.forEach(t),RIo=r(ZSe," \u2014 "),gV=n(ZSe,"A",{href:!0});var aTt=s(gV);PIo=r(aTt,"PerceiverForMaskedLM"),aTt.forEach(t),BIo=r(ZSe," (Perceiver model)"),ZSe.forEach(t),IIo=i(H),db=n(H,"LI",{});var eRe=s(db);Jhe=n(eRe,"STRONG",{});var nTt=s(Jhe);NIo=r(nTt,"qdqbert"),nTt.forEach(t),qIo=r(eRe," \u2014 "),hV=n(eRe,"A",{href:!0});var sTt=s(hV);jIo=r(sTt,"QDQBertForMaskedLM"),sTt.forEach(t),DIo=r(eRe," (QDQBert model)"),eRe.forEach(t),GIo=i(H),cb=n(H,"LI",{});var oRe=s(cb);Yhe=n(oRe,"STRONG",{});var lTt=s(Yhe);OIo=r(lTt,"reformer"),lTt.forEach(t),VIo=r(oRe," \u2014 "),pV=n(oRe,"A",{href:!0});var iTt=s(pV);XIo=r(iTt,"ReformerForMaskedLM"),iTt.forEach(t),zIo=r(oRe," (Reformer model)"),oRe.forEach(t),QIo=i(H),fb=n(H,"LI",{});var rRe=s(fb);Khe=n(rRe,"STRONG",{});var dTt=s(Khe);WIo=r(dTt,"rembert"),dTt.forEach(t),HIo=r(rRe," \u2014 "),_V=n(rRe,"A",{href:!0});var cTt=s(_V);UIo=r(cTt,"RemBertForMaskedLM"),cTt.forEach(t),JIo=r(rRe," (RemBERT model)"),rRe.forEach(t),YIo=i(H),mb=n(H,"LI",{});var tRe=s(mb);Zhe=n(tRe,"STRONG",{});var fTt=s(Zhe);KIo=r(fTt,"roberta"),fTt.forEach(t),ZIo=r(tRe," \u2014 "),uV=n(tRe,"A",{href:!0});var mTt=s(uV);eNo=r(mTt,"RobertaForMaskedLM"),mTt.forEach(t),oNo=r(tRe," (RoBERTa model)"),tRe.forEach(t),rNo=i(H),gb=n(H,"LI",{});var aRe=s(gb);epe=n(aRe,"STRONG",{});var gTt=s(epe);tNo=r(gTt,"roformer"),gTt.forEach(t),aNo=r(aRe," \u2014 "),bV=n(aRe,"A",{href:!0});var hTt=s(bV);nNo=r(hTt,"RoFormerForMaskedLM"),hTt.forEach(t),sNo=r(aRe," (RoFormer model)"),aRe.forEach(t),lNo=i(H),hb=n(H,"LI",{});var nRe=s(hb);ope=n(nRe,"STRONG",{});var pTt=s(ope);iNo=r(pTt,"squeezebert"),pTt.forEach(t),dNo=r(nRe," \u2014 "),vV=n(nRe,"A",{href:!0});var _Tt=s(vV);cNo=r(_Tt,"SqueezeBertForMaskedLM"),_Tt.forEach(t),fNo=r(nRe," (SqueezeBERT model)"),nRe.forEach(t),mNo=i(H),pb=n(H,"LI",{});var sRe=s(pb);rpe=n(sRe,"STRONG",{});var uTt=s(rpe);gNo=r(uTt,"tapas"),uTt.forEach(t),hNo=r(sRe," \u2014 "),FV=n(sRe,"A",{href:!0});var bTt=s(FV);pNo=r(bTt,"TapasForMaskedLM"),bTt.forEach(t),_No=r(sRe," (TAPAS model)"),sRe.forEach(t),uNo=i(H),_b=n(H,"LI",{});var lRe=s(_b);tpe=n(lRe,"STRONG",{});var vTt=s(tpe);bNo=r(vTt,"wav2vec2"),vTt.forEach(t),vNo=r(lRe," \u2014 "),ape=n(lRe,"CODE",{});var FTt=s(ape);FNo=r(FTt,"Wav2Vec2ForMaskedLM"),FTt.forEach(t),TNo=r(lRe," (Wav2Vec2 model)"),lRe.forEach(t),MNo=i(H),ub=n(H,"LI",{});var iRe=s(ub);npe=n(iRe,"STRONG",{});var TTt=s(npe);ENo=r(TTt,"xlm"),TTt.forEach(t),CNo=r(iRe," \u2014 "),TV=n(iRe,"A",{href:!0});var MTt=s(TV);wNo=r(MTt,"XLMWithLMHeadModel"),MTt.forEach(t),ANo=r(iRe," (XLM model)"),iRe.forEach(t),LNo=i(H),bb=n(H,"LI",{});var dRe=s(bb);spe=n(dRe,"STRONG",{});var ETt=s(spe);yNo=r(ETt,"xlm-roberta"),ETt.forEach(t),xNo=r(dRe," \u2014 "),MV=n(dRe,"A",{href:!0});var CTt=s(MV);$No=r(CTt,"XLMRobertaForMaskedLM"),CTt.forEach(t),kNo=r(dRe," (XLM-RoBERTa model)"),dRe.forEach(t),SNo=i(H),vb=n(H,"LI",{});var cRe=s(vb);lpe=n(cRe,"STRONG",{});var wTt=s(lpe);RNo=r(wTt,"xlm-roberta-xl"),wTt.forEach(t),PNo=r(cRe," \u2014 "),EV=n(cRe,"A",{href:!0});var ATt=s(EV);BNo=r(ATt,"XLMRobertaXLForMaskedLM"),ATt.forEach(t),INo=r(cRe," (XLM-RoBERTa-XL model)"),cRe.forEach(t),NNo=i(H),Fb=n(H,"LI",{});var fRe=s(Fb);ipe=n(fRe,"STRONG",{});var LTt=s(ipe);qNo=r(LTt,"yoso"),LTt.forEach(t),jNo=r(fRe," \u2014 "),CV=n(fRe,"A",{href:!0});var yTt=s(CV);DNo=r(yTt,"YosoForMaskedLM"),yTt.forEach(t),GNo=r(fRe," (YOSO model)"),fRe.forEach(t),H.forEach(t),ONo=i(da),Tb=n(da,"P",{});var mRe=s(Tb);VNo=r(mRe,"The model is set in evaluation mode by default using "),dpe=n(mRe,"CODE",{});var xTt=s(dpe);XNo=r(xTt,"model.eval()"),xTt.forEach(t),zNo=r(mRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(mRe,"CODE",{});var $Tt=s(cpe);QNo=r($Tt,"model.train()"),$Tt.forEach(t),mRe.forEach(t),WNo=i(da),T(Mb.$$.fragment,da),da.forEach(t),tl.forEach(t),bXe=i(f),Ki=n(f,"H2",{class:!0});var CQe=s(Ki);Eb=n(CQe,"A",{id:!0,class:!0,href:!0});var kTt=s(Eb);fpe=n(kTt,"SPAN",{});var STt=s(fpe);T(YL.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),HNo=i(CQe),mpe=n(CQe,"SPAN",{});var RTt=s(mpe);UNo=r(RTt,"AutoModelForSeq2SeqLM"),RTt.forEach(t),CQe.forEach(t),vXe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(KL.$$.fragment,al),JNo=i(al),Zi=n(al,"P",{});var Nre=s(Zi);YNo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wV=n(Nre,"A",{href:!0});var PTt=s(wV);KNo=r(PTt,"from_pretrained()"),PTt.forEach(t),ZNo=r(Nre," class method or the "),AV=n(Nre,"A",{href:!0});var BTt=s(AV);eqo=r(BTt,"from_config()"),BTt.forEach(t),oqo=r(Nre,` class
method.`),Nre.forEach(t),rqo=i(al),ZL=n(al,"P",{});var wQe=s(ZL);tqo=r(wQe,"This class cannot be instantiated directly using "),gpe=n(wQe,"CODE",{});var ITt=s(gpe);aqo=r(ITt,"__init__()"),ITt.forEach(t),nqo=r(wQe," (throws an error)."),wQe.forEach(t),sqo=i(al),ft=n(al,"DIV",{class:!0});var uA=s(ft);T(ey.$$.fragment,uA),lqo=i(uA),hpe=n(uA,"P",{});var NTt=s(hpe);iqo=r(NTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NTt.forEach(t),dqo=i(uA),ed=n(uA,"P",{});var qre=s(ed);cqo=r(qre,`Note:
Loading a model from its configuration file does `),ppe=n(qre,"STRONG",{});var qTt=s(ppe);fqo=r(qTt,"not"),qTt.forEach(t),mqo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(qre,"A",{href:!0});var jTt=s(LV);gqo=r(jTt,"from_pretrained()"),jTt.forEach(t),hqo=r(qre," to load the model weights."),qre.forEach(t),pqo=i(uA),T(Cb.$$.fragment,uA),uA.forEach(t),_qo=i(al),eo=n(al,"DIV",{class:!0});var ca=s(eo);T(oy.$$.fragment,ca),uqo=i(ca),_pe=n(ca,"P",{});var DTt=s(_pe);bqo=r(DTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DTt.forEach(t),vqo=i(ca),ja=n(ca,"P",{});var bA=s(ja);Fqo=r(bA,"The model class to instantiate is selected based on the "),upe=n(bA,"CODE",{});var GTt=s(upe);Tqo=r(GTt,"model_type"),GTt.forEach(t),Mqo=r(bA,` property of the config object (either
passed as an argument or loaded from `),bpe=n(bA,"CODE",{});var OTt=s(bpe);Eqo=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),Cqo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(bA,"CODE",{});var VTt=s(vpe);wqo=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),Aqo=r(bA,":"),bA.forEach(t),Lqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);wb=n(be,"LI",{});var gRe=s(wb);Fpe=n(gRe,"STRONG",{});var XTt=s(Fpe);yqo=r(XTt,"bart"),XTt.forEach(t),xqo=r(gRe," \u2014 "),yV=n(gRe,"A",{href:!0});var zTt=s(yV);$qo=r(zTt,"BartForConditionalGeneration"),zTt.forEach(t),kqo=r(gRe," (BART model)"),gRe.forEach(t),Sqo=i(be),Ab=n(be,"LI",{});var hRe=s(Ab);Tpe=n(hRe,"STRONG",{});var QTt=s(Tpe);Rqo=r(QTt,"bigbird_pegasus"),QTt.forEach(t),Pqo=r(hRe," \u2014 "),xV=n(hRe,"A",{href:!0});var WTt=s(xV);Bqo=r(WTt,"BigBirdPegasusForConditionalGeneration"),WTt.forEach(t),Iqo=r(hRe," (BigBird-Pegasus model)"),hRe.forEach(t),Nqo=i(be),Lb=n(be,"LI",{});var pRe=s(Lb);Mpe=n(pRe,"STRONG",{});var HTt=s(Mpe);qqo=r(HTt,"blenderbot"),HTt.forEach(t),jqo=r(pRe," \u2014 "),$V=n(pRe,"A",{href:!0});var UTt=s($V);Dqo=r(UTt,"BlenderbotForConditionalGeneration"),UTt.forEach(t),Gqo=r(pRe," (Blenderbot model)"),pRe.forEach(t),Oqo=i(be),yb=n(be,"LI",{});var _Re=s(yb);Epe=n(_Re,"STRONG",{});var JTt=s(Epe);Vqo=r(JTt,"blenderbot-small"),JTt.forEach(t),Xqo=r(_Re," \u2014 "),kV=n(_Re,"A",{href:!0});var YTt=s(kV);zqo=r(YTt,"BlenderbotSmallForConditionalGeneration"),YTt.forEach(t),Qqo=r(_Re," (BlenderbotSmall model)"),_Re.forEach(t),Wqo=i(be),xb=n(be,"LI",{});var uRe=s(xb);Cpe=n(uRe,"STRONG",{});var KTt=s(Cpe);Hqo=r(KTt,"encoder-decoder"),KTt.forEach(t),Uqo=r(uRe," \u2014 "),SV=n(uRe,"A",{href:!0});var ZTt=s(SV);Jqo=r(ZTt,"EncoderDecoderModel"),ZTt.forEach(t),Yqo=r(uRe," (Encoder decoder model)"),uRe.forEach(t),Kqo=i(be),$b=n(be,"LI",{});var bRe=s($b);wpe=n(bRe,"STRONG",{});var e7t=s(wpe);Zqo=r(e7t,"fsmt"),e7t.forEach(t),ejo=r(bRe," \u2014 "),RV=n(bRe,"A",{href:!0});var o7t=s(RV);ojo=r(o7t,"FSMTForConditionalGeneration"),o7t.forEach(t),rjo=r(bRe," (FairSeq Machine-Translation model)"),bRe.forEach(t),tjo=i(be),kb=n(be,"LI",{});var vRe=s(kb);Ape=n(vRe,"STRONG",{});var r7t=s(Ape);ajo=r(r7t,"led"),r7t.forEach(t),njo=r(vRe," \u2014 "),PV=n(vRe,"A",{href:!0});var t7t=s(PV);sjo=r(t7t,"LEDForConditionalGeneration"),t7t.forEach(t),ljo=r(vRe," (LED model)"),vRe.forEach(t),ijo=i(be),Sb=n(be,"LI",{});var FRe=s(Sb);Lpe=n(FRe,"STRONG",{});var a7t=s(Lpe);djo=r(a7t,"longt5"),a7t.forEach(t),cjo=r(FRe," \u2014 "),BV=n(FRe,"A",{href:!0});var n7t=s(BV);fjo=r(n7t,"LongT5ForConditionalGeneration"),n7t.forEach(t),mjo=r(FRe," (LongT5 model)"),FRe.forEach(t),gjo=i(be),Rb=n(be,"LI",{});var TRe=s(Rb);ype=n(TRe,"STRONG",{});var s7t=s(ype);hjo=r(s7t,"m2m_100"),s7t.forEach(t),pjo=r(TRe," \u2014 "),IV=n(TRe,"A",{href:!0});var l7t=s(IV);_jo=r(l7t,"M2M100ForConditionalGeneration"),l7t.forEach(t),ujo=r(TRe," (M2M100 model)"),TRe.forEach(t),bjo=i(be),Pb=n(be,"LI",{});var MRe=s(Pb);xpe=n(MRe,"STRONG",{});var i7t=s(xpe);vjo=r(i7t,"marian"),i7t.forEach(t),Fjo=r(MRe," \u2014 "),NV=n(MRe,"A",{href:!0});var d7t=s(NV);Tjo=r(d7t,"MarianMTModel"),d7t.forEach(t),Mjo=r(MRe," (Marian model)"),MRe.forEach(t),Ejo=i(be),Bb=n(be,"LI",{});var ERe=s(Bb);$pe=n(ERe,"STRONG",{});var c7t=s($pe);Cjo=r(c7t,"mbart"),c7t.forEach(t),wjo=r(ERe," \u2014 "),qV=n(ERe,"A",{href:!0});var f7t=s(qV);Ajo=r(f7t,"MBartForConditionalGeneration"),f7t.forEach(t),Ljo=r(ERe," (mBART model)"),ERe.forEach(t),yjo=i(be),Ib=n(be,"LI",{});var CRe=s(Ib);kpe=n(CRe,"STRONG",{});var m7t=s(kpe);xjo=r(m7t,"mt5"),m7t.forEach(t),$jo=r(CRe," \u2014 "),jV=n(CRe,"A",{href:!0});var g7t=s(jV);kjo=r(g7t,"MT5ForConditionalGeneration"),g7t.forEach(t),Sjo=r(CRe," (MT5 model)"),CRe.forEach(t),Rjo=i(be),Nb=n(be,"LI",{});var wRe=s(Nb);Spe=n(wRe,"STRONG",{});var h7t=s(Spe);Pjo=r(h7t,"mvp"),h7t.forEach(t),Bjo=r(wRe," \u2014 "),DV=n(wRe,"A",{href:!0});var p7t=s(DV);Ijo=r(p7t,"MvpForConditionalGeneration"),p7t.forEach(t),Njo=r(wRe," (MVP model)"),wRe.forEach(t),qjo=i(be),qb=n(be,"LI",{});var ARe=s(qb);Rpe=n(ARe,"STRONG",{});var _7t=s(Rpe);jjo=r(_7t,"pegasus"),_7t.forEach(t),Djo=r(ARe," \u2014 "),GV=n(ARe,"A",{href:!0});var u7t=s(GV);Gjo=r(u7t,"PegasusForConditionalGeneration"),u7t.forEach(t),Ojo=r(ARe," (Pegasus model)"),ARe.forEach(t),Vjo=i(be),jb=n(be,"LI",{});var LRe=s(jb);Ppe=n(LRe,"STRONG",{});var b7t=s(Ppe);Xjo=r(b7t,"plbart"),b7t.forEach(t),zjo=r(LRe," \u2014 "),OV=n(LRe,"A",{href:!0});var v7t=s(OV);Qjo=r(v7t,"PLBartForConditionalGeneration"),v7t.forEach(t),Wjo=r(LRe," (PLBart model)"),LRe.forEach(t),Hjo=i(be),Db=n(be,"LI",{});var yRe=s(Db);Bpe=n(yRe,"STRONG",{});var F7t=s(Bpe);Ujo=r(F7t,"prophetnet"),F7t.forEach(t),Jjo=r(yRe," \u2014 "),VV=n(yRe,"A",{href:!0});var T7t=s(VV);Yjo=r(T7t,"ProphetNetForConditionalGeneration"),T7t.forEach(t),Kjo=r(yRe," (ProphetNet model)"),yRe.forEach(t),Zjo=i(be),Gb=n(be,"LI",{});var xRe=s(Gb);Ipe=n(xRe,"STRONG",{});var M7t=s(Ipe);eDo=r(M7t,"t5"),M7t.forEach(t),oDo=r(xRe," \u2014 "),XV=n(xRe,"A",{href:!0});var E7t=s(XV);rDo=r(E7t,"T5ForConditionalGeneration"),E7t.forEach(t),tDo=r(xRe," (T5 model)"),xRe.forEach(t),aDo=i(be),Ob=n(be,"LI",{});var $Re=s(Ob);Npe=n($Re,"STRONG",{});var C7t=s(Npe);nDo=r(C7t,"xlm-prophetnet"),C7t.forEach(t),sDo=r($Re," \u2014 "),zV=n($Re,"A",{href:!0});var w7t=s(zV);lDo=r(w7t,"XLMProphetNetForConditionalGeneration"),w7t.forEach(t),iDo=r($Re," (XLM-ProphetNet model)"),$Re.forEach(t),be.forEach(t),dDo=i(ca),Vb=n(ca,"P",{});var kRe=s(Vb);cDo=r(kRe,"The model is set in evaluation mode by default using "),qpe=n(kRe,"CODE",{});var A7t=s(qpe);fDo=r(A7t,"model.eval()"),A7t.forEach(t),mDo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(kRe,"CODE",{});var L7t=s(jpe);gDo=r(L7t,"model.train()"),L7t.forEach(t),kRe.forEach(t),hDo=i(ca),T(Xb.$$.fragment,ca),ca.forEach(t),al.forEach(t),FXe=i(f),od=n(f,"H2",{class:!0});var AQe=s(od);zb=n(AQe,"A",{id:!0,class:!0,href:!0});var y7t=s(zb);Dpe=n(y7t,"SPAN",{});var x7t=s(Dpe);T(ry.$$.fragment,x7t),x7t.forEach(t),y7t.forEach(t),pDo=i(AQe),Gpe=n(AQe,"SPAN",{});var $7t=s(Gpe);_Do=r($7t,"AutoModelForSequenceClassification"),$7t.forEach(t),AQe.forEach(t),TXe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(ty.$$.fragment,nl),uDo=i(nl),rd=n(nl,"P",{});var jre=s(rd);bDo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QV=n(jre,"A",{href:!0});var k7t=s(QV);vDo=r(k7t,"from_pretrained()"),k7t.forEach(t),FDo=r(jre," class method or the "),WV=n(jre,"A",{href:!0});var S7t=s(WV);TDo=r(S7t,"from_config()"),S7t.forEach(t),MDo=r(jre,` class
method.`),jre.forEach(t),EDo=i(nl),ay=n(nl,"P",{});var LQe=s(ay);CDo=r(LQe,"This class cannot be instantiated directly using "),Ope=n(LQe,"CODE",{});var R7t=s(Ope);wDo=r(R7t,"__init__()"),R7t.forEach(t),ADo=r(LQe," (throws an error)."),LQe.forEach(t),LDo=i(nl),mt=n(nl,"DIV",{class:!0});var vA=s(mt);T(ny.$$.fragment,vA),yDo=i(vA),Vpe=n(vA,"P",{});var P7t=s(Vpe);xDo=r(P7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P7t.forEach(t),$Do=i(vA),td=n(vA,"P",{});var Dre=s(td);kDo=r(Dre,`Note:
Loading a model from its configuration file does `),Xpe=n(Dre,"STRONG",{});var B7t=s(Xpe);SDo=r(B7t,"not"),B7t.forEach(t),RDo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(Dre,"A",{href:!0});var I7t=s(HV);PDo=r(I7t,"from_pretrained()"),I7t.forEach(t),BDo=r(Dre," to load the model weights."),Dre.forEach(t),IDo=i(vA),T(Qb.$$.fragment,vA),vA.forEach(t),NDo=i(nl),oo=n(nl,"DIV",{class:!0});var fa=s(oo);T(sy.$$.fragment,fa),qDo=i(fa),zpe=n(fa,"P",{});var N7t=s(zpe);jDo=r(N7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N7t.forEach(t),DDo=i(fa),Da=n(fa,"P",{});var FA=s(Da);GDo=r(FA,"The model class to instantiate is selected based on the "),Qpe=n(FA,"CODE",{});var q7t=s(Qpe);ODo=r(q7t,"model_type"),q7t.forEach(t),VDo=r(FA,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(FA,"CODE",{});var j7t=s(Wpe);XDo=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),zDo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(FA,"CODE",{});var D7t=s(Hpe);QDo=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),WDo=r(FA,":"),FA.forEach(t),HDo=i(fa),N=n(fa,"UL",{});var q=s(N);Wb=n(q,"LI",{});var SRe=s(Wb);Upe=n(SRe,"STRONG",{});var G7t=s(Upe);UDo=r(G7t,"albert"),G7t.forEach(t),JDo=r(SRe," \u2014 "),UV=n(SRe,"A",{href:!0});var O7t=s(UV);YDo=r(O7t,"AlbertForSequenceClassification"),O7t.forEach(t),KDo=r(SRe," (ALBERT model)"),SRe.forEach(t),ZDo=i(q),Hb=n(q,"LI",{});var RRe=s(Hb);Jpe=n(RRe,"STRONG",{});var V7t=s(Jpe);eGo=r(V7t,"bart"),V7t.forEach(t),oGo=r(RRe," \u2014 "),JV=n(RRe,"A",{href:!0});var X7t=s(JV);rGo=r(X7t,"BartForSequenceClassification"),X7t.forEach(t),tGo=r(RRe," (BART model)"),RRe.forEach(t),aGo=i(q),Ub=n(q,"LI",{});var PRe=s(Ub);Ype=n(PRe,"STRONG",{});var z7t=s(Ype);nGo=r(z7t,"bert"),z7t.forEach(t),sGo=r(PRe," \u2014 "),YV=n(PRe,"A",{href:!0});var Q7t=s(YV);lGo=r(Q7t,"BertForSequenceClassification"),Q7t.forEach(t),iGo=r(PRe," (BERT model)"),PRe.forEach(t),dGo=i(q),Jb=n(q,"LI",{});var BRe=s(Jb);Kpe=n(BRe,"STRONG",{});var W7t=s(Kpe);cGo=r(W7t,"big_bird"),W7t.forEach(t),fGo=r(BRe," \u2014 "),KV=n(BRe,"A",{href:!0});var H7t=s(KV);mGo=r(H7t,"BigBirdForSequenceClassification"),H7t.forEach(t),gGo=r(BRe," (BigBird model)"),BRe.forEach(t),hGo=i(q),Yb=n(q,"LI",{});var IRe=s(Yb);Zpe=n(IRe,"STRONG",{});var U7t=s(Zpe);pGo=r(U7t,"bigbird_pegasus"),U7t.forEach(t),_Go=r(IRe," \u2014 "),ZV=n(IRe,"A",{href:!0});var J7t=s(ZV);uGo=r(J7t,"BigBirdPegasusForSequenceClassification"),J7t.forEach(t),bGo=r(IRe," (BigBird-Pegasus model)"),IRe.forEach(t),vGo=i(q),Kb=n(q,"LI",{});var NRe=s(Kb);e_e=n(NRe,"STRONG",{});var Y7t=s(e_e);FGo=r(Y7t,"bloom"),Y7t.forEach(t),TGo=r(NRe," \u2014 "),eX=n(NRe,"A",{href:!0});var K7t=s(eX);MGo=r(K7t,"BloomForSequenceClassification"),K7t.forEach(t),EGo=r(NRe," (BLOOM model)"),NRe.forEach(t),CGo=i(q),Zb=n(q,"LI",{});var qRe=s(Zb);o_e=n(qRe,"STRONG",{});var Z7t=s(o_e);wGo=r(Z7t,"camembert"),Z7t.forEach(t),AGo=r(qRe," \u2014 "),oX=n(qRe,"A",{href:!0});var e8t=s(oX);LGo=r(e8t,"CamembertForSequenceClassification"),e8t.forEach(t),yGo=r(qRe," (CamemBERT model)"),qRe.forEach(t),xGo=i(q),ev=n(q,"LI",{});var jRe=s(ev);r_e=n(jRe,"STRONG",{});var o8t=s(r_e);$Go=r(o8t,"canine"),o8t.forEach(t),kGo=r(jRe," \u2014 "),rX=n(jRe,"A",{href:!0});var r8t=s(rX);SGo=r(r8t,"CanineForSequenceClassification"),r8t.forEach(t),RGo=r(jRe," (CANINE model)"),jRe.forEach(t),PGo=i(q),ov=n(q,"LI",{});var DRe=s(ov);t_e=n(DRe,"STRONG",{});var t8t=s(t_e);BGo=r(t8t,"convbert"),t8t.forEach(t),IGo=r(DRe," \u2014 "),tX=n(DRe,"A",{href:!0});var a8t=s(tX);NGo=r(a8t,"ConvBertForSequenceClassification"),a8t.forEach(t),qGo=r(DRe," (ConvBERT model)"),DRe.forEach(t),jGo=i(q),rv=n(q,"LI",{});var GRe=s(rv);a_e=n(GRe,"STRONG",{});var n8t=s(a_e);DGo=r(n8t,"ctrl"),n8t.forEach(t),GGo=r(GRe," \u2014 "),aX=n(GRe,"A",{href:!0});var s8t=s(aX);OGo=r(s8t,"CTRLForSequenceClassification"),s8t.forEach(t),VGo=r(GRe," (CTRL model)"),GRe.forEach(t),XGo=i(q),tv=n(q,"LI",{});var ORe=s(tv);n_e=n(ORe,"STRONG",{});var l8t=s(n_e);zGo=r(l8t,"data2vec-text"),l8t.forEach(t),QGo=r(ORe," \u2014 "),nX=n(ORe,"A",{href:!0});var i8t=s(nX);WGo=r(i8t,"Data2VecTextForSequenceClassification"),i8t.forEach(t),HGo=r(ORe," (Data2VecText model)"),ORe.forEach(t),UGo=i(q),av=n(q,"LI",{});var VRe=s(av);s_e=n(VRe,"STRONG",{});var d8t=s(s_e);JGo=r(d8t,"deberta"),d8t.forEach(t),YGo=r(VRe," \u2014 "),sX=n(VRe,"A",{href:!0});var c8t=s(sX);KGo=r(c8t,"DebertaForSequenceClassification"),c8t.forEach(t),ZGo=r(VRe," (DeBERTa model)"),VRe.forEach(t),eOo=i(q),nv=n(q,"LI",{});var XRe=s(nv);l_e=n(XRe,"STRONG",{});var f8t=s(l_e);oOo=r(f8t,"deberta-v2"),f8t.forEach(t),rOo=r(XRe," \u2014 "),lX=n(XRe,"A",{href:!0});var m8t=s(lX);tOo=r(m8t,"DebertaV2ForSequenceClassification"),m8t.forEach(t),aOo=r(XRe," (DeBERTa-v2 model)"),XRe.forEach(t),nOo=i(q),sv=n(q,"LI",{});var zRe=s(sv);i_e=n(zRe,"STRONG",{});var g8t=s(i_e);sOo=r(g8t,"distilbert"),g8t.forEach(t),lOo=r(zRe," \u2014 "),iX=n(zRe,"A",{href:!0});var h8t=s(iX);iOo=r(h8t,"DistilBertForSequenceClassification"),h8t.forEach(t),dOo=r(zRe," (DistilBERT model)"),zRe.forEach(t),cOo=i(q),lv=n(q,"LI",{});var QRe=s(lv);d_e=n(QRe,"STRONG",{});var p8t=s(d_e);fOo=r(p8t,"electra"),p8t.forEach(t),mOo=r(QRe," \u2014 "),dX=n(QRe,"A",{href:!0});var _8t=s(dX);gOo=r(_8t,"ElectraForSequenceClassification"),_8t.forEach(t),hOo=r(QRe," (ELECTRA model)"),QRe.forEach(t),pOo=i(q),iv=n(q,"LI",{});var WRe=s(iv);c_e=n(WRe,"STRONG",{});var u8t=s(c_e);_Oo=r(u8t,"flaubert"),u8t.forEach(t),uOo=r(WRe," \u2014 "),cX=n(WRe,"A",{href:!0});var b8t=s(cX);bOo=r(b8t,"FlaubertForSequenceClassification"),b8t.forEach(t),vOo=r(WRe," (FlauBERT model)"),WRe.forEach(t),FOo=i(q),dv=n(q,"LI",{});var HRe=s(dv);f_e=n(HRe,"STRONG",{});var v8t=s(f_e);TOo=r(v8t,"fnet"),v8t.forEach(t),MOo=r(HRe," \u2014 "),fX=n(HRe,"A",{href:!0});var F8t=s(fX);EOo=r(F8t,"FNetForSequenceClassification"),F8t.forEach(t),COo=r(HRe," (FNet model)"),HRe.forEach(t),wOo=i(q),cv=n(q,"LI",{});var URe=s(cv);m_e=n(URe,"STRONG",{});var T8t=s(m_e);AOo=r(T8t,"funnel"),T8t.forEach(t),LOo=r(URe," \u2014 "),mX=n(URe,"A",{href:!0});var M8t=s(mX);yOo=r(M8t,"FunnelForSequenceClassification"),M8t.forEach(t),xOo=r(URe," (Funnel Transformer model)"),URe.forEach(t),$Oo=i(q),fv=n(q,"LI",{});var JRe=s(fv);g_e=n(JRe,"STRONG",{});var E8t=s(g_e);kOo=r(E8t,"gpt2"),E8t.forEach(t),SOo=r(JRe," \u2014 "),gX=n(JRe,"A",{href:!0});var C8t=s(gX);ROo=r(C8t,"GPT2ForSequenceClassification"),C8t.forEach(t),POo=r(JRe," (OpenAI GPT-2 model)"),JRe.forEach(t),BOo=i(q),mv=n(q,"LI",{});var YRe=s(mv);h_e=n(YRe,"STRONG",{});var w8t=s(h_e);IOo=r(w8t,"gpt_neo"),w8t.forEach(t),NOo=r(YRe," \u2014 "),hX=n(YRe,"A",{href:!0});var A8t=s(hX);qOo=r(A8t,"GPTNeoForSequenceClassification"),A8t.forEach(t),jOo=r(YRe," (GPT Neo model)"),YRe.forEach(t),DOo=i(q),gv=n(q,"LI",{});var KRe=s(gv);p_e=n(KRe,"STRONG",{});var L8t=s(p_e);GOo=r(L8t,"gptj"),L8t.forEach(t),OOo=r(KRe," \u2014 "),pX=n(KRe,"A",{href:!0});var y8t=s(pX);VOo=r(y8t,"GPTJForSequenceClassification"),y8t.forEach(t),XOo=r(KRe," (GPT-J model)"),KRe.forEach(t),zOo=i(q),hv=n(q,"LI",{});var ZRe=s(hv);__e=n(ZRe,"STRONG",{});var x8t=s(__e);QOo=r(x8t,"ibert"),x8t.forEach(t),WOo=r(ZRe," \u2014 "),_X=n(ZRe,"A",{href:!0});var $8t=s(_X);HOo=r($8t,"IBertForSequenceClassification"),$8t.forEach(t),UOo=r(ZRe," (I-BERT model)"),ZRe.forEach(t),JOo=i(q),pv=n(q,"LI",{});var ePe=s(pv);u_e=n(ePe,"STRONG",{});var k8t=s(u_e);YOo=r(k8t,"layoutlm"),k8t.forEach(t),KOo=r(ePe," \u2014 "),uX=n(ePe,"A",{href:!0});var S8t=s(uX);ZOo=r(S8t,"LayoutLMForSequenceClassification"),S8t.forEach(t),eVo=r(ePe," (LayoutLM model)"),ePe.forEach(t),oVo=i(q),_v=n(q,"LI",{});var oPe=s(_v);b_e=n(oPe,"STRONG",{});var R8t=s(b_e);rVo=r(R8t,"layoutlmv2"),R8t.forEach(t),tVo=r(oPe," \u2014 "),bX=n(oPe,"A",{href:!0});var P8t=s(bX);aVo=r(P8t,"LayoutLMv2ForSequenceClassification"),P8t.forEach(t),nVo=r(oPe," (LayoutLMv2 model)"),oPe.forEach(t),sVo=i(q),uv=n(q,"LI",{});var rPe=s(uv);v_e=n(rPe,"STRONG",{});var B8t=s(v_e);lVo=r(B8t,"layoutlmv3"),B8t.forEach(t),iVo=r(rPe," \u2014 "),vX=n(rPe,"A",{href:!0});var I8t=s(vX);dVo=r(I8t,"LayoutLMv3ForSequenceClassification"),I8t.forEach(t),cVo=r(rPe," (LayoutLMv3 model)"),rPe.forEach(t),fVo=i(q),bv=n(q,"LI",{});var tPe=s(bv);F_e=n(tPe,"STRONG",{});var N8t=s(F_e);mVo=r(N8t,"led"),N8t.forEach(t),gVo=r(tPe," \u2014 "),FX=n(tPe,"A",{href:!0});var q8t=s(FX);hVo=r(q8t,"LEDForSequenceClassification"),q8t.forEach(t),pVo=r(tPe," (LED model)"),tPe.forEach(t),_Vo=i(q),vv=n(q,"LI",{});var aPe=s(vv);T_e=n(aPe,"STRONG",{});var j8t=s(T_e);uVo=r(j8t,"longformer"),j8t.forEach(t),bVo=r(aPe," \u2014 "),TX=n(aPe,"A",{href:!0});var D8t=s(TX);vVo=r(D8t,"LongformerForSequenceClassification"),D8t.forEach(t),FVo=r(aPe," (Longformer model)"),aPe.forEach(t),TVo=i(q),Fv=n(q,"LI",{});var nPe=s(Fv);M_e=n(nPe,"STRONG",{});var G8t=s(M_e);MVo=r(G8t,"mbart"),G8t.forEach(t),EVo=r(nPe," \u2014 "),MX=n(nPe,"A",{href:!0});var O8t=s(MX);CVo=r(O8t,"MBartForSequenceClassification"),O8t.forEach(t),wVo=r(nPe," (mBART model)"),nPe.forEach(t),AVo=i(q),Tv=n(q,"LI",{});var sPe=s(Tv);E_e=n(sPe,"STRONG",{});var V8t=s(E_e);LVo=r(V8t,"megatron-bert"),V8t.forEach(t),yVo=r(sPe," \u2014 "),EX=n(sPe,"A",{href:!0});var X8t=s(EX);xVo=r(X8t,"MegatronBertForSequenceClassification"),X8t.forEach(t),$Vo=r(sPe," (Megatron-BERT model)"),sPe.forEach(t),kVo=i(q),Mv=n(q,"LI",{});var lPe=s(Mv);C_e=n(lPe,"STRONG",{});var z8t=s(C_e);SVo=r(z8t,"mobilebert"),z8t.forEach(t),RVo=r(lPe," \u2014 "),CX=n(lPe,"A",{href:!0});var Q8t=s(CX);PVo=r(Q8t,"MobileBertForSequenceClassification"),Q8t.forEach(t),BVo=r(lPe," (MobileBERT model)"),lPe.forEach(t),IVo=i(q),Ev=n(q,"LI",{});var iPe=s(Ev);w_e=n(iPe,"STRONG",{});var W8t=s(w_e);NVo=r(W8t,"mpnet"),W8t.forEach(t),qVo=r(iPe," \u2014 "),wX=n(iPe,"A",{href:!0});var H8t=s(wX);jVo=r(H8t,"MPNetForSequenceClassification"),H8t.forEach(t),DVo=r(iPe," (MPNet model)"),iPe.forEach(t),GVo=i(q),Cv=n(q,"LI",{});var dPe=s(Cv);A_e=n(dPe,"STRONG",{});var U8t=s(A_e);OVo=r(U8t,"mvp"),U8t.forEach(t),VVo=r(dPe," \u2014 "),AX=n(dPe,"A",{href:!0});var J8t=s(AX);XVo=r(J8t,"MvpForSequenceClassification"),J8t.forEach(t),zVo=r(dPe," (MVP model)"),dPe.forEach(t),QVo=i(q),wv=n(q,"LI",{});var cPe=s(wv);L_e=n(cPe,"STRONG",{});var Y8t=s(L_e);WVo=r(Y8t,"nezha"),Y8t.forEach(t),HVo=r(cPe," \u2014 "),LX=n(cPe,"A",{href:!0});var K8t=s(LX);UVo=r(K8t,"NezhaForSequenceClassification"),K8t.forEach(t),JVo=r(cPe," (Nezha model)"),cPe.forEach(t),YVo=i(q),Av=n(q,"LI",{});var fPe=s(Av);y_e=n(fPe,"STRONG",{});var Z8t=s(y_e);KVo=r(Z8t,"nystromformer"),Z8t.forEach(t),ZVo=r(fPe," \u2014 "),yX=n(fPe,"A",{href:!0});var eMt=s(yX);eXo=r(eMt,"NystromformerForSequenceClassification"),eMt.forEach(t),oXo=r(fPe," (Nystr\xF6mformer model)"),fPe.forEach(t),rXo=i(q),Lv=n(q,"LI",{});var mPe=s(Lv);x_e=n(mPe,"STRONG",{});var oMt=s(x_e);tXo=r(oMt,"openai-gpt"),oMt.forEach(t),aXo=r(mPe," \u2014 "),xX=n(mPe,"A",{href:!0});var rMt=s(xX);nXo=r(rMt,"OpenAIGPTForSequenceClassification"),rMt.forEach(t),sXo=r(mPe," (OpenAI GPT model)"),mPe.forEach(t),lXo=i(q),yv=n(q,"LI",{});var gPe=s(yv);$_e=n(gPe,"STRONG",{});var tMt=s($_e);iXo=r(tMt,"perceiver"),tMt.forEach(t),dXo=r(gPe," \u2014 "),$X=n(gPe,"A",{href:!0});var aMt=s($X);cXo=r(aMt,"PerceiverForSequenceClassification"),aMt.forEach(t),fXo=r(gPe," (Perceiver model)"),gPe.forEach(t),mXo=i(q),xv=n(q,"LI",{});var hPe=s(xv);k_e=n(hPe,"STRONG",{});var nMt=s(k_e);gXo=r(nMt,"plbart"),nMt.forEach(t),hXo=r(hPe," \u2014 "),kX=n(hPe,"A",{href:!0});var sMt=s(kX);pXo=r(sMt,"PLBartForSequenceClassification"),sMt.forEach(t),_Xo=r(hPe," (PLBart model)"),hPe.forEach(t),uXo=i(q),$v=n(q,"LI",{});var pPe=s($v);S_e=n(pPe,"STRONG",{});var lMt=s(S_e);bXo=r(lMt,"qdqbert"),lMt.forEach(t),vXo=r(pPe," \u2014 "),SX=n(pPe,"A",{href:!0});var iMt=s(SX);FXo=r(iMt,"QDQBertForSequenceClassification"),iMt.forEach(t),TXo=r(pPe," (QDQBert model)"),pPe.forEach(t),MXo=i(q),kv=n(q,"LI",{});var _Pe=s(kv);R_e=n(_Pe,"STRONG",{});var dMt=s(R_e);EXo=r(dMt,"reformer"),dMt.forEach(t),CXo=r(_Pe," \u2014 "),RX=n(_Pe,"A",{href:!0});var cMt=s(RX);wXo=r(cMt,"ReformerForSequenceClassification"),cMt.forEach(t),AXo=r(_Pe," (Reformer model)"),_Pe.forEach(t),LXo=i(q),Sv=n(q,"LI",{});var uPe=s(Sv);P_e=n(uPe,"STRONG",{});var fMt=s(P_e);yXo=r(fMt,"rembert"),fMt.forEach(t),xXo=r(uPe," \u2014 "),PX=n(uPe,"A",{href:!0});var mMt=s(PX);$Xo=r(mMt,"RemBertForSequenceClassification"),mMt.forEach(t),kXo=r(uPe," (RemBERT model)"),uPe.forEach(t),SXo=i(q),Rv=n(q,"LI",{});var bPe=s(Rv);B_e=n(bPe,"STRONG",{});var gMt=s(B_e);RXo=r(gMt,"roberta"),gMt.forEach(t),PXo=r(bPe," \u2014 "),BX=n(bPe,"A",{href:!0});var hMt=s(BX);BXo=r(hMt,"RobertaForSequenceClassification"),hMt.forEach(t),IXo=r(bPe," (RoBERTa model)"),bPe.forEach(t),NXo=i(q),Pv=n(q,"LI",{});var vPe=s(Pv);I_e=n(vPe,"STRONG",{});var pMt=s(I_e);qXo=r(pMt,"roformer"),pMt.forEach(t),jXo=r(vPe," \u2014 "),IX=n(vPe,"A",{href:!0});var _Mt=s(IX);DXo=r(_Mt,"RoFormerForSequenceClassification"),_Mt.forEach(t),GXo=r(vPe," (RoFormer model)"),vPe.forEach(t),OXo=i(q),Bv=n(q,"LI",{});var FPe=s(Bv);N_e=n(FPe,"STRONG",{});var uMt=s(N_e);VXo=r(uMt,"squeezebert"),uMt.forEach(t),XXo=r(FPe," \u2014 "),NX=n(FPe,"A",{href:!0});var bMt=s(NX);zXo=r(bMt,"SqueezeBertForSequenceClassification"),bMt.forEach(t),QXo=r(FPe," (SqueezeBERT model)"),FPe.forEach(t),WXo=i(q),Iv=n(q,"LI",{});var TPe=s(Iv);q_e=n(TPe,"STRONG",{});var vMt=s(q_e);HXo=r(vMt,"tapas"),vMt.forEach(t),UXo=r(TPe," \u2014 "),qX=n(TPe,"A",{href:!0});var FMt=s(qX);JXo=r(FMt,"TapasForSequenceClassification"),FMt.forEach(t),YXo=r(TPe," (TAPAS model)"),TPe.forEach(t),KXo=i(q),Nv=n(q,"LI",{});var MPe=s(Nv);j_e=n(MPe,"STRONG",{});var TMt=s(j_e);ZXo=r(TMt,"transfo-xl"),TMt.forEach(t),ezo=r(MPe," \u2014 "),jX=n(MPe,"A",{href:!0});var MMt=s(jX);ozo=r(MMt,"TransfoXLForSequenceClassification"),MMt.forEach(t),rzo=r(MPe," (Transformer-XL model)"),MPe.forEach(t),tzo=i(q),qv=n(q,"LI",{});var EPe=s(qv);D_e=n(EPe,"STRONG",{});var EMt=s(D_e);azo=r(EMt,"xlm"),EMt.forEach(t),nzo=r(EPe," \u2014 "),DX=n(EPe,"A",{href:!0});var CMt=s(DX);szo=r(CMt,"XLMForSequenceClassification"),CMt.forEach(t),lzo=r(EPe," (XLM model)"),EPe.forEach(t),izo=i(q),jv=n(q,"LI",{});var CPe=s(jv);G_e=n(CPe,"STRONG",{});var wMt=s(G_e);dzo=r(wMt,"xlm-roberta"),wMt.forEach(t),czo=r(CPe," \u2014 "),GX=n(CPe,"A",{href:!0});var AMt=s(GX);fzo=r(AMt,"XLMRobertaForSequenceClassification"),AMt.forEach(t),mzo=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),gzo=i(q),Dv=n(q,"LI",{});var wPe=s(Dv);O_e=n(wPe,"STRONG",{});var LMt=s(O_e);hzo=r(LMt,"xlm-roberta-xl"),LMt.forEach(t),pzo=r(wPe," \u2014 "),OX=n(wPe,"A",{href:!0});var yMt=s(OX);_zo=r(yMt,"XLMRobertaXLForSequenceClassification"),yMt.forEach(t),uzo=r(wPe," (XLM-RoBERTa-XL model)"),wPe.forEach(t),bzo=i(q),Gv=n(q,"LI",{});var APe=s(Gv);V_e=n(APe,"STRONG",{});var xMt=s(V_e);vzo=r(xMt,"xlnet"),xMt.forEach(t),Fzo=r(APe," \u2014 "),VX=n(APe,"A",{href:!0});var $Mt=s(VX);Tzo=r($Mt,"XLNetForSequenceClassification"),$Mt.forEach(t),Mzo=r(APe," (XLNet model)"),APe.forEach(t),Ezo=i(q),Ov=n(q,"LI",{});var LPe=s(Ov);X_e=n(LPe,"STRONG",{});var kMt=s(X_e);Czo=r(kMt,"yoso"),kMt.forEach(t),wzo=r(LPe," \u2014 "),XX=n(LPe,"A",{href:!0});var SMt=s(XX);Azo=r(SMt,"YosoForSequenceClassification"),SMt.forEach(t),Lzo=r(LPe," (YOSO model)"),LPe.forEach(t),q.forEach(t),yzo=i(fa),Vv=n(fa,"P",{});var yPe=s(Vv);xzo=r(yPe,"The model is set in evaluation mode by default using "),z_e=n(yPe,"CODE",{});var RMt=s(z_e);$zo=r(RMt,"model.eval()"),RMt.forEach(t),kzo=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q_e=n(yPe,"CODE",{});var PMt=s(Q_e);Szo=r(PMt,"model.train()"),PMt.forEach(t),yPe.forEach(t),Rzo=i(fa),T(Xv.$$.fragment,fa),fa.forEach(t),nl.forEach(t),MXe=i(f),ad=n(f,"H2",{class:!0});var yQe=s(ad);zv=n(yQe,"A",{id:!0,class:!0,href:!0});var BMt=s(zv);W_e=n(BMt,"SPAN",{});var IMt=s(W_e);T(ly.$$.fragment,IMt),IMt.forEach(t),BMt.forEach(t),Pzo=i(yQe),H_e=n(yQe,"SPAN",{});var NMt=s(H_e);Bzo=r(NMt,"AutoModelForMultipleChoice"),NMt.forEach(t),yQe.forEach(t),EXe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(iy.$$.fragment,sl),Izo=i(sl),nd=n(sl,"P",{});var Gre=s(nd);Nzo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=n(Gre,"A",{href:!0});var qMt=s(zX);qzo=r(qMt,"from_pretrained()"),qMt.forEach(t),jzo=r(Gre," class method or the "),QX=n(Gre,"A",{href:!0});var jMt=s(QX);Dzo=r(jMt,"from_config()"),jMt.forEach(t),Gzo=r(Gre,` class
method.`),Gre.forEach(t),Ozo=i(sl),dy=n(sl,"P",{});var xQe=s(dy);Vzo=r(xQe,"This class cannot be instantiated directly using "),U_e=n(xQe,"CODE",{});var DMt=s(U_e);Xzo=r(DMt,"__init__()"),DMt.forEach(t),zzo=r(xQe," (throws an error)."),xQe.forEach(t),Qzo=i(sl),gt=n(sl,"DIV",{class:!0});var TA=s(gt);T(cy.$$.fragment,TA),Wzo=i(TA),J_e=n(TA,"P",{});var GMt=s(J_e);Hzo=r(GMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GMt.forEach(t),Uzo=i(TA),sd=n(TA,"P",{});var Ore=s(sd);Jzo=r(Ore,`Note:
Loading a model from its configuration file does `),Y_e=n(Ore,"STRONG",{});var OMt=s(Y_e);Yzo=r(OMt,"not"),OMt.forEach(t),Kzo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(Ore,"A",{href:!0});var VMt=s(WX);Zzo=r(VMt,"from_pretrained()"),VMt.forEach(t),eQo=r(Ore," to load the model weights."),Ore.forEach(t),oQo=i(TA),T(Qv.$$.fragment,TA),TA.forEach(t),rQo=i(sl),ro=n(sl,"DIV",{class:!0});var ma=s(ro);T(fy.$$.fragment,ma),tQo=i(ma),K_e=n(ma,"P",{});var XMt=s(K_e);aQo=r(XMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XMt.forEach(t),nQo=i(ma),Ga=n(ma,"P",{});var MA=s(Ga);sQo=r(MA,"The model class to instantiate is selected based on the "),Z_e=n(MA,"CODE",{});var zMt=s(Z_e);lQo=r(zMt,"model_type"),zMt.forEach(t),iQo=r(MA,` property of the config object (either
passed as an argument or loaded from `),eue=n(MA,"CODE",{});var QMt=s(eue);dQo=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),cQo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(MA,"CODE",{});var WMt=s(oue);fQo=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),mQo=r(MA,":"),MA.forEach(t),gQo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Wv=n(ee,"LI",{});var xPe=s(Wv);rue=n(xPe,"STRONG",{});var HMt=s(rue);hQo=r(HMt,"albert"),HMt.forEach(t),pQo=r(xPe," \u2014 "),HX=n(xPe,"A",{href:!0});var UMt=s(HX);_Qo=r(UMt,"AlbertForMultipleChoice"),UMt.forEach(t),uQo=r(xPe," (ALBERT model)"),xPe.forEach(t),bQo=i(ee),Hv=n(ee,"LI",{});var $Pe=s(Hv);tue=n($Pe,"STRONG",{});var JMt=s(tue);vQo=r(JMt,"bert"),JMt.forEach(t),FQo=r($Pe," \u2014 "),UX=n($Pe,"A",{href:!0});var YMt=s(UX);TQo=r(YMt,"BertForMultipleChoice"),YMt.forEach(t),MQo=r($Pe," (BERT model)"),$Pe.forEach(t),EQo=i(ee),Uv=n(ee,"LI",{});var kPe=s(Uv);aue=n(kPe,"STRONG",{});var KMt=s(aue);CQo=r(KMt,"big_bird"),KMt.forEach(t),wQo=r(kPe," \u2014 "),JX=n(kPe,"A",{href:!0});var ZMt=s(JX);AQo=r(ZMt,"BigBirdForMultipleChoice"),ZMt.forEach(t),LQo=r(kPe," (BigBird model)"),kPe.forEach(t),yQo=i(ee),Jv=n(ee,"LI",{});var SPe=s(Jv);nue=n(SPe,"STRONG",{});var e4t=s(nue);xQo=r(e4t,"camembert"),e4t.forEach(t),$Qo=r(SPe," \u2014 "),YX=n(SPe,"A",{href:!0});var o4t=s(YX);kQo=r(o4t,"CamembertForMultipleChoice"),o4t.forEach(t),SQo=r(SPe," (CamemBERT model)"),SPe.forEach(t),RQo=i(ee),Yv=n(ee,"LI",{});var RPe=s(Yv);sue=n(RPe,"STRONG",{});var r4t=s(sue);PQo=r(r4t,"canine"),r4t.forEach(t),BQo=r(RPe," \u2014 "),KX=n(RPe,"A",{href:!0});var t4t=s(KX);IQo=r(t4t,"CanineForMultipleChoice"),t4t.forEach(t),NQo=r(RPe," (CANINE model)"),RPe.forEach(t),qQo=i(ee),Kv=n(ee,"LI",{});var PPe=s(Kv);lue=n(PPe,"STRONG",{});var a4t=s(lue);jQo=r(a4t,"convbert"),a4t.forEach(t),DQo=r(PPe," \u2014 "),ZX=n(PPe,"A",{href:!0});var n4t=s(ZX);GQo=r(n4t,"ConvBertForMultipleChoice"),n4t.forEach(t),OQo=r(PPe," (ConvBERT model)"),PPe.forEach(t),VQo=i(ee),Zv=n(ee,"LI",{});var BPe=s(Zv);iue=n(BPe,"STRONG",{});var s4t=s(iue);XQo=r(s4t,"data2vec-text"),s4t.forEach(t),zQo=r(BPe," \u2014 "),ez=n(BPe,"A",{href:!0});var l4t=s(ez);QQo=r(l4t,"Data2VecTextForMultipleChoice"),l4t.forEach(t),WQo=r(BPe," (Data2VecText model)"),BPe.forEach(t),HQo=i(ee),eF=n(ee,"LI",{});var IPe=s(eF);due=n(IPe,"STRONG",{});var i4t=s(due);UQo=r(i4t,"deberta-v2"),i4t.forEach(t),JQo=r(IPe," \u2014 "),oz=n(IPe,"A",{href:!0});var d4t=s(oz);YQo=r(d4t,"DebertaV2ForMultipleChoice"),d4t.forEach(t),KQo=r(IPe," (DeBERTa-v2 model)"),IPe.forEach(t),ZQo=i(ee),oF=n(ee,"LI",{});var NPe=s(oF);cue=n(NPe,"STRONG",{});var c4t=s(cue);eWo=r(c4t,"distilbert"),c4t.forEach(t),oWo=r(NPe," \u2014 "),rz=n(NPe,"A",{href:!0});var f4t=s(rz);rWo=r(f4t,"DistilBertForMultipleChoice"),f4t.forEach(t),tWo=r(NPe," (DistilBERT model)"),NPe.forEach(t),aWo=i(ee),rF=n(ee,"LI",{});var qPe=s(rF);fue=n(qPe,"STRONG",{});var m4t=s(fue);nWo=r(m4t,"electra"),m4t.forEach(t),sWo=r(qPe," \u2014 "),tz=n(qPe,"A",{href:!0});var g4t=s(tz);lWo=r(g4t,"ElectraForMultipleChoice"),g4t.forEach(t),iWo=r(qPe," (ELECTRA model)"),qPe.forEach(t),dWo=i(ee),tF=n(ee,"LI",{});var jPe=s(tF);mue=n(jPe,"STRONG",{});var h4t=s(mue);cWo=r(h4t,"flaubert"),h4t.forEach(t),fWo=r(jPe," \u2014 "),az=n(jPe,"A",{href:!0});var p4t=s(az);mWo=r(p4t,"FlaubertForMultipleChoice"),p4t.forEach(t),gWo=r(jPe," (FlauBERT model)"),jPe.forEach(t),hWo=i(ee),aF=n(ee,"LI",{});var DPe=s(aF);gue=n(DPe,"STRONG",{});var _4t=s(gue);pWo=r(_4t,"fnet"),_4t.forEach(t),_Wo=r(DPe," \u2014 "),nz=n(DPe,"A",{href:!0});var u4t=s(nz);uWo=r(u4t,"FNetForMultipleChoice"),u4t.forEach(t),bWo=r(DPe," (FNet model)"),DPe.forEach(t),vWo=i(ee),nF=n(ee,"LI",{});var GPe=s(nF);hue=n(GPe,"STRONG",{});var b4t=s(hue);FWo=r(b4t,"funnel"),b4t.forEach(t),TWo=r(GPe," \u2014 "),sz=n(GPe,"A",{href:!0});var v4t=s(sz);MWo=r(v4t,"FunnelForMultipleChoice"),v4t.forEach(t),EWo=r(GPe," (Funnel Transformer model)"),GPe.forEach(t),CWo=i(ee),sF=n(ee,"LI",{});var OPe=s(sF);pue=n(OPe,"STRONG",{});var F4t=s(pue);wWo=r(F4t,"ibert"),F4t.forEach(t),AWo=r(OPe," \u2014 "),lz=n(OPe,"A",{href:!0});var T4t=s(lz);LWo=r(T4t,"IBertForMultipleChoice"),T4t.forEach(t),yWo=r(OPe," (I-BERT model)"),OPe.forEach(t),xWo=i(ee),lF=n(ee,"LI",{});var VPe=s(lF);_ue=n(VPe,"STRONG",{});var M4t=s(_ue);$Wo=r(M4t,"longformer"),M4t.forEach(t),kWo=r(VPe," \u2014 "),iz=n(VPe,"A",{href:!0});var E4t=s(iz);SWo=r(E4t,"LongformerForMultipleChoice"),E4t.forEach(t),RWo=r(VPe," (Longformer model)"),VPe.forEach(t),PWo=i(ee),iF=n(ee,"LI",{});var XPe=s(iF);uue=n(XPe,"STRONG",{});var C4t=s(uue);BWo=r(C4t,"megatron-bert"),C4t.forEach(t),IWo=r(XPe," \u2014 "),dz=n(XPe,"A",{href:!0});var w4t=s(dz);NWo=r(w4t,"MegatronBertForMultipleChoice"),w4t.forEach(t),qWo=r(XPe," (Megatron-BERT model)"),XPe.forEach(t),jWo=i(ee),dF=n(ee,"LI",{});var zPe=s(dF);bue=n(zPe,"STRONG",{});var A4t=s(bue);DWo=r(A4t,"mobilebert"),A4t.forEach(t),GWo=r(zPe," \u2014 "),cz=n(zPe,"A",{href:!0});var L4t=s(cz);OWo=r(L4t,"MobileBertForMultipleChoice"),L4t.forEach(t),VWo=r(zPe," (MobileBERT model)"),zPe.forEach(t),XWo=i(ee),cF=n(ee,"LI",{});var QPe=s(cF);vue=n(QPe,"STRONG",{});var y4t=s(vue);zWo=r(y4t,"mpnet"),y4t.forEach(t),QWo=r(QPe," \u2014 "),fz=n(QPe,"A",{href:!0});var x4t=s(fz);WWo=r(x4t,"MPNetForMultipleChoice"),x4t.forEach(t),HWo=r(QPe," (MPNet model)"),QPe.forEach(t),UWo=i(ee),fF=n(ee,"LI",{});var WPe=s(fF);Fue=n(WPe,"STRONG",{});var $4t=s(Fue);JWo=r($4t,"nezha"),$4t.forEach(t),YWo=r(WPe," \u2014 "),mz=n(WPe,"A",{href:!0});var k4t=s(mz);KWo=r(k4t,"NezhaForMultipleChoice"),k4t.forEach(t),ZWo=r(WPe," (Nezha model)"),WPe.forEach(t),eHo=i(ee),mF=n(ee,"LI",{});var HPe=s(mF);Tue=n(HPe,"STRONG",{});var S4t=s(Tue);oHo=r(S4t,"nystromformer"),S4t.forEach(t),rHo=r(HPe," \u2014 "),gz=n(HPe,"A",{href:!0});var R4t=s(gz);tHo=r(R4t,"NystromformerForMultipleChoice"),R4t.forEach(t),aHo=r(HPe," (Nystr\xF6mformer model)"),HPe.forEach(t),nHo=i(ee),gF=n(ee,"LI",{});var UPe=s(gF);Mue=n(UPe,"STRONG",{});var P4t=s(Mue);sHo=r(P4t,"qdqbert"),P4t.forEach(t),lHo=r(UPe," \u2014 "),hz=n(UPe,"A",{href:!0});var B4t=s(hz);iHo=r(B4t,"QDQBertForMultipleChoice"),B4t.forEach(t),dHo=r(UPe," (QDQBert model)"),UPe.forEach(t),cHo=i(ee),hF=n(ee,"LI",{});var JPe=s(hF);Eue=n(JPe,"STRONG",{});var I4t=s(Eue);fHo=r(I4t,"rembert"),I4t.forEach(t),mHo=r(JPe," \u2014 "),pz=n(JPe,"A",{href:!0});var N4t=s(pz);gHo=r(N4t,"RemBertForMultipleChoice"),N4t.forEach(t),hHo=r(JPe," (RemBERT model)"),JPe.forEach(t),pHo=i(ee),pF=n(ee,"LI",{});var YPe=s(pF);Cue=n(YPe,"STRONG",{});var q4t=s(Cue);_Ho=r(q4t,"roberta"),q4t.forEach(t),uHo=r(YPe," \u2014 "),_z=n(YPe,"A",{href:!0});var j4t=s(_z);bHo=r(j4t,"RobertaForMultipleChoice"),j4t.forEach(t),vHo=r(YPe," (RoBERTa model)"),YPe.forEach(t),FHo=i(ee),_F=n(ee,"LI",{});var KPe=s(_F);wue=n(KPe,"STRONG",{});var D4t=s(wue);THo=r(D4t,"roformer"),D4t.forEach(t),MHo=r(KPe," \u2014 "),uz=n(KPe,"A",{href:!0});var G4t=s(uz);EHo=r(G4t,"RoFormerForMultipleChoice"),G4t.forEach(t),CHo=r(KPe," (RoFormer model)"),KPe.forEach(t),wHo=i(ee),uF=n(ee,"LI",{});var ZPe=s(uF);Aue=n(ZPe,"STRONG",{});var O4t=s(Aue);AHo=r(O4t,"squeezebert"),O4t.forEach(t),LHo=r(ZPe," \u2014 "),bz=n(ZPe,"A",{href:!0});var V4t=s(bz);yHo=r(V4t,"SqueezeBertForMultipleChoice"),V4t.forEach(t),xHo=r(ZPe," (SqueezeBERT model)"),ZPe.forEach(t),$Ho=i(ee),bF=n(ee,"LI",{});var eBe=s(bF);Lue=n(eBe,"STRONG",{});var X4t=s(Lue);kHo=r(X4t,"xlm"),X4t.forEach(t),SHo=r(eBe," \u2014 "),vz=n(eBe,"A",{href:!0});var z4t=s(vz);RHo=r(z4t,"XLMForMultipleChoice"),z4t.forEach(t),PHo=r(eBe," (XLM model)"),eBe.forEach(t),BHo=i(ee),vF=n(ee,"LI",{});var oBe=s(vF);yue=n(oBe,"STRONG",{});var Q4t=s(yue);IHo=r(Q4t,"xlm-roberta"),Q4t.forEach(t),NHo=r(oBe," \u2014 "),Fz=n(oBe,"A",{href:!0});var W4t=s(Fz);qHo=r(W4t,"XLMRobertaForMultipleChoice"),W4t.forEach(t),jHo=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),DHo=i(ee),FF=n(ee,"LI",{});var rBe=s(FF);xue=n(rBe,"STRONG",{});var H4t=s(xue);GHo=r(H4t,"xlm-roberta-xl"),H4t.forEach(t),OHo=r(rBe," \u2014 "),Tz=n(rBe,"A",{href:!0});var U4t=s(Tz);VHo=r(U4t,"XLMRobertaXLForMultipleChoice"),U4t.forEach(t),XHo=r(rBe," (XLM-RoBERTa-XL model)"),rBe.forEach(t),zHo=i(ee),TF=n(ee,"LI",{});var tBe=s(TF);$ue=n(tBe,"STRONG",{});var J4t=s($ue);QHo=r(J4t,"xlnet"),J4t.forEach(t),WHo=r(tBe," \u2014 "),Mz=n(tBe,"A",{href:!0});var Y4t=s(Mz);HHo=r(Y4t,"XLNetForMultipleChoice"),Y4t.forEach(t),UHo=r(tBe," (XLNet model)"),tBe.forEach(t),JHo=i(ee),MF=n(ee,"LI",{});var aBe=s(MF);kue=n(aBe,"STRONG",{});var K4t=s(kue);YHo=r(K4t,"yoso"),K4t.forEach(t),KHo=r(aBe," \u2014 "),Ez=n(aBe,"A",{href:!0});var Z4t=s(Ez);ZHo=r(Z4t,"YosoForMultipleChoice"),Z4t.forEach(t),eUo=r(aBe," (YOSO model)"),aBe.forEach(t),ee.forEach(t),oUo=i(ma),EF=n(ma,"P",{});var nBe=s(EF);rUo=r(nBe,"The model is set in evaluation mode by default using "),Sue=n(nBe,"CODE",{});var eEt=s(Sue);tUo=r(eEt,"model.eval()"),eEt.forEach(t),aUo=r(nBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(nBe,"CODE",{});var oEt=s(Rue);nUo=r(oEt,"model.train()"),oEt.forEach(t),nBe.forEach(t),sUo=i(ma),T(CF.$$.fragment,ma),ma.forEach(t),sl.forEach(t),CXe=i(f),ld=n(f,"H2",{class:!0});var $Qe=s(ld);wF=n($Qe,"A",{id:!0,class:!0,href:!0});var rEt=s(wF);Pue=n(rEt,"SPAN",{});var tEt=s(Pue);T(my.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),lUo=i($Qe),Bue=n($Qe,"SPAN",{});var aEt=s(Bue);iUo=r(aEt,"AutoModelForNextSentencePrediction"),aEt.forEach(t),$Qe.forEach(t),wXe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(gy.$$.fragment,ll),dUo=i(ll),id=n(ll,"P",{});var Vre=s(id);cUo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=n(Vre,"A",{href:!0});var nEt=s(Cz);fUo=r(nEt,"from_pretrained()"),nEt.forEach(t),mUo=r(Vre," class method or the "),wz=n(Vre,"A",{href:!0});var sEt=s(wz);gUo=r(sEt,"from_config()"),sEt.forEach(t),hUo=r(Vre,` class
method.`),Vre.forEach(t),pUo=i(ll),hy=n(ll,"P",{});var kQe=s(hy);_Uo=r(kQe,"This class cannot be instantiated directly using "),Iue=n(kQe,"CODE",{});var lEt=s(Iue);uUo=r(lEt,"__init__()"),lEt.forEach(t),bUo=r(kQe," (throws an error)."),kQe.forEach(t),vUo=i(ll),ht=n(ll,"DIV",{class:!0});var EA=s(ht);T(py.$$.fragment,EA),FUo=i(EA),Nue=n(EA,"P",{});var iEt=s(Nue);TUo=r(iEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iEt.forEach(t),MUo=i(EA),dd=n(EA,"P",{});var Xre=s(dd);EUo=r(Xre,`Note:
Loading a model from its configuration file does `),que=n(Xre,"STRONG",{});var dEt=s(que);CUo=r(dEt,"not"),dEt.forEach(t),wUo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(Xre,"A",{href:!0});var cEt=s(Az);AUo=r(cEt,"from_pretrained()"),cEt.forEach(t),LUo=r(Xre," to load the model weights."),Xre.forEach(t),yUo=i(EA),T(AF.$$.fragment,EA),EA.forEach(t),xUo=i(ll),to=n(ll,"DIV",{class:!0});var ga=s(to);T(_y.$$.fragment,ga),$Uo=i(ga),jue=n(ga,"P",{});var fEt=s(jue);kUo=r(fEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fEt.forEach(t),SUo=i(ga),Oa=n(ga,"P",{});var CA=s(Oa);RUo=r(CA,"The model class to instantiate is selected based on the "),Due=n(CA,"CODE",{});var mEt=s(Due);PUo=r(mEt,"model_type"),mEt.forEach(t),BUo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Gue=n(CA,"CODE",{});var gEt=s(Gue);IUo=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),NUo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(CA,"CODE",{});var hEt=s(Oue);qUo=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),jUo=r(CA,":"),CA.forEach(t),DUo=i(ga),No=n(ga,"UL",{});var ha=s(No);LF=n(ha,"LI",{});var sBe=s(LF);Vue=n(sBe,"STRONG",{});var pEt=s(Vue);GUo=r(pEt,"bert"),pEt.forEach(t),OUo=r(sBe," \u2014 "),Lz=n(sBe,"A",{href:!0});var _Et=s(Lz);VUo=r(_Et,"BertForNextSentencePrediction"),_Et.forEach(t),XUo=r(sBe," (BERT model)"),sBe.forEach(t),zUo=i(ha),yF=n(ha,"LI",{});var lBe=s(yF);Xue=n(lBe,"STRONG",{});var uEt=s(Xue);QUo=r(uEt,"fnet"),uEt.forEach(t),WUo=r(lBe," \u2014 "),yz=n(lBe,"A",{href:!0});var bEt=s(yz);HUo=r(bEt,"FNetForNextSentencePrediction"),bEt.forEach(t),UUo=r(lBe," (FNet model)"),lBe.forEach(t),JUo=i(ha),xF=n(ha,"LI",{});var iBe=s(xF);zue=n(iBe,"STRONG",{});var vEt=s(zue);YUo=r(vEt,"megatron-bert"),vEt.forEach(t),KUo=r(iBe," \u2014 "),xz=n(iBe,"A",{href:!0});var FEt=s(xz);ZUo=r(FEt,"MegatronBertForNextSentencePrediction"),FEt.forEach(t),eJo=r(iBe," (Megatron-BERT model)"),iBe.forEach(t),oJo=i(ha),$F=n(ha,"LI",{});var dBe=s($F);Que=n(dBe,"STRONG",{});var TEt=s(Que);rJo=r(TEt,"mobilebert"),TEt.forEach(t),tJo=r(dBe," \u2014 "),$z=n(dBe,"A",{href:!0});var MEt=s($z);aJo=r(MEt,"MobileBertForNextSentencePrediction"),MEt.forEach(t),nJo=r(dBe," (MobileBERT model)"),dBe.forEach(t),sJo=i(ha),kF=n(ha,"LI",{});var cBe=s(kF);Wue=n(cBe,"STRONG",{});var EEt=s(Wue);lJo=r(EEt,"nezha"),EEt.forEach(t),iJo=r(cBe," \u2014 "),kz=n(cBe,"A",{href:!0});var CEt=s(kz);dJo=r(CEt,"NezhaForNextSentencePrediction"),CEt.forEach(t),cJo=r(cBe," (Nezha model)"),cBe.forEach(t),fJo=i(ha),SF=n(ha,"LI",{});var fBe=s(SF);Hue=n(fBe,"STRONG",{});var wEt=s(Hue);mJo=r(wEt,"qdqbert"),wEt.forEach(t),gJo=r(fBe," \u2014 "),Sz=n(fBe,"A",{href:!0});var AEt=s(Sz);hJo=r(AEt,"QDQBertForNextSentencePrediction"),AEt.forEach(t),pJo=r(fBe," (QDQBert model)"),fBe.forEach(t),ha.forEach(t),_Jo=i(ga),RF=n(ga,"P",{});var mBe=s(RF);uJo=r(mBe,"The model is set in evaluation mode by default using "),Uue=n(mBe,"CODE",{});var LEt=s(Uue);bJo=r(LEt,"model.eval()"),LEt.forEach(t),vJo=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(mBe,"CODE",{});var yEt=s(Jue);FJo=r(yEt,"model.train()"),yEt.forEach(t),mBe.forEach(t),TJo=i(ga),T(PF.$$.fragment,ga),ga.forEach(t),ll.forEach(t),AXe=i(f),cd=n(f,"H2",{class:!0});var SQe=s(cd);BF=n(SQe,"A",{id:!0,class:!0,href:!0});var xEt=s(BF);Yue=n(xEt,"SPAN",{});var $Et=s(Yue);T(uy.$$.fragment,$Et),$Et.forEach(t),xEt.forEach(t),MJo=i(SQe),Kue=n(SQe,"SPAN",{});var kEt=s(Kue);EJo=r(kEt,"AutoModelForTokenClassification"),kEt.forEach(t),SQe.forEach(t),LXe=i(f),qo=n(f,"DIV",{class:!0});var il=s(qo);T(by.$$.fragment,il),CJo=i(il),fd=n(il,"P",{});var zre=s(fd);wJo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=n(zre,"A",{href:!0});var SEt=s(Rz);AJo=r(SEt,"from_pretrained()"),SEt.forEach(t),LJo=r(zre," class method or the "),Pz=n(zre,"A",{href:!0});var REt=s(Pz);yJo=r(REt,"from_config()"),REt.forEach(t),xJo=r(zre,` class
method.`),zre.forEach(t),$Jo=i(il),vy=n(il,"P",{});var RQe=s(vy);kJo=r(RQe,"This class cannot be instantiated directly using "),Zue=n(RQe,"CODE",{});var PEt=s(Zue);SJo=r(PEt,"__init__()"),PEt.forEach(t),RJo=r(RQe," (throws an error)."),RQe.forEach(t),PJo=i(il),pt=n(il,"DIV",{class:!0});var wA=s(pt);T(Fy.$$.fragment,wA),BJo=i(wA),e1e=n(wA,"P",{});var BEt=s(e1e);IJo=r(BEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BEt.forEach(t),NJo=i(wA),md=n(wA,"P",{});var Qre=s(md);qJo=r(Qre,`Note:
Loading a model from its configuration file does `),o1e=n(Qre,"STRONG",{});var IEt=s(o1e);jJo=r(IEt,"not"),IEt.forEach(t),DJo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(Qre,"A",{href:!0});var NEt=s(Bz);GJo=r(NEt,"from_pretrained()"),NEt.forEach(t),OJo=r(Qre," to load the model weights."),Qre.forEach(t),VJo=i(wA),T(IF.$$.fragment,wA),wA.forEach(t),XJo=i(il),ao=n(il,"DIV",{class:!0});var pa=s(ao);T(Ty.$$.fragment,pa),zJo=i(pa),r1e=n(pa,"P",{});var qEt=s(r1e);QJo=r(qEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qEt.forEach(t),WJo=i(pa),Va=n(pa,"P",{});var AA=s(Va);HJo=r(AA,"The model class to instantiate is selected based on the "),t1e=n(AA,"CODE",{});var jEt=s(t1e);UJo=r(jEt,"model_type"),jEt.forEach(t),JJo=r(AA,` property of the config object (either
passed as an argument or loaded from `),a1e=n(AA,"CODE",{});var DEt=s(a1e);YJo=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),KJo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(AA,"CODE",{});var GEt=s(n1e);ZJo=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),eYo=r(AA,":"),AA.forEach(t),oYo=i(pa),U=n(pa,"UL",{});var Y=s(U);NF=n(Y,"LI",{});var gBe=s(NF);s1e=n(gBe,"STRONG",{});var OEt=s(s1e);rYo=r(OEt,"albert"),OEt.forEach(t),tYo=r(gBe," \u2014 "),Iz=n(gBe,"A",{href:!0});var VEt=s(Iz);aYo=r(VEt,"AlbertForTokenClassification"),VEt.forEach(t),nYo=r(gBe," (ALBERT model)"),gBe.forEach(t),sYo=i(Y),qF=n(Y,"LI",{});var hBe=s(qF);l1e=n(hBe,"STRONG",{});var XEt=s(l1e);lYo=r(XEt,"bert"),XEt.forEach(t),iYo=r(hBe," \u2014 "),Nz=n(hBe,"A",{href:!0});var zEt=s(Nz);dYo=r(zEt,"BertForTokenClassification"),zEt.forEach(t),cYo=r(hBe," (BERT model)"),hBe.forEach(t),fYo=i(Y),jF=n(Y,"LI",{});var pBe=s(jF);i1e=n(pBe,"STRONG",{});var QEt=s(i1e);mYo=r(QEt,"big_bird"),QEt.forEach(t),gYo=r(pBe," \u2014 "),qz=n(pBe,"A",{href:!0});var WEt=s(qz);hYo=r(WEt,"BigBirdForTokenClassification"),WEt.forEach(t),pYo=r(pBe," (BigBird model)"),pBe.forEach(t),_Yo=i(Y),DF=n(Y,"LI",{});var _Be=s(DF);d1e=n(_Be,"STRONG",{});var HEt=s(d1e);uYo=r(HEt,"bloom"),HEt.forEach(t),bYo=r(_Be," \u2014 "),jz=n(_Be,"A",{href:!0});var UEt=s(jz);vYo=r(UEt,"BloomForTokenClassification"),UEt.forEach(t),FYo=r(_Be," (BLOOM model)"),_Be.forEach(t),TYo=i(Y),GF=n(Y,"LI",{});var uBe=s(GF);c1e=n(uBe,"STRONG",{});var JEt=s(c1e);MYo=r(JEt,"camembert"),JEt.forEach(t),EYo=r(uBe," \u2014 "),Dz=n(uBe,"A",{href:!0});var YEt=s(Dz);CYo=r(YEt,"CamembertForTokenClassification"),YEt.forEach(t),wYo=r(uBe," (CamemBERT model)"),uBe.forEach(t),AYo=i(Y),OF=n(Y,"LI",{});var bBe=s(OF);f1e=n(bBe,"STRONG",{});var KEt=s(f1e);LYo=r(KEt,"canine"),KEt.forEach(t),yYo=r(bBe," \u2014 "),Gz=n(bBe,"A",{href:!0});var ZEt=s(Gz);xYo=r(ZEt,"CanineForTokenClassification"),ZEt.forEach(t),$Yo=r(bBe," (CANINE model)"),bBe.forEach(t),kYo=i(Y),VF=n(Y,"LI",{});var vBe=s(VF);m1e=n(vBe,"STRONG",{});var eCt=s(m1e);SYo=r(eCt,"convbert"),eCt.forEach(t),RYo=r(vBe," \u2014 "),Oz=n(vBe,"A",{href:!0});var oCt=s(Oz);PYo=r(oCt,"ConvBertForTokenClassification"),oCt.forEach(t),BYo=r(vBe," (ConvBERT model)"),vBe.forEach(t),IYo=i(Y),XF=n(Y,"LI",{});var FBe=s(XF);g1e=n(FBe,"STRONG",{});var rCt=s(g1e);NYo=r(rCt,"data2vec-text"),rCt.forEach(t),qYo=r(FBe," \u2014 "),Vz=n(FBe,"A",{href:!0});var tCt=s(Vz);jYo=r(tCt,"Data2VecTextForTokenClassification"),tCt.forEach(t),DYo=r(FBe," (Data2VecText model)"),FBe.forEach(t),GYo=i(Y),zF=n(Y,"LI",{});var TBe=s(zF);h1e=n(TBe,"STRONG",{});var aCt=s(h1e);OYo=r(aCt,"deberta"),aCt.forEach(t),VYo=r(TBe," \u2014 "),Xz=n(TBe,"A",{href:!0});var nCt=s(Xz);XYo=r(nCt,"DebertaForTokenClassification"),nCt.forEach(t),zYo=r(TBe," (DeBERTa model)"),TBe.forEach(t),QYo=i(Y),QF=n(Y,"LI",{});var MBe=s(QF);p1e=n(MBe,"STRONG",{});var sCt=s(p1e);WYo=r(sCt,"deberta-v2"),sCt.forEach(t),HYo=r(MBe," \u2014 "),zz=n(MBe,"A",{href:!0});var lCt=s(zz);UYo=r(lCt,"DebertaV2ForTokenClassification"),lCt.forEach(t),JYo=r(MBe," (DeBERTa-v2 model)"),MBe.forEach(t),YYo=i(Y),WF=n(Y,"LI",{});var EBe=s(WF);_1e=n(EBe,"STRONG",{});var iCt=s(_1e);KYo=r(iCt,"distilbert"),iCt.forEach(t),ZYo=r(EBe," \u2014 "),Qz=n(EBe,"A",{href:!0});var dCt=s(Qz);eKo=r(dCt,"DistilBertForTokenClassification"),dCt.forEach(t),oKo=r(EBe," (DistilBERT model)"),EBe.forEach(t),rKo=i(Y),HF=n(Y,"LI",{});var CBe=s(HF);u1e=n(CBe,"STRONG",{});var cCt=s(u1e);tKo=r(cCt,"electra"),cCt.forEach(t),aKo=r(CBe," \u2014 "),Wz=n(CBe,"A",{href:!0});var fCt=s(Wz);nKo=r(fCt,"ElectraForTokenClassification"),fCt.forEach(t),sKo=r(CBe," (ELECTRA model)"),CBe.forEach(t),lKo=i(Y),UF=n(Y,"LI",{});var wBe=s(UF);b1e=n(wBe,"STRONG",{});var mCt=s(b1e);iKo=r(mCt,"flaubert"),mCt.forEach(t),dKo=r(wBe," \u2014 "),Hz=n(wBe,"A",{href:!0});var gCt=s(Hz);cKo=r(gCt,"FlaubertForTokenClassification"),gCt.forEach(t),fKo=r(wBe," (FlauBERT model)"),wBe.forEach(t),mKo=i(Y),JF=n(Y,"LI",{});var ABe=s(JF);v1e=n(ABe,"STRONG",{});var hCt=s(v1e);gKo=r(hCt,"fnet"),hCt.forEach(t),hKo=r(ABe," \u2014 "),Uz=n(ABe,"A",{href:!0});var pCt=s(Uz);pKo=r(pCt,"FNetForTokenClassification"),pCt.forEach(t),_Ko=r(ABe," (FNet model)"),ABe.forEach(t),uKo=i(Y),YF=n(Y,"LI",{});var LBe=s(YF);F1e=n(LBe,"STRONG",{});var _Ct=s(F1e);bKo=r(_Ct,"funnel"),_Ct.forEach(t),vKo=r(LBe," \u2014 "),Jz=n(LBe,"A",{href:!0});var uCt=s(Jz);FKo=r(uCt,"FunnelForTokenClassification"),uCt.forEach(t),TKo=r(LBe," (Funnel Transformer model)"),LBe.forEach(t),MKo=i(Y),KF=n(Y,"LI",{});var yBe=s(KF);T1e=n(yBe,"STRONG",{});var bCt=s(T1e);EKo=r(bCt,"gpt2"),bCt.forEach(t),CKo=r(yBe," \u2014 "),Yz=n(yBe,"A",{href:!0});var vCt=s(Yz);wKo=r(vCt,"GPT2ForTokenClassification"),vCt.forEach(t),AKo=r(yBe," (OpenAI GPT-2 model)"),yBe.forEach(t),LKo=i(Y),ZF=n(Y,"LI",{});var xBe=s(ZF);M1e=n(xBe,"STRONG",{});var FCt=s(M1e);yKo=r(FCt,"ibert"),FCt.forEach(t),xKo=r(xBe," \u2014 "),Kz=n(xBe,"A",{href:!0});var TCt=s(Kz);$Ko=r(TCt,"IBertForTokenClassification"),TCt.forEach(t),kKo=r(xBe," (I-BERT model)"),xBe.forEach(t),SKo=i(Y),eT=n(Y,"LI",{});var $Be=s(eT);E1e=n($Be,"STRONG",{});var MCt=s(E1e);RKo=r(MCt,"layoutlm"),MCt.forEach(t),PKo=r($Be," \u2014 "),Zz=n($Be,"A",{href:!0});var ECt=s(Zz);BKo=r(ECt,"LayoutLMForTokenClassification"),ECt.forEach(t),IKo=r($Be," (LayoutLM model)"),$Be.forEach(t),NKo=i(Y),oT=n(Y,"LI",{});var kBe=s(oT);C1e=n(kBe,"STRONG",{});var CCt=s(C1e);qKo=r(CCt,"layoutlmv2"),CCt.forEach(t),jKo=r(kBe," \u2014 "),eQ=n(kBe,"A",{href:!0});var wCt=s(eQ);DKo=r(wCt,"LayoutLMv2ForTokenClassification"),wCt.forEach(t),GKo=r(kBe," (LayoutLMv2 model)"),kBe.forEach(t),OKo=i(Y),rT=n(Y,"LI",{});var SBe=s(rT);w1e=n(SBe,"STRONG",{});var ACt=s(w1e);VKo=r(ACt,"layoutlmv3"),ACt.forEach(t),XKo=r(SBe," \u2014 "),oQ=n(SBe,"A",{href:!0});var LCt=s(oQ);zKo=r(LCt,"LayoutLMv3ForTokenClassification"),LCt.forEach(t),QKo=r(SBe," (LayoutLMv3 model)"),SBe.forEach(t),WKo=i(Y),tT=n(Y,"LI",{});var RBe=s(tT);A1e=n(RBe,"STRONG",{});var yCt=s(A1e);HKo=r(yCt,"longformer"),yCt.forEach(t),UKo=r(RBe," \u2014 "),rQ=n(RBe,"A",{href:!0});var xCt=s(rQ);JKo=r(xCt,"LongformerForTokenClassification"),xCt.forEach(t),YKo=r(RBe," (Longformer model)"),RBe.forEach(t),KKo=i(Y),aT=n(Y,"LI",{});var PBe=s(aT);L1e=n(PBe,"STRONG",{});var $Ct=s(L1e);ZKo=r($Ct,"megatron-bert"),$Ct.forEach(t),eZo=r(PBe," \u2014 "),tQ=n(PBe,"A",{href:!0});var kCt=s(tQ);oZo=r(kCt,"MegatronBertForTokenClassification"),kCt.forEach(t),rZo=r(PBe," (Megatron-BERT model)"),PBe.forEach(t),tZo=i(Y),nT=n(Y,"LI",{});var BBe=s(nT);y1e=n(BBe,"STRONG",{});var SCt=s(y1e);aZo=r(SCt,"mobilebert"),SCt.forEach(t),nZo=r(BBe," \u2014 "),aQ=n(BBe,"A",{href:!0});var RCt=s(aQ);sZo=r(RCt,"MobileBertForTokenClassification"),RCt.forEach(t),lZo=r(BBe," (MobileBERT model)"),BBe.forEach(t),iZo=i(Y),sT=n(Y,"LI",{});var IBe=s(sT);x1e=n(IBe,"STRONG",{});var PCt=s(x1e);dZo=r(PCt,"mpnet"),PCt.forEach(t),cZo=r(IBe," \u2014 "),nQ=n(IBe,"A",{href:!0});var BCt=s(nQ);fZo=r(BCt,"MPNetForTokenClassification"),BCt.forEach(t),mZo=r(IBe," (MPNet model)"),IBe.forEach(t),gZo=i(Y),lT=n(Y,"LI",{});var NBe=s(lT);$1e=n(NBe,"STRONG",{});var ICt=s($1e);hZo=r(ICt,"nezha"),ICt.forEach(t),pZo=r(NBe," \u2014 "),sQ=n(NBe,"A",{href:!0});var NCt=s(sQ);_Zo=r(NCt,"NezhaForTokenClassification"),NCt.forEach(t),uZo=r(NBe," (Nezha model)"),NBe.forEach(t),bZo=i(Y),iT=n(Y,"LI",{});var qBe=s(iT);k1e=n(qBe,"STRONG",{});var qCt=s(k1e);vZo=r(qCt,"nystromformer"),qCt.forEach(t),FZo=r(qBe," \u2014 "),lQ=n(qBe,"A",{href:!0});var jCt=s(lQ);TZo=r(jCt,"NystromformerForTokenClassification"),jCt.forEach(t),MZo=r(qBe," (Nystr\xF6mformer model)"),qBe.forEach(t),EZo=i(Y),dT=n(Y,"LI",{});var jBe=s(dT);S1e=n(jBe,"STRONG",{});var DCt=s(S1e);CZo=r(DCt,"qdqbert"),DCt.forEach(t),wZo=r(jBe," \u2014 "),iQ=n(jBe,"A",{href:!0});var GCt=s(iQ);AZo=r(GCt,"QDQBertForTokenClassification"),GCt.forEach(t),LZo=r(jBe," (QDQBert model)"),jBe.forEach(t),yZo=i(Y),cT=n(Y,"LI",{});var DBe=s(cT);R1e=n(DBe,"STRONG",{});var OCt=s(R1e);xZo=r(OCt,"rembert"),OCt.forEach(t),$Zo=r(DBe," \u2014 "),dQ=n(DBe,"A",{href:!0});var VCt=s(dQ);kZo=r(VCt,"RemBertForTokenClassification"),VCt.forEach(t),SZo=r(DBe," (RemBERT model)"),DBe.forEach(t),RZo=i(Y),fT=n(Y,"LI",{});var GBe=s(fT);P1e=n(GBe,"STRONG",{});var XCt=s(P1e);PZo=r(XCt,"roberta"),XCt.forEach(t),BZo=r(GBe," \u2014 "),cQ=n(GBe,"A",{href:!0});var zCt=s(cQ);IZo=r(zCt,"RobertaForTokenClassification"),zCt.forEach(t),NZo=r(GBe," (RoBERTa model)"),GBe.forEach(t),qZo=i(Y),mT=n(Y,"LI",{});var OBe=s(mT);B1e=n(OBe,"STRONG",{});var QCt=s(B1e);jZo=r(QCt,"roformer"),QCt.forEach(t),DZo=r(OBe," \u2014 "),fQ=n(OBe,"A",{href:!0});var WCt=s(fQ);GZo=r(WCt,"RoFormerForTokenClassification"),WCt.forEach(t),OZo=r(OBe," (RoFormer model)"),OBe.forEach(t),VZo=i(Y),gT=n(Y,"LI",{});var VBe=s(gT);I1e=n(VBe,"STRONG",{});var HCt=s(I1e);XZo=r(HCt,"squeezebert"),HCt.forEach(t),zZo=r(VBe," \u2014 "),mQ=n(VBe,"A",{href:!0});var UCt=s(mQ);QZo=r(UCt,"SqueezeBertForTokenClassification"),UCt.forEach(t),WZo=r(VBe," (SqueezeBERT model)"),VBe.forEach(t),HZo=i(Y),hT=n(Y,"LI",{});var XBe=s(hT);N1e=n(XBe,"STRONG",{});var JCt=s(N1e);UZo=r(JCt,"xlm"),JCt.forEach(t),JZo=r(XBe," \u2014 "),gQ=n(XBe,"A",{href:!0});var YCt=s(gQ);YZo=r(YCt,"XLMForTokenClassification"),YCt.forEach(t),KZo=r(XBe," (XLM model)"),XBe.forEach(t),ZZo=i(Y),pT=n(Y,"LI",{});var zBe=s(pT);q1e=n(zBe,"STRONG",{});var KCt=s(q1e);eer=r(KCt,"xlm-roberta"),KCt.forEach(t),oer=r(zBe," \u2014 "),hQ=n(zBe,"A",{href:!0});var ZCt=s(hQ);rer=r(ZCt,"XLMRobertaForTokenClassification"),ZCt.forEach(t),ter=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),aer=i(Y),_T=n(Y,"LI",{});var QBe=s(_T);j1e=n(QBe,"STRONG",{});var e3t=s(j1e);ner=r(e3t,"xlm-roberta-xl"),e3t.forEach(t),ser=r(QBe," \u2014 "),pQ=n(QBe,"A",{href:!0});var o3t=s(pQ);ler=r(o3t,"XLMRobertaXLForTokenClassification"),o3t.forEach(t),ier=r(QBe," (XLM-RoBERTa-XL model)"),QBe.forEach(t),der=i(Y),uT=n(Y,"LI",{});var WBe=s(uT);D1e=n(WBe,"STRONG",{});var r3t=s(D1e);cer=r(r3t,"xlnet"),r3t.forEach(t),fer=r(WBe," \u2014 "),_Q=n(WBe,"A",{href:!0});var t3t=s(_Q);mer=r(t3t,"XLNetForTokenClassification"),t3t.forEach(t),ger=r(WBe," (XLNet model)"),WBe.forEach(t),her=i(Y),bT=n(Y,"LI",{});var HBe=s(bT);G1e=n(HBe,"STRONG",{});var a3t=s(G1e);per=r(a3t,"yoso"),a3t.forEach(t),_er=r(HBe," \u2014 "),uQ=n(HBe,"A",{href:!0});var n3t=s(uQ);uer=r(n3t,"YosoForTokenClassification"),n3t.forEach(t),ber=r(HBe," (YOSO model)"),HBe.forEach(t),Y.forEach(t),ver=i(pa),vT=n(pa,"P",{});var UBe=s(vT);Fer=r(UBe,"The model is set in evaluation mode by default using "),O1e=n(UBe,"CODE",{});var s3t=s(O1e);Ter=r(s3t,"model.eval()"),s3t.forEach(t),Mer=r(UBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=n(UBe,"CODE",{});var l3t=s(V1e);Eer=r(l3t,"model.train()"),l3t.forEach(t),UBe.forEach(t),Cer=i(pa),T(FT.$$.fragment,pa),pa.forEach(t),il.forEach(t),yXe=i(f),gd=n(f,"H2",{class:!0});var PQe=s(gd);TT=n(PQe,"A",{id:!0,class:!0,href:!0});var i3t=s(TT);X1e=n(i3t,"SPAN",{});var d3t=s(X1e);T(My.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),wer=i(PQe),z1e=n(PQe,"SPAN",{});var c3t=s(z1e);Aer=r(c3t,"AutoModelForQuestionAnswering"),c3t.forEach(t),PQe.forEach(t),xXe=i(f),jo=n(f,"DIV",{class:!0});var dl=s(jo);T(Ey.$$.fragment,dl),Ler=i(dl),hd=n(dl,"P",{});var Wre=s(hd);yer=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=n(Wre,"A",{href:!0});var f3t=s(bQ);xer=r(f3t,"from_pretrained()"),f3t.forEach(t),$er=r(Wre," class method or the "),vQ=n(Wre,"A",{href:!0});var m3t=s(vQ);ker=r(m3t,"from_config()"),m3t.forEach(t),Ser=r(Wre,` class
method.`),Wre.forEach(t),Rer=i(dl),Cy=n(dl,"P",{});var BQe=s(Cy);Per=r(BQe,"This class cannot be instantiated directly using "),Q1e=n(BQe,"CODE",{});var g3t=s(Q1e);Ber=r(g3t,"__init__()"),g3t.forEach(t),Ier=r(BQe," (throws an error)."),BQe.forEach(t),Ner=i(dl),_t=n(dl,"DIV",{class:!0});var LA=s(_t);T(wy.$$.fragment,LA),qer=i(LA),W1e=n(LA,"P",{});var h3t=s(W1e);jer=r(h3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h3t.forEach(t),Der=i(LA),pd=n(LA,"P",{});var Hre=s(pd);Ger=r(Hre,`Note:
Loading a model from its configuration file does `),H1e=n(Hre,"STRONG",{});var p3t=s(H1e);Oer=r(p3t,"not"),p3t.forEach(t),Ver=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Hre,"A",{href:!0});var _3t=s(FQ);Xer=r(_3t,"from_pretrained()"),_3t.forEach(t),zer=r(Hre," to load the model weights."),Hre.forEach(t),Qer=i(LA),T(MT.$$.fragment,LA),LA.forEach(t),Wer=i(dl),no=n(dl,"DIV",{class:!0});var _a=s(no);T(Ay.$$.fragment,_a),Her=i(_a),U1e=n(_a,"P",{});var u3t=s(U1e);Uer=r(u3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),u3t.forEach(t),Jer=i(_a),Xa=n(_a,"P",{});var yA=s(Xa);Yer=r(yA,"The model class to instantiate is selected based on the "),J1e=n(yA,"CODE",{});var b3t=s(J1e);Ker=r(b3t,"model_type"),b3t.forEach(t),Zer=r(yA,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(yA,"CODE",{});var v3t=s(Y1e);eor=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),oor=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(yA,"CODE",{});var F3t=s(K1e);ror=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),tor=r(yA,":"),yA.forEach(t),aor=i(_a),V=n(_a,"UL",{});var X=s(V);ET=n(X,"LI",{});var JBe=s(ET);Z1e=n(JBe,"STRONG",{});var T3t=s(Z1e);nor=r(T3t,"albert"),T3t.forEach(t),sor=r(JBe," \u2014 "),TQ=n(JBe,"A",{href:!0});var M3t=s(TQ);lor=r(M3t,"AlbertForQuestionAnswering"),M3t.forEach(t),ior=r(JBe," (ALBERT model)"),JBe.forEach(t),dor=i(X),CT=n(X,"LI",{});var YBe=s(CT);e2e=n(YBe,"STRONG",{});var E3t=s(e2e);cor=r(E3t,"bart"),E3t.forEach(t),mor=r(YBe," \u2014 "),MQ=n(YBe,"A",{href:!0});var C3t=s(MQ);gor=r(C3t,"BartForQuestionAnswering"),C3t.forEach(t),hor=r(YBe," (BART model)"),YBe.forEach(t),por=i(X),wT=n(X,"LI",{});var KBe=s(wT);o2e=n(KBe,"STRONG",{});var w3t=s(o2e);_or=r(w3t,"bert"),w3t.forEach(t),uor=r(KBe," \u2014 "),EQ=n(KBe,"A",{href:!0});var A3t=s(EQ);bor=r(A3t,"BertForQuestionAnswering"),A3t.forEach(t),vor=r(KBe," (BERT model)"),KBe.forEach(t),For=i(X),AT=n(X,"LI",{});var ZBe=s(AT);r2e=n(ZBe,"STRONG",{});var L3t=s(r2e);Tor=r(L3t,"big_bird"),L3t.forEach(t),Mor=r(ZBe," \u2014 "),CQ=n(ZBe,"A",{href:!0});var y3t=s(CQ);Eor=r(y3t,"BigBirdForQuestionAnswering"),y3t.forEach(t),Cor=r(ZBe," (BigBird model)"),ZBe.forEach(t),wor=i(X),LT=n(X,"LI",{});var eIe=s(LT);t2e=n(eIe,"STRONG",{});var x3t=s(t2e);Aor=r(x3t,"bigbird_pegasus"),x3t.forEach(t),Lor=r(eIe," \u2014 "),wQ=n(eIe,"A",{href:!0});var $3t=s(wQ);yor=r($3t,"BigBirdPegasusForQuestionAnswering"),$3t.forEach(t),xor=r(eIe," (BigBird-Pegasus model)"),eIe.forEach(t),$or=i(X),yT=n(X,"LI",{});var oIe=s(yT);a2e=n(oIe,"STRONG",{});var k3t=s(a2e);kor=r(k3t,"camembert"),k3t.forEach(t),Sor=r(oIe," \u2014 "),AQ=n(oIe,"A",{href:!0});var S3t=s(AQ);Ror=r(S3t,"CamembertForQuestionAnswering"),S3t.forEach(t),Por=r(oIe," (CamemBERT model)"),oIe.forEach(t),Bor=i(X),xT=n(X,"LI",{});var rIe=s(xT);n2e=n(rIe,"STRONG",{});var R3t=s(n2e);Ior=r(R3t,"canine"),R3t.forEach(t),Nor=r(rIe," \u2014 "),LQ=n(rIe,"A",{href:!0});var P3t=s(LQ);qor=r(P3t,"CanineForQuestionAnswering"),P3t.forEach(t),jor=r(rIe," (CANINE model)"),rIe.forEach(t),Dor=i(X),$T=n(X,"LI",{});var tIe=s($T);s2e=n(tIe,"STRONG",{});var B3t=s(s2e);Gor=r(B3t,"convbert"),B3t.forEach(t),Oor=r(tIe," \u2014 "),yQ=n(tIe,"A",{href:!0});var I3t=s(yQ);Vor=r(I3t,"ConvBertForQuestionAnswering"),I3t.forEach(t),Xor=r(tIe," (ConvBERT model)"),tIe.forEach(t),zor=i(X),kT=n(X,"LI",{});var aIe=s(kT);l2e=n(aIe,"STRONG",{});var N3t=s(l2e);Qor=r(N3t,"data2vec-text"),N3t.forEach(t),Wor=r(aIe," \u2014 "),xQ=n(aIe,"A",{href:!0});var q3t=s(xQ);Hor=r(q3t,"Data2VecTextForQuestionAnswering"),q3t.forEach(t),Uor=r(aIe," (Data2VecText model)"),aIe.forEach(t),Jor=i(X),ST=n(X,"LI",{});var nIe=s(ST);i2e=n(nIe,"STRONG",{});var j3t=s(i2e);Yor=r(j3t,"deberta"),j3t.forEach(t),Kor=r(nIe," \u2014 "),$Q=n(nIe,"A",{href:!0});var D3t=s($Q);Zor=r(D3t,"DebertaForQuestionAnswering"),D3t.forEach(t),err=r(nIe," (DeBERTa model)"),nIe.forEach(t),orr=i(X),RT=n(X,"LI",{});var sIe=s(RT);d2e=n(sIe,"STRONG",{});var G3t=s(d2e);rrr=r(G3t,"deberta-v2"),G3t.forEach(t),trr=r(sIe," \u2014 "),kQ=n(sIe,"A",{href:!0});var O3t=s(kQ);arr=r(O3t,"DebertaV2ForQuestionAnswering"),O3t.forEach(t),nrr=r(sIe," (DeBERTa-v2 model)"),sIe.forEach(t),srr=i(X),PT=n(X,"LI",{});var lIe=s(PT);c2e=n(lIe,"STRONG",{});var V3t=s(c2e);lrr=r(V3t,"distilbert"),V3t.forEach(t),irr=r(lIe," \u2014 "),SQ=n(lIe,"A",{href:!0});var X3t=s(SQ);drr=r(X3t,"DistilBertForQuestionAnswering"),X3t.forEach(t),crr=r(lIe," (DistilBERT model)"),lIe.forEach(t),frr=i(X),BT=n(X,"LI",{});var iIe=s(BT);f2e=n(iIe,"STRONG",{});var z3t=s(f2e);mrr=r(z3t,"electra"),z3t.forEach(t),grr=r(iIe," \u2014 "),RQ=n(iIe,"A",{href:!0});var Q3t=s(RQ);hrr=r(Q3t,"ElectraForQuestionAnswering"),Q3t.forEach(t),prr=r(iIe," (ELECTRA model)"),iIe.forEach(t),_rr=i(X),IT=n(X,"LI",{});var dIe=s(IT);m2e=n(dIe,"STRONG",{});var W3t=s(m2e);urr=r(W3t,"flaubert"),W3t.forEach(t),brr=r(dIe," \u2014 "),PQ=n(dIe,"A",{href:!0});var H3t=s(PQ);vrr=r(H3t,"FlaubertForQuestionAnsweringSimple"),H3t.forEach(t),Frr=r(dIe," (FlauBERT model)"),dIe.forEach(t),Trr=i(X),NT=n(X,"LI",{});var cIe=s(NT);g2e=n(cIe,"STRONG",{});var U3t=s(g2e);Mrr=r(U3t,"fnet"),U3t.forEach(t),Err=r(cIe," \u2014 "),BQ=n(cIe,"A",{href:!0});var J3t=s(BQ);Crr=r(J3t,"FNetForQuestionAnswering"),J3t.forEach(t),wrr=r(cIe," (FNet model)"),cIe.forEach(t),Arr=i(X),qT=n(X,"LI",{});var fIe=s(qT);h2e=n(fIe,"STRONG",{});var Y3t=s(h2e);Lrr=r(Y3t,"funnel"),Y3t.forEach(t),yrr=r(fIe," \u2014 "),IQ=n(fIe,"A",{href:!0});var K3t=s(IQ);xrr=r(K3t,"FunnelForQuestionAnswering"),K3t.forEach(t),$rr=r(fIe," (Funnel Transformer model)"),fIe.forEach(t),krr=i(X),jT=n(X,"LI",{});var mIe=s(jT);p2e=n(mIe,"STRONG",{});var Z3t=s(p2e);Srr=r(Z3t,"gptj"),Z3t.forEach(t),Rrr=r(mIe," \u2014 "),NQ=n(mIe,"A",{href:!0});var e5t=s(NQ);Prr=r(e5t,"GPTJForQuestionAnswering"),e5t.forEach(t),Brr=r(mIe," (GPT-J model)"),mIe.forEach(t),Irr=i(X),DT=n(X,"LI",{});var gIe=s(DT);_2e=n(gIe,"STRONG",{});var o5t=s(_2e);Nrr=r(o5t,"ibert"),o5t.forEach(t),qrr=r(gIe," \u2014 "),qQ=n(gIe,"A",{href:!0});var r5t=s(qQ);jrr=r(r5t,"IBertForQuestionAnswering"),r5t.forEach(t),Drr=r(gIe," (I-BERT model)"),gIe.forEach(t),Grr=i(X),GT=n(X,"LI",{});var hIe=s(GT);u2e=n(hIe,"STRONG",{});var t5t=s(u2e);Orr=r(t5t,"layoutlmv2"),t5t.forEach(t),Vrr=r(hIe," \u2014 "),jQ=n(hIe,"A",{href:!0});var a5t=s(jQ);Xrr=r(a5t,"LayoutLMv2ForQuestionAnswering"),a5t.forEach(t),zrr=r(hIe," (LayoutLMv2 model)"),hIe.forEach(t),Qrr=i(X),OT=n(X,"LI",{});var pIe=s(OT);b2e=n(pIe,"STRONG",{});var n5t=s(b2e);Wrr=r(n5t,"layoutlmv3"),n5t.forEach(t),Hrr=r(pIe," \u2014 "),DQ=n(pIe,"A",{href:!0});var s5t=s(DQ);Urr=r(s5t,"LayoutLMv3ForQuestionAnswering"),s5t.forEach(t),Jrr=r(pIe," (LayoutLMv3 model)"),pIe.forEach(t),Yrr=i(X),VT=n(X,"LI",{});var _Ie=s(VT);v2e=n(_Ie,"STRONG",{});var l5t=s(v2e);Krr=r(l5t,"led"),l5t.forEach(t),Zrr=r(_Ie," \u2014 "),GQ=n(_Ie,"A",{href:!0});var i5t=s(GQ);etr=r(i5t,"LEDForQuestionAnswering"),i5t.forEach(t),otr=r(_Ie," (LED model)"),_Ie.forEach(t),rtr=i(X),XT=n(X,"LI",{});var uIe=s(XT);F2e=n(uIe,"STRONG",{});var d5t=s(F2e);ttr=r(d5t,"longformer"),d5t.forEach(t),atr=r(uIe," \u2014 "),OQ=n(uIe,"A",{href:!0});var c5t=s(OQ);ntr=r(c5t,"LongformerForQuestionAnswering"),c5t.forEach(t),str=r(uIe," (Longformer model)"),uIe.forEach(t),ltr=i(X),zT=n(X,"LI",{});var bIe=s(zT);T2e=n(bIe,"STRONG",{});var f5t=s(T2e);itr=r(f5t,"lxmert"),f5t.forEach(t),dtr=r(bIe," \u2014 "),VQ=n(bIe,"A",{href:!0});var m5t=s(VQ);ctr=r(m5t,"LxmertForQuestionAnswering"),m5t.forEach(t),ftr=r(bIe," (LXMERT model)"),bIe.forEach(t),mtr=i(X),QT=n(X,"LI",{});var vIe=s(QT);M2e=n(vIe,"STRONG",{});var g5t=s(M2e);gtr=r(g5t,"mbart"),g5t.forEach(t),htr=r(vIe," \u2014 "),XQ=n(vIe,"A",{href:!0});var h5t=s(XQ);ptr=r(h5t,"MBartForQuestionAnswering"),h5t.forEach(t),_tr=r(vIe," (mBART model)"),vIe.forEach(t),utr=i(X),WT=n(X,"LI",{});var FIe=s(WT);E2e=n(FIe,"STRONG",{});var p5t=s(E2e);btr=r(p5t,"megatron-bert"),p5t.forEach(t),vtr=r(FIe," \u2014 "),zQ=n(FIe,"A",{href:!0});var _5t=s(zQ);Ftr=r(_5t,"MegatronBertForQuestionAnswering"),_5t.forEach(t),Ttr=r(FIe," (Megatron-BERT model)"),FIe.forEach(t),Mtr=i(X),HT=n(X,"LI",{});var TIe=s(HT);C2e=n(TIe,"STRONG",{});var u5t=s(C2e);Etr=r(u5t,"mobilebert"),u5t.forEach(t),Ctr=r(TIe," \u2014 "),QQ=n(TIe,"A",{href:!0});var b5t=s(QQ);wtr=r(b5t,"MobileBertForQuestionAnswering"),b5t.forEach(t),Atr=r(TIe," (MobileBERT model)"),TIe.forEach(t),Ltr=i(X),UT=n(X,"LI",{});var MIe=s(UT);w2e=n(MIe,"STRONG",{});var v5t=s(w2e);ytr=r(v5t,"mpnet"),v5t.forEach(t),xtr=r(MIe," \u2014 "),WQ=n(MIe,"A",{href:!0});var F5t=s(WQ);$tr=r(F5t,"MPNetForQuestionAnswering"),F5t.forEach(t),ktr=r(MIe," (MPNet model)"),MIe.forEach(t),Str=i(X),JT=n(X,"LI",{});var EIe=s(JT);A2e=n(EIe,"STRONG",{});var T5t=s(A2e);Rtr=r(T5t,"mvp"),T5t.forEach(t),Ptr=r(EIe," \u2014 "),HQ=n(EIe,"A",{href:!0});var M5t=s(HQ);Btr=r(M5t,"MvpForQuestionAnswering"),M5t.forEach(t),Itr=r(EIe," (MVP model)"),EIe.forEach(t),Ntr=i(X),YT=n(X,"LI",{});var CIe=s(YT);L2e=n(CIe,"STRONG",{});var E5t=s(L2e);qtr=r(E5t,"nezha"),E5t.forEach(t),jtr=r(CIe," \u2014 "),UQ=n(CIe,"A",{href:!0});var C5t=s(UQ);Dtr=r(C5t,"NezhaForQuestionAnswering"),C5t.forEach(t),Gtr=r(CIe," (Nezha model)"),CIe.forEach(t),Otr=i(X),KT=n(X,"LI",{});var wIe=s(KT);y2e=n(wIe,"STRONG",{});var w5t=s(y2e);Vtr=r(w5t,"nystromformer"),w5t.forEach(t),Xtr=r(wIe," \u2014 "),JQ=n(wIe,"A",{href:!0});var A5t=s(JQ);ztr=r(A5t,"NystromformerForQuestionAnswering"),A5t.forEach(t),Qtr=r(wIe," (Nystr\xF6mformer model)"),wIe.forEach(t),Wtr=i(X),ZT=n(X,"LI",{});var AIe=s(ZT);x2e=n(AIe,"STRONG",{});var L5t=s(x2e);Htr=r(L5t,"qdqbert"),L5t.forEach(t),Utr=r(AIe," \u2014 "),YQ=n(AIe,"A",{href:!0});var y5t=s(YQ);Jtr=r(y5t,"QDQBertForQuestionAnswering"),y5t.forEach(t),Ytr=r(AIe," (QDQBert model)"),AIe.forEach(t),Ktr=i(X),e7=n(X,"LI",{});var LIe=s(e7);$2e=n(LIe,"STRONG",{});var x5t=s($2e);Ztr=r(x5t,"reformer"),x5t.forEach(t),ear=r(LIe," \u2014 "),KQ=n(LIe,"A",{href:!0});var $5t=s(KQ);oar=r($5t,"ReformerForQuestionAnswering"),$5t.forEach(t),rar=r(LIe," (Reformer model)"),LIe.forEach(t),tar=i(X),o7=n(X,"LI",{});var yIe=s(o7);k2e=n(yIe,"STRONG",{});var k5t=s(k2e);aar=r(k5t,"rembert"),k5t.forEach(t),nar=r(yIe," \u2014 "),ZQ=n(yIe,"A",{href:!0});var S5t=s(ZQ);sar=r(S5t,"RemBertForQuestionAnswering"),S5t.forEach(t),lar=r(yIe," (RemBERT model)"),yIe.forEach(t),iar=i(X),r7=n(X,"LI",{});var xIe=s(r7);S2e=n(xIe,"STRONG",{});var R5t=s(S2e);dar=r(R5t,"roberta"),R5t.forEach(t),car=r(xIe," \u2014 "),eW=n(xIe,"A",{href:!0});var P5t=s(eW);far=r(P5t,"RobertaForQuestionAnswering"),P5t.forEach(t),mar=r(xIe," (RoBERTa model)"),xIe.forEach(t),gar=i(X),t7=n(X,"LI",{});var $Ie=s(t7);R2e=n($Ie,"STRONG",{});var B5t=s(R2e);har=r(B5t,"roformer"),B5t.forEach(t),par=r($Ie," \u2014 "),oW=n($Ie,"A",{href:!0});var I5t=s(oW);_ar=r(I5t,"RoFormerForQuestionAnswering"),I5t.forEach(t),uar=r($Ie," (RoFormer model)"),$Ie.forEach(t),bar=i(X),a7=n(X,"LI",{});var kIe=s(a7);P2e=n(kIe,"STRONG",{});var N5t=s(P2e);Far=r(N5t,"splinter"),N5t.forEach(t),Tar=r(kIe," \u2014 "),rW=n(kIe,"A",{href:!0});var q5t=s(rW);Mar=r(q5t,"SplinterForQuestionAnswering"),q5t.forEach(t),Ear=r(kIe," (Splinter model)"),kIe.forEach(t),Car=i(X),n7=n(X,"LI",{});var SIe=s(n7);B2e=n(SIe,"STRONG",{});var j5t=s(B2e);war=r(j5t,"squeezebert"),j5t.forEach(t),Aar=r(SIe," \u2014 "),tW=n(SIe,"A",{href:!0});var D5t=s(tW);Lar=r(D5t,"SqueezeBertForQuestionAnswering"),D5t.forEach(t),yar=r(SIe," (SqueezeBERT model)"),SIe.forEach(t),xar=i(X),s7=n(X,"LI",{});var RIe=s(s7);I2e=n(RIe,"STRONG",{});var G5t=s(I2e);$ar=r(G5t,"xlm"),G5t.forEach(t),kar=r(RIe," \u2014 "),aW=n(RIe,"A",{href:!0});var O5t=s(aW);Sar=r(O5t,"XLMForQuestionAnsweringSimple"),O5t.forEach(t),Rar=r(RIe," (XLM model)"),RIe.forEach(t),Par=i(X),l7=n(X,"LI",{});var PIe=s(l7);N2e=n(PIe,"STRONG",{});var V5t=s(N2e);Bar=r(V5t,"xlm-roberta"),V5t.forEach(t),Iar=r(PIe," \u2014 "),nW=n(PIe,"A",{href:!0});var X5t=s(nW);Nar=r(X5t,"XLMRobertaForQuestionAnswering"),X5t.forEach(t),qar=r(PIe," (XLM-RoBERTa model)"),PIe.forEach(t),jar=i(X),i7=n(X,"LI",{});var BIe=s(i7);q2e=n(BIe,"STRONG",{});var z5t=s(q2e);Dar=r(z5t,"xlm-roberta-xl"),z5t.forEach(t),Gar=r(BIe," \u2014 "),sW=n(BIe,"A",{href:!0});var Q5t=s(sW);Oar=r(Q5t,"XLMRobertaXLForQuestionAnswering"),Q5t.forEach(t),Var=r(BIe," (XLM-RoBERTa-XL model)"),BIe.forEach(t),Xar=i(X),d7=n(X,"LI",{});var IIe=s(d7);j2e=n(IIe,"STRONG",{});var W5t=s(j2e);zar=r(W5t,"xlnet"),W5t.forEach(t),Qar=r(IIe," \u2014 "),lW=n(IIe,"A",{href:!0});var H5t=s(lW);War=r(H5t,"XLNetForQuestionAnsweringSimple"),H5t.forEach(t),Har=r(IIe," (XLNet model)"),IIe.forEach(t),Uar=i(X),c7=n(X,"LI",{});var NIe=s(c7);D2e=n(NIe,"STRONG",{});var U5t=s(D2e);Jar=r(U5t,"yoso"),U5t.forEach(t),Yar=r(NIe," \u2014 "),iW=n(NIe,"A",{href:!0});var J5t=s(iW);Kar=r(J5t,"YosoForQuestionAnswering"),J5t.forEach(t),Zar=r(NIe," (YOSO model)"),NIe.forEach(t),X.forEach(t),enr=i(_a),f7=n(_a,"P",{});var qIe=s(f7);onr=r(qIe,"The model is set in evaluation mode by default using "),G2e=n(qIe,"CODE",{});var Y5t=s(G2e);rnr=r(Y5t,"model.eval()"),Y5t.forEach(t),tnr=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n(qIe,"CODE",{});var K5t=s(O2e);anr=r(K5t,"model.train()"),K5t.forEach(t),qIe.forEach(t),nnr=i(_a),T(m7.$$.fragment,_a),_a.forEach(t),dl.forEach(t),$Xe=i(f),_d=n(f,"H2",{class:!0});var IQe=s(_d);g7=n(IQe,"A",{id:!0,class:!0,href:!0});var Z5t=s(g7);V2e=n(Z5t,"SPAN",{});var e0t=s(V2e);T(Ly.$$.fragment,e0t),e0t.forEach(t),Z5t.forEach(t),snr=i(IQe),X2e=n(IQe,"SPAN",{});var o0t=s(X2e);lnr=r(o0t,"AutoModelForTableQuestionAnswering"),o0t.forEach(t),IQe.forEach(t),kXe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(yy.$$.fragment,cl),inr=i(cl),ud=n(cl,"P",{});var Ure=s(ud);dnr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=n(Ure,"A",{href:!0});var r0t=s(dW);cnr=r(r0t,"from_pretrained()"),r0t.forEach(t),fnr=r(Ure," class method or the "),cW=n(Ure,"A",{href:!0});var t0t=s(cW);mnr=r(t0t,"from_config()"),t0t.forEach(t),gnr=r(Ure,` class
method.`),Ure.forEach(t),hnr=i(cl),xy=n(cl,"P",{});var NQe=s(xy);pnr=r(NQe,"This class cannot be instantiated directly using "),z2e=n(NQe,"CODE",{});var a0t=s(z2e);_nr=r(a0t,"__init__()"),a0t.forEach(t),unr=r(NQe," (throws an error)."),NQe.forEach(t),bnr=i(cl),ut=n(cl,"DIV",{class:!0});var xA=s(ut);T($y.$$.fragment,xA),vnr=i(xA),Q2e=n(xA,"P",{});var n0t=s(Q2e);Fnr=r(n0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n0t.forEach(t),Tnr=i(xA),bd=n(xA,"P",{});var Jre=s(bd);Mnr=r(Jre,`Note:
Loading a model from its configuration file does `),W2e=n(Jre,"STRONG",{});var s0t=s(W2e);Enr=r(s0t,"not"),s0t.forEach(t),Cnr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(Jre,"A",{href:!0});var l0t=s(fW);wnr=r(l0t,"from_pretrained()"),l0t.forEach(t),Anr=r(Jre," to load the model weights."),Jre.forEach(t),Lnr=i(xA),T(h7.$$.fragment,xA),xA.forEach(t),ynr=i(cl),so=n(cl,"DIV",{class:!0});var ua=s(so);T(ky.$$.fragment,ua),xnr=i(ua),H2e=n(ua,"P",{});var i0t=s(H2e);$nr=r(i0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),i0t.forEach(t),knr=i(ua),za=n(ua,"P",{});var $A=s(za);Snr=r($A,"The model class to instantiate is selected based on the "),U2e=n($A,"CODE",{});var d0t=s(U2e);Rnr=r(d0t,"model_type"),d0t.forEach(t),Pnr=r($A,` property of the config object (either
passed as an argument or loaded from `),J2e=n($A,"CODE",{});var c0t=s(J2e);Bnr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),Inr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n($A,"CODE",{});var f0t=s(Y2e);Nnr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),qnr=r($A,":"),$A.forEach(t),jnr=i(ua),K2e=n(ua,"UL",{});var m0t=s(K2e);p7=n(m0t,"LI",{});var jIe=s(p7);Z2e=n(jIe,"STRONG",{});var g0t=s(Z2e);Dnr=r(g0t,"tapas"),g0t.forEach(t),Gnr=r(jIe," \u2014 "),mW=n(jIe,"A",{href:!0});var h0t=s(mW);Onr=r(h0t,"TapasForQuestionAnswering"),h0t.forEach(t),Vnr=r(jIe," (TAPAS model)"),jIe.forEach(t),m0t.forEach(t),Xnr=i(ua),_7=n(ua,"P",{});var DIe=s(_7);znr=r(DIe,"The model is set in evaluation mode by default using "),ebe=n(DIe,"CODE",{});var p0t=s(ebe);Qnr=r(p0t,"model.eval()"),p0t.forEach(t),Wnr=r(DIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(DIe,"CODE",{});var _0t=s(obe);Hnr=r(_0t,"model.train()"),_0t.forEach(t),DIe.forEach(t),Unr=i(ua),T(u7.$$.fragment,ua),ua.forEach(t),cl.forEach(t),SXe=i(f),vd=n(f,"H2",{class:!0});var qQe=s(vd);b7=n(qQe,"A",{id:!0,class:!0,href:!0});var u0t=s(b7);rbe=n(u0t,"SPAN",{});var b0t=s(rbe);T(Sy.$$.fragment,b0t),b0t.forEach(t),u0t.forEach(t),Jnr=i(qQe),tbe=n(qQe,"SPAN",{});var v0t=s(tbe);Ynr=r(v0t,"AutoModelForImageClassification"),v0t.forEach(t),qQe.forEach(t),RXe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(Ry.$$.fragment,fl),Knr=i(fl),Fd=n(fl,"P",{});var Yre=s(Fd);Znr=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=n(Yre,"A",{href:!0});var F0t=s(gW);esr=r(F0t,"from_pretrained()"),F0t.forEach(t),osr=r(Yre," class method or the "),hW=n(Yre,"A",{href:!0});var T0t=s(hW);rsr=r(T0t,"from_config()"),T0t.forEach(t),tsr=r(Yre,` class
method.`),Yre.forEach(t),asr=i(fl),Py=n(fl,"P",{});var jQe=s(Py);nsr=r(jQe,"This class cannot be instantiated directly using "),abe=n(jQe,"CODE",{});var M0t=s(abe);ssr=r(M0t,"__init__()"),M0t.forEach(t),lsr=r(jQe," (throws an error)."),jQe.forEach(t),isr=i(fl),bt=n(fl,"DIV",{class:!0});var kA=s(bt);T(By.$$.fragment,kA),dsr=i(kA),nbe=n(kA,"P",{});var E0t=s(nbe);csr=r(E0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E0t.forEach(t),fsr=i(kA),Td=n(kA,"P",{});var Kre=s(Td);msr=r(Kre,`Note:
Loading a model from its configuration file does `),sbe=n(Kre,"STRONG",{});var C0t=s(sbe);gsr=r(C0t,"not"),C0t.forEach(t),hsr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Kre,"A",{href:!0});var w0t=s(pW);psr=r(w0t,"from_pretrained()"),w0t.forEach(t),_sr=r(Kre," to load the model weights."),Kre.forEach(t),usr=i(kA),T(v7.$$.fragment,kA),kA.forEach(t),bsr=i(fl),lo=n(fl,"DIV",{class:!0});var ba=s(lo);T(Iy.$$.fragment,ba),vsr=i(ba),lbe=n(ba,"P",{});var A0t=s(lbe);Fsr=r(A0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A0t.forEach(t),Tsr=i(ba),Qa=n(ba,"P",{});var SA=s(Qa);Msr=r(SA,"The model class to instantiate is selected based on the "),ibe=n(SA,"CODE",{});var L0t=s(ibe);Esr=r(L0t,"model_type"),L0t.forEach(t),Csr=r(SA,` property of the config object (either
passed as an argument or loaded from `),dbe=n(SA,"CODE",{});var y0t=s(dbe);wsr=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),Asr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(SA,"CODE",{});var x0t=s(cbe);Lsr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),ysr=r(SA,":"),SA.forEach(t),xsr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);F7=n(Te,"LI",{});var GIe=s(F7);fbe=n(GIe,"STRONG",{});var $0t=s(fbe);$sr=r($0t,"beit"),$0t.forEach(t),ksr=r(GIe," \u2014 "),_W=n(GIe,"A",{href:!0});var k0t=s(_W);Ssr=r(k0t,"BeitForImageClassification"),k0t.forEach(t),Rsr=r(GIe," (BEiT model)"),GIe.forEach(t),Psr=i(Te),T7=n(Te,"LI",{});var OIe=s(T7);mbe=n(OIe,"STRONG",{});var S0t=s(mbe);Bsr=r(S0t,"convnext"),S0t.forEach(t),Isr=r(OIe," \u2014 "),uW=n(OIe,"A",{href:!0});var R0t=s(uW);Nsr=r(R0t,"ConvNextForImageClassification"),R0t.forEach(t),qsr=r(OIe," (ConvNeXT model)"),OIe.forEach(t),jsr=i(Te),M7=n(Te,"LI",{});var VIe=s(M7);gbe=n(VIe,"STRONG",{});var P0t=s(gbe);Dsr=r(P0t,"cvt"),P0t.forEach(t),Gsr=r(VIe," \u2014 "),bW=n(VIe,"A",{href:!0});var B0t=s(bW);Osr=r(B0t,"CvtForImageClassification"),B0t.forEach(t),Vsr=r(VIe," (CvT model)"),VIe.forEach(t),Xsr=i(Te),E7=n(Te,"LI",{});var XIe=s(E7);hbe=n(XIe,"STRONG",{});var I0t=s(hbe);zsr=r(I0t,"data2vec-vision"),I0t.forEach(t),Qsr=r(XIe," \u2014 "),vW=n(XIe,"A",{href:!0});var N0t=s(vW);Wsr=r(N0t,"Data2VecVisionForImageClassification"),N0t.forEach(t),Hsr=r(XIe," (Data2VecVision model)"),XIe.forEach(t),Usr=i(Te),Ws=n(Te,"LI",{});var kS=s(Ws);pbe=n(kS,"STRONG",{});var q0t=s(pbe);Jsr=r(q0t,"deit"),q0t.forEach(t),Ysr=r(kS," \u2014 "),FW=n(kS,"A",{href:!0});var j0t=s(FW);Ksr=r(j0t,"DeiTForImageClassification"),j0t.forEach(t),Zsr=r(kS," or "),TW=n(kS,"A",{href:!0});var D0t=s(TW);elr=r(D0t,"DeiTForImageClassificationWithTeacher"),D0t.forEach(t),olr=r(kS," (DeiT model)"),kS.forEach(t),rlr=i(Te),C7=n(Te,"LI",{});var zIe=s(C7);_be=n(zIe,"STRONG",{});var G0t=s(_be);tlr=r(G0t,"imagegpt"),G0t.forEach(t),alr=r(zIe," \u2014 "),MW=n(zIe,"A",{href:!0});var O0t=s(MW);nlr=r(O0t,"ImageGPTForImageClassification"),O0t.forEach(t),slr=r(zIe," (ImageGPT model)"),zIe.forEach(t),llr=i(Te),Hs=n(Te,"LI",{});var SS=s(Hs);ube=n(SS,"STRONG",{});var V0t=s(ube);ilr=r(V0t,"levit"),V0t.forEach(t),dlr=r(SS," \u2014 "),EW=n(SS,"A",{href:!0});var X0t=s(EW);clr=r(X0t,"LevitForImageClassification"),X0t.forEach(t),flr=r(SS," or "),CW=n(SS,"A",{href:!0});var z0t=s(CW);mlr=r(z0t,"LevitForImageClassificationWithTeacher"),z0t.forEach(t),glr=r(SS," (LeViT model)"),SS.forEach(t),hlr=i(Te),w7=n(Te,"LI",{});var QIe=s(w7);bbe=n(QIe,"STRONG",{});var Q0t=s(bbe);plr=r(Q0t,"mobilevit"),Q0t.forEach(t),_lr=r(QIe," \u2014 "),wW=n(QIe,"A",{href:!0});var W0t=s(wW);ulr=r(W0t,"MobileViTForImageClassification"),W0t.forEach(t),blr=r(QIe," (MobileViT model)"),QIe.forEach(t),vlr=i(Te),vt=n(Te,"LI",{});var Rf=s(vt);vbe=n(Rf,"STRONG",{});var H0t=s(vbe);Flr=r(H0t,"perceiver"),H0t.forEach(t),Tlr=r(Rf," \u2014 "),AW=n(Rf,"A",{href:!0});var U0t=s(AW);Mlr=r(U0t,"PerceiverForImageClassificationLearned"),U0t.forEach(t),Elr=r(Rf," or "),LW=n(Rf,"A",{href:!0});var J0t=s(LW);Clr=r(J0t,"PerceiverForImageClassificationFourier"),J0t.forEach(t),wlr=r(Rf," or "),yW=n(Rf,"A",{href:!0});var Y0t=s(yW);Alr=r(Y0t,"PerceiverForImageClassificationConvProcessing"),Y0t.forEach(t),Llr=r(Rf," (Perceiver model)"),Rf.forEach(t),ylr=i(Te),A7=n(Te,"LI",{});var WIe=s(A7);Fbe=n(WIe,"STRONG",{});var K0t=s(Fbe);xlr=r(K0t,"poolformer"),K0t.forEach(t),$lr=r(WIe," \u2014 "),xW=n(WIe,"A",{href:!0});var Z0t=s(xW);klr=r(Z0t,"PoolFormerForImageClassification"),Z0t.forEach(t),Slr=r(WIe," (PoolFormer model)"),WIe.forEach(t),Rlr=i(Te),L7=n(Te,"LI",{});var HIe=s(L7);Tbe=n(HIe,"STRONG",{});var ewt=s(Tbe);Plr=r(ewt,"regnet"),ewt.forEach(t),Blr=r(HIe," \u2014 "),$W=n(HIe,"A",{href:!0});var owt=s($W);Ilr=r(owt,"RegNetForImageClassification"),owt.forEach(t),Nlr=r(HIe," (RegNet model)"),HIe.forEach(t),qlr=i(Te),y7=n(Te,"LI",{});var UIe=s(y7);Mbe=n(UIe,"STRONG",{});var rwt=s(Mbe);jlr=r(rwt,"resnet"),rwt.forEach(t),Dlr=r(UIe," \u2014 "),kW=n(UIe,"A",{href:!0});var twt=s(kW);Glr=r(twt,"ResNetForImageClassification"),twt.forEach(t),Olr=r(UIe," (ResNet model)"),UIe.forEach(t),Vlr=i(Te),x7=n(Te,"LI",{});var JIe=s(x7);Ebe=n(JIe,"STRONG",{});var awt=s(Ebe);Xlr=r(awt,"segformer"),awt.forEach(t),zlr=r(JIe," \u2014 "),SW=n(JIe,"A",{href:!0});var nwt=s(SW);Qlr=r(nwt,"SegformerForImageClassification"),nwt.forEach(t),Wlr=r(JIe," (SegFormer model)"),JIe.forEach(t),Hlr=i(Te),$7=n(Te,"LI",{});var YIe=s($7);Cbe=n(YIe,"STRONG",{});var swt=s(Cbe);Ulr=r(swt,"swin"),swt.forEach(t),Jlr=r(YIe," \u2014 "),RW=n(YIe,"A",{href:!0});var lwt=s(RW);Ylr=r(lwt,"SwinForImageClassification"),lwt.forEach(t),Klr=r(YIe," (Swin Transformer model)"),YIe.forEach(t),Zlr=i(Te),k7=n(Te,"LI",{});var KIe=s(k7);wbe=n(KIe,"STRONG",{});var iwt=s(wbe);eir=r(iwt,"van"),iwt.forEach(t),oir=r(KIe," \u2014 "),PW=n(KIe,"A",{href:!0});var dwt=s(PW);rir=r(dwt,"VanForImageClassification"),dwt.forEach(t),tir=r(KIe," (VAN model)"),KIe.forEach(t),air=i(Te),S7=n(Te,"LI",{});var ZIe=s(S7);Abe=n(ZIe,"STRONG",{});var cwt=s(Abe);nir=r(cwt,"vit"),cwt.forEach(t),sir=r(ZIe," \u2014 "),BW=n(ZIe,"A",{href:!0});var fwt=s(BW);lir=r(fwt,"ViTForImageClassification"),fwt.forEach(t),iir=r(ZIe," (ViT model)"),ZIe.forEach(t),Te.forEach(t),dir=i(ba),R7=n(ba,"P",{});var eNe=s(R7);cir=r(eNe,"The model is set in evaluation mode by default using "),Lbe=n(eNe,"CODE",{});var mwt=s(Lbe);fir=r(mwt,"model.eval()"),mwt.forEach(t),mir=r(eNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(eNe,"CODE",{});var gwt=s(ybe);gir=r(gwt,"model.train()"),gwt.forEach(t),eNe.forEach(t),hir=i(ba),T(P7.$$.fragment,ba),ba.forEach(t),fl.forEach(t),PXe=i(f),Md=n(f,"H2",{class:!0});var DQe=s(Md);B7=n(DQe,"A",{id:!0,class:!0,href:!0});var hwt=s(B7);xbe=n(hwt,"SPAN",{});var pwt=s(xbe);T(Ny.$$.fragment,pwt),pwt.forEach(t),hwt.forEach(t),pir=i(DQe),$be=n(DQe,"SPAN",{});var _wt=s($be);_ir=r(_wt,"AutoModelForVision2Seq"),_wt.forEach(t),DQe.forEach(t),BXe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(qy.$$.fragment,ml),uir=i(ml),Ed=n(ml,"P",{});var Zre=s(Ed);bir=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=n(Zre,"A",{href:!0});var uwt=s(IW);vir=r(uwt,"from_pretrained()"),uwt.forEach(t),Fir=r(Zre," class method or the "),NW=n(Zre,"A",{href:!0});var bwt=s(NW);Tir=r(bwt,"from_config()"),bwt.forEach(t),Mir=r(Zre,` class
method.`),Zre.forEach(t),Eir=i(ml),jy=n(ml,"P",{});var GQe=s(jy);Cir=r(GQe,"This class cannot be instantiated directly using "),kbe=n(GQe,"CODE",{});var vwt=s(kbe);wir=r(vwt,"__init__()"),vwt.forEach(t),Air=r(GQe," (throws an error)."),GQe.forEach(t),Lir=i(ml),Ft=n(ml,"DIV",{class:!0});var RA=s(Ft);T(Dy.$$.fragment,RA),yir=i(RA),Sbe=n(RA,"P",{});var Fwt=s(Sbe);xir=r(Fwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fwt.forEach(t),$ir=i(RA),Cd=n(RA,"P",{});var ete=s(Cd);kir=r(ete,`Note:
Loading a model from its configuration file does `),Rbe=n(ete,"STRONG",{});var Twt=s(Rbe);Sir=r(Twt,"not"),Twt.forEach(t),Rir=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(ete,"A",{href:!0});var Mwt=s(qW);Pir=r(Mwt,"from_pretrained()"),Mwt.forEach(t),Bir=r(ete," to load the model weights."),ete.forEach(t),Iir=i(RA),T(I7.$$.fragment,RA),RA.forEach(t),Nir=i(ml),io=n(ml,"DIV",{class:!0});var va=s(io);T(Gy.$$.fragment,va),qir=i(va),Pbe=n(va,"P",{});var Ewt=s(Pbe);jir=r(Ewt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ewt.forEach(t),Dir=i(va),Wa=n(va,"P",{});var PA=s(Wa);Gir=r(PA,"The model class to instantiate is selected based on the "),Bbe=n(PA,"CODE",{});var Cwt=s(Bbe);Oir=r(Cwt,"model_type"),Cwt.forEach(t),Vir=r(PA,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(PA,"CODE",{});var wwt=s(Ibe);Xir=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),zir=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(PA,"CODE",{});var Awt=s(Nbe);Qir=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),Wir=r(PA,":"),PA.forEach(t),Hir=i(va),qbe=n(va,"UL",{});var Lwt=s(qbe);N7=n(Lwt,"LI",{});var oNe=s(N7);jbe=n(oNe,"STRONG",{});var ywt=s(jbe);Uir=r(ywt,"vision-encoder-decoder"),ywt.forEach(t),Jir=r(oNe," \u2014 "),jW=n(oNe,"A",{href:!0});var xwt=s(jW);Yir=r(xwt,"VisionEncoderDecoderModel"),xwt.forEach(t),Kir=r(oNe," (Vision Encoder decoder model)"),oNe.forEach(t),Lwt.forEach(t),Zir=i(va),q7=n(va,"P",{});var rNe=s(q7);edr=r(rNe,"The model is set in evaluation mode by default using "),Dbe=n(rNe,"CODE",{});var $wt=s(Dbe);odr=r($wt,"model.eval()"),$wt.forEach(t),rdr=r(rNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gbe=n(rNe,"CODE",{});var kwt=s(Gbe);tdr=r(kwt,"model.train()"),kwt.forEach(t),rNe.forEach(t),adr=i(va),T(j7.$$.fragment,va),va.forEach(t),ml.forEach(t),IXe=i(f),wd=n(f,"H2",{class:!0});var OQe=s(wd);D7=n(OQe,"A",{id:!0,class:!0,href:!0});var Swt=s(D7);Obe=n(Swt,"SPAN",{});var Rwt=s(Obe);T(Oy.$$.fragment,Rwt),Rwt.forEach(t),Swt.forEach(t),ndr=i(OQe),Vbe=n(OQe,"SPAN",{});var Pwt=s(Vbe);sdr=r(Pwt,"AutoModelForVisualQuestionAnswering"),Pwt.forEach(t),OQe.forEach(t),NXe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(Vy.$$.fragment,gl),ldr=i(gl),Ad=n(gl,"P",{});var ote=s(Ad);idr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=n(ote,"A",{href:!0});var Bwt=s(DW);ddr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),cdr=r(ote," class method or the "),GW=n(ote,"A",{href:!0});var Iwt=s(GW);fdr=r(Iwt,"from_config()"),Iwt.forEach(t),mdr=r(ote,` class
method.`),ote.forEach(t),gdr=i(gl),Xy=n(gl,"P",{});var VQe=s(Xy);hdr=r(VQe,"This class cannot be instantiated directly using "),Xbe=n(VQe,"CODE",{});var Nwt=s(Xbe);pdr=r(Nwt,"__init__()"),Nwt.forEach(t),_dr=r(VQe," (throws an error)."),VQe.forEach(t),udr=i(gl),Tt=n(gl,"DIV",{class:!0});var BA=s(Tt);T(zy.$$.fragment,BA),bdr=i(BA),zbe=n(BA,"P",{});var qwt=s(zbe);vdr=r(qwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),qwt.forEach(t),Fdr=i(BA),Ld=n(BA,"P",{});var rte=s(Ld);Tdr=r(rte,`Note:
Loading a model from its configuration file does `),Qbe=n(rte,"STRONG",{});var jwt=s(Qbe);Mdr=r(jwt,"not"),jwt.forEach(t),Edr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(rte,"A",{href:!0});var Dwt=s(OW);Cdr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),wdr=r(rte," to load the model weights."),rte.forEach(t),Adr=i(BA),T(G7.$$.fragment,BA),BA.forEach(t),Ldr=i(gl),co=n(gl,"DIV",{class:!0});var Fa=s(co);T(Qy.$$.fragment,Fa),ydr=i(Fa),Wbe=n(Fa,"P",{});var Gwt=s(Wbe);xdr=r(Gwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Gwt.forEach(t),$dr=i(Fa),Ha=n(Fa,"P",{});var IA=s(Ha);kdr=r(IA,"The model class to instantiate is selected based on the "),Hbe=n(IA,"CODE",{});var Owt=s(Hbe);Sdr=r(Owt,"model_type"),Owt.forEach(t),Rdr=r(IA,` property of the config object (either
passed as an argument or loaded from `),Ube=n(IA,"CODE",{});var Vwt=s(Ube);Pdr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),Bdr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(IA,"CODE",{});var Xwt=s(Jbe);Idr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),Ndr=r(IA,":"),IA.forEach(t),qdr=i(Fa),Ybe=n(Fa,"UL",{});var zwt=s(Ybe);O7=n(zwt,"LI",{});var tNe=s(O7);Kbe=n(tNe,"STRONG",{});var Qwt=s(Kbe);jdr=r(Qwt,"vilt"),Qwt.forEach(t),Ddr=r(tNe," \u2014 "),VW=n(tNe,"A",{href:!0});var Wwt=s(VW);Gdr=r(Wwt,"ViltForQuestionAnswering"),Wwt.forEach(t),Odr=r(tNe," (ViLT model)"),tNe.forEach(t),zwt.forEach(t),Vdr=i(Fa),V7=n(Fa,"P",{});var aNe=s(V7);Xdr=r(aNe,"The model is set in evaluation mode by default using "),Zbe=n(aNe,"CODE",{});var Hwt=s(Zbe);zdr=r(Hwt,"model.eval()"),Hwt.forEach(t),Qdr=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eve=n(aNe,"CODE",{});var Uwt=s(eve);Wdr=r(Uwt,"model.train()"),Uwt.forEach(t),aNe.forEach(t),Hdr=i(Fa),T(X7.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),qXe=i(f),yd=n(f,"H2",{class:!0});var XQe=s(yd);z7=n(XQe,"A",{id:!0,class:!0,href:!0});var Jwt=s(z7);ove=n(Jwt,"SPAN",{});var Ywt=s(ove);T(Wy.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),Udr=i(XQe),rve=n(XQe,"SPAN",{});var Kwt=s(rve);Jdr=r(Kwt,"AutoModelForAudioClassification"),Kwt.forEach(t),XQe.forEach(t),jXe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(Hy.$$.fragment,hl),Ydr=i(hl),xd=n(hl,"P",{});var tte=s(xd);Kdr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=n(tte,"A",{href:!0});var Zwt=s(XW);Zdr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),ecr=r(tte," class method or the "),zW=n(tte,"A",{href:!0});var eAt=s(zW);ocr=r(eAt,"from_config()"),eAt.forEach(t),rcr=r(tte,` class
method.`),tte.forEach(t),tcr=i(hl),Uy=n(hl,"P",{});var zQe=s(Uy);acr=r(zQe,"This class cannot be instantiated directly using "),tve=n(zQe,"CODE",{});var oAt=s(tve);ncr=r(oAt,"__init__()"),oAt.forEach(t),scr=r(zQe," (throws an error)."),zQe.forEach(t),lcr=i(hl),Mt=n(hl,"DIV",{class:!0});var NA=s(Mt);T(Jy.$$.fragment,NA),icr=i(NA),ave=n(NA,"P",{});var rAt=s(ave);dcr=r(rAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rAt.forEach(t),ccr=i(NA),$d=n(NA,"P",{});var ate=s($d);fcr=r(ate,`Note:
Loading a model from its configuration file does `),nve=n(ate,"STRONG",{});var tAt=s(nve);mcr=r(tAt,"not"),tAt.forEach(t),gcr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(ate,"A",{href:!0});var aAt=s(QW);hcr=r(aAt,"from_pretrained()"),aAt.forEach(t),pcr=r(ate," to load the model weights."),ate.forEach(t),_cr=i(NA),T(Q7.$$.fragment,NA),NA.forEach(t),ucr=i(hl),fo=n(hl,"DIV",{class:!0});var Ta=s(fo);T(Yy.$$.fragment,Ta),bcr=i(Ta),sve=n(Ta,"P",{});var nAt=s(sve);vcr=r(nAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nAt.forEach(t),Fcr=i(Ta),Ua=n(Ta,"P",{});var qA=s(Ua);Tcr=r(qA,"The model class to instantiate is selected based on the "),lve=n(qA,"CODE",{});var sAt=s(lve);Mcr=r(sAt,"model_type"),sAt.forEach(t),Ecr=r(qA,` property of the config object (either
passed as an argument or loaded from `),ive=n(qA,"CODE",{});var lAt=s(ive);Ccr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),wcr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(qA,"CODE",{});var iAt=s(dve);Acr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),Lcr=r(qA,":"),qA.forEach(t),ycr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);W7=n(ze,"LI",{});var nNe=s(W7);cve=n(nNe,"STRONG",{});var dAt=s(cve);xcr=r(dAt,"data2vec-audio"),dAt.forEach(t),$cr=r(nNe," \u2014 "),WW=n(nNe,"A",{href:!0});var cAt=s(WW);kcr=r(cAt,"Data2VecAudioForSequenceClassification"),cAt.forEach(t),Scr=r(nNe," (Data2VecAudio model)"),nNe.forEach(t),Rcr=i(ze),H7=n(ze,"LI",{});var sNe=s(H7);fve=n(sNe,"STRONG",{});var fAt=s(fve);Pcr=r(fAt,"hubert"),fAt.forEach(t),Bcr=r(sNe," \u2014 "),HW=n(sNe,"A",{href:!0});var mAt=s(HW);Icr=r(mAt,"HubertForSequenceClassification"),mAt.forEach(t),Ncr=r(sNe," (Hubert model)"),sNe.forEach(t),qcr=i(ze),U7=n(ze,"LI",{});var lNe=s(U7);mve=n(lNe,"STRONG",{});var gAt=s(mve);jcr=r(gAt,"sew"),gAt.forEach(t),Dcr=r(lNe," \u2014 "),UW=n(lNe,"A",{href:!0});var hAt=s(UW);Gcr=r(hAt,"SEWForSequenceClassification"),hAt.forEach(t),Ocr=r(lNe," (SEW model)"),lNe.forEach(t),Vcr=i(ze),J7=n(ze,"LI",{});var iNe=s(J7);gve=n(iNe,"STRONG",{});var pAt=s(gve);Xcr=r(pAt,"sew-d"),pAt.forEach(t),zcr=r(iNe," \u2014 "),JW=n(iNe,"A",{href:!0});var _At=s(JW);Qcr=r(_At,"SEWDForSequenceClassification"),_At.forEach(t),Wcr=r(iNe," (SEW-D model)"),iNe.forEach(t),Hcr=i(ze),Y7=n(ze,"LI",{});var dNe=s(Y7);hve=n(dNe,"STRONG",{});var uAt=s(hve);Ucr=r(uAt,"unispeech"),uAt.forEach(t),Jcr=r(dNe," \u2014 "),YW=n(dNe,"A",{href:!0});var bAt=s(YW);Ycr=r(bAt,"UniSpeechForSequenceClassification"),bAt.forEach(t),Kcr=r(dNe," (UniSpeech model)"),dNe.forEach(t),Zcr=i(ze),K7=n(ze,"LI",{});var cNe=s(K7);pve=n(cNe,"STRONG",{});var vAt=s(pve);efr=r(vAt,"unispeech-sat"),vAt.forEach(t),ofr=r(cNe," \u2014 "),KW=n(cNe,"A",{href:!0});var FAt=s(KW);rfr=r(FAt,"UniSpeechSatForSequenceClassification"),FAt.forEach(t),tfr=r(cNe," (UniSpeechSat model)"),cNe.forEach(t),afr=i(ze),Z7=n(ze,"LI",{});var fNe=s(Z7);_ve=n(fNe,"STRONG",{});var TAt=s(_ve);nfr=r(TAt,"wav2vec2"),TAt.forEach(t),sfr=r(fNe," \u2014 "),ZW=n(fNe,"A",{href:!0});var MAt=s(ZW);lfr=r(MAt,"Wav2Vec2ForSequenceClassification"),MAt.forEach(t),ifr=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),dfr=i(ze),e8=n(ze,"LI",{});var mNe=s(e8);uve=n(mNe,"STRONG",{});var EAt=s(uve);cfr=r(EAt,"wav2vec2-conformer"),EAt.forEach(t),ffr=r(mNe," \u2014 "),eH=n(mNe,"A",{href:!0});var CAt=s(eH);mfr=r(CAt,"Wav2Vec2ConformerForSequenceClassification"),CAt.forEach(t),gfr=r(mNe," (Wav2Vec2-Conformer model)"),mNe.forEach(t),hfr=i(ze),o8=n(ze,"LI",{});var gNe=s(o8);bve=n(gNe,"STRONG",{});var wAt=s(bve);pfr=r(wAt,"wavlm"),wAt.forEach(t),_fr=r(gNe," \u2014 "),oH=n(gNe,"A",{href:!0});var AAt=s(oH);ufr=r(AAt,"WavLMForSequenceClassification"),AAt.forEach(t),bfr=r(gNe," (WavLM model)"),gNe.forEach(t),ze.forEach(t),vfr=i(Ta),r8=n(Ta,"P",{});var hNe=s(r8);Ffr=r(hNe,"The model is set in evaluation mode by default using "),vve=n(hNe,"CODE",{});var LAt=s(vve);Tfr=r(LAt,"model.eval()"),LAt.forEach(t),Mfr=r(hNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fve=n(hNe,"CODE",{});var yAt=s(Fve);Efr=r(yAt,"model.train()"),yAt.forEach(t),hNe.forEach(t),Cfr=i(Ta),T(t8.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),DXe=i(f),kd=n(f,"H2",{class:!0});var QQe=s(kd);a8=n(QQe,"A",{id:!0,class:!0,href:!0});var xAt=s(a8);Tve=n(xAt,"SPAN",{});var $At=s(Tve);T(Ky.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),wfr=i(QQe),Mve=n(QQe,"SPAN",{});var kAt=s(Mve);Afr=r(kAt,"AutoModelForAudioFrameClassification"),kAt.forEach(t),QQe.forEach(t),GXe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(Zy.$$.fragment,pl),Lfr=i(pl),Sd=n(pl,"P",{});var nte=s(Sd);yfr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=n(nte,"A",{href:!0});var SAt=s(rH);xfr=r(SAt,"from_pretrained()"),SAt.forEach(t),$fr=r(nte," class method or the "),tH=n(nte,"A",{href:!0});var RAt=s(tH);kfr=r(RAt,"from_config()"),RAt.forEach(t),Sfr=r(nte,` class
method.`),nte.forEach(t),Rfr=i(pl),e9=n(pl,"P",{});var WQe=s(e9);Pfr=r(WQe,"This class cannot be instantiated directly using "),Eve=n(WQe,"CODE",{});var PAt=s(Eve);Bfr=r(PAt,"__init__()"),PAt.forEach(t),Ifr=r(WQe," (throws an error)."),WQe.forEach(t),Nfr=i(pl),Et=n(pl,"DIV",{class:!0});var jA=s(Et);T(o9.$$.fragment,jA),qfr=i(jA),Cve=n(jA,"P",{});var BAt=s(Cve);jfr=r(BAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BAt.forEach(t),Dfr=i(jA),Rd=n(jA,"P",{});var ste=s(Rd);Gfr=r(ste,`Note:
Loading a model from its configuration file does `),wve=n(ste,"STRONG",{});var IAt=s(wve);Ofr=r(IAt,"not"),IAt.forEach(t),Vfr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(ste,"A",{href:!0});var NAt=s(aH);Xfr=r(NAt,"from_pretrained()"),NAt.forEach(t),zfr=r(ste," to load the model weights."),ste.forEach(t),Qfr=i(jA),T(n8.$$.fragment,jA),jA.forEach(t),Wfr=i(pl),mo=n(pl,"DIV",{class:!0});var Ma=s(mo);T(r9.$$.fragment,Ma),Hfr=i(Ma),Ave=n(Ma,"P",{});var qAt=s(Ave);Ufr=r(qAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),qAt.forEach(t),Jfr=i(Ma),Ja=n(Ma,"P",{});var DA=s(Ja);Yfr=r(DA,"The model class to instantiate is selected based on the "),Lve=n(DA,"CODE",{});var jAt=s(Lve);Kfr=r(jAt,"model_type"),jAt.forEach(t),Zfr=r(DA,` property of the config object (either
passed as an argument or loaded from `),yve=n(DA,"CODE",{});var DAt=s(yve);emr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),omr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(DA,"CODE",{});var GAt=s(xve);rmr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),tmr=r(DA,":"),DA.forEach(t),amr=i(Ma),et=n(Ma,"UL",{});var _l=s(et);s8=n(_l,"LI",{});var pNe=s(s8);$ve=n(pNe,"STRONG",{});var OAt=s($ve);nmr=r(OAt,"data2vec-audio"),OAt.forEach(t),smr=r(pNe," \u2014 "),nH=n(pNe,"A",{href:!0});var VAt=s(nH);lmr=r(VAt,"Data2VecAudioForAudioFrameClassification"),VAt.forEach(t),imr=r(pNe," (Data2VecAudio model)"),pNe.forEach(t),dmr=i(_l),l8=n(_l,"LI",{});var _Ne=s(l8);kve=n(_Ne,"STRONG",{});var XAt=s(kve);cmr=r(XAt,"unispeech-sat"),XAt.forEach(t),fmr=r(_Ne," \u2014 "),sH=n(_Ne,"A",{href:!0});var zAt=s(sH);mmr=r(zAt,"UniSpeechSatForAudioFrameClassification"),zAt.forEach(t),gmr=r(_Ne," (UniSpeechSat model)"),_Ne.forEach(t),hmr=i(_l),i8=n(_l,"LI",{});var uNe=s(i8);Sve=n(uNe,"STRONG",{});var QAt=s(Sve);pmr=r(QAt,"wav2vec2"),QAt.forEach(t),_mr=r(uNe," \u2014 "),lH=n(uNe,"A",{href:!0});var WAt=s(lH);umr=r(WAt,"Wav2Vec2ForAudioFrameClassification"),WAt.forEach(t),bmr=r(uNe," (Wav2Vec2 model)"),uNe.forEach(t),vmr=i(_l),d8=n(_l,"LI",{});var bNe=s(d8);Rve=n(bNe,"STRONG",{});var HAt=s(Rve);Fmr=r(HAt,"wav2vec2-conformer"),HAt.forEach(t),Tmr=r(bNe," \u2014 "),iH=n(bNe,"A",{href:!0});var UAt=s(iH);Mmr=r(UAt,"Wav2Vec2ConformerForAudioFrameClassification"),UAt.forEach(t),Emr=r(bNe," (Wav2Vec2-Conformer model)"),bNe.forEach(t),Cmr=i(_l),c8=n(_l,"LI",{});var vNe=s(c8);Pve=n(vNe,"STRONG",{});var JAt=s(Pve);wmr=r(JAt,"wavlm"),JAt.forEach(t),Amr=r(vNe," \u2014 "),dH=n(vNe,"A",{href:!0});var YAt=s(dH);Lmr=r(YAt,"WavLMForAudioFrameClassification"),YAt.forEach(t),ymr=r(vNe," (WavLM model)"),vNe.forEach(t),_l.forEach(t),xmr=i(Ma),f8=n(Ma,"P",{});var FNe=s(f8);$mr=r(FNe,"The model is set in evaluation mode by default using "),Bve=n(FNe,"CODE",{});var KAt=s(Bve);kmr=r(KAt,"model.eval()"),KAt.forEach(t),Smr=r(FNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ive=n(FNe,"CODE",{});var ZAt=s(Ive);Rmr=r(ZAt,"model.train()"),ZAt.forEach(t),FNe.forEach(t),Pmr=i(Ma),T(m8.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),OXe=i(f),Pd=n(f,"H2",{class:!0});var HQe=s(Pd);g8=n(HQe,"A",{id:!0,class:!0,href:!0});var e6t=s(g8);Nve=n(e6t,"SPAN",{});var o6t=s(Nve);T(t9.$$.fragment,o6t),o6t.forEach(t),e6t.forEach(t),Bmr=i(HQe),qve=n(HQe,"SPAN",{});var r6t=s(qve);Imr=r(r6t,"AutoModelForCTC"),r6t.forEach(t),HQe.forEach(t),VXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(a9.$$.fragment,ul),Nmr=i(ul),Bd=n(ul,"P",{});var lte=s(Bd);qmr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=n(lte,"A",{href:!0});var t6t=s(cH);jmr=r(t6t,"from_pretrained()"),t6t.forEach(t),Dmr=r(lte," class method or the "),fH=n(lte,"A",{href:!0});var a6t=s(fH);Gmr=r(a6t,"from_config()"),a6t.forEach(t),Omr=r(lte,` class
method.`),lte.forEach(t),Vmr=i(ul),n9=n(ul,"P",{});var UQe=s(n9);Xmr=r(UQe,"This class cannot be instantiated directly using "),jve=n(UQe,"CODE",{});var n6t=s(jve);zmr=r(n6t,"__init__()"),n6t.forEach(t),Qmr=r(UQe," (throws an error)."),UQe.forEach(t),Wmr=i(ul),Ct=n(ul,"DIV",{class:!0});var GA=s(Ct);T(s9.$$.fragment,GA),Hmr=i(GA),Dve=n(GA,"P",{});var s6t=s(Dve);Umr=r(s6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),s6t.forEach(t),Jmr=i(GA),Id=n(GA,"P",{});var ite=s(Id);Ymr=r(ite,`Note:
Loading a model from its configuration file does `),Gve=n(ite,"STRONG",{});var l6t=s(Gve);Kmr=r(l6t,"not"),l6t.forEach(t),Zmr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(ite,"A",{href:!0});var i6t=s(mH);egr=r(i6t,"from_pretrained()"),i6t.forEach(t),ogr=r(ite," to load the model weights."),ite.forEach(t),rgr=i(GA),T(h8.$$.fragment,GA),GA.forEach(t),tgr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(l9.$$.fragment,Ea),agr=i(Ea),Ove=n(Ea,"P",{});var d6t=s(Ove);ngr=r(d6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),d6t.forEach(t),sgr=i(Ea),Ya=n(Ea,"P",{});var OA=s(Ya);lgr=r(OA,"The model class to instantiate is selected based on the "),Vve=n(OA,"CODE",{});var c6t=s(Vve);igr=r(c6t,"model_type"),c6t.forEach(t),dgr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Xve=n(OA,"CODE",{});var f6t=s(Xve);cgr=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),fgr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(OA,"CODE",{});var m6t=s(zve);mgr=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),ggr=r(OA,":"),OA.forEach(t),hgr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);p8=n(Be,"LI",{});var TNe=s(p8);Qve=n(TNe,"STRONG",{});var g6t=s(Qve);pgr=r(g6t,"data2vec-audio"),g6t.forEach(t),_gr=r(TNe," \u2014 "),gH=n(TNe,"A",{href:!0});var h6t=s(gH);ugr=r(h6t,"Data2VecAudioForCTC"),h6t.forEach(t),bgr=r(TNe," (Data2VecAudio model)"),TNe.forEach(t),vgr=i(Be),_8=n(Be,"LI",{});var MNe=s(_8);Wve=n(MNe,"STRONG",{});var p6t=s(Wve);Fgr=r(p6t,"hubert"),p6t.forEach(t),Tgr=r(MNe," \u2014 "),hH=n(MNe,"A",{href:!0});var _6t=s(hH);Mgr=r(_6t,"HubertForCTC"),_6t.forEach(t),Egr=r(MNe," (Hubert model)"),MNe.forEach(t),Cgr=i(Be),u8=n(Be,"LI",{});var ENe=s(u8);Hve=n(ENe,"STRONG",{});var u6t=s(Hve);wgr=r(u6t,"mctct"),u6t.forEach(t),Agr=r(ENe," \u2014 "),pH=n(ENe,"A",{href:!0});var b6t=s(pH);Lgr=r(b6t,"MCTCTForCTC"),b6t.forEach(t),ygr=r(ENe," (M-CTC-T model)"),ENe.forEach(t),xgr=i(Be),b8=n(Be,"LI",{});var CNe=s(b8);Uve=n(CNe,"STRONG",{});var v6t=s(Uve);$gr=r(v6t,"sew"),v6t.forEach(t),kgr=r(CNe," \u2014 "),_H=n(CNe,"A",{href:!0});var F6t=s(_H);Sgr=r(F6t,"SEWForCTC"),F6t.forEach(t),Rgr=r(CNe," (SEW model)"),CNe.forEach(t),Pgr=i(Be),v8=n(Be,"LI",{});var wNe=s(v8);Jve=n(wNe,"STRONG",{});var T6t=s(Jve);Bgr=r(T6t,"sew-d"),T6t.forEach(t),Igr=r(wNe," \u2014 "),uH=n(wNe,"A",{href:!0});var M6t=s(uH);Ngr=r(M6t,"SEWDForCTC"),M6t.forEach(t),qgr=r(wNe," (SEW-D model)"),wNe.forEach(t),jgr=i(Be),F8=n(Be,"LI",{});var ANe=s(F8);Yve=n(ANe,"STRONG",{});var E6t=s(Yve);Dgr=r(E6t,"unispeech"),E6t.forEach(t),Ggr=r(ANe," \u2014 "),bH=n(ANe,"A",{href:!0});var C6t=s(bH);Ogr=r(C6t,"UniSpeechForCTC"),C6t.forEach(t),Vgr=r(ANe," (UniSpeech model)"),ANe.forEach(t),Xgr=i(Be),T8=n(Be,"LI",{});var LNe=s(T8);Kve=n(LNe,"STRONG",{});var w6t=s(Kve);zgr=r(w6t,"unispeech-sat"),w6t.forEach(t),Qgr=r(LNe," \u2014 "),vH=n(LNe,"A",{href:!0});var A6t=s(vH);Wgr=r(A6t,"UniSpeechSatForCTC"),A6t.forEach(t),Hgr=r(LNe," (UniSpeechSat model)"),LNe.forEach(t),Ugr=i(Be),M8=n(Be,"LI",{});var yNe=s(M8);Zve=n(yNe,"STRONG",{});var L6t=s(Zve);Jgr=r(L6t,"wav2vec2"),L6t.forEach(t),Ygr=r(yNe," \u2014 "),FH=n(yNe,"A",{href:!0});var y6t=s(FH);Kgr=r(y6t,"Wav2Vec2ForCTC"),y6t.forEach(t),Zgr=r(yNe," (Wav2Vec2 model)"),yNe.forEach(t),ehr=i(Be),E8=n(Be,"LI",{});var xNe=s(E8);eFe=n(xNe,"STRONG",{});var x6t=s(eFe);ohr=r(x6t,"wav2vec2-conformer"),x6t.forEach(t),rhr=r(xNe," \u2014 "),TH=n(xNe,"A",{href:!0});var $6t=s(TH);thr=r($6t,"Wav2Vec2ConformerForCTC"),$6t.forEach(t),ahr=r(xNe," (Wav2Vec2-Conformer model)"),xNe.forEach(t),nhr=i(Be),C8=n(Be,"LI",{});var $Ne=s(C8);oFe=n($Ne,"STRONG",{});var k6t=s(oFe);shr=r(k6t,"wavlm"),k6t.forEach(t),lhr=r($Ne," \u2014 "),MH=n($Ne,"A",{href:!0});var S6t=s(MH);ihr=r(S6t,"WavLMForCTC"),S6t.forEach(t),dhr=r($Ne," (WavLM model)"),$Ne.forEach(t),Be.forEach(t),chr=i(Ea),w8=n(Ea,"P",{});var kNe=s(w8);fhr=r(kNe,"The model is set in evaluation mode by default using "),rFe=n(kNe,"CODE",{});var R6t=s(rFe);mhr=r(R6t,"model.eval()"),R6t.forEach(t),ghr=r(kNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tFe=n(kNe,"CODE",{});var P6t=s(tFe);hhr=r(P6t,"model.train()"),P6t.forEach(t),kNe.forEach(t),phr=i(Ea),T(A8.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),XXe=i(f),Nd=n(f,"H2",{class:!0});var JQe=s(Nd);L8=n(JQe,"A",{id:!0,class:!0,href:!0});var B6t=s(L8);aFe=n(B6t,"SPAN",{});var I6t=s(aFe);T(i9.$$.fragment,I6t),I6t.forEach(t),B6t.forEach(t),_hr=i(JQe),nFe=n(JQe,"SPAN",{});var N6t=s(nFe);uhr=r(N6t,"AutoModelForSpeechSeq2Seq"),N6t.forEach(t),JQe.forEach(t),zXe=i(f),Wo=n(f,"DIV",{class:!0});var bl=s(Wo);T(d9.$$.fragment,bl),bhr=i(bl),qd=n(bl,"P",{});var dte=s(qd);vhr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=n(dte,"A",{href:!0});var q6t=s(EH);Fhr=r(q6t,"from_pretrained()"),q6t.forEach(t),Thr=r(dte," class method or the "),CH=n(dte,"A",{href:!0});var j6t=s(CH);Mhr=r(j6t,"from_config()"),j6t.forEach(t),Ehr=r(dte,` class
method.`),dte.forEach(t),Chr=i(bl),c9=n(bl,"P",{});var YQe=s(c9);whr=r(YQe,"This class cannot be instantiated directly using "),sFe=n(YQe,"CODE",{});var D6t=s(sFe);Ahr=r(D6t,"__init__()"),D6t.forEach(t),Lhr=r(YQe," (throws an error)."),YQe.forEach(t),yhr=i(bl),wt=n(bl,"DIV",{class:!0});var VA=s(wt);T(f9.$$.fragment,VA),xhr=i(VA),lFe=n(VA,"P",{});var G6t=s(lFe);$hr=r(G6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),G6t.forEach(t),khr=i(VA),jd=n(VA,"P",{});var cte=s(jd);Shr=r(cte,`Note:
Loading a model from its configuration file does `),iFe=n(cte,"STRONG",{});var O6t=s(iFe);Rhr=r(O6t,"not"),O6t.forEach(t),Phr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(cte,"A",{href:!0});var V6t=s(wH);Bhr=r(V6t,"from_pretrained()"),V6t.forEach(t),Ihr=r(cte," to load the model weights."),cte.forEach(t),Nhr=i(VA),T(y8.$$.fragment,VA),VA.forEach(t),qhr=i(bl),ho=n(bl,"DIV",{class:!0});var Ca=s(ho);T(m9.$$.fragment,Ca),jhr=i(Ca),dFe=n(Ca,"P",{});var X6t=s(dFe);Dhr=r(X6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),X6t.forEach(t),Ghr=i(Ca),Ka=n(Ca,"P",{});var XA=s(Ka);Ohr=r(XA,"The model class to instantiate is selected based on the "),cFe=n(XA,"CODE",{});var z6t=s(cFe);Vhr=r(z6t,"model_type"),z6t.forEach(t),Xhr=r(XA,` property of the config object (either
passed as an argument or loaded from `),fFe=n(XA,"CODE",{});var Q6t=s(fFe);zhr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),Qhr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(XA,"CODE",{});var W6t=s(mFe);Whr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),Hhr=r(XA,":"),XA.forEach(t),Uhr=i(Ca),g9=n(Ca,"UL",{});var KQe=s(g9);x8=n(KQe,"LI",{});var SNe=s(x8);gFe=n(SNe,"STRONG",{});var H6t=s(gFe);Jhr=r(H6t,"speech-encoder-decoder"),H6t.forEach(t),Yhr=r(SNe," \u2014 "),AH=n(SNe,"A",{href:!0});var U6t=s(AH);Khr=r(U6t,"SpeechEncoderDecoderModel"),U6t.forEach(t),Zhr=r(SNe," (Speech Encoder decoder model)"),SNe.forEach(t),epr=i(KQe),$8=n(KQe,"LI",{});var RNe=s($8);hFe=n(RNe,"STRONG",{});var J6t=s(hFe);opr=r(J6t,"speech_to_text"),J6t.forEach(t),rpr=r(RNe," \u2014 "),LH=n(RNe,"A",{href:!0});var Y6t=s(LH);tpr=r(Y6t,"Speech2TextForConditionalGeneration"),Y6t.forEach(t),apr=r(RNe," (Speech2Text model)"),RNe.forEach(t),KQe.forEach(t),npr=i(Ca),k8=n(Ca,"P",{});var PNe=s(k8);spr=r(PNe,"The model is set in evaluation mode by default using "),pFe=n(PNe,"CODE",{});var K6t=s(pFe);lpr=r(K6t,"model.eval()"),K6t.forEach(t),ipr=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=n(PNe,"CODE",{});var Z6t=s(_Fe);dpr=r(Z6t,"model.train()"),Z6t.forEach(t),PNe.forEach(t),cpr=i(Ca),T(S8.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),QXe=i(f),Dd=n(f,"H2",{class:!0});var ZQe=s(Dd);R8=n(ZQe,"A",{id:!0,class:!0,href:!0});var eLt=s(R8);uFe=n(eLt,"SPAN",{});var oLt=s(uFe);T(h9.$$.fragment,oLt),oLt.forEach(t),eLt.forEach(t),fpr=i(ZQe),bFe=n(ZQe,"SPAN",{});var rLt=s(bFe);mpr=r(rLt,"AutoModelForAudioXVector"),rLt.forEach(t),ZQe.forEach(t),WXe=i(f),Ho=n(f,"DIV",{class:!0});var vl=s(Ho);T(p9.$$.fragment,vl),gpr=i(vl),Gd=n(vl,"P",{});var fte=s(Gd);hpr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=n(fte,"A",{href:!0});var tLt=s(yH);ppr=r(tLt,"from_pretrained()"),tLt.forEach(t),_pr=r(fte," class method or the "),xH=n(fte,"A",{href:!0});var aLt=s(xH);upr=r(aLt,"from_config()"),aLt.forEach(t),bpr=r(fte,` class
method.`),fte.forEach(t),vpr=i(vl),_9=n(vl,"P",{});var eWe=s(_9);Fpr=r(eWe,"This class cannot be instantiated directly using "),vFe=n(eWe,"CODE",{});var nLt=s(vFe);Tpr=r(nLt,"__init__()"),nLt.forEach(t),Mpr=r(eWe," (throws an error)."),eWe.forEach(t),Epr=i(vl),At=n(vl,"DIV",{class:!0});var zA=s(At);T(u9.$$.fragment,zA),Cpr=i(zA),FFe=n(zA,"P",{});var sLt=s(FFe);wpr=r(sLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sLt.forEach(t),Apr=i(zA),Od=n(zA,"P",{});var mte=s(Od);Lpr=r(mte,`Note:
Loading a model from its configuration file does `),TFe=n(mte,"STRONG",{});var lLt=s(TFe);ypr=r(lLt,"not"),lLt.forEach(t),xpr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(mte,"A",{href:!0});var iLt=s($H);$pr=r(iLt,"from_pretrained()"),iLt.forEach(t),kpr=r(mte," to load the model weights."),mte.forEach(t),Spr=i(zA),T(P8.$$.fragment,zA),zA.forEach(t),Rpr=i(vl),po=n(vl,"DIV",{class:!0});var wa=s(po);T(b9.$$.fragment,wa),Ppr=i(wa),MFe=n(wa,"P",{});var dLt=s(MFe);Bpr=r(dLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),dLt.forEach(t),Ipr=i(wa),Za=n(wa,"P",{});var QA=s(Za);Npr=r(QA,"The model class to instantiate is selected based on the "),EFe=n(QA,"CODE",{});var cLt=s(EFe);qpr=r(cLt,"model_type"),cLt.forEach(t),jpr=r(QA,` property of the config object (either
passed as an argument or loaded from `),CFe=n(QA,"CODE",{});var fLt=s(CFe);Dpr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),Gpr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(QA,"CODE",{});var mLt=s(wFe);Opr=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),Vpr=r(QA,":"),QA.forEach(t),Xpr=i(wa),ot=n(wa,"UL",{});var Fl=s(ot);B8=n(Fl,"LI",{});var BNe=s(B8);AFe=n(BNe,"STRONG",{});var gLt=s(AFe);zpr=r(gLt,"data2vec-audio"),gLt.forEach(t),Qpr=r(BNe," \u2014 "),kH=n(BNe,"A",{href:!0});var hLt=s(kH);Wpr=r(hLt,"Data2VecAudioForXVector"),hLt.forEach(t),Hpr=r(BNe," (Data2VecAudio model)"),BNe.forEach(t),Upr=i(Fl),I8=n(Fl,"LI",{});var INe=s(I8);LFe=n(INe,"STRONG",{});var pLt=s(LFe);Jpr=r(pLt,"unispeech-sat"),pLt.forEach(t),Ypr=r(INe," \u2014 "),SH=n(INe,"A",{href:!0});var _Lt=s(SH);Kpr=r(_Lt,"UniSpeechSatForXVector"),_Lt.forEach(t),Zpr=r(INe," (UniSpeechSat model)"),INe.forEach(t),e_r=i(Fl),N8=n(Fl,"LI",{});var NNe=s(N8);yFe=n(NNe,"STRONG",{});var uLt=s(yFe);o_r=r(uLt,"wav2vec2"),uLt.forEach(t),r_r=r(NNe," \u2014 "),RH=n(NNe,"A",{href:!0});var bLt=s(RH);t_r=r(bLt,"Wav2Vec2ForXVector"),bLt.forEach(t),a_r=r(NNe," (Wav2Vec2 model)"),NNe.forEach(t),n_r=i(Fl),q8=n(Fl,"LI",{});var qNe=s(q8);xFe=n(qNe,"STRONG",{});var vLt=s(xFe);s_r=r(vLt,"wav2vec2-conformer"),vLt.forEach(t),l_r=r(qNe," \u2014 "),PH=n(qNe,"A",{href:!0});var FLt=s(PH);i_r=r(FLt,"Wav2Vec2ConformerForXVector"),FLt.forEach(t),d_r=r(qNe," (Wav2Vec2-Conformer model)"),qNe.forEach(t),c_r=i(Fl),j8=n(Fl,"LI",{});var jNe=s(j8);$Fe=n(jNe,"STRONG",{});var TLt=s($Fe);f_r=r(TLt,"wavlm"),TLt.forEach(t),m_r=r(jNe," \u2014 "),BH=n(jNe,"A",{href:!0});var MLt=s(BH);g_r=r(MLt,"WavLMForXVector"),MLt.forEach(t),h_r=r(jNe," (WavLM model)"),jNe.forEach(t),Fl.forEach(t),p_r=i(wa),D8=n(wa,"P",{});var DNe=s(D8);__r=r(DNe,"The model is set in evaluation mode by default using "),kFe=n(DNe,"CODE",{});var ELt=s(kFe);u_r=r(ELt,"model.eval()"),ELt.forEach(t),b_r=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=n(DNe,"CODE",{});var CLt=s(SFe);v_r=r(CLt,"model.train()"),CLt.forEach(t),DNe.forEach(t),F_r=i(wa),T(G8.$$.fragment,wa),wa.forEach(t),vl.forEach(t),HXe=i(f),Vd=n(f,"H2",{class:!0});var oWe=s(Vd);O8=n(oWe,"A",{id:!0,class:!0,href:!0});var wLt=s(O8);RFe=n(wLt,"SPAN",{});var ALt=s(RFe);T(v9.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),T_r=i(oWe),PFe=n(oWe,"SPAN",{});var LLt=s(PFe);M_r=r(LLt,"AutoModelForMaskedImageModeling"),LLt.forEach(t),oWe.forEach(t),UXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(F9.$$.fragment,Tl),E_r=i(Tl),Xd=n(Tl,"P",{});var gte=s(Xd);C_r=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=n(gte,"A",{href:!0});var yLt=s(IH);w_r=r(yLt,"from_pretrained()"),yLt.forEach(t),A_r=r(gte," class method or the "),NH=n(gte,"A",{href:!0});var xLt=s(NH);L_r=r(xLt,"from_config()"),xLt.forEach(t),y_r=r(gte,` class
method.`),gte.forEach(t),x_r=i(Tl),T9=n(Tl,"P",{});var rWe=s(T9);$_r=r(rWe,"This class cannot be instantiated directly using "),BFe=n(rWe,"CODE",{});var $Lt=s(BFe);k_r=r($Lt,"__init__()"),$Lt.forEach(t),S_r=r(rWe," (throws an error)."),rWe.forEach(t),R_r=i(Tl),Lt=n(Tl,"DIV",{class:!0});var WA=s(Lt);T(M9.$$.fragment,WA),P_r=i(WA),IFe=n(WA,"P",{});var kLt=s(IFe);B_r=r(kLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kLt.forEach(t),I_r=i(WA),zd=n(WA,"P",{});var hte=s(zd);N_r=r(hte,`Note:
Loading a model from its configuration file does `),NFe=n(hte,"STRONG",{});var SLt=s(NFe);q_r=r(SLt,"not"),SLt.forEach(t),j_r=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(hte,"A",{href:!0});var RLt=s(qH);D_r=r(RLt,"from_pretrained()"),RLt.forEach(t),G_r=r(hte," to load the model weights."),hte.forEach(t),O_r=i(WA),T(V8.$$.fragment,WA),WA.forEach(t),V_r=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(E9.$$.fragment,Aa),X_r=i(Aa),qFe=n(Aa,"P",{});var PLt=s(qFe);z_r=r(PLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),PLt.forEach(t),Q_r=i(Aa),en=n(Aa,"P",{});var HA=s(en);W_r=r(HA,"The model class to instantiate is selected based on the "),jFe=n(HA,"CODE",{});var BLt=s(jFe);H_r=r(BLt,"model_type"),BLt.forEach(t),U_r=r(HA,` property of the config object (either
passed as an argument or loaded from `),DFe=n(HA,"CODE",{});var ILt=s(DFe);J_r=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),Y_r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(HA,"CODE",{});var NLt=s(GFe);K_r=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),Z_r=r(HA,":"),HA.forEach(t),eur=i(Aa),Qd=n(Aa,"UL",{});var pte=s(Qd);X8=n(pte,"LI",{});var GNe=s(X8);OFe=n(GNe,"STRONG",{});var qLt=s(OFe);our=r(qLt,"deit"),qLt.forEach(t),rur=r(GNe," \u2014 "),jH=n(GNe,"A",{href:!0});var jLt=s(jH);tur=r(jLt,"DeiTForMaskedImageModeling"),jLt.forEach(t),aur=r(GNe," (DeiT model)"),GNe.forEach(t),nur=i(pte),z8=n(pte,"LI",{});var ONe=s(z8);VFe=n(ONe,"STRONG",{});var DLt=s(VFe);sur=r(DLt,"swin"),DLt.forEach(t),lur=r(ONe," \u2014 "),DH=n(ONe,"A",{href:!0});var GLt=s(DH);iur=r(GLt,"SwinForMaskedImageModeling"),GLt.forEach(t),dur=r(ONe," (Swin Transformer model)"),ONe.forEach(t),cur=i(pte),Q8=n(pte,"LI",{});var VNe=s(Q8);XFe=n(VNe,"STRONG",{});var OLt=s(XFe);fur=r(OLt,"vit"),OLt.forEach(t),mur=r(VNe," \u2014 "),GH=n(VNe,"A",{href:!0});var VLt=s(GH);gur=r(VLt,"ViTForMaskedImageModeling"),VLt.forEach(t),hur=r(VNe," (ViT model)"),VNe.forEach(t),pte.forEach(t),pur=i(Aa),W8=n(Aa,"P",{});var XNe=s(W8);_ur=r(XNe,"The model is set in evaluation mode by default using "),zFe=n(XNe,"CODE",{});var XLt=s(zFe);uur=r(XLt,"model.eval()"),XLt.forEach(t),bur=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=n(XNe,"CODE",{});var zLt=s(QFe);vur=r(zLt,"model.train()"),zLt.forEach(t),XNe.forEach(t),Fur=i(Aa),T(H8.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),JXe=i(f),Wd=n(f,"H2",{class:!0});var tWe=s(Wd);U8=n(tWe,"A",{id:!0,class:!0,href:!0});var QLt=s(U8);WFe=n(QLt,"SPAN",{});var WLt=s(WFe);T(C9.$$.fragment,WLt),WLt.forEach(t),QLt.forEach(t),Tur=i(tWe),HFe=n(tWe,"SPAN",{});var HLt=s(HFe);Mur=r(HLt,"AutoModelForObjectDetection"),HLt.forEach(t),tWe.forEach(t),YXe=i(f),Jo=n(f,"DIV",{class:!0});var Ml=s(Jo);T(w9.$$.fragment,Ml),Eur=i(Ml),Hd=n(Ml,"P",{});var _te=s(Hd);Cur=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=n(_te,"A",{href:!0});var ULt=s(OH);wur=r(ULt,"from_pretrained()"),ULt.forEach(t),Aur=r(_te," class method or the "),VH=n(_te,"A",{href:!0});var JLt=s(VH);Lur=r(JLt,"from_config()"),JLt.forEach(t),yur=r(_te,` class
method.`),_te.forEach(t),xur=i(Ml),A9=n(Ml,"P",{});var aWe=s(A9);$ur=r(aWe,"This class cannot be instantiated directly using "),UFe=n(aWe,"CODE",{});var YLt=s(UFe);kur=r(YLt,"__init__()"),YLt.forEach(t),Sur=r(aWe," (throws an error)."),aWe.forEach(t),Rur=i(Ml),yt=n(Ml,"DIV",{class:!0});var UA=s(yt);T(L9.$$.fragment,UA),Pur=i(UA),JFe=n(UA,"P",{});var KLt=s(JFe);Bur=r(KLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),KLt.forEach(t),Iur=i(UA),Ud=n(UA,"P",{});var ute=s(Ud);Nur=r(ute,`Note:
Loading a model from its configuration file does `),YFe=n(ute,"STRONG",{});var ZLt=s(YFe);qur=r(ZLt,"not"),ZLt.forEach(t),jur=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(ute,"A",{href:!0});var eyt=s(XH);Dur=r(eyt,"from_pretrained()"),eyt.forEach(t),Gur=r(ute," to load the model weights."),ute.forEach(t),Our=i(UA),T(J8.$$.fragment,UA),UA.forEach(t),Vur=i(Ml),uo=n(Ml,"DIV",{class:!0});var La=s(uo);T(y9.$$.fragment,La),Xur=i(La),KFe=n(La,"P",{});var oyt=s(KFe);zur=r(oyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oyt.forEach(t),Qur=i(La),on=n(La,"P",{});var JA=s(on);Wur=r(JA,"The model class to instantiate is selected based on the "),ZFe=n(JA,"CODE",{});var ryt=s(ZFe);Hur=r(ryt,"model_type"),ryt.forEach(t),Uur=r(JA,` property of the config object (either
passed as an argument or loaded from `),eTe=n(JA,"CODE",{});var tyt=s(eTe);Jur=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),Yur=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(JA,"CODE",{});var ayt=s(oTe);Kur=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),Zur=r(JA,":"),JA.forEach(t),e1r=i(La),Jd=n(La,"UL",{});var bte=s(Jd);Y8=n(bte,"LI",{});var zNe=s(Y8);rTe=n(zNe,"STRONG",{});var nyt=s(rTe);o1r=r(nyt,"deformable_detr"),nyt.forEach(t),r1r=r(zNe," \u2014 "),zH=n(zNe,"A",{href:!0});var syt=s(zH);t1r=r(syt,"DeformableDetrForObjectDetection"),syt.forEach(t),a1r=r(zNe," (Deformable DETR model)"),zNe.forEach(t),n1r=i(bte),K8=n(bte,"LI",{});var QNe=s(K8);tTe=n(QNe,"STRONG",{});var lyt=s(tTe);s1r=r(lyt,"detr"),lyt.forEach(t),l1r=r(QNe," \u2014 "),QH=n(QNe,"A",{href:!0});var iyt=s(QH);i1r=r(iyt,"DetrForObjectDetection"),iyt.forEach(t),d1r=r(QNe," (DETR model)"),QNe.forEach(t),c1r=i(bte),Z8=n(bte,"LI",{});var WNe=s(Z8);aTe=n(WNe,"STRONG",{});var dyt=s(aTe);f1r=r(dyt,"yolos"),dyt.forEach(t),m1r=r(WNe," \u2014 "),WH=n(WNe,"A",{href:!0});var cyt=s(WH);g1r=r(cyt,"YolosForObjectDetection"),cyt.forEach(t),h1r=r(WNe," (YOLOS model)"),WNe.forEach(t),bte.forEach(t),p1r=i(La),eM=n(La,"P",{});var HNe=s(eM);_1r=r(HNe,"The model is set in evaluation mode by default using "),nTe=n(HNe,"CODE",{});var fyt=s(nTe);u1r=r(fyt,"model.eval()"),fyt.forEach(t),b1r=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sTe=n(HNe,"CODE",{});var myt=s(sTe);v1r=r(myt,"model.train()"),myt.forEach(t),HNe.forEach(t),F1r=i(La),T(oM.$$.fragment,La),La.forEach(t),Ml.forEach(t),KXe=i(f),Yd=n(f,"H2",{class:!0});var nWe=s(Yd);rM=n(nWe,"A",{id:!0,class:!0,href:!0});var gyt=s(rM);lTe=n(gyt,"SPAN",{});var hyt=s(lTe);T(x9.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),T1r=i(nWe),iTe=n(nWe,"SPAN",{});var pyt=s(iTe);M1r=r(pyt,"AutoModelForImageSegmentation"),pyt.forEach(t),nWe.forEach(t),ZXe=i(f),Yo=n(f,"DIV",{class:!0});var El=s(Yo);T($9.$$.fragment,El),E1r=i(El),Kd=n(El,"P",{});var vte=s(Kd);C1r=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),HH=n(vte,"A",{href:!0});var _yt=s(HH);w1r=r(_yt,"from_pretrained()"),_yt.forEach(t),A1r=r(vte," class method or the "),UH=n(vte,"A",{href:!0});var uyt=s(UH);L1r=r(uyt,"from_config()"),uyt.forEach(t),y1r=r(vte,` class
method.`),vte.forEach(t),x1r=i(El),k9=n(El,"P",{});var sWe=s(k9);$1r=r(sWe,"This class cannot be instantiated directly using "),dTe=n(sWe,"CODE",{});var byt=s(dTe);k1r=r(byt,"__init__()"),byt.forEach(t),S1r=r(sWe," (throws an error)."),sWe.forEach(t),R1r=i(El),xt=n(El,"DIV",{class:!0});var YA=s(xt);T(S9.$$.fragment,YA),P1r=i(YA),cTe=n(YA,"P",{});var vyt=s(cTe);B1r=r(vyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vyt.forEach(t),I1r=i(YA),Zd=n(YA,"P",{});var Fte=s(Zd);N1r=r(Fte,`Note:
Loading a model from its configuration file does `),fTe=n(Fte,"STRONG",{});var Fyt=s(fTe);q1r=r(Fyt,"not"),Fyt.forEach(t),j1r=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Fte,"A",{href:!0});var Tyt=s(JH);D1r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),G1r=r(Fte," to load the model weights."),Fte.forEach(t),O1r=i(YA),T(tM.$$.fragment,YA),YA.forEach(t),V1r=i(El),bo=n(El,"DIV",{class:!0});var ya=s(bo);T(R9.$$.fragment,ya),X1r=i(ya),mTe=n(ya,"P",{});var Myt=s(mTe);z1r=r(Myt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Myt.forEach(t),Q1r=i(ya),rn=n(ya,"P",{});var KA=s(rn);W1r=r(KA,"The model class to instantiate is selected based on the "),gTe=n(KA,"CODE",{});var Eyt=s(gTe);H1r=r(Eyt,"model_type"),Eyt.forEach(t),U1r=r(KA,` property of the config object (either
passed as an argument or loaded from `),hTe=n(KA,"CODE",{});var Cyt=s(hTe);J1r=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),Y1r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(KA,"CODE",{});var wyt=s(pTe);K1r=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),Z1r=r(KA,":"),KA.forEach(t),e2r=i(ya),_Te=n(ya,"UL",{});var Ayt=s(_Te);aM=n(Ayt,"LI",{});var UNe=s(aM);uTe=n(UNe,"STRONG",{});var Lyt=s(uTe);o2r=r(Lyt,"detr"),Lyt.forEach(t),r2r=r(UNe," \u2014 "),YH=n(UNe,"A",{href:!0});var yyt=s(YH);t2r=r(yyt,"DetrForSegmentation"),yyt.forEach(t),a2r=r(UNe," (DETR model)"),UNe.forEach(t),Ayt.forEach(t),n2r=i(ya),nM=n(ya,"P",{});var JNe=s(nM);s2r=r(JNe,"The model is set in evaluation mode by default using "),bTe=n(JNe,"CODE",{});var xyt=s(bTe);l2r=r(xyt,"model.eval()"),xyt.forEach(t),i2r=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vTe=n(JNe,"CODE",{});var $yt=s(vTe);d2r=r($yt,"model.train()"),$yt.forEach(t),JNe.forEach(t),c2r=i(ya),T(sM.$$.fragment,ya),ya.forEach(t),El.forEach(t),eze=i(f),ec=n(f,"H2",{class:!0});var lWe=s(ec);lM=n(lWe,"A",{id:!0,class:!0,href:!0});var kyt=s(lM);FTe=n(kyt,"SPAN",{});var Syt=s(FTe);T(P9.$$.fragment,Syt),Syt.forEach(t),kyt.forEach(t),f2r=i(lWe),TTe=n(lWe,"SPAN",{});var Ryt=s(TTe);m2r=r(Ryt,"AutoModelForSemanticSegmentation"),Ryt.forEach(t),lWe.forEach(t),oze=i(f),Ko=n(f,"DIV",{class:!0});var Cl=s(Ko);T(B9.$$.fragment,Cl),g2r=i(Cl),oc=n(Cl,"P",{});var Tte=s(oc);h2r=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),KH=n(Tte,"A",{href:!0});var Pyt=s(KH);p2r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),_2r=r(Tte," class method or the "),ZH=n(Tte,"A",{href:!0});var Byt=s(ZH);u2r=r(Byt,"from_config()"),Byt.forEach(t),b2r=r(Tte,` class
method.`),Tte.forEach(t),v2r=i(Cl),I9=n(Cl,"P",{});var iWe=s(I9);F2r=r(iWe,"This class cannot be instantiated directly using "),MTe=n(iWe,"CODE",{});var Iyt=s(MTe);T2r=r(Iyt,"__init__()"),Iyt.forEach(t),M2r=r(iWe," (throws an error)."),iWe.forEach(t),E2r=i(Cl),$t=n(Cl,"DIV",{class:!0});var ZA=s($t);T(N9.$$.fragment,ZA),C2r=i(ZA),ETe=n(ZA,"P",{});var Nyt=s(ETe);w2r=r(Nyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Nyt.forEach(t),A2r=i(ZA),rc=n(ZA,"P",{});var Mte=s(rc);L2r=r(Mte,`Note:
Loading a model from its configuration file does `),CTe=n(Mte,"STRONG",{});var qyt=s(CTe);y2r=r(qyt,"not"),qyt.forEach(t),x2r=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(Mte,"A",{href:!0});var jyt=s(eU);$2r=r(jyt,"from_pretrained()"),jyt.forEach(t),k2r=r(Mte," to load the model weights."),Mte.forEach(t),S2r=i(ZA),T(iM.$$.fragment,ZA),ZA.forEach(t),R2r=i(Cl),vo=n(Cl,"DIV",{class:!0});var xa=s(vo);T(q9.$$.fragment,xa),P2r=i(xa),wTe=n(xa,"P",{});var Dyt=s(wTe);B2r=r(Dyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dyt.forEach(t),I2r=i(xa),tn=n(xa,"P",{});var e6=s(tn);N2r=r(e6,"The model class to instantiate is selected based on the "),ATe=n(e6,"CODE",{});var Gyt=s(ATe);q2r=r(Gyt,"model_type"),Gyt.forEach(t),j2r=r(e6,` property of the config object (either
passed as an argument or loaded from `),LTe=n(e6,"CODE",{});var Oyt=s(LTe);D2r=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),G2r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(e6,"CODE",{});var Vyt=s(yTe);O2r=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),V2r=r(e6,":"),e6.forEach(t),X2r=i(xa),rt=n(xa,"UL",{});var wl=s(rt);dM=n(wl,"LI",{});var YNe=s(dM);xTe=n(YNe,"STRONG",{});var Xyt=s(xTe);z2r=r(Xyt,"beit"),Xyt.forEach(t),Q2r=r(YNe," \u2014 "),oU=n(YNe,"A",{href:!0});var zyt=s(oU);W2r=r(zyt,"BeitForSemanticSegmentation"),zyt.forEach(t),H2r=r(YNe," (BEiT model)"),YNe.forEach(t),U2r=i(wl),cM=n(wl,"LI",{});var KNe=s(cM);$Te=n(KNe,"STRONG",{});var Qyt=s($Te);J2r=r(Qyt,"data2vec-vision"),Qyt.forEach(t),Y2r=r(KNe," \u2014 "),rU=n(KNe,"A",{href:!0});var Wyt=s(rU);K2r=r(Wyt,"Data2VecVisionForSemanticSegmentation"),Wyt.forEach(t),Z2r=r(KNe," (Data2VecVision model)"),KNe.forEach(t),ebr=i(wl),fM=n(wl,"LI",{});var ZNe=s(fM);kTe=n(ZNe,"STRONG",{});var Hyt=s(kTe);obr=r(Hyt,"dpt"),Hyt.forEach(t),rbr=r(ZNe," \u2014 "),tU=n(ZNe,"A",{href:!0});var Uyt=s(tU);tbr=r(Uyt,"DPTForSemanticSegmentation"),Uyt.forEach(t),abr=r(ZNe," (DPT model)"),ZNe.forEach(t),nbr=i(wl),mM=n(wl,"LI",{});var eqe=s(mM);STe=n(eqe,"STRONG",{});var Jyt=s(STe);sbr=r(Jyt,"mobilevit"),Jyt.forEach(t),lbr=r(eqe," \u2014 "),aU=n(eqe,"A",{href:!0});var Yyt=s(aU);ibr=r(Yyt,"MobileViTForSemanticSegmentation"),Yyt.forEach(t),dbr=r(eqe," (MobileViT model)"),eqe.forEach(t),cbr=i(wl),gM=n(wl,"LI",{});var oqe=s(gM);RTe=n(oqe,"STRONG",{});var Kyt=s(RTe);fbr=r(Kyt,"segformer"),Kyt.forEach(t),mbr=r(oqe," \u2014 "),nU=n(oqe,"A",{href:!0});var Zyt=s(nU);gbr=r(Zyt,"SegformerForSemanticSegmentation"),Zyt.forEach(t),hbr=r(oqe," (SegFormer model)"),oqe.forEach(t),wl.forEach(t),pbr=i(xa),hM=n(xa,"P",{});var rqe=s(hM);_br=r(rqe,"The model is set in evaluation mode by default using "),PTe=n(rqe,"CODE",{});var e9t=s(PTe);ubr=r(e9t,"model.eval()"),e9t.forEach(t),bbr=r(rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BTe=n(rqe,"CODE",{});var o9t=s(BTe);vbr=r(o9t,"model.train()"),o9t.forEach(t),rqe.forEach(t),Fbr=i(xa),T(pM.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),rze=i(f),tc=n(f,"H2",{class:!0});var dWe=s(tc);_M=n(dWe,"A",{id:!0,class:!0,href:!0});var r9t=s(_M);ITe=n(r9t,"SPAN",{});var t9t=s(ITe);T(j9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),Tbr=i(dWe),NTe=n(dWe,"SPAN",{});var a9t=s(NTe);Mbr=r(a9t,"AutoModelForInstanceSegmentation"),a9t.forEach(t),dWe.forEach(t),tze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(D9.$$.fragment,Al),Ebr=i(Al),ac=n(Al,"P",{});var Ete=s(ac);Cbr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sU=n(Ete,"A",{href:!0});var n9t=s(sU);wbr=r(n9t,"from_pretrained()"),n9t.forEach(t),Abr=r(Ete," class method or the "),lU=n(Ete,"A",{href:!0});var s9t=s(lU);Lbr=r(s9t,"from_config()"),s9t.forEach(t),ybr=r(Ete,` class
method.`),Ete.forEach(t),xbr=i(Al),G9=n(Al,"P",{});var cWe=s(G9);$br=r(cWe,"This class cannot be instantiated directly using "),qTe=n(cWe,"CODE",{});var l9t=s(qTe);kbr=r(l9t,"__init__()"),l9t.forEach(t),Sbr=r(cWe," (throws an error)."),cWe.forEach(t),Rbr=i(Al),kt=n(Al,"DIV",{class:!0});var o6=s(kt);T(O9.$$.fragment,o6),Pbr=i(o6),jTe=n(o6,"P",{});var i9t=s(jTe);Bbr=r(i9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),i9t.forEach(t),Ibr=i(o6),nc=n(o6,"P",{});var Cte=s(nc);Nbr=r(Cte,`Note:
Loading a model from its configuration file does `),DTe=n(Cte,"STRONG",{});var d9t=s(DTe);qbr=r(d9t,"not"),d9t.forEach(t),jbr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Cte,"A",{href:!0});var c9t=s(iU);Dbr=r(c9t,"from_pretrained()"),c9t.forEach(t),Gbr=r(Cte," to load the model weights."),Cte.forEach(t),Obr=i(o6),T(uM.$$.fragment,o6),o6.forEach(t),Vbr=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(V9.$$.fragment,$a),Xbr=i($a),GTe=n($a,"P",{});var f9t=s(GTe);zbr=r(f9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),f9t.forEach(t),Qbr=i($a),an=n($a,"P",{});var r6=s(an);Wbr=r(r6,"The model class to instantiate is selected based on the "),OTe=n(r6,"CODE",{});var m9t=s(OTe);Hbr=r(m9t,"model_type"),m9t.forEach(t),Ubr=r(r6,` property of the config object (either
passed as an argument or loaded from `),VTe=n(r6,"CODE",{});var g9t=s(VTe);Jbr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),Ybr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(r6,"CODE",{});var h9t=s(XTe);Kbr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),Zbr=r(r6,":"),r6.forEach(t),evr=i($a),zTe=n($a,"UL",{});var p9t=s(zTe);bM=n(p9t,"LI",{});var tqe=s(bM);QTe=n(tqe,"STRONG",{});var _9t=s(QTe);ovr=r(_9t,"maskformer"),_9t.forEach(t),rvr=r(tqe," \u2014 "),dU=n(tqe,"A",{href:!0});var u9t=s(dU);tvr=r(u9t,"MaskFormerForInstanceSegmentation"),u9t.forEach(t),avr=r(tqe," (MaskFormer model)"),tqe.forEach(t),p9t.forEach(t),nvr=i($a),vM=n($a,"P",{});var aqe=s(vM);svr=r(aqe,"The model is set in evaluation mode by default using "),WTe=n(aqe,"CODE",{});var b9t=s(WTe);lvr=r(b9t,"model.eval()"),b9t.forEach(t),ivr=r(aqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HTe=n(aqe,"CODE",{});var v9t=s(HTe);dvr=r(v9t,"model.train()"),v9t.forEach(t),aqe.forEach(t),cvr=i($a),T(FM.$$.fragment,$a),$a.forEach(t),Al.forEach(t),aze=i(f),sc=n(f,"H2",{class:!0});var fWe=s(sc);TM=n(fWe,"A",{id:!0,class:!0,href:!0});var F9t=s(TM);UTe=n(F9t,"SPAN",{});var T9t=s(UTe);T(X9.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),fvr=i(fWe),JTe=n(fWe,"SPAN",{});var M9t=s(JTe);mvr=r(M9t,"TFAutoModel"),M9t.forEach(t),fWe.forEach(t),nze=i(f),er=n(f,"DIV",{class:!0});var Ll=s(er);T(z9.$$.fragment,Ll),gvr=i(Ll),lc=n(Ll,"P",{});var wte=s(lc);hvr=r(wte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cU=n(wte,"A",{href:!0});var E9t=s(cU);pvr=r(E9t,"from_pretrained()"),E9t.forEach(t),_vr=r(wte," class method or the "),fU=n(wte,"A",{href:!0});var C9t=s(fU);uvr=r(C9t,"from_config()"),C9t.forEach(t),bvr=r(wte,` class
method.`),wte.forEach(t),vvr=i(Ll),Q9=n(Ll,"P",{});var mWe=s(Q9);Fvr=r(mWe,"This class cannot be instantiated directly using "),YTe=n(mWe,"CODE",{});var w9t=s(YTe);Tvr=r(w9t,"__init__()"),w9t.forEach(t),Mvr=r(mWe," (throws an error)."),mWe.forEach(t),Evr=i(Ll),St=n(Ll,"DIV",{class:!0});var t6=s(St);T(W9.$$.fragment,t6),Cvr=i(t6),KTe=n(t6,"P",{});var A9t=s(KTe);wvr=r(A9t,"Instantiates one of the base model classes of the library from a configuration."),A9t.forEach(t),Avr=i(t6),ic=n(t6,"P",{});var Ate=s(ic);Lvr=r(Ate,`Note:
Loading a model from its configuration file does `),ZTe=n(Ate,"STRONG",{});var L9t=s(ZTe);yvr=r(L9t,"not"),L9t.forEach(t),xvr=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(Ate,"A",{href:!0});var y9t=s(mU);$vr=r(y9t,"from_pretrained()"),y9t.forEach(t),kvr=r(Ate," to load the model weights."),Ate.forEach(t),Svr=i(t6),T(MM.$$.fragment,t6),t6.forEach(t),Rvr=i(Ll),yr=n(Ll,"DIV",{class:!0});var yl=s(yr);T(H9.$$.fragment,yl),Pvr=i(yl),e7e=n(yl,"P",{});var x9t=s(e7e);Bvr=r(x9t,"Instantiate one of the base model classes of the library from a pretrained model."),x9t.forEach(t),Ivr=i(yl),nn=n(yl,"P",{});var a6=s(nn);Nvr=r(a6,"The model class to instantiate is selected based on the "),o7e=n(a6,"CODE",{});var $9t=s(o7e);qvr=r($9t,"model_type"),$9t.forEach(t),jvr=r(a6,` property of the config object (either
passed as an argument or loaded from `),r7e=n(a6,"CODE",{});var k9t=s(r7e);Dvr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),Gvr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(a6,"CODE",{});var S9t=s(t7e);Ovr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),Vvr=r(a6,":"),a6.forEach(t),Xvr=i(yl),j=n(yl,"UL",{});var D=s(j);EM=n(D,"LI",{});var nqe=s(EM);a7e=n(nqe,"STRONG",{});var R9t=s(a7e);zvr=r(R9t,"albert"),R9t.forEach(t),Qvr=r(nqe," \u2014 "),gU=n(nqe,"A",{href:!0});var P9t=s(gU);Wvr=r(P9t,"TFAlbertModel"),P9t.forEach(t),Hvr=r(nqe," (ALBERT model)"),nqe.forEach(t),Uvr=i(D),CM=n(D,"LI",{});var sqe=s(CM);n7e=n(sqe,"STRONG",{});var B9t=s(n7e);Jvr=r(B9t,"bart"),B9t.forEach(t),Yvr=r(sqe," \u2014 "),hU=n(sqe,"A",{href:!0});var I9t=s(hU);Kvr=r(I9t,"TFBartModel"),I9t.forEach(t),Zvr=r(sqe," (BART model)"),sqe.forEach(t),eFr=i(D),wM=n(D,"LI",{});var lqe=s(wM);s7e=n(lqe,"STRONG",{});var N9t=s(s7e);oFr=r(N9t,"bert"),N9t.forEach(t),rFr=r(lqe," \u2014 "),pU=n(lqe,"A",{href:!0});var q9t=s(pU);tFr=r(q9t,"TFBertModel"),q9t.forEach(t),aFr=r(lqe," (BERT model)"),lqe.forEach(t),nFr=i(D),AM=n(D,"LI",{});var iqe=s(AM);l7e=n(iqe,"STRONG",{});var j9t=s(l7e);sFr=r(j9t,"blenderbot"),j9t.forEach(t),lFr=r(iqe," \u2014 "),_U=n(iqe,"A",{href:!0});var D9t=s(_U);iFr=r(D9t,"TFBlenderbotModel"),D9t.forEach(t),dFr=r(iqe," (Blenderbot model)"),iqe.forEach(t),cFr=i(D),LM=n(D,"LI",{});var dqe=s(LM);i7e=n(dqe,"STRONG",{});var G9t=s(i7e);fFr=r(G9t,"blenderbot-small"),G9t.forEach(t),mFr=r(dqe," \u2014 "),uU=n(dqe,"A",{href:!0});var O9t=s(uU);gFr=r(O9t,"TFBlenderbotSmallModel"),O9t.forEach(t),hFr=r(dqe," (BlenderbotSmall model)"),dqe.forEach(t),pFr=i(D),yM=n(D,"LI",{});var cqe=s(yM);d7e=n(cqe,"STRONG",{});var V9t=s(d7e);_Fr=r(V9t,"camembert"),V9t.forEach(t),uFr=r(cqe," \u2014 "),bU=n(cqe,"A",{href:!0});var X9t=s(bU);bFr=r(X9t,"TFCamembertModel"),X9t.forEach(t),vFr=r(cqe," (CamemBERT model)"),cqe.forEach(t),FFr=i(D),xM=n(D,"LI",{});var fqe=s(xM);c7e=n(fqe,"STRONG",{});var z9t=s(c7e);TFr=r(z9t,"clip"),z9t.forEach(t),MFr=r(fqe," \u2014 "),vU=n(fqe,"A",{href:!0});var Q9t=s(vU);EFr=r(Q9t,"TFCLIPModel"),Q9t.forEach(t),CFr=r(fqe," (CLIP model)"),fqe.forEach(t),wFr=i(D),$M=n(D,"LI",{});var mqe=s($M);f7e=n(mqe,"STRONG",{});var W9t=s(f7e);AFr=r(W9t,"convbert"),W9t.forEach(t),LFr=r(mqe," \u2014 "),FU=n(mqe,"A",{href:!0});var H9t=s(FU);yFr=r(H9t,"TFConvBertModel"),H9t.forEach(t),xFr=r(mqe," (ConvBERT model)"),mqe.forEach(t),$Fr=i(D),kM=n(D,"LI",{});var gqe=s(kM);m7e=n(gqe,"STRONG",{});var U9t=s(m7e);kFr=r(U9t,"convnext"),U9t.forEach(t),SFr=r(gqe," \u2014 "),TU=n(gqe,"A",{href:!0});var J9t=s(TU);RFr=r(J9t,"TFConvNextModel"),J9t.forEach(t),PFr=r(gqe," (ConvNeXT model)"),gqe.forEach(t),BFr=i(D),SM=n(D,"LI",{});var hqe=s(SM);g7e=n(hqe,"STRONG",{});var Y9t=s(g7e);IFr=r(Y9t,"ctrl"),Y9t.forEach(t),NFr=r(hqe," \u2014 "),MU=n(hqe,"A",{href:!0});var K9t=s(MU);qFr=r(K9t,"TFCTRLModel"),K9t.forEach(t),jFr=r(hqe," (CTRL model)"),hqe.forEach(t),DFr=i(D),RM=n(D,"LI",{});var pqe=s(RM);h7e=n(pqe,"STRONG",{});var Z9t=s(h7e);GFr=r(Z9t,"data2vec-vision"),Z9t.forEach(t),OFr=r(pqe," \u2014 "),EU=n(pqe,"A",{href:!0});var ext=s(EU);VFr=r(ext,"TFData2VecVisionModel"),ext.forEach(t),XFr=r(pqe," (Data2VecVision model)"),pqe.forEach(t),zFr=i(D),PM=n(D,"LI",{});var _qe=s(PM);p7e=n(_qe,"STRONG",{});var oxt=s(p7e);QFr=r(oxt,"deberta"),oxt.forEach(t),WFr=r(_qe," \u2014 "),CU=n(_qe,"A",{href:!0});var rxt=s(CU);HFr=r(rxt,"TFDebertaModel"),rxt.forEach(t),UFr=r(_qe," (DeBERTa model)"),_qe.forEach(t),JFr=i(D),BM=n(D,"LI",{});var uqe=s(BM);_7e=n(uqe,"STRONG",{});var txt=s(_7e);YFr=r(txt,"deberta-v2"),txt.forEach(t),KFr=r(uqe," \u2014 "),wU=n(uqe,"A",{href:!0});var axt=s(wU);ZFr=r(axt,"TFDebertaV2Model"),axt.forEach(t),eTr=r(uqe," (DeBERTa-v2 model)"),uqe.forEach(t),oTr=i(D),IM=n(D,"LI",{});var bqe=s(IM);u7e=n(bqe,"STRONG",{});var nxt=s(u7e);rTr=r(nxt,"distilbert"),nxt.forEach(t),tTr=r(bqe," \u2014 "),AU=n(bqe,"A",{href:!0});var sxt=s(AU);aTr=r(sxt,"TFDistilBertModel"),sxt.forEach(t),nTr=r(bqe," (DistilBERT model)"),bqe.forEach(t),sTr=i(D),NM=n(D,"LI",{});var vqe=s(NM);b7e=n(vqe,"STRONG",{});var lxt=s(b7e);lTr=r(lxt,"dpr"),lxt.forEach(t),iTr=r(vqe," \u2014 "),LU=n(vqe,"A",{href:!0});var ixt=s(LU);dTr=r(ixt,"TFDPRQuestionEncoder"),ixt.forEach(t),cTr=r(vqe," (DPR model)"),vqe.forEach(t),fTr=i(D),qM=n(D,"LI",{});var Fqe=s(qM);v7e=n(Fqe,"STRONG",{});var dxt=s(v7e);mTr=r(dxt,"electra"),dxt.forEach(t),gTr=r(Fqe," \u2014 "),yU=n(Fqe,"A",{href:!0});var cxt=s(yU);hTr=r(cxt,"TFElectraModel"),cxt.forEach(t),pTr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),_Tr=i(D),jM=n(D,"LI",{});var Tqe=s(jM);F7e=n(Tqe,"STRONG",{});var fxt=s(F7e);uTr=r(fxt,"flaubert"),fxt.forEach(t),bTr=r(Tqe," \u2014 "),xU=n(Tqe,"A",{href:!0});var mxt=s(xU);vTr=r(mxt,"TFFlaubertModel"),mxt.forEach(t),FTr=r(Tqe," (FlauBERT model)"),Tqe.forEach(t),TTr=i(D),Us=n(D,"LI",{});var RS=s(Us);T7e=n(RS,"STRONG",{});var gxt=s(T7e);MTr=r(gxt,"funnel"),gxt.forEach(t),ETr=r(RS," \u2014 "),$U=n(RS,"A",{href:!0});var hxt=s($U);CTr=r(hxt,"TFFunnelModel"),hxt.forEach(t),wTr=r(RS," or "),kU=n(RS,"A",{href:!0});var pxt=s(kU);ATr=r(pxt,"TFFunnelBaseModel"),pxt.forEach(t),LTr=r(RS," (Funnel Transformer model)"),RS.forEach(t),yTr=i(D),DM=n(D,"LI",{});var Mqe=s(DM);M7e=n(Mqe,"STRONG",{});var _xt=s(M7e);xTr=r(_xt,"gpt2"),_xt.forEach(t),$Tr=r(Mqe," \u2014 "),SU=n(Mqe,"A",{href:!0});var uxt=s(SU);kTr=r(uxt,"TFGPT2Model"),uxt.forEach(t),STr=r(Mqe," (OpenAI GPT-2 model)"),Mqe.forEach(t),RTr=i(D),GM=n(D,"LI",{});var Eqe=s(GM);E7e=n(Eqe,"STRONG",{});var bxt=s(E7e);PTr=r(bxt,"gptj"),bxt.forEach(t),BTr=r(Eqe," \u2014 "),RU=n(Eqe,"A",{href:!0});var vxt=s(RU);ITr=r(vxt,"TFGPTJModel"),vxt.forEach(t),NTr=r(Eqe," (GPT-J model)"),Eqe.forEach(t),qTr=i(D),OM=n(D,"LI",{});var Cqe=s(OM);C7e=n(Cqe,"STRONG",{});var Fxt=s(C7e);jTr=r(Fxt,"hubert"),Fxt.forEach(t),DTr=r(Cqe," \u2014 "),PU=n(Cqe,"A",{href:!0});var Txt=s(PU);GTr=r(Txt,"TFHubertModel"),Txt.forEach(t),OTr=r(Cqe," (Hubert model)"),Cqe.forEach(t),VTr=i(D),VM=n(D,"LI",{});var wqe=s(VM);w7e=n(wqe,"STRONG",{});var Mxt=s(w7e);XTr=r(Mxt,"layoutlm"),Mxt.forEach(t),zTr=r(wqe," \u2014 "),BU=n(wqe,"A",{href:!0});var Ext=s(BU);QTr=r(Ext,"TFLayoutLMModel"),Ext.forEach(t),WTr=r(wqe," (LayoutLM model)"),wqe.forEach(t),HTr=i(D),XM=n(D,"LI",{});var Aqe=s(XM);A7e=n(Aqe,"STRONG",{});var Cxt=s(A7e);UTr=r(Cxt,"led"),Cxt.forEach(t),JTr=r(Aqe," \u2014 "),IU=n(Aqe,"A",{href:!0});var wxt=s(IU);YTr=r(wxt,"TFLEDModel"),wxt.forEach(t),KTr=r(Aqe," (LED model)"),Aqe.forEach(t),ZTr=i(D),zM=n(D,"LI",{});var Lqe=s(zM);L7e=n(Lqe,"STRONG",{});var Axt=s(L7e);e7r=r(Axt,"longformer"),Axt.forEach(t),o7r=r(Lqe," \u2014 "),NU=n(Lqe,"A",{href:!0});var Lxt=s(NU);r7r=r(Lxt,"TFLongformerModel"),Lxt.forEach(t),t7r=r(Lqe," (Longformer model)"),Lqe.forEach(t),a7r=i(D),QM=n(D,"LI",{});var yqe=s(QM);y7e=n(yqe,"STRONG",{});var yxt=s(y7e);n7r=r(yxt,"lxmert"),yxt.forEach(t),s7r=r(yqe," \u2014 "),qU=n(yqe,"A",{href:!0});var xxt=s(qU);l7r=r(xxt,"TFLxmertModel"),xxt.forEach(t),i7r=r(yqe," (LXMERT model)"),yqe.forEach(t),d7r=i(D),WM=n(D,"LI",{});var xqe=s(WM);x7e=n(xqe,"STRONG",{});var $xt=s(x7e);c7r=r($xt,"marian"),$xt.forEach(t),f7r=r(xqe," \u2014 "),jU=n(xqe,"A",{href:!0});var kxt=s(jU);m7r=r(kxt,"TFMarianModel"),kxt.forEach(t),g7r=r(xqe," (Marian model)"),xqe.forEach(t),h7r=i(D),HM=n(D,"LI",{});var $qe=s(HM);$7e=n($qe,"STRONG",{});var Sxt=s($7e);p7r=r(Sxt,"mbart"),Sxt.forEach(t),_7r=r($qe," \u2014 "),DU=n($qe,"A",{href:!0});var Rxt=s(DU);u7r=r(Rxt,"TFMBartModel"),Rxt.forEach(t),b7r=r($qe," (mBART model)"),$qe.forEach(t),v7r=i(D),UM=n(D,"LI",{});var kqe=s(UM);k7e=n(kqe,"STRONG",{});var Pxt=s(k7e);F7r=r(Pxt,"mobilebert"),Pxt.forEach(t),T7r=r(kqe," \u2014 "),GU=n(kqe,"A",{href:!0});var Bxt=s(GU);M7r=r(Bxt,"TFMobileBertModel"),Bxt.forEach(t),E7r=r(kqe," (MobileBERT model)"),kqe.forEach(t),C7r=i(D),JM=n(D,"LI",{});var Sqe=s(JM);S7e=n(Sqe,"STRONG",{});var Ixt=s(S7e);w7r=r(Ixt,"mpnet"),Ixt.forEach(t),A7r=r(Sqe," \u2014 "),OU=n(Sqe,"A",{href:!0});var Nxt=s(OU);L7r=r(Nxt,"TFMPNetModel"),Nxt.forEach(t),y7r=r(Sqe," (MPNet model)"),Sqe.forEach(t),x7r=i(D),YM=n(D,"LI",{});var Rqe=s(YM);R7e=n(Rqe,"STRONG",{});var qxt=s(R7e);$7r=r(qxt,"mt5"),qxt.forEach(t),k7r=r(Rqe," \u2014 "),VU=n(Rqe,"A",{href:!0});var jxt=s(VU);S7r=r(jxt,"TFMT5Model"),jxt.forEach(t),R7r=r(Rqe," (MT5 model)"),Rqe.forEach(t),P7r=i(D),KM=n(D,"LI",{});var Pqe=s(KM);P7e=n(Pqe,"STRONG",{});var Dxt=s(P7e);B7r=r(Dxt,"openai-gpt"),Dxt.forEach(t),I7r=r(Pqe," \u2014 "),XU=n(Pqe,"A",{href:!0});var Gxt=s(XU);N7r=r(Gxt,"TFOpenAIGPTModel"),Gxt.forEach(t),q7r=r(Pqe," (OpenAI GPT model)"),Pqe.forEach(t),j7r=i(D),ZM=n(D,"LI",{});var Bqe=s(ZM);B7e=n(Bqe,"STRONG",{});var Oxt=s(B7e);D7r=r(Oxt,"opt"),Oxt.forEach(t),G7r=r(Bqe," \u2014 "),zU=n(Bqe,"A",{href:!0});var Vxt=s(zU);O7r=r(Vxt,"TFOPTModel"),Vxt.forEach(t),V7r=r(Bqe," (OPT model)"),Bqe.forEach(t),X7r=i(D),e4=n(D,"LI",{});var Iqe=s(e4);I7e=n(Iqe,"STRONG",{});var Xxt=s(I7e);z7r=r(Xxt,"pegasus"),Xxt.forEach(t),Q7r=r(Iqe," \u2014 "),QU=n(Iqe,"A",{href:!0});var zxt=s(QU);W7r=r(zxt,"TFPegasusModel"),zxt.forEach(t),H7r=r(Iqe," (Pegasus model)"),Iqe.forEach(t),U7r=i(D),o4=n(D,"LI",{});var Nqe=s(o4);N7e=n(Nqe,"STRONG",{});var Qxt=s(N7e);J7r=r(Qxt,"regnet"),Qxt.forEach(t),Y7r=r(Nqe," \u2014 "),WU=n(Nqe,"A",{href:!0});var Wxt=s(WU);K7r=r(Wxt,"TFRegNetModel"),Wxt.forEach(t),Z7r=r(Nqe," (RegNet model)"),Nqe.forEach(t),e8r=i(D),r4=n(D,"LI",{});var qqe=s(r4);q7e=n(qqe,"STRONG",{});var Hxt=s(q7e);o8r=r(Hxt,"rembert"),Hxt.forEach(t),r8r=r(qqe," \u2014 "),HU=n(qqe,"A",{href:!0});var Uxt=s(HU);t8r=r(Uxt,"TFRemBertModel"),Uxt.forEach(t),a8r=r(qqe," (RemBERT model)"),qqe.forEach(t),n8r=i(D),t4=n(D,"LI",{});var jqe=s(t4);j7e=n(jqe,"STRONG",{});var Jxt=s(j7e);s8r=r(Jxt,"roberta"),Jxt.forEach(t),l8r=r(jqe," \u2014 "),UU=n(jqe,"A",{href:!0});var Yxt=s(UU);i8r=r(Yxt,"TFRobertaModel"),Yxt.forEach(t),d8r=r(jqe," (RoBERTa model)"),jqe.forEach(t),c8r=i(D),a4=n(D,"LI",{});var Dqe=s(a4);D7e=n(Dqe,"STRONG",{});var Kxt=s(D7e);f8r=r(Kxt,"roformer"),Kxt.forEach(t),m8r=r(Dqe," \u2014 "),JU=n(Dqe,"A",{href:!0});var Zxt=s(JU);g8r=r(Zxt,"TFRoFormerModel"),Zxt.forEach(t),h8r=r(Dqe," (RoFormer model)"),Dqe.forEach(t),p8r=i(D),n4=n(D,"LI",{});var Gqe=s(n4);G7e=n(Gqe,"STRONG",{});var e$t=s(G7e);_8r=r(e$t,"speech_to_text"),e$t.forEach(t),u8r=r(Gqe," \u2014 "),YU=n(Gqe,"A",{href:!0});var o$t=s(YU);b8r=r(o$t,"TFSpeech2TextModel"),o$t.forEach(t),v8r=r(Gqe," (Speech2Text model)"),Gqe.forEach(t),F8r=i(D),s4=n(D,"LI",{});var Oqe=s(s4);O7e=n(Oqe,"STRONG",{});var r$t=s(O7e);T8r=r(r$t,"swin"),r$t.forEach(t),M8r=r(Oqe," \u2014 "),KU=n(Oqe,"A",{href:!0});var t$t=s(KU);E8r=r(t$t,"TFSwinModel"),t$t.forEach(t),C8r=r(Oqe," (Swin Transformer model)"),Oqe.forEach(t),w8r=i(D),l4=n(D,"LI",{});var Vqe=s(l4);V7e=n(Vqe,"STRONG",{});var a$t=s(V7e);A8r=r(a$t,"t5"),a$t.forEach(t),L8r=r(Vqe," \u2014 "),ZU=n(Vqe,"A",{href:!0});var n$t=s(ZU);y8r=r(n$t,"TFT5Model"),n$t.forEach(t),x8r=r(Vqe," (T5 model)"),Vqe.forEach(t),$8r=i(D),i4=n(D,"LI",{});var Xqe=s(i4);X7e=n(Xqe,"STRONG",{});var s$t=s(X7e);k8r=r(s$t,"tapas"),s$t.forEach(t),S8r=r(Xqe," \u2014 "),eJ=n(Xqe,"A",{href:!0});var l$t=s(eJ);R8r=r(l$t,"TFTapasModel"),l$t.forEach(t),P8r=r(Xqe," (TAPAS model)"),Xqe.forEach(t),B8r=i(D),d4=n(D,"LI",{});var zqe=s(d4);z7e=n(zqe,"STRONG",{});var i$t=s(z7e);I8r=r(i$t,"transfo-xl"),i$t.forEach(t),N8r=r(zqe," \u2014 "),oJ=n(zqe,"A",{href:!0});var d$t=s(oJ);q8r=r(d$t,"TFTransfoXLModel"),d$t.forEach(t),j8r=r(zqe," (Transformer-XL model)"),zqe.forEach(t),D8r=i(D),c4=n(D,"LI",{});var Qqe=s(c4);Q7e=n(Qqe,"STRONG",{});var c$t=s(Q7e);G8r=r(c$t,"vit"),c$t.forEach(t),O8r=r(Qqe," \u2014 "),rJ=n(Qqe,"A",{href:!0});var f$t=s(rJ);V8r=r(f$t,"TFViTModel"),f$t.forEach(t),X8r=r(Qqe," (ViT model)"),Qqe.forEach(t),z8r=i(D),f4=n(D,"LI",{});var Wqe=s(f4);W7e=n(Wqe,"STRONG",{});var m$t=s(W7e);Q8r=r(m$t,"vit_mae"),m$t.forEach(t),W8r=r(Wqe," \u2014 "),tJ=n(Wqe,"A",{href:!0});var g$t=s(tJ);H8r=r(g$t,"TFViTMAEModel"),g$t.forEach(t),U8r=r(Wqe," (ViTMAE model)"),Wqe.forEach(t),J8r=i(D),m4=n(D,"LI",{});var Hqe=s(m4);H7e=n(Hqe,"STRONG",{});var h$t=s(H7e);Y8r=r(h$t,"wav2vec2"),h$t.forEach(t),K8r=r(Hqe," \u2014 "),aJ=n(Hqe,"A",{href:!0});var p$t=s(aJ);Z8r=r(p$t,"TFWav2Vec2Model"),p$t.forEach(t),eMr=r(Hqe," (Wav2Vec2 model)"),Hqe.forEach(t),oMr=i(D),g4=n(D,"LI",{});var Uqe=s(g4);U7e=n(Uqe,"STRONG",{});var _$t=s(U7e);rMr=r(_$t,"xlm"),_$t.forEach(t),tMr=r(Uqe," \u2014 "),nJ=n(Uqe,"A",{href:!0});var u$t=s(nJ);aMr=r(u$t,"TFXLMModel"),u$t.forEach(t),nMr=r(Uqe," (XLM model)"),Uqe.forEach(t),sMr=i(D),h4=n(D,"LI",{});var Jqe=s(h4);J7e=n(Jqe,"STRONG",{});var b$t=s(J7e);lMr=r(b$t,"xlm-roberta"),b$t.forEach(t),iMr=r(Jqe," \u2014 "),sJ=n(Jqe,"A",{href:!0});var v$t=s(sJ);dMr=r(v$t,"TFXLMRobertaModel"),v$t.forEach(t),cMr=r(Jqe," (XLM-RoBERTa model)"),Jqe.forEach(t),fMr=i(D),p4=n(D,"LI",{});var Yqe=s(p4);Y7e=n(Yqe,"STRONG",{});var F$t=s(Y7e);mMr=r(F$t,"xlnet"),F$t.forEach(t),gMr=r(Yqe," \u2014 "),lJ=n(Yqe,"A",{href:!0});var T$t=s(lJ);hMr=r(T$t,"TFXLNetModel"),T$t.forEach(t),pMr=r(Yqe," (XLNet model)"),Yqe.forEach(t),D.forEach(t),_Mr=i(yl),T(_4.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),sze=i(f),dc=n(f,"H2",{class:!0});var gWe=s(dc);u4=n(gWe,"A",{id:!0,class:!0,href:!0});var M$t=s(u4);K7e=n(M$t,"SPAN",{});var E$t=s(K7e);T(U9.$$.fragment,E$t),E$t.forEach(t),M$t.forEach(t),uMr=i(gWe),Z7e=n(gWe,"SPAN",{});var C$t=s(Z7e);bMr=r(C$t,"TFAutoModelForPreTraining"),C$t.forEach(t),gWe.forEach(t),lze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(J9.$$.fragment,xl),vMr=i(xl),cc=n(xl,"P",{});var Lte=s(cc);FMr=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iJ=n(Lte,"A",{href:!0});var w$t=s(iJ);TMr=r(w$t,"from_pretrained()"),w$t.forEach(t),MMr=r(Lte," class method or the "),dJ=n(Lte,"A",{href:!0});var A$t=s(dJ);EMr=r(A$t,"from_config()"),A$t.forEach(t),CMr=r(Lte,` class
method.`),Lte.forEach(t),wMr=i(xl),Y9=n(xl,"P",{});var hWe=s(Y9);AMr=r(hWe,"This class cannot be instantiated directly using "),e8e=n(hWe,"CODE",{});var L$t=s(e8e);LMr=r(L$t,"__init__()"),L$t.forEach(t),yMr=r(hWe," (throws an error)."),hWe.forEach(t),xMr=i(xl),Rt=n(xl,"DIV",{class:!0});var n6=s(Rt);T(K9.$$.fragment,n6),$Mr=i(n6),o8e=n(n6,"P",{});var y$t=s(o8e);kMr=r(y$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y$t.forEach(t),SMr=i(n6),fc=n(n6,"P",{});var yte=s(fc);RMr=r(yte,`Note:
Loading a model from its configuration file does `),r8e=n(yte,"STRONG",{});var x$t=s(r8e);PMr=r(x$t,"not"),x$t.forEach(t),BMr=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(yte,"A",{href:!0});var $$t=s(cJ);IMr=r($$t,"from_pretrained()"),$$t.forEach(t),NMr=r(yte," to load the model weights."),yte.forEach(t),qMr=i(n6),T(b4.$$.fragment,n6),n6.forEach(t),jMr=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(Z9.$$.fragment,$l),DMr=i($l),t8e=n($l,"P",{});var k$t=s(t8e);GMr=r(k$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),k$t.forEach(t),OMr=i($l),sn=n($l,"P",{});var s6=s(sn);VMr=r(s6,"The model class to instantiate is selected based on the "),a8e=n(s6,"CODE",{});var S$t=s(a8e);XMr=r(S$t,"model_type"),S$t.forEach(t),zMr=r(s6,` property of the config object (either
passed as an argument or loaded from `),n8e=n(s6,"CODE",{});var R$t=s(n8e);QMr=r(R$t,"pretrained_model_name_or_path"),R$t.forEach(t),WMr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=n(s6,"CODE",{});var P$t=s(s8e);HMr=r(P$t,"pretrained_model_name_or_path"),P$t.forEach(t),UMr=r(s6,":"),s6.forEach(t),JMr=i($l),se=n($l,"UL",{});var le=s(se);v4=n(le,"LI",{});var Kqe=s(v4);l8e=n(Kqe,"STRONG",{});var B$t=s(l8e);YMr=r(B$t,"albert"),B$t.forEach(t),KMr=r(Kqe," \u2014 "),fJ=n(Kqe,"A",{href:!0});var I$t=s(fJ);ZMr=r(I$t,"TFAlbertForPreTraining"),I$t.forEach(t),e4r=r(Kqe," (ALBERT model)"),Kqe.forEach(t),o4r=i(le),F4=n(le,"LI",{});var Zqe=s(F4);i8e=n(Zqe,"STRONG",{});var N$t=s(i8e);r4r=r(N$t,"bart"),N$t.forEach(t),t4r=r(Zqe," \u2014 "),mJ=n(Zqe,"A",{href:!0});var q$t=s(mJ);a4r=r(q$t,"TFBartForConditionalGeneration"),q$t.forEach(t),n4r=r(Zqe," (BART model)"),Zqe.forEach(t),s4r=i(le),T4=n(le,"LI",{});var eje=s(T4);d8e=n(eje,"STRONG",{});var j$t=s(d8e);l4r=r(j$t,"bert"),j$t.forEach(t),i4r=r(eje," \u2014 "),gJ=n(eje,"A",{href:!0});var D$t=s(gJ);d4r=r(D$t,"TFBertForPreTraining"),D$t.forEach(t),c4r=r(eje," (BERT model)"),eje.forEach(t),f4r=i(le),M4=n(le,"LI",{});var oje=s(M4);c8e=n(oje,"STRONG",{});var G$t=s(c8e);m4r=r(G$t,"camembert"),G$t.forEach(t),g4r=r(oje," \u2014 "),hJ=n(oje,"A",{href:!0});var O$t=s(hJ);h4r=r(O$t,"TFCamembertForMaskedLM"),O$t.forEach(t),p4r=r(oje," (CamemBERT model)"),oje.forEach(t),_4r=i(le),E4=n(le,"LI",{});var rje=s(E4);f8e=n(rje,"STRONG",{});var V$t=s(f8e);u4r=r(V$t,"ctrl"),V$t.forEach(t),b4r=r(rje," \u2014 "),pJ=n(rje,"A",{href:!0});var X$t=s(pJ);v4r=r(X$t,"TFCTRLLMHeadModel"),X$t.forEach(t),F4r=r(rje," (CTRL model)"),rje.forEach(t),T4r=i(le),C4=n(le,"LI",{});var tje=s(C4);m8e=n(tje,"STRONG",{});var z$t=s(m8e);M4r=r(z$t,"distilbert"),z$t.forEach(t),E4r=r(tje," \u2014 "),_J=n(tje,"A",{href:!0});var Q$t=s(_J);C4r=r(Q$t,"TFDistilBertForMaskedLM"),Q$t.forEach(t),w4r=r(tje," (DistilBERT model)"),tje.forEach(t),A4r=i(le),w4=n(le,"LI",{});var aje=s(w4);g8e=n(aje,"STRONG",{});var W$t=s(g8e);L4r=r(W$t,"electra"),W$t.forEach(t),y4r=r(aje," \u2014 "),uJ=n(aje,"A",{href:!0});var H$t=s(uJ);x4r=r(H$t,"TFElectraForPreTraining"),H$t.forEach(t),$4r=r(aje," (ELECTRA model)"),aje.forEach(t),k4r=i(le),A4=n(le,"LI",{});var nje=s(A4);h8e=n(nje,"STRONG",{});var U$t=s(h8e);S4r=r(U$t,"flaubert"),U$t.forEach(t),R4r=r(nje," \u2014 "),bJ=n(nje,"A",{href:!0});var J$t=s(bJ);P4r=r(J$t,"TFFlaubertWithLMHeadModel"),J$t.forEach(t),B4r=r(nje," (FlauBERT model)"),nje.forEach(t),I4r=i(le),L4=n(le,"LI",{});var sje=s(L4);p8e=n(sje,"STRONG",{});var Y$t=s(p8e);N4r=r(Y$t,"funnel"),Y$t.forEach(t),q4r=r(sje," \u2014 "),vJ=n(sje,"A",{href:!0});var K$t=s(vJ);j4r=r(K$t,"TFFunnelForPreTraining"),K$t.forEach(t),D4r=r(sje," (Funnel Transformer model)"),sje.forEach(t),G4r=i(le),y4=n(le,"LI",{});var lje=s(y4);_8e=n(lje,"STRONG",{});var Z$t=s(_8e);O4r=r(Z$t,"gpt2"),Z$t.forEach(t),V4r=r(lje," \u2014 "),FJ=n(lje,"A",{href:!0});var ekt=s(FJ);X4r=r(ekt,"TFGPT2LMHeadModel"),ekt.forEach(t),z4r=r(lje," (OpenAI GPT-2 model)"),lje.forEach(t),Q4r=i(le),x4=n(le,"LI",{});var ije=s(x4);u8e=n(ije,"STRONG",{});var okt=s(u8e);W4r=r(okt,"layoutlm"),okt.forEach(t),H4r=r(ije," \u2014 "),TJ=n(ije,"A",{href:!0});var rkt=s(TJ);U4r=r(rkt,"TFLayoutLMForMaskedLM"),rkt.forEach(t),J4r=r(ije," (LayoutLM model)"),ije.forEach(t),Y4r=i(le),$4=n(le,"LI",{});var dje=s($4);b8e=n(dje,"STRONG",{});var tkt=s(b8e);K4r=r(tkt,"lxmert"),tkt.forEach(t),Z4r=r(dje," \u2014 "),MJ=n(dje,"A",{href:!0});var akt=s(MJ);eEr=r(akt,"TFLxmertForPreTraining"),akt.forEach(t),oEr=r(dje," (LXMERT model)"),dje.forEach(t),rEr=i(le),k4=n(le,"LI",{});var cje=s(k4);v8e=n(cje,"STRONG",{});var nkt=s(v8e);tEr=r(nkt,"mobilebert"),nkt.forEach(t),aEr=r(cje," \u2014 "),EJ=n(cje,"A",{href:!0});var skt=s(EJ);nEr=r(skt,"TFMobileBertForPreTraining"),skt.forEach(t),sEr=r(cje," (MobileBERT model)"),cje.forEach(t),lEr=i(le),S4=n(le,"LI",{});var fje=s(S4);F8e=n(fje,"STRONG",{});var lkt=s(F8e);iEr=r(lkt,"mpnet"),lkt.forEach(t),dEr=r(fje," \u2014 "),CJ=n(fje,"A",{href:!0});var ikt=s(CJ);cEr=r(ikt,"TFMPNetForMaskedLM"),ikt.forEach(t),fEr=r(fje," (MPNet model)"),fje.forEach(t),mEr=i(le),R4=n(le,"LI",{});var mje=s(R4);T8e=n(mje,"STRONG",{});var dkt=s(T8e);gEr=r(dkt,"openai-gpt"),dkt.forEach(t),hEr=r(mje," \u2014 "),wJ=n(mje,"A",{href:!0});var ckt=s(wJ);pEr=r(ckt,"TFOpenAIGPTLMHeadModel"),ckt.forEach(t),_Er=r(mje," (OpenAI GPT model)"),mje.forEach(t),uEr=i(le),P4=n(le,"LI",{});var gje=s(P4);M8e=n(gje,"STRONG",{});var fkt=s(M8e);bEr=r(fkt,"roberta"),fkt.forEach(t),vEr=r(gje," \u2014 "),AJ=n(gje,"A",{href:!0});var mkt=s(AJ);FEr=r(mkt,"TFRobertaForMaskedLM"),mkt.forEach(t),TEr=r(gje," (RoBERTa model)"),gje.forEach(t),MEr=i(le),B4=n(le,"LI",{});var hje=s(B4);E8e=n(hje,"STRONG",{});var gkt=s(E8e);EEr=r(gkt,"t5"),gkt.forEach(t),CEr=r(hje," \u2014 "),LJ=n(hje,"A",{href:!0});var hkt=s(LJ);wEr=r(hkt,"TFT5ForConditionalGeneration"),hkt.forEach(t),AEr=r(hje," (T5 model)"),hje.forEach(t),LEr=i(le),I4=n(le,"LI",{});var pje=s(I4);C8e=n(pje,"STRONG",{});var pkt=s(C8e);yEr=r(pkt,"tapas"),pkt.forEach(t),xEr=r(pje," \u2014 "),yJ=n(pje,"A",{href:!0});var _kt=s(yJ);$Er=r(_kt,"TFTapasForMaskedLM"),_kt.forEach(t),kEr=r(pje," (TAPAS model)"),pje.forEach(t),SEr=i(le),N4=n(le,"LI",{});var _je=s(N4);w8e=n(_je,"STRONG",{});var ukt=s(w8e);REr=r(ukt,"transfo-xl"),ukt.forEach(t),PEr=r(_je," \u2014 "),xJ=n(_je,"A",{href:!0});var bkt=s(xJ);BEr=r(bkt,"TFTransfoXLLMHeadModel"),bkt.forEach(t),IEr=r(_je," (Transformer-XL model)"),_je.forEach(t),NEr=i(le),q4=n(le,"LI",{});var uje=s(q4);A8e=n(uje,"STRONG",{});var vkt=s(A8e);qEr=r(vkt,"vit_mae"),vkt.forEach(t),jEr=r(uje," \u2014 "),$J=n(uje,"A",{href:!0});var Fkt=s($J);DEr=r(Fkt,"TFViTMAEForPreTraining"),Fkt.forEach(t),GEr=r(uje," (ViTMAE model)"),uje.forEach(t),OEr=i(le),j4=n(le,"LI",{});var bje=s(j4);L8e=n(bje,"STRONG",{});var Tkt=s(L8e);VEr=r(Tkt,"xlm"),Tkt.forEach(t),XEr=r(bje," \u2014 "),kJ=n(bje,"A",{href:!0});var Mkt=s(kJ);zEr=r(Mkt,"TFXLMWithLMHeadModel"),Mkt.forEach(t),QEr=r(bje," (XLM model)"),bje.forEach(t),WEr=i(le),D4=n(le,"LI",{});var vje=s(D4);y8e=n(vje,"STRONG",{});var Ekt=s(y8e);HEr=r(Ekt,"xlm-roberta"),Ekt.forEach(t),UEr=r(vje," \u2014 "),SJ=n(vje,"A",{href:!0});var Ckt=s(SJ);JEr=r(Ckt,"TFXLMRobertaForMaskedLM"),Ckt.forEach(t),YEr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),KEr=i(le),G4=n(le,"LI",{});var Fje=s(G4);x8e=n(Fje,"STRONG",{});var wkt=s(x8e);ZEr=r(wkt,"xlnet"),wkt.forEach(t),eCr=r(Fje," \u2014 "),RJ=n(Fje,"A",{href:!0});var Akt=s(RJ);oCr=r(Akt,"TFXLNetLMHeadModel"),Akt.forEach(t),rCr=r(Fje," (XLNet model)"),Fje.forEach(t),le.forEach(t),tCr=i($l),T(O4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),ize=i(f),mc=n(f,"H2",{class:!0});var pWe=s(mc);V4=n(pWe,"A",{id:!0,class:!0,href:!0});var Lkt=s(V4);$8e=n(Lkt,"SPAN",{});var ykt=s($8e);T(ex.$$.fragment,ykt),ykt.forEach(t),Lkt.forEach(t),aCr=i(pWe),k8e=n(pWe,"SPAN",{});var xkt=s(k8e);nCr=r(xkt,"TFAutoModelForCausalLM"),xkt.forEach(t),pWe.forEach(t),dze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(ox.$$.fragment,kl),sCr=i(kl),gc=n(kl,"P",{});var xte=s(gc);lCr=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PJ=n(xte,"A",{href:!0});var $kt=s(PJ);iCr=r($kt,"from_pretrained()"),$kt.forEach(t),dCr=r(xte," class method or the "),BJ=n(xte,"A",{href:!0});var kkt=s(BJ);cCr=r(kkt,"from_config()"),kkt.forEach(t),fCr=r(xte,` class
method.`),xte.forEach(t),mCr=i(kl),rx=n(kl,"P",{});var _We=s(rx);gCr=r(_We,"This class cannot be instantiated directly using "),S8e=n(_We,"CODE",{});var Skt=s(S8e);hCr=r(Skt,"__init__()"),Skt.forEach(t),pCr=r(_We," (throws an error)."),_We.forEach(t),_Cr=i(kl),Pt=n(kl,"DIV",{class:!0});var l6=s(Pt);T(tx.$$.fragment,l6),uCr=i(l6),R8e=n(l6,"P",{});var Rkt=s(R8e);bCr=r(Rkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rkt.forEach(t),vCr=i(l6),hc=n(l6,"P",{});var $te=s(hc);FCr=r($te,`Note:
Loading a model from its configuration file does `),P8e=n($te,"STRONG",{});var Pkt=s(P8e);TCr=r(Pkt,"not"),Pkt.forEach(t),MCr=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n($te,"A",{href:!0});var Bkt=s(IJ);ECr=r(Bkt,"from_pretrained()"),Bkt.forEach(t),CCr=r($te," to load the model weights."),$te.forEach(t),wCr=i(l6),T(X4.$$.fragment,l6),l6.forEach(t),ACr=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(ax.$$.fragment,Sl),LCr=i(Sl),B8e=n(Sl,"P",{});var Ikt=s(B8e);yCr=r(Ikt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ikt.forEach(t),xCr=i(Sl),ln=n(Sl,"P",{});var i6=s(ln);$Cr=r(i6,"The model class to instantiate is selected based on the "),I8e=n(i6,"CODE",{});var Nkt=s(I8e);kCr=r(Nkt,"model_type"),Nkt.forEach(t),SCr=r(i6,` property of the config object (either
passed as an argument or loaded from `),N8e=n(i6,"CODE",{});var qkt=s(N8e);RCr=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),PCr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=n(i6,"CODE",{});var jkt=s(q8e);BCr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),ICr=r(i6,":"),i6.forEach(t),NCr=i(Sl),Me=n(Sl,"UL",{});var Ce=s(Me);z4=n(Ce,"LI",{});var Tje=s(z4);j8e=n(Tje,"STRONG",{});var Dkt=s(j8e);qCr=r(Dkt,"bert"),Dkt.forEach(t),jCr=r(Tje," \u2014 "),NJ=n(Tje,"A",{href:!0});var Gkt=s(NJ);DCr=r(Gkt,"TFBertLMHeadModel"),Gkt.forEach(t),GCr=r(Tje," (BERT model)"),Tje.forEach(t),OCr=i(Ce),Q4=n(Ce,"LI",{});var Mje=s(Q4);D8e=n(Mje,"STRONG",{});var Okt=s(D8e);VCr=r(Okt,"camembert"),Okt.forEach(t),XCr=r(Mje," \u2014 "),qJ=n(Mje,"A",{href:!0});var Vkt=s(qJ);zCr=r(Vkt,"TFCamembertForCausalLM"),Vkt.forEach(t),QCr=r(Mje," (CamemBERT model)"),Mje.forEach(t),WCr=i(Ce),W4=n(Ce,"LI",{});var Eje=s(W4);G8e=n(Eje,"STRONG",{});var Xkt=s(G8e);HCr=r(Xkt,"ctrl"),Xkt.forEach(t),UCr=r(Eje," \u2014 "),jJ=n(Eje,"A",{href:!0});var zkt=s(jJ);JCr=r(zkt,"TFCTRLLMHeadModel"),zkt.forEach(t),YCr=r(Eje," (CTRL model)"),Eje.forEach(t),KCr=i(Ce),H4=n(Ce,"LI",{});var Cje=s(H4);O8e=n(Cje,"STRONG",{});var Qkt=s(O8e);ZCr=r(Qkt,"gpt2"),Qkt.forEach(t),e3r=r(Cje," \u2014 "),DJ=n(Cje,"A",{href:!0});var Wkt=s(DJ);o3r=r(Wkt,"TFGPT2LMHeadModel"),Wkt.forEach(t),r3r=r(Cje," (OpenAI GPT-2 model)"),Cje.forEach(t),t3r=i(Ce),U4=n(Ce,"LI",{});var wje=s(U4);V8e=n(wje,"STRONG",{});var Hkt=s(V8e);a3r=r(Hkt,"gptj"),Hkt.forEach(t),n3r=r(wje," \u2014 "),GJ=n(wje,"A",{href:!0});var Ukt=s(GJ);s3r=r(Ukt,"TFGPTJForCausalLM"),Ukt.forEach(t),l3r=r(wje," (GPT-J model)"),wje.forEach(t),i3r=i(Ce),J4=n(Ce,"LI",{});var Aje=s(J4);X8e=n(Aje,"STRONG",{});var Jkt=s(X8e);d3r=r(Jkt,"openai-gpt"),Jkt.forEach(t),c3r=r(Aje," \u2014 "),OJ=n(Aje,"A",{href:!0});var Ykt=s(OJ);f3r=r(Ykt,"TFOpenAIGPTLMHeadModel"),Ykt.forEach(t),m3r=r(Aje," (OpenAI GPT model)"),Aje.forEach(t),g3r=i(Ce),Y4=n(Ce,"LI",{});var Lje=s(Y4);z8e=n(Lje,"STRONG",{});var Kkt=s(z8e);h3r=r(Kkt,"opt"),Kkt.forEach(t),p3r=r(Lje," \u2014 "),VJ=n(Lje,"A",{href:!0});var Zkt=s(VJ);_3r=r(Zkt,"TFOPTForCausalLM"),Zkt.forEach(t),u3r=r(Lje," (OPT model)"),Lje.forEach(t),b3r=i(Ce),K4=n(Ce,"LI",{});var yje=s(K4);Q8e=n(yje,"STRONG",{});var eSt=s(Q8e);v3r=r(eSt,"rembert"),eSt.forEach(t),F3r=r(yje," \u2014 "),XJ=n(yje,"A",{href:!0});var oSt=s(XJ);T3r=r(oSt,"TFRemBertForCausalLM"),oSt.forEach(t),M3r=r(yje," (RemBERT model)"),yje.forEach(t),E3r=i(Ce),Z4=n(Ce,"LI",{});var xje=s(Z4);W8e=n(xje,"STRONG",{});var rSt=s(W8e);C3r=r(rSt,"roberta"),rSt.forEach(t),w3r=r(xje," \u2014 "),zJ=n(xje,"A",{href:!0});var tSt=s(zJ);A3r=r(tSt,"TFRobertaForCausalLM"),tSt.forEach(t),L3r=r(xje," (RoBERTa model)"),xje.forEach(t),y3r=i(Ce),eE=n(Ce,"LI",{});var $je=s(eE);H8e=n($je,"STRONG",{});var aSt=s(H8e);x3r=r(aSt,"roformer"),aSt.forEach(t),$3r=r($je," \u2014 "),QJ=n($je,"A",{href:!0});var nSt=s(QJ);k3r=r(nSt,"TFRoFormerForCausalLM"),nSt.forEach(t),S3r=r($je," (RoFormer model)"),$je.forEach(t),R3r=i(Ce),oE=n(Ce,"LI",{});var kje=s(oE);U8e=n(kje,"STRONG",{});var sSt=s(U8e);P3r=r(sSt,"transfo-xl"),sSt.forEach(t),B3r=r(kje," \u2014 "),WJ=n(kje,"A",{href:!0});var lSt=s(WJ);I3r=r(lSt,"TFTransfoXLLMHeadModel"),lSt.forEach(t),N3r=r(kje," (Transformer-XL model)"),kje.forEach(t),q3r=i(Ce),rE=n(Ce,"LI",{});var Sje=s(rE);J8e=n(Sje,"STRONG",{});var iSt=s(J8e);j3r=r(iSt,"xlm"),iSt.forEach(t),D3r=r(Sje," \u2014 "),HJ=n(Sje,"A",{href:!0});var dSt=s(HJ);G3r=r(dSt,"TFXLMWithLMHeadModel"),dSt.forEach(t),O3r=r(Sje," (XLM model)"),Sje.forEach(t),V3r=i(Ce),tE=n(Ce,"LI",{});var Rje=s(tE);Y8e=n(Rje,"STRONG",{});var cSt=s(Y8e);X3r=r(cSt,"xlnet"),cSt.forEach(t),z3r=r(Rje," \u2014 "),UJ=n(Rje,"A",{href:!0});var fSt=s(UJ);Q3r=r(fSt,"TFXLNetLMHeadModel"),fSt.forEach(t),W3r=r(Rje," (XLNet model)"),Rje.forEach(t),Ce.forEach(t),H3r=i(Sl),T(aE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),cze=i(f),pc=n(f,"H2",{class:!0});var uWe=s(pc);nE=n(uWe,"A",{id:!0,class:!0,href:!0});var mSt=s(nE);K8e=n(mSt,"SPAN",{});var gSt=s(K8e);T(nx.$$.fragment,gSt),gSt.forEach(t),mSt.forEach(t),U3r=i(uWe),Z8e=n(uWe,"SPAN",{});var hSt=s(Z8e);J3r=r(hSt,"TFAutoModelForImageClassification"),hSt.forEach(t),uWe.forEach(t),fze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(sx.$$.fragment,Rl),Y3r=i(Rl),_c=n(Rl,"P",{});var kte=s(_c);K3r=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JJ=n(kte,"A",{href:!0});var pSt=s(JJ);Z3r=r(pSt,"from_pretrained()"),pSt.forEach(t),e5r=r(kte," class method or the "),YJ=n(kte,"A",{href:!0});var _St=s(YJ);o5r=r(_St,"from_config()"),_St.forEach(t),r5r=r(kte,` class
method.`),kte.forEach(t),t5r=i(Rl),lx=n(Rl,"P",{});var bWe=s(lx);a5r=r(bWe,"This class cannot be instantiated directly using "),eMe=n(bWe,"CODE",{});var uSt=s(eMe);n5r=r(uSt,"__init__()"),uSt.forEach(t),s5r=r(bWe," (throws an error)."),bWe.forEach(t),l5r=i(Rl),Bt=n(Rl,"DIV",{class:!0});var d6=s(Bt);T(ix.$$.fragment,d6),i5r=i(d6),oMe=n(d6,"P",{});var bSt=s(oMe);d5r=r(bSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bSt.forEach(t),c5r=i(d6),uc=n(d6,"P",{});var Ste=s(uc);f5r=r(Ste,`Note:
Loading a model from its configuration file does `),rMe=n(Ste,"STRONG",{});var vSt=s(rMe);m5r=r(vSt,"not"),vSt.forEach(t),g5r=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(Ste,"A",{href:!0});var FSt=s(KJ);h5r=r(FSt,"from_pretrained()"),FSt.forEach(t),p5r=r(Ste," to load the model weights."),Ste.forEach(t),_5r=i(d6),T(sE.$$.fragment,d6),d6.forEach(t),u5r=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(dx.$$.fragment,Pl),b5r=i(Pl),tMe=n(Pl,"P",{});var TSt=s(tMe);v5r=r(TSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TSt.forEach(t),F5r=i(Pl),dn=n(Pl,"P",{});var c6=s(dn);T5r=r(c6,"The model class to instantiate is selected based on the "),aMe=n(c6,"CODE",{});var MSt=s(aMe);M5r=r(MSt,"model_type"),MSt.forEach(t),E5r=r(c6,` property of the config object (either
passed as an argument or loaded from `),nMe=n(c6,"CODE",{});var ESt=s(nMe);C5r=r(ESt,"pretrained_model_name_or_path"),ESt.forEach(t),w5r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(c6,"CODE",{});var CSt=s(sMe);A5r=r(CSt,"pretrained_model_name_or_path"),CSt.forEach(t),L5r=r(c6,":"),c6.forEach(t),y5r=i(Pl),tt=n(Pl,"UL",{});var Bl=s(tt);lE=n(Bl,"LI",{});var Pje=s(lE);lMe=n(Pje,"STRONG",{});var wSt=s(lMe);x5r=r(wSt,"convnext"),wSt.forEach(t),$5r=r(Pje," \u2014 "),ZJ=n(Pje,"A",{href:!0});var ASt=s(ZJ);k5r=r(ASt,"TFConvNextForImageClassification"),ASt.forEach(t),S5r=r(Pje," (ConvNeXT model)"),Pje.forEach(t),R5r=i(Bl),iE=n(Bl,"LI",{});var Bje=s(iE);iMe=n(Bje,"STRONG",{});var LSt=s(iMe);P5r=r(LSt,"data2vec-vision"),LSt.forEach(t),B5r=r(Bje," \u2014 "),eY=n(Bje,"A",{href:!0});var ySt=s(eY);I5r=r(ySt,"TFData2VecVisionForImageClassification"),ySt.forEach(t),N5r=r(Bje," (Data2VecVision model)"),Bje.forEach(t),q5r=i(Bl),dE=n(Bl,"LI",{});var Ije=s(dE);dMe=n(Ije,"STRONG",{});var xSt=s(dMe);j5r=r(xSt,"regnet"),xSt.forEach(t),D5r=r(Ije," \u2014 "),oY=n(Ije,"A",{href:!0});var $St=s(oY);G5r=r($St,"TFRegNetForImageClassification"),$St.forEach(t),O5r=r(Ije," (RegNet model)"),Ije.forEach(t),V5r=i(Bl),cE=n(Bl,"LI",{});var Nje=s(cE);cMe=n(Nje,"STRONG",{});var kSt=s(cMe);X5r=r(kSt,"swin"),kSt.forEach(t),z5r=r(Nje," \u2014 "),rY=n(Nje,"A",{href:!0});var SSt=s(rY);Q5r=r(SSt,"TFSwinForImageClassification"),SSt.forEach(t),W5r=r(Nje," (Swin Transformer model)"),Nje.forEach(t),H5r=i(Bl),fE=n(Bl,"LI",{});var qje=s(fE);fMe=n(qje,"STRONG",{});var RSt=s(fMe);U5r=r(RSt,"vit"),RSt.forEach(t),J5r=r(qje," \u2014 "),tY=n(qje,"A",{href:!0});var PSt=s(tY);Y5r=r(PSt,"TFViTForImageClassification"),PSt.forEach(t),K5r=r(qje," (ViT model)"),qje.forEach(t),Bl.forEach(t),Z5r=i(Pl),T(mE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),mze=i(f),bc=n(f,"H2",{class:!0});var vWe=s(bc);gE=n(vWe,"A",{id:!0,class:!0,href:!0});var BSt=s(gE);mMe=n(BSt,"SPAN",{});var ISt=s(mMe);T(cx.$$.fragment,ISt),ISt.forEach(t),BSt.forEach(t),e0r=i(vWe),gMe=n(vWe,"SPAN",{});var NSt=s(gMe);o0r=r(NSt,"TFAutoModelForMaskedLM"),NSt.forEach(t),vWe.forEach(t),gze=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(fx.$$.fragment,Il),r0r=i(Il),vc=n(Il,"P",{});var Rte=s(vc);t0r=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=n(Rte,"A",{href:!0});var qSt=s(aY);a0r=r(qSt,"from_pretrained()"),qSt.forEach(t),n0r=r(Rte," class method or the "),nY=n(Rte,"A",{href:!0});var jSt=s(nY);s0r=r(jSt,"from_config()"),jSt.forEach(t),l0r=r(Rte,` class
method.`),Rte.forEach(t),i0r=i(Il),mx=n(Il,"P",{});var FWe=s(mx);d0r=r(FWe,"This class cannot be instantiated directly using "),hMe=n(FWe,"CODE",{});var DSt=s(hMe);c0r=r(DSt,"__init__()"),DSt.forEach(t),f0r=r(FWe," (throws an error)."),FWe.forEach(t),m0r=i(Il),It=n(Il,"DIV",{class:!0});var f6=s(It);T(gx.$$.fragment,f6),g0r=i(f6),pMe=n(f6,"P",{});var GSt=s(pMe);h0r=r(GSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GSt.forEach(t),p0r=i(f6),Fc=n(f6,"P",{});var Pte=s(Fc);_0r=r(Pte,`Note:
Loading a model from its configuration file does `),_Me=n(Pte,"STRONG",{});var OSt=s(_Me);u0r=r(OSt,"not"),OSt.forEach(t),b0r=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(Pte,"A",{href:!0});var VSt=s(sY);v0r=r(VSt,"from_pretrained()"),VSt.forEach(t),F0r=r(Pte," to load the model weights."),Pte.forEach(t),T0r=i(f6),T(hE.$$.fragment,f6),f6.forEach(t),M0r=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(hx.$$.fragment,Nl),E0r=i(Nl),uMe=n(Nl,"P",{});var XSt=s(uMe);C0r=r(XSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XSt.forEach(t),w0r=i(Nl),cn=n(Nl,"P",{});var m6=s(cn);A0r=r(m6,"The model class to instantiate is selected based on the "),bMe=n(m6,"CODE",{});var zSt=s(bMe);L0r=r(zSt,"model_type"),zSt.forEach(t),y0r=r(m6,` property of the config object (either
passed as an argument or loaded from `),vMe=n(m6,"CODE",{});var QSt=s(vMe);x0r=r(QSt,"pretrained_model_name_or_path"),QSt.forEach(t),$0r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(m6,"CODE",{});var WSt=s(FMe);k0r=r(WSt,"pretrained_model_name_or_path"),WSt.forEach(t),S0r=r(m6,":"),m6.forEach(t),R0r=i(Nl),ie=n(Nl,"UL",{});var fe=s(ie);pE=n(fe,"LI",{});var jje=s(pE);TMe=n(jje,"STRONG",{});var HSt=s(TMe);P0r=r(HSt,"albert"),HSt.forEach(t),B0r=r(jje," \u2014 "),lY=n(jje,"A",{href:!0});var USt=s(lY);I0r=r(USt,"TFAlbertForMaskedLM"),USt.forEach(t),N0r=r(jje," (ALBERT model)"),jje.forEach(t),q0r=i(fe),_E=n(fe,"LI",{});var Dje=s(_E);MMe=n(Dje,"STRONG",{});var JSt=s(MMe);j0r=r(JSt,"bert"),JSt.forEach(t),D0r=r(Dje," \u2014 "),iY=n(Dje,"A",{href:!0});var YSt=s(iY);G0r=r(YSt,"TFBertForMaskedLM"),YSt.forEach(t),O0r=r(Dje," (BERT model)"),Dje.forEach(t),V0r=i(fe),uE=n(fe,"LI",{});var Gje=s(uE);EMe=n(Gje,"STRONG",{});var KSt=s(EMe);X0r=r(KSt,"camembert"),KSt.forEach(t),z0r=r(Gje," \u2014 "),dY=n(Gje,"A",{href:!0});var ZSt=s(dY);Q0r=r(ZSt,"TFCamembertForMaskedLM"),ZSt.forEach(t),W0r=r(Gje," (CamemBERT model)"),Gje.forEach(t),H0r=i(fe),bE=n(fe,"LI",{});var Oje=s(bE);CMe=n(Oje,"STRONG",{});var eRt=s(CMe);U0r=r(eRt,"convbert"),eRt.forEach(t),J0r=r(Oje," \u2014 "),cY=n(Oje,"A",{href:!0});var oRt=s(cY);Y0r=r(oRt,"TFConvBertForMaskedLM"),oRt.forEach(t),K0r=r(Oje," (ConvBERT model)"),Oje.forEach(t),Z0r=i(fe),vE=n(fe,"LI",{});var Vje=s(vE);wMe=n(Vje,"STRONG",{});var rRt=s(wMe);ewr=r(rRt,"deberta"),rRt.forEach(t),owr=r(Vje," \u2014 "),fY=n(Vje,"A",{href:!0});var tRt=s(fY);rwr=r(tRt,"TFDebertaForMaskedLM"),tRt.forEach(t),twr=r(Vje," (DeBERTa model)"),Vje.forEach(t),awr=i(fe),FE=n(fe,"LI",{});var Xje=s(FE);AMe=n(Xje,"STRONG",{});var aRt=s(AMe);nwr=r(aRt,"deberta-v2"),aRt.forEach(t),swr=r(Xje," \u2014 "),mY=n(Xje,"A",{href:!0});var nRt=s(mY);lwr=r(nRt,"TFDebertaV2ForMaskedLM"),nRt.forEach(t),iwr=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),dwr=i(fe),TE=n(fe,"LI",{});var zje=s(TE);LMe=n(zje,"STRONG",{});var sRt=s(LMe);cwr=r(sRt,"distilbert"),sRt.forEach(t),fwr=r(zje," \u2014 "),gY=n(zje,"A",{href:!0});var lRt=s(gY);mwr=r(lRt,"TFDistilBertForMaskedLM"),lRt.forEach(t),gwr=r(zje," (DistilBERT model)"),zje.forEach(t),hwr=i(fe),ME=n(fe,"LI",{});var Qje=s(ME);yMe=n(Qje,"STRONG",{});var iRt=s(yMe);pwr=r(iRt,"electra"),iRt.forEach(t),_wr=r(Qje," \u2014 "),hY=n(Qje,"A",{href:!0});var dRt=s(hY);uwr=r(dRt,"TFElectraForMaskedLM"),dRt.forEach(t),bwr=r(Qje," (ELECTRA model)"),Qje.forEach(t),vwr=i(fe),EE=n(fe,"LI",{});var Wje=s(EE);xMe=n(Wje,"STRONG",{});var cRt=s(xMe);Fwr=r(cRt,"flaubert"),cRt.forEach(t),Twr=r(Wje," \u2014 "),pY=n(Wje,"A",{href:!0});var fRt=s(pY);Mwr=r(fRt,"TFFlaubertWithLMHeadModel"),fRt.forEach(t),Ewr=r(Wje," (FlauBERT model)"),Wje.forEach(t),Cwr=i(fe),CE=n(fe,"LI",{});var Hje=s(CE);$Me=n(Hje,"STRONG",{});var mRt=s($Me);wwr=r(mRt,"funnel"),mRt.forEach(t),Awr=r(Hje," \u2014 "),_Y=n(Hje,"A",{href:!0});var gRt=s(_Y);Lwr=r(gRt,"TFFunnelForMaskedLM"),gRt.forEach(t),ywr=r(Hje," (Funnel Transformer model)"),Hje.forEach(t),xwr=i(fe),wE=n(fe,"LI",{});var Uje=s(wE);kMe=n(Uje,"STRONG",{});var hRt=s(kMe);$wr=r(hRt,"layoutlm"),hRt.forEach(t),kwr=r(Uje," \u2014 "),uY=n(Uje,"A",{href:!0});var pRt=s(uY);Swr=r(pRt,"TFLayoutLMForMaskedLM"),pRt.forEach(t),Rwr=r(Uje," (LayoutLM model)"),Uje.forEach(t),Pwr=i(fe),AE=n(fe,"LI",{});var Jje=s(AE);SMe=n(Jje,"STRONG",{});var _Rt=s(SMe);Bwr=r(_Rt,"longformer"),_Rt.forEach(t),Iwr=r(Jje," \u2014 "),bY=n(Jje,"A",{href:!0});var uRt=s(bY);Nwr=r(uRt,"TFLongformerForMaskedLM"),uRt.forEach(t),qwr=r(Jje," (Longformer model)"),Jje.forEach(t),jwr=i(fe),LE=n(fe,"LI",{});var Yje=s(LE);RMe=n(Yje,"STRONG",{});var bRt=s(RMe);Dwr=r(bRt,"mobilebert"),bRt.forEach(t),Gwr=r(Yje," \u2014 "),vY=n(Yje,"A",{href:!0});var vRt=s(vY);Owr=r(vRt,"TFMobileBertForMaskedLM"),vRt.forEach(t),Vwr=r(Yje," (MobileBERT model)"),Yje.forEach(t),Xwr=i(fe),yE=n(fe,"LI",{});var Kje=s(yE);PMe=n(Kje,"STRONG",{});var FRt=s(PMe);zwr=r(FRt,"mpnet"),FRt.forEach(t),Qwr=r(Kje," \u2014 "),FY=n(Kje,"A",{href:!0});var TRt=s(FY);Wwr=r(TRt,"TFMPNetForMaskedLM"),TRt.forEach(t),Hwr=r(Kje," (MPNet model)"),Kje.forEach(t),Uwr=i(fe),xE=n(fe,"LI",{});var Zje=s(xE);BMe=n(Zje,"STRONG",{});var MRt=s(BMe);Jwr=r(MRt,"rembert"),MRt.forEach(t),Ywr=r(Zje," \u2014 "),TY=n(Zje,"A",{href:!0});var ERt=s(TY);Kwr=r(ERt,"TFRemBertForMaskedLM"),ERt.forEach(t),Zwr=r(Zje," (RemBERT model)"),Zje.forEach(t),eAr=i(fe),$E=n(fe,"LI",{});var eDe=s($E);IMe=n(eDe,"STRONG",{});var CRt=s(IMe);oAr=r(CRt,"roberta"),CRt.forEach(t),rAr=r(eDe," \u2014 "),MY=n(eDe,"A",{href:!0});var wRt=s(MY);tAr=r(wRt,"TFRobertaForMaskedLM"),wRt.forEach(t),aAr=r(eDe," (RoBERTa model)"),eDe.forEach(t),nAr=i(fe),kE=n(fe,"LI",{});var oDe=s(kE);NMe=n(oDe,"STRONG",{});var ARt=s(NMe);sAr=r(ARt,"roformer"),ARt.forEach(t),lAr=r(oDe," \u2014 "),EY=n(oDe,"A",{href:!0});var LRt=s(EY);iAr=r(LRt,"TFRoFormerForMaskedLM"),LRt.forEach(t),dAr=r(oDe," (RoFormer model)"),oDe.forEach(t),cAr=i(fe),SE=n(fe,"LI",{});var rDe=s(SE);qMe=n(rDe,"STRONG",{});var yRt=s(qMe);fAr=r(yRt,"tapas"),yRt.forEach(t),mAr=r(rDe," \u2014 "),CY=n(rDe,"A",{href:!0});var xRt=s(CY);gAr=r(xRt,"TFTapasForMaskedLM"),xRt.forEach(t),hAr=r(rDe," (TAPAS model)"),rDe.forEach(t),pAr=i(fe),RE=n(fe,"LI",{});var tDe=s(RE);jMe=n(tDe,"STRONG",{});var $Rt=s(jMe);_Ar=r($Rt,"xlm"),$Rt.forEach(t),uAr=r(tDe," \u2014 "),wY=n(tDe,"A",{href:!0});var kRt=s(wY);bAr=r(kRt,"TFXLMWithLMHeadModel"),kRt.forEach(t),vAr=r(tDe," (XLM model)"),tDe.forEach(t),FAr=i(fe),PE=n(fe,"LI",{});var aDe=s(PE);DMe=n(aDe,"STRONG",{});var SRt=s(DMe);TAr=r(SRt,"xlm-roberta"),SRt.forEach(t),MAr=r(aDe," \u2014 "),AY=n(aDe,"A",{href:!0});var RRt=s(AY);EAr=r(RRt,"TFXLMRobertaForMaskedLM"),RRt.forEach(t),CAr=r(aDe," (XLM-RoBERTa model)"),aDe.forEach(t),fe.forEach(t),wAr=i(Nl),T(BE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),hze=i(f),Tc=n(f,"H2",{class:!0});var TWe=s(Tc);IE=n(TWe,"A",{id:!0,class:!0,href:!0});var PRt=s(IE);GMe=n(PRt,"SPAN",{});var BRt=s(GMe);T(px.$$.fragment,BRt),BRt.forEach(t),PRt.forEach(t),AAr=i(TWe),OMe=n(TWe,"SPAN",{});var IRt=s(OMe);LAr=r(IRt,"TFAutoModelForSeq2SeqLM"),IRt.forEach(t),TWe.forEach(t),pze=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(_x.$$.fragment,ql),yAr=i(ql),Mc=n(ql,"P",{});var Bte=s(Mc);xAr=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=n(Bte,"A",{href:!0});var NRt=s(LY);$Ar=r(NRt,"from_pretrained()"),NRt.forEach(t),kAr=r(Bte," class method or the "),yY=n(Bte,"A",{href:!0});var qRt=s(yY);SAr=r(qRt,"from_config()"),qRt.forEach(t),RAr=r(Bte,` class
method.`),Bte.forEach(t),PAr=i(ql),ux=n(ql,"P",{});var MWe=s(ux);BAr=r(MWe,"This class cannot be instantiated directly using "),VMe=n(MWe,"CODE",{});var jRt=s(VMe);IAr=r(jRt,"__init__()"),jRt.forEach(t),NAr=r(MWe," (throws an error)."),MWe.forEach(t),qAr=i(ql),Nt=n(ql,"DIV",{class:!0});var g6=s(Nt);T(bx.$$.fragment,g6),jAr=i(g6),XMe=n(g6,"P",{});var DRt=s(XMe);DAr=r(DRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DRt.forEach(t),GAr=i(g6),Ec=n(g6,"P",{});var Ite=s(Ec);OAr=r(Ite,`Note:
Loading a model from its configuration file does `),zMe=n(Ite,"STRONG",{});var GRt=s(zMe);VAr=r(GRt,"not"),GRt.forEach(t),XAr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Ite,"A",{href:!0});var ORt=s(xY);zAr=r(ORt,"from_pretrained()"),ORt.forEach(t),QAr=r(Ite," to load the model weights."),Ite.forEach(t),WAr=i(g6),T(NE.$$.fragment,g6),g6.forEach(t),HAr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(vx.$$.fragment,jl),UAr=i(jl),QMe=n(jl,"P",{});var VRt=s(QMe);JAr=r(VRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VRt.forEach(t),YAr=i(jl),fn=n(jl,"P",{});var h6=s(fn);KAr=r(h6,"The model class to instantiate is selected based on the "),WMe=n(h6,"CODE",{});var XRt=s(WMe);ZAr=r(XRt,"model_type"),XRt.forEach(t),e6r=r(h6,` property of the config object (either
passed as an argument or loaded from `),HMe=n(h6,"CODE",{});var zRt=s(HMe);o6r=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),r6r=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(h6,"CODE",{});var QRt=s(UMe);t6r=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),a6r=r(h6,":"),h6.forEach(t),n6r=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);qE=n(Ie,"LI",{});var nDe=s(qE);JMe=n(nDe,"STRONG",{});var WRt=s(JMe);s6r=r(WRt,"bart"),WRt.forEach(t),l6r=r(nDe," \u2014 "),$Y=n(nDe,"A",{href:!0});var HRt=s($Y);i6r=r(HRt,"TFBartForConditionalGeneration"),HRt.forEach(t),d6r=r(nDe," (BART model)"),nDe.forEach(t),c6r=i(Ie),jE=n(Ie,"LI",{});var sDe=s(jE);YMe=n(sDe,"STRONG",{});var URt=s(YMe);f6r=r(URt,"blenderbot"),URt.forEach(t),m6r=r(sDe," \u2014 "),kY=n(sDe,"A",{href:!0});var JRt=s(kY);g6r=r(JRt,"TFBlenderbotForConditionalGeneration"),JRt.forEach(t),h6r=r(sDe," (Blenderbot model)"),sDe.forEach(t),p6r=i(Ie),DE=n(Ie,"LI",{});var lDe=s(DE);KMe=n(lDe,"STRONG",{});var YRt=s(KMe);_6r=r(YRt,"blenderbot-small"),YRt.forEach(t),u6r=r(lDe," \u2014 "),SY=n(lDe,"A",{href:!0});var KRt=s(SY);b6r=r(KRt,"TFBlenderbotSmallForConditionalGeneration"),KRt.forEach(t),v6r=r(lDe," (BlenderbotSmall model)"),lDe.forEach(t),F6r=i(Ie),GE=n(Ie,"LI",{});var iDe=s(GE);ZMe=n(iDe,"STRONG",{});var ZRt=s(ZMe);T6r=r(ZRt,"encoder-decoder"),ZRt.forEach(t),M6r=r(iDe," \u2014 "),RY=n(iDe,"A",{href:!0});var ePt=s(RY);E6r=r(ePt,"TFEncoderDecoderModel"),ePt.forEach(t),C6r=r(iDe," (Encoder decoder model)"),iDe.forEach(t),w6r=i(Ie),OE=n(Ie,"LI",{});var dDe=s(OE);e4e=n(dDe,"STRONG",{});var oPt=s(e4e);A6r=r(oPt,"led"),oPt.forEach(t),L6r=r(dDe," \u2014 "),PY=n(dDe,"A",{href:!0});var rPt=s(PY);y6r=r(rPt,"TFLEDForConditionalGeneration"),rPt.forEach(t),x6r=r(dDe," (LED model)"),dDe.forEach(t),$6r=i(Ie),VE=n(Ie,"LI",{});var cDe=s(VE);o4e=n(cDe,"STRONG",{});var tPt=s(o4e);k6r=r(tPt,"marian"),tPt.forEach(t),S6r=r(cDe," \u2014 "),BY=n(cDe,"A",{href:!0});var aPt=s(BY);R6r=r(aPt,"TFMarianMTModel"),aPt.forEach(t),P6r=r(cDe," (Marian model)"),cDe.forEach(t),B6r=i(Ie),XE=n(Ie,"LI",{});var fDe=s(XE);r4e=n(fDe,"STRONG",{});var nPt=s(r4e);I6r=r(nPt,"mbart"),nPt.forEach(t),N6r=r(fDe," \u2014 "),IY=n(fDe,"A",{href:!0});var sPt=s(IY);q6r=r(sPt,"TFMBartForConditionalGeneration"),sPt.forEach(t),j6r=r(fDe," (mBART model)"),fDe.forEach(t),D6r=i(Ie),zE=n(Ie,"LI",{});var mDe=s(zE);t4e=n(mDe,"STRONG",{});var lPt=s(t4e);G6r=r(lPt,"mt5"),lPt.forEach(t),O6r=r(mDe," \u2014 "),NY=n(mDe,"A",{href:!0});var iPt=s(NY);V6r=r(iPt,"TFMT5ForConditionalGeneration"),iPt.forEach(t),X6r=r(mDe," (MT5 model)"),mDe.forEach(t),z6r=i(Ie),QE=n(Ie,"LI",{});var gDe=s(QE);a4e=n(gDe,"STRONG",{});var dPt=s(a4e);Q6r=r(dPt,"pegasus"),dPt.forEach(t),W6r=r(gDe," \u2014 "),qY=n(gDe,"A",{href:!0});var cPt=s(qY);H6r=r(cPt,"TFPegasusForConditionalGeneration"),cPt.forEach(t),U6r=r(gDe," (Pegasus model)"),gDe.forEach(t),J6r=i(Ie),WE=n(Ie,"LI",{});var hDe=s(WE);n4e=n(hDe,"STRONG",{});var fPt=s(n4e);Y6r=r(fPt,"t5"),fPt.forEach(t),K6r=r(hDe," \u2014 "),jY=n(hDe,"A",{href:!0});var mPt=s(jY);Z6r=r(mPt,"TFT5ForConditionalGeneration"),mPt.forEach(t),eLr=r(hDe," (T5 model)"),hDe.forEach(t),Ie.forEach(t),oLr=i(jl),T(HE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),_ze=i(f),Cc=n(f,"H2",{class:!0});var EWe=s(Cc);UE=n(EWe,"A",{id:!0,class:!0,href:!0});var gPt=s(UE);s4e=n(gPt,"SPAN",{});var hPt=s(s4e);T(Fx.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),rLr=i(EWe),l4e=n(EWe,"SPAN",{});var pPt=s(l4e);tLr=r(pPt,"TFAutoModelForSequenceClassification"),pPt.forEach(t),EWe.forEach(t),uze=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Tx.$$.fragment,Dl),aLr=i(Dl),wc=n(Dl,"P",{});var Nte=s(wc);nLr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=n(Nte,"A",{href:!0});var _Pt=s(DY);sLr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),lLr=r(Nte," class method or the "),GY=n(Nte,"A",{href:!0});var uPt=s(GY);iLr=r(uPt,"from_config()"),uPt.forEach(t),dLr=r(Nte,` class
method.`),Nte.forEach(t),cLr=i(Dl),Mx=n(Dl,"P",{});var CWe=s(Mx);fLr=r(CWe,"This class cannot be instantiated directly using "),i4e=n(CWe,"CODE",{});var bPt=s(i4e);mLr=r(bPt,"__init__()"),bPt.forEach(t),gLr=r(CWe," (throws an error)."),CWe.forEach(t),hLr=i(Dl),qt=n(Dl,"DIV",{class:!0});var p6=s(qt);T(Ex.$$.fragment,p6),pLr=i(p6),d4e=n(p6,"P",{});var vPt=s(d4e);_Lr=r(vPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vPt.forEach(t),uLr=i(p6),Ac=n(p6,"P",{});var qte=s(Ac);bLr=r(qte,`Note:
Loading a model from its configuration file does `),c4e=n(qte,"STRONG",{});var FPt=s(c4e);vLr=r(FPt,"not"),FPt.forEach(t),FLr=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(qte,"A",{href:!0});var TPt=s(OY);TLr=r(TPt,"from_pretrained()"),TPt.forEach(t),MLr=r(qte," to load the model weights."),qte.forEach(t),ELr=i(p6),T(JE.$$.fragment,p6),p6.forEach(t),CLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Cx.$$.fragment,Gl),wLr=i(Gl),f4e=n(Gl,"P",{});var MPt=s(f4e);ALr=r(MPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MPt.forEach(t),LLr=i(Gl),mn=n(Gl,"P",{});var _6=s(mn);yLr=r(_6,"The model class to instantiate is selected based on the "),m4e=n(_6,"CODE",{});var EPt=s(m4e);xLr=r(EPt,"model_type"),EPt.forEach(t),$Lr=r(_6,` property of the config object (either
passed as an argument or loaded from `),g4e=n(_6,"CODE",{});var CPt=s(g4e);kLr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),SLr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(_6,"CODE",{});var wPt=s(h4e);RLr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),PLr=r(_6,":"),_6.forEach(t),BLr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);YE=n(ne,"LI",{});var pDe=s(YE);p4e=n(pDe,"STRONG",{});var APt=s(p4e);ILr=r(APt,"albert"),APt.forEach(t),NLr=r(pDe," \u2014 "),VY=n(pDe,"A",{href:!0});var LPt=s(VY);qLr=r(LPt,"TFAlbertForSequenceClassification"),LPt.forEach(t),jLr=r(pDe," (ALBERT model)"),pDe.forEach(t),DLr=i(ne),KE=n(ne,"LI",{});var _De=s(KE);_4e=n(_De,"STRONG",{});var yPt=s(_4e);GLr=r(yPt,"bert"),yPt.forEach(t),OLr=r(_De," \u2014 "),XY=n(_De,"A",{href:!0});var xPt=s(XY);VLr=r(xPt,"TFBertForSequenceClassification"),xPt.forEach(t),XLr=r(_De," (BERT model)"),_De.forEach(t),zLr=i(ne),ZE=n(ne,"LI",{});var uDe=s(ZE);u4e=n(uDe,"STRONG",{});var $Pt=s(u4e);QLr=r($Pt,"camembert"),$Pt.forEach(t),WLr=r(uDe," \u2014 "),zY=n(uDe,"A",{href:!0});var kPt=s(zY);HLr=r(kPt,"TFCamembertForSequenceClassification"),kPt.forEach(t),ULr=r(uDe," (CamemBERT model)"),uDe.forEach(t),JLr=i(ne),eC=n(ne,"LI",{});var bDe=s(eC);b4e=n(bDe,"STRONG",{});var SPt=s(b4e);YLr=r(SPt,"convbert"),SPt.forEach(t),KLr=r(bDe," \u2014 "),QY=n(bDe,"A",{href:!0});var RPt=s(QY);ZLr=r(RPt,"TFConvBertForSequenceClassification"),RPt.forEach(t),eyr=r(bDe," (ConvBERT model)"),bDe.forEach(t),oyr=i(ne),oC=n(ne,"LI",{});var vDe=s(oC);v4e=n(vDe,"STRONG",{});var PPt=s(v4e);ryr=r(PPt,"ctrl"),PPt.forEach(t),tyr=r(vDe," \u2014 "),WY=n(vDe,"A",{href:!0});var BPt=s(WY);ayr=r(BPt,"TFCTRLForSequenceClassification"),BPt.forEach(t),nyr=r(vDe," (CTRL model)"),vDe.forEach(t),syr=i(ne),rC=n(ne,"LI",{});var FDe=s(rC);F4e=n(FDe,"STRONG",{});var IPt=s(F4e);lyr=r(IPt,"deberta"),IPt.forEach(t),iyr=r(FDe," \u2014 "),HY=n(FDe,"A",{href:!0});var NPt=s(HY);dyr=r(NPt,"TFDebertaForSequenceClassification"),NPt.forEach(t),cyr=r(FDe," (DeBERTa model)"),FDe.forEach(t),fyr=i(ne),tC=n(ne,"LI",{});var TDe=s(tC);T4e=n(TDe,"STRONG",{});var qPt=s(T4e);myr=r(qPt,"deberta-v2"),qPt.forEach(t),gyr=r(TDe," \u2014 "),UY=n(TDe,"A",{href:!0});var jPt=s(UY);hyr=r(jPt,"TFDebertaV2ForSequenceClassification"),jPt.forEach(t),pyr=r(TDe," (DeBERTa-v2 model)"),TDe.forEach(t),_yr=i(ne),aC=n(ne,"LI",{});var MDe=s(aC);M4e=n(MDe,"STRONG",{});var DPt=s(M4e);uyr=r(DPt,"distilbert"),DPt.forEach(t),byr=r(MDe," \u2014 "),JY=n(MDe,"A",{href:!0});var GPt=s(JY);vyr=r(GPt,"TFDistilBertForSequenceClassification"),GPt.forEach(t),Fyr=r(MDe," (DistilBERT model)"),MDe.forEach(t),Tyr=i(ne),nC=n(ne,"LI",{});var EDe=s(nC);E4e=n(EDe,"STRONG",{});var OPt=s(E4e);Myr=r(OPt,"electra"),OPt.forEach(t),Eyr=r(EDe," \u2014 "),YY=n(EDe,"A",{href:!0});var VPt=s(YY);Cyr=r(VPt,"TFElectraForSequenceClassification"),VPt.forEach(t),wyr=r(EDe," (ELECTRA model)"),EDe.forEach(t),Ayr=i(ne),sC=n(ne,"LI",{});var CDe=s(sC);C4e=n(CDe,"STRONG",{});var XPt=s(C4e);Lyr=r(XPt,"flaubert"),XPt.forEach(t),yyr=r(CDe," \u2014 "),KY=n(CDe,"A",{href:!0});var zPt=s(KY);xyr=r(zPt,"TFFlaubertForSequenceClassification"),zPt.forEach(t),$yr=r(CDe," (FlauBERT model)"),CDe.forEach(t),kyr=i(ne),lC=n(ne,"LI",{});var wDe=s(lC);w4e=n(wDe,"STRONG",{});var QPt=s(w4e);Syr=r(QPt,"funnel"),QPt.forEach(t),Ryr=r(wDe," \u2014 "),ZY=n(wDe,"A",{href:!0});var WPt=s(ZY);Pyr=r(WPt,"TFFunnelForSequenceClassification"),WPt.forEach(t),Byr=r(wDe," (Funnel Transformer model)"),wDe.forEach(t),Iyr=i(ne),iC=n(ne,"LI",{});var ADe=s(iC);A4e=n(ADe,"STRONG",{});var HPt=s(A4e);Nyr=r(HPt,"gpt2"),HPt.forEach(t),qyr=r(ADe," \u2014 "),eK=n(ADe,"A",{href:!0});var UPt=s(eK);jyr=r(UPt,"TFGPT2ForSequenceClassification"),UPt.forEach(t),Dyr=r(ADe," (OpenAI GPT-2 model)"),ADe.forEach(t),Gyr=i(ne),dC=n(ne,"LI",{});var LDe=s(dC);L4e=n(LDe,"STRONG",{});var JPt=s(L4e);Oyr=r(JPt,"gptj"),JPt.forEach(t),Vyr=r(LDe," \u2014 "),oK=n(LDe,"A",{href:!0});var YPt=s(oK);Xyr=r(YPt,"TFGPTJForSequenceClassification"),YPt.forEach(t),zyr=r(LDe," (GPT-J model)"),LDe.forEach(t),Qyr=i(ne),cC=n(ne,"LI",{});var yDe=s(cC);y4e=n(yDe,"STRONG",{});var KPt=s(y4e);Wyr=r(KPt,"layoutlm"),KPt.forEach(t),Hyr=r(yDe," \u2014 "),rK=n(yDe,"A",{href:!0});var ZPt=s(rK);Uyr=r(ZPt,"TFLayoutLMForSequenceClassification"),ZPt.forEach(t),Jyr=r(yDe," (LayoutLM model)"),yDe.forEach(t),Yyr=i(ne),fC=n(ne,"LI",{});var xDe=s(fC);x4e=n(xDe,"STRONG",{});var eBt=s(x4e);Kyr=r(eBt,"longformer"),eBt.forEach(t),Zyr=r(xDe," \u2014 "),tK=n(xDe,"A",{href:!0});var oBt=s(tK);e9r=r(oBt,"TFLongformerForSequenceClassification"),oBt.forEach(t),o9r=r(xDe," (Longformer model)"),xDe.forEach(t),r9r=i(ne),mC=n(ne,"LI",{});var $De=s(mC);$4e=n($De,"STRONG",{});var rBt=s($4e);t9r=r(rBt,"mobilebert"),rBt.forEach(t),a9r=r($De," \u2014 "),aK=n($De,"A",{href:!0});var tBt=s(aK);n9r=r(tBt,"TFMobileBertForSequenceClassification"),tBt.forEach(t),s9r=r($De," (MobileBERT model)"),$De.forEach(t),l9r=i(ne),gC=n(ne,"LI",{});var kDe=s(gC);k4e=n(kDe,"STRONG",{});var aBt=s(k4e);i9r=r(aBt,"mpnet"),aBt.forEach(t),d9r=r(kDe," \u2014 "),nK=n(kDe,"A",{href:!0});var nBt=s(nK);c9r=r(nBt,"TFMPNetForSequenceClassification"),nBt.forEach(t),f9r=r(kDe," (MPNet model)"),kDe.forEach(t),m9r=i(ne),hC=n(ne,"LI",{});var SDe=s(hC);S4e=n(SDe,"STRONG",{});var sBt=s(S4e);g9r=r(sBt,"openai-gpt"),sBt.forEach(t),h9r=r(SDe," \u2014 "),sK=n(SDe,"A",{href:!0});var lBt=s(sK);p9r=r(lBt,"TFOpenAIGPTForSequenceClassification"),lBt.forEach(t),_9r=r(SDe," (OpenAI GPT model)"),SDe.forEach(t),u9r=i(ne),pC=n(ne,"LI",{});var RDe=s(pC);R4e=n(RDe,"STRONG",{});var iBt=s(R4e);b9r=r(iBt,"rembert"),iBt.forEach(t),v9r=r(RDe," \u2014 "),lK=n(RDe,"A",{href:!0});var dBt=s(lK);F9r=r(dBt,"TFRemBertForSequenceClassification"),dBt.forEach(t),T9r=r(RDe," (RemBERT model)"),RDe.forEach(t),M9r=i(ne),_C=n(ne,"LI",{});var PDe=s(_C);P4e=n(PDe,"STRONG",{});var cBt=s(P4e);E9r=r(cBt,"roberta"),cBt.forEach(t),C9r=r(PDe," \u2014 "),iK=n(PDe,"A",{href:!0});var fBt=s(iK);w9r=r(fBt,"TFRobertaForSequenceClassification"),fBt.forEach(t),A9r=r(PDe," (RoBERTa model)"),PDe.forEach(t),L9r=i(ne),uC=n(ne,"LI",{});var BDe=s(uC);B4e=n(BDe,"STRONG",{});var mBt=s(B4e);y9r=r(mBt,"roformer"),mBt.forEach(t),x9r=r(BDe," \u2014 "),dK=n(BDe,"A",{href:!0});var gBt=s(dK);$9r=r(gBt,"TFRoFormerForSequenceClassification"),gBt.forEach(t),k9r=r(BDe," (RoFormer model)"),BDe.forEach(t),S9r=i(ne),bC=n(ne,"LI",{});var IDe=s(bC);I4e=n(IDe,"STRONG",{});var hBt=s(I4e);R9r=r(hBt,"tapas"),hBt.forEach(t),P9r=r(IDe," \u2014 "),cK=n(IDe,"A",{href:!0});var pBt=s(cK);B9r=r(pBt,"TFTapasForSequenceClassification"),pBt.forEach(t),I9r=r(IDe," (TAPAS model)"),IDe.forEach(t),N9r=i(ne),vC=n(ne,"LI",{});var NDe=s(vC);N4e=n(NDe,"STRONG",{});var _Bt=s(N4e);q9r=r(_Bt,"transfo-xl"),_Bt.forEach(t),j9r=r(NDe," \u2014 "),fK=n(NDe,"A",{href:!0});var uBt=s(fK);D9r=r(uBt,"TFTransfoXLForSequenceClassification"),uBt.forEach(t),G9r=r(NDe," (Transformer-XL model)"),NDe.forEach(t),O9r=i(ne),FC=n(ne,"LI",{});var qDe=s(FC);q4e=n(qDe,"STRONG",{});var bBt=s(q4e);V9r=r(bBt,"xlm"),bBt.forEach(t),X9r=r(qDe," \u2014 "),mK=n(qDe,"A",{href:!0});var vBt=s(mK);z9r=r(vBt,"TFXLMForSequenceClassification"),vBt.forEach(t),Q9r=r(qDe," (XLM model)"),qDe.forEach(t),W9r=i(ne),TC=n(ne,"LI",{});var jDe=s(TC);j4e=n(jDe,"STRONG",{});var FBt=s(j4e);H9r=r(FBt,"xlm-roberta"),FBt.forEach(t),U9r=r(jDe," \u2014 "),gK=n(jDe,"A",{href:!0});var TBt=s(gK);J9r=r(TBt,"TFXLMRobertaForSequenceClassification"),TBt.forEach(t),Y9r=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),K9r=i(ne),MC=n(ne,"LI",{});var DDe=s(MC);D4e=n(DDe,"STRONG",{});var MBt=s(D4e);Z9r=r(MBt,"xlnet"),MBt.forEach(t),exr=r(DDe," \u2014 "),hK=n(DDe,"A",{href:!0});var EBt=s(hK);oxr=r(EBt,"TFXLNetForSequenceClassification"),EBt.forEach(t),rxr=r(DDe," (XLNet model)"),DDe.forEach(t),ne.forEach(t),txr=i(Gl),T(EC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),bze=i(f),Lc=n(f,"H2",{class:!0});var wWe=s(Lc);CC=n(wWe,"A",{id:!0,class:!0,href:!0});var CBt=s(CC);G4e=n(CBt,"SPAN",{});var wBt=s(G4e);T(wx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),axr=i(wWe),O4e=n(wWe,"SPAN",{});var ABt=s(O4e);nxr=r(ABt,"TFAutoModelForMultipleChoice"),ABt.forEach(t),wWe.forEach(t),vze=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Ax.$$.fragment,Ol),sxr=i(Ol),yc=n(Ol,"P",{});var jte=s(yc);lxr=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=n(jte,"A",{href:!0});var LBt=s(pK);ixr=r(LBt,"from_pretrained()"),LBt.forEach(t),dxr=r(jte," class method or the "),_K=n(jte,"A",{href:!0});var yBt=s(_K);cxr=r(yBt,"from_config()"),yBt.forEach(t),fxr=r(jte,` class
method.`),jte.forEach(t),mxr=i(Ol),Lx=n(Ol,"P",{});var AWe=s(Lx);gxr=r(AWe,"This class cannot be instantiated directly using "),V4e=n(AWe,"CODE",{});var xBt=s(V4e);hxr=r(xBt,"__init__()"),xBt.forEach(t),pxr=r(AWe," (throws an error)."),AWe.forEach(t),_xr=i(Ol),jt=n(Ol,"DIV",{class:!0});var u6=s(jt);T(yx.$$.fragment,u6),uxr=i(u6),X4e=n(u6,"P",{});var $Bt=s(X4e);bxr=r($Bt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Bt.forEach(t),vxr=i(u6),xc=n(u6,"P",{});var Dte=s(xc);Fxr=r(Dte,`Note:
Loading a model from its configuration file does `),z4e=n(Dte,"STRONG",{});var kBt=s(z4e);Txr=r(kBt,"not"),kBt.forEach(t),Mxr=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Dte,"A",{href:!0});var SBt=s(uK);Exr=r(SBt,"from_pretrained()"),SBt.forEach(t),Cxr=r(Dte," to load the model weights."),Dte.forEach(t),wxr=i(u6),T(wC.$$.fragment,u6),u6.forEach(t),Axr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(xx.$$.fragment,Vl),Lxr=i(Vl),Q4e=n(Vl,"P",{});var RBt=s(Q4e);yxr=r(RBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RBt.forEach(t),xxr=i(Vl),gn=n(Vl,"P",{});var b6=s(gn);$xr=r(b6,"The model class to instantiate is selected based on the "),W4e=n(b6,"CODE",{});var PBt=s(W4e);kxr=r(PBt,"model_type"),PBt.forEach(t),Sxr=r(b6,` property of the config object (either
passed as an argument or loaded from `),H4e=n(b6,"CODE",{});var BBt=s(H4e);Rxr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),Pxr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(b6,"CODE",{});var IBt=s(U4e);Bxr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),Ixr=r(b6,":"),b6.forEach(t),Nxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);AC=n(Fe,"LI",{});var GDe=s(AC);J4e=n(GDe,"STRONG",{});var NBt=s(J4e);qxr=r(NBt,"albert"),NBt.forEach(t),jxr=r(GDe," \u2014 "),bK=n(GDe,"A",{href:!0});var qBt=s(bK);Dxr=r(qBt,"TFAlbertForMultipleChoice"),qBt.forEach(t),Gxr=r(GDe," (ALBERT model)"),GDe.forEach(t),Oxr=i(Fe),LC=n(Fe,"LI",{});var ODe=s(LC);Y4e=n(ODe,"STRONG",{});var jBt=s(Y4e);Vxr=r(jBt,"bert"),jBt.forEach(t),Xxr=r(ODe," \u2014 "),vK=n(ODe,"A",{href:!0});var DBt=s(vK);zxr=r(DBt,"TFBertForMultipleChoice"),DBt.forEach(t),Qxr=r(ODe," (BERT model)"),ODe.forEach(t),Wxr=i(Fe),yC=n(Fe,"LI",{});var VDe=s(yC);K4e=n(VDe,"STRONG",{});var GBt=s(K4e);Hxr=r(GBt,"camembert"),GBt.forEach(t),Uxr=r(VDe," \u2014 "),FK=n(VDe,"A",{href:!0});var OBt=s(FK);Jxr=r(OBt,"TFCamembertForMultipleChoice"),OBt.forEach(t),Yxr=r(VDe," (CamemBERT model)"),VDe.forEach(t),Kxr=i(Fe),xC=n(Fe,"LI",{});var XDe=s(xC);Z4e=n(XDe,"STRONG",{});var VBt=s(Z4e);Zxr=r(VBt,"convbert"),VBt.forEach(t),e$r=r(XDe," \u2014 "),TK=n(XDe,"A",{href:!0});var XBt=s(TK);o$r=r(XBt,"TFConvBertForMultipleChoice"),XBt.forEach(t),r$r=r(XDe," (ConvBERT model)"),XDe.forEach(t),t$r=i(Fe),$C=n(Fe,"LI",{});var zDe=s($C);eEe=n(zDe,"STRONG",{});var zBt=s(eEe);a$r=r(zBt,"distilbert"),zBt.forEach(t),n$r=r(zDe," \u2014 "),MK=n(zDe,"A",{href:!0});var QBt=s(MK);s$r=r(QBt,"TFDistilBertForMultipleChoice"),QBt.forEach(t),l$r=r(zDe," (DistilBERT model)"),zDe.forEach(t),i$r=i(Fe),kC=n(Fe,"LI",{});var QDe=s(kC);oEe=n(QDe,"STRONG",{});var WBt=s(oEe);d$r=r(WBt,"electra"),WBt.forEach(t),c$r=r(QDe," \u2014 "),EK=n(QDe,"A",{href:!0});var HBt=s(EK);f$r=r(HBt,"TFElectraForMultipleChoice"),HBt.forEach(t),m$r=r(QDe," (ELECTRA model)"),QDe.forEach(t),g$r=i(Fe),SC=n(Fe,"LI",{});var WDe=s(SC);rEe=n(WDe,"STRONG",{});var UBt=s(rEe);h$r=r(UBt,"flaubert"),UBt.forEach(t),p$r=r(WDe," \u2014 "),CK=n(WDe,"A",{href:!0});var JBt=s(CK);_$r=r(JBt,"TFFlaubertForMultipleChoice"),JBt.forEach(t),u$r=r(WDe," (FlauBERT model)"),WDe.forEach(t),b$r=i(Fe),RC=n(Fe,"LI",{});var HDe=s(RC);tEe=n(HDe,"STRONG",{});var YBt=s(tEe);v$r=r(YBt,"funnel"),YBt.forEach(t),F$r=r(HDe," \u2014 "),wK=n(HDe,"A",{href:!0});var KBt=s(wK);T$r=r(KBt,"TFFunnelForMultipleChoice"),KBt.forEach(t),M$r=r(HDe," (Funnel Transformer model)"),HDe.forEach(t),E$r=i(Fe),PC=n(Fe,"LI",{});var UDe=s(PC);aEe=n(UDe,"STRONG",{});var ZBt=s(aEe);C$r=r(ZBt,"longformer"),ZBt.forEach(t),w$r=r(UDe," \u2014 "),AK=n(UDe,"A",{href:!0});var eIt=s(AK);A$r=r(eIt,"TFLongformerForMultipleChoice"),eIt.forEach(t),L$r=r(UDe," (Longformer model)"),UDe.forEach(t),y$r=i(Fe),BC=n(Fe,"LI",{});var JDe=s(BC);nEe=n(JDe,"STRONG",{});var oIt=s(nEe);x$r=r(oIt,"mobilebert"),oIt.forEach(t),$$r=r(JDe," \u2014 "),LK=n(JDe,"A",{href:!0});var rIt=s(LK);k$r=r(rIt,"TFMobileBertForMultipleChoice"),rIt.forEach(t),S$r=r(JDe," (MobileBERT model)"),JDe.forEach(t),R$r=i(Fe),IC=n(Fe,"LI",{});var YDe=s(IC);sEe=n(YDe,"STRONG",{});var tIt=s(sEe);P$r=r(tIt,"mpnet"),tIt.forEach(t),B$r=r(YDe," \u2014 "),yK=n(YDe,"A",{href:!0});var aIt=s(yK);I$r=r(aIt,"TFMPNetForMultipleChoice"),aIt.forEach(t),N$r=r(YDe," (MPNet model)"),YDe.forEach(t),q$r=i(Fe),NC=n(Fe,"LI",{});var KDe=s(NC);lEe=n(KDe,"STRONG",{});var nIt=s(lEe);j$r=r(nIt,"rembert"),nIt.forEach(t),D$r=r(KDe," \u2014 "),xK=n(KDe,"A",{href:!0});var sIt=s(xK);G$r=r(sIt,"TFRemBertForMultipleChoice"),sIt.forEach(t),O$r=r(KDe," (RemBERT model)"),KDe.forEach(t),V$r=i(Fe),qC=n(Fe,"LI",{});var ZDe=s(qC);iEe=n(ZDe,"STRONG",{});var lIt=s(iEe);X$r=r(lIt,"roberta"),lIt.forEach(t),z$r=r(ZDe," \u2014 "),$K=n(ZDe,"A",{href:!0});var iIt=s($K);Q$r=r(iIt,"TFRobertaForMultipleChoice"),iIt.forEach(t),W$r=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),H$r=i(Fe),jC=n(Fe,"LI",{});var eGe=s(jC);dEe=n(eGe,"STRONG",{});var dIt=s(dEe);U$r=r(dIt,"roformer"),dIt.forEach(t),J$r=r(eGe," \u2014 "),kK=n(eGe,"A",{href:!0});var cIt=s(kK);Y$r=r(cIt,"TFRoFormerForMultipleChoice"),cIt.forEach(t),K$r=r(eGe," (RoFormer model)"),eGe.forEach(t),Z$r=i(Fe),DC=n(Fe,"LI",{});var oGe=s(DC);cEe=n(oGe,"STRONG",{});var fIt=s(cEe);ekr=r(fIt,"xlm"),fIt.forEach(t),okr=r(oGe," \u2014 "),SK=n(oGe,"A",{href:!0});var mIt=s(SK);rkr=r(mIt,"TFXLMForMultipleChoice"),mIt.forEach(t),tkr=r(oGe," (XLM model)"),oGe.forEach(t),akr=i(Fe),GC=n(Fe,"LI",{});var rGe=s(GC);fEe=n(rGe,"STRONG",{});var gIt=s(fEe);nkr=r(gIt,"xlm-roberta"),gIt.forEach(t),skr=r(rGe," \u2014 "),RK=n(rGe,"A",{href:!0});var hIt=s(RK);lkr=r(hIt,"TFXLMRobertaForMultipleChoice"),hIt.forEach(t),ikr=r(rGe," (XLM-RoBERTa model)"),rGe.forEach(t),dkr=i(Fe),OC=n(Fe,"LI",{});var tGe=s(OC);mEe=n(tGe,"STRONG",{});var pIt=s(mEe);ckr=r(pIt,"xlnet"),pIt.forEach(t),fkr=r(tGe," \u2014 "),PK=n(tGe,"A",{href:!0});var _It=s(PK);mkr=r(_It,"TFXLNetForMultipleChoice"),_It.forEach(t),gkr=r(tGe," (XLNet model)"),tGe.forEach(t),Fe.forEach(t),hkr=i(Vl),T(VC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Fze=i(f),$c=n(f,"H2",{class:!0});var LWe=s($c);XC=n(LWe,"A",{id:!0,class:!0,href:!0});var uIt=s(XC);gEe=n(uIt,"SPAN",{});var bIt=s(gEe);T($x.$$.fragment,bIt),bIt.forEach(t),uIt.forEach(t),pkr=i(LWe),hEe=n(LWe,"SPAN",{});var vIt=s(hEe);_kr=r(vIt,"TFAutoModelForNextSentencePrediction"),vIt.forEach(t),LWe.forEach(t),Tze=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(kx.$$.fragment,Xl),ukr=i(Xl),kc=n(Xl,"P",{});var Gte=s(kc);bkr=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=n(Gte,"A",{href:!0});var FIt=s(BK);vkr=r(FIt,"from_pretrained()"),FIt.forEach(t),Fkr=r(Gte," class method or the "),IK=n(Gte,"A",{href:!0});var TIt=s(IK);Tkr=r(TIt,"from_config()"),TIt.forEach(t),Mkr=r(Gte,` class
method.`),Gte.forEach(t),Ekr=i(Xl),Sx=n(Xl,"P",{});var yWe=s(Sx);Ckr=r(yWe,"This class cannot be instantiated directly using "),pEe=n(yWe,"CODE",{});var MIt=s(pEe);wkr=r(MIt,"__init__()"),MIt.forEach(t),Akr=r(yWe," (throws an error)."),yWe.forEach(t),Lkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var v6=s(Dt);T(Rx.$$.fragment,v6),ykr=i(v6),_Ee=n(v6,"P",{});var EIt=s(_Ee);xkr=r(EIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EIt.forEach(t),$kr=i(v6),Sc=n(v6,"P",{});var Ote=s(Sc);kkr=r(Ote,`Note:
Loading a model from its configuration file does `),uEe=n(Ote,"STRONG",{});var CIt=s(uEe);Skr=r(CIt,"not"),CIt.forEach(t),Rkr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(Ote,"A",{href:!0});var wIt=s(NK);Pkr=r(wIt,"from_pretrained()"),wIt.forEach(t),Bkr=r(Ote," to load the model weights."),Ote.forEach(t),Ikr=i(v6),T(zC.$$.fragment,v6),v6.forEach(t),Nkr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Px.$$.fragment,zl),qkr=i(zl),bEe=n(zl,"P",{});var AIt=s(bEe);jkr=r(AIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AIt.forEach(t),Dkr=i(zl),hn=n(zl,"P",{});var F6=s(hn);Gkr=r(F6,"The model class to instantiate is selected based on the "),vEe=n(F6,"CODE",{});var LIt=s(vEe);Okr=r(LIt,"model_type"),LIt.forEach(t),Vkr=r(F6,` property of the config object (either
passed as an argument or loaded from `),FEe=n(F6,"CODE",{});var yIt=s(FEe);Xkr=r(yIt,"pretrained_model_name_or_path"),yIt.forEach(t),zkr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(F6,"CODE",{});var xIt=s(TEe);Qkr=r(xIt,"pretrained_model_name_or_path"),xIt.forEach(t),Wkr=r(F6,":"),F6.forEach(t),Hkr=i(zl),Bx=n(zl,"UL",{});var xWe=s(Bx);QC=n(xWe,"LI",{});var aGe=s(QC);MEe=n(aGe,"STRONG",{});var $It=s(MEe);Ukr=r($It,"bert"),$It.forEach(t),Jkr=r(aGe," \u2014 "),qK=n(aGe,"A",{href:!0});var kIt=s(qK);Ykr=r(kIt,"TFBertForNextSentencePrediction"),kIt.forEach(t),Kkr=r(aGe," (BERT model)"),aGe.forEach(t),Zkr=i(xWe),WC=n(xWe,"LI",{});var nGe=s(WC);EEe=n(nGe,"STRONG",{});var SIt=s(EEe);eSr=r(SIt,"mobilebert"),SIt.forEach(t),oSr=r(nGe," \u2014 "),jK=n(nGe,"A",{href:!0});var RIt=s(jK);rSr=r(RIt,"TFMobileBertForNextSentencePrediction"),RIt.forEach(t),tSr=r(nGe," (MobileBERT model)"),nGe.forEach(t),xWe.forEach(t),aSr=i(zl),T(HC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Mze=i(f),Rc=n(f,"H2",{class:!0});var $We=s(Rc);UC=n($We,"A",{id:!0,class:!0,href:!0});var PIt=s(UC);CEe=n(PIt,"SPAN",{});var BIt=s(CEe);T(Ix.$$.fragment,BIt),BIt.forEach(t),PIt.forEach(t),nSr=i($We),wEe=n($We,"SPAN",{});var IIt=s(wEe);sSr=r(IIt,"TFAutoModelForTableQuestionAnswering"),IIt.forEach(t),$We.forEach(t),Eze=i(f),dr=n(f,"DIV",{class:!0});var Ql=s(dr);T(Nx.$$.fragment,Ql),lSr=i(Ql),Pc=n(Ql,"P",{});var Vte=s(Pc);iSr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DK=n(Vte,"A",{href:!0});var NIt=s(DK);dSr=r(NIt,"from_pretrained()"),NIt.forEach(t),cSr=r(Vte," class method or the "),GK=n(Vte,"A",{href:!0});var qIt=s(GK);fSr=r(qIt,"from_config()"),qIt.forEach(t),mSr=r(Vte,` class
method.`),Vte.forEach(t),gSr=i(Ql),qx=n(Ql,"P",{});var kWe=s(qx);hSr=r(kWe,"This class cannot be instantiated directly using "),AEe=n(kWe,"CODE",{});var jIt=s(AEe);pSr=r(jIt,"__init__()"),jIt.forEach(t),_Sr=r(kWe," (throws an error)."),kWe.forEach(t),uSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var T6=s(Gt);T(jx.$$.fragment,T6),bSr=i(T6),LEe=n(T6,"P",{});var DIt=s(LEe);vSr=r(DIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DIt.forEach(t),FSr=i(T6),Bc=n(T6,"P",{});var Xte=s(Bc);TSr=r(Xte,`Note:
Loading a model from its configuration file does `),yEe=n(Xte,"STRONG",{});var GIt=s(yEe);MSr=r(GIt,"not"),GIt.forEach(t),ESr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Xte,"A",{href:!0});var OIt=s(OK);CSr=r(OIt,"from_pretrained()"),OIt.forEach(t),wSr=r(Xte," to load the model weights."),Xte.forEach(t),ASr=i(T6),T(JC.$$.fragment,T6),T6.forEach(t),LSr=i(Ql),Nr=n(Ql,"DIV",{class:!0});var Wl=s(Nr);T(Dx.$$.fragment,Wl),ySr=i(Wl),xEe=n(Wl,"P",{});var VIt=s(xEe);xSr=r(VIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VIt.forEach(t),$Sr=i(Wl),pn=n(Wl,"P",{});var M6=s(pn);kSr=r(M6,"The model class to instantiate is selected based on the "),$Ee=n(M6,"CODE",{});var XIt=s($Ee);SSr=r(XIt,"model_type"),XIt.forEach(t),RSr=r(M6,` property of the config object (either
passed as an argument or loaded from `),kEe=n(M6,"CODE",{});var zIt=s(kEe);PSr=r(zIt,"pretrained_model_name_or_path"),zIt.forEach(t),BSr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(M6,"CODE",{});var QIt=s(SEe);ISr=r(QIt,"pretrained_model_name_or_path"),QIt.forEach(t),NSr=r(M6,":"),M6.forEach(t),qSr=i(Wl),REe=n(Wl,"UL",{});var WIt=s(REe);YC=n(WIt,"LI",{});var sGe=s(YC);PEe=n(sGe,"STRONG",{});var HIt=s(PEe);jSr=r(HIt,"tapas"),HIt.forEach(t),DSr=r(sGe," \u2014 "),VK=n(sGe,"A",{href:!0});var UIt=s(VK);GSr=r(UIt,"TFTapasForQuestionAnswering"),UIt.forEach(t),OSr=r(sGe," (TAPAS model)"),sGe.forEach(t),WIt.forEach(t),VSr=i(Wl),T(KC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Cze=i(f),Ic=n(f,"H2",{class:!0});var SWe=s(Ic);ZC=n(SWe,"A",{id:!0,class:!0,href:!0});var JIt=s(ZC);BEe=n(JIt,"SPAN",{});var YIt=s(BEe);T(Gx.$$.fragment,YIt),YIt.forEach(t),JIt.forEach(t),XSr=i(SWe),IEe=n(SWe,"SPAN",{});var KIt=s(IEe);zSr=r(KIt,"TFAutoModelForTokenClassification"),KIt.forEach(t),SWe.forEach(t),wze=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Ox.$$.fragment,Hl),QSr=i(Hl),Nc=n(Hl,"P",{});var zte=s(Nc);WSr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XK=n(zte,"A",{href:!0});var ZIt=s(XK);HSr=r(ZIt,"from_pretrained()"),ZIt.forEach(t),USr=r(zte," class method or the "),zK=n(zte,"A",{href:!0});var eNt=s(zK);JSr=r(eNt,"from_config()"),eNt.forEach(t),YSr=r(zte,` class
method.`),zte.forEach(t),KSr=i(Hl),Vx=n(Hl,"P",{});var RWe=s(Vx);ZSr=r(RWe,"This class cannot be instantiated directly using "),NEe=n(RWe,"CODE",{});var oNt=s(NEe);eRr=r(oNt,"__init__()"),oNt.forEach(t),oRr=r(RWe," (throws an error)."),RWe.forEach(t),rRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var E6=s(Ot);T(Xx.$$.fragment,E6),tRr=i(E6),qEe=n(E6,"P",{});var rNt=s(qEe);aRr=r(rNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rNt.forEach(t),nRr=i(E6),qc=n(E6,"P",{});var Qte=s(qc);sRr=r(Qte,`Note:
Loading a model from its configuration file does `),jEe=n(Qte,"STRONG",{});var tNt=s(jEe);lRr=r(tNt,"not"),tNt.forEach(t),iRr=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Qte,"A",{href:!0});var aNt=s(QK);dRr=r(aNt,"from_pretrained()"),aNt.forEach(t),cRr=r(Qte," to load the model weights."),Qte.forEach(t),fRr=i(E6),T(e3.$$.fragment,E6),E6.forEach(t),mRr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(zx.$$.fragment,Ul),gRr=i(Ul),DEe=n(Ul,"P",{});var nNt=s(DEe);hRr=r(nNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nNt.forEach(t),pRr=i(Ul),_n=n(Ul,"P",{});var C6=s(_n);_Rr=r(C6,"The model class to instantiate is selected based on the "),GEe=n(C6,"CODE",{});var sNt=s(GEe);uRr=r(sNt,"model_type"),sNt.forEach(t),bRr=r(C6,` property of the config object (either
passed as an argument or loaded from `),OEe=n(C6,"CODE",{});var lNt=s(OEe);vRr=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),FRr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(C6,"CODE",{});var iNt=s(VEe);TRr=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),MRr=r(C6,":"),C6.forEach(t),ERr=i(Ul),de=n(Ul,"UL",{});var me=s(de);o3=n(me,"LI",{});var lGe=s(o3);XEe=n(lGe,"STRONG",{});var dNt=s(XEe);CRr=r(dNt,"albert"),dNt.forEach(t),wRr=r(lGe," \u2014 "),WK=n(lGe,"A",{href:!0});var cNt=s(WK);ARr=r(cNt,"TFAlbertForTokenClassification"),cNt.forEach(t),LRr=r(lGe," (ALBERT model)"),lGe.forEach(t),yRr=i(me),r3=n(me,"LI",{});var iGe=s(r3);zEe=n(iGe,"STRONG",{});var fNt=s(zEe);xRr=r(fNt,"bert"),fNt.forEach(t),$Rr=r(iGe," \u2014 "),HK=n(iGe,"A",{href:!0});var mNt=s(HK);kRr=r(mNt,"TFBertForTokenClassification"),mNt.forEach(t),SRr=r(iGe," (BERT model)"),iGe.forEach(t),RRr=i(me),t3=n(me,"LI",{});var dGe=s(t3);QEe=n(dGe,"STRONG",{});var gNt=s(QEe);PRr=r(gNt,"camembert"),gNt.forEach(t),BRr=r(dGe," \u2014 "),UK=n(dGe,"A",{href:!0});var hNt=s(UK);IRr=r(hNt,"TFCamembertForTokenClassification"),hNt.forEach(t),NRr=r(dGe," (CamemBERT model)"),dGe.forEach(t),qRr=i(me),a3=n(me,"LI",{});var cGe=s(a3);WEe=n(cGe,"STRONG",{});var pNt=s(WEe);jRr=r(pNt,"convbert"),pNt.forEach(t),DRr=r(cGe," \u2014 "),JK=n(cGe,"A",{href:!0});var _Nt=s(JK);GRr=r(_Nt,"TFConvBertForTokenClassification"),_Nt.forEach(t),ORr=r(cGe," (ConvBERT model)"),cGe.forEach(t),VRr=i(me),n3=n(me,"LI",{});var fGe=s(n3);HEe=n(fGe,"STRONG",{});var uNt=s(HEe);XRr=r(uNt,"deberta"),uNt.forEach(t),zRr=r(fGe," \u2014 "),YK=n(fGe,"A",{href:!0});var bNt=s(YK);QRr=r(bNt,"TFDebertaForTokenClassification"),bNt.forEach(t),WRr=r(fGe," (DeBERTa model)"),fGe.forEach(t),HRr=i(me),s3=n(me,"LI",{});var mGe=s(s3);UEe=n(mGe,"STRONG",{});var vNt=s(UEe);URr=r(vNt,"deberta-v2"),vNt.forEach(t),JRr=r(mGe," \u2014 "),KK=n(mGe,"A",{href:!0});var FNt=s(KK);YRr=r(FNt,"TFDebertaV2ForTokenClassification"),FNt.forEach(t),KRr=r(mGe," (DeBERTa-v2 model)"),mGe.forEach(t),ZRr=i(me),l3=n(me,"LI",{});var gGe=s(l3);JEe=n(gGe,"STRONG",{});var TNt=s(JEe);ePr=r(TNt,"distilbert"),TNt.forEach(t),oPr=r(gGe," \u2014 "),ZK=n(gGe,"A",{href:!0});var MNt=s(ZK);rPr=r(MNt,"TFDistilBertForTokenClassification"),MNt.forEach(t),tPr=r(gGe," (DistilBERT model)"),gGe.forEach(t),aPr=i(me),i3=n(me,"LI",{});var hGe=s(i3);YEe=n(hGe,"STRONG",{});var ENt=s(YEe);nPr=r(ENt,"electra"),ENt.forEach(t),sPr=r(hGe," \u2014 "),eZ=n(hGe,"A",{href:!0});var CNt=s(eZ);lPr=r(CNt,"TFElectraForTokenClassification"),CNt.forEach(t),iPr=r(hGe," (ELECTRA model)"),hGe.forEach(t),dPr=i(me),d3=n(me,"LI",{});var pGe=s(d3);KEe=n(pGe,"STRONG",{});var wNt=s(KEe);cPr=r(wNt,"flaubert"),wNt.forEach(t),fPr=r(pGe," \u2014 "),oZ=n(pGe,"A",{href:!0});var ANt=s(oZ);mPr=r(ANt,"TFFlaubertForTokenClassification"),ANt.forEach(t),gPr=r(pGe," (FlauBERT model)"),pGe.forEach(t),hPr=i(me),c3=n(me,"LI",{});var _Ge=s(c3);ZEe=n(_Ge,"STRONG",{});var LNt=s(ZEe);pPr=r(LNt,"funnel"),LNt.forEach(t),_Pr=r(_Ge," \u2014 "),rZ=n(_Ge,"A",{href:!0});var yNt=s(rZ);uPr=r(yNt,"TFFunnelForTokenClassification"),yNt.forEach(t),bPr=r(_Ge," (Funnel Transformer model)"),_Ge.forEach(t),vPr=i(me),f3=n(me,"LI",{});var uGe=s(f3);eCe=n(uGe,"STRONG",{});var xNt=s(eCe);FPr=r(xNt,"layoutlm"),xNt.forEach(t),TPr=r(uGe," \u2014 "),tZ=n(uGe,"A",{href:!0});var $Nt=s(tZ);MPr=r($Nt,"TFLayoutLMForTokenClassification"),$Nt.forEach(t),EPr=r(uGe," (LayoutLM model)"),uGe.forEach(t),CPr=i(me),m3=n(me,"LI",{});var bGe=s(m3);oCe=n(bGe,"STRONG",{});var kNt=s(oCe);wPr=r(kNt,"longformer"),kNt.forEach(t),APr=r(bGe," \u2014 "),aZ=n(bGe,"A",{href:!0});var SNt=s(aZ);LPr=r(SNt,"TFLongformerForTokenClassification"),SNt.forEach(t),yPr=r(bGe," (Longformer model)"),bGe.forEach(t),xPr=i(me),g3=n(me,"LI",{});var vGe=s(g3);rCe=n(vGe,"STRONG",{});var RNt=s(rCe);$Pr=r(RNt,"mobilebert"),RNt.forEach(t),kPr=r(vGe," \u2014 "),nZ=n(vGe,"A",{href:!0});var PNt=s(nZ);SPr=r(PNt,"TFMobileBertForTokenClassification"),PNt.forEach(t),RPr=r(vGe," (MobileBERT model)"),vGe.forEach(t),PPr=i(me),h3=n(me,"LI",{});var FGe=s(h3);tCe=n(FGe,"STRONG",{});var BNt=s(tCe);BPr=r(BNt,"mpnet"),BNt.forEach(t),IPr=r(FGe," \u2014 "),sZ=n(FGe,"A",{href:!0});var INt=s(sZ);NPr=r(INt,"TFMPNetForTokenClassification"),INt.forEach(t),qPr=r(FGe," (MPNet model)"),FGe.forEach(t),jPr=i(me),p3=n(me,"LI",{});var TGe=s(p3);aCe=n(TGe,"STRONG",{});var NNt=s(aCe);DPr=r(NNt,"rembert"),NNt.forEach(t),GPr=r(TGe," \u2014 "),lZ=n(TGe,"A",{href:!0});var qNt=s(lZ);OPr=r(qNt,"TFRemBertForTokenClassification"),qNt.forEach(t),VPr=r(TGe," (RemBERT model)"),TGe.forEach(t),XPr=i(me),_3=n(me,"LI",{});var MGe=s(_3);nCe=n(MGe,"STRONG",{});var jNt=s(nCe);zPr=r(jNt,"roberta"),jNt.forEach(t),QPr=r(MGe," \u2014 "),iZ=n(MGe,"A",{href:!0});var DNt=s(iZ);WPr=r(DNt,"TFRobertaForTokenClassification"),DNt.forEach(t),HPr=r(MGe," (RoBERTa model)"),MGe.forEach(t),UPr=i(me),u3=n(me,"LI",{});var EGe=s(u3);sCe=n(EGe,"STRONG",{});var GNt=s(sCe);JPr=r(GNt,"roformer"),GNt.forEach(t),YPr=r(EGe," \u2014 "),dZ=n(EGe,"A",{href:!0});var ONt=s(dZ);KPr=r(ONt,"TFRoFormerForTokenClassification"),ONt.forEach(t),ZPr=r(EGe," (RoFormer model)"),EGe.forEach(t),eBr=i(me),b3=n(me,"LI",{});var CGe=s(b3);lCe=n(CGe,"STRONG",{});var VNt=s(lCe);oBr=r(VNt,"xlm"),VNt.forEach(t),rBr=r(CGe," \u2014 "),cZ=n(CGe,"A",{href:!0});var XNt=s(cZ);tBr=r(XNt,"TFXLMForTokenClassification"),XNt.forEach(t),aBr=r(CGe," (XLM model)"),CGe.forEach(t),nBr=i(me),v3=n(me,"LI",{});var wGe=s(v3);iCe=n(wGe,"STRONG",{});var zNt=s(iCe);sBr=r(zNt,"xlm-roberta"),zNt.forEach(t),lBr=r(wGe," \u2014 "),fZ=n(wGe,"A",{href:!0});var QNt=s(fZ);iBr=r(QNt,"TFXLMRobertaForTokenClassification"),QNt.forEach(t),dBr=r(wGe," (XLM-RoBERTa model)"),wGe.forEach(t),cBr=i(me),F3=n(me,"LI",{});var AGe=s(F3);dCe=n(AGe,"STRONG",{});var WNt=s(dCe);fBr=r(WNt,"xlnet"),WNt.forEach(t),mBr=r(AGe," \u2014 "),mZ=n(AGe,"A",{href:!0});var HNt=s(mZ);gBr=r(HNt,"TFXLNetForTokenClassification"),HNt.forEach(t),hBr=r(AGe," (XLNet model)"),AGe.forEach(t),me.forEach(t),pBr=i(Ul),T(T3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Aze=i(f),jc=n(f,"H2",{class:!0});var PWe=s(jc);M3=n(PWe,"A",{id:!0,class:!0,href:!0});var UNt=s(M3);cCe=n(UNt,"SPAN",{});var JNt=s(cCe);T(Qx.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),_Br=i(PWe),fCe=n(PWe,"SPAN",{});var YNt=s(fCe);uBr=r(YNt,"TFAutoModelForQuestionAnswering"),YNt.forEach(t),PWe.forEach(t),Lze=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(Wx.$$.fragment,Jl),bBr=i(Jl),Dc=n(Jl,"P",{});var Wte=s(Dc);vBr=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gZ=n(Wte,"A",{href:!0});var KNt=s(gZ);FBr=r(KNt,"from_pretrained()"),KNt.forEach(t),TBr=r(Wte," class method or the "),hZ=n(Wte,"A",{href:!0});var ZNt=s(hZ);MBr=r(ZNt,"from_config()"),ZNt.forEach(t),EBr=r(Wte,` class
method.`),Wte.forEach(t),CBr=i(Jl),Hx=n(Jl,"P",{});var BWe=s(Hx);wBr=r(BWe,"This class cannot be instantiated directly using "),mCe=n(BWe,"CODE",{});var eqt=s(mCe);ABr=r(eqt,"__init__()"),eqt.forEach(t),LBr=r(BWe," (throws an error)."),BWe.forEach(t),yBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var w6=s(Vt);T(Ux.$$.fragment,w6),xBr=i(w6),gCe=n(w6,"P",{});var oqt=s(gCe);$Br=r(oqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oqt.forEach(t),kBr=i(w6),Gc=n(w6,"P",{});var Hte=s(Gc);SBr=r(Hte,`Note:
Loading a model from its configuration file does `),hCe=n(Hte,"STRONG",{});var rqt=s(hCe);RBr=r(rqt,"not"),rqt.forEach(t),PBr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Hte,"A",{href:!0});var tqt=s(pZ);BBr=r(tqt,"from_pretrained()"),tqt.forEach(t),IBr=r(Hte," to load the model weights."),Hte.forEach(t),NBr=i(w6),T(E3.$$.fragment,w6),w6.forEach(t),qBr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(Jx.$$.fragment,Yl),jBr=i(Yl),pCe=n(Yl,"P",{});var aqt=s(pCe);DBr=r(aqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aqt.forEach(t),GBr=i(Yl),un=n(Yl,"P",{});var A6=s(un);OBr=r(A6,"The model class to instantiate is selected based on the "),_Ce=n(A6,"CODE",{});var nqt=s(_Ce);VBr=r(nqt,"model_type"),nqt.forEach(t),XBr=r(A6,` property of the config object (either
passed as an argument or loaded from `),uCe=n(A6,"CODE",{});var sqt=s(uCe);zBr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),QBr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(A6,"CODE",{});var lqt=s(bCe);WBr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),HBr=r(A6,":"),A6.forEach(t),UBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);C3=n(ge,"LI",{});var LGe=s(C3);vCe=n(LGe,"STRONG",{});var iqt=s(vCe);JBr=r(iqt,"albert"),iqt.forEach(t),YBr=r(LGe," \u2014 "),_Z=n(LGe,"A",{href:!0});var dqt=s(_Z);KBr=r(dqt,"TFAlbertForQuestionAnswering"),dqt.forEach(t),ZBr=r(LGe," (ALBERT model)"),LGe.forEach(t),eIr=i(ge),w3=n(ge,"LI",{});var yGe=s(w3);FCe=n(yGe,"STRONG",{});var cqt=s(FCe);oIr=r(cqt,"bert"),cqt.forEach(t),rIr=r(yGe," \u2014 "),uZ=n(yGe,"A",{href:!0});var fqt=s(uZ);tIr=r(fqt,"TFBertForQuestionAnswering"),fqt.forEach(t),aIr=r(yGe," (BERT model)"),yGe.forEach(t),nIr=i(ge),A3=n(ge,"LI",{});var xGe=s(A3);TCe=n(xGe,"STRONG",{});var mqt=s(TCe);sIr=r(mqt,"camembert"),mqt.forEach(t),lIr=r(xGe," \u2014 "),bZ=n(xGe,"A",{href:!0});var gqt=s(bZ);iIr=r(gqt,"TFCamembertForQuestionAnswering"),gqt.forEach(t),dIr=r(xGe," (CamemBERT model)"),xGe.forEach(t),cIr=i(ge),L3=n(ge,"LI",{});var $Ge=s(L3);MCe=n($Ge,"STRONG",{});var hqt=s(MCe);fIr=r(hqt,"convbert"),hqt.forEach(t),mIr=r($Ge," \u2014 "),vZ=n($Ge,"A",{href:!0});var pqt=s(vZ);gIr=r(pqt,"TFConvBertForQuestionAnswering"),pqt.forEach(t),hIr=r($Ge," (ConvBERT model)"),$Ge.forEach(t),pIr=i(ge),y3=n(ge,"LI",{});var kGe=s(y3);ECe=n(kGe,"STRONG",{});var _qt=s(ECe);_Ir=r(_qt,"deberta"),_qt.forEach(t),uIr=r(kGe," \u2014 "),FZ=n(kGe,"A",{href:!0});var uqt=s(FZ);bIr=r(uqt,"TFDebertaForQuestionAnswering"),uqt.forEach(t),vIr=r(kGe," (DeBERTa model)"),kGe.forEach(t),FIr=i(ge),x3=n(ge,"LI",{});var SGe=s(x3);CCe=n(SGe,"STRONG",{});var bqt=s(CCe);TIr=r(bqt,"deberta-v2"),bqt.forEach(t),MIr=r(SGe," \u2014 "),TZ=n(SGe,"A",{href:!0});var vqt=s(TZ);EIr=r(vqt,"TFDebertaV2ForQuestionAnswering"),vqt.forEach(t),CIr=r(SGe," (DeBERTa-v2 model)"),SGe.forEach(t),wIr=i(ge),$3=n(ge,"LI",{});var RGe=s($3);wCe=n(RGe,"STRONG",{});var Fqt=s(wCe);AIr=r(Fqt,"distilbert"),Fqt.forEach(t),LIr=r(RGe," \u2014 "),MZ=n(RGe,"A",{href:!0});var Tqt=s(MZ);yIr=r(Tqt,"TFDistilBertForQuestionAnswering"),Tqt.forEach(t),xIr=r(RGe," (DistilBERT model)"),RGe.forEach(t),$Ir=i(ge),k3=n(ge,"LI",{});var PGe=s(k3);ACe=n(PGe,"STRONG",{});var Mqt=s(ACe);kIr=r(Mqt,"electra"),Mqt.forEach(t),SIr=r(PGe," \u2014 "),EZ=n(PGe,"A",{href:!0});var Eqt=s(EZ);RIr=r(Eqt,"TFElectraForQuestionAnswering"),Eqt.forEach(t),PIr=r(PGe," (ELECTRA model)"),PGe.forEach(t),BIr=i(ge),S3=n(ge,"LI",{});var BGe=s(S3);LCe=n(BGe,"STRONG",{});var Cqt=s(LCe);IIr=r(Cqt,"flaubert"),Cqt.forEach(t),NIr=r(BGe," \u2014 "),CZ=n(BGe,"A",{href:!0});var wqt=s(CZ);qIr=r(wqt,"TFFlaubertForQuestionAnsweringSimple"),wqt.forEach(t),jIr=r(BGe," (FlauBERT model)"),BGe.forEach(t),DIr=i(ge),R3=n(ge,"LI",{});var IGe=s(R3);yCe=n(IGe,"STRONG",{});var Aqt=s(yCe);GIr=r(Aqt,"funnel"),Aqt.forEach(t),OIr=r(IGe," \u2014 "),wZ=n(IGe,"A",{href:!0});var Lqt=s(wZ);VIr=r(Lqt,"TFFunnelForQuestionAnswering"),Lqt.forEach(t),XIr=r(IGe," (Funnel Transformer model)"),IGe.forEach(t),zIr=i(ge),P3=n(ge,"LI",{});var NGe=s(P3);xCe=n(NGe,"STRONG",{});var yqt=s(xCe);QIr=r(yqt,"gptj"),yqt.forEach(t),WIr=r(NGe," \u2014 "),AZ=n(NGe,"A",{href:!0});var xqt=s(AZ);HIr=r(xqt,"TFGPTJForQuestionAnswering"),xqt.forEach(t),UIr=r(NGe," (GPT-J model)"),NGe.forEach(t),JIr=i(ge),B3=n(ge,"LI",{});var qGe=s(B3);$Ce=n(qGe,"STRONG",{});var $qt=s($Ce);YIr=r($qt,"longformer"),$qt.forEach(t),KIr=r(qGe," \u2014 "),LZ=n(qGe,"A",{href:!0});var kqt=s(LZ);ZIr=r(kqt,"TFLongformerForQuestionAnswering"),kqt.forEach(t),eNr=r(qGe," (Longformer model)"),qGe.forEach(t),oNr=i(ge),I3=n(ge,"LI",{});var jGe=s(I3);kCe=n(jGe,"STRONG",{});var Sqt=s(kCe);rNr=r(Sqt,"mobilebert"),Sqt.forEach(t),tNr=r(jGe," \u2014 "),yZ=n(jGe,"A",{href:!0});var Rqt=s(yZ);aNr=r(Rqt,"TFMobileBertForQuestionAnswering"),Rqt.forEach(t),nNr=r(jGe," (MobileBERT model)"),jGe.forEach(t),sNr=i(ge),N3=n(ge,"LI",{});var DGe=s(N3);SCe=n(DGe,"STRONG",{});var Pqt=s(SCe);lNr=r(Pqt,"mpnet"),Pqt.forEach(t),iNr=r(DGe," \u2014 "),xZ=n(DGe,"A",{href:!0});var Bqt=s(xZ);dNr=r(Bqt,"TFMPNetForQuestionAnswering"),Bqt.forEach(t),cNr=r(DGe," (MPNet model)"),DGe.forEach(t),fNr=i(ge),q3=n(ge,"LI",{});var GGe=s(q3);RCe=n(GGe,"STRONG",{});var Iqt=s(RCe);mNr=r(Iqt,"rembert"),Iqt.forEach(t),gNr=r(GGe," \u2014 "),$Z=n(GGe,"A",{href:!0});var Nqt=s($Z);hNr=r(Nqt,"TFRemBertForQuestionAnswering"),Nqt.forEach(t),pNr=r(GGe," (RemBERT model)"),GGe.forEach(t),_Nr=i(ge),j3=n(ge,"LI",{});var OGe=s(j3);PCe=n(OGe,"STRONG",{});var qqt=s(PCe);uNr=r(qqt,"roberta"),qqt.forEach(t),bNr=r(OGe," \u2014 "),kZ=n(OGe,"A",{href:!0});var jqt=s(kZ);vNr=r(jqt,"TFRobertaForQuestionAnswering"),jqt.forEach(t),FNr=r(OGe," (RoBERTa model)"),OGe.forEach(t),TNr=i(ge),D3=n(ge,"LI",{});var VGe=s(D3);BCe=n(VGe,"STRONG",{});var Dqt=s(BCe);MNr=r(Dqt,"roformer"),Dqt.forEach(t),ENr=r(VGe," \u2014 "),SZ=n(VGe,"A",{href:!0});var Gqt=s(SZ);CNr=r(Gqt,"TFRoFormerForQuestionAnswering"),Gqt.forEach(t),wNr=r(VGe," (RoFormer model)"),VGe.forEach(t),ANr=i(ge),G3=n(ge,"LI",{});var XGe=s(G3);ICe=n(XGe,"STRONG",{});var Oqt=s(ICe);LNr=r(Oqt,"xlm"),Oqt.forEach(t),yNr=r(XGe," \u2014 "),RZ=n(XGe,"A",{href:!0});var Vqt=s(RZ);xNr=r(Vqt,"TFXLMForQuestionAnsweringSimple"),Vqt.forEach(t),$Nr=r(XGe," (XLM model)"),XGe.forEach(t),kNr=i(ge),O3=n(ge,"LI",{});var zGe=s(O3);NCe=n(zGe,"STRONG",{});var Xqt=s(NCe);SNr=r(Xqt,"xlm-roberta"),Xqt.forEach(t),RNr=r(zGe," \u2014 "),PZ=n(zGe,"A",{href:!0});var zqt=s(PZ);PNr=r(zqt,"TFXLMRobertaForQuestionAnswering"),zqt.forEach(t),BNr=r(zGe," (XLM-RoBERTa model)"),zGe.forEach(t),INr=i(ge),V3=n(ge,"LI",{});var QGe=s(V3);qCe=n(QGe,"STRONG",{});var Qqt=s(qCe);NNr=r(Qqt,"xlnet"),Qqt.forEach(t),qNr=r(QGe," \u2014 "),BZ=n(QGe,"A",{href:!0});var Wqt=s(BZ);jNr=r(Wqt,"TFXLNetForQuestionAnsweringSimple"),Wqt.forEach(t),DNr=r(QGe," (XLNet model)"),QGe.forEach(t),ge.forEach(t),GNr=i(Yl),T(X3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),yze=i(f),Oc=n(f,"H2",{class:!0});var IWe=s(Oc);z3=n(IWe,"A",{id:!0,class:!0,href:!0});var Hqt=s(z3);jCe=n(Hqt,"SPAN",{});var Uqt=s(jCe);T(Yx.$$.fragment,Uqt),Uqt.forEach(t),Hqt.forEach(t),ONr=i(IWe),DCe=n(IWe,"SPAN",{});var Jqt=s(DCe);VNr=r(Jqt,"TFAutoModelForVision2Seq"),Jqt.forEach(t),IWe.forEach(t),xze=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(Kx.$$.fragment,Kl),XNr=i(Kl),Vc=n(Kl,"P",{});var Ute=s(Vc);zNr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IZ=n(Ute,"A",{href:!0});var Yqt=s(IZ);QNr=r(Yqt,"from_pretrained()"),Yqt.forEach(t),WNr=r(Ute," class method or the "),NZ=n(Ute,"A",{href:!0});var Kqt=s(NZ);HNr=r(Kqt,"from_config()"),Kqt.forEach(t),UNr=r(Ute,` class
method.`),Ute.forEach(t),JNr=i(Kl),Zx=n(Kl,"P",{});var NWe=s(Zx);YNr=r(NWe,"This class cannot be instantiated directly using "),GCe=n(NWe,"CODE",{});var Zqt=s(GCe);KNr=r(Zqt,"__init__()"),Zqt.forEach(t),ZNr=r(NWe," (throws an error)."),NWe.forEach(t),eqr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var L6=s(Xt);T(e$.$$.fragment,L6),oqr=i(L6),OCe=n(L6,"P",{});var ejt=s(OCe);rqr=r(ejt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ejt.forEach(t),tqr=i(L6),Xc=n(L6,"P",{});var Jte=s(Xc);aqr=r(Jte,`Note:
Loading a model from its configuration file does `),VCe=n(Jte,"STRONG",{});var ojt=s(VCe);nqr=r(ojt,"not"),ojt.forEach(t),sqr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Jte,"A",{href:!0});var rjt=s(qZ);lqr=r(rjt,"from_pretrained()"),rjt.forEach(t),iqr=r(Jte," to load the model weights."),Jte.forEach(t),dqr=i(L6),T(Q3.$$.fragment,L6),L6.forEach(t),cqr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(o$.$$.fragment,Zl),fqr=i(Zl),XCe=n(Zl,"P",{});var tjt=s(XCe);mqr=r(tjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tjt.forEach(t),gqr=i(Zl),bn=n(Zl,"P",{});var y6=s(bn);hqr=r(y6,"The model class to instantiate is selected based on the "),zCe=n(y6,"CODE",{});var ajt=s(zCe);pqr=r(ajt,"model_type"),ajt.forEach(t),_qr=r(y6,` property of the config object (either
passed as an argument or loaded from `),QCe=n(y6,"CODE",{});var njt=s(QCe);uqr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),bqr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(y6,"CODE",{});var sjt=s(WCe);vqr=r(sjt,"pretrained_model_name_or_path"),sjt.forEach(t),Fqr=r(y6,":"),y6.forEach(t),Tqr=i(Zl),HCe=n(Zl,"UL",{});var ljt=s(HCe);W3=n(ljt,"LI",{});var WGe=s(W3);UCe=n(WGe,"STRONG",{});var ijt=s(UCe);Mqr=r(ijt,"vision-encoder-decoder"),ijt.forEach(t),Eqr=r(WGe," \u2014 "),jZ=n(WGe,"A",{href:!0});var djt=s(jZ);Cqr=r(djt,"TFVisionEncoderDecoderModel"),djt.forEach(t),wqr=r(WGe," (Vision Encoder decoder model)"),WGe.forEach(t),ljt.forEach(t),Aqr=i(Zl),T(H3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),$ze=i(f),zc=n(f,"H2",{class:!0});var qWe=s(zc);U3=n(qWe,"A",{id:!0,class:!0,href:!0});var cjt=s(U3);JCe=n(cjt,"SPAN",{});var fjt=s(JCe);T(r$.$$.fragment,fjt),fjt.forEach(t),cjt.forEach(t),Lqr=i(qWe),YCe=n(qWe,"SPAN",{});var mjt=s(YCe);yqr=r(mjt,"TFAutoModelForSpeechSeq2Seq"),mjt.forEach(t),qWe.forEach(t),kze=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(t$.$$.fragment,ei),xqr=i(ei),Qc=n(ei,"P",{});var Yte=s(Qc);$qr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DZ=n(Yte,"A",{href:!0});var gjt=s(DZ);kqr=r(gjt,"from_pretrained()"),gjt.forEach(t),Sqr=r(Yte," class method or the "),GZ=n(Yte,"A",{href:!0});var hjt=s(GZ);Rqr=r(hjt,"from_config()"),hjt.forEach(t),Pqr=r(Yte,` class
method.`),Yte.forEach(t),Bqr=i(ei),a$=n(ei,"P",{});var jWe=s(a$);Iqr=r(jWe,"This class cannot be instantiated directly using "),KCe=n(jWe,"CODE",{});var pjt=s(KCe);Nqr=r(pjt,"__init__()"),pjt.forEach(t),qqr=r(jWe," (throws an error)."),jWe.forEach(t),jqr=i(ei),zt=n(ei,"DIV",{class:!0});var x6=s(zt);T(n$.$$.fragment,x6),Dqr=i(x6),ZCe=n(x6,"P",{});var _jt=s(ZCe);Gqr=r(_jt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_jt.forEach(t),Oqr=i(x6),Wc=n(x6,"P",{});var Kte=s(Wc);Vqr=r(Kte,`Note:
Loading a model from its configuration file does `),e3e=n(Kte,"STRONG",{});var ujt=s(e3e);Xqr=r(ujt,"not"),ujt.forEach(t),zqr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Kte,"A",{href:!0});var bjt=s(OZ);Qqr=r(bjt,"from_pretrained()"),bjt.forEach(t),Wqr=r(Kte," to load the model weights."),Kte.forEach(t),Hqr=i(x6),T(J3.$$.fragment,x6),x6.forEach(t),Uqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(s$.$$.fragment,oi),Jqr=i(oi),o3e=n(oi,"P",{});var vjt=s(o3e);Yqr=r(vjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vjt.forEach(t),Kqr=i(oi),vn=n(oi,"P",{});var $6=s(vn);Zqr=r($6,"The model class to instantiate is selected based on the "),r3e=n($6,"CODE",{});var Fjt=s(r3e);ejr=r(Fjt,"model_type"),Fjt.forEach(t),ojr=r($6,` property of the config object (either
passed as an argument or loaded from `),t3e=n($6,"CODE",{});var Tjt=s(t3e);rjr=r(Tjt,"pretrained_model_name_or_path"),Tjt.forEach(t),tjr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=n($6,"CODE",{});var Mjt=s(a3e);ajr=r(Mjt,"pretrained_model_name_or_path"),Mjt.forEach(t),njr=r($6,":"),$6.forEach(t),sjr=i(oi),n3e=n(oi,"UL",{});var Ejt=s(n3e);Y3=n(Ejt,"LI",{});var HGe=s(Y3);s3e=n(HGe,"STRONG",{});var Cjt=s(s3e);ljr=r(Cjt,"speech_to_text"),Cjt.forEach(t),ijr=r(HGe," \u2014 "),VZ=n(HGe,"A",{href:!0});var wjt=s(VZ);djr=r(wjt,"TFSpeech2TextForConditionalGeneration"),wjt.forEach(t),cjr=r(HGe," (Speech2Text model)"),HGe.forEach(t),Ejt.forEach(t),fjr=i(oi),T(K3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Sze=i(f),Hc=n(f,"H2",{class:!0});var DWe=s(Hc);Z3=n(DWe,"A",{id:!0,class:!0,href:!0});var Ajt=s(Z3);l3e=n(Ajt,"SPAN",{});var Ljt=s(l3e);T(l$.$$.fragment,Ljt),Ljt.forEach(t),Ajt.forEach(t),mjr=i(DWe),i3e=n(DWe,"SPAN",{});var yjt=s(i3e);gjr=r(yjt,"FlaxAutoModel"),yjt.forEach(t),DWe.forEach(t),Rze=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(i$.$$.fragment,ri),hjr=i(ri),Uc=n(ri,"P",{});var Zte=s(Uc);pjr=r(Zte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XZ=n(Zte,"A",{href:!0});var xjt=s(XZ);_jr=r(xjt,"from_pretrained()"),xjt.forEach(t),ujr=r(Zte," class method or the "),zZ=n(Zte,"A",{href:!0});var $jt=s(zZ);bjr=r($jt,"from_config()"),$jt.forEach(t),vjr=r(Zte,` class
method.`),Zte.forEach(t),Fjr=i(ri),d$=n(ri,"P",{});var GWe=s(d$);Tjr=r(GWe,"This class cannot be instantiated directly using "),d3e=n(GWe,"CODE",{});var kjt=s(d3e);Mjr=r(kjt,"__init__()"),kjt.forEach(t),Ejr=r(GWe," (throws an error)."),GWe.forEach(t),Cjr=i(ri),Qt=n(ri,"DIV",{class:!0});var k6=s(Qt);T(c$.$$.fragment,k6),wjr=i(k6),c3e=n(k6,"P",{});var Sjt=s(c3e);Ajr=r(Sjt,"Instantiates one of the base model classes of the library from a configuration."),Sjt.forEach(t),Ljr=i(k6),Jc=n(k6,"P",{});var eae=s(Jc);yjr=r(eae,`Note:
Loading a model from its configuration file does `),f3e=n(eae,"STRONG",{});var Rjt=s(f3e);xjr=r(Rjt,"not"),Rjt.forEach(t),$jr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(eae,"A",{href:!0});var Pjt=s(QZ);kjr=r(Pjt,"from_pretrained()"),Pjt.forEach(t),Sjr=r(eae," to load the model weights."),eae.forEach(t),Rjr=i(k6),T(e5.$$.fragment,k6),k6.forEach(t),Pjr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(f$.$$.fragment,ti),Bjr=i(ti),m3e=n(ti,"P",{});var Bjt=s(m3e);Ijr=r(Bjt,"Instantiate one of the base model classes of the library from a pretrained model."),Bjt.forEach(t),Njr=i(ti),Fn=n(ti,"P",{});var S6=s(Fn);qjr=r(S6,"The model class to instantiate is selected based on the "),g3e=n(S6,"CODE",{});var Ijt=s(g3e);jjr=r(Ijt,"model_type"),Ijt.forEach(t),Djr=r(S6,` property of the config object (either
passed as an argument or loaded from `),h3e=n(S6,"CODE",{});var Njt=s(h3e);Gjr=r(Njt,"pretrained_model_name_or_path"),Njt.forEach(t),Ojr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(S6,"CODE",{});var qjt=s(p3e);Vjr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),Xjr=r(S6,":"),S6.forEach(t),zjr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);o5=n(ae,"LI",{});var UGe=s(o5);_3e=n(UGe,"STRONG",{});var jjt=s(_3e);Qjr=r(jjt,"albert"),jjt.forEach(t),Wjr=r(UGe," \u2014 "),WZ=n(UGe,"A",{href:!0});var Djt=s(WZ);Hjr=r(Djt,"FlaxAlbertModel"),Djt.forEach(t),Ujr=r(UGe," (ALBERT model)"),UGe.forEach(t),Jjr=i(ae),r5=n(ae,"LI",{});var JGe=s(r5);u3e=n(JGe,"STRONG",{});var Gjt=s(u3e);Yjr=r(Gjt,"bart"),Gjt.forEach(t),Kjr=r(JGe," \u2014 "),HZ=n(JGe,"A",{href:!0});var Ojt=s(HZ);Zjr=r(Ojt,"FlaxBartModel"),Ojt.forEach(t),eDr=r(JGe," (BART model)"),JGe.forEach(t),oDr=i(ae),t5=n(ae,"LI",{});var YGe=s(t5);b3e=n(YGe,"STRONG",{});var Vjt=s(b3e);rDr=r(Vjt,"beit"),Vjt.forEach(t),tDr=r(YGe," \u2014 "),UZ=n(YGe,"A",{href:!0});var Xjt=s(UZ);aDr=r(Xjt,"FlaxBeitModel"),Xjt.forEach(t),nDr=r(YGe," (BEiT model)"),YGe.forEach(t),sDr=i(ae),a5=n(ae,"LI",{});var KGe=s(a5);v3e=n(KGe,"STRONG",{});var zjt=s(v3e);lDr=r(zjt,"bert"),zjt.forEach(t),iDr=r(KGe," \u2014 "),JZ=n(KGe,"A",{href:!0});var Qjt=s(JZ);dDr=r(Qjt,"FlaxBertModel"),Qjt.forEach(t),cDr=r(KGe," (BERT model)"),KGe.forEach(t),fDr=i(ae),n5=n(ae,"LI",{});var ZGe=s(n5);F3e=n(ZGe,"STRONG",{});var Wjt=s(F3e);mDr=r(Wjt,"big_bird"),Wjt.forEach(t),gDr=r(ZGe," \u2014 "),YZ=n(ZGe,"A",{href:!0});var Hjt=s(YZ);hDr=r(Hjt,"FlaxBigBirdModel"),Hjt.forEach(t),pDr=r(ZGe," (BigBird model)"),ZGe.forEach(t),_Dr=i(ae),s5=n(ae,"LI",{});var eOe=s(s5);T3e=n(eOe,"STRONG",{});var Ujt=s(T3e);uDr=r(Ujt,"blenderbot"),Ujt.forEach(t),bDr=r(eOe," \u2014 "),KZ=n(eOe,"A",{href:!0});var Jjt=s(KZ);vDr=r(Jjt,"FlaxBlenderbotModel"),Jjt.forEach(t),FDr=r(eOe," (Blenderbot model)"),eOe.forEach(t),TDr=i(ae),l5=n(ae,"LI",{});var oOe=s(l5);M3e=n(oOe,"STRONG",{});var Yjt=s(M3e);MDr=r(Yjt,"blenderbot-small"),Yjt.forEach(t),EDr=r(oOe," \u2014 "),ZZ=n(oOe,"A",{href:!0});var Kjt=s(ZZ);CDr=r(Kjt,"FlaxBlenderbotSmallModel"),Kjt.forEach(t),wDr=r(oOe," (BlenderbotSmall model)"),oOe.forEach(t),ADr=i(ae),i5=n(ae,"LI",{});var rOe=s(i5);E3e=n(rOe,"STRONG",{});var Zjt=s(E3e);LDr=r(Zjt,"clip"),Zjt.forEach(t),yDr=r(rOe," \u2014 "),eee=n(rOe,"A",{href:!0});var eDt=s(eee);xDr=r(eDt,"FlaxCLIPModel"),eDt.forEach(t),$Dr=r(rOe," (CLIP model)"),rOe.forEach(t),kDr=i(ae),d5=n(ae,"LI",{});var tOe=s(d5);C3e=n(tOe,"STRONG",{});var oDt=s(C3e);SDr=r(oDt,"distilbert"),oDt.forEach(t),RDr=r(tOe," \u2014 "),oee=n(tOe,"A",{href:!0});var rDt=s(oee);PDr=r(rDt,"FlaxDistilBertModel"),rDt.forEach(t),BDr=r(tOe," (DistilBERT model)"),tOe.forEach(t),IDr=i(ae),c5=n(ae,"LI",{});var aOe=s(c5);w3e=n(aOe,"STRONG",{});var tDt=s(w3e);NDr=r(tDt,"electra"),tDt.forEach(t),qDr=r(aOe," \u2014 "),ree=n(aOe,"A",{href:!0});var aDt=s(ree);jDr=r(aDt,"FlaxElectraModel"),aDt.forEach(t),DDr=r(aOe," (ELECTRA model)"),aOe.forEach(t),GDr=i(ae),f5=n(ae,"LI",{});var nOe=s(f5);A3e=n(nOe,"STRONG",{});var nDt=s(A3e);ODr=r(nDt,"gpt2"),nDt.forEach(t),VDr=r(nOe," \u2014 "),tee=n(nOe,"A",{href:!0});var sDt=s(tee);XDr=r(sDt,"FlaxGPT2Model"),sDt.forEach(t),zDr=r(nOe," (OpenAI GPT-2 model)"),nOe.forEach(t),QDr=i(ae),m5=n(ae,"LI",{});var sOe=s(m5);L3e=n(sOe,"STRONG",{});var lDt=s(L3e);WDr=r(lDt,"gpt_neo"),lDt.forEach(t),HDr=r(sOe," \u2014 "),aee=n(sOe,"A",{href:!0});var iDt=s(aee);UDr=r(iDt,"FlaxGPTNeoModel"),iDt.forEach(t),JDr=r(sOe," (GPT Neo model)"),sOe.forEach(t),YDr=i(ae),g5=n(ae,"LI",{});var lOe=s(g5);y3e=n(lOe,"STRONG",{});var dDt=s(y3e);KDr=r(dDt,"gptj"),dDt.forEach(t),ZDr=r(lOe," \u2014 "),nee=n(lOe,"A",{href:!0});var cDt=s(nee);eGr=r(cDt,"FlaxGPTJModel"),cDt.forEach(t),oGr=r(lOe," (GPT-J model)"),lOe.forEach(t),rGr=i(ae),h5=n(ae,"LI",{});var iOe=s(h5);x3e=n(iOe,"STRONG",{});var fDt=s(x3e);tGr=r(fDt,"longt5"),fDt.forEach(t),aGr=r(iOe," \u2014 "),see=n(iOe,"A",{href:!0});var mDt=s(see);nGr=r(mDt,"FlaxLongT5Model"),mDt.forEach(t),sGr=r(iOe," (LongT5 model)"),iOe.forEach(t),lGr=i(ae),p5=n(ae,"LI",{});var dOe=s(p5);$3e=n(dOe,"STRONG",{});var gDt=s($3e);iGr=r(gDt,"marian"),gDt.forEach(t),dGr=r(dOe," \u2014 "),lee=n(dOe,"A",{href:!0});var hDt=s(lee);cGr=r(hDt,"FlaxMarianModel"),hDt.forEach(t),fGr=r(dOe," (Marian model)"),dOe.forEach(t),mGr=i(ae),_5=n(ae,"LI",{});var cOe=s(_5);k3e=n(cOe,"STRONG",{});var pDt=s(k3e);gGr=r(pDt,"mbart"),pDt.forEach(t),hGr=r(cOe," \u2014 "),iee=n(cOe,"A",{href:!0});var _Dt=s(iee);pGr=r(_Dt,"FlaxMBartModel"),_Dt.forEach(t),_Gr=r(cOe," (mBART model)"),cOe.forEach(t),uGr=i(ae),u5=n(ae,"LI",{});var fOe=s(u5);S3e=n(fOe,"STRONG",{});var uDt=s(S3e);bGr=r(uDt,"mt5"),uDt.forEach(t),vGr=r(fOe," \u2014 "),dee=n(fOe,"A",{href:!0});var bDt=s(dee);FGr=r(bDt,"FlaxMT5Model"),bDt.forEach(t),TGr=r(fOe," (MT5 model)"),fOe.forEach(t),MGr=i(ae),b5=n(ae,"LI",{});var mOe=s(b5);R3e=n(mOe,"STRONG",{});var vDt=s(R3e);EGr=r(vDt,"opt"),vDt.forEach(t),CGr=r(mOe," \u2014 "),cee=n(mOe,"A",{href:!0});var FDt=s(cee);wGr=r(FDt,"FlaxOPTModel"),FDt.forEach(t),AGr=r(mOe," (OPT model)"),mOe.forEach(t),LGr=i(ae),v5=n(ae,"LI",{});var gOe=s(v5);P3e=n(gOe,"STRONG",{});var TDt=s(P3e);yGr=r(TDt,"pegasus"),TDt.forEach(t),xGr=r(gOe," \u2014 "),fee=n(gOe,"A",{href:!0});var MDt=s(fee);$Gr=r(MDt,"FlaxPegasusModel"),MDt.forEach(t),kGr=r(gOe," (Pegasus model)"),gOe.forEach(t),SGr=i(ae),F5=n(ae,"LI",{});var hOe=s(F5);B3e=n(hOe,"STRONG",{});var EDt=s(B3e);RGr=r(EDt,"roberta"),EDt.forEach(t),PGr=r(hOe," \u2014 "),mee=n(hOe,"A",{href:!0});var CDt=s(mee);BGr=r(CDt,"FlaxRobertaModel"),CDt.forEach(t),IGr=r(hOe," (RoBERTa model)"),hOe.forEach(t),NGr=i(ae),T5=n(ae,"LI",{});var pOe=s(T5);I3e=n(pOe,"STRONG",{});var wDt=s(I3e);qGr=r(wDt,"roformer"),wDt.forEach(t),jGr=r(pOe," \u2014 "),gee=n(pOe,"A",{href:!0});var ADt=s(gee);DGr=r(ADt,"FlaxRoFormerModel"),ADt.forEach(t),GGr=r(pOe," (RoFormer model)"),pOe.forEach(t),OGr=i(ae),M5=n(ae,"LI",{});var _Oe=s(M5);N3e=n(_Oe,"STRONG",{});var LDt=s(N3e);VGr=r(LDt,"t5"),LDt.forEach(t),XGr=r(_Oe," \u2014 "),hee=n(_Oe,"A",{href:!0});var yDt=s(hee);zGr=r(yDt,"FlaxT5Model"),yDt.forEach(t),QGr=r(_Oe," (T5 model)"),_Oe.forEach(t),WGr=i(ae),E5=n(ae,"LI",{});var uOe=s(E5);q3e=n(uOe,"STRONG",{});var xDt=s(q3e);HGr=r(xDt,"vision-text-dual-encoder"),xDt.forEach(t),UGr=r(uOe," \u2014 "),pee=n(uOe,"A",{href:!0});var $Dt=s(pee);JGr=r($Dt,"FlaxVisionTextDualEncoderModel"),$Dt.forEach(t),YGr=r(uOe," (VisionTextDualEncoder model)"),uOe.forEach(t),KGr=i(ae),C5=n(ae,"LI",{});var bOe=s(C5);j3e=n(bOe,"STRONG",{});var kDt=s(j3e);ZGr=r(kDt,"vit"),kDt.forEach(t),eOr=r(bOe," \u2014 "),_ee=n(bOe,"A",{href:!0});var SDt=s(_ee);oOr=r(SDt,"FlaxViTModel"),SDt.forEach(t),rOr=r(bOe," (ViT model)"),bOe.forEach(t),tOr=i(ae),w5=n(ae,"LI",{});var vOe=s(w5);D3e=n(vOe,"STRONG",{});var RDt=s(D3e);aOr=r(RDt,"wav2vec2"),RDt.forEach(t),nOr=r(vOe," \u2014 "),uee=n(vOe,"A",{href:!0});var PDt=s(uee);sOr=r(PDt,"FlaxWav2Vec2Model"),PDt.forEach(t),lOr=r(vOe," (Wav2Vec2 model)"),vOe.forEach(t),iOr=i(ae),A5=n(ae,"LI",{});var FOe=s(A5);G3e=n(FOe,"STRONG",{});var BDt=s(G3e);dOr=r(BDt,"xglm"),BDt.forEach(t),cOr=r(FOe," \u2014 "),bee=n(FOe,"A",{href:!0});var IDt=s(bee);fOr=r(IDt,"FlaxXGLMModel"),IDt.forEach(t),mOr=r(FOe," (XGLM model)"),FOe.forEach(t),gOr=i(ae),L5=n(ae,"LI",{});var TOe=s(L5);O3e=n(TOe,"STRONG",{});var NDt=s(O3e);hOr=r(NDt,"xlm-roberta"),NDt.forEach(t),pOr=r(TOe," \u2014 "),vee=n(TOe,"A",{href:!0});var qDt=s(vee);_Or=r(qDt,"FlaxXLMRobertaModel"),qDt.forEach(t),uOr=r(TOe," (XLM-RoBERTa model)"),TOe.forEach(t),ae.forEach(t),bOr=i(ti),T(y5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Pze=i(f),Yc=n(f,"H2",{class:!0});var OWe=s(Yc);x5=n(OWe,"A",{id:!0,class:!0,href:!0});var jDt=s(x5);V3e=n(jDt,"SPAN",{});var DDt=s(V3e);T(m$.$$.fragment,DDt),DDt.forEach(t),jDt.forEach(t),vOr=i(OWe),X3e=n(OWe,"SPAN",{});var GDt=s(X3e);FOr=r(GDt,"FlaxAutoModelForCausalLM"),GDt.forEach(t),OWe.forEach(t),Bze=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(g$.$$.fragment,ai),TOr=i(ai),Kc=n(ai,"P",{});var oae=s(Kc);MOr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fee=n(oae,"A",{href:!0});var ODt=s(Fee);EOr=r(ODt,"from_pretrained()"),ODt.forEach(t),COr=r(oae," class method or the "),Tee=n(oae,"A",{href:!0});var VDt=s(Tee);wOr=r(VDt,"from_config()"),VDt.forEach(t),AOr=r(oae,` class
method.`),oae.forEach(t),LOr=i(ai),h$=n(ai,"P",{});var VWe=s(h$);yOr=r(VWe,"This class cannot be instantiated directly using "),z3e=n(VWe,"CODE",{});var XDt=s(z3e);xOr=r(XDt,"__init__()"),XDt.forEach(t),$Or=r(VWe," (throws an error)."),VWe.forEach(t),kOr=i(ai),Wt=n(ai,"DIV",{class:!0});var R6=s(Wt);T(p$.$$.fragment,R6),SOr=i(R6),Q3e=n(R6,"P",{});var zDt=s(Q3e);ROr=r(zDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zDt.forEach(t),POr=i(R6),Zc=n(R6,"P",{});var rae=s(Zc);BOr=r(rae,`Note:
Loading a model from its configuration file does `),W3e=n(rae,"STRONG",{});var QDt=s(W3e);IOr=r(QDt,"not"),QDt.forEach(t),NOr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(rae,"A",{href:!0});var WDt=s(Mee);qOr=r(WDt,"from_pretrained()"),WDt.forEach(t),jOr=r(rae," to load the model weights."),rae.forEach(t),DOr=i(R6),T($5.$$.fragment,R6),R6.forEach(t),GOr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(_$.$$.fragment,ni),OOr=i(ni),H3e=n(ni,"P",{});var HDt=s(H3e);VOr=r(HDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HDt.forEach(t),XOr=i(ni),Tn=n(ni,"P",{});var P6=s(Tn);zOr=r(P6,"The model class to instantiate is selected based on the "),U3e=n(P6,"CODE",{});var UDt=s(U3e);QOr=r(UDt,"model_type"),UDt.forEach(t),WOr=r(P6,` property of the config object (either
passed as an argument or loaded from `),J3e=n(P6,"CODE",{});var JDt=s(J3e);HOr=r(JDt,"pretrained_model_name_or_path"),JDt.forEach(t),UOr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(P6,"CODE",{});var YDt=s(Y3e);JOr=r(YDt,"pretrained_model_name_or_path"),YDt.forEach(t),YOr=r(P6,":"),P6.forEach(t),KOr=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);k5=n(Ne,"LI",{});var MOe=s(k5);K3e=n(MOe,"STRONG",{});var KDt=s(K3e);ZOr=r(KDt,"bart"),KDt.forEach(t),eVr=r(MOe," \u2014 "),Eee=n(MOe,"A",{href:!0});var ZDt=s(Eee);oVr=r(ZDt,"FlaxBartForCausalLM"),ZDt.forEach(t),rVr=r(MOe," (BART model)"),MOe.forEach(t),tVr=i(Ne),S5=n(Ne,"LI",{});var EOe=s(S5);Z3e=n(EOe,"STRONG",{});var eGt=s(Z3e);aVr=r(eGt,"bert"),eGt.forEach(t),nVr=r(EOe," \u2014 "),Cee=n(EOe,"A",{href:!0});var oGt=s(Cee);sVr=r(oGt,"FlaxBertForCausalLM"),oGt.forEach(t),lVr=r(EOe," (BERT model)"),EOe.forEach(t),iVr=i(Ne),R5=n(Ne,"LI",{});var COe=s(R5);e5e=n(COe,"STRONG",{});var rGt=s(e5e);dVr=r(rGt,"big_bird"),rGt.forEach(t),cVr=r(COe," \u2014 "),wee=n(COe,"A",{href:!0});var tGt=s(wee);fVr=r(tGt,"FlaxBigBirdForCausalLM"),tGt.forEach(t),mVr=r(COe," (BigBird model)"),COe.forEach(t),gVr=i(Ne),P5=n(Ne,"LI",{});var wOe=s(P5);o5e=n(wOe,"STRONG",{});var aGt=s(o5e);hVr=r(aGt,"electra"),aGt.forEach(t),pVr=r(wOe," \u2014 "),Aee=n(wOe,"A",{href:!0});var nGt=s(Aee);_Vr=r(nGt,"FlaxElectraForCausalLM"),nGt.forEach(t),uVr=r(wOe," (ELECTRA model)"),wOe.forEach(t),bVr=i(Ne),B5=n(Ne,"LI",{});var AOe=s(B5);r5e=n(AOe,"STRONG",{});var sGt=s(r5e);vVr=r(sGt,"gpt2"),sGt.forEach(t),FVr=r(AOe," \u2014 "),Lee=n(AOe,"A",{href:!0});var lGt=s(Lee);TVr=r(lGt,"FlaxGPT2LMHeadModel"),lGt.forEach(t),MVr=r(AOe," (OpenAI GPT-2 model)"),AOe.forEach(t),EVr=i(Ne),I5=n(Ne,"LI",{});var LOe=s(I5);t5e=n(LOe,"STRONG",{});var iGt=s(t5e);CVr=r(iGt,"gpt_neo"),iGt.forEach(t),wVr=r(LOe," \u2014 "),yee=n(LOe,"A",{href:!0});var dGt=s(yee);AVr=r(dGt,"FlaxGPTNeoForCausalLM"),dGt.forEach(t),LVr=r(LOe," (GPT Neo model)"),LOe.forEach(t),yVr=i(Ne),N5=n(Ne,"LI",{});var yOe=s(N5);a5e=n(yOe,"STRONG",{});var cGt=s(a5e);xVr=r(cGt,"gptj"),cGt.forEach(t),$Vr=r(yOe," \u2014 "),xee=n(yOe,"A",{href:!0});var fGt=s(xee);kVr=r(fGt,"FlaxGPTJForCausalLM"),fGt.forEach(t),SVr=r(yOe," (GPT-J model)"),yOe.forEach(t),RVr=i(Ne),q5=n(Ne,"LI",{});var xOe=s(q5);n5e=n(xOe,"STRONG",{});var mGt=s(n5e);PVr=r(mGt,"opt"),mGt.forEach(t),BVr=r(xOe," \u2014 "),$ee=n(xOe,"A",{href:!0});var gGt=s($ee);IVr=r(gGt,"FlaxOPTForCausalLM"),gGt.forEach(t),NVr=r(xOe," (OPT model)"),xOe.forEach(t),qVr=i(Ne),j5=n(Ne,"LI",{});var $Oe=s(j5);s5e=n($Oe,"STRONG",{});var hGt=s(s5e);jVr=r(hGt,"roberta"),hGt.forEach(t),DVr=r($Oe," \u2014 "),kee=n($Oe,"A",{href:!0});var pGt=s(kee);GVr=r(pGt,"FlaxRobertaForCausalLM"),pGt.forEach(t),OVr=r($Oe," (RoBERTa model)"),$Oe.forEach(t),VVr=i(Ne),D5=n(Ne,"LI",{});var kOe=s(D5);l5e=n(kOe,"STRONG",{});var _Gt=s(l5e);XVr=r(_Gt,"xglm"),_Gt.forEach(t),zVr=r(kOe," \u2014 "),See=n(kOe,"A",{href:!0});var uGt=s(See);QVr=r(uGt,"FlaxXGLMForCausalLM"),uGt.forEach(t),WVr=r(kOe," (XGLM model)"),kOe.forEach(t),Ne.forEach(t),HVr=i(ni),T(G5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Ize=i(f),ef=n(f,"H2",{class:!0});var XWe=s(ef);O5=n(XWe,"A",{id:!0,class:!0,href:!0});var bGt=s(O5);i5e=n(bGt,"SPAN",{});var vGt=s(i5e);T(u$.$$.fragment,vGt),vGt.forEach(t),bGt.forEach(t),UVr=i(XWe),d5e=n(XWe,"SPAN",{});var FGt=s(d5e);JVr=r(FGt,"FlaxAutoModelForPreTraining"),FGt.forEach(t),XWe.forEach(t),Nze=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(b$.$$.fragment,si),YVr=i(si),of=n(si,"P",{});var tae=s(of);KVr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ree=n(tae,"A",{href:!0});var TGt=s(Ree);ZVr=r(TGt,"from_pretrained()"),TGt.forEach(t),eXr=r(tae," class method or the "),Pee=n(tae,"A",{href:!0});var MGt=s(Pee);oXr=r(MGt,"from_config()"),MGt.forEach(t),rXr=r(tae,` class
method.`),tae.forEach(t),tXr=i(si),v$=n(si,"P",{});var zWe=s(v$);aXr=r(zWe,"This class cannot be instantiated directly using "),c5e=n(zWe,"CODE",{});var EGt=s(c5e);nXr=r(EGt,"__init__()"),EGt.forEach(t),sXr=r(zWe," (throws an error)."),zWe.forEach(t),lXr=i(si),Ht=n(si,"DIV",{class:!0});var B6=s(Ht);T(F$.$$.fragment,B6),iXr=i(B6),f5e=n(B6,"P",{});var CGt=s(f5e);dXr=r(CGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CGt.forEach(t),cXr=i(B6),rf=n(B6,"P",{});var aae=s(rf);fXr=r(aae,`Note:
Loading a model from its configuration file does `),m5e=n(aae,"STRONG",{});var wGt=s(m5e);mXr=r(wGt,"not"),wGt.forEach(t),gXr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(aae,"A",{href:!0});var AGt=s(Bee);hXr=r(AGt,"from_pretrained()"),AGt.forEach(t),pXr=r(aae," to load the model weights."),aae.forEach(t),_Xr=i(B6),T(V5.$$.fragment,B6),B6.forEach(t),uXr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(T$.$$.fragment,li),bXr=i(li),g5e=n(li,"P",{});var LGt=s(g5e);vXr=r(LGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LGt.forEach(t),FXr=i(li),Mn=n(li,"P",{});var I6=s(Mn);TXr=r(I6,"The model class to instantiate is selected based on the "),h5e=n(I6,"CODE",{});var yGt=s(h5e);MXr=r(yGt,"model_type"),yGt.forEach(t),EXr=r(I6,` property of the config object (either
passed as an argument or loaded from `),p5e=n(I6,"CODE",{});var xGt=s(p5e);CXr=r(xGt,"pretrained_model_name_or_path"),xGt.forEach(t),wXr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(I6,"CODE",{});var $Gt=s(_5e);AXr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),LXr=r(I6,":"),I6.forEach(t),yXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);X5=n(we,"LI",{});var SOe=s(X5);u5e=n(SOe,"STRONG",{});var kGt=s(u5e);xXr=r(kGt,"albert"),kGt.forEach(t),$Xr=r(SOe," \u2014 "),Iee=n(SOe,"A",{href:!0});var SGt=s(Iee);kXr=r(SGt,"FlaxAlbertForPreTraining"),SGt.forEach(t),SXr=r(SOe," (ALBERT model)"),SOe.forEach(t),RXr=i(we),z5=n(we,"LI",{});var ROe=s(z5);b5e=n(ROe,"STRONG",{});var RGt=s(b5e);PXr=r(RGt,"bart"),RGt.forEach(t),BXr=r(ROe," \u2014 "),Nee=n(ROe,"A",{href:!0});var PGt=s(Nee);IXr=r(PGt,"FlaxBartForConditionalGeneration"),PGt.forEach(t),NXr=r(ROe," (BART model)"),ROe.forEach(t),qXr=i(we),Q5=n(we,"LI",{});var POe=s(Q5);v5e=n(POe,"STRONG",{});var BGt=s(v5e);jXr=r(BGt,"bert"),BGt.forEach(t),DXr=r(POe," \u2014 "),qee=n(POe,"A",{href:!0});var IGt=s(qee);GXr=r(IGt,"FlaxBertForPreTraining"),IGt.forEach(t),OXr=r(POe," (BERT model)"),POe.forEach(t),VXr=i(we),W5=n(we,"LI",{});var BOe=s(W5);F5e=n(BOe,"STRONG",{});var NGt=s(F5e);XXr=r(NGt,"big_bird"),NGt.forEach(t),zXr=r(BOe," \u2014 "),jee=n(BOe,"A",{href:!0});var qGt=s(jee);QXr=r(qGt,"FlaxBigBirdForPreTraining"),qGt.forEach(t),WXr=r(BOe," (BigBird model)"),BOe.forEach(t),HXr=i(we),H5=n(we,"LI",{});var IOe=s(H5);T5e=n(IOe,"STRONG",{});var jGt=s(T5e);UXr=r(jGt,"electra"),jGt.forEach(t),JXr=r(IOe," \u2014 "),Dee=n(IOe,"A",{href:!0});var DGt=s(Dee);YXr=r(DGt,"FlaxElectraForPreTraining"),DGt.forEach(t),KXr=r(IOe," (ELECTRA model)"),IOe.forEach(t),ZXr=i(we),U5=n(we,"LI",{});var NOe=s(U5);M5e=n(NOe,"STRONG",{});var GGt=s(M5e);ezr=r(GGt,"longt5"),GGt.forEach(t),ozr=r(NOe," \u2014 "),Gee=n(NOe,"A",{href:!0});var OGt=s(Gee);rzr=r(OGt,"FlaxLongT5ForConditionalGeneration"),OGt.forEach(t),tzr=r(NOe," (LongT5 model)"),NOe.forEach(t),azr=i(we),J5=n(we,"LI",{});var qOe=s(J5);E5e=n(qOe,"STRONG",{});var VGt=s(E5e);nzr=r(VGt,"mbart"),VGt.forEach(t),szr=r(qOe," \u2014 "),Oee=n(qOe,"A",{href:!0});var XGt=s(Oee);lzr=r(XGt,"FlaxMBartForConditionalGeneration"),XGt.forEach(t),izr=r(qOe," (mBART model)"),qOe.forEach(t),dzr=i(we),Y5=n(we,"LI",{});var jOe=s(Y5);C5e=n(jOe,"STRONG",{});var zGt=s(C5e);czr=r(zGt,"mt5"),zGt.forEach(t),fzr=r(jOe," \u2014 "),Vee=n(jOe,"A",{href:!0});var QGt=s(Vee);mzr=r(QGt,"FlaxMT5ForConditionalGeneration"),QGt.forEach(t),gzr=r(jOe," (MT5 model)"),jOe.forEach(t),hzr=i(we),K5=n(we,"LI",{});var DOe=s(K5);w5e=n(DOe,"STRONG",{});var WGt=s(w5e);pzr=r(WGt,"roberta"),WGt.forEach(t),_zr=r(DOe," \u2014 "),Xee=n(DOe,"A",{href:!0});var HGt=s(Xee);uzr=r(HGt,"FlaxRobertaForMaskedLM"),HGt.forEach(t),bzr=r(DOe," (RoBERTa model)"),DOe.forEach(t),vzr=i(we),Z5=n(we,"LI",{});var GOe=s(Z5);A5e=n(GOe,"STRONG",{});var UGt=s(A5e);Fzr=r(UGt,"roformer"),UGt.forEach(t),Tzr=r(GOe," \u2014 "),zee=n(GOe,"A",{href:!0});var JGt=s(zee);Mzr=r(JGt,"FlaxRoFormerForMaskedLM"),JGt.forEach(t),Ezr=r(GOe," (RoFormer model)"),GOe.forEach(t),Czr=i(we),e0=n(we,"LI",{});var OOe=s(e0);L5e=n(OOe,"STRONG",{});var YGt=s(L5e);wzr=r(YGt,"t5"),YGt.forEach(t),Azr=r(OOe," \u2014 "),Qee=n(OOe,"A",{href:!0});var KGt=s(Qee);Lzr=r(KGt,"FlaxT5ForConditionalGeneration"),KGt.forEach(t),yzr=r(OOe," (T5 model)"),OOe.forEach(t),xzr=i(we),o0=n(we,"LI",{});var VOe=s(o0);y5e=n(VOe,"STRONG",{});var ZGt=s(y5e);$zr=r(ZGt,"wav2vec2"),ZGt.forEach(t),kzr=r(VOe," \u2014 "),Wee=n(VOe,"A",{href:!0});var eOt=s(Wee);Szr=r(eOt,"FlaxWav2Vec2ForPreTraining"),eOt.forEach(t),Rzr=r(VOe," (Wav2Vec2 model)"),VOe.forEach(t),Pzr=i(we),r0=n(we,"LI",{});var XOe=s(r0);x5e=n(XOe,"STRONG",{});var oOt=s(x5e);Bzr=r(oOt,"xlm-roberta"),oOt.forEach(t),Izr=r(XOe," \u2014 "),Hee=n(XOe,"A",{href:!0});var rOt=s(Hee);Nzr=r(rOt,"FlaxXLMRobertaForMaskedLM"),rOt.forEach(t),qzr=r(XOe," (XLM-RoBERTa model)"),XOe.forEach(t),we.forEach(t),jzr=i(li),T(t0.$$.fragment,li),li.forEach(t),si.forEach(t),qze=i(f),tf=n(f,"H2",{class:!0});var QWe=s(tf);a0=n(QWe,"A",{id:!0,class:!0,href:!0});var tOt=s(a0);$5e=n(tOt,"SPAN",{});var aOt=s($5e);T(M$.$$.fragment,aOt),aOt.forEach(t),tOt.forEach(t),Dzr=i(QWe),k5e=n(QWe,"SPAN",{});var nOt=s(k5e);Gzr=r(nOt,"FlaxAutoModelForMaskedLM"),nOt.forEach(t),QWe.forEach(t),jze=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(E$.$$.fragment,ii),Ozr=i(ii),af=n(ii,"P",{});var nae=s(af);Vzr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uee=n(nae,"A",{href:!0});var sOt=s(Uee);Xzr=r(sOt,"from_pretrained()"),sOt.forEach(t),zzr=r(nae," class method or the "),Jee=n(nae,"A",{href:!0});var lOt=s(Jee);Qzr=r(lOt,"from_config()"),lOt.forEach(t),Wzr=r(nae,` class
method.`),nae.forEach(t),Hzr=i(ii),C$=n(ii,"P",{});var WWe=s(C$);Uzr=r(WWe,"This class cannot be instantiated directly using "),S5e=n(WWe,"CODE",{});var iOt=s(S5e);Jzr=r(iOt,"__init__()"),iOt.forEach(t),Yzr=r(WWe," (throws an error)."),WWe.forEach(t),Kzr=i(ii),Ut=n(ii,"DIV",{class:!0});var N6=s(Ut);T(w$.$$.fragment,N6),Zzr=i(N6),R5e=n(N6,"P",{});var dOt=s(R5e);eQr=r(dOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dOt.forEach(t),oQr=i(N6),nf=n(N6,"P",{});var sae=s(nf);rQr=r(sae,`Note:
Loading a model from its configuration file does `),P5e=n(sae,"STRONG",{});var cOt=s(P5e);tQr=r(cOt,"not"),cOt.forEach(t),aQr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(sae,"A",{href:!0});var fOt=s(Yee);nQr=r(fOt,"from_pretrained()"),fOt.forEach(t),sQr=r(sae," to load the model weights."),sae.forEach(t),lQr=i(N6),T(n0.$$.fragment,N6),N6.forEach(t),iQr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(A$.$$.fragment,di),dQr=i(di),B5e=n(di,"P",{});var mOt=s(B5e);cQr=r(mOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mOt.forEach(t),fQr=i(di),En=n(di,"P",{});var q6=s(En);mQr=r(q6,"The model class to instantiate is selected based on the "),I5e=n(q6,"CODE",{});var gOt=s(I5e);gQr=r(gOt,"model_type"),gOt.forEach(t),hQr=r(q6,` property of the config object (either
passed as an argument or loaded from `),N5e=n(q6,"CODE",{});var hOt=s(N5e);pQr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),_Qr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(q6,"CODE",{});var pOt=s(q5e);uQr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),bQr=r(q6,":"),q6.forEach(t),vQr=i(di),$e=n(di,"UL",{});var qe=s($e);s0=n(qe,"LI",{});var zOe=s(s0);j5e=n(zOe,"STRONG",{});var _Ot=s(j5e);FQr=r(_Ot,"albert"),_Ot.forEach(t),TQr=r(zOe," \u2014 "),Kee=n(zOe,"A",{href:!0});var uOt=s(Kee);MQr=r(uOt,"FlaxAlbertForMaskedLM"),uOt.forEach(t),EQr=r(zOe," (ALBERT model)"),zOe.forEach(t),CQr=i(qe),l0=n(qe,"LI",{});var QOe=s(l0);D5e=n(QOe,"STRONG",{});var bOt=s(D5e);wQr=r(bOt,"bart"),bOt.forEach(t),AQr=r(QOe," \u2014 "),Zee=n(QOe,"A",{href:!0});var vOt=s(Zee);LQr=r(vOt,"FlaxBartForConditionalGeneration"),vOt.forEach(t),yQr=r(QOe," (BART model)"),QOe.forEach(t),xQr=i(qe),i0=n(qe,"LI",{});var WOe=s(i0);G5e=n(WOe,"STRONG",{});var FOt=s(G5e);$Qr=r(FOt,"bert"),FOt.forEach(t),kQr=r(WOe," \u2014 "),eoe=n(WOe,"A",{href:!0});var TOt=s(eoe);SQr=r(TOt,"FlaxBertForMaskedLM"),TOt.forEach(t),RQr=r(WOe," (BERT model)"),WOe.forEach(t),PQr=i(qe),d0=n(qe,"LI",{});var HOe=s(d0);O5e=n(HOe,"STRONG",{});var MOt=s(O5e);BQr=r(MOt,"big_bird"),MOt.forEach(t),IQr=r(HOe," \u2014 "),ooe=n(HOe,"A",{href:!0});var EOt=s(ooe);NQr=r(EOt,"FlaxBigBirdForMaskedLM"),EOt.forEach(t),qQr=r(HOe," (BigBird model)"),HOe.forEach(t),jQr=i(qe),c0=n(qe,"LI",{});var UOe=s(c0);V5e=n(UOe,"STRONG",{});var COt=s(V5e);DQr=r(COt,"distilbert"),COt.forEach(t),GQr=r(UOe," \u2014 "),roe=n(UOe,"A",{href:!0});var wOt=s(roe);OQr=r(wOt,"FlaxDistilBertForMaskedLM"),wOt.forEach(t),VQr=r(UOe," (DistilBERT model)"),UOe.forEach(t),XQr=i(qe),f0=n(qe,"LI",{});var JOe=s(f0);X5e=n(JOe,"STRONG",{});var AOt=s(X5e);zQr=r(AOt,"electra"),AOt.forEach(t),QQr=r(JOe," \u2014 "),toe=n(JOe,"A",{href:!0});var LOt=s(toe);WQr=r(LOt,"FlaxElectraForMaskedLM"),LOt.forEach(t),HQr=r(JOe," (ELECTRA model)"),JOe.forEach(t),UQr=i(qe),m0=n(qe,"LI",{});var YOe=s(m0);z5e=n(YOe,"STRONG",{});var yOt=s(z5e);JQr=r(yOt,"mbart"),yOt.forEach(t),YQr=r(YOe," \u2014 "),aoe=n(YOe,"A",{href:!0});var xOt=s(aoe);KQr=r(xOt,"FlaxMBartForConditionalGeneration"),xOt.forEach(t),ZQr=r(YOe," (mBART model)"),YOe.forEach(t),eWr=i(qe),g0=n(qe,"LI",{});var KOe=s(g0);Q5e=n(KOe,"STRONG",{});var $Ot=s(Q5e);oWr=r($Ot,"roberta"),$Ot.forEach(t),rWr=r(KOe," \u2014 "),noe=n(KOe,"A",{href:!0});var kOt=s(noe);tWr=r(kOt,"FlaxRobertaForMaskedLM"),kOt.forEach(t),aWr=r(KOe," (RoBERTa model)"),KOe.forEach(t),nWr=i(qe),h0=n(qe,"LI",{});var ZOe=s(h0);W5e=n(ZOe,"STRONG",{});var SOt=s(W5e);sWr=r(SOt,"roformer"),SOt.forEach(t),lWr=r(ZOe," \u2014 "),soe=n(ZOe,"A",{href:!0});var ROt=s(soe);iWr=r(ROt,"FlaxRoFormerForMaskedLM"),ROt.forEach(t),dWr=r(ZOe," (RoFormer model)"),ZOe.forEach(t),cWr=i(qe),p0=n(qe,"LI",{});var eVe=s(p0);H5e=n(eVe,"STRONG",{});var POt=s(H5e);fWr=r(POt,"xlm-roberta"),POt.forEach(t),mWr=r(eVe," \u2014 "),loe=n(eVe,"A",{href:!0});var BOt=s(loe);gWr=r(BOt,"FlaxXLMRobertaForMaskedLM"),BOt.forEach(t),hWr=r(eVe," (XLM-RoBERTa model)"),eVe.forEach(t),qe.forEach(t),pWr=i(di),T(_0.$$.fragment,di),di.forEach(t),ii.forEach(t),Dze=i(f),sf=n(f,"H2",{class:!0});var HWe=s(sf);u0=n(HWe,"A",{id:!0,class:!0,href:!0});var IOt=s(u0);U5e=n(IOt,"SPAN",{});var NOt=s(U5e);T(L$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),_Wr=i(HWe),J5e=n(HWe,"SPAN",{});var qOt=s(J5e);uWr=r(qOt,"FlaxAutoModelForSeq2SeqLM"),qOt.forEach(t),HWe.forEach(t),Gze=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(y$.$$.fragment,ci),bWr=i(ci),lf=n(ci,"P",{});var lae=s(lf);vWr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ioe=n(lae,"A",{href:!0});var jOt=s(ioe);FWr=r(jOt,"from_pretrained()"),jOt.forEach(t),TWr=r(lae," class method or the "),doe=n(lae,"A",{href:!0});var DOt=s(doe);MWr=r(DOt,"from_config()"),DOt.forEach(t),EWr=r(lae,` class
method.`),lae.forEach(t),CWr=i(ci),x$=n(ci,"P",{});var UWe=s(x$);wWr=r(UWe,"This class cannot be instantiated directly using "),Y5e=n(UWe,"CODE",{});var GOt=s(Y5e);AWr=r(GOt,"__init__()"),GOt.forEach(t),LWr=r(UWe," (throws an error)."),UWe.forEach(t),yWr=i(ci),Jt=n(ci,"DIV",{class:!0});var j6=s(Jt);T($$.$$.fragment,j6),xWr=i(j6),K5e=n(j6,"P",{});var OOt=s(K5e);$Wr=r(OOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OOt.forEach(t),kWr=i(j6),df=n(j6,"P",{});var iae=s(df);SWr=r(iae,`Note:
Loading a model from its configuration file does `),Z5e=n(iae,"STRONG",{});var VOt=s(Z5e);RWr=r(VOt,"not"),VOt.forEach(t),PWr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(iae,"A",{href:!0});var XOt=s(coe);BWr=r(XOt,"from_pretrained()"),XOt.forEach(t),IWr=r(iae," to load the model weights."),iae.forEach(t),NWr=i(j6),T(b0.$$.fragment,j6),j6.forEach(t),qWr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(k$.$$.fragment,fi),jWr=i(fi),e0e=n(fi,"P",{});var zOt=s(e0e);DWr=r(zOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zOt.forEach(t),GWr=i(fi),Cn=n(fi,"P",{});var D6=s(Cn);OWr=r(D6,"The model class to instantiate is selected based on the "),o0e=n(D6,"CODE",{});var QOt=s(o0e);VWr=r(QOt,"model_type"),QOt.forEach(t),XWr=r(D6,` property of the config object (either
passed as an argument or loaded from `),r0e=n(D6,"CODE",{});var WOt=s(r0e);zWr=r(WOt,"pretrained_model_name_or_path"),WOt.forEach(t),QWr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(D6,"CODE",{});var HOt=s(t0e);WWr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),HWr=r(D6,":"),D6.forEach(t),UWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);v0=n(je,"LI",{});var oVe=s(v0);a0e=n(oVe,"STRONG",{});var UOt=s(a0e);JWr=r(UOt,"bart"),UOt.forEach(t),YWr=r(oVe," \u2014 "),foe=n(oVe,"A",{href:!0});var JOt=s(foe);KWr=r(JOt,"FlaxBartForConditionalGeneration"),JOt.forEach(t),ZWr=r(oVe," (BART model)"),oVe.forEach(t),eHr=i(je),F0=n(je,"LI",{});var rVe=s(F0);n0e=n(rVe,"STRONG",{});var YOt=s(n0e);oHr=r(YOt,"blenderbot"),YOt.forEach(t),rHr=r(rVe," \u2014 "),moe=n(rVe,"A",{href:!0});var KOt=s(moe);tHr=r(KOt,"FlaxBlenderbotForConditionalGeneration"),KOt.forEach(t),aHr=r(rVe," (Blenderbot model)"),rVe.forEach(t),nHr=i(je),T0=n(je,"LI",{});var tVe=s(T0);s0e=n(tVe,"STRONG",{});var ZOt=s(s0e);sHr=r(ZOt,"blenderbot-small"),ZOt.forEach(t),lHr=r(tVe," \u2014 "),goe=n(tVe,"A",{href:!0});var eVt=s(goe);iHr=r(eVt,"FlaxBlenderbotSmallForConditionalGeneration"),eVt.forEach(t),dHr=r(tVe," (BlenderbotSmall model)"),tVe.forEach(t),cHr=i(je),M0=n(je,"LI",{});var aVe=s(M0);l0e=n(aVe,"STRONG",{});var oVt=s(l0e);fHr=r(oVt,"encoder-decoder"),oVt.forEach(t),mHr=r(aVe," \u2014 "),hoe=n(aVe,"A",{href:!0});var rVt=s(hoe);gHr=r(rVt,"FlaxEncoderDecoderModel"),rVt.forEach(t),hHr=r(aVe," (Encoder decoder model)"),aVe.forEach(t),pHr=i(je),E0=n(je,"LI",{});var nVe=s(E0);i0e=n(nVe,"STRONG",{});var tVt=s(i0e);_Hr=r(tVt,"longt5"),tVt.forEach(t),uHr=r(nVe," \u2014 "),poe=n(nVe,"A",{href:!0});var aVt=s(poe);bHr=r(aVt,"FlaxLongT5ForConditionalGeneration"),aVt.forEach(t),vHr=r(nVe," (LongT5 model)"),nVe.forEach(t),FHr=i(je),C0=n(je,"LI",{});var sVe=s(C0);d0e=n(sVe,"STRONG",{});var nVt=s(d0e);THr=r(nVt,"marian"),nVt.forEach(t),MHr=r(sVe," \u2014 "),_oe=n(sVe,"A",{href:!0});var sVt=s(_oe);EHr=r(sVt,"FlaxMarianMTModel"),sVt.forEach(t),CHr=r(sVe," (Marian model)"),sVe.forEach(t),wHr=i(je),w0=n(je,"LI",{});var lVe=s(w0);c0e=n(lVe,"STRONG",{});var lVt=s(c0e);AHr=r(lVt,"mbart"),lVt.forEach(t),LHr=r(lVe," \u2014 "),uoe=n(lVe,"A",{href:!0});var iVt=s(uoe);yHr=r(iVt,"FlaxMBartForConditionalGeneration"),iVt.forEach(t),xHr=r(lVe," (mBART model)"),lVe.forEach(t),$Hr=i(je),A0=n(je,"LI",{});var iVe=s(A0);f0e=n(iVe,"STRONG",{});var dVt=s(f0e);kHr=r(dVt,"mt5"),dVt.forEach(t),SHr=r(iVe," \u2014 "),boe=n(iVe,"A",{href:!0});var cVt=s(boe);RHr=r(cVt,"FlaxMT5ForConditionalGeneration"),cVt.forEach(t),PHr=r(iVe," (MT5 model)"),iVe.forEach(t),BHr=i(je),L0=n(je,"LI",{});var dVe=s(L0);m0e=n(dVe,"STRONG",{});var fVt=s(m0e);IHr=r(fVt,"pegasus"),fVt.forEach(t),NHr=r(dVe," \u2014 "),voe=n(dVe,"A",{href:!0});var mVt=s(voe);qHr=r(mVt,"FlaxPegasusForConditionalGeneration"),mVt.forEach(t),jHr=r(dVe," (Pegasus model)"),dVe.forEach(t),DHr=i(je),y0=n(je,"LI",{});var cVe=s(y0);g0e=n(cVe,"STRONG",{});var gVt=s(g0e);GHr=r(gVt,"t5"),gVt.forEach(t),OHr=r(cVe," \u2014 "),Foe=n(cVe,"A",{href:!0});var hVt=s(Foe);VHr=r(hVt,"FlaxT5ForConditionalGeneration"),hVt.forEach(t),XHr=r(cVe," (T5 model)"),cVe.forEach(t),je.forEach(t),zHr=i(fi),T(x0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Oze=i(f),cf=n(f,"H2",{class:!0});var JWe=s(cf);$0=n(JWe,"A",{id:!0,class:!0,href:!0});var pVt=s($0);h0e=n(pVt,"SPAN",{});var _Vt=s(h0e);T(S$.$$.fragment,_Vt),_Vt.forEach(t),pVt.forEach(t),QHr=i(JWe),p0e=n(JWe,"SPAN",{});var uVt=s(p0e);WHr=r(uVt,"FlaxAutoModelForSequenceClassification"),uVt.forEach(t),JWe.forEach(t),Vze=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(R$.$$.fragment,mi),HHr=i(mi),ff=n(mi,"P",{});var dae=s(ff);UHr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Toe=n(dae,"A",{href:!0});var bVt=s(Toe);JHr=r(bVt,"from_pretrained()"),bVt.forEach(t),YHr=r(dae," class method or the "),Moe=n(dae,"A",{href:!0});var vVt=s(Moe);KHr=r(vVt,"from_config()"),vVt.forEach(t),ZHr=r(dae,` class
method.`),dae.forEach(t),eUr=i(mi),P$=n(mi,"P",{});var YWe=s(P$);oUr=r(YWe,"This class cannot be instantiated directly using "),_0e=n(YWe,"CODE",{});var FVt=s(_0e);rUr=r(FVt,"__init__()"),FVt.forEach(t),tUr=r(YWe," (throws an error)."),YWe.forEach(t),aUr=i(mi),Yt=n(mi,"DIV",{class:!0});var G6=s(Yt);T(B$.$$.fragment,G6),nUr=i(G6),u0e=n(G6,"P",{});var TVt=s(u0e);sUr=r(TVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TVt.forEach(t),lUr=i(G6),mf=n(G6,"P",{});var cae=s(mf);iUr=r(cae,`Note:
Loading a model from its configuration file does `),b0e=n(cae,"STRONG",{});var MVt=s(b0e);dUr=r(MVt,"not"),MVt.forEach(t),cUr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(cae,"A",{href:!0});var EVt=s(Eoe);fUr=r(EVt,"from_pretrained()"),EVt.forEach(t),mUr=r(cae," to load the model weights."),cae.forEach(t),gUr=i(G6),T(k0.$$.fragment,G6),G6.forEach(t),hUr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(I$.$$.fragment,gi),pUr=i(gi),v0e=n(gi,"P",{});var CVt=s(v0e);_Ur=r(CVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CVt.forEach(t),uUr=i(gi),wn=n(gi,"P",{});var O6=s(wn);bUr=r(O6,"The model class to instantiate is selected based on the "),F0e=n(O6,"CODE",{});var wVt=s(F0e);vUr=r(wVt,"model_type"),wVt.forEach(t),FUr=r(O6,` property of the config object (either
passed as an argument or loaded from `),T0e=n(O6,"CODE",{});var AVt=s(T0e);TUr=r(AVt,"pretrained_model_name_or_path"),AVt.forEach(t),MUr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(O6,"CODE",{});var LVt=s(M0e);EUr=r(LVt,"pretrained_model_name_or_path"),LVt.forEach(t),CUr=r(O6,":"),O6.forEach(t),wUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);S0=n(De,"LI",{});var fVe=s(S0);E0e=n(fVe,"STRONG",{});var yVt=s(E0e);AUr=r(yVt,"albert"),yVt.forEach(t),LUr=r(fVe," \u2014 "),Coe=n(fVe,"A",{href:!0});var xVt=s(Coe);yUr=r(xVt,"FlaxAlbertForSequenceClassification"),xVt.forEach(t),xUr=r(fVe," (ALBERT model)"),fVe.forEach(t),$Ur=i(De),R0=n(De,"LI",{});var mVe=s(R0);C0e=n(mVe,"STRONG",{});var $Vt=s(C0e);kUr=r($Vt,"bart"),$Vt.forEach(t),SUr=r(mVe," \u2014 "),woe=n(mVe,"A",{href:!0});var kVt=s(woe);RUr=r(kVt,"FlaxBartForSequenceClassification"),kVt.forEach(t),PUr=r(mVe," (BART model)"),mVe.forEach(t),BUr=i(De),P0=n(De,"LI",{});var gVe=s(P0);w0e=n(gVe,"STRONG",{});var SVt=s(w0e);IUr=r(SVt,"bert"),SVt.forEach(t),NUr=r(gVe," \u2014 "),Aoe=n(gVe,"A",{href:!0});var RVt=s(Aoe);qUr=r(RVt,"FlaxBertForSequenceClassification"),RVt.forEach(t),jUr=r(gVe," (BERT model)"),gVe.forEach(t),DUr=i(De),B0=n(De,"LI",{});var hVe=s(B0);A0e=n(hVe,"STRONG",{});var PVt=s(A0e);GUr=r(PVt,"big_bird"),PVt.forEach(t),OUr=r(hVe," \u2014 "),Loe=n(hVe,"A",{href:!0});var BVt=s(Loe);VUr=r(BVt,"FlaxBigBirdForSequenceClassification"),BVt.forEach(t),XUr=r(hVe," (BigBird model)"),hVe.forEach(t),zUr=i(De),I0=n(De,"LI",{});var pVe=s(I0);L0e=n(pVe,"STRONG",{});var IVt=s(L0e);QUr=r(IVt,"distilbert"),IVt.forEach(t),WUr=r(pVe," \u2014 "),yoe=n(pVe,"A",{href:!0});var NVt=s(yoe);HUr=r(NVt,"FlaxDistilBertForSequenceClassification"),NVt.forEach(t),UUr=r(pVe," (DistilBERT model)"),pVe.forEach(t),JUr=i(De),N0=n(De,"LI",{});var _Ve=s(N0);y0e=n(_Ve,"STRONG",{});var qVt=s(y0e);YUr=r(qVt,"electra"),qVt.forEach(t),KUr=r(_Ve," \u2014 "),xoe=n(_Ve,"A",{href:!0});var jVt=s(xoe);ZUr=r(jVt,"FlaxElectraForSequenceClassification"),jVt.forEach(t),eJr=r(_Ve," (ELECTRA model)"),_Ve.forEach(t),oJr=i(De),q0=n(De,"LI",{});var uVe=s(q0);x0e=n(uVe,"STRONG",{});var DVt=s(x0e);rJr=r(DVt,"mbart"),DVt.forEach(t),tJr=r(uVe," \u2014 "),$oe=n(uVe,"A",{href:!0});var GVt=s($oe);aJr=r(GVt,"FlaxMBartForSequenceClassification"),GVt.forEach(t),nJr=r(uVe," (mBART model)"),uVe.forEach(t),sJr=i(De),j0=n(De,"LI",{});var bVe=s(j0);$0e=n(bVe,"STRONG",{});var OVt=s($0e);lJr=r(OVt,"roberta"),OVt.forEach(t),iJr=r(bVe," \u2014 "),koe=n(bVe,"A",{href:!0});var VVt=s(koe);dJr=r(VVt,"FlaxRobertaForSequenceClassification"),VVt.forEach(t),cJr=r(bVe," (RoBERTa model)"),bVe.forEach(t),fJr=i(De),D0=n(De,"LI",{});var vVe=s(D0);k0e=n(vVe,"STRONG",{});var XVt=s(k0e);mJr=r(XVt,"roformer"),XVt.forEach(t),gJr=r(vVe," \u2014 "),Soe=n(vVe,"A",{href:!0});var zVt=s(Soe);hJr=r(zVt,"FlaxRoFormerForSequenceClassification"),zVt.forEach(t),pJr=r(vVe," (RoFormer model)"),vVe.forEach(t),_Jr=i(De),G0=n(De,"LI",{});var FVe=s(G0);S0e=n(FVe,"STRONG",{});var QVt=s(S0e);uJr=r(QVt,"xlm-roberta"),QVt.forEach(t),bJr=r(FVe," \u2014 "),Roe=n(FVe,"A",{href:!0});var WVt=s(Roe);vJr=r(WVt,"FlaxXLMRobertaForSequenceClassification"),WVt.forEach(t),FJr=r(FVe," (XLM-RoBERTa model)"),FVe.forEach(t),De.forEach(t),TJr=i(gi),T(O0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Xze=i(f),gf=n(f,"H2",{class:!0});var KWe=s(gf);V0=n(KWe,"A",{id:!0,class:!0,href:!0});var HVt=s(V0);R0e=n(HVt,"SPAN",{});var UVt=s(R0e);T(N$.$$.fragment,UVt),UVt.forEach(t),HVt.forEach(t),MJr=i(KWe),P0e=n(KWe,"SPAN",{});var JVt=s(P0e);EJr=r(JVt,"FlaxAutoModelForQuestionAnswering"),JVt.forEach(t),KWe.forEach(t),zze=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(q$.$$.fragment,hi),CJr=i(hi),hf=n(hi,"P",{});var fae=s(hf);wJr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Poe=n(fae,"A",{href:!0});var YVt=s(Poe);AJr=r(YVt,"from_pretrained()"),YVt.forEach(t),LJr=r(fae," class method or the "),Boe=n(fae,"A",{href:!0});var KVt=s(Boe);yJr=r(KVt,"from_config()"),KVt.forEach(t),xJr=r(fae,` class
method.`),fae.forEach(t),$Jr=i(hi),j$=n(hi,"P",{});var ZWe=s(j$);kJr=r(ZWe,"This class cannot be instantiated directly using "),B0e=n(ZWe,"CODE",{});var ZVt=s(B0e);SJr=r(ZVt,"__init__()"),ZVt.forEach(t),RJr=r(ZWe," (throws an error)."),ZWe.forEach(t),PJr=i(hi),Kt=n(hi,"DIV",{class:!0});var V6=s(Kt);T(D$.$$.fragment,V6),BJr=i(V6),I0e=n(V6,"P",{});var eXt=s(I0e);IJr=r(eXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eXt.forEach(t),NJr=i(V6),pf=n(V6,"P",{});var mae=s(pf);qJr=r(mae,`Note:
Loading a model from its configuration file does `),N0e=n(mae,"STRONG",{});var oXt=s(N0e);jJr=r(oXt,"not"),oXt.forEach(t),DJr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=n(mae,"A",{href:!0});var rXt=s(Ioe);GJr=r(rXt,"from_pretrained()"),rXt.forEach(t),OJr=r(mae," to load the model weights."),mae.forEach(t),VJr=i(V6),T(X0.$$.fragment,V6),V6.forEach(t),XJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(G$.$$.fragment,pi),zJr=i(pi),q0e=n(pi,"P",{});var tXt=s(q0e);QJr=r(tXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tXt.forEach(t),WJr=i(pi),An=n(pi,"P",{});var X6=s(An);HJr=r(X6,"The model class to instantiate is selected based on the "),j0e=n(X6,"CODE",{});var aXt=s(j0e);UJr=r(aXt,"model_type"),aXt.forEach(t),JJr=r(X6,` property of the config object (either
passed as an argument or loaded from `),D0e=n(X6,"CODE",{});var nXt=s(D0e);YJr=r(nXt,"pretrained_model_name_or_path"),nXt.forEach(t),KJr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(X6,"CODE",{});var sXt=s(G0e);ZJr=r(sXt,"pretrained_model_name_or_path"),sXt.forEach(t),eYr=r(X6,":"),X6.forEach(t),oYr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);z0=n(Ge,"LI",{});var TVe=s(z0);O0e=n(TVe,"STRONG",{});var lXt=s(O0e);rYr=r(lXt,"albert"),lXt.forEach(t),tYr=r(TVe," \u2014 "),Noe=n(TVe,"A",{href:!0});var iXt=s(Noe);aYr=r(iXt,"FlaxAlbertForQuestionAnswering"),iXt.forEach(t),nYr=r(TVe," (ALBERT model)"),TVe.forEach(t),sYr=i(Ge),Q0=n(Ge,"LI",{});var MVe=s(Q0);V0e=n(MVe,"STRONG",{});var dXt=s(V0e);lYr=r(dXt,"bart"),dXt.forEach(t),iYr=r(MVe," \u2014 "),qoe=n(MVe,"A",{href:!0});var cXt=s(qoe);dYr=r(cXt,"FlaxBartForQuestionAnswering"),cXt.forEach(t),cYr=r(MVe," (BART model)"),MVe.forEach(t),fYr=i(Ge),W0=n(Ge,"LI",{});var EVe=s(W0);X0e=n(EVe,"STRONG",{});var fXt=s(X0e);mYr=r(fXt,"bert"),fXt.forEach(t),gYr=r(EVe," \u2014 "),joe=n(EVe,"A",{href:!0});var mXt=s(joe);hYr=r(mXt,"FlaxBertForQuestionAnswering"),mXt.forEach(t),pYr=r(EVe," (BERT model)"),EVe.forEach(t),_Yr=i(Ge),H0=n(Ge,"LI",{});var CVe=s(H0);z0e=n(CVe,"STRONG",{});var gXt=s(z0e);uYr=r(gXt,"big_bird"),gXt.forEach(t),bYr=r(CVe," \u2014 "),Doe=n(CVe,"A",{href:!0});var hXt=s(Doe);vYr=r(hXt,"FlaxBigBirdForQuestionAnswering"),hXt.forEach(t),FYr=r(CVe," (BigBird model)"),CVe.forEach(t),TYr=i(Ge),U0=n(Ge,"LI",{});var wVe=s(U0);Q0e=n(wVe,"STRONG",{});var pXt=s(Q0e);MYr=r(pXt,"distilbert"),pXt.forEach(t),EYr=r(wVe," \u2014 "),Goe=n(wVe,"A",{href:!0});var _Xt=s(Goe);CYr=r(_Xt,"FlaxDistilBertForQuestionAnswering"),_Xt.forEach(t),wYr=r(wVe," (DistilBERT model)"),wVe.forEach(t),AYr=i(Ge),J0=n(Ge,"LI",{});var AVe=s(J0);W0e=n(AVe,"STRONG",{});var uXt=s(W0e);LYr=r(uXt,"electra"),uXt.forEach(t),yYr=r(AVe," \u2014 "),Ooe=n(AVe,"A",{href:!0});var bXt=s(Ooe);xYr=r(bXt,"FlaxElectraForQuestionAnswering"),bXt.forEach(t),$Yr=r(AVe," (ELECTRA model)"),AVe.forEach(t),kYr=i(Ge),Y0=n(Ge,"LI",{});var LVe=s(Y0);H0e=n(LVe,"STRONG",{});var vXt=s(H0e);SYr=r(vXt,"mbart"),vXt.forEach(t),RYr=r(LVe," \u2014 "),Voe=n(LVe,"A",{href:!0});var FXt=s(Voe);PYr=r(FXt,"FlaxMBartForQuestionAnswering"),FXt.forEach(t),BYr=r(LVe," (mBART model)"),LVe.forEach(t),IYr=i(Ge),K0=n(Ge,"LI",{});var yVe=s(K0);U0e=n(yVe,"STRONG",{});var TXt=s(U0e);NYr=r(TXt,"roberta"),TXt.forEach(t),qYr=r(yVe," \u2014 "),Xoe=n(yVe,"A",{href:!0});var MXt=s(Xoe);jYr=r(MXt,"FlaxRobertaForQuestionAnswering"),MXt.forEach(t),DYr=r(yVe," (RoBERTa model)"),yVe.forEach(t),GYr=i(Ge),Z0=n(Ge,"LI",{});var xVe=s(Z0);J0e=n(xVe,"STRONG",{});var EXt=s(J0e);OYr=r(EXt,"roformer"),EXt.forEach(t),VYr=r(xVe," \u2014 "),zoe=n(xVe,"A",{href:!0});var CXt=s(zoe);XYr=r(CXt,"FlaxRoFormerForQuestionAnswering"),CXt.forEach(t),zYr=r(xVe," (RoFormer model)"),xVe.forEach(t),QYr=i(Ge),ew=n(Ge,"LI",{});var $Ve=s(ew);Y0e=n($Ve,"STRONG",{});var wXt=s(Y0e);WYr=r(wXt,"xlm-roberta"),wXt.forEach(t),HYr=r($Ve," \u2014 "),Qoe=n($Ve,"A",{href:!0});var AXt=s(Qoe);UYr=r(AXt,"FlaxXLMRobertaForQuestionAnswering"),AXt.forEach(t),JYr=r($Ve," (XLM-RoBERTa model)"),$Ve.forEach(t),Ge.forEach(t),YYr=i(pi),T(ow.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Qze=i(f),_f=n(f,"H2",{class:!0});var eHe=s(_f);rw=n(eHe,"A",{id:!0,class:!0,href:!0});var LXt=s(rw);K0e=n(LXt,"SPAN",{});var yXt=s(K0e);T(O$.$$.fragment,yXt),yXt.forEach(t),LXt.forEach(t),KYr=i(eHe),Z0e=n(eHe,"SPAN",{});var xXt=s(Z0e);ZYr=r(xXt,"FlaxAutoModelForTokenClassification"),xXt.forEach(t),eHe.forEach(t),Wze=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(V$.$$.fragment,_i),eKr=i(_i),uf=n(_i,"P",{});var gae=s(uf);oKr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Woe=n(gae,"A",{href:!0});var $Xt=s(Woe);rKr=r($Xt,"from_pretrained()"),$Xt.forEach(t),tKr=r(gae," class method or the "),Hoe=n(gae,"A",{href:!0});var kXt=s(Hoe);aKr=r(kXt,"from_config()"),kXt.forEach(t),nKr=r(gae,` class
method.`),gae.forEach(t),sKr=i(_i),X$=n(_i,"P",{});var oHe=s(X$);lKr=r(oHe,"This class cannot be instantiated directly using "),ewe=n(oHe,"CODE",{});var SXt=s(ewe);iKr=r(SXt,"__init__()"),SXt.forEach(t),dKr=r(oHe," (throws an error)."),oHe.forEach(t),cKr=i(_i),Zt=n(_i,"DIV",{class:!0});var z6=s(Zt);T(z$.$$.fragment,z6),fKr=i(z6),owe=n(z6,"P",{});var RXt=s(owe);mKr=r(RXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RXt.forEach(t),gKr=i(z6),bf=n(z6,"P",{});var hae=s(bf);hKr=r(hae,`Note:
Loading a model from its configuration file does `),rwe=n(hae,"STRONG",{});var PXt=s(rwe);pKr=r(PXt,"not"),PXt.forEach(t),_Kr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uoe=n(hae,"A",{href:!0});var BXt=s(Uoe);uKr=r(BXt,"from_pretrained()"),BXt.forEach(t),bKr=r(hae," to load the model weights."),hae.forEach(t),vKr=i(z6),T(tw.$$.fragment,z6),z6.forEach(t),FKr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(Q$.$$.fragment,ui),TKr=i(ui),twe=n(ui,"P",{});var IXt=s(twe);MKr=r(IXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IXt.forEach(t),EKr=i(ui),Ln=n(ui,"P",{});var Q6=s(Ln);CKr=r(Q6,"The model class to instantiate is selected based on the "),awe=n(Q6,"CODE",{});var NXt=s(awe);wKr=r(NXt,"model_type"),NXt.forEach(t),AKr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),nwe=n(Q6,"CODE",{});var qXt=s(nwe);LKr=r(qXt,"pretrained_model_name_or_path"),qXt.forEach(t),yKr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=n(Q6,"CODE",{});var jXt=s(swe);xKr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),$Kr=r(Q6,":"),Q6.forEach(t),kKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);aw=n(To,"LI",{});var kVe=s(aw);lwe=n(kVe,"STRONG",{});var DXt=s(lwe);SKr=r(DXt,"albert"),DXt.forEach(t),RKr=r(kVe," \u2014 "),Joe=n(kVe,"A",{href:!0});var GXt=s(Joe);PKr=r(GXt,"FlaxAlbertForTokenClassification"),GXt.forEach(t),BKr=r(kVe," (ALBERT model)"),kVe.forEach(t),IKr=i(To),nw=n(To,"LI",{});var SVe=s(nw);iwe=n(SVe,"STRONG",{});var OXt=s(iwe);NKr=r(OXt,"bert"),OXt.forEach(t),qKr=r(SVe," \u2014 "),Yoe=n(SVe,"A",{href:!0});var VXt=s(Yoe);jKr=r(VXt,"FlaxBertForTokenClassification"),VXt.forEach(t),DKr=r(SVe," (BERT model)"),SVe.forEach(t),GKr=i(To),sw=n(To,"LI",{});var RVe=s(sw);dwe=n(RVe,"STRONG",{});var XXt=s(dwe);OKr=r(XXt,"big_bird"),XXt.forEach(t),VKr=r(RVe," \u2014 "),Koe=n(RVe,"A",{href:!0});var zXt=s(Koe);XKr=r(zXt,"FlaxBigBirdForTokenClassification"),zXt.forEach(t),zKr=r(RVe," (BigBird model)"),RVe.forEach(t),QKr=i(To),lw=n(To,"LI",{});var PVe=s(lw);cwe=n(PVe,"STRONG",{});var QXt=s(cwe);WKr=r(QXt,"distilbert"),QXt.forEach(t),HKr=r(PVe," \u2014 "),Zoe=n(PVe,"A",{href:!0});var WXt=s(Zoe);UKr=r(WXt,"FlaxDistilBertForTokenClassification"),WXt.forEach(t),JKr=r(PVe," (DistilBERT model)"),PVe.forEach(t),YKr=i(To),iw=n(To,"LI",{});var BVe=s(iw);fwe=n(BVe,"STRONG",{});var HXt=s(fwe);KKr=r(HXt,"electra"),HXt.forEach(t),ZKr=r(BVe," \u2014 "),ere=n(BVe,"A",{href:!0});var UXt=s(ere);eZr=r(UXt,"FlaxElectraForTokenClassification"),UXt.forEach(t),oZr=r(BVe," (ELECTRA model)"),BVe.forEach(t),rZr=i(To),dw=n(To,"LI",{});var IVe=s(dw);mwe=n(IVe,"STRONG",{});var JXt=s(mwe);tZr=r(JXt,"roberta"),JXt.forEach(t),aZr=r(IVe," \u2014 "),ore=n(IVe,"A",{href:!0});var YXt=s(ore);nZr=r(YXt,"FlaxRobertaForTokenClassification"),YXt.forEach(t),sZr=r(IVe," (RoBERTa model)"),IVe.forEach(t),lZr=i(To),cw=n(To,"LI",{});var NVe=s(cw);gwe=n(NVe,"STRONG",{});var KXt=s(gwe);iZr=r(KXt,"roformer"),KXt.forEach(t),dZr=r(NVe," \u2014 "),rre=n(NVe,"A",{href:!0});var ZXt=s(rre);cZr=r(ZXt,"FlaxRoFormerForTokenClassification"),ZXt.forEach(t),fZr=r(NVe," (RoFormer model)"),NVe.forEach(t),mZr=i(To),fw=n(To,"LI",{});var qVe=s(fw);hwe=n(qVe,"STRONG",{});var ezt=s(hwe);gZr=r(ezt,"xlm-roberta"),ezt.forEach(t),hZr=r(qVe," \u2014 "),tre=n(qVe,"A",{href:!0});var ozt=s(tre);pZr=r(ozt,"FlaxXLMRobertaForTokenClassification"),ozt.forEach(t),_Zr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),To.forEach(t),uZr=i(ui),T(mw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Hze=i(f),vf=n(f,"H2",{class:!0});var rHe=s(vf);gw=n(rHe,"A",{id:!0,class:!0,href:!0});var rzt=s(gw);pwe=n(rzt,"SPAN",{});var tzt=s(pwe);T(W$.$$.fragment,tzt),tzt.forEach(t),rzt.forEach(t),bZr=i(rHe),_we=n(rHe,"SPAN",{});var azt=s(_we);vZr=r(azt,"FlaxAutoModelForMultipleChoice"),azt.forEach(t),rHe.forEach(t),Uze=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(H$.$$.fragment,bi),FZr=i(bi),Ff=n(bi,"P",{});var pae=s(Ff);TZr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),are=n(pae,"A",{href:!0});var nzt=s(are);MZr=r(nzt,"from_pretrained()"),nzt.forEach(t),EZr=r(pae," class method or the "),nre=n(pae,"A",{href:!0});var szt=s(nre);CZr=r(szt,"from_config()"),szt.forEach(t),wZr=r(pae,` class
method.`),pae.forEach(t),AZr=i(bi),U$=n(bi,"P",{});var tHe=s(U$);LZr=r(tHe,"This class cannot be instantiated directly using "),uwe=n(tHe,"CODE",{});var lzt=s(uwe);yZr=r(lzt,"__init__()"),lzt.forEach(t),xZr=r(tHe," (throws an error)."),tHe.forEach(t),$Zr=i(bi),ea=n(bi,"DIV",{class:!0});var W6=s(ea);T(J$.$$.fragment,W6),kZr=i(W6),bwe=n(W6,"P",{});var izt=s(bwe);SZr=r(izt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),izt.forEach(t),RZr=i(W6),Tf=n(W6,"P",{});var _ae=s(Tf);PZr=r(_ae,`Note:
Loading a model from its configuration file does `),vwe=n(_ae,"STRONG",{});var dzt=s(vwe);BZr=r(dzt,"not"),dzt.forEach(t),IZr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(_ae,"A",{href:!0});var czt=s(sre);NZr=r(czt,"from_pretrained()"),czt.forEach(t),qZr=r(_ae," to load the model weights."),_ae.forEach(t),jZr=i(W6),T(hw.$$.fragment,W6),W6.forEach(t),DZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(Y$.$$.fragment,vi),GZr=i(vi),Fwe=n(vi,"P",{});var fzt=s(Fwe);OZr=r(fzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fzt.forEach(t),VZr=i(vi),yn=n(vi,"P",{});var H6=s(yn);XZr=r(H6,"The model class to instantiate is selected based on the "),Twe=n(H6,"CODE",{});var mzt=s(Twe);zZr=r(mzt,"model_type"),mzt.forEach(t),QZr=r(H6,` property of the config object (either
passed as an argument or loaded from `),Mwe=n(H6,"CODE",{});var gzt=s(Mwe);WZr=r(gzt,"pretrained_model_name_or_path"),gzt.forEach(t),HZr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=n(H6,"CODE",{});var hzt=s(Ewe);UZr=r(hzt,"pretrained_model_name_or_path"),hzt.forEach(t),JZr=r(H6,":"),H6.forEach(t),YZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);pw=n(Mo,"LI",{});var jVe=s(pw);Cwe=n(jVe,"STRONG",{});var pzt=s(Cwe);KZr=r(pzt,"albert"),pzt.forEach(t),ZZr=r(jVe," \u2014 "),lre=n(jVe,"A",{href:!0});var _zt=s(lre);eet=r(_zt,"FlaxAlbertForMultipleChoice"),_zt.forEach(t),oet=r(jVe," (ALBERT model)"),jVe.forEach(t),ret=i(Mo),_w=n(Mo,"LI",{});var DVe=s(_w);wwe=n(DVe,"STRONG",{});var uzt=s(wwe);tet=r(uzt,"bert"),uzt.forEach(t),aet=r(DVe," \u2014 "),ire=n(DVe,"A",{href:!0});var bzt=s(ire);net=r(bzt,"FlaxBertForMultipleChoice"),bzt.forEach(t),set=r(DVe," (BERT model)"),DVe.forEach(t),iet=i(Mo),uw=n(Mo,"LI",{});var GVe=s(uw);Awe=n(GVe,"STRONG",{});var vzt=s(Awe);det=r(vzt,"big_bird"),vzt.forEach(t),cet=r(GVe," \u2014 "),dre=n(GVe,"A",{href:!0});var Fzt=s(dre);fet=r(Fzt,"FlaxBigBirdForMultipleChoice"),Fzt.forEach(t),met=r(GVe," (BigBird model)"),GVe.forEach(t),get=i(Mo),bw=n(Mo,"LI",{});var OVe=s(bw);Lwe=n(OVe,"STRONG",{});var Tzt=s(Lwe);het=r(Tzt,"distilbert"),Tzt.forEach(t),pet=r(OVe," \u2014 "),cre=n(OVe,"A",{href:!0});var Mzt=s(cre);_et=r(Mzt,"FlaxDistilBertForMultipleChoice"),Mzt.forEach(t),uet=r(OVe," (DistilBERT model)"),OVe.forEach(t),bet=i(Mo),vw=n(Mo,"LI",{});var VVe=s(vw);ywe=n(VVe,"STRONG",{});var Ezt=s(ywe);vet=r(Ezt,"electra"),Ezt.forEach(t),Fet=r(VVe," \u2014 "),fre=n(VVe,"A",{href:!0});var Czt=s(fre);Tet=r(Czt,"FlaxElectraForMultipleChoice"),Czt.forEach(t),Met=r(VVe," (ELECTRA model)"),VVe.forEach(t),Eet=i(Mo),Fw=n(Mo,"LI",{});var XVe=s(Fw);xwe=n(XVe,"STRONG",{});var wzt=s(xwe);Cet=r(wzt,"roberta"),wzt.forEach(t),wet=r(XVe," \u2014 "),mre=n(XVe,"A",{href:!0});var Azt=s(mre);Aet=r(Azt,"FlaxRobertaForMultipleChoice"),Azt.forEach(t),Let=r(XVe," (RoBERTa model)"),XVe.forEach(t),yet=i(Mo),Tw=n(Mo,"LI",{});var zVe=s(Tw);$we=n(zVe,"STRONG",{});var Lzt=s($we);xet=r(Lzt,"roformer"),Lzt.forEach(t),$et=r(zVe," \u2014 "),gre=n(zVe,"A",{href:!0});var yzt=s(gre);ket=r(yzt,"FlaxRoFormerForMultipleChoice"),yzt.forEach(t),Set=r(zVe," (RoFormer model)"),zVe.forEach(t),Ret=i(Mo),Mw=n(Mo,"LI",{});var QVe=s(Mw);kwe=n(QVe,"STRONG",{});var xzt=s(kwe);Pet=r(xzt,"xlm-roberta"),xzt.forEach(t),Bet=r(QVe," \u2014 "),hre=n(QVe,"A",{href:!0});var $zt=s(hre);Iet=r($zt,"FlaxXLMRobertaForMultipleChoice"),$zt.forEach(t),Net=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),Mo.forEach(t),qet=i(vi),T(Ew.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Jze=i(f),Mf=n(f,"H2",{class:!0});var aHe=s(Mf);Cw=n(aHe,"A",{id:!0,class:!0,href:!0});var kzt=s(Cw);Swe=n(kzt,"SPAN",{});var Szt=s(Swe);T(K$.$$.fragment,Szt),Szt.forEach(t),kzt.forEach(t),jet=i(aHe),Rwe=n(aHe,"SPAN",{});var Rzt=s(Rwe);Det=r(Rzt,"FlaxAutoModelForNextSentencePrediction"),Rzt.forEach(t),aHe.forEach(t),Yze=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(Z$.$$.fragment,Fi),Get=i(Fi),Ef=n(Fi,"P",{});var uae=s(Ef);Oet=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pre=n(uae,"A",{href:!0});var Pzt=s(pre);Vet=r(Pzt,"from_pretrained()"),Pzt.forEach(t),Xet=r(uae," class method or the "),_re=n(uae,"A",{href:!0});var Bzt=s(_re);zet=r(Bzt,"from_config()"),Bzt.forEach(t),Qet=r(uae,` class
method.`),uae.forEach(t),Wet=i(Fi),ek=n(Fi,"P",{});var nHe=s(ek);Het=r(nHe,"This class cannot be instantiated directly using "),Pwe=n(nHe,"CODE",{});var Izt=s(Pwe);Uet=r(Izt,"__init__()"),Izt.forEach(t),Jet=r(nHe," (throws an error)."),nHe.forEach(t),Yet=i(Fi),oa=n(Fi,"DIV",{class:!0});var U6=s(oa);T(ok.$$.fragment,U6),Ket=i(U6),Bwe=n(U6,"P",{});var Nzt=s(Bwe);Zet=r(Nzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Nzt.forEach(t),eot=i(U6),Cf=n(U6,"P",{});var bae=s(Cf);oot=r(bae,`Note:
Loading a model from its configuration file does `),Iwe=n(bae,"STRONG",{});var qzt=s(Iwe);rot=r(qzt,"not"),qzt.forEach(t),tot=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(bae,"A",{href:!0});var jzt=s(ure);aot=r(jzt,"from_pretrained()"),jzt.forEach(t),not=r(bae," to load the model weights."),bae.forEach(t),sot=i(U6),T(ww.$$.fragment,U6),U6.forEach(t),lot=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(rk.$$.fragment,Ti),iot=i(Ti),Nwe=n(Ti,"P",{});var Dzt=s(Nwe);dot=r(Dzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dzt.forEach(t),cot=i(Ti),xn=n(Ti,"P",{});var J6=s(xn);fot=r(J6,"The model class to instantiate is selected based on the "),qwe=n(J6,"CODE",{});var Gzt=s(qwe);mot=r(Gzt,"model_type"),Gzt.forEach(t),got=r(J6,` property of the config object (either
passed as an argument or loaded from `),jwe=n(J6,"CODE",{});var Ozt=s(jwe);hot=r(Ozt,"pretrained_model_name_or_path"),Ozt.forEach(t),pot=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=n(J6,"CODE",{});var Vzt=s(Dwe);_ot=r(Vzt,"pretrained_model_name_or_path"),Vzt.forEach(t),uot=r(J6,":"),J6.forEach(t),bot=i(Ti),Gwe=n(Ti,"UL",{});var Xzt=s(Gwe);Aw=n(Xzt,"LI",{});var WVe=s(Aw);Owe=n(WVe,"STRONG",{});var zzt=s(Owe);vot=r(zzt,"bert"),zzt.forEach(t),Fot=r(WVe," \u2014 "),bre=n(WVe,"A",{href:!0});var Qzt=s(bre);Tot=r(Qzt,"FlaxBertForNextSentencePrediction"),Qzt.forEach(t),Mot=r(WVe," (BERT model)"),WVe.forEach(t),Xzt.forEach(t),Eot=i(Ti),T(Lw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Kze=i(f),wf=n(f,"H2",{class:!0});var sHe=s(wf);yw=n(sHe,"A",{id:!0,class:!0,href:!0});var Wzt=s(yw);Vwe=n(Wzt,"SPAN",{});var Hzt=s(Vwe);T(tk.$$.fragment,Hzt),Hzt.forEach(t),Wzt.forEach(t),Cot=i(sHe),Xwe=n(sHe,"SPAN",{});var Uzt=s(Xwe);wot=r(Uzt,"FlaxAutoModelForImageClassification"),Uzt.forEach(t),sHe.forEach(t),Zze=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(ak.$$.fragment,Mi),Aot=i(Mi),Af=n(Mi,"P",{});var vae=s(Af);Lot=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vre=n(vae,"A",{href:!0});var Jzt=s(vre);yot=r(Jzt,"from_pretrained()"),Jzt.forEach(t),xot=r(vae," class method or the "),Fre=n(vae,"A",{href:!0});var Yzt=s(Fre);$ot=r(Yzt,"from_config()"),Yzt.forEach(t),kot=r(vae,` class
method.`),vae.forEach(t),Sot=i(Mi),nk=n(Mi,"P",{});var lHe=s(nk);Rot=r(lHe,"This class cannot be instantiated directly using "),zwe=n(lHe,"CODE",{});var Kzt=s(zwe);Pot=r(Kzt,"__init__()"),Kzt.forEach(t),Bot=r(lHe," (throws an error)."),lHe.forEach(t),Iot=i(Mi),ra=n(Mi,"DIV",{class:!0});var Y6=s(ra);T(sk.$$.fragment,Y6),Not=i(Y6),Qwe=n(Y6,"P",{});var Zzt=s(Qwe);qot=r(Zzt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zzt.forEach(t),jot=i(Y6),Lf=n(Y6,"P",{});var Fae=s(Lf);Dot=r(Fae,`Note:
Loading a model from its configuration file does `),Wwe=n(Fae,"STRONG",{});var eQt=s(Wwe);Got=r(eQt,"not"),eQt.forEach(t),Oot=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(Fae,"A",{href:!0});var oQt=s(Tre);Vot=r(oQt,"from_pretrained()"),oQt.forEach(t),Xot=r(Fae," to load the model weights."),Fae.forEach(t),zot=i(Y6),T(xw.$$.fragment,Y6),Y6.forEach(t),Qot=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(lk.$$.fragment,Ei),Wot=i(Ei),Hwe=n(Ei,"P",{});var rQt=s(Hwe);Hot=r(rQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rQt.forEach(t),Uot=i(Ei),$n=n(Ei,"P",{});var K6=s($n);Jot=r(K6,"The model class to instantiate is selected based on the "),Uwe=n(K6,"CODE",{});var tQt=s(Uwe);Yot=r(tQt,"model_type"),tQt.forEach(t),Kot=r(K6,` property of the config object (either
passed as an argument or loaded from `),Jwe=n(K6,"CODE",{});var aQt=s(Jwe);Zot=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),ert=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=n(K6,"CODE",{});var nQt=s(Ywe);ort=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),rrt=r(K6,":"),K6.forEach(t),trt=i(Ei),ik=n(Ei,"UL",{});var iHe=s(ik);$w=n(iHe,"LI",{});var HVe=s($w);Kwe=n(HVe,"STRONG",{});var sQt=s(Kwe);art=r(sQt,"beit"),sQt.forEach(t),nrt=r(HVe," \u2014 "),Mre=n(HVe,"A",{href:!0});var lQt=s(Mre);srt=r(lQt,"FlaxBeitForImageClassification"),lQt.forEach(t),lrt=r(HVe," (BEiT model)"),HVe.forEach(t),irt=i(iHe),kw=n(iHe,"LI",{});var UVe=s(kw);Zwe=n(UVe,"STRONG",{});var iQt=s(Zwe);drt=r(iQt,"vit"),iQt.forEach(t),crt=r(UVe," \u2014 "),Ere=n(UVe,"A",{href:!0});var dQt=s(Ere);frt=r(dQt,"FlaxViTForImageClassification"),dQt.forEach(t),mrt=r(UVe," (ViT model)"),UVe.forEach(t),iHe.forEach(t),grt=i(Ei),T(Sw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),eQe=i(f),yf=n(f,"H2",{class:!0});var dHe=s(yf);Rw=n(dHe,"A",{id:!0,class:!0,href:!0});var cQt=s(Rw);eAe=n(cQt,"SPAN",{});var fQt=s(eAe);T(dk.$$.fragment,fQt),fQt.forEach(t),cQt.forEach(t),hrt=i(dHe),oAe=n(dHe,"SPAN",{});var mQt=s(oAe);prt=r(mQt,"FlaxAutoModelForVision2Seq"),mQt.forEach(t),dHe.forEach(t),oQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(ck.$$.fragment,Ci),_rt=i(Ci),xf=n(Ci,"P",{});var Tae=s(xf);urt=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=n(Tae,"A",{href:!0});var gQt=s(Cre);brt=r(gQt,"from_pretrained()"),gQt.forEach(t),vrt=r(Tae," class method or the "),wre=n(Tae,"A",{href:!0});var hQt=s(wre);Frt=r(hQt,"from_config()"),hQt.forEach(t),Trt=r(Tae,` class
method.`),Tae.forEach(t),Mrt=i(Ci),fk=n(Ci,"P",{});var cHe=s(fk);Ert=r(cHe,"This class cannot be instantiated directly using "),rAe=n(cHe,"CODE",{});var pQt=s(rAe);Crt=r(pQt,"__init__()"),pQt.forEach(t),wrt=r(cHe," (throws an error)."),cHe.forEach(t),Art=i(Ci),ta=n(Ci,"DIV",{class:!0});var Z6=s(ta);T(mk.$$.fragment,Z6),Lrt=i(Z6),tAe=n(Z6,"P",{});var _Qt=s(tAe);yrt=r(_Qt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Qt.forEach(t),xrt=i(Z6),$f=n(Z6,"P",{});var Mae=s($f);$rt=r(Mae,`Note:
Loading a model from its configuration file does `),aAe=n(Mae,"STRONG",{});var uQt=s(aAe);krt=r(uQt,"not"),uQt.forEach(t),Srt=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Mae,"A",{href:!0});var bQt=s(Are);Rrt=r(bQt,"from_pretrained()"),bQt.forEach(t),Prt=r(Mae," to load the model weights."),Mae.forEach(t),Brt=i(Z6),T(Pw.$$.fragment,Z6),Z6.forEach(t),Irt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(gk.$$.fragment,wi),Nrt=i(wi),nAe=n(wi,"P",{});var vQt=s(nAe);qrt=r(vQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vQt.forEach(t),jrt=i(wi),kn=n(wi,"P",{});var eL=s(kn);Drt=r(eL,"The model class to instantiate is selected based on the "),sAe=n(eL,"CODE",{});var FQt=s(sAe);Grt=r(FQt,"model_type"),FQt.forEach(t),Ort=r(eL,` property of the config object (either
passed as an argument or loaded from `),lAe=n(eL,"CODE",{});var TQt=s(lAe);Vrt=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),Xrt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=n(eL,"CODE",{});var MQt=s(iAe);zrt=r(MQt,"pretrained_model_name_or_path"),MQt.forEach(t),Qrt=r(eL,":"),eL.forEach(t),Wrt=i(wi),dAe=n(wi,"UL",{});var EQt=s(dAe);Bw=n(EQt,"LI",{});var JVe=s(Bw);cAe=n(JVe,"STRONG",{});var CQt=s(cAe);Hrt=r(CQt,"vision-encoder-decoder"),CQt.forEach(t),Urt=r(JVe," \u2014 "),Lre=n(JVe,"A",{href:!0});var wQt=s(Lre);Jrt=r(wQt,"FlaxVisionEncoderDecoderModel"),wQt.forEach(t),Yrt=r(JVe," (Vision Encoder decoder model)"),JVe.forEach(t),EQt.forEach(t),Krt=i(wi),T(Iw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(DS,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(GS,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig"),c(OS,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig"),c(VS,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig"),c(XS,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig"),c(zS,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(QS,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig"),c(WS,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(HS,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(US,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(JS,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig"),c(YS,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig"),c(KS,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig"),c(ZS,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig"),c(eR,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenConfig"),c(oR,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig"),c(rR,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig"),c(tR,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig"),c(aR,"href","/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtConfig"),c(nR,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sR,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lR,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(iR,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig"),c(dR,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(cR,"href","/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(fR,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(mR,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig"),c(gR,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig"),c(hR,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pR,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRConfig"),c(_R,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTConfig"),c(uR,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig"),c(bR,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vR,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig"),c(FR,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaConfig"),c(TR,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig"),c(MR,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig"),c(ER,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig"),c(CR,"href","/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNConfig"),c(wR,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config"),c(AR,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LR,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yR,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig"),c(xR,"href","/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTConfig"),c($R,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig"),c(kR,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig"),c(SR,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RR,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(PR,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(BR,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(IR,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig"),c(NR,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitConfig"),c(qR,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig"),c(jR,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config"),c(DR,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeConfig"),c(GR,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig"),c(OR,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Config"),c(VR,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig"),c(XR,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(zR,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig"),c(QR,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTConfig"),c(WR,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(HR,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(UR,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(JR,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig"),c(YR,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config"),c(KR,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig"),c(ZR,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig"),c(eP,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(oP,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(rP,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig"),c(tP,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig"),c(aP,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig"),c(nP,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig"),c(sP,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(lP,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(iP,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(dP,"href","/docs/transformers/pr_17281/en/model_doc/rag#transformers.RagConfig"),c(cP,"href","/docs/transformers/pr_17281/en/model_doc/realm#transformers.RealmConfig"),c(fP,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig"),c(mP,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig"),c(gP,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig"),c(hP,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig"),c(pP,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertConfig"),c(_P,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig"),c(uP,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig"),c(bP,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig"),c(vP,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig"),c(FP,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig"),c(TP,"href","/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(MP,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(EP,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(CP,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig"),c(wP,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(AP,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig"),c(LP,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config"),c(yP,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig"),c(xP,"href","/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c($P,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(kP,"href","/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRConfig"),c(SP,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(RP,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(PP,"href","/docs/transformers/pr_17281/en/model_doc/van#transformers.VanConfig"),c(BP,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltConfig"),c(IP,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NP,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(qP,"href","/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(jP,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig"),c(DP,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(GP,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(OP,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(VP,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig"),c(XP,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig"),c(zP,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig"),c(QP,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(WP,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(HP,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(UP,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig"),c(JP,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosConfig"),c(YP,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(KP,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(ZP,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizer"),c(eB,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartTokenizer"),c(rB,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartTokenizerFast"),c(tB,"href","/docs/transformers/pr_17281/en/model_doc/barthez#transformers.BarthezTokenizer"),c(aB,"href","/docs/transformers/pr_17281/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(nB,"href","/docs/transformers/pr_17281/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(sB,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(dB,"href","/docs/transformers/pr_17281/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(cB,"href","/docs/transformers/pr_17281/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(fB,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(mB,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(gB,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hB,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pB,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_B,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(uB,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(bB,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(vB,"href","/docs/transformers/pr_17281/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FB,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TB,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineTokenizer"),c(EB,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizer"),c(CB,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wB,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(AB,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(LB,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(yB,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17281/en/model_doc/cpm#transformers.CpmTokenizer"),c($B,"href","/docs/transformers/pr_17281/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(kB,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(SB,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaTokenizer"),c(BB,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(NB,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(qB,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(jB,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(DB,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(GB,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(OB,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraTokenizer"),c(VB,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(XB,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(zB,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetTokenizer"),c(QB,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(HB,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelTokenizer"),c(UB,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(JB,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YB,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KB,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(oI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tI,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizer"),c(aI,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nI,"href","/docs/transformers/pr_17281/en/model_doc/herbert#transformers.HerbertTokenizer"),c(sI,"href","/docs/transformers/pr_17281/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(lI,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iI,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dI,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(fI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(mI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(gI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(hI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(pI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_I,"href","/docs/transformers/pr_17281/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(uI,"href","/docs/transformers/pr_17281/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bI,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDTokenizer"),c(vI,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDTokenizerFast"),c(FI,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TI,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Tokenizer"),c(EI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5TokenizerFast"),c(CI,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeTokenizer"),c(wI,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(AI,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(LI,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yI,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianTokenizer"),c(xI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartTokenizer"),c($I,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(kI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(SI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(RI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17281/en/model_doc/mluke#transformers.MLukeTokenizer"),c(II,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(NI,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qI,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(jI,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(DI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Tokenizer"),c(GI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5TokenizerFast"),c(OI,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpTokenizer"),c(VI,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(XI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(zI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(QI,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizer"),c(WI,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HI,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UI,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YI,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(KI,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(eN,"href","/docs/transformers/pr_17281/en/model_doc/phobert#transformers.PhobertTokenizer"),c(oN,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartTokenizer"),c(rN,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(tN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(aN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(nN,"href","/docs/transformers/pr_17281/en/model_doc/rag#transformers.RagTokenizer"),c(sN,"href","/docs/transformers/pr_17281/en/model_doc/realm#transformers.RealmTokenizer"),c(lN,"href","/docs/transformers/pr_17281/en/model_doc/realm#transformers.RealmTokenizerFast"),c(iN,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerTokenizer"),c(dN,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(cN,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertTokenizer"),c(fN,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(mN,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(gN,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pN,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_N,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uN,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(bN,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(vN,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(FN,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterTokenizer"),c(TN,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(MN,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(EN,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(CN,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Tokenizer"),c(wN,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5TokenizerFast"),c(AN,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasTokenizer"),c(LN,"href","/docs/transformers/pr_17281/en/model_doc/tapex#transformers.TapexTokenizer"),c(yN,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(xN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c($N,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(kN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(IN,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NN,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(qN,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMTokenizer"),c(jN,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(DN,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(GN,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ON,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VN,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XN,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zN,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(QN,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizer"),c(WN,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(HN,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UN,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eq,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mq,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xq,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"id","transformers.AutoProcessor"),c(Tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c($q,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kq,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPProcessor"),c(Sq,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPProcessor"),c(Rq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Pq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Bq,"href","/docs/transformers/pr_17281/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Iq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jq,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Dq,"href","/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Gq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltProcessor"),c(Xq,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"id","transformers.AutoModel"),c(Vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Hq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yq,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertModel"),c(Kq,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartModel"),c(Zq,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitModel"),c(ej,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertModel"),c(oj,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rj,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdModel"),c(tj,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aj,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nj,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sj,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomModel"),c(lj,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertModel"),c(ij,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineModel"),c(dj,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPModel"),c(cj,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenModel"),c(fj,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertModel"),c(mj,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextModel"),c(gj,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLModel"),c(hj,"href","/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtModel"),c(pj,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_j,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uj,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bj,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaModel"),c(vj,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Fj,"href","/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Tj,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(Mj,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTModel"),c(Ej,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrModel"),c(Cj,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertModel"),c(wj,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Aj,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTModel"),c(Lj,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraModel"),c(yj,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertModel"),c(xj,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaModel"),c($j,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetModel"),c(kj,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTModel"),c(Sj,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelModel"),c(Rj,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Pj,"href","/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNModel"),c(Bj,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Model"),c(Ij,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Nj,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(qj,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJModel"),c(jj,"href","/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTModel"),c(Dj,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertModel"),c(Gj,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertModel"),c(Oj,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Vj,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Xj,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zj,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Qj,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDModel"),c(Wj,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitModel"),c(Hj,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerModel"),c(Uj,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Model"),c(Jj,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeModel"),c(Yj,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertModel"),c(Kj,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Model"),c(Zj,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianModel"),c(eD,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oD,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartModel"),c(rD,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTModel"),c(tD,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aD,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nD,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTModel"),c(sD,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetModel"),c(lD,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Model"),c(iD,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpModel"),c(dD,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaModel"),c(cD,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fD,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mD,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTModel"),c(gD,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusModel"),c(hD,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverModel"),c(pD,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartModel"),c(_D,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uD,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(bD,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertModel"),c(vD,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModel"),c(FD,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetModel"),c(TD,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertModel"),c(MD,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetModel"),c(ED,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel"),c(CD,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaModel"),c(wD,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerModel"),c(AD,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerModel"),c(LD,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWModel"),c(yD,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDModel"),c(xD,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c($D,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterModel"),c(kD,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SD,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinModel"),c(RD,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Model"),c(PD,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasModel"),c(BD,"href","/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(ID,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(ND,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechModel"),c(qD,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(jD,"href","/docs/transformers/pr_17281/en/model_doc/van#transformers.VanModel"),c(DD,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltModel"),c(GD,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(OD,"href","/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertModel"),c(VD,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTModel"),c(XD,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zD,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(QD,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(WD,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMModel"),c(HD,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMModel"),c(UD,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMModel"),c(JD,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(YD,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(KD,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(ZD,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetModel"),c(eG,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosModel"),c(oG,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"id","transformers.AutoModelForPreTraining"),c(Ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ju,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(rG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForPreTraining"),c(sG,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForPreTraining"),c(iG,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(dG,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM"),c(cG,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fG,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mG,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gG,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hG,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pG,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_G,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uG,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vG,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForPreTraining"),c(FG,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(MG,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EG,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CG,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wG,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AG,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(LG,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(yG,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xG,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($G,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(kG,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(SG,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RG,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel"),c(PG,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(BG,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IG,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NG,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jG,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(DG,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(GG,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(OG,"href","/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(VG,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(XG,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(zG,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(QG,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WG,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(HG,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(UG,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForCausalLM"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(JG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZG,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForCausalLM"),c(eO,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertLMHeadModel"),c(oO,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(rO,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(tO,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(aO,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(nO,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(sO,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lO,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(iO,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(dO,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cO,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(fO,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForCausalLM"),c(mO,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gO,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(hO,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(pO,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(_O,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianForCausalLM"),c(uO,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForCausalLM"),c(bO,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(vO,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForCausalLM"),c(FO,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TO,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTForCausalLM"),c(MO,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(EO,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(CO,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(wO,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(AO,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(LO,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(yO,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(xO,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c($O,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(kO,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SO,"href","/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(RO,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(PO,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(BO,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(IO,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(NO,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(qO,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B2,"id","transformers.AutoModelForMaskedLM"),c(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B2,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(jO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(VO,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMaskedLM"),c(zO,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(QO,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(UO,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(JO,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(YO,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(KO,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eV,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oV,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rV,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aV,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nV,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeForMaskedLM"),c(sV,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cV,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(mV,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gV,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hV,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(_V,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bV,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vV,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FV,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TV,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MV,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(EV,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(CV,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForSeq2SeqLM"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(wV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(RV,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianMTModel"),c(qV,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(QV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c($X,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForMultipleChoice"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(zX,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(az,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForNextSentencePrediction"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForTokenClassification"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(jz,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zz,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForQuestionAnswering"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(BQ,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iW,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.AutoModelForTableQuestionAnswering"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(dW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.AutoModelForImageClassification"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForImageClassification"),c(uW,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bW,"href","/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vW,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FW,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TW,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EW,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassification"),c(CW,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wW,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(AW,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LW,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yW,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xW,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($W,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kW,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SW,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RW,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForImageClassification"),c(PW,"href","/docs/transformers/pr_17281/en/model_doc/van#transformers.VanForImageClassification"),c(BW,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B7,"id","transformers.AutoModelForVision2Seq"),c(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B7,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(IW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D7,"id","transformers.AutoModelForVisualQuestionAnswering"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(DW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.AutoModelForAudioClassification"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(XW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.AutoModelForAudioFrameClassification"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(rH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.AutoModelForCTC"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(cH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hH,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForCTC"),c(pH,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTForCTC"),c(_H,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForCTC"),c(uH,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(MH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(EH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(LH,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R8,"id","transformers.AutoModelForAudioXVector"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(yH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(SH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(RH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(PH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(BH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForMaskedImageModeling"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(IH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(DH,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(GH,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U8,"id","transformers.AutoModelForObjectDetection"),c(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U8,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(OH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(QH,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForObjectDetection"),c(WH,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForImageSegmentation"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(HH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForSemanticSegmentation"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(KH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(rU,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(nU,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.AutoModelForInstanceSegmentation"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(sU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModel"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(cU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertModel"),c(hU,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartModel"),c(pU,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertModel"),c(_U,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(uU,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(bU,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertModel"),c(vU,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.TFCLIPModel"),c(FU,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertModel"),c(TU,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextModel"),c(MU,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLModel"),c(EU,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(CU,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaModel"),c(wU,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(AU,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LU,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yU,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraModel"),c(xU,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($U,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelModel"),c(kU,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(SU,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2Model"),c(RU,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJModel"),c(PU,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.TFHubertModel"),c(BU,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(IU,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDModel"),c(NU,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerModel"),c(qU,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jU,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianModel"),c(DU,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartModel"),c(GU,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(OU,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetModel"),c(VU,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5Model"),c(XU,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zU,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTModel"),c(QU,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusModel"),c(WU,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetModel"),c(HU,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertModel"),c(UU,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaModel"),c(JU,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerModel"),c(YU,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(KU,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinModel"),c(ZU,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5Model"),c(eJ,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasModel"),c(oJ,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(rJ,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTModel"),c(tJ,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(aJ,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(nJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMModel"),c(sJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(lJ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.TFAutoModelForPreTraining"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(mJ,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForPreTraining"),c(hJ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_J,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(bJ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(vJ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(FJ,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(TJ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(EJ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(CJ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AJ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($J,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(kJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V4,"id","transformers.TFAutoModelForCausalLM"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(qJ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(jJ,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(DJ,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GJ,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(OJ,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VJ,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(XJ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zJ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(QJ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(WJ,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(HJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UJ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForImageClassification"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(eY,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(oY,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(rY,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(tY,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForMaskedLM"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(iY,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(dY,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(fY,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(mY,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(gY,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(pY,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_Y,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(uY,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bY,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(vY,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TY,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EY,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(CY,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wY,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AY,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(PY,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianMTModel"),c(IY,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForSequenceClassification"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForMultipleChoice"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(BK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(jK,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForTokenClassification"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(XK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(UK,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(YK,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.TFAutoModelForQuestionAnswering"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(gZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(wZ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(PZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.TFAutoModelForVision2Seq"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModel"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertModel"),c(HZ,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartModel"),c(UZ,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitModel"),c(JZ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertModel"),c(YZ,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(KZ,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ZZ,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eee,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oee,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ree,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraModel"),c(tee,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aee,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nee,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(see,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(lee,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianModel"),c(iee,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dee,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cee,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTModel"),c(fee,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(mee,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(gee,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(hee,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5Model"),c(pee,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_ee,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTModel"),c(uee,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(bee,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(vee,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForCausalLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(Fee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Cee,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(wee,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Aee,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Lee,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yee,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(xee,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c($ee,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(kee,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(See,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForPreTraining"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(Ree,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Nee,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jee,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Dee,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Gee,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Oee,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Vee,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zee,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Qee,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wee,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Hee,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForMaskedLM"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ooe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(roe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(toe,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(aoe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(soe,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(loe,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(ioe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(foe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(goe,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(poe,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(uoe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForSequenceClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(Toe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($oe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(koe,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(Poe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Boe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ioe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Noe,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForTokenClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(Woe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Koe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ere,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ore,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rre,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tre,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(are,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ire,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dre,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cre,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fre,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mre,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gre,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hre,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(pre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForImageClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(vre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Ere,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c(Cre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Pf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,oL),e(st,Bf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Rn),e(Rn,rL),e(Qe,Pn),e(Qe,Bn),e(Bn,tL),e(Qe,$i),e(Qe,In),e(In,aL),e(Qe,ki),b(f,If,u),M(ka,f,u),b(f,We,u),b(f,Ae,u),e(Ae,PS),e(Ae,Si),e(Si,BS),e(Ae,IS),b(f,Co,u),b(f,Sa,u),e(Sa,NS),e(Sa,Nf),e(Nf,qS),e(Sa,fHe),b(f,YVe,u),b(f,Ri,u),e(Ri,qf),e(qf,Eae),M(nL,Eae,null),e(Ri,mHe),e(Ri,Cae),e(Cae,gHe),b(f,KVe,u),b(f,Nn,u),e(Nn,hHe),e(Nn,wae),e(wae,pHe),e(Nn,_He),e(Nn,Aae),e(Aae,uHe),e(Nn,bHe),b(f,ZVe,u),M(sL,f,u),b(f,eXe,u),b(f,jS,u),e(jS,vHe),b(f,oXe,u),M(jf,f,u),b(f,rXe,u),b(f,Pi,u),e(Pi,Df),e(Df,Lae),M(lL,Lae,null),e(Pi,FHe),e(Pi,yae),e(yae,THe),b(f,tXe,u),b(f,wo,u),M(iL,wo,null),e(wo,MHe),e(wo,dL),e(dL,EHe),e(dL,DS),e(DS,CHe),e(dL,wHe),e(wo,AHe),e(wo,cL),e(cL,LHe),e(cL,xae),e(xae,yHe),e(cL,xHe),e(wo,$He),e(wo,Ar),M(fL,Ar,null),e(Ar,kHe),e(Ar,$ae),e($ae,SHe),e(Ar,RHe),e(Ar,Bi),e(Bi,PHe),e(Bi,kae),e(kae,BHe),e(Bi,IHe),e(Bi,Sae),e(Sae,NHe),e(Bi,qHe),e(Ar,jHe),e(Ar,A),e(A,Gf),e(Gf,Rae),e(Rae,DHe),e(Gf,GHe),e(Gf,GS),e(GS,OHe),e(Gf,VHe),e(A,XHe),e(A,Of),e(Of,Pae),e(Pae,zHe),e(Of,QHe),e(Of,OS),e(OS,WHe),e(Of,HHe),e(A,UHe),e(A,Vf),e(Vf,Bae),e(Bae,JHe),e(Vf,YHe),e(Vf,VS),e(VS,KHe),e(Vf,ZHe),e(A,eUe),e(A,Xf),e(Xf,Iae),e(Iae,oUe),e(Xf,rUe),e(Xf,XS),e(XS,tUe),e(Xf,aUe),e(A,nUe),e(A,zf),e(zf,Nae),e(Nae,sUe),e(zf,lUe),e(zf,zS),e(zS,iUe),e(zf,dUe),e(A,cUe),e(A,Qf),e(Qf,qae),e(qae,fUe),e(Qf,mUe),e(Qf,QS),e(QS,gUe),e(Qf,hUe),e(A,pUe),e(A,Wf),e(Wf,jae),e(jae,_Ue),e(Wf,uUe),e(Wf,WS),e(WS,bUe),e(Wf,vUe),e(A,FUe),e(A,Hf),e(Hf,Dae),e(Dae,TUe),e(Hf,MUe),e(Hf,HS),e(HS,EUe),e(Hf,CUe),e(A,wUe),e(A,Uf),e(Uf,Gae),e(Gae,AUe),e(Uf,LUe),e(Uf,US),e(US,yUe),e(Uf,xUe),e(A,$Ue),e(A,Jf),e(Jf,Oae),e(Oae,kUe),e(Jf,SUe),e(Jf,JS),e(JS,RUe),e(Jf,PUe),e(A,BUe),e(A,Yf),e(Yf,Vae),e(Vae,IUe),e(Yf,NUe),e(Yf,YS),e(YS,qUe),e(Yf,jUe),e(A,DUe),e(A,Kf),e(Kf,Xae),e(Xae,GUe),e(Kf,OUe),e(Kf,KS),e(KS,VUe),e(Kf,XUe),e(A,zUe),e(A,Zf),e(Zf,zae),e(zae,QUe),e(Zf,WUe),e(Zf,ZS),e(ZS,HUe),e(Zf,UUe),e(A,JUe),e(A,em),e(em,Qae),e(Qae,YUe),e(em,KUe),e(em,eR),e(eR,ZUe),e(em,eJe),e(A,oJe),e(A,om),e(om,Wae),e(Wae,rJe),e(om,tJe),e(om,oR),e(oR,aJe),e(om,nJe),e(A,sJe),e(A,rm),e(rm,Hae),e(Hae,lJe),e(rm,iJe),e(rm,rR),e(rR,dJe),e(rm,cJe),e(A,fJe),e(A,tm),e(tm,Uae),e(Uae,mJe),e(tm,gJe),e(tm,tR),e(tR,hJe),e(tm,pJe),e(A,_Je),e(A,am),e(am,Jae),e(Jae,uJe),e(am,bJe),e(am,aR),e(aR,vJe),e(am,FJe),e(A,TJe),e(A,nm),e(nm,Yae),e(Yae,MJe),e(nm,EJe),e(nm,nR),e(nR,CJe),e(nm,wJe),e(A,AJe),e(A,sm),e(sm,Kae),e(Kae,LJe),e(sm,yJe),e(sm,sR),e(sR,xJe),e(sm,$Je),e(A,kJe),e(A,lm),e(lm,Zae),e(Zae,SJe),e(lm,RJe),e(lm,lR),e(lR,PJe),e(lm,BJe),e(A,IJe),e(A,im),e(im,ene),e(ene,NJe),e(im,qJe),e(im,iR),e(iR,jJe),e(im,DJe),e(A,GJe),e(A,dm),e(dm,one),e(one,OJe),e(dm,VJe),e(dm,dR),e(dR,XJe),e(dm,zJe),e(A,QJe),e(A,cm),e(cm,rne),e(rne,WJe),e(cm,HJe),e(cm,cR),e(cR,UJe),e(cm,JJe),e(A,YJe),e(A,fm),e(fm,tne),e(tne,KJe),e(fm,ZJe),e(fm,fR),e(fR,eYe),e(fm,oYe),e(A,rYe),e(A,mm),e(mm,ane),e(ane,tYe),e(mm,aYe),e(mm,mR),e(mR,nYe),e(mm,sYe),e(A,lYe),e(A,gm),e(gm,nne),e(nne,iYe),e(gm,dYe),e(gm,gR),e(gR,cYe),e(gm,fYe),e(A,mYe),e(A,hm),e(hm,sne),e(sne,gYe),e(hm,hYe),e(hm,hR),e(hR,pYe),e(hm,_Ye),e(A,uYe),e(A,pm),e(pm,lne),e(lne,bYe),e(pm,vYe),e(pm,pR),e(pR,FYe),e(pm,TYe),e(A,MYe),e(A,_m),e(_m,ine),e(ine,EYe),e(_m,CYe),e(_m,_R),e(_R,wYe),e(_m,AYe),e(A,LYe),e(A,um),e(um,dne),e(dne,yYe),e(um,xYe),e(um,uR),e(uR,$Ye),e(um,kYe),e(A,SYe),e(A,bm),e(bm,cne),e(cne,RYe),e(bm,PYe),e(bm,bR),e(bR,BYe),e(bm,IYe),e(A,NYe),e(A,vm),e(vm,fne),e(fne,qYe),e(vm,jYe),e(vm,vR),e(vR,DYe),e(vm,GYe),e(A,OYe),e(A,Fm),e(Fm,mne),e(mne,VYe),e(Fm,XYe),e(Fm,FR),e(FR,zYe),e(Fm,QYe),e(A,WYe),e(A,Tm),e(Tm,gne),e(gne,HYe),e(Tm,UYe),e(Tm,TR),e(TR,JYe),e(Tm,YYe),e(A,KYe),e(A,Mm),e(Mm,hne),e(hne,ZYe),e(Mm,eKe),e(Mm,MR),e(MR,oKe),e(Mm,rKe),e(A,tKe),e(A,Em),e(Em,pne),e(pne,aKe),e(Em,nKe),e(Em,ER),e(ER,sKe),e(Em,lKe),e(A,iKe),e(A,Cm),e(Cm,_ne),e(_ne,dKe),e(Cm,cKe),e(Cm,CR),e(CR,fKe),e(Cm,mKe),e(A,gKe),e(A,wm),e(wm,une),e(une,hKe),e(wm,pKe),e(wm,wR),e(wR,_Ke),e(wm,uKe),e(A,bKe),e(A,Am),e(Am,bne),e(bne,vKe),e(Am,FKe),e(Am,AR),e(AR,TKe),e(Am,MKe),e(A,EKe),e(A,Lm),e(Lm,vne),e(vne,CKe),e(Lm,wKe),e(Lm,LR),e(LR,AKe),e(Lm,LKe),e(A,yKe),e(A,ym),e(ym,Fne),e(Fne,xKe),e(ym,$Ke),e(ym,yR),e(yR,kKe),e(ym,SKe),e(A,RKe),e(A,xm),e(xm,Tne),e(Tne,PKe),e(xm,BKe),e(xm,xR),e(xR,IKe),e(xm,NKe),e(A,qKe),e(A,$m),e($m,Mne),e(Mne,jKe),e($m,DKe),e($m,$R),e($R,GKe),e($m,OKe),e(A,VKe),e(A,km),e(km,Ene),e(Ene,XKe),e(km,zKe),e(km,kR),e(kR,QKe),e(km,WKe),e(A,HKe),e(A,Sm),e(Sm,Cne),e(Cne,UKe),e(Sm,JKe),e(Sm,SR),e(SR,YKe),e(Sm,KKe),e(A,ZKe),e(A,Rm),e(Rm,wne),e(wne,eZe),e(Rm,oZe),e(Rm,RR),e(RR,rZe),e(Rm,tZe),e(A,aZe),e(A,Pm),e(Pm,Ane),e(Ane,nZe),e(Pm,sZe),e(Pm,PR),e(PR,lZe),e(Pm,iZe),e(A,dZe),e(A,Bm),e(Bm,Lne),e(Lne,cZe),e(Bm,fZe),e(Bm,BR),e(BR,mZe),e(Bm,gZe),e(A,hZe),e(A,Im),e(Im,yne),e(yne,pZe),e(Im,_Ze),e(Im,IR),e(IR,uZe),e(Im,bZe),e(A,vZe),e(A,Nm),e(Nm,xne),e(xne,FZe),e(Nm,TZe),e(Nm,NR),e(NR,MZe),e(Nm,EZe),e(A,CZe),e(A,qm),e(qm,$ne),e($ne,wZe),e(qm,AZe),e(qm,qR),e(qR,LZe),e(qm,yZe),e(A,xZe),e(A,jm),e(jm,kne),e(kne,$Ze),e(jm,kZe),e(jm,jR),e(jR,SZe),e(jm,RZe),e(A,PZe),e(A,Dm),e(Dm,Sne),e(Sne,BZe),e(Dm,IZe),e(Dm,DR),e(DR,NZe),e(Dm,qZe),e(A,jZe),e(A,Gm),e(Gm,Rne),e(Rne,DZe),e(Gm,GZe),e(Gm,GR),e(GR,OZe),e(Gm,VZe),e(A,XZe),e(A,Om),e(Om,Pne),e(Pne,zZe),e(Om,QZe),e(Om,OR),e(OR,WZe),e(Om,HZe),e(A,UZe),e(A,Vm),e(Vm,Bne),e(Bne,JZe),e(Vm,YZe),e(Vm,VR),e(VR,KZe),e(Vm,ZZe),e(A,eeo),e(A,Xm),e(Xm,Ine),e(Ine,oeo),e(Xm,reo),e(Xm,XR),e(XR,teo),e(Xm,aeo),e(A,neo),e(A,zm),e(zm,Nne),e(Nne,seo),e(zm,leo),e(zm,zR),e(zR,ieo),e(zm,deo),e(A,ceo),e(A,Qm),e(Qm,qne),e(qne,feo),e(Qm,meo),e(Qm,QR),e(QR,geo),e(Qm,heo),e(A,peo),e(A,Wm),e(Wm,jne),e(jne,_eo),e(Wm,ueo),e(Wm,WR),e(WR,beo),e(Wm,veo),e(A,Feo),e(A,Hm),e(Hm,Dne),e(Dne,Teo),e(Hm,Meo),e(Hm,HR),e(HR,Eeo),e(Hm,Ceo),e(A,weo),e(A,Um),e(Um,Gne),e(Gne,Aeo),e(Um,Leo),e(Um,UR),e(UR,yeo),e(Um,xeo),e(A,$eo),e(A,Jm),e(Jm,One),e(One,keo),e(Jm,Seo),e(Jm,JR),e(JR,Reo),e(Jm,Peo),e(A,Beo),e(A,Ym),e(Ym,Vne),e(Vne,Ieo),e(Ym,Neo),e(Ym,YR),e(YR,qeo),e(Ym,jeo),e(A,Deo),e(A,Km),e(Km,Xne),e(Xne,Geo),e(Km,Oeo),e(Km,KR),e(KR,Veo),e(Km,Xeo),e(A,zeo),e(A,Zm),e(Zm,zne),e(zne,Qeo),e(Zm,Weo),e(Zm,ZR),e(ZR,Heo),e(Zm,Ueo),e(A,Jeo),e(A,eg),e(eg,Qne),e(Qne,Yeo),e(eg,Keo),e(eg,eP),e(eP,Zeo),e(eg,eoo),e(A,ooo),e(A,og),e(og,Wne),e(Wne,roo),e(og,too),e(og,oP),e(oP,aoo),e(og,noo),e(A,soo),e(A,rg),e(rg,Hne),e(Hne,loo),e(rg,ioo),e(rg,rP),e(rP,doo),e(rg,coo),e(A,foo),e(A,tg),e(tg,Une),e(Une,moo),e(tg,goo),e(tg,tP),e(tP,hoo),e(tg,poo),e(A,_oo),e(A,ag),e(ag,Jne),e(Jne,uoo),e(ag,boo),e(ag,aP),e(aP,voo),e(ag,Foo),e(A,Too),e(A,ng),e(ng,Yne),e(Yne,Moo),e(ng,Eoo),e(ng,nP),e(nP,Coo),e(ng,woo),e(A,Aoo),e(A,sg),e(sg,Kne),e(Kne,Loo),e(sg,yoo),e(sg,sP),e(sP,xoo),e(sg,$oo),e(A,koo),e(A,lg),e(lg,Zne),e(Zne,Soo),e(lg,Roo),e(lg,lP),e(lP,Poo),e(lg,Boo),e(A,Ioo),e(A,ig),e(ig,ese),e(ese,Noo),e(ig,qoo),e(ig,iP),e(iP,joo),e(ig,Doo),e(A,Goo),e(A,dg),e(dg,ose),e(ose,Ooo),e(dg,Voo),e(dg,dP),e(dP,Xoo),e(dg,zoo),e(A,Qoo),e(A,cg),e(cg,rse),e(rse,Woo),e(cg,Hoo),e(cg,cP),e(cP,Uoo),e(cg,Joo),e(A,Yoo),e(A,fg),e(fg,tse),e(tse,Koo),e(fg,Zoo),e(fg,fP),e(fP,ero),e(fg,oro),e(A,rro),e(A,mg),e(mg,ase),e(ase,tro),e(mg,aro),e(mg,mP),e(mP,nro),e(mg,sro),e(A,lro),e(A,gg),e(gg,nse),e(nse,iro),e(gg,dro),e(gg,gP),e(gP,cro),e(gg,fro),e(A,mro),e(A,hg),e(hg,sse),e(sse,gro),e(hg,hro),e(hg,hP),e(hP,pro),e(hg,_ro),e(A,uro),e(A,pg),e(pg,lse),e(lse,bro),e(pg,vro),e(pg,pP),e(pP,Fro),e(pg,Tro),e(A,Mro),e(A,_g),e(_g,ise),e(ise,Ero),e(_g,Cro),e(_g,_P),e(_P,wro),e(_g,Aro),e(A,Lro),e(A,ug),e(ug,dse),e(dse,yro),e(ug,xro),e(ug,uP),e(uP,$ro),e(ug,kro),e(A,Sro),e(A,bg),e(bg,cse),e(cse,Rro),e(bg,Pro),e(bg,bP),e(bP,Bro),e(bg,Iro),e(A,Nro),e(A,vg),e(vg,fse),e(fse,qro),e(vg,jro),e(vg,vP),e(vP,Dro),e(vg,Gro),e(A,Oro),e(A,Fg),e(Fg,mse),e(mse,Vro),e(Fg,Xro),e(Fg,FP),e(FP,zro),e(Fg,Qro),e(A,Wro),e(A,Tg),e(Tg,gse),e(gse,Hro),e(Tg,Uro),e(Tg,TP),e(TP,Jro),e(Tg,Yro),e(A,Kro),e(A,Mg),e(Mg,hse),e(hse,Zro),e(Mg,eto),e(Mg,MP),e(MP,oto),e(Mg,rto),e(A,tto),e(A,Eg),e(Eg,pse),e(pse,ato),e(Eg,nto),e(Eg,EP),e(EP,sto),e(Eg,lto),e(A,ito),e(A,Cg),e(Cg,_se),e(_se,dto),e(Cg,cto),e(Cg,CP),e(CP,fto),e(Cg,mto),e(A,gto),e(A,wg),e(wg,use),e(use,hto),e(wg,pto),e(wg,wP),e(wP,_to),e(wg,uto),e(A,bto),e(A,Ag),e(Ag,bse),e(bse,vto),e(Ag,Fto),e(Ag,AP),e(AP,Tto),e(Ag,Mto),e(A,Eto),e(A,Lg),e(Lg,vse),e(vse,Cto),e(Lg,wto),e(Lg,LP),e(LP,Ato),e(Lg,Lto),e(A,yto),e(A,yg),e(yg,Fse),e(Fse,xto),e(yg,$to),e(yg,yP),e(yP,kto),e(yg,Sto),e(A,Rto),e(A,xg),e(xg,Tse),e(Tse,Pto),e(xg,Bto),e(xg,xP),e(xP,Ito),e(xg,Nto),e(A,qto),e(A,$g),e($g,Mse),e(Mse,jto),e($g,Dto),e($g,$P),e($P,Gto),e($g,Oto),e(A,Vto),e(A,kg),e(kg,Ese),e(Ese,Xto),e(kg,zto),e(kg,kP),e(kP,Qto),e(kg,Wto),e(A,Hto),e(A,Sg),e(Sg,Cse),e(Cse,Uto),e(Sg,Jto),e(Sg,SP),e(SP,Yto),e(Sg,Kto),e(A,Zto),e(A,Rg),e(Rg,wse),e(wse,eao),e(Rg,oao),e(Rg,RP),e(RP,rao),e(Rg,tao),e(A,aao),e(A,Pg),e(Pg,Ase),e(Ase,nao),e(Pg,sao),e(Pg,PP),e(PP,lao),e(Pg,iao),e(A,dao),e(A,Bg),e(Bg,Lse),e(Lse,cao),e(Bg,fao),e(Bg,BP),e(BP,mao),e(Bg,gao),e(A,hao),e(A,Ig),e(Ig,yse),e(yse,pao),e(Ig,_ao),e(Ig,IP),e(IP,uao),e(Ig,bao),e(A,vao),e(A,Ng),e(Ng,xse),e(xse,Fao),e(Ng,Tao),e(Ng,NP),e(NP,Mao),e(Ng,Eao),e(A,Cao),e(A,qg),e(qg,$se),e($se,wao),e(qg,Aao),e(qg,qP),e(qP,Lao),e(qg,yao),e(A,xao),e(A,jg),e(jg,kse),e(kse,$ao),e(jg,kao),e(jg,jP),e(jP,Sao),e(jg,Rao),e(A,Pao),e(A,Dg),e(Dg,Sse),e(Sse,Bao),e(Dg,Iao),e(Dg,DP),e(DP,Nao),e(Dg,qao),e(A,jao),e(A,Gg),e(Gg,Rse),e(Rse,Dao),e(Gg,Gao),e(Gg,GP),e(GP,Oao),e(Gg,Vao),e(A,Xao),e(A,Og),e(Og,Pse),e(Pse,zao),e(Og,Qao),e(Og,OP),e(OP,Wao),e(Og,Hao),e(A,Uao),e(A,Vg),e(Vg,Bse),e(Bse,Jao),e(Vg,Yao),e(Vg,VP),e(VP,Kao),e(Vg,Zao),e(A,eno),e(A,Xg),e(Xg,Ise),e(Ise,ono),e(Xg,rno),e(Xg,XP),e(XP,tno),e(Xg,ano),e(A,nno),e(A,zg),e(zg,Nse),e(Nse,sno),e(zg,lno),e(zg,zP),e(zP,ino),e(zg,dno),e(A,cno),e(A,Qg),e(Qg,qse),e(qse,fno),e(Qg,mno),e(Qg,QP),e(QP,gno),e(Qg,hno),e(A,pno),e(A,Wg),e(Wg,jse),e(jse,_no),e(Wg,uno),e(Wg,WP),e(WP,bno),e(Wg,vno),e(A,Fno),e(A,Hg),e(Hg,Dse),e(Dse,Tno),e(Hg,Mno),e(Hg,HP),e(HP,Eno),e(Hg,Cno),e(A,wno),e(A,Ug),e(Ug,Gse),e(Gse,Ano),e(Ug,Lno),e(Ug,UP),e(UP,yno),e(Ug,xno),e(A,$no),e(A,Jg),e(Jg,Ose),e(Ose,kno),e(Jg,Sno),e(Jg,JP),e(JP,Rno),e(Jg,Pno),e(A,Bno),e(A,Yg),e(Yg,Vse),e(Vse,Ino),e(Yg,Nno),e(Yg,YP),e(YP,qno),e(Yg,jno),e(Ar,Dno),M(Kg,Ar,null),e(wo,Gno),e(wo,Zg),M(mL,Zg,null),e(Zg,Ono),e(Zg,Xse),e(Xse,Vno),b(f,aXe,u),b(f,Ii,u),e(Ii,eh),e(eh,zse),M(gL,zse,null),e(Ii,Xno),e(Ii,Qse),e(Qse,zno),b(f,nXe,u),b(f,Ao,u),M(hL,Ao,null),e(Ao,Qno),e(Ao,pL),e(pL,Wno),e(pL,KP),e(KP,Hno),e(pL,Uno),e(Ao,Jno),e(Ao,_L),e(_L,Yno),e(_L,Wse),e(Wse,Kno),e(_L,Zno),e(Ao,eso),e(Ao,Lr),M(uL,Lr,null),e(Lr,oso),e(Lr,Hse),e(Hse,rso),e(Lr,tso),e(Lr,Ra),e(Ra,aso),e(Ra,Use),e(Use,nso),e(Ra,sso),e(Ra,Jse),e(Jse,lso),e(Ra,iso),e(Ra,Yse),e(Yse,dso),e(Ra,cso),e(Lr,fso),e(Lr,k),e(k,qn),e(qn,Kse),e(Kse,mso),e(qn,gso),e(qn,ZP),e(ZP,hso),e(qn,pso),e(qn,eB),e(eB,_so),e(qn,uso),e(k,bso),e(k,jn),e(jn,Zse),e(Zse,vso),e(jn,Fso),e(jn,oB),e(oB,Tso),e(jn,Mso),e(jn,rB),e(rB,Eso),e(jn,Cso),e(k,wso),e(k,Dn),e(Dn,ele),e(ele,Aso),e(Dn,Lso),e(Dn,tB),e(tB,yso),e(Dn,xso),e(Dn,aB),e(aB,$so),e(Dn,kso),e(k,Sso),e(k,oh),e(oh,ole),e(ole,Rso),e(oh,Pso),e(oh,nB),e(nB,Bso),e(oh,Iso),e(k,Nso),e(k,Gn),e(Gn,rle),e(rle,qso),e(Gn,jso),e(Gn,sB),e(sB,Dso),e(Gn,Gso),e(Gn,lB),e(lB,Oso),e(Gn,Vso),e(k,Xso),e(k,rh),e(rh,tle),e(tle,zso),e(rh,Qso),e(rh,iB),e(iB,Wso),e(rh,Hso),e(k,Uso),e(k,th),e(th,ale),e(ale,Jso),e(th,Yso),e(th,dB),e(dB,Kso),e(th,Zso),e(k,elo),e(k,ah),e(ah,nle),e(nle,olo),e(ah,rlo),e(ah,cB),e(cB,tlo),e(ah,alo),e(k,nlo),e(k,On),e(On,sle),e(sle,slo),e(On,llo),e(On,fB),e(fB,ilo),e(On,dlo),e(On,mB),e(mB,clo),e(On,flo),e(k,mlo),e(k,Vn),e(Vn,lle),e(lle,glo),e(Vn,hlo),e(Vn,gB),e(gB,plo),e(Vn,_lo),e(Vn,hB),e(hB,ulo),e(Vn,blo),e(k,vlo),e(k,Xn),e(Xn,ile),e(ile,Flo),e(Xn,Tlo),e(Xn,pB),e(pB,Mlo),e(Xn,Elo),e(Xn,_B),e(_B,Clo),e(Xn,wlo),e(k,Alo),e(k,nh),e(nh,dle),e(dle,Llo),e(nh,ylo),e(nh,uB),e(uB,xlo),e(nh,$lo),e(k,klo),e(k,sh),e(sh,cle),e(cle,Slo),e(sh,Rlo),e(sh,bB),e(bB,Plo),e(sh,Blo),e(k,Ilo),e(k,lh),e(lh,fle),e(fle,Nlo),e(lh,qlo),e(lh,vB),e(vB,jlo),e(lh,Dlo),e(k,Glo),e(k,zn),e(zn,mle),e(mle,Olo),e(zn,Vlo),e(zn,FB),e(FB,Xlo),e(zn,zlo),e(zn,TB),e(TB,Qlo),e(zn,Wlo),e(k,Hlo),e(k,ih),e(ih,gle),e(gle,Ulo),e(ih,Jlo),e(ih,MB),e(MB,Ylo),e(ih,Klo),e(k,Zlo),e(k,Qn),e(Qn,hle),e(hle,eio),e(Qn,oio),e(Qn,EB),e(EB,rio),e(Qn,tio),e(Qn,CB),e(CB,aio),e(Qn,nio),e(k,sio),e(k,Wn),e(Wn,ple),e(ple,lio),e(Wn,iio),e(Wn,wB),e(wB,dio),e(Wn,cio),e(Wn,AB),e(AB,fio),e(Wn,mio),e(k,gio),e(k,Hn),e(Hn,_le),e(_le,hio),e(Hn,pio),e(Hn,LB),e(LB,_io),e(Hn,uio),e(Hn,yB),e(yB,bio),e(Hn,vio),e(k,Fio),e(k,Un),e(Un,ule),e(ule,Tio),e(Un,Mio),e(Un,xB),e(xB,Eio),e(Un,Cio),e(Un,$B),e($B,wio),e(Un,Aio),e(k,Lio),e(k,dh),e(dh,ble),e(ble,yio),e(dh,xio),e(dh,kB),e(kB,$io),e(dh,kio),e(k,Sio),e(k,Jn),e(Jn,vle),e(vle,Rio),e(Jn,Pio),e(Jn,SB),e(SB,Bio),e(Jn,Iio),e(Jn,RB),e(RB,Nio),e(Jn,qio),e(k,jio),e(k,Yn),e(Yn,Fle),e(Fle,Dio),e(Yn,Gio),e(Yn,PB),e(PB,Oio),e(Yn,Vio),e(Yn,BB),e(BB,Xio),e(Yn,zio),e(k,Qio),e(k,Kn),e(Kn,Tle),e(Tle,Wio),e(Kn,Hio),e(Kn,IB),e(IB,Uio),e(Kn,Jio),e(Kn,NB),e(NB,Yio),e(Kn,Kio),e(k,Zio),e(k,Zn),e(Zn,Mle),e(Mle,edo),e(Zn,odo),e(Zn,qB),e(qB,rdo),e(Zn,tdo),e(Zn,jB),e(jB,ado),e(Zn,ndo),e(k,sdo),e(k,es),e(es,Ele),e(Ele,ldo),e(es,ido),e(es,DB),e(DB,ddo),e(es,cdo),e(es,GB),e(GB,fdo),e(es,mdo),e(k,gdo),e(k,os),e(os,Cle),e(Cle,hdo),e(os,pdo),e(os,OB),e(OB,_do),e(os,udo),e(os,VB),e(VB,bdo),e(os,vdo),e(k,Fdo),e(k,ch),e(ch,wle),e(wle,Tdo),e(ch,Mdo),e(ch,XB),e(XB,Edo),e(ch,Cdo),e(k,wdo),e(k,rs),e(rs,Ale),e(Ale,Ado),e(rs,Ldo),e(rs,zB),e(zB,ydo),e(rs,xdo),e(rs,QB),e(QB,$do),e(rs,kdo),e(k,Sdo),e(k,fh),e(fh,Lle),e(Lle,Rdo),e(fh,Pdo),e(fh,WB),e(WB,Bdo),e(fh,Ido),e(k,Ndo),e(k,ts),e(ts,yle),e(yle,qdo),e(ts,jdo),e(ts,HB),e(HB,Ddo),e(ts,Gdo),e(ts,UB),e(UB,Odo),e(ts,Vdo),e(k,Xdo),e(k,as),e(as,xle),e(xle,zdo),e(as,Qdo),e(as,JB),e(JB,Wdo),e(as,Hdo),e(as,YB),e(YB,Udo),e(as,Jdo),e(k,Ydo),e(k,ns),e(ns,$le),e($le,Kdo),e(ns,Zdo),e(ns,KB),e(KB,eco),e(ns,oco),e(ns,ZB),e(ZB,rco),e(ns,tco),e(k,aco),e(k,mh),e(mh,kle),e(kle,nco),e(mh,sco),e(mh,eI),e(eI,lco),e(mh,ico),e(k,dco),e(k,ss),e(ss,Sle),e(Sle,cco),e(ss,fco),e(ss,oI),e(oI,mco),e(ss,gco),e(ss,rI),e(rI,hco),e(ss,pco),e(k,_co),e(k,ls),e(ls,Rle),e(Rle,uco),e(ls,bco),e(ls,tI),e(tI,vco),e(ls,Fco),e(ls,aI),e(aI,Tco),e(ls,Mco),e(k,Eco),e(k,is),e(is,Ple),e(Ple,Cco),e(is,wco),e(is,nI),e(nI,Aco),e(is,Lco),e(is,sI),e(sI,yco),e(is,xco),e(k,$co),e(k,gh),e(gh,Ble),e(Ble,kco),e(gh,Sco),e(gh,lI),e(lI,Rco),e(gh,Pco),e(k,Bco),e(k,ds),e(ds,Ile),e(Ile,Ico),e(ds,Nco),e(ds,iI),e(iI,qco),e(ds,jco),e(ds,dI),e(dI,Dco),e(ds,Gco),e(k,Oco),e(k,cs),e(cs,Nle),e(Nle,Vco),e(cs,Xco),e(cs,cI),e(cI,zco),e(cs,Qco),e(cs,fI),e(fI,Wco),e(cs,Hco),e(k,Uco),e(k,fs),e(fs,qle),e(qle,Jco),e(fs,Yco),e(fs,mI),e(mI,Kco),e(fs,Zco),e(fs,gI),e(gI,efo),e(fs,ofo),e(k,rfo),e(k,ms),e(ms,jle),e(jle,tfo),e(ms,afo),e(ms,hI),e(hI,nfo),e(ms,sfo),e(ms,pI),e(pI,lfo),e(ms,ifo),e(k,dfo),e(k,gs),e(gs,Dle),e(Dle,cfo),e(gs,ffo),e(gs,_I),e(_I,mfo),e(gs,gfo),e(gs,uI),e(uI,hfo),e(gs,pfo),e(k,_fo),e(k,hs),e(hs,Gle),e(Gle,ufo),e(hs,bfo),e(hs,bI),e(bI,vfo),e(hs,Ffo),e(hs,vI),e(vI,Tfo),e(hs,Mfo),e(k,Efo),e(k,ps),e(ps,Ole),e(Ole,Cfo),e(ps,wfo),e(ps,FI),e(FI,Afo),e(ps,Lfo),e(ps,TI),e(TI,yfo),e(ps,xfo),e(k,$fo),e(k,_s),e(_s,Vle),e(Vle,kfo),e(_s,Sfo),e(_s,MI),e(MI,Rfo),e(_s,Pfo),e(_s,EI),e(EI,Bfo),e(_s,Ifo),e(k,Nfo),e(k,hh),e(hh,Xle),e(Xle,qfo),e(hh,jfo),e(hh,CI),e(CI,Dfo),e(hh,Gfo),e(k,Ofo),e(k,us),e(us,zle),e(zle,Vfo),e(us,Xfo),e(us,wI),e(wI,zfo),e(us,Qfo),e(us,AI),e(AI,Wfo),e(us,Hfo),e(k,Ufo),e(k,ph),e(ph,Qle),e(Qle,Jfo),e(ph,Yfo),e(ph,LI),e(LI,Kfo),e(ph,Zfo),e(k,emo),e(k,_h),e(_h,Wle),e(Wle,omo),e(_h,rmo),e(_h,yI),e(yI,tmo),e(_h,amo),e(k,nmo),e(k,bs),e(bs,Hle),e(Hle,smo),e(bs,lmo),e(bs,xI),e(xI,imo),e(bs,dmo),e(bs,$I),e($I,cmo),e(bs,fmo),e(k,mmo),e(k,vs),e(vs,Ule),e(Ule,gmo),e(vs,hmo),e(vs,kI),e(kI,pmo),e(vs,_mo),e(vs,SI),e(SI,umo),e(vs,bmo),e(k,vmo),e(k,Fs),e(Fs,Jle),e(Jle,Fmo),e(Fs,Tmo),e(Fs,RI),e(RI,Mmo),e(Fs,Emo),e(Fs,PI),e(PI,Cmo),e(Fs,wmo),e(k,Amo),e(k,uh),e(uh,Yle),e(Yle,Lmo),e(uh,ymo),e(uh,BI),e(BI,xmo),e(uh,$mo),e(k,kmo),e(k,Ts),e(Ts,Kle),e(Kle,Smo),e(Ts,Rmo),e(Ts,II),e(II,Pmo),e(Ts,Bmo),e(Ts,NI),e(NI,Imo),e(Ts,Nmo),e(k,qmo),e(k,Ms),e(Ms,Zle),e(Zle,jmo),e(Ms,Dmo),e(Ms,qI),e(qI,Gmo),e(Ms,Omo),e(Ms,jI),e(jI,Vmo),e(Ms,Xmo),e(k,zmo),e(k,Es),e(Es,eie),e(eie,Qmo),e(Es,Wmo),e(Es,DI),e(DI,Hmo),e(Es,Umo),e(Es,GI),e(GI,Jmo),e(Es,Ymo),e(k,Kmo),e(k,Cs),e(Cs,oie),e(oie,Zmo),e(Cs,ego),e(Cs,OI),e(OI,ogo),e(Cs,rgo),e(Cs,VI),e(VI,tgo),e(Cs,ago),e(k,ngo),e(k,ws),e(ws,rie),e(rie,sgo),e(ws,lgo),e(ws,XI),e(XI,igo),e(ws,dgo),e(ws,zI),e(zI,cgo),e(ws,fgo),e(k,mgo),e(k,As),e(As,tie),e(tie,ggo),e(As,hgo),e(As,QI),e(QI,pgo),e(As,_go),e(As,WI),e(WI,ugo),e(As,bgo),e(k,vgo),e(k,Ls),e(Ls,aie),e(aie,Fgo),e(Ls,Tgo),e(Ls,HI),e(HI,Mgo),e(Ls,Ego),e(Ls,UI),e(UI,Cgo),e(Ls,wgo),e(k,Ago),e(k,bh),e(bh,nie),e(nie,Lgo),e(bh,ygo),e(bh,JI),e(JI,xgo),e(bh,$go),e(k,kgo),e(k,ys),e(ys,sie),e(sie,Sgo),e(ys,Rgo),e(ys,YI),e(YI,Pgo),e(ys,Bgo),e(ys,KI),e(KI,Igo),e(ys,Ngo),e(k,qgo),e(k,vh),e(vh,lie),e(lie,jgo),e(vh,Dgo),e(vh,ZI),e(ZI,Ggo),e(vh,Ogo),e(k,Vgo),e(k,Fh),e(Fh,iie),e(iie,Xgo),e(Fh,zgo),e(Fh,eN),e(eN,Qgo),e(Fh,Wgo),e(k,Hgo),e(k,Th),e(Th,die),e(die,Ugo),e(Th,Jgo),e(Th,oN),e(oN,Ygo),e(Th,Kgo),e(k,Zgo),e(k,Mh),e(Mh,cie),e(cie,eho),e(Mh,oho),e(Mh,rN),e(rN,rho),e(Mh,tho),e(k,aho),e(k,xs),e(xs,fie),e(fie,nho),e(xs,sho),e(xs,tN),e(tN,lho),e(xs,iho),e(xs,aN),e(aN,dho),e(xs,cho),e(k,fho),e(k,Eh),e(Eh,mie),e(mie,mho),e(Eh,gho),e(Eh,nN),e(nN,hho),e(Eh,pho),e(k,_ho),e(k,$s),e($s,gie),e(gie,uho),e($s,bho),e($s,sN),e(sN,vho),e($s,Fho),e($s,lN),e(lN,Tho),e($s,Mho),e(k,Eho),e(k,ks),e(ks,hie),e(hie,Cho),e(ks,who),e(ks,iN),e(iN,Aho),e(ks,Lho),e(ks,dN),e(dN,yho),e(ks,xho),e(k,$ho),e(k,Ss),e(Ss,pie),e(pie,kho),e(Ss,Sho),e(Ss,cN),e(cN,Rho),e(Ss,Pho),e(Ss,fN),e(fN,Bho),e(Ss,Iho),e(k,Nho),e(k,Rs),e(Rs,_ie),e(_ie,qho),e(Rs,jho),e(Rs,mN),e(mN,Dho),e(Rs,Gho),e(Rs,gN),e(gN,Oho),e(Rs,Vho),e(k,Xho),e(k,Ps),e(Ps,uie),e(uie,zho),e(Ps,Qho),e(Ps,hN),e(hN,Who),e(Ps,Hho),e(Ps,pN),e(pN,Uho),e(Ps,Jho),e(k,Yho),e(k,Bs),e(Bs,bie),e(bie,Kho),e(Bs,Zho),e(Bs,_N),e(_N,epo),e(Bs,opo),e(Bs,uN),e(uN,rpo),e(Bs,tpo),e(k,apo),e(k,Ch),e(Ch,vie),e(vie,npo),e(Ch,spo),e(Ch,bN),e(bN,lpo),e(Ch,ipo),e(k,dpo),e(k,wh),e(wh,Fie),e(Fie,cpo),e(wh,fpo),e(wh,vN),e(vN,mpo),e(wh,gpo),e(k,hpo),e(k,Is),e(Is,Tie),e(Tie,ppo),e(Is,_po),e(Is,FN),e(FN,upo),e(Is,bpo),e(Is,TN),e(TN,vpo),e(Is,Fpo),e(k,Tpo),e(k,Ns),e(Ns,Mie),e(Mie,Mpo),e(Ns,Epo),e(Ns,MN),e(MN,Cpo),e(Ns,wpo),e(Ns,EN),e(EN,Apo),e(Ns,Lpo),e(k,ypo),e(k,qs),e(qs,Eie),e(Eie,xpo),e(qs,$po),e(qs,CN),e(CN,kpo),e(qs,Spo),e(qs,wN),e(wN,Rpo),e(qs,Ppo),e(k,Bpo),e(k,Ah),e(Ah,Cie),e(Cie,Ipo),e(Ah,Npo),e(Ah,AN),e(AN,qpo),e(Ah,jpo),e(k,Dpo),e(k,Lh),e(Lh,wie),e(wie,Gpo),e(Lh,Opo),e(Lh,LN),e(LN,Vpo),e(Lh,Xpo),e(k,zpo),e(k,yh),e(yh,Aie),e(Aie,Qpo),e(yh,Wpo),e(yh,yN),e(yN,Hpo),e(yh,Upo),e(k,Jpo),e(k,js),e(js,Lie),e(Lie,Ypo),e(js,Kpo),e(js,xN),e(xN,Zpo),e(js,e_o),e(js,$N),e($N,o_o),e(js,r_o),e(k,t_o),e(k,Ds),e(Ds,yie),e(yie,a_o),e(Ds,n_o),e(Ds,kN),e(kN,s_o),e(Ds,l_o),e(Ds,SN),e(SN,i_o),e(Ds,d_o),e(k,c_o),e(k,xh),e(xh,xie),e(xie,f_o),e(xh,m_o),e(xh,RN),e(RN,g_o),e(xh,h_o),e(k,p_o),e(k,$h),e($h,$ie),e($ie,__o),e($h,u_o),e($h,PN),e(PN,b_o),e($h,v_o),e(k,F_o),e(k,kh),e(kh,kie),e(kie,T_o),e(kh,M_o),e(kh,BN),e(BN,E_o),e(kh,C_o),e(k,w_o),e(k,Gs),e(Gs,Sie),e(Sie,A_o),e(Gs,L_o),e(Gs,IN),e(IN,y_o),e(Gs,x_o),e(Gs,NN),e(NN,$_o),e(Gs,k_o),e(k,S_o),e(k,Sh),e(Sh,Rie),e(Rie,R_o),e(Sh,P_o),e(Sh,qN),e(qN,B_o),e(Sh,I_o),e(k,N_o),e(k,Rh),e(Rh,Pie),e(Pie,q_o),e(Rh,j_o),e(Rh,jN),e(jN,D_o),e(Rh,G_o),e(k,O_o),e(k,Os),e(Os,Bie),e(Bie,V_o),e(Os,X_o),e(Os,DN),e(DN,z_o),e(Os,Q_o),e(Os,GN),e(GN,W_o),e(Os,H_o),e(k,U_o),e(k,Vs),e(Vs,Iie),e(Iie,J_o),e(Vs,Y_o),e(Vs,ON),e(ON,K_o),e(Vs,Z_o),e(Vs,VN),e(VN,euo),e(Vs,ouo),e(k,ruo),e(k,Xs),e(Xs,Nie),e(Nie,tuo),e(Xs,auo),e(Xs,XN),e(XN,nuo),e(Xs,suo),e(Xs,zN),e(zN,luo),e(Xs,iuo),e(k,duo),e(k,zs),e(zs,qie),e(qie,cuo),e(zs,fuo),e(zs,QN),e(QN,muo),e(zs,guo),e(zs,WN),e(WN,huo),e(zs,puo),e(Lr,_uo),M(Ph,Lr,null),e(Ao,uuo),e(Ao,Bh),M(bL,Bh,null),e(Bh,buo),e(Bh,jie),e(jie,vuo),b(f,sXe,u),b(f,Ni,u),e(Ni,Ih),e(Ih,Die),M(vL,Die,null),e(Ni,Fuo),e(Ni,Gie),e(Gie,Tuo),b(f,lXe,u),b(f,Lo,u),M(FL,Lo,null),e(Lo,Muo),e(Lo,TL),e(TL,Euo),e(TL,HN),e(HN,Cuo),e(TL,wuo),e(Lo,Auo),e(Lo,ML),e(ML,Luo),e(ML,Oie),e(Oie,yuo),e(ML,xuo),e(Lo,$uo),e(Lo,He),M(EL,He,null),e(He,kuo),e(He,Vie),e(Vie,Suo),e(He,Ruo),e(He,Pa),e(Pa,Puo),e(Pa,Xie),e(Xie,Buo),e(Pa,Iuo),e(Pa,zie),e(zie,Nuo),e(Pa,quo),e(Pa,Qie),e(Qie,juo),e(Pa,Duo),e(He,Guo),e(He,J),e(J,Nh),e(Nh,Wie),e(Wie,Ouo),e(Nh,Vuo),e(Nh,UN),e(UN,Xuo),e(Nh,zuo),e(J,Quo),e(J,qh),e(qh,Hie),e(Hie,Wuo),e(qh,Huo),e(qh,JN),e(JN,Uuo),e(qh,Juo),e(J,Yuo),e(J,jh),e(jh,Uie),e(Uie,Kuo),e(jh,Zuo),e(jh,YN),e(YN,e1o),e(jh,o1o),e(J,r1o),e(J,Dh),e(Dh,Jie),e(Jie,t1o),e(Dh,a1o),e(Dh,KN),e(KN,n1o),e(Dh,s1o),e(J,l1o),e(J,Gh),e(Gh,Yie),e(Yie,i1o),e(Gh,d1o),e(Gh,ZN),e(ZN,c1o),e(Gh,f1o),e(J,m1o),e(J,Oh),e(Oh,Kie),e(Kie,g1o),e(Oh,h1o),e(Oh,eq),e(eq,p1o),e(Oh,_1o),e(J,u1o),e(J,Vh),e(Vh,Zie),e(Zie,b1o),e(Vh,v1o),e(Vh,oq),e(oq,F1o),e(Vh,T1o),e(J,M1o),e(J,Xh),e(Xh,ede),e(ede,E1o),e(Xh,C1o),e(Xh,rq),e(rq,w1o),e(Xh,A1o),e(J,L1o),e(J,zh),e(zh,ode),e(ode,y1o),e(zh,x1o),e(zh,tq),e(tq,$1o),e(zh,k1o),e(J,S1o),e(J,Qh),e(Qh,rde),e(rde,R1o),e(Qh,P1o),e(Qh,aq),e(aq,B1o),e(Qh,I1o),e(J,N1o),e(J,Wh),e(Wh,tde),e(tde,q1o),e(Wh,j1o),e(Wh,nq),e(nq,D1o),e(Wh,G1o),e(J,O1o),e(J,Hh),e(Hh,ade),e(ade,V1o),e(Hh,X1o),e(Hh,sq),e(sq,z1o),e(Hh,Q1o),e(J,W1o),e(J,Uh),e(Uh,nde),e(nde,H1o),e(Uh,U1o),e(Uh,lq),e(lq,J1o),e(Uh,Y1o),e(J,K1o),e(J,Jh),e(Jh,sde),e(sde,Z1o),e(Jh,e2o),e(Jh,iq),e(iq,o2o),e(Jh,r2o),e(J,t2o),e(J,Yh),e(Yh,lde),e(lde,a2o),e(Yh,n2o),e(Yh,dq),e(dq,s2o),e(Yh,l2o),e(J,i2o),e(J,Kh),e(Kh,ide),e(ide,d2o),e(Kh,c2o),e(Kh,cq),e(cq,f2o),e(Kh,m2o),e(J,g2o),e(J,Zh),e(Zh,dde),e(dde,h2o),e(Zh,p2o),e(Zh,fq),e(fq,_2o),e(Zh,u2o),e(J,b2o),e(J,ep),e(ep,cde),e(cde,v2o),e(ep,F2o),e(ep,mq),e(mq,T2o),e(ep,M2o),e(J,E2o),e(J,op),e(op,fde),e(fde,C2o),e(op,w2o),e(op,gq),e(gq,A2o),e(op,L2o),e(J,y2o),e(J,rp),e(rp,mde),e(mde,x2o),e(rp,$2o),e(rp,hq),e(hq,k2o),e(rp,S2o),e(J,R2o),e(J,tp),e(tp,gde),e(gde,P2o),e(tp,B2o),e(tp,pq),e(pq,I2o),e(tp,N2o),e(J,q2o),e(J,ap),e(ap,hde),e(hde,j2o),e(ap,D2o),e(ap,_q),e(_q,G2o),e(ap,O2o),e(J,V2o),e(J,np),e(np,pde),e(pde,X2o),e(np,z2o),e(np,uq),e(uq,Q2o),e(np,W2o),e(J,H2o),e(J,sp),e(sp,_de),e(_de,U2o),e(sp,J2o),e(sp,bq),e(bq,Y2o),e(sp,K2o),e(J,Z2o),e(J,lp),e(lp,ude),e(ude,ebo),e(lp,obo),e(lp,vq),e(vq,rbo),e(lp,tbo),e(J,abo),e(J,ip),e(ip,bde),e(bde,nbo),e(ip,sbo),e(ip,Fq),e(Fq,lbo),e(ip,ibo),e(J,dbo),e(J,dp),e(dp,vde),e(vde,cbo),e(dp,fbo),e(dp,Tq),e(Tq,mbo),e(dp,gbo),e(J,hbo),e(J,cp),e(cp,Fde),e(Fde,pbo),e(cp,_bo),e(cp,Mq),e(Mq,ubo),e(cp,bbo),e(J,vbo),e(J,fp),e(fp,Tde),e(Tde,Fbo),e(fp,Tbo),e(fp,Eq),e(Eq,Mbo),e(fp,Ebo),e(J,Cbo),e(J,mp),e(mp,Mde),e(Mde,wbo),e(mp,Abo),e(mp,Cq),e(Cq,Lbo),e(mp,ybo),e(J,xbo),e(J,gp),e(gp,Ede),e(Ede,$bo),e(gp,kbo),e(gp,wq),e(wq,Sbo),e(gp,Rbo),e(J,Pbo),e(J,hp),e(hp,Cde),e(Cde,Bbo),e(hp,Ibo),e(hp,Aq),e(Aq,Nbo),e(hp,qbo),e(J,jbo),e(J,pp),e(pp,wde),e(wde,Dbo),e(pp,Gbo),e(pp,Lq),e(Lq,Obo),e(pp,Vbo),e(J,Xbo),e(J,_p),e(_p,Ade),e(Ade,zbo),e(_p,Qbo),e(_p,yq),e(yq,Wbo),e(_p,Hbo),e(J,Ubo),e(J,up),e(up,Lde),e(Lde,Jbo),e(up,Ybo),e(up,xq),e(xq,Kbo),e(up,Zbo),e(He,evo),M(bp,He,null),e(He,ovo),M(vp,He,null),e(Lo,rvo),e(Lo,Fp),M(CL,Fp,null),e(Fp,tvo),e(Fp,yde),e(yde,avo),b(f,iXe,u),b(f,qi,u),e(qi,Tp),e(Tp,xde),M(wL,xde,null),e(qi,nvo),e(qi,$de),e($de,svo),b(f,dXe,u),b(f,yo,u),M(AL,yo,null),e(yo,lvo),e(yo,LL),e(LL,ivo),e(LL,$q),e($q,dvo),e(LL,cvo),e(yo,fvo),e(yo,yL),e(yL,mvo),e(yL,kde),e(kde,gvo),e(yL,hvo),e(yo,pvo),e(yo,Ue),M(xL,Ue,null),e(Ue,_vo),e(Ue,Sde),e(Sde,uvo),e(Ue,bvo),e(Ue,ji),e(ji,vvo),e(ji,Rde),e(Rde,Fvo),e(ji,Tvo),e(ji,Pde),e(Pde,Mvo),e(ji,Evo),e(Ue,Cvo),e(Ue,he),e(he,Mp),e(Mp,Bde),e(Bde,wvo),e(Mp,Avo),e(Mp,kq),e(kq,Lvo),e(Mp,yvo),e(he,xvo),e(he,Ep),e(Ep,Ide),e(Ide,$vo),e(Ep,kvo),e(Ep,Nde),e(Nde,Svo),e(Ep,Rvo),e(he,Pvo),e(he,Cp),e(Cp,qde),e(qde,Bvo),e(Cp,Ivo),e(Cp,Sq),e(Sq,Nvo),e(Cp,qvo),e(he,jvo),e(he,wp),e(wp,jde),e(jde,Dvo),e(wp,Gvo),e(wp,Rq),e(Rq,Ovo),e(wp,Vvo),e(he,Xvo),e(he,Ap),e(Ap,Dde),e(Dde,zvo),e(Ap,Qvo),e(Ap,Pq),e(Pq,Wvo),e(Ap,Hvo),e(he,Uvo),e(he,Lp),e(Lp,Gde),e(Gde,Jvo),e(Lp,Yvo),e(Lp,Bq),e(Bq,Kvo),e(Lp,Zvo),e(he,eFo),e(he,yp),e(yp,Ode),e(Ode,oFo),e(yp,rFo),e(yp,Iq),e(Iq,tFo),e(yp,aFo),e(he,nFo),e(he,xp),e(xp,Vde),e(Vde,sFo),e(xp,lFo),e(xp,Nq),e(Nq,iFo),e(xp,dFo),e(he,cFo),e(he,$p),e($p,Xde),e(Xde,fFo),e($p,mFo),e($p,qq),e(qq,gFo),e($p,hFo),e(he,pFo),e(he,kp),e(kp,zde),e(zde,_Fo),e(kp,uFo),e(kp,jq),e(jq,bFo),e(kp,vFo),e(he,FFo),e(he,Sp),e(Sp,Qde),e(Qde,TFo),e(Sp,MFo),e(Sp,Dq),e(Dq,EFo),e(Sp,CFo),e(he,wFo),e(he,Rp),e(Rp,Wde),e(Wde,AFo),e(Rp,LFo),e(Rp,Gq),e(Gq,yFo),e(Rp,xFo),e(he,$Fo),e(he,Pp),e(Pp,Hde),e(Hde,kFo),e(Pp,SFo),e(Pp,Oq),e(Oq,RFo),e(Pp,PFo),e(he,BFo),e(he,Bp),e(Bp,Ude),e(Ude,IFo),e(Bp,NFo),e(Bp,Vq),e(Vq,qFo),e(Bp,jFo),e(he,DFo),e(he,Ip),e(Ip,Jde),e(Jde,GFo),e(Ip,OFo),e(Ip,Xq),e(Xq,VFo),e(Ip,XFo),e(he,zFo),e(he,Np),e(Np,Yde),e(Yde,QFo),e(Np,WFo),e(Np,zq),e(zq,HFo),e(Np,UFo),e(he,JFo),e(he,qp),e(qp,Kde),e(Kde,YFo),e(qp,KFo),e(qp,Qq),e(Qq,ZFo),e(qp,eTo),e(he,oTo),e(he,jp),e(jp,Zde),e(Zde,rTo),e(jp,tTo),e(jp,Wq),e(Wq,aTo),e(jp,nTo),e(Ue,sTo),M(Dp,Ue,null),e(Ue,lTo),M(Gp,Ue,null),e(yo,iTo),e(yo,Op),M($L,Op,null),e(Op,dTo),e(Op,ece),e(ece,cTo),b(f,cXe,u),b(f,Di,u),e(Di,Vp),e(Vp,oce),M(kL,oce,null),e(Di,fTo),e(Di,rce),e(rce,mTo),b(f,fXe,u),b(f,xo,u),M(SL,xo,null),e(xo,gTo),e(xo,Gi),e(Gi,hTo),e(Gi,Hq),e(Hq,pTo),e(Gi,_To),e(Gi,Uq),e(Uq,uTo),e(Gi,bTo),e(xo,vTo),e(xo,RL),e(RL,FTo),e(RL,tce),e(tce,TTo),e(RL,MTo),e(xo,ETo),e(xo,lt),M(PL,lt,null),e(lt,CTo),e(lt,ace),e(ace,wTo),e(lt,ATo),e(lt,Oi),e(Oi,LTo),e(Oi,nce),e(nce,yTo),e(Oi,xTo),e(Oi,Jq),e(Jq,$To),e(Oi,kTo),e(lt,STo),M(Xp,lt,null),e(xo,RTo),e(xo,Je),M(BL,Je,null),e(Je,PTo),e(Je,sce),e(sce,BTo),e(Je,ITo),e(Je,Ba),e(Ba,NTo),e(Ba,lce),e(lce,qTo),e(Ba,jTo),e(Ba,ice),e(ice,DTo),e(Ba,GTo),e(Ba,dce),e(dce,OTo),e(Ba,VTo),e(Je,XTo),e(Je,y),e(y,zp),e(zp,cce),e(cce,zTo),e(zp,QTo),e(zp,Yq),e(Yq,WTo),e(zp,HTo),e(y,UTo),e(y,Qp),e(Qp,fce),e(fce,JTo),e(Qp,YTo),e(Qp,Kq),e(Kq,KTo),e(Qp,ZTo),e(y,e7o),e(y,Wp),e(Wp,mce),e(mce,o7o),e(Wp,r7o),e(Wp,Zq),e(Zq,t7o),e(Wp,a7o),e(y,n7o),e(y,Hp),e(Hp,gce),e(gce,s7o),e(Hp,l7o),e(Hp,ej),e(ej,i7o),e(Hp,d7o),e(y,c7o),e(y,Up),e(Up,hce),e(hce,f7o),e(Up,m7o),e(Up,oj),e(oj,g7o),e(Up,h7o),e(y,p7o),e(y,Jp),e(Jp,pce),e(pce,_7o),e(Jp,u7o),e(Jp,rj),e(rj,b7o),e(Jp,v7o),e(y,F7o),e(y,Yp),e(Yp,_ce),e(_ce,T7o),e(Yp,M7o),e(Yp,tj),e(tj,E7o),e(Yp,C7o),e(y,w7o),e(y,Kp),e(Kp,uce),e(uce,A7o),e(Kp,L7o),e(Kp,aj),e(aj,y7o),e(Kp,x7o),e(y,$7o),e(y,Zp),e(Zp,bce),e(bce,k7o),e(Zp,S7o),e(Zp,nj),e(nj,R7o),e(Zp,P7o),e(y,B7o),e(y,e_),e(e_,vce),e(vce,I7o),e(e_,N7o),e(e_,sj),e(sj,q7o),e(e_,j7o),e(y,D7o),e(y,o_),e(o_,Fce),e(Fce,G7o),e(o_,O7o),e(o_,lj),e(lj,V7o),e(o_,X7o),e(y,z7o),e(y,r_),e(r_,Tce),e(Tce,Q7o),e(r_,W7o),e(r_,ij),e(ij,H7o),e(r_,U7o),e(y,J7o),e(y,t_),e(t_,Mce),e(Mce,Y7o),e(t_,K7o),e(t_,dj),e(dj,Z7o),e(t_,e8o),e(y,o8o),e(y,a_),e(a_,Ece),e(Ece,r8o),e(a_,t8o),e(a_,cj),e(cj,a8o),e(a_,n8o),e(y,s8o),e(y,n_),e(n_,Cce),e(Cce,l8o),e(n_,i8o),e(n_,fj),e(fj,d8o),e(n_,c8o),e(y,f8o),e(y,s_),e(s_,wce),e(wce,m8o),e(s_,g8o),e(s_,mj),e(mj,h8o),e(s_,p8o),e(y,_8o),e(y,l_),e(l_,Ace),e(Ace,u8o),e(l_,b8o),e(l_,gj),e(gj,v8o),e(l_,F8o),e(y,T8o),e(y,i_),e(i_,Lce),e(Lce,M8o),e(i_,E8o),e(i_,hj),e(hj,C8o),e(i_,w8o),e(y,A8o),e(y,d_),e(d_,yce),e(yce,L8o),e(d_,y8o),e(d_,pj),e(pj,x8o),e(d_,$8o),e(y,k8o),e(y,c_),e(c_,xce),e(xce,S8o),e(c_,R8o),e(c_,_j),e(_j,P8o),e(c_,B8o),e(y,I8o),e(y,f_),e(f_,$ce),e($ce,N8o),e(f_,q8o),e(f_,uj),e(uj,j8o),e(f_,D8o),e(y,G8o),e(y,m_),e(m_,kce),e(kce,O8o),e(m_,V8o),e(m_,bj),e(bj,X8o),e(m_,z8o),e(y,Q8o),e(y,g_),e(g_,Sce),e(Sce,W8o),e(g_,H8o),e(g_,vj),e(vj,U8o),e(g_,J8o),e(y,Y8o),e(y,h_),e(h_,Rce),e(Rce,K8o),e(h_,Z8o),e(h_,Fj),e(Fj,eMo),e(h_,oMo),e(y,rMo),e(y,p_),e(p_,Pce),e(Pce,tMo),e(p_,aMo),e(p_,Tj),e(Tj,nMo),e(p_,sMo),e(y,lMo),e(y,__),e(__,Bce),e(Bce,iMo),e(__,dMo),e(__,Mj),e(Mj,cMo),e(__,fMo),e(y,mMo),e(y,u_),e(u_,Ice),e(Ice,gMo),e(u_,hMo),e(u_,Ej),e(Ej,pMo),e(u_,_Mo),e(y,uMo),e(y,b_),e(b_,Nce),e(Nce,bMo),e(b_,vMo),e(b_,Cj),e(Cj,FMo),e(b_,TMo),e(y,MMo),e(y,v_),e(v_,qce),e(qce,EMo),e(v_,CMo),e(v_,wj),e(wj,wMo),e(v_,AMo),e(y,LMo),e(y,F_),e(F_,jce),e(jce,yMo),e(F_,xMo),e(F_,Aj),e(Aj,$Mo),e(F_,kMo),e(y,SMo),e(y,T_),e(T_,Dce),e(Dce,RMo),e(T_,PMo),e(T_,Lj),e(Lj,BMo),e(T_,IMo),e(y,NMo),e(y,M_),e(M_,Gce),e(Gce,qMo),e(M_,jMo),e(M_,yj),e(yj,DMo),e(M_,GMo),e(y,OMo),e(y,E_),e(E_,Oce),e(Oce,VMo),e(E_,XMo),e(E_,xj),e(xj,zMo),e(E_,QMo),e(y,WMo),e(y,C_),e(C_,Vce),e(Vce,HMo),e(C_,UMo),e(C_,$j),e($j,JMo),e(C_,YMo),e(y,KMo),e(y,w_),e(w_,Xce),e(Xce,ZMo),e(w_,e4o),e(w_,kj),e(kj,o4o),e(w_,r4o),e(y,t4o),e(y,Qs),e(Qs,zce),e(zce,a4o),e(Qs,n4o),e(Qs,Sj),e(Sj,s4o),e(Qs,l4o),e(Qs,Rj),e(Rj,i4o),e(Qs,d4o),e(y,c4o),e(y,A_),e(A_,Qce),e(Qce,f4o),e(A_,m4o),e(A_,Pj),e(Pj,g4o),e(A_,h4o),e(y,p4o),e(y,L_),e(L_,Wce),e(Wce,_4o),e(L_,u4o),e(L_,Bj),e(Bj,b4o),e(L_,v4o),e(y,F4o),e(y,y_),e(y_,Hce),e(Hce,T4o),e(y_,M4o),e(y_,Ij),e(Ij,E4o),e(y_,C4o),e(y,w4o),e(y,x_),e(x_,Uce),e(Uce,A4o),e(x_,L4o),e(x_,Nj),e(Nj,y4o),e(x_,x4o),e(y,$4o),e(y,$_),e($_,Jce),e(Jce,k4o),e($_,S4o),e($_,qj),e(qj,R4o),e($_,P4o),e(y,B4o),e(y,k_),e(k_,Yce),e(Yce,I4o),e(k_,N4o),e(k_,jj),e(jj,q4o),e(k_,j4o),e(y,D4o),e(y,S_),e(S_,Kce),e(Kce,G4o),e(S_,O4o),e(S_,Dj),e(Dj,V4o),e(S_,X4o),e(y,z4o),e(y,R_),e(R_,Zce),e(Zce,Q4o),e(R_,W4o),e(R_,Gj),e(Gj,H4o),e(R_,U4o),e(y,J4o),e(y,P_),e(P_,efe),e(efe,Y4o),e(P_,K4o),e(P_,Oj),e(Oj,Z4o),e(P_,eEo),e(y,oEo),e(y,B_),e(B_,ofe),e(ofe,rEo),e(B_,tEo),e(B_,Vj),e(Vj,aEo),e(B_,nEo),e(y,sEo),e(y,I_),e(I_,rfe),e(rfe,lEo),e(I_,iEo),e(I_,Xj),e(Xj,dEo),e(I_,cEo),e(y,fEo),e(y,N_),e(N_,tfe),e(tfe,mEo),e(N_,gEo),e(N_,zj),e(zj,hEo),e(N_,pEo),e(y,_Eo),e(y,q_),e(q_,afe),e(afe,uEo),e(q_,bEo),e(q_,Qj),e(Qj,vEo),e(q_,FEo),e(y,TEo),e(y,j_),e(j_,nfe),e(nfe,MEo),e(j_,EEo),e(j_,Wj),e(Wj,CEo),e(j_,wEo),e(y,AEo),e(y,D_),e(D_,sfe),e(sfe,LEo),e(D_,yEo),e(D_,Hj),e(Hj,xEo),e(D_,$Eo),e(y,kEo),e(y,G_),e(G_,lfe),e(lfe,SEo),e(G_,REo),e(G_,Uj),e(Uj,PEo),e(G_,BEo),e(y,IEo),e(y,O_),e(O_,ife),e(ife,NEo),e(O_,qEo),e(O_,Jj),e(Jj,jEo),e(O_,DEo),e(y,GEo),e(y,V_),e(V_,dfe),e(dfe,OEo),e(V_,VEo),e(V_,Yj),e(Yj,XEo),e(V_,zEo),e(y,QEo),e(y,X_),e(X_,cfe),e(cfe,WEo),e(X_,HEo),e(X_,Kj),e(Kj,UEo),e(X_,JEo),e(y,YEo),e(y,z_),e(z_,ffe),e(ffe,KEo),e(z_,ZEo),e(z_,Zj),e(Zj,eCo),e(z_,oCo),e(y,rCo),e(y,Q_),e(Q_,mfe),e(mfe,tCo),e(Q_,aCo),e(Q_,eD),e(eD,nCo),e(Q_,sCo),e(y,lCo),e(y,W_),e(W_,gfe),e(gfe,iCo),e(W_,dCo),e(W_,oD),e(oD,cCo),e(W_,fCo),e(y,mCo),e(y,H_),e(H_,hfe),e(hfe,gCo),e(H_,hCo),e(H_,rD),e(rD,pCo),e(H_,_Co),e(y,uCo),e(y,U_),e(U_,pfe),e(pfe,bCo),e(U_,vCo),e(U_,tD),e(tD,FCo),e(U_,TCo),e(y,MCo),e(y,J_),e(J_,_fe),e(_fe,ECo),e(J_,CCo),e(J_,aD),e(aD,wCo),e(J_,ACo),e(y,LCo),e(y,Y_),e(Y_,ufe),e(ufe,yCo),e(Y_,xCo),e(Y_,nD),e(nD,$Co),e(Y_,kCo),e(y,SCo),e(y,K_),e(K_,bfe),e(bfe,RCo),e(K_,PCo),e(K_,sD),e(sD,BCo),e(K_,ICo),e(y,NCo),e(y,Z_),e(Z_,vfe),e(vfe,qCo),e(Z_,jCo),e(Z_,lD),e(lD,DCo),e(Z_,GCo),e(y,OCo),e(y,eu),e(eu,Ffe),e(Ffe,VCo),e(eu,XCo),e(eu,iD),e(iD,zCo),e(eu,QCo),e(y,WCo),e(y,ou),e(ou,Tfe),e(Tfe,HCo),e(ou,UCo),e(ou,dD),e(dD,JCo),e(ou,YCo),e(y,KCo),e(y,ru),e(ru,Mfe),e(Mfe,ZCo),e(ru,e3o),e(ru,cD),e(cD,o3o),e(ru,r3o),e(y,t3o),e(y,tu),e(tu,Efe),e(Efe,a3o),e(tu,n3o),e(tu,fD),e(fD,s3o),e(tu,l3o),e(y,i3o),e(y,au),e(au,Cfe),e(Cfe,d3o),e(au,c3o),e(au,mD),e(mD,f3o),e(au,m3o),e(y,g3o),e(y,nu),e(nu,wfe),e(wfe,h3o),e(nu,p3o),e(nu,gD),e(gD,_3o),e(nu,u3o),e(y,b3o),e(y,su),e(su,Afe),e(Afe,v3o),e(su,F3o),e(su,hD),e(hD,T3o),e(su,M3o),e(y,E3o),e(y,lu),e(lu,Lfe),e(Lfe,C3o),e(lu,w3o),e(lu,pD),e(pD,A3o),e(lu,L3o),e(y,y3o),e(y,iu),e(iu,yfe),e(yfe,x3o),e(iu,$3o),e(iu,_D),e(_D,k3o),e(iu,S3o),e(y,R3o),e(y,du),e(du,xfe),e(xfe,P3o),e(du,B3o),e(du,uD),e(uD,I3o),e(du,N3o),e(y,q3o),e(y,cu),e(cu,$fe),e($fe,j3o),e(cu,D3o),e(cu,bD),e(bD,G3o),e(cu,O3o),e(y,V3o),e(y,fu),e(fu,kfe),e(kfe,X3o),e(fu,z3o),e(fu,vD),e(vD,Q3o),e(fu,W3o),e(y,H3o),e(y,mu),e(mu,Sfe),e(Sfe,U3o),e(mu,J3o),e(mu,FD),e(FD,Y3o),e(mu,K3o),e(y,Z3o),e(y,gu),e(gu,Rfe),e(Rfe,e5o),e(gu,o5o),e(gu,TD),e(TD,r5o),e(gu,t5o),e(y,a5o),e(y,hu),e(hu,Pfe),e(Pfe,n5o),e(hu,s5o),e(hu,MD),e(MD,l5o),e(hu,i5o),e(y,d5o),e(y,pu),e(pu,Bfe),e(Bfe,c5o),e(pu,f5o),e(pu,ED),e(ED,m5o),e(pu,g5o),e(y,h5o),e(y,_u),e(_u,Ife),e(Ife,p5o),e(_u,_5o),e(_u,CD),e(CD,u5o),e(_u,b5o),e(y,v5o),e(y,uu),e(uu,Nfe),e(Nfe,F5o),e(uu,T5o),e(uu,wD),e(wD,M5o),e(uu,E5o),e(y,C5o),e(y,bu),e(bu,qfe),e(qfe,w5o),e(bu,A5o),e(bu,AD),e(AD,L5o),e(bu,y5o),e(y,x5o),e(y,vu),e(vu,jfe),e(jfe,$5o),e(vu,k5o),e(vu,LD),e(LD,S5o),e(vu,R5o),e(y,P5o),e(y,Fu),e(Fu,Dfe),e(Dfe,B5o),e(Fu,I5o),e(Fu,yD),e(yD,N5o),e(Fu,q5o),e(y,j5o),e(y,Tu),e(Tu,Gfe),e(Gfe,D5o),e(Tu,G5o),e(Tu,xD),e(xD,O5o),e(Tu,V5o),e(y,X5o),e(y,Mu),e(Mu,Ofe),e(Ofe,z5o),e(Mu,Q5o),e(Mu,$D),e($D,W5o),e(Mu,H5o),e(y,U5o),e(y,Eu),e(Eu,Vfe),e(Vfe,J5o),e(Eu,Y5o),e(Eu,kD),e(kD,K5o),e(Eu,Z5o),e(y,e0o),e(y,Cu),e(Cu,Xfe),e(Xfe,o0o),e(Cu,r0o),e(Cu,SD),e(SD,t0o),e(Cu,a0o),e(y,n0o),e(y,wu),e(wu,zfe),e(zfe,s0o),e(wu,l0o),e(wu,RD),e(RD,i0o),e(wu,d0o),e(y,c0o),e(y,Au),e(Au,Qfe),e(Qfe,f0o),e(Au,m0o),e(Au,PD),e(PD,g0o),e(Au,h0o),e(y,p0o),e(y,Lu),e(Lu,Wfe),e(Wfe,_0o),e(Lu,u0o),e(Lu,BD),e(BD,b0o),e(Lu,v0o),e(y,F0o),e(y,yu),e(yu,Hfe),e(Hfe,T0o),e(yu,M0o),e(yu,ID),e(ID,E0o),e(yu,C0o),e(y,w0o),e(y,xu),e(xu,Ufe),e(Ufe,A0o),e(xu,L0o),e(xu,ND),e(ND,y0o),e(xu,x0o),e(y,$0o),e(y,$u),e($u,Jfe),e(Jfe,k0o),e($u,S0o),e($u,qD),e(qD,R0o),e($u,P0o),e(y,B0o),e(y,ku),e(ku,Yfe),e(Yfe,I0o),e(ku,N0o),e(ku,jD),e(jD,q0o),e(ku,j0o),e(y,D0o),e(y,Su),e(Su,Kfe),e(Kfe,G0o),e(Su,O0o),e(Su,DD),e(DD,V0o),e(Su,X0o),e(y,z0o),e(y,Ru),e(Ru,Zfe),e(Zfe,Q0o),e(Ru,W0o),e(Ru,GD),e(GD,H0o),e(Ru,U0o),e(y,J0o),e(y,Pu),e(Pu,eme),e(eme,Y0o),e(Pu,K0o),e(Pu,OD),e(OD,Z0o),e(Pu,ewo),e(y,owo),e(y,Bu),e(Bu,ome),e(ome,rwo),e(Bu,two),e(Bu,VD),e(VD,awo),e(Bu,nwo),e(y,swo),e(y,Iu),e(Iu,rme),e(rme,lwo),e(Iu,iwo),e(Iu,XD),e(XD,dwo),e(Iu,cwo),e(y,fwo),e(y,Nu),e(Nu,tme),e(tme,mwo),e(Nu,gwo),e(Nu,zD),e(zD,hwo),e(Nu,pwo),e(y,_wo),e(y,qu),e(qu,ame),e(ame,uwo),e(qu,bwo),e(qu,QD),e(QD,vwo),e(qu,Fwo),e(y,Two),e(y,ju),e(ju,nme),e(nme,Mwo),e(ju,Ewo),e(ju,WD),e(WD,Cwo),e(ju,wwo),e(y,Awo),e(y,Du),e(Du,sme),e(sme,Lwo),e(Du,ywo),e(Du,HD),e(HD,xwo),e(Du,$wo),e(y,kwo),e(y,Gu),e(Gu,lme),e(lme,Swo),e(Gu,Rwo),e(Gu,UD),e(UD,Pwo),e(Gu,Bwo),e(y,Iwo),e(y,Ou),e(Ou,ime),e(ime,Nwo),e(Ou,qwo),e(Ou,JD),e(JD,jwo),e(Ou,Dwo),e(y,Gwo),e(y,Vu),e(Vu,dme),e(dme,Owo),e(Vu,Vwo),e(Vu,YD),e(YD,Xwo),e(Vu,zwo),e(y,Qwo),e(y,Xu),e(Xu,cme),e(cme,Wwo),e(Xu,Hwo),e(Xu,KD),e(KD,Uwo),e(Xu,Jwo),e(y,Ywo),e(y,zu),e(zu,fme),e(fme,Kwo),e(zu,Zwo),e(zu,ZD),e(ZD,eAo),e(zu,oAo),e(y,rAo),e(y,Qu),e(Qu,mme),e(mme,tAo),e(Qu,aAo),e(Qu,eG),e(eG,nAo),e(Qu,sAo),e(y,lAo),e(y,Wu),e(Wu,gme),e(gme,iAo),e(Wu,dAo),e(Wu,oG),e(oG,cAo),e(Wu,fAo),e(Je,mAo),e(Je,Hu),e(Hu,gAo),e(Hu,hme),e(hme,hAo),e(Hu,pAo),e(Hu,pme),e(pme,_Ao),e(Je,uAo),M(Uu,Je,null),b(f,mXe,u),b(f,Vi,u),e(Vi,Ju),e(Ju,_me),M(IL,_me,null),e(Vi,bAo),e(Vi,ume),e(ume,vAo),b(f,gXe,u),b(f,$o,u),M(NL,$o,null),e($o,FAo),e($o,Xi),e(Xi,TAo),e(Xi,rG),e(rG,MAo),e(Xi,EAo),e(Xi,tG),e(tG,CAo),e(Xi,wAo),e($o,AAo),e($o,qL),e(qL,LAo),e(qL,bme),e(bme,yAo),e(qL,xAo),e($o,$Ao),e($o,it),M(jL,it,null),e(it,kAo),e(it,vme),e(vme,SAo),e(it,RAo),e(it,zi),e(zi,PAo),e(zi,Fme),e(Fme,BAo),e(zi,IAo),e(zi,aG),e(aG,NAo),e(zi,qAo),e(it,jAo),M(Yu,it,null),e($o,DAo),e($o,Ye),M(DL,Ye,null),e(Ye,GAo),e(Ye,Tme),e(Tme,OAo),e(Ye,VAo),e(Ye,Ia),e(Ia,XAo),e(Ia,Mme),e(Mme,zAo),e(Ia,QAo),e(Ia,Eme),e(Eme,WAo),e(Ia,HAo),e(Ia,Cme),e(Cme,UAo),e(Ia,JAo),e(Ye,YAo),e(Ye,G),e(G,Ku),e(Ku,wme),e(wme,KAo),e(Ku,ZAo),e(Ku,nG),e(nG,e6o),e(Ku,o6o),e(G,r6o),e(G,Zu),e(Zu,Ame),e(Ame,t6o),e(Zu,a6o),e(Zu,sG),e(sG,n6o),e(Zu,s6o),e(G,l6o),e(G,e1),e(e1,Lme),e(Lme,i6o),e(e1,d6o),e(e1,lG),e(lG,c6o),e(e1,f6o),e(G,m6o),e(G,o1),e(o1,yme),e(yme,g6o),e(o1,h6o),e(o1,iG),e(iG,p6o),e(o1,_6o),e(G,u6o),e(G,r1),e(r1,xme),e(xme,b6o),e(r1,v6o),e(r1,dG),e(dG,F6o),e(r1,T6o),e(G,M6o),e(G,t1),e(t1,$me),e($me,E6o),e(t1,C6o),e(t1,cG),e(cG,w6o),e(t1,A6o),e(G,L6o),e(G,a1),e(a1,kme),e(kme,y6o),e(a1,x6o),e(a1,fG),e(fG,$6o),e(a1,k6o),e(G,S6o),e(G,n1),e(n1,Sme),e(Sme,R6o),e(n1,P6o),e(n1,mG),e(mG,B6o),e(n1,I6o),e(G,N6o),e(G,s1),e(s1,Rme),e(Rme,q6o),e(s1,j6o),e(s1,gG),e(gG,D6o),e(s1,G6o),e(G,O6o),e(G,l1),e(l1,Pme),e(Pme,V6o),e(l1,X6o),e(l1,hG),e(hG,z6o),e(l1,Q6o),e(G,W6o),e(G,i1),e(i1,Bme),e(Bme,H6o),e(i1,U6o),e(i1,pG),e(pG,J6o),e(i1,Y6o),e(G,K6o),e(G,d1),e(d1,Ime),e(Ime,Z6o),e(d1,eLo),e(d1,_G),e(_G,oLo),e(d1,rLo),e(G,tLo),e(G,c1),e(c1,Nme),e(Nme,aLo),e(c1,nLo),e(c1,uG),e(uG,sLo),e(c1,lLo),e(G,iLo),e(G,f1),e(f1,qme),e(qme,dLo),e(f1,cLo),e(f1,bG),e(bG,fLo),e(f1,mLo),e(G,gLo),e(G,m1),e(m1,jme),e(jme,hLo),e(m1,pLo),e(m1,vG),e(vG,_Lo),e(m1,uLo),e(G,bLo),e(G,g1),e(g1,Dme),e(Dme,vLo),e(g1,FLo),e(g1,FG),e(FG,TLo),e(g1,MLo),e(G,ELo),e(G,h1),e(h1,Gme),e(Gme,CLo),e(h1,wLo),e(h1,TG),e(TG,ALo),e(h1,LLo),e(G,yLo),e(G,p1),e(p1,Ome),e(Ome,xLo),e(p1,$Lo),e(p1,MG),e(MG,kLo),e(p1,SLo),e(G,RLo),e(G,_1),e(_1,Vme),e(Vme,PLo),e(_1,BLo),e(_1,EG),e(EG,ILo),e(_1,NLo),e(G,qLo),e(G,u1),e(u1,Xme),e(Xme,jLo),e(u1,DLo),e(u1,CG),e(CG,GLo),e(u1,OLo),e(G,VLo),e(G,b1),e(b1,zme),e(zme,XLo),e(b1,zLo),e(b1,wG),e(wG,QLo),e(b1,WLo),e(G,HLo),e(G,v1),e(v1,Qme),e(Qme,ULo),e(v1,JLo),e(v1,AG),e(AG,YLo),e(v1,KLo),e(G,ZLo),e(G,F1),e(F1,Wme),e(Wme,eyo),e(F1,oyo),e(F1,LG),e(LG,ryo),e(F1,tyo),e(G,ayo),e(G,T1),e(T1,Hme),e(Hme,nyo),e(T1,syo),e(T1,yG),e(yG,lyo),e(T1,iyo),e(G,dyo),e(G,M1),e(M1,Ume),e(Ume,cyo),e(M1,fyo),e(M1,xG),e(xG,myo),e(M1,gyo),e(G,hyo),e(G,E1),e(E1,Jme),e(Jme,pyo),e(E1,_yo),e(E1,$G),e($G,uyo),e(E1,byo),e(G,vyo),e(G,C1),e(C1,Yme),e(Yme,Fyo),e(C1,Tyo),e(C1,kG),e(kG,Myo),e(C1,Eyo),e(G,Cyo),e(G,w1),e(w1,Kme),e(Kme,wyo),e(w1,Ayo),e(w1,SG),e(SG,Lyo),e(w1,yyo),e(G,xyo),e(G,A1),e(A1,Zme),e(Zme,$yo),e(A1,kyo),e(A1,RG),e(RG,Syo),e(A1,Ryo),e(G,Pyo),e(G,L1),e(L1,ege),e(ege,Byo),e(L1,Iyo),e(L1,PG),e(PG,Nyo),e(L1,qyo),e(G,jyo),e(G,y1),e(y1,oge),e(oge,Dyo),e(y1,Gyo),e(y1,BG),e(BG,Oyo),e(y1,Vyo),e(G,Xyo),e(G,x1),e(x1,rge),e(rge,zyo),e(x1,Qyo),e(x1,IG),e(IG,Wyo),e(x1,Hyo),e(G,Uyo),e(G,$1),e($1,tge),e(tge,Jyo),e($1,Yyo),e($1,NG),e(NG,Kyo),e($1,Zyo),e(G,e9o),e(G,k1),e(k1,age),e(age,o9o),e(k1,r9o),e(k1,qG),e(qG,t9o),e(k1,a9o),e(G,n9o),e(G,S1),e(S1,nge),e(nge,s9o),e(S1,l9o),e(S1,jG),e(jG,i9o),e(S1,d9o),e(G,c9o),e(G,R1),e(R1,sge),e(sge,f9o),e(R1,m9o),e(R1,DG),e(DG,g9o),e(R1,h9o),e(G,p9o),e(G,P1),e(P1,lge),e(lge,_9o),e(P1,u9o),e(P1,GG),e(GG,b9o),e(P1,v9o),e(G,F9o),e(G,B1),e(B1,ige),e(ige,T9o),e(B1,M9o),e(B1,OG),e(OG,E9o),e(B1,C9o),e(G,w9o),e(G,I1),e(I1,dge),e(dge,A9o),e(I1,L9o),e(I1,VG),e(VG,y9o),e(I1,x9o),e(G,$9o),e(G,N1),e(N1,cge),e(cge,k9o),e(N1,S9o),e(N1,XG),e(XG,R9o),e(N1,P9o),e(G,B9o),e(G,q1),e(q1,fge),e(fge,I9o),e(q1,N9o),e(q1,zG),e(zG,q9o),e(q1,j9o),e(G,D9o),e(G,j1),e(j1,mge),e(mge,G9o),e(j1,O9o),e(j1,QG),e(QG,V9o),e(j1,X9o),e(G,z9o),e(G,D1),e(D1,gge),e(gge,Q9o),e(D1,W9o),e(D1,WG),e(WG,H9o),e(D1,U9o),e(G,J9o),e(G,G1),e(G1,hge),e(hge,Y9o),e(G1,K9o),e(G1,HG),e(HG,Z9o),e(G1,exo),e(G,oxo),e(G,O1),e(O1,pge),e(pge,rxo),e(O1,txo),e(O1,UG),e(UG,axo),e(O1,nxo),e(Ye,sxo),e(Ye,V1),e(V1,lxo),e(V1,_ge),e(_ge,ixo),e(V1,dxo),e(V1,uge),e(uge,cxo),e(Ye,fxo),M(X1,Ye,null),b(f,hXe,u),b(f,Qi,u),e(Qi,z1),e(z1,bge),M(GL,bge,null),e(Qi,mxo),e(Qi,vge),e(vge,gxo),b(f,pXe,u),b(f,ko,u),M(OL,ko,null),e(ko,hxo),e(ko,Wi),e(Wi,pxo),e(Wi,JG),e(JG,_xo),e(Wi,uxo),e(Wi,YG),e(YG,bxo),e(Wi,vxo),e(ko,Fxo),e(ko,VL),e(VL,Txo),e(VL,Fge),e(Fge,Mxo),e(VL,Exo),e(ko,Cxo),e(ko,dt),M(XL,dt,null),e(dt,wxo),e(dt,Tge),e(Tge,Axo),e(dt,Lxo),e(dt,Hi),e(Hi,yxo),e(Hi,Mge),e(Mge,xxo),e(Hi,$xo),e(Hi,KG),e(KG,kxo),e(Hi,Sxo),e(dt,Rxo),M(Q1,dt,null),e(ko,Pxo),e(ko,Ke),M(zL,Ke,null),e(Ke,Bxo),e(Ke,Ege),e(Ege,Ixo),e(Ke,Nxo),e(Ke,Na),e(Na,qxo),e(Na,Cge),e(Cge,jxo),e(Na,Dxo),e(Na,wge),e(wge,Gxo),e(Na,Oxo),e(Na,Age),e(Age,Vxo),e(Na,Xxo),e(Ke,zxo),e(Ke,z),e(z,W1),e(W1,Lge),e(Lge,Qxo),e(W1,Wxo),e(W1,ZG),e(ZG,Hxo),e(W1,Uxo),e(z,Jxo),e(z,H1),e(H1,yge),e(yge,Yxo),e(H1,Kxo),e(H1,eO),e(eO,Zxo),e(H1,e$o),e(z,o$o),e(z,U1),e(U1,xge),e(xge,r$o),e(U1,t$o),e(U1,oO),e(oO,a$o),e(U1,n$o),e(z,s$o),e(z,J1),e(J1,$ge),e($ge,l$o),e(J1,i$o),e(J1,rO),e(rO,d$o),e(J1,c$o),e(z,f$o),e(z,Y1),e(Y1,kge),e(kge,m$o),e(Y1,g$o),e(Y1,tO),e(tO,h$o),e(Y1,p$o),e(z,_$o),e(z,K1),e(K1,Sge),e(Sge,u$o),e(K1,b$o),e(K1,aO),e(aO,v$o),e(K1,F$o),e(z,T$o),e(z,Z1),e(Z1,Rge),e(Rge,M$o),e(Z1,E$o),e(Z1,nO),e(nO,C$o),e(Z1,w$o),e(z,A$o),e(z,e2),e(e2,Pge),e(Pge,L$o),e(e2,y$o),e(e2,sO),e(sO,x$o),e(e2,$$o),e(z,k$o),e(z,o2),e(o2,Bge),e(Bge,S$o),e(o2,R$o),e(o2,lO),e(lO,P$o),e(o2,B$o),e(z,I$o),e(z,r2),e(r2,Ige),e(Ige,N$o),e(r2,q$o),e(r2,iO),e(iO,j$o),e(r2,D$o),e(z,G$o),e(z,t2),e(t2,Nge),e(Nge,O$o),e(t2,V$o),e(t2,dO),e(dO,X$o),e(t2,z$o),e(z,Q$o),e(z,a2),e(a2,qge),e(qge,W$o),e(a2,H$o),e(a2,cO),e(cO,U$o),e(a2,J$o),e(z,Y$o),e(z,n2),e(n2,jge),e(jge,K$o),e(n2,Z$o),e(n2,fO),e(fO,eko),e(n2,oko),e(z,rko),e(z,s2),e(s2,Dge),e(Dge,tko),e(s2,ako),e(s2,mO),e(mO,nko),e(s2,sko),e(z,lko),e(z,l2),e(l2,Gge),e(Gge,iko),e(l2,dko),e(l2,gO),e(gO,cko),e(l2,fko),e(z,mko),e(z,i2),e(i2,Oge),e(Oge,gko),e(i2,hko),e(i2,hO),e(hO,pko),e(i2,_ko),e(z,uko),e(z,d2),e(d2,Vge),e(Vge,bko),e(d2,vko),e(d2,pO),e(pO,Fko),e(d2,Tko),e(z,Mko),e(z,c2),e(c2,Xge),e(Xge,Eko),e(c2,Cko),e(c2,_O),e(_O,wko),e(c2,Ako),e(z,Lko),e(z,f2),e(f2,zge),e(zge,yko),e(f2,xko),e(f2,uO),e(uO,$ko),e(f2,kko),e(z,Sko),e(z,m2),e(m2,Qge),e(Qge,Rko),e(m2,Pko),e(m2,bO),e(bO,Bko),e(m2,Iko),e(z,Nko),e(z,g2),e(g2,Wge),e(Wge,qko),e(g2,jko),e(g2,vO),e(vO,Dko),e(g2,Gko),e(z,Oko),e(z,h2),e(h2,Hge),e(Hge,Vko),e(h2,Xko),e(h2,FO),e(FO,zko),e(h2,Qko),e(z,Wko),e(z,p2),e(p2,Uge),e(Uge,Hko),e(p2,Uko),e(p2,TO),e(TO,Jko),e(p2,Yko),e(z,Kko),e(z,_2),e(_2,Jge),e(Jge,Zko),e(_2,eSo),e(_2,MO),e(MO,oSo),e(_2,rSo),e(z,tSo),e(z,u2),e(u2,Yge),e(Yge,aSo),e(u2,nSo),e(u2,EO),e(EO,sSo),e(u2,lSo),e(z,iSo),e(z,b2),e(b2,Kge),e(Kge,dSo),e(b2,cSo),e(b2,CO),e(CO,fSo),e(b2,mSo),e(z,gSo),e(z,v2),e(v2,Zge),e(Zge,hSo),e(v2,pSo),e(v2,wO),e(wO,_So),e(v2,uSo),e(z,bSo),e(z,F2),e(F2,ehe),e(ehe,vSo),e(F2,FSo),e(F2,AO),e(AO,TSo),e(F2,MSo),e(z,ESo),e(z,T2),e(T2,ohe),e(ohe,CSo),e(T2,wSo),e(T2,LO),e(LO,ASo),e(T2,LSo),e(z,ySo),e(z,M2),e(M2,rhe),e(rhe,xSo),e(M2,$So),e(M2,yO),e(yO,kSo),e(M2,SSo),e(z,RSo),e(z,E2),e(E2,the),e(the,PSo),e(E2,BSo),e(E2,xO),e(xO,ISo),e(E2,NSo),e(z,qSo),e(z,C2),e(C2,ahe),e(ahe,jSo),e(C2,DSo),e(C2,$O),e($O,GSo),e(C2,OSo),e(z,VSo),e(z,w2),e(w2,nhe),e(nhe,XSo),e(w2,zSo),e(w2,kO),e(kO,QSo),e(w2,WSo),e(z,HSo),e(z,A2),e(A2,she),e(she,USo),e(A2,JSo),e(A2,SO),e(SO,YSo),e(A2,KSo),e(z,ZSo),e(z,L2),e(L2,lhe),e(lhe,eRo),e(L2,oRo),e(L2,RO),e(RO,rRo),e(L2,tRo),e(z,aRo),e(z,y2),e(y2,ihe),e(ihe,nRo),e(y2,sRo),e(y2,PO),e(PO,lRo),e(y2,iRo),e(z,dRo),e(z,x2),e(x2,dhe),e(dhe,cRo),e(x2,fRo),e(x2,BO),e(BO,mRo),e(x2,gRo),e(z,hRo),e(z,$2),e($2,che),e(che,pRo),e($2,_Ro),e($2,IO),e(IO,uRo),e($2,bRo),e(z,vRo),e(z,k2),e(k2,fhe),e(fhe,FRo),e(k2,TRo),e(k2,NO),e(NO,MRo),e(k2,ERo),e(z,CRo),e(z,S2),e(S2,mhe),e(mhe,wRo),e(S2,ARo),e(S2,qO),e(qO,LRo),e(S2,yRo),e(Ke,xRo),e(Ke,R2),e(R2,$Ro),e(R2,ghe),e(ghe,kRo),e(R2,SRo),e(R2,hhe),e(hhe,RRo),e(Ke,PRo),M(P2,Ke,null),b(f,_Xe,u),b(f,Ui,u),e(Ui,B2),e(B2,phe),M(QL,phe,null),e(Ui,BRo),e(Ui,_he),e(_he,IRo),b(f,uXe,u),b(f,So,u),M(WL,So,null),e(So,NRo),e(So,Ji),e(Ji,qRo),e(Ji,jO),e(jO,jRo),e(Ji,DRo),e(Ji,DO),e(DO,GRo),e(Ji,ORo),e(So,VRo),e(So,HL),e(HL,XRo),e(HL,uhe),e(uhe,zRo),e(HL,QRo),e(So,WRo),e(So,ct),M(UL,ct,null),e(ct,HRo),e(ct,bhe),e(bhe,URo),e(ct,JRo),e(ct,Yi),e(Yi,YRo),e(Yi,vhe),e(vhe,KRo),e(Yi,ZRo),e(Yi,GO),e(GO,ePo),e(Yi,oPo),e(ct,rPo),M(I2,ct,null),e(So,tPo),e(So,Ze),M(JL,Ze,null),e(Ze,aPo),e(Ze,Fhe),e(Fhe,nPo),e(Ze,sPo),e(Ze,qa),e(qa,lPo),e(qa,The),e(The,iPo),e(qa,dPo),e(qa,Mhe),e(Mhe,cPo),e(qa,fPo),e(qa,Ehe),e(Ehe,mPo),e(qa,gPo),e(Ze,hPo),e(Ze,W),e(W,N2),e(N2,Che),e(Che,pPo),e(N2,_Po),e(N2,OO),e(OO,uPo),e(N2,bPo),e(W,vPo),e(W,q2),e(q2,whe),e(whe,FPo),e(q2,TPo),e(q2,VO),e(VO,MPo),e(q2,EPo),e(W,CPo),e(W,j2),e(j2,Ahe),e(Ahe,wPo),e(j2,APo),e(j2,XO),e(XO,LPo),e(j2,yPo),e(W,xPo),e(W,D2),e(D2,Lhe),e(Lhe,$Po),e(D2,kPo),e(D2,zO),e(zO,SPo),e(D2,RPo),e(W,PPo),e(W,G2),e(G2,yhe),e(yhe,BPo),e(G2,IPo),e(G2,QO),e(QO,NPo),e(G2,qPo),e(W,jPo),e(W,O2),e(O2,xhe),e(xhe,DPo),e(O2,GPo),e(O2,WO),e(WO,OPo),e(O2,VPo),e(W,XPo),e(W,V2),e(V2,$he),e($he,zPo),e(V2,QPo),e(V2,HO),e(HO,WPo),e(V2,HPo),e(W,UPo),e(W,X2),e(X2,khe),e(khe,JPo),e(X2,YPo),e(X2,UO),e(UO,KPo),e(X2,ZPo),e(W,eBo),e(W,z2),e(z2,She),e(She,oBo),e(z2,rBo),e(z2,JO),e(JO,tBo),e(z2,aBo),e(W,nBo),e(W,Q2),e(Q2,Rhe),e(Rhe,sBo),e(Q2,lBo),e(Q2,YO),e(YO,iBo),e(Q2,dBo),e(W,cBo),e(W,W2),e(W2,Phe),e(Phe,fBo),e(W2,mBo),e(W2,KO),e(KO,gBo),e(W2,hBo),e(W,pBo),e(W,H2),e(H2,Bhe),e(Bhe,_Bo),e(H2,uBo),e(H2,ZO),e(ZO,bBo),e(H2,vBo),e(W,FBo),e(W,U2),e(U2,Ihe),e(Ihe,TBo),e(U2,MBo),e(U2,eV),e(eV,EBo),e(U2,CBo),e(W,wBo),e(W,J2),e(J2,Nhe),e(Nhe,ABo),e(J2,LBo),e(J2,oV),e(oV,yBo),e(J2,xBo),e(W,$Bo),e(W,Y2),e(Y2,qhe),e(qhe,kBo),e(Y2,SBo),e(Y2,rV),e(rV,RBo),e(Y2,PBo),e(W,BBo),e(W,K2),e(K2,jhe),e(jhe,IBo),e(K2,NBo),e(K2,tV),e(tV,qBo),e(K2,jBo),e(W,DBo),e(W,Z2),e(Z2,Dhe),e(Dhe,GBo),e(Z2,OBo),e(Z2,aV),e(aV,VBo),e(Z2,XBo),e(W,zBo),e(W,eb),e(eb,Ghe),e(Ghe,QBo),e(eb,WBo),e(eb,nV),e(nV,HBo),e(eb,UBo),e(W,JBo),e(W,ob),e(ob,Ohe),e(Ohe,YBo),e(ob,KBo),e(ob,sV),e(sV,ZBo),e(ob,eIo),e(W,oIo),e(W,rb),e(rb,Vhe),e(Vhe,rIo),e(rb,tIo),e(rb,lV),e(lV,aIo),e(rb,nIo),e(W,sIo),e(W,tb),e(tb,Xhe),e(Xhe,lIo),e(tb,iIo),e(tb,iV),e(iV,dIo),e(tb,cIo),e(W,fIo),e(W,ab),e(ab,zhe),e(zhe,mIo),e(ab,gIo),e(ab,dV),e(dV,hIo),e(ab,pIo),e(W,_Io),e(W,nb),e(nb,Qhe),e(Qhe,uIo),e(nb,bIo),e(nb,cV),e(cV,vIo),e(nb,FIo),e(W,TIo),e(W,sb),e(sb,Whe),e(Whe,MIo),e(sb,EIo),e(sb,fV),e(fV,CIo),e(sb,wIo),e(W,AIo),e(W,lb),e(lb,Hhe),e(Hhe,LIo),e(lb,yIo),e(lb,mV),e(mV,xIo),e(lb,$Io),e(W,kIo),e(W,ib),e(ib,Uhe),e(Uhe,SIo),e(ib,RIo),e(ib,gV),e(gV,PIo),e(ib,BIo),e(W,IIo),e(W,db),e(db,Jhe),e(Jhe,NIo),e(db,qIo),e(db,hV),e(hV,jIo),e(db,DIo),e(W,GIo),e(W,cb),e(cb,Yhe),e(Yhe,OIo),e(cb,VIo),e(cb,pV),e(pV,XIo),e(cb,zIo),e(W,QIo),e(W,fb),e(fb,Khe),e(Khe,WIo),e(fb,HIo),e(fb,_V),e(_V,UIo),e(fb,JIo),e(W,YIo),e(W,mb),e(mb,Zhe),e(Zhe,KIo),e(mb,ZIo),e(mb,uV),e(uV,eNo),e(mb,oNo),e(W,rNo),e(W,gb),e(gb,epe),e(epe,tNo),e(gb,aNo),e(gb,bV),e(bV,nNo),e(gb,sNo),e(W,lNo),e(W,hb),e(hb,ope),e(ope,iNo),e(hb,dNo),e(hb,vV),e(vV,cNo),e(hb,fNo),e(W,mNo),e(W,pb),e(pb,rpe),e(rpe,gNo),e(pb,hNo),e(pb,FV),e(FV,pNo),e(pb,_No),e(W,uNo),e(W,_b),e(_b,tpe),e(tpe,bNo),e(_b,vNo),e(_b,ape),e(ape,FNo),e(_b,TNo),e(W,MNo),e(W,ub),e(ub,npe),e(npe,ENo),e(ub,CNo),e(ub,TV),e(TV,wNo),e(ub,ANo),e(W,LNo),e(W,bb),e(bb,spe),e(spe,yNo),e(bb,xNo),e(bb,MV),e(MV,$No),e(bb,kNo),e(W,SNo),e(W,vb),e(vb,lpe),e(lpe,RNo),e(vb,PNo),e(vb,EV),e(EV,BNo),e(vb,INo),e(W,NNo),e(W,Fb),e(Fb,ipe),e(ipe,qNo),e(Fb,jNo),e(Fb,CV),e(CV,DNo),e(Fb,GNo),e(Ze,ONo),e(Ze,Tb),e(Tb,VNo),e(Tb,dpe),e(dpe,XNo),e(Tb,zNo),e(Tb,cpe),e(cpe,QNo),e(Ze,WNo),M(Mb,Ze,null),b(f,bXe,u),b(f,Ki,u),e(Ki,Eb),e(Eb,fpe),M(YL,fpe,null),e(Ki,HNo),e(Ki,mpe),e(mpe,UNo),b(f,vXe,u),b(f,Ro,u),M(KL,Ro,null),e(Ro,JNo),e(Ro,Zi),e(Zi,YNo),e(Zi,wV),e(wV,KNo),e(Zi,ZNo),e(Zi,AV),e(AV,eqo),e(Zi,oqo),e(Ro,rqo),e(Ro,ZL),e(ZL,tqo),e(ZL,gpe),e(gpe,aqo),e(ZL,nqo),e(Ro,sqo),e(Ro,ft),M(ey,ft,null),e(ft,lqo),e(ft,hpe),e(hpe,iqo),e(ft,dqo),e(ft,ed),e(ed,cqo),e(ed,ppe),e(ppe,fqo),e(ed,mqo),e(ed,LV),e(LV,gqo),e(ed,hqo),e(ft,pqo),M(Cb,ft,null),e(Ro,_qo),e(Ro,eo),M(oy,eo,null),e(eo,uqo),e(eo,_pe),e(_pe,bqo),e(eo,vqo),e(eo,ja),e(ja,Fqo),e(ja,upe),e(upe,Tqo),e(ja,Mqo),e(ja,bpe),e(bpe,Eqo),e(ja,Cqo),e(ja,vpe),e(vpe,wqo),e(ja,Aqo),e(eo,Lqo),e(eo,pe),e(pe,wb),e(wb,Fpe),e(Fpe,yqo),e(wb,xqo),e(wb,yV),e(yV,$qo),e(wb,kqo),e(pe,Sqo),e(pe,Ab),e(Ab,Tpe),e(Tpe,Rqo),e(Ab,Pqo),e(Ab,xV),e(xV,Bqo),e(Ab,Iqo),e(pe,Nqo),e(pe,Lb),e(Lb,Mpe),e(Mpe,qqo),e(Lb,jqo),e(Lb,$V),e($V,Dqo),e(Lb,Gqo),e(pe,Oqo),e(pe,yb),e(yb,Epe),e(Epe,Vqo),e(yb,Xqo),e(yb,kV),e(kV,zqo),e(yb,Qqo),e(pe,Wqo),e(pe,xb),e(xb,Cpe),e(Cpe,Hqo),e(xb,Uqo),e(xb,SV),e(SV,Jqo),e(xb,Yqo),e(pe,Kqo),e(pe,$b),e($b,wpe),e(wpe,Zqo),e($b,ejo),e($b,RV),e(RV,ojo),e($b,rjo),e(pe,tjo),e(pe,kb),e(kb,Ape),e(Ape,ajo),e(kb,njo),e(kb,PV),e(PV,sjo),e(kb,ljo),e(pe,ijo),e(pe,Sb),e(Sb,Lpe),e(Lpe,djo),e(Sb,cjo),e(Sb,BV),e(BV,fjo),e(Sb,mjo),e(pe,gjo),e(pe,Rb),e(Rb,ype),e(ype,hjo),e(Rb,pjo),e(Rb,IV),e(IV,_jo),e(Rb,ujo),e(pe,bjo),e(pe,Pb),e(Pb,xpe),e(xpe,vjo),e(Pb,Fjo),e(Pb,NV),e(NV,Tjo),e(Pb,Mjo),e(pe,Ejo),e(pe,Bb),e(Bb,$pe),e($pe,Cjo),e(Bb,wjo),e(Bb,qV),e(qV,Ajo),e(Bb,Ljo),e(pe,yjo),e(pe,Ib),e(Ib,kpe),e(kpe,xjo),e(Ib,$jo),e(Ib,jV),e(jV,kjo),e(Ib,Sjo),e(pe,Rjo),e(pe,Nb),e(Nb,Spe),e(Spe,Pjo),e(Nb,Bjo),e(Nb,DV),e(DV,Ijo),e(Nb,Njo),e(pe,qjo),e(pe,qb),e(qb,Rpe),e(Rpe,jjo),e(qb,Djo),e(qb,GV),e(GV,Gjo),e(qb,Ojo),e(pe,Vjo),e(pe,jb),e(jb,Ppe),e(Ppe,Xjo),e(jb,zjo),e(jb,OV),e(OV,Qjo),e(jb,Wjo),e(pe,Hjo),e(pe,Db),e(Db,Bpe),e(Bpe,Ujo),e(Db,Jjo),e(Db,VV),e(VV,Yjo),e(Db,Kjo),e(pe,Zjo),e(pe,Gb),e(Gb,Ipe),e(Ipe,eDo),e(Gb,oDo),e(Gb,XV),e(XV,rDo),e(Gb,tDo),e(pe,aDo),e(pe,Ob),e(Ob,Npe),e(Npe,nDo),e(Ob,sDo),e(Ob,zV),e(zV,lDo),e(Ob,iDo),e(eo,dDo),e(eo,Vb),e(Vb,cDo),e(Vb,qpe),e(qpe,fDo),e(Vb,mDo),e(Vb,jpe),e(jpe,gDo),e(eo,hDo),M(Xb,eo,null),b(f,FXe,u),b(f,od,u),e(od,zb),e(zb,Dpe),M(ry,Dpe,null),e(od,pDo),e(od,Gpe),e(Gpe,_Do),b(f,TXe,u),b(f,Po,u),M(ty,Po,null),e(Po,uDo),e(Po,rd),e(rd,bDo),e(rd,QV),e(QV,vDo),e(rd,FDo),e(rd,WV),e(WV,TDo),e(rd,MDo),e(Po,EDo),e(Po,ay),e(ay,CDo),e(ay,Ope),e(Ope,wDo),e(ay,ADo),e(Po,LDo),e(Po,mt),M(ny,mt,null),e(mt,yDo),e(mt,Vpe),e(Vpe,xDo),e(mt,$Do),e(mt,td),e(td,kDo),e(td,Xpe),e(Xpe,SDo),e(td,RDo),e(td,HV),e(HV,PDo),e(td,BDo),e(mt,IDo),M(Qb,mt,null),e(Po,NDo),e(Po,oo),M(sy,oo,null),e(oo,qDo),e(oo,zpe),e(zpe,jDo),e(oo,DDo),e(oo,Da),e(Da,GDo),e(Da,Qpe),e(Qpe,ODo),e(Da,VDo),e(Da,Wpe),e(Wpe,XDo),e(Da,zDo),e(Da,Hpe),e(Hpe,QDo),e(Da,WDo),e(oo,HDo),e(oo,N),e(N,Wb),e(Wb,Upe),e(Upe,UDo),e(Wb,JDo),e(Wb,UV),e(UV,YDo),e(Wb,KDo),e(N,ZDo),e(N,Hb),e(Hb,Jpe),e(Jpe,eGo),e(Hb,oGo),e(Hb,JV),e(JV,rGo),e(Hb,tGo),e(N,aGo),e(N,Ub),e(Ub,Ype),e(Ype,nGo),e(Ub,sGo),e(Ub,YV),e(YV,lGo),e(Ub,iGo),e(N,dGo),e(N,Jb),e(Jb,Kpe),e(Kpe,cGo),e(Jb,fGo),e(Jb,KV),e(KV,mGo),e(Jb,gGo),e(N,hGo),e(N,Yb),e(Yb,Zpe),e(Zpe,pGo),e(Yb,_Go),e(Yb,ZV),e(ZV,uGo),e(Yb,bGo),e(N,vGo),e(N,Kb),e(Kb,e_e),e(e_e,FGo),e(Kb,TGo),e(Kb,eX),e(eX,MGo),e(Kb,EGo),e(N,CGo),e(N,Zb),e(Zb,o_e),e(o_e,wGo),e(Zb,AGo),e(Zb,oX),e(oX,LGo),e(Zb,yGo),e(N,xGo),e(N,ev),e(ev,r_e),e(r_e,$Go),e(ev,kGo),e(ev,rX),e(rX,SGo),e(ev,RGo),e(N,PGo),e(N,ov),e(ov,t_e),e(t_e,BGo),e(ov,IGo),e(ov,tX),e(tX,NGo),e(ov,qGo),e(N,jGo),e(N,rv),e(rv,a_e),e(a_e,DGo),e(rv,GGo),e(rv,aX),e(aX,OGo),e(rv,VGo),e(N,XGo),e(N,tv),e(tv,n_e),e(n_e,zGo),e(tv,QGo),e(tv,nX),e(nX,WGo),e(tv,HGo),e(N,UGo),e(N,av),e(av,s_e),e(s_e,JGo),e(av,YGo),e(av,sX),e(sX,KGo),e(av,ZGo),e(N,eOo),e(N,nv),e(nv,l_e),e(l_e,oOo),e(nv,rOo),e(nv,lX),e(lX,tOo),e(nv,aOo),e(N,nOo),e(N,sv),e(sv,i_e),e(i_e,sOo),e(sv,lOo),e(sv,iX),e(iX,iOo),e(sv,dOo),e(N,cOo),e(N,lv),e(lv,d_e),e(d_e,fOo),e(lv,mOo),e(lv,dX),e(dX,gOo),e(lv,hOo),e(N,pOo),e(N,iv),e(iv,c_e),e(c_e,_Oo),e(iv,uOo),e(iv,cX),e(cX,bOo),e(iv,vOo),e(N,FOo),e(N,dv),e(dv,f_e),e(f_e,TOo),e(dv,MOo),e(dv,fX),e(fX,EOo),e(dv,COo),e(N,wOo),e(N,cv),e(cv,m_e),e(m_e,AOo),e(cv,LOo),e(cv,mX),e(mX,yOo),e(cv,xOo),e(N,$Oo),e(N,fv),e(fv,g_e),e(g_e,kOo),e(fv,SOo),e(fv,gX),e(gX,ROo),e(fv,POo),e(N,BOo),e(N,mv),e(mv,h_e),e(h_e,IOo),e(mv,NOo),e(mv,hX),e(hX,qOo),e(mv,jOo),e(N,DOo),e(N,gv),e(gv,p_e),e(p_e,GOo),e(gv,OOo),e(gv,pX),e(pX,VOo),e(gv,XOo),e(N,zOo),e(N,hv),e(hv,__e),e(__e,QOo),e(hv,WOo),e(hv,_X),e(_X,HOo),e(hv,UOo),e(N,JOo),e(N,pv),e(pv,u_e),e(u_e,YOo),e(pv,KOo),e(pv,uX),e(uX,ZOo),e(pv,eVo),e(N,oVo),e(N,_v),e(_v,b_e),e(b_e,rVo),e(_v,tVo),e(_v,bX),e(bX,aVo),e(_v,nVo),e(N,sVo),e(N,uv),e(uv,v_e),e(v_e,lVo),e(uv,iVo),e(uv,vX),e(vX,dVo),e(uv,cVo),e(N,fVo),e(N,bv),e(bv,F_e),e(F_e,mVo),e(bv,gVo),e(bv,FX),e(FX,hVo),e(bv,pVo),e(N,_Vo),e(N,vv),e(vv,T_e),e(T_e,uVo),e(vv,bVo),e(vv,TX),e(TX,vVo),e(vv,FVo),e(N,TVo),e(N,Fv),e(Fv,M_e),e(M_e,MVo),e(Fv,EVo),e(Fv,MX),e(MX,CVo),e(Fv,wVo),e(N,AVo),e(N,Tv),e(Tv,E_e),e(E_e,LVo),e(Tv,yVo),e(Tv,EX),e(EX,xVo),e(Tv,$Vo),e(N,kVo),e(N,Mv),e(Mv,C_e),e(C_e,SVo),e(Mv,RVo),e(Mv,CX),e(CX,PVo),e(Mv,BVo),e(N,IVo),e(N,Ev),e(Ev,w_e),e(w_e,NVo),e(Ev,qVo),e(Ev,wX),e(wX,jVo),e(Ev,DVo),e(N,GVo),e(N,Cv),e(Cv,A_e),e(A_e,OVo),e(Cv,VVo),e(Cv,AX),e(AX,XVo),e(Cv,zVo),e(N,QVo),e(N,wv),e(wv,L_e),e(L_e,WVo),e(wv,HVo),e(wv,LX),e(LX,UVo),e(wv,JVo),e(N,YVo),e(N,Av),e(Av,y_e),e(y_e,KVo),e(Av,ZVo),e(Av,yX),e(yX,eXo),e(Av,oXo),e(N,rXo),e(N,Lv),e(Lv,x_e),e(x_e,tXo),e(Lv,aXo),e(Lv,xX),e(xX,nXo),e(Lv,sXo),e(N,lXo),e(N,yv),e(yv,$_e),e($_e,iXo),e(yv,dXo),e(yv,$X),e($X,cXo),e(yv,fXo),e(N,mXo),e(N,xv),e(xv,k_e),e(k_e,gXo),e(xv,hXo),e(xv,kX),e(kX,pXo),e(xv,_Xo),e(N,uXo),e(N,$v),e($v,S_e),e(S_e,bXo),e($v,vXo),e($v,SX),e(SX,FXo),e($v,TXo),e(N,MXo),e(N,kv),e(kv,R_e),e(R_e,EXo),e(kv,CXo),e(kv,RX),e(RX,wXo),e(kv,AXo),e(N,LXo),e(N,Sv),e(Sv,P_e),e(P_e,yXo),e(Sv,xXo),e(Sv,PX),e(PX,$Xo),e(Sv,kXo),e(N,SXo),e(N,Rv),e(Rv,B_e),e(B_e,RXo),e(Rv,PXo),e(Rv,BX),e(BX,BXo),e(Rv,IXo),e(N,NXo),e(N,Pv),e(Pv,I_e),e(I_e,qXo),e(Pv,jXo),e(Pv,IX),e(IX,DXo),e(Pv,GXo),e(N,OXo),e(N,Bv),e(Bv,N_e),e(N_e,VXo),e(Bv,XXo),e(Bv,NX),e(NX,zXo),e(Bv,QXo),e(N,WXo),e(N,Iv),e(Iv,q_e),e(q_e,HXo),e(Iv,UXo),e(Iv,qX),e(qX,JXo),e(Iv,YXo),e(N,KXo),e(N,Nv),e(Nv,j_e),e(j_e,ZXo),e(Nv,ezo),e(Nv,jX),e(jX,ozo),e(Nv,rzo),e(N,tzo),e(N,qv),e(qv,D_e),e(D_e,azo),e(qv,nzo),e(qv,DX),e(DX,szo),e(qv,lzo),e(N,izo),e(N,jv),e(jv,G_e),e(G_e,dzo),e(jv,czo),e(jv,GX),e(GX,fzo),e(jv,mzo),e(N,gzo),e(N,Dv),e(Dv,O_e),e(O_e,hzo),e(Dv,pzo),e(Dv,OX),e(OX,_zo),e(Dv,uzo),e(N,bzo),e(N,Gv),e(Gv,V_e),e(V_e,vzo),e(Gv,Fzo),e(Gv,VX),e(VX,Tzo),e(Gv,Mzo),e(N,Ezo),e(N,Ov),e(Ov,X_e),e(X_e,Czo),e(Ov,wzo),e(Ov,XX),e(XX,Azo),e(Ov,Lzo),e(oo,yzo),e(oo,Vv),e(Vv,xzo),e(Vv,z_e),e(z_e,$zo),e(Vv,kzo),e(Vv,Q_e),e(Q_e,Szo),e(oo,Rzo),M(Xv,oo,null),b(f,MXe,u),b(f,ad,u),e(ad,zv),e(zv,W_e),M(ly,W_e,null),e(ad,Pzo),e(ad,H_e),e(H_e,Bzo),b(f,EXe,u),b(f,Bo,u),M(iy,Bo,null),e(Bo,Izo),e(Bo,nd),e(nd,Nzo),e(nd,zX),e(zX,qzo),e(nd,jzo),e(nd,QX),e(QX,Dzo),e(nd,Gzo),e(Bo,Ozo),e(Bo,dy),e(dy,Vzo),e(dy,U_e),e(U_e,Xzo),e(dy,zzo),e(Bo,Qzo),e(Bo,gt),M(cy,gt,null),e(gt,Wzo),e(gt,J_e),e(J_e,Hzo),e(gt,Uzo),e(gt,sd),e(sd,Jzo),e(sd,Y_e),e(Y_e,Yzo),e(sd,Kzo),e(sd,WX),e(WX,Zzo),e(sd,eQo),e(gt,oQo),M(Qv,gt,null),e(Bo,rQo),e(Bo,ro),M(fy,ro,null),e(ro,tQo),e(ro,K_e),e(K_e,aQo),e(ro,nQo),e(ro,Ga),e(Ga,sQo),e(Ga,Z_e),e(Z_e,lQo),e(Ga,iQo),e(Ga,eue),e(eue,dQo),e(Ga,cQo),e(Ga,oue),e(oue,fQo),e(Ga,mQo),e(ro,gQo),e(ro,Z),e(Z,Wv),e(Wv,rue),e(rue,hQo),e(Wv,pQo),e(Wv,HX),e(HX,_Qo),e(Wv,uQo),e(Z,bQo),e(Z,Hv),e(Hv,tue),e(tue,vQo),e(Hv,FQo),e(Hv,UX),e(UX,TQo),e(Hv,MQo),e(Z,EQo),e(Z,Uv),e(Uv,aue),e(aue,CQo),e(Uv,wQo),e(Uv,JX),e(JX,AQo),e(Uv,LQo),e(Z,yQo),e(Z,Jv),e(Jv,nue),e(nue,xQo),e(Jv,$Qo),e(Jv,YX),e(YX,kQo),e(Jv,SQo),e(Z,RQo),e(Z,Yv),e(Yv,sue),e(sue,PQo),e(Yv,BQo),e(Yv,KX),e(KX,IQo),e(Yv,NQo),e(Z,qQo),e(Z,Kv),e(Kv,lue),e(lue,jQo),e(Kv,DQo),e(Kv,ZX),e(ZX,GQo),e(Kv,OQo),e(Z,VQo),e(Z,Zv),e(Zv,iue),e(iue,XQo),e(Zv,zQo),e(Zv,ez),e(ez,QQo),e(Zv,WQo),e(Z,HQo),e(Z,eF),e(eF,due),e(due,UQo),e(eF,JQo),e(eF,oz),e(oz,YQo),e(eF,KQo),e(Z,ZQo),e(Z,oF),e(oF,cue),e(cue,eWo),e(oF,oWo),e(oF,rz),e(rz,rWo),e(oF,tWo),e(Z,aWo),e(Z,rF),e(rF,fue),e(fue,nWo),e(rF,sWo),e(rF,tz),e(tz,lWo),e(rF,iWo),e(Z,dWo),e(Z,tF),e(tF,mue),e(mue,cWo),e(tF,fWo),e(tF,az),e(az,mWo),e(tF,gWo),e(Z,hWo),e(Z,aF),e(aF,gue),e(gue,pWo),e(aF,_Wo),e(aF,nz),e(nz,uWo),e(aF,bWo),e(Z,vWo),e(Z,nF),e(nF,hue),e(hue,FWo),e(nF,TWo),e(nF,sz),e(sz,MWo),e(nF,EWo),e(Z,CWo),e(Z,sF),e(sF,pue),e(pue,wWo),e(sF,AWo),e(sF,lz),e(lz,LWo),e(sF,yWo),e(Z,xWo),e(Z,lF),e(lF,_ue),e(_ue,$Wo),e(lF,kWo),e(lF,iz),e(iz,SWo),e(lF,RWo),e(Z,PWo),e(Z,iF),e(iF,uue),e(uue,BWo),e(iF,IWo),e(iF,dz),e(dz,NWo),e(iF,qWo),e(Z,jWo),e(Z,dF),e(dF,bue),e(bue,DWo),e(dF,GWo),e(dF,cz),e(cz,OWo),e(dF,VWo),e(Z,XWo),e(Z,cF),e(cF,vue),e(vue,zWo),e(cF,QWo),e(cF,fz),e(fz,WWo),e(cF,HWo),e(Z,UWo),e(Z,fF),e(fF,Fue),e(Fue,JWo),e(fF,YWo),e(fF,mz),e(mz,KWo),e(fF,ZWo),e(Z,eHo),e(Z,mF),e(mF,Tue),e(Tue,oHo),e(mF,rHo),e(mF,gz),e(gz,tHo),e(mF,aHo),e(Z,nHo),e(Z,gF),e(gF,Mue),e(Mue,sHo),e(gF,lHo),e(gF,hz),e(hz,iHo),e(gF,dHo),e(Z,cHo),e(Z,hF),e(hF,Eue),e(Eue,fHo),e(hF,mHo),e(hF,pz),e(pz,gHo),e(hF,hHo),e(Z,pHo),e(Z,pF),e(pF,Cue),e(Cue,_Ho),e(pF,uHo),e(pF,_z),e(_z,bHo),e(pF,vHo),e(Z,FHo),e(Z,_F),e(_F,wue),e(wue,THo),e(_F,MHo),e(_F,uz),e(uz,EHo),e(_F,CHo),e(Z,wHo),e(Z,uF),e(uF,Aue),e(Aue,AHo),e(uF,LHo),e(uF,bz),e(bz,yHo),e(uF,xHo),e(Z,$Ho),e(Z,bF),e(bF,Lue),e(Lue,kHo),e(bF,SHo),e(bF,vz),e(vz,RHo),e(bF,PHo),e(Z,BHo),e(Z,vF),e(vF,yue),e(yue,IHo),e(vF,NHo),e(vF,Fz),e(Fz,qHo),e(vF,jHo),e(Z,DHo),e(Z,FF),e(FF,xue),e(xue,GHo),e(FF,OHo),e(FF,Tz),e(Tz,VHo),e(FF,XHo),e(Z,zHo),e(Z,TF),e(TF,$ue),e($ue,QHo),e(TF,WHo),e(TF,Mz),e(Mz,HHo),e(TF,UHo),e(Z,JHo),e(Z,MF),e(MF,kue),e(kue,YHo),e(MF,KHo),e(MF,Ez),e(Ez,ZHo),e(MF,eUo),e(ro,oUo),e(ro,EF),e(EF,rUo),e(EF,Sue),e(Sue,tUo),e(EF,aUo),e(EF,Rue),e(Rue,nUo),e(ro,sUo),M(CF,ro,null),b(f,CXe,u),b(f,ld,u),e(ld,wF),e(wF,Pue),M(my,Pue,null),e(ld,lUo),e(ld,Bue),e(Bue,iUo),b(f,wXe,u),b(f,Io,u),M(gy,Io,null),e(Io,dUo),e(Io,id),e(id,cUo),e(id,Cz),e(Cz,fUo),e(id,mUo),e(id,wz),e(wz,gUo),e(id,hUo),e(Io,pUo),e(Io,hy),e(hy,_Uo),e(hy,Iue),e(Iue,uUo),e(hy,bUo),e(Io,vUo),e(Io,ht),M(py,ht,null),e(ht,FUo),e(ht,Nue),e(Nue,TUo),e(ht,MUo),e(ht,dd),e(dd,EUo),e(dd,que),e(que,CUo),e(dd,wUo),e(dd,Az),e(Az,AUo),e(dd,LUo),e(ht,yUo),M(AF,ht,null),e(Io,xUo),e(Io,to),M(_y,to,null),e(to,$Uo),e(to,jue),e(jue,kUo),e(to,SUo),e(to,Oa),e(Oa,RUo),e(Oa,Due),e(Due,PUo),e(Oa,BUo),e(Oa,Gue),e(Gue,IUo),e(Oa,NUo),e(Oa,Oue),e(Oue,qUo),e(Oa,jUo),e(to,DUo),e(to,No),e(No,LF),e(LF,Vue),e(Vue,GUo),e(LF,OUo),e(LF,Lz),e(Lz,VUo),e(LF,XUo),e(No,zUo),e(No,yF),e(yF,Xue),e(Xue,QUo),e(yF,WUo),e(yF,yz),e(yz,HUo),e(yF,UUo),e(No,JUo),e(No,xF),e(xF,zue),e(zue,YUo),e(xF,KUo),e(xF,xz),e(xz,ZUo),e(xF,eJo),e(No,oJo),e(No,$F),e($F,Que),e(Que,rJo),e($F,tJo),e($F,$z),e($z,aJo),e($F,nJo),e(No,sJo),e(No,kF),e(kF,Wue),e(Wue,lJo),e(kF,iJo),e(kF,kz),e(kz,dJo),e(kF,cJo),e(No,fJo),e(No,SF),e(SF,Hue),e(Hue,mJo),e(SF,gJo),e(SF,Sz),e(Sz,hJo),e(SF,pJo),e(to,_Jo),e(to,RF),e(RF,uJo),e(RF,Uue),e(Uue,bJo),e(RF,vJo),e(RF,Jue),e(Jue,FJo),e(to,TJo),M(PF,to,null),b(f,AXe,u),b(f,cd,u),e(cd,BF),e(BF,Yue),M(uy,Yue,null),e(cd,MJo),e(cd,Kue),e(Kue,EJo),b(f,LXe,u),b(f,qo,u),M(by,qo,null),e(qo,CJo),e(qo,fd),e(fd,wJo),e(fd,Rz),e(Rz,AJo),e(fd,LJo),e(fd,Pz),e(Pz,yJo),e(fd,xJo),e(qo,$Jo),e(qo,vy),e(vy,kJo),e(vy,Zue),e(Zue,SJo),e(vy,RJo),e(qo,PJo),e(qo,pt),M(Fy,pt,null),e(pt,BJo),e(pt,e1e),e(e1e,IJo),e(pt,NJo),e(pt,md),e(md,qJo),e(md,o1e),e(o1e,jJo),e(md,DJo),e(md,Bz),e(Bz,GJo),e(md,OJo),e(pt,VJo),M(IF,pt,null),e(qo,XJo),e(qo,ao),M(Ty,ao,null),e(ao,zJo),e(ao,r1e),e(r1e,QJo),e(ao,WJo),e(ao,Va),e(Va,HJo),e(Va,t1e),e(t1e,UJo),e(Va,JJo),e(Va,a1e),e(a1e,YJo),e(Va,KJo),e(Va,n1e),e(n1e,ZJo),e(Va,eYo),e(ao,oYo),e(ao,U),e(U,NF),e(NF,s1e),e(s1e,rYo),e(NF,tYo),e(NF,Iz),e(Iz,aYo),e(NF,nYo),e(U,sYo),e(U,qF),e(qF,l1e),e(l1e,lYo),e(qF,iYo),e(qF,Nz),e(Nz,dYo),e(qF,cYo),e(U,fYo),e(U,jF),e(jF,i1e),e(i1e,mYo),e(jF,gYo),e(jF,qz),e(qz,hYo),e(jF,pYo),e(U,_Yo),e(U,DF),e(DF,d1e),e(d1e,uYo),e(DF,bYo),e(DF,jz),e(jz,vYo),e(DF,FYo),e(U,TYo),e(U,GF),e(GF,c1e),e(c1e,MYo),e(GF,EYo),e(GF,Dz),e(Dz,CYo),e(GF,wYo),e(U,AYo),e(U,OF),e(OF,f1e),e(f1e,LYo),e(OF,yYo),e(OF,Gz),e(Gz,xYo),e(OF,$Yo),e(U,kYo),e(U,VF),e(VF,m1e),e(m1e,SYo),e(VF,RYo),e(VF,Oz),e(Oz,PYo),e(VF,BYo),e(U,IYo),e(U,XF),e(XF,g1e),e(g1e,NYo),e(XF,qYo),e(XF,Vz),e(Vz,jYo),e(XF,DYo),e(U,GYo),e(U,zF),e(zF,h1e),e(h1e,OYo),e(zF,VYo),e(zF,Xz),e(Xz,XYo),e(zF,zYo),e(U,QYo),e(U,QF),e(QF,p1e),e(p1e,WYo),e(QF,HYo),e(QF,zz),e(zz,UYo),e(QF,JYo),e(U,YYo),e(U,WF),e(WF,_1e),e(_1e,KYo),e(WF,ZYo),e(WF,Qz),e(Qz,eKo),e(WF,oKo),e(U,rKo),e(U,HF),e(HF,u1e),e(u1e,tKo),e(HF,aKo),e(HF,Wz),e(Wz,nKo),e(HF,sKo),e(U,lKo),e(U,UF),e(UF,b1e),e(b1e,iKo),e(UF,dKo),e(UF,Hz),e(Hz,cKo),e(UF,fKo),e(U,mKo),e(U,JF),e(JF,v1e),e(v1e,gKo),e(JF,hKo),e(JF,Uz),e(Uz,pKo),e(JF,_Ko),e(U,uKo),e(U,YF),e(YF,F1e),e(F1e,bKo),e(YF,vKo),e(YF,Jz),e(Jz,FKo),e(YF,TKo),e(U,MKo),e(U,KF),e(KF,T1e),e(T1e,EKo),e(KF,CKo),e(KF,Yz),e(Yz,wKo),e(KF,AKo),e(U,LKo),e(U,ZF),e(ZF,M1e),e(M1e,yKo),e(ZF,xKo),e(ZF,Kz),e(Kz,$Ko),e(ZF,kKo),e(U,SKo),e(U,eT),e(eT,E1e),e(E1e,RKo),e(eT,PKo),e(eT,Zz),e(Zz,BKo),e(eT,IKo),e(U,NKo),e(U,oT),e(oT,C1e),e(C1e,qKo),e(oT,jKo),e(oT,eQ),e(eQ,DKo),e(oT,GKo),e(U,OKo),e(U,rT),e(rT,w1e),e(w1e,VKo),e(rT,XKo),e(rT,oQ),e(oQ,zKo),e(rT,QKo),e(U,WKo),e(U,tT),e(tT,A1e),e(A1e,HKo),e(tT,UKo),e(tT,rQ),e(rQ,JKo),e(tT,YKo),e(U,KKo),e(U,aT),e(aT,L1e),e(L1e,ZKo),e(aT,eZo),e(aT,tQ),e(tQ,oZo),e(aT,rZo),e(U,tZo),e(U,nT),e(nT,y1e),e(y1e,aZo),e(nT,nZo),e(nT,aQ),e(aQ,sZo),e(nT,lZo),e(U,iZo),e(U,sT),e(sT,x1e),e(x1e,dZo),e(sT,cZo),e(sT,nQ),e(nQ,fZo),e(sT,mZo),e(U,gZo),e(U,lT),e(lT,$1e),e($1e,hZo),e(lT,pZo),e(lT,sQ),e(sQ,_Zo),e(lT,uZo),e(U,bZo),e(U,iT),e(iT,k1e),e(k1e,vZo),e(iT,FZo),e(iT,lQ),e(lQ,TZo),e(iT,MZo),e(U,EZo),e(U,dT),e(dT,S1e),e(S1e,CZo),e(dT,wZo),e(dT,iQ),e(iQ,AZo),e(dT,LZo),e(U,yZo),e(U,cT),e(cT,R1e),e(R1e,xZo),e(cT,$Zo),e(cT,dQ),e(dQ,kZo),e(cT,SZo),e(U,RZo),e(U,fT),e(fT,P1e),e(P1e,PZo),e(fT,BZo),e(fT,cQ),e(cQ,IZo),e(fT,NZo),e(U,qZo),e(U,mT),e(mT,B1e),e(B1e,jZo),e(mT,DZo),e(mT,fQ),e(fQ,GZo),e(mT,OZo),e(U,VZo),e(U,gT),e(gT,I1e),e(I1e,XZo),e(gT,zZo),e(gT,mQ),e(mQ,QZo),e(gT,WZo),e(U,HZo),e(U,hT),e(hT,N1e),e(N1e,UZo),e(hT,JZo),e(hT,gQ),e(gQ,YZo),e(hT,KZo),e(U,ZZo),e(U,pT),e(pT,q1e),e(q1e,eer),e(pT,oer),e(pT,hQ),e(hQ,rer),e(pT,ter),e(U,aer),e(U,_T),e(_T,j1e),e(j1e,ner),e(_T,ser),e(_T,pQ),e(pQ,ler),e(_T,ier),e(U,der),e(U,uT),e(uT,D1e),e(D1e,cer),e(uT,fer),e(uT,_Q),e(_Q,mer),e(uT,ger),e(U,her),e(U,bT),e(bT,G1e),e(G1e,per),e(bT,_er),e(bT,uQ),e(uQ,uer),e(bT,ber),e(ao,ver),e(ao,vT),e(vT,Fer),e(vT,O1e),e(O1e,Ter),e(vT,Mer),e(vT,V1e),e(V1e,Eer),e(ao,Cer),M(FT,ao,null),b(f,yXe,u),b(f,gd,u),e(gd,TT),e(TT,X1e),M(My,X1e,null),e(gd,wer),e(gd,z1e),e(z1e,Aer),b(f,xXe,u),b(f,jo,u),M(Ey,jo,null),e(jo,Ler),e(jo,hd),e(hd,yer),e(hd,bQ),e(bQ,xer),e(hd,$er),e(hd,vQ),e(vQ,ker),e(hd,Ser),e(jo,Rer),e(jo,Cy),e(Cy,Per),e(Cy,Q1e),e(Q1e,Ber),e(Cy,Ier),e(jo,Ner),e(jo,_t),M(wy,_t,null),e(_t,qer),e(_t,W1e),e(W1e,jer),e(_t,Der),e(_t,pd),e(pd,Ger),e(pd,H1e),e(H1e,Oer),e(pd,Ver),e(pd,FQ),e(FQ,Xer),e(pd,zer),e(_t,Qer),M(MT,_t,null),e(jo,Wer),e(jo,no),M(Ay,no,null),e(no,Her),e(no,U1e),e(U1e,Uer),e(no,Jer),e(no,Xa),e(Xa,Yer),e(Xa,J1e),e(J1e,Ker),e(Xa,Zer),e(Xa,Y1e),e(Y1e,eor),e(Xa,oor),e(Xa,K1e),e(K1e,ror),e(Xa,tor),e(no,aor),e(no,V),e(V,ET),e(ET,Z1e),e(Z1e,nor),e(ET,sor),e(ET,TQ),e(TQ,lor),e(ET,ior),e(V,dor),e(V,CT),e(CT,e2e),e(e2e,cor),e(CT,mor),e(CT,MQ),e(MQ,gor),e(CT,hor),e(V,por),e(V,wT),e(wT,o2e),e(o2e,_or),e(wT,uor),e(wT,EQ),e(EQ,bor),e(wT,vor),e(V,For),e(V,AT),e(AT,r2e),e(r2e,Tor),e(AT,Mor),e(AT,CQ),e(CQ,Eor),e(AT,Cor),e(V,wor),e(V,LT),e(LT,t2e),e(t2e,Aor),e(LT,Lor),e(LT,wQ),e(wQ,yor),e(LT,xor),e(V,$or),e(V,yT),e(yT,a2e),e(a2e,kor),e(yT,Sor),e(yT,AQ),e(AQ,Ror),e(yT,Por),e(V,Bor),e(V,xT),e(xT,n2e),e(n2e,Ior),e(xT,Nor),e(xT,LQ),e(LQ,qor),e(xT,jor),e(V,Dor),e(V,$T),e($T,s2e),e(s2e,Gor),e($T,Oor),e($T,yQ),e(yQ,Vor),e($T,Xor),e(V,zor),e(V,kT),e(kT,l2e),e(l2e,Qor),e(kT,Wor),e(kT,xQ),e(xQ,Hor),e(kT,Uor),e(V,Jor),e(V,ST),e(ST,i2e),e(i2e,Yor),e(ST,Kor),e(ST,$Q),e($Q,Zor),e(ST,err),e(V,orr),e(V,RT),e(RT,d2e),e(d2e,rrr),e(RT,trr),e(RT,kQ),e(kQ,arr),e(RT,nrr),e(V,srr),e(V,PT),e(PT,c2e),e(c2e,lrr),e(PT,irr),e(PT,SQ),e(SQ,drr),e(PT,crr),e(V,frr),e(V,BT),e(BT,f2e),e(f2e,mrr),e(BT,grr),e(BT,RQ),e(RQ,hrr),e(BT,prr),e(V,_rr),e(V,IT),e(IT,m2e),e(m2e,urr),e(IT,brr),e(IT,PQ),e(PQ,vrr),e(IT,Frr),e(V,Trr),e(V,NT),e(NT,g2e),e(g2e,Mrr),e(NT,Err),e(NT,BQ),e(BQ,Crr),e(NT,wrr),e(V,Arr),e(V,qT),e(qT,h2e),e(h2e,Lrr),e(qT,yrr),e(qT,IQ),e(IQ,xrr),e(qT,$rr),e(V,krr),e(V,jT),e(jT,p2e),e(p2e,Srr),e(jT,Rrr),e(jT,NQ),e(NQ,Prr),e(jT,Brr),e(V,Irr),e(V,DT),e(DT,_2e),e(_2e,Nrr),e(DT,qrr),e(DT,qQ),e(qQ,jrr),e(DT,Drr),e(V,Grr),e(V,GT),e(GT,u2e),e(u2e,Orr),e(GT,Vrr),e(GT,jQ),e(jQ,Xrr),e(GT,zrr),e(V,Qrr),e(V,OT),e(OT,b2e),e(b2e,Wrr),e(OT,Hrr),e(OT,DQ),e(DQ,Urr),e(OT,Jrr),e(V,Yrr),e(V,VT),e(VT,v2e),e(v2e,Krr),e(VT,Zrr),e(VT,GQ),e(GQ,etr),e(VT,otr),e(V,rtr),e(V,XT),e(XT,F2e),e(F2e,ttr),e(XT,atr),e(XT,OQ),e(OQ,ntr),e(XT,str),e(V,ltr),e(V,zT),e(zT,T2e),e(T2e,itr),e(zT,dtr),e(zT,VQ),e(VQ,ctr),e(zT,ftr),e(V,mtr),e(V,QT),e(QT,M2e),e(M2e,gtr),e(QT,htr),e(QT,XQ),e(XQ,ptr),e(QT,_tr),e(V,utr),e(V,WT),e(WT,E2e),e(E2e,btr),e(WT,vtr),e(WT,zQ),e(zQ,Ftr),e(WT,Ttr),e(V,Mtr),e(V,HT),e(HT,C2e),e(C2e,Etr),e(HT,Ctr),e(HT,QQ),e(QQ,wtr),e(HT,Atr),e(V,Ltr),e(V,UT),e(UT,w2e),e(w2e,ytr),e(UT,xtr),e(UT,WQ),e(WQ,$tr),e(UT,ktr),e(V,Str),e(V,JT),e(JT,A2e),e(A2e,Rtr),e(JT,Ptr),e(JT,HQ),e(HQ,Btr),e(JT,Itr),e(V,Ntr),e(V,YT),e(YT,L2e),e(L2e,qtr),e(YT,jtr),e(YT,UQ),e(UQ,Dtr),e(YT,Gtr),e(V,Otr),e(V,KT),e(KT,y2e),e(y2e,Vtr),e(KT,Xtr),e(KT,JQ),e(JQ,ztr),e(KT,Qtr),e(V,Wtr),e(V,ZT),e(ZT,x2e),e(x2e,Htr),e(ZT,Utr),e(ZT,YQ),e(YQ,Jtr),e(ZT,Ytr),e(V,Ktr),e(V,e7),e(e7,$2e),e($2e,Ztr),e(e7,ear),e(e7,KQ),e(KQ,oar),e(e7,rar),e(V,tar),e(V,o7),e(o7,k2e),e(k2e,aar),e(o7,nar),e(o7,ZQ),e(ZQ,sar),e(o7,lar),e(V,iar),e(V,r7),e(r7,S2e),e(S2e,dar),e(r7,car),e(r7,eW),e(eW,far),e(r7,mar),e(V,gar),e(V,t7),e(t7,R2e),e(R2e,har),e(t7,par),e(t7,oW),e(oW,_ar),e(t7,uar),e(V,bar),e(V,a7),e(a7,P2e),e(P2e,Far),e(a7,Tar),e(a7,rW),e(rW,Mar),e(a7,Ear),e(V,Car),e(V,n7),e(n7,B2e),e(B2e,war),e(n7,Aar),e(n7,tW),e(tW,Lar),e(n7,yar),e(V,xar),e(V,s7),e(s7,I2e),e(I2e,$ar),e(s7,kar),e(s7,aW),e(aW,Sar),e(s7,Rar),e(V,Par),e(V,l7),e(l7,N2e),e(N2e,Bar),e(l7,Iar),e(l7,nW),e(nW,Nar),e(l7,qar),e(V,jar),e(V,i7),e(i7,q2e),e(q2e,Dar),e(i7,Gar),e(i7,sW),e(sW,Oar),e(i7,Var),e(V,Xar),e(V,d7),e(d7,j2e),e(j2e,zar),e(d7,Qar),e(d7,lW),e(lW,War),e(d7,Har),e(V,Uar),e(V,c7),e(c7,D2e),e(D2e,Jar),e(c7,Yar),e(c7,iW),e(iW,Kar),e(c7,Zar),e(no,enr),e(no,f7),e(f7,onr),e(f7,G2e),e(G2e,rnr),e(f7,tnr),e(f7,O2e),e(O2e,anr),e(no,nnr),M(m7,no,null),b(f,$Xe,u),b(f,_d,u),e(_d,g7),e(g7,V2e),M(Ly,V2e,null),e(_d,snr),e(_d,X2e),e(X2e,lnr),b(f,kXe,u),b(f,Do,u),M(yy,Do,null),e(Do,inr),e(Do,ud),e(ud,dnr),e(ud,dW),e(dW,cnr),e(ud,fnr),e(ud,cW),e(cW,mnr),e(ud,gnr),e(Do,hnr),e(Do,xy),e(xy,pnr),e(xy,z2e),e(z2e,_nr),e(xy,unr),e(Do,bnr),e(Do,ut),M($y,ut,null),e(ut,vnr),e(ut,Q2e),e(Q2e,Fnr),e(ut,Tnr),e(ut,bd),e(bd,Mnr),e(bd,W2e),e(W2e,Enr),e(bd,Cnr),e(bd,fW),e(fW,wnr),e(bd,Anr),e(ut,Lnr),M(h7,ut,null),e(Do,ynr),e(Do,so),M(ky,so,null),e(so,xnr),e(so,H2e),e(H2e,$nr),e(so,knr),e(so,za),e(za,Snr),e(za,U2e),e(U2e,Rnr),e(za,Pnr),e(za,J2e),e(J2e,Bnr),e(za,Inr),e(za,Y2e),e(Y2e,Nnr),e(za,qnr),e(so,jnr),e(so,K2e),e(K2e,p7),e(p7,Z2e),e(Z2e,Dnr),e(p7,Gnr),e(p7,mW),e(mW,Onr),e(p7,Vnr),e(so,Xnr),e(so,_7),e(_7,znr),e(_7,ebe),e(ebe,Qnr),e(_7,Wnr),e(_7,obe),e(obe,Hnr),e(so,Unr),M(u7,so,null),b(f,SXe,u),b(f,vd,u),e(vd,b7),e(b7,rbe),M(Sy,rbe,null),e(vd,Jnr),e(vd,tbe),e(tbe,Ynr),b(f,RXe,u),b(f,Go,u),M(Ry,Go,null),e(Go,Knr),e(Go,Fd),e(Fd,Znr),e(Fd,gW),e(gW,esr),e(Fd,osr),e(Fd,hW),e(hW,rsr),e(Fd,tsr),e(Go,asr),e(Go,Py),e(Py,nsr),e(Py,abe),e(abe,ssr),e(Py,lsr),e(Go,isr),e(Go,bt),M(By,bt,null),e(bt,dsr),e(bt,nbe),e(nbe,csr),e(bt,fsr),e(bt,Td),e(Td,msr),e(Td,sbe),e(sbe,gsr),e(Td,hsr),e(Td,pW),e(pW,psr),e(Td,_sr),e(bt,usr),M(v7,bt,null),e(Go,bsr),e(Go,lo),M(Iy,lo,null),e(lo,vsr),e(lo,lbe),e(lbe,Fsr),e(lo,Tsr),e(lo,Qa),e(Qa,Msr),e(Qa,ibe),e(ibe,Esr),e(Qa,Csr),e(Qa,dbe),e(dbe,wsr),e(Qa,Asr),e(Qa,cbe),e(cbe,Lsr),e(Qa,ysr),e(lo,xsr),e(lo,ve),e(ve,F7),e(F7,fbe),e(fbe,$sr),e(F7,ksr),e(F7,_W),e(_W,Ssr),e(F7,Rsr),e(ve,Psr),e(ve,T7),e(T7,mbe),e(mbe,Bsr),e(T7,Isr),e(T7,uW),e(uW,Nsr),e(T7,qsr),e(ve,jsr),e(ve,M7),e(M7,gbe),e(gbe,Dsr),e(M7,Gsr),e(M7,bW),e(bW,Osr),e(M7,Vsr),e(ve,Xsr),e(ve,E7),e(E7,hbe),e(hbe,zsr),e(E7,Qsr),e(E7,vW),e(vW,Wsr),e(E7,Hsr),e(ve,Usr),e(ve,Ws),e(Ws,pbe),e(pbe,Jsr),e(Ws,Ysr),e(Ws,FW),e(FW,Ksr),e(Ws,Zsr),e(Ws,TW),e(TW,elr),e(Ws,olr),e(ve,rlr),e(ve,C7),e(C7,_be),e(_be,tlr),e(C7,alr),e(C7,MW),e(MW,nlr),e(C7,slr),e(ve,llr),e(ve,Hs),e(Hs,ube),e(ube,ilr),e(Hs,dlr),e(Hs,EW),e(EW,clr),e(Hs,flr),e(Hs,CW),e(CW,mlr),e(Hs,glr),e(ve,hlr),e(ve,w7),e(w7,bbe),e(bbe,plr),e(w7,_lr),e(w7,wW),e(wW,ulr),e(w7,blr),e(ve,vlr),e(ve,vt),e(vt,vbe),e(vbe,Flr),e(vt,Tlr),e(vt,AW),e(AW,Mlr),e(vt,Elr),e(vt,LW),e(LW,Clr),e(vt,wlr),e(vt,yW),e(yW,Alr),e(vt,Llr),e(ve,ylr),e(ve,A7),e(A7,Fbe),e(Fbe,xlr),e(A7,$lr),e(A7,xW),e(xW,klr),e(A7,Slr),e(ve,Rlr),e(ve,L7),e(L7,Tbe),e(Tbe,Plr),e(L7,Blr),e(L7,$W),e($W,Ilr),e(L7,Nlr),e(ve,qlr),e(ve,y7),e(y7,Mbe),e(Mbe,jlr),e(y7,Dlr),e(y7,kW),e(kW,Glr),e(y7,Olr),e(ve,Vlr),e(ve,x7),e(x7,Ebe),e(Ebe,Xlr),e(x7,zlr),e(x7,SW),e(SW,Qlr),e(x7,Wlr),e(ve,Hlr),e(ve,$7),e($7,Cbe),e(Cbe,Ulr),e($7,Jlr),e($7,RW),e(RW,Ylr),e($7,Klr),e(ve,Zlr),e(ve,k7),e(k7,wbe),e(wbe,eir),e(k7,oir),e(k7,PW),e(PW,rir),e(k7,tir),e(ve,air),e(ve,S7),e(S7,Abe),e(Abe,nir),e(S7,sir),e(S7,BW),e(BW,lir),e(S7,iir),e(lo,dir),e(lo,R7),e(R7,cir),e(R7,Lbe),e(Lbe,fir),e(R7,mir),e(R7,ybe),e(ybe,gir),e(lo,hir),M(P7,lo,null),b(f,PXe,u),b(f,Md,u),e(Md,B7),e(B7,xbe),M(Ny,xbe,null),e(Md,pir),e(Md,$be),e($be,_ir),b(f,BXe,u),b(f,Oo,u),M(qy,Oo,null),e(Oo,uir),e(Oo,Ed),e(Ed,bir),e(Ed,IW),e(IW,vir),e(Ed,Fir),e(Ed,NW),e(NW,Tir),e(Ed,Mir),e(Oo,Eir),e(Oo,jy),e(jy,Cir),e(jy,kbe),e(kbe,wir),e(jy,Air),e(Oo,Lir),e(Oo,Ft),M(Dy,Ft,null),e(Ft,yir),e(Ft,Sbe),e(Sbe,xir),e(Ft,$ir),e(Ft,Cd),e(Cd,kir),e(Cd,Rbe),e(Rbe,Sir),e(Cd,Rir),e(Cd,qW),e(qW,Pir),e(Cd,Bir),e(Ft,Iir),M(I7,Ft,null),e(Oo,Nir),e(Oo,io),M(Gy,io,null),e(io,qir),e(io,Pbe),e(Pbe,jir),e(io,Dir),e(io,Wa),e(Wa,Gir),e(Wa,Bbe),e(Bbe,Oir),e(Wa,Vir),e(Wa,Ibe),e(Ibe,Xir),e(Wa,zir),e(Wa,Nbe),e(Nbe,Qir),e(Wa,Wir),e(io,Hir),e(io,qbe),e(qbe,N7),e(N7,jbe),e(jbe,Uir),e(N7,Jir),e(N7,jW),e(jW,Yir),e(N7,Kir),e(io,Zir),e(io,q7),e(q7,edr),e(q7,Dbe),e(Dbe,odr),e(q7,rdr),e(q7,Gbe),e(Gbe,tdr),e(io,adr),M(j7,io,null),b(f,IXe,u),b(f,wd,u),e(wd,D7),e(D7,Obe),M(Oy,Obe,null),e(wd,ndr),e(wd,Vbe),e(Vbe,sdr),b(f,NXe,u),b(f,Vo,u),M(Vy,Vo,null),e(Vo,ldr),e(Vo,Ad),e(Ad,idr),e(Ad,DW),e(DW,ddr),e(Ad,cdr),e(Ad,GW),e(GW,fdr),e(Ad,mdr),e(Vo,gdr),e(Vo,Xy),e(Xy,hdr),e(Xy,Xbe),e(Xbe,pdr),e(Xy,_dr),e(Vo,udr),e(Vo,Tt),M(zy,Tt,null),e(Tt,bdr),e(Tt,zbe),e(zbe,vdr),e(Tt,Fdr),e(Tt,Ld),e(Ld,Tdr),e(Ld,Qbe),e(Qbe,Mdr),e(Ld,Edr),e(Ld,OW),e(OW,Cdr),e(Ld,wdr),e(Tt,Adr),M(G7,Tt,null),e(Vo,Ldr),e(Vo,co),M(Qy,co,null),e(co,ydr),e(co,Wbe),e(Wbe,xdr),e(co,$dr),e(co,Ha),e(Ha,kdr),e(Ha,Hbe),e(Hbe,Sdr),e(Ha,Rdr),e(Ha,Ube),e(Ube,Pdr),e(Ha,Bdr),e(Ha,Jbe),e(Jbe,Idr),e(Ha,Ndr),e(co,qdr),e(co,Ybe),e(Ybe,O7),e(O7,Kbe),e(Kbe,jdr),e(O7,Ddr),e(O7,VW),e(VW,Gdr),e(O7,Odr),e(co,Vdr),e(co,V7),e(V7,Xdr),e(V7,Zbe),e(Zbe,zdr),e(V7,Qdr),e(V7,eve),e(eve,Wdr),e(co,Hdr),M(X7,co,null),b(f,qXe,u),b(f,yd,u),e(yd,z7),e(z7,ove),M(Wy,ove,null),e(yd,Udr),e(yd,rve),e(rve,Jdr),b(f,jXe,u),b(f,Xo,u),M(Hy,Xo,null),e(Xo,Ydr),e(Xo,xd),e(xd,Kdr),e(xd,XW),e(XW,Zdr),e(xd,ecr),e(xd,zW),e(zW,ocr),e(xd,rcr),e(Xo,tcr),e(Xo,Uy),e(Uy,acr),e(Uy,tve),e(tve,ncr),e(Uy,scr),e(Xo,lcr),e(Xo,Mt),M(Jy,Mt,null),e(Mt,icr),e(Mt,ave),e(ave,dcr),e(Mt,ccr),e(Mt,$d),e($d,fcr),e($d,nve),e(nve,mcr),e($d,gcr),e($d,QW),e(QW,hcr),e($d,pcr),e(Mt,_cr),M(Q7,Mt,null),e(Xo,ucr),e(Xo,fo),M(Yy,fo,null),e(fo,bcr),e(fo,sve),e(sve,vcr),e(fo,Fcr),e(fo,Ua),e(Ua,Tcr),e(Ua,lve),e(lve,Mcr),e(Ua,Ecr),e(Ua,ive),e(ive,Ccr),e(Ua,wcr),e(Ua,dve),e(dve,Acr),e(Ua,Lcr),e(fo,ycr),e(fo,Pe),e(Pe,W7),e(W7,cve),e(cve,xcr),e(W7,$cr),e(W7,WW),e(WW,kcr),e(W7,Scr),e(Pe,Rcr),e(Pe,H7),e(H7,fve),e(fve,Pcr),e(H7,Bcr),e(H7,HW),e(HW,Icr),e(H7,Ncr),e(Pe,qcr),e(Pe,U7),e(U7,mve),e(mve,jcr),e(U7,Dcr),e(U7,UW),e(UW,Gcr),e(U7,Ocr),e(Pe,Vcr),e(Pe,J7),e(J7,gve),e(gve,Xcr),e(J7,zcr),e(J7,JW),e(JW,Qcr),e(J7,Wcr),e(Pe,Hcr),e(Pe,Y7),e(Y7,hve),e(hve,Ucr),e(Y7,Jcr),e(Y7,YW),e(YW,Ycr),e(Y7,Kcr),e(Pe,Zcr),e(Pe,K7),e(K7,pve),e(pve,efr),e(K7,ofr),e(K7,KW),e(KW,rfr),e(K7,tfr),e(Pe,afr),e(Pe,Z7),e(Z7,_ve),e(_ve,nfr),e(Z7,sfr),e(Z7,ZW),e(ZW,lfr),e(Z7,ifr),e(Pe,dfr),e(Pe,e8),e(e8,uve),e(uve,cfr),e(e8,ffr),e(e8,eH),e(eH,mfr),e(e8,gfr),e(Pe,hfr),e(Pe,o8),e(o8,bve),e(bve,pfr),e(o8,_fr),e(o8,oH),e(oH,ufr),e(o8,bfr),e(fo,vfr),e(fo,r8),e(r8,Ffr),e(r8,vve),e(vve,Tfr),e(r8,Mfr),e(r8,Fve),e(Fve,Efr),e(fo,Cfr),M(t8,fo,null),b(f,DXe,u),b(f,kd,u),e(kd,a8),e(a8,Tve),M(Ky,Tve,null),e(kd,wfr),e(kd,Mve),e(Mve,Afr),b(f,GXe,u),b(f,zo,u),M(Zy,zo,null),e(zo,Lfr),e(zo,Sd),e(Sd,yfr),e(Sd,rH),e(rH,xfr),e(Sd,$fr),e(Sd,tH),e(tH,kfr),e(Sd,Sfr),e(zo,Rfr),e(zo,e9),e(e9,Pfr),e(e9,Eve),e(Eve,Bfr),e(e9,Ifr),e(zo,Nfr),e(zo,Et),M(o9,Et,null),e(Et,qfr),e(Et,Cve),e(Cve,jfr),e(Et,Dfr),e(Et,Rd),e(Rd,Gfr),e(Rd,wve),e(wve,Ofr),e(Rd,Vfr),e(Rd,aH),e(aH,Xfr),e(Rd,zfr),e(Et,Qfr),M(n8,Et,null),e(zo,Wfr),e(zo,mo),M(r9,mo,null),e(mo,Hfr),e(mo,Ave),e(Ave,Ufr),e(mo,Jfr),e(mo,Ja),e(Ja,Yfr),e(Ja,Lve),e(Lve,Kfr),e(Ja,Zfr),e(Ja,yve),e(yve,emr),e(Ja,omr),e(Ja,xve),e(xve,rmr),e(Ja,tmr),e(mo,amr),e(mo,et),e(et,s8),e(s8,$ve),e($ve,nmr),e(s8,smr),e(s8,nH),e(nH,lmr),e(s8,imr),e(et,dmr),e(et,l8),e(l8,kve),e(kve,cmr),e(l8,fmr),e(l8,sH),e(sH,mmr),e(l8,gmr),e(et,hmr),e(et,i8),e(i8,Sve),e(Sve,pmr),e(i8,_mr),e(i8,lH),e(lH,umr),e(i8,bmr),e(et,vmr),e(et,d8),e(d8,Rve),e(Rve,Fmr),e(d8,Tmr),e(d8,iH),e(iH,Mmr),e(d8,Emr),e(et,Cmr),e(et,c8),e(c8,Pve),e(Pve,wmr),e(c8,Amr),e(c8,dH),e(dH,Lmr),e(c8,ymr),e(mo,xmr),e(mo,f8),e(f8,$mr),e(f8,Bve),e(Bve,kmr),e(f8,Smr),e(f8,Ive),e(Ive,Rmr),e(mo,Pmr),M(m8,mo,null),b(f,OXe,u),b(f,Pd,u),e(Pd,g8),e(g8,Nve),M(t9,Nve,null),e(Pd,Bmr),e(Pd,qve),e(qve,Imr),b(f,VXe,u),b(f,Qo,u),M(a9,Qo,null),e(Qo,Nmr),e(Qo,Bd),e(Bd,qmr),e(Bd,cH),e(cH,jmr),e(Bd,Dmr),e(Bd,fH),e(fH,Gmr),e(Bd,Omr),e(Qo,Vmr),e(Qo,n9),e(n9,Xmr),e(n9,jve),e(jve,zmr),e(n9,Qmr),e(Qo,Wmr),e(Qo,Ct),M(s9,Ct,null),e(Ct,Hmr),e(Ct,Dve),e(Dve,Umr),e(Ct,Jmr),e(Ct,Id),e(Id,Ymr),e(Id,Gve),e(Gve,Kmr),e(Id,Zmr),e(Id,mH),e(mH,egr),e(Id,ogr),e(Ct,rgr),M(h8,Ct,null),e(Qo,tgr),e(Qo,go),M(l9,go,null),e(go,agr),e(go,Ove),e(Ove,ngr),e(go,sgr),e(go,Ya),e(Ya,lgr),e(Ya,Vve),e(Vve,igr),e(Ya,dgr),e(Ya,Xve),e(Xve,cgr),e(Ya,fgr),e(Ya,zve),e(zve,mgr),e(Ya,ggr),e(go,hgr),e(go,Le),e(Le,p8),e(p8,Qve),e(Qve,pgr),e(p8,_gr),e(p8,gH),e(gH,ugr),e(p8,bgr),e(Le,vgr),e(Le,_8),e(_8,Wve),e(Wve,Fgr),e(_8,Tgr),e(_8,hH),e(hH,Mgr),e(_8,Egr),e(Le,Cgr),e(Le,u8),e(u8,Hve),e(Hve,wgr),e(u8,Agr),e(u8,pH),e(pH,Lgr),e(u8,ygr),e(Le,xgr),e(Le,b8),e(b8,Uve),e(Uve,$gr),e(b8,kgr),e(b8,_H),e(_H,Sgr),e(b8,Rgr),e(Le,Pgr),e(Le,v8),e(v8,Jve),e(Jve,Bgr),e(v8,Igr),e(v8,uH),e(uH,Ngr),e(v8,qgr),e(Le,jgr),e(Le,F8),e(F8,Yve),e(Yve,Dgr),e(F8,Ggr),e(F8,bH),e(bH,Ogr),e(F8,Vgr),e(Le,Xgr),e(Le,T8),e(T8,Kve),e(Kve,zgr),e(T8,Qgr),e(T8,vH),e(vH,Wgr),e(T8,Hgr),e(Le,Ugr),e(Le,M8),e(M8,Zve),e(Zve,Jgr),e(M8,Ygr),e(M8,FH),e(FH,Kgr),e(M8,Zgr),e(Le,ehr),e(Le,E8),e(E8,eFe),e(eFe,ohr),e(E8,rhr),e(E8,TH),e(TH,thr),e(E8,ahr),e(Le,nhr),e(Le,C8),e(C8,oFe),e(oFe,shr),e(C8,lhr),e(C8,MH),e(MH,ihr),e(C8,dhr),e(go,chr),e(go,w8),e(w8,fhr),e(w8,rFe),e(rFe,mhr),e(w8,ghr),e(w8,tFe),e(tFe,hhr),e(go,phr),M(A8,go,null),b(f,XXe,u),b(f,Nd,u),e(Nd,L8),e(L8,aFe),M(i9,aFe,null),e(Nd,_hr),e(Nd,nFe),e(nFe,uhr),b(f,zXe,u),b(f,Wo,u),M(d9,Wo,null),e(Wo,bhr),e(Wo,qd),e(qd,vhr),e(qd,EH),e(EH,Fhr),e(qd,Thr),e(qd,CH),e(CH,Mhr),e(qd,Ehr),e(Wo,Chr),e(Wo,c9),e(c9,whr),e(c9,sFe),e(sFe,Ahr),e(c9,Lhr),e(Wo,yhr),e(Wo,wt),M(f9,wt,null),e(wt,xhr),e(wt,lFe),e(lFe,$hr),e(wt,khr),e(wt,jd),e(jd,Shr),e(jd,iFe),e(iFe,Rhr),e(jd,Phr),e(jd,wH),e(wH,Bhr),e(jd,Ihr),e(wt,Nhr),M(y8,wt,null),e(Wo,qhr),e(Wo,ho),M(m9,ho,null),e(ho,jhr),e(ho,dFe),e(dFe,Dhr),e(ho,Ghr),e(ho,Ka),e(Ka,Ohr),e(Ka,cFe),e(cFe,Vhr),e(Ka,Xhr),e(Ka,fFe),e(fFe,zhr),e(Ka,Qhr),e(Ka,mFe),e(mFe,Whr),e(Ka,Hhr),e(ho,Uhr),e(ho,g9),e(g9,x8),e(x8,gFe),e(gFe,Jhr),e(x8,Yhr),e(x8,AH),e(AH,Khr),e(x8,Zhr),e(g9,epr),e(g9,$8),e($8,hFe),e(hFe,opr),e($8,rpr),e($8,LH),e(LH,tpr),e($8,apr),e(ho,npr),e(ho,k8),e(k8,spr),e(k8,pFe),e(pFe,lpr),e(k8,ipr),e(k8,_Fe),e(_Fe,dpr),e(ho,cpr),M(S8,ho,null),b(f,QXe,u),b(f,Dd,u),e(Dd,R8),e(R8,uFe),M(h9,uFe,null),e(Dd,fpr),e(Dd,bFe),e(bFe,mpr),b(f,WXe,u),b(f,Ho,u),M(p9,Ho,null),e(Ho,gpr),e(Ho,Gd),e(Gd,hpr),e(Gd,yH),e(yH,ppr),e(Gd,_pr),e(Gd,xH),e(xH,upr),e(Gd,bpr),e(Ho,vpr),e(Ho,_9),e(_9,Fpr),e(_9,vFe),e(vFe,Tpr),e(_9,Mpr),e(Ho,Epr),e(Ho,At),M(u9,At,null),e(At,Cpr),e(At,FFe),e(FFe,wpr),e(At,Apr),e(At,Od),e(Od,Lpr),e(Od,TFe),e(TFe,ypr),e(Od,xpr),e(Od,$H),e($H,$pr),e(Od,kpr),e(At,Spr),M(P8,At,null),e(Ho,Rpr),e(Ho,po),M(b9,po,null),e(po,Ppr),e(po,MFe),e(MFe,Bpr),e(po,Ipr),e(po,Za),e(Za,Npr),e(Za,EFe),e(EFe,qpr),e(Za,jpr),e(Za,CFe),e(CFe,Dpr),e(Za,Gpr),e(Za,wFe),e(wFe,Opr),e(Za,Vpr),e(po,Xpr),e(po,ot),e(ot,B8),e(B8,AFe),e(AFe,zpr),e(B8,Qpr),e(B8,kH),e(kH,Wpr),e(B8,Hpr),e(ot,Upr),e(ot,I8),e(I8,LFe),e(LFe,Jpr),e(I8,Ypr),e(I8,SH),e(SH,Kpr),e(I8,Zpr),e(ot,e_r),e(ot,N8),e(N8,yFe),e(yFe,o_r),e(N8,r_r),e(N8,RH),e(RH,t_r),e(N8,a_r),e(ot,n_r),e(ot,q8),e(q8,xFe),e(xFe,s_r),e(q8,l_r),e(q8,PH),e(PH,i_r),e(q8,d_r),e(ot,c_r),e(ot,j8),e(j8,$Fe),e($Fe,f_r),e(j8,m_r),e(j8,BH),e(BH,g_r),e(j8,h_r),e(po,p_r),e(po,D8),e(D8,__r),e(D8,kFe),e(kFe,u_r),e(D8,b_r),e(D8,SFe),e(SFe,v_r),e(po,F_r),M(G8,po,null),b(f,HXe,u),b(f,Vd,u),e(Vd,O8),e(O8,RFe),M(v9,RFe,null),e(Vd,T_r),e(Vd,PFe),e(PFe,M_r),b(f,UXe,u),b(f,Uo,u),M(F9,Uo,null),e(Uo,E_r),e(Uo,Xd),e(Xd,C_r),e(Xd,IH),e(IH,w_r),e(Xd,A_r),e(Xd,NH),e(NH,L_r),e(Xd,y_r),e(Uo,x_r),e(Uo,T9),e(T9,$_r),e(T9,BFe),e(BFe,k_r),e(T9,S_r),e(Uo,R_r),e(Uo,Lt),M(M9,Lt,null),e(Lt,P_r),e(Lt,IFe),e(IFe,B_r),e(Lt,I_r),e(Lt,zd),e(zd,N_r),e(zd,NFe),e(NFe,q_r),e(zd,j_r),e(zd,qH),e(qH,D_r),e(zd,G_r),e(Lt,O_r),M(V8,Lt,null),e(Uo,V_r),e(Uo,_o),M(E9,_o,null),e(_o,X_r),e(_o,qFe),e(qFe,z_r),e(_o,Q_r),e(_o,en),e(en,W_r),e(en,jFe),e(jFe,H_r),e(en,U_r),e(en,DFe),e(DFe,J_r),e(en,Y_r),e(en,GFe),e(GFe,K_r),e(en,Z_r),e(_o,eur),e(_o,Qd),e(Qd,X8),e(X8,OFe),e(OFe,our),e(X8,rur),e(X8,jH),e(jH,tur),e(X8,aur),e(Qd,nur),e(Qd,z8),e(z8,VFe),e(VFe,sur),e(z8,lur),e(z8,DH),e(DH,iur),e(z8,dur),e(Qd,cur),e(Qd,Q8),e(Q8,XFe),e(XFe,fur),e(Q8,mur),e(Q8,GH),e(GH,gur),e(Q8,hur),e(_o,pur),e(_o,W8),e(W8,_ur),e(W8,zFe),e(zFe,uur),e(W8,bur),e(W8,QFe),e(QFe,vur),e(_o,Fur),M(H8,_o,null),b(f,JXe,u),b(f,Wd,u),e(Wd,U8),e(U8,WFe),M(C9,WFe,null),e(Wd,Tur),e(Wd,HFe),e(HFe,Mur),b(f,YXe,u),b(f,Jo,u),M(w9,Jo,null),e(Jo,Eur),e(Jo,Hd),e(Hd,Cur),e(Hd,OH),e(OH,wur),e(Hd,Aur),e(Hd,VH),e(VH,Lur),e(Hd,yur),e(Jo,xur),e(Jo,A9),e(A9,$ur),e(A9,UFe),e(UFe,kur),e(A9,Sur),e(Jo,Rur),e(Jo,yt),M(L9,yt,null),e(yt,Pur),e(yt,JFe),e(JFe,Bur),e(yt,Iur),e(yt,Ud),e(Ud,Nur),e(Ud,YFe),e(YFe,qur),e(Ud,jur),e(Ud,XH),e(XH,Dur),e(Ud,Gur),e(yt,Our),M(J8,yt,null),e(Jo,Vur),e(Jo,uo),M(y9,uo,null),e(uo,Xur),e(uo,KFe),e(KFe,zur),e(uo,Qur),e(uo,on),e(on,Wur),e(on,ZFe),e(ZFe,Hur),e(on,Uur),e(on,eTe),e(eTe,Jur),e(on,Yur),e(on,oTe),e(oTe,Kur),e(on,Zur),e(uo,e1r),e(uo,Jd),e(Jd,Y8),e(Y8,rTe),e(rTe,o1r),e(Y8,r1r),e(Y8,zH),e(zH,t1r),e(Y8,a1r),e(Jd,n1r),e(Jd,K8),e(K8,tTe),e(tTe,s1r),e(K8,l1r),e(K8,QH),e(QH,i1r),e(K8,d1r),e(Jd,c1r),e(Jd,Z8),e(Z8,aTe),e(aTe,f1r),e(Z8,m1r),e(Z8,WH),e(WH,g1r),e(Z8,h1r),e(uo,p1r),e(uo,eM),e(eM,_1r),e(eM,nTe),e(nTe,u1r),e(eM,b1r),e(eM,sTe),e(sTe,v1r),e(uo,F1r),M(oM,uo,null),b(f,KXe,u),b(f,Yd,u),e(Yd,rM),e(rM,lTe),M(x9,lTe,null),e(Yd,T1r),e(Yd,iTe),e(iTe,M1r),b(f,ZXe,u),b(f,Yo,u),M($9,Yo,null),e(Yo,E1r),e(Yo,Kd),e(Kd,C1r),e(Kd,HH),e(HH,w1r),e(Kd,A1r),e(Kd,UH),e(UH,L1r),e(Kd,y1r),e(Yo,x1r),e(Yo,k9),e(k9,$1r),e(k9,dTe),e(dTe,k1r),e(k9,S1r),e(Yo,R1r),e(Yo,xt),M(S9,xt,null),e(xt,P1r),e(xt,cTe),e(cTe,B1r),e(xt,I1r),e(xt,Zd),e(Zd,N1r),e(Zd,fTe),e(fTe,q1r),e(Zd,j1r),e(Zd,JH),e(JH,D1r),e(Zd,G1r),e(xt,O1r),M(tM,xt,null),e(Yo,V1r),e(Yo,bo),M(R9,bo,null),e(bo,X1r),e(bo,mTe),e(mTe,z1r),e(bo,Q1r),e(bo,rn),e(rn,W1r),e(rn,gTe),e(gTe,H1r),e(rn,U1r),e(rn,hTe),e(hTe,J1r),e(rn,Y1r),e(rn,pTe),e(pTe,K1r),e(rn,Z1r),e(bo,e2r),e(bo,_Te),e(_Te,aM),e(aM,uTe),e(uTe,o2r),e(aM,r2r),e(aM,YH),e(YH,t2r),e(aM,a2r),e(bo,n2r),e(bo,nM),e(nM,s2r),e(nM,bTe),e(bTe,l2r),e(nM,i2r),e(nM,vTe),e(vTe,d2r),e(bo,c2r),M(sM,bo,null),b(f,eze,u),b(f,ec,u),e(ec,lM),e(lM,FTe),M(P9,FTe,null),e(ec,f2r),e(ec,TTe),e(TTe,m2r),b(f,oze,u),b(f,Ko,u),M(B9,Ko,null),e(Ko,g2r),e(Ko,oc),e(oc,h2r),e(oc,KH),e(KH,p2r),e(oc,_2r),e(oc,ZH),e(ZH,u2r),e(oc,b2r),e(Ko,v2r),e(Ko,I9),e(I9,F2r),e(I9,MTe),e(MTe,T2r),e(I9,M2r),e(Ko,E2r),e(Ko,$t),M(N9,$t,null),e($t,C2r),e($t,ETe),e(ETe,w2r),e($t,A2r),e($t,rc),e(rc,L2r),e(rc,CTe),e(CTe,y2r),e(rc,x2r),e(rc,eU),e(eU,$2r),e(rc,k2r),e($t,S2r),M(iM,$t,null),e(Ko,R2r),e(Ko,vo),M(q9,vo,null),e(vo,P2r),e(vo,wTe),e(wTe,B2r),e(vo,I2r),e(vo,tn),e(tn,N2r),e(tn,ATe),e(ATe,q2r),e(tn,j2r),e(tn,LTe),e(LTe,D2r),e(tn,G2r),e(tn,yTe),e(yTe,O2r),e(tn,V2r),e(vo,X2r),e(vo,rt),e(rt,dM),e(dM,xTe),e(xTe,z2r),e(dM,Q2r),e(dM,oU),e(oU,W2r),e(dM,H2r),e(rt,U2r),e(rt,cM),e(cM,$Te),e($Te,J2r),e(cM,Y2r),e(cM,rU),e(rU,K2r),e(cM,Z2r),e(rt,ebr),e(rt,fM),e(fM,kTe),e(kTe,obr),e(fM,rbr),e(fM,tU),e(tU,tbr),e(fM,abr),e(rt,nbr),e(rt,mM),e(mM,STe),e(STe,sbr),e(mM,lbr),e(mM,aU),e(aU,ibr),e(mM,dbr),e(rt,cbr),e(rt,gM),e(gM,RTe),e(RTe,fbr),e(gM,mbr),e(gM,nU),e(nU,gbr),e(gM,hbr),e(vo,pbr),e(vo,hM),e(hM,_br),e(hM,PTe),e(PTe,ubr),e(hM,bbr),e(hM,BTe),e(BTe,vbr),e(vo,Fbr),M(pM,vo,null),b(f,rze,u),b(f,tc,u),e(tc,_M),e(_M,ITe),M(j9,ITe,null),e(tc,Tbr),e(tc,NTe),e(NTe,Mbr),b(f,tze,u),b(f,Zo,u),M(D9,Zo,null),e(Zo,Ebr),e(Zo,ac),e(ac,Cbr),e(ac,sU),e(sU,wbr),e(ac,Abr),e(ac,lU),e(lU,Lbr),e(ac,ybr),e(Zo,xbr),e(Zo,G9),e(G9,$br),e(G9,qTe),e(qTe,kbr),e(G9,Sbr),e(Zo,Rbr),e(Zo,kt),M(O9,kt,null),e(kt,Pbr),e(kt,jTe),e(jTe,Bbr),e(kt,Ibr),e(kt,nc),e(nc,Nbr),e(nc,DTe),e(DTe,qbr),e(nc,jbr),e(nc,iU),e(iU,Dbr),e(nc,Gbr),e(kt,Obr),M(uM,kt,null),e(Zo,Vbr),e(Zo,Fo),M(V9,Fo,null),e(Fo,Xbr),e(Fo,GTe),e(GTe,zbr),e(Fo,Qbr),e(Fo,an),e(an,Wbr),e(an,OTe),e(OTe,Hbr),e(an,Ubr),e(an,VTe),e(VTe,Jbr),e(an,Ybr),e(an,XTe),e(XTe,Kbr),e(an,Zbr),e(Fo,evr),e(Fo,zTe),e(zTe,bM),e(bM,QTe),e(QTe,ovr),e(bM,rvr),e(bM,dU),e(dU,tvr),e(bM,avr),e(Fo,nvr),e(Fo,vM),e(vM,svr),e(vM,WTe),e(WTe,lvr),e(vM,ivr),e(vM,HTe),e(HTe,dvr),e(Fo,cvr),M(FM,Fo,null),b(f,aze,u),b(f,sc,u),e(sc,TM),e(TM,UTe),M(X9,UTe,null),e(sc,fvr),e(sc,JTe),e(JTe,mvr),b(f,nze,u),b(f,er,u),M(z9,er,null),e(er,gvr),e(er,lc),e(lc,hvr),e(lc,cU),e(cU,pvr),e(lc,_vr),e(lc,fU),e(fU,uvr),e(lc,bvr),e(er,vvr),e(er,Q9),e(Q9,Fvr),e(Q9,YTe),e(YTe,Tvr),e(Q9,Mvr),e(er,Evr),e(er,St),M(W9,St,null),e(St,Cvr),e(St,KTe),e(KTe,wvr),e(St,Avr),e(St,ic),e(ic,Lvr),e(ic,ZTe),e(ZTe,yvr),e(ic,xvr),e(ic,mU),e(mU,$vr),e(ic,kvr),e(St,Svr),M(MM,St,null),e(er,Rvr),e(er,yr),M(H9,yr,null),e(yr,Pvr),e(yr,e7e),e(e7e,Bvr),e(yr,Ivr),e(yr,nn),e(nn,Nvr),e(nn,o7e),e(o7e,qvr),e(nn,jvr),e(nn,r7e),e(r7e,Dvr),e(nn,Gvr),e(nn,t7e),e(t7e,Ovr),e(nn,Vvr),e(yr,Xvr),e(yr,j),e(j,EM),e(EM,a7e),e(a7e,zvr),e(EM,Qvr),e(EM,gU),e(gU,Wvr),e(EM,Hvr),e(j,Uvr),e(j,CM),e(CM,n7e),e(n7e,Jvr),e(CM,Yvr),e(CM,hU),e(hU,Kvr),e(CM,Zvr),e(j,eFr),e(j,wM),e(wM,s7e),e(s7e,oFr),e(wM,rFr),e(wM,pU),e(pU,tFr),e(wM,aFr),e(j,nFr),e(j,AM),e(AM,l7e),e(l7e,sFr),e(AM,lFr),e(AM,_U),e(_U,iFr),e(AM,dFr),e(j,cFr),e(j,LM),e(LM,i7e),e(i7e,fFr),e(LM,mFr),e(LM,uU),e(uU,gFr),e(LM,hFr),e(j,pFr),e(j,yM),e(yM,d7e),e(d7e,_Fr),e(yM,uFr),e(yM,bU),e(bU,bFr),e(yM,vFr),e(j,FFr),e(j,xM),e(xM,c7e),e(c7e,TFr),e(xM,MFr),e(xM,vU),e(vU,EFr),e(xM,CFr),e(j,wFr),e(j,$M),e($M,f7e),e(f7e,AFr),e($M,LFr),e($M,FU),e(FU,yFr),e($M,xFr),e(j,$Fr),e(j,kM),e(kM,m7e),e(m7e,kFr),e(kM,SFr),e(kM,TU),e(TU,RFr),e(kM,PFr),e(j,BFr),e(j,SM),e(SM,g7e),e(g7e,IFr),e(SM,NFr),e(SM,MU),e(MU,qFr),e(SM,jFr),e(j,DFr),e(j,RM),e(RM,h7e),e(h7e,GFr),e(RM,OFr),e(RM,EU),e(EU,VFr),e(RM,XFr),e(j,zFr),e(j,PM),e(PM,p7e),e(p7e,QFr),e(PM,WFr),e(PM,CU),e(CU,HFr),e(PM,UFr),e(j,JFr),e(j,BM),e(BM,_7e),e(_7e,YFr),e(BM,KFr),e(BM,wU),e(wU,ZFr),e(BM,eTr),e(j,oTr),e(j,IM),e(IM,u7e),e(u7e,rTr),e(IM,tTr),e(IM,AU),e(AU,aTr),e(IM,nTr),e(j,sTr),e(j,NM),e(NM,b7e),e(b7e,lTr),e(NM,iTr),e(NM,LU),e(LU,dTr),e(NM,cTr),e(j,fTr),e(j,qM),e(qM,v7e),e(v7e,mTr),e(qM,gTr),e(qM,yU),e(yU,hTr),e(qM,pTr),e(j,_Tr),e(j,jM),e(jM,F7e),e(F7e,uTr),e(jM,bTr),e(jM,xU),e(xU,vTr),e(jM,FTr),e(j,TTr),e(j,Us),e(Us,T7e),e(T7e,MTr),e(Us,ETr),e(Us,$U),e($U,CTr),e(Us,wTr),e(Us,kU),e(kU,ATr),e(Us,LTr),e(j,yTr),e(j,DM),e(DM,M7e),e(M7e,xTr),e(DM,$Tr),e(DM,SU),e(SU,kTr),e(DM,STr),e(j,RTr),e(j,GM),e(GM,E7e),e(E7e,PTr),e(GM,BTr),e(GM,RU),e(RU,ITr),e(GM,NTr),e(j,qTr),e(j,OM),e(OM,C7e),e(C7e,jTr),e(OM,DTr),e(OM,PU),e(PU,GTr),e(OM,OTr),e(j,VTr),e(j,VM),e(VM,w7e),e(w7e,XTr),e(VM,zTr),e(VM,BU),e(BU,QTr),e(VM,WTr),e(j,HTr),e(j,XM),e(XM,A7e),e(A7e,UTr),e(XM,JTr),e(XM,IU),e(IU,YTr),e(XM,KTr),e(j,ZTr),e(j,zM),e(zM,L7e),e(L7e,e7r),e(zM,o7r),e(zM,NU),e(NU,r7r),e(zM,t7r),e(j,a7r),e(j,QM),e(QM,y7e),e(y7e,n7r),e(QM,s7r),e(QM,qU),e(qU,l7r),e(QM,i7r),e(j,d7r),e(j,WM),e(WM,x7e),e(x7e,c7r),e(WM,f7r),e(WM,jU),e(jU,m7r),e(WM,g7r),e(j,h7r),e(j,HM),e(HM,$7e),e($7e,p7r),e(HM,_7r),e(HM,DU),e(DU,u7r),e(HM,b7r),e(j,v7r),e(j,UM),e(UM,k7e),e(k7e,F7r),e(UM,T7r),e(UM,GU),e(GU,M7r),e(UM,E7r),e(j,C7r),e(j,JM),e(JM,S7e),e(S7e,w7r),e(JM,A7r),e(JM,OU),e(OU,L7r),e(JM,y7r),e(j,x7r),e(j,YM),e(YM,R7e),e(R7e,$7r),e(YM,k7r),e(YM,VU),e(VU,S7r),e(YM,R7r),e(j,P7r),e(j,KM),e(KM,P7e),e(P7e,B7r),e(KM,I7r),e(KM,XU),e(XU,N7r),e(KM,q7r),e(j,j7r),e(j,ZM),e(ZM,B7e),e(B7e,D7r),e(ZM,G7r),e(ZM,zU),e(zU,O7r),e(ZM,V7r),e(j,X7r),e(j,e4),e(e4,I7e),e(I7e,z7r),e(e4,Q7r),e(e4,QU),e(QU,W7r),e(e4,H7r),e(j,U7r),e(j,o4),e(o4,N7e),e(N7e,J7r),e(o4,Y7r),e(o4,WU),e(WU,K7r),e(o4,Z7r),e(j,e8r),e(j,r4),e(r4,q7e),e(q7e,o8r),e(r4,r8r),e(r4,HU),e(HU,t8r),e(r4,a8r),e(j,n8r),e(j,t4),e(t4,j7e),e(j7e,s8r),e(t4,l8r),e(t4,UU),e(UU,i8r),e(t4,d8r),e(j,c8r),e(j,a4),e(a4,D7e),e(D7e,f8r),e(a4,m8r),e(a4,JU),e(JU,g8r),e(a4,h8r),e(j,p8r),e(j,n4),e(n4,G7e),e(G7e,_8r),e(n4,u8r),e(n4,YU),e(YU,b8r),e(n4,v8r),e(j,F8r),e(j,s4),e(s4,O7e),e(O7e,T8r),e(s4,M8r),e(s4,KU),e(KU,E8r),e(s4,C8r),e(j,w8r),e(j,l4),e(l4,V7e),e(V7e,A8r),e(l4,L8r),e(l4,ZU),e(ZU,y8r),e(l4,x8r),e(j,$8r),e(j,i4),e(i4,X7e),e(X7e,k8r),e(i4,S8r),e(i4,eJ),e(eJ,R8r),e(i4,P8r),e(j,B8r),e(j,d4),e(d4,z7e),e(z7e,I8r),e(d4,N8r),e(d4,oJ),e(oJ,q8r),e(d4,j8r),e(j,D8r),e(j,c4),e(c4,Q7e),e(Q7e,G8r),e(c4,O8r),e(c4,rJ),e(rJ,V8r),e(c4,X8r),e(j,z8r),e(j,f4),e(f4,W7e),e(W7e,Q8r),e(f4,W8r),e(f4,tJ),e(tJ,H8r),e(f4,U8r),e(j,J8r),e(j,m4),e(m4,H7e),e(H7e,Y8r),e(m4,K8r),e(m4,aJ),e(aJ,Z8r),e(m4,eMr),e(j,oMr),e(j,g4),e(g4,U7e),e(U7e,rMr),e(g4,tMr),e(g4,nJ),e(nJ,aMr),e(g4,nMr),e(j,sMr),e(j,h4),e(h4,J7e),e(J7e,lMr),e(h4,iMr),e(h4,sJ),e(sJ,dMr),e(h4,cMr),e(j,fMr),e(j,p4),e(p4,Y7e),e(Y7e,mMr),e(p4,gMr),e(p4,lJ),e(lJ,hMr),e(p4,pMr),e(yr,_Mr),M(_4,yr,null),b(f,sze,u),b(f,dc,u),e(dc,u4),e(u4,K7e),M(U9,K7e,null),e(dc,uMr),e(dc,Z7e),e(Z7e,bMr),b(f,lze,u),b(f,or,u),M(J9,or,null),e(or,vMr),e(or,cc),e(cc,FMr),e(cc,iJ),e(iJ,TMr),e(cc,MMr),e(cc,dJ),e(dJ,EMr),e(cc,CMr),e(or,wMr),e(or,Y9),e(Y9,AMr),e(Y9,e8e),e(e8e,LMr),e(Y9,yMr),e(or,xMr),e(or,Rt),M(K9,Rt,null),e(Rt,$Mr),e(Rt,o8e),e(o8e,kMr),e(Rt,SMr),e(Rt,fc),e(fc,RMr),e(fc,r8e),e(r8e,PMr),e(fc,BMr),e(fc,cJ),e(cJ,IMr),e(fc,NMr),e(Rt,qMr),M(b4,Rt,null),e(or,jMr),e(or,xr),M(Z9,xr,null),e(xr,DMr),e(xr,t8e),e(t8e,GMr),e(xr,OMr),e(xr,sn),e(sn,VMr),e(sn,a8e),e(a8e,XMr),e(sn,zMr),e(sn,n8e),e(n8e,QMr),e(sn,WMr),e(sn,s8e),e(s8e,HMr),e(sn,UMr),e(xr,JMr),e(xr,se),e(se,v4),e(v4,l8e),e(l8e,YMr),e(v4,KMr),e(v4,fJ),e(fJ,ZMr),e(v4,e4r),e(se,o4r),e(se,F4),e(F4,i8e),e(i8e,r4r),e(F4,t4r),e(F4,mJ),e(mJ,a4r),e(F4,n4r),e(se,s4r),e(se,T4),e(T4,d8e),e(d8e,l4r),e(T4,i4r),e(T4,gJ),e(gJ,d4r),e(T4,c4r),e(se,f4r),e(se,M4),e(M4,c8e),e(c8e,m4r),e(M4,g4r),e(M4,hJ),e(hJ,h4r),e(M4,p4r),e(se,_4r),e(se,E4),e(E4,f8e),e(f8e,u4r),e(E4,b4r),e(E4,pJ),e(pJ,v4r),e(E4,F4r),e(se,T4r),e(se,C4),e(C4,m8e),e(m8e,M4r),e(C4,E4r),e(C4,_J),e(_J,C4r),e(C4,w4r),e(se,A4r),e(se,w4),e(w4,g8e),e(g8e,L4r),e(w4,y4r),e(w4,uJ),e(uJ,x4r),e(w4,$4r),e(se,k4r),e(se,A4),e(A4,h8e),e(h8e,S4r),e(A4,R4r),e(A4,bJ),e(bJ,P4r),e(A4,B4r),e(se,I4r),e(se,L4),e(L4,p8e),e(p8e,N4r),e(L4,q4r),e(L4,vJ),e(vJ,j4r),e(L4,D4r),e(se,G4r),e(se,y4),e(y4,_8e),e(_8e,O4r),e(y4,V4r),e(y4,FJ),e(FJ,X4r),e(y4,z4r),e(se,Q4r),e(se,x4),e(x4,u8e),e(u8e,W4r),e(x4,H4r),e(x4,TJ),e(TJ,U4r),e(x4,J4r),e(se,Y4r),e(se,$4),e($4,b8e),e(b8e,K4r),e($4,Z4r),e($4,MJ),e(MJ,eEr),e($4,oEr),e(se,rEr),e(se,k4),e(k4,v8e),e(v8e,tEr),e(k4,aEr),e(k4,EJ),e(EJ,nEr),e(k4,sEr),e(se,lEr),e(se,S4),e(S4,F8e),e(F8e,iEr),e(S4,dEr),e(S4,CJ),e(CJ,cEr),e(S4,fEr),e(se,mEr),e(se,R4),e(R4,T8e),e(T8e,gEr),e(R4,hEr),e(R4,wJ),e(wJ,pEr),e(R4,_Er),e(se,uEr),e(se,P4),e(P4,M8e),e(M8e,bEr),e(P4,vEr),e(P4,AJ),e(AJ,FEr),e(P4,TEr),e(se,MEr),e(se,B4),e(B4,E8e),e(E8e,EEr),e(B4,CEr),e(B4,LJ),e(LJ,wEr),e(B4,AEr),e(se,LEr),e(se,I4),e(I4,C8e),e(C8e,yEr),e(I4,xEr),e(I4,yJ),e(yJ,$Er),e(I4,kEr),e(se,SEr),e(se,N4),e(N4,w8e),e(w8e,REr),e(N4,PEr),e(N4,xJ),e(xJ,BEr),e(N4,IEr),e(se,NEr),e(se,q4),e(q4,A8e),e(A8e,qEr),e(q4,jEr),e(q4,$J),e($J,DEr),e(q4,GEr),e(se,OEr),e(se,j4),e(j4,L8e),e(L8e,VEr),e(j4,XEr),e(j4,kJ),e(kJ,zEr),e(j4,QEr),e(se,WEr),e(se,D4),e(D4,y8e),e(y8e,HEr),e(D4,UEr),e(D4,SJ),e(SJ,JEr),e(D4,YEr),e(se,KEr),e(se,G4),e(G4,x8e),e(x8e,ZEr),e(G4,eCr),e(G4,RJ),e(RJ,oCr),e(G4,rCr),e(xr,tCr),M(O4,xr,null),b(f,ize,u),b(f,mc,u),e(mc,V4),e(V4,$8e),M(ex,$8e,null),e(mc,aCr),e(mc,k8e),e(k8e,nCr),b(f,dze,u),b(f,rr,u),M(ox,rr,null),e(rr,sCr),e(rr,gc),e(gc,lCr),e(gc,PJ),e(PJ,iCr),e(gc,dCr),e(gc,BJ),e(BJ,cCr),e(gc,fCr),e(rr,mCr),e(rr,rx),e(rx,gCr),e(rx,S8e),e(S8e,hCr),e(rx,pCr),e(rr,_Cr),e(rr,Pt),M(tx,Pt,null),e(Pt,uCr),e(Pt,R8e),e(R8e,bCr),e(Pt,vCr),e(Pt,hc),e(hc,FCr),e(hc,P8e),e(P8e,TCr),e(hc,MCr),e(hc,IJ),e(IJ,ECr),e(hc,CCr),e(Pt,wCr),M(X4,Pt,null),e(rr,ACr),e(rr,$r),M(ax,$r,null),e($r,LCr),e($r,B8e),e(B8e,yCr),e($r,xCr),e($r,ln),e(ln,$Cr),e(ln,I8e),e(I8e,kCr),e(ln,SCr),e(ln,N8e),e(N8e,RCr),e(ln,PCr),e(ln,q8e),e(q8e,BCr),e(ln,ICr),e($r,NCr),e($r,Me),e(Me,z4),e(z4,j8e),e(j8e,qCr),e(z4,jCr),e(z4,NJ),e(NJ,DCr),e(z4,GCr),e(Me,OCr),e(Me,Q4),e(Q4,D8e),e(D8e,VCr),e(Q4,XCr),e(Q4,qJ),e(qJ,zCr),e(Q4,QCr),e(Me,WCr),e(Me,W4),e(W4,G8e),e(G8e,HCr),e(W4,UCr),e(W4,jJ),e(jJ,JCr),e(W4,YCr),e(Me,KCr),e(Me,H4),e(H4,O8e),e(O8e,ZCr),e(H4,e3r),e(H4,DJ),e(DJ,o3r),e(H4,r3r),e(Me,t3r),e(Me,U4),e(U4,V8e),e(V8e,a3r),e(U4,n3r),e(U4,GJ),e(GJ,s3r),e(U4,l3r),e(Me,i3r),e(Me,J4),e(J4,X8e),e(X8e,d3r),e(J4,c3r),e(J4,OJ),e(OJ,f3r),e(J4,m3r),e(Me,g3r),e(Me,Y4),e(Y4,z8e),e(z8e,h3r),e(Y4,p3r),e(Y4,VJ),e(VJ,_3r),e(Y4,u3r),e(Me,b3r),e(Me,K4),e(K4,Q8e),e(Q8e,v3r),e(K4,F3r),e(K4,XJ),e(XJ,T3r),e(K4,M3r),e(Me,E3r),e(Me,Z4),e(Z4,W8e),e(W8e,C3r),e(Z4,w3r),e(Z4,zJ),e(zJ,A3r),e(Z4,L3r),e(Me,y3r),e(Me,eE),e(eE,H8e),e(H8e,x3r),e(eE,$3r),e(eE,QJ),e(QJ,k3r),e(eE,S3r),e(Me,R3r),e(Me,oE),e(oE,U8e),e(U8e,P3r),e(oE,B3r),e(oE,WJ),e(WJ,I3r),e(oE,N3r),e(Me,q3r),e(Me,rE),e(rE,J8e),e(J8e,j3r),e(rE,D3r),e(rE,HJ),e(HJ,G3r),e(rE,O3r),e(Me,V3r),e(Me,tE),e(tE,Y8e),e(Y8e,X3r),e(tE,z3r),e(tE,UJ),e(UJ,Q3r),e(tE,W3r),e($r,H3r),M(aE,$r,null),b(f,cze,u),b(f,pc,u),e(pc,nE),e(nE,K8e),M(nx,K8e,null),e(pc,U3r),e(pc,Z8e),e(Z8e,J3r),b(f,fze,u),b(f,tr,u),M(sx,tr,null),e(tr,Y3r),e(tr,_c),e(_c,K3r),e(_c,JJ),e(JJ,Z3r),e(_c,e5r),e(_c,YJ),e(YJ,o5r),e(_c,r5r),e(tr,t5r),e(tr,lx),e(lx,a5r),e(lx,eMe),e(eMe,n5r),e(lx,s5r),e(tr,l5r),e(tr,Bt),M(ix,Bt,null),e(Bt,i5r),e(Bt,oMe),e(oMe,d5r),e(Bt,c5r),e(Bt,uc),e(uc,f5r),e(uc,rMe),e(rMe,m5r),e(uc,g5r),e(uc,KJ),e(KJ,h5r),e(uc,p5r),e(Bt,_5r),M(sE,Bt,null),e(tr,u5r),e(tr,kr),M(dx,kr,null),e(kr,b5r),e(kr,tMe),e(tMe,v5r),e(kr,F5r),e(kr,dn),e(dn,T5r),e(dn,aMe),e(aMe,M5r),e(dn,E5r),e(dn,nMe),e(nMe,C5r),e(dn,w5r),e(dn,sMe),e(sMe,A5r),e(dn,L5r),e(kr,y5r),e(kr,tt),e(tt,lE),e(lE,lMe),e(lMe,x5r),e(lE,$5r),e(lE,ZJ),e(ZJ,k5r),e(lE,S5r),e(tt,R5r),e(tt,iE),e(iE,iMe),e(iMe,P5r),e(iE,B5r),e(iE,eY),e(eY,I5r),e(iE,N5r),e(tt,q5r),e(tt,dE),e(dE,dMe),e(dMe,j5r),e(dE,D5r),e(dE,oY),e(oY,G5r),e(dE,O5r),e(tt,V5r),e(tt,cE),e(cE,cMe),e(cMe,X5r),e(cE,z5r),e(cE,rY),e(rY,Q5r),e(cE,W5r),e(tt,H5r),e(tt,fE),e(fE,fMe),e(fMe,U5r),e(fE,J5r),e(fE,tY),e(tY,Y5r),e(fE,K5r),e(kr,Z5r),M(mE,kr,null),b(f,mze,u),b(f,bc,u),e(bc,gE),e(gE,mMe),M(cx,mMe,null),e(bc,e0r),e(bc,gMe),e(gMe,o0r),b(f,gze,u),b(f,ar,u),M(fx,ar,null),e(ar,r0r),e(ar,vc),e(vc,t0r),e(vc,aY),e(aY,a0r),e(vc,n0r),e(vc,nY),e(nY,s0r),e(vc,l0r),e(ar,i0r),e(ar,mx),e(mx,d0r),e(mx,hMe),e(hMe,c0r),e(mx,f0r),e(ar,m0r),e(ar,It),M(gx,It,null),e(It,g0r),e(It,pMe),e(pMe,h0r),e(It,p0r),e(It,Fc),e(Fc,_0r),e(Fc,_Me),e(_Me,u0r),e(Fc,b0r),e(Fc,sY),e(sY,v0r),e(Fc,F0r),e(It,T0r),M(hE,It,null),e(ar,M0r),e(ar,Sr),M(hx,Sr,null),e(Sr,E0r),e(Sr,uMe),e(uMe,C0r),e(Sr,w0r),e(Sr,cn),e(cn,A0r),e(cn,bMe),e(bMe,L0r),e(cn,y0r),e(cn,vMe),e(vMe,x0r),e(cn,$0r),e(cn,FMe),e(FMe,k0r),e(cn,S0r),e(Sr,R0r),e(Sr,ie),e(ie,pE),e(pE,TMe),e(TMe,P0r),e(pE,B0r),e(pE,lY),e(lY,I0r),e(pE,N0r),e(ie,q0r),e(ie,_E),e(_E,MMe),e(MMe,j0r),e(_E,D0r),e(_E,iY),e(iY,G0r),e(_E,O0r),e(ie,V0r),e(ie,uE),e(uE,EMe),e(EMe,X0r),e(uE,z0r),e(uE,dY),e(dY,Q0r),e(uE,W0r),e(ie,H0r),e(ie,bE),e(bE,CMe),e(CMe,U0r),e(bE,J0r),e(bE,cY),e(cY,Y0r),e(bE,K0r),e(ie,Z0r),e(ie,vE),e(vE,wMe),e(wMe,ewr),e(vE,owr),e(vE,fY),e(fY,rwr),e(vE,twr),e(ie,awr),e(ie,FE),e(FE,AMe),e(AMe,nwr),e(FE,swr),e(FE,mY),e(mY,lwr),e(FE,iwr),e(ie,dwr),e(ie,TE),e(TE,LMe),e(LMe,cwr),e(TE,fwr),e(TE,gY),e(gY,mwr),e(TE,gwr),e(ie,hwr),e(ie,ME),e(ME,yMe),e(yMe,pwr),e(ME,_wr),e(ME,hY),e(hY,uwr),e(ME,bwr),e(ie,vwr),e(ie,EE),e(EE,xMe),e(xMe,Fwr),e(EE,Twr),e(EE,pY),e(pY,Mwr),e(EE,Ewr),e(ie,Cwr),e(ie,CE),e(CE,$Me),e($Me,wwr),e(CE,Awr),e(CE,_Y),e(_Y,Lwr),e(CE,ywr),e(ie,xwr),e(ie,wE),e(wE,kMe),e(kMe,$wr),e(wE,kwr),e(wE,uY),e(uY,Swr),e(wE,Rwr),e(ie,Pwr),e(ie,AE),e(AE,SMe),e(SMe,Bwr),e(AE,Iwr),e(AE,bY),e(bY,Nwr),e(AE,qwr),e(ie,jwr),e(ie,LE),e(LE,RMe),e(RMe,Dwr),e(LE,Gwr),e(LE,vY),e(vY,Owr),e(LE,Vwr),e(ie,Xwr),e(ie,yE),e(yE,PMe),e(PMe,zwr),e(yE,Qwr),e(yE,FY),e(FY,Wwr),e(yE,Hwr),e(ie,Uwr),e(ie,xE),e(xE,BMe),e(BMe,Jwr),e(xE,Ywr),e(xE,TY),e(TY,Kwr),e(xE,Zwr),e(ie,eAr),e(ie,$E),e($E,IMe),e(IMe,oAr),e($E,rAr),e($E,MY),e(MY,tAr),e($E,aAr),e(ie,nAr),e(ie,kE),e(kE,NMe),e(NMe,sAr),e(kE,lAr),e(kE,EY),e(EY,iAr),e(kE,dAr),e(ie,cAr),e(ie,SE),e(SE,qMe),e(qMe,fAr),e(SE,mAr),e(SE,CY),e(CY,gAr),e(SE,hAr),e(ie,pAr),e(ie,RE),e(RE,jMe),e(jMe,_Ar),e(RE,uAr),e(RE,wY),e(wY,bAr),e(RE,vAr),e(ie,FAr),e(ie,PE),e(PE,DMe),e(DMe,TAr),e(PE,MAr),e(PE,AY),e(AY,EAr),e(PE,CAr),e(Sr,wAr),M(BE,Sr,null),b(f,hze,u),b(f,Tc,u),e(Tc,IE),e(IE,GMe),M(px,GMe,null),e(Tc,AAr),e(Tc,OMe),e(OMe,LAr),b(f,pze,u),b(f,nr,u),M(_x,nr,null),e(nr,yAr),e(nr,Mc),e(Mc,xAr),e(Mc,LY),e(LY,$Ar),e(Mc,kAr),e(Mc,yY),e(yY,SAr),e(Mc,RAr),e(nr,PAr),e(nr,ux),e(ux,BAr),e(ux,VMe),e(VMe,IAr),e(ux,NAr),e(nr,qAr),e(nr,Nt),M(bx,Nt,null),e(Nt,jAr),e(Nt,XMe),e(XMe,DAr),e(Nt,GAr),e(Nt,Ec),e(Ec,OAr),e(Ec,zMe),e(zMe,VAr),e(Ec,XAr),e(Ec,xY),e(xY,zAr),e(Ec,QAr),e(Nt,WAr),M(NE,Nt,null),e(nr,HAr),e(nr,Rr),M(vx,Rr,null),e(Rr,UAr),e(Rr,QMe),e(QMe,JAr),e(Rr,YAr),e(Rr,fn),e(fn,KAr),e(fn,WMe),e(WMe,ZAr),e(fn,e6r),e(fn,HMe),e(HMe,o6r),e(fn,r6r),e(fn,UMe),e(UMe,t6r),e(fn,a6r),e(Rr,n6r),e(Rr,ye),e(ye,qE),e(qE,JMe),e(JMe,s6r),e(qE,l6r),e(qE,$Y),e($Y,i6r),e(qE,d6r),e(ye,c6r),e(ye,jE),e(jE,YMe),e(YMe,f6r),e(jE,m6r),e(jE,kY),e(kY,g6r),e(jE,h6r),e(ye,p6r),e(ye,DE),e(DE,KMe),e(KMe,_6r),e(DE,u6r),e(DE,SY),e(SY,b6r),e(DE,v6r),e(ye,F6r),e(ye,GE),e(GE,ZMe),e(ZMe,T6r),e(GE,M6r),e(GE,RY),e(RY,E6r),e(GE,C6r),e(ye,w6r),e(ye,OE),e(OE,e4e),e(e4e,A6r),e(OE,L6r),e(OE,PY),e(PY,y6r),e(OE,x6r),e(ye,$6r),e(ye,VE),e(VE,o4e),e(o4e,k6r),e(VE,S6r),e(VE,BY),e(BY,R6r),e(VE,P6r),e(ye,B6r),e(ye,XE),e(XE,r4e),e(r4e,I6r),e(XE,N6r),e(XE,IY),e(IY,q6r),e(XE,j6r),e(ye,D6r),e(ye,zE),e(zE,t4e),e(t4e,G6r),e(zE,O6r),e(zE,NY),e(NY,V6r),e(zE,X6r),e(ye,z6r),e(ye,QE),e(QE,a4e),e(a4e,Q6r),e(QE,W6r),e(QE,qY),e(qY,H6r),e(QE,U6r),e(ye,J6r),e(ye,WE),e(WE,n4e),e(n4e,Y6r),e(WE,K6r),e(WE,jY),e(jY,Z6r),e(WE,eLr),e(Rr,oLr),M(HE,Rr,null),b(f,_ze,u),b(f,Cc,u),e(Cc,UE),e(UE,s4e),M(Fx,s4e,null),e(Cc,rLr),e(Cc,l4e),e(l4e,tLr),b(f,uze,u),b(f,sr,u),M(Tx,sr,null),e(sr,aLr),e(sr,wc),e(wc,nLr),e(wc,DY),e(DY,sLr),e(wc,lLr),e(wc,GY),e(GY,iLr),e(wc,dLr),e(sr,cLr),e(sr,Mx),e(Mx,fLr),e(Mx,i4e),e(i4e,mLr),e(Mx,gLr),e(sr,hLr),e(sr,qt),M(Ex,qt,null),e(qt,pLr),e(qt,d4e),e(d4e,_Lr),e(qt,uLr),e(qt,Ac),e(Ac,bLr),e(Ac,c4e),e(c4e,vLr),e(Ac,FLr),e(Ac,OY),e(OY,TLr),e(Ac,MLr),e(qt,ELr),M(JE,qt,null),e(sr,CLr),e(sr,Pr),M(Cx,Pr,null),e(Pr,wLr),e(Pr,f4e),e(f4e,ALr),e(Pr,LLr),e(Pr,mn),e(mn,yLr),e(mn,m4e),e(m4e,xLr),e(mn,$Lr),e(mn,g4e),e(g4e,kLr),e(mn,SLr),e(mn,h4e),e(h4e,RLr),e(mn,PLr),e(Pr,BLr),e(Pr,te),e(te,YE),e(YE,p4e),e(p4e,ILr),e(YE,NLr),e(YE,VY),e(VY,qLr),e(YE,jLr),e(te,DLr),e(te,KE),e(KE,_4e),e(_4e,GLr),e(KE,OLr),e(KE,XY),e(XY,VLr),e(KE,XLr),e(te,zLr),e(te,ZE),e(ZE,u4e),e(u4e,QLr),e(ZE,WLr),e(ZE,zY),e(zY,HLr),e(ZE,ULr),e(te,JLr),e(te,eC),e(eC,b4e),e(b4e,YLr),e(eC,KLr),e(eC,QY),e(QY,ZLr),e(eC,eyr),e(te,oyr),e(te,oC),e(oC,v4e),e(v4e,ryr),e(oC,tyr),e(oC,WY),e(WY,ayr),e(oC,nyr),e(te,syr),e(te,rC),e(rC,F4e),e(F4e,lyr),e(rC,iyr),e(rC,HY),e(HY,dyr),e(rC,cyr),e(te,fyr),e(te,tC),e(tC,T4e),e(T4e,myr),e(tC,gyr),e(tC,UY),e(UY,hyr),e(tC,pyr),e(te,_yr),e(te,aC),e(aC,M4e),e(M4e,uyr),e(aC,byr),e(aC,JY),e(JY,vyr),e(aC,Fyr),e(te,Tyr),e(te,nC),e(nC,E4e),e(E4e,Myr),e(nC,Eyr),e(nC,YY),e(YY,Cyr),e(nC,wyr),e(te,Ayr),e(te,sC),e(sC,C4e),e(C4e,Lyr),e(sC,yyr),e(sC,KY),e(KY,xyr),e(sC,$yr),e(te,kyr),e(te,lC),e(lC,w4e),e(w4e,Syr),e(lC,Ryr),e(lC,ZY),e(ZY,Pyr),e(lC,Byr),e(te,Iyr),e(te,iC),e(iC,A4e),e(A4e,Nyr),e(iC,qyr),e(iC,eK),e(eK,jyr),e(iC,Dyr),e(te,Gyr),e(te,dC),e(dC,L4e),e(L4e,Oyr),e(dC,Vyr),e(dC,oK),e(oK,Xyr),e(dC,zyr),e(te,Qyr),e(te,cC),e(cC,y4e),e(y4e,Wyr),e(cC,Hyr),e(cC,rK),e(rK,Uyr),e(cC,Jyr),e(te,Yyr),e(te,fC),e(fC,x4e),e(x4e,Kyr),e(fC,Zyr),e(fC,tK),e(tK,e9r),e(fC,o9r),e(te,r9r),e(te,mC),e(mC,$4e),e($4e,t9r),e(mC,a9r),e(mC,aK),e(aK,n9r),e(mC,s9r),e(te,l9r),e(te,gC),e(gC,k4e),e(k4e,i9r),e(gC,d9r),e(gC,nK),e(nK,c9r),e(gC,f9r),e(te,m9r),e(te,hC),e(hC,S4e),e(S4e,g9r),e(hC,h9r),e(hC,sK),e(sK,p9r),e(hC,_9r),e(te,u9r),e(te,pC),e(pC,R4e),e(R4e,b9r),e(pC,v9r),e(pC,lK),e(lK,F9r),e(pC,T9r),e(te,M9r),e(te,_C),e(_C,P4e),e(P4e,E9r),e(_C,C9r),e(_C,iK),e(iK,w9r),e(_C,A9r),e(te,L9r),e(te,uC),e(uC,B4e),e(B4e,y9r),e(uC,x9r),e(uC,dK),e(dK,$9r),e(uC,k9r),e(te,S9r),e(te,bC),e(bC,I4e),e(I4e,R9r),e(bC,P9r),e(bC,cK),e(cK,B9r),e(bC,I9r),e(te,N9r),e(te,vC),e(vC,N4e),e(N4e,q9r),e(vC,j9r),e(vC,fK),e(fK,D9r),e(vC,G9r),e(te,O9r),e(te,FC),e(FC,q4e),e(q4e,V9r),e(FC,X9r),e(FC,mK),e(mK,z9r),e(FC,Q9r),e(te,W9r),e(te,TC),e(TC,j4e),e(j4e,H9r),e(TC,U9r),e(TC,gK),e(gK,J9r),e(TC,Y9r),e(te,K9r),e(te,MC),e(MC,D4e),e(D4e,Z9r),e(MC,exr),e(MC,hK),e(hK,oxr),e(MC,rxr),e(Pr,txr),M(EC,Pr,null),b(f,bze,u),b(f,Lc,u),e(Lc,CC),e(CC,G4e),M(wx,G4e,null),e(Lc,axr),e(Lc,O4e),e(O4e,nxr),b(f,vze,u),b(f,lr,u),M(Ax,lr,null),e(lr,sxr),e(lr,yc),e(yc,lxr),e(yc,pK),e(pK,ixr),e(yc,dxr),e(yc,_K),e(_K,cxr),e(yc,fxr),e(lr,mxr),e(lr,Lx),e(Lx,gxr),e(Lx,V4e),e(V4e,hxr),e(Lx,pxr),e(lr,_xr),e(lr,jt),M(yx,jt,null),e(jt,uxr),e(jt,X4e),e(X4e,bxr),e(jt,vxr),e(jt,xc),e(xc,Fxr),e(xc,z4e),e(z4e,Txr),e(xc,Mxr),e(xc,uK),e(uK,Exr),e(xc,Cxr),e(jt,wxr),M(wC,jt,null),e(lr,Axr),e(lr,Br),M(xx,Br,null),e(Br,Lxr),e(Br,Q4e),e(Q4e,yxr),e(Br,xxr),e(Br,gn),e(gn,$xr),e(gn,W4e),e(W4e,kxr),e(gn,Sxr),e(gn,H4e),e(H4e,Rxr),e(gn,Pxr),e(gn,U4e),e(U4e,Bxr),e(gn,Ixr),e(Br,Nxr),e(Br,_e),e(_e,AC),e(AC,J4e),e(J4e,qxr),e(AC,jxr),e(AC,bK),e(bK,Dxr),e(AC,Gxr),e(_e,Oxr),e(_e,LC),e(LC,Y4e),e(Y4e,Vxr),e(LC,Xxr),e(LC,vK),e(vK,zxr),e(LC,Qxr),e(_e,Wxr),e(_e,yC),e(yC,K4e),e(K4e,Hxr),e(yC,Uxr),e(yC,FK),e(FK,Jxr),e(yC,Yxr),e(_e,Kxr),e(_e,xC),e(xC,Z4e),e(Z4e,Zxr),e(xC,e$r),e(xC,TK),e(TK,o$r),e(xC,r$r),e(_e,t$r),e(_e,$C),e($C,eEe),e(eEe,a$r),e($C,n$r),e($C,MK),e(MK,s$r),e($C,l$r),e(_e,i$r),e(_e,kC),e(kC,oEe),e(oEe,d$r),e(kC,c$r),e(kC,EK),e(EK,f$r),e(kC,m$r),e(_e,g$r),e(_e,SC),e(SC,rEe),e(rEe,h$r),e(SC,p$r),e(SC,CK),e(CK,_$r),e(SC,u$r),e(_e,b$r),e(_e,RC),e(RC,tEe),e(tEe,v$r),e(RC,F$r),e(RC,wK),e(wK,T$r),e(RC,M$r),e(_e,E$r),e(_e,PC),e(PC,aEe),e(aEe,C$r),e(PC,w$r),e(PC,AK),e(AK,A$r),e(PC,L$r),e(_e,y$r),e(_e,BC),e(BC,nEe),e(nEe,x$r),e(BC,$$r),e(BC,LK),e(LK,k$r),e(BC,S$r),e(_e,R$r),e(_e,IC),e(IC,sEe),e(sEe,P$r),e(IC,B$r),e(IC,yK),e(yK,I$r),e(IC,N$r),e(_e,q$r),e(_e,NC),e(NC,lEe),e(lEe,j$r),e(NC,D$r),e(NC,xK),e(xK,G$r),e(NC,O$r),e(_e,V$r),e(_e,qC),e(qC,iEe),e(iEe,X$r),e(qC,z$r),e(qC,$K),e($K,Q$r),e(qC,W$r),e(_e,H$r),e(_e,jC),e(jC,dEe),e(dEe,U$r),e(jC,J$r),e(jC,kK),e(kK,Y$r),e(jC,K$r),e(_e,Z$r),e(_e,DC),e(DC,cEe),e(cEe,ekr),e(DC,okr),e(DC,SK),e(SK,rkr),e(DC,tkr),e(_e,akr),e(_e,GC),e(GC,fEe),e(fEe,nkr),e(GC,skr),e(GC,RK),e(RK,lkr),e(GC,ikr),e(_e,dkr),e(_e,OC),e(OC,mEe),e(mEe,ckr),e(OC,fkr),e(OC,PK),e(PK,mkr),e(OC,gkr),e(Br,hkr),M(VC,Br,null),b(f,Fze,u),b(f,$c,u),e($c,XC),e(XC,gEe),M($x,gEe,null),e($c,pkr),e($c,hEe),e(hEe,_kr),b(f,Tze,u),b(f,ir,u),M(kx,ir,null),e(ir,ukr),e(ir,kc),e(kc,bkr),e(kc,BK),e(BK,vkr),e(kc,Fkr),e(kc,IK),e(IK,Tkr),e(kc,Mkr),e(ir,Ekr),e(ir,Sx),e(Sx,Ckr),e(Sx,pEe),e(pEe,wkr),e(Sx,Akr),e(ir,Lkr),e(ir,Dt),M(Rx,Dt,null),e(Dt,ykr),e(Dt,_Ee),e(_Ee,xkr),e(Dt,$kr),e(Dt,Sc),e(Sc,kkr),e(Sc,uEe),e(uEe,Skr),e(Sc,Rkr),e(Sc,NK),e(NK,Pkr),e(Sc,Bkr),e(Dt,Ikr),M(zC,Dt,null),e(ir,Nkr),e(ir,Ir),M(Px,Ir,null),e(Ir,qkr),e(Ir,bEe),e(bEe,jkr),e(Ir,Dkr),e(Ir,hn),e(hn,Gkr),e(hn,vEe),e(vEe,Okr),e(hn,Vkr),e(hn,FEe),e(FEe,Xkr),e(hn,zkr),e(hn,TEe),e(TEe,Qkr),e(hn,Wkr),e(Ir,Hkr),e(Ir,Bx),e(Bx,QC),e(QC,MEe),e(MEe,Ukr),e(QC,Jkr),e(QC,qK),e(qK,Ykr),e(QC,Kkr),e(Bx,Zkr),e(Bx,WC),e(WC,EEe),e(EEe,eSr),e(WC,oSr),e(WC,jK),e(jK,rSr),e(WC,tSr),e(Ir,aSr),M(HC,Ir,null),b(f,Mze,u),b(f,Rc,u),e(Rc,UC),e(UC,CEe),M(Ix,CEe,null),e(Rc,nSr),e(Rc,wEe),e(wEe,sSr),b(f,Eze,u),b(f,dr,u),M(Nx,dr,null),e(dr,lSr),e(dr,Pc),e(Pc,iSr),e(Pc,DK),e(DK,dSr),e(Pc,cSr),e(Pc,GK),e(GK,fSr),e(Pc,mSr),e(dr,gSr),e(dr,qx),e(qx,hSr),e(qx,AEe),e(AEe,pSr),e(qx,_Sr),e(dr,uSr),e(dr,Gt),M(jx,Gt,null),e(Gt,bSr),e(Gt,LEe),e(LEe,vSr),e(Gt,FSr),e(Gt,Bc),e(Bc,TSr),e(Bc,yEe),e(yEe,MSr),e(Bc,ESr),e(Bc,OK),e(OK,CSr),e(Bc,wSr),e(Gt,ASr),M(JC,Gt,null),e(dr,LSr),e(dr,Nr),M(Dx,Nr,null),e(Nr,ySr),e(Nr,xEe),e(xEe,xSr),e(Nr,$Sr),e(Nr,pn),e(pn,kSr),e(pn,$Ee),e($Ee,SSr),e(pn,RSr),e(pn,kEe),e(kEe,PSr),e(pn,BSr),e(pn,SEe),e(SEe,ISr),e(pn,NSr),e(Nr,qSr),e(Nr,REe),e(REe,YC),e(YC,PEe),e(PEe,jSr),e(YC,DSr),e(YC,VK),e(VK,GSr),e(YC,OSr),e(Nr,VSr),M(KC,Nr,null),b(f,Cze,u),b(f,Ic,u),e(Ic,ZC),e(ZC,BEe),M(Gx,BEe,null),e(Ic,XSr),e(Ic,IEe),e(IEe,zSr),b(f,wze,u),b(f,cr,u),M(Ox,cr,null),e(cr,QSr),e(cr,Nc),e(Nc,WSr),e(Nc,XK),e(XK,HSr),e(Nc,USr),e(Nc,zK),e(zK,JSr),e(Nc,YSr),e(cr,KSr),e(cr,Vx),e(Vx,ZSr),e(Vx,NEe),e(NEe,eRr),e(Vx,oRr),e(cr,rRr),e(cr,Ot),M(Xx,Ot,null),e(Ot,tRr),e(Ot,qEe),e(qEe,aRr),e(Ot,nRr),e(Ot,qc),e(qc,sRr),e(qc,jEe),e(jEe,lRr),e(qc,iRr),e(qc,QK),e(QK,dRr),e(qc,cRr),e(Ot,fRr),M(e3,Ot,null),e(cr,mRr),e(cr,qr),M(zx,qr,null),e(qr,gRr),e(qr,DEe),e(DEe,hRr),e(qr,pRr),e(qr,_n),e(_n,_Rr),e(_n,GEe),e(GEe,uRr),e(_n,bRr),e(_n,OEe),e(OEe,vRr),e(_n,FRr),e(_n,VEe),e(VEe,TRr),e(_n,MRr),e(qr,ERr),e(qr,de),e(de,o3),e(o3,XEe),e(XEe,CRr),e(o3,wRr),e(o3,WK),e(WK,ARr),e(o3,LRr),e(de,yRr),e(de,r3),e(r3,zEe),e(zEe,xRr),e(r3,$Rr),e(r3,HK),e(HK,kRr),e(r3,SRr),e(de,RRr),e(de,t3),e(t3,QEe),e(QEe,PRr),e(t3,BRr),e(t3,UK),e(UK,IRr),e(t3,NRr),e(de,qRr),e(de,a3),e(a3,WEe),e(WEe,jRr),e(a3,DRr),e(a3,JK),e(JK,GRr),e(a3,ORr),e(de,VRr),e(de,n3),e(n3,HEe),e(HEe,XRr),e(n3,zRr),e(n3,YK),e(YK,QRr),e(n3,WRr),e(de,HRr),e(de,s3),e(s3,UEe),e(UEe,URr),e(s3,JRr),e(s3,KK),e(KK,YRr),e(s3,KRr),e(de,ZRr),e(de,l3),e(l3,JEe),e(JEe,ePr),e(l3,oPr),e(l3,ZK),e(ZK,rPr),e(l3,tPr),e(de,aPr),e(de,i3),e(i3,YEe),e(YEe,nPr),e(i3,sPr),e(i3,eZ),e(eZ,lPr),e(i3,iPr),e(de,dPr),e(de,d3),e(d3,KEe),e(KEe,cPr),e(d3,fPr),e(d3,oZ),e(oZ,mPr),e(d3,gPr),e(de,hPr),e(de,c3),e(c3,ZEe),e(ZEe,pPr),e(c3,_Pr),e(c3,rZ),e(rZ,uPr),e(c3,bPr),e(de,vPr),e(de,f3),e(f3,eCe),e(eCe,FPr),e(f3,TPr),e(f3,tZ),e(tZ,MPr),e(f3,EPr),e(de,CPr),e(de,m3),e(m3,oCe),e(oCe,wPr),e(m3,APr),e(m3,aZ),e(aZ,LPr),e(m3,yPr),e(de,xPr),e(de,g3),e(g3,rCe),e(rCe,$Pr),e(g3,kPr),e(g3,nZ),e(nZ,SPr),e(g3,RPr),e(de,PPr),e(de,h3),e(h3,tCe),e(tCe,BPr),e(h3,IPr),e(h3,sZ),e(sZ,NPr),e(h3,qPr),e(de,jPr),e(de,p3),e(p3,aCe),e(aCe,DPr),e(p3,GPr),e(p3,lZ),e(lZ,OPr),e(p3,VPr),e(de,XPr),e(de,_3),e(_3,nCe),e(nCe,zPr),e(_3,QPr),e(_3,iZ),e(iZ,WPr),e(_3,HPr),e(de,UPr),e(de,u3),e(u3,sCe),e(sCe,JPr),e(u3,YPr),e(u3,dZ),e(dZ,KPr),e(u3,ZPr),e(de,eBr),e(de,b3),e(b3,lCe),e(lCe,oBr),e(b3,rBr),e(b3,cZ),e(cZ,tBr),e(b3,aBr),e(de,nBr),e(de,v3),e(v3,iCe),e(iCe,sBr),e(v3,lBr),e(v3,fZ),e(fZ,iBr),e(v3,dBr),e(de,cBr),e(de,F3),e(F3,dCe),e(dCe,fBr),e(F3,mBr),e(F3,mZ),e(mZ,gBr),e(F3,hBr),e(qr,pBr),M(T3,qr,null),b(f,Aze,u),b(f,jc,u),e(jc,M3),e(M3,cCe),M(Qx,cCe,null),e(jc,_Br),e(jc,fCe),e(fCe,uBr),b(f,Lze,u),b(f,fr,u),M(Wx,fr,null),e(fr,bBr),e(fr,Dc),e(Dc,vBr),e(Dc,gZ),e(gZ,FBr),e(Dc,TBr),e(Dc,hZ),e(hZ,MBr),e(Dc,EBr),e(fr,CBr),e(fr,Hx),e(Hx,wBr),e(Hx,mCe),e(mCe,ABr),e(Hx,LBr),e(fr,yBr),e(fr,Vt),M(Ux,Vt,null),e(Vt,xBr),e(Vt,gCe),e(gCe,$Br),e(Vt,kBr),e(Vt,Gc),e(Gc,SBr),e(Gc,hCe),e(hCe,RBr),e(Gc,PBr),e(Gc,pZ),e(pZ,BBr),e(Gc,IBr),e(Vt,NBr),M(E3,Vt,null),e(fr,qBr),e(fr,jr),M(Jx,jr,null),e(jr,jBr),e(jr,pCe),e(pCe,DBr),e(jr,GBr),e(jr,un),e(un,OBr),e(un,_Ce),e(_Ce,VBr),e(un,XBr),e(un,uCe),e(uCe,zBr),e(un,QBr),e(un,bCe),e(bCe,WBr),e(un,HBr),e(jr,UBr),e(jr,ce),e(ce,C3),e(C3,vCe),e(vCe,JBr),e(C3,YBr),e(C3,_Z),e(_Z,KBr),e(C3,ZBr),e(ce,eIr),e(ce,w3),e(w3,FCe),e(FCe,oIr),e(w3,rIr),e(w3,uZ),e(uZ,tIr),e(w3,aIr),e(ce,nIr),e(ce,A3),e(A3,TCe),e(TCe,sIr),e(A3,lIr),e(A3,bZ),e(bZ,iIr),e(A3,dIr),e(ce,cIr),e(ce,L3),e(L3,MCe),e(MCe,fIr),e(L3,mIr),e(L3,vZ),e(vZ,gIr),e(L3,hIr),e(ce,pIr),e(ce,y3),e(y3,ECe),e(ECe,_Ir),e(y3,uIr),e(y3,FZ),e(FZ,bIr),e(y3,vIr),e(ce,FIr),e(ce,x3),e(x3,CCe),e(CCe,TIr),e(x3,MIr),e(x3,TZ),e(TZ,EIr),e(x3,CIr),e(ce,wIr),e(ce,$3),e($3,wCe),e(wCe,AIr),e($3,LIr),e($3,MZ),e(MZ,yIr),e($3,xIr),e(ce,$Ir),e(ce,k3),e(k3,ACe),e(ACe,kIr),e(k3,SIr),e(k3,EZ),e(EZ,RIr),e(k3,PIr),e(ce,BIr),e(ce,S3),e(S3,LCe),e(LCe,IIr),e(S3,NIr),e(S3,CZ),e(CZ,qIr),e(S3,jIr),e(ce,DIr),e(ce,R3),e(R3,yCe),e(yCe,GIr),e(R3,OIr),e(R3,wZ),e(wZ,VIr),e(R3,XIr),e(ce,zIr),e(ce,P3),e(P3,xCe),e(xCe,QIr),e(P3,WIr),e(P3,AZ),e(AZ,HIr),e(P3,UIr),e(ce,JIr),e(ce,B3),e(B3,$Ce),e($Ce,YIr),e(B3,KIr),e(B3,LZ),e(LZ,ZIr),e(B3,eNr),e(ce,oNr),e(ce,I3),e(I3,kCe),e(kCe,rNr),e(I3,tNr),e(I3,yZ),e(yZ,aNr),e(I3,nNr),e(ce,sNr),e(ce,N3),e(N3,SCe),e(SCe,lNr),e(N3,iNr),e(N3,xZ),e(xZ,dNr),e(N3,cNr),e(ce,fNr),e(ce,q3),e(q3,RCe),e(RCe,mNr),e(q3,gNr),e(q3,$Z),e($Z,hNr),e(q3,pNr),e(ce,_Nr),e(ce,j3),e(j3,PCe),e(PCe,uNr),e(j3,bNr),e(j3,kZ),e(kZ,vNr),e(j3,FNr),e(ce,TNr),e(ce,D3),e(D3,BCe),e(BCe,MNr),e(D3,ENr),e(D3,SZ),e(SZ,CNr),e(D3,wNr),e(ce,ANr),e(ce,G3),e(G3,ICe),e(ICe,LNr),e(G3,yNr),e(G3,RZ),e(RZ,xNr),e(G3,$Nr),e(ce,kNr),e(ce,O3),e(O3,NCe),e(NCe,SNr),e(O3,RNr),e(O3,PZ),e(PZ,PNr),e(O3,BNr),e(ce,INr),e(ce,V3),e(V3,qCe),e(qCe,NNr),e(V3,qNr),e(V3,BZ),e(BZ,jNr),e(V3,DNr),e(jr,GNr),M(X3,jr,null),b(f,yze,u),b(f,Oc,u),e(Oc,z3),e(z3,jCe),M(Yx,jCe,null),e(Oc,ONr),e(Oc,DCe),e(DCe,VNr),b(f,xze,u),b(f,mr,u),M(Kx,mr,null),e(mr,XNr),e(mr,Vc),e(Vc,zNr),e(Vc,IZ),e(IZ,QNr),e(Vc,WNr),e(Vc,NZ),e(NZ,HNr),e(Vc,UNr),e(mr,JNr),e(mr,Zx),e(Zx,YNr),e(Zx,GCe),e(GCe,KNr),e(Zx,ZNr),e(mr,eqr),e(mr,Xt),M(e$,Xt,null),e(Xt,oqr),e(Xt,OCe),e(OCe,rqr),e(Xt,tqr),e(Xt,Xc),e(Xc,aqr),e(Xc,VCe),e(VCe,nqr),e(Xc,sqr),e(Xc,qZ),e(qZ,lqr),e(Xc,iqr),e(Xt,dqr),M(Q3,Xt,null),e(mr,cqr),e(mr,Dr),M(o$,Dr,null),e(Dr,fqr),e(Dr,XCe),e(XCe,mqr),e(Dr,gqr),e(Dr,bn),e(bn,hqr),e(bn,zCe),e(zCe,pqr),e(bn,_qr),e(bn,QCe),e(QCe,uqr),e(bn,bqr),e(bn,WCe),e(WCe,vqr),e(bn,Fqr),e(Dr,Tqr),e(Dr,HCe),e(HCe,W3),e(W3,UCe),e(UCe,Mqr),e(W3,Eqr),e(W3,jZ),e(jZ,Cqr),e(W3,wqr),e(Dr,Aqr),M(H3,Dr,null),b(f,$ze,u),b(f,zc,u),e(zc,U3),e(U3,JCe),M(r$,JCe,null),e(zc,Lqr),e(zc,YCe),e(YCe,yqr),b(f,kze,u),b(f,gr,u),M(t$,gr,null),e(gr,xqr),e(gr,Qc),e(Qc,$qr),e(Qc,DZ),e(DZ,kqr),e(Qc,Sqr),e(Qc,GZ),e(GZ,Rqr),e(Qc,Pqr),e(gr,Bqr),e(gr,a$),e(a$,Iqr),e(a$,KCe),e(KCe,Nqr),e(a$,qqr),e(gr,jqr),e(gr,zt),M(n$,zt,null),e(zt,Dqr),e(zt,ZCe),e(ZCe,Gqr),e(zt,Oqr),e(zt,Wc),e(Wc,Vqr),e(Wc,e3e),e(e3e,Xqr),e(Wc,zqr),e(Wc,OZ),e(OZ,Qqr),e(Wc,Wqr),e(zt,Hqr),M(J3,zt,null),e(gr,Uqr),e(gr,Gr),M(s$,Gr,null),e(Gr,Jqr),e(Gr,o3e),e(o3e,Yqr),e(Gr,Kqr),e(Gr,vn),e(vn,Zqr),e(vn,r3e),e(r3e,ejr),e(vn,ojr),e(vn,t3e),e(t3e,rjr),e(vn,tjr),e(vn,a3e),e(a3e,ajr),e(vn,njr),e(Gr,sjr),e(Gr,n3e),e(n3e,Y3),e(Y3,s3e),e(s3e,ljr),e(Y3,ijr),e(Y3,VZ),e(VZ,djr),e(Y3,cjr),e(Gr,fjr),M(K3,Gr,null),b(f,Sze,u),b(f,Hc,u),e(Hc,Z3),e(Z3,l3e),M(l$,l3e,null),e(Hc,mjr),e(Hc,i3e),e(i3e,gjr),b(f,Rze,u),b(f,hr,u),M(i$,hr,null),e(hr,hjr),e(hr,Uc),e(Uc,pjr),e(Uc,XZ),e(XZ,_jr),e(Uc,ujr),e(Uc,zZ),e(zZ,bjr),e(Uc,vjr),e(hr,Fjr),e(hr,d$),e(d$,Tjr),e(d$,d3e),e(d3e,Mjr),e(d$,Ejr),e(hr,Cjr),e(hr,Qt),M(c$,Qt,null),e(Qt,wjr),e(Qt,c3e),e(c3e,Ajr),e(Qt,Ljr),e(Qt,Jc),e(Jc,yjr),e(Jc,f3e),e(f3e,xjr),e(Jc,$jr),e(Jc,QZ),e(QZ,kjr),e(Jc,Sjr),e(Qt,Rjr),M(e5,Qt,null),e(hr,Pjr),e(hr,Or),M(f$,Or,null),e(Or,Bjr),e(Or,m3e),e(m3e,Ijr),e(Or,Njr),e(Or,Fn),e(Fn,qjr),e(Fn,g3e),e(g3e,jjr),e(Fn,Djr),e(Fn,h3e),e(h3e,Gjr),e(Fn,Ojr),e(Fn,p3e),e(p3e,Vjr),e(Fn,Xjr),e(Or,zjr),e(Or,oe),e(oe,o5),e(o5,_3e),e(_3e,Qjr),e(o5,Wjr),e(o5,WZ),e(WZ,Hjr),e(o5,Ujr),e(oe,Jjr),e(oe,r5),e(r5,u3e),e(u3e,Yjr),e(r5,Kjr),e(r5,HZ),e(HZ,Zjr),e(r5,eDr),e(oe,oDr),e(oe,t5),e(t5,b3e),e(b3e,rDr),e(t5,tDr),e(t5,UZ),e(UZ,aDr),e(t5,nDr),e(oe,sDr),e(oe,a5),e(a5,v3e),e(v3e,lDr),e(a5,iDr),e(a5,JZ),e(JZ,dDr),e(a5,cDr),e(oe,fDr),e(oe,n5),e(n5,F3e),e(F3e,mDr),e(n5,gDr),e(n5,YZ),e(YZ,hDr),e(n5,pDr),e(oe,_Dr),e(oe,s5),e(s5,T3e),e(T3e,uDr),e(s5,bDr),e(s5,KZ),e(KZ,vDr),e(s5,FDr),e(oe,TDr),e(oe,l5),e(l5,M3e),e(M3e,MDr),e(l5,EDr),e(l5,ZZ),e(ZZ,CDr),e(l5,wDr),e(oe,ADr),e(oe,i5),e(i5,E3e),e(E3e,LDr),e(i5,yDr),e(i5,eee),e(eee,xDr),e(i5,$Dr),e(oe,kDr),e(oe,d5),e(d5,C3e),e(C3e,SDr),e(d5,RDr),e(d5,oee),e(oee,PDr),e(d5,BDr),e(oe,IDr),e(oe,c5),e(c5,w3e),e(w3e,NDr),e(c5,qDr),e(c5,ree),e(ree,jDr),e(c5,DDr),e(oe,GDr),e(oe,f5),e(f5,A3e),e(A3e,ODr),e(f5,VDr),e(f5,tee),e(tee,XDr),e(f5,zDr),e(oe,QDr),e(oe,m5),e(m5,L3e),e(L3e,WDr),e(m5,HDr),e(m5,aee),e(aee,UDr),e(m5,JDr),e(oe,YDr),e(oe,g5),e(g5,y3e),e(y3e,KDr),e(g5,ZDr),e(g5,nee),e(nee,eGr),e(g5,oGr),e(oe,rGr),e(oe,h5),e(h5,x3e),e(x3e,tGr),e(h5,aGr),e(h5,see),e(see,nGr),e(h5,sGr),e(oe,lGr),e(oe,p5),e(p5,$3e),e($3e,iGr),e(p5,dGr),e(p5,lee),e(lee,cGr),e(p5,fGr),e(oe,mGr),e(oe,_5),e(_5,k3e),e(k3e,gGr),e(_5,hGr),e(_5,iee),e(iee,pGr),e(_5,_Gr),e(oe,uGr),e(oe,u5),e(u5,S3e),e(S3e,bGr),e(u5,vGr),e(u5,dee),e(dee,FGr),e(u5,TGr),e(oe,MGr),e(oe,b5),e(b5,R3e),e(R3e,EGr),e(b5,CGr),e(b5,cee),e(cee,wGr),e(b5,AGr),e(oe,LGr),e(oe,v5),e(v5,P3e),e(P3e,yGr),e(v5,xGr),e(v5,fee),e(fee,$Gr),e(v5,kGr),e(oe,SGr),e(oe,F5),e(F5,B3e),e(B3e,RGr),e(F5,PGr),e(F5,mee),e(mee,BGr),e(F5,IGr),e(oe,NGr),e(oe,T5),e(T5,I3e),e(I3e,qGr),e(T5,jGr),e(T5,gee),e(gee,DGr),e(T5,GGr),e(oe,OGr),e(oe,M5),e(M5,N3e),e(N3e,VGr),e(M5,XGr),e(M5,hee),e(hee,zGr),e(M5,QGr),e(oe,WGr),e(oe,E5),e(E5,q3e),e(q3e,HGr),e(E5,UGr),e(E5,pee),e(pee,JGr),e(E5,YGr),e(oe,KGr),e(oe,C5),e(C5,j3e),e(j3e,ZGr),e(C5,eOr),e(C5,_ee),e(_ee,oOr),e(C5,rOr),e(oe,tOr),e(oe,w5),e(w5,D3e),e(D3e,aOr),e(w5,nOr),e(w5,uee),e(uee,sOr),e(w5,lOr),e(oe,iOr),e(oe,A5),e(A5,G3e),e(G3e,dOr),e(A5,cOr),e(A5,bee),e(bee,fOr),e(A5,mOr),e(oe,gOr),e(oe,L5),e(L5,O3e),e(O3e,hOr),e(L5,pOr),e(L5,vee),e(vee,_Or),e(L5,uOr),e(Or,bOr),M(y5,Or,null),b(f,Pze,u),b(f,Yc,u),e(Yc,x5),e(x5,V3e),M(m$,V3e,null),e(Yc,vOr),e(Yc,X3e),e(X3e,FOr),b(f,Bze,u),b(f,pr,u),M(g$,pr,null),e(pr,TOr),e(pr,Kc),e(Kc,MOr),e(Kc,Fee),e(Fee,EOr),e(Kc,COr),e(Kc,Tee),e(Tee,wOr),e(Kc,AOr),e(pr,LOr),e(pr,h$),e(h$,yOr),e(h$,z3e),e(z3e,xOr),e(h$,$Or),e(pr,kOr),e(pr,Wt),M(p$,Wt,null),e(Wt,SOr),e(Wt,Q3e),e(Q3e,ROr),e(Wt,POr),e(Wt,Zc),e(Zc,BOr),e(Zc,W3e),e(W3e,IOr),e(Zc,NOr),e(Zc,Mee),e(Mee,qOr),e(Zc,jOr),e(Wt,DOr),M($5,Wt,null),e(pr,GOr),e(pr,Vr),M(_$,Vr,null),e(Vr,OOr),e(Vr,H3e),e(H3e,VOr),e(Vr,XOr),e(Vr,Tn),e(Tn,zOr),e(Tn,U3e),e(U3e,QOr),e(Tn,WOr),e(Tn,J3e),e(J3e,HOr),e(Tn,UOr),e(Tn,Y3e),e(Y3e,JOr),e(Tn,YOr),e(Vr,KOr),e(Vr,xe),e(xe,k5),e(k5,K3e),e(K3e,ZOr),e(k5,eVr),e(k5,Eee),e(Eee,oVr),e(k5,rVr),e(xe,tVr),e(xe,S5),e(S5,Z3e),e(Z3e,aVr),e(S5,nVr),e(S5,Cee),e(Cee,sVr),e(S5,lVr),e(xe,iVr),e(xe,R5),e(R5,e5e),e(e5e,dVr),e(R5,cVr),e(R5,wee),e(wee,fVr),e(R5,mVr),e(xe,gVr),e(xe,P5),e(P5,o5e),e(o5e,hVr),e(P5,pVr),e(P5,Aee),e(Aee,_Vr),e(P5,uVr),e(xe,bVr),e(xe,B5),e(B5,r5e),e(r5e,vVr),e(B5,FVr),e(B5,Lee),e(Lee,TVr),e(B5,MVr),e(xe,EVr),e(xe,I5),e(I5,t5e),e(t5e,CVr),e(I5,wVr),e(I5,yee),e(yee,AVr),e(I5,LVr),e(xe,yVr),e(xe,N5),e(N5,a5e),e(a5e,xVr),e(N5,$Vr),e(N5,xee),e(xee,kVr),e(N5,SVr),e(xe,RVr),e(xe,q5),e(q5,n5e),e(n5e,PVr),e(q5,BVr),e(q5,$ee),e($ee,IVr),e(q5,NVr),e(xe,qVr),e(xe,j5),e(j5,s5e),e(s5e,jVr),e(j5,DVr),e(j5,kee),e(kee,GVr),e(j5,OVr),e(xe,VVr),e(xe,D5),e(D5,l5e),e(l5e,XVr),e(D5,zVr),e(D5,See),e(See,QVr),e(D5,WVr),e(Vr,HVr),M(G5,Vr,null),b(f,Ize,u),b(f,ef,u),e(ef,O5),e(O5,i5e),M(u$,i5e,null),e(ef,UVr),e(ef,d5e),e(d5e,JVr),b(f,Nze,u),b(f,_r,u),M(b$,_r,null),e(_r,YVr),e(_r,of),e(of,KVr),e(of,Ree),e(Ree,ZVr),e(of,eXr),e(of,Pee),e(Pee,oXr),e(of,rXr),e(_r,tXr),e(_r,v$),e(v$,aXr),e(v$,c5e),e(c5e,nXr),e(v$,sXr),e(_r,lXr),e(_r,Ht),M(F$,Ht,null),e(Ht,iXr),e(Ht,f5e),e(f5e,dXr),e(Ht,cXr),e(Ht,rf),e(rf,fXr),e(rf,m5e),e(m5e,mXr),e(rf,gXr),e(rf,Bee),e(Bee,hXr),e(rf,pXr),e(Ht,_Xr),M(V5,Ht,null),e(_r,uXr),e(_r,Xr),M(T$,Xr,null),e(Xr,bXr),e(Xr,g5e),e(g5e,vXr),e(Xr,FXr),e(Xr,Mn),e(Mn,TXr),e(Mn,h5e),e(h5e,MXr),e(Mn,EXr),e(Mn,p5e),e(p5e,CXr),e(Mn,wXr),e(Mn,_5e),e(_5e,AXr),e(Mn,LXr),e(Xr,yXr),e(Xr,Ee),e(Ee,X5),e(X5,u5e),e(u5e,xXr),e(X5,$Xr),e(X5,Iee),e(Iee,kXr),e(X5,SXr),e(Ee,RXr),e(Ee,z5),e(z5,b5e),e(b5e,PXr),e(z5,BXr),e(z5,Nee),e(Nee,IXr),e(z5,NXr),e(Ee,qXr),e(Ee,Q5),e(Q5,v5e),e(v5e,jXr),e(Q5,DXr),e(Q5,qee),e(qee,GXr),e(Q5,OXr),e(Ee,VXr),e(Ee,W5),e(W5,F5e),e(F5e,XXr),e(W5,zXr),e(W5,jee),e(jee,QXr),e(W5,WXr),e(Ee,HXr),e(Ee,H5),e(H5,T5e),e(T5e,UXr),e(H5,JXr),e(H5,Dee),e(Dee,YXr),e(H5,KXr),e(Ee,ZXr),e(Ee,U5),e(U5,M5e),e(M5e,ezr),e(U5,ozr),e(U5,Gee),e(Gee,rzr),e(U5,tzr),e(Ee,azr),e(Ee,J5),e(J5,E5e),e(E5e,nzr),e(J5,szr),e(J5,Oee),e(Oee,lzr),e(J5,izr),e(Ee,dzr),e(Ee,Y5),e(Y5,C5e),e(C5e,czr),e(Y5,fzr),e(Y5,Vee),e(Vee,mzr),e(Y5,gzr),e(Ee,hzr),e(Ee,K5),e(K5,w5e),e(w5e,pzr),e(K5,_zr),e(K5,Xee),e(Xee,uzr),e(K5,bzr),e(Ee,vzr),e(Ee,Z5),e(Z5,A5e),e(A5e,Fzr),e(Z5,Tzr),e(Z5,zee),e(zee,Mzr),e(Z5,Ezr),e(Ee,Czr),e(Ee,e0),e(e0,L5e),e(L5e,wzr),e(e0,Azr),e(e0,Qee),e(Qee,Lzr),e(e0,yzr),e(Ee,xzr),e(Ee,o0),e(o0,y5e),e(y5e,$zr),e(o0,kzr),e(o0,Wee),e(Wee,Szr),e(o0,Rzr),e(Ee,Pzr),e(Ee,r0),e(r0,x5e),e(x5e,Bzr),e(r0,Izr),e(r0,Hee),e(Hee,Nzr),e(r0,qzr),e(Xr,jzr),M(t0,Xr,null),b(f,qze,u),b(f,tf,u),e(tf,a0),e(a0,$5e),M(M$,$5e,null),e(tf,Dzr),e(tf,k5e),e(k5e,Gzr),b(f,jze,u),b(f,ur,u),M(E$,ur,null),e(ur,Ozr),e(ur,af),e(af,Vzr),e(af,Uee),e(Uee,Xzr),e(af,zzr),e(af,Jee),e(Jee,Qzr),e(af,Wzr),e(ur,Hzr),e(ur,C$),e(C$,Uzr),e(C$,S5e),e(S5e,Jzr),e(C$,Yzr),e(ur,Kzr),e(ur,Ut),M(w$,Ut,null),e(Ut,Zzr),e(Ut,R5e),e(R5e,eQr),e(Ut,oQr),e(Ut,nf),e(nf,rQr),e(nf,P5e),e(P5e,tQr),e(nf,aQr),e(nf,Yee),e(Yee,nQr),e(nf,sQr),e(Ut,lQr),M(n0,Ut,null),e(ur,iQr),e(ur,zr),M(A$,zr,null),e(zr,dQr),e(zr,B5e),e(B5e,cQr),e(zr,fQr),e(zr,En),e(En,mQr),e(En,I5e),e(I5e,gQr),e(En,hQr),e(En,N5e),e(N5e,pQr),e(En,_Qr),e(En,q5e),e(q5e,uQr),e(En,bQr),e(zr,vQr),e(zr,$e),e($e,s0),e(s0,j5e),e(j5e,FQr),e(s0,TQr),e(s0,Kee),e(Kee,MQr),e(s0,EQr),e($e,CQr),e($e,l0),e(l0,D5e),e(D5e,wQr),e(l0,AQr),e(l0,Zee),e(Zee,LQr),e(l0,yQr),e($e,xQr),e($e,i0),e(i0,G5e),e(G5e,$Qr),e(i0,kQr),e(i0,eoe),e(eoe,SQr),e(i0,RQr),e($e,PQr),e($e,d0),e(d0,O5e),e(O5e,BQr),e(d0,IQr),e(d0,ooe),e(ooe,NQr),e(d0,qQr),e($e,jQr),e($e,c0),e(c0,V5e),e(V5e,DQr),e(c0,GQr),e(c0,roe),e(roe,OQr),e(c0,VQr),e($e,XQr),e($e,f0),e(f0,X5e),e(X5e,zQr),e(f0,QQr),e(f0,toe),e(toe,WQr),e(f0,HQr),e($e,UQr),e($e,m0),e(m0,z5e),e(z5e,JQr),e(m0,YQr),e(m0,aoe),e(aoe,KQr),e(m0,ZQr),e($e,eWr),e($e,g0),e(g0,Q5e),e(Q5e,oWr),e(g0,rWr),e(g0,noe),e(noe,tWr),e(g0,aWr),e($e,nWr),e($e,h0),e(h0,W5e),e(W5e,sWr),e(h0,lWr),e(h0,soe),e(soe,iWr),e(h0,dWr),e($e,cWr),e($e,p0),e(p0,H5e),e(H5e,fWr),e(p0,mWr),e(p0,loe),e(loe,gWr),e(p0,hWr),e(zr,pWr),M(_0,zr,null),b(f,Dze,u),b(f,sf,u),e(sf,u0),e(u0,U5e),M(L$,U5e,null),e(sf,_Wr),e(sf,J5e),e(J5e,uWr),b(f,Gze,u),b(f,br,u),M(y$,br,null),e(br,bWr),e(br,lf),e(lf,vWr),e(lf,ioe),e(ioe,FWr),e(lf,TWr),e(lf,doe),e(doe,MWr),e(lf,EWr),e(br,CWr),e(br,x$),e(x$,wWr),e(x$,Y5e),e(Y5e,AWr),e(x$,LWr),e(br,yWr),e(br,Jt),M($$,Jt,null),e(Jt,xWr),e(Jt,K5e),e(K5e,$Wr),e(Jt,kWr),e(Jt,df),e(df,SWr),e(df,Z5e),e(Z5e,RWr),e(df,PWr),e(df,coe),e(coe,BWr),e(df,IWr),e(Jt,NWr),M(b0,Jt,null),e(br,qWr),e(br,Qr),M(k$,Qr,null),e(Qr,jWr),e(Qr,e0e),e(e0e,DWr),e(Qr,GWr),e(Qr,Cn),e(Cn,OWr),e(Cn,o0e),e(o0e,VWr),e(Cn,XWr),e(Cn,r0e),e(r0e,zWr),e(Cn,QWr),e(Cn,t0e),e(t0e,WWr),e(Cn,HWr),e(Qr,UWr),e(Qr,ke),e(ke,v0),e(v0,a0e),e(a0e,JWr),e(v0,YWr),e(v0,foe),e(foe,KWr),e(v0,ZWr),e(ke,eHr),e(ke,F0),e(F0,n0e),e(n0e,oHr),e(F0,rHr),e(F0,moe),e(moe,tHr),e(F0,aHr),e(ke,nHr),e(ke,T0),e(T0,s0e),e(s0e,sHr),e(T0,lHr),e(T0,goe),e(goe,iHr),e(T0,dHr),e(ke,cHr),e(ke,M0),e(M0,l0e),e(l0e,fHr),e(M0,mHr),e(M0,hoe),e(hoe,gHr),e(M0,hHr),e(ke,pHr),e(ke,E0),e(E0,i0e),e(i0e,_Hr),e(E0,uHr),e(E0,poe),e(poe,bHr),e(E0,vHr),e(ke,FHr),e(ke,C0),e(C0,d0e),e(d0e,THr),e(C0,MHr),e(C0,_oe),e(_oe,EHr),e(C0,CHr),e(ke,wHr),e(ke,w0),e(w0,c0e),e(c0e,AHr),e(w0,LHr),e(w0,uoe),e(uoe,yHr),e(w0,xHr),e(ke,$Hr),e(ke,A0),e(A0,f0e),e(f0e,kHr),e(A0,SHr),e(A0,boe),e(boe,RHr),e(A0,PHr),e(ke,BHr),e(ke,L0),e(L0,m0e),e(m0e,IHr),e(L0,NHr),e(L0,voe),e(voe,qHr),e(L0,jHr),e(ke,DHr),e(ke,y0),e(y0,g0e),e(g0e,GHr),e(y0,OHr),e(y0,Foe),e(Foe,VHr),e(y0,XHr),e(Qr,zHr),M(x0,Qr,null),b(f,Oze,u),b(f,cf,u),e(cf,$0),e($0,h0e),M(S$,h0e,null),e(cf,QHr),e(cf,p0e),e(p0e,WHr),b(f,Vze,u),b(f,vr,u),M(R$,vr,null),e(vr,HHr),e(vr,ff),e(ff,UHr),e(ff,Toe),e(Toe,JHr),e(ff,YHr),e(ff,Moe),e(Moe,KHr),e(ff,ZHr),e(vr,eUr),e(vr,P$),e(P$,oUr),e(P$,_0e),e(_0e,rUr),e(P$,tUr),e(vr,aUr),e(vr,Yt),M(B$,Yt,null),e(Yt,nUr),e(Yt,u0e),e(u0e,sUr),e(Yt,lUr),e(Yt,mf),e(mf,iUr),e(mf,b0e),e(b0e,dUr),e(mf,cUr),e(mf,Eoe),e(Eoe,fUr),e(mf,mUr),e(Yt,gUr),M(k0,Yt,null),e(vr,hUr),e(vr,Wr),M(I$,Wr,null),e(Wr,pUr),e(Wr,v0e),e(v0e,_Ur),e(Wr,uUr),e(Wr,wn),e(wn,bUr),e(wn,F0e),e(F0e,vUr),e(wn,FUr),e(wn,T0e),e(T0e,TUr),e(wn,MUr),e(wn,M0e),e(M0e,EUr),e(wn,CUr),e(Wr,wUr),e(Wr,Se),e(Se,S0),e(S0,E0e),e(E0e,AUr),e(S0,LUr),e(S0,Coe),e(Coe,yUr),e(S0,xUr),e(Se,$Ur),e(Se,R0),e(R0,C0e),e(C0e,kUr),e(R0,SUr),e(R0,woe),e(woe,RUr),e(R0,PUr),e(Se,BUr),e(Se,P0),e(P0,w0e),e(w0e,IUr),e(P0,NUr),e(P0,Aoe),e(Aoe,qUr),e(P0,jUr),e(Se,DUr),e(Se,B0),e(B0,A0e),e(A0e,GUr),e(B0,OUr),e(B0,Loe),e(Loe,VUr),e(B0,XUr),e(Se,zUr),e(Se,I0),e(I0,L0e),e(L0e,QUr),e(I0,WUr),e(I0,yoe),e(yoe,HUr),e(I0,UUr),e(Se,JUr),e(Se,N0),e(N0,y0e),e(y0e,YUr),e(N0,KUr),e(N0,xoe),e(xoe,ZUr),e(N0,eJr),e(Se,oJr),e(Se,q0),e(q0,x0e),e(x0e,rJr),e(q0,tJr),e(q0,$oe),e($oe,aJr),e(q0,nJr),e(Se,sJr),e(Se,j0),e(j0,$0e),e($0e,lJr),e(j0,iJr),e(j0,koe),e(koe,dJr),e(j0,cJr),e(Se,fJr),e(Se,D0),e(D0,k0e),e(k0e,mJr),e(D0,gJr),e(D0,Soe),e(Soe,hJr),e(D0,pJr),e(Se,_Jr),e(Se,G0),e(G0,S0e),e(S0e,uJr),e(G0,bJr),e(G0,Roe),e(Roe,vJr),e(G0,FJr),e(Wr,TJr),M(O0,Wr,null),b(f,Xze,u),b(f,gf,u),e(gf,V0),e(V0,R0e),M(N$,R0e,null),e(gf,MJr),e(gf,P0e),e(P0e,EJr),b(f,zze,u),b(f,Fr,u),M(q$,Fr,null),e(Fr,CJr),e(Fr,hf),e(hf,wJr),e(hf,Poe),e(Poe,AJr),e(hf,LJr),e(hf,Boe),e(Boe,yJr),e(hf,xJr),e(Fr,$Jr),e(Fr,j$),e(j$,kJr),e(j$,B0e),e(B0e,SJr),e(j$,RJr),e(Fr,PJr),e(Fr,Kt),M(D$,Kt,null),e(Kt,BJr),e(Kt,I0e),e(I0e,IJr),e(Kt,NJr),e(Kt,pf),e(pf,qJr),e(pf,N0e),e(N0e,jJr),e(pf,DJr),e(pf,Ioe),e(Ioe,GJr),e(pf,OJr),e(Kt,VJr),M(X0,Kt,null),e(Fr,XJr),e(Fr,Hr),M(G$,Hr,null),e(Hr,zJr),e(Hr,q0e),e(q0e,QJr),e(Hr,WJr),e(Hr,An),e(An,HJr),e(An,j0e),e(j0e,UJr),e(An,JJr),e(An,D0e),e(D0e,YJr),e(An,KJr),e(An,G0e),e(G0e,ZJr),e(An,eYr),e(Hr,oYr),e(Hr,Re),e(Re,z0),e(z0,O0e),e(O0e,rYr),e(z0,tYr),e(z0,Noe),e(Noe,aYr),e(z0,nYr),e(Re,sYr),e(Re,Q0),e(Q0,V0e),e(V0e,lYr),e(Q0,iYr),e(Q0,qoe),e(qoe,dYr),e(Q0,cYr),e(Re,fYr),e(Re,W0),e(W0,X0e),e(X0e,mYr),e(W0,gYr),e(W0,joe),e(joe,hYr),e(W0,pYr),e(Re,_Yr),e(Re,H0),e(H0,z0e),e(z0e,uYr),e(H0,bYr),e(H0,Doe),e(Doe,vYr),e(H0,FYr),e(Re,TYr),e(Re,U0),e(U0,Q0e),e(Q0e,MYr),e(U0,EYr),e(U0,Goe),e(Goe,CYr),e(U0,wYr),e(Re,AYr),e(Re,J0),e(J0,W0e),e(W0e,LYr),e(J0,yYr),e(J0,Ooe),e(Ooe,xYr),e(J0,$Yr),e(Re,kYr),e(Re,Y0),e(Y0,H0e),e(H0e,SYr),e(Y0,RYr),e(Y0,Voe),e(Voe,PYr),e(Y0,BYr),e(Re,IYr),e(Re,K0),e(K0,U0e),e(U0e,NYr),e(K0,qYr),e(K0,Xoe),e(Xoe,jYr),e(K0,DYr),e(Re,GYr),e(Re,Z0),e(Z0,J0e),e(J0e,OYr),e(Z0,VYr),e(Z0,zoe),e(zoe,XYr),e(Z0,zYr),e(Re,QYr),e(Re,ew),e(ew,Y0e),e(Y0e,WYr),e(ew,HYr),e(ew,Qoe),e(Qoe,UYr),e(ew,JYr),e(Hr,YYr),M(ow,Hr,null),b(f,Qze,u),b(f,_f,u),e(_f,rw),e(rw,K0e),M(O$,K0e,null),e(_f,KYr),e(_f,Z0e),e(Z0e,ZYr),b(f,Wze,u),b(f,Tr,u),M(V$,Tr,null),e(Tr,eKr),e(Tr,uf),e(uf,oKr),e(uf,Woe),e(Woe,rKr),e(uf,tKr),e(uf,Hoe),e(Hoe,aKr),e(uf,nKr),e(Tr,sKr),e(Tr,X$),e(X$,lKr),e(X$,ewe),e(ewe,iKr),e(X$,dKr),e(Tr,cKr),e(Tr,Zt),M(z$,Zt,null),e(Zt,fKr),e(Zt,owe),e(owe,mKr),e(Zt,gKr),e(Zt,bf),e(bf,hKr),e(bf,rwe),e(rwe,pKr),e(bf,_Kr),e(bf,Uoe),e(Uoe,uKr),e(bf,bKr),e(Zt,vKr),M(tw,Zt,null),e(Tr,FKr),e(Tr,Ur),M(Q$,Ur,null),e(Ur,TKr),e(Ur,twe),e(twe,MKr),e(Ur,EKr),e(Ur,Ln),e(Ln,CKr),e(Ln,awe),e(awe,wKr),e(Ln,AKr),e(Ln,nwe),e(nwe,LKr),e(Ln,yKr),e(Ln,swe),e(swe,xKr),e(Ln,$Kr),e(Ur,kKr),e(Ur,Ve),e(Ve,aw),e(aw,lwe),e(lwe,SKr),e(aw,RKr),e(aw,Joe),e(Joe,PKr),e(aw,BKr),e(Ve,IKr),e(Ve,nw),e(nw,iwe),e(iwe,NKr),e(nw,qKr),e(nw,Yoe),e(Yoe,jKr),e(nw,DKr),e(Ve,GKr),e(Ve,sw),e(sw,dwe),e(dwe,OKr),e(sw,VKr),e(sw,Koe),e(Koe,XKr),e(sw,zKr),e(Ve,QKr),e(Ve,lw),e(lw,cwe),e(cwe,WKr),e(lw,HKr),e(lw,Zoe),e(Zoe,UKr),e(lw,JKr),e(Ve,YKr),e(Ve,iw),e(iw,fwe),e(fwe,KKr),e(iw,ZKr),e(iw,ere),e(ere,eZr),e(iw,oZr),e(Ve,rZr),e(Ve,dw),e(dw,mwe),e(mwe,tZr),e(dw,aZr),e(dw,ore),e(ore,nZr),e(dw,sZr),e(Ve,lZr),e(Ve,cw),e(cw,gwe),e(gwe,iZr),e(cw,dZr),e(cw,rre),e(rre,cZr),e(cw,fZr),e(Ve,mZr),e(Ve,fw),e(fw,hwe),e(hwe,gZr),e(fw,hZr),e(fw,tre),e(tre,pZr),e(fw,_Zr),e(Ur,uZr),M(mw,Ur,null),b(f,Hze,u),b(f,vf,u),e(vf,gw),e(gw,pwe),M(W$,pwe,null),e(vf,bZr),e(vf,_we),e(_we,vZr),b(f,Uze,u),b(f,Mr,u),M(H$,Mr,null),e(Mr,FZr),e(Mr,Ff),e(Ff,TZr),e(Ff,are),e(are,MZr),e(Ff,EZr),e(Ff,nre),e(nre,CZr),e(Ff,wZr),e(Mr,AZr),e(Mr,U$),e(U$,LZr),e(U$,uwe),e(uwe,yZr),e(U$,xZr),e(Mr,$Zr),e(Mr,ea),M(J$,ea,null),e(ea,kZr),e(ea,bwe),e(bwe,SZr),e(ea,RZr),e(ea,Tf),e(Tf,PZr),e(Tf,vwe),e(vwe,BZr),e(Tf,IZr),e(Tf,sre),e(sre,NZr),e(Tf,qZr),e(ea,jZr),M(hw,ea,null),e(Mr,DZr),e(Mr,Jr),M(Y$,Jr,null),e(Jr,GZr),e(Jr,Fwe),e(Fwe,OZr),e(Jr,VZr),e(Jr,yn),e(yn,XZr),e(yn,Twe),e(Twe,zZr),e(yn,QZr),e(yn,Mwe),e(Mwe,WZr),e(yn,HZr),e(yn,Ewe),e(Ewe,UZr),e(yn,JZr),e(Jr,YZr),e(Jr,Xe),e(Xe,pw),e(pw,Cwe),e(Cwe,KZr),e(pw,ZZr),e(pw,lre),e(lre,eet),e(pw,oet),e(Xe,ret),e(Xe,_w),e(_w,wwe),e(wwe,tet),e(_w,aet),e(_w,ire),e(ire,net),e(_w,set),e(Xe,iet),e(Xe,uw),e(uw,Awe),e(Awe,det),e(uw,cet),e(uw,dre),e(dre,fet),e(uw,met),e(Xe,get),e(Xe,bw),e(bw,Lwe),e(Lwe,het),e(bw,pet),e(bw,cre),e(cre,_et),e(bw,uet),e(Xe,bet),e(Xe,vw),e(vw,ywe),e(ywe,vet),e(vw,Fet),e(vw,fre),e(fre,Tet),e(vw,Met),e(Xe,Eet),e(Xe,Fw),e(Fw,xwe),e(xwe,Cet),e(Fw,wet),e(Fw,mre),e(mre,Aet),e(Fw,Let),e(Xe,yet),e(Xe,Tw),e(Tw,$we),e($we,xet),e(Tw,$et),e(Tw,gre),e(gre,ket),e(Tw,Set),e(Xe,Ret),e(Xe,Mw),e(Mw,kwe),e(kwe,Pet),e(Mw,Bet),e(Mw,hre),e(hre,Iet),e(Mw,Net),e(Jr,qet),M(Ew,Jr,null),b(f,Jze,u),b(f,Mf,u),e(Mf,Cw),e(Cw,Swe),M(K$,Swe,null),e(Mf,jet),e(Mf,Rwe),e(Rwe,Det),b(f,Yze,u),b(f,Er,u),M(Z$,Er,null),e(Er,Get),e(Er,Ef),e(Ef,Oet),e(Ef,pre),e(pre,Vet),e(Ef,Xet),e(Ef,_re),e(_re,zet),e(Ef,Qet),e(Er,Wet),e(Er,ek),e(ek,Het),e(ek,Pwe),e(Pwe,Uet),e(ek,Jet),e(Er,Yet),e(Er,oa),M(ok,oa,null),e(oa,Ket),e(oa,Bwe),e(Bwe,Zet),e(oa,eot),e(oa,Cf),e(Cf,oot),e(Cf,Iwe),e(Iwe,rot),e(Cf,tot),e(Cf,ure),e(ure,aot),e(Cf,not),e(oa,sot),M(ww,oa,null),e(Er,lot),e(Er,Yr),M(rk,Yr,null),e(Yr,iot),e(Yr,Nwe),e(Nwe,dot),e(Yr,cot),e(Yr,xn),e(xn,fot),e(xn,qwe),e(qwe,mot),e(xn,got),e(xn,jwe),e(jwe,hot),e(xn,pot),e(xn,Dwe),e(Dwe,_ot),e(xn,uot),e(Yr,bot),e(Yr,Gwe),e(Gwe,Aw),e(Aw,Owe),e(Owe,vot),e(Aw,Fot),e(Aw,bre),e(bre,Tot),e(Aw,Mot),e(Yr,Eot),M(Lw,Yr,null),b(f,Kze,u),b(f,wf,u),e(wf,yw),e(yw,Vwe),M(tk,Vwe,null),e(wf,Cot),e(wf,Xwe),e(Xwe,wot),b(f,Zze,u),b(f,Cr,u),M(ak,Cr,null),e(Cr,Aot),e(Cr,Af),e(Af,Lot),e(Af,vre),e(vre,yot),e(Af,xot),e(Af,Fre),e(Fre,$ot),e(Af,kot),e(Cr,Sot),e(Cr,nk),e(nk,Rot),e(nk,zwe),e(zwe,Pot),e(nk,Bot),e(Cr,Iot),e(Cr,ra),M(sk,ra,null),e(ra,Not),e(ra,Qwe),e(Qwe,qot),e(ra,jot),e(ra,Lf),e(Lf,Dot),e(Lf,Wwe),e(Wwe,Got),e(Lf,Oot),e(Lf,Tre),e(Tre,Vot),e(Lf,Xot),e(ra,zot),M(xw,ra,null),e(Cr,Qot),e(Cr,Kr),M(lk,Kr,null),e(Kr,Wot),e(Kr,Hwe),e(Hwe,Hot),e(Kr,Uot),e(Kr,$n),e($n,Jot),e($n,Uwe),e(Uwe,Yot),e($n,Kot),e($n,Jwe),e(Jwe,Zot),e($n,ert),e($n,Ywe),e(Ywe,ort),e($n,rrt),e(Kr,trt),e(Kr,ik),e(ik,$w),e($w,Kwe),e(Kwe,art),e($w,nrt),e($w,Mre),e(Mre,srt),e($w,lrt),e(ik,irt),e(ik,kw),e(kw,Zwe),e(Zwe,drt),e(kw,crt),e(kw,Ere),e(Ere,frt),e(kw,mrt),e(Kr,grt),M(Sw,Kr,null),b(f,eQe,u),b(f,yf,u),e(yf,Rw),e(Rw,eAe),M(dk,eAe,null),e(yf,hrt),e(yf,oAe),e(oAe,prt),b(f,oQe,u),b(f,wr,u),M(ck,wr,null),e(wr,_rt),e(wr,xf),e(xf,urt),e(xf,Cre),e(Cre,brt),e(xf,vrt),e(xf,wre),e(wre,Frt),e(xf,Trt),e(wr,Mrt),e(wr,fk),e(fk,Ert),e(fk,rAe),e(rAe,Crt),e(fk,wrt),e(wr,Art),e(wr,ta),M(mk,ta,null),e(ta,Lrt),e(ta,tAe),e(tAe,yrt),e(ta,xrt),e(ta,$f),e($f,$rt),e($f,aAe),e(aAe,krt),e($f,Srt),e($f,Are),e(Are,Rrt),e($f,Prt),e(ta,Brt),M(Pw,ta,null),e(wr,Irt),e(wr,Zr),M(gk,Zr,null),e(Zr,Nrt),e(Zr,nAe),e(nAe,qrt),e(Zr,jrt),e(Zr,kn),e(kn,Drt),e(kn,sAe),e(sAe,Grt),e(kn,Ort),e(kn,lAe),e(lAe,Vrt),e(kn,Xrt),e(kn,iAe),e(iAe,zrt),e(kn,Qrt),e(Zr,Wrt),e(Zr,dAe),e(dAe,Bw),e(Bw,cAe),e(cAe,Hrt),e(Bw,Urt),e(Bw,Lre),e(Lre,Jrt),e(Bw,Yrt),e(Zr,Krt),M(Iw,Zr,null),rQe=!0},p(f,[u]){const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),jf.$set(hk);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),Kg.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),Ph.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),bp.$set(gAe);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),vp.$set(pk);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),Dp.$set(hAe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Gp.$set(Sn);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),Xp.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),Uu.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),Yu.$set(uAe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),X1.$set(_k);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Q1.$set(bAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),P2.$set(uk);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),I2.$set(vAe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),Mb.$set(bk);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),Cb.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),Xb.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),Qb.$set(MAe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),Xv.$set(kf);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),Qv.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),CF.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),AF.$set(wAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),PF.$set(vk);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),IF.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),FT.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),MT.$set(yAe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),m7.$set(at);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),h7.$set(Fk);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),u7.$set(xAe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),v7.$set(Tk);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),P7.$set($Ae);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),I7.$set(nt);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),j7.$set(kAe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),G7.$set(Sf);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),X7.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),Q7.$set(RAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),t8.$set(L);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),n8.$set(Nw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),m8.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),h8.$set(BAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),A8.$set(qw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),y8.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),S8.$set(NAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),P8.$set(jw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),G8.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),V8.$set(jAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),H8.$set(Dw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),J8.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),oM.$set(GAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),tM.$set(Gw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),sM.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),iM.$set(VAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),pM.$set(Ow);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),uM.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),FM.$set(zAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),MM.$set(Vw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),_4.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),b4.$set(WAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),O4.$set(Xw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),X4.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),aE.$set(UAe);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),sE.$set(zw);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),mE.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),hE.$set(YAe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),BE.$set(Qw);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),NE.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),HE.$set(ZAe);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),JE.$set(Ww);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),EC.$set(e6e);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),wC.$set(o6e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),VC.$set(Hw);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),zC.$set(r6e);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),HC.$set(t6e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),JC.$set(Uw);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),KC.$set(a6e);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),e3.$set(n6e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),T3.$set(Jw);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),E3.$set(s6e);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),X3.$set(l6e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),Q3.$set(Yw);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),H3.$set(i6e);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),J3.$set(d6e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),K3.$set(Kw);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),e5.$set(c6e);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),y5.$set(f6e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),$5.$set(Zw);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),G5.$set(m6e);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),V5.$set(g6e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),t0.$set(eA);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),n0.$set(h6e);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),_0.$set(p6e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),b0.$set(oA);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),x0.$set(_6e);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),k0.$set(u6e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),O0.$set(rA);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),X0.$set(b6e);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),ow.$set(v6e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),tw.$set(tA);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),mw.$set(F6e);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),hw.$set(T6e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),Ew.$set(aA);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),ww.$set(M6e);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),Lw.$set(E6e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),xw.$set(nA);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),Sw.$set(C6e);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),Pw.$set(w6e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),Iw.$set(sA)},i(f){rQe||(E(d.$$.fragment,f),E(ka.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(jf.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(Kg.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Ph.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(EL.$$.fragment,f),E(bp.$$.fragment,f),E(vp.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(Dp.$$.fragment,f),E(Gp.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(Xp.$$.fragment,f),E(BL.$$.fragment,f),E(Uu.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Yu.$$.fragment,f),E(DL.$$.fragment,f),E(X1.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(Q1.$$.fragment,f),E(zL.$$.fragment,f),E(P2.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(I2.$$.fragment,f),E(JL.$$.fragment,f),E(Mb.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(Cb.$$.fragment,f),E(oy.$$.fragment,f),E(Xb.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Qb.$$.fragment,f),E(sy.$$.fragment,f),E(Xv.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(Qv.$$.fragment,f),E(fy.$$.fragment,f),E(CF.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(AF.$$.fragment,f),E(_y.$$.fragment,f),E(PF.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(IF.$$.fragment,f),E(Ty.$$.fragment,f),E(FT.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(MT.$$.fragment,f),E(Ay.$$.fragment,f),E(m7.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(h7.$$.fragment,f),E(ky.$$.fragment,f),E(u7.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(v7.$$.fragment,f),E(Iy.$$.fragment,f),E(P7.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(I7.$$.fragment,f),E(Gy.$$.fragment,f),E(j7.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(G7.$$.fragment,f),E(Qy.$$.fragment,f),E(X7.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(Q7.$$.fragment,f),E(Yy.$$.fragment,f),E(t8.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(n8.$$.fragment,f),E(r9.$$.fragment,f),E(m8.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(h8.$$.fragment,f),E(l9.$$.fragment,f),E(A8.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(y8.$$.fragment,f),E(m9.$$.fragment,f),E(S8.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(P8.$$.fragment,f),E(b9.$$.fragment,f),E(G8.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(V8.$$.fragment,f),E(E9.$$.fragment,f),E(H8.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(J8.$$.fragment,f),E(y9.$$.fragment,f),E(oM.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(tM.$$.fragment,f),E(R9.$$.fragment,f),E(sM.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(iM.$$.fragment,f),E(q9.$$.fragment,f),E(pM.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(uM.$$.fragment,f),E(V9.$$.fragment,f),E(FM.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(MM.$$.fragment,f),E(H9.$$.fragment,f),E(_4.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(b4.$$.fragment,f),E(Z9.$$.fragment,f),E(O4.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(X4.$$.fragment,f),E(ax.$$.fragment,f),E(aE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(sE.$$.fragment,f),E(dx.$$.fragment,f),E(mE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(hE.$$.fragment,f),E(hx.$$.fragment,f),E(BE.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(NE.$$.fragment,f),E(vx.$$.fragment,f),E(HE.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(JE.$$.fragment,f),E(Cx.$$.fragment,f),E(EC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(wC.$$.fragment,f),E(xx.$$.fragment,f),E(VC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(zC.$$.fragment,f),E(Px.$$.fragment,f),E(HC.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(JC.$$.fragment,f),E(Dx.$$.fragment,f),E(KC.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(e3.$$.fragment,f),E(zx.$$.fragment,f),E(T3.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(E3.$$.fragment,f),E(Jx.$$.fragment,f),E(X3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(Q3.$$.fragment,f),E(o$.$$.fragment,f),E(H3.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(J3.$$.fragment,f),E(s$.$$.fragment,f),E(K3.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(e5.$$.fragment,f),E(f$.$$.fragment,f),E(y5.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E($5.$$.fragment,f),E(_$.$$.fragment,f),E(G5.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(V5.$$.fragment,f),E(T$.$$.fragment,f),E(t0.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(n0.$$.fragment,f),E(A$.$$.fragment,f),E(_0.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(b0.$$.fragment,f),E(k$.$$.fragment,f),E(x0.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(k0.$$.fragment,f),E(I$.$$.fragment,f),E(O0.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(X0.$$.fragment,f),E(G$.$$.fragment,f),E(ow.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(tw.$$.fragment,f),E(Q$.$$.fragment,f),E(mw.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(hw.$$.fragment,f),E(Y$.$$.fragment,f),E(Ew.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(ww.$$.fragment,f),E(rk.$$.fragment,f),E(Lw.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(xw.$$.fragment,f),E(lk.$$.fragment,f),E(Sw.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(Pw.$$.fragment,f),E(gk.$$.fragment,f),E(Iw.$$.fragment,f),rQe=!0)},o(f){C(d.$$.fragment,f),C(ka.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(jf.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(Kg.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Ph.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(EL.$$.fragment,f),C(bp.$$.fragment,f),C(vp.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(Dp.$$.fragment,f),C(Gp.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(Xp.$$.fragment,f),C(BL.$$.fragment,f),C(Uu.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Yu.$$.fragment,f),C(DL.$$.fragment,f),C(X1.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(Q1.$$.fragment,f),C(zL.$$.fragment,f),C(P2.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(I2.$$.fragment,f),C(JL.$$.fragment,f),C(Mb.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(Cb.$$.fragment,f),C(oy.$$.fragment,f),C(Xb.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Qb.$$.fragment,f),C(sy.$$.fragment,f),C(Xv.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(Qv.$$.fragment,f),C(fy.$$.fragment,f),C(CF.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(AF.$$.fragment,f),C(_y.$$.fragment,f),C(PF.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(IF.$$.fragment,f),C(Ty.$$.fragment,f),C(FT.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(MT.$$.fragment,f),C(Ay.$$.fragment,f),C(m7.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(h7.$$.fragment,f),C(ky.$$.fragment,f),C(u7.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(v7.$$.fragment,f),C(Iy.$$.fragment,f),C(P7.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(I7.$$.fragment,f),C(Gy.$$.fragment,f),C(j7.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(G7.$$.fragment,f),C(Qy.$$.fragment,f),C(X7.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(Q7.$$.fragment,f),C(Yy.$$.fragment,f),C(t8.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(n8.$$.fragment,f),C(r9.$$.fragment,f),C(m8.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(h8.$$.fragment,f),C(l9.$$.fragment,f),C(A8.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(y8.$$.fragment,f),C(m9.$$.fragment,f),C(S8.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(P8.$$.fragment,f),C(b9.$$.fragment,f),C(G8.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(V8.$$.fragment,f),C(E9.$$.fragment,f),C(H8.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(J8.$$.fragment,f),C(y9.$$.fragment,f),C(oM.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(tM.$$.fragment,f),C(R9.$$.fragment,f),C(sM.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(iM.$$.fragment,f),C(q9.$$.fragment,f),C(pM.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(uM.$$.fragment,f),C(V9.$$.fragment,f),C(FM.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(MM.$$.fragment,f),C(H9.$$.fragment,f),C(_4.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(b4.$$.fragment,f),C(Z9.$$.fragment,f),C(O4.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(X4.$$.fragment,f),C(ax.$$.fragment,f),C(aE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(sE.$$.fragment,f),C(dx.$$.fragment,f),C(mE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(hE.$$.fragment,f),C(hx.$$.fragment,f),C(BE.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(NE.$$.fragment,f),C(vx.$$.fragment,f),C(HE.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(JE.$$.fragment,f),C(Cx.$$.fragment,f),C(EC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(wC.$$.fragment,f),C(xx.$$.fragment,f),C(VC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(zC.$$.fragment,f),C(Px.$$.fragment,f),C(HC.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(JC.$$.fragment,f),C(Dx.$$.fragment,f),C(KC.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(e3.$$.fragment,f),C(zx.$$.fragment,f),C(T3.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(E3.$$.fragment,f),C(Jx.$$.fragment,f),C(X3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(Q3.$$.fragment,f),C(o$.$$.fragment,f),C(H3.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(J3.$$.fragment,f),C(s$.$$.fragment,f),C(K3.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(e5.$$.fragment,f),C(f$.$$.fragment,f),C(y5.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C($5.$$.fragment,f),C(_$.$$.fragment,f),C(G5.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(V5.$$.fragment,f),C(T$.$$.fragment,f),C(t0.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(n0.$$.fragment,f),C(A$.$$.fragment,f),C(_0.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(b0.$$.fragment,f),C(k$.$$.fragment,f),C(x0.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(k0.$$.fragment,f),C(I$.$$.fragment,f),C(O0.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(X0.$$.fragment,f),C(G$.$$.fragment,f),C(ow.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(tw.$$.fragment,f),C(Q$.$$.fragment,f),C(mw.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(hw.$$.fragment,f),C(Y$.$$.fragment,f),C(Ew.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(ww.$$.fragment,f),C(rk.$$.fragment,f),C(Lw.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(xw.$$.fragment,f),C(lk.$$.fragment,f),C(Sw.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(Pw.$$.fragment,f),C(gk.$$.fragment,f),C(Iw.$$.fragment,f),rQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(If),w(ka,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Sa),f&&t(YVe),f&&t(Ri),w(nL),f&&t(KVe),f&&t(Nn),f&&t(ZVe),w(sL,f),f&&t(eXe),f&&t(jS),f&&t(oXe),w(jf,f),f&&t(rXe),f&&t(Pi),w(lL),f&&t(tXe),f&&t(wo),w(iL),w(fL),w(Kg),w(mL),f&&t(aXe),f&&t(Ii),w(gL),f&&t(nXe),f&&t(Ao),w(hL),w(uL),w(Ph),w(bL),f&&t(sXe),f&&t(Ni),w(vL),f&&t(lXe),f&&t(Lo),w(FL),w(EL),w(bp),w(vp),w(CL),f&&t(iXe),f&&t(qi),w(wL),f&&t(dXe),f&&t(yo),w(AL),w(xL),w(Dp),w(Gp),w($L),f&&t(cXe),f&&t(Di),w(kL),f&&t(fXe),f&&t(xo),w(SL),w(PL),w(Xp),w(BL),w(Uu),f&&t(mXe),f&&t(Vi),w(IL),f&&t(gXe),f&&t($o),w(NL),w(jL),w(Yu),w(DL),w(X1),f&&t(hXe),f&&t(Qi),w(GL),f&&t(pXe),f&&t(ko),w(OL),w(XL),w(Q1),w(zL),w(P2),f&&t(_Xe),f&&t(Ui),w(QL),f&&t(uXe),f&&t(So),w(WL),w(UL),w(I2),w(JL),w(Mb),f&&t(bXe),f&&t(Ki),w(YL),f&&t(vXe),f&&t(Ro),w(KL),w(ey),w(Cb),w(oy),w(Xb),f&&t(FXe),f&&t(od),w(ry),f&&t(TXe),f&&t(Po),w(ty),w(ny),w(Qb),w(sy),w(Xv),f&&t(MXe),f&&t(ad),w(ly),f&&t(EXe),f&&t(Bo),w(iy),w(cy),w(Qv),w(fy),w(CF),f&&t(CXe),f&&t(ld),w(my),f&&t(wXe),f&&t(Io),w(gy),w(py),w(AF),w(_y),w(PF),f&&t(AXe),f&&t(cd),w(uy),f&&t(LXe),f&&t(qo),w(by),w(Fy),w(IF),w(Ty),w(FT),f&&t(yXe),f&&t(gd),w(My),f&&t(xXe),f&&t(jo),w(Ey),w(wy),w(MT),w(Ay),w(m7),f&&t($Xe),f&&t(_d),w(Ly),f&&t(kXe),f&&t(Do),w(yy),w($y),w(h7),w(ky),w(u7),f&&t(SXe),f&&t(vd),w(Sy),f&&t(RXe),f&&t(Go),w(Ry),w(By),w(v7),w(Iy),w(P7),f&&t(PXe),f&&t(Md),w(Ny),f&&t(BXe),f&&t(Oo),w(qy),w(Dy),w(I7),w(Gy),w(j7),f&&t(IXe),f&&t(wd),w(Oy),f&&t(NXe),f&&t(Vo),w(Vy),w(zy),w(G7),w(Qy),w(X7),f&&t(qXe),f&&t(yd),w(Wy),f&&t(jXe),f&&t(Xo),w(Hy),w(Jy),w(Q7),w(Yy),w(t8),f&&t(DXe),f&&t(kd),w(Ky),f&&t(GXe),f&&t(zo),w(Zy),w(o9),w(n8),w(r9),w(m8),f&&t(OXe),f&&t(Pd),w(t9),f&&t(VXe),f&&t(Qo),w(a9),w(s9),w(h8),w(l9),w(A8),f&&t(XXe),f&&t(Nd),w(i9),f&&t(zXe),f&&t(Wo),w(d9),w(f9),w(y8),w(m9),w(S8),f&&t(QXe),f&&t(Dd),w(h9),f&&t(WXe),f&&t(Ho),w(p9),w(u9),w(P8),w(b9),w(G8),f&&t(HXe),f&&t(Vd),w(v9),f&&t(UXe),f&&t(Uo),w(F9),w(M9),w(V8),w(E9),w(H8),f&&t(JXe),f&&t(Wd),w(C9),f&&t(YXe),f&&t(Jo),w(w9),w(L9),w(J8),w(y9),w(oM),f&&t(KXe),f&&t(Yd),w(x9),f&&t(ZXe),f&&t(Yo),w($9),w(S9),w(tM),w(R9),w(sM),f&&t(eze),f&&t(ec),w(P9),f&&t(oze),f&&t(Ko),w(B9),w(N9),w(iM),w(q9),w(pM),f&&t(rze),f&&t(tc),w(j9),f&&t(tze),f&&t(Zo),w(D9),w(O9),w(uM),w(V9),w(FM),f&&t(aze),f&&t(sc),w(X9),f&&t(nze),f&&t(er),w(z9),w(W9),w(MM),w(H9),w(_4),f&&t(sze),f&&t(dc),w(U9),f&&t(lze),f&&t(or),w(J9),w(K9),w(b4),w(Z9),w(O4),f&&t(ize),f&&t(mc),w(ex),f&&t(dze),f&&t(rr),w(ox),w(tx),w(X4),w(ax),w(aE),f&&t(cze),f&&t(pc),w(nx),f&&t(fze),f&&t(tr),w(sx),w(ix),w(sE),w(dx),w(mE),f&&t(mze),f&&t(bc),w(cx),f&&t(gze),f&&t(ar),w(fx),w(gx),w(hE),w(hx),w(BE),f&&t(hze),f&&t(Tc),w(px),f&&t(pze),f&&t(nr),w(_x),w(bx),w(NE),w(vx),w(HE),f&&t(_ze),f&&t(Cc),w(Fx),f&&t(uze),f&&t(sr),w(Tx),w(Ex),w(JE),w(Cx),w(EC),f&&t(bze),f&&t(Lc),w(wx),f&&t(vze),f&&t(lr),w(Ax),w(yx),w(wC),w(xx),w(VC),f&&t(Fze),f&&t($c),w($x),f&&t(Tze),f&&t(ir),w(kx),w(Rx),w(zC),w(Px),w(HC),f&&t(Mze),f&&t(Rc),w(Ix),f&&t(Eze),f&&t(dr),w(Nx),w(jx),w(JC),w(Dx),w(KC),f&&t(Cze),f&&t(Ic),w(Gx),f&&t(wze),f&&t(cr),w(Ox),w(Xx),w(e3),w(zx),w(T3),f&&t(Aze),f&&t(jc),w(Qx),f&&t(Lze),f&&t(fr),w(Wx),w(Ux),w(E3),w(Jx),w(X3),f&&t(yze),f&&t(Oc),w(Yx),f&&t(xze),f&&t(mr),w(Kx),w(e$),w(Q3),w(o$),w(H3),f&&t($ze),f&&t(zc),w(r$),f&&t(kze),f&&t(gr),w(t$),w(n$),w(J3),w(s$),w(K3),f&&t(Sze),f&&t(Hc),w(l$),f&&t(Rze),f&&t(hr),w(i$),w(c$),w(e5),w(f$),w(y5),f&&t(Pze),f&&t(Yc),w(m$),f&&t(Bze),f&&t(pr),w(g$),w(p$),w($5),w(_$),w(G5),f&&t(Ize),f&&t(ef),w(u$),f&&t(Nze),f&&t(_r),w(b$),w(F$),w(V5),w(T$),w(t0),f&&t(qze),f&&t(tf),w(M$),f&&t(jze),f&&t(ur),w(E$),w(w$),w(n0),w(A$),w(_0),f&&t(Dze),f&&t(sf),w(L$),f&&t(Gze),f&&t(br),w(y$),w($$),w(b0),w(k$),w(x0),f&&t(Oze),f&&t(cf),w(S$),f&&t(Vze),f&&t(vr),w(R$),w(B$),w(k0),w(I$),w(O0),f&&t(Xze),f&&t(gf),w(N$),f&&t(zze),f&&t(Fr),w(q$),w(D$),w(X0),w(G$),w(ow),f&&t(Qze),f&&t(_f),w(O$),f&&t(Wze),f&&t(Tr),w(V$),w(z$),w(tw),w(Q$),w(mw),f&&t(Hze),f&&t(vf),w(W$),f&&t(Uze),f&&t(Mr),w(H$),w(J$),w(hw),w(Y$),w(Ew),f&&t(Jze),f&&t(Mf),w(K$),f&&t(Yze),f&&t(Er),w(Z$),w(ok),w(ww),w(rk),w(Lw),f&&t(Kze),f&&t(wf),w(tk),f&&t(Zze),f&&t(Cr),w(ak),w(sk),w(xw),w(lk),w(Sw),f&&t(eQe),f&&t(yf),w(dk),f&&t(oQe),f&&t(wr),w(ck),w(mk),w(Pw),w(gk),w(Iw)}}}const kHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SHt($){return $Qt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jHt extends AQt{constructor(g){super();LQt(this,g,SHt,$Ht,yQt,{})}}export{jHt as default,kHt as metadata};
