import{S as HQt,i as UQt,s as JQt,e as a,k as l,w as F,t as o,M as YQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as KQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as utt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ZQt($){let g,v,p,m,_,d,h,Eo,Ai,Pf,st,Li,yi,tL,Bf,Oe,Qe,xi,Pn,aL,Bn,In,nL,$i,Nn,sL,ki,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Pf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),tL=o(")."),Bf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),aL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),nL=o(`, make sure its
`),$i=a("code"),Nn=o("config_class"),sL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var IS=s(p);m=r(IS,"NewModelConfig"),IS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var NS=s(Ai);Pf=r(NS,"model_type"),NS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var qS=s(Li);yi=r(qS,'"new-model"'),qS.forEach(t),tL=r(Ae,")."),Ae.forEach(t),Bf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),aL=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var jS=s(Bn);In=r(jS,"PreTrainedModel"),jS.forEach(t),nL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Nf=s($i);Nn=r(Nf,"config_class"),Nf.forEach(t),sL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var DS=s(ki);If=r(DS,"NewModelConfig"),DS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Pf),e(g,st),e(g,Li),e(Li,yi),e(g,tL),b(We,Bf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,aL),e(Oe,Bn),e(Bn,In),e(Oe,nL),e(Oe,$i),e($i,Nn),e(Oe,sL),e(Oe,ki),e(ki,If),e(Oe,Sa)},d(We){We&&t(g),We&&t(Bf),We&&t(Oe)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_,d,h,Eo,Ai,Pf,st,Li,yi,tL,Bf,Oe,Qe,xi,Pn,aL,Bn,In,nL,$i,Nn,sL,ki,If,Sa,We,Ae,IS,Si,NS,qS,Co,Ra,jS,Nf,DS,vHe,nXe,Ri,qf,Lae,lL,FHe,yae,THe,sXe,qn,MHe,xae,EHe,CHe,$ae,wHe,AHe,lXe,iL,iXe,GS,LHe,dXe,jf,cXe,Pi,Df,kae,dL,yHe,Sae,xHe,fXe,wo,cL,$He,fL,kHe,OS,SHe,RHe,PHe,mL,BHe,Rae,IHe,NHe,qHe,Lr,gL,jHe,Pae,DHe,GHe,Bi,OHe,Bae,VHe,XHe,Iae,zHe,QHe,WHe,A,Gf,Nae,HHe,UHe,VS,JHe,YHe,KHe,Of,qae,ZHe,eUe,XS,oUe,rUe,tUe,Vf,jae,aUe,nUe,zS,sUe,lUe,iUe,Xf,Dae,dUe,cUe,QS,fUe,mUe,gUe,zf,Gae,hUe,pUe,WS,_Ue,uUe,bUe,Qf,Oae,vUe,FUe,HS,TUe,MUe,EUe,Wf,Vae,CUe,wUe,US,AUe,LUe,yUe,Hf,Xae,xUe,$Ue,JS,kUe,SUe,RUe,Uf,zae,PUe,BUe,YS,IUe,NUe,qUe,Jf,Qae,jUe,DUe,KS,GUe,OUe,VUe,Yf,Wae,XUe,zUe,ZS,QUe,WUe,HUe,Kf,Hae,UUe,JUe,eR,YUe,KUe,ZUe,Zf,Uae,eJe,oJe,oR,rJe,tJe,aJe,em,Jae,nJe,sJe,rR,lJe,iJe,dJe,om,Yae,cJe,fJe,tR,mJe,gJe,hJe,rm,Kae,pJe,_Je,aR,uJe,bJe,vJe,tm,Zae,FJe,TJe,nR,MJe,EJe,CJe,am,ene,wJe,AJe,sR,LJe,yJe,xJe,nm,one,$Je,kJe,lR,SJe,RJe,PJe,sm,rne,BJe,IJe,iR,NJe,qJe,jJe,lm,tne,DJe,GJe,dR,OJe,VJe,XJe,im,ane,zJe,QJe,cR,WJe,HJe,UJe,dm,nne,JJe,YJe,fR,KJe,ZJe,eYe,cm,sne,oYe,rYe,mR,tYe,aYe,nYe,fm,lne,sYe,lYe,gR,iYe,dYe,cYe,mm,ine,fYe,mYe,hR,gYe,hYe,pYe,gm,dne,_Ye,uYe,pR,bYe,vYe,FYe,hm,cne,TYe,MYe,_R,EYe,CYe,wYe,pm,fne,AYe,LYe,uR,yYe,xYe,$Ye,_m,mne,kYe,SYe,bR,RYe,PYe,BYe,um,gne,IYe,NYe,vR,qYe,jYe,DYe,bm,hne,GYe,OYe,FR,VYe,XYe,zYe,vm,pne,QYe,WYe,TR,HYe,UYe,JYe,Fm,_ne,YYe,KYe,MR,ZYe,eKe,oKe,Tm,une,rKe,tKe,ER,aKe,nKe,sKe,Mm,bne,lKe,iKe,CR,dKe,cKe,fKe,Em,vne,mKe,gKe,wR,hKe,pKe,_Ke,Cm,Fne,uKe,bKe,AR,vKe,FKe,TKe,wm,Tne,MKe,EKe,LR,CKe,wKe,AKe,Am,Mne,LKe,yKe,yR,xKe,$Ke,kKe,Lm,Ene,SKe,RKe,xR,PKe,BKe,IKe,ym,Cne,NKe,qKe,$R,jKe,DKe,GKe,xm,wne,OKe,VKe,kR,XKe,zKe,QKe,$m,Ane,WKe,HKe,SR,UKe,JKe,YKe,km,Lne,KKe,ZKe,RR,eZe,oZe,rZe,Sm,yne,tZe,aZe,PR,nZe,sZe,lZe,Rm,xne,iZe,dZe,BR,cZe,fZe,mZe,Pm,$ne,gZe,hZe,IR,pZe,_Ze,uZe,Bm,kne,bZe,vZe,NR,FZe,TZe,MZe,Im,Sne,EZe,CZe,qR,wZe,AZe,LZe,Nm,Rne,yZe,xZe,jR,$Ze,kZe,SZe,qm,Pne,RZe,PZe,DR,BZe,IZe,NZe,jm,Bne,qZe,jZe,GR,DZe,GZe,OZe,Dm,Ine,VZe,XZe,OR,zZe,QZe,WZe,Gm,Nne,HZe,UZe,VR,JZe,YZe,KZe,Om,qne,ZZe,eeo,XR,oeo,reo,teo,Vm,jne,aeo,neo,zR,seo,leo,ieo,Xm,Dne,deo,ceo,QR,feo,meo,geo,zm,Gne,heo,peo,WR,_eo,ueo,beo,Qm,One,veo,Feo,HR,Teo,Meo,Eeo,Wm,Vne,Ceo,weo,UR,Aeo,Leo,yeo,Hm,Xne,xeo,$eo,JR,keo,Seo,Reo,Um,zne,Peo,Beo,YR,Ieo,Neo,qeo,Jm,Qne,jeo,Deo,KR,Geo,Oeo,Veo,Ym,Wne,Xeo,zeo,ZR,Qeo,Weo,Heo,Km,Hne,Ueo,Jeo,eP,Yeo,Keo,Zeo,Zm,Une,eoo,ooo,oP,roo,too,aoo,eg,Jne,noo,soo,rP,loo,ioo,doo,og,Yne,coo,foo,tP,moo,goo,hoo,rg,Kne,poo,_oo,aP,uoo,boo,voo,tg,Zne,Foo,Too,nP,Moo,Eoo,Coo,ag,ese,woo,Aoo,sP,Loo,yoo,xoo,ng,ose,$oo,koo,lP,Soo,Roo,Poo,sg,rse,Boo,Ioo,iP,Noo,qoo,joo,lg,tse,Doo,Goo,dP,Ooo,Voo,Xoo,ig,ase,zoo,Qoo,cP,Woo,Hoo,Uoo,dg,nse,Joo,Yoo,fP,Koo,Zoo,ero,cg,sse,oro,rro,mP,tro,aro,nro,fg,lse,sro,lro,gP,iro,dro,cro,mg,ise,fro,mro,hP,gro,hro,pro,gg,dse,_ro,uro,pP,bro,vro,Fro,hg,cse,Tro,Mro,_P,Ero,Cro,wro,pg,fse,Aro,Lro,uP,yro,xro,$ro,_g,mse,kro,Sro,bP,Rro,Pro,Bro,ug,gse,Iro,Nro,vP,qro,jro,Dro,bg,hse,Gro,Oro,FP,Vro,Xro,zro,vg,pse,Qro,Wro,TP,Hro,Uro,Jro,Fg,_se,Yro,Kro,MP,Zro,eto,oto,Tg,use,rto,tto,EP,ato,nto,sto,Mg,bse,lto,ito,CP,dto,cto,fto,Eg,vse,mto,gto,wP,hto,pto,_to,Cg,Fse,uto,bto,AP,vto,Fto,Tto,wg,Tse,Mto,Eto,LP,Cto,wto,Ato,Ag,Mse,Lto,yto,yP,xto,$to,kto,Lg,Ese,Sto,Rto,xP,Pto,Bto,Ito,yg,Cse,Nto,qto,$P,jto,Dto,Gto,xg,wse,Oto,Vto,kP,Xto,zto,Qto,$g,Ase,Wto,Hto,SP,Uto,Jto,Yto,kg,Lse,Kto,Zto,RP,eao,oao,rao,Sg,yse,tao,aao,PP,nao,sao,lao,Rg,xse,iao,dao,BP,cao,fao,mao,Pg,$se,gao,hao,IP,pao,_ao,uao,Bg,kse,bao,vao,NP,Fao,Tao,Mao,Ig,Sse,Eao,Cao,qP,wao,Aao,Lao,Ng,Rse,yao,xao,jP,$ao,kao,Sao,qg,Pse,Rao,Pao,DP,Bao,Iao,Nao,jg,Bse,qao,jao,GP,Dao,Gao,Oao,Dg,Ise,Vao,Xao,OP,zao,Qao,Wao,Gg,Nse,Hao,Uao,VP,Jao,Yao,Kao,Og,qse,Zao,eno,XP,ono,rno,tno,Vg,jse,ano,nno,zP,sno,lno,ino,Xg,Dse,dno,cno,QP,fno,mno,gno,zg,Gse,hno,pno,WP,_no,uno,bno,Qg,Ose,vno,Fno,HP,Tno,Mno,Eno,Wg,Vse,Cno,wno,UP,Ano,Lno,yno,Hg,Xse,xno,$no,JP,kno,Sno,Rno,Ug,zse,Pno,Bno,YP,Ino,Nno,qno,Jg,Qse,jno,Dno,KP,Gno,Ono,Vno,Yg,Wse,Xno,zno,ZP,Qno,Wno,Hno,Kg,Uno,Zg,hL,Jno,Hse,Yno,mXe,Ii,eh,Use,pL,Kno,Jse,Zno,gXe,Ao,_L,eso,uL,oso,eB,rso,tso,aso,bL,nso,Yse,sso,lso,iso,yr,vL,dso,Kse,cso,fso,Pa,mso,Zse,gso,hso,ele,pso,_so,ole,uso,bso,vso,k,jn,rle,Fso,Tso,oB,Mso,Eso,rB,Cso,wso,Aso,Dn,tle,Lso,yso,tB,xso,$so,aB,kso,Sso,Rso,Gn,ale,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,oh,nle,Gso,Oso,lB,Vso,Xso,zso,On,sle,Qso,Wso,iB,Hso,Uso,dB,Jso,Yso,Kso,rh,lle,Zso,elo,cB,olo,rlo,tlo,th,ile,alo,nlo,fB,slo,llo,ilo,ah,dle,dlo,clo,mB,flo,mlo,glo,Vn,cle,hlo,plo,gB,_lo,ulo,hB,blo,vlo,Flo,Xn,fle,Tlo,Mlo,pB,Elo,Clo,_B,wlo,Alo,Llo,zn,mle,ylo,xlo,uB,$lo,klo,bB,Slo,Rlo,Plo,nh,gle,Blo,Ilo,vB,Nlo,qlo,jlo,sh,hle,Dlo,Glo,FB,Olo,Vlo,Xlo,lh,ple,zlo,Qlo,TB,Wlo,Hlo,Ulo,Qn,_le,Jlo,Ylo,MB,Klo,Zlo,EB,eio,oio,rio,ih,ule,tio,aio,CB,nio,sio,lio,Wn,ble,iio,dio,wB,cio,fio,AB,mio,gio,hio,Hn,vle,pio,_io,LB,uio,bio,yB,vio,Fio,Tio,Un,Fle,Mio,Eio,xB,Cio,wio,$B,Aio,Lio,yio,Jn,Tle,xio,$io,kB,kio,Sio,SB,Rio,Pio,Bio,dh,Mle,Iio,Nio,RB,qio,jio,Dio,Yn,Ele,Gio,Oio,PB,Vio,Xio,BB,zio,Qio,Wio,Kn,Cle,Hio,Uio,IB,Jio,Yio,NB,Kio,Zio,edo,Zn,wle,odo,rdo,qB,tdo,ado,jB,ndo,sdo,ldo,es,Ale,ido,ddo,DB,cdo,fdo,GB,mdo,gdo,hdo,os,Lle,pdo,_do,OB,udo,bdo,VB,vdo,Fdo,Tdo,rs,yle,Mdo,Edo,XB,Cdo,wdo,zB,Ado,Ldo,ydo,ch,xle,xdo,$do,QB,kdo,Sdo,Rdo,ts,$le,Pdo,Bdo,WB,Ido,Ndo,HB,qdo,jdo,Ddo,fh,kle,Gdo,Odo,UB,Vdo,Xdo,zdo,as,Sle,Qdo,Wdo,JB,Hdo,Udo,YB,Jdo,Ydo,Kdo,ns,Rle,Zdo,eco,KB,oco,rco,ZB,tco,aco,nco,ss,Ple,sco,lco,eI,ico,dco,oI,cco,fco,mco,mh,Ble,gco,hco,rI,pco,_co,uco,ls,Ile,bco,vco,tI,Fco,Tco,aI,Mco,Eco,Cco,is,Nle,wco,Aco,nI,Lco,yco,sI,xco,$co,kco,ds,qle,Sco,Rco,lI,Pco,Bco,iI,Ico,Nco,qco,gh,jle,jco,Dco,dI,Gco,Oco,Vco,cs,Dle,Xco,zco,cI,Qco,Wco,fI,Hco,Uco,Jco,fs,Gle,Yco,Kco,mI,Zco,efo,gI,ofo,rfo,tfo,ms,Ole,afo,nfo,hI,sfo,lfo,pI,ifo,dfo,cfo,gs,Vle,ffo,mfo,_I,gfo,hfo,uI,pfo,_fo,ufo,hs,Xle,bfo,vfo,bI,Ffo,Tfo,vI,Mfo,Efo,Cfo,ps,zle,wfo,Afo,FI,Lfo,yfo,TI,xfo,$fo,kfo,_s,Qle,Sfo,Rfo,MI,Pfo,Bfo,EI,Ifo,Nfo,qfo,us,Wle,jfo,Dfo,CI,Gfo,Ofo,wI,Vfo,Xfo,zfo,hh,Hle,Qfo,Wfo,AI,Hfo,Ufo,Jfo,bs,Ule,Yfo,Kfo,LI,Zfo,emo,yI,omo,rmo,tmo,ph,Jle,amo,nmo,xI,smo,lmo,imo,_h,Yle,dmo,cmo,$I,fmo,mmo,gmo,vs,Kle,hmo,pmo,kI,_mo,umo,SI,bmo,vmo,Fmo,Fs,Zle,Tmo,Mmo,RI,Emo,Cmo,PI,wmo,Amo,Lmo,Ts,eie,ymo,xmo,BI,$mo,kmo,II,Smo,Rmo,Pmo,uh,oie,Bmo,Imo,NI,Nmo,qmo,jmo,Ms,rie,Dmo,Gmo,qI,Omo,Vmo,jI,Xmo,zmo,Qmo,Es,tie,Wmo,Hmo,DI,Umo,Jmo,GI,Ymo,Kmo,Zmo,Cs,aie,ego,ogo,OI,rgo,tgo,VI,ago,ngo,sgo,ws,nie,lgo,igo,XI,dgo,cgo,zI,fgo,mgo,ggo,As,sie,hgo,pgo,QI,_go,ugo,WI,bgo,vgo,Fgo,Ls,lie,Tgo,Mgo,HI,Ego,Cgo,UI,wgo,Ago,Lgo,ys,iie,ygo,xgo,JI,$go,kgo,YI,Sgo,Rgo,Pgo,bh,die,Bgo,Igo,KI,Ngo,qgo,jgo,xs,cie,Dgo,Ggo,ZI,Ogo,Vgo,eN,Xgo,zgo,Qgo,vh,fie,Wgo,Hgo,oN,Ugo,Jgo,Ygo,Fh,mie,Kgo,Zgo,rN,eho,oho,rho,Th,gie,tho,aho,tN,nho,sho,lho,Mh,hie,iho,dho,aN,cho,fho,mho,$s,pie,gho,hho,nN,pho,_ho,sN,uho,bho,vho,Eh,_ie,Fho,Tho,lN,Mho,Eho,Cho,ks,uie,who,Aho,iN,Lho,yho,dN,xho,$ho,kho,Ss,bie,Sho,Rho,cN,Pho,Bho,fN,Iho,Nho,qho,Rs,vie,jho,Dho,mN,Gho,Oho,gN,Vho,Xho,zho,Ps,Fie,Qho,Who,hN,Hho,Uho,pN,Jho,Yho,Kho,Bs,Tie,Zho,epo,_N,opo,rpo,uN,tpo,apo,npo,Is,Mie,spo,lpo,bN,ipo,dpo,vN,cpo,fpo,mpo,Ch,Eie,gpo,hpo,FN,ppo,_po,upo,wh,Cie,bpo,vpo,TN,Fpo,Tpo,Mpo,Ns,wie,Epo,Cpo,MN,wpo,Apo,EN,Lpo,ypo,xpo,qs,Aie,$po,kpo,CN,Spo,Rpo,wN,Ppo,Bpo,Ipo,js,Lie,Npo,qpo,AN,jpo,Dpo,LN,Gpo,Opo,Vpo,Ah,yie,Xpo,zpo,yN,Qpo,Wpo,Hpo,Lh,xie,Upo,Jpo,xN,Ypo,Kpo,Zpo,yh,$ie,e_o,o_o,$N,r_o,t_o,a_o,Ds,kie,n_o,s_o,kN,l_o,i_o,SN,d_o,c_o,f_o,Gs,Sie,m_o,g_o,RN,h_o,p_o,PN,__o,u_o,b_o,xh,Rie,v_o,F_o,BN,T_o,M_o,E_o,$h,Pie,C_o,w_o,IN,A_o,L_o,y_o,kh,Bie,x_o,$_o,NN,k_o,S_o,R_o,Os,Iie,P_o,B_o,qN,I_o,N_o,jN,q_o,j_o,D_o,Sh,Nie,G_o,O_o,DN,V_o,X_o,z_o,Rh,qie,Q_o,W_o,GN,H_o,U_o,J_o,Vs,jie,Y_o,K_o,ON,Z_o,euo,VN,ouo,ruo,tuo,Xs,Die,auo,nuo,XN,suo,luo,zN,iuo,duo,cuo,zs,Gie,fuo,muo,QN,guo,huo,WN,puo,_uo,uuo,Qs,Oie,buo,vuo,HN,Fuo,Tuo,UN,Muo,Euo,Cuo,Ph,wuo,Bh,FL,Auo,Vie,Luo,hXe,Ni,Ih,Xie,TL,yuo,zie,xuo,pXe,Lo,ML,$uo,EL,kuo,JN,Suo,Ruo,Puo,CL,Buo,Qie,Iuo,Nuo,quo,He,wL,juo,Wie,Duo,Guo,Ba,Ouo,Hie,Vuo,Xuo,Uie,zuo,Quo,Jie,Wuo,Huo,Uuo,J,Nh,Yie,Juo,Yuo,YN,Kuo,Zuo,e1o,qh,Kie,o1o,r1o,KN,t1o,a1o,n1o,jh,Zie,s1o,l1o,ZN,i1o,d1o,c1o,Dh,ede,f1o,m1o,eq,g1o,h1o,p1o,Gh,ode,_1o,u1o,oq,b1o,v1o,F1o,Oh,rde,T1o,M1o,rq,E1o,C1o,w1o,Vh,tde,A1o,L1o,tq,y1o,x1o,$1o,Xh,ade,k1o,S1o,aq,R1o,P1o,B1o,zh,nde,I1o,N1o,nq,q1o,j1o,D1o,Qh,sde,G1o,O1o,sq,V1o,X1o,z1o,Wh,lde,Q1o,W1o,lq,H1o,U1o,J1o,Hh,ide,Y1o,K1o,iq,Z1o,e2o,o2o,Uh,dde,r2o,t2o,dq,a2o,n2o,s2o,Jh,cde,l2o,i2o,cq,d2o,c2o,f2o,Yh,fde,m2o,g2o,fq,h2o,p2o,_2o,Kh,mde,u2o,b2o,mq,v2o,F2o,T2o,Zh,gde,M2o,E2o,gq,C2o,w2o,A2o,ep,hde,L2o,y2o,hq,x2o,$2o,k2o,op,pde,S2o,R2o,pq,P2o,B2o,I2o,rp,_de,N2o,q2o,_q,j2o,D2o,G2o,tp,ude,O2o,V2o,uq,X2o,z2o,Q2o,ap,bde,W2o,H2o,bq,U2o,J2o,Y2o,np,vde,K2o,Z2o,vq,ebo,obo,rbo,sp,Fde,tbo,abo,Fq,nbo,sbo,lbo,lp,Tde,ibo,dbo,Tq,cbo,fbo,mbo,ip,Mde,gbo,hbo,Mq,pbo,_bo,ubo,dp,Ede,bbo,vbo,Eq,Fbo,Tbo,Mbo,cp,Cde,Ebo,Cbo,Cq,wbo,Abo,Lbo,fp,wde,ybo,xbo,wq,$bo,kbo,Sbo,mp,Ade,Rbo,Pbo,Aq,Bbo,Ibo,Nbo,gp,Lde,qbo,jbo,Lq,Dbo,Gbo,Obo,hp,yde,Vbo,Xbo,yq,zbo,Qbo,Wbo,pp,xde,Hbo,Ubo,xq,Jbo,Ybo,Kbo,_p,$de,Zbo,evo,$q,ovo,rvo,tvo,up,kde,avo,nvo,kq,svo,lvo,ivo,bp,dvo,vp,cvo,Fp,AL,fvo,Sde,mvo,_Xe,qi,Tp,Rde,LL,gvo,Pde,hvo,uXe,yo,yL,pvo,xL,_vo,Sq,uvo,bvo,vvo,$L,Fvo,Bde,Tvo,Mvo,Evo,Ue,kL,Cvo,Ide,wvo,Avo,ji,Lvo,Nde,yvo,xvo,qde,$vo,kvo,Svo,he,Mp,jde,Rvo,Pvo,Rq,Bvo,Ivo,Nvo,Ep,Dde,qvo,jvo,Gde,Dvo,Gvo,Ovo,Cp,Ode,Vvo,Xvo,Pq,zvo,Qvo,Wvo,wp,Vde,Hvo,Uvo,Bq,Jvo,Yvo,Kvo,Ap,Xde,Zvo,eFo,Iq,oFo,rFo,tFo,Lp,zde,aFo,nFo,Nq,sFo,lFo,iFo,yp,Qde,dFo,cFo,qq,fFo,mFo,gFo,xp,Wde,hFo,pFo,jq,_Fo,uFo,bFo,$p,Hde,vFo,FFo,Dq,TFo,MFo,EFo,kp,Ude,CFo,wFo,Gq,AFo,LFo,yFo,Sp,Jde,xFo,$Fo,Oq,kFo,SFo,RFo,Rp,Yde,PFo,BFo,Vq,IFo,NFo,qFo,Pp,Kde,jFo,DFo,Xq,GFo,OFo,VFo,Bp,Zde,XFo,zFo,zq,QFo,WFo,HFo,Ip,ece,UFo,JFo,Qq,YFo,KFo,ZFo,Np,oce,eTo,oTo,Wq,rTo,tTo,aTo,qp,rce,nTo,sTo,Hq,lTo,iTo,dTo,jp,tce,cTo,fTo,Uq,mTo,gTo,hTo,Dp,pTo,Gp,_To,Op,SL,uTo,ace,bTo,bXe,Di,Vp,nce,RL,vTo,sce,FTo,vXe,xo,PL,TTo,Gi,MTo,Jq,ETo,CTo,Yq,wTo,ATo,LTo,BL,yTo,lce,xTo,$To,kTo,lt,IL,STo,ice,RTo,PTo,Oi,BTo,dce,ITo,NTo,Kq,qTo,jTo,DTo,Xp,GTo,Je,NL,OTo,cce,VTo,XTo,Ia,zTo,fce,QTo,WTo,mce,HTo,UTo,gce,JTo,YTo,KTo,y,zp,hce,ZTo,e7o,Zq,o7o,r7o,t7o,Qp,pce,a7o,n7o,ej,s7o,l7o,i7o,Wp,_ce,d7o,c7o,oj,f7o,m7o,g7o,Hp,uce,h7o,p7o,rj,_7o,u7o,b7o,Up,bce,v7o,F7o,tj,T7o,M7o,E7o,Jp,vce,C7o,w7o,aj,A7o,L7o,y7o,Yp,Fce,x7o,$7o,nj,k7o,S7o,R7o,Kp,Tce,P7o,B7o,sj,I7o,N7o,q7o,Zp,Mce,j7o,D7o,lj,G7o,O7o,V7o,e_,Ece,X7o,z7o,ij,Q7o,W7o,H7o,o_,Cce,U7o,J7o,dj,Y7o,K7o,Z7o,r_,wce,e8o,o8o,cj,r8o,t8o,a8o,t_,Ace,n8o,s8o,fj,l8o,i8o,d8o,a_,Lce,c8o,f8o,mj,m8o,g8o,h8o,n_,yce,p8o,_8o,gj,u8o,b8o,v8o,s_,xce,F8o,T8o,hj,M8o,E8o,C8o,l_,$ce,w8o,A8o,pj,L8o,y8o,x8o,i_,kce,$8o,k8o,_j,S8o,R8o,P8o,d_,Sce,B8o,I8o,uj,N8o,q8o,j8o,c_,Rce,D8o,G8o,bj,O8o,V8o,X8o,f_,Pce,z8o,Q8o,vj,W8o,H8o,U8o,m_,Bce,J8o,Y8o,Fj,K8o,Z8o,eMo,g_,Ice,oMo,rMo,Tj,tMo,aMo,nMo,h_,Nce,sMo,lMo,Mj,iMo,dMo,cMo,p_,qce,fMo,mMo,Ej,gMo,hMo,pMo,__,jce,_Mo,uMo,Cj,bMo,vMo,FMo,u_,Dce,TMo,MMo,wj,EMo,CMo,wMo,b_,Gce,AMo,LMo,Aj,yMo,xMo,$Mo,v_,Oce,kMo,SMo,Lj,RMo,PMo,BMo,F_,Vce,IMo,NMo,yj,qMo,jMo,DMo,T_,Xce,GMo,OMo,xj,VMo,XMo,zMo,M_,zce,QMo,WMo,$j,HMo,UMo,JMo,E_,Qce,YMo,KMo,kj,ZMo,e4o,o4o,C_,Wce,r4o,t4o,Sj,a4o,n4o,s4o,w_,Hce,l4o,i4o,Rj,d4o,c4o,f4o,Ws,Uce,m4o,g4o,Pj,h4o,p4o,Bj,_4o,u4o,b4o,A_,Jce,v4o,F4o,Ij,T4o,M4o,E4o,L_,Yce,C4o,w4o,Nj,A4o,L4o,y4o,y_,Kce,x4o,$4o,qj,k4o,S4o,R4o,x_,Zce,P4o,B4o,jj,I4o,N4o,q4o,$_,efe,j4o,D4o,Dj,G4o,O4o,V4o,k_,ofe,X4o,z4o,Gj,Q4o,W4o,H4o,S_,rfe,U4o,J4o,Oj,Y4o,K4o,Z4o,R_,tfe,eEo,oEo,Vj,rEo,tEo,aEo,P_,afe,nEo,sEo,Xj,lEo,iEo,dEo,B_,nfe,cEo,fEo,zj,mEo,gEo,hEo,I_,sfe,pEo,_Eo,Qj,uEo,bEo,vEo,N_,lfe,FEo,TEo,Wj,MEo,EEo,CEo,q_,ife,wEo,AEo,Hj,LEo,yEo,xEo,j_,dfe,$Eo,kEo,Uj,SEo,REo,PEo,D_,cfe,BEo,IEo,Jj,NEo,qEo,jEo,G_,ffe,DEo,GEo,Yj,OEo,VEo,XEo,O_,mfe,zEo,QEo,Kj,WEo,HEo,UEo,V_,gfe,JEo,YEo,Zj,KEo,ZEo,eCo,X_,hfe,oCo,rCo,eD,tCo,aCo,nCo,z_,pfe,sCo,lCo,oD,iCo,dCo,cCo,Q_,_fe,fCo,mCo,rD,gCo,hCo,pCo,W_,ufe,_Co,uCo,tD,bCo,vCo,FCo,H_,bfe,TCo,MCo,aD,ECo,CCo,wCo,U_,vfe,ACo,LCo,nD,yCo,xCo,$Co,J_,Ffe,kCo,SCo,sD,RCo,PCo,BCo,Y_,Tfe,ICo,NCo,lD,qCo,jCo,DCo,K_,Mfe,GCo,OCo,iD,VCo,XCo,zCo,Z_,Efe,QCo,WCo,dD,HCo,UCo,JCo,eu,Cfe,YCo,KCo,cD,ZCo,e3o,o3o,ou,wfe,r3o,t3o,fD,a3o,n3o,s3o,ru,Afe,l3o,i3o,mD,d3o,c3o,f3o,tu,Lfe,m3o,g3o,gD,h3o,p3o,_3o,au,yfe,u3o,b3o,hD,v3o,F3o,T3o,nu,xfe,M3o,E3o,pD,C3o,w3o,A3o,su,$fe,L3o,y3o,_D,x3o,$3o,k3o,lu,kfe,S3o,R3o,uD,P3o,B3o,I3o,iu,Sfe,N3o,q3o,bD,j3o,D3o,G3o,du,Rfe,O3o,V3o,vD,X3o,z3o,Q3o,cu,Pfe,W3o,H3o,FD,U3o,J3o,Y3o,fu,Bfe,K3o,Z3o,TD,e5o,o5o,r5o,mu,Ife,t5o,a5o,MD,n5o,s5o,l5o,gu,Nfe,i5o,d5o,ED,c5o,f5o,m5o,hu,qfe,g5o,h5o,CD,p5o,_5o,u5o,pu,jfe,b5o,v5o,wD,F5o,T5o,M5o,_u,Dfe,E5o,C5o,AD,w5o,A5o,L5o,uu,Gfe,y5o,x5o,LD,$5o,k5o,S5o,bu,Ofe,R5o,P5o,yD,B5o,I5o,N5o,vu,Vfe,q5o,j5o,xD,D5o,G5o,O5o,Fu,Xfe,V5o,X5o,$D,z5o,Q5o,W5o,Tu,zfe,H5o,U5o,kD,J5o,Y5o,K5o,Mu,Qfe,Z5o,e0o,SD,o0o,r0o,t0o,Eu,Wfe,a0o,n0o,RD,s0o,l0o,i0o,Cu,Hfe,d0o,c0o,PD,f0o,m0o,g0o,wu,Ufe,h0o,p0o,BD,_0o,u0o,b0o,Au,Jfe,v0o,F0o,ID,T0o,M0o,E0o,Lu,Yfe,C0o,w0o,ND,A0o,L0o,y0o,yu,Kfe,x0o,$0o,qD,k0o,S0o,R0o,xu,Zfe,P0o,B0o,jD,I0o,N0o,q0o,$u,eme,j0o,D0o,DD,G0o,O0o,V0o,ku,ome,X0o,z0o,GD,Q0o,W0o,H0o,Su,rme,U0o,J0o,OD,Y0o,K0o,Z0o,Ru,tme,ewo,owo,VD,rwo,two,awo,Pu,ame,nwo,swo,XD,lwo,iwo,dwo,Bu,nme,cwo,fwo,zD,mwo,gwo,hwo,Iu,sme,pwo,_wo,QD,uwo,bwo,vwo,Nu,lme,Fwo,Two,WD,Mwo,Ewo,Cwo,qu,ime,wwo,Awo,HD,Lwo,ywo,xwo,ju,dme,$wo,kwo,UD,Swo,Rwo,Pwo,Du,cme,Bwo,Iwo,JD,Nwo,qwo,jwo,Gu,fme,Dwo,Gwo,YD,Owo,Vwo,Xwo,Ou,mme,zwo,Qwo,KD,Wwo,Hwo,Uwo,Vu,gme,Jwo,Ywo,ZD,Kwo,Zwo,eAo,Xu,hme,oAo,rAo,eG,tAo,aAo,nAo,zu,pme,sAo,lAo,oG,iAo,dAo,cAo,Qu,_me,fAo,mAo,rG,gAo,hAo,pAo,Wu,ume,_Ao,uAo,tG,bAo,vAo,FAo,Hu,TAo,bme,MAo,EAo,vme,CAo,wAo,Uu,FXe,Vi,Ju,Fme,qL,AAo,Tme,LAo,TXe,$o,jL,yAo,Xi,xAo,aG,$Ao,kAo,nG,SAo,RAo,PAo,DL,BAo,Mme,IAo,NAo,qAo,it,GL,jAo,Eme,DAo,GAo,zi,OAo,Cme,VAo,XAo,sG,zAo,QAo,WAo,Yu,HAo,Ye,OL,UAo,wme,JAo,YAo,Na,KAo,Ame,ZAo,e6o,Lme,o6o,r6o,yme,t6o,a6o,n6o,G,Ku,xme,s6o,l6o,lG,i6o,d6o,c6o,Zu,$me,f6o,m6o,iG,g6o,h6o,p6o,e1,kme,_6o,u6o,dG,b6o,v6o,F6o,o1,Sme,T6o,M6o,cG,E6o,C6o,w6o,r1,Rme,A6o,L6o,fG,y6o,x6o,$6o,t1,Pme,k6o,S6o,mG,R6o,P6o,B6o,a1,Bme,I6o,N6o,gG,q6o,j6o,D6o,n1,Ime,G6o,O6o,hG,V6o,X6o,z6o,s1,Nme,Q6o,W6o,pG,H6o,U6o,J6o,l1,qme,Y6o,K6o,_G,Z6o,eLo,oLo,i1,jme,rLo,tLo,uG,aLo,nLo,sLo,d1,Dme,lLo,iLo,bG,dLo,cLo,fLo,c1,Gme,mLo,gLo,vG,hLo,pLo,_Lo,f1,Ome,uLo,bLo,FG,vLo,FLo,TLo,m1,Vme,MLo,ELo,TG,CLo,wLo,ALo,g1,Xme,LLo,yLo,MG,xLo,$Lo,kLo,h1,zme,SLo,RLo,EG,PLo,BLo,ILo,p1,Qme,NLo,qLo,CG,jLo,DLo,GLo,_1,Wme,OLo,VLo,wG,XLo,zLo,QLo,u1,Hme,WLo,HLo,AG,ULo,JLo,YLo,b1,Ume,KLo,ZLo,LG,eyo,oyo,ryo,v1,Jme,tyo,ayo,yG,nyo,syo,lyo,F1,Yme,iyo,dyo,xG,cyo,fyo,myo,T1,Kme,gyo,hyo,$G,pyo,_yo,uyo,M1,Zme,byo,vyo,kG,Fyo,Tyo,Myo,E1,ege,Eyo,Cyo,SG,wyo,Ayo,Lyo,C1,oge,yyo,xyo,RG,$yo,kyo,Syo,w1,rge,Ryo,Pyo,PG,Byo,Iyo,Nyo,A1,tge,qyo,jyo,BG,Dyo,Gyo,Oyo,L1,age,Vyo,Xyo,IG,zyo,Qyo,Wyo,y1,nge,Hyo,Uyo,NG,Jyo,Yyo,Kyo,x1,sge,Zyo,e9o,qG,o9o,r9o,t9o,$1,lge,a9o,n9o,jG,s9o,l9o,i9o,k1,ige,d9o,c9o,DG,f9o,m9o,g9o,S1,dge,h9o,p9o,GG,_9o,u9o,b9o,R1,cge,v9o,F9o,OG,T9o,M9o,E9o,P1,fge,C9o,w9o,VG,A9o,L9o,y9o,B1,mge,x9o,$9o,XG,k9o,S9o,R9o,I1,gge,P9o,B9o,zG,I9o,N9o,q9o,N1,hge,j9o,D9o,QG,G9o,O9o,V9o,q1,pge,X9o,z9o,WG,Q9o,W9o,H9o,j1,_ge,U9o,J9o,HG,Y9o,K9o,Z9o,D1,uge,exo,oxo,UG,rxo,txo,axo,G1,bge,nxo,sxo,JG,lxo,ixo,dxo,O1,vge,cxo,fxo,YG,mxo,gxo,hxo,V1,pxo,Fge,_xo,uxo,Tge,bxo,vxo,X1,MXe,Qi,z1,Mge,VL,Fxo,Ege,Txo,EXe,ko,XL,Mxo,Wi,Exo,KG,Cxo,wxo,ZG,Axo,Lxo,yxo,zL,xxo,Cge,$xo,kxo,Sxo,dt,QL,Rxo,wge,Pxo,Bxo,Hi,Ixo,Age,Nxo,qxo,eO,jxo,Dxo,Gxo,Q1,Oxo,Ke,WL,Vxo,Lge,Xxo,zxo,qa,Qxo,yge,Wxo,Hxo,xge,Uxo,Jxo,$ge,Yxo,Kxo,Zxo,z,W1,kge,e$o,o$o,oO,r$o,t$o,a$o,H1,Sge,n$o,s$o,rO,l$o,i$o,d$o,U1,Rge,c$o,f$o,tO,m$o,g$o,h$o,J1,Pge,p$o,_$o,aO,u$o,b$o,v$o,Y1,Bge,F$o,T$o,nO,M$o,E$o,C$o,K1,Ige,w$o,A$o,sO,L$o,y$o,x$o,Z1,Nge,$$o,k$o,lO,S$o,R$o,P$o,e2,qge,B$o,I$o,iO,N$o,q$o,j$o,o2,jge,D$o,G$o,dO,O$o,V$o,X$o,r2,Dge,z$o,Q$o,cO,W$o,H$o,U$o,t2,Gge,J$o,Y$o,fO,K$o,Z$o,eko,a2,Oge,oko,rko,mO,tko,ako,nko,n2,Vge,sko,lko,gO,iko,dko,cko,s2,Xge,fko,mko,hO,gko,hko,pko,l2,zge,_ko,uko,pO,bko,vko,Fko,i2,Qge,Tko,Mko,_O,Eko,Cko,wko,d2,Wge,Ako,Lko,uO,yko,xko,$ko,c2,Hge,kko,Sko,bO,Rko,Pko,Bko,f2,Uge,Iko,Nko,vO,qko,jko,Dko,m2,Jge,Gko,Oko,FO,Vko,Xko,zko,g2,Yge,Qko,Wko,TO,Hko,Uko,Jko,h2,Kge,Yko,Kko,MO,Zko,eSo,oSo,p2,Zge,rSo,tSo,EO,aSo,nSo,sSo,_2,ehe,lSo,iSo,CO,dSo,cSo,fSo,u2,ohe,mSo,gSo,wO,hSo,pSo,_So,b2,rhe,uSo,bSo,AO,vSo,FSo,TSo,v2,the,MSo,ESo,LO,CSo,wSo,ASo,F2,ahe,LSo,ySo,yO,xSo,$So,kSo,T2,nhe,SSo,RSo,xO,PSo,BSo,ISo,M2,she,NSo,qSo,$O,jSo,DSo,GSo,E2,lhe,OSo,VSo,kO,XSo,zSo,QSo,C2,ihe,WSo,HSo,SO,USo,JSo,YSo,w2,dhe,KSo,ZSo,RO,eRo,oRo,rRo,A2,che,tRo,aRo,PO,nRo,sRo,lRo,L2,fhe,iRo,dRo,BO,cRo,fRo,mRo,y2,mhe,gRo,hRo,IO,pRo,_Ro,uRo,x2,ghe,bRo,vRo,NO,FRo,TRo,MRo,$2,hhe,ERo,CRo,qO,wRo,ARo,LRo,k2,phe,yRo,xRo,jO,$Ro,kRo,SRo,S2,_he,RRo,PRo,DO,BRo,IRo,NRo,R2,qRo,uhe,jRo,DRo,bhe,GRo,ORo,P2,CXe,Ui,B2,vhe,HL,VRo,Fhe,XRo,wXe,So,UL,zRo,Ji,QRo,GO,WRo,HRo,OO,URo,JRo,YRo,JL,KRo,The,ZRo,ePo,oPo,ct,YL,rPo,Mhe,tPo,aPo,Yi,nPo,Ehe,sPo,lPo,VO,iPo,dPo,cPo,I2,fPo,Ze,KL,mPo,Che,gPo,hPo,ja,pPo,whe,_Po,uPo,Ahe,bPo,vPo,Lhe,FPo,TPo,MPo,W,N2,yhe,EPo,CPo,XO,wPo,APo,LPo,q2,xhe,yPo,xPo,zO,$Po,kPo,SPo,j2,$he,RPo,PPo,QO,BPo,IPo,NPo,D2,khe,qPo,jPo,WO,DPo,GPo,OPo,G2,She,VPo,XPo,HO,zPo,QPo,WPo,O2,Rhe,HPo,UPo,UO,JPo,YPo,KPo,V2,Phe,ZPo,eBo,JO,oBo,rBo,tBo,X2,Bhe,aBo,nBo,YO,sBo,lBo,iBo,z2,Ihe,dBo,cBo,KO,fBo,mBo,gBo,Q2,Nhe,hBo,pBo,ZO,_Bo,uBo,bBo,W2,qhe,vBo,FBo,eV,TBo,MBo,EBo,H2,jhe,CBo,wBo,oV,ABo,LBo,yBo,U2,Dhe,xBo,$Bo,rV,kBo,SBo,RBo,J2,Ghe,PBo,BBo,tV,IBo,NBo,qBo,Y2,Ohe,jBo,DBo,aV,GBo,OBo,VBo,K2,Vhe,XBo,zBo,nV,QBo,WBo,HBo,Z2,Xhe,UBo,JBo,sV,YBo,KBo,ZBo,eb,zhe,eIo,oIo,lV,rIo,tIo,aIo,ob,Qhe,nIo,sIo,iV,lIo,iIo,dIo,rb,Whe,cIo,fIo,dV,mIo,gIo,hIo,tb,Hhe,pIo,_Io,cV,uIo,bIo,vIo,ab,Uhe,FIo,TIo,fV,MIo,EIo,CIo,nb,Jhe,wIo,AIo,mV,LIo,yIo,xIo,sb,Yhe,$Io,kIo,gV,SIo,RIo,PIo,lb,Khe,BIo,IIo,hV,NIo,qIo,jIo,ib,Zhe,DIo,GIo,pV,OIo,VIo,XIo,db,epe,zIo,QIo,_V,WIo,HIo,UIo,cb,ope,JIo,YIo,uV,KIo,ZIo,eNo,fb,rpe,oNo,rNo,bV,tNo,aNo,nNo,mb,tpe,sNo,lNo,vV,iNo,dNo,cNo,gb,ape,fNo,mNo,FV,gNo,hNo,pNo,hb,npe,_No,uNo,TV,bNo,vNo,FNo,pb,spe,TNo,MNo,MV,ENo,CNo,wNo,_b,lpe,ANo,LNo,ipe,yNo,xNo,$No,ub,dpe,kNo,SNo,EV,RNo,PNo,BNo,bb,cpe,INo,NNo,CV,qNo,jNo,DNo,vb,fpe,GNo,ONo,wV,VNo,XNo,zNo,Fb,mpe,QNo,WNo,AV,HNo,UNo,JNo,Tb,YNo,gpe,KNo,ZNo,hpe,eqo,oqo,Mb,AXe,Ki,Eb,ppe,ZL,rqo,_pe,tqo,LXe,Ro,ey,aqo,Zi,nqo,LV,sqo,lqo,yV,iqo,dqo,cqo,oy,fqo,upe,mqo,gqo,hqo,ft,ry,pqo,bpe,_qo,uqo,ed,bqo,vpe,vqo,Fqo,xV,Tqo,Mqo,Eqo,Cb,Cqo,eo,ty,wqo,Fpe,Aqo,Lqo,Da,yqo,Tpe,xqo,$qo,Mpe,kqo,Sqo,Epe,Rqo,Pqo,Bqo,pe,wb,Cpe,Iqo,Nqo,$V,qqo,jqo,Dqo,Ab,wpe,Gqo,Oqo,kV,Vqo,Xqo,zqo,Lb,Ape,Qqo,Wqo,SV,Hqo,Uqo,Jqo,yb,Lpe,Yqo,Kqo,RV,Zqo,ejo,ojo,xb,ype,rjo,tjo,PV,ajo,njo,sjo,$b,xpe,ljo,ijo,BV,djo,cjo,fjo,kb,$pe,mjo,gjo,IV,hjo,pjo,_jo,Sb,kpe,ujo,bjo,NV,vjo,Fjo,Tjo,Rb,Spe,Mjo,Ejo,qV,Cjo,wjo,Ajo,Pb,Rpe,Ljo,yjo,jV,xjo,$jo,kjo,Bb,Ppe,Sjo,Rjo,DV,Pjo,Bjo,Ijo,Ib,Bpe,Njo,qjo,GV,jjo,Djo,Gjo,Nb,Ipe,Ojo,Vjo,OV,Xjo,zjo,Qjo,qb,Npe,Wjo,Hjo,VV,Ujo,Jjo,Yjo,jb,qpe,Kjo,Zjo,XV,eDo,oDo,rDo,Db,jpe,tDo,aDo,zV,nDo,sDo,lDo,Gb,Dpe,iDo,dDo,QV,cDo,fDo,mDo,Ob,Gpe,gDo,hDo,WV,pDo,_Do,uDo,Vb,bDo,Ope,vDo,FDo,Vpe,TDo,MDo,Xb,yXe,od,zb,Xpe,ay,EDo,zpe,CDo,xXe,Po,ny,wDo,rd,ADo,HV,LDo,yDo,UV,xDo,$Do,kDo,sy,SDo,Qpe,RDo,PDo,BDo,mt,ly,IDo,Wpe,NDo,qDo,td,jDo,Hpe,DDo,GDo,JV,ODo,VDo,XDo,Qb,zDo,oo,iy,QDo,Upe,WDo,HDo,Ga,UDo,Jpe,JDo,YDo,Ype,KDo,ZDo,Kpe,eGo,oGo,rGo,N,Wb,Zpe,tGo,aGo,YV,nGo,sGo,lGo,Hb,e_e,iGo,dGo,KV,cGo,fGo,mGo,Ub,o_e,gGo,hGo,ZV,pGo,_Go,uGo,Jb,r_e,bGo,vGo,eX,FGo,TGo,MGo,Yb,t_e,EGo,CGo,oX,wGo,AGo,LGo,Kb,a_e,yGo,xGo,rX,$Go,kGo,SGo,Zb,n_e,RGo,PGo,tX,BGo,IGo,NGo,ev,s_e,qGo,jGo,aX,DGo,GGo,OGo,ov,l_e,VGo,XGo,nX,zGo,QGo,WGo,rv,i_e,HGo,UGo,sX,JGo,YGo,KGo,tv,d_e,ZGo,eOo,lX,oOo,rOo,tOo,av,c_e,aOo,nOo,iX,sOo,lOo,iOo,nv,f_e,dOo,cOo,dX,fOo,mOo,gOo,sv,m_e,hOo,pOo,cX,_Oo,uOo,bOo,lv,g_e,vOo,FOo,fX,TOo,MOo,EOo,iv,h_e,COo,wOo,mX,AOo,LOo,yOo,dv,p_e,xOo,$Oo,gX,kOo,SOo,ROo,cv,__e,POo,BOo,hX,IOo,NOo,qOo,fv,u_e,jOo,DOo,pX,GOo,OOo,VOo,mv,b_e,XOo,zOo,_X,QOo,WOo,HOo,gv,v_e,UOo,JOo,uX,YOo,KOo,ZOo,hv,F_e,eVo,oVo,bX,rVo,tVo,aVo,pv,T_e,nVo,sVo,vX,lVo,iVo,dVo,_v,M_e,cVo,fVo,FX,mVo,gVo,hVo,uv,E_e,pVo,_Vo,TX,uVo,bVo,vVo,bv,C_e,FVo,TVo,MX,MVo,EVo,CVo,vv,w_e,wVo,AVo,EX,LVo,yVo,xVo,Fv,A_e,$Vo,kVo,CX,SVo,RVo,PVo,Tv,L_e,BVo,IVo,wX,NVo,qVo,jVo,Mv,y_e,DVo,GVo,AX,OVo,VVo,XVo,Ev,x_e,zVo,QVo,LX,WVo,HVo,UVo,Cv,$_e,JVo,YVo,yX,KVo,ZVo,eXo,wv,k_e,oXo,rXo,xX,tXo,aXo,nXo,Av,S_e,sXo,lXo,$X,iXo,dXo,cXo,Lv,R_e,fXo,mXo,kX,gXo,hXo,pXo,yv,P_e,_Xo,uXo,SX,bXo,vXo,FXo,xv,B_e,TXo,MXo,RX,EXo,CXo,wXo,$v,I_e,AXo,LXo,PX,yXo,xXo,$Xo,kv,N_e,kXo,SXo,BX,RXo,PXo,BXo,Sv,q_e,IXo,NXo,IX,qXo,jXo,DXo,Rv,j_e,GXo,OXo,NX,VXo,XXo,zXo,Pv,D_e,QXo,WXo,qX,HXo,UXo,JXo,Bv,G_e,YXo,KXo,jX,ZXo,ezo,ozo,Iv,O_e,rzo,tzo,DX,azo,nzo,szo,Nv,V_e,lzo,izo,GX,dzo,czo,fzo,qv,X_e,mzo,gzo,OX,hzo,pzo,_zo,jv,z_e,uzo,bzo,VX,vzo,Fzo,Tzo,Dv,Q_e,Mzo,Ezo,XX,Czo,wzo,Azo,Gv,W_e,Lzo,yzo,zX,xzo,$zo,kzo,Ov,H_e,Szo,Rzo,QX,Pzo,Bzo,Izo,Vv,Nzo,U_e,qzo,jzo,J_e,Dzo,Gzo,Xv,$Xe,ad,zv,Y_e,dy,Ozo,K_e,Vzo,kXe,Bo,cy,Xzo,nd,zzo,WX,Qzo,Wzo,HX,Hzo,Uzo,Jzo,fy,Yzo,Z_e,Kzo,Zzo,eQo,gt,my,oQo,eue,rQo,tQo,sd,aQo,oue,nQo,sQo,UX,lQo,iQo,dQo,Qv,cQo,ro,gy,fQo,rue,mQo,gQo,Oa,hQo,tue,pQo,_Qo,aue,uQo,bQo,nue,vQo,FQo,TQo,Z,Wv,sue,MQo,EQo,JX,CQo,wQo,AQo,Hv,lue,LQo,yQo,YX,xQo,$Qo,kQo,Uv,iue,SQo,RQo,KX,PQo,BQo,IQo,Jv,due,NQo,qQo,ZX,jQo,DQo,GQo,Yv,cue,OQo,VQo,ez,XQo,zQo,QQo,Kv,fue,WQo,HQo,oz,UQo,JQo,YQo,Zv,mue,KQo,ZQo,rz,eWo,oWo,rWo,eF,gue,tWo,aWo,tz,nWo,sWo,lWo,oF,hue,iWo,dWo,az,cWo,fWo,mWo,rF,pue,gWo,hWo,nz,pWo,_Wo,uWo,tF,_ue,bWo,vWo,sz,FWo,TWo,MWo,aF,uue,EWo,CWo,lz,wWo,AWo,LWo,nF,bue,yWo,xWo,iz,$Wo,kWo,SWo,sF,vue,RWo,PWo,dz,BWo,IWo,NWo,lF,Fue,qWo,jWo,cz,DWo,GWo,OWo,iF,Tue,VWo,XWo,fz,zWo,QWo,WWo,dF,Mue,HWo,UWo,mz,JWo,YWo,KWo,cF,Eue,ZWo,eHo,gz,oHo,rHo,tHo,fF,Cue,aHo,nHo,hz,sHo,lHo,iHo,mF,wue,dHo,cHo,pz,fHo,mHo,gHo,gF,Aue,hHo,pHo,_z,_Ho,uHo,bHo,hF,Lue,vHo,FHo,uz,THo,MHo,EHo,pF,yue,CHo,wHo,bz,AHo,LHo,yHo,_F,xue,xHo,$Ho,vz,kHo,SHo,RHo,uF,$ue,PHo,BHo,Fz,IHo,NHo,qHo,bF,kue,jHo,DHo,Tz,GHo,OHo,VHo,vF,Sue,XHo,zHo,Mz,QHo,WHo,HHo,FF,Rue,UHo,JHo,Ez,YHo,KHo,ZHo,TF,Pue,eUo,oUo,Cz,rUo,tUo,aUo,MF,Bue,nUo,sUo,wz,lUo,iUo,dUo,EF,cUo,Iue,fUo,mUo,Nue,gUo,hUo,CF,SXe,ld,wF,que,hy,pUo,jue,_Uo,RXe,Io,py,uUo,id,bUo,Az,vUo,FUo,Lz,TUo,MUo,EUo,_y,CUo,Due,wUo,AUo,LUo,ht,uy,yUo,Gue,xUo,$Uo,dd,kUo,Oue,SUo,RUo,yz,PUo,BUo,IUo,AF,NUo,to,by,qUo,Vue,jUo,DUo,Va,GUo,Xue,OUo,VUo,zue,XUo,zUo,Que,QUo,WUo,HUo,No,LF,Wue,UUo,JUo,xz,YUo,KUo,ZUo,yF,Hue,eJo,oJo,$z,rJo,tJo,aJo,xF,Uue,nJo,sJo,kz,lJo,iJo,dJo,$F,Jue,cJo,fJo,Sz,mJo,gJo,hJo,kF,Yue,pJo,_Jo,Rz,uJo,bJo,vJo,SF,Kue,FJo,TJo,Pz,MJo,EJo,CJo,RF,wJo,Zue,AJo,LJo,e1e,yJo,xJo,PF,PXe,cd,BF,o1e,vy,$Jo,r1e,kJo,BXe,qo,Fy,SJo,fd,RJo,Bz,PJo,BJo,Iz,IJo,NJo,qJo,Ty,jJo,t1e,DJo,GJo,OJo,pt,My,VJo,a1e,XJo,zJo,md,QJo,n1e,WJo,HJo,Nz,UJo,JJo,YJo,IF,KJo,ao,Ey,ZJo,s1e,eYo,oYo,Xa,rYo,l1e,tYo,aYo,i1e,nYo,sYo,d1e,lYo,iYo,dYo,U,NF,c1e,cYo,fYo,qz,mYo,gYo,hYo,qF,f1e,pYo,_Yo,jz,uYo,bYo,vYo,jF,m1e,FYo,TYo,Dz,MYo,EYo,CYo,DF,g1e,wYo,AYo,Gz,LYo,yYo,xYo,GF,h1e,$Yo,kYo,Oz,SYo,RYo,PYo,OF,p1e,BYo,IYo,Vz,NYo,qYo,jYo,VF,_1e,DYo,GYo,Xz,OYo,VYo,XYo,XF,u1e,zYo,QYo,zz,WYo,HYo,UYo,zF,b1e,JYo,YYo,Qz,KYo,ZYo,eKo,QF,v1e,oKo,rKo,Wz,tKo,aKo,nKo,WF,F1e,sKo,lKo,Hz,iKo,dKo,cKo,HF,T1e,fKo,mKo,Uz,gKo,hKo,pKo,UF,M1e,_Ko,uKo,Jz,bKo,vKo,FKo,JF,E1e,TKo,MKo,Yz,EKo,CKo,wKo,YF,C1e,AKo,LKo,Kz,yKo,xKo,$Ko,KF,w1e,kKo,SKo,Zz,RKo,PKo,BKo,ZF,A1e,IKo,NKo,eQ,qKo,jKo,DKo,eT,L1e,GKo,OKo,oQ,VKo,XKo,zKo,oT,y1e,QKo,WKo,rQ,HKo,UKo,JKo,rT,x1e,YKo,KKo,tQ,ZKo,eZo,oZo,tT,$1e,rZo,tZo,aQ,aZo,nZo,sZo,aT,k1e,lZo,iZo,nQ,dZo,cZo,fZo,nT,S1e,mZo,gZo,sQ,hZo,pZo,_Zo,sT,R1e,uZo,bZo,lQ,vZo,FZo,TZo,lT,P1e,MZo,EZo,iQ,CZo,wZo,AZo,iT,B1e,LZo,yZo,dQ,xZo,$Zo,kZo,dT,I1e,SZo,RZo,cQ,PZo,BZo,IZo,cT,N1e,NZo,qZo,fQ,jZo,DZo,GZo,fT,q1e,OZo,VZo,mQ,XZo,zZo,QZo,mT,j1e,WZo,HZo,gQ,UZo,JZo,YZo,gT,D1e,KZo,ZZo,hQ,eer,oer,rer,hT,G1e,ter,aer,pQ,ner,ser,ler,pT,O1e,ier,der,_Q,cer,fer,mer,_T,V1e,ger,her,uQ,per,_er,uer,uT,X1e,ber,ver,bQ,Fer,Ter,Mer,bT,z1e,Eer,Cer,vQ,wer,Aer,Ler,vT,yer,Q1e,xer,$er,W1e,ker,Ser,FT,IXe,gd,TT,H1e,Cy,Rer,U1e,Per,NXe,jo,wy,Ber,hd,Ier,FQ,Ner,qer,TQ,jer,Der,Ger,Ay,Oer,J1e,Ver,Xer,zer,_t,Ly,Qer,Y1e,Wer,Her,pd,Uer,K1e,Jer,Yer,MQ,Ker,Zer,eor,MT,oor,no,yy,ror,Z1e,tor,aor,za,nor,e2e,sor,lor,o2e,ior,dor,r2e,cor,mor,gor,V,ET,t2e,hor,por,EQ,_or,uor,bor,CT,a2e,vor,For,CQ,Tor,Mor,Eor,wT,n2e,Cor,wor,wQ,Aor,Lor,yor,AT,s2e,xor,$or,AQ,kor,Sor,Ror,LT,l2e,Por,Bor,LQ,Ior,Nor,qor,yT,i2e,jor,Dor,yQ,Gor,Oor,Vor,xT,d2e,Xor,zor,xQ,Qor,Wor,Hor,$T,c2e,Uor,Jor,$Q,Yor,Kor,Zor,kT,f2e,err,orr,kQ,rrr,trr,arr,ST,m2e,nrr,srr,SQ,lrr,irr,drr,RT,g2e,crr,frr,RQ,mrr,grr,hrr,PT,h2e,prr,_rr,PQ,urr,brr,vrr,BT,p2e,Frr,Trr,BQ,Mrr,Err,Crr,IT,_2e,wrr,Arr,IQ,Lrr,yrr,xrr,NT,u2e,$rr,krr,NQ,Srr,Rrr,Prr,qT,b2e,Brr,Irr,qQ,Nrr,qrr,jrr,jT,v2e,Drr,Grr,jQ,Orr,Vrr,Xrr,DT,F2e,zrr,Qrr,DQ,Wrr,Hrr,Urr,GT,T2e,Jrr,Yrr,GQ,Krr,Zrr,etr,OT,M2e,otr,rtr,OQ,ttr,atr,ntr,VT,E2e,str,ltr,VQ,itr,dtr,ctr,XT,C2e,ftr,mtr,XQ,gtr,htr,ptr,zT,w2e,_tr,utr,zQ,btr,vtr,Ftr,QT,A2e,Ttr,Mtr,QQ,Etr,Ctr,wtr,WT,L2e,Atr,Ltr,WQ,ytr,xtr,$tr,HT,y2e,ktr,Str,HQ,Rtr,Ptr,Btr,UT,x2e,Itr,Ntr,UQ,qtr,jtr,Dtr,JT,$2e,Gtr,Otr,JQ,Vtr,Xtr,ztr,YT,k2e,Qtr,Wtr,YQ,Htr,Utr,Jtr,KT,S2e,Ytr,Ktr,KQ,Ztr,ear,oar,ZT,R2e,rar,tar,ZQ,aar,nar,sar,e7,P2e,lar,iar,eW,dar,car,far,o7,B2e,mar,gar,oW,har,par,_ar,r7,I2e,uar,bar,rW,Far,Tar,Mar,t7,N2e,Ear,Car,tW,war,Aar,Lar,a7,q2e,yar,xar,aW,$ar,kar,Sar,n7,j2e,Rar,Par,nW,Bar,Iar,Nar,s7,D2e,qar,jar,sW,Dar,Gar,Oar,l7,G2e,Var,Xar,lW,zar,Qar,War,i7,O2e,Har,Uar,iW,Jar,Yar,Kar,d7,V2e,Zar,enr,dW,onr,rnr,tnr,c7,X2e,anr,nnr,cW,snr,lnr,inr,f7,dnr,z2e,cnr,fnr,Q2e,mnr,gnr,m7,qXe,_d,g7,W2e,xy,hnr,H2e,pnr,jXe,Do,$y,_nr,ud,unr,fW,bnr,vnr,mW,Fnr,Tnr,Mnr,ky,Enr,U2e,Cnr,wnr,Anr,ut,Sy,Lnr,J2e,ynr,xnr,bd,$nr,Y2e,knr,Snr,gW,Rnr,Pnr,Bnr,h7,Inr,so,Ry,Nnr,K2e,qnr,jnr,Qa,Dnr,Z2e,Gnr,Onr,ebe,Vnr,Xnr,obe,znr,Qnr,Wnr,rbe,p7,tbe,Hnr,Unr,hW,Jnr,Ynr,Knr,_7,Znr,abe,esr,osr,nbe,rsr,tsr,u7,DXe,vd,b7,sbe,Py,asr,lbe,nsr,GXe,Go,By,ssr,Fd,lsr,pW,isr,dsr,_W,csr,fsr,msr,Iy,gsr,ibe,hsr,psr,_sr,bt,Ny,usr,dbe,bsr,vsr,Td,Fsr,cbe,Tsr,Msr,uW,Esr,Csr,wsr,v7,Asr,lo,qy,Lsr,fbe,ysr,xsr,Wa,$sr,mbe,ksr,Ssr,gbe,Rsr,Psr,hbe,Bsr,Isr,Nsr,ve,F7,pbe,qsr,jsr,bW,Dsr,Gsr,Osr,T7,_be,Vsr,Xsr,vW,zsr,Qsr,Wsr,M7,ube,Hsr,Usr,FW,Jsr,Ysr,Ksr,E7,bbe,Zsr,elr,TW,olr,rlr,tlr,Hs,vbe,alr,nlr,MW,slr,llr,EW,ilr,dlr,clr,C7,Fbe,flr,mlr,CW,glr,hlr,plr,Us,Tbe,_lr,ulr,wW,blr,vlr,AW,Flr,Tlr,Mlr,w7,Mbe,Elr,Clr,LW,wlr,Alr,Llr,vt,Ebe,ylr,xlr,yW,$lr,klr,xW,Slr,Rlr,$W,Plr,Blr,Ilr,A7,Cbe,Nlr,qlr,kW,jlr,Dlr,Glr,L7,wbe,Olr,Vlr,SW,Xlr,zlr,Qlr,y7,Abe,Wlr,Hlr,RW,Ulr,Jlr,Ylr,x7,Lbe,Klr,Zlr,PW,eir,oir,rir,$7,ybe,tir,air,BW,nir,sir,lir,k7,xbe,iir,dir,IW,cir,fir,mir,S7,$be,gir,hir,NW,pir,_ir,uir,R7,bir,kbe,vir,Fir,Sbe,Tir,Mir,P7,OXe,Md,B7,Rbe,jy,Eir,Pbe,Cir,VXe,Oo,Dy,wir,Ed,Air,qW,Lir,yir,jW,xir,$ir,kir,Gy,Sir,Bbe,Rir,Pir,Bir,Ft,Oy,Iir,Ibe,Nir,qir,Cd,jir,Nbe,Dir,Gir,DW,Oir,Vir,Xir,I7,zir,io,Vy,Qir,qbe,Wir,Hir,Ha,Uir,jbe,Jir,Yir,Dbe,Kir,Zir,Gbe,edr,odr,rdr,Obe,N7,Vbe,tdr,adr,GW,ndr,sdr,ldr,q7,idr,Xbe,ddr,cdr,zbe,fdr,mdr,j7,XXe,wd,D7,Qbe,Xy,gdr,Wbe,hdr,zXe,Vo,zy,pdr,Ad,_dr,OW,udr,bdr,VW,vdr,Fdr,Tdr,Qy,Mdr,Hbe,Edr,Cdr,wdr,Tt,Wy,Adr,Ube,Ldr,ydr,Ld,xdr,Jbe,$dr,kdr,XW,Sdr,Rdr,Pdr,G7,Bdr,co,Hy,Idr,Ybe,Ndr,qdr,Ua,jdr,Kbe,Ddr,Gdr,Zbe,Odr,Vdr,eve,Xdr,zdr,Qdr,ove,O7,rve,Wdr,Hdr,zW,Udr,Jdr,Ydr,V7,Kdr,tve,Zdr,ecr,ave,ocr,rcr,X7,QXe,yd,z7,nve,Uy,tcr,sve,acr,WXe,Xo,Jy,ncr,xd,scr,QW,lcr,icr,WW,dcr,ccr,fcr,Yy,mcr,lve,gcr,hcr,pcr,Mt,Ky,_cr,ive,ucr,bcr,$d,vcr,dve,Fcr,Tcr,HW,Mcr,Ecr,Ccr,Q7,wcr,fo,Zy,Acr,cve,Lcr,ycr,Ja,xcr,fve,$cr,kcr,mve,Scr,Rcr,gve,Pcr,Bcr,Icr,Pe,W7,hve,Ncr,qcr,UW,jcr,Dcr,Gcr,H7,pve,Ocr,Vcr,JW,Xcr,zcr,Qcr,U7,_ve,Wcr,Hcr,YW,Ucr,Jcr,Ycr,J7,uve,Kcr,Zcr,KW,efr,ofr,rfr,Y7,bve,tfr,afr,ZW,nfr,sfr,lfr,K7,vve,ifr,dfr,eH,cfr,ffr,mfr,Z7,Fve,gfr,hfr,oH,pfr,_fr,ufr,e8,Tve,bfr,vfr,rH,Ffr,Tfr,Mfr,o8,Mve,Efr,Cfr,tH,wfr,Afr,Lfr,r8,yfr,Eve,xfr,$fr,Cve,kfr,Sfr,t8,HXe,kd,a8,wve,e9,Rfr,Ave,Pfr,UXe,zo,o9,Bfr,Sd,Ifr,aH,Nfr,qfr,nH,jfr,Dfr,Gfr,r9,Ofr,Lve,Vfr,Xfr,zfr,Et,t9,Qfr,yve,Wfr,Hfr,Rd,Ufr,xve,Jfr,Yfr,sH,Kfr,Zfr,emr,n8,omr,mo,a9,rmr,$ve,tmr,amr,Ya,nmr,kve,smr,lmr,Sve,imr,dmr,Rve,cmr,fmr,mmr,ot,s8,Pve,gmr,hmr,lH,pmr,_mr,umr,l8,Bve,bmr,vmr,iH,Fmr,Tmr,Mmr,i8,Ive,Emr,Cmr,dH,wmr,Amr,Lmr,d8,Nve,ymr,xmr,cH,$mr,kmr,Smr,c8,qve,Rmr,Pmr,fH,Bmr,Imr,Nmr,f8,qmr,jve,jmr,Dmr,Dve,Gmr,Omr,m8,JXe,Pd,g8,Gve,n9,Vmr,Ove,Xmr,YXe,Qo,s9,zmr,Bd,Qmr,mH,Wmr,Hmr,gH,Umr,Jmr,Ymr,l9,Kmr,Vve,Zmr,egr,ogr,Ct,i9,rgr,Xve,tgr,agr,Id,ngr,zve,sgr,lgr,hH,igr,dgr,cgr,h8,fgr,go,d9,mgr,Qve,ggr,hgr,Ka,pgr,Wve,_gr,ugr,Hve,bgr,vgr,Uve,Fgr,Tgr,Mgr,Le,p8,Jve,Egr,Cgr,pH,wgr,Agr,Lgr,_8,Yve,ygr,xgr,_H,$gr,kgr,Sgr,u8,Kve,Rgr,Pgr,uH,Bgr,Igr,Ngr,b8,Zve,qgr,jgr,bH,Dgr,Ggr,Ogr,v8,eFe,Vgr,Xgr,vH,zgr,Qgr,Wgr,F8,oFe,Hgr,Ugr,FH,Jgr,Ygr,Kgr,T8,rFe,Zgr,ehr,TH,ohr,rhr,thr,M8,tFe,ahr,nhr,MH,shr,lhr,ihr,E8,aFe,dhr,chr,EH,fhr,mhr,ghr,C8,nFe,hhr,phr,CH,_hr,uhr,bhr,w8,vhr,sFe,Fhr,Thr,lFe,Mhr,Ehr,A8,KXe,Nd,L8,iFe,c9,Chr,dFe,whr,ZXe,Wo,f9,Ahr,qd,Lhr,wH,yhr,xhr,AH,$hr,khr,Shr,m9,Rhr,cFe,Phr,Bhr,Ihr,wt,g9,Nhr,fFe,qhr,jhr,jd,Dhr,mFe,Ghr,Ohr,LH,Vhr,Xhr,zhr,y8,Qhr,ho,h9,Whr,gFe,Hhr,Uhr,Za,Jhr,hFe,Yhr,Khr,pFe,Zhr,epr,_Fe,opr,rpr,tpr,p9,x8,uFe,apr,npr,yH,spr,lpr,ipr,$8,bFe,dpr,cpr,xH,fpr,mpr,gpr,k8,hpr,vFe,ppr,_pr,FFe,upr,bpr,S8,eze,Dd,R8,TFe,_9,vpr,MFe,Fpr,oze,Ho,u9,Tpr,Gd,Mpr,$H,Epr,Cpr,kH,wpr,Apr,Lpr,b9,ypr,EFe,xpr,$pr,kpr,At,v9,Spr,CFe,Rpr,Ppr,Od,Bpr,wFe,Ipr,Npr,SH,qpr,jpr,Dpr,P8,Gpr,po,F9,Opr,AFe,Vpr,Xpr,en,zpr,LFe,Qpr,Wpr,yFe,Hpr,Upr,xFe,Jpr,Ypr,Kpr,rt,B8,$Fe,Zpr,e_r,RH,o_r,r_r,t_r,I8,kFe,a_r,n_r,PH,s_r,l_r,i_r,N8,SFe,d_r,c_r,BH,f_r,m_r,g_r,q8,RFe,h_r,p_r,IH,__r,u_r,b_r,j8,PFe,v_r,F_r,NH,T_r,M_r,E_r,D8,C_r,BFe,w_r,A_r,IFe,L_r,y_r,G8,rze,Vd,O8,NFe,T9,x_r,qFe,$_r,tze,Uo,M9,k_r,Xd,S_r,qH,R_r,P_r,jH,B_r,I_r,N_r,E9,q_r,jFe,j_r,D_r,G_r,Lt,C9,O_r,DFe,V_r,X_r,zd,z_r,GFe,Q_r,W_r,DH,H_r,U_r,J_r,V8,Y_r,_o,w9,K_r,OFe,Z_r,eur,on,our,VFe,rur,tur,XFe,aur,nur,zFe,sur,lur,iur,Qd,X8,QFe,dur,cur,GH,fur,mur,gur,z8,WFe,hur,pur,OH,_ur,uur,bur,Q8,HFe,vur,Fur,VH,Tur,Mur,Eur,W8,Cur,UFe,wur,Aur,JFe,Lur,yur,H8,aze,Wd,U8,YFe,A9,xur,KFe,$ur,nze,Jo,L9,kur,Hd,Sur,XH,Rur,Pur,zH,Bur,Iur,Nur,y9,qur,ZFe,jur,Dur,Gur,yt,x9,Our,eTe,Vur,Xur,Ud,zur,oTe,Qur,Wur,QH,Hur,Uur,Jur,J8,Yur,uo,$9,Kur,rTe,Zur,e1r,rn,o1r,tTe,r1r,t1r,aTe,a1r,n1r,nTe,s1r,l1r,i1r,Jd,Y8,sTe,d1r,c1r,WH,f1r,m1r,g1r,K8,lTe,h1r,p1r,HH,_1r,u1r,b1r,Z8,iTe,v1r,F1r,UH,T1r,M1r,E1r,eM,C1r,dTe,w1r,A1r,cTe,L1r,y1r,oM,sze,Yd,rM,fTe,k9,x1r,mTe,$1r,lze,Yo,S9,k1r,Kd,S1r,JH,R1r,P1r,YH,B1r,I1r,N1r,R9,q1r,gTe,j1r,D1r,G1r,xt,P9,O1r,hTe,V1r,X1r,Zd,z1r,pTe,Q1r,W1r,KH,H1r,U1r,J1r,tM,Y1r,bo,B9,K1r,_Te,Z1r,e2r,tn,o2r,uTe,r2r,t2r,bTe,a2r,n2r,vTe,s2r,l2r,i2r,FTe,aM,TTe,d2r,c2r,ZH,f2r,m2r,g2r,nM,h2r,MTe,p2r,_2r,ETe,u2r,b2r,sM,ize,ec,lM,CTe,I9,v2r,wTe,F2r,dze,Ko,N9,T2r,oc,M2r,eU,E2r,C2r,oU,w2r,A2r,L2r,q9,y2r,ATe,x2r,$2r,k2r,$t,j9,S2r,LTe,R2r,P2r,rc,B2r,yTe,I2r,N2r,rU,q2r,j2r,D2r,iM,G2r,vo,D9,O2r,xTe,V2r,X2r,an,z2r,$Te,Q2r,W2r,kTe,H2r,U2r,STe,J2r,Y2r,K2r,tt,dM,RTe,Z2r,ebr,tU,obr,rbr,tbr,cM,PTe,abr,nbr,aU,sbr,lbr,ibr,fM,BTe,dbr,cbr,nU,fbr,mbr,gbr,mM,ITe,hbr,pbr,sU,_br,ubr,bbr,gM,NTe,vbr,Fbr,lU,Tbr,Mbr,Ebr,hM,Cbr,qTe,wbr,Abr,jTe,Lbr,ybr,pM,cze,tc,_M,DTe,G9,xbr,GTe,$br,fze,Zo,O9,kbr,ac,Sbr,iU,Rbr,Pbr,dU,Bbr,Ibr,Nbr,V9,qbr,OTe,jbr,Dbr,Gbr,kt,X9,Obr,VTe,Vbr,Xbr,nc,zbr,XTe,Qbr,Wbr,cU,Hbr,Ubr,Jbr,uM,Ybr,Fo,z9,Kbr,zTe,Zbr,evr,nn,ovr,QTe,rvr,tvr,WTe,avr,nvr,HTe,svr,lvr,ivr,UTe,bM,JTe,dvr,cvr,fU,fvr,mvr,gvr,vM,hvr,YTe,pvr,_vr,KTe,uvr,bvr,FM,mze,sc,TM,ZTe,Q9,vvr,e7e,Fvr,gze,er,W9,Tvr,lc,Mvr,mU,Evr,Cvr,gU,wvr,Avr,Lvr,H9,yvr,o7e,xvr,$vr,kvr,St,U9,Svr,r7e,Rvr,Pvr,ic,Bvr,t7e,Ivr,Nvr,hU,qvr,jvr,Dvr,MM,Gvr,xr,J9,Ovr,a7e,Vvr,Xvr,sn,zvr,n7e,Qvr,Wvr,s7e,Hvr,Uvr,l7e,Jvr,Yvr,Kvr,q,EM,i7e,Zvr,eFr,pU,oFr,rFr,tFr,CM,d7e,aFr,nFr,_U,sFr,lFr,iFr,wM,c7e,dFr,cFr,uU,fFr,mFr,gFr,AM,f7e,hFr,pFr,bU,_Fr,uFr,bFr,LM,m7e,vFr,FFr,vU,TFr,MFr,EFr,yM,g7e,CFr,wFr,FU,AFr,LFr,yFr,xM,h7e,xFr,$Fr,TU,kFr,SFr,RFr,$M,p7e,PFr,BFr,MU,IFr,NFr,qFr,kM,_7e,jFr,DFr,EU,GFr,OFr,VFr,SM,u7e,XFr,zFr,CU,QFr,WFr,HFr,RM,b7e,UFr,JFr,wU,YFr,KFr,ZFr,PM,v7e,eTr,oTr,AU,rTr,tTr,aTr,BM,F7e,nTr,sTr,LU,lTr,iTr,dTr,IM,T7e,cTr,fTr,yU,mTr,gTr,hTr,NM,M7e,pTr,_Tr,xU,uTr,bTr,vTr,qM,E7e,FTr,TTr,$U,MTr,ETr,CTr,jM,C7e,wTr,ATr,kU,LTr,yTr,xTr,Js,w7e,$Tr,kTr,SU,STr,RTr,RU,PTr,BTr,ITr,DM,A7e,NTr,qTr,PU,jTr,DTr,GTr,GM,L7e,OTr,VTr,BU,XTr,zTr,QTr,OM,y7e,WTr,HTr,IU,UTr,JTr,YTr,VM,x7e,KTr,ZTr,NU,e7r,o7r,r7r,XM,$7e,t7r,a7r,qU,n7r,s7r,l7r,zM,k7e,i7r,d7r,jU,c7r,f7r,m7r,QM,S7e,g7r,h7r,DU,p7r,_7r,u7r,WM,R7e,b7r,v7r,GU,F7r,T7r,M7r,HM,P7e,E7r,C7r,OU,w7r,A7r,L7r,UM,B7e,y7r,x7r,VU,$7r,k7r,S7r,JM,I7e,R7r,P7r,XU,B7r,I7r,N7r,YM,N7e,q7r,j7r,zU,D7r,G7r,O7r,KM,q7e,V7r,X7r,QU,z7r,Q7r,W7r,ZM,j7e,H7r,U7r,WU,J7r,Y7r,K7r,e4,D7e,Z7r,e8r,HU,o8r,r8r,t8r,o4,G7e,a8r,n8r,UU,s8r,l8r,i8r,r4,O7e,d8r,c8r,JU,f8r,m8r,g8r,t4,V7e,h8r,p8r,YU,_8r,u8r,b8r,a4,X7e,v8r,F8r,KU,T8r,M8r,E8r,n4,z7e,C8r,w8r,ZU,A8r,L8r,y8r,s4,Q7e,x8r,$8r,eJ,k8r,S8r,R8r,l4,W7e,P8r,B8r,oJ,I8r,N8r,q8r,i4,H7e,j8r,D8r,rJ,G8r,O8r,V8r,d4,U7e,X8r,z8r,tJ,Q8r,W8r,H8r,c4,J7e,U8r,J8r,aJ,Y8r,K8r,Z8r,f4,Y7e,eMr,oMr,nJ,rMr,tMr,aMr,m4,K7e,nMr,sMr,sJ,lMr,iMr,dMr,g4,Z7e,cMr,fMr,lJ,mMr,gMr,hMr,h4,e8e,pMr,_Mr,iJ,uMr,bMr,vMr,p4,o8e,FMr,TMr,dJ,MMr,EMr,CMr,_4,r8e,wMr,AMr,cJ,LMr,yMr,xMr,u4,hze,dc,b4,t8e,Y9,$Mr,a8e,kMr,pze,or,K9,SMr,cc,RMr,fJ,PMr,BMr,mJ,IMr,NMr,qMr,Z9,jMr,n8e,DMr,GMr,OMr,Rt,ex,VMr,s8e,XMr,zMr,fc,QMr,l8e,WMr,HMr,gJ,UMr,JMr,YMr,v4,KMr,$r,ox,ZMr,i8e,e4r,o4r,ln,r4r,d8e,t4r,a4r,c8e,n4r,s4r,f8e,l4r,i4r,d4r,se,F4,m8e,c4r,f4r,hJ,m4r,g4r,h4r,T4,g8e,p4r,_4r,pJ,u4r,b4r,v4r,M4,h8e,F4r,T4r,_J,M4r,E4r,C4r,E4,p8e,w4r,A4r,uJ,L4r,y4r,x4r,C4,_8e,$4r,k4r,bJ,S4r,R4r,P4r,w4,u8e,B4r,I4r,vJ,N4r,q4r,j4r,A4,b8e,D4r,G4r,FJ,O4r,V4r,X4r,L4,v8e,z4r,Q4r,TJ,W4r,H4r,U4r,y4,F8e,J4r,Y4r,MJ,K4r,Z4r,eEr,x4,T8e,oEr,rEr,EJ,tEr,aEr,nEr,$4,M8e,sEr,lEr,CJ,iEr,dEr,cEr,k4,E8e,fEr,mEr,wJ,gEr,hEr,pEr,S4,C8e,_Er,uEr,AJ,bEr,vEr,FEr,R4,w8e,TEr,MEr,LJ,EEr,CEr,wEr,P4,A8e,AEr,LEr,yJ,yEr,xEr,$Er,B4,L8e,kEr,SEr,xJ,REr,PEr,BEr,I4,y8e,IEr,NEr,$J,qEr,jEr,DEr,N4,x8e,GEr,OEr,kJ,VEr,XEr,zEr,q4,$8e,QEr,WEr,SJ,HEr,UEr,JEr,j4,k8e,YEr,KEr,RJ,ZEr,eCr,oCr,D4,S8e,rCr,tCr,PJ,aCr,nCr,sCr,G4,R8e,lCr,iCr,BJ,dCr,cCr,fCr,O4,P8e,mCr,gCr,IJ,hCr,pCr,_Cr,V4,_ze,mc,X4,B8e,rx,uCr,I8e,bCr,uze,rr,tx,vCr,gc,FCr,NJ,TCr,MCr,qJ,ECr,CCr,wCr,ax,ACr,N8e,LCr,yCr,xCr,Pt,nx,$Cr,q8e,kCr,SCr,hc,RCr,j8e,PCr,BCr,jJ,ICr,NCr,qCr,z4,jCr,kr,sx,DCr,D8e,GCr,OCr,dn,VCr,G8e,XCr,zCr,O8e,QCr,WCr,V8e,HCr,UCr,JCr,Me,Q4,X8e,YCr,KCr,DJ,ZCr,e3r,o3r,W4,z8e,r3r,t3r,GJ,a3r,n3r,s3r,H4,Q8e,l3r,i3r,OJ,d3r,c3r,f3r,U4,W8e,m3r,g3r,VJ,h3r,p3r,_3r,J4,H8e,u3r,b3r,XJ,v3r,F3r,T3r,Y4,U8e,M3r,E3r,zJ,C3r,w3r,A3r,K4,J8e,L3r,y3r,QJ,x3r,$3r,k3r,Z4,Y8e,S3r,R3r,WJ,P3r,B3r,I3r,eE,K8e,N3r,q3r,HJ,j3r,D3r,G3r,oE,Z8e,O3r,V3r,UJ,X3r,z3r,Q3r,rE,eMe,W3r,H3r,JJ,U3r,J3r,Y3r,tE,oMe,K3r,Z3r,YJ,e5r,o5r,r5r,aE,rMe,t5r,a5r,KJ,n5r,s5r,l5r,nE,bze,pc,sE,tMe,lx,i5r,aMe,d5r,vze,tr,ix,c5r,_c,f5r,ZJ,m5r,g5r,eY,h5r,p5r,_5r,dx,u5r,nMe,b5r,v5r,F5r,Bt,cx,T5r,sMe,M5r,E5r,uc,C5r,lMe,w5r,A5r,oY,L5r,y5r,x5r,lE,$5r,Sr,fx,k5r,iMe,S5r,R5r,cn,P5r,dMe,B5r,I5r,cMe,N5r,q5r,fMe,j5r,D5r,G5r,ar,iE,mMe,O5r,V5r,rY,X5r,z5r,Q5r,dE,gMe,W5r,H5r,tY,U5r,J5r,Y5r,cE,hMe,K5r,Z5r,aY,e0r,o0r,r0r,fE,pMe,t0r,a0r,nY,n0r,s0r,l0r,mE,_Me,i0r,d0r,sY,c0r,f0r,m0r,gE,uMe,g0r,h0r,lY,p0r,_0r,u0r,hE,Fze,bc,pE,bMe,mx,b0r,vMe,v0r,Tze,nr,gx,F0r,vc,T0r,iY,M0r,E0r,dY,C0r,w0r,A0r,hx,L0r,FMe,y0r,x0r,$0r,It,px,k0r,TMe,S0r,R0r,Fc,P0r,MMe,B0r,I0r,cY,N0r,q0r,j0r,_E,D0r,Rr,_x,G0r,EMe,O0r,V0r,fn,X0r,CMe,z0r,Q0r,wMe,W0r,H0r,AMe,U0r,J0r,Y0r,ie,uE,LMe,K0r,Z0r,fY,ewr,owr,rwr,bE,yMe,twr,awr,mY,nwr,swr,lwr,vE,xMe,iwr,dwr,gY,cwr,fwr,mwr,FE,$Me,gwr,hwr,hY,pwr,_wr,uwr,TE,kMe,bwr,vwr,pY,Fwr,Twr,Mwr,ME,SMe,Ewr,Cwr,_Y,wwr,Awr,Lwr,EE,RMe,ywr,xwr,uY,$wr,kwr,Swr,CE,PMe,Rwr,Pwr,bY,Bwr,Iwr,Nwr,wE,BMe,qwr,jwr,vY,Dwr,Gwr,Owr,AE,IMe,Vwr,Xwr,FY,zwr,Qwr,Wwr,LE,NMe,Hwr,Uwr,TY,Jwr,Ywr,Kwr,yE,qMe,Zwr,eAr,MY,oAr,rAr,tAr,xE,jMe,aAr,nAr,EY,sAr,lAr,iAr,$E,DMe,dAr,cAr,CY,fAr,mAr,gAr,kE,GMe,hAr,pAr,wY,_Ar,uAr,bAr,SE,OMe,vAr,FAr,AY,TAr,MAr,EAr,RE,VMe,CAr,wAr,LY,AAr,LAr,yAr,PE,XMe,xAr,$Ar,yY,kAr,SAr,RAr,BE,zMe,PAr,BAr,xY,IAr,NAr,qAr,IE,QMe,jAr,DAr,$Y,GAr,OAr,VAr,NE,Mze,Tc,qE,WMe,ux,XAr,HMe,zAr,Eze,sr,bx,QAr,Mc,WAr,kY,HAr,UAr,SY,JAr,YAr,KAr,vx,ZAr,UMe,e6r,o6r,r6r,Nt,Fx,t6r,JMe,a6r,n6r,Ec,s6r,YMe,l6r,i6r,RY,d6r,c6r,f6r,jE,m6r,Pr,Tx,g6r,KMe,h6r,p6r,mn,_6r,ZMe,u6r,b6r,e4e,v6r,F6r,o4e,T6r,M6r,E6r,ye,DE,r4e,C6r,w6r,PY,A6r,L6r,y6r,GE,t4e,x6r,$6r,BY,k6r,S6r,R6r,OE,a4e,P6r,B6r,IY,I6r,N6r,q6r,VE,n4e,j6r,D6r,NY,G6r,O6r,V6r,XE,s4e,X6r,z6r,qY,Q6r,W6r,H6r,zE,l4e,U6r,J6r,jY,Y6r,K6r,Z6r,QE,i4e,eLr,oLr,DY,rLr,tLr,aLr,WE,d4e,nLr,sLr,GY,lLr,iLr,dLr,HE,c4e,cLr,fLr,OY,mLr,gLr,hLr,UE,f4e,pLr,_Lr,VY,uLr,bLr,vLr,JE,Cze,Cc,YE,m4e,Mx,FLr,g4e,TLr,wze,lr,Ex,MLr,wc,ELr,XY,CLr,wLr,zY,ALr,LLr,yLr,Cx,xLr,h4e,$Lr,kLr,SLr,qt,wx,RLr,p4e,PLr,BLr,Ac,ILr,_4e,NLr,qLr,QY,jLr,DLr,GLr,KE,OLr,Br,Ax,VLr,u4e,XLr,zLr,gn,QLr,b4e,WLr,HLr,v4e,ULr,JLr,F4e,YLr,KLr,ZLr,te,ZE,T4e,eyr,oyr,WY,ryr,tyr,ayr,eC,M4e,nyr,syr,HY,lyr,iyr,dyr,oC,E4e,cyr,fyr,UY,myr,gyr,hyr,rC,C4e,pyr,_yr,JY,uyr,byr,vyr,tC,w4e,Fyr,Tyr,YY,Myr,Eyr,Cyr,aC,A4e,wyr,Ayr,KY,Lyr,yyr,xyr,nC,L4e,$yr,kyr,ZY,Syr,Ryr,Pyr,sC,y4e,Byr,Iyr,eK,Nyr,qyr,jyr,lC,x4e,Dyr,Gyr,oK,Oyr,Vyr,Xyr,iC,$4e,zyr,Qyr,rK,Wyr,Hyr,Uyr,dC,k4e,Jyr,Yyr,tK,Kyr,Zyr,e9r,cC,S4e,o9r,r9r,aK,t9r,a9r,n9r,fC,R4e,s9r,l9r,nK,i9r,d9r,c9r,mC,P4e,f9r,m9r,sK,g9r,h9r,p9r,gC,B4e,_9r,u9r,lK,b9r,v9r,F9r,hC,I4e,T9r,M9r,iK,E9r,C9r,w9r,pC,N4e,A9r,L9r,dK,y9r,x9r,$9r,_C,q4e,k9r,S9r,cK,R9r,P9r,B9r,uC,j4e,I9r,N9r,fK,q9r,j9r,D9r,bC,D4e,G9r,O9r,mK,V9r,X9r,z9r,vC,G4e,Q9r,W9r,gK,H9r,U9r,J9r,FC,O4e,Y9r,K9r,hK,Z9r,exr,oxr,TC,V4e,rxr,txr,pK,axr,nxr,sxr,MC,X4e,lxr,ixr,_K,dxr,cxr,fxr,EC,z4e,mxr,gxr,uK,hxr,pxr,_xr,CC,Q4e,uxr,bxr,bK,vxr,Fxr,Txr,wC,Aze,Lc,AC,W4e,Lx,Mxr,H4e,Exr,Lze,ir,yx,Cxr,yc,wxr,vK,Axr,Lxr,FK,yxr,xxr,$xr,xx,kxr,U4e,Sxr,Rxr,Pxr,jt,$x,Bxr,J4e,Ixr,Nxr,xc,qxr,Y4e,jxr,Dxr,TK,Gxr,Oxr,Vxr,LC,Xxr,Ir,kx,zxr,K4e,Qxr,Wxr,hn,Hxr,Z4e,Uxr,Jxr,eEe,Yxr,Kxr,oEe,Zxr,e$r,o$r,_e,yC,rEe,r$r,t$r,MK,a$r,n$r,s$r,xC,tEe,l$r,i$r,EK,d$r,c$r,f$r,$C,aEe,m$r,g$r,CK,h$r,p$r,_$r,kC,nEe,u$r,b$r,wK,v$r,F$r,T$r,SC,sEe,M$r,E$r,AK,C$r,w$r,A$r,RC,lEe,L$r,y$r,LK,x$r,$$r,k$r,PC,iEe,S$r,R$r,yK,P$r,B$r,I$r,BC,dEe,N$r,q$r,xK,j$r,D$r,G$r,IC,cEe,O$r,V$r,$K,X$r,z$r,Q$r,NC,fEe,W$r,H$r,kK,U$r,J$r,Y$r,qC,mEe,K$r,Z$r,SK,ekr,okr,rkr,jC,gEe,tkr,akr,RK,nkr,skr,lkr,DC,hEe,ikr,dkr,PK,ckr,fkr,mkr,GC,pEe,gkr,hkr,BK,pkr,_kr,ukr,OC,_Ee,bkr,vkr,IK,Fkr,Tkr,Mkr,VC,uEe,Ekr,Ckr,NK,wkr,Akr,Lkr,XC,bEe,ykr,xkr,qK,$kr,kkr,Skr,zC,yze,$c,QC,vEe,Sx,Rkr,FEe,Pkr,xze,dr,Rx,Bkr,kc,Ikr,jK,Nkr,qkr,DK,jkr,Dkr,Gkr,Px,Okr,TEe,Vkr,Xkr,zkr,Dt,Bx,Qkr,MEe,Wkr,Hkr,Sc,Ukr,EEe,Jkr,Ykr,GK,Kkr,Zkr,eSr,WC,oSr,Nr,Ix,rSr,CEe,tSr,aSr,pn,nSr,wEe,sSr,lSr,AEe,iSr,dSr,LEe,cSr,fSr,mSr,Nx,HC,yEe,gSr,hSr,OK,pSr,_Sr,uSr,UC,xEe,bSr,vSr,VK,FSr,TSr,MSr,JC,$ze,Rc,YC,$Ee,qx,ESr,kEe,CSr,kze,cr,jx,wSr,Pc,ASr,XK,LSr,ySr,zK,xSr,$Sr,kSr,Dx,SSr,SEe,RSr,PSr,BSr,Gt,Gx,ISr,REe,NSr,qSr,Bc,jSr,PEe,DSr,GSr,QK,OSr,VSr,XSr,KC,zSr,qr,Ox,QSr,BEe,WSr,HSr,_n,USr,IEe,JSr,YSr,NEe,KSr,ZSr,qEe,eRr,oRr,rRr,jEe,ZC,DEe,tRr,aRr,WK,nRr,sRr,lRr,e3,Sze,Ic,o3,GEe,Vx,iRr,OEe,dRr,Rze,fr,Xx,cRr,Nc,fRr,HK,mRr,gRr,UK,hRr,pRr,_Rr,zx,uRr,VEe,bRr,vRr,FRr,Ot,Qx,TRr,XEe,MRr,ERr,qc,CRr,zEe,wRr,ARr,JK,LRr,yRr,xRr,r3,$Rr,jr,Wx,kRr,QEe,SRr,RRr,un,PRr,WEe,BRr,IRr,HEe,NRr,qRr,UEe,jRr,DRr,GRr,de,t3,JEe,ORr,VRr,YK,XRr,zRr,QRr,a3,YEe,WRr,HRr,KK,URr,JRr,YRr,n3,KEe,KRr,ZRr,ZK,ePr,oPr,rPr,s3,ZEe,tPr,aPr,eZ,nPr,sPr,lPr,l3,eCe,iPr,dPr,oZ,cPr,fPr,mPr,i3,oCe,gPr,hPr,rZ,pPr,_Pr,uPr,d3,rCe,bPr,vPr,tZ,FPr,TPr,MPr,c3,tCe,EPr,CPr,aZ,wPr,APr,LPr,f3,aCe,yPr,xPr,nZ,$Pr,kPr,SPr,m3,nCe,RPr,PPr,sZ,BPr,IPr,NPr,g3,sCe,qPr,jPr,lZ,DPr,GPr,OPr,h3,lCe,VPr,XPr,iZ,zPr,QPr,WPr,p3,iCe,HPr,UPr,dZ,JPr,YPr,KPr,_3,dCe,ZPr,eBr,cZ,oBr,rBr,tBr,u3,cCe,aBr,nBr,fZ,sBr,lBr,iBr,b3,fCe,dBr,cBr,mZ,fBr,mBr,gBr,v3,mCe,hBr,pBr,gZ,_Br,uBr,bBr,F3,gCe,vBr,FBr,hZ,TBr,MBr,EBr,T3,hCe,CBr,wBr,pZ,ABr,LBr,yBr,M3,pCe,xBr,$Br,_Z,kBr,SBr,RBr,E3,Pze,jc,C3,_Ce,Hx,PBr,uCe,BBr,Bze,mr,Ux,IBr,Dc,NBr,uZ,qBr,jBr,bZ,DBr,GBr,OBr,Jx,VBr,bCe,XBr,zBr,QBr,Vt,Yx,WBr,vCe,HBr,UBr,Gc,JBr,FCe,YBr,KBr,vZ,ZBr,eIr,oIr,w3,rIr,Dr,Kx,tIr,TCe,aIr,nIr,bn,sIr,MCe,lIr,iIr,ECe,dIr,cIr,CCe,fIr,mIr,gIr,ce,A3,wCe,hIr,pIr,FZ,_Ir,uIr,bIr,L3,ACe,vIr,FIr,TZ,TIr,MIr,EIr,y3,LCe,CIr,wIr,MZ,AIr,LIr,yIr,x3,yCe,xIr,$Ir,EZ,kIr,SIr,RIr,$3,xCe,PIr,BIr,CZ,IIr,NIr,qIr,k3,$Ce,jIr,DIr,wZ,GIr,OIr,VIr,S3,kCe,XIr,zIr,AZ,QIr,WIr,HIr,R3,SCe,UIr,JIr,LZ,YIr,KIr,ZIr,P3,RCe,eNr,oNr,yZ,rNr,tNr,aNr,B3,PCe,nNr,sNr,xZ,lNr,iNr,dNr,I3,BCe,cNr,fNr,$Z,mNr,gNr,hNr,N3,ICe,pNr,_Nr,kZ,uNr,bNr,vNr,q3,NCe,FNr,TNr,SZ,MNr,ENr,CNr,j3,qCe,wNr,ANr,RZ,LNr,yNr,xNr,D3,jCe,$Nr,kNr,PZ,SNr,RNr,PNr,G3,DCe,BNr,INr,BZ,NNr,qNr,jNr,O3,GCe,DNr,GNr,IZ,ONr,VNr,XNr,V3,OCe,zNr,QNr,NZ,WNr,HNr,UNr,X3,VCe,JNr,YNr,qZ,KNr,ZNr,eqr,z3,XCe,oqr,rqr,jZ,tqr,aqr,nqr,Q3,Ize,Oc,W3,zCe,Zx,sqr,QCe,lqr,Nze,gr,e$,iqr,Vc,dqr,DZ,cqr,fqr,GZ,mqr,gqr,hqr,o$,pqr,WCe,_qr,uqr,bqr,Xt,r$,vqr,HCe,Fqr,Tqr,Xc,Mqr,UCe,Eqr,Cqr,OZ,wqr,Aqr,Lqr,H3,yqr,Gr,t$,xqr,JCe,$qr,kqr,vn,Sqr,YCe,Rqr,Pqr,KCe,Bqr,Iqr,ZCe,Nqr,qqr,jqr,e3e,U3,o3e,Dqr,Gqr,VZ,Oqr,Vqr,Xqr,J3,qze,zc,Y3,r3e,a$,zqr,t3e,Qqr,jze,hr,n$,Wqr,Qc,Hqr,XZ,Uqr,Jqr,zZ,Yqr,Kqr,Zqr,s$,ejr,a3e,ojr,rjr,tjr,zt,l$,ajr,n3e,njr,sjr,Wc,ljr,s3e,ijr,djr,QZ,cjr,fjr,mjr,K3,gjr,Or,i$,hjr,l3e,pjr,_jr,Fn,ujr,i3e,bjr,vjr,d3e,Fjr,Tjr,c3e,Mjr,Ejr,Cjr,f3e,Z3,m3e,wjr,Ajr,WZ,Ljr,yjr,xjr,e5,Dze,Hc,o5,g3e,d$,$jr,h3e,kjr,Gze,pr,c$,Sjr,Uc,Rjr,HZ,Pjr,Bjr,UZ,Ijr,Njr,qjr,f$,jjr,p3e,Djr,Gjr,Ojr,Qt,m$,Vjr,_3e,Xjr,zjr,Jc,Qjr,u3e,Wjr,Hjr,JZ,Ujr,Jjr,Yjr,r5,Kjr,Vr,g$,Zjr,b3e,eDr,oDr,Tn,rDr,v3e,tDr,aDr,F3e,nDr,sDr,T3e,lDr,iDr,dDr,oe,t5,M3e,cDr,fDr,YZ,mDr,gDr,hDr,a5,E3e,pDr,_Dr,KZ,uDr,bDr,vDr,n5,C3e,FDr,TDr,ZZ,MDr,EDr,CDr,s5,w3e,wDr,ADr,eee,LDr,yDr,xDr,l5,A3e,$Dr,kDr,oee,SDr,RDr,PDr,i5,L3e,BDr,IDr,ree,NDr,qDr,jDr,d5,y3e,DDr,GDr,tee,ODr,VDr,XDr,c5,x3e,zDr,QDr,aee,WDr,HDr,UDr,f5,$3e,JDr,YDr,nee,KDr,ZDr,eGr,m5,k3e,oGr,rGr,see,tGr,aGr,nGr,g5,S3e,sGr,lGr,lee,iGr,dGr,cGr,h5,R3e,fGr,mGr,iee,gGr,hGr,pGr,p5,P3e,_Gr,uGr,dee,bGr,vGr,FGr,_5,B3e,TGr,MGr,cee,EGr,CGr,wGr,u5,I3e,AGr,LGr,fee,yGr,xGr,$Gr,b5,N3e,kGr,SGr,mee,RGr,PGr,BGr,v5,q3e,IGr,NGr,gee,qGr,jGr,DGr,F5,j3e,GGr,OGr,hee,VGr,XGr,zGr,T5,D3e,QGr,WGr,pee,HGr,UGr,JGr,M5,G3e,YGr,KGr,_ee,ZGr,eOr,oOr,E5,O3e,rOr,tOr,uee,aOr,nOr,sOr,C5,V3e,lOr,iOr,bee,dOr,cOr,fOr,w5,X3e,mOr,gOr,vee,hOr,pOr,_Or,A5,z3e,uOr,bOr,Fee,vOr,FOr,TOr,L5,Q3e,MOr,EOr,Tee,COr,wOr,AOr,y5,W3e,LOr,yOr,Mee,xOr,$Or,kOr,x5,H3e,SOr,ROr,Eee,POr,BOr,IOr,$5,Oze,Yc,k5,U3e,h$,NOr,J3e,qOr,Vze,_r,p$,jOr,Kc,DOr,Cee,GOr,OOr,wee,VOr,XOr,zOr,_$,QOr,Y3e,WOr,HOr,UOr,Wt,u$,JOr,K3e,YOr,KOr,Zc,ZOr,Z3e,eVr,oVr,Aee,rVr,tVr,aVr,S5,nVr,Xr,b$,sVr,e5e,lVr,iVr,Mn,dVr,o5e,cVr,fVr,r5e,mVr,gVr,t5e,hVr,pVr,_Vr,xe,R5,a5e,uVr,bVr,Lee,vVr,FVr,TVr,P5,n5e,MVr,EVr,yee,CVr,wVr,AVr,B5,s5e,LVr,yVr,xee,xVr,$Vr,kVr,I5,l5e,SVr,RVr,$ee,PVr,BVr,IVr,N5,i5e,NVr,qVr,kee,jVr,DVr,GVr,q5,d5e,OVr,VVr,See,XVr,zVr,QVr,j5,c5e,WVr,HVr,Ree,UVr,JVr,YVr,D5,f5e,KVr,ZVr,Pee,eXr,oXr,rXr,G5,m5e,tXr,aXr,Bee,nXr,sXr,lXr,O5,g5e,iXr,dXr,Iee,cXr,fXr,mXr,V5,Xze,ef,X5,h5e,v$,gXr,p5e,hXr,zze,ur,F$,pXr,of,_Xr,Nee,uXr,bXr,qee,vXr,FXr,TXr,T$,MXr,_5e,EXr,CXr,wXr,Ht,M$,AXr,u5e,LXr,yXr,rf,xXr,b5e,$Xr,kXr,jee,SXr,RXr,PXr,z5,BXr,zr,E$,IXr,v5e,NXr,qXr,En,jXr,F5e,DXr,GXr,T5e,OXr,VXr,M5e,XXr,zXr,QXr,Ee,Q5,E5e,WXr,HXr,Dee,UXr,JXr,YXr,W5,C5e,KXr,ZXr,Gee,ezr,ozr,rzr,H5,w5e,tzr,azr,Oee,nzr,szr,lzr,U5,A5e,izr,dzr,Vee,czr,fzr,mzr,J5,L5e,gzr,hzr,Xee,pzr,_zr,uzr,Y5,y5e,bzr,vzr,zee,Fzr,Tzr,Mzr,K5,x5e,Ezr,Czr,Qee,wzr,Azr,Lzr,Z5,$5e,yzr,xzr,Wee,$zr,kzr,Szr,e0,k5e,Rzr,Pzr,Hee,Bzr,Izr,Nzr,o0,S5e,qzr,jzr,Uee,Dzr,Gzr,Ozr,r0,R5e,Vzr,Xzr,Jee,zzr,Qzr,Wzr,t0,P5e,Hzr,Uzr,Yee,Jzr,Yzr,Kzr,a0,B5e,Zzr,eQr,Kee,oQr,rQr,tQr,n0,Qze,tf,s0,I5e,C$,aQr,N5e,nQr,Wze,br,w$,sQr,af,lQr,Zee,iQr,dQr,eoe,cQr,fQr,mQr,A$,gQr,q5e,hQr,pQr,_Qr,Ut,L$,uQr,j5e,bQr,vQr,nf,FQr,D5e,TQr,MQr,ooe,EQr,CQr,wQr,l0,AQr,Qr,y$,LQr,G5e,yQr,xQr,Cn,$Qr,O5e,kQr,SQr,V5e,RQr,PQr,X5e,BQr,IQr,NQr,$e,i0,z5e,qQr,jQr,roe,DQr,GQr,OQr,d0,Q5e,VQr,XQr,toe,zQr,QQr,WQr,c0,W5e,HQr,UQr,aoe,JQr,YQr,KQr,f0,H5e,ZQr,eWr,noe,oWr,rWr,tWr,m0,U5e,aWr,nWr,soe,sWr,lWr,iWr,g0,J5e,dWr,cWr,loe,fWr,mWr,gWr,h0,Y5e,hWr,pWr,ioe,_Wr,uWr,bWr,p0,K5e,vWr,FWr,doe,TWr,MWr,EWr,_0,Z5e,CWr,wWr,coe,AWr,LWr,yWr,u0,e0e,xWr,$Wr,foe,kWr,SWr,RWr,b0,Hze,sf,v0,o0e,x$,PWr,r0e,BWr,Uze,vr,$$,IWr,lf,NWr,moe,qWr,jWr,goe,DWr,GWr,OWr,k$,VWr,t0e,XWr,zWr,QWr,Jt,S$,WWr,a0e,HWr,UWr,df,JWr,n0e,YWr,KWr,hoe,ZWr,eHr,oHr,F0,rHr,Wr,R$,tHr,s0e,aHr,nHr,wn,sHr,l0e,lHr,iHr,i0e,dHr,cHr,d0e,fHr,mHr,gHr,ke,T0,c0e,hHr,pHr,poe,_Hr,uHr,bHr,M0,f0e,vHr,FHr,_oe,THr,MHr,EHr,E0,m0e,CHr,wHr,uoe,AHr,LHr,yHr,C0,g0e,xHr,$Hr,boe,kHr,SHr,RHr,w0,h0e,PHr,BHr,voe,IHr,NHr,qHr,A0,p0e,jHr,DHr,Foe,GHr,OHr,VHr,L0,_0e,XHr,zHr,Toe,QHr,WHr,HHr,y0,u0e,UHr,JHr,Moe,YHr,KHr,ZHr,x0,b0e,eUr,oUr,Eoe,rUr,tUr,aUr,$0,v0e,nUr,sUr,Coe,lUr,iUr,dUr,k0,Jze,cf,S0,F0e,P$,cUr,T0e,fUr,Yze,Fr,B$,mUr,ff,gUr,woe,hUr,pUr,Aoe,_Ur,uUr,bUr,I$,vUr,M0e,FUr,TUr,MUr,Yt,N$,EUr,E0e,CUr,wUr,mf,AUr,C0e,LUr,yUr,Loe,xUr,$Ur,kUr,R0,SUr,Hr,q$,RUr,w0e,PUr,BUr,An,IUr,A0e,NUr,qUr,L0e,jUr,DUr,y0e,GUr,OUr,VUr,Se,P0,x0e,XUr,zUr,yoe,QUr,WUr,HUr,B0,$0e,UUr,JUr,xoe,YUr,KUr,ZUr,I0,k0e,eJr,oJr,$oe,rJr,tJr,aJr,N0,S0e,nJr,sJr,koe,lJr,iJr,dJr,q0,R0e,cJr,fJr,Soe,mJr,gJr,hJr,j0,P0e,pJr,_Jr,Roe,uJr,bJr,vJr,D0,B0e,FJr,TJr,Poe,MJr,EJr,CJr,G0,I0e,wJr,AJr,Boe,LJr,yJr,xJr,O0,N0e,$Jr,kJr,Ioe,SJr,RJr,PJr,V0,q0e,BJr,IJr,Noe,NJr,qJr,jJr,X0,Kze,gf,z0,j0e,j$,DJr,D0e,GJr,Zze,Tr,D$,OJr,hf,VJr,qoe,XJr,zJr,joe,QJr,WJr,HJr,G$,UJr,G0e,JJr,YJr,KJr,Kt,O$,ZJr,O0e,eYr,oYr,pf,rYr,V0e,tYr,aYr,Doe,nYr,sYr,lYr,Q0,iYr,Ur,V$,dYr,X0e,cYr,fYr,Ln,mYr,z0e,gYr,hYr,Q0e,pYr,_Yr,W0e,uYr,bYr,vYr,Re,W0,H0e,FYr,TYr,Goe,MYr,EYr,CYr,H0,U0e,wYr,AYr,Ooe,LYr,yYr,xYr,U0,J0e,$Yr,kYr,Voe,SYr,RYr,PYr,J0,Y0e,BYr,IYr,Xoe,NYr,qYr,jYr,Y0,K0e,DYr,GYr,zoe,OYr,VYr,XYr,K0,Z0e,zYr,QYr,Qoe,WYr,HYr,UYr,Z0,ewe,JYr,YYr,Woe,KYr,ZYr,eKr,ew,owe,oKr,rKr,Hoe,tKr,aKr,nKr,ow,rwe,sKr,lKr,Uoe,iKr,dKr,cKr,rw,twe,fKr,mKr,Joe,gKr,hKr,pKr,tw,eQe,_f,aw,awe,X$,_Kr,nwe,uKr,oQe,Mr,z$,bKr,uf,vKr,Yoe,FKr,TKr,Koe,MKr,EKr,CKr,Q$,wKr,swe,AKr,LKr,yKr,Zt,W$,xKr,lwe,$Kr,kKr,bf,SKr,iwe,RKr,PKr,Zoe,BKr,IKr,NKr,nw,qKr,Jr,H$,jKr,dwe,DKr,GKr,yn,OKr,cwe,VKr,XKr,fwe,zKr,QKr,mwe,WKr,HKr,UKr,Ve,sw,gwe,JKr,YKr,ere,KKr,ZKr,eZr,lw,hwe,oZr,rZr,ore,tZr,aZr,nZr,iw,pwe,sZr,lZr,rre,iZr,dZr,cZr,dw,_we,fZr,mZr,tre,gZr,hZr,pZr,cw,uwe,_Zr,uZr,are,bZr,vZr,FZr,fw,bwe,TZr,MZr,nre,EZr,CZr,wZr,mw,vwe,AZr,LZr,sre,yZr,xZr,$Zr,gw,Fwe,kZr,SZr,lre,RZr,PZr,BZr,hw,rQe,vf,pw,Twe,U$,IZr,Mwe,NZr,tQe,Er,J$,qZr,Ff,jZr,ire,DZr,GZr,dre,OZr,VZr,XZr,Y$,zZr,Ewe,QZr,WZr,HZr,ea,K$,UZr,Cwe,JZr,YZr,Tf,KZr,wwe,ZZr,eet,cre,oet,ret,tet,_w,aet,Yr,Z$,net,Awe,set,iet,xn,det,Lwe,cet,fet,ywe,met,get,xwe,het,pet,_et,Xe,uw,$we,uet,bet,fre,vet,Fet,Tet,bw,kwe,Met,Eet,mre,Cet,wet,Aet,vw,Swe,Let,yet,gre,xet,$et,ket,Fw,Rwe,Set,Ret,hre,Pet,Bet,Iet,Tw,Pwe,Net,qet,pre,jet,Det,Get,Mw,Bwe,Oet,Vet,_re,Xet,zet,Qet,Ew,Iwe,Wet,Het,ure,Uet,Jet,Yet,Cw,Nwe,Ket,Zet,bre,eot,oot,rot,ww,aQe,Mf,Aw,qwe,ek,tot,jwe,aot,nQe,Cr,ok,not,Ef,sot,vre,lot,iot,Fre,dot,cot,fot,rk,mot,Dwe,got,hot,pot,oa,tk,_ot,Gwe,uot,bot,Cf,vot,Owe,Fot,Tot,Tre,Mot,Eot,Cot,Lw,wot,Kr,ak,Aot,Vwe,Lot,yot,$n,xot,Xwe,$ot,kot,zwe,Sot,Rot,Qwe,Pot,Bot,Iot,Wwe,yw,Hwe,Not,qot,Mre,jot,Dot,Got,xw,sQe,wf,$w,Uwe,nk,Oot,Jwe,Vot,lQe,wr,sk,Xot,Af,zot,Ere,Qot,Wot,Cre,Hot,Uot,Jot,lk,Yot,Ywe,Kot,Zot,ert,ra,ik,ort,Kwe,rrt,trt,Lf,art,Zwe,nrt,srt,wre,lrt,irt,drt,kw,crt,Zr,dk,frt,eAe,mrt,grt,kn,hrt,oAe,prt,_rt,rAe,urt,brt,tAe,vrt,Frt,Trt,ck,Sw,aAe,Mrt,Ert,Are,Crt,wrt,Art,Rw,nAe,Lrt,yrt,Lre,xrt,$rt,krt,Pw,iQe,yf,Bw,sAe,fk,Srt,lAe,Rrt,dQe,Ar,mk,Prt,xf,Brt,yre,Irt,Nrt,xre,qrt,jrt,Drt,gk,Grt,iAe,Ort,Vrt,Xrt,ta,hk,zrt,dAe,Qrt,Wrt,$f,Hrt,cAe,Urt,Jrt,$re,Yrt,Krt,Zrt,Iw,ett,et,pk,ott,fAe,rtt,ttt,Sn,att,mAe,ntt,stt,gAe,ltt,itt,hAe,dtt,ctt,ftt,pAe,Nw,_Ae,mtt,gtt,kre,htt,ptt,_tt,qw,cQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),lL=new re({}),iL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new utt({props:{warning:!0,$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/configuration_auto.py#L613"}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/configuration_auto.py#L636"}}),Kg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),hL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/configuration_auto.py#L759"}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/tokenization_auto.py#L403"}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17281/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/tokenization_auto.py#L417"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),FL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/tokenization_auto.py#L616"}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17281/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),bp=new utt({props:{$$slots:{default:[rWt]},$$scope:{ctx:$}}}),vp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),AL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),LL=new re({}),yL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/processing_auto.py#L89"}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/processing_auto.py#L103"}}),Dp=new utt({props:{$$slots:{default:[aWt]},$$scope:{ctx:$}}}),Gp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),SL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/processing_auto.py#L256"}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L784"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Uu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L791"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Yu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),X1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L806"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L813"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),I2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L820"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Xb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L829"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L874"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L881"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L867"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L838"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L845"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L890"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),P7=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L929"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),I7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L856"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L936"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L959"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L943"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),A8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),c9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L950"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),_9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L968"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L975"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),H8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),A9=new re({}),L9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L922"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),k9=new re({}),S9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L897"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),I9=new re({}),N9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L904"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),G9=new re({}),O9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_auto.py#L913"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Q9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),r$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),W$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),fk=new re({}),mk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17281/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17281/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17281/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Pf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),tL=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),aL=o("AutoConfig"),Bn=o(", "),In=a("a"),nL=o("AutoModel"),$i=o(`, and
`),Nn=a("a"),sL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),IS=o("will create a model that is an instance of "),Si=a("a"),NS=o("BertModel"),qS=o("."),Co=l(),Ra=a("p"),jS=o("There is one class of "),Nf=a("code"),DS=o("AutoModel"),vHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nXe=l(),Ri=a("h2"),qf=a("a"),Lae=a("span"),F(lL.$$.fragment),FHe=l(),yae=a("span"),THe=o("Extending the Auto Classes"),sXe=l(),qn=a("p"),MHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),xae=a("code"),EHe=o("NewModel"),CHe=o(", make sure you have a "),$ae=a("code"),wHe=o("NewModelConfig"),AHe=o(` then you can add those to the auto
classes like this:`),lXe=l(),F(iL.$$.fragment),iXe=l(),GS=a("p"),LHe=o("You will then be able to use the auto classes like you would usually do!"),dXe=l(),F(jf.$$.fragment),cXe=l(),Pi=a("h2"),Df=a("a"),kae=a("span"),F(dL.$$.fragment),yHe=l(),Sae=a("span"),xHe=o("AutoConfig"),fXe=l(),wo=a("div"),F(cL.$$.fragment),$He=l(),fL=a("p"),kHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),OS=a("a"),SHe=o("from_pretrained()"),RHe=o(" class method."),PHe=l(),mL=a("p"),BHe=o("This class cannot be instantiated directly using "),Rae=a("code"),IHe=o("__init__()"),NHe=o(" (throws an error)."),qHe=l(),Lr=a("div"),F(gL.$$.fragment),jHe=l(),Pae=a("p"),DHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),GHe=l(),Bi=a("p"),OHe=o("The configuration class to instantiate is selected based on the "),Bae=a("code"),VHe=o("model_type"),XHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Iae=a("code"),zHe=o("pretrained_model_name_or_path"),QHe=o(":"),WHe=l(),A=a("ul"),Gf=a("li"),Nae=a("strong"),HHe=o("albert"),UHe=o(" \u2014 "),VS=a("a"),JHe=o("AlbertConfig"),YHe=o(" (ALBERT model)"),KHe=l(),Of=a("li"),qae=a("strong"),ZHe=o("bart"),eUe=o(" \u2014 "),XS=a("a"),oUe=o("BartConfig"),rUe=o(" (BART model)"),tUe=l(),Vf=a("li"),jae=a("strong"),aUe=o("beit"),nUe=o(" \u2014 "),zS=a("a"),sUe=o("BeitConfig"),lUe=o(" (BEiT model)"),iUe=l(),Xf=a("li"),Dae=a("strong"),dUe=o("bert"),cUe=o(" \u2014 "),QS=a("a"),fUe=o("BertConfig"),mUe=o(" (BERT model)"),gUe=l(),zf=a("li"),Gae=a("strong"),hUe=o("bert-generation"),pUe=o(" \u2014 "),WS=a("a"),_Ue=o("BertGenerationConfig"),uUe=o(" (Bert Generation model)"),bUe=l(),Qf=a("li"),Oae=a("strong"),vUe=o("big_bird"),FUe=o(" \u2014 "),HS=a("a"),TUe=o("BigBirdConfig"),MUe=o(" (BigBird model)"),EUe=l(),Wf=a("li"),Vae=a("strong"),CUe=o("bigbird_pegasus"),wUe=o(" \u2014 "),US=a("a"),AUe=o("BigBirdPegasusConfig"),LUe=o(" (BigBird-Pegasus model)"),yUe=l(),Hf=a("li"),Xae=a("strong"),xUe=o("blenderbot"),$Ue=o(" \u2014 "),JS=a("a"),kUe=o("BlenderbotConfig"),SUe=o(" (Blenderbot model)"),RUe=l(),Uf=a("li"),zae=a("strong"),PUe=o("blenderbot-small"),BUe=o(" \u2014 "),YS=a("a"),IUe=o("BlenderbotSmallConfig"),NUe=o(" (BlenderbotSmall model)"),qUe=l(),Jf=a("li"),Qae=a("strong"),jUe=o("bloom"),DUe=o(" \u2014 "),KS=a("a"),GUe=o("BloomConfig"),OUe=o(" (BLOOM model)"),VUe=l(),Yf=a("li"),Wae=a("strong"),XUe=o("camembert"),zUe=o(" \u2014 "),ZS=a("a"),QUe=o("CamembertConfig"),WUe=o(" (CamemBERT model)"),HUe=l(),Kf=a("li"),Hae=a("strong"),UUe=o("canine"),JUe=o(" \u2014 "),eR=a("a"),YUe=o("CanineConfig"),KUe=o(" (CANINE model)"),ZUe=l(),Zf=a("li"),Uae=a("strong"),eJe=o("clip"),oJe=o(" \u2014 "),oR=a("a"),rJe=o("CLIPConfig"),tJe=o(" (CLIP model)"),aJe=l(),em=a("li"),Jae=a("strong"),nJe=o("codegen"),sJe=o(" \u2014 "),rR=a("a"),lJe=o("CodeGenConfig"),iJe=o(" (CodeGen model)"),dJe=l(),om=a("li"),Yae=a("strong"),cJe=o("convbert"),fJe=o(" \u2014 "),tR=a("a"),mJe=o("ConvBertConfig"),gJe=o(" (ConvBERT model)"),hJe=l(),rm=a("li"),Kae=a("strong"),pJe=o("convnext"),_Je=o(" \u2014 "),aR=a("a"),uJe=o("ConvNextConfig"),bJe=o(" (ConvNeXT model)"),vJe=l(),tm=a("li"),Zae=a("strong"),FJe=o("ctrl"),TJe=o(" \u2014 "),nR=a("a"),MJe=o("CTRLConfig"),EJe=o(" (CTRL model)"),CJe=l(),am=a("li"),ene=a("strong"),wJe=o("cvt"),AJe=o(" \u2014 "),sR=a("a"),LJe=o("CvtConfig"),yJe=o(" (CvT model)"),xJe=l(),nm=a("li"),one=a("strong"),$Je=o("data2vec-audio"),kJe=o(" \u2014 "),lR=a("a"),SJe=o("Data2VecAudioConfig"),RJe=o(" (Data2VecAudio model)"),PJe=l(),sm=a("li"),rne=a("strong"),BJe=o("data2vec-text"),IJe=o(" \u2014 "),iR=a("a"),NJe=o("Data2VecTextConfig"),qJe=o(" (Data2VecText model)"),jJe=l(),lm=a("li"),tne=a("strong"),DJe=o("data2vec-vision"),GJe=o(" \u2014 "),dR=a("a"),OJe=o("Data2VecVisionConfig"),VJe=o(" (Data2VecVision model)"),XJe=l(),im=a("li"),ane=a("strong"),zJe=o("deberta"),QJe=o(" \u2014 "),cR=a("a"),WJe=o("DebertaConfig"),HJe=o(" (DeBERTa model)"),UJe=l(),dm=a("li"),nne=a("strong"),JJe=o("deberta-v2"),YJe=o(" \u2014 "),fR=a("a"),KJe=o("DebertaV2Config"),ZJe=o(" (DeBERTa-v2 model)"),eYe=l(),cm=a("li"),sne=a("strong"),oYe=o("decision_transformer"),rYe=o(" \u2014 "),mR=a("a"),tYe=o("DecisionTransformerConfig"),aYe=o(" (Decision Transformer model)"),nYe=l(),fm=a("li"),lne=a("strong"),sYe=o("deformable_detr"),lYe=o(" \u2014 "),gR=a("a"),iYe=o("DeformableDetrConfig"),dYe=o(" (Deformable DETR model)"),cYe=l(),mm=a("li"),ine=a("strong"),fYe=o("deit"),mYe=o(" \u2014 "),hR=a("a"),gYe=o("DeiTConfig"),hYe=o(" (DeiT model)"),pYe=l(),gm=a("li"),dne=a("strong"),_Ye=o("detr"),uYe=o(" \u2014 "),pR=a("a"),bYe=o("DetrConfig"),vYe=o(" (DETR model)"),FYe=l(),hm=a("li"),cne=a("strong"),TYe=o("distilbert"),MYe=o(" \u2014 "),_R=a("a"),EYe=o("DistilBertConfig"),CYe=o(" (DistilBERT model)"),wYe=l(),pm=a("li"),fne=a("strong"),AYe=o("dpr"),LYe=o(" \u2014 "),uR=a("a"),yYe=o("DPRConfig"),xYe=o(" (DPR model)"),$Ye=l(),_m=a("li"),mne=a("strong"),kYe=o("dpt"),SYe=o(" \u2014 "),bR=a("a"),RYe=o("DPTConfig"),PYe=o(" (DPT model)"),BYe=l(),um=a("li"),gne=a("strong"),IYe=o("electra"),NYe=o(" \u2014 "),vR=a("a"),qYe=o("ElectraConfig"),jYe=o(" (ELECTRA model)"),DYe=l(),bm=a("li"),hne=a("strong"),GYe=o("encoder-decoder"),OYe=o(" \u2014 "),FR=a("a"),VYe=o("EncoderDecoderConfig"),XYe=o(" (Encoder decoder model)"),zYe=l(),vm=a("li"),pne=a("strong"),QYe=o("flaubert"),WYe=o(" \u2014 "),TR=a("a"),HYe=o("FlaubertConfig"),UYe=o(" (FlauBERT model)"),JYe=l(),Fm=a("li"),_ne=a("strong"),YYe=o("flava"),KYe=o(" \u2014 "),MR=a("a"),ZYe=o("FlavaConfig"),eKe=o(" (FLAVA model)"),oKe=l(),Tm=a("li"),une=a("strong"),rKe=o("fnet"),tKe=o(" \u2014 "),ER=a("a"),aKe=o("FNetConfig"),nKe=o(" (FNet model)"),sKe=l(),Mm=a("li"),bne=a("strong"),lKe=o("fsmt"),iKe=o(" \u2014 "),CR=a("a"),dKe=o("FSMTConfig"),cKe=o(" (FairSeq Machine-Translation model)"),fKe=l(),Em=a("li"),vne=a("strong"),mKe=o("funnel"),gKe=o(" \u2014 "),wR=a("a"),hKe=o("FunnelConfig"),pKe=o(" (Funnel Transformer model)"),_Ke=l(),Cm=a("li"),Fne=a("strong"),uKe=o("glpn"),bKe=o(" \u2014 "),AR=a("a"),vKe=o("GLPNConfig"),FKe=o(" (GLPN model)"),TKe=l(),wm=a("li"),Tne=a("strong"),MKe=o("gpt2"),EKe=o(" \u2014 "),LR=a("a"),CKe=o("GPT2Config"),wKe=o(" (OpenAI GPT-2 model)"),AKe=l(),Am=a("li"),Mne=a("strong"),LKe=o("gpt_neo"),yKe=o(" \u2014 "),yR=a("a"),xKe=o("GPTNeoConfig"),$Ke=o(" (GPT Neo model)"),kKe=l(),Lm=a("li"),Ene=a("strong"),SKe=o("gpt_neox"),RKe=o(" \u2014 "),xR=a("a"),PKe=o("GPTNeoXConfig"),BKe=o(" (GPT NeoX model)"),IKe=l(),ym=a("li"),Cne=a("strong"),NKe=o("gptj"),qKe=o(" \u2014 "),$R=a("a"),jKe=o("GPTJConfig"),DKe=o(" (GPT-J model)"),GKe=l(),xm=a("li"),wne=a("strong"),OKe=o("groupvit"),VKe=o(" \u2014 "),kR=a("a"),XKe=o("GroupViTConfig"),zKe=o(" (GroupViT model)"),QKe=l(),$m=a("li"),Ane=a("strong"),WKe=o("hubert"),HKe=o(" \u2014 "),SR=a("a"),UKe=o("HubertConfig"),JKe=o(" (Hubert model)"),YKe=l(),km=a("li"),Lne=a("strong"),KKe=o("ibert"),ZKe=o(" \u2014 "),RR=a("a"),eZe=o("IBertConfig"),oZe=o(" (I-BERT model)"),rZe=l(),Sm=a("li"),yne=a("strong"),tZe=o("imagegpt"),aZe=o(" \u2014 "),PR=a("a"),nZe=o("ImageGPTConfig"),sZe=o(" (ImageGPT model)"),lZe=l(),Rm=a("li"),xne=a("strong"),iZe=o("layoutlm"),dZe=o(" \u2014 "),BR=a("a"),cZe=o("LayoutLMConfig"),fZe=o(" (LayoutLM model)"),mZe=l(),Pm=a("li"),$ne=a("strong"),gZe=o("layoutlmv2"),hZe=o(" \u2014 "),IR=a("a"),pZe=o("LayoutLMv2Config"),_Ze=o(" (LayoutLMv2 model)"),uZe=l(),Bm=a("li"),kne=a("strong"),bZe=o("layoutlmv3"),vZe=o(" \u2014 "),NR=a("a"),FZe=o("LayoutLMv3Config"),TZe=o(" (LayoutLMv3 model)"),MZe=l(),Im=a("li"),Sne=a("strong"),EZe=o("led"),CZe=o(" \u2014 "),qR=a("a"),wZe=o("LEDConfig"),AZe=o(" (LED model)"),LZe=l(),Nm=a("li"),Rne=a("strong"),yZe=o("levit"),xZe=o(" \u2014 "),jR=a("a"),$Ze=o("LevitConfig"),kZe=o(" (LeViT model)"),SZe=l(),qm=a("li"),Pne=a("strong"),RZe=o("longformer"),PZe=o(" \u2014 "),DR=a("a"),BZe=o("LongformerConfig"),IZe=o(" (Longformer model)"),NZe=l(),jm=a("li"),Bne=a("strong"),qZe=o("longt5"),jZe=o(" \u2014 "),GR=a("a"),DZe=o("LongT5Config"),GZe=o(" (LongT5 model)"),OZe=l(),Dm=a("li"),Ine=a("strong"),VZe=o("luke"),XZe=o(" \u2014 "),OR=a("a"),zZe=o("LukeConfig"),QZe=o(" (LUKE model)"),WZe=l(),Gm=a("li"),Nne=a("strong"),HZe=o("lxmert"),UZe=o(" \u2014 "),VR=a("a"),JZe=o("LxmertConfig"),YZe=o(" (LXMERT model)"),KZe=l(),Om=a("li"),qne=a("strong"),ZZe=o("m2m_100"),eeo=o(" \u2014 "),XR=a("a"),oeo=o("M2M100Config"),reo=o(" (M2M100 model)"),teo=l(),Vm=a("li"),jne=a("strong"),aeo=o("marian"),neo=o(" \u2014 "),zR=a("a"),seo=o("MarianConfig"),leo=o(" (Marian model)"),ieo=l(),Xm=a("li"),Dne=a("strong"),deo=o("maskformer"),ceo=o(" \u2014 "),QR=a("a"),feo=o("MaskFormerConfig"),meo=o(" (MaskFormer model)"),geo=l(),zm=a("li"),Gne=a("strong"),heo=o("mbart"),peo=o(" \u2014 "),WR=a("a"),_eo=o("MBartConfig"),ueo=o(" (mBART model)"),beo=l(),Qm=a("li"),One=a("strong"),veo=o("mctct"),Feo=o(" \u2014 "),HR=a("a"),Teo=o("MCTCTConfig"),Meo=o(" (M-CTC-T model)"),Eeo=l(),Wm=a("li"),Vne=a("strong"),Ceo=o("megatron-bert"),weo=o(" \u2014 "),UR=a("a"),Aeo=o("MegatronBertConfig"),Leo=o(" (Megatron-BERT model)"),yeo=l(),Hm=a("li"),Xne=a("strong"),xeo=o("mobilebert"),$eo=o(" \u2014 "),JR=a("a"),keo=o("MobileBertConfig"),Seo=o(" (MobileBERT model)"),Reo=l(),Um=a("li"),zne=a("strong"),Peo=o("mobilevit"),Beo=o(" \u2014 "),YR=a("a"),Ieo=o("MobileViTConfig"),Neo=o(" (MobileViT model)"),qeo=l(),Jm=a("li"),Qne=a("strong"),jeo=o("mpnet"),Deo=o(" \u2014 "),KR=a("a"),Geo=o("MPNetConfig"),Oeo=o(" (MPNet model)"),Veo=l(),Ym=a("li"),Wne=a("strong"),Xeo=o("mt5"),zeo=o(" \u2014 "),ZR=a("a"),Qeo=o("MT5Config"),Weo=o(" (MT5 model)"),Heo=l(),Km=a("li"),Hne=a("strong"),Ueo=o("mvp"),Jeo=o(" \u2014 "),eP=a("a"),Yeo=o("MvpConfig"),Keo=o(" (MVP model)"),Zeo=l(),Zm=a("li"),Une=a("strong"),eoo=o("nezha"),ooo=o(" \u2014 "),oP=a("a"),roo=o("NezhaConfig"),too=o(" (Nezha model)"),aoo=l(),eg=a("li"),Jne=a("strong"),noo=o("nystromformer"),soo=o(" \u2014 "),rP=a("a"),loo=o("NystromformerConfig"),ioo=o(" (Nystr\xF6mformer model)"),doo=l(),og=a("li"),Yne=a("strong"),coo=o("openai-gpt"),foo=o(" \u2014 "),tP=a("a"),moo=o("OpenAIGPTConfig"),goo=o(" (OpenAI GPT model)"),hoo=l(),rg=a("li"),Kne=a("strong"),poo=o("opt"),_oo=o(" \u2014 "),aP=a("a"),uoo=o("OPTConfig"),boo=o(" (OPT model)"),voo=l(),tg=a("li"),Zne=a("strong"),Foo=o("pegasus"),Too=o(" \u2014 "),nP=a("a"),Moo=o("PegasusConfig"),Eoo=o(" (Pegasus model)"),Coo=l(),ag=a("li"),ese=a("strong"),woo=o("perceiver"),Aoo=o(" \u2014 "),sP=a("a"),Loo=o("PerceiverConfig"),yoo=o(" (Perceiver model)"),xoo=l(),ng=a("li"),ose=a("strong"),$oo=o("plbart"),koo=o(" \u2014 "),lP=a("a"),Soo=o("PLBartConfig"),Roo=o(" (PLBart model)"),Poo=l(),sg=a("li"),rse=a("strong"),Boo=o("poolformer"),Ioo=o(" \u2014 "),iP=a("a"),Noo=o("PoolFormerConfig"),qoo=o(" (PoolFormer model)"),joo=l(),lg=a("li"),tse=a("strong"),Doo=o("prophetnet"),Goo=o(" \u2014 "),dP=a("a"),Ooo=o("ProphetNetConfig"),Voo=o(" (ProphetNet model)"),Xoo=l(),ig=a("li"),ase=a("strong"),zoo=o("qdqbert"),Qoo=o(" \u2014 "),cP=a("a"),Woo=o("QDQBertConfig"),Hoo=o(" (QDQBert model)"),Uoo=l(),dg=a("li"),nse=a("strong"),Joo=o("rag"),Yoo=o(" \u2014 "),fP=a("a"),Koo=o("RagConfig"),Zoo=o(" (RAG model)"),ero=l(),cg=a("li"),sse=a("strong"),oro=o("realm"),rro=o(" \u2014 "),mP=a("a"),tro=o("RealmConfig"),aro=o(" (REALM model)"),nro=l(),fg=a("li"),lse=a("strong"),sro=o("reformer"),lro=o(" \u2014 "),gP=a("a"),iro=o("ReformerConfig"),dro=o(" (Reformer model)"),cro=l(),mg=a("li"),ise=a("strong"),fro=o("regnet"),mro=o(" \u2014 "),hP=a("a"),gro=o("RegNetConfig"),hro=o(" (RegNet model)"),pro=l(),gg=a("li"),dse=a("strong"),_ro=o("rembert"),uro=o(" \u2014 "),pP=a("a"),bro=o("RemBertConfig"),vro=o(" (RemBERT model)"),Fro=l(),hg=a("li"),cse=a("strong"),Tro=o("resnet"),Mro=o(" \u2014 "),_P=a("a"),Ero=o("ResNetConfig"),Cro=o(" (ResNet model)"),wro=l(),pg=a("li"),fse=a("strong"),Aro=o("retribert"),Lro=o(" \u2014 "),uP=a("a"),yro=o("RetriBertConfig"),xro=o(" (RetriBERT model)"),$ro=l(),_g=a("li"),mse=a("strong"),kro=o("roberta"),Sro=o(" \u2014 "),bP=a("a"),Rro=o("RobertaConfig"),Pro=o(" (RoBERTa model)"),Bro=l(),ug=a("li"),gse=a("strong"),Iro=o("roformer"),Nro=o(" \u2014 "),vP=a("a"),qro=o("RoFormerConfig"),jro=o(" (RoFormer model)"),Dro=l(),bg=a("li"),hse=a("strong"),Gro=o("segformer"),Oro=o(" \u2014 "),FP=a("a"),Vro=o("SegformerConfig"),Xro=o(" (SegFormer model)"),zro=l(),vg=a("li"),pse=a("strong"),Qro=o("sew"),Wro=o(" \u2014 "),TP=a("a"),Hro=o("SEWConfig"),Uro=o(" (SEW model)"),Jro=l(),Fg=a("li"),_se=a("strong"),Yro=o("sew-d"),Kro=o(" \u2014 "),MP=a("a"),Zro=o("SEWDConfig"),eto=o(" (SEW-D model)"),oto=l(),Tg=a("li"),use=a("strong"),rto=o("speech-encoder-decoder"),tto=o(" \u2014 "),EP=a("a"),ato=o("SpeechEncoderDecoderConfig"),nto=o(" (Speech Encoder decoder model)"),sto=l(),Mg=a("li"),bse=a("strong"),lto=o("speech_to_text"),ito=o(" \u2014 "),CP=a("a"),dto=o("Speech2TextConfig"),cto=o(" (Speech2Text model)"),fto=l(),Eg=a("li"),vse=a("strong"),mto=o("speech_to_text_2"),gto=o(" \u2014 "),wP=a("a"),hto=o("Speech2Text2Config"),pto=o(" (Speech2Text2 model)"),_to=l(),Cg=a("li"),Fse=a("strong"),uto=o("splinter"),bto=o(" \u2014 "),AP=a("a"),vto=o("SplinterConfig"),Fto=o(" (Splinter model)"),Tto=l(),wg=a("li"),Tse=a("strong"),Mto=o("squeezebert"),Eto=o(" \u2014 "),LP=a("a"),Cto=o("SqueezeBertConfig"),wto=o(" (SqueezeBERT model)"),Ato=l(),Ag=a("li"),Mse=a("strong"),Lto=o("swin"),yto=o(" \u2014 "),yP=a("a"),xto=o("SwinConfig"),$to=o(" (Swin Transformer model)"),kto=l(),Lg=a("li"),Ese=a("strong"),Sto=o("t5"),Rto=o(" \u2014 "),xP=a("a"),Pto=o("T5Config"),Bto=o(" (T5 model)"),Ito=l(),yg=a("li"),Cse=a("strong"),Nto=o("tapas"),qto=o(" \u2014 "),$P=a("a"),jto=o("TapasConfig"),Dto=o(" (TAPAS model)"),Gto=l(),xg=a("li"),wse=a("strong"),Oto=o("trajectory_transformer"),Vto=o(" \u2014 "),kP=a("a"),Xto=o("TrajectoryTransformerConfig"),zto=o(" (Trajectory Transformer model)"),Qto=l(),$g=a("li"),Ase=a("strong"),Wto=o("transfo-xl"),Hto=o(" \u2014 "),SP=a("a"),Uto=o("TransfoXLConfig"),Jto=o(" (Transformer-XL model)"),Yto=l(),kg=a("li"),Lse=a("strong"),Kto=o("trocr"),Zto=o(" \u2014 "),RP=a("a"),eao=o("TrOCRConfig"),oao=o(" (TrOCR model)"),rao=l(),Sg=a("li"),yse=a("strong"),tao=o("unispeech"),aao=o(" \u2014 "),PP=a("a"),nao=o("UniSpeechConfig"),sao=o(" (UniSpeech model)"),lao=l(),Rg=a("li"),xse=a("strong"),iao=o("unispeech-sat"),dao=o(" \u2014 "),BP=a("a"),cao=o("UniSpeechSatConfig"),fao=o(" (UniSpeechSat model)"),mao=l(),Pg=a("li"),$se=a("strong"),gao=o("van"),hao=o(" \u2014 "),IP=a("a"),pao=o("VanConfig"),_ao=o(" (VAN model)"),uao=l(),Bg=a("li"),kse=a("strong"),bao=o("vilt"),vao=o(" \u2014 "),NP=a("a"),Fao=o("ViltConfig"),Tao=o(" (ViLT model)"),Mao=l(),Ig=a("li"),Sse=a("strong"),Eao=o("vision-encoder-decoder"),Cao=o(" \u2014 "),qP=a("a"),wao=o("VisionEncoderDecoderConfig"),Aao=o(" (Vision Encoder decoder model)"),Lao=l(),Ng=a("li"),Rse=a("strong"),yao=o("vision-text-dual-encoder"),xao=o(" \u2014 "),jP=a("a"),$ao=o("VisionTextDualEncoderConfig"),kao=o(" (VisionTextDualEncoder model)"),Sao=l(),qg=a("li"),Pse=a("strong"),Rao=o("visual_bert"),Pao=o(" \u2014 "),DP=a("a"),Bao=o("VisualBertConfig"),Iao=o(" (VisualBERT model)"),Nao=l(),jg=a("li"),Bse=a("strong"),qao=o("vit"),jao=o(" \u2014 "),GP=a("a"),Dao=o("ViTConfig"),Gao=o(" (ViT model)"),Oao=l(),Dg=a("li"),Ise=a("strong"),Vao=o("vit_mae"),Xao=o(" \u2014 "),OP=a("a"),zao=o("ViTMAEConfig"),Qao=o(" (ViTMAE model)"),Wao=l(),Gg=a("li"),Nse=a("strong"),Hao=o("wav2vec2"),Uao=o(" \u2014 "),VP=a("a"),Jao=o("Wav2Vec2Config"),Yao=o(" (Wav2Vec2 model)"),Kao=l(),Og=a("li"),qse=a("strong"),Zao=o("wav2vec2-conformer"),eno=o(" \u2014 "),XP=a("a"),ono=o("Wav2Vec2ConformerConfig"),rno=o(" (Wav2Vec2-Conformer model)"),tno=l(),Vg=a("li"),jse=a("strong"),ano=o("wavlm"),nno=o(" \u2014 "),zP=a("a"),sno=o("WavLMConfig"),lno=o(" (WavLM model)"),ino=l(),Xg=a("li"),Dse=a("strong"),dno=o("xglm"),cno=o(" \u2014 "),QP=a("a"),fno=o("XGLMConfig"),mno=o(" (XGLM model)"),gno=l(),zg=a("li"),Gse=a("strong"),hno=o("xlm"),pno=o(" \u2014 "),WP=a("a"),_no=o("XLMConfig"),uno=o(" (XLM model)"),bno=l(),Qg=a("li"),Ose=a("strong"),vno=o("xlm-prophetnet"),Fno=o(" \u2014 "),HP=a("a"),Tno=o("XLMProphetNetConfig"),Mno=o(" (XLM-ProphetNet model)"),Eno=l(),Wg=a("li"),Vse=a("strong"),Cno=o("xlm-roberta"),wno=o(" \u2014 "),UP=a("a"),Ano=o("XLMRobertaConfig"),Lno=o(" (XLM-RoBERTa model)"),yno=l(),Hg=a("li"),Xse=a("strong"),xno=o("xlm-roberta-xl"),$no=o(" \u2014 "),JP=a("a"),kno=o("XLMRobertaXLConfig"),Sno=o(" (XLM-RoBERTa-XL model)"),Rno=l(),Ug=a("li"),zse=a("strong"),Pno=o("xlnet"),Bno=o(" \u2014 "),YP=a("a"),Ino=o("XLNetConfig"),Nno=o(" (XLNet model)"),qno=l(),Jg=a("li"),Qse=a("strong"),jno=o("yolos"),Dno=o(" \u2014 "),KP=a("a"),Gno=o("YolosConfig"),Ono=o(" (YOLOS model)"),Vno=l(),Yg=a("li"),Wse=a("strong"),Xno=o("yoso"),zno=o(" \u2014 "),ZP=a("a"),Qno=o("YosoConfig"),Wno=o(" (YOSO model)"),Hno=l(),F(Kg.$$.fragment),Uno=l(),Zg=a("div"),F(hL.$$.fragment),Jno=l(),Hse=a("p"),Yno=o("Register a new configuration for this class."),mXe=l(),Ii=a("h2"),eh=a("a"),Use=a("span"),F(pL.$$.fragment),Kno=l(),Jse=a("span"),Zno=o("AutoTokenizer"),gXe=l(),Ao=a("div"),F(_L.$$.fragment),eso=l(),uL=a("p"),oso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),rso=o("AutoTokenizer.from_pretrained()"),tso=o(" class method."),aso=l(),bL=a("p"),nso=o("This class cannot be instantiated directly using "),Yse=a("code"),sso=o("__init__()"),lso=o(" (throws an error)."),iso=l(),yr=a("div"),F(vL.$$.fragment),dso=l(),Kse=a("p"),cso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fso=l(),Pa=a("p"),mso=o("The tokenizer class to instantiate is selected based on the "),Zse=a("code"),gso=o("model_type"),hso=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),pso=o("pretrained_model_name_or_path"),_so=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),uso=o("pretrained_model_name_or_path"),bso=o(":"),vso=l(),k=a("ul"),jn=a("li"),rle=a("strong"),Fso=o("albert"),Tso=o(" \u2014 "),oB=a("a"),Mso=o("AlbertTokenizer"),Eso=o(" or "),rB=a("a"),Cso=o("AlbertTokenizerFast"),wso=o(" (ALBERT model)"),Aso=l(),Dn=a("li"),tle=a("strong"),Lso=o("bart"),yso=o(" \u2014 "),tB=a("a"),xso=o("BartTokenizer"),$so=o(" or "),aB=a("a"),kso=o("BartTokenizerFast"),Sso=o(" (BART model)"),Rso=l(),Gn=a("li"),ale=a("strong"),Pso=o("barthez"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("BarthezTokenizer"),Nso=o(" or "),sB=a("a"),qso=o("BarthezTokenizerFast"),jso=o(" (BARThez model)"),Dso=l(),oh=a("li"),nle=a("strong"),Gso=o("bartpho"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("BartphoTokenizer"),Xso=o(" (BARTpho model)"),zso=l(),On=a("li"),sle=a("strong"),Qso=o("bert"),Wso=o(" \u2014 "),iB=a("a"),Hso=o("BertTokenizer"),Uso=o(" or "),dB=a("a"),Jso=o("BertTokenizerFast"),Yso=o(" (BERT model)"),Kso=l(),rh=a("li"),lle=a("strong"),Zso=o("bert-generation"),elo=o(" \u2014 "),cB=a("a"),olo=o("BertGenerationTokenizer"),rlo=o(" (Bert Generation model)"),tlo=l(),th=a("li"),ile=a("strong"),alo=o("bert-japanese"),nlo=o(" \u2014 "),fB=a("a"),slo=o("BertJapaneseTokenizer"),llo=o(" (BertJapanese model)"),ilo=l(),ah=a("li"),dle=a("strong"),dlo=o("bertweet"),clo=o(" \u2014 "),mB=a("a"),flo=o("BertweetTokenizer"),mlo=o(" (BERTweet model)"),glo=l(),Vn=a("li"),cle=a("strong"),hlo=o("big_bird"),plo=o(" \u2014 "),gB=a("a"),_lo=o("BigBirdTokenizer"),ulo=o(" or "),hB=a("a"),blo=o("BigBirdTokenizerFast"),vlo=o(" (BigBird model)"),Flo=l(),Xn=a("li"),fle=a("strong"),Tlo=o("bigbird_pegasus"),Mlo=o(" \u2014 "),pB=a("a"),Elo=o("PegasusTokenizer"),Clo=o(" or "),_B=a("a"),wlo=o("PegasusTokenizerFast"),Alo=o(" (BigBird-Pegasus model)"),Llo=l(),zn=a("li"),mle=a("strong"),ylo=o("blenderbot"),xlo=o(" \u2014 "),uB=a("a"),$lo=o("BlenderbotTokenizer"),klo=o(" or "),bB=a("a"),Slo=o("BlenderbotTokenizerFast"),Rlo=o(" (Blenderbot model)"),Plo=l(),nh=a("li"),gle=a("strong"),Blo=o("blenderbot-small"),Ilo=o(" \u2014 "),vB=a("a"),Nlo=o("BlenderbotSmallTokenizer"),qlo=o(" (BlenderbotSmall model)"),jlo=l(),sh=a("li"),hle=a("strong"),Dlo=o("bloom"),Glo=o(" \u2014 "),FB=a("a"),Olo=o("BloomTokenizerFast"),Vlo=o(" (BLOOM model)"),Xlo=l(),lh=a("li"),ple=a("strong"),zlo=o("byt5"),Qlo=o(" \u2014 "),TB=a("a"),Wlo=o("ByT5Tokenizer"),Hlo=o(" (ByT5 model)"),Ulo=l(),Qn=a("li"),_le=a("strong"),Jlo=o("camembert"),Ylo=o(" \u2014 "),MB=a("a"),Klo=o("CamembertTokenizer"),Zlo=o(" or "),EB=a("a"),eio=o("CamembertTokenizerFast"),oio=o(" (CamemBERT model)"),rio=l(),ih=a("li"),ule=a("strong"),tio=o("canine"),aio=o(" \u2014 "),CB=a("a"),nio=o("CanineTokenizer"),sio=o(" (CANINE model)"),lio=l(),Wn=a("li"),ble=a("strong"),iio=o("clip"),dio=o(" \u2014 "),wB=a("a"),cio=o("CLIPTokenizer"),fio=o(" or "),AB=a("a"),mio=o("CLIPTokenizerFast"),gio=o(" (CLIP model)"),hio=l(),Hn=a("li"),vle=a("strong"),pio=o("codegen"),_io=o(" \u2014 "),LB=a("a"),uio=o("CodeGenTokenizer"),bio=o(" or "),yB=a("a"),vio=o("CodeGenTokenizerFast"),Fio=o(" (CodeGen model)"),Tio=l(),Un=a("li"),Fle=a("strong"),Mio=o("convbert"),Eio=o(" \u2014 "),xB=a("a"),Cio=o("ConvBertTokenizer"),wio=o(" or "),$B=a("a"),Aio=o("ConvBertTokenizerFast"),Lio=o(" (ConvBERT model)"),yio=l(),Jn=a("li"),Tle=a("strong"),xio=o("cpm"),$io=o(" \u2014 "),kB=a("a"),kio=o("CpmTokenizer"),Sio=o(" or "),SB=a("a"),Rio=o("CpmTokenizerFast"),Pio=o(" (CPM model)"),Bio=l(),dh=a("li"),Mle=a("strong"),Iio=o("ctrl"),Nio=o(" \u2014 "),RB=a("a"),qio=o("CTRLTokenizer"),jio=o(" (CTRL model)"),Dio=l(),Yn=a("li"),Ele=a("strong"),Gio=o("data2vec-text"),Oio=o(" \u2014 "),PB=a("a"),Vio=o("RobertaTokenizer"),Xio=o(" or "),BB=a("a"),zio=o("RobertaTokenizerFast"),Qio=o(" (Data2VecText model)"),Wio=l(),Kn=a("li"),Cle=a("strong"),Hio=o("deberta"),Uio=o(" \u2014 "),IB=a("a"),Jio=o("DebertaTokenizer"),Yio=o(" or "),NB=a("a"),Kio=o("DebertaTokenizerFast"),Zio=o(" (DeBERTa model)"),edo=l(),Zn=a("li"),wle=a("strong"),odo=o("deberta-v2"),rdo=o(" \u2014 "),qB=a("a"),tdo=o("DebertaV2Tokenizer"),ado=o(" or "),jB=a("a"),ndo=o("DebertaV2TokenizerFast"),sdo=o(" (DeBERTa-v2 model)"),ldo=l(),es=a("li"),Ale=a("strong"),ido=o("distilbert"),ddo=o(" \u2014 "),DB=a("a"),cdo=o("DistilBertTokenizer"),fdo=o(" or "),GB=a("a"),mdo=o("DistilBertTokenizerFast"),gdo=o(" (DistilBERT model)"),hdo=l(),os=a("li"),Lle=a("strong"),pdo=o("dpr"),_do=o(" \u2014 "),OB=a("a"),udo=o("DPRQuestionEncoderTokenizer"),bdo=o(" or "),VB=a("a"),vdo=o("DPRQuestionEncoderTokenizerFast"),Fdo=o(" (DPR model)"),Tdo=l(),rs=a("li"),yle=a("strong"),Mdo=o("electra"),Edo=o(" \u2014 "),XB=a("a"),Cdo=o("ElectraTokenizer"),wdo=o(" or "),zB=a("a"),Ado=o("ElectraTokenizerFast"),Ldo=o(" (ELECTRA model)"),ydo=l(),ch=a("li"),xle=a("strong"),xdo=o("flaubert"),$do=o(" \u2014 "),QB=a("a"),kdo=o("FlaubertTokenizer"),Sdo=o(" (FlauBERT model)"),Rdo=l(),ts=a("li"),$le=a("strong"),Pdo=o("fnet"),Bdo=o(" \u2014 "),WB=a("a"),Ido=o("FNetTokenizer"),Ndo=o(" or "),HB=a("a"),qdo=o("FNetTokenizerFast"),jdo=o(" (FNet model)"),Ddo=l(),fh=a("li"),kle=a("strong"),Gdo=o("fsmt"),Odo=o(" \u2014 "),UB=a("a"),Vdo=o("FSMTTokenizer"),Xdo=o(" (FairSeq Machine-Translation model)"),zdo=l(),as=a("li"),Sle=a("strong"),Qdo=o("funnel"),Wdo=o(" \u2014 "),JB=a("a"),Hdo=o("FunnelTokenizer"),Udo=o(" or "),YB=a("a"),Jdo=o("FunnelTokenizerFast"),Ydo=o(" (Funnel Transformer model)"),Kdo=l(),ns=a("li"),Rle=a("strong"),Zdo=o("gpt2"),eco=o(" \u2014 "),KB=a("a"),oco=o("GPT2Tokenizer"),rco=o(" or "),ZB=a("a"),tco=o("GPT2TokenizerFast"),aco=o(" (OpenAI GPT-2 model)"),nco=l(),ss=a("li"),Ple=a("strong"),sco=o("gpt_neo"),lco=o(" \u2014 "),eI=a("a"),ico=o("GPT2Tokenizer"),dco=o(" or "),oI=a("a"),cco=o("GPT2TokenizerFast"),fco=o(" (GPT Neo model)"),mco=l(),mh=a("li"),Ble=a("strong"),gco=o("gpt_neox"),hco=o(" \u2014 "),rI=a("a"),pco=o("GPTNeoXTokenizerFast"),_co=o(" (GPT NeoX model)"),uco=l(),ls=a("li"),Ile=a("strong"),bco=o("gptj"),vco=o(" \u2014 "),tI=a("a"),Fco=o("GPT2Tokenizer"),Tco=o(" or "),aI=a("a"),Mco=o("GPT2TokenizerFast"),Eco=o(" (GPT-J model)"),Cco=l(),is=a("li"),Nle=a("strong"),wco=o("groupvit"),Aco=o(" \u2014 "),nI=a("a"),Lco=o("CLIPTokenizer"),yco=o(" or "),sI=a("a"),xco=o("CLIPTokenizerFast"),$co=o(" (GroupViT model)"),kco=l(),ds=a("li"),qle=a("strong"),Sco=o("herbert"),Rco=o(" \u2014 "),lI=a("a"),Pco=o("HerbertTokenizer"),Bco=o(" or "),iI=a("a"),Ico=o("HerbertTokenizerFast"),Nco=o(" (HerBERT model)"),qco=l(),gh=a("li"),jle=a("strong"),jco=o("hubert"),Dco=o(" \u2014 "),dI=a("a"),Gco=o("Wav2Vec2CTCTokenizer"),Oco=o(" (Hubert model)"),Vco=l(),cs=a("li"),Dle=a("strong"),Xco=o("ibert"),zco=o(" \u2014 "),cI=a("a"),Qco=o("RobertaTokenizer"),Wco=o(" or "),fI=a("a"),Hco=o("RobertaTokenizerFast"),Uco=o(" (I-BERT model)"),Jco=l(),fs=a("li"),Gle=a("strong"),Yco=o("layoutlm"),Kco=o(" \u2014 "),mI=a("a"),Zco=o("LayoutLMTokenizer"),efo=o(" or "),gI=a("a"),ofo=o("LayoutLMTokenizerFast"),rfo=o(" (LayoutLM model)"),tfo=l(),ms=a("li"),Ole=a("strong"),afo=o("layoutlmv2"),nfo=o(" \u2014 "),hI=a("a"),sfo=o("LayoutLMv2Tokenizer"),lfo=o(" or "),pI=a("a"),ifo=o("LayoutLMv2TokenizerFast"),dfo=o(" (LayoutLMv2 model)"),cfo=l(),gs=a("li"),Vle=a("strong"),ffo=o("layoutlmv3"),mfo=o(" \u2014 "),_I=a("a"),gfo=o("LayoutLMv3Tokenizer"),hfo=o(" or "),uI=a("a"),pfo=o("LayoutLMv3TokenizerFast"),_fo=o(" (LayoutLMv3 model)"),ufo=l(),hs=a("li"),Xle=a("strong"),bfo=o("layoutxlm"),vfo=o(" \u2014 "),bI=a("a"),Ffo=o("LayoutXLMTokenizer"),Tfo=o(" or "),vI=a("a"),Mfo=o("LayoutXLMTokenizerFast"),Efo=o(" (LayoutXLM model)"),Cfo=l(),ps=a("li"),zle=a("strong"),wfo=o("led"),Afo=o(" \u2014 "),FI=a("a"),Lfo=o("LEDTokenizer"),yfo=o(" or "),TI=a("a"),xfo=o("LEDTokenizerFast"),$fo=o(" (LED model)"),kfo=l(),_s=a("li"),Qle=a("strong"),Sfo=o("longformer"),Rfo=o(" \u2014 "),MI=a("a"),Pfo=o("LongformerTokenizer"),Bfo=o(" or "),EI=a("a"),Ifo=o("LongformerTokenizerFast"),Nfo=o(" (Longformer model)"),qfo=l(),us=a("li"),Wle=a("strong"),jfo=o("longt5"),Dfo=o(" \u2014 "),CI=a("a"),Gfo=o("T5Tokenizer"),Ofo=o(" or "),wI=a("a"),Vfo=o("T5TokenizerFast"),Xfo=o(" (LongT5 model)"),zfo=l(),hh=a("li"),Hle=a("strong"),Qfo=o("luke"),Wfo=o(" \u2014 "),AI=a("a"),Hfo=o("LukeTokenizer"),Ufo=o(" (LUKE model)"),Jfo=l(),bs=a("li"),Ule=a("strong"),Yfo=o("lxmert"),Kfo=o(" \u2014 "),LI=a("a"),Zfo=o("LxmertTokenizer"),emo=o(" or "),yI=a("a"),omo=o("LxmertTokenizerFast"),rmo=o(" (LXMERT model)"),tmo=l(),ph=a("li"),Jle=a("strong"),amo=o("m2m_100"),nmo=o(" \u2014 "),xI=a("a"),smo=o("M2M100Tokenizer"),lmo=o(" (M2M100 model)"),imo=l(),_h=a("li"),Yle=a("strong"),dmo=o("marian"),cmo=o(" \u2014 "),$I=a("a"),fmo=o("MarianTokenizer"),mmo=o(" (Marian model)"),gmo=l(),vs=a("li"),Kle=a("strong"),hmo=o("mbart"),pmo=o(" \u2014 "),kI=a("a"),_mo=o("MBartTokenizer"),umo=o(" or "),SI=a("a"),bmo=o("MBartTokenizerFast"),vmo=o(" (mBART model)"),Fmo=l(),Fs=a("li"),Zle=a("strong"),Tmo=o("mbart50"),Mmo=o(" \u2014 "),RI=a("a"),Emo=o("MBart50Tokenizer"),Cmo=o(" or "),PI=a("a"),wmo=o("MBart50TokenizerFast"),Amo=o(" (mBART-50 model)"),Lmo=l(),Ts=a("li"),eie=a("strong"),ymo=o("megatron-bert"),xmo=o(" \u2014 "),BI=a("a"),$mo=o("BertTokenizer"),kmo=o(" or "),II=a("a"),Smo=o("BertTokenizerFast"),Rmo=o(" (Megatron-BERT model)"),Pmo=l(),uh=a("li"),oie=a("strong"),Bmo=o("mluke"),Imo=o(" \u2014 "),NI=a("a"),Nmo=o("MLukeTokenizer"),qmo=o(" (mLUKE model)"),jmo=l(),Ms=a("li"),rie=a("strong"),Dmo=o("mobilebert"),Gmo=o(" \u2014 "),qI=a("a"),Omo=o("MobileBertTokenizer"),Vmo=o(" or "),jI=a("a"),Xmo=o("MobileBertTokenizerFast"),zmo=o(" (MobileBERT model)"),Qmo=l(),Es=a("li"),tie=a("strong"),Wmo=o("mpnet"),Hmo=o(" \u2014 "),DI=a("a"),Umo=o("MPNetTokenizer"),Jmo=o(" or "),GI=a("a"),Ymo=o("MPNetTokenizerFast"),Kmo=o(" (MPNet model)"),Zmo=l(),Cs=a("li"),aie=a("strong"),ego=o("mt5"),ogo=o(" \u2014 "),OI=a("a"),rgo=o("MT5Tokenizer"),tgo=o(" or "),VI=a("a"),ago=o("MT5TokenizerFast"),ngo=o(" (MT5 model)"),sgo=l(),ws=a("li"),nie=a("strong"),lgo=o("mvp"),igo=o(" \u2014 "),XI=a("a"),dgo=o("MvpTokenizer"),cgo=o(" or "),zI=a("a"),fgo=o("MvpTokenizerFast"),mgo=o(" (MVP model)"),ggo=l(),As=a("li"),sie=a("strong"),hgo=o("nezha"),pgo=o(" \u2014 "),QI=a("a"),_go=o("BertTokenizer"),ugo=o(" or "),WI=a("a"),bgo=o("BertTokenizerFast"),vgo=o(" (Nezha model)"),Fgo=l(),Ls=a("li"),lie=a("strong"),Tgo=o("nystromformer"),Mgo=o(" \u2014 "),HI=a("a"),Ego=o("AlbertTokenizer"),Cgo=o(" or "),UI=a("a"),wgo=o("AlbertTokenizerFast"),Ago=o(" (Nystr\xF6mformer model)"),Lgo=l(),ys=a("li"),iie=a("strong"),ygo=o("openai-gpt"),xgo=o(" \u2014 "),JI=a("a"),$go=o("OpenAIGPTTokenizer"),kgo=o(" or "),YI=a("a"),Sgo=o("OpenAIGPTTokenizerFast"),Rgo=o(" (OpenAI GPT model)"),Pgo=l(),bh=a("li"),die=a("strong"),Bgo=o("opt"),Igo=o(" \u2014 "),KI=a("a"),Ngo=o("GPT2Tokenizer"),qgo=o(" (OPT model)"),jgo=l(),xs=a("li"),cie=a("strong"),Dgo=o("pegasus"),Ggo=o(" \u2014 "),ZI=a("a"),Ogo=o("PegasusTokenizer"),Vgo=o(" or "),eN=a("a"),Xgo=o("PegasusTokenizerFast"),zgo=o(" (Pegasus model)"),Qgo=l(),vh=a("li"),fie=a("strong"),Wgo=o("perceiver"),Hgo=o(" \u2014 "),oN=a("a"),Ugo=o("PerceiverTokenizer"),Jgo=o(" (Perceiver model)"),Ygo=l(),Fh=a("li"),mie=a("strong"),Kgo=o("phobert"),Zgo=o(" \u2014 "),rN=a("a"),eho=o("PhobertTokenizer"),oho=o(" (PhoBERT model)"),rho=l(),Th=a("li"),gie=a("strong"),tho=o("plbart"),aho=o(" \u2014 "),tN=a("a"),nho=o("PLBartTokenizer"),sho=o(" (PLBart model)"),lho=l(),Mh=a("li"),hie=a("strong"),iho=o("prophetnet"),dho=o(" \u2014 "),aN=a("a"),cho=o("ProphetNetTokenizer"),fho=o(" (ProphetNet model)"),mho=l(),$s=a("li"),pie=a("strong"),gho=o("qdqbert"),hho=o(" \u2014 "),nN=a("a"),pho=o("BertTokenizer"),_ho=o(" or "),sN=a("a"),uho=o("BertTokenizerFast"),bho=o(" (QDQBert model)"),vho=l(),Eh=a("li"),_ie=a("strong"),Fho=o("rag"),Tho=o(" \u2014 "),lN=a("a"),Mho=o("RagTokenizer"),Eho=o(" (RAG model)"),Cho=l(),ks=a("li"),uie=a("strong"),who=o("realm"),Aho=o(" \u2014 "),iN=a("a"),Lho=o("RealmTokenizer"),yho=o(" or "),dN=a("a"),xho=o("RealmTokenizerFast"),$ho=o(" (REALM model)"),kho=l(),Ss=a("li"),bie=a("strong"),Sho=o("reformer"),Rho=o(" \u2014 "),cN=a("a"),Pho=o("ReformerTokenizer"),Bho=o(" or "),fN=a("a"),Iho=o("ReformerTokenizerFast"),Nho=o(" (Reformer model)"),qho=l(),Rs=a("li"),vie=a("strong"),jho=o("rembert"),Dho=o(" \u2014 "),mN=a("a"),Gho=o("RemBertTokenizer"),Oho=o(" or "),gN=a("a"),Vho=o("RemBertTokenizerFast"),Xho=o(" (RemBERT model)"),zho=l(),Ps=a("li"),Fie=a("strong"),Qho=o("retribert"),Who=o(" \u2014 "),hN=a("a"),Hho=o("RetriBertTokenizer"),Uho=o(" or "),pN=a("a"),Jho=o("RetriBertTokenizerFast"),Yho=o(" (RetriBERT model)"),Kho=l(),Bs=a("li"),Tie=a("strong"),Zho=o("roberta"),epo=o(" \u2014 "),_N=a("a"),opo=o("RobertaTokenizer"),rpo=o(" or "),uN=a("a"),tpo=o("RobertaTokenizerFast"),apo=o(" (RoBERTa model)"),npo=l(),Is=a("li"),Mie=a("strong"),spo=o("roformer"),lpo=o(" \u2014 "),bN=a("a"),ipo=o("RoFormerTokenizer"),dpo=o(" or "),vN=a("a"),cpo=o("RoFormerTokenizerFast"),fpo=o(" (RoFormer model)"),mpo=l(),Ch=a("li"),Eie=a("strong"),gpo=o("speech_to_text"),hpo=o(" \u2014 "),FN=a("a"),ppo=o("Speech2TextTokenizer"),_po=o(" (Speech2Text model)"),upo=l(),wh=a("li"),Cie=a("strong"),bpo=o("speech_to_text_2"),vpo=o(" \u2014 "),TN=a("a"),Fpo=o("Speech2Text2Tokenizer"),Tpo=o(" (Speech2Text2 model)"),Mpo=l(),Ns=a("li"),wie=a("strong"),Epo=o("splinter"),Cpo=o(" \u2014 "),MN=a("a"),wpo=o("SplinterTokenizer"),Apo=o(" or "),EN=a("a"),Lpo=o("SplinterTokenizerFast"),ypo=o(" (Splinter model)"),xpo=l(),qs=a("li"),Aie=a("strong"),$po=o("squeezebert"),kpo=o(" \u2014 "),CN=a("a"),Spo=o("SqueezeBertTokenizer"),Rpo=o(" or "),wN=a("a"),Ppo=o("SqueezeBertTokenizerFast"),Bpo=o(" (SqueezeBERT model)"),Ipo=l(),js=a("li"),Lie=a("strong"),Npo=o("t5"),qpo=o(" \u2014 "),AN=a("a"),jpo=o("T5Tokenizer"),Dpo=o(" or "),LN=a("a"),Gpo=o("T5TokenizerFast"),Opo=o(" (T5 model)"),Vpo=l(),Ah=a("li"),yie=a("strong"),Xpo=o("tapas"),zpo=o(" \u2014 "),yN=a("a"),Qpo=o("TapasTokenizer"),Wpo=o(" (TAPAS model)"),Hpo=l(),Lh=a("li"),xie=a("strong"),Upo=o("tapex"),Jpo=o(" \u2014 "),xN=a("a"),Ypo=o("TapexTokenizer"),Kpo=o(" (TAPEX model)"),Zpo=l(),yh=a("li"),$ie=a("strong"),e_o=o("transfo-xl"),o_o=o(" \u2014 "),$N=a("a"),r_o=o("TransfoXLTokenizer"),t_o=o(" (Transformer-XL model)"),a_o=l(),Ds=a("li"),kie=a("strong"),n_o=o("vilt"),s_o=o(" \u2014 "),kN=a("a"),l_o=o("BertTokenizer"),i_o=o(" or "),SN=a("a"),d_o=o("BertTokenizerFast"),c_o=o(" (ViLT model)"),f_o=l(),Gs=a("li"),Sie=a("strong"),m_o=o("visual_bert"),g_o=o(" \u2014 "),RN=a("a"),h_o=o("BertTokenizer"),p_o=o(" or "),PN=a("a"),__o=o("BertTokenizerFast"),u_o=o(" (VisualBERT model)"),b_o=l(),xh=a("li"),Rie=a("strong"),v_o=o("wav2vec2"),F_o=o(" \u2014 "),BN=a("a"),T_o=o("Wav2Vec2CTCTokenizer"),M_o=o(" (Wav2Vec2 model)"),E_o=l(),$h=a("li"),Pie=a("strong"),C_o=o("wav2vec2-conformer"),w_o=o(" \u2014 "),IN=a("a"),A_o=o("Wav2Vec2CTCTokenizer"),L_o=o(" (Wav2Vec2-Conformer model)"),y_o=l(),kh=a("li"),Bie=a("strong"),x_o=o("wav2vec2_phoneme"),$_o=o(" \u2014 "),NN=a("a"),k_o=o("Wav2Vec2PhonemeCTCTokenizer"),S_o=o(" (Wav2Vec2Phoneme model)"),R_o=l(),Os=a("li"),Iie=a("strong"),P_o=o("xglm"),B_o=o(" \u2014 "),qN=a("a"),I_o=o("XGLMTokenizer"),N_o=o(" or "),jN=a("a"),q_o=o("XGLMTokenizerFast"),j_o=o(" (XGLM model)"),D_o=l(),Sh=a("li"),Nie=a("strong"),G_o=o("xlm"),O_o=o(" \u2014 "),DN=a("a"),V_o=o("XLMTokenizer"),X_o=o(" (XLM model)"),z_o=l(),Rh=a("li"),qie=a("strong"),Q_o=o("xlm-prophetnet"),W_o=o(" \u2014 "),GN=a("a"),H_o=o("XLMProphetNetTokenizer"),U_o=o(" (XLM-ProphetNet model)"),J_o=l(),Vs=a("li"),jie=a("strong"),Y_o=o("xlm-roberta"),K_o=o(" \u2014 "),ON=a("a"),Z_o=o("XLMRobertaTokenizer"),euo=o(" or "),VN=a("a"),ouo=o("XLMRobertaTokenizerFast"),ruo=o(" (XLM-RoBERTa model)"),tuo=l(),Xs=a("li"),Die=a("strong"),auo=o("xlm-roberta-xl"),nuo=o(" \u2014 "),XN=a("a"),suo=o("RobertaTokenizer"),luo=o(" or "),zN=a("a"),iuo=o("RobertaTokenizerFast"),duo=o(" (XLM-RoBERTa-XL model)"),cuo=l(),zs=a("li"),Gie=a("strong"),fuo=o("xlnet"),muo=o(" \u2014 "),QN=a("a"),guo=o("XLNetTokenizer"),huo=o(" or "),WN=a("a"),puo=o("XLNetTokenizerFast"),_uo=o(" (XLNet model)"),uuo=l(),Qs=a("li"),Oie=a("strong"),buo=o("yoso"),vuo=o(" \u2014 "),HN=a("a"),Fuo=o("AlbertTokenizer"),Tuo=o(" or "),UN=a("a"),Muo=o("AlbertTokenizerFast"),Euo=o(" (YOSO model)"),Cuo=l(),F(Ph.$$.fragment),wuo=l(),Bh=a("div"),F(FL.$$.fragment),Auo=l(),Vie=a("p"),Luo=o("Register a new tokenizer in this mapping."),hXe=l(),Ni=a("h2"),Ih=a("a"),Xie=a("span"),F(TL.$$.fragment),yuo=l(),zie=a("span"),xuo=o("AutoFeatureExtractor"),pXe=l(),Lo=a("div"),F(ML.$$.fragment),$uo=l(),EL=a("p"),kuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JN=a("a"),Suo=o("AutoFeatureExtractor.from_pretrained()"),Ruo=o(" class method."),Puo=l(),CL=a("p"),Buo=o("This class cannot be instantiated directly using "),Qie=a("code"),Iuo=o("__init__()"),Nuo=o(" (throws an error)."),quo=l(),He=a("div"),F(wL.$$.fragment),juo=l(),Wie=a("p"),Duo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Guo=l(),Ba=a("p"),Ouo=o("The feature extractor class to instantiate is selected based on the "),Hie=a("code"),Vuo=o("model_type"),Xuo=o(` property of the config object
(either passed as an argument or loaded from `),Uie=a("code"),zuo=o("pretrained_model_name_or_path"),Quo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jie=a("code"),Wuo=o("pretrained_model_name_or_path"),Huo=o(":"),Uuo=l(),J=a("ul"),Nh=a("li"),Yie=a("strong"),Juo=o("beit"),Yuo=o(" \u2014 "),YN=a("a"),Kuo=o("BeitFeatureExtractor"),Zuo=o(" (BEiT model)"),e1o=l(),qh=a("li"),Kie=a("strong"),o1o=o("clip"),r1o=o(" \u2014 "),KN=a("a"),t1o=o("CLIPFeatureExtractor"),a1o=o(" (CLIP model)"),n1o=l(),jh=a("li"),Zie=a("strong"),s1o=o("convnext"),l1o=o(" \u2014 "),ZN=a("a"),i1o=o("ConvNextFeatureExtractor"),d1o=o(" (ConvNeXT model)"),c1o=l(),Dh=a("li"),ede=a("strong"),f1o=o("cvt"),m1o=o(" \u2014 "),eq=a("a"),g1o=o("ConvNextFeatureExtractor"),h1o=o(" (CvT model)"),p1o=l(),Gh=a("li"),ode=a("strong"),_1o=o("data2vec-audio"),u1o=o(" \u2014 "),oq=a("a"),b1o=o("Wav2Vec2FeatureExtractor"),v1o=o(" (Data2VecAudio model)"),F1o=l(),Oh=a("li"),rde=a("strong"),T1o=o("data2vec-vision"),M1o=o(" \u2014 "),rq=a("a"),E1o=o("BeitFeatureExtractor"),C1o=o(" (Data2VecVision model)"),w1o=l(),Vh=a("li"),tde=a("strong"),A1o=o("deformable_detr"),L1o=o(" \u2014 "),tq=a("a"),y1o=o("DetrFeatureExtractor"),x1o=o(" (Deformable DETR model)"),$1o=l(),Xh=a("li"),ade=a("strong"),k1o=o("deit"),S1o=o(" \u2014 "),aq=a("a"),R1o=o("DeiTFeatureExtractor"),P1o=o(" (DeiT model)"),B1o=l(),zh=a("li"),nde=a("strong"),I1o=o("detr"),N1o=o(" \u2014 "),nq=a("a"),q1o=o("DetrFeatureExtractor"),j1o=o(" (DETR model)"),D1o=l(),Qh=a("li"),sde=a("strong"),G1o=o("dpt"),O1o=o(" \u2014 "),sq=a("a"),V1o=o("DPTFeatureExtractor"),X1o=o(" (DPT model)"),z1o=l(),Wh=a("li"),lde=a("strong"),Q1o=o("flava"),W1o=o(" \u2014 "),lq=a("a"),H1o=o("FlavaFeatureExtractor"),U1o=o(" (FLAVA model)"),J1o=l(),Hh=a("li"),ide=a("strong"),Y1o=o("glpn"),K1o=o(" \u2014 "),iq=a("a"),Z1o=o("GLPNFeatureExtractor"),e2o=o(" (GLPN model)"),o2o=l(),Uh=a("li"),dde=a("strong"),r2o=o("groupvit"),t2o=o(" \u2014 "),dq=a("a"),a2o=o("CLIPFeatureExtractor"),n2o=o(" (GroupViT model)"),s2o=l(),Jh=a("li"),cde=a("strong"),l2o=o("hubert"),i2o=o(" \u2014 "),cq=a("a"),d2o=o("Wav2Vec2FeatureExtractor"),c2o=o(" (Hubert model)"),f2o=l(),Yh=a("li"),fde=a("strong"),m2o=o("imagegpt"),g2o=o(" \u2014 "),fq=a("a"),h2o=o("ImageGPTFeatureExtractor"),p2o=o(" (ImageGPT model)"),_2o=l(),Kh=a("li"),mde=a("strong"),u2o=o("layoutlmv2"),b2o=o(" \u2014 "),mq=a("a"),v2o=o("LayoutLMv2FeatureExtractor"),F2o=o(" (LayoutLMv2 model)"),T2o=l(),Zh=a("li"),gde=a("strong"),M2o=o("layoutlmv3"),E2o=o(" \u2014 "),gq=a("a"),C2o=o("LayoutLMv3FeatureExtractor"),w2o=o(" (LayoutLMv3 model)"),A2o=l(),ep=a("li"),hde=a("strong"),L2o=o("levit"),y2o=o(" \u2014 "),hq=a("a"),x2o=o("LevitFeatureExtractor"),$2o=o(" (LeViT model)"),k2o=l(),op=a("li"),pde=a("strong"),S2o=o("maskformer"),R2o=o(" \u2014 "),pq=a("a"),P2o=o("MaskFormerFeatureExtractor"),B2o=o(" (MaskFormer model)"),I2o=l(),rp=a("li"),_de=a("strong"),N2o=o("mctct"),q2o=o(" \u2014 "),_q=a("a"),j2o=o("MCTCTFeatureExtractor"),D2o=o(" (M-CTC-T model)"),G2o=l(),tp=a("li"),ude=a("strong"),O2o=o("mobilevit"),V2o=o(" \u2014 "),uq=a("a"),X2o=o("MobileViTFeatureExtractor"),z2o=o(" (MobileViT model)"),Q2o=l(),ap=a("li"),bde=a("strong"),W2o=o("perceiver"),H2o=o(" \u2014 "),bq=a("a"),U2o=o("PerceiverFeatureExtractor"),J2o=o(" (Perceiver model)"),Y2o=l(),np=a("li"),vde=a("strong"),K2o=o("poolformer"),Z2o=o(" \u2014 "),vq=a("a"),ebo=o("PoolFormerFeatureExtractor"),obo=o(" (PoolFormer model)"),rbo=l(),sp=a("li"),Fde=a("strong"),tbo=o("regnet"),abo=o(" \u2014 "),Fq=a("a"),nbo=o("ConvNextFeatureExtractor"),sbo=o(" (RegNet model)"),lbo=l(),lp=a("li"),Tde=a("strong"),ibo=o("resnet"),dbo=o(" \u2014 "),Tq=a("a"),cbo=o("ConvNextFeatureExtractor"),fbo=o(" (ResNet model)"),mbo=l(),ip=a("li"),Mde=a("strong"),gbo=o("segformer"),hbo=o(" \u2014 "),Mq=a("a"),pbo=o("SegformerFeatureExtractor"),_bo=o(" (SegFormer model)"),ubo=l(),dp=a("li"),Ede=a("strong"),bbo=o("speech_to_text"),vbo=o(" \u2014 "),Eq=a("a"),Fbo=o("Speech2TextFeatureExtractor"),Tbo=o(" (Speech2Text model)"),Mbo=l(),cp=a("li"),Cde=a("strong"),Ebo=o("swin"),Cbo=o(" \u2014 "),Cq=a("a"),wbo=o("ViTFeatureExtractor"),Abo=o(" (Swin Transformer model)"),Lbo=l(),fp=a("li"),wde=a("strong"),ybo=o("van"),xbo=o(" \u2014 "),wq=a("a"),$bo=o("ConvNextFeatureExtractor"),kbo=o(" (VAN model)"),Sbo=l(),mp=a("li"),Ade=a("strong"),Rbo=o("vilt"),Pbo=o(" \u2014 "),Aq=a("a"),Bbo=o("ViltFeatureExtractor"),Ibo=o(" (ViLT model)"),Nbo=l(),gp=a("li"),Lde=a("strong"),qbo=o("vit"),jbo=o(" \u2014 "),Lq=a("a"),Dbo=o("ViTFeatureExtractor"),Gbo=o(" (ViT model)"),Obo=l(),hp=a("li"),yde=a("strong"),Vbo=o("vit_mae"),Xbo=o(" \u2014 "),yq=a("a"),zbo=o("ViTFeatureExtractor"),Qbo=o(" (ViTMAE model)"),Wbo=l(),pp=a("li"),xde=a("strong"),Hbo=o("wav2vec2"),Ubo=o(" \u2014 "),xq=a("a"),Jbo=o("Wav2Vec2FeatureExtractor"),Ybo=o(" (Wav2Vec2 model)"),Kbo=l(),_p=a("li"),$de=a("strong"),Zbo=o("wav2vec2-conformer"),evo=o(" \u2014 "),$q=a("a"),ovo=o("Wav2Vec2FeatureExtractor"),rvo=o(" (Wav2Vec2-Conformer model)"),tvo=l(),up=a("li"),kde=a("strong"),avo=o("yolos"),nvo=o(" \u2014 "),kq=a("a"),svo=o("YolosFeatureExtractor"),lvo=o(" (YOLOS model)"),ivo=l(),F(bp.$$.fragment),dvo=l(),F(vp.$$.fragment),cvo=l(),Fp=a("div"),F(AL.$$.fragment),fvo=l(),Sde=a("p"),mvo=o("Register a new feature extractor for this class."),_Xe=l(),qi=a("h2"),Tp=a("a"),Rde=a("span"),F(LL.$$.fragment),gvo=l(),Pde=a("span"),hvo=o("AutoProcessor"),uXe=l(),yo=a("div"),F(yL.$$.fragment),pvo=l(),xL=a("p"),_vo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Sq=a("a"),uvo=o("AutoProcessor.from_pretrained()"),bvo=o(" class method."),vvo=l(),$L=a("p"),Fvo=o("This class cannot be instantiated directly using "),Bde=a("code"),Tvo=o("__init__()"),Mvo=o(" (throws an error)."),Evo=l(),Ue=a("div"),F(kL.$$.fragment),Cvo=l(),Ide=a("p"),wvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Avo=l(),ji=a("p"),Lvo=o("The processor class to instantiate is selected based on the "),Nde=a("code"),yvo=o("model_type"),xvo=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),$vo=o("pretrained_model_name_or_path"),kvo=o(" if possible):"),Svo=l(),he=a("ul"),Mp=a("li"),jde=a("strong"),Rvo=o("clip"),Pvo=o(" \u2014 "),Rq=a("a"),Bvo=o("CLIPProcessor"),Ivo=o(" (CLIP model)"),Nvo=l(),Ep=a("li"),Dde=a("strong"),qvo=o("flava"),jvo=o(" \u2014 "),Gde=a("code"),Dvo=o("FLAVAProcessor"),Gvo=o(" (FLAVA model)"),Ovo=l(),Cp=a("li"),Ode=a("strong"),Vvo=o("groupvit"),Xvo=o(" \u2014 "),Pq=a("a"),zvo=o("CLIPProcessor"),Qvo=o(" (GroupViT model)"),Wvo=l(),wp=a("li"),Vde=a("strong"),Hvo=o("layoutlmv2"),Uvo=o(" \u2014 "),Bq=a("a"),Jvo=o("LayoutLMv2Processor"),Yvo=o(" (LayoutLMv2 model)"),Kvo=l(),Ap=a("li"),Xde=a("strong"),Zvo=o("layoutlmv3"),eFo=o(" \u2014 "),Iq=a("a"),oFo=o("LayoutLMv3Processor"),rFo=o(" (LayoutLMv3 model)"),tFo=l(),Lp=a("li"),zde=a("strong"),aFo=o("layoutxlm"),nFo=o(" \u2014 "),Nq=a("a"),sFo=o("LayoutXLMProcessor"),lFo=o(" (LayoutXLM model)"),iFo=l(),yp=a("li"),Qde=a("strong"),dFo=o("sew"),cFo=o(" \u2014 "),qq=a("a"),fFo=o("Wav2Vec2Processor"),mFo=o(" (SEW model)"),gFo=l(),xp=a("li"),Wde=a("strong"),hFo=o("sew-d"),pFo=o(" \u2014 "),jq=a("a"),_Fo=o("Wav2Vec2Processor"),uFo=o(" (SEW-D model)"),bFo=l(),$p=a("li"),Hde=a("strong"),vFo=o("speech_to_text"),FFo=o(" \u2014 "),Dq=a("a"),TFo=o("Speech2TextProcessor"),MFo=o(" (Speech2Text model)"),EFo=l(),kp=a("li"),Ude=a("strong"),CFo=o("speech_to_text_2"),wFo=o(" \u2014 "),Gq=a("a"),AFo=o("Speech2Text2Processor"),LFo=o(" (Speech2Text2 model)"),yFo=l(),Sp=a("li"),Jde=a("strong"),xFo=o("trocr"),$Fo=o(" \u2014 "),Oq=a("a"),kFo=o("TrOCRProcessor"),SFo=o(" (TrOCR model)"),RFo=l(),Rp=a("li"),Yde=a("strong"),PFo=o("unispeech"),BFo=o(" \u2014 "),Vq=a("a"),IFo=o("Wav2Vec2Processor"),NFo=o(" (UniSpeech model)"),qFo=l(),Pp=a("li"),Kde=a("strong"),jFo=o("unispeech-sat"),DFo=o(" \u2014 "),Xq=a("a"),GFo=o("Wav2Vec2Processor"),OFo=o(" (UniSpeechSat model)"),VFo=l(),Bp=a("li"),Zde=a("strong"),XFo=o("vilt"),zFo=o(" \u2014 "),zq=a("a"),QFo=o("ViltProcessor"),WFo=o(" (ViLT model)"),HFo=l(),Ip=a("li"),ece=a("strong"),UFo=o("vision-text-dual-encoder"),JFo=o(" \u2014 "),Qq=a("a"),YFo=o("VisionTextDualEncoderProcessor"),KFo=o(" (VisionTextDualEncoder model)"),ZFo=l(),Np=a("li"),oce=a("strong"),eTo=o("wav2vec2"),oTo=o(" \u2014 "),Wq=a("a"),rTo=o("Wav2Vec2Processor"),tTo=o(" (Wav2Vec2 model)"),aTo=l(),qp=a("li"),rce=a("strong"),nTo=o("wav2vec2-conformer"),sTo=o(" \u2014 "),Hq=a("a"),lTo=o("Wav2Vec2Processor"),iTo=o(" (Wav2Vec2-Conformer model)"),dTo=l(),jp=a("li"),tce=a("strong"),cTo=o("wavlm"),fTo=o(" \u2014 "),Uq=a("a"),mTo=o("Wav2Vec2Processor"),gTo=o(" (WavLM model)"),hTo=l(),F(Dp.$$.fragment),pTo=l(),F(Gp.$$.fragment),_To=l(),Op=a("div"),F(SL.$$.fragment),uTo=l(),ace=a("p"),bTo=o("Register a new processor for this class."),bXe=l(),Di=a("h2"),Vp=a("a"),nce=a("span"),F(RL.$$.fragment),vTo=l(),sce=a("span"),FTo=o("AutoModel"),vXe=l(),xo=a("div"),F(PL.$$.fragment),TTo=l(),Gi=a("p"),MTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jq=a("a"),ETo=o("from_pretrained()"),CTo=o(" class method or the "),Yq=a("a"),wTo=o("from_config()"),ATo=o(` class
method.`),LTo=l(),BL=a("p"),yTo=o("This class cannot be instantiated directly using "),lce=a("code"),xTo=o("__init__()"),$To=o(" (throws an error)."),kTo=l(),lt=a("div"),F(IL.$$.fragment),STo=l(),ice=a("p"),RTo=o("Instantiates one of the base model classes of the library from a configuration."),PTo=l(),Oi=a("p"),BTo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),ITo=o("not"),NTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kq=a("a"),qTo=o("from_pretrained()"),jTo=o(" to load the model weights."),DTo=l(),F(Xp.$$.fragment),GTo=l(),Je=a("div"),F(NL.$$.fragment),OTo=l(),cce=a("p"),VTo=o("Instantiate one of the base model classes of the library from a pretrained model."),XTo=l(),Ia=a("p"),zTo=o("The model class to instantiate is selected based on the "),fce=a("code"),QTo=o("model_type"),WTo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),HTo=o("pretrained_model_name_or_path"),UTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),JTo=o("pretrained_model_name_or_path"),YTo=o(":"),KTo=l(),y=a("ul"),zp=a("li"),hce=a("strong"),ZTo=o("albert"),e7o=o(" \u2014 "),Zq=a("a"),o7o=o("AlbertModel"),r7o=o(" (ALBERT model)"),t7o=l(),Qp=a("li"),pce=a("strong"),a7o=o("bart"),n7o=o(" \u2014 "),ej=a("a"),s7o=o("BartModel"),l7o=o(" (BART model)"),i7o=l(),Wp=a("li"),_ce=a("strong"),d7o=o("beit"),c7o=o(" \u2014 "),oj=a("a"),f7o=o("BeitModel"),m7o=o(" (BEiT model)"),g7o=l(),Hp=a("li"),uce=a("strong"),h7o=o("bert"),p7o=o(" \u2014 "),rj=a("a"),_7o=o("BertModel"),u7o=o(" (BERT model)"),b7o=l(),Up=a("li"),bce=a("strong"),v7o=o("bert-generation"),F7o=o(" \u2014 "),tj=a("a"),T7o=o("BertGenerationEncoder"),M7o=o(" (Bert Generation model)"),E7o=l(),Jp=a("li"),vce=a("strong"),C7o=o("big_bird"),w7o=o(" \u2014 "),aj=a("a"),A7o=o("BigBirdModel"),L7o=o(" (BigBird model)"),y7o=l(),Yp=a("li"),Fce=a("strong"),x7o=o("bigbird_pegasus"),$7o=o(" \u2014 "),nj=a("a"),k7o=o("BigBirdPegasusModel"),S7o=o(" (BigBird-Pegasus model)"),R7o=l(),Kp=a("li"),Tce=a("strong"),P7o=o("blenderbot"),B7o=o(" \u2014 "),sj=a("a"),I7o=o("BlenderbotModel"),N7o=o(" (Blenderbot model)"),q7o=l(),Zp=a("li"),Mce=a("strong"),j7o=o("blenderbot-small"),D7o=o(" \u2014 "),lj=a("a"),G7o=o("BlenderbotSmallModel"),O7o=o(" (BlenderbotSmall model)"),V7o=l(),e_=a("li"),Ece=a("strong"),X7o=o("bloom"),z7o=o(" \u2014 "),ij=a("a"),Q7o=o("BloomModel"),W7o=o(" (BLOOM model)"),H7o=l(),o_=a("li"),Cce=a("strong"),U7o=o("camembert"),J7o=o(" \u2014 "),dj=a("a"),Y7o=o("CamembertModel"),K7o=o(" (CamemBERT model)"),Z7o=l(),r_=a("li"),wce=a("strong"),e8o=o("canine"),o8o=o(" \u2014 "),cj=a("a"),r8o=o("CanineModel"),t8o=o(" (CANINE model)"),a8o=l(),t_=a("li"),Ace=a("strong"),n8o=o("clip"),s8o=o(" \u2014 "),fj=a("a"),l8o=o("CLIPModel"),i8o=o(" (CLIP model)"),d8o=l(),a_=a("li"),Lce=a("strong"),c8o=o("codegen"),f8o=o(" \u2014 "),mj=a("a"),m8o=o("CodeGenModel"),g8o=o(" (CodeGen model)"),h8o=l(),n_=a("li"),yce=a("strong"),p8o=o("convbert"),_8o=o(" \u2014 "),gj=a("a"),u8o=o("ConvBertModel"),b8o=o(" (ConvBERT model)"),v8o=l(),s_=a("li"),xce=a("strong"),F8o=o("convnext"),T8o=o(" \u2014 "),hj=a("a"),M8o=o("ConvNextModel"),E8o=o(" (ConvNeXT model)"),C8o=l(),l_=a("li"),$ce=a("strong"),w8o=o("ctrl"),A8o=o(" \u2014 "),pj=a("a"),L8o=o("CTRLModel"),y8o=o(" (CTRL model)"),x8o=l(),i_=a("li"),kce=a("strong"),$8o=o("cvt"),k8o=o(" \u2014 "),_j=a("a"),S8o=o("CvtModel"),R8o=o(" (CvT model)"),P8o=l(),d_=a("li"),Sce=a("strong"),B8o=o("data2vec-audio"),I8o=o(" \u2014 "),uj=a("a"),N8o=o("Data2VecAudioModel"),q8o=o(" (Data2VecAudio model)"),j8o=l(),c_=a("li"),Rce=a("strong"),D8o=o("data2vec-text"),G8o=o(" \u2014 "),bj=a("a"),O8o=o("Data2VecTextModel"),V8o=o(" (Data2VecText model)"),X8o=l(),f_=a("li"),Pce=a("strong"),z8o=o("data2vec-vision"),Q8o=o(" \u2014 "),vj=a("a"),W8o=o("Data2VecVisionModel"),H8o=o(" (Data2VecVision model)"),U8o=l(),m_=a("li"),Bce=a("strong"),J8o=o("deberta"),Y8o=o(" \u2014 "),Fj=a("a"),K8o=o("DebertaModel"),Z8o=o(" (DeBERTa model)"),eMo=l(),g_=a("li"),Ice=a("strong"),oMo=o("deberta-v2"),rMo=o(" \u2014 "),Tj=a("a"),tMo=o("DebertaV2Model"),aMo=o(" (DeBERTa-v2 model)"),nMo=l(),h_=a("li"),Nce=a("strong"),sMo=o("decision_transformer"),lMo=o(" \u2014 "),Mj=a("a"),iMo=o("DecisionTransformerModel"),dMo=o(" (Decision Transformer model)"),cMo=l(),p_=a("li"),qce=a("strong"),fMo=o("deformable_detr"),mMo=o(" \u2014 "),Ej=a("a"),gMo=o("DeformableDetrModel"),hMo=o(" (Deformable DETR model)"),pMo=l(),__=a("li"),jce=a("strong"),_Mo=o("deit"),uMo=o(" \u2014 "),Cj=a("a"),bMo=o("DeiTModel"),vMo=o(" (DeiT model)"),FMo=l(),u_=a("li"),Dce=a("strong"),TMo=o("detr"),MMo=o(" \u2014 "),wj=a("a"),EMo=o("DetrModel"),CMo=o(" (DETR model)"),wMo=l(),b_=a("li"),Gce=a("strong"),AMo=o("distilbert"),LMo=o(" \u2014 "),Aj=a("a"),yMo=o("DistilBertModel"),xMo=o(" (DistilBERT model)"),$Mo=l(),v_=a("li"),Oce=a("strong"),kMo=o("dpr"),SMo=o(" \u2014 "),Lj=a("a"),RMo=o("DPRQuestionEncoder"),PMo=o(" (DPR model)"),BMo=l(),F_=a("li"),Vce=a("strong"),IMo=o("dpt"),NMo=o(" \u2014 "),yj=a("a"),qMo=o("DPTModel"),jMo=o(" (DPT model)"),DMo=l(),T_=a("li"),Xce=a("strong"),GMo=o("electra"),OMo=o(" \u2014 "),xj=a("a"),VMo=o("ElectraModel"),XMo=o(" (ELECTRA model)"),zMo=l(),M_=a("li"),zce=a("strong"),QMo=o("flaubert"),WMo=o(" \u2014 "),$j=a("a"),HMo=o("FlaubertModel"),UMo=o(" (FlauBERT model)"),JMo=l(),E_=a("li"),Qce=a("strong"),YMo=o("flava"),KMo=o(" \u2014 "),kj=a("a"),ZMo=o("FlavaModel"),e4o=o(" (FLAVA model)"),o4o=l(),C_=a("li"),Wce=a("strong"),r4o=o("fnet"),t4o=o(" \u2014 "),Sj=a("a"),a4o=o("FNetModel"),n4o=o(" (FNet model)"),s4o=l(),w_=a("li"),Hce=a("strong"),l4o=o("fsmt"),i4o=o(" \u2014 "),Rj=a("a"),d4o=o("FSMTModel"),c4o=o(" (FairSeq Machine-Translation model)"),f4o=l(),Ws=a("li"),Uce=a("strong"),m4o=o("funnel"),g4o=o(" \u2014 "),Pj=a("a"),h4o=o("FunnelModel"),p4o=o(" or "),Bj=a("a"),_4o=o("FunnelBaseModel"),u4o=o(" (Funnel Transformer model)"),b4o=l(),A_=a("li"),Jce=a("strong"),v4o=o("glpn"),F4o=o(" \u2014 "),Ij=a("a"),T4o=o("GLPNModel"),M4o=o(" (GLPN model)"),E4o=l(),L_=a("li"),Yce=a("strong"),C4o=o("gpt2"),w4o=o(" \u2014 "),Nj=a("a"),A4o=o("GPT2Model"),L4o=o(" (OpenAI GPT-2 model)"),y4o=l(),y_=a("li"),Kce=a("strong"),x4o=o("gpt_neo"),$4o=o(" \u2014 "),qj=a("a"),k4o=o("GPTNeoModel"),S4o=o(" (GPT Neo model)"),R4o=l(),x_=a("li"),Zce=a("strong"),P4o=o("gpt_neox"),B4o=o(" \u2014 "),jj=a("a"),I4o=o("GPTNeoXModel"),N4o=o(" (GPT NeoX model)"),q4o=l(),$_=a("li"),efe=a("strong"),j4o=o("gptj"),D4o=o(" \u2014 "),Dj=a("a"),G4o=o("GPTJModel"),O4o=o(" (GPT-J model)"),V4o=l(),k_=a("li"),ofe=a("strong"),X4o=o("groupvit"),z4o=o(" \u2014 "),Gj=a("a"),Q4o=o("GroupViTModel"),W4o=o(" (GroupViT model)"),H4o=l(),S_=a("li"),rfe=a("strong"),U4o=o("hubert"),J4o=o(" \u2014 "),Oj=a("a"),Y4o=o("HubertModel"),K4o=o(" (Hubert model)"),Z4o=l(),R_=a("li"),tfe=a("strong"),eEo=o("ibert"),oEo=o(" \u2014 "),Vj=a("a"),rEo=o("IBertModel"),tEo=o(" (I-BERT model)"),aEo=l(),P_=a("li"),afe=a("strong"),nEo=o("imagegpt"),sEo=o(" \u2014 "),Xj=a("a"),lEo=o("ImageGPTModel"),iEo=o(" (ImageGPT model)"),dEo=l(),B_=a("li"),nfe=a("strong"),cEo=o("layoutlm"),fEo=o(" \u2014 "),zj=a("a"),mEo=o("LayoutLMModel"),gEo=o(" (LayoutLM model)"),hEo=l(),I_=a("li"),sfe=a("strong"),pEo=o("layoutlmv2"),_Eo=o(" \u2014 "),Qj=a("a"),uEo=o("LayoutLMv2Model"),bEo=o(" (LayoutLMv2 model)"),vEo=l(),N_=a("li"),lfe=a("strong"),FEo=o("layoutlmv3"),TEo=o(" \u2014 "),Wj=a("a"),MEo=o("LayoutLMv3Model"),EEo=o(" (LayoutLMv3 model)"),CEo=l(),q_=a("li"),ife=a("strong"),wEo=o("led"),AEo=o(" \u2014 "),Hj=a("a"),LEo=o("LEDModel"),yEo=o(" (LED model)"),xEo=l(),j_=a("li"),dfe=a("strong"),$Eo=o("levit"),kEo=o(" \u2014 "),Uj=a("a"),SEo=o("LevitModel"),REo=o(" (LeViT model)"),PEo=l(),D_=a("li"),cfe=a("strong"),BEo=o("longformer"),IEo=o(" \u2014 "),Jj=a("a"),NEo=o("LongformerModel"),qEo=o(" (Longformer model)"),jEo=l(),G_=a("li"),ffe=a("strong"),DEo=o("longt5"),GEo=o(" \u2014 "),Yj=a("a"),OEo=o("LongT5Model"),VEo=o(" (LongT5 model)"),XEo=l(),O_=a("li"),mfe=a("strong"),zEo=o("luke"),QEo=o(" \u2014 "),Kj=a("a"),WEo=o("LukeModel"),HEo=o(" (LUKE model)"),UEo=l(),V_=a("li"),gfe=a("strong"),JEo=o("lxmert"),YEo=o(" \u2014 "),Zj=a("a"),KEo=o("LxmertModel"),ZEo=o(" (LXMERT model)"),eCo=l(),X_=a("li"),hfe=a("strong"),oCo=o("m2m_100"),rCo=o(" \u2014 "),eD=a("a"),tCo=o("M2M100Model"),aCo=o(" (M2M100 model)"),nCo=l(),z_=a("li"),pfe=a("strong"),sCo=o("marian"),lCo=o(" \u2014 "),oD=a("a"),iCo=o("MarianModel"),dCo=o(" (Marian model)"),cCo=l(),Q_=a("li"),_fe=a("strong"),fCo=o("maskformer"),mCo=o(" \u2014 "),rD=a("a"),gCo=o("MaskFormerModel"),hCo=o(" (MaskFormer model)"),pCo=l(),W_=a("li"),ufe=a("strong"),_Co=o("mbart"),uCo=o(" \u2014 "),tD=a("a"),bCo=o("MBartModel"),vCo=o(" (mBART model)"),FCo=l(),H_=a("li"),bfe=a("strong"),TCo=o("mctct"),MCo=o(" \u2014 "),aD=a("a"),ECo=o("MCTCTModel"),CCo=o(" (M-CTC-T model)"),wCo=l(),U_=a("li"),vfe=a("strong"),ACo=o("megatron-bert"),LCo=o(" \u2014 "),nD=a("a"),yCo=o("MegatronBertModel"),xCo=o(" (Megatron-BERT model)"),$Co=l(),J_=a("li"),Ffe=a("strong"),kCo=o("mobilebert"),SCo=o(" \u2014 "),sD=a("a"),RCo=o("MobileBertModel"),PCo=o(" (MobileBERT model)"),BCo=l(),Y_=a("li"),Tfe=a("strong"),ICo=o("mobilevit"),NCo=o(" \u2014 "),lD=a("a"),qCo=o("MobileViTModel"),jCo=o(" (MobileViT model)"),DCo=l(),K_=a("li"),Mfe=a("strong"),GCo=o("mpnet"),OCo=o(" \u2014 "),iD=a("a"),VCo=o("MPNetModel"),XCo=o(" (MPNet model)"),zCo=l(),Z_=a("li"),Efe=a("strong"),QCo=o("mt5"),WCo=o(" \u2014 "),dD=a("a"),HCo=o("MT5Model"),UCo=o(" (MT5 model)"),JCo=l(),eu=a("li"),Cfe=a("strong"),YCo=o("mvp"),KCo=o(" \u2014 "),cD=a("a"),ZCo=o("MvpModel"),e3o=o(" (MVP model)"),o3o=l(),ou=a("li"),wfe=a("strong"),r3o=o("nezha"),t3o=o(" \u2014 "),fD=a("a"),a3o=o("NezhaModel"),n3o=o(" (Nezha model)"),s3o=l(),ru=a("li"),Afe=a("strong"),l3o=o("nystromformer"),i3o=o(" \u2014 "),mD=a("a"),d3o=o("NystromformerModel"),c3o=o(" (Nystr\xF6mformer model)"),f3o=l(),tu=a("li"),Lfe=a("strong"),m3o=o("openai-gpt"),g3o=o(" \u2014 "),gD=a("a"),h3o=o("OpenAIGPTModel"),p3o=o(" (OpenAI GPT model)"),_3o=l(),au=a("li"),yfe=a("strong"),u3o=o("opt"),b3o=o(" \u2014 "),hD=a("a"),v3o=o("OPTModel"),F3o=o(" (OPT model)"),T3o=l(),nu=a("li"),xfe=a("strong"),M3o=o("pegasus"),E3o=o(" \u2014 "),pD=a("a"),C3o=o("PegasusModel"),w3o=o(" (Pegasus model)"),A3o=l(),su=a("li"),$fe=a("strong"),L3o=o("perceiver"),y3o=o(" \u2014 "),_D=a("a"),x3o=o("PerceiverModel"),$3o=o(" (Perceiver model)"),k3o=l(),lu=a("li"),kfe=a("strong"),S3o=o("plbart"),R3o=o(" \u2014 "),uD=a("a"),P3o=o("PLBartModel"),B3o=o(" (PLBart model)"),I3o=l(),iu=a("li"),Sfe=a("strong"),N3o=o("poolformer"),q3o=o(" \u2014 "),bD=a("a"),j3o=o("PoolFormerModel"),D3o=o(" (PoolFormer model)"),G3o=l(),du=a("li"),Rfe=a("strong"),O3o=o("prophetnet"),V3o=o(" \u2014 "),vD=a("a"),X3o=o("ProphetNetModel"),z3o=o(" (ProphetNet model)"),Q3o=l(),cu=a("li"),Pfe=a("strong"),W3o=o("qdqbert"),H3o=o(" \u2014 "),FD=a("a"),U3o=o("QDQBertModel"),J3o=o(" (QDQBert model)"),Y3o=l(),fu=a("li"),Bfe=a("strong"),K3o=o("reformer"),Z3o=o(" \u2014 "),TD=a("a"),e5o=o("ReformerModel"),o5o=o(" (Reformer model)"),r5o=l(),mu=a("li"),Ife=a("strong"),t5o=o("regnet"),a5o=o(" \u2014 "),MD=a("a"),n5o=o("RegNetModel"),s5o=o(" (RegNet model)"),l5o=l(),gu=a("li"),Nfe=a("strong"),i5o=o("rembert"),d5o=o(" \u2014 "),ED=a("a"),c5o=o("RemBertModel"),f5o=o(" (RemBERT model)"),m5o=l(),hu=a("li"),qfe=a("strong"),g5o=o("resnet"),h5o=o(" \u2014 "),CD=a("a"),p5o=o("ResNetModel"),_5o=o(" (ResNet model)"),u5o=l(),pu=a("li"),jfe=a("strong"),b5o=o("retribert"),v5o=o(" \u2014 "),wD=a("a"),F5o=o("RetriBertModel"),T5o=o(" (RetriBERT model)"),M5o=l(),_u=a("li"),Dfe=a("strong"),E5o=o("roberta"),C5o=o(" \u2014 "),AD=a("a"),w5o=o("RobertaModel"),A5o=o(" (RoBERTa model)"),L5o=l(),uu=a("li"),Gfe=a("strong"),y5o=o("roformer"),x5o=o(" \u2014 "),LD=a("a"),$5o=o("RoFormerModel"),k5o=o(" (RoFormer model)"),S5o=l(),bu=a("li"),Ofe=a("strong"),R5o=o("segformer"),P5o=o(" \u2014 "),yD=a("a"),B5o=o("SegformerModel"),I5o=o(" (SegFormer model)"),N5o=l(),vu=a("li"),Vfe=a("strong"),q5o=o("sew"),j5o=o(" \u2014 "),xD=a("a"),D5o=o("SEWModel"),G5o=o(" (SEW model)"),O5o=l(),Fu=a("li"),Xfe=a("strong"),V5o=o("sew-d"),X5o=o(" \u2014 "),$D=a("a"),z5o=o("SEWDModel"),Q5o=o(" (SEW-D model)"),W5o=l(),Tu=a("li"),zfe=a("strong"),H5o=o("speech_to_text"),U5o=o(" \u2014 "),kD=a("a"),J5o=o("Speech2TextModel"),Y5o=o(" (Speech2Text model)"),K5o=l(),Mu=a("li"),Qfe=a("strong"),Z5o=o("splinter"),e0o=o(" \u2014 "),SD=a("a"),o0o=o("SplinterModel"),r0o=o(" (Splinter model)"),t0o=l(),Eu=a("li"),Wfe=a("strong"),a0o=o("squeezebert"),n0o=o(" \u2014 "),RD=a("a"),s0o=o("SqueezeBertModel"),l0o=o(" (SqueezeBERT model)"),i0o=l(),Cu=a("li"),Hfe=a("strong"),d0o=o("swin"),c0o=o(" \u2014 "),PD=a("a"),f0o=o("SwinModel"),m0o=o(" (Swin Transformer model)"),g0o=l(),wu=a("li"),Ufe=a("strong"),h0o=o("t5"),p0o=o(" \u2014 "),BD=a("a"),_0o=o("T5Model"),u0o=o(" (T5 model)"),b0o=l(),Au=a("li"),Jfe=a("strong"),v0o=o("tapas"),F0o=o(" \u2014 "),ID=a("a"),T0o=o("TapasModel"),M0o=o(" (TAPAS model)"),E0o=l(),Lu=a("li"),Yfe=a("strong"),C0o=o("trajectory_transformer"),w0o=o(" \u2014 "),ND=a("a"),A0o=o("TrajectoryTransformerModel"),L0o=o(" (Trajectory Transformer model)"),y0o=l(),yu=a("li"),Kfe=a("strong"),x0o=o("transfo-xl"),$0o=o(" \u2014 "),qD=a("a"),k0o=o("TransfoXLModel"),S0o=o(" (Transformer-XL model)"),R0o=l(),xu=a("li"),Zfe=a("strong"),P0o=o("unispeech"),B0o=o(" \u2014 "),jD=a("a"),I0o=o("UniSpeechModel"),N0o=o(" (UniSpeech model)"),q0o=l(),$u=a("li"),eme=a("strong"),j0o=o("unispeech-sat"),D0o=o(" \u2014 "),DD=a("a"),G0o=o("UniSpeechSatModel"),O0o=o(" (UniSpeechSat model)"),V0o=l(),ku=a("li"),ome=a("strong"),X0o=o("van"),z0o=o(" \u2014 "),GD=a("a"),Q0o=o("VanModel"),W0o=o(" (VAN model)"),H0o=l(),Su=a("li"),rme=a("strong"),U0o=o("vilt"),J0o=o(" \u2014 "),OD=a("a"),Y0o=o("ViltModel"),K0o=o(" (ViLT model)"),Z0o=l(),Ru=a("li"),tme=a("strong"),ewo=o("vision-text-dual-encoder"),owo=o(" \u2014 "),VD=a("a"),rwo=o("VisionTextDualEncoderModel"),two=o(" (VisionTextDualEncoder model)"),awo=l(),Pu=a("li"),ame=a("strong"),nwo=o("visual_bert"),swo=o(" \u2014 "),XD=a("a"),lwo=o("VisualBertModel"),iwo=o(" (VisualBERT model)"),dwo=l(),Bu=a("li"),nme=a("strong"),cwo=o("vit"),fwo=o(" \u2014 "),zD=a("a"),mwo=o("ViTModel"),gwo=o(" (ViT model)"),hwo=l(),Iu=a("li"),sme=a("strong"),pwo=o("vit_mae"),_wo=o(" \u2014 "),QD=a("a"),uwo=o("ViTMAEModel"),bwo=o(" (ViTMAE model)"),vwo=l(),Nu=a("li"),lme=a("strong"),Fwo=o("wav2vec2"),Two=o(" \u2014 "),WD=a("a"),Mwo=o("Wav2Vec2Model"),Ewo=o(" (Wav2Vec2 model)"),Cwo=l(),qu=a("li"),ime=a("strong"),wwo=o("wav2vec2-conformer"),Awo=o(" \u2014 "),HD=a("a"),Lwo=o("Wav2Vec2ConformerModel"),ywo=o(" (Wav2Vec2-Conformer model)"),xwo=l(),ju=a("li"),dme=a("strong"),$wo=o("wavlm"),kwo=o(" \u2014 "),UD=a("a"),Swo=o("WavLMModel"),Rwo=o(" (WavLM model)"),Pwo=l(),Du=a("li"),cme=a("strong"),Bwo=o("xglm"),Iwo=o(" \u2014 "),JD=a("a"),Nwo=o("XGLMModel"),qwo=o(" (XGLM model)"),jwo=l(),Gu=a("li"),fme=a("strong"),Dwo=o("xlm"),Gwo=o(" \u2014 "),YD=a("a"),Owo=o("XLMModel"),Vwo=o(" (XLM model)"),Xwo=l(),Ou=a("li"),mme=a("strong"),zwo=o("xlm-prophetnet"),Qwo=o(" \u2014 "),KD=a("a"),Wwo=o("XLMProphetNetModel"),Hwo=o(" (XLM-ProphetNet model)"),Uwo=l(),Vu=a("li"),gme=a("strong"),Jwo=o("xlm-roberta"),Ywo=o(" \u2014 "),ZD=a("a"),Kwo=o("XLMRobertaModel"),Zwo=o(" (XLM-RoBERTa model)"),eAo=l(),Xu=a("li"),hme=a("strong"),oAo=o("xlm-roberta-xl"),rAo=o(" \u2014 "),eG=a("a"),tAo=o("XLMRobertaXLModel"),aAo=o(" (XLM-RoBERTa-XL model)"),nAo=l(),zu=a("li"),pme=a("strong"),sAo=o("xlnet"),lAo=o(" \u2014 "),oG=a("a"),iAo=o("XLNetModel"),dAo=o(" (XLNet model)"),cAo=l(),Qu=a("li"),_me=a("strong"),fAo=o("yolos"),mAo=o(" \u2014 "),rG=a("a"),gAo=o("YolosModel"),hAo=o(" (YOLOS model)"),pAo=l(),Wu=a("li"),ume=a("strong"),_Ao=o("yoso"),uAo=o(" \u2014 "),tG=a("a"),bAo=o("YosoModel"),vAo=o(" (YOSO model)"),FAo=l(),Hu=a("p"),TAo=o("The model is set in evaluation mode by default using "),bme=a("code"),MAo=o("model.eval()"),EAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),CAo=o("model.train()"),wAo=l(),F(Uu.$$.fragment),FXe=l(),Vi=a("h2"),Ju=a("a"),Fme=a("span"),F(qL.$$.fragment),AAo=l(),Tme=a("span"),LAo=o("AutoModelForPreTraining"),TXe=l(),$o=a("div"),F(jL.$$.fragment),yAo=l(),Xi=a("p"),xAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aG=a("a"),$Ao=o("from_pretrained()"),kAo=o(" class method or the "),nG=a("a"),SAo=o("from_config()"),RAo=o(` class
method.`),PAo=l(),DL=a("p"),BAo=o("This class cannot be instantiated directly using "),Mme=a("code"),IAo=o("__init__()"),NAo=o(" (throws an error)."),qAo=l(),it=a("div"),F(GL.$$.fragment),jAo=l(),Eme=a("p"),DAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GAo=l(),zi=a("p"),OAo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),VAo=o("not"),XAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),zAo=o("from_pretrained()"),QAo=o(" to load the model weights."),WAo=l(),F(Yu.$$.fragment),HAo=l(),Ye=a("div"),F(OL.$$.fragment),UAo=l(),wme=a("p"),JAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YAo=l(),Na=a("p"),KAo=o("The model class to instantiate is selected based on the "),Ame=a("code"),ZAo=o("model_type"),e6o=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),o6o=o("pretrained_model_name_or_path"),r6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),t6o=o("pretrained_model_name_or_path"),a6o=o(":"),n6o=l(),G=a("ul"),Ku=a("li"),xme=a("strong"),s6o=o("albert"),l6o=o(" \u2014 "),lG=a("a"),i6o=o("AlbertForPreTraining"),d6o=o(" (ALBERT model)"),c6o=l(),Zu=a("li"),$me=a("strong"),f6o=o("bart"),m6o=o(" \u2014 "),iG=a("a"),g6o=o("BartForConditionalGeneration"),h6o=o(" (BART model)"),p6o=l(),e1=a("li"),kme=a("strong"),_6o=o("bert"),u6o=o(" \u2014 "),dG=a("a"),b6o=o("BertForPreTraining"),v6o=o(" (BERT model)"),F6o=l(),o1=a("li"),Sme=a("strong"),T6o=o("big_bird"),M6o=o(" \u2014 "),cG=a("a"),E6o=o("BigBirdForPreTraining"),C6o=o(" (BigBird model)"),w6o=l(),r1=a("li"),Rme=a("strong"),A6o=o("bloom"),L6o=o(" \u2014 "),fG=a("a"),y6o=o("BloomForCausalLM"),x6o=o(" (BLOOM model)"),$6o=l(),t1=a("li"),Pme=a("strong"),k6o=o("camembert"),S6o=o(" \u2014 "),mG=a("a"),R6o=o("CamembertForMaskedLM"),P6o=o(" (CamemBERT model)"),B6o=l(),a1=a("li"),Bme=a("strong"),I6o=o("ctrl"),N6o=o(" \u2014 "),gG=a("a"),q6o=o("CTRLLMHeadModel"),j6o=o(" (CTRL model)"),D6o=l(),n1=a("li"),Ime=a("strong"),G6o=o("data2vec-text"),O6o=o(" \u2014 "),hG=a("a"),V6o=o("Data2VecTextForMaskedLM"),X6o=o(" (Data2VecText model)"),z6o=l(),s1=a("li"),Nme=a("strong"),Q6o=o("deberta"),W6o=o(" \u2014 "),pG=a("a"),H6o=o("DebertaForMaskedLM"),U6o=o(" (DeBERTa model)"),J6o=l(),l1=a("li"),qme=a("strong"),Y6o=o("deberta-v2"),K6o=o(" \u2014 "),_G=a("a"),Z6o=o("DebertaV2ForMaskedLM"),eLo=o(" (DeBERTa-v2 model)"),oLo=l(),i1=a("li"),jme=a("strong"),rLo=o("distilbert"),tLo=o(" \u2014 "),uG=a("a"),aLo=o("DistilBertForMaskedLM"),nLo=o(" (DistilBERT model)"),sLo=l(),d1=a("li"),Dme=a("strong"),lLo=o("electra"),iLo=o(" \u2014 "),bG=a("a"),dLo=o("ElectraForPreTraining"),cLo=o(" (ELECTRA model)"),fLo=l(),c1=a("li"),Gme=a("strong"),mLo=o("flaubert"),gLo=o(" \u2014 "),vG=a("a"),hLo=o("FlaubertWithLMHeadModel"),pLo=o(" (FlauBERT model)"),_Lo=l(),f1=a("li"),Ome=a("strong"),uLo=o("flava"),bLo=o(" \u2014 "),FG=a("a"),vLo=o("FlavaForPreTraining"),FLo=o(" (FLAVA model)"),TLo=l(),m1=a("li"),Vme=a("strong"),MLo=o("fnet"),ELo=o(" \u2014 "),TG=a("a"),CLo=o("FNetForPreTraining"),wLo=o(" (FNet model)"),ALo=l(),g1=a("li"),Xme=a("strong"),LLo=o("fsmt"),yLo=o(" \u2014 "),MG=a("a"),xLo=o("FSMTForConditionalGeneration"),$Lo=o(" (FairSeq Machine-Translation model)"),kLo=l(),h1=a("li"),zme=a("strong"),SLo=o("funnel"),RLo=o(" \u2014 "),EG=a("a"),PLo=o("FunnelForPreTraining"),BLo=o(" (Funnel Transformer model)"),ILo=l(),p1=a("li"),Qme=a("strong"),NLo=o("gpt2"),qLo=o(" \u2014 "),CG=a("a"),jLo=o("GPT2LMHeadModel"),DLo=o(" (OpenAI GPT-2 model)"),GLo=l(),_1=a("li"),Wme=a("strong"),OLo=o("ibert"),VLo=o(" \u2014 "),wG=a("a"),XLo=o("IBertForMaskedLM"),zLo=o(" (I-BERT model)"),QLo=l(),u1=a("li"),Hme=a("strong"),WLo=o("layoutlm"),HLo=o(" \u2014 "),AG=a("a"),ULo=o("LayoutLMForMaskedLM"),JLo=o(" (LayoutLM model)"),YLo=l(),b1=a("li"),Ume=a("strong"),KLo=o("longformer"),ZLo=o(" \u2014 "),LG=a("a"),eyo=o("LongformerForMaskedLM"),oyo=o(" (Longformer model)"),ryo=l(),v1=a("li"),Jme=a("strong"),tyo=o("lxmert"),ayo=o(" \u2014 "),yG=a("a"),nyo=o("LxmertForPreTraining"),syo=o(" (LXMERT model)"),lyo=l(),F1=a("li"),Yme=a("strong"),iyo=o("megatron-bert"),dyo=o(" \u2014 "),xG=a("a"),cyo=o("MegatronBertForPreTraining"),fyo=o(" (Megatron-BERT model)"),myo=l(),T1=a("li"),Kme=a("strong"),gyo=o("mobilebert"),hyo=o(" \u2014 "),$G=a("a"),pyo=o("MobileBertForPreTraining"),_yo=o(" (MobileBERT model)"),uyo=l(),M1=a("li"),Zme=a("strong"),byo=o("mpnet"),vyo=o(" \u2014 "),kG=a("a"),Fyo=o("MPNetForMaskedLM"),Tyo=o(" (MPNet model)"),Myo=l(),E1=a("li"),ege=a("strong"),Eyo=o("mvp"),Cyo=o(" \u2014 "),SG=a("a"),wyo=o("MvpForConditionalGeneration"),Ayo=o(" (MVP model)"),Lyo=l(),C1=a("li"),oge=a("strong"),yyo=o("nezha"),xyo=o(" \u2014 "),RG=a("a"),$yo=o("NezhaForPreTraining"),kyo=o(" (Nezha model)"),Syo=l(),w1=a("li"),rge=a("strong"),Ryo=o("openai-gpt"),Pyo=o(" \u2014 "),PG=a("a"),Byo=o("OpenAIGPTLMHeadModel"),Iyo=o(" (OpenAI GPT model)"),Nyo=l(),A1=a("li"),tge=a("strong"),qyo=o("retribert"),jyo=o(" \u2014 "),BG=a("a"),Dyo=o("RetriBertModel"),Gyo=o(" (RetriBERT model)"),Oyo=l(),L1=a("li"),age=a("strong"),Vyo=o("roberta"),Xyo=o(" \u2014 "),IG=a("a"),zyo=o("RobertaForMaskedLM"),Qyo=o(" (RoBERTa model)"),Wyo=l(),y1=a("li"),nge=a("strong"),Hyo=o("splinter"),Uyo=o(" \u2014 "),NG=a("a"),Jyo=o("SplinterForPreTraining"),Yyo=o(" (Splinter model)"),Kyo=l(),x1=a("li"),sge=a("strong"),Zyo=o("squeezebert"),e9o=o(" \u2014 "),qG=a("a"),o9o=o("SqueezeBertForMaskedLM"),r9o=o(" (SqueezeBERT model)"),t9o=l(),$1=a("li"),lge=a("strong"),a9o=o("t5"),n9o=o(" \u2014 "),jG=a("a"),s9o=o("T5ForConditionalGeneration"),l9o=o(" (T5 model)"),i9o=l(),k1=a("li"),ige=a("strong"),d9o=o("tapas"),c9o=o(" \u2014 "),DG=a("a"),f9o=o("TapasForMaskedLM"),m9o=o(" (TAPAS model)"),g9o=l(),S1=a("li"),dge=a("strong"),h9o=o("transfo-xl"),p9o=o(" \u2014 "),GG=a("a"),_9o=o("TransfoXLLMHeadModel"),u9o=o(" (Transformer-XL model)"),b9o=l(),R1=a("li"),cge=a("strong"),v9o=o("unispeech"),F9o=o(" \u2014 "),OG=a("a"),T9o=o("UniSpeechForPreTraining"),M9o=o(" (UniSpeech model)"),E9o=l(),P1=a("li"),fge=a("strong"),C9o=o("unispeech-sat"),w9o=o(" \u2014 "),VG=a("a"),A9o=o("UniSpeechSatForPreTraining"),L9o=o(" (UniSpeechSat model)"),y9o=l(),B1=a("li"),mge=a("strong"),x9o=o("visual_bert"),$9o=o(" \u2014 "),XG=a("a"),k9o=o("VisualBertForPreTraining"),S9o=o(" (VisualBERT model)"),R9o=l(),I1=a("li"),gge=a("strong"),P9o=o("vit_mae"),B9o=o(" \u2014 "),zG=a("a"),I9o=o("ViTMAEForPreTraining"),N9o=o(" (ViTMAE model)"),q9o=l(),N1=a("li"),hge=a("strong"),j9o=o("wav2vec2"),D9o=o(" \u2014 "),QG=a("a"),G9o=o("Wav2Vec2ForPreTraining"),O9o=o(" (Wav2Vec2 model)"),V9o=l(),q1=a("li"),pge=a("strong"),X9o=o("wav2vec2-conformer"),z9o=o(" \u2014 "),WG=a("a"),Q9o=o("Wav2Vec2ConformerForPreTraining"),W9o=o(" (Wav2Vec2-Conformer model)"),H9o=l(),j1=a("li"),_ge=a("strong"),U9o=o("xlm"),J9o=o(" \u2014 "),HG=a("a"),Y9o=o("XLMWithLMHeadModel"),K9o=o(" (XLM model)"),Z9o=l(),D1=a("li"),uge=a("strong"),exo=o("xlm-roberta"),oxo=o(" \u2014 "),UG=a("a"),rxo=o("XLMRobertaForMaskedLM"),txo=o(" (XLM-RoBERTa model)"),axo=l(),G1=a("li"),bge=a("strong"),nxo=o("xlm-roberta-xl"),sxo=o(" \u2014 "),JG=a("a"),lxo=o("XLMRobertaXLForMaskedLM"),ixo=o(" (XLM-RoBERTa-XL model)"),dxo=l(),O1=a("li"),vge=a("strong"),cxo=o("xlnet"),fxo=o(" \u2014 "),YG=a("a"),mxo=o("XLNetLMHeadModel"),gxo=o(" (XLNet model)"),hxo=l(),V1=a("p"),pxo=o("The model is set in evaluation mode by default using "),Fge=a("code"),_xo=o("model.eval()"),uxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),bxo=o("model.train()"),vxo=l(),F(X1.$$.fragment),MXe=l(),Qi=a("h2"),z1=a("a"),Mge=a("span"),F(VL.$$.fragment),Fxo=l(),Ege=a("span"),Txo=o("AutoModelForCausalLM"),EXe=l(),ko=a("div"),F(XL.$$.fragment),Mxo=l(),Wi=a("p"),Exo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KG=a("a"),Cxo=o("from_pretrained()"),wxo=o(" class method or the "),ZG=a("a"),Axo=o("from_config()"),Lxo=o(` class
method.`),yxo=l(),zL=a("p"),xxo=o("This class cannot be instantiated directly using "),Cge=a("code"),$xo=o("__init__()"),kxo=o(" (throws an error)."),Sxo=l(),dt=a("div"),F(QL.$$.fragment),Rxo=l(),wge=a("p"),Pxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bxo=l(),Hi=a("p"),Ixo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),Nxo=o("not"),qxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),jxo=o("from_pretrained()"),Dxo=o(" to load the model weights."),Gxo=l(),F(Q1.$$.fragment),Oxo=l(),Ke=a("div"),F(WL.$$.fragment),Vxo=l(),Lge=a("p"),Xxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zxo=l(),qa=a("p"),Qxo=o("The model class to instantiate is selected based on the "),yge=a("code"),Wxo=o("model_type"),Hxo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),Uxo=o("pretrained_model_name_or_path"),Jxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),Yxo=o("pretrained_model_name_or_path"),Kxo=o(":"),Zxo=l(),z=a("ul"),W1=a("li"),kge=a("strong"),e$o=o("bart"),o$o=o(" \u2014 "),oO=a("a"),r$o=o("BartForCausalLM"),t$o=o(" (BART model)"),a$o=l(),H1=a("li"),Sge=a("strong"),n$o=o("bert"),s$o=o(" \u2014 "),rO=a("a"),l$o=o("BertLMHeadModel"),i$o=o(" (BERT model)"),d$o=l(),U1=a("li"),Rge=a("strong"),c$o=o("bert-generation"),f$o=o(" \u2014 "),tO=a("a"),m$o=o("BertGenerationDecoder"),g$o=o(" (Bert Generation model)"),h$o=l(),J1=a("li"),Pge=a("strong"),p$o=o("big_bird"),_$o=o(" \u2014 "),aO=a("a"),u$o=o("BigBirdForCausalLM"),b$o=o(" (BigBird model)"),v$o=l(),Y1=a("li"),Bge=a("strong"),F$o=o("bigbird_pegasus"),T$o=o(" \u2014 "),nO=a("a"),M$o=o("BigBirdPegasusForCausalLM"),E$o=o(" (BigBird-Pegasus model)"),C$o=l(),K1=a("li"),Ige=a("strong"),w$o=o("blenderbot"),A$o=o(" \u2014 "),sO=a("a"),L$o=o("BlenderbotForCausalLM"),y$o=o(" (Blenderbot model)"),x$o=l(),Z1=a("li"),Nge=a("strong"),$$o=o("blenderbot-small"),k$o=o(" \u2014 "),lO=a("a"),S$o=o("BlenderbotSmallForCausalLM"),R$o=o(" (BlenderbotSmall model)"),P$o=l(),e2=a("li"),qge=a("strong"),B$o=o("bloom"),I$o=o(" \u2014 "),iO=a("a"),N$o=o("BloomForCausalLM"),q$o=o(" (BLOOM model)"),j$o=l(),o2=a("li"),jge=a("strong"),D$o=o("camembert"),G$o=o(" \u2014 "),dO=a("a"),O$o=o("CamembertForCausalLM"),V$o=o(" (CamemBERT model)"),X$o=l(),r2=a("li"),Dge=a("strong"),z$o=o("codegen"),Q$o=o(" \u2014 "),cO=a("a"),W$o=o("CodeGenForCausalLM"),H$o=o(" (CodeGen model)"),U$o=l(),t2=a("li"),Gge=a("strong"),J$o=o("ctrl"),Y$o=o(" \u2014 "),fO=a("a"),K$o=o("CTRLLMHeadModel"),Z$o=o(" (CTRL model)"),eko=l(),a2=a("li"),Oge=a("strong"),oko=o("data2vec-text"),rko=o(" \u2014 "),mO=a("a"),tko=o("Data2VecTextForCausalLM"),ako=o(" (Data2VecText model)"),nko=l(),n2=a("li"),Vge=a("strong"),sko=o("electra"),lko=o(" \u2014 "),gO=a("a"),iko=o("ElectraForCausalLM"),dko=o(" (ELECTRA model)"),cko=l(),s2=a("li"),Xge=a("strong"),fko=o("gpt2"),mko=o(" \u2014 "),hO=a("a"),gko=o("GPT2LMHeadModel"),hko=o(" (OpenAI GPT-2 model)"),pko=l(),l2=a("li"),zge=a("strong"),_ko=o("gpt_neo"),uko=o(" \u2014 "),pO=a("a"),bko=o("GPTNeoForCausalLM"),vko=o(" (GPT Neo model)"),Fko=l(),i2=a("li"),Qge=a("strong"),Tko=o("gpt_neox"),Mko=o(" \u2014 "),_O=a("a"),Eko=o("GPTNeoXForCausalLM"),Cko=o(" (GPT NeoX model)"),wko=l(),d2=a("li"),Wge=a("strong"),Ako=o("gptj"),Lko=o(" \u2014 "),uO=a("a"),yko=o("GPTJForCausalLM"),xko=o(" (GPT-J model)"),$ko=l(),c2=a("li"),Hge=a("strong"),kko=o("marian"),Sko=o(" \u2014 "),bO=a("a"),Rko=o("MarianForCausalLM"),Pko=o(" (Marian model)"),Bko=l(),f2=a("li"),Uge=a("strong"),Iko=o("mbart"),Nko=o(" \u2014 "),vO=a("a"),qko=o("MBartForCausalLM"),jko=o(" (mBART model)"),Dko=l(),m2=a("li"),Jge=a("strong"),Gko=o("megatron-bert"),Oko=o(" \u2014 "),FO=a("a"),Vko=o("MegatronBertForCausalLM"),Xko=o(" (Megatron-BERT model)"),zko=l(),g2=a("li"),Yge=a("strong"),Qko=o("mvp"),Wko=o(" \u2014 "),TO=a("a"),Hko=o("MvpForCausalLM"),Uko=o(" (MVP model)"),Jko=l(),h2=a("li"),Kge=a("strong"),Yko=o("openai-gpt"),Kko=o(" \u2014 "),MO=a("a"),Zko=o("OpenAIGPTLMHeadModel"),eSo=o(" (OpenAI GPT model)"),oSo=l(),p2=a("li"),Zge=a("strong"),rSo=o("opt"),tSo=o(" \u2014 "),EO=a("a"),aSo=o("OPTForCausalLM"),nSo=o(" (OPT model)"),sSo=l(),_2=a("li"),ehe=a("strong"),lSo=o("pegasus"),iSo=o(" \u2014 "),CO=a("a"),dSo=o("PegasusForCausalLM"),cSo=o(" (Pegasus model)"),fSo=l(),u2=a("li"),ohe=a("strong"),mSo=o("plbart"),gSo=o(" \u2014 "),wO=a("a"),hSo=o("PLBartForCausalLM"),pSo=o(" (PLBart model)"),_So=l(),b2=a("li"),rhe=a("strong"),uSo=o("prophetnet"),bSo=o(" \u2014 "),AO=a("a"),vSo=o("ProphetNetForCausalLM"),FSo=o(" (ProphetNet model)"),TSo=l(),v2=a("li"),the=a("strong"),MSo=o("qdqbert"),ESo=o(" \u2014 "),LO=a("a"),CSo=o("QDQBertLMHeadModel"),wSo=o(" (QDQBert model)"),ASo=l(),F2=a("li"),ahe=a("strong"),LSo=o("reformer"),ySo=o(" \u2014 "),yO=a("a"),xSo=o("ReformerModelWithLMHead"),$So=o(" (Reformer model)"),kSo=l(),T2=a("li"),nhe=a("strong"),SSo=o("rembert"),RSo=o(" \u2014 "),xO=a("a"),PSo=o("RemBertForCausalLM"),BSo=o(" (RemBERT model)"),ISo=l(),M2=a("li"),she=a("strong"),NSo=o("roberta"),qSo=o(" \u2014 "),$O=a("a"),jSo=o("RobertaForCausalLM"),DSo=o(" (RoBERTa model)"),GSo=l(),E2=a("li"),lhe=a("strong"),OSo=o("roformer"),VSo=o(" \u2014 "),kO=a("a"),XSo=o("RoFormerForCausalLM"),zSo=o(" (RoFormer model)"),QSo=l(),C2=a("li"),ihe=a("strong"),WSo=o("speech_to_text_2"),HSo=o(" \u2014 "),SO=a("a"),USo=o("Speech2Text2ForCausalLM"),JSo=o(" (Speech2Text2 model)"),YSo=l(),w2=a("li"),dhe=a("strong"),KSo=o("transfo-xl"),ZSo=o(" \u2014 "),RO=a("a"),eRo=o("TransfoXLLMHeadModel"),oRo=o(" (Transformer-XL model)"),rRo=l(),A2=a("li"),che=a("strong"),tRo=o("trocr"),aRo=o(" \u2014 "),PO=a("a"),nRo=o("TrOCRForCausalLM"),sRo=o(" (TrOCR model)"),lRo=l(),L2=a("li"),fhe=a("strong"),iRo=o("xglm"),dRo=o(" \u2014 "),BO=a("a"),cRo=o("XGLMForCausalLM"),fRo=o(" (XGLM model)"),mRo=l(),y2=a("li"),mhe=a("strong"),gRo=o("xlm"),hRo=o(" \u2014 "),IO=a("a"),pRo=o("XLMWithLMHeadModel"),_Ro=o(" (XLM model)"),uRo=l(),x2=a("li"),ghe=a("strong"),bRo=o("xlm-prophetnet"),vRo=o(" \u2014 "),NO=a("a"),FRo=o("XLMProphetNetForCausalLM"),TRo=o(" (XLM-ProphetNet model)"),MRo=l(),$2=a("li"),hhe=a("strong"),ERo=o("xlm-roberta"),CRo=o(" \u2014 "),qO=a("a"),wRo=o("XLMRobertaForCausalLM"),ARo=o(" (XLM-RoBERTa model)"),LRo=l(),k2=a("li"),phe=a("strong"),yRo=o("xlm-roberta-xl"),xRo=o(" \u2014 "),jO=a("a"),$Ro=o("XLMRobertaXLForCausalLM"),kRo=o(" (XLM-RoBERTa-XL model)"),SRo=l(),S2=a("li"),_he=a("strong"),RRo=o("xlnet"),PRo=o(" \u2014 "),DO=a("a"),BRo=o("XLNetLMHeadModel"),IRo=o(" (XLNet model)"),NRo=l(),R2=a("p"),qRo=o("The model is set in evaluation mode by default using "),uhe=a("code"),jRo=o("model.eval()"),DRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),GRo=o("model.train()"),ORo=l(),F(P2.$$.fragment),CXe=l(),Ui=a("h2"),B2=a("a"),vhe=a("span"),F(HL.$$.fragment),VRo=l(),Fhe=a("span"),XRo=o("AutoModelForMaskedLM"),wXe=l(),So=a("div"),F(UL.$$.fragment),zRo=l(),Ji=a("p"),QRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GO=a("a"),WRo=o("from_pretrained()"),HRo=o(" class method or the "),OO=a("a"),URo=o("from_config()"),JRo=o(` class
method.`),YRo=l(),JL=a("p"),KRo=o("This class cannot be instantiated directly using "),The=a("code"),ZRo=o("__init__()"),ePo=o(" (throws an error)."),oPo=l(),ct=a("div"),F(YL.$$.fragment),rPo=l(),Mhe=a("p"),tPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aPo=l(),Yi=a("p"),nPo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),sPo=o("not"),lPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),iPo=o("from_pretrained()"),dPo=o(" to load the model weights."),cPo=l(),F(I2.$$.fragment),fPo=l(),Ze=a("div"),F(KL.$$.fragment),mPo=l(),Che=a("p"),gPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hPo=l(),ja=a("p"),pPo=o("The model class to instantiate is selected based on the "),whe=a("code"),_Po=o("model_type"),uPo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),bPo=o("pretrained_model_name_or_path"),vPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),FPo=o("pretrained_model_name_or_path"),TPo=o(":"),MPo=l(),W=a("ul"),N2=a("li"),yhe=a("strong"),EPo=o("albert"),CPo=o(" \u2014 "),XO=a("a"),wPo=o("AlbertForMaskedLM"),APo=o(" (ALBERT model)"),LPo=l(),q2=a("li"),xhe=a("strong"),yPo=o("bart"),xPo=o(" \u2014 "),zO=a("a"),$Po=o("BartForConditionalGeneration"),kPo=o(" (BART model)"),SPo=l(),j2=a("li"),$he=a("strong"),RPo=o("bert"),PPo=o(" \u2014 "),QO=a("a"),BPo=o("BertForMaskedLM"),IPo=o(" (BERT model)"),NPo=l(),D2=a("li"),khe=a("strong"),qPo=o("big_bird"),jPo=o(" \u2014 "),WO=a("a"),DPo=o("BigBirdForMaskedLM"),GPo=o(" (BigBird model)"),OPo=l(),G2=a("li"),She=a("strong"),VPo=o("camembert"),XPo=o(" \u2014 "),HO=a("a"),zPo=o("CamembertForMaskedLM"),QPo=o(" (CamemBERT model)"),WPo=l(),O2=a("li"),Rhe=a("strong"),HPo=o("convbert"),UPo=o(" \u2014 "),UO=a("a"),JPo=o("ConvBertForMaskedLM"),YPo=o(" (ConvBERT model)"),KPo=l(),V2=a("li"),Phe=a("strong"),ZPo=o("data2vec-text"),eBo=o(" \u2014 "),JO=a("a"),oBo=o("Data2VecTextForMaskedLM"),rBo=o(" (Data2VecText model)"),tBo=l(),X2=a("li"),Bhe=a("strong"),aBo=o("deberta"),nBo=o(" \u2014 "),YO=a("a"),sBo=o("DebertaForMaskedLM"),lBo=o(" (DeBERTa model)"),iBo=l(),z2=a("li"),Ihe=a("strong"),dBo=o("deberta-v2"),cBo=o(" \u2014 "),KO=a("a"),fBo=o("DebertaV2ForMaskedLM"),mBo=o(" (DeBERTa-v2 model)"),gBo=l(),Q2=a("li"),Nhe=a("strong"),hBo=o("distilbert"),pBo=o(" \u2014 "),ZO=a("a"),_Bo=o("DistilBertForMaskedLM"),uBo=o(" (DistilBERT model)"),bBo=l(),W2=a("li"),qhe=a("strong"),vBo=o("electra"),FBo=o(" \u2014 "),eV=a("a"),TBo=o("ElectraForMaskedLM"),MBo=o(" (ELECTRA model)"),EBo=l(),H2=a("li"),jhe=a("strong"),CBo=o("flaubert"),wBo=o(" \u2014 "),oV=a("a"),ABo=o("FlaubertWithLMHeadModel"),LBo=o(" (FlauBERT model)"),yBo=l(),U2=a("li"),Dhe=a("strong"),xBo=o("fnet"),$Bo=o(" \u2014 "),rV=a("a"),kBo=o("FNetForMaskedLM"),SBo=o(" (FNet model)"),RBo=l(),J2=a("li"),Ghe=a("strong"),PBo=o("funnel"),BBo=o(" \u2014 "),tV=a("a"),IBo=o("FunnelForMaskedLM"),NBo=o(" (Funnel Transformer model)"),qBo=l(),Y2=a("li"),Ohe=a("strong"),jBo=o("ibert"),DBo=o(" \u2014 "),aV=a("a"),GBo=o("IBertForMaskedLM"),OBo=o(" (I-BERT model)"),VBo=l(),K2=a("li"),Vhe=a("strong"),XBo=o("layoutlm"),zBo=o(" \u2014 "),nV=a("a"),QBo=o("LayoutLMForMaskedLM"),WBo=o(" (LayoutLM model)"),HBo=l(),Z2=a("li"),Xhe=a("strong"),UBo=o("longformer"),JBo=o(" \u2014 "),sV=a("a"),YBo=o("LongformerForMaskedLM"),KBo=o(" (Longformer model)"),ZBo=l(),eb=a("li"),zhe=a("strong"),eIo=o("luke"),oIo=o(" \u2014 "),lV=a("a"),rIo=o("LukeForMaskedLM"),tIo=o(" (LUKE model)"),aIo=l(),ob=a("li"),Qhe=a("strong"),nIo=o("mbart"),sIo=o(" \u2014 "),iV=a("a"),lIo=o("MBartForConditionalGeneration"),iIo=o(" (mBART model)"),dIo=l(),rb=a("li"),Whe=a("strong"),cIo=o("megatron-bert"),fIo=o(" \u2014 "),dV=a("a"),mIo=o("MegatronBertForMaskedLM"),gIo=o(" (Megatron-BERT model)"),hIo=l(),tb=a("li"),Hhe=a("strong"),pIo=o("mobilebert"),_Io=o(" \u2014 "),cV=a("a"),uIo=o("MobileBertForMaskedLM"),bIo=o(" (MobileBERT model)"),vIo=l(),ab=a("li"),Uhe=a("strong"),FIo=o("mpnet"),TIo=o(" \u2014 "),fV=a("a"),MIo=o("MPNetForMaskedLM"),EIo=o(" (MPNet model)"),CIo=l(),nb=a("li"),Jhe=a("strong"),wIo=o("mvp"),AIo=o(" \u2014 "),mV=a("a"),LIo=o("MvpForConditionalGeneration"),yIo=o(" (MVP model)"),xIo=l(),sb=a("li"),Yhe=a("strong"),$Io=o("nezha"),kIo=o(" \u2014 "),gV=a("a"),SIo=o("NezhaForMaskedLM"),RIo=o(" (Nezha model)"),PIo=l(),lb=a("li"),Khe=a("strong"),BIo=o("nystromformer"),IIo=o(" \u2014 "),hV=a("a"),NIo=o("NystromformerForMaskedLM"),qIo=o(" (Nystr\xF6mformer model)"),jIo=l(),ib=a("li"),Zhe=a("strong"),DIo=o("perceiver"),GIo=o(" \u2014 "),pV=a("a"),OIo=o("PerceiverForMaskedLM"),VIo=o(" (Perceiver model)"),XIo=l(),db=a("li"),epe=a("strong"),zIo=o("qdqbert"),QIo=o(" \u2014 "),_V=a("a"),WIo=o("QDQBertForMaskedLM"),HIo=o(" (QDQBert model)"),UIo=l(),cb=a("li"),ope=a("strong"),JIo=o("reformer"),YIo=o(" \u2014 "),uV=a("a"),KIo=o("ReformerForMaskedLM"),ZIo=o(" (Reformer model)"),eNo=l(),fb=a("li"),rpe=a("strong"),oNo=o("rembert"),rNo=o(" \u2014 "),bV=a("a"),tNo=o("RemBertForMaskedLM"),aNo=o(" (RemBERT model)"),nNo=l(),mb=a("li"),tpe=a("strong"),sNo=o("roberta"),lNo=o(" \u2014 "),vV=a("a"),iNo=o("RobertaForMaskedLM"),dNo=o(" (RoBERTa model)"),cNo=l(),gb=a("li"),ape=a("strong"),fNo=o("roformer"),mNo=o(" \u2014 "),FV=a("a"),gNo=o("RoFormerForMaskedLM"),hNo=o(" (RoFormer model)"),pNo=l(),hb=a("li"),npe=a("strong"),_No=o("squeezebert"),uNo=o(" \u2014 "),TV=a("a"),bNo=o("SqueezeBertForMaskedLM"),vNo=o(" (SqueezeBERT model)"),FNo=l(),pb=a("li"),spe=a("strong"),TNo=o("tapas"),MNo=o(" \u2014 "),MV=a("a"),ENo=o("TapasForMaskedLM"),CNo=o(" (TAPAS model)"),wNo=l(),_b=a("li"),lpe=a("strong"),ANo=o("wav2vec2"),LNo=o(" \u2014 "),ipe=a("code"),yNo=o("Wav2Vec2ForMaskedLM"),xNo=o(" (Wav2Vec2 model)"),$No=l(),ub=a("li"),dpe=a("strong"),kNo=o("xlm"),SNo=o(" \u2014 "),EV=a("a"),RNo=o("XLMWithLMHeadModel"),PNo=o(" (XLM model)"),BNo=l(),bb=a("li"),cpe=a("strong"),INo=o("xlm-roberta"),NNo=o(" \u2014 "),CV=a("a"),qNo=o("XLMRobertaForMaskedLM"),jNo=o(" (XLM-RoBERTa model)"),DNo=l(),vb=a("li"),fpe=a("strong"),GNo=o("xlm-roberta-xl"),ONo=o(" \u2014 "),wV=a("a"),VNo=o("XLMRobertaXLForMaskedLM"),XNo=o(" (XLM-RoBERTa-XL model)"),zNo=l(),Fb=a("li"),mpe=a("strong"),QNo=o("yoso"),WNo=o(" \u2014 "),AV=a("a"),HNo=o("YosoForMaskedLM"),UNo=o(" (YOSO model)"),JNo=l(),Tb=a("p"),YNo=o("The model is set in evaluation mode by default using "),gpe=a("code"),KNo=o("model.eval()"),ZNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),eqo=o("model.train()"),oqo=l(),F(Mb.$$.fragment),AXe=l(),Ki=a("h2"),Eb=a("a"),ppe=a("span"),F(ZL.$$.fragment),rqo=l(),_pe=a("span"),tqo=o("AutoModelForSeq2SeqLM"),LXe=l(),Ro=a("div"),F(ey.$$.fragment),aqo=l(),Zi=a("p"),nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LV=a("a"),sqo=o("from_pretrained()"),lqo=o(" class method or the "),yV=a("a"),iqo=o("from_config()"),dqo=o(` class
method.`),cqo=l(),oy=a("p"),fqo=o("This class cannot be instantiated directly using "),upe=a("code"),mqo=o("__init__()"),gqo=o(" (throws an error)."),hqo=l(),ft=a("div"),F(ry.$$.fragment),pqo=l(),bpe=a("p"),_qo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uqo=l(),ed=a("p"),bqo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),vqo=o("not"),Fqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),Tqo=o("from_pretrained()"),Mqo=o(" to load the model weights."),Eqo=l(),F(Cb.$$.fragment),Cqo=l(),eo=a("div"),F(ty.$$.fragment),wqo=l(),Fpe=a("p"),Aqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lqo=l(),Da=a("p"),yqo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),xqo=o("model_type"),$qo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),kqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),Rqo=o("pretrained_model_name_or_path"),Pqo=o(":"),Bqo=l(),pe=a("ul"),wb=a("li"),Cpe=a("strong"),Iqo=o("bart"),Nqo=o(" \u2014 "),$V=a("a"),qqo=o("BartForConditionalGeneration"),jqo=o(" (BART model)"),Dqo=l(),Ab=a("li"),wpe=a("strong"),Gqo=o("bigbird_pegasus"),Oqo=o(" \u2014 "),kV=a("a"),Vqo=o("BigBirdPegasusForConditionalGeneration"),Xqo=o(" (BigBird-Pegasus model)"),zqo=l(),Lb=a("li"),Ape=a("strong"),Qqo=o("blenderbot"),Wqo=o(" \u2014 "),SV=a("a"),Hqo=o("BlenderbotForConditionalGeneration"),Uqo=o(" (Blenderbot model)"),Jqo=l(),yb=a("li"),Lpe=a("strong"),Yqo=o("blenderbot-small"),Kqo=o(" \u2014 "),RV=a("a"),Zqo=o("BlenderbotSmallForConditionalGeneration"),ejo=o(" (BlenderbotSmall model)"),ojo=l(),xb=a("li"),ype=a("strong"),rjo=o("encoder-decoder"),tjo=o(" \u2014 "),PV=a("a"),ajo=o("EncoderDecoderModel"),njo=o(" (Encoder decoder model)"),sjo=l(),$b=a("li"),xpe=a("strong"),ljo=o("fsmt"),ijo=o(" \u2014 "),BV=a("a"),djo=o("FSMTForConditionalGeneration"),cjo=o(" (FairSeq Machine-Translation model)"),fjo=l(),kb=a("li"),$pe=a("strong"),mjo=o("led"),gjo=o(" \u2014 "),IV=a("a"),hjo=o("LEDForConditionalGeneration"),pjo=o(" (LED model)"),_jo=l(),Sb=a("li"),kpe=a("strong"),ujo=o("longt5"),bjo=o(" \u2014 "),NV=a("a"),vjo=o("LongT5ForConditionalGeneration"),Fjo=o(" (LongT5 model)"),Tjo=l(),Rb=a("li"),Spe=a("strong"),Mjo=o("m2m_100"),Ejo=o(" \u2014 "),qV=a("a"),Cjo=o("M2M100ForConditionalGeneration"),wjo=o(" (M2M100 model)"),Ajo=l(),Pb=a("li"),Rpe=a("strong"),Ljo=o("marian"),yjo=o(" \u2014 "),jV=a("a"),xjo=o("MarianMTModel"),$jo=o(" (Marian model)"),kjo=l(),Bb=a("li"),Ppe=a("strong"),Sjo=o("mbart"),Rjo=o(" \u2014 "),DV=a("a"),Pjo=o("MBartForConditionalGeneration"),Bjo=o(" (mBART model)"),Ijo=l(),Ib=a("li"),Bpe=a("strong"),Njo=o("mt5"),qjo=o(" \u2014 "),GV=a("a"),jjo=o("MT5ForConditionalGeneration"),Djo=o(" (MT5 model)"),Gjo=l(),Nb=a("li"),Ipe=a("strong"),Ojo=o("mvp"),Vjo=o(" \u2014 "),OV=a("a"),Xjo=o("MvpForConditionalGeneration"),zjo=o(" (MVP model)"),Qjo=l(),qb=a("li"),Npe=a("strong"),Wjo=o("pegasus"),Hjo=o(" \u2014 "),VV=a("a"),Ujo=o("PegasusForConditionalGeneration"),Jjo=o(" (Pegasus model)"),Yjo=l(),jb=a("li"),qpe=a("strong"),Kjo=o("plbart"),Zjo=o(" \u2014 "),XV=a("a"),eDo=o("PLBartForConditionalGeneration"),oDo=o(" (PLBart model)"),rDo=l(),Db=a("li"),jpe=a("strong"),tDo=o("prophetnet"),aDo=o(" \u2014 "),zV=a("a"),nDo=o("ProphetNetForConditionalGeneration"),sDo=o(" (ProphetNet model)"),lDo=l(),Gb=a("li"),Dpe=a("strong"),iDo=o("t5"),dDo=o(" \u2014 "),QV=a("a"),cDo=o("T5ForConditionalGeneration"),fDo=o(" (T5 model)"),mDo=l(),Ob=a("li"),Gpe=a("strong"),gDo=o("xlm-prophetnet"),hDo=o(" \u2014 "),WV=a("a"),pDo=o("XLMProphetNetForConditionalGeneration"),_Do=o(" (XLM-ProphetNet model)"),uDo=l(),Vb=a("p"),bDo=o("The model is set in evaluation mode by default using "),Ope=a("code"),vDo=o("model.eval()"),FDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),TDo=o("model.train()"),MDo=l(),F(Xb.$$.fragment),yXe=l(),od=a("h2"),zb=a("a"),Xpe=a("span"),F(ay.$$.fragment),EDo=l(),zpe=a("span"),CDo=o("AutoModelForSequenceClassification"),xXe=l(),Po=a("div"),F(ny.$$.fragment),wDo=l(),rd=a("p"),ADo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HV=a("a"),LDo=o("from_pretrained()"),yDo=o(" class method or the "),UV=a("a"),xDo=o("from_config()"),$Do=o(` class
method.`),kDo=l(),sy=a("p"),SDo=o("This class cannot be instantiated directly using "),Qpe=a("code"),RDo=o("__init__()"),PDo=o(" (throws an error)."),BDo=l(),mt=a("div"),F(ly.$$.fragment),IDo=l(),Wpe=a("p"),NDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qDo=l(),td=a("p"),jDo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),DDo=o("not"),GDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),ODo=o("from_pretrained()"),VDo=o(" to load the model weights."),XDo=l(),F(Qb.$$.fragment),zDo=l(),oo=a("div"),F(iy.$$.fragment),QDo=l(),Upe=a("p"),WDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HDo=l(),Ga=a("p"),UDo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),JDo=o("model_type"),YDo=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),KDo=o("pretrained_model_name_or_path"),ZDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),eGo=o("pretrained_model_name_or_path"),oGo=o(":"),rGo=l(),N=a("ul"),Wb=a("li"),Zpe=a("strong"),tGo=o("albert"),aGo=o(" \u2014 "),YV=a("a"),nGo=o("AlbertForSequenceClassification"),sGo=o(" (ALBERT model)"),lGo=l(),Hb=a("li"),e_e=a("strong"),iGo=o("bart"),dGo=o(" \u2014 "),KV=a("a"),cGo=o("BartForSequenceClassification"),fGo=o(" (BART model)"),mGo=l(),Ub=a("li"),o_e=a("strong"),gGo=o("bert"),hGo=o(" \u2014 "),ZV=a("a"),pGo=o("BertForSequenceClassification"),_Go=o(" (BERT model)"),uGo=l(),Jb=a("li"),r_e=a("strong"),bGo=o("big_bird"),vGo=o(" \u2014 "),eX=a("a"),FGo=o("BigBirdForSequenceClassification"),TGo=o(" (BigBird model)"),MGo=l(),Yb=a("li"),t_e=a("strong"),EGo=o("bigbird_pegasus"),CGo=o(" \u2014 "),oX=a("a"),wGo=o("BigBirdPegasusForSequenceClassification"),AGo=o(" (BigBird-Pegasus model)"),LGo=l(),Kb=a("li"),a_e=a("strong"),yGo=o("bloom"),xGo=o(" \u2014 "),rX=a("a"),$Go=o("BloomForSequenceClassification"),kGo=o(" (BLOOM model)"),SGo=l(),Zb=a("li"),n_e=a("strong"),RGo=o("camembert"),PGo=o(" \u2014 "),tX=a("a"),BGo=o("CamembertForSequenceClassification"),IGo=o(" (CamemBERT model)"),NGo=l(),ev=a("li"),s_e=a("strong"),qGo=o("canine"),jGo=o(" \u2014 "),aX=a("a"),DGo=o("CanineForSequenceClassification"),GGo=o(" (CANINE model)"),OGo=l(),ov=a("li"),l_e=a("strong"),VGo=o("convbert"),XGo=o(" \u2014 "),nX=a("a"),zGo=o("ConvBertForSequenceClassification"),QGo=o(" (ConvBERT model)"),WGo=l(),rv=a("li"),i_e=a("strong"),HGo=o("ctrl"),UGo=o(" \u2014 "),sX=a("a"),JGo=o("CTRLForSequenceClassification"),YGo=o(" (CTRL model)"),KGo=l(),tv=a("li"),d_e=a("strong"),ZGo=o("data2vec-text"),eOo=o(" \u2014 "),lX=a("a"),oOo=o("Data2VecTextForSequenceClassification"),rOo=o(" (Data2VecText model)"),tOo=l(),av=a("li"),c_e=a("strong"),aOo=o("deberta"),nOo=o(" \u2014 "),iX=a("a"),sOo=o("DebertaForSequenceClassification"),lOo=o(" (DeBERTa model)"),iOo=l(),nv=a("li"),f_e=a("strong"),dOo=o("deberta-v2"),cOo=o(" \u2014 "),dX=a("a"),fOo=o("DebertaV2ForSequenceClassification"),mOo=o(" (DeBERTa-v2 model)"),gOo=l(),sv=a("li"),m_e=a("strong"),hOo=o("distilbert"),pOo=o(" \u2014 "),cX=a("a"),_Oo=o("DistilBertForSequenceClassification"),uOo=o(" (DistilBERT model)"),bOo=l(),lv=a("li"),g_e=a("strong"),vOo=o("electra"),FOo=o(" \u2014 "),fX=a("a"),TOo=o("ElectraForSequenceClassification"),MOo=o(" (ELECTRA model)"),EOo=l(),iv=a("li"),h_e=a("strong"),COo=o("flaubert"),wOo=o(" \u2014 "),mX=a("a"),AOo=o("FlaubertForSequenceClassification"),LOo=o(" (FlauBERT model)"),yOo=l(),dv=a("li"),p_e=a("strong"),xOo=o("fnet"),$Oo=o(" \u2014 "),gX=a("a"),kOo=o("FNetForSequenceClassification"),SOo=o(" (FNet model)"),ROo=l(),cv=a("li"),__e=a("strong"),POo=o("funnel"),BOo=o(" \u2014 "),hX=a("a"),IOo=o("FunnelForSequenceClassification"),NOo=o(" (Funnel Transformer model)"),qOo=l(),fv=a("li"),u_e=a("strong"),jOo=o("gpt2"),DOo=o(" \u2014 "),pX=a("a"),GOo=o("GPT2ForSequenceClassification"),OOo=o(" (OpenAI GPT-2 model)"),VOo=l(),mv=a("li"),b_e=a("strong"),XOo=o("gpt_neo"),zOo=o(" \u2014 "),_X=a("a"),QOo=o("GPTNeoForSequenceClassification"),WOo=o(" (GPT Neo model)"),HOo=l(),gv=a("li"),v_e=a("strong"),UOo=o("gptj"),JOo=o(" \u2014 "),uX=a("a"),YOo=o("GPTJForSequenceClassification"),KOo=o(" (GPT-J model)"),ZOo=l(),hv=a("li"),F_e=a("strong"),eVo=o("ibert"),oVo=o(" \u2014 "),bX=a("a"),rVo=o("IBertForSequenceClassification"),tVo=o(" (I-BERT model)"),aVo=l(),pv=a("li"),T_e=a("strong"),nVo=o("layoutlm"),sVo=o(" \u2014 "),vX=a("a"),lVo=o("LayoutLMForSequenceClassification"),iVo=o(" (LayoutLM model)"),dVo=l(),_v=a("li"),M_e=a("strong"),cVo=o("layoutlmv2"),fVo=o(" \u2014 "),FX=a("a"),mVo=o("LayoutLMv2ForSequenceClassification"),gVo=o(" (LayoutLMv2 model)"),hVo=l(),uv=a("li"),E_e=a("strong"),pVo=o("layoutlmv3"),_Vo=o(" \u2014 "),TX=a("a"),uVo=o("LayoutLMv3ForSequenceClassification"),bVo=o(" (LayoutLMv3 model)"),vVo=l(),bv=a("li"),C_e=a("strong"),FVo=o("led"),TVo=o(" \u2014 "),MX=a("a"),MVo=o("LEDForSequenceClassification"),EVo=o(" (LED model)"),CVo=l(),vv=a("li"),w_e=a("strong"),wVo=o("longformer"),AVo=o(" \u2014 "),EX=a("a"),LVo=o("LongformerForSequenceClassification"),yVo=o(" (Longformer model)"),xVo=l(),Fv=a("li"),A_e=a("strong"),$Vo=o("mbart"),kVo=o(" \u2014 "),CX=a("a"),SVo=o("MBartForSequenceClassification"),RVo=o(" (mBART model)"),PVo=l(),Tv=a("li"),L_e=a("strong"),BVo=o("megatron-bert"),IVo=o(" \u2014 "),wX=a("a"),NVo=o("MegatronBertForSequenceClassification"),qVo=o(" (Megatron-BERT model)"),jVo=l(),Mv=a("li"),y_e=a("strong"),DVo=o("mobilebert"),GVo=o(" \u2014 "),AX=a("a"),OVo=o("MobileBertForSequenceClassification"),VVo=o(" (MobileBERT model)"),XVo=l(),Ev=a("li"),x_e=a("strong"),zVo=o("mpnet"),QVo=o(" \u2014 "),LX=a("a"),WVo=o("MPNetForSequenceClassification"),HVo=o(" (MPNet model)"),UVo=l(),Cv=a("li"),$_e=a("strong"),JVo=o("mvp"),YVo=o(" \u2014 "),yX=a("a"),KVo=o("MvpForSequenceClassification"),ZVo=o(" (MVP model)"),eXo=l(),wv=a("li"),k_e=a("strong"),oXo=o("nezha"),rXo=o(" \u2014 "),xX=a("a"),tXo=o("NezhaForSequenceClassification"),aXo=o(" (Nezha model)"),nXo=l(),Av=a("li"),S_e=a("strong"),sXo=o("nystromformer"),lXo=o(" \u2014 "),$X=a("a"),iXo=o("NystromformerForSequenceClassification"),dXo=o(" (Nystr\xF6mformer model)"),cXo=l(),Lv=a("li"),R_e=a("strong"),fXo=o("openai-gpt"),mXo=o(" \u2014 "),kX=a("a"),gXo=o("OpenAIGPTForSequenceClassification"),hXo=o(" (OpenAI GPT model)"),pXo=l(),yv=a("li"),P_e=a("strong"),_Xo=o("perceiver"),uXo=o(" \u2014 "),SX=a("a"),bXo=o("PerceiverForSequenceClassification"),vXo=o(" (Perceiver model)"),FXo=l(),xv=a("li"),B_e=a("strong"),TXo=o("plbart"),MXo=o(" \u2014 "),RX=a("a"),EXo=o("PLBartForSequenceClassification"),CXo=o(" (PLBart model)"),wXo=l(),$v=a("li"),I_e=a("strong"),AXo=o("qdqbert"),LXo=o(" \u2014 "),PX=a("a"),yXo=o("QDQBertForSequenceClassification"),xXo=o(" (QDQBert model)"),$Xo=l(),kv=a("li"),N_e=a("strong"),kXo=o("reformer"),SXo=o(" \u2014 "),BX=a("a"),RXo=o("ReformerForSequenceClassification"),PXo=o(" (Reformer model)"),BXo=l(),Sv=a("li"),q_e=a("strong"),IXo=o("rembert"),NXo=o(" \u2014 "),IX=a("a"),qXo=o("RemBertForSequenceClassification"),jXo=o(" (RemBERT model)"),DXo=l(),Rv=a("li"),j_e=a("strong"),GXo=o("roberta"),OXo=o(" \u2014 "),NX=a("a"),VXo=o("RobertaForSequenceClassification"),XXo=o(" (RoBERTa model)"),zXo=l(),Pv=a("li"),D_e=a("strong"),QXo=o("roformer"),WXo=o(" \u2014 "),qX=a("a"),HXo=o("RoFormerForSequenceClassification"),UXo=o(" (RoFormer model)"),JXo=l(),Bv=a("li"),G_e=a("strong"),YXo=o("squeezebert"),KXo=o(" \u2014 "),jX=a("a"),ZXo=o("SqueezeBertForSequenceClassification"),ezo=o(" (SqueezeBERT model)"),ozo=l(),Iv=a("li"),O_e=a("strong"),rzo=o("tapas"),tzo=o(" \u2014 "),DX=a("a"),azo=o("TapasForSequenceClassification"),nzo=o(" (TAPAS model)"),szo=l(),Nv=a("li"),V_e=a("strong"),lzo=o("transfo-xl"),izo=o(" \u2014 "),GX=a("a"),dzo=o("TransfoXLForSequenceClassification"),czo=o(" (Transformer-XL model)"),fzo=l(),qv=a("li"),X_e=a("strong"),mzo=o("xlm"),gzo=o(" \u2014 "),OX=a("a"),hzo=o("XLMForSequenceClassification"),pzo=o(" (XLM model)"),_zo=l(),jv=a("li"),z_e=a("strong"),uzo=o("xlm-roberta"),bzo=o(" \u2014 "),VX=a("a"),vzo=o("XLMRobertaForSequenceClassification"),Fzo=o(" (XLM-RoBERTa model)"),Tzo=l(),Dv=a("li"),Q_e=a("strong"),Mzo=o("xlm-roberta-xl"),Ezo=o(" \u2014 "),XX=a("a"),Czo=o("XLMRobertaXLForSequenceClassification"),wzo=o(" (XLM-RoBERTa-XL model)"),Azo=l(),Gv=a("li"),W_e=a("strong"),Lzo=o("xlnet"),yzo=o(" \u2014 "),zX=a("a"),xzo=o("XLNetForSequenceClassification"),$zo=o(" (XLNet model)"),kzo=l(),Ov=a("li"),H_e=a("strong"),Szo=o("yoso"),Rzo=o(" \u2014 "),QX=a("a"),Pzo=o("YosoForSequenceClassification"),Bzo=o(" (YOSO model)"),Izo=l(),Vv=a("p"),Nzo=o("The model is set in evaluation mode by default using "),U_e=a("code"),qzo=o("model.eval()"),jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),Dzo=o("model.train()"),Gzo=l(),F(Xv.$$.fragment),$Xe=l(),ad=a("h2"),zv=a("a"),Y_e=a("span"),F(dy.$$.fragment),Ozo=l(),K_e=a("span"),Vzo=o("AutoModelForMultipleChoice"),kXe=l(),Bo=a("div"),F(cy.$$.fragment),Xzo=l(),nd=a("p"),zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=a("a"),Qzo=o("from_pretrained()"),Wzo=o(" class method or the "),HX=a("a"),Hzo=o("from_config()"),Uzo=o(` class
method.`),Jzo=l(),fy=a("p"),Yzo=o("This class cannot be instantiated directly using "),Z_e=a("code"),Kzo=o("__init__()"),Zzo=o(" (throws an error)."),eQo=l(),gt=a("div"),F(my.$$.fragment),oQo=l(),eue=a("p"),rQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tQo=l(),sd=a("p"),aQo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),nQo=o("not"),sQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),lQo=o("from_pretrained()"),iQo=o(" to load the model weights."),dQo=l(),F(Qv.$$.fragment),cQo=l(),ro=a("div"),F(gy.$$.fragment),fQo=l(),rue=a("p"),mQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gQo=l(),Oa=a("p"),hQo=o("The model class to instantiate is selected based on the "),tue=a("code"),pQo=o("model_type"),_Qo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),uQo=o("pretrained_model_name_or_path"),bQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),vQo=o("pretrained_model_name_or_path"),FQo=o(":"),TQo=l(),Z=a("ul"),Wv=a("li"),sue=a("strong"),MQo=o("albert"),EQo=o(" \u2014 "),JX=a("a"),CQo=o("AlbertForMultipleChoice"),wQo=o(" (ALBERT model)"),AQo=l(),Hv=a("li"),lue=a("strong"),LQo=o("bert"),yQo=o(" \u2014 "),YX=a("a"),xQo=o("BertForMultipleChoice"),$Qo=o(" (BERT model)"),kQo=l(),Uv=a("li"),iue=a("strong"),SQo=o("big_bird"),RQo=o(" \u2014 "),KX=a("a"),PQo=o("BigBirdForMultipleChoice"),BQo=o(" (BigBird model)"),IQo=l(),Jv=a("li"),due=a("strong"),NQo=o("camembert"),qQo=o(" \u2014 "),ZX=a("a"),jQo=o("CamembertForMultipleChoice"),DQo=o(" (CamemBERT model)"),GQo=l(),Yv=a("li"),cue=a("strong"),OQo=o("canine"),VQo=o(" \u2014 "),ez=a("a"),XQo=o("CanineForMultipleChoice"),zQo=o(" (CANINE model)"),QQo=l(),Kv=a("li"),fue=a("strong"),WQo=o("convbert"),HQo=o(" \u2014 "),oz=a("a"),UQo=o("ConvBertForMultipleChoice"),JQo=o(" (ConvBERT model)"),YQo=l(),Zv=a("li"),mue=a("strong"),KQo=o("data2vec-text"),ZQo=o(" \u2014 "),rz=a("a"),eWo=o("Data2VecTextForMultipleChoice"),oWo=o(" (Data2VecText model)"),rWo=l(),eF=a("li"),gue=a("strong"),tWo=o("deberta-v2"),aWo=o(" \u2014 "),tz=a("a"),nWo=o("DebertaV2ForMultipleChoice"),sWo=o(" (DeBERTa-v2 model)"),lWo=l(),oF=a("li"),hue=a("strong"),iWo=o("distilbert"),dWo=o(" \u2014 "),az=a("a"),cWo=o("DistilBertForMultipleChoice"),fWo=o(" (DistilBERT model)"),mWo=l(),rF=a("li"),pue=a("strong"),gWo=o("electra"),hWo=o(" \u2014 "),nz=a("a"),pWo=o("ElectraForMultipleChoice"),_Wo=o(" (ELECTRA model)"),uWo=l(),tF=a("li"),_ue=a("strong"),bWo=o("flaubert"),vWo=o(" \u2014 "),sz=a("a"),FWo=o("FlaubertForMultipleChoice"),TWo=o(" (FlauBERT model)"),MWo=l(),aF=a("li"),uue=a("strong"),EWo=o("fnet"),CWo=o(" \u2014 "),lz=a("a"),wWo=o("FNetForMultipleChoice"),AWo=o(" (FNet model)"),LWo=l(),nF=a("li"),bue=a("strong"),yWo=o("funnel"),xWo=o(" \u2014 "),iz=a("a"),$Wo=o("FunnelForMultipleChoice"),kWo=o(" (Funnel Transformer model)"),SWo=l(),sF=a("li"),vue=a("strong"),RWo=o("ibert"),PWo=o(" \u2014 "),dz=a("a"),BWo=o("IBertForMultipleChoice"),IWo=o(" (I-BERT model)"),NWo=l(),lF=a("li"),Fue=a("strong"),qWo=o("longformer"),jWo=o(" \u2014 "),cz=a("a"),DWo=o("LongformerForMultipleChoice"),GWo=o(" (Longformer model)"),OWo=l(),iF=a("li"),Tue=a("strong"),VWo=o("megatron-bert"),XWo=o(" \u2014 "),fz=a("a"),zWo=o("MegatronBertForMultipleChoice"),QWo=o(" (Megatron-BERT model)"),WWo=l(),dF=a("li"),Mue=a("strong"),HWo=o("mobilebert"),UWo=o(" \u2014 "),mz=a("a"),JWo=o("MobileBertForMultipleChoice"),YWo=o(" (MobileBERT model)"),KWo=l(),cF=a("li"),Eue=a("strong"),ZWo=o("mpnet"),eHo=o(" \u2014 "),gz=a("a"),oHo=o("MPNetForMultipleChoice"),rHo=o(" (MPNet model)"),tHo=l(),fF=a("li"),Cue=a("strong"),aHo=o("nezha"),nHo=o(" \u2014 "),hz=a("a"),sHo=o("NezhaForMultipleChoice"),lHo=o(" (Nezha model)"),iHo=l(),mF=a("li"),wue=a("strong"),dHo=o("nystromformer"),cHo=o(" \u2014 "),pz=a("a"),fHo=o("NystromformerForMultipleChoice"),mHo=o(" (Nystr\xF6mformer model)"),gHo=l(),gF=a("li"),Aue=a("strong"),hHo=o("qdqbert"),pHo=o(" \u2014 "),_z=a("a"),_Ho=o("QDQBertForMultipleChoice"),uHo=o(" (QDQBert model)"),bHo=l(),hF=a("li"),Lue=a("strong"),vHo=o("rembert"),FHo=o(" \u2014 "),uz=a("a"),THo=o("RemBertForMultipleChoice"),MHo=o(" (RemBERT model)"),EHo=l(),pF=a("li"),yue=a("strong"),CHo=o("roberta"),wHo=o(" \u2014 "),bz=a("a"),AHo=o("RobertaForMultipleChoice"),LHo=o(" (RoBERTa model)"),yHo=l(),_F=a("li"),xue=a("strong"),xHo=o("roformer"),$Ho=o(" \u2014 "),vz=a("a"),kHo=o("RoFormerForMultipleChoice"),SHo=o(" (RoFormer model)"),RHo=l(),uF=a("li"),$ue=a("strong"),PHo=o("squeezebert"),BHo=o(" \u2014 "),Fz=a("a"),IHo=o("SqueezeBertForMultipleChoice"),NHo=o(" (SqueezeBERT model)"),qHo=l(),bF=a("li"),kue=a("strong"),jHo=o("xlm"),DHo=o(" \u2014 "),Tz=a("a"),GHo=o("XLMForMultipleChoice"),OHo=o(" (XLM model)"),VHo=l(),vF=a("li"),Sue=a("strong"),XHo=o("xlm-roberta"),zHo=o(" \u2014 "),Mz=a("a"),QHo=o("XLMRobertaForMultipleChoice"),WHo=o(" (XLM-RoBERTa model)"),HHo=l(),FF=a("li"),Rue=a("strong"),UHo=o("xlm-roberta-xl"),JHo=o(" \u2014 "),Ez=a("a"),YHo=o("XLMRobertaXLForMultipleChoice"),KHo=o(" (XLM-RoBERTa-XL model)"),ZHo=l(),TF=a("li"),Pue=a("strong"),eUo=o("xlnet"),oUo=o(" \u2014 "),Cz=a("a"),rUo=o("XLNetForMultipleChoice"),tUo=o(" (XLNet model)"),aUo=l(),MF=a("li"),Bue=a("strong"),nUo=o("yoso"),sUo=o(" \u2014 "),wz=a("a"),lUo=o("YosoForMultipleChoice"),iUo=o(" (YOSO model)"),dUo=l(),EF=a("p"),cUo=o("The model is set in evaluation mode by default using "),Iue=a("code"),fUo=o("model.eval()"),mUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),gUo=o("model.train()"),hUo=l(),F(CF.$$.fragment),SXe=l(),ld=a("h2"),wF=a("a"),que=a("span"),F(hy.$$.fragment),pUo=l(),jue=a("span"),_Uo=o("AutoModelForNextSentencePrediction"),RXe=l(),Io=a("div"),F(py.$$.fragment),uUo=l(),id=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Az=a("a"),vUo=o("from_pretrained()"),FUo=o(" class method or the "),Lz=a("a"),TUo=o("from_config()"),MUo=o(` class
method.`),EUo=l(),_y=a("p"),CUo=o("This class cannot be instantiated directly using "),Due=a("code"),wUo=o("__init__()"),AUo=o(" (throws an error)."),LUo=l(),ht=a("div"),F(uy.$$.fragment),yUo=l(),Gue=a("p"),xUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Uo=l(),dd=a("p"),kUo=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),SUo=o("not"),RUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),PUo=o("from_pretrained()"),BUo=o(" to load the model weights."),IUo=l(),F(AF.$$.fragment),NUo=l(),to=a("div"),F(by.$$.fragment),qUo=l(),Vue=a("p"),jUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DUo=l(),Va=a("p"),GUo=o("The model class to instantiate is selected based on the "),Xue=a("code"),OUo=o("model_type"),VUo=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),QUo=o("pretrained_model_name_or_path"),WUo=o(":"),HUo=l(),No=a("ul"),LF=a("li"),Wue=a("strong"),UUo=o("bert"),JUo=o(" \u2014 "),xz=a("a"),YUo=o("BertForNextSentencePrediction"),KUo=o(" (BERT model)"),ZUo=l(),yF=a("li"),Hue=a("strong"),eJo=o("fnet"),oJo=o(" \u2014 "),$z=a("a"),rJo=o("FNetForNextSentencePrediction"),tJo=o(" (FNet model)"),aJo=l(),xF=a("li"),Uue=a("strong"),nJo=o("megatron-bert"),sJo=o(" \u2014 "),kz=a("a"),lJo=o("MegatronBertForNextSentencePrediction"),iJo=o(" (Megatron-BERT model)"),dJo=l(),$F=a("li"),Jue=a("strong"),cJo=o("mobilebert"),fJo=o(" \u2014 "),Sz=a("a"),mJo=o("MobileBertForNextSentencePrediction"),gJo=o(" (MobileBERT model)"),hJo=l(),kF=a("li"),Yue=a("strong"),pJo=o("nezha"),_Jo=o(" \u2014 "),Rz=a("a"),uJo=o("NezhaForNextSentencePrediction"),bJo=o(" (Nezha model)"),vJo=l(),SF=a("li"),Kue=a("strong"),FJo=o("qdqbert"),TJo=o(" \u2014 "),Pz=a("a"),MJo=o("QDQBertForNextSentencePrediction"),EJo=o(" (QDQBert model)"),CJo=l(),RF=a("p"),wJo=o("The model is set in evaluation mode by default using "),Zue=a("code"),AJo=o("model.eval()"),LJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),yJo=o("model.train()"),xJo=l(),F(PF.$$.fragment),PXe=l(),cd=a("h2"),BF=a("a"),o1e=a("span"),F(vy.$$.fragment),$Jo=l(),r1e=a("span"),kJo=o("AutoModelForTokenClassification"),BXe=l(),qo=a("div"),F(Fy.$$.fragment),SJo=l(),fd=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=a("a"),PJo=o("from_pretrained()"),BJo=o(" class method or the "),Iz=a("a"),IJo=o("from_config()"),NJo=o(` class
method.`),qJo=l(),Ty=a("p"),jJo=o("This class cannot be instantiated directly using "),t1e=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),pt=a("div"),F(My.$$.fragment),VJo=l(),a1e=a("p"),XJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zJo=l(),md=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),F(IF.$$.fragment),KJo=l(),ao=a("div"),F(Ey.$$.fragment),ZJo=l(),s1e=a("p"),eYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oYo=l(),Xa=a("p"),rYo=o("The model class to instantiate is selected based on the "),l1e=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),U=a("ul"),NF=a("li"),c1e=a("strong"),cYo=o("albert"),fYo=o(" \u2014 "),qz=a("a"),mYo=o("AlbertForTokenClassification"),gYo=o(" (ALBERT model)"),hYo=l(),qF=a("li"),f1e=a("strong"),pYo=o("bert"),_Yo=o(" \u2014 "),jz=a("a"),uYo=o("BertForTokenClassification"),bYo=o(" (BERT model)"),vYo=l(),jF=a("li"),m1e=a("strong"),FYo=o("big_bird"),TYo=o(" \u2014 "),Dz=a("a"),MYo=o("BigBirdForTokenClassification"),EYo=o(" (BigBird model)"),CYo=l(),DF=a("li"),g1e=a("strong"),wYo=o("bloom"),AYo=o(" \u2014 "),Gz=a("a"),LYo=o("BloomForTokenClassification"),yYo=o(" (BLOOM model)"),xYo=l(),GF=a("li"),h1e=a("strong"),$Yo=o("camembert"),kYo=o(" \u2014 "),Oz=a("a"),SYo=o("CamembertForTokenClassification"),RYo=o(" (CamemBERT model)"),PYo=l(),OF=a("li"),p1e=a("strong"),BYo=o("canine"),IYo=o(" \u2014 "),Vz=a("a"),NYo=o("CanineForTokenClassification"),qYo=o(" (CANINE model)"),jYo=l(),VF=a("li"),_1e=a("strong"),DYo=o("convbert"),GYo=o(" \u2014 "),Xz=a("a"),OYo=o("ConvBertForTokenClassification"),VYo=o(" (ConvBERT model)"),XYo=l(),XF=a("li"),u1e=a("strong"),zYo=o("data2vec-text"),QYo=o(" \u2014 "),zz=a("a"),WYo=o("Data2VecTextForTokenClassification"),HYo=o(" (Data2VecText model)"),UYo=l(),zF=a("li"),b1e=a("strong"),JYo=o("deberta"),YYo=o(" \u2014 "),Qz=a("a"),KYo=o("DebertaForTokenClassification"),ZYo=o(" (DeBERTa model)"),eKo=l(),QF=a("li"),v1e=a("strong"),oKo=o("deberta-v2"),rKo=o(" \u2014 "),Wz=a("a"),tKo=o("DebertaV2ForTokenClassification"),aKo=o(" (DeBERTa-v2 model)"),nKo=l(),WF=a("li"),F1e=a("strong"),sKo=o("distilbert"),lKo=o(" \u2014 "),Hz=a("a"),iKo=o("DistilBertForTokenClassification"),dKo=o(" (DistilBERT model)"),cKo=l(),HF=a("li"),T1e=a("strong"),fKo=o("electra"),mKo=o(" \u2014 "),Uz=a("a"),gKo=o("ElectraForTokenClassification"),hKo=o(" (ELECTRA model)"),pKo=l(),UF=a("li"),M1e=a("strong"),_Ko=o("flaubert"),uKo=o(" \u2014 "),Jz=a("a"),bKo=o("FlaubertForTokenClassification"),vKo=o(" (FlauBERT model)"),FKo=l(),JF=a("li"),E1e=a("strong"),TKo=o("fnet"),MKo=o(" \u2014 "),Yz=a("a"),EKo=o("FNetForTokenClassification"),CKo=o(" (FNet model)"),wKo=l(),YF=a("li"),C1e=a("strong"),AKo=o("funnel"),LKo=o(" \u2014 "),Kz=a("a"),yKo=o("FunnelForTokenClassification"),xKo=o(" (Funnel Transformer model)"),$Ko=l(),KF=a("li"),w1e=a("strong"),kKo=o("gpt2"),SKo=o(" \u2014 "),Zz=a("a"),RKo=o("GPT2ForTokenClassification"),PKo=o(" (OpenAI GPT-2 model)"),BKo=l(),ZF=a("li"),A1e=a("strong"),IKo=o("ibert"),NKo=o(" \u2014 "),eQ=a("a"),qKo=o("IBertForTokenClassification"),jKo=o(" (I-BERT model)"),DKo=l(),eT=a("li"),L1e=a("strong"),GKo=o("layoutlm"),OKo=o(" \u2014 "),oQ=a("a"),VKo=o("LayoutLMForTokenClassification"),XKo=o(" (LayoutLM model)"),zKo=l(),oT=a("li"),y1e=a("strong"),QKo=o("layoutlmv2"),WKo=o(" \u2014 "),rQ=a("a"),HKo=o("LayoutLMv2ForTokenClassification"),UKo=o(" (LayoutLMv2 model)"),JKo=l(),rT=a("li"),x1e=a("strong"),YKo=o("layoutlmv3"),KKo=o(" \u2014 "),tQ=a("a"),ZKo=o("LayoutLMv3ForTokenClassification"),eZo=o(" (LayoutLMv3 model)"),oZo=l(),tT=a("li"),$1e=a("strong"),rZo=o("longformer"),tZo=o(" \u2014 "),aQ=a("a"),aZo=o("LongformerForTokenClassification"),nZo=o(" (Longformer model)"),sZo=l(),aT=a("li"),k1e=a("strong"),lZo=o("megatron-bert"),iZo=o(" \u2014 "),nQ=a("a"),dZo=o("MegatronBertForTokenClassification"),cZo=o(" (Megatron-BERT model)"),fZo=l(),nT=a("li"),S1e=a("strong"),mZo=o("mobilebert"),gZo=o(" \u2014 "),sQ=a("a"),hZo=o("MobileBertForTokenClassification"),pZo=o(" (MobileBERT model)"),_Zo=l(),sT=a("li"),R1e=a("strong"),uZo=o("mpnet"),bZo=o(" \u2014 "),lQ=a("a"),vZo=o("MPNetForTokenClassification"),FZo=o(" (MPNet model)"),TZo=l(),lT=a("li"),P1e=a("strong"),MZo=o("nezha"),EZo=o(" \u2014 "),iQ=a("a"),CZo=o("NezhaForTokenClassification"),wZo=o(" (Nezha model)"),AZo=l(),iT=a("li"),B1e=a("strong"),LZo=o("nystromformer"),yZo=o(" \u2014 "),dQ=a("a"),xZo=o("NystromformerForTokenClassification"),$Zo=o(" (Nystr\xF6mformer model)"),kZo=l(),dT=a("li"),I1e=a("strong"),SZo=o("qdqbert"),RZo=o(" \u2014 "),cQ=a("a"),PZo=o("QDQBertForTokenClassification"),BZo=o(" (QDQBert model)"),IZo=l(),cT=a("li"),N1e=a("strong"),NZo=o("rembert"),qZo=o(" \u2014 "),fQ=a("a"),jZo=o("RemBertForTokenClassification"),DZo=o(" (RemBERT model)"),GZo=l(),fT=a("li"),q1e=a("strong"),OZo=o("roberta"),VZo=o(" \u2014 "),mQ=a("a"),XZo=o("RobertaForTokenClassification"),zZo=o(" (RoBERTa model)"),QZo=l(),mT=a("li"),j1e=a("strong"),WZo=o("roformer"),HZo=o(" \u2014 "),gQ=a("a"),UZo=o("RoFormerForTokenClassification"),JZo=o(" (RoFormer model)"),YZo=l(),gT=a("li"),D1e=a("strong"),KZo=o("squeezebert"),ZZo=o(" \u2014 "),hQ=a("a"),eer=o("SqueezeBertForTokenClassification"),oer=o(" (SqueezeBERT model)"),rer=l(),hT=a("li"),G1e=a("strong"),ter=o("xlm"),aer=o(" \u2014 "),pQ=a("a"),ner=o("XLMForTokenClassification"),ser=o(" (XLM model)"),ler=l(),pT=a("li"),O1e=a("strong"),ier=o("xlm-roberta"),der=o(" \u2014 "),_Q=a("a"),cer=o("XLMRobertaForTokenClassification"),fer=o(" (XLM-RoBERTa model)"),mer=l(),_T=a("li"),V1e=a("strong"),ger=o("xlm-roberta-xl"),her=o(" \u2014 "),uQ=a("a"),per=o("XLMRobertaXLForTokenClassification"),_er=o(" (XLM-RoBERTa-XL model)"),uer=l(),uT=a("li"),X1e=a("strong"),ber=o("xlnet"),ver=o(" \u2014 "),bQ=a("a"),Fer=o("XLNetForTokenClassification"),Ter=o(" (XLNet model)"),Mer=l(),bT=a("li"),z1e=a("strong"),Eer=o("yoso"),Cer=o(" \u2014 "),vQ=a("a"),wer=o("YosoForTokenClassification"),Aer=o(" (YOSO model)"),Ler=l(),vT=a("p"),yer=o("The model is set in evaluation mode by default using "),Q1e=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=a("code"),ker=o("model.train()"),Ser=l(),F(FT.$$.fragment),IXe=l(),gd=a("h2"),TT=a("a"),H1e=a("span"),F(Cy.$$.fragment),Rer=l(),U1e=a("span"),Per=o("AutoModelForQuestionAnswering"),NXe=l(),jo=a("div"),F(wy.$$.fragment),Ber=l(),hd=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FQ=a("a"),Ner=o("from_pretrained()"),qer=o(" class method or the "),TQ=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),Ay=a("p"),Oer=o("This class cannot be instantiated directly using "),J1e=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),_t=a("div"),F(Ly.$$.fragment),Qer=l(),Y1e=a("p"),Wer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Her=l(),pd=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(MT.$$.fragment),oor=l(),no=a("div"),F(yy.$$.fragment),ror=l(),Z1e=a("p"),tor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aor=l(),za=a("p"),nor=o("The model class to instantiate is selected based on the "),e2e=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),V=a("ul"),ET=a("li"),t2e=a("strong"),hor=o("albert"),por=o(" \u2014 "),EQ=a("a"),_or=o("AlbertForQuestionAnswering"),uor=o(" (ALBERT model)"),bor=l(),CT=a("li"),a2e=a("strong"),vor=o("bart"),For=o(" \u2014 "),CQ=a("a"),Tor=o("BartForQuestionAnswering"),Mor=o(" (BART model)"),Eor=l(),wT=a("li"),n2e=a("strong"),Cor=o("bert"),wor=o(" \u2014 "),wQ=a("a"),Aor=o("BertForQuestionAnswering"),Lor=o(" (BERT model)"),yor=l(),AT=a("li"),s2e=a("strong"),xor=o("big_bird"),$or=o(" \u2014 "),AQ=a("a"),kor=o("BigBirdForQuestionAnswering"),Sor=o(" (BigBird model)"),Ror=l(),LT=a("li"),l2e=a("strong"),Por=o("bigbird_pegasus"),Bor=o(" \u2014 "),LQ=a("a"),Ior=o("BigBirdPegasusForQuestionAnswering"),Nor=o(" (BigBird-Pegasus model)"),qor=l(),yT=a("li"),i2e=a("strong"),jor=o("camembert"),Dor=o(" \u2014 "),yQ=a("a"),Gor=o("CamembertForQuestionAnswering"),Oor=o(" (CamemBERT model)"),Vor=l(),xT=a("li"),d2e=a("strong"),Xor=o("canine"),zor=o(" \u2014 "),xQ=a("a"),Qor=o("CanineForQuestionAnswering"),Wor=o(" (CANINE model)"),Hor=l(),$T=a("li"),c2e=a("strong"),Uor=o("convbert"),Jor=o(" \u2014 "),$Q=a("a"),Yor=o("ConvBertForQuestionAnswering"),Kor=o(" (ConvBERT model)"),Zor=l(),kT=a("li"),f2e=a("strong"),err=o("data2vec-text"),orr=o(" \u2014 "),kQ=a("a"),rrr=o("Data2VecTextForQuestionAnswering"),trr=o(" (Data2VecText model)"),arr=l(),ST=a("li"),m2e=a("strong"),nrr=o("deberta"),srr=o(" \u2014 "),SQ=a("a"),lrr=o("DebertaForQuestionAnswering"),irr=o(" (DeBERTa model)"),drr=l(),RT=a("li"),g2e=a("strong"),crr=o("deberta-v2"),frr=o(" \u2014 "),RQ=a("a"),mrr=o("DebertaV2ForQuestionAnswering"),grr=o(" (DeBERTa-v2 model)"),hrr=l(),PT=a("li"),h2e=a("strong"),prr=o("distilbert"),_rr=o(" \u2014 "),PQ=a("a"),urr=o("DistilBertForQuestionAnswering"),brr=o(" (DistilBERT model)"),vrr=l(),BT=a("li"),p2e=a("strong"),Frr=o("electra"),Trr=o(" \u2014 "),BQ=a("a"),Mrr=o("ElectraForQuestionAnswering"),Err=o(" (ELECTRA model)"),Crr=l(),IT=a("li"),_2e=a("strong"),wrr=o("flaubert"),Arr=o(" \u2014 "),IQ=a("a"),Lrr=o("FlaubertForQuestionAnsweringSimple"),yrr=o(" (FlauBERT model)"),xrr=l(),NT=a("li"),u2e=a("strong"),$rr=o("fnet"),krr=o(" \u2014 "),NQ=a("a"),Srr=o("FNetForQuestionAnswering"),Rrr=o(" (FNet model)"),Prr=l(),qT=a("li"),b2e=a("strong"),Brr=o("funnel"),Irr=o(" \u2014 "),qQ=a("a"),Nrr=o("FunnelForQuestionAnswering"),qrr=o(" (Funnel Transformer model)"),jrr=l(),jT=a("li"),v2e=a("strong"),Drr=o("gptj"),Grr=o(" \u2014 "),jQ=a("a"),Orr=o("GPTJForQuestionAnswering"),Vrr=o(" (GPT-J model)"),Xrr=l(),DT=a("li"),F2e=a("strong"),zrr=o("ibert"),Qrr=o(" \u2014 "),DQ=a("a"),Wrr=o("IBertForQuestionAnswering"),Hrr=o(" (I-BERT model)"),Urr=l(),GT=a("li"),T2e=a("strong"),Jrr=o("layoutlmv2"),Yrr=o(" \u2014 "),GQ=a("a"),Krr=o("LayoutLMv2ForQuestionAnswering"),Zrr=o(" (LayoutLMv2 model)"),etr=l(),OT=a("li"),M2e=a("strong"),otr=o("layoutlmv3"),rtr=o(" \u2014 "),OQ=a("a"),ttr=o("LayoutLMv3ForQuestionAnswering"),atr=o(" (LayoutLMv3 model)"),ntr=l(),VT=a("li"),E2e=a("strong"),str=o("led"),ltr=o(" \u2014 "),VQ=a("a"),itr=o("LEDForQuestionAnswering"),dtr=o(" (LED model)"),ctr=l(),XT=a("li"),C2e=a("strong"),ftr=o("longformer"),mtr=o(" \u2014 "),XQ=a("a"),gtr=o("LongformerForQuestionAnswering"),htr=o(" (Longformer model)"),ptr=l(),zT=a("li"),w2e=a("strong"),_tr=o("lxmert"),utr=o(" \u2014 "),zQ=a("a"),btr=o("LxmertForQuestionAnswering"),vtr=o(" (LXMERT model)"),Ftr=l(),QT=a("li"),A2e=a("strong"),Ttr=o("mbart"),Mtr=o(" \u2014 "),QQ=a("a"),Etr=o("MBartForQuestionAnswering"),Ctr=o(" (mBART model)"),wtr=l(),WT=a("li"),L2e=a("strong"),Atr=o("megatron-bert"),Ltr=o(" \u2014 "),WQ=a("a"),ytr=o("MegatronBertForQuestionAnswering"),xtr=o(" (Megatron-BERT model)"),$tr=l(),HT=a("li"),y2e=a("strong"),ktr=o("mobilebert"),Str=o(" \u2014 "),HQ=a("a"),Rtr=o("MobileBertForQuestionAnswering"),Ptr=o(" (MobileBERT model)"),Btr=l(),UT=a("li"),x2e=a("strong"),Itr=o("mpnet"),Ntr=o(" \u2014 "),UQ=a("a"),qtr=o("MPNetForQuestionAnswering"),jtr=o(" (MPNet model)"),Dtr=l(),JT=a("li"),$2e=a("strong"),Gtr=o("mvp"),Otr=o(" \u2014 "),JQ=a("a"),Vtr=o("MvpForQuestionAnswering"),Xtr=o(" (MVP model)"),ztr=l(),YT=a("li"),k2e=a("strong"),Qtr=o("nezha"),Wtr=o(" \u2014 "),YQ=a("a"),Htr=o("NezhaForQuestionAnswering"),Utr=o(" (Nezha model)"),Jtr=l(),KT=a("li"),S2e=a("strong"),Ytr=o("nystromformer"),Ktr=o(" \u2014 "),KQ=a("a"),Ztr=o("NystromformerForQuestionAnswering"),ear=o(" (Nystr\xF6mformer model)"),oar=l(),ZT=a("li"),R2e=a("strong"),rar=o("qdqbert"),tar=o(" \u2014 "),ZQ=a("a"),aar=o("QDQBertForQuestionAnswering"),nar=o(" (QDQBert model)"),sar=l(),e7=a("li"),P2e=a("strong"),lar=o("reformer"),iar=o(" \u2014 "),eW=a("a"),dar=o("ReformerForQuestionAnswering"),car=o(" (Reformer model)"),far=l(),o7=a("li"),B2e=a("strong"),mar=o("rembert"),gar=o(" \u2014 "),oW=a("a"),har=o("RemBertForQuestionAnswering"),par=o(" (RemBERT model)"),_ar=l(),r7=a("li"),I2e=a("strong"),uar=o("roberta"),bar=o(" \u2014 "),rW=a("a"),Far=o("RobertaForQuestionAnswering"),Tar=o(" (RoBERTa model)"),Mar=l(),t7=a("li"),N2e=a("strong"),Ear=o("roformer"),Car=o(" \u2014 "),tW=a("a"),war=o("RoFormerForQuestionAnswering"),Aar=o(" (RoFormer model)"),Lar=l(),a7=a("li"),q2e=a("strong"),yar=o("splinter"),xar=o(" \u2014 "),aW=a("a"),$ar=o("SplinterForQuestionAnswering"),kar=o(" (Splinter model)"),Sar=l(),n7=a("li"),j2e=a("strong"),Rar=o("squeezebert"),Par=o(" \u2014 "),nW=a("a"),Bar=o("SqueezeBertForQuestionAnswering"),Iar=o(" (SqueezeBERT model)"),Nar=l(),s7=a("li"),D2e=a("strong"),qar=o("xlm"),jar=o(" \u2014 "),sW=a("a"),Dar=o("XLMForQuestionAnsweringSimple"),Gar=o(" (XLM model)"),Oar=l(),l7=a("li"),G2e=a("strong"),Var=o("xlm-roberta"),Xar=o(" \u2014 "),lW=a("a"),zar=o("XLMRobertaForQuestionAnswering"),Qar=o(" (XLM-RoBERTa model)"),War=l(),i7=a("li"),O2e=a("strong"),Har=o("xlm-roberta-xl"),Uar=o(" \u2014 "),iW=a("a"),Jar=o("XLMRobertaXLForQuestionAnswering"),Yar=o(" (XLM-RoBERTa-XL model)"),Kar=l(),d7=a("li"),V2e=a("strong"),Zar=o("xlnet"),enr=o(" \u2014 "),dW=a("a"),onr=o("XLNetForQuestionAnsweringSimple"),rnr=o(" (XLNet model)"),tnr=l(),c7=a("li"),X2e=a("strong"),anr=o("yoso"),nnr=o(" \u2014 "),cW=a("a"),snr=o("YosoForQuestionAnswering"),lnr=o(" (YOSO model)"),inr=l(),f7=a("p"),dnr=o("The model is set in evaluation mode by default using "),z2e=a("code"),cnr=o("model.eval()"),fnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=a("code"),mnr=o("model.train()"),gnr=l(),F(m7.$$.fragment),qXe=l(),_d=a("h2"),g7=a("a"),W2e=a("span"),F(xy.$$.fragment),hnr=l(),H2e=a("span"),pnr=o("AutoModelForTableQuestionAnswering"),jXe=l(),Do=a("div"),F($y.$$.fragment),_nr=l(),ud=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fW=a("a"),bnr=o("from_pretrained()"),vnr=o(" class method or the "),mW=a("a"),Fnr=o("from_config()"),Tnr=o(` class
method.`),Mnr=l(),ky=a("p"),Enr=o("This class cannot be instantiated directly using "),U2e=a("code"),Cnr=o("__init__()"),wnr=o(" (throws an error)."),Anr=l(),ut=a("div"),F(Sy.$$.fragment),Lnr=l(),J2e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xnr=l(),bd=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" to load the model weights."),Bnr=l(),F(h7.$$.fragment),Inr=l(),so=a("div"),F(Ry.$$.fragment),Nnr=l(),K2e=a("p"),qnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jnr=l(),Qa=a("p"),Dnr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),Gnr=o("model_type"),Onr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),znr=o("pretrained_model_name_or_path"),Qnr=o(":"),Wnr=l(),rbe=a("ul"),p7=a("li"),tbe=a("strong"),Hnr=o("tapas"),Unr=o(" \u2014 "),hW=a("a"),Jnr=o("TapasForQuestionAnswering"),Ynr=o(" (TAPAS model)"),Knr=l(),_7=a("p"),Znr=o("The model is set in evaluation mode by default using "),abe=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),rsr=o("model.train()"),tsr=l(),F(u7.$$.fragment),DXe=l(),vd=a("h2"),b7=a("a"),sbe=a("span"),F(Py.$$.fragment),asr=l(),lbe=a("span"),nsr=o("AutoModelForImageClassification"),GXe=l(),Go=a("div"),F(By.$$.fragment),ssr=l(),Fd=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pW=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),_W=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),Iy=a("p"),gsr=o("This class cannot be instantiated directly using "),ibe=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),bt=a("div"),F(Ny.$$.fragment),usr=l(),dbe=a("p"),bsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vsr=l(),Td=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(v7.$$.fragment),Asr=l(),lo=a("div"),F(qy.$$.fragment),Lsr=l(),fbe=a("p"),ysr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xsr=l(),Wa=a("p"),$sr=o("The model class to instantiate is selected based on the "),mbe=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(":"),Nsr=l(),ve=a("ul"),F7=a("li"),pbe=a("strong"),qsr=o("beit"),jsr=o(" \u2014 "),bW=a("a"),Dsr=o("BeitForImageClassification"),Gsr=o(" (BEiT model)"),Osr=l(),T7=a("li"),_be=a("strong"),Vsr=o("convnext"),Xsr=o(" \u2014 "),vW=a("a"),zsr=o("ConvNextForImageClassification"),Qsr=o(" (ConvNeXT model)"),Wsr=l(),M7=a("li"),ube=a("strong"),Hsr=o("cvt"),Usr=o(" \u2014 "),FW=a("a"),Jsr=o("CvtForImageClassification"),Ysr=o(" (CvT model)"),Ksr=l(),E7=a("li"),bbe=a("strong"),Zsr=o("data2vec-vision"),elr=o(" \u2014 "),TW=a("a"),olr=o("Data2VecVisionForImageClassification"),rlr=o(" (Data2VecVision model)"),tlr=l(),Hs=a("li"),vbe=a("strong"),alr=o("deit"),nlr=o(" \u2014 "),MW=a("a"),slr=o("DeiTForImageClassification"),llr=o(" or "),EW=a("a"),ilr=o("DeiTForImageClassificationWithTeacher"),dlr=o(" (DeiT model)"),clr=l(),C7=a("li"),Fbe=a("strong"),flr=o("imagegpt"),mlr=o(" \u2014 "),CW=a("a"),glr=o("ImageGPTForImageClassification"),hlr=o(" (ImageGPT model)"),plr=l(),Us=a("li"),Tbe=a("strong"),_lr=o("levit"),ulr=o(" \u2014 "),wW=a("a"),blr=o("LevitForImageClassification"),vlr=o(" or "),AW=a("a"),Flr=o("LevitForImageClassificationWithTeacher"),Tlr=o(" (LeViT model)"),Mlr=l(),w7=a("li"),Mbe=a("strong"),Elr=o("mobilevit"),Clr=o(" \u2014 "),LW=a("a"),wlr=o("MobileViTForImageClassification"),Alr=o(" (MobileViT model)"),Llr=l(),vt=a("li"),Ebe=a("strong"),ylr=o("perceiver"),xlr=o(" \u2014 "),yW=a("a"),$lr=o("PerceiverForImageClassificationLearned"),klr=o(" or "),xW=a("a"),Slr=o("PerceiverForImageClassificationFourier"),Rlr=o(" or "),$W=a("a"),Plr=o("PerceiverForImageClassificationConvProcessing"),Blr=o(" (Perceiver model)"),Ilr=l(),A7=a("li"),Cbe=a("strong"),Nlr=o("poolformer"),qlr=o(" \u2014 "),kW=a("a"),jlr=o("PoolFormerForImageClassification"),Dlr=o(" (PoolFormer model)"),Glr=l(),L7=a("li"),wbe=a("strong"),Olr=o("regnet"),Vlr=o(" \u2014 "),SW=a("a"),Xlr=o("RegNetForImageClassification"),zlr=o(" (RegNet model)"),Qlr=l(),y7=a("li"),Abe=a("strong"),Wlr=o("resnet"),Hlr=o(" \u2014 "),RW=a("a"),Ulr=o("ResNetForImageClassification"),Jlr=o(" (ResNet model)"),Ylr=l(),x7=a("li"),Lbe=a("strong"),Klr=o("segformer"),Zlr=o(" \u2014 "),PW=a("a"),eir=o("SegformerForImageClassification"),oir=o(" (SegFormer model)"),rir=l(),$7=a("li"),ybe=a("strong"),tir=o("swin"),air=o(" \u2014 "),BW=a("a"),nir=o("SwinForImageClassification"),sir=o(" (Swin Transformer model)"),lir=l(),k7=a("li"),xbe=a("strong"),iir=o("van"),dir=o(" \u2014 "),IW=a("a"),cir=o("VanForImageClassification"),fir=o(" (VAN model)"),mir=l(),S7=a("li"),$be=a("strong"),gir=o("vit"),hir=o(" \u2014 "),NW=a("a"),pir=o("ViTForImageClassification"),_ir=o(" (ViT model)"),uir=l(),R7=a("p"),bir=o("The model is set in evaluation mode by default using "),kbe=a("code"),vir=o("model.eval()"),Fir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),Tir=o("model.train()"),Mir=l(),F(P7.$$.fragment),OXe=l(),Md=a("h2"),B7=a("a"),Rbe=a("span"),F(jy.$$.fragment),Eir=l(),Pbe=a("span"),Cir=o("AutoModelForVision2Seq"),VXe=l(),Oo=a("div"),F(Dy.$$.fragment),wir=l(),Ed=a("p"),Air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qW=a("a"),Lir=o("from_pretrained()"),yir=o(" class method or the "),jW=a("a"),xir=o("from_config()"),$ir=o(` class
method.`),kir=l(),Gy=a("p"),Sir=o("This class cannot be instantiated directly using "),Bbe=a("code"),Rir=o("__init__()"),Pir=o(" (throws an error)."),Bir=l(),Ft=a("div"),F(Oy.$$.fragment),Iir=l(),Ibe=a("p"),Nir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qir=l(),Cd=a("p"),jir=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),Dir=o("not"),Gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),Oir=o("from_pretrained()"),Vir=o(" to load the model weights."),Xir=l(),F(I7.$$.fragment),zir=l(),io=a("div"),F(Vy.$$.fragment),Qir=l(),qbe=a("p"),Wir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hir=l(),Ha=a("p"),Uir=o("The model class to instantiate is selected based on the "),jbe=a("code"),Jir=o("model_type"),Yir=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),edr=o("pretrained_model_name_or_path"),odr=o(":"),rdr=l(),Obe=a("ul"),N7=a("li"),Vbe=a("strong"),tdr=o("vision-encoder-decoder"),adr=o(" \u2014 "),GW=a("a"),ndr=o("VisionEncoderDecoderModel"),sdr=o(" (Vision Encoder decoder model)"),ldr=l(),q7=a("p"),idr=o("The model is set in evaluation mode by default using "),Xbe=a("code"),ddr=o("model.eval()"),cdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=a("code"),fdr=o("model.train()"),mdr=l(),F(j7.$$.fragment),XXe=l(),wd=a("h2"),D7=a("a"),Qbe=a("span"),F(Xy.$$.fragment),gdr=l(),Wbe=a("span"),hdr=o("AutoModelForVisualQuestionAnswering"),zXe=l(),Vo=a("div"),F(zy.$$.fragment),pdr=l(),Ad=a("p"),_dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OW=a("a"),udr=o("from_pretrained()"),bdr=o(" class method or the "),VW=a("a"),vdr=o("from_config()"),Fdr=o(` class
method.`),Tdr=l(),Qy=a("p"),Mdr=o("This class cannot be instantiated directly using "),Hbe=a("code"),Edr=o("__init__()"),Cdr=o(" (throws an error)."),wdr=l(),Tt=a("div"),F(Wy.$$.fragment),Adr=l(),Ube=a("p"),Ldr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ydr=l(),Ld=a("p"),xdr=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),$dr=o("not"),kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" to load the model weights."),Pdr=l(),F(G7.$$.fragment),Bdr=l(),co=a("div"),F(Hy.$$.fragment),Idr=l(),Ybe=a("p"),Ndr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),qdr=l(),Ua=a("p"),jdr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),Ddr=o("model_type"),Gdr=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),Xdr=o("pretrained_model_name_or_path"),zdr=o(":"),Qdr=l(),ove=a("ul"),O7=a("li"),rve=a("strong"),Wdr=o("vilt"),Hdr=o(" \u2014 "),zW=a("a"),Udr=o("ViltForQuestionAnswering"),Jdr=o(" (ViLT model)"),Ydr=l(),V7=a("p"),Kdr=o("The model is set in evaluation mode by default using "),tve=a("code"),Zdr=o("model.eval()"),ecr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=a("code"),ocr=o("model.train()"),rcr=l(),F(X7.$$.fragment),QXe=l(),yd=a("h2"),z7=a("a"),nve=a("span"),F(Uy.$$.fragment),tcr=l(),sve=a("span"),acr=o("AutoModelForAudioClassification"),WXe=l(),Xo=a("div"),F(Jy.$$.fragment),ncr=l(),xd=a("p"),scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QW=a("a"),lcr=o("from_pretrained()"),icr=o(" class method or the "),WW=a("a"),dcr=o("from_config()"),ccr=o(` class
method.`),fcr=l(),Yy=a("p"),mcr=o("This class cannot be instantiated directly using "),lve=a("code"),gcr=o("__init__()"),hcr=o(" (throws an error)."),pcr=l(),Mt=a("div"),F(Ky.$$.fragment),_cr=l(),ive=a("p"),ucr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bcr=l(),$d=a("p"),vcr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),Fcr=o("not"),Tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" to load the model weights."),Ccr=l(),F(Q7.$$.fragment),wcr=l(),fo=a("div"),F(Zy.$$.fragment),Acr=l(),cve=a("p"),Lcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ycr=l(),Ja=a("p"),xcr=o("The model class to instantiate is selected based on the "),fve=a("code"),$cr=o("model_type"),kcr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),Pcr=o("pretrained_model_name_or_path"),Bcr=o(":"),Icr=l(),Pe=a("ul"),W7=a("li"),hve=a("strong"),Ncr=o("data2vec-audio"),qcr=o(" \u2014 "),UW=a("a"),jcr=o("Data2VecAudioForSequenceClassification"),Dcr=o(" (Data2VecAudio model)"),Gcr=l(),H7=a("li"),pve=a("strong"),Ocr=o("hubert"),Vcr=o(" \u2014 "),JW=a("a"),Xcr=o("HubertForSequenceClassification"),zcr=o(" (Hubert model)"),Qcr=l(),U7=a("li"),_ve=a("strong"),Wcr=o("sew"),Hcr=o(" \u2014 "),YW=a("a"),Ucr=o("SEWForSequenceClassification"),Jcr=o(" (SEW model)"),Ycr=l(),J7=a("li"),uve=a("strong"),Kcr=o("sew-d"),Zcr=o(" \u2014 "),KW=a("a"),efr=o("SEWDForSequenceClassification"),ofr=o(" (SEW-D model)"),rfr=l(),Y7=a("li"),bve=a("strong"),tfr=o("unispeech"),afr=o(" \u2014 "),ZW=a("a"),nfr=o("UniSpeechForSequenceClassification"),sfr=o(" (UniSpeech model)"),lfr=l(),K7=a("li"),vve=a("strong"),ifr=o("unispeech-sat"),dfr=o(" \u2014 "),eH=a("a"),cfr=o("UniSpeechSatForSequenceClassification"),ffr=o(" (UniSpeechSat model)"),mfr=l(),Z7=a("li"),Fve=a("strong"),gfr=o("wav2vec2"),hfr=o(" \u2014 "),oH=a("a"),pfr=o("Wav2Vec2ForSequenceClassification"),_fr=o(" (Wav2Vec2 model)"),ufr=l(),e8=a("li"),Tve=a("strong"),bfr=o("wav2vec2-conformer"),vfr=o(" \u2014 "),rH=a("a"),Ffr=o("Wav2Vec2ConformerForSequenceClassification"),Tfr=o(" (Wav2Vec2-Conformer model)"),Mfr=l(),o8=a("li"),Mve=a("strong"),Efr=o("wavlm"),Cfr=o(" \u2014 "),tH=a("a"),wfr=o("WavLMForSequenceClassification"),Afr=o(" (WavLM model)"),Lfr=l(),r8=a("p"),yfr=o("The model is set in evaluation mode by default using "),Eve=a("code"),xfr=o("model.eval()"),$fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),kfr=o("model.train()"),Sfr=l(),F(t8.$$.fragment),HXe=l(),kd=a("h2"),a8=a("a"),wve=a("span"),F(e9.$$.fragment),Rfr=l(),Ave=a("span"),Pfr=o("AutoModelForAudioFrameClassification"),UXe=l(),zo=a("div"),F(o9.$$.fragment),Bfr=l(),Sd=a("p"),Ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aH=a("a"),Nfr=o("from_pretrained()"),qfr=o(" class method or the "),nH=a("a"),jfr=o("from_config()"),Dfr=o(` class
method.`),Gfr=l(),r9=a("p"),Ofr=o("This class cannot be instantiated directly using "),Lve=a("code"),Vfr=o("__init__()"),Xfr=o(" (throws an error)."),zfr=l(),Et=a("div"),F(t9.$$.fragment),Qfr=l(),yve=a("p"),Wfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hfr=l(),Rd=a("p"),Ufr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Jfr=o("not"),Yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" to load the model weights."),emr=l(),F(n8.$$.fragment),omr=l(),mo=a("div"),F(a9.$$.fragment),rmr=l(),$ve=a("p"),tmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),amr=l(),Ya=a("p"),nmr=o("The model class to instantiate is selected based on the "),kve=a("code"),smr=o("model_type"),lmr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),cmr=o("pretrained_model_name_or_path"),fmr=o(":"),mmr=l(),ot=a("ul"),s8=a("li"),Pve=a("strong"),gmr=o("data2vec-audio"),hmr=o(" \u2014 "),lH=a("a"),pmr=o("Data2VecAudioForAudioFrameClassification"),_mr=o(" (Data2VecAudio model)"),umr=l(),l8=a("li"),Bve=a("strong"),bmr=o("unispeech-sat"),vmr=o(" \u2014 "),iH=a("a"),Fmr=o("UniSpeechSatForAudioFrameClassification"),Tmr=o(" (UniSpeechSat model)"),Mmr=l(),i8=a("li"),Ive=a("strong"),Emr=o("wav2vec2"),Cmr=o(" \u2014 "),dH=a("a"),wmr=o("Wav2Vec2ForAudioFrameClassification"),Amr=o(" (Wav2Vec2 model)"),Lmr=l(),d8=a("li"),Nve=a("strong"),ymr=o("wav2vec2-conformer"),xmr=o(" \u2014 "),cH=a("a"),$mr=o("Wav2Vec2ConformerForAudioFrameClassification"),kmr=o(" (Wav2Vec2-Conformer model)"),Smr=l(),c8=a("li"),qve=a("strong"),Rmr=o("wavlm"),Pmr=o(" \u2014 "),fH=a("a"),Bmr=o("WavLMForAudioFrameClassification"),Imr=o(" (WavLM model)"),Nmr=l(),f8=a("p"),qmr=o("The model is set in evaluation mode by default using "),jve=a("code"),jmr=o("model.eval()"),Dmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=a("code"),Gmr=o("model.train()"),Omr=l(),F(m8.$$.fragment),JXe=l(),Pd=a("h2"),g8=a("a"),Gve=a("span"),F(n9.$$.fragment),Vmr=l(),Ove=a("span"),Xmr=o("AutoModelForCTC"),YXe=l(),Qo=a("div"),F(s9.$$.fragment),zmr=l(),Bd=a("p"),Qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mH=a("a"),Wmr=o("from_pretrained()"),Hmr=o(" class method or the "),gH=a("a"),Umr=o("from_config()"),Jmr=o(` class
method.`),Ymr=l(),l9=a("p"),Kmr=o("This class cannot be instantiated directly using "),Vve=a("code"),Zmr=o("__init__()"),egr=o(" (throws an error)."),ogr=l(),Ct=a("div"),F(i9.$$.fragment),rgr=l(),Xve=a("p"),tgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),agr=l(),Id=a("p"),ngr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),sgr=o("not"),lgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),igr=o("from_pretrained()"),dgr=o(" to load the model weights."),cgr=l(),F(h8.$$.fragment),fgr=l(),go=a("div"),F(d9.$$.fragment),mgr=l(),Qve=a("p"),ggr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hgr=l(),Ka=a("p"),pgr=o("The model class to instantiate is selected based on the "),Wve=a("code"),_gr=o("model_type"),ugr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),bgr=o("pretrained_model_name_or_path"),vgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),Fgr=o("pretrained_model_name_or_path"),Tgr=o(":"),Mgr=l(),Le=a("ul"),p8=a("li"),Jve=a("strong"),Egr=o("data2vec-audio"),Cgr=o(" \u2014 "),pH=a("a"),wgr=o("Data2VecAudioForCTC"),Agr=o(" (Data2VecAudio model)"),Lgr=l(),_8=a("li"),Yve=a("strong"),ygr=o("hubert"),xgr=o(" \u2014 "),_H=a("a"),$gr=o("HubertForCTC"),kgr=o(" (Hubert model)"),Sgr=l(),u8=a("li"),Kve=a("strong"),Rgr=o("mctct"),Pgr=o(" \u2014 "),uH=a("a"),Bgr=o("MCTCTForCTC"),Igr=o(" (M-CTC-T model)"),Ngr=l(),b8=a("li"),Zve=a("strong"),qgr=o("sew"),jgr=o(" \u2014 "),bH=a("a"),Dgr=o("SEWForCTC"),Ggr=o(" (SEW model)"),Ogr=l(),v8=a("li"),eFe=a("strong"),Vgr=o("sew-d"),Xgr=o(" \u2014 "),vH=a("a"),zgr=o("SEWDForCTC"),Qgr=o(" (SEW-D model)"),Wgr=l(),F8=a("li"),oFe=a("strong"),Hgr=o("unispeech"),Ugr=o(" \u2014 "),FH=a("a"),Jgr=o("UniSpeechForCTC"),Ygr=o(" (UniSpeech model)"),Kgr=l(),T8=a("li"),rFe=a("strong"),Zgr=o("unispeech-sat"),ehr=o(" \u2014 "),TH=a("a"),ohr=o("UniSpeechSatForCTC"),rhr=o(" (UniSpeechSat model)"),thr=l(),M8=a("li"),tFe=a("strong"),ahr=o("wav2vec2"),nhr=o(" \u2014 "),MH=a("a"),shr=o("Wav2Vec2ForCTC"),lhr=o(" (Wav2Vec2 model)"),ihr=l(),E8=a("li"),aFe=a("strong"),dhr=o("wav2vec2-conformer"),chr=o(" \u2014 "),EH=a("a"),fhr=o("Wav2Vec2ConformerForCTC"),mhr=o(" (Wav2Vec2-Conformer model)"),ghr=l(),C8=a("li"),nFe=a("strong"),hhr=o("wavlm"),phr=o(" \u2014 "),CH=a("a"),_hr=o("WavLMForCTC"),uhr=o(" (WavLM model)"),bhr=l(),w8=a("p"),vhr=o("The model is set in evaluation mode by default using "),sFe=a("code"),Fhr=o("model.eval()"),Thr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=a("code"),Mhr=o("model.train()"),Ehr=l(),F(A8.$$.fragment),KXe=l(),Nd=a("h2"),L8=a("a"),iFe=a("span"),F(c9.$$.fragment),Chr=l(),dFe=a("span"),whr=o("AutoModelForSpeechSeq2Seq"),ZXe=l(),Wo=a("div"),F(f9.$$.fragment),Ahr=l(),qd=a("p"),Lhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wH=a("a"),yhr=o("from_pretrained()"),xhr=o(" class method or the "),AH=a("a"),$hr=o("from_config()"),khr=o(` class
method.`),Shr=l(),m9=a("p"),Rhr=o("This class cannot be instantiated directly using "),cFe=a("code"),Phr=o("__init__()"),Bhr=o(" (throws an error)."),Ihr=l(),wt=a("div"),F(g9.$$.fragment),Nhr=l(),fFe=a("p"),qhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jhr=l(),jd=a("p"),Dhr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),Ghr=o("not"),Ohr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),Vhr=o("from_pretrained()"),Xhr=o(" to load the model weights."),zhr=l(),F(y8.$$.fragment),Qhr=l(),ho=a("div"),F(h9.$$.fragment),Whr=l(),gFe=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Uhr=l(),Za=a("p"),Jhr=o("The model class to instantiate is selected based on the "),hFe=a("code"),Yhr=o("model_type"),Khr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(":"),tpr=l(),p9=a("ul"),x8=a("li"),uFe=a("strong"),apr=o("speech-encoder-decoder"),npr=o(" \u2014 "),yH=a("a"),spr=o("SpeechEncoderDecoderModel"),lpr=o(" (Speech Encoder decoder model)"),ipr=l(),$8=a("li"),bFe=a("strong"),dpr=o("speech_to_text"),cpr=o(" \u2014 "),xH=a("a"),fpr=o("Speech2TextForConditionalGeneration"),mpr=o(" (Speech2Text model)"),gpr=l(),k8=a("p"),hpr=o("The model is set in evaluation mode by default using "),vFe=a("code"),ppr=o("model.eval()"),_pr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=a("code"),upr=o("model.train()"),bpr=l(),F(S8.$$.fragment),eze=l(),Dd=a("h2"),R8=a("a"),TFe=a("span"),F(_9.$$.fragment),vpr=l(),MFe=a("span"),Fpr=o("AutoModelForAudioXVector"),oze=l(),Ho=a("div"),F(u9.$$.fragment),Tpr=l(),Gd=a("p"),Mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$H=a("a"),Epr=o("from_pretrained()"),Cpr=o(" class method or the "),kH=a("a"),wpr=o("from_config()"),Apr=o(` class
method.`),Lpr=l(),b9=a("p"),ypr=o("This class cannot be instantiated directly using "),EFe=a("code"),xpr=o("__init__()"),$pr=o(" (throws an error)."),kpr=l(),At=a("div"),F(v9.$$.fragment),Spr=l(),CFe=a("p"),Rpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ppr=l(),Od=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),Ipr=o("not"),Npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),qpr=o("from_pretrained()"),jpr=o(" to load the model weights."),Dpr=l(),F(P8.$$.fragment),Gpr=l(),po=a("div"),F(F9.$$.fragment),Opr=l(),AFe=a("p"),Vpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xpr=l(),en=a("p"),zpr=o("The model class to instantiate is selected based on the "),LFe=a("code"),Qpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(":"),Kpr=l(),rt=a("ul"),B8=a("li"),$Fe=a("strong"),Zpr=o("data2vec-audio"),e_r=o(" \u2014 "),RH=a("a"),o_r=o("Data2VecAudioForXVector"),r_r=o(" (Data2VecAudio model)"),t_r=l(),I8=a("li"),kFe=a("strong"),a_r=o("unispeech-sat"),n_r=o(" \u2014 "),PH=a("a"),s_r=o("UniSpeechSatForXVector"),l_r=o(" (UniSpeechSat model)"),i_r=l(),N8=a("li"),SFe=a("strong"),d_r=o("wav2vec2"),c_r=o(" \u2014 "),BH=a("a"),f_r=o("Wav2Vec2ForXVector"),m_r=o(" (Wav2Vec2 model)"),g_r=l(),q8=a("li"),RFe=a("strong"),h_r=o("wav2vec2-conformer"),p_r=o(" \u2014 "),IH=a("a"),__r=o("Wav2Vec2ConformerForXVector"),u_r=o(" (Wav2Vec2-Conformer model)"),b_r=l(),j8=a("li"),PFe=a("strong"),v_r=o("wavlm"),F_r=o(" \u2014 "),NH=a("a"),T_r=o("WavLMForXVector"),M_r=o(" (WavLM model)"),E_r=l(),D8=a("p"),C_r=o("The model is set in evaluation mode by default using "),BFe=a("code"),w_r=o("model.eval()"),A_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),L_r=o("model.train()"),y_r=l(),F(G8.$$.fragment),rze=l(),Vd=a("h2"),O8=a("a"),NFe=a("span"),F(T9.$$.fragment),x_r=l(),qFe=a("span"),$_r=o("AutoModelForMaskedImageModeling"),tze=l(),Uo=a("div"),F(M9.$$.fragment),k_r=l(),Xd=a("p"),S_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qH=a("a"),R_r=o("from_pretrained()"),P_r=o(" class method or the "),jH=a("a"),B_r=o("from_config()"),I_r=o(` class
method.`),N_r=l(),E9=a("p"),q_r=o("This class cannot be instantiated directly using "),jFe=a("code"),j_r=o("__init__()"),D_r=o(" (throws an error)."),G_r=l(),Lt=a("div"),F(C9.$$.fragment),O_r=l(),DFe=a("p"),V_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),X_r=l(),zd=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),Q_r=o("not"),W_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),H_r=o("from_pretrained()"),U_r=o(" to load the model weights."),J_r=l(),F(V8.$$.fragment),Y_r=l(),_o=a("div"),F(w9.$$.fragment),K_r=l(),OFe=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),eur=l(),on=a("p"),our=o("The model class to instantiate is selected based on the "),VFe=a("code"),rur=o("model_type"),tur=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(":"),iur=l(),Qd=a("ul"),X8=a("li"),QFe=a("strong"),dur=o("deit"),cur=o(" \u2014 "),GH=a("a"),fur=o("DeiTForMaskedImageModeling"),mur=o(" (DeiT model)"),gur=l(),z8=a("li"),WFe=a("strong"),hur=o("swin"),pur=o(" \u2014 "),OH=a("a"),_ur=o("SwinForMaskedImageModeling"),uur=o(" (Swin Transformer model)"),bur=l(),Q8=a("li"),HFe=a("strong"),vur=o("vit"),Fur=o(" \u2014 "),VH=a("a"),Tur=o("ViTForMaskedImageModeling"),Mur=o(" (ViT model)"),Eur=l(),W8=a("p"),Cur=o("The model is set in evaluation mode by default using "),UFe=a("code"),wur=o("model.eval()"),Aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=a("code"),Lur=o("model.train()"),yur=l(),F(H8.$$.fragment),aze=l(),Wd=a("h2"),U8=a("a"),YFe=a("span"),F(A9.$$.fragment),xur=l(),KFe=a("span"),$ur=o("AutoModelForObjectDetection"),nze=l(),Jo=a("div"),F(L9.$$.fragment),kur=l(),Hd=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XH=a("a"),Rur=o("from_pretrained()"),Pur=o(" class method or the "),zH=a("a"),Bur=o("from_config()"),Iur=o(` class
method.`),Nur=l(),y9=a("p"),qur=o("This class cannot be instantiated directly using "),ZFe=a("code"),jur=o("__init__()"),Dur=o(" (throws an error)."),Gur=l(),yt=a("div"),F(x9.$$.fragment),Our=l(),eTe=a("p"),Vur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xur=l(),Ud=a("p"),zur=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Qur=o("not"),Wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Hur=o("from_pretrained()"),Uur=o(" to load the model weights."),Jur=l(),F(J8.$$.fragment),Yur=l(),uo=a("div"),F($9.$$.fragment),Kur=l(),rTe=a("p"),Zur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),e1r=l(),rn=a("p"),o1r=o("The model class to instantiate is selected based on the "),tTe=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),Jd=a("ul"),Y8=a("li"),sTe=a("strong"),d1r=o("deformable_detr"),c1r=o(" \u2014 "),WH=a("a"),f1r=o("DeformableDetrForObjectDetection"),m1r=o(" (Deformable DETR model)"),g1r=l(),K8=a("li"),lTe=a("strong"),h1r=o("detr"),p1r=o(" \u2014 "),HH=a("a"),_1r=o("DetrForObjectDetection"),u1r=o(" (DETR model)"),b1r=l(),Z8=a("li"),iTe=a("strong"),v1r=o("yolos"),F1r=o(" \u2014 "),UH=a("a"),T1r=o("YolosForObjectDetection"),M1r=o(" (YOLOS model)"),E1r=l(),eM=a("p"),C1r=o("The model is set in evaluation mode by default using "),dTe=a("code"),w1r=o("model.eval()"),A1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=a("code"),L1r=o("model.train()"),y1r=l(),F(oM.$$.fragment),sze=l(),Yd=a("h2"),rM=a("a"),fTe=a("span"),F(k9.$$.fragment),x1r=l(),mTe=a("span"),$1r=o("AutoModelForImageSegmentation"),lze=l(),Yo=a("div"),F(S9.$$.fragment),k1r=l(),Kd=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),JH=a("a"),R1r=o("from_pretrained()"),P1r=o(" class method or the "),YH=a("a"),B1r=o("from_config()"),I1r=o(` class
method.`),N1r=l(),R9=a("p"),q1r=o("This class cannot be instantiated directly using "),gTe=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),xt=a("div"),F(P9.$$.fragment),O1r=l(),hTe=a("p"),V1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),X1r=l(),Zd=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),Q1r=o("not"),W1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(tM.$$.fragment),Y1r=l(),bo=a("div"),F(B9.$$.fragment),K1r=l(),_Te=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),e2r=l(),tn=a("p"),o2r=o("The model class to instantiate is selected based on the "),uTe=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),FTe=a("ul"),aM=a("li"),TTe=a("strong"),d2r=o("detr"),c2r=o(" \u2014 "),ZH=a("a"),f2r=o("DetrForSegmentation"),m2r=o(" (DETR model)"),g2r=l(),nM=a("p"),h2r=o("The model is set in evaluation mode by default using "),MTe=a("code"),p2r=o("model.eval()"),_2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ETe=a("code"),u2r=o("model.train()"),b2r=l(),F(sM.$$.fragment),ize=l(),ec=a("h2"),lM=a("a"),CTe=a("span"),F(I9.$$.fragment),v2r=l(),wTe=a("span"),F2r=o("AutoModelForSemanticSegmentation"),dze=l(),Ko=a("div"),F(N9.$$.fragment),T2r=l(),oc=a("p"),M2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eU=a("a"),E2r=o("from_pretrained()"),C2r=o(" class method or the "),oU=a("a"),w2r=o("from_config()"),A2r=o(` class
method.`),L2r=l(),q9=a("p"),y2r=o("This class cannot be instantiated directly using "),ATe=a("code"),x2r=o("__init__()"),$2r=o(" (throws an error)."),k2r=l(),$t=a("div"),F(j9.$$.fragment),S2r=l(),LTe=a("p"),R2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),P2r=l(),rc=a("p"),B2r=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),I2r=o("not"),N2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),q2r=o("from_pretrained()"),j2r=o(" to load the model weights."),D2r=l(),F(iM.$$.fragment),G2r=l(),vo=a("div"),F(D9.$$.fragment),O2r=l(),xTe=a("p"),V2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),X2r=l(),an=a("p"),z2r=o("The model class to instantiate is selected based on the "),$Te=a("code"),Q2r=o("model_type"),W2r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),H2r=o("pretrained_model_name_or_path"),U2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(":"),K2r=l(),tt=a("ul"),dM=a("li"),RTe=a("strong"),Z2r=o("beit"),ebr=o(" \u2014 "),tU=a("a"),obr=o("BeitForSemanticSegmentation"),rbr=o(" (BEiT model)"),tbr=l(),cM=a("li"),PTe=a("strong"),abr=o("data2vec-vision"),nbr=o(" \u2014 "),aU=a("a"),sbr=o("Data2VecVisionForSemanticSegmentation"),lbr=o(" (Data2VecVision model)"),ibr=l(),fM=a("li"),BTe=a("strong"),dbr=o("dpt"),cbr=o(" \u2014 "),nU=a("a"),fbr=o("DPTForSemanticSegmentation"),mbr=o(" (DPT model)"),gbr=l(),mM=a("li"),ITe=a("strong"),hbr=o("mobilevit"),pbr=o(" \u2014 "),sU=a("a"),_br=o("MobileViTForSemanticSegmentation"),ubr=o(" (MobileViT model)"),bbr=l(),gM=a("li"),NTe=a("strong"),vbr=o("segformer"),Fbr=o(" \u2014 "),lU=a("a"),Tbr=o("SegformerForSemanticSegmentation"),Mbr=o(" (SegFormer model)"),Ebr=l(),hM=a("p"),Cbr=o("The model is set in evaluation mode by default using "),qTe=a("code"),wbr=o("model.eval()"),Abr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jTe=a("code"),Lbr=o("model.train()"),ybr=l(),F(pM.$$.fragment),cze=l(),tc=a("h2"),_M=a("a"),DTe=a("span"),F(G9.$$.fragment),xbr=l(),GTe=a("span"),$br=o("AutoModelForInstanceSegmentation"),fze=l(),Zo=a("div"),F(O9.$$.fragment),kbr=l(),ac=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iU=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" class method or the "),dU=a("a"),Bbr=o("from_config()"),Ibr=o(` class
method.`),Nbr=l(),V9=a("p"),qbr=o("This class cannot be instantiated directly using "),OTe=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),kt=a("div"),F(X9.$$.fragment),Obr=l(),VTe=a("p"),Vbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Xbr=l(),nc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),Qbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),F(uM.$$.fragment),Ybr=l(),Fo=a("div"),F(z9.$$.fragment),Kbr=l(),zTe=a("p"),Zbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),evr=l(),nn=a("p"),ovr=o("The model class to instantiate is selected based on the "),QTe=a("code"),rvr=o("model_type"),tvr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(":"),ivr=l(),UTe=a("ul"),bM=a("li"),JTe=a("strong"),dvr=o("maskformer"),cvr=o(" \u2014 "),fU=a("a"),fvr=o("MaskFormerForInstanceSegmentation"),mvr=o(" (MaskFormer model)"),gvr=l(),vM=a("p"),hvr=o("The model is set in evaluation mode by default using "),YTe=a("code"),pvr=o("model.eval()"),_vr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KTe=a("code"),uvr=o("model.train()"),bvr=l(),F(FM.$$.fragment),mze=l(),sc=a("h2"),TM=a("a"),ZTe=a("span"),F(Q9.$$.fragment),vvr=l(),e7e=a("span"),Fvr=o("TFAutoModel"),gze=l(),er=a("div"),F(W9.$$.fragment),Tvr=l(),lc=a("p"),Mvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mU=a("a"),Evr=o("from_pretrained()"),Cvr=o(" class method or the "),gU=a("a"),wvr=o("from_config()"),Avr=o(` class
method.`),Lvr=l(),H9=a("p"),yvr=o("This class cannot be instantiated directly using "),o7e=a("code"),xvr=o("__init__()"),$vr=o(" (throws an error)."),kvr=l(),St=a("div"),F(U9.$$.fragment),Svr=l(),r7e=a("p"),Rvr=o("Instantiates one of the base model classes of the library from a configuration."),Pvr=l(),ic=a("p"),Bvr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),Ivr=o("not"),Nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),qvr=o("from_pretrained()"),jvr=o(" to load the model weights."),Dvr=l(),F(MM.$$.fragment),Gvr=l(),xr=a("div"),F(J9.$$.fragment),Ovr=l(),a7e=a("p"),Vvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Xvr=l(),sn=a("p"),zvr=o("The model class to instantiate is selected based on the "),n7e=a("code"),Qvr=o("model_type"),Wvr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),Hvr=o("pretrained_model_name_or_path"),Uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(":"),Kvr=l(),q=a("ul"),EM=a("li"),i7e=a("strong"),Zvr=o("albert"),eFr=o(" \u2014 "),pU=a("a"),oFr=o("TFAlbertModel"),rFr=o(" (ALBERT model)"),tFr=l(),CM=a("li"),d7e=a("strong"),aFr=o("bart"),nFr=o(" \u2014 "),_U=a("a"),sFr=o("TFBartModel"),lFr=o(" (BART model)"),iFr=l(),wM=a("li"),c7e=a("strong"),dFr=o("bert"),cFr=o(" \u2014 "),uU=a("a"),fFr=o("TFBertModel"),mFr=o(" (BERT model)"),gFr=l(),AM=a("li"),f7e=a("strong"),hFr=o("blenderbot"),pFr=o(" \u2014 "),bU=a("a"),_Fr=o("TFBlenderbotModel"),uFr=o(" (Blenderbot model)"),bFr=l(),LM=a("li"),m7e=a("strong"),vFr=o("blenderbot-small"),FFr=o(" \u2014 "),vU=a("a"),TFr=o("TFBlenderbotSmallModel"),MFr=o(" (BlenderbotSmall model)"),EFr=l(),yM=a("li"),g7e=a("strong"),CFr=o("camembert"),wFr=o(" \u2014 "),FU=a("a"),AFr=o("TFCamembertModel"),LFr=o(" (CamemBERT model)"),yFr=l(),xM=a("li"),h7e=a("strong"),xFr=o("clip"),$Fr=o(" \u2014 "),TU=a("a"),kFr=o("TFCLIPModel"),SFr=o(" (CLIP model)"),RFr=l(),$M=a("li"),p7e=a("strong"),PFr=o("convbert"),BFr=o(" \u2014 "),MU=a("a"),IFr=o("TFConvBertModel"),NFr=o(" (ConvBERT model)"),qFr=l(),kM=a("li"),_7e=a("strong"),jFr=o("convnext"),DFr=o(" \u2014 "),EU=a("a"),GFr=o("TFConvNextModel"),OFr=o(" (ConvNeXT model)"),VFr=l(),SM=a("li"),u7e=a("strong"),XFr=o("ctrl"),zFr=o(" \u2014 "),CU=a("a"),QFr=o("TFCTRLModel"),WFr=o(" (CTRL model)"),HFr=l(),RM=a("li"),b7e=a("strong"),UFr=o("data2vec-vision"),JFr=o(" \u2014 "),wU=a("a"),YFr=o("TFData2VecVisionModel"),KFr=o(" (Data2VecVision model)"),ZFr=l(),PM=a("li"),v7e=a("strong"),eTr=o("deberta"),oTr=o(" \u2014 "),AU=a("a"),rTr=o("TFDebertaModel"),tTr=o(" (DeBERTa model)"),aTr=l(),BM=a("li"),F7e=a("strong"),nTr=o("deberta-v2"),sTr=o(" \u2014 "),LU=a("a"),lTr=o("TFDebertaV2Model"),iTr=o(" (DeBERTa-v2 model)"),dTr=l(),IM=a("li"),T7e=a("strong"),cTr=o("distilbert"),fTr=o(" \u2014 "),yU=a("a"),mTr=o("TFDistilBertModel"),gTr=o(" (DistilBERT model)"),hTr=l(),NM=a("li"),M7e=a("strong"),pTr=o("dpr"),_Tr=o(" \u2014 "),xU=a("a"),uTr=o("TFDPRQuestionEncoder"),bTr=o(" (DPR model)"),vTr=l(),qM=a("li"),E7e=a("strong"),FTr=o("electra"),TTr=o(" \u2014 "),$U=a("a"),MTr=o("TFElectraModel"),ETr=o(" (ELECTRA model)"),CTr=l(),jM=a("li"),C7e=a("strong"),wTr=o("flaubert"),ATr=o(" \u2014 "),kU=a("a"),LTr=o("TFFlaubertModel"),yTr=o(" (FlauBERT model)"),xTr=l(),Js=a("li"),w7e=a("strong"),$Tr=o("funnel"),kTr=o(" \u2014 "),SU=a("a"),STr=o("TFFunnelModel"),RTr=o(" or "),RU=a("a"),PTr=o("TFFunnelBaseModel"),BTr=o(" (Funnel Transformer model)"),ITr=l(),DM=a("li"),A7e=a("strong"),NTr=o("gpt2"),qTr=o(" \u2014 "),PU=a("a"),jTr=o("TFGPT2Model"),DTr=o(" (OpenAI GPT-2 model)"),GTr=l(),GM=a("li"),L7e=a("strong"),OTr=o("gptj"),VTr=o(" \u2014 "),BU=a("a"),XTr=o("TFGPTJModel"),zTr=o(" (GPT-J model)"),QTr=l(),OM=a("li"),y7e=a("strong"),WTr=o("hubert"),HTr=o(" \u2014 "),IU=a("a"),UTr=o("TFHubertModel"),JTr=o(" (Hubert model)"),YTr=l(),VM=a("li"),x7e=a("strong"),KTr=o("layoutlm"),ZTr=o(" \u2014 "),NU=a("a"),e7r=o("TFLayoutLMModel"),o7r=o(" (LayoutLM model)"),r7r=l(),XM=a("li"),$7e=a("strong"),t7r=o("led"),a7r=o(" \u2014 "),qU=a("a"),n7r=o("TFLEDModel"),s7r=o(" (LED model)"),l7r=l(),zM=a("li"),k7e=a("strong"),i7r=o("longformer"),d7r=o(" \u2014 "),jU=a("a"),c7r=o("TFLongformerModel"),f7r=o(" (Longformer model)"),m7r=l(),QM=a("li"),S7e=a("strong"),g7r=o("lxmert"),h7r=o(" \u2014 "),DU=a("a"),p7r=o("TFLxmertModel"),_7r=o(" (LXMERT model)"),u7r=l(),WM=a("li"),R7e=a("strong"),b7r=o("marian"),v7r=o(" \u2014 "),GU=a("a"),F7r=o("TFMarianModel"),T7r=o(" (Marian model)"),M7r=l(),HM=a("li"),P7e=a("strong"),E7r=o("mbart"),C7r=o(" \u2014 "),OU=a("a"),w7r=o("TFMBartModel"),A7r=o(" (mBART model)"),L7r=l(),UM=a("li"),B7e=a("strong"),y7r=o("mobilebert"),x7r=o(" \u2014 "),VU=a("a"),$7r=o("TFMobileBertModel"),k7r=o(" (MobileBERT model)"),S7r=l(),JM=a("li"),I7e=a("strong"),R7r=o("mpnet"),P7r=o(" \u2014 "),XU=a("a"),B7r=o("TFMPNetModel"),I7r=o(" (MPNet model)"),N7r=l(),YM=a("li"),N7e=a("strong"),q7r=o("mt5"),j7r=o(" \u2014 "),zU=a("a"),D7r=o("TFMT5Model"),G7r=o(" (MT5 model)"),O7r=l(),KM=a("li"),q7e=a("strong"),V7r=o("openai-gpt"),X7r=o(" \u2014 "),QU=a("a"),z7r=o("TFOpenAIGPTModel"),Q7r=o(" (OpenAI GPT model)"),W7r=l(),ZM=a("li"),j7e=a("strong"),H7r=o("opt"),U7r=o(" \u2014 "),WU=a("a"),J7r=o("TFOPTModel"),Y7r=o(" (OPT model)"),K7r=l(),e4=a("li"),D7e=a("strong"),Z7r=o("pegasus"),e8r=o(" \u2014 "),HU=a("a"),o8r=o("TFPegasusModel"),r8r=o(" (Pegasus model)"),t8r=l(),o4=a("li"),G7e=a("strong"),a8r=o("regnet"),n8r=o(" \u2014 "),UU=a("a"),s8r=o("TFRegNetModel"),l8r=o(" (RegNet model)"),i8r=l(),r4=a("li"),O7e=a("strong"),d8r=o("rembert"),c8r=o(" \u2014 "),JU=a("a"),f8r=o("TFRemBertModel"),m8r=o(" (RemBERT model)"),g8r=l(),t4=a("li"),V7e=a("strong"),h8r=o("resnet"),p8r=o(" \u2014 "),YU=a("a"),_8r=o("TFResNetModel"),u8r=o(" (ResNet model)"),b8r=l(),a4=a("li"),X7e=a("strong"),v8r=o("roberta"),F8r=o(" \u2014 "),KU=a("a"),T8r=o("TFRobertaModel"),M8r=o(" (RoBERTa model)"),E8r=l(),n4=a("li"),z7e=a("strong"),C8r=o("roformer"),w8r=o(" \u2014 "),ZU=a("a"),A8r=o("TFRoFormerModel"),L8r=o(" (RoFormer model)"),y8r=l(),s4=a("li"),Q7e=a("strong"),x8r=o("speech_to_text"),$8r=o(" \u2014 "),eJ=a("a"),k8r=o("TFSpeech2TextModel"),S8r=o(" (Speech2Text model)"),R8r=l(),l4=a("li"),W7e=a("strong"),P8r=o("swin"),B8r=o(" \u2014 "),oJ=a("a"),I8r=o("TFSwinModel"),N8r=o(" (Swin Transformer model)"),q8r=l(),i4=a("li"),H7e=a("strong"),j8r=o("t5"),D8r=o(" \u2014 "),rJ=a("a"),G8r=o("TFT5Model"),O8r=o(" (T5 model)"),V8r=l(),d4=a("li"),U7e=a("strong"),X8r=o("tapas"),z8r=o(" \u2014 "),tJ=a("a"),Q8r=o("TFTapasModel"),W8r=o(" (TAPAS model)"),H8r=l(),c4=a("li"),J7e=a("strong"),U8r=o("transfo-xl"),J8r=o(" \u2014 "),aJ=a("a"),Y8r=o("TFTransfoXLModel"),K8r=o(" (Transformer-XL model)"),Z8r=l(),f4=a("li"),Y7e=a("strong"),eMr=o("vit"),oMr=o(" \u2014 "),nJ=a("a"),rMr=o("TFViTModel"),tMr=o(" (ViT model)"),aMr=l(),m4=a("li"),K7e=a("strong"),nMr=o("vit_mae"),sMr=o(" \u2014 "),sJ=a("a"),lMr=o("TFViTMAEModel"),iMr=o(" (ViTMAE model)"),dMr=l(),g4=a("li"),Z7e=a("strong"),cMr=o("wav2vec2"),fMr=o(" \u2014 "),lJ=a("a"),mMr=o("TFWav2Vec2Model"),gMr=o(" (Wav2Vec2 model)"),hMr=l(),h4=a("li"),e8e=a("strong"),pMr=o("xlm"),_Mr=o(" \u2014 "),iJ=a("a"),uMr=o("TFXLMModel"),bMr=o(" (XLM model)"),vMr=l(),p4=a("li"),o8e=a("strong"),FMr=o("xlm-roberta"),TMr=o(" \u2014 "),dJ=a("a"),MMr=o("TFXLMRobertaModel"),EMr=o(" (XLM-RoBERTa model)"),CMr=l(),_4=a("li"),r8e=a("strong"),wMr=o("xlnet"),AMr=o(" \u2014 "),cJ=a("a"),LMr=o("TFXLNetModel"),yMr=o(" (XLNet model)"),xMr=l(),F(u4.$$.fragment),hze=l(),dc=a("h2"),b4=a("a"),t8e=a("span"),F(Y9.$$.fragment),$Mr=l(),a8e=a("span"),kMr=o("TFAutoModelForPreTraining"),pze=l(),or=a("div"),F(K9.$$.fragment),SMr=l(),cc=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fJ=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),mJ=a("a"),IMr=o("from_config()"),NMr=o(` class
method.`),qMr=l(),Z9=a("p"),jMr=o("This class cannot be instantiated directly using "),n8e=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),Rt=a("div"),F(ex.$$.fragment),VMr=l(),s8e=a("p"),XMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zMr=l(),fc=a("p"),QMr=o(`Note:
Loading a model from its configuration file does `),l8e=a("strong"),WMr=o("not"),HMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),UMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(v4.$$.fragment),KMr=l(),$r=a("div"),F(ox.$$.fragment),ZMr=l(),i8e=a("p"),e4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o4r=l(),ln=a("p"),r4r=o("The model class to instantiate is selected based on the "),d8e=a("code"),t4r=o("model_type"),a4r=o(` property of the config object (either
passed as an argument or loaded from `),c8e=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(":"),d4r=l(),se=a("ul"),F4=a("li"),m8e=a("strong"),c4r=o("albert"),f4r=o(" \u2014 "),hJ=a("a"),m4r=o("TFAlbertForPreTraining"),g4r=o(" (ALBERT model)"),h4r=l(),T4=a("li"),g8e=a("strong"),p4r=o("bart"),_4r=o(" \u2014 "),pJ=a("a"),u4r=o("TFBartForConditionalGeneration"),b4r=o(" (BART model)"),v4r=l(),M4=a("li"),h8e=a("strong"),F4r=o("bert"),T4r=o(" \u2014 "),_J=a("a"),M4r=o("TFBertForPreTraining"),E4r=o(" (BERT model)"),C4r=l(),E4=a("li"),p8e=a("strong"),w4r=o("camembert"),A4r=o(" \u2014 "),uJ=a("a"),L4r=o("TFCamembertForMaskedLM"),y4r=o(" (CamemBERT model)"),x4r=l(),C4=a("li"),_8e=a("strong"),$4r=o("ctrl"),k4r=o(" \u2014 "),bJ=a("a"),S4r=o("TFCTRLLMHeadModel"),R4r=o(" (CTRL model)"),P4r=l(),w4=a("li"),u8e=a("strong"),B4r=o("distilbert"),I4r=o(" \u2014 "),vJ=a("a"),N4r=o("TFDistilBertForMaskedLM"),q4r=o(" (DistilBERT model)"),j4r=l(),A4=a("li"),b8e=a("strong"),D4r=o("electra"),G4r=o(" \u2014 "),FJ=a("a"),O4r=o("TFElectraForPreTraining"),V4r=o(" (ELECTRA model)"),X4r=l(),L4=a("li"),v8e=a("strong"),z4r=o("flaubert"),Q4r=o(" \u2014 "),TJ=a("a"),W4r=o("TFFlaubertWithLMHeadModel"),H4r=o(" (FlauBERT model)"),U4r=l(),y4=a("li"),F8e=a("strong"),J4r=o("funnel"),Y4r=o(" \u2014 "),MJ=a("a"),K4r=o("TFFunnelForPreTraining"),Z4r=o(" (Funnel Transformer model)"),eEr=l(),x4=a("li"),T8e=a("strong"),oEr=o("gpt2"),rEr=o(" \u2014 "),EJ=a("a"),tEr=o("TFGPT2LMHeadModel"),aEr=o(" (OpenAI GPT-2 model)"),nEr=l(),$4=a("li"),M8e=a("strong"),sEr=o("layoutlm"),lEr=o(" \u2014 "),CJ=a("a"),iEr=o("TFLayoutLMForMaskedLM"),dEr=o(" (LayoutLM model)"),cEr=l(),k4=a("li"),E8e=a("strong"),fEr=o("lxmert"),mEr=o(" \u2014 "),wJ=a("a"),gEr=o("TFLxmertForPreTraining"),hEr=o(" (LXMERT model)"),pEr=l(),S4=a("li"),C8e=a("strong"),_Er=o("mobilebert"),uEr=o(" \u2014 "),AJ=a("a"),bEr=o("TFMobileBertForPreTraining"),vEr=o(" (MobileBERT model)"),FEr=l(),R4=a("li"),w8e=a("strong"),TEr=o("mpnet"),MEr=o(" \u2014 "),LJ=a("a"),EEr=o("TFMPNetForMaskedLM"),CEr=o(" (MPNet model)"),wEr=l(),P4=a("li"),A8e=a("strong"),AEr=o("openai-gpt"),LEr=o(" \u2014 "),yJ=a("a"),yEr=o("TFOpenAIGPTLMHeadModel"),xEr=o(" (OpenAI GPT model)"),$Er=l(),B4=a("li"),L8e=a("strong"),kEr=o("roberta"),SEr=o(" \u2014 "),xJ=a("a"),REr=o("TFRobertaForMaskedLM"),PEr=o(" (RoBERTa model)"),BEr=l(),I4=a("li"),y8e=a("strong"),IEr=o("t5"),NEr=o(" \u2014 "),$J=a("a"),qEr=o("TFT5ForConditionalGeneration"),jEr=o(" (T5 model)"),DEr=l(),N4=a("li"),x8e=a("strong"),GEr=o("tapas"),OEr=o(" \u2014 "),kJ=a("a"),VEr=o("TFTapasForMaskedLM"),XEr=o(" (TAPAS model)"),zEr=l(),q4=a("li"),$8e=a("strong"),QEr=o("transfo-xl"),WEr=o(" \u2014 "),SJ=a("a"),HEr=o("TFTransfoXLLMHeadModel"),UEr=o(" (Transformer-XL model)"),JEr=l(),j4=a("li"),k8e=a("strong"),YEr=o("vit_mae"),KEr=o(" \u2014 "),RJ=a("a"),ZEr=o("TFViTMAEForPreTraining"),eCr=o(" (ViTMAE model)"),oCr=l(),D4=a("li"),S8e=a("strong"),rCr=o("xlm"),tCr=o(" \u2014 "),PJ=a("a"),aCr=o("TFXLMWithLMHeadModel"),nCr=o(" (XLM model)"),sCr=l(),G4=a("li"),R8e=a("strong"),lCr=o("xlm-roberta"),iCr=o(" \u2014 "),BJ=a("a"),dCr=o("TFXLMRobertaForMaskedLM"),cCr=o(" (XLM-RoBERTa model)"),fCr=l(),O4=a("li"),P8e=a("strong"),mCr=o("xlnet"),gCr=o(" \u2014 "),IJ=a("a"),hCr=o("TFXLNetLMHeadModel"),pCr=o(" (XLNet model)"),_Cr=l(),F(V4.$$.fragment),_ze=l(),mc=a("h2"),X4=a("a"),B8e=a("span"),F(rx.$$.fragment),uCr=l(),I8e=a("span"),bCr=o("TFAutoModelForCausalLM"),uze=l(),rr=a("div"),F(tx.$$.fragment),vCr=l(),gc=a("p"),FCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NJ=a("a"),TCr=o("from_pretrained()"),MCr=o(" class method or the "),qJ=a("a"),ECr=o("from_config()"),CCr=o(` class
method.`),wCr=l(),ax=a("p"),ACr=o("This class cannot be instantiated directly using "),N8e=a("code"),LCr=o("__init__()"),yCr=o(" (throws an error)."),xCr=l(),Pt=a("div"),F(nx.$$.fragment),$Cr=l(),q8e=a("p"),kCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SCr=l(),hc=a("p"),RCr=o(`Note:
Loading a model from its configuration file does `),j8e=a("strong"),PCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),ICr=o("from_pretrained()"),NCr=o(" to load the model weights."),qCr=l(),F(z4.$$.fragment),jCr=l(),kr=a("div"),F(sx.$$.fragment),DCr=l(),D8e=a("p"),GCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OCr=l(),dn=a("p"),VCr=o("The model class to instantiate is selected based on the "),G8e=a("code"),XCr=o("model_type"),zCr=o(` property of the config object (either
passed as an argument or loaded from `),O8e=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V8e=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(":"),JCr=l(),Me=a("ul"),Q4=a("li"),X8e=a("strong"),YCr=o("bert"),KCr=o(" \u2014 "),DJ=a("a"),ZCr=o("TFBertLMHeadModel"),e3r=o(" (BERT model)"),o3r=l(),W4=a("li"),z8e=a("strong"),r3r=o("camembert"),t3r=o(" \u2014 "),GJ=a("a"),a3r=o("TFCamembertForCausalLM"),n3r=o(" (CamemBERT model)"),s3r=l(),H4=a("li"),Q8e=a("strong"),l3r=o("ctrl"),i3r=o(" \u2014 "),OJ=a("a"),d3r=o("TFCTRLLMHeadModel"),c3r=o(" (CTRL model)"),f3r=l(),U4=a("li"),W8e=a("strong"),m3r=o("gpt2"),g3r=o(" \u2014 "),VJ=a("a"),h3r=o("TFGPT2LMHeadModel"),p3r=o(" (OpenAI GPT-2 model)"),_3r=l(),J4=a("li"),H8e=a("strong"),u3r=o("gptj"),b3r=o(" \u2014 "),XJ=a("a"),v3r=o("TFGPTJForCausalLM"),F3r=o(" (GPT-J model)"),T3r=l(),Y4=a("li"),U8e=a("strong"),M3r=o("openai-gpt"),E3r=o(" \u2014 "),zJ=a("a"),C3r=o("TFOpenAIGPTLMHeadModel"),w3r=o(" (OpenAI GPT model)"),A3r=l(),K4=a("li"),J8e=a("strong"),L3r=o("opt"),y3r=o(" \u2014 "),QJ=a("a"),x3r=o("TFOPTForCausalLM"),$3r=o(" (OPT model)"),k3r=l(),Z4=a("li"),Y8e=a("strong"),S3r=o("rembert"),R3r=o(" \u2014 "),WJ=a("a"),P3r=o("TFRemBertForCausalLM"),B3r=o(" (RemBERT model)"),I3r=l(),eE=a("li"),K8e=a("strong"),N3r=o("roberta"),q3r=o(" \u2014 "),HJ=a("a"),j3r=o("TFRobertaForCausalLM"),D3r=o(" (RoBERTa model)"),G3r=l(),oE=a("li"),Z8e=a("strong"),O3r=o("roformer"),V3r=o(" \u2014 "),UJ=a("a"),X3r=o("TFRoFormerForCausalLM"),z3r=o(" (RoFormer model)"),Q3r=l(),rE=a("li"),eMe=a("strong"),W3r=o("transfo-xl"),H3r=o(" \u2014 "),JJ=a("a"),U3r=o("TFTransfoXLLMHeadModel"),J3r=o(" (Transformer-XL model)"),Y3r=l(),tE=a("li"),oMe=a("strong"),K3r=o("xlm"),Z3r=o(" \u2014 "),YJ=a("a"),e5r=o("TFXLMWithLMHeadModel"),o5r=o(" (XLM model)"),r5r=l(),aE=a("li"),rMe=a("strong"),t5r=o("xlnet"),a5r=o(" \u2014 "),KJ=a("a"),n5r=o("TFXLNetLMHeadModel"),s5r=o(" (XLNet model)"),l5r=l(),F(nE.$$.fragment),bze=l(),pc=a("h2"),sE=a("a"),tMe=a("span"),F(lx.$$.fragment),i5r=l(),aMe=a("span"),d5r=o("TFAutoModelForImageClassification"),vze=l(),tr=a("div"),F(ix.$$.fragment),c5r=l(),_c=a("p"),f5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZJ=a("a"),m5r=o("from_pretrained()"),g5r=o(" class method or the "),eY=a("a"),h5r=o("from_config()"),p5r=o(` class
method.`),_5r=l(),dx=a("p"),u5r=o("This class cannot be instantiated directly using "),nMe=a("code"),b5r=o("__init__()"),v5r=o(" (throws an error)."),F5r=l(),Bt=a("div"),F(cx.$$.fragment),T5r=l(),sMe=a("p"),M5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E5r=l(),uc=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),w5r=o("not"),A5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),L5r=o("from_pretrained()"),y5r=o(" to load the model weights."),x5r=l(),F(lE.$$.fragment),$5r=l(),Sr=a("div"),F(fx.$$.fragment),k5r=l(),iMe=a("p"),S5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),R5r=l(),cn=a("p"),P5r=o("The model class to instantiate is selected based on the "),dMe=a("code"),B5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),N5r=o("pretrained_model_name_or_path"),q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(":"),G5r=l(),ar=a("ul"),iE=a("li"),mMe=a("strong"),O5r=o("convnext"),V5r=o(" \u2014 "),rY=a("a"),X5r=o("TFConvNextForImageClassification"),z5r=o(" (ConvNeXT model)"),Q5r=l(),dE=a("li"),gMe=a("strong"),W5r=o("data2vec-vision"),H5r=o(" \u2014 "),tY=a("a"),U5r=o("TFData2VecVisionForImageClassification"),J5r=o(" (Data2VecVision model)"),Y5r=l(),cE=a("li"),hMe=a("strong"),K5r=o("regnet"),Z5r=o(" \u2014 "),aY=a("a"),e0r=o("TFRegNetForImageClassification"),o0r=o(" (RegNet model)"),r0r=l(),fE=a("li"),pMe=a("strong"),t0r=o("resnet"),a0r=o(" \u2014 "),nY=a("a"),n0r=o("TFResNetForImageClassification"),s0r=o(" (ResNet model)"),l0r=l(),mE=a("li"),_Me=a("strong"),i0r=o("swin"),d0r=o(" \u2014 "),sY=a("a"),c0r=o("TFSwinForImageClassification"),f0r=o(" (Swin Transformer model)"),m0r=l(),gE=a("li"),uMe=a("strong"),g0r=o("vit"),h0r=o(" \u2014 "),lY=a("a"),p0r=o("TFViTForImageClassification"),_0r=o(" (ViT model)"),u0r=l(),F(hE.$$.fragment),Fze=l(),bc=a("h2"),pE=a("a"),bMe=a("span"),F(mx.$$.fragment),b0r=l(),vMe=a("span"),v0r=o("TFAutoModelForMaskedLM"),Tze=l(),nr=a("div"),F(gx.$$.fragment),F0r=l(),vc=a("p"),T0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=a("a"),M0r=o("from_pretrained()"),E0r=o(" class method or the "),dY=a("a"),C0r=o("from_config()"),w0r=o(` class
method.`),A0r=l(),hx=a("p"),L0r=o("This class cannot be instantiated directly using "),FMe=a("code"),y0r=o("__init__()"),x0r=o(" (throws an error)."),$0r=l(),It=a("div"),F(px.$$.fragment),k0r=l(),TMe=a("p"),S0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R0r=l(),Fc=a("p"),P0r=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),B0r=o("not"),I0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),N0r=o("from_pretrained()"),q0r=o(" to load the model weights."),j0r=l(),F(_E.$$.fragment),D0r=l(),Rr=a("div"),F(_x.$$.fragment),G0r=l(),EMe=a("p"),O0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V0r=l(),fn=a("p"),X0r=o("The model class to instantiate is selected based on the "),CMe=a("code"),z0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),W0r=o("pretrained_model_name_or_path"),H0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(":"),Y0r=l(),ie=a("ul"),uE=a("li"),LMe=a("strong"),K0r=o("albert"),Z0r=o(" \u2014 "),fY=a("a"),ewr=o("TFAlbertForMaskedLM"),owr=o(" (ALBERT model)"),rwr=l(),bE=a("li"),yMe=a("strong"),twr=o("bert"),awr=o(" \u2014 "),mY=a("a"),nwr=o("TFBertForMaskedLM"),swr=o(" (BERT model)"),lwr=l(),vE=a("li"),xMe=a("strong"),iwr=o("camembert"),dwr=o(" \u2014 "),gY=a("a"),cwr=o("TFCamembertForMaskedLM"),fwr=o(" (CamemBERT model)"),mwr=l(),FE=a("li"),$Me=a("strong"),gwr=o("convbert"),hwr=o(" \u2014 "),hY=a("a"),pwr=o("TFConvBertForMaskedLM"),_wr=o(" (ConvBERT model)"),uwr=l(),TE=a("li"),kMe=a("strong"),bwr=o("deberta"),vwr=o(" \u2014 "),pY=a("a"),Fwr=o("TFDebertaForMaskedLM"),Twr=o(" (DeBERTa model)"),Mwr=l(),ME=a("li"),SMe=a("strong"),Ewr=o("deberta-v2"),Cwr=o(" \u2014 "),_Y=a("a"),wwr=o("TFDebertaV2ForMaskedLM"),Awr=o(" (DeBERTa-v2 model)"),Lwr=l(),EE=a("li"),RMe=a("strong"),ywr=o("distilbert"),xwr=o(" \u2014 "),uY=a("a"),$wr=o("TFDistilBertForMaskedLM"),kwr=o(" (DistilBERT model)"),Swr=l(),CE=a("li"),PMe=a("strong"),Rwr=o("electra"),Pwr=o(" \u2014 "),bY=a("a"),Bwr=o("TFElectraForMaskedLM"),Iwr=o(" (ELECTRA model)"),Nwr=l(),wE=a("li"),BMe=a("strong"),qwr=o("flaubert"),jwr=o(" \u2014 "),vY=a("a"),Dwr=o("TFFlaubertWithLMHeadModel"),Gwr=o(" (FlauBERT model)"),Owr=l(),AE=a("li"),IMe=a("strong"),Vwr=o("funnel"),Xwr=o(" \u2014 "),FY=a("a"),zwr=o("TFFunnelForMaskedLM"),Qwr=o(" (Funnel Transformer model)"),Wwr=l(),LE=a("li"),NMe=a("strong"),Hwr=o("layoutlm"),Uwr=o(" \u2014 "),TY=a("a"),Jwr=o("TFLayoutLMForMaskedLM"),Ywr=o(" (LayoutLM model)"),Kwr=l(),yE=a("li"),qMe=a("strong"),Zwr=o("longformer"),eAr=o(" \u2014 "),MY=a("a"),oAr=o("TFLongformerForMaskedLM"),rAr=o(" (Longformer model)"),tAr=l(),xE=a("li"),jMe=a("strong"),aAr=o("mobilebert"),nAr=o(" \u2014 "),EY=a("a"),sAr=o("TFMobileBertForMaskedLM"),lAr=o(" (MobileBERT model)"),iAr=l(),$E=a("li"),DMe=a("strong"),dAr=o("mpnet"),cAr=o(" \u2014 "),CY=a("a"),fAr=o("TFMPNetForMaskedLM"),mAr=o(" (MPNet model)"),gAr=l(),kE=a("li"),GMe=a("strong"),hAr=o("rembert"),pAr=o(" \u2014 "),wY=a("a"),_Ar=o("TFRemBertForMaskedLM"),uAr=o(" (RemBERT model)"),bAr=l(),SE=a("li"),OMe=a("strong"),vAr=o("roberta"),FAr=o(" \u2014 "),AY=a("a"),TAr=o("TFRobertaForMaskedLM"),MAr=o(" (RoBERTa model)"),EAr=l(),RE=a("li"),VMe=a("strong"),CAr=o("roformer"),wAr=o(" \u2014 "),LY=a("a"),AAr=o("TFRoFormerForMaskedLM"),LAr=o(" (RoFormer model)"),yAr=l(),PE=a("li"),XMe=a("strong"),xAr=o("tapas"),$Ar=o(" \u2014 "),yY=a("a"),kAr=o("TFTapasForMaskedLM"),SAr=o(" (TAPAS model)"),RAr=l(),BE=a("li"),zMe=a("strong"),PAr=o("xlm"),BAr=o(" \u2014 "),xY=a("a"),IAr=o("TFXLMWithLMHeadModel"),NAr=o(" (XLM model)"),qAr=l(),IE=a("li"),QMe=a("strong"),jAr=o("xlm-roberta"),DAr=o(" \u2014 "),$Y=a("a"),GAr=o("TFXLMRobertaForMaskedLM"),OAr=o(" (XLM-RoBERTa model)"),VAr=l(),F(NE.$$.fragment),Mze=l(),Tc=a("h2"),qE=a("a"),WMe=a("span"),F(ux.$$.fragment),XAr=l(),HMe=a("span"),zAr=o("TFAutoModelForSeq2SeqLM"),Eze=l(),sr=a("div"),F(bx.$$.fragment),QAr=l(),Mc=a("p"),WAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=a("a"),HAr=o("from_pretrained()"),UAr=o(" class method or the "),SY=a("a"),JAr=o("from_config()"),YAr=o(` class
method.`),KAr=l(),vx=a("p"),ZAr=o("This class cannot be instantiated directly using "),UMe=a("code"),e6r=o("__init__()"),o6r=o(" (throws an error)."),r6r=l(),Nt=a("div"),F(Fx.$$.fragment),t6r=l(),JMe=a("p"),a6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n6r=l(),Ec=a("p"),s6r=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),l6r=o("not"),i6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),d6r=o("from_pretrained()"),c6r=o(" to load the model weights."),f6r=l(),F(jE.$$.fragment),m6r=l(),Pr=a("div"),F(Tx.$$.fragment),g6r=l(),KMe=a("p"),h6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p6r=l(),mn=a("p"),_6r=o("The model class to instantiate is selected based on the "),ZMe=a("code"),u6r=o("model_type"),b6r=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),T6r=o("pretrained_model_name_or_path"),M6r=o(":"),E6r=l(),ye=a("ul"),DE=a("li"),r4e=a("strong"),C6r=o("bart"),w6r=o(" \u2014 "),PY=a("a"),A6r=o("TFBartForConditionalGeneration"),L6r=o(" (BART model)"),y6r=l(),GE=a("li"),t4e=a("strong"),x6r=o("blenderbot"),$6r=o(" \u2014 "),BY=a("a"),k6r=o("TFBlenderbotForConditionalGeneration"),S6r=o(" (Blenderbot model)"),R6r=l(),OE=a("li"),a4e=a("strong"),P6r=o("blenderbot-small"),B6r=o(" \u2014 "),IY=a("a"),I6r=o("TFBlenderbotSmallForConditionalGeneration"),N6r=o(" (BlenderbotSmall model)"),q6r=l(),VE=a("li"),n4e=a("strong"),j6r=o("encoder-decoder"),D6r=o(" \u2014 "),NY=a("a"),G6r=o("TFEncoderDecoderModel"),O6r=o(" (Encoder decoder model)"),V6r=l(),XE=a("li"),s4e=a("strong"),X6r=o("led"),z6r=o(" \u2014 "),qY=a("a"),Q6r=o("TFLEDForConditionalGeneration"),W6r=o(" (LED model)"),H6r=l(),zE=a("li"),l4e=a("strong"),U6r=o("marian"),J6r=o(" \u2014 "),jY=a("a"),Y6r=o("TFMarianMTModel"),K6r=o(" (Marian model)"),Z6r=l(),QE=a("li"),i4e=a("strong"),eLr=o("mbart"),oLr=o(" \u2014 "),DY=a("a"),rLr=o("TFMBartForConditionalGeneration"),tLr=o(" (mBART model)"),aLr=l(),WE=a("li"),d4e=a("strong"),nLr=o("mt5"),sLr=o(" \u2014 "),GY=a("a"),lLr=o("TFMT5ForConditionalGeneration"),iLr=o(" (MT5 model)"),dLr=l(),HE=a("li"),c4e=a("strong"),cLr=o("pegasus"),fLr=o(" \u2014 "),OY=a("a"),mLr=o("TFPegasusForConditionalGeneration"),gLr=o(" (Pegasus model)"),hLr=l(),UE=a("li"),f4e=a("strong"),pLr=o("t5"),_Lr=o(" \u2014 "),VY=a("a"),uLr=o("TFT5ForConditionalGeneration"),bLr=o(" (T5 model)"),vLr=l(),F(JE.$$.fragment),Cze=l(),Cc=a("h2"),YE=a("a"),m4e=a("span"),F(Mx.$$.fragment),FLr=l(),g4e=a("span"),TLr=o("TFAutoModelForSequenceClassification"),wze=l(),lr=a("div"),F(Ex.$$.fragment),MLr=l(),wc=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XY=a("a"),CLr=o("from_pretrained()"),wLr=o(" class method or the "),zY=a("a"),ALr=o("from_config()"),LLr=o(` class
method.`),yLr=l(),Cx=a("p"),xLr=o("This class cannot be instantiated directly using "),h4e=a("code"),$Lr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),qt=a("div"),F(wx.$$.fragment),RLr=l(),p4e=a("p"),PLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BLr=l(),Ac=a("p"),ILr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),NLr=o("not"),qLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),jLr=o("from_pretrained()"),DLr=o(" to load the model weights."),GLr=l(),F(KE.$$.fragment),OLr=l(),Br=a("div"),F(Ax.$$.fragment),VLr=l(),u4e=a("p"),XLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zLr=l(),gn=a("p"),QLr=o("The model class to instantiate is selected based on the "),b4e=a("code"),WLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),te=a("ul"),ZE=a("li"),T4e=a("strong"),eyr=o("albert"),oyr=o(" \u2014 "),WY=a("a"),ryr=o("TFAlbertForSequenceClassification"),tyr=o(" (ALBERT model)"),ayr=l(),eC=a("li"),M4e=a("strong"),nyr=o("bert"),syr=o(" \u2014 "),HY=a("a"),lyr=o("TFBertForSequenceClassification"),iyr=o(" (BERT model)"),dyr=l(),oC=a("li"),E4e=a("strong"),cyr=o("camembert"),fyr=o(" \u2014 "),UY=a("a"),myr=o("TFCamembertForSequenceClassification"),gyr=o(" (CamemBERT model)"),hyr=l(),rC=a("li"),C4e=a("strong"),pyr=o("convbert"),_yr=o(" \u2014 "),JY=a("a"),uyr=o("TFConvBertForSequenceClassification"),byr=o(" (ConvBERT model)"),vyr=l(),tC=a("li"),w4e=a("strong"),Fyr=o("ctrl"),Tyr=o(" \u2014 "),YY=a("a"),Myr=o("TFCTRLForSequenceClassification"),Eyr=o(" (CTRL model)"),Cyr=l(),aC=a("li"),A4e=a("strong"),wyr=o("deberta"),Ayr=o(" \u2014 "),KY=a("a"),Lyr=o("TFDebertaForSequenceClassification"),yyr=o(" (DeBERTa model)"),xyr=l(),nC=a("li"),L4e=a("strong"),$yr=o("deberta-v2"),kyr=o(" \u2014 "),ZY=a("a"),Syr=o("TFDebertaV2ForSequenceClassification"),Ryr=o(" (DeBERTa-v2 model)"),Pyr=l(),sC=a("li"),y4e=a("strong"),Byr=o("distilbert"),Iyr=o(" \u2014 "),eK=a("a"),Nyr=o("TFDistilBertForSequenceClassification"),qyr=o(" (DistilBERT model)"),jyr=l(),lC=a("li"),x4e=a("strong"),Dyr=o("electra"),Gyr=o(" \u2014 "),oK=a("a"),Oyr=o("TFElectraForSequenceClassification"),Vyr=o(" (ELECTRA model)"),Xyr=l(),iC=a("li"),$4e=a("strong"),zyr=o("flaubert"),Qyr=o(" \u2014 "),rK=a("a"),Wyr=o("TFFlaubertForSequenceClassification"),Hyr=o(" (FlauBERT model)"),Uyr=l(),dC=a("li"),k4e=a("strong"),Jyr=o("funnel"),Yyr=o(" \u2014 "),tK=a("a"),Kyr=o("TFFunnelForSequenceClassification"),Zyr=o(" (Funnel Transformer model)"),e9r=l(),cC=a("li"),S4e=a("strong"),o9r=o("gpt2"),r9r=o(" \u2014 "),aK=a("a"),t9r=o("TFGPT2ForSequenceClassification"),a9r=o(" (OpenAI GPT-2 model)"),n9r=l(),fC=a("li"),R4e=a("strong"),s9r=o("gptj"),l9r=o(" \u2014 "),nK=a("a"),i9r=o("TFGPTJForSequenceClassification"),d9r=o(" (GPT-J model)"),c9r=l(),mC=a("li"),P4e=a("strong"),f9r=o("layoutlm"),m9r=o(" \u2014 "),sK=a("a"),g9r=o("TFLayoutLMForSequenceClassification"),h9r=o(" (LayoutLM model)"),p9r=l(),gC=a("li"),B4e=a("strong"),_9r=o("longformer"),u9r=o(" \u2014 "),lK=a("a"),b9r=o("TFLongformerForSequenceClassification"),v9r=o(" (Longformer model)"),F9r=l(),hC=a("li"),I4e=a("strong"),T9r=o("mobilebert"),M9r=o(" \u2014 "),iK=a("a"),E9r=o("TFMobileBertForSequenceClassification"),C9r=o(" (MobileBERT model)"),w9r=l(),pC=a("li"),N4e=a("strong"),A9r=o("mpnet"),L9r=o(" \u2014 "),dK=a("a"),y9r=o("TFMPNetForSequenceClassification"),x9r=o(" (MPNet model)"),$9r=l(),_C=a("li"),q4e=a("strong"),k9r=o("openai-gpt"),S9r=o(" \u2014 "),cK=a("a"),R9r=o("TFOpenAIGPTForSequenceClassification"),P9r=o(" (OpenAI GPT model)"),B9r=l(),uC=a("li"),j4e=a("strong"),I9r=o("rembert"),N9r=o(" \u2014 "),fK=a("a"),q9r=o("TFRemBertForSequenceClassification"),j9r=o(" (RemBERT model)"),D9r=l(),bC=a("li"),D4e=a("strong"),G9r=o("roberta"),O9r=o(" \u2014 "),mK=a("a"),V9r=o("TFRobertaForSequenceClassification"),X9r=o(" (RoBERTa model)"),z9r=l(),vC=a("li"),G4e=a("strong"),Q9r=o("roformer"),W9r=o(" \u2014 "),gK=a("a"),H9r=o("TFRoFormerForSequenceClassification"),U9r=o(" (RoFormer model)"),J9r=l(),FC=a("li"),O4e=a("strong"),Y9r=o("tapas"),K9r=o(" \u2014 "),hK=a("a"),Z9r=o("TFTapasForSequenceClassification"),exr=o(" (TAPAS model)"),oxr=l(),TC=a("li"),V4e=a("strong"),rxr=o("transfo-xl"),txr=o(" \u2014 "),pK=a("a"),axr=o("TFTransfoXLForSequenceClassification"),nxr=o(" (Transformer-XL model)"),sxr=l(),MC=a("li"),X4e=a("strong"),lxr=o("xlm"),ixr=o(" \u2014 "),_K=a("a"),dxr=o("TFXLMForSequenceClassification"),cxr=o(" (XLM model)"),fxr=l(),EC=a("li"),z4e=a("strong"),mxr=o("xlm-roberta"),gxr=o(" \u2014 "),uK=a("a"),hxr=o("TFXLMRobertaForSequenceClassification"),pxr=o(" (XLM-RoBERTa model)"),_xr=l(),CC=a("li"),Q4e=a("strong"),uxr=o("xlnet"),bxr=o(" \u2014 "),bK=a("a"),vxr=o("TFXLNetForSequenceClassification"),Fxr=o(" (XLNet model)"),Txr=l(),F(wC.$$.fragment),Aze=l(),Lc=a("h2"),AC=a("a"),W4e=a("span"),F(Lx.$$.fragment),Mxr=l(),H4e=a("span"),Exr=o("TFAutoModelForMultipleChoice"),Lze=l(),ir=a("div"),F(yx.$$.fragment),Cxr=l(),yc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vK=a("a"),Axr=o("from_pretrained()"),Lxr=o(" class method or the "),FK=a("a"),yxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),xx=a("p"),kxr=o("This class cannot be instantiated directly using "),U4e=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Pxr=l(),jt=a("div"),F($x.$$.fragment),Bxr=l(),J4e=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nxr=l(),xc=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),F(LC.$$.fragment),Xxr=l(),Ir=a("div"),F(kx.$$.fragment),zxr=l(),K4e=a("p"),Qxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxr=l(),hn=a("p"),Hxr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),Uxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),Zxr=o("pretrained_model_name_or_path"),e$r=o(":"),o$r=l(),_e=a("ul"),yC=a("li"),rEe=a("strong"),r$r=o("albert"),t$r=o(" \u2014 "),MK=a("a"),a$r=o("TFAlbertForMultipleChoice"),n$r=o(" (ALBERT model)"),s$r=l(),xC=a("li"),tEe=a("strong"),l$r=o("bert"),i$r=o(" \u2014 "),EK=a("a"),d$r=o("TFBertForMultipleChoice"),c$r=o(" (BERT model)"),f$r=l(),$C=a("li"),aEe=a("strong"),m$r=o("camembert"),g$r=o(" \u2014 "),CK=a("a"),h$r=o("TFCamembertForMultipleChoice"),p$r=o(" (CamemBERT model)"),_$r=l(),kC=a("li"),nEe=a("strong"),u$r=o("convbert"),b$r=o(" \u2014 "),wK=a("a"),v$r=o("TFConvBertForMultipleChoice"),F$r=o(" (ConvBERT model)"),T$r=l(),SC=a("li"),sEe=a("strong"),M$r=o("distilbert"),E$r=o(" \u2014 "),AK=a("a"),C$r=o("TFDistilBertForMultipleChoice"),w$r=o(" (DistilBERT model)"),A$r=l(),RC=a("li"),lEe=a("strong"),L$r=o("electra"),y$r=o(" \u2014 "),LK=a("a"),x$r=o("TFElectraForMultipleChoice"),$$r=o(" (ELECTRA model)"),k$r=l(),PC=a("li"),iEe=a("strong"),S$r=o("flaubert"),R$r=o(" \u2014 "),yK=a("a"),P$r=o("TFFlaubertForMultipleChoice"),B$r=o(" (FlauBERT model)"),I$r=l(),BC=a("li"),dEe=a("strong"),N$r=o("funnel"),q$r=o(" \u2014 "),xK=a("a"),j$r=o("TFFunnelForMultipleChoice"),D$r=o(" (Funnel Transformer model)"),G$r=l(),IC=a("li"),cEe=a("strong"),O$r=o("longformer"),V$r=o(" \u2014 "),$K=a("a"),X$r=o("TFLongformerForMultipleChoice"),z$r=o(" (Longformer model)"),Q$r=l(),NC=a("li"),fEe=a("strong"),W$r=o("mobilebert"),H$r=o(" \u2014 "),kK=a("a"),U$r=o("TFMobileBertForMultipleChoice"),J$r=o(" (MobileBERT model)"),Y$r=l(),qC=a("li"),mEe=a("strong"),K$r=o("mpnet"),Z$r=o(" \u2014 "),SK=a("a"),ekr=o("TFMPNetForMultipleChoice"),okr=o(" (MPNet model)"),rkr=l(),jC=a("li"),gEe=a("strong"),tkr=o("rembert"),akr=o(" \u2014 "),RK=a("a"),nkr=o("TFRemBertForMultipleChoice"),skr=o(" (RemBERT model)"),lkr=l(),DC=a("li"),hEe=a("strong"),ikr=o("roberta"),dkr=o(" \u2014 "),PK=a("a"),ckr=o("TFRobertaForMultipleChoice"),fkr=o(" (RoBERTa model)"),mkr=l(),GC=a("li"),pEe=a("strong"),gkr=o("roformer"),hkr=o(" \u2014 "),BK=a("a"),pkr=o("TFRoFormerForMultipleChoice"),_kr=o(" (RoFormer model)"),ukr=l(),OC=a("li"),_Ee=a("strong"),bkr=o("xlm"),vkr=o(" \u2014 "),IK=a("a"),Fkr=o("TFXLMForMultipleChoice"),Tkr=o(" (XLM model)"),Mkr=l(),VC=a("li"),uEe=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),NK=a("a"),wkr=o("TFXLMRobertaForMultipleChoice"),Akr=o(" (XLM-RoBERTa model)"),Lkr=l(),XC=a("li"),bEe=a("strong"),ykr=o("xlnet"),xkr=o(" \u2014 "),qK=a("a"),$kr=o("TFXLNetForMultipleChoice"),kkr=o(" (XLNet model)"),Skr=l(),F(zC.$$.fragment),yze=l(),$c=a("h2"),QC=a("a"),vEe=a("span"),F(Sx.$$.fragment),Rkr=l(),FEe=a("span"),Pkr=o("TFAutoModelForNextSentencePrediction"),xze=l(),dr=a("div"),F(Rx.$$.fragment),Bkr=l(),kc=a("p"),Ikr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=a("a"),Nkr=o("from_pretrained()"),qkr=o(" class method or the "),DK=a("a"),jkr=o("from_config()"),Dkr=o(` class
method.`),Gkr=l(),Px=a("p"),Okr=o("This class cannot be instantiated directly using "),TEe=a("code"),Vkr=o("__init__()"),Xkr=o(" (throws an error)."),zkr=l(),Dt=a("div"),F(Bx.$$.fragment),Qkr=l(),MEe=a("p"),Wkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hkr=l(),Sc=a("p"),Ukr=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),Jkr=o("not"),Ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),Kkr=o("from_pretrained()"),Zkr=o(" to load the model weights."),eSr=l(),F(WC.$$.fragment),oSr=l(),Nr=a("div"),F(Ix.$$.fragment),rSr=l(),CEe=a("p"),tSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aSr=l(),pn=a("p"),nSr=o("The model class to instantiate is selected based on the "),wEe=a("code"),sSr=o("model_type"),lSr=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),iSr=o("pretrained_model_name_or_path"),dSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),cSr=o("pretrained_model_name_or_path"),fSr=o(":"),mSr=l(),Nx=a("ul"),HC=a("li"),yEe=a("strong"),gSr=o("bert"),hSr=o(" \u2014 "),OK=a("a"),pSr=o("TFBertForNextSentencePrediction"),_Sr=o(" (BERT model)"),uSr=l(),UC=a("li"),xEe=a("strong"),bSr=o("mobilebert"),vSr=o(" \u2014 "),VK=a("a"),FSr=o("TFMobileBertForNextSentencePrediction"),TSr=o(" (MobileBERT model)"),MSr=l(),F(JC.$$.fragment),$ze=l(),Rc=a("h2"),YC=a("a"),$Ee=a("span"),F(qx.$$.fragment),ESr=l(),kEe=a("span"),CSr=o("TFAutoModelForTableQuestionAnswering"),kze=l(),cr=a("div"),F(jx.$$.fragment),wSr=l(),Pc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XK=a("a"),LSr=o("from_pretrained()"),ySr=o(" class method or the "),zK=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),Dx=a("p"),SSr=o("This class cannot be instantiated directly using "),SEe=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),Gt=a("div"),F(Gx.$$.fragment),ISr=l(),REe=a("p"),NSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qSr=l(),Bc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(KC.$$.fragment),zSr=l(),qr=a("div"),F(Ox.$$.fragment),QSr=l(),BEe=a("p"),WSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HSr=l(),_n=a("p"),USr=o("The model class to instantiate is selected based on the "),IEe=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),jEe=a("ul"),ZC=a("li"),DEe=a("strong"),tRr=o("tapas"),aRr=o(" \u2014 "),WK=a("a"),nRr=o("TFTapasForQuestionAnswering"),sRr=o(" (TAPAS model)"),lRr=l(),F(e3.$$.fragment),Sze=l(),Ic=a("h2"),o3=a("a"),GEe=a("span"),F(Vx.$$.fragment),iRr=l(),OEe=a("span"),dRr=o("TFAutoModelForTokenClassification"),Rze=l(),fr=a("div"),F(Xx.$$.fragment),cRr=l(),Nc=a("p"),fRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HK=a("a"),mRr=o("from_pretrained()"),gRr=o(" class method or the "),UK=a("a"),hRr=o("from_config()"),pRr=o(` class
method.`),_Rr=l(),zx=a("p"),uRr=o("This class cannot be instantiated directly using "),VEe=a("code"),bRr=o("__init__()"),vRr=o(" (throws an error)."),FRr=l(),Ot=a("div"),F(Qx.$$.fragment),TRr=l(),XEe=a("p"),MRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ERr=l(),qc=a("p"),CRr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),wRr=o("not"),ARr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),LRr=o("from_pretrained()"),yRr=o(" to load the model weights."),xRr=l(),F(r3.$$.fragment),$Rr=l(),jr=a("div"),F(Wx.$$.fragment),kRr=l(),QEe=a("p"),SRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RRr=l(),un=a("p"),PRr=o("The model class to instantiate is selected based on the "),WEe=a("code"),BRr=o("model_type"),IRr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),NRr=o("pretrained_model_name_or_path"),qRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),jRr=o("pretrained_model_name_or_path"),DRr=o(":"),GRr=l(),de=a("ul"),t3=a("li"),JEe=a("strong"),ORr=o("albert"),VRr=o(" \u2014 "),YK=a("a"),XRr=o("TFAlbertForTokenClassification"),zRr=o(" (ALBERT model)"),QRr=l(),a3=a("li"),YEe=a("strong"),WRr=o("bert"),HRr=o(" \u2014 "),KK=a("a"),URr=o("TFBertForTokenClassification"),JRr=o(" (BERT model)"),YRr=l(),n3=a("li"),KEe=a("strong"),KRr=o("camembert"),ZRr=o(" \u2014 "),ZK=a("a"),ePr=o("TFCamembertForTokenClassification"),oPr=o(" (CamemBERT model)"),rPr=l(),s3=a("li"),ZEe=a("strong"),tPr=o("convbert"),aPr=o(" \u2014 "),eZ=a("a"),nPr=o("TFConvBertForTokenClassification"),sPr=o(" (ConvBERT model)"),lPr=l(),l3=a("li"),eCe=a("strong"),iPr=o("deberta"),dPr=o(" \u2014 "),oZ=a("a"),cPr=o("TFDebertaForTokenClassification"),fPr=o(" (DeBERTa model)"),mPr=l(),i3=a("li"),oCe=a("strong"),gPr=o("deberta-v2"),hPr=o(" \u2014 "),rZ=a("a"),pPr=o("TFDebertaV2ForTokenClassification"),_Pr=o(" (DeBERTa-v2 model)"),uPr=l(),d3=a("li"),rCe=a("strong"),bPr=o("distilbert"),vPr=o(" \u2014 "),tZ=a("a"),FPr=o("TFDistilBertForTokenClassification"),TPr=o(" (DistilBERT model)"),MPr=l(),c3=a("li"),tCe=a("strong"),EPr=o("electra"),CPr=o(" \u2014 "),aZ=a("a"),wPr=o("TFElectraForTokenClassification"),APr=o(" (ELECTRA model)"),LPr=l(),f3=a("li"),aCe=a("strong"),yPr=o("flaubert"),xPr=o(" \u2014 "),nZ=a("a"),$Pr=o("TFFlaubertForTokenClassification"),kPr=o(" (FlauBERT model)"),SPr=l(),m3=a("li"),nCe=a("strong"),RPr=o("funnel"),PPr=o(" \u2014 "),sZ=a("a"),BPr=o("TFFunnelForTokenClassification"),IPr=o(" (Funnel Transformer model)"),NPr=l(),g3=a("li"),sCe=a("strong"),qPr=o("layoutlm"),jPr=o(" \u2014 "),lZ=a("a"),DPr=o("TFLayoutLMForTokenClassification"),GPr=o(" (LayoutLM model)"),OPr=l(),h3=a("li"),lCe=a("strong"),VPr=o("longformer"),XPr=o(" \u2014 "),iZ=a("a"),zPr=o("TFLongformerForTokenClassification"),QPr=o(" (Longformer model)"),WPr=l(),p3=a("li"),iCe=a("strong"),HPr=o("mobilebert"),UPr=o(" \u2014 "),dZ=a("a"),JPr=o("TFMobileBertForTokenClassification"),YPr=o(" (MobileBERT model)"),KPr=l(),_3=a("li"),dCe=a("strong"),ZPr=o("mpnet"),eBr=o(" \u2014 "),cZ=a("a"),oBr=o("TFMPNetForTokenClassification"),rBr=o(" (MPNet model)"),tBr=l(),u3=a("li"),cCe=a("strong"),aBr=o("rembert"),nBr=o(" \u2014 "),fZ=a("a"),sBr=o("TFRemBertForTokenClassification"),lBr=o(" (RemBERT model)"),iBr=l(),b3=a("li"),fCe=a("strong"),dBr=o("roberta"),cBr=o(" \u2014 "),mZ=a("a"),fBr=o("TFRobertaForTokenClassification"),mBr=o(" (RoBERTa model)"),gBr=l(),v3=a("li"),mCe=a("strong"),hBr=o("roformer"),pBr=o(" \u2014 "),gZ=a("a"),_Br=o("TFRoFormerForTokenClassification"),uBr=o(" (RoFormer model)"),bBr=l(),F3=a("li"),gCe=a("strong"),vBr=o("xlm"),FBr=o(" \u2014 "),hZ=a("a"),TBr=o("TFXLMForTokenClassification"),MBr=o(" (XLM model)"),EBr=l(),T3=a("li"),hCe=a("strong"),CBr=o("xlm-roberta"),wBr=o(" \u2014 "),pZ=a("a"),ABr=o("TFXLMRobertaForTokenClassification"),LBr=o(" (XLM-RoBERTa model)"),yBr=l(),M3=a("li"),pCe=a("strong"),xBr=o("xlnet"),$Br=o(" \u2014 "),_Z=a("a"),kBr=o("TFXLNetForTokenClassification"),SBr=o(" (XLNet model)"),RBr=l(),F(E3.$$.fragment),Pze=l(),jc=a("h2"),C3=a("a"),_Ce=a("span"),F(Hx.$$.fragment),PBr=l(),uCe=a("span"),BBr=o("TFAutoModelForQuestionAnswering"),Bze=l(),mr=a("div"),F(Ux.$$.fragment),IBr=l(),Dc=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=a("a"),qBr=o("from_pretrained()"),jBr=o(" class method or the "),bZ=a("a"),DBr=o("from_config()"),GBr=o(` class
method.`),OBr=l(),Jx=a("p"),VBr=o("This class cannot be instantiated directly using "),bCe=a("code"),XBr=o("__init__()"),zBr=o(" (throws an error)."),QBr=l(),Vt=a("div"),F(Yx.$$.fragment),WBr=l(),vCe=a("p"),HBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UBr=l(),Gc=a("p"),JBr=o(`Note:
Loading a model from its configuration file does `),FCe=a("strong"),YBr=o("not"),KBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),ZBr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(w3.$$.fragment),rIr=l(),Dr=a("div"),F(Kx.$$.fragment),tIr=l(),TCe=a("p"),aIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nIr=l(),bn=a("p"),sIr=o("The model class to instantiate is selected based on the "),MCe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),ECe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),ce=a("ul"),A3=a("li"),wCe=a("strong"),hIr=o("albert"),pIr=o(" \u2014 "),FZ=a("a"),_Ir=o("TFAlbertForQuestionAnswering"),uIr=o(" (ALBERT model)"),bIr=l(),L3=a("li"),ACe=a("strong"),vIr=o("bert"),FIr=o(" \u2014 "),TZ=a("a"),TIr=o("TFBertForQuestionAnswering"),MIr=o(" (BERT model)"),EIr=l(),y3=a("li"),LCe=a("strong"),CIr=o("camembert"),wIr=o(" \u2014 "),MZ=a("a"),AIr=o("TFCamembertForQuestionAnswering"),LIr=o(" (CamemBERT model)"),yIr=l(),x3=a("li"),yCe=a("strong"),xIr=o("convbert"),$Ir=o(" \u2014 "),EZ=a("a"),kIr=o("TFConvBertForQuestionAnswering"),SIr=o(" (ConvBERT model)"),RIr=l(),$3=a("li"),xCe=a("strong"),PIr=o("deberta"),BIr=o(" \u2014 "),CZ=a("a"),IIr=o("TFDebertaForQuestionAnswering"),NIr=o(" (DeBERTa model)"),qIr=l(),k3=a("li"),$Ce=a("strong"),jIr=o("deberta-v2"),DIr=o(" \u2014 "),wZ=a("a"),GIr=o("TFDebertaV2ForQuestionAnswering"),OIr=o(" (DeBERTa-v2 model)"),VIr=l(),S3=a("li"),kCe=a("strong"),XIr=o("distilbert"),zIr=o(" \u2014 "),AZ=a("a"),QIr=o("TFDistilBertForQuestionAnswering"),WIr=o(" (DistilBERT model)"),HIr=l(),R3=a("li"),SCe=a("strong"),UIr=o("electra"),JIr=o(" \u2014 "),LZ=a("a"),YIr=o("TFElectraForQuestionAnswering"),KIr=o(" (ELECTRA model)"),ZIr=l(),P3=a("li"),RCe=a("strong"),eNr=o("flaubert"),oNr=o(" \u2014 "),yZ=a("a"),rNr=o("TFFlaubertForQuestionAnsweringSimple"),tNr=o(" (FlauBERT model)"),aNr=l(),B3=a("li"),PCe=a("strong"),nNr=o("funnel"),sNr=o(" \u2014 "),xZ=a("a"),lNr=o("TFFunnelForQuestionAnswering"),iNr=o(" (Funnel Transformer model)"),dNr=l(),I3=a("li"),BCe=a("strong"),cNr=o("gptj"),fNr=o(" \u2014 "),$Z=a("a"),mNr=o("TFGPTJForQuestionAnswering"),gNr=o(" (GPT-J model)"),hNr=l(),N3=a("li"),ICe=a("strong"),pNr=o("longformer"),_Nr=o(" \u2014 "),kZ=a("a"),uNr=o("TFLongformerForQuestionAnswering"),bNr=o(" (Longformer model)"),vNr=l(),q3=a("li"),NCe=a("strong"),FNr=o("mobilebert"),TNr=o(" \u2014 "),SZ=a("a"),MNr=o("TFMobileBertForQuestionAnswering"),ENr=o(" (MobileBERT model)"),CNr=l(),j3=a("li"),qCe=a("strong"),wNr=o("mpnet"),ANr=o(" \u2014 "),RZ=a("a"),LNr=o("TFMPNetForQuestionAnswering"),yNr=o(" (MPNet model)"),xNr=l(),D3=a("li"),jCe=a("strong"),$Nr=o("rembert"),kNr=o(" \u2014 "),PZ=a("a"),SNr=o("TFRemBertForQuestionAnswering"),RNr=o(" (RemBERT model)"),PNr=l(),G3=a("li"),DCe=a("strong"),BNr=o("roberta"),INr=o(" \u2014 "),BZ=a("a"),NNr=o("TFRobertaForQuestionAnswering"),qNr=o(" (RoBERTa model)"),jNr=l(),O3=a("li"),GCe=a("strong"),DNr=o("roformer"),GNr=o(" \u2014 "),IZ=a("a"),ONr=o("TFRoFormerForQuestionAnswering"),VNr=o(" (RoFormer model)"),XNr=l(),V3=a("li"),OCe=a("strong"),zNr=o("xlm"),QNr=o(" \u2014 "),NZ=a("a"),WNr=o("TFXLMForQuestionAnsweringSimple"),HNr=o(" (XLM model)"),UNr=l(),X3=a("li"),VCe=a("strong"),JNr=o("xlm-roberta"),YNr=o(" \u2014 "),qZ=a("a"),KNr=o("TFXLMRobertaForQuestionAnswering"),ZNr=o(" (XLM-RoBERTa model)"),eqr=l(),z3=a("li"),XCe=a("strong"),oqr=o("xlnet"),rqr=o(" \u2014 "),jZ=a("a"),tqr=o("TFXLNetForQuestionAnsweringSimple"),aqr=o(" (XLNet model)"),nqr=l(),F(Q3.$$.fragment),Ize=l(),Oc=a("h2"),W3=a("a"),zCe=a("span"),F(Zx.$$.fragment),sqr=l(),QCe=a("span"),lqr=o("TFAutoModelForVision2Seq"),Nze=l(),gr=a("div"),F(e$.$$.fragment),iqr=l(),Vc=a("p"),dqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=a("a"),cqr=o("from_pretrained()"),fqr=o(" class method or the "),GZ=a("a"),mqr=o("from_config()"),gqr=o(` class
method.`),hqr=l(),o$=a("p"),pqr=o("This class cannot be instantiated directly using "),WCe=a("code"),_qr=o("__init__()"),uqr=o(" (throws an error)."),bqr=l(),Xt=a("div"),F(r$.$$.fragment),vqr=l(),HCe=a("p"),Fqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tqr=l(),Xc=a("p"),Mqr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),Eqr=o("not"),Cqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),wqr=o("from_pretrained()"),Aqr=o(" to load the model weights."),Lqr=l(),F(H3.$$.fragment),yqr=l(),Gr=a("div"),F(t$.$$.fragment),xqr=l(),JCe=a("p"),$qr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kqr=l(),vn=a("p"),Sqr=o("The model class to instantiate is selected based on the "),YCe=a("code"),Rqr=o("model_type"),Pqr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),Bqr=o("pretrained_model_name_or_path"),Iqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),Nqr=o("pretrained_model_name_or_path"),qqr=o(":"),jqr=l(),e3e=a("ul"),U3=a("li"),o3e=a("strong"),Dqr=o("vision-encoder-decoder"),Gqr=o(" \u2014 "),VZ=a("a"),Oqr=o("TFVisionEncoderDecoderModel"),Vqr=o(" (Vision Encoder decoder model)"),Xqr=l(),F(J3.$$.fragment),qze=l(),zc=a("h2"),Y3=a("a"),r3e=a("span"),F(a$.$$.fragment),zqr=l(),t3e=a("span"),Qqr=o("TFAutoModelForSpeechSeq2Seq"),jze=l(),hr=a("div"),F(n$.$$.fragment),Wqr=l(),Qc=a("p"),Hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XZ=a("a"),Uqr=o("from_pretrained()"),Jqr=o(" class method or the "),zZ=a("a"),Yqr=o("from_config()"),Kqr=o(` class
method.`),Zqr=l(),s$=a("p"),ejr=o("This class cannot be instantiated directly using "),a3e=a("code"),ojr=o("__init__()"),rjr=o(" (throws an error)."),tjr=l(),zt=a("div"),F(l$.$$.fragment),ajr=l(),n3e=a("p"),njr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sjr=l(),Wc=a("p"),ljr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),ijr=o("not"),djr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),cjr=o("from_pretrained()"),fjr=o(" to load the model weights."),mjr=l(),F(K3.$$.fragment),gjr=l(),Or=a("div"),F(i$.$$.fragment),hjr=l(),l3e=a("p"),pjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_jr=l(),Fn=a("p"),ujr=o("The model class to instantiate is selected based on the "),i3e=a("code"),bjr=o("model_type"),vjr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),Mjr=o("pretrained_model_name_or_path"),Ejr=o(":"),Cjr=l(),f3e=a("ul"),Z3=a("li"),m3e=a("strong"),wjr=o("speech_to_text"),Ajr=o(" \u2014 "),WZ=a("a"),Ljr=o("TFSpeech2TextForConditionalGeneration"),yjr=o(" (Speech2Text model)"),xjr=l(),F(e5.$$.fragment),Dze=l(),Hc=a("h2"),o5=a("a"),g3e=a("span"),F(d$.$$.fragment),$jr=l(),h3e=a("span"),kjr=o("FlaxAutoModel"),Gze=l(),pr=a("div"),F(c$.$$.fragment),Sjr=l(),Uc=a("p"),Rjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HZ=a("a"),Pjr=o("from_pretrained()"),Bjr=o(" class method or the "),UZ=a("a"),Ijr=o("from_config()"),Njr=o(` class
method.`),qjr=l(),f$=a("p"),jjr=o("This class cannot be instantiated directly using "),p3e=a("code"),Djr=o("__init__()"),Gjr=o(" (throws an error)."),Ojr=l(),Qt=a("div"),F(m$.$$.fragment),Vjr=l(),_3e=a("p"),Xjr=o("Instantiates one of the base model classes of the library from a configuration."),zjr=l(),Jc=a("p"),Qjr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),Wjr=o("not"),Hjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Ujr=o("from_pretrained()"),Jjr=o(" to load the model weights."),Yjr=l(),F(r5.$$.fragment),Kjr=l(),Vr=a("div"),F(g$.$$.fragment),Zjr=l(),b3e=a("p"),eDr=o("Instantiate one of the base model classes of the library from a pretrained model."),oDr=l(),Tn=a("p"),rDr=o("The model class to instantiate is selected based on the "),v3e=a("code"),tDr=o("model_type"),aDr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),nDr=o("pretrained_model_name_or_path"),sDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=a("code"),lDr=o("pretrained_model_name_or_path"),iDr=o(":"),dDr=l(),oe=a("ul"),t5=a("li"),M3e=a("strong"),cDr=o("albert"),fDr=o(" \u2014 "),YZ=a("a"),mDr=o("FlaxAlbertModel"),gDr=o(" (ALBERT model)"),hDr=l(),a5=a("li"),E3e=a("strong"),pDr=o("bart"),_Dr=o(" \u2014 "),KZ=a("a"),uDr=o("FlaxBartModel"),bDr=o(" (BART model)"),vDr=l(),n5=a("li"),C3e=a("strong"),FDr=o("beit"),TDr=o(" \u2014 "),ZZ=a("a"),MDr=o("FlaxBeitModel"),EDr=o(" (BEiT model)"),CDr=l(),s5=a("li"),w3e=a("strong"),wDr=o("bert"),ADr=o(" \u2014 "),eee=a("a"),LDr=o("FlaxBertModel"),yDr=o(" (BERT model)"),xDr=l(),l5=a("li"),A3e=a("strong"),$Dr=o("big_bird"),kDr=o(" \u2014 "),oee=a("a"),SDr=o("FlaxBigBirdModel"),RDr=o(" (BigBird model)"),PDr=l(),i5=a("li"),L3e=a("strong"),BDr=o("blenderbot"),IDr=o(" \u2014 "),ree=a("a"),NDr=o("FlaxBlenderbotModel"),qDr=o(" (Blenderbot model)"),jDr=l(),d5=a("li"),y3e=a("strong"),DDr=o("blenderbot-small"),GDr=o(" \u2014 "),tee=a("a"),ODr=o("FlaxBlenderbotSmallModel"),VDr=o(" (BlenderbotSmall model)"),XDr=l(),c5=a("li"),x3e=a("strong"),zDr=o("clip"),QDr=o(" \u2014 "),aee=a("a"),WDr=o("FlaxCLIPModel"),HDr=o(" (CLIP model)"),UDr=l(),f5=a("li"),$3e=a("strong"),JDr=o("distilbert"),YDr=o(" \u2014 "),nee=a("a"),KDr=o("FlaxDistilBertModel"),ZDr=o(" (DistilBERT model)"),eGr=l(),m5=a("li"),k3e=a("strong"),oGr=o("electra"),rGr=o(" \u2014 "),see=a("a"),tGr=o("FlaxElectraModel"),aGr=o(" (ELECTRA model)"),nGr=l(),g5=a("li"),S3e=a("strong"),sGr=o("gpt2"),lGr=o(" \u2014 "),lee=a("a"),iGr=o("FlaxGPT2Model"),dGr=o(" (OpenAI GPT-2 model)"),cGr=l(),h5=a("li"),R3e=a("strong"),fGr=o("gpt_neo"),mGr=o(" \u2014 "),iee=a("a"),gGr=o("FlaxGPTNeoModel"),hGr=o(" (GPT Neo model)"),pGr=l(),p5=a("li"),P3e=a("strong"),_Gr=o("gptj"),uGr=o(" \u2014 "),dee=a("a"),bGr=o("FlaxGPTJModel"),vGr=o(" (GPT-J model)"),FGr=l(),_5=a("li"),B3e=a("strong"),TGr=o("longt5"),MGr=o(" \u2014 "),cee=a("a"),EGr=o("FlaxLongT5Model"),CGr=o(" (LongT5 model)"),wGr=l(),u5=a("li"),I3e=a("strong"),AGr=o("marian"),LGr=o(" \u2014 "),fee=a("a"),yGr=o("FlaxMarianModel"),xGr=o(" (Marian model)"),$Gr=l(),b5=a("li"),N3e=a("strong"),kGr=o("mbart"),SGr=o(" \u2014 "),mee=a("a"),RGr=o("FlaxMBartModel"),PGr=o(" (mBART model)"),BGr=l(),v5=a("li"),q3e=a("strong"),IGr=o("mt5"),NGr=o(" \u2014 "),gee=a("a"),qGr=o("FlaxMT5Model"),jGr=o(" (MT5 model)"),DGr=l(),F5=a("li"),j3e=a("strong"),GGr=o("opt"),OGr=o(" \u2014 "),hee=a("a"),VGr=o("FlaxOPTModel"),XGr=o(" (OPT model)"),zGr=l(),T5=a("li"),D3e=a("strong"),QGr=o("pegasus"),WGr=o(" \u2014 "),pee=a("a"),HGr=o("FlaxPegasusModel"),UGr=o(" (Pegasus model)"),JGr=l(),M5=a("li"),G3e=a("strong"),YGr=o("roberta"),KGr=o(" \u2014 "),_ee=a("a"),ZGr=o("FlaxRobertaModel"),eOr=o(" (RoBERTa model)"),oOr=l(),E5=a("li"),O3e=a("strong"),rOr=o("roformer"),tOr=o(" \u2014 "),uee=a("a"),aOr=o("FlaxRoFormerModel"),nOr=o(" (RoFormer model)"),sOr=l(),C5=a("li"),V3e=a("strong"),lOr=o("t5"),iOr=o(" \u2014 "),bee=a("a"),dOr=o("FlaxT5Model"),cOr=o(" (T5 model)"),fOr=l(),w5=a("li"),X3e=a("strong"),mOr=o("vision-text-dual-encoder"),gOr=o(" \u2014 "),vee=a("a"),hOr=o("FlaxVisionTextDualEncoderModel"),pOr=o(" (VisionTextDualEncoder model)"),_Or=l(),A5=a("li"),z3e=a("strong"),uOr=o("vit"),bOr=o(" \u2014 "),Fee=a("a"),vOr=o("FlaxViTModel"),FOr=o(" (ViT model)"),TOr=l(),L5=a("li"),Q3e=a("strong"),MOr=o("wav2vec2"),EOr=o(" \u2014 "),Tee=a("a"),COr=o("FlaxWav2Vec2Model"),wOr=o(" (Wav2Vec2 model)"),AOr=l(),y5=a("li"),W3e=a("strong"),LOr=o("xglm"),yOr=o(" \u2014 "),Mee=a("a"),xOr=o("FlaxXGLMModel"),$Or=o(" (XGLM model)"),kOr=l(),x5=a("li"),H3e=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),Eee=a("a"),POr=o("FlaxXLMRobertaModel"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F($5.$$.fragment),Oze=l(),Yc=a("h2"),k5=a("a"),U3e=a("span"),F(h$.$$.fragment),NOr=l(),J3e=a("span"),qOr=o("FlaxAutoModelForCausalLM"),Vze=l(),_r=a("div"),F(p$.$$.fragment),jOr=l(),Kc=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cee=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),wee=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),_$=a("p"),QOr=o("This class cannot be instantiated directly using "),Y3e=a("code"),WOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Wt=a("div"),F(u$.$$.fragment),JOr=l(),K3e=a("p"),YOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KOr=l(),Zc=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(S5.$$.fragment),nVr=l(),Xr=a("div"),F(b$.$$.fragment),sVr=l(),e5e=a("p"),lVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iVr=l(),Mn=a("p"),dVr=o("The model class to instantiate is selected based on the "),o5e=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),xe=a("ul"),R5=a("li"),a5e=a("strong"),uVr=o("bart"),bVr=o(" \u2014 "),Lee=a("a"),vVr=o("FlaxBartForCausalLM"),FVr=o(" (BART model)"),TVr=l(),P5=a("li"),n5e=a("strong"),MVr=o("bert"),EVr=o(" \u2014 "),yee=a("a"),CVr=o("FlaxBertForCausalLM"),wVr=o(" (BERT model)"),AVr=l(),B5=a("li"),s5e=a("strong"),LVr=o("big_bird"),yVr=o(" \u2014 "),xee=a("a"),xVr=o("FlaxBigBirdForCausalLM"),$Vr=o(" (BigBird model)"),kVr=l(),I5=a("li"),l5e=a("strong"),SVr=o("electra"),RVr=o(" \u2014 "),$ee=a("a"),PVr=o("FlaxElectraForCausalLM"),BVr=o(" (ELECTRA model)"),IVr=l(),N5=a("li"),i5e=a("strong"),NVr=o("gpt2"),qVr=o(" \u2014 "),kee=a("a"),jVr=o("FlaxGPT2LMHeadModel"),DVr=o(" (OpenAI GPT-2 model)"),GVr=l(),q5=a("li"),d5e=a("strong"),OVr=o("gpt_neo"),VVr=o(" \u2014 "),See=a("a"),XVr=o("FlaxGPTNeoForCausalLM"),zVr=o(" (GPT Neo model)"),QVr=l(),j5=a("li"),c5e=a("strong"),WVr=o("gptj"),HVr=o(" \u2014 "),Ree=a("a"),UVr=o("FlaxGPTJForCausalLM"),JVr=o(" (GPT-J model)"),YVr=l(),D5=a("li"),f5e=a("strong"),KVr=o("opt"),ZVr=o(" \u2014 "),Pee=a("a"),eXr=o("FlaxOPTForCausalLM"),oXr=o(" (OPT model)"),rXr=l(),G5=a("li"),m5e=a("strong"),tXr=o("roberta"),aXr=o(" \u2014 "),Bee=a("a"),nXr=o("FlaxRobertaForCausalLM"),sXr=o(" (RoBERTa model)"),lXr=l(),O5=a("li"),g5e=a("strong"),iXr=o("xglm"),dXr=o(" \u2014 "),Iee=a("a"),cXr=o("FlaxXGLMForCausalLM"),fXr=o(" (XGLM model)"),mXr=l(),F(V5.$$.fragment),Xze=l(),ef=a("h2"),X5=a("a"),h5e=a("span"),F(v$.$$.fragment),gXr=l(),p5e=a("span"),hXr=o("FlaxAutoModelForPreTraining"),zze=l(),ur=a("div"),F(F$.$$.fragment),pXr=l(),of=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nee=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),qee=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),T$=a("p"),MXr=o("This class cannot be instantiated directly using "),_5e=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Ht=a("div"),F(M$.$$.fragment),AXr=l(),u5e=a("p"),LXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yXr=l(),rf=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(z5.$$.fragment),BXr=l(),zr=a("div"),F(E$.$$.fragment),IXr=l(),v5e=a("p"),NXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qXr=l(),En=a("p"),jXr=o("The model class to instantiate is selected based on the "),F5e=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),QXr=l(),Ee=a("ul"),Q5=a("li"),E5e=a("strong"),WXr=o("albert"),HXr=o(" \u2014 "),Dee=a("a"),UXr=o("FlaxAlbertForPreTraining"),JXr=o(" (ALBERT model)"),YXr=l(),W5=a("li"),C5e=a("strong"),KXr=o("bart"),ZXr=o(" \u2014 "),Gee=a("a"),ezr=o("FlaxBartForConditionalGeneration"),ozr=o(" (BART model)"),rzr=l(),H5=a("li"),w5e=a("strong"),tzr=o("bert"),azr=o(" \u2014 "),Oee=a("a"),nzr=o("FlaxBertForPreTraining"),szr=o(" (BERT model)"),lzr=l(),U5=a("li"),A5e=a("strong"),izr=o("big_bird"),dzr=o(" \u2014 "),Vee=a("a"),czr=o("FlaxBigBirdForPreTraining"),fzr=o(" (BigBird model)"),mzr=l(),J5=a("li"),L5e=a("strong"),gzr=o("electra"),hzr=o(" \u2014 "),Xee=a("a"),pzr=o("FlaxElectraForPreTraining"),_zr=o(" (ELECTRA model)"),uzr=l(),Y5=a("li"),y5e=a("strong"),bzr=o("longt5"),vzr=o(" \u2014 "),zee=a("a"),Fzr=o("FlaxLongT5ForConditionalGeneration"),Tzr=o(" (LongT5 model)"),Mzr=l(),K5=a("li"),x5e=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Qee=a("a"),wzr=o("FlaxMBartForConditionalGeneration"),Azr=o(" (mBART model)"),Lzr=l(),Z5=a("li"),$5e=a("strong"),yzr=o("mt5"),xzr=o(" \u2014 "),Wee=a("a"),$zr=o("FlaxMT5ForConditionalGeneration"),kzr=o(" (MT5 model)"),Szr=l(),e0=a("li"),k5e=a("strong"),Rzr=o("roberta"),Pzr=o(" \u2014 "),Hee=a("a"),Bzr=o("FlaxRobertaForMaskedLM"),Izr=o(" (RoBERTa model)"),Nzr=l(),o0=a("li"),S5e=a("strong"),qzr=o("roformer"),jzr=o(" \u2014 "),Uee=a("a"),Dzr=o("FlaxRoFormerForMaskedLM"),Gzr=o(" (RoFormer model)"),Ozr=l(),r0=a("li"),R5e=a("strong"),Vzr=o("t5"),Xzr=o(" \u2014 "),Jee=a("a"),zzr=o("FlaxT5ForConditionalGeneration"),Qzr=o(" (T5 model)"),Wzr=l(),t0=a("li"),P5e=a("strong"),Hzr=o("wav2vec2"),Uzr=o(" \u2014 "),Yee=a("a"),Jzr=o("FlaxWav2Vec2ForPreTraining"),Yzr=o(" (Wav2Vec2 model)"),Kzr=l(),a0=a("li"),B5e=a("strong"),Zzr=o("xlm-roberta"),eQr=o(" \u2014 "),Kee=a("a"),oQr=o("FlaxXLMRobertaForMaskedLM"),rQr=o(" (XLM-RoBERTa model)"),tQr=l(),F(n0.$$.fragment),Qze=l(),tf=a("h2"),s0=a("a"),I5e=a("span"),F(C$.$$.fragment),aQr=l(),N5e=a("span"),nQr=o("FlaxAutoModelForMaskedLM"),Wze=l(),br=a("div"),F(w$.$$.fragment),sQr=l(),af=a("p"),lQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Zee=a("a"),iQr=o("from_pretrained()"),dQr=o(" class method or the "),eoe=a("a"),cQr=o("from_config()"),fQr=o(` class
method.`),mQr=l(),A$=a("p"),gQr=o("This class cannot be instantiated directly using "),q5e=a("code"),hQr=o("__init__()"),pQr=o(" (throws an error)."),_Qr=l(),Ut=a("div"),F(L$.$$.fragment),uQr=l(),j5e=a("p"),bQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vQr=l(),nf=a("p"),FQr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),TQr=o("not"),MQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),EQr=o("from_pretrained()"),CQr=o(" to load the model weights."),wQr=l(),F(l0.$$.fragment),AQr=l(),Qr=a("div"),F(y$.$$.fragment),LQr=l(),G5e=a("p"),yQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xQr=l(),Cn=a("p"),$Qr=o("The model class to instantiate is selected based on the "),O5e=a("code"),kQr=o("model_type"),SQr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),RQr=o("pretrained_model_name_or_path"),PQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),BQr=o("pretrained_model_name_or_path"),IQr=o(":"),NQr=l(),$e=a("ul"),i0=a("li"),z5e=a("strong"),qQr=o("albert"),jQr=o(" \u2014 "),roe=a("a"),DQr=o("FlaxAlbertForMaskedLM"),GQr=o(" (ALBERT model)"),OQr=l(),d0=a("li"),Q5e=a("strong"),VQr=o("bart"),XQr=o(" \u2014 "),toe=a("a"),zQr=o("FlaxBartForConditionalGeneration"),QQr=o(" (BART model)"),WQr=l(),c0=a("li"),W5e=a("strong"),HQr=o("bert"),UQr=o(" \u2014 "),aoe=a("a"),JQr=o("FlaxBertForMaskedLM"),YQr=o(" (BERT model)"),KQr=l(),f0=a("li"),H5e=a("strong"),ZQr=o("big_bird"),eWr=o(" \u2014 "),noe=a("a"),oWr=o("FlaxBigBirdForMaskedLM"),rWr=o(" (BigBird model)"),tWr=l(),m0=a("li"),U5e=a("strong"),aWr=o("distilbert"),nWr=o(" \u2014 "),soe=a("a"),sWr=o("FlaxDistilBertForMaskedLM"),lWr=o(" (DistilBERT model)"),iWr=l(),g0=a("li"),J5e=a("strong"),dWr=o("electra"),cWr=o(" \u2014 "),loe=a("a"),fWr=o("FlaxElectraForMaskedLM"),mWr=o(" (ELECTRA model)"),gWr=l(),h0=a("li"),Y5e=a("strong"),hWr=o("mbart"),pWr=o(" \u2014 "),ioe=a("a"),_Wr=o("FlaxMBartForConditionalGeneration"),uWr=o(" (mBART model)"),bWr=l(),p0=a("li"),K5e=a("strong"),vWr=o("roberta"),FWr=o(" \u2014 "),doe=a("a"),TWr=o("FlaxRobertaForMaskedLM"),MWr=o(" (RoBERTa model)"),EWr=l(),_0=a("li"),Z5e=a("strong"),CWr=o("roformer"),wWr=o(" \u2014 "),coe=a("a"),AWr=o("FlaxRoFormerForMaskedLM"),LWr=o(" (RoFormer model)"),yWr=l(),u0=a("li"),e0e=a("strong"),xWr=o("xlm-roberta"),$Wr=o(" \u2014 "),foe=a("a"),kWr=o("FlaxXLMRobertaForMaskedLM"),SWr=o(" (XLM-RoBERTa model)"),RWr=l(),F(b0.$$.fragment),Hze=l(),sf=a("h2"),v0=a("a"),o0e=a("span"),F(x$.$$.fragment),PWr=l(),r0e=a("span"),BWr=o("FlaxAutoModelForSeq2SeqLM"),Uze=l(),vr=a("div"),F($$.$$.fragment),IWr=l(),lf=a("p"),NWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),moe=a("a"),qWr=o("from_pretrained()"),jWr=o(" class method or the "),goe=a("a"),DWr=o("from_config()"),GWr=o(` class
method.`),OWr=l(),k$=a("p"),VWr=o("This class cannot be instantiated directly using "),t0e=a("code"),XWr=o("__init__()"),zWr=o(" (throws an error)."),QWr=l(),Jt=a("div"),F(S$.$$.fragment),WWr=l(),a0e=a("p"),HWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UWr=l(),df=a("p"),JWr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),YWr=o("not"),KWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),ZWr=o("from_pretrained()"),eHr=o(" to load the model weights."),oHr=l(),F(F0.$$.fragment),rHr=l(),Wr=a("div"),F(R$.$$.fragment),tHr=l(),s0e=a("p"),aHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nHr=l(),wn=a("p"),sHr=o("The model class to instantiate is selected based on the "),l0e=a("code"),lHr=o("model_type"),iHr=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),dHr=o("pretrained_model_name_or_path"),cHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),fHr=o("pretrained_model_name_or_path"),mHr=o(":"),gHr=l(),ke=a("ul"),T0=a("li"),c0e=a("strong"),hHr=o("bart"),pHr=o(" \u2014 "),poe=a("a"),_Hr=o("FlaxBartForConditionalGeneration"),uHr=o(" (BART model)"),bHr=l(),M0=a("li"),f0e=a("strong"),vHr=o("blenderbot"),FHr=o(" \u2014 "),_oe=a("a"),THr=o("FlaxBlenderbotForConditionalGeneration"),MHr=o(" (Blenderbot model)"),EHr=l(),E0=a("li"),m0e=a("strong"),CHr=o("blenderbot-small"),wHr=o(" \u2014 "),uoe=a("a"),AHr=o("FlaxBlenderbotSmallForConditionalGeneration"),LHr=o(" (BlenderbotSmall model)"),yHr=l(),C0=a("li"),g0e=a("strong"),xHr=o("encoder-decoder"),$Hr=o(" \u2014 "),boe=a("a"),kHr=o("FlaxEncoderDecoderModel"),SHr=o(" (Encoder decoder model)"),RHr=l(),w0=a("li"),h0e=a("strong"),PHr=o("longt5"),BHr=o(" \u2014 "),voe=a("a"),IHr=o("FlaxLongT5ForConditionalGeneration"),NHr=o(" (LongT5 model)"),qHr=l(),A0=a("li"),p0e=a("strong"),jHr=o("marian"),DHr=o(" \u2014 "),Foe=a("a"),GHr=o("FlaxMarianMTModel"),OHr=o(" (Marian model)"),VHr=l(),L0=a("li"),_0e=a("strong"),XHr=o("mbart"),zHr=o(" \u2014 "),Toe=a("a"),QHr=o("FlaxMBartForConditionalGeneration"),WHr=o(" (mBART model)"),HHr=l(),y0=a("li"),u0e=a("strong"),UHr=o("mt5"),JHr=o(" \u2014 "),Moe=a("a"),YHr=o("FlaxMT5ForConditionalGeneration"),KHr=o(" (MT5 model)"),ZHr=l(),x0=a("li"),b0e=a("strong"),eUr=o("pegasus"),oUr=o(" \u2014 "),Eoe=a("a"),rUr=o("FlaxPegasusForConditionalGeneration"),tUr=o(" (Pegasus model)"),aUr=l(),$0=a("li"),v0e=a("strong"),nUr=o("t5"),sUr=o(" \u2014 "),Coe=a("a"),lUr=o("FlaxT5ForConditionalGeneration"),iUr=o(" (T5 model)"),dUr=l(),F(k0.$$.fragment),Jze=l(),cf=a("h2"),S0=a("a"),F0e=a("span"),F(P$.$$.fragment),cUr=l(),T0e=a("span"),fUr=o("FlaxAutoModelForSequenceClassification"),Yze=l(),Fr=a("div"),F(B$.$$.fragment),mUr=l(),ff=a("p"),gUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),woe=a("a"),hUr=o("from_pretrained()"),pUr=o(" class method or the "),Aoe=a("a"),_Ur=o("from_config()"),uUr=o(` class
method.`),bUr=l(),I$=a("p"),vUr=o("This class cannot be instantiated directly using "),M0e=a("code"),FUr=o("__init__()"),TUr=o(" (throws an error)."),MUr=l(),Yt=a("div"),F(N$.$$.fragment),EUr=l(),E0e=a("p"),CUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wUr=l(),mf=a("p"),AUr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),LUr=o("not"),yUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),xUr=o("from_pretrained()"),$Ur=o(" to load the model weights."),kUr=l(),F(R0.$$.fragment),SUr=l(),Hr=a("div"),F(q$.$$.fragment),RUr=l(),w0e=a("p"),PUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BUr=l(),An=a("p"),IUr=o("The model class to instantiate is selected based on the "),A0e=a("code"),NUr=o("model_type"),qUr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),jUr=o("pretrained_model_name_or_path"),DUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(":"),VUr=l(),Se=a("ul"),P0=a("li"),x0e=a("strong"),XUr=o("albert"),zUr=o(" \u2014 "),yoe=a("a"),QUr=o("FlaxAlbertForSequenceClassification"),WUr=o(" (ALBERT model)"),HUr=l(),B0=a("li"),$0e=a("strong"),UUr=o("bart"),JUr=o(" \u2014 "),xoe=a("a"),YUr=o("FlaxBartForSequenceClassification"),KUr=o(" (BART model)"),ZUr=l(),I0=a("li"),k0e=a("strong"),eJr=o("bert"),oJr=o(" \u2014 "),$oe=a("a"),rJr=o("FlaxBertForSequenceClassification"),tJr=o(" (BERT model)"),aJr=l(),N0=a("li"),S0e=a("strong"),nJr=o("big_bird"),sJr=o(" \u2014 "),koe=a("a"),lJr=o("FlaxBigBirdForSequenceClassification"),iJr=o(" (BigBird model)"),dJr=l(),q0=a("li"),R0e=a("strong"),cJr=o("distilbert"),fJr=o(" \u2014 "),Soe=a("a"),mJr=o("FlaxDistilBertForSequenceClassification"),gJr=o(" (DistilBERT model)"),hJr=l(),j0=a("li"),P0e=a("strong"),pJr=o("electra"),_Jr=o(" \u2014 "),Roe=a("a"),uJr=o("FlaxElectraForSequenceClassification"),bJr=o(" (ELECTRA model)"),vJr=l(),D0=a("li"),B0e=a("strong"),FJr=o("mbart"),TJr=o(" \u2014 "),Poe=a("a"),MJr=o("FlaxMBartForSequenceClassification"),EJr=o(" (mBART model)"),CJr=l(),G0=a("li"),I0e=a("strong"),wJr=o("roberta"),AJr=o(" \u2014 "),Boe=a("a"),LJr=o("FlaxRobertaForSequenceClassification"),yJr=o(" (RoBERTa model)"),xJr=l(),O0=a("li"),N0e=a("strong"),$Jr=o("roformer"),kJr=o(" \u2014 "),Ioe=a("a"),SJr=o("FlaxRoFormerForSequenceClassification"),RJr=o(" (RoFormer model)"),PJr=l(),V0=a("li"),q0e=a("strong"),BJr=o("xlm-roberta"),IJr=o(" \u2014 "),Noe=a("a"),NJr=o("FlaxXLMRobertaForSequenceClassification"),qJr=o(" (XLM-RoBERTa model)"),jJr=l(),F(X0.$$.fragment),Kze=l(),gf=a("h2"),z0=a("a"),j0e=a("span"),F(j$.$$.fragment),DJr=l(),D0e=a("span"),GJr=o("FlaxAutoModelForQuestionAnswering"),Zze=l(),Tr=a("div"),F(D$.$$.fragment),OJr=l(),hf=a("p"),VJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qoe=a("a"),XJr=o("from_pretrained()"),zJr=o(" class method or the "),joe=a("a"),QJr=o("from_config()"),WJr=o(` class
method.`),HJr=l(),G$=a("p"),UJr=o("This class cannot be instantiated directly using "),G0e=a("code"),JJr=o("__init__()"),YJr=o(" (throws an error)."),KJr=l(),Kt=a("div"),F(O$.$$.fragment),ZJr=l(),O0e=a("p"),eYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oYr=l(),pf=a("p"),rYr=o(`Note:
Loading a model from its configuration file does `),V0e=a("strong"),tYr=o("not"),aYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=a("a"),nYr=o("from_pretrained()"),sYr=o(" to load the model weights."),lYr=l(),F(Q0.$$.fragment),iYr=l(),Ur=a("div"),F(V$.$$.fragment),dYr=l(),X0e=a("p"),cYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fYr=l(),Ln=a("p"),mYr=o("The model class to instantiate is selected based on the "),z0e=a("code"),gYr=o("model_type"),hYr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),pYr=o("pretrained_model_name_or_path"),_Yr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=a("code"),uYr=o("pretrained_model_name_or_path"),bYr=o(":"),vYr=l(),Re=a("ul"),W0=a("li"),H0e=a("strong"),FYr=o("albert"),TYr=o(" \u2014 "),Goe=a("a"),MYr=o("FlaxAlbertForQuestionAnswering"),EYr=o(" (ALBERT model)"),CYr=l(),H0=a("li"),U0e=a("strong"),wYr=o("bart"),AYr=o(" \u2014 "),Ooe=a("a"),LYr=o("FlaxBartForQuestionAnswering"),yYr=o(" (BART model)"),xYr=l(),U0=a("li"),J0e=a("strong"),$Yr=o("bert"),kYr=o(" \u2014 "),Voe=a("a"),SYr=o("FlaxBertForQuestionAnswering"),RYr=o(" (BERT model)"),PYr=l(),J0=a("li"),Y0e=a("strong"),BYr=o("big_bird"),IYr=o(" \u2014 "),Xoe=a("a"),NYr=o("FlaxBigBirdForQuestionAnswering"),qYr=o(" (BigBird model)"),jYr=l(),Y0=a("li"),K0e=a("strong"),DYr=o("distilbert"),GYr=o(" \u2014 "),zoe=a("a"),OYr=o("FlaxDistilBertForQuestionAnswering"),VYr=o(" (DistilBERT model)"),XYr=l(),K0=a("li"),Z0e=a("strong"),zYr=o("electra"),QYr=o(" \u2014 "),Qoe=a("a"),WYr=o("FlaxElectraForQuestionAnswering"),HYr=o(" (ELECTRA model)"),UYr=l(),Z0=a("li"),ewe=a("strong"),JYr=o("mbart"),YYr=o(" \u2014 "),Woe=a("a"),KYr=o("FlaxMBartForQuestionAnswering"),ZYr=o(" (mBART model)"),eKr=l(),ew=a("li"),owe=a("strong"),oKr=o("roberta"),rKr=o(" \u2014 "),Hoe=a("a"),tKr=o("FlaxRobertaForQuestionAnswering"),aKr=o(" (RoBERTa model)"),nKr=l(),ow=a("li"),rwe=a("strong"),sKr=o("roformer"),lKr=o(" \u2014 "),Uoe=a("a"),iKr=o("FlaxRoFormerForQuestionAnswering"),dKr=o(" (RoFormer model)"),cKr=l(),rw=a("li"),twe=a("strong"),fKr=o("xlm-roberta"),mKr=o(" \u2014 "),Joe=a("a"),gKr=o("FlaxXLMRobertaForQuestionAnswering"),hKr=o(" (XLM-RoBERTa model)"),pKr=l(),F(tw.$$.fragment),eQe=l(),_f=a("h2"),aw=a("a"),awe=a("span"),F(X$.$$.fragment),_Kr=l(),nwe=a("span"),uKr=o("FlaxAutoModelForTokenClassification"),oQe=l(),Mr=a("div"),F(z$.$$.fragment),bKr=l(),uf=a("p"),vKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yoe=a("a"),FKr=o("from_pretrained()"),TKr=o(" class method or the "),Koe=a("a"),MKr=o("from_config()"),EKr=o(` class
method.`),CKr=l(),Q$=a("p"),wKr=o("This class cannot be instantiated directly using "),swe=a("code"),AKr=o("__init__()"),LKr=o(" (throws an error)."),yKr=l(),Zt=a("div"),F(W$.$$.fragment),xKr=l(),lwe=a("p"),$Kr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kKr=l(),bf=a("p"),SKr=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),RKr=o("not"),PKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),BKr=o("from_pretrained()"),IKr=o(" to load the model weights."),NKr=l(),F(nw.$$.fragment),qKr=l(),Jr=a("div"),F(H$.$$.fragment),jKr=l(),dwe=a("p"),DKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GKr=l(),yn=a("p"),OKr=o("The model class to instantiate is selected based on the "),cwe=a("code"),VKr=o("model_type"),XKr=o(` property of the config object (either
passed as an argument or loaded from `),fwe=a("code"),zKr=o("pretrained_model_name_or_path"),QKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=a("code"),WKr=o("pretrained_model_name_or_path"),HKr=o(":"),UKr=l(),Ve=a("ul"),sw=a("li"),gwe=a("strong"),JKr=o("albert"),YKr=o(" \u2014 "),ere=a("a"),KKr=o("FlaxAlbertForTokenClassification"),ZKr=o(" (ALBERT model)"),eZr=l(),lw=a("li"),hwe=a("strong"),oZr=o("bert"),rZr=o(" \u2014 "),ore=a("a"),tZr=o("FlaxBertForTokenClassification"),aZr=o(" (BERT model)"),nZr=l(),iw=a("li"),pwe=a("strong"),sZr=o("big_bird"),lZr=o(" \u2014 "),rre=a("a"),iZr=o("FlaxBigBirdForTokenClassification"),dZr=o(" (BigBird model)"),cZr=l(),dw=a("li"),_we=a("strong"),fZr=o("distilbert"),mZr=o(" \u2014 "),tre=a("a"),gZr=o("FlaxDistilBertForTokenClassification"),hZr=o(" (DistilBERT model)"),pZr=l(),cw=a("li"),uwe=a("strong"),_Zr=o("electra"),uZr=o(" \u2014 "),are=a("a"),bZr=o("FlaxElectraForTokenClassification"),vZr=o(" (ELECTRA model)"),FZr=l(),fw=a("li"),bwe=a("strong"),TZr=o("roberta"),MZr=o(" \u2014 "),nre=a("a"),EZr=o("FlaxRobertaForTokenClassification"),CZr=o(" (RoBERTa model)"),wZr=l(),mw=a("li"),vwe=a("strong"),AZr=o("roformer"),LZr=o(" \u2014 "),sre=a("a"),yZr=o("FlaxRoFormerForTokenClassification"),xZr=o(" (RoFormer model)"),$Zr=l(),gw=a("li"),Fwe=a("strong"),kZr=o("xlm-roberta"),SZr=o(" \u2014 "),lre=a("a"),RZr=o("FlaxXLMRobertaForTokenClassification"),PZr=o(" (XLM-RoBERTa model)"),BZr=l(),F(hw.$$.fragment),rQe=l(),vf=a("h2"),pw=a("a"),Twe=a("span"),F(U$.$$.fragment),IZr=l(),Mwe=a("span"),NZr=o("FlaxAutoModelForMultipleChoice"),tQe=l(),Er=a("div"),F(J$.$$.fragment),qZr=l(),Ff=a("p"),jZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ire=a("a"),DZr=o("from_pretrained()"),GZr=o(" class method or the "),dre=a("a"),OZr=o("from_config()"),VZr=o(` class
method.`),XZr=l(),Y$=a("p"),zZr=o("This class cannot be instantiated directly using "),Ewe=a("code"),QZr=o("__init__()"),WZr=o(" (throws an error)."),HZr=l(),ea=a("div"),F(K$.$$.fragment),UZr=l(),Cwe=a("p"),JZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YZr=l(),Tf=a("p"),KZr=o(`Note:
Loading a model from its configuration file does `),wwe=a("strong"),ZZr=o("not"),eet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=a("a"),oet=o("from_pretrained()"),ret=o(" to load the model weights."),tet=l(),F(_w.$$.fragment),aet=l(),Yr=a("div"),F(Z$.$$.fragment),net=l(),Awe=a("p"),set=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iet=l(),xn=a("p"),det=o("The model class to instantiate is selected based on the "),Lwe=a("code"),cet=o("model_type"),fet=o(` property of the config object (either
passed as an argument or loaded from `),ywe=a("code"),met=o("pretrained_model_name_or_path"),get=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=a("code"),het=o("pretrained_model_name_or_path"),pet=o(":"),_et=l(),Xe=a("ul"),uw=a("li"),$we=a("strong"),uet=o("albert"),bet=o(" \u2014 "),fre=a("a"),vet=o("FlaxAlbertForMultipleChoice"),Fet=o(" (ALBERT model)"),Tet=l(),bw=a("li"),kwe=a("strong"),Met=o("bert"),Eet=o(" \u2014 "),mre=a("a"),Cet=o("FlaxBertForMultipleChoice"),wet=o(" (BERT model)"),Aet=l(),vw=a("li"),Swe=a("strong"),Let=o("big_bird"),yet=o(" \u2014 "),gre=a("a"),xet=o("FlaxBigBirdForMultipleChoice"),$et=o(" (BigBird model)"),ket=l(),Fw=a("li"),Rwe=a("strong"),Set=o("distilbert"),Ret=o(" \u2014 "),hre=a("a"),Pet=o("FlaxDistilBertForMultipleChoice"),Bet=o(" (DistilBERT model)"),Iet=l(),Tw=a("li"),Pwe=a("strong"),Net=o("electra"),qet=o(" \u2014 "),pre=a("a"),jet=o("FlaxElectraForMultipleChoice"),Det=o(" (ELECTRA model)"),Get=l(),Mw=a("li"),Bwe=a("strong"),Oet=o("roberta"),Vet=o(" \u2014 "),_re=a("a"),Xet=o("FlaxRobertaForMultipleChoice"),zet=o(" (RoBERTa model)"),Qet=l(),Ew=a("li"),Iwe=a("strong"),Wet=o("roformer"),Het=o(" \u2014 "),ure=a("a"),Uet=o("FlaxRoFormerForMultipleChoice"),Jet=o(" (RoFormer model)"),Yet=l(),Cw=a("li"),Nwe=a("strong"),Ket=o("xlm-roberta"),Zet=o(" \u2014 "),bre=a("a"),eot=o("FlaxXLMRobertaForMultipleChoice"),oot=o(" (XLM-RoBERTa model)"),rot=l(),F(ww.$$.fragment),aQe=l(),Mf=a("h2"),Aw=a("a"),qwe=a("span"),F(ek.$$.fragment),tot=l(),jwe=a("span"),aot=o("FlaxAutoModelForNextSentencePrediction"),nQe=l(),Cr=a("div"),F(ok.$$.fragment),not=l(),Ef=a("p"),sot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vre=a("a"),lot=o("from_pretrained()"),iot=o(" class method or the "),Fre=a("a"),dot=o("from_config()"),cot=o(` class
method.`),fot=l(),rk=a("p"),mot=o("This class cannot be instantiated directly using "),Dwe=a("code"),got=o("__init__()"),hot=o(" (throws an error)."),pot=l(),oa=a("div"),F(tk.$$.fragment),_ot=l(),Gwe=a("p"),uot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bot=l(),Cf=a("p"),vot=o(`Note:
Loading a model from its configuration file does `),Owe=a("strong"),Fot=o("not"),Tot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),Mot=o("from_pretrained()"),Eot=o(" to load the model weights."),Cot=l(),F(Lw.$$.fragment),wot=l(),Kr=a("div"),F(ak.$$.fragment),Aot=l(),Vwe=a("p"),Lot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yot=l(),$n=a("p"),xot=o("The model class to instantiate is selected based on the "),Xwe=a("code"),$ot=o("model_type"),kot=o(` property of the config object (either
passed as an argument or loaded from `),zwe=a("code"),Sot=o("pretrained_model_name_or_path"),Rot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qwe=a("code"),Pot=o("pretrained_model_name_or_path"),Bot=o(":"),Iot=l(),Wwe=a("ul"),yw=a("li"),Hwe=a("strong"),Not=o("bert"),qot=o(" \u2014 "),Mre=a("a"),jot=o("FlaxBertForNextSentencePrediction"),Dot=o(" (BERT model)"),Got=l(),F(xw.$$.fragment),sQe=l(),wf=a("h2"),$w=a("a"),Uwe=a("span"),F(nk.$$.fragment),Oot=l(),Jwe=a("span"),Vot=o("FlaxAutoModelForImageClassification"),lQe=l(),wr=a("div"),F(sk.$$.fragment),Xot=l(),Af=a("p"),zot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ere=a("a"),Qot=o("from_pretrained()"),Wot=o(" class method or the "),Cre=a("a"),Hot=o("from_config()"),Uot=o(` class
method.`),Jot=l(),lk=a("p"),Yot=o("This class cannot be instantiated directly using "),Ywe=a("code"),Kot=o("__init__()"),Zot=o(" (throws an error)."),ert=l(),ra=a("div"),F(ik.$$.fragment),ort=l(),Kwe=a("p"),rrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),trt=l(),Lf=a("p"),art=o(`Note:
Loading a model from its configuration file does `),Zwe=a("strong"),nrt=o("not"),srt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("a"),lrt=o("from_pretrained()"),irt=o(" to load the model weights."),drt=l(),F(kw.$$.fragment),crt=l(),Zr=a("div"),F(dk.$$.fragment),frt=l(),eAe=a("p"),mrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),grt=l(),kn=a("p"),hrt=o("The model class to instantiate is selected based on the "),oAe=a("code"),prt=o("model_type"),_rt=o(` property of the config object (either
passed as an argument or loaded from `),rAe=a("code"),urt=o("pretrained_model_name_or_path"),brt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=a("code"),vrt=o("pretrained_model_name_or_path"),Frt=o(":"),Trt=l(),ck=a("ul"),Sw=a("li"),aAe=a("strong"),Mrt=o("beit"),Ert=o(" \u2014 "),Are=a("a"),Crt=o("FlaxBeitForImageClassification"),wrt=o(" (BEiT model)"),Art=l(),Rw=a("li"),nAe=a("strong"),Lrt=o("vit"),yrt=o(" \u2014 "),Lre=a("a"),xrt=o("FlaxViTForImageClassification"),$rt=o(" (ViT model)"),krt=l(),F(Pw.$$.fragment),iQe=l(),yf=a("h2"),Bw=a("a"),sAe=a("span"),F(fk.$$.fragment),Srt=l(),lAe=a("span"),Rrt=o("FlaxAutoModelForVision2Seq"),dQe=l(),Ar=a("div"),F(mk.$$.fragment),Prt=l(),xf=a("p"),Brt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yre=a("a"),Irt=o("from_pretrained()"),Nrt=o(" class method or the "),xre=a("a"),qrt=o("from_config()"),jrt=o(` class
method.`),Drt=l(),gk=a("p"),Grt=o("This class cannot be instantiated directly using "),iAe=a("code"),Ort=o("__init__()"),Vrt=o(" (throws an error)."),Xrt=l(),ta=a("div"),F(hk.$$.fragment),zrt=l(),dAe=a("p"),Qrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wrt=l(),$f=a("p"),Hrt=o(`Note:
Loading a model from its configuration file does `),cAe=a("strong"),Urt=o("not"),Jrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("a"),Yrt=o("from_pretrained()"),Krt=o(" to load the model weights."),Zrt=l(),F(Iw.$$.fragment),ett=l(),et=a("div"),F(pk.$$.fragment),ott=l(),fAe=a("p"),rtt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ttt=l(),Sn=a("p"),att=o("The model class to instantiate is selected based on the "),mAe=a("code"),ntt=o("model_type"),stt=o(` property of the config object (either
passed as an argument or loaded from `),gAe=a("code"),ltt=o("pretrained_model_name_or_path"),itt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=a("code"),dtt=o("pretrained_model_name_or_path"),ctt=o(":"),ftt=l(),pAe=a("ul"),Nw=a("li"),_Ae=a("strong"),mtt=o("vision-encoder-decoder"),gtt=o(" \u2014 "),kre=a("a"),htt=o("FlaxVisionEncoderDecoderModel"),ptt=o(" (Vision Encoder decoder model)"),_tt=l(),F(qw.$$.fragment),this.h()},l(f){const u=YQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var _k=s(p);m=n(_k,"A",{id:!0,class:!0,href:!0});var uAe=s(m);_=n(uAe,"SPAN",{});var bAe=s(_);T(d.$$.fragment,bAe),bAe.forEach(t),uAe.forEach(t),h=i(_k),Eo=n(_k,"SPAN",{});var vAe=s(Eo);Ai=r(vAe,"Auto Classes"),vAe.forEach(t),_k.forEach(t),Pf=i(f),st=n(f,"P",{});var uk=s(st);Li=r(uk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(uk,"CODE",{});var FAe=s(yi);tL=r(FAe,"from_pretrained()"),FAe.forEach(t),Bf=r(uk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),uk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var TAe=s(Pn);aL=r(TAe,"AutoConfig"),TAe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var MAe=s(In);nL=r(MAe,"AutoModel"),MAe.forEach(t),$i=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var EAe=s(Nn);sL=r(EAe,"AutoTokenizer"),EAe.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var bk=s(Ae);IS=r(bk,"will create a model that is an instance of "),Si=n(bk,"A",{href:!0});var CAe=s(Si);NS=r(CAe,"BertModel"),CAe.forEach(t),qS=r(bk,"."),bk.forEach(t),Co=i(f),Ra=n(f,"P",{});var vk=s(Ra);jS=r(vk,"There is one class of "),Nf=n(vk,"CODE",{});var wAe=s(Nf);DS=r(wAe,"AutoModel"),wAe.forEach(t),vHe=r(vk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vk.forEach(t),nXe=i(f),Ri=n(f,"H2",{class:!0});var Fk=s(Ri);qf=n(Fk,"A",{id:!0,class:!0,href:!0});var AAe=s(qf);Lae=n(AAe,"SPAN",{});var LAe=s(Lae);T(lL.$$.fragment,LAe),LAe.forEach(t),AAe.forEach(t),FHe=i(Fk),yae=n(Fk,"SPAN",{});var yAe=s(yae);THe=r(yAe,"Extending the Auto Classes"),yAe.forEach(t),Fk.forEach(t),sXe=i(f),qn=n(f,"P",{});var kf=s(qn);MHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),xae=n(kf,"CODE",{});var xAe=s(xae);EHe=r(xAe,"NewModel"),xAe.forEach(t),CHe=r(kf,", make sure you have a "),$ae=n(kf,"CODE",{});var $Ae=s($ae);wHe=r($Ae,"NewModelConfig"),$Ae.forEach(t),AHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),lXe=i(f),T(iL.$$.fragment,f),iXe=i(f),GS=n(f,"P",{});var kAe=s(GS);LHe=r(kAe,"You will then be able to use the auto classes like you would usually do!"),kAe.forEach(t),dXe=i(f),T(jf.$$.fragment,f),cXe=i(f),Pi=n(f,"H2",{class:!0});var Tk=s(Pi);Df=n(Tk,"A",{id:!0,class:!0,href:!0});var SAe=s(Df);kae=n(SAe,"SPAN",{});var RAe=s(kae);T(dL.$$.fragment,RAe),RAe.forEach(t),SAe.forEach(t),yHe=i(Tk),Sae=n(Tk,"SPAN",{});var PAe=s(Sae);xHe=r(PAe,"AutoConfig"),PAe.forEach(t),Tk.forEach(t),fXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(cL.$$.fragment,at),$He=i(at),fL=n(at,"P",{});var Mk=s(fL);kHe=r(Mk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),OS=n(Mk,"A",{href:!0});var BAe=s(OS);SHe=r(BAe,"from_pretrained()"),BAe.forEach(t),RHe=r(Mk," class method."),Mk.forEach(t),PHe=i(at),mL=n(at,"P",{});var Ek=s(mL);BHe=r(Ek,"This class cannot be instantiated directly using "),Rae=n(Ek,"CODE",{});var IAe=s(Rae);IHe=r(IAe,"__init__()"),IAe.forEach(t),NHe=r(Ek," (throws an error)."),Ek.forEach(t),qHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(gL.$$.fragment,nt),jHe=i(nt),Pae=n(nt,"P",{});var NAe=s(Pae);DHe=r(NAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),NAe.forEach(t),GHe=i(nt),Bi=n(nt,"P",{});var Sf=s(Bi);OHe=r(Sf,"The configuration class to instantiate is selected based on the "),Bae=n(Sf,"CODE",{});var qAe=s(Bae);VHe=r(qAe,"model_type"),qAe.forEach(t),XHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Iae=n(Sf,"CODE",{});var jAe=s(Iae);zHe=r(jAe,"pretrained_model_name_or_path"),jAe.forEach(t),QHe=r(Sf,":"),Sf.forEach(t),WHe=i(nt),A=n(nt,"UL",{});var L=s(A);Gf=n(L,"LI",{});var jw=s(Gf);Nae=n(jw,"STRONG",{});var DAe=s(Nae);HHe=r(DAe,"albert"),DAe.forEach(t),UHe=r(jw," \u2014 "),VS=n(jw,"A",{href:!0});var GAe=s(VS);JHe=r(GAe,"AlbertConfig"),GAe.forEach(t),YHe=r(jw," (ALBERT model)"),jw.forEach(t),KHe=i(L),Of=n(L,"LI",{});var Dw=s(Of);qae=n(Dw,"STRONG",{});var OAe=s(qae);ZHe=r(OAe,"bart"),OAe.forEach(t),eUe=r(Dw," \u2014 "),XS=n(Dw,"A",{href:!0});var VAe=s(XS);oUe=r(VAe,"BartConfig"),VAe.forEach(t),rUe=r(Dw," (BART model)"),Dw.forEach(t),tUe=i(L),Vf=n(L,"LI",{});var Gw=s(Vf);jae=n(Gw,"STRONG",{});var XAe=s(jae);aUe=r(XAe,"beit"),XAe.forEach(t),nUe=r(Gw," \u2014 "),zS=n(Gw,"A",{href:!0});var zAe=s(zS);sUe=r(zAe,"BeitConfig"),zAe.forEach(t),lUe=r(Gw," (BEiT model)"),Gw.forEach(t),iUe=i(L),Xf=n(L,"LI",{});var Ow=s(Xf);Dae=n(Ow,"STRONG",{});var QAe=s(Dae);dUe=r(QAe,"bert"),QAe.forEach(t),cUe=r(Ow," \u2014 "),QS=n(Ow,"A",{href:!0});var WAe=s(QS);fUe=r(WAe,"BertConfig"),WAe.forEach(t),mUe=r(Ow," (BERT model)"),Ow.forEach(t),gUe=i(L),zf=n(L,"LI",{});var Vw=s(zf);Gae=n(Vw,"STRONG",{});var HAe=s(Gae);hUe=r(HAe,"bert-generation"),HAe.forEach(t),pUe=r(Vw," \u2014 "),WS=n(Vw,"A",{href:!0});var UAe=s(WS);_Ue=r(UAe,"BertGenerationConfig"),UAe.forEach(t),uUe=r(Vw," (Bert Generation model)"),Vw.forEach(t),bUe=i(L),Qf=n(L,"LI",{});var Xw=s(Qf);Oae=n(Xw,"STRONG",{});var JAe=s(Oae);vUe=r(JAe,"big_bird"),JAe.forEach(t),FUe=r(Xw," \u2014 "),HS=n(Xw,"A",{href:!0});var YAe=s(HS);TUe=r(YAe,"BigBirdConfig"),YAe.forEach(t),MUe=r(Xw," (BigBird model)"),Xw.forEach(t),EUe=i(L),Wf=n(L,"LI",{});var zw=s(Wf);Vae=n(zw,"STRONG",{});var KAe=s(Vae);CUe=r(KAe,"bigbird_pegasus"),KAe.forEach(t),wUe=r(zw," \u2014 "),US=n(zw,"A",{href:!0});var ZAe=s(US);AUe=r(ZAe,"BigBirdPegasusConfig"),ZAe.forEach(t),LUe=r(zw," (BigBird-Pegasus model)"),zw.forEach(t),yUe=i(L),Hf=n(L,"LI",{});var Qw=s(Hf);Xae=n(Qw,"STRONG",{});var e6e=s(Xae);xUe=r(e6e,"blenderbot"),e6e.forEach(t),$Ue=r(Qw," \u2014 "),JS=n(Qw,"A",{href:!0});var o6e=s(JS);kUe=r(o6e,"BlenderbotConfig"),o6e.forEach(t),SUe=r(Qw," (Blenderbot model)"),Qw.forEach(t),RUe=i(L),Uf=n(L,"LI",{});var Ww=s(Uf);zae=n(Ww,"STRONG",{});var r6e=s(zae);PUe=r(r6e,"blenderbot-small"),r6e.forEach(t),BUe=r(Ww," \u2014 "),YS=n(Ww,"A",{href:!0});var t6e=s(YS);IUe=r(t6e,"BlenderbotSmallConfig"),t6e.forEach(t),NUe=r(Ww," (BlenderbotSmall model)"),Ww.forEach(t),qUe=i(L),Jf=n(L,"LI",{});var Hw=s(Jf);Qae=n(Hw,"STRONG",{});var a6e=s(Qae);jUe=r(a6e,"bloom"),a6e.forEach(t),DUe=r(Hw," \u2014 "),KS=n(Hw,"A",{href:!0});var n6e=s(KS);GUe=r(n6e,"BloomConfig"),n6e.forEach(t),OUe=r(Hw," (BLOOM model)"),Hw.forEach(t),VUe=i(L),Yf=n(L,"LI",{});var Uw=s(Yf);Wae=n(Uw,"STRONG",{});var s6e=s(Wae);XUe=r(s6e,"camembert"),s6e.forEach(t),zUe=r(Uw," \u2014 "),ZS=n(Uw,"A",{href:!0});var l6e=s(ZS);QUe=r(l6e,"CamembertConfig"),l6e.forEach(t),WUe=r(Uw," (CamemBERT model)"),Uw.forEach(t),HUe=i(L),Kf=n(L,"LI",{});var Jw=s(Kf);Hae=n(Jw,"STRONG",{});var i6e=s(Hae);UUe=r(i6e,"canine"),i6e.forEach(t),JUe=r(Jw," \u2014 "),eR=n(Jw,"A",{href:!0});var d6e=s(eR);YUe=r(d6e,"CanineConfig"),d6e.forEach(t),KUe=r(Jw," (CANINE model)"),Jw.forEach(t),ZUe=i(L),Zf=n(L,"LI",{});var Yw=s(Zf);Uae=n(Yw,"STRONG",{});var c6e=s(Uae);eJe=r(c6e,"clip"),c6e.forEach(t),oJe=r(Yw," \u2014 "),oR=n(Yw,"A",{href:!0});var f6e=s(oR);rJe=r(f6e,"CLIPConfig"),f6e.forEach(t),tJe=r(Yw," (CLIP model)"),Yw.forEach(t),aJe=i(L),em=n(L,"LI",{});var Kw=s(em);Jae=n(Kw,"STRONG",{});var m6e=s(Jae);nJe=r(m6e,"codegen"),m6e.forEach(t),sJe=r(Kw," \u2014 "),rR=n(Kw,"A",{href:!0});var g6e=s(rR);lJe=r(g6e,"CodeGenConfig"),g6e.forEach(t),iJe=r(Kw," (CodeGen model)"),Kw.forEach(t),dJe=i(L),om=n(L,"LI",{});var Zw=s(om);Yae=n(Zw,"STRONG",{});var h6e=s(Yae);cJe=r(h6e,"convbert"),h6e.forEach(t),fJe=r(Zw," \u2014 "),tR=n(Zw,"A",{href:!0});var p6e=s(tR);mJe=r(p6e,"ConvBertConfig"),p6e.forEach(t),gJe=r(Zw," (ConvBERT model)"),Zw.forEach(t),hJe=i(L),rm=n(L,"LI",{});var eA=s(rm);Kae=n(eA,"STRONG",{});var _6e=s(Kae);pJe=r(_6e,"convnext"),_6e.forEach(t),_Je=r(eA," \u2014 "),aR=n(eA,"A",{href:!0});var u6e=s(aR);uJe=r(u6e,"ConvNextConfig"),u6e.forEach(t),bJe=r(eA," (ConvNeXT model)"),eA.forEach(t),vJe=i(L),tm=n(L,"LI",{});var oA=s(tm);Zae=n(oA,"STRONG",{});var b6e=s(Zae);FJe=r(b6e,"ctrl"),b6e.forEach(t),TJe=r(oA," \u2014 "),nR=n(oA,"A",{href:!0});var v6e=s(nR);MJe=r(v6e,"CTRLConfig"),v6e.forEach(t),EJe=r(oA," (CTRL model)"),oA.forEach(t),CJe=i(L),am=n(L,"LI",{});var rA=s(am);ene=n(rA,"STRONG",{});var F6e=s(ene);wJe=r(F6e,"cvt"),F6e.forEach(t),AJe=r(rA," \u2014 "),sR=n(rA,"A",{href:!0});var T6e=s(sR);LJe=r(T6e,"CvtConfig"),T6e.forEach(t),yJe=r(rA," (CvT model)"),rA.forEach(t),xJe=i(L),nm=n(L,"LI",{});var tA=s(nm);one=n(tA,"STRONG",{});var M6e=s(one);$Je=r(M6e,"data2vec-audio"),M6e.forEach(t),kJe=r(tA," \u2014 "),lR=n(tA,"A",{href:!0});var E6e=s(lR);SJe=r(E6e,"Data2VecAudioConfig"),E6e.forEach(t),RJe=r(tA," (Data2VecAudio model)"),tA.forEach(t),PJe=i(L),sm=n(L,"LI",{});var aA=s(sm);rne=n(aA,"STRONG",{});var C6e=s(rne);BJe=r(C6e,"data2vec-text"),C6e.forEach(t),IJe=r(aA," \u2014 "),iR=n(aA,"A",{href:!0});var w6e=s(iR);NJe=r(w6e,"Data2VecTextConfig"),w6e.forEach(t),qJe=r(aA," (Data2VecText model)"),aA.forEach(t),jJe=i(L),lm=n(L,"LI",{});var nA=s(lm);tne=n(nA,"STRONG",{});var A6e=s(tne);DJe=r(A6e,"data2vec-vision"),A6e.forEach(t),GJe=r(nA," \u2014 "),dR=n(nA,"A",{href:!0});var L6e=s(dR);OJe=r(L6e,"Data2VecVisionConfig"),L6e.forEach(t),VJe=r(nA," (Data2VecVision model)"),nA.forEach(t),XJe=i(L),im=n(L,"LI",{});var sA=s(im);ane=n(sA,"STRONG",{});var y6e=s(ane);zJe=r(y6e,"deberta"),y6e.forEach(t),QJe=r(sA," \u2014 "),cR=n(sA,"A",{href:!0});var x6e=s(cR);WJe=r(x6e,"DebertaConfig"),x6e.forEach(t),HJe=r(sA," (DeBERTa model)"),sA.forEach(t),UJe=i(L),dm=n(L,"LI",{});var lA=s(dm);nne=n(lA,"STRONG",{});var $6e=s(nne);JJe=r($6e,"deberta-v2"),$6e.forEach(t),YJe=r(lA," \u2014 "),fR=n(lA,"A",{href:!0});var k6e=s(fR);KJe=r(k6e,"DebertaV2Config"),k6e.forEach(t),ZJe=r(lA," (DeBERTa-v2 model)"),lA.forEach(t),eYe=i(L),cm=n(L,"LI",{});var iA=s(cm);sne=n(iA,"STRONG",{});var btt=s(sne);oYe=r(btt,"decision_transformer"),btt.forEach(t),rYe=r(iA," \u2014 "),mR=n(iA,"A",{href:!0});var vtt=s(mR);tYe=r(vtt,"DecisionTransformerConfig"),vtt.forEach(t),aYe=r(iA," (Decision Transformer model)"),iA.forEach(t),nYe=i(L),fm=n(L,"LI",{});var S6e=s(fm);lne=n(S6e,"STRONG",{});var Ftt=s(lne);sYe=r(Ftt,"deformable_detr"),Ftt.forEach(t),lYe=r(S6e," \u2014 "),gR=n(S6e,"A",{href:!0});var Ttt=s(gR);iYe=r(Ttt,"DeformableDetrConfig"),Ttt.forEach(t),dYe=r(S6e," (Deformable DETR model)"),S6e.forEach(t),cYe=i(L),mm=n(L,"LI",{});var R6e=s(mm);ine=n(R6e,"STRONG",{});var Mtt=s(ine);fYe=r(Mtt,"deit"),Mtt.forEach(t),mYe=r(R6e," \u2014 "),hR=n(R6e,"A",{href:!0});var Ett=s(hR);gYe=r(Ett,"DeiTConfig"),Ett.forEach(t),hYe=r(R6e," (DeiT model)"),R6e.forEach(t),pYe=i(L),gm=n(L,"LI",{});var P6e=s(gm);dne=n(P6e,"STRONG",{});var Ctt=s(dne);_Ye=r(Ctt,"detr"),Ctt.forEach(t),uYe=r(P6e," \u2014 "),pR=n(P6e,"A",{href:!0});var wtt=s(pR);bYe=r(wtt,"DetrConfig"),wtt.forEach(t),vYe=r(P6e," (DETR model)"),P6e.forEach(t),FYe=i(L),hm=n(L,"LI",{});var B6e=s(hm);cne=n(B6e,"STRONG",{});var Att=s(cne);TYe=r(Att,"distilbert"),Att.forEach(t),MYe=r(B6e," \u2014 "),_R=n(B6e,"A",{href:!0});var Ltt=s(_R);EYe=r(Ltt,"DistilBertConfig"),Ltt.forEach(t),CYe=r(B6e," (DistilBERT model)"),B6e.forEach(t),wYe=i(L),pm=n(L,"LI",{});var I6e=s(pm);fne=n(I6e,"STRONG",{});var ytt=s(fne);AYe=r(ytt,"dpr"),ytt.forEach(t),LYe=r(I6e," \u2014 "),uR=n(I6e,"A",{href:!0});var xtt=s(uR);yYe=r(xtt,"DPRConfig"),xtt.forEach(t),xYe=r(I6e," (DPR model)"),I6e.forEach(t),$Ye=i(L),_m=n(L,"LI",{});var N6e=s(_m);mne=n(N6e,"STRONG",{});var $tt=s(mne);kYe=r($tt,"dpt"),$tt.forEach(t),SYe=r(N6e," \u2014 "),bR=n(N6e,"A",{href:!0});var ktt=s(bR);RYe=r(ktt,"DPTConfig"),ktt.forEach(t),PYe=r(N6e," (DPT model)"),N6e.forEach(t),BYe=i(L),um=n(L,"LI",{});var q6e=s(um);gne=n(q6e,"STRONG",{});var Stt=s(gne);IYe=r(Stt,"electra"),Stt.forEach(t),NYe=r(q6e," \u2014 "),vR=n(q6e,"A",{href:!0});var Rtt=s(vR);qYe=r(Rtt,"ElectraConfig"),Rtt.forEach(t),jYe=r(q6e," (ELECTRA model)"),q6e.forEach(t),DYe=i(L),bm=n(L,"LI",{});var j6e=s(bm);hne=n(j6e,"STRONG",{});var Ptt=s(hne);GYe=r(Ptt,"encoder-decoder"),Ptt.forEach(t),OYe=r(j6e," \u2014 "),FR=n(j6e,"A",{href:!0});var Btt=s(FR);VYe=r(Btt,"EncoderDecoderConfig"),Btt.forEach(t),XYe=r(j6e," (Encoder decoder model)"),j6e.forEach(t),zYe=i(L),vm=n(L,"LI",{});var D6e=s(vm);pne=n(D6e,"STRONG",{});var Itt=s(pne);QYe=r(Itt,"flaubert"),Itt.forEach(t),WYe=r(D6e," \u2014 "),TR=n(D6e,"A",{href:!0});var Ntt=s(TR);HYe=r(Ntt,"FlaubertConfig"),Ntt.forEach(t),UYe=r(D6e," (FlauBERT model)"),D6e.forEach(t),JYe=i(L),Fm=n(L,"LI",{});var G6e=s(Fm);_ne=n(G6e,"STRONG",{});var qtt=s(_ne);YYe=r(qtt,"flava"),qtt.forEach(t),KYe=r(G6e," \u2014 "),MR=n(G6e,"A",{href:!0});var jtt=s(MR);ZYe=r(jtt,"FlavaConfig"),jtt.forEach(t),eKe=r(G6e," (FLAVA model)"),G6e.forEach(t),oKe=i(L),Tm=n(L,"LI",{});var O6e=s(Tm);une=n(O6e,"STRONG",{});var Dtt=s(une);rKe=r(Dtt,"fnet"),Dtt.forEach(t),tKe=r(O6e," \u2014 "),ER=n(O6e,"A",{href:!0});var Gtt=s(ER);aKe=r(Gtt,"FNetConfig"),Gtt.forEach(t),nKe=r(O6e," (FNet model)"),O6e.forEach(t),sKe=i(L),Mm=n(L,"LI",{});var V6e=s(Mm);bne=n(V6e,"STRONG",{});var Ott=s(bne);lKe=r(Ott,"fsmt"),Ott.forEach(t),iKe=r(V6e," \u2014 "),CR=n(V6e,"A",{href:!0});var Vtt=s(CR);dKe=r(Vtt,"FSMTConfig"),Vtt.forEach(t),cKe=r(V6e," (FairSeq Machine-Translation model)"),V6e.forEach(t),fKe=i(L),Em=n(L,"LI",{});var X6e=s(Em);vne=n(X6e,"STRONG",{});var Xtt=s(vne);mKe=r(Xtt,"funnel"),Xtt.forEach(t),gKe=r(X6e," \u2014 "),wR=n(X6e,"A",{href:!0});var ztt=s(wR);hKe=r(ztt,"FunnelConfig"),ztt.forEach(t),pKe=r(X6e," (Funnel Transformer model)"),X6e.forEach(t),_Ke=i(L),Cm=n(L,"LI",{});var z6e=s(Cm);Fne=n(z6e,"STRONG",{});var Qtt=s(Fne);uKe=r(Qtt,"glpn"),Qtt.forEach(t),bKe=r(z6e," \u2014 "),AR=n(z6e,"A",{href:!0});var Wtt=s(AR);vKe=r(Wtt,"GLPNConfig"),Wtt.forEach(t),FKe=r(z6e," (GLPN model)"),z6e.forEach(t),TKe=i(L),wm=n(L,"LI",{});var Q6e=s(wm);Tne=n(Q6e,"STRONG",{});var Htt=s(Tne);MKe=r(Htt,"gpt2"),Htt.forEach(t),EKe=r(Q6e," \u2014 "),LR=n(Q6e,"A",{href:!0});var Utt=s(LR);CKe=r(Utt,"GPT2Config"),Utt.forEach(t),wKe=r(Q6e," (OpenAI GPT-2 model)"),Q6e.forEach(t),AKe=i(L),Am=n(L,"LI",{});var W6e=s(Am);Mne=n(W6e,"STRONG",{});var Jtt=s(Mne);LKe=r(Jtt,"gpt_neo"),Jtt.forEach(t),yKe=r(W6e," \u2014 "),yR=n(W6e,"A",{href:!0});var Ytt=s(yR);xKe=r(Ytt,"GPTNeoConfig"),Ytt.forEach(t),$Ke=r(W6e," (GPT Neo model)"),W6e.forEach(t),kKe=i(L),Lm=n(L,"LI",{});var H6e=s(Lm);Ene=n(H6e,"STRONG",{});var Ktt=s(Ene);SKe=r(Ktt,"gpt_neox"),Ktt.forEach(t),RKe=r(H6e," \u2014 "),xR=n(H6e,"A",{href:!0});var Ztt=s(xR);PKe=r(Ztt,"GPTNeoXConfig"),Ztt.forEach(t),BKe=r(H6e," (GPT NeoX model)"),H6e.forEach(t),IKe=i(L),ym=n(L,"LI",{});var U6e=s(ym);Cne=n(U6e,"STRONG",{});var eat=s(Cne);NKe=r(eat,"gptj"),eat.forEach(t),qKe=r(U6e," \u2014 "),$R=n(U6e,"A",{href:!0});var oat=s($R);jKe=r(oat,"GPTJConfig"),oat.forEach(t),DKe=r(U6e," (GPT-J model)"),U6e.forEach(t),GKe=i(L),xm=n(L,"LI",{});var J6e=s(xm);wne=n(J6e,"STRONG",{});var rat=s(wne);OKe=r(rat,"groupvit"),rat.forEach(t),VKe=r(J6e," \u2014 "),kR=n(J6e,"A",{href:!0});var tat=s(kR);XKe=r(tat,"GroupViTConfig"),tat.forEach(t),zKe=r(J6e," (GroupViT model)"),J6e.forEach(t),QKe=i(L),$m=n(L,"LI",{});var Y6e=s($m);Ane=n(Y6e,"STRONG",{});var aat=s(Ane);WKe=r(aat,"hubert"),aat.forEach(t),HKe=r(Y6e," \u2014 "),SR=n(Y6e,"A",{href:!0});var nat=s(SR);UKe=r(nat,"HubertConfig"),nat.forEach(t),JKe=r(Y6e," (Hubert model)"),Y6e.forEach(t),YKe=i(L),km=n(L,"LI",{});var K6e=s(km);Lne=n(K6e,"STRONG",{});var sat=s(Lne);KKe=r(sat,"ibert"),sat.forEach(t),ZKe=r(K6e," \u2014 "),RR=n(K6e,"A",{href:!0});var lat=s(RR);eZe=r(lat,"IBertConfig"),lat.forEach(t),oZe=r(K6e," (I-BERT model)"),K6e.forEach(t),rZe=i(L),Sm=n(L,"LI",{});var Z6e=s(Sm);yne=n(Z6e,"STRONG",{});var iat=s(yne);tZe=r(iat,"imagegpt"),iat.forEach(t),aZe=r(Z6e," \u2014 "),PR=n(Z6e,"A",{href:!0});var dat=s(PR);nZe=r(dat,"ImageGPTConfig"),dat.forEach(t),sZe=r(Z6e," (ImageGPT model)"),Z6e.forEach(t),lZe=i(L),Rm=n(L,"LI",{});var eLe=s(Rm);xne=n(eLe,"STRONG",{});var cat=s(xne);iZe=r(cat,"layoutlm"),cat.forEach(t),dZe=r(eLe," \u2014 "),BR=n(eLe,"A",{href:!0});var fat=s(BR);cZe=r(fat,"LayoutLMConfig"),fat.forEach(t),fZe=r(eLe," (LayoutLM model)"),eLe.forEach(t),mZe=i(L),Pm=n(L,"LI",{});var oLe=s(Pm);$ne=n(oLe,"STRONG",{});var mat=s($ne);gZe=r(mat,"layoutlmv2"),mat.forEach(t),hZe=r(oLe," \u2014 "),IR=n(oLe,"A",{href:!0});var gat=s(IR);pZe=r(gat,"LayoutLMv2Config"),gat.forEach(t),_Ze=r(oLe," (LayoutLMv2 model)"),oLe.forEach(t),uZe=i(L),Bm=n(L,"LI",{});var rLe=s(Bm);kne=n(rLe,"STRONG",{});var hat=s(kne);bZe=r(hat,"layoutlmv3"),hat.forEach(t),vZe=r(rLe," \u2014 "),NR=n(rLe,"A",{href:!0});var pat=s(NR);FZe=r(pat,"LayoutLMv3Config"),pat.forEach(t),TZe=r(rLe," (LayoutLMv3 model)"),rLe.forEach(t),MZe=i(L),Im=n(L,"LI",{});var tLe=s(Im);Sne=n(tLe,"STRONG",{});var _at=s(Sne);EZe=r(_at,"led"),_at.forEach(t),CZe=r(tLe," \u2014 "),qR=n(tLe,"A",{href:!0});var uat=s(qR);wZe=r(uat,"LEDConfig"),uat.forEach(t),AZe=r(tLe," (LED model)"),tLe.forEach(t),LZe=i(L),Nm=n(L,"LI",{});var aLe=s(Nm);Rne=n(aLe,"STRONG",{});var bat=s(Rne);yZe=r(bat,"levit"),bat.forEach(t),xZe=r(aLe," \u2014 "),jR=n(aLe,"A",{href:!0});var vat=s(jR);$Ze=r(vat,"LevitConfig"),vat.forEach(t),kZe=r(aLe," (LeViT model)"),aLe.forEach(t),SZe=i(L),qm=n(L,"LI",{});var nLe=s(qm);Pne=n(nLe,"STRONG",{});var Fat=s(Pne);RZe=r(Fat,"longformer"),Fat.forEach(t),PZe=r(nLe," \u2014 "),DR=n(nLe,"A",{href:!0});var Tat=s(DR);BZe=r(Tat,"LongformerConfig"),Tat.forEach(t),IZe=r(nLe," (Longformer model)"),nLe.forEach(t),NZe=i(L),jm=n(L,"LI",{});var sLe=s(jm);Bne=n(sLe,"STRONG",{});var Mat=s(Bne);qZe=r(Mat,"longt5"),Mat.forEach(t),jZe=r(sLe," \u2014 "),GR=n(sLe,"A",{href:!0});var Eat=s(GR);DZe=r(Eat,"LongT5Config"),Eat.forEach(t),GZe=r(sLe," (LongT5 model)"),sLe.forEach(t),OZe=i(L),Dm=n(L,"LI",{});var lLe=s(Dm);Ine=n(lLe,"STRONG",{});var Cat=s(Ine);VZe=r(Cat,"luke"),Cat.forEach(t),XZe=r(lLe," \u2014 "),OR=n(lLe,"A",{href:!0});var wat=s(OR);zZe=r(wat,"LukeConfig"),wat.forEach(t),QZe=r(lLe," (LUKE model)"),lLe.forEach(t),WZe=i(L),Gm=n(L,"LI",{});var iLe=s(Gm);Nne=n(iLe,"STRONG",{});var Aat=s(Nne);HZe=r(Aat,"lxmert"),Aat.forEach(t),UZe=r(iLe," \u2014 "),VR=n(iLe,"A",{href:!0});var Lat=s(VR);JZe=r(Lat,"LxmertConfig"),Lat.forEach(t),YZe=r(iLe," (LXMERT model)"),iLe.forEach(t),KZe=i(L),Om=n(L,"LI",{});var dLe=s(Om);qne=n(dLe,"STRONG",{});var yat=s(qne);ZZe=r(yat,"m2m_100"),yat.forEach(t),eeo=r(dLe," \u2014 "),XR=n(dLe,"A",{href:!0});var xat=s(XR);oeo=r(xat,"M2M100Config"),xat.forEach(t),reo=r(dLe," (M2M100 model)"),dLe.forEach(t),teo=i(L),Vm=n(L,"LI",{});var cLe=s(Vm);jne=n(cLe,"STRONG",{});var $at=s(jne);aeo=r($at,"marian"),$at.forEach(t),neo=r(cLe," \u2014 "),zR=n(cLe,"A",{href:!0});var kat=s(zR);seo=r(kat,"MarianConfig"),kat.forEach(t),leo=r(cLe," (Marian model)"),cLe.forEach(t),ieo=i(L),Xm=n(L,"LI",{});var fLe=s(Xm);Dne=n(fLe,"STRONG",{});var Sat=s(Dne);deo=r(Sat,"maskformer"),Sat.forEach(t),ceo=r(fLe," \u2014 "),QR=n(fLe,"A",{href:!0});var Rat=s(QR);feo=r(Rat,"MaskFormerConfig"),Rat.forEach(t),meo=r(fLe," (MaskFormer model)"),fLe.forEach(t),geo=i(L),zm=n(L,"LI",{});var mLe=s(zm);Gne=n(mLe,"STRONG",{});var Pat=s(Gne);heo=r(Pat,"mbart"),Pat.forEach(t),peo=r(mLe," \u2014 "),WR=n(mLe,"A",{href:!0});var Bat=s(WR);_eo=r(Bat,"MBartConfig"),Bat.forEach(t),ueo=r(mLe," (mBART model)"),mLe.forEach(t),beo=i(L),Qm=n(L,"LI",{});var gLe=s(Qm);One=n(gLe,"STRONG",{});var Iat=s(One);veo=r(Iat,"mctct"),Iat.forEach(t),Feo=r(gLe," \u2014 "),HR=n(gLe,"A",{href:!0});var Nat=s(HR);Teo=r(Nat,"MCTCTConfig"),Nat.forEach(t),Meo=r(gLe," (M-CTC-T model)"),gLe.forEach(t),Eeo=i(L),Wm=n(L,"LI",{});var hLe=s(Wm);Vne=n(hLe,"STRONG",{});var qat=s(Vne);Ceo=r(qat,"megatron-bert"),qat.forEach(t),weo=r(hLe," \u2014 "),UR=n(hLe,"A",{href:!0});var jat=s(UR);Aeo=r(jat,"MegatronBertConfig"),jat.forEach(t),Leo=r(hLe," (Megatron-BERT model)"),hLe.forEach(t),yeo=i(L),Hm=n(L,"LI",{});var pLe=s(Hm);Xne=n(pLe,"STRONG",{});var Dat=s(Xne);xeo=r(Dat,"mobilebert"),Dat.forEach(t),$eo=r(pLe," \u2014 "),JR=n(pLe,"A",{href:!0});var Gat=s(JR);keo=r(Gat,"MobileBertConfig"),Gat.forEach(t),Seo=r(pLe," (MobileBERT model)"),pLe.forEach(t),Reo=i(L),Um=n(L,"LI",{});var _Le=s(Um);zne=n(_Le,"STRONG",{});var Oat=s(zne);Peo=r(Oat,"mobilevit"),Oat.forEach(t),Beo=r(_Le," \u2014 "),YR=n(_Le,"A",{href:!0});var Vat=s(YR);Ieo=r(Vat,"MobileViTConfig"),Vat.forEach(t),Neo=r(_Le," (MobileViT model)"),_Le.forEach(t),qeo=i(L),Jm=n(L,"LI",{});var uLe=s(Jm);Qne=n(uLe,"STRONG",{});var Xat=s(Qne);jeo=r(Xat,"mpnet"),Xat.forEach(t),Deo=r(uLe," \u2014 "),KR=n(uLe,"A",{href:!0});var zat=s(KR);Geo=r(zat,"MPNetConfig"),zat.forEach(t),Oeo=r(uLe," (MPNet model)"),uLe.forEach(t),Veo=i(L),Ym=n(L,"LI",{});var bLe=s(Ym);Wne=n(bLe,"STRONG",{});var Qat=s(Wne);Xeo=r(Qat,"mt5"),Qat.forEach(t),zeo=r(bLe," \u2014 "),ZR=n(bLe,"A",{href:!0});var Wat=s(ZR);Qeo=r(Wat,"MT5Config"),Wat.forEach(t),Weo=r(bLe," (MT5 model)"),bLe.forEach(t),Heo=i(L),Km=n(L,"LI",{});var vLe=s(Km);Hne=n(vLe,"STRONG",{});var Hat=s(Hne);Ueo=r(Hat,"mvp"),Hat.forEach(t),Jeo=r(vLe," \u2014 "),eP=n(vLe,"A",{href:!0});var Uat=s(eP);Yeo=r(Uat,"MvpConfig"),Uat.forEach(t),Keo=r(vLe," (MVP model)"),vLe.forEach(t),Zeo=i(L),Zm=n(L,"LI",{});var FLe=s(Zm);Une=n(FLe,"STRONG",{});var Jat=s(Une);eoo=r(Jat,"nezha"),Jat.forEach(t),ooo=r(FLe," \u2014 "),oP=n(FLe,"A",{href:!0});var Yat=s(oP);roo=r(Yat,"NezhaConfig"),Yat.forEach(t),too=r(FLe," (Nezha model)"),FLe.forEach(t),aoo=i(L),eg=n(L,"LI",{});var TLe=s(eg);Jne=n(TLe,"STRONG",{});var Kat=s(Jne);noo=r(Kat,"nystromformer"),Kat.forEach(t),soo=r(TLe," \u2014 "),rP=n(TLe,"A",{href:!0});var Zat=s(rP);loo=r(Zat,"NystromformerConfig"),Zat.forEach(t),ioo=r(TLe," (Nystr\xF6mformer model)"),TLe.forEach(t),doo=i(L),og=n(L,"LI",{});var MLe=s(og);Yne=n(MLe,"STRONG",{});var ent=s(Yne);coo=r(ent,"openai-gpt"),ent.forEach(t),foo=r(MLe," \u2014 "),tP=n(MLe,"A",{href:!0});var ont=s(tP);moo=r(ont,"OpenAIGPTConfig"),ont.forEach(t),goo=r(MLe," (OpenAI GPT model)"),MLe.forEach(t),hoo=i(L),rg=n(L,"LI",{});var ELe=s(rg);Kne=n(ELe,"STRONG",{});var rnt=s(Kne);poo=r(rnt,"opt"),rnt.forEach(t),_oo=r(ELe," \u2014 "),aP=n(ELe,"A",{href:!0});var tnt=s(aP);uoo=r(tnt,"OPTConfig"),tnt.forEach(t),boo=r(ELe," (OPT model)"),ELe.forEach(t),voo=i(L),tg=n(L,"LI",{});var CLe=s(tg);Zne=n(CLe,"STRONG",{});var ant=s(Zne);Foo=r(ant,"pegasus"),ant.forEach(t),Too=r(CLe," \u2014 "),nP=n(CLe,"A",{href:!0});var nnt=s(nP);Moo=r(nnt,"PegasusConfig"),nnt.forEach(t),Eoo=r(CLe," (Pegasus model)"),CLe.forEach(t),Coo=i(L),ag=n(L,"LI",{});var wLe=s(ag);ese=n(wLe,"STRONG",{});var snt=s(ese);woo=r(snt,"perceiver"),snt.forEach(t),Aoo=r(wLe," \u2014 "),sP=n(wLe,"A",{href:!0});var lnt=s(sP);Loo=r(lnt,"PerceiverConfig"),lnt.forEach(t),yoo=r(wLe," (Perceiver model)"),wLe.forEach(t),xoo=i(L),ng=n(L,"LI",{});var ALe=s(ng);ose=n(ALe,"STRONG",{});var int=s(ose);$oo=r(int,"plbart"),int.forEach(t),koo=r(ALe," \u2014 "),lP=n(ALe,"A",{href:!0});var dnt=s(lP);Soo=r(dnt,"PLBartConfig"),dnt.forEach(t),Roo=r(ALe," (PLBart model)"),ALe.forEach(t),Poo=i(L),sg=n(L,"LI",{});var LLe=s(sg);rse=n(LLe,"STRONG",{});var cnt=s(rse);Boo=r(cnt,"poolformer"),cnt.forEach(t),Ioo=r(LLe," \u2014 "),iP=n(LLe,"A",{href:!0});var fnt=s(iP);Noo=r(fnt,"PoolFormerConfig"),fnt.forEach(t),qoo=r(LLe," (PoolFormer model)"),LLe.forEach(t),joo=i(L),lg=n(L,"LI",{});var yLe=s(lg);tse=n(yLe,"STRONG",{});var mnt=s(tse);Doo=r(mnt,"prophetnet"),mnt.forEach(t),Goo=r(yLe," \u2014 "),dP=n(yLe,"A",{href:!0});var gnt=s(dP);Ooo=r(gnt,"ProphetNetConfig"),gnt.forEach(t),Voo=r(yLe," (ProphetNet model)"),yLe.forEach(t),Xoo=i(L),ig=n(L,"LI",{});var xLe=s(ig);ase=n(xLe,"STRONG",{});var hnt=s(ase);zoo=r(hnt,"qdqbert"),hnt.forEach(t),Qoo=r(xLe," \u2014 "),cP=n(xLe,"A",{href:!0});var pnt=s(cP);Woo=r(pnt,"QDQBertConfig"),pnt.forEach(t),Hoo=r(xLe," (QDQBert model)"),xLe.forEach(t),Uoo=i(L),dg=n(L,"LI",{});var $Le=s(dg);nse=n($Le,"STRONG",{});var _nt=s(nse);Joo=r(_nt,"rag"),_nt.forEach(t),Yoo=r($Le," \u2014 "),fP=n($Le,"A",{href:!0});var unt=s(fP);Koo=r(unt,"RagConfig"),unt.forEach(t),Zoo=r($Le," (RAG model)"),$Le.forEach(t),ero=i(L),cg=n(L,"LI",{});var kLe=s(cg);sse=n(kLe,"STRONG",{});var bnt=s(sse);oro=r(bnt,"realm"),bnt.forEach(t),rro=r(kLe," \u2014 "),mP=n(kLe,"A",{href:!0});var vnt=s(mP);tro=r(vnt,"RealmConfig"),vnt.forEach(t),aro=r(kLe," (REALM model)"),kLe.forEach(t),nro=i(L),fg=n(L,"LI",{});var SLe=s(fg);lse=n(SLe,"STRONG",{});var Fnt=s(lse);sro=r(Fnt,"reformer"),Fnt.forEach(t),lro=r(SLe," \u2014 "),gP=n(SLe,"A",{href:!0});var Tnt=s(gP);iro=r(Tnt,"ReformerConfig"),Tnt.forEach(t),dro=r(SLe," (Reformer model)"),SLe.forEach(t),cro=i(L),mg=n(L,"LI",{});var RLe=s(mg);ise=n(RLe,"STRONG",{});var Mnt=s(ise);fro=r(Mnt,"regnet"),Mnt.forEach(t),mro=r(RLe," \u2014 "),hP=n(RLe,"A",{href:!0});var Ent=s(hP);gro=r(Ent,"RegNetConfig"),Ent.forEach(t),hro=r(RLe," (RegNet model)"),RLe.forEach(t),pro=i(L),gg=n(L,"LI",{});var PLe=s(gg);dse=n(PLe,"STRONG",{});var Cnt=s(dse);_ro=r(Cnt,"rembert"),Cnt.forEach(t),uro=r(PLe," \u2014 "),pP=n(PLe,"A",{href:!0});var wnt=s(pP);bro=r(wnt,"RemBertConfig"),wnt.forEach(t),vro=r(PLe," (RemBERT model)"),PLe.forEach(t),Fro=i(L),hg=n(L,"LI",{});var BLe=s(hg);cse=n(BLe,"STRONG",{});var Ant=s(cse);Tro=r(Ant,"resnet"),Ant.forEach(t),Mro=r(BLe," \u2014 "),_P=n(BLe,"A",{href:!0});var Lnt=s(_P);Ero=r(Lnt,"ResNetConfig"),Lnt.forEach(t),Cro=r(BLe," (ResNet model)"),BLe.forEach(t),wro=i(L),pg=n(L,"LI",{});var ILe=s(pg);fse=n(ILe,"STRONG",{});var ynt=s(fse);Aro=r(ynt,"retribert"),ynt.forEach(t),Lro=r(ILe," \u2014 "),uP=n(ILe,"A",{href:!0});var xnt=s(uP);yro=r(xnt,"RetriBertConfig"),xnt.forEach(t),xro=r(ILe," (RetriBERT model)"),ILe.forEach(t),$ro=i(L),_g=n(L,"LI",{});var NLe=s(_g);mse=n(NLe,"STRONG",{});var $nt=s(mse);kro=r($nt,"roberta"),$nt.forEach(t),Sro=r(NLe," \u2014 "),bP=n(NLe,"A",{href:!0});var knt=s(bP);Rro=r(knt,"RobertaConfig"),knt.forEach(t),Pro=r(NLe," (RoBERTa model)"),NLe.forEach(t),Bro=i(L),ug=n(L,"LI",{});var qLe=s(ug);gse=n(qLe,"STRONG",{});var Snt=s(gse);Iro=r(Snt,"roformer"),Snt.forEach(t),Nro=r(qLe," \u2014 "),vP=n(qLe,"A",{href:!0});var Rnt=s(vP);qro=r(Rnt,"RoFormerConfig"),Rnt.forEach(t),jro=r(qLe," (RoFormer model)"),qLe.forEach(t),Dro=i(L),bg=n(L,"LI",{});var jLe=s(bg);hse=n(jLe,"STRONG",{});var Pnt=s(hse);Gro=r(Pnt,"segformer"),Pnt.forEach(t),Oro=r(jLe," \u2014 "),FP=n(jLe,"A",{href:!0});var Bnt=s(FP);Vro=r(Bnt,"SegformerConfig"),Bnt.forEach(t),Xro=r(jLe," (SegFormer model)"),jLe.forEach(t),zro=i(L),vg=n(L,"LI",{});var DLe=s(vg);pse=n(DLe,"STRONG",{});var Int=s(pse);Qro=r(Int,"sew"),Int.forEach(t),Wro=r(DLe," \u2014 "),TP=n(DLe,"A",{href:!0});var Nnt=s(TP);Hro=r(Nnt,"SEWConfig"),Nnt.forEach(t),Uro=r(DLe," (SEW model)"),DLe.forEach(t),Jro=i(L),Fg=n(L,"LI",{});var GLe=s(Fg);_se=n(GLe,"STRONG",{});var qnt=s(_se);Yro=r(qnt,"sew-d"),qnt.forEach(t),Kro=r(GLe," \u2014 "),MP=n(GLe,"A",{href:!0});var jnt=s(MP);Zro=r(jnt,"SEWDConfig"),jnt.forEach(t),eto=r(GLe," (SEW-D model)"),GLe.forEach(t),oto=i(L),Tg=n(L,"LI",{});var OLe=s(Tg);use=n(OLe,"STRONG",{});var Dnt=s(use);rto=r(Dnt,"speech-encoder-decoder"),Dnt.forEach(t),tto=r(OLe," \u2014 "),EP=n(OLe,"A",{href:!0});var Gnt=s(EP);ato=r(Gnt,"SpeechEncoderDecoderConfig"),Gnt.forEach(t),nto=r(OLe," (Speech Encoder decoder model)"),OLe.forEach(t),sto=i(L),Mg=n(L,"LI",{});var VLe=s(Mg);bse=n(VLe,"STRONG",{});var Ont=s(bse);lto=r(Ont,"speech_to_text"),Ont.forEach(t),ito=r(VLe," \u2014 "),CP=n(VLe,"A",{href:!0});var Vnt=s(CP);dto=r(Vnt,"Speech2TextConfig"),Vnt.forEach(t),cto=r(VLe," (Speech2Text model)"),VLe.forEach(t),fto=i(L),Eg=n(L,"LI",{});var XLe=s(Eg);vse=n(XLe,"STRONG",{});var Xnt=s(vse);mto=r(Xnt,"speech_to_text_2"),Xnt.forEach(t),gto=r(XLe," \u2014 "),wP=n(XLe,"A",{href:!0});var znt=s(wP);hto=r(znt,"Speech2Text2Config"),znt.forEach(t),pto=r(XLe," (Speech2Text2 model)"),XLe.forEach(t),_to=i(L),Cg=n(L,"LI",{});var zLe=s(Cg);Fse=n(zLe,"STRONG",{});var Qnt=s(Fse);uto=r(Qnt,"splinter"),Qnt.forEach(t),bto=r(zLe," \u2014 "),AP=n(zLe,"A",{href:!0});var Wnt=s(AP);vto=r(Wnt,"SplinterConfig"),Wnt.forEach(t),Fto=r(zLe," (Splinter model)"),zLe.forEach(t),Tto=i(L),wg=n(L,"LI",{});var QLe=s(wg);Tse=n(QLe,"STRONG",{});var Hnt=s(Tse);Mto=r(Hnt,"squeezebert"),Hnt.forEach(t),Eto=r(QLe," \u2014 "),LP=n(QLe,"A",{href:!0});var Unt=s(LP);Cto=r(Unt,"SqueezeBertConfig"),Unt.forEach(t),wto=r(QLe," (SqueezeBERT model)"),QLe.forEach(t),Ato=i(L),Ag=n(L,"LI",{});var WLe=s(Ag);Mse=n(WLe,"STRONG",{});var Jnt=s(Mse);Lto=r(Jnt,"swin"),Jnt.forEach(t),yto=r(WLe," \u2014 "),yP=n(WLe,"A",{href:!0});var Ynt=s(yP);xto=r(Ynt,"SwinConfig"),Ynt.forEach(t),$to=r(WLe," (Swin Transformer model)"),WLe.forEach(t),kto=i(L),Lg=n(L,"LI",{});var HLe=s(Lg);Ese=n(HLe,"STRONG",{});var Knt=s(Ese);Sto=r(Knt,"t5"),Knt.forEach(t),Rto=r(HLe," \u2014 "),xP=n(HLe,"A",{href:!0});var Znt=s(xP);Pto=r(Znt,"T5Config"),Znt.forEach(t),Bto=r(HLe," (T5 model)"),HLe.forEach(t),Ito=i(L),yg=n(L,"LI",{});var ULe=s(yg);Cse=n(ULe,"STRONG",{});var est=s(Cse);Nto=r(est,"tapas"),est.forEach(t),qto=r(ULe," \u2014 "),$P=n(ULe,"A",{href:!0});var ost=s($P);jto=r(ost,"TapasConfig"),ost.forEach(t),Dto=r(ULe," (TAPAS model)"),ULe.forEach(t),Gto=i(L),xg=n(L,"LI",{});var JLe=s(xg);wse=n(JLe,"STRONG",{});var rst=s(wse);Oto=r(rst,"trajectory_transformer"),rst.forEach(t),Vto=r(JLe," \u2014 "),kP=n(JLe,"A",{href:!0});var tst=s(kP);Xto=r(tst,"TrajectoryTransformerConfig"),tst.forEach(t),zto=r(JLe," (Trajectory Transformer model)"),JLe.forEach(t),Qto=i(L),$g=n(L,"LI",{});var YLe=s($g);Ase=n(YLe,"STRONG",{});var ast=s(Ase);Wto=r(ast,"transfo-xl"),ast.forEach(t),Hto=r(YLe," \u2014 "),SP=n(YLe,"A",{href:!0});var nst=s(SP);Uto=r(nst,"TransfoXLConfig"),nst.forEach(t),Jto=r(YLe," (Transformer-XL model)"),YLe.forEach(t),Yto=i(L),kg=n(L,"LI",{});var KLe=s(kg);Lse=n(KLe,"STRONG",{});var sst=s(Lse);Kto=r(sst,"trocr"),sst.forEach(t),Zto=r(KLe," \u2014 "),RP=n(KLe,"A",{href:!0});var lst=s(RP);eao=r(lst,"TrOCRConfig"),lst.forEach(t),oao=r(KLe," (TrOCR model)"),KLe.forEach(t),rao=i(L),Sg=n(L,"LI",{});var ZLe=s(Sg);yse=n(ZLe,"STRONG",{});var ist=s(yse);tao=r(ist,"unispeech"),ist.forEach(t),aao=r(ZLe," \u2014 "),PP=n(ZLe,"A",{href:!0});var dst=s(PP);nao=r(dst,"UniSpeechConfig"),dst.forEach(t),sao=r(ZLe," (UniSpeech model)"),ZLe.forEach(t),lao=i(L),Rg=n(L,"LI",{});var eye=s(Rg);xse=n(eye,"STRONG",{});var cst=s(xse);iao=r(cst,"unispeech-sat"),cst.forEach(t),dao=r(eye," \u2014 "),BP=n(eye,"A",{href:!0});var fst=s(BP);cao=r(fst,"UniSpeechSatConfig"),fst.forEach(t),fao=r(eye," (UniSpeechSat model)"),eye.forEach(t),mao=i(L),Pg=n(L,"LI",{});var oye=s(Pg);$se=n(oye,"STRONG",{});var mst=s($se);gao=r(mst,"van"),mst.forEach(t),hao=r(oye," \u2014 "),IP=n(oye,"A",{href:!0});var gst=s(IP);pao=r(gst,"VanConfig"),gst.forEach(t),_ao=r(oye," (VAN model)"),oye.forEach(t),uao=i(L),Bg=n(L,"LI",{});var rye=s(Bg);kse=n(rye,"STRONG",{});var hst=s(kse);bao=r(hst,"vilt"),hst.forEach(t),vao=r(rye," \u2014 "),NP=n(rye,"A",{href:!0});var pst=s(NP);Fao=r(pst,"ViltConfig"),pst.forEach(t),Tao=r(rye," (ViLT model)"),rye.forEach(t),Mao=i(L),Ig=n(L,"LI",{});var tye=s(Ig);Sse=n(tye,"STRONG",{});var _st=s(Sse);Eao=r(_st,"vision-encoder-decoder"),_st.forEach(t),Cao=r(tye," \u2014 "),qP=n(tye,"A",{href:!0});var ust=s(qP);wao=r(ust,"VisionEncoderDecoderConfig"),ust.forEach(t),Aao=r(tye," (Vision Encoder decoder model)"),tye.forEach(t),Lao=i(L),Ng=n(L,"LI",{});var aye=s(Ng);Rse=n(aye,"STRONG",{});var bst=s(Rse);yao=r(bst,"vision-text-dual-encoder"),bst.forEach(t),xao=r(aye," \u2014 "),jP=n(aye,"A",{href:!0});var vst=s(jP);$ao=r(vst,"VisionTextDualEncoderConfig"),vst.forEach(t),kao=r(aye," (VisionTextDualEncoder model)"),aye.forEach(t),Sao=i(L),qg=n(L,"LI",{});var nye=s(qg);Pse=n(nye,"STRONG",{});var Fst=s(Pse);Rao=r(Fst,"visual_bert"),Fst.forEach(t),Pao=r(nye," \u2014 "),DP=n(nye,"A",{href:!0});var Tst=s(DP);Bao=r(Tst,"VisualBertConfig"),Tst.forEach(t),Iao=r(nye," (VisualBERT model)"),nye.forEach(t),Nao=i(L),jg=n(L,"LI",{});var sye=s(jg);Bse=n(sye,"STRONG",{});var Mst=s(Bse);qao=r(Mst,"vit"),Mst.forEach(t),jao=r(sye," \u2014 "),GP=n(sye,"A",{href:!0});var Est=s(GP);Dao=r(Est,"ViTConfig"),Est.forEach(t),Gao=r(sye," (ViT model)"),sye.forEach(t),Oao=i(L),Dg=n(L,"LI",{});var lye=s(Dg);Ise=n(lye,"STRONG",{});var Cst=s(Ise);Vao=r(Cst,"vit_mae"),Cst.forEach(t),Xao=r(lye," \u2014 "),OP=n(lye,"A",{href:!0});var wst=s(OP);zao=r(wst,"ViTMAEConfig"),wst.forEach(t),Qao=r(lye," (ViTMAE model)"),lye.forEach(t),Wao=i(L),Gg=n(L,"LI",{});var iye=s(Gg);Nse=n(iye,"STRONG",{});var Ast=s(Nse);Hao=r(Ast,"wav2vec2"),Ast.forEach(t),Uao=r(iye," \u2014 "),VP=n(iye,"A",{href:!0});var Lst=s(VP);Jao=r(Lst,"Wav2Vec2Config"),Lst.forEach(t),Yao=r(iye," (Wav2Vec2 model)"),iye.forEach(t),Kao=i(L),Og=n(L,"LI",{});var dye=s(Og);qse=n(dye,"STRONG",{});var yst=s(qse);Zao=r(yst,"wav2vec2-conformer"),yst.forEach(t),eno=r(dye," \u2014 "),XP=n(dye,"A",{href:!0});var xst=s(XP);ono=r(xst,"Wav2Vec2ConformerConfig"),xst.forEach(t),rno=r(dye," (Wav2Vec2-Conformer model)"),dye.forEach(t),tno=i(L),Vg=n(L,"LI",{});var cye=s(Vg);jse=n(cye,"STRONG",{});var $st=s(jse);ano=r($st,"wavlm"),$st.forEach(t),nno=r(cye," \u2014 "),zP=n(cye,"A",{href:!0});var kst=s(zP);sno=r(kst,"WavLMConfig"),kst.forEach(t),lno=r(cye," (WavLM model)"),cye.forEach(t),ino=i(L),Xg=n(L,"LI",{});var fye=s(Xg);Dse=n(fye,"STRONG",{});var Sst=s(Dse);dno=r(Sst,"xglm"),Sst.forEach(t),cno=r(fye," \u2014 "),QP=n(fye,"A",{href:!0});var Rst=s(QP);fno=r(Rst,"XGLMConfig"),Rst.forEach(t),mno=r(fye," (XGLM model)"),fye.forEach(t),gno=i(L),zg=n(L,"LI",{});var mye=s(zg);Gse=n(mye,"STRONG",{});var Pst=s(Gse);hno=r(Pst,"xlm"),Pst.forEach(t),pno=r(mye," \u2014 "),WP=n(mye,"A",{href:!0});var Bst=s(WP);_no=r(Bst,"XLMConfig"),Bst.forEach(t),uno=r(mye," (XLM model)"),mye.forEach(t),bno=i(L),Qg=n(L,"LI",{});var gye=s(Qg);Ose=n(gye,"STRONG",{});var Ist=s(Ose);vno=r(Ist,"xlm-prophetnet"),Ist.forEach(t),Fno=r(gye," \u2014 "),HP=n(gye,"A",{href:!0});var Nst=s(HP);Tno=r(Nst,"XLMProphetNetConfig"),Nst.forEach(t),Mno=r(gye," (XLM-ProphetNet model)"),gye.forEach(t),Eno=i(L),Wg=n(L,"LI",{});var hye=s(Wg);Vse=n(hye,"STRONG",{});var qst=s(Vse);Cno=r(qst,"xlm-roberta"),qst.forEach(t),wno=r(hye," \u2014 "),UP=n(hye,"A",{href:!0});var jst=s(UP);Ano=r(jst,"XLMRobertaConfig"),jst.forEach(t),Lno=r(hye," (XLM-RoBERTa model)"),hye.forEach(t),yno=i(L),Hg=n(L,"LI",{});var pye=s(Hg);Xse=n(pye,"STRONG",{});var Dst=s(Xse);xno=r(Dst,"xlm-roberta-xl"),Dst.forEach(t),$no=r(pye," \u2014 "),JP=n(pye,"A",{href:!0});var Gst=s(JP);kno=r(Gst,"XLMRobertaXLConfig"),Gst.forEach(t),Sno=r(pye," (XLM-RoBERTa-XL model)"),pye.forEach(t),Rno=i(L),Ug=n(L,"LI",{});var _ye=s(Ug);zse=n(_ye,"STRONG",{});var Ost=s(zse);Pno=r(Ost,"xlnet"),Ost.forEach(t),Bno=r(_ye," \u2014 "),YP=n(_ye,"A",{href:!0});var Vst=s(YP);Ino=r(Vst,"XLNetConfig"),Vst.forEach(t),Nno=r(_ye," (XLNet model)"),_ye.forEach(t),qno=i(L),Jg=n(L,"LI",{});var uye=s(Jg);Qse=n(uye,"STRONG",{});var Xst=s(Qse);jno=r(Xst,"yolos"),Xst.forEach(t),Dno=r(uye," \u2014 "),KP=n(uye,"A",{href:!0});var zst=s(KP);Gno=r(zst,"YolosConfig"),zst.forEach(t),Ono=r(uye," (YOLOS model)"),uye.forEach(t),Vno=i(L),Yg=n(L,"LI",{});var bye=s(Yg);Wse=n(bye,"STRONG",{});var Qst=s(Wse);Xno=r(Qst,"yoso"),Qst.forEach(t),zno=r(bye," \u2014 "),ZP=n(bye,"A",{href:!0});var Wst=s(ZP);Qno=r(Wst,"YosoConfig"),Wst.forEach(t),Wno=r(bye," (YOSO model)"),bye.forEach(t),L.forEach(t),Hno=i(nt),T(Kg.$$.fragment,nt),nt.forEach(t),Uno=i(at),Zg=n(at,"DIV",{class:!0});var fQe=s(Zg);T(hL.$$.fragment,fQe),Jno=i(fQe),Hse=n(fQe,"P",{});var Hst=s(Hse);Yno=r(Hst,"Register a new configuration for this class."),Hst.forEach(t),fQe.forEach(t),at.forEach(t),mXe=i(f),Ii=n(f,"H2",{class:!0});var mQe=s(Ii);eh=n(mQe,"A",{id:!0,class:!0,href:!0});var Ust=s(eh);Use=n(Ust,"SPAN",{});var Jst=s(Use);T(pL.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),Kno=i(mQe),Jse=n(mQe,"SPAN",{});var Yst=s(Jse);Zno=r(Yst,"AutoTokenizer"),Yst.forEach(t),mQe.forEach(t),gXe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(_L.$$.fragment,Ys),eso=i(Ys),uL=n(Ys,"P",{});var gQe=s(uL);oso=r(gQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=n(gQe,"A",{href:!0});var Kst=s(eB);rso=r(Kst,"AutoTokenizer.from_pretrained()"),Kst.forEach(t),tso=r(gQe," class method."),gQe.forEach(t),aso=i(Ys),bL=n(Ys,"P",{});var hQe=s(bL);nso=r(hQe,"This class cannot be instantiated directly using "),Yse=n(hQe,"CODE",{});var Zst=s(Yse);sso=r(Zst,"__init__()"),Zst.forEach(t),lso=r(hQe," (throws an error)."),hQe.forEach(t),iso=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(vL.$$.fragment,Ks),dso=i(Ks),Kse=n(Ks,"P",{});var elt=s(Kse);cso=r(elt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),elt.forEach(t),fso=i(Ks),Pa=n(Ks,"P",{});var dA=s(Pa);mso=r(dA,"The tokenizer class to instantiate is selected based on the "),Zse=n(dA,"CODE",{});var olt=s(Zse);gso=r(olt,"model_type"),olt.forEach(t),hso=r(dA,` property of the config object (either
passed as an argument or loaded from `),ele=n(dA,"CODE",{});var rlt=s(ele);pso=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),_so=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(dA,"CODE",{});var tlt=s(ole);uso=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),bso=r(dA,":"),dA.forEach(t),vso=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ck=s(jn);rle=n(Ck,"STRONG",{});var alt=s(rle);Fso=r(alt,"albert"),alt.forEach(t),Tso=r(Ck," \u2014 "),oB=n(Ck,"A",{href:!0});var nlt=s(oB);Mso=r(nlt,"AlbertTokenizer"),nlt.forEach(t),Eso=r(Ck," or "),rB=n(Ck,"A",{href:!0});var slt=s(rB);Cso=r(slt,"AlbertTokenizerFast"),slt.forEach(t),wso=r(Ck," (ALBERT model)"),Ck.forEach(t),Aso=i(S),Dn=n(S,"LI",{});var wk=s(Dn);tle=n(wk,"STRONG",{});var llt=s(tle);Lso=r(llt,"bart"),llt.forEach(t),yso=r(wk," \u2014 "),tB=n(wk,"A",{href:!0});var ilt=s(tB);xso=r(ilt,"BartTokenizer"),ilt.forEach(t),$so=r(wk," or "),aB=n(wk,"A",{href:!0});var dlt=s(aB);kso=r(dlt,"BartTokenizerFast"),dlt.forEach(t),Sso=r(wk," (BART model)"),wk.forEach(t),Rso=i(S),Gn=n(S,"LI",{});var Ak=s(Gn);ale=n(Ak,"STRONG",{});var clt=s(ale);Pso=r(clt,"barthez"),clt.forEach(t),Bso=r(Ak," \u2014 "),nB=n(Ak,"A",{href:!0});var flt=s(nB);Iso=r(flt,"BarthezTokenizer"),flt.forEach(t),Nso=r(Ak," or "),sB=n(Ak,"A",{href:!0});var mlt=s(sB);qso=r(mlt,"BarthezTokenizerFast"),mlt.forEach(t),jso=r(Ak," (BARThez model)"),Ak.forEach(t),Dso=i(S),oh=n(S,"LI",{});var vye=s(oh);nle=n(vye,"STRONG",{});var glt=s(nle);Gso=r(glt,"bartpho"),glt.forEach(t),Oso=r(vye," \u2014 "),lB=n(vye,"A",{href:!0});var hlt=s(lB);Vso=r(hlt,"BartphoTokenizer"),hlt.forEach(t),Xso=r(vye," (BARTpho model)"),vye.forEach(t),zso=i(S),On=n(S,"LI",{});var Lk=s(On);sle=n(Lk,"STRONG",{});var plt=s(sle);Qso=r(plt,"bert"),plt.forEach(t),Wso=r(Lk," \u2014 "),iB=n(Lk,"A",{href:!0});var _lt=s(iB);Hso=r(_lt,"BertTokenizer"),_lt.forEach(t),Uso=r(Lk," or "),dB=n(Lk,"A",{href:!0});var ult=s(dB);Jso=r(ult,"BertTokenizerFast"),ult.forEach(t),Yso=r(Lk," (BERT model)"),Lk.forEach(t),Kso=i(S),rh=n(S,"LI",{});var Fye=s(rh);lle=n(Fye,"STRONG",{});var blt=s(lle);Zso=r(blt,"bert-generation"),blt.forEach(t),elo=r(Fye," \u2014 "),cB=n(Fye,"A",{href:!0});var vlt=s(cB);olo=r(vlt,"BertGenerationTokenizer"),vlt.forEach(t),rlo=r(Fye," (Bert Generation model)"),Fye.forEach(t),tlo=i(S),th=n(S,"LI",{});var Tye=s(th);ile=n(Tye,"STRONG",{});var Flt=s(ile);alo=r(Flt,"bert-japanese"),Flt.forEach(t),nlo=r(Tye," \u2014 "),fB=n(Tye,"A",{href:!0});var Tlt=s(fB);slo=r(Tlt,"BertJapaneseTokenizer"),Tlt.forEach(t),llo=r(Tye," (BertJapanese model)"),Tye.forEach(t),ilo=i(S),ah=n(S,"LI",{});var Mye=s(ah);dle=n(Mye,"STRONG",{});var Mlt=s(dle);dlo=r(Mlt,"bertweet"),Mlt.forEach(t),clo=r(Mye," \u2014 "),mB=n(Mye,"A",{href:!0});var Elt=s(mB);flo=r(Elt,"BertweetTokenizer"),Elt.forEach(t),mlo=r(Mye," (BERTweet model)"),Mye.forEach(t),glo=i(S),Vn=n(S,"LI",{});var yk=s(Vn);cle=n(yk,"STRONG",{});var Clt=s(cle);hlo=r(Clt,"big_bird"),Clt.forEach(t),plo=r(yk," \u2014 "),gB=n(yk,"A",{href:!0});var wlt=s(gB);_lo=r(wlt,"BigBirdTokenizer"),wlt.forEach(t),ulo=r(yk," or "),hB=n(yk,"A",{href:!0});var Alt=s(hB);blo=r(Alt,"BigBirdTokenizerFast"),Alt.forEach(t),vlo=r(yk," (BigBird model)"),yk.forEach(t),Flo=i(S),Xn=n(S,"LI",{});var xk=s(Xn);fle=n(xk,"STRONG",{});var Llt=s(fle);Tlo=r(Llt,"bigbird_pegasus"),Llt.forEach(t),Mlo=r(xk," \u2014 "),pB=n(xk,"A",{href:!0});var ylt=s(pB);Elo=r(ylt,"PegasusTokenizer"),ylt.forEach(t),Clo=r(xk," or "),_B=n(xk,"A",{href:!0});var xlt=s(_B);wlo=r(xlt,"PegasusTokenizerFast"),xlt.forEach(t),Alo=r(xk," (BigBird-Pegasus model)"),xk.forEach(t),Llo=i(S),zn=n(S,"LI",{});var $k=s(zn);mle=n($k,"STRONG",{});var $lt=s(mle);ylo=r($lt,"blenderbot"),$lt.forEach(t),xlo=r($k," \u2014 "),uB=n($k,"A",{href:!0});var klt=s(uB);$lo=r(klt,"BlenderbotTokenizer"),klt.forEach(t),klo=r($k," or "),bB=n($k,"A",{href:!0});var Slt=s(bB);Slo=r(Slt,"BlenderbotTokenizerFast"),Slt.forEach(t),Rlo=r($k," (Blenderbot model)"),$k.forEach(t),Plo=i(S),nh=n(S,"LI",{});var Eye=s(nh);gle=n(Eye,"STRONG",{});var Rlt=s(gle);Blo=r(Rlt,"blenderbot-small"),Rlt.forEach(t),Ilo=r(Eye," \u2014 "),vB=n(Eye,"A",{href:!0});var Plt=s(vB);Nlo=r(Plt,"BlenderbotSmallTokenizer"),Plt.forEach(t),qlo=r(Eye," (BlenderbotSmall model)"),Eye.forEach(t),jlo=i(S),sh=n(S,"LI",{});var Cye=s(sh);hle=n(Cye,"STRONG",{});var Blt=s(hle);Dlo=r(Blt,"bloom"),Blt.forEach(t),Glo=r(Cye," \u2014 "),FB=n(Cye,"A",{href:!0});var Ilt=s(FB);Olo=r(Ilt,"BloomTokenizerFast"),Ilt.forEach(t),Vlo=r(Cye," (BLOOM model)"),Cye.forEach(t),Xlo=i(S),lh=n(S,"LI",{});var wye=s(lh);ple=n(wye,"STRONG",{});var Nlt=s(ple);zlo=r(Nlt,"byt5"),Nlt.forEach(t),Qlo=r(wye," \u2014 "),TB=n(wye,"A",{href:!0});var qlt=s(TB);Wlo=r(qlt,"ByT5Tokenizer"),qlt.forEach(t),Hlo=r(wye," (ByT5 model)"),wye.forEach(t),Ulo=i(S),Qn=n(S,"LI",{});var kk=s(Qn);_le=n(kk,"STRONG",{});var jlt=s(_le);Jlo=r(jlt,"camembert"),jlt.forEach(t),Ylo=r(kk," \u2014 "),MB=n(kk,"A",{href:!0});var Dlt=s(MB);Klo=r(Dlt,"CamembertTokenizer"),Dlt.forEach(t),Zlo=r(kk," or "),EB=n(kk,"A",{href:!0});var Glt=s(EB);eio=r(Glt,"CamembertTokenizerFast"),Glt.forEach(t),oio=r(kk," (CamemBERT model)"),kk.forEach(t),rio=i(S),ih=n(S,"LI",{});var Aye=s(ih);ule=n(Aye,"STRONG",{});var Olt=s(ule);tio=r(Olt,"canine"),Olt.forEach(t),aio=r(Aye," \u2014 "),CB=n(Aye,"A",{href:!0});var Vlt=s(CB);nio=r(Vlt,"CanineTokenizer"),Vlt.forEach(t),sio=r(Aye," (CANINE model)"),Aye.forEach(t),lio=i(S),Wn=n(S,"LI",{});var Sk=s(Wn);ble=n(Sk,"STRONG",{});var Xlt=s(ble);iio=r(Xlt,"clip"),Xlt.forEach(t),dio=r(Sk," \u2014 "),wB=n(Sk,"A",{href:!0});var zlt=s(wB);cio=r(zlt,"CLIPTokenizer"),zlt.forEach(t),fio=r(Sk," or "),AB=n(Sk,"A",{href:!0});var Qlt=s(AB);mio=r(Qlt,"CLIPTokenizerFast"),Qlt.forEach(t),gio=r(Sk," (CLIP model)"),Sk.forEach(t),hio=i(S),Hn=n(S,"LI",{});var Rk=s(Hn);vle=n(Rk,"STRONG",{});var Wlt=s(vle);pio=r(Wlt,"codegen"),Wlt.forEach(t),_io=r(Rk," \u2014 "),LB=n(Rk,"A",{href:!0});var Hlt=s(LB);uio=r(Hlt,"CodeGenTokenizer"),Hlt.forEach(t),bio=r(Rk," or "),yB=n(Rk,"A",{href:!0});var Ult=s(yB);vio=r(Ult,"CodeGenTokenizerFast"),Ult.forEach(t),Fio=r(Rk," (CodeGen model)"),Rk.forEach(t),Tio=i(S),Un=n(S,"LI",{});var Pk=s(Un);Fle=n(Pk,"STRONG",{});var Jlt=s(Fle);Mio=r(Jlt,"convbert"),Jlt.forEach(t),Eio=r(Pk," \u2014 "),xB=n(Pk,"A",{href:!0});var Ylt=s(xB);Cio=r(Ylt,"ConvBertTokenizer"),Ylt.forEach(t),wio=r(Pk," or "),$B=n(Pk,"A",{href:!0});var Klt=s($B);Aio=r(Klt,"ConvBertTokenizerFast"),Klt.forEach(t),Lio=r(Pk," (ConvBERT model)"),Pk.forEach(t),yio=i(S),Jn=n(S,"LI",{});var Bk=s(Jn);Tle=n(Bk,"STRONG",{});var Zlt=s(Tle);xio=r(Zlt,"cpm"),Zlt.forEach(t),$io=r(Bk," \u2014 "),kB=n(Bk,"A",{href:!0});var eit=s(kB);kio=r(eit,"CpmTokenizer"),eit.forEach(t),Sio=r(Bk," or "),SB=n(Bk,"A",{href:!0});var oit=s(SB);Rio=r(oit,"CpmTokenizerFast"),oit.forEach(t),Pio=r(Bk," (CPM model)"),Bk.forEach(t),Bio=i(S),dh=n(S,"LI",{});var Lye=s(dh);Mle=n(Lye,"STRONG",{});var rit=s(Mle);Iio=r(rit,"ctrl"),rit.forEach(t),Nio=r(Lye," \u2014 "),RB=n(Lye,"A",{href:!0});var tit=s(RB);qio=r(tit,"CTRLTokenizer"),tit.forEach(t),jio=r(Lye," (CTRL model)"),Lye.forEach(t),Dio=i(S),Yn=n(S,"LI",{});var Ik=s(Yn);Ele=n(Ik,"STRONG",{});var ait=s(Ele);Gio=r(ait,"data2vec-text"),ait.forEach(t),Oio=r(Ik," \u2014 "),PB=n(Ik,"A",{href:!0});var nit=s(PB);Vio=r(nit,"RobertaTokenizer"),nit.forEach(t),Xio=r(Ik," or "),BB=n(Ik,"A",{href:!0});var sit=s(BB);zio=r(sit,"RobertaTokenizerFast"),sit.forEach(t),Qio=r(Ik," (Data2VecText model)"),Ik.forEach(t),Wio=i(S),Kn=n(S,"LI",{});var Nk=s(Kn);Cle=n(Nk,"STRONG",{});var lit=s(Cle);Hio=r(lit,"deberta"),lit.forEach(t),Uio=r(Nk," \u2014 "),IB=n(Nk,"A",{href:!0});var iit=s(IB);Jio=r(iit,"DebertaTokenizer"),iit.forEach(t),Yio=r(Nk," or "),NB=n(Nk,"A",{href:!0});var dit=s(NB);Kio=r(dit,"DebertaTokenizerFast"),dit.forEach(t),Zio=r(Nk," (DeBERTa model)"),Nk.forEach(t),edo=i(S),Zn=n(S,"LI",{});var qk=s(Zn);wle=n(qk,"STRONG",{});var cit=s(wle);odo=r(cit,"deberta-v2"),cit.forEach(t),rdo=r(qk," \u2014 "),qB=n(qk,"A",{href:!0});var fit=s(qB);tdo=r(fit,"DebertaV2Tokenizer"),fit.forEach(t),ado=r(qk," or "),jB=n(qk,"A",{href:!0});var mit=s(jB);ndo=r(mit,"DebertaV2TokenizerFast"),mit.forEach(t),sdo=r(qk," (DeBERTa-v2 model)"),qk.forEach(t),ldo=i(S),es=n(S,"LI",{});var jk=s(es);Ale=n(jk,"STRONG",{});var git=s(Ale);ido=r(git,"distilbert"),git.forEach(t),ddo=r(jk," \u2014 "),DB=n(jk,"A",{href:!0});var hit=s(DB);cdo=r(hit,"DistilBertTokenizer"),hit.forEach(t),fdo=r(jk," or "),GB=n(jk,"A",{href:!0});var pit=s(GB);mdo=r(pit,"DistilBertTokenizerFast"),pit.forEach(t),gdo=r(jk," (DistilBERT model)"),jk.forEach(t),hdo=i(S),os=n(S,"LI",{});var Dk=s(os);Lle=n(Dk,"STRONG",{});var _it=s(Lle);pdo=r(_it,"dpr"),_it.forEach(t),_do=r(Dk," \u2014 "),OB=n(Dk,"A",{href:!0});var uit=s(OB);udo=r(uit,"DPRQuestionEncoderTokenizer"),uit.forEach(t),bdo=r(Dk," or "),VB=n(Dk,"A",{href:!0});var bit=s(VB);vdo=r(bit,"DPRQuestionEncoderTokenizerFast"),bit.forEach(t),Fdo=r(Dk," (DPR model)"),Dk.forEach(t),Tdo=i(S),rs=n(S,"LI",{});var Gk=s(rs);yle=n(Gk,"STRONG",{});var vit=s(yle);Mdo=r(vit,"electra"),vit.forEach(t),Edo=r(Gk," \u2014 "),XB=n(Gk,"A",{href:!0});var Fit=s(XB);Cdo=r(Fit,"ElectraTokenizer"),Fit.forEach(t),wdo=r(Gk," or "),zB=n(Gk,"A",{href:!0});var Tit=s(zB);Ado=r(Tit,"ElectraTokenizerFast"),Tit.forEach(t),Ldo=r(Gk," (ELECTRA model)"),Gk.forEach(t),ydo=i(S),ch=n(S,"LI",{});var yye=s(ch);xle=n(yye,"STRONG",{});var Mit=s(xle);xdo=r(Mit,"flaubert"),Mit.forEach(t),$do=r(yye," \u2014 "),QB=n(yye,"A",{href:!0});var Eit=s(QB);kdo=r(Eit,"FlaubertTokenizer"),Eit.forEach(t),Sdo=r(yye," (FlauBERT model)"),yye.forEach(t),Rdo=i(S),ts=n(S,"LI",{});var Ok=s(ts);$le=n(Ok,"STRONG",{});var Cit=s($le);Pdo=r(Cit,"fnet"),Cit.forEach(t),Bdo=r(Ok," \u2014 "),WB=n(Ok,"A",{href:!0});var wit=s(WB);Ido=r(wit,"FNetTokenizer"),wit.forEach(t),Ndo=r(Ok," or "),HB=n(Ok,"A",{href:!0});var Ait=s(HB);qdo=r(Ait,"FNetTokenizerFast"),Ait.forEach(t),jdo=r(Ok," (FNet model)"),Ok.forEach(t),Ddo=i(S),fh=n(S,"LI",{});var xye=s(fh);kle=n(xye,"STRONG",{});var Lit=s(kle);Gdo=r(Lit,"fsmt"),Lit.forEach(t),Odo=r(xye," \u2014 "),UB=n(xye,"A",{href:!0});var yit=s(UB);Vdo=r(yit,"FSMTTokenizer"),yit.forEach(t),Xdo=r(xye," (FairSeq Machine-Translation model)"),xye.forEach(t),zdo=i(S),as=n(S,"LI",{});var Vk=s(as);Sle=n(Vk,"STRONG",{});var xit=s(Sle);Qdo=r(xit,"funnel"),xit.forEach(t),Wdo=r(Vk," \u2014 "),JB=n(Vk,"A",{href:!0});var $it=s(JB);Hdo=r($it,"FunnelTokenizer"),$it.forEach(t),Udo=r(Vk," or "),YB=n(Vk,"A",{href:!0});var kit=s(YB);Jdo=r(kit,"FunnelTokenizerFast"),kit.forEach(t),Ydo=r(Vk," (Funnel Transformer model)"),Vk.forEach(t),Kdo=i(S),ns=n(S,"LI",{});var Xk=s(ns);Rle=n(Xk,"STRONG",{});var Sit=s(Rle);Zdo=r(Sit,"gpt2"),Sit.forEach(t),eco=r(Xk," \u2014 "),KB=n(Xk,"A",{href:!0});var Rit=s(KB);oco=r(Rit,"GPT2Tokenizer"),Rit.forEach(t),rco=r(Xk," or "),ZB=n(Xk,"A",{href:!0});var Pit=s(ZB);tco=r(Pit,"GPT2TokenizerFast"),Pit.forEach(t),aco=r(Xk," (OpenAI GPT-2 model)"),Xk.forEach(t),nco=i(S),ss=n(S,"LI",{});var zk=s(ss);Ple=n(zk,"STRONG",{});var Bit=s(Ple);sco=r(Bit,"gpt_neo"),Bit.forEach(t),lco=r(zk," \u2014 "),eI=n(zk,"A",{href:!0});var Iit=s(eI);ico=r(Iit,"GPT2Tokenizer"),Iit.forEach(t),dco=r(zk," or "),oI=n(zk,"A",{href:!0});var Nit=s(oI);cco=r(Nit,"GPT2TokenizerFast"),Nit.forEach(t),fco=r(zk," (GPT Neo model)"),zk.forEach(t),mco=i(S),mh=n(S,"LI",{});var $ye=s(mh);Ble=n($ye,"STRONG",{});var qit=s(Ble);gco=r(qit,"gpt_neox"),qit.forEach(t),hco=r($ye," \u2014 "),rI=n($ye,"A",{href:!0});var jit=s(rI);pco=r(jit,"GPTNeoXTokenizerFast"),jit.forEach(t),_co=r($ye," (GPT NeoX model)"),$ye.forEach(t),uco=i(S),ls=n(S,"LI",{});var Qk=s(ls);Ile=n(Qk,"STRONG",{});var Dit=s(Ile);bco=r(Dit,"gptj"),Dit.forEach(t),vco=r(Qk," \u2014 "),tI=n(Qk,"A",{href:!0});var Git=s(tI);Fco=r(Git,"GPT2Tokenizer"),Git.forEach(t),Tco=r(Qk," or "),aI=n(Qk,"A",{href:!0});var Oit=s(aI);Mco=r(Oit,"GPT2TokenizerFast"),Oit.forEach(t),Eco=r(Qk," (GPT-J model)"),Qk.forEach(t),Cco=i(S),is=n(S,"LI",{});var Wk=s(is);Nle=n(Wk,"STRONG",{});var Vit=s(Nle);wco=r(Vit,"groupvit"),Vit.forEach(t),Aco=r(Wk," \u2014 "),nI=n(Wk,"A",{href:!0});var Xit=s(nI);Lco=r(Xit,"CLIPTokenizer"),Xit.forEach(t),yco=r(Wk," or "),sI=n(Wk,"A",{href:!0});var zit=s(sI);xco=r(zit,"CLIPTokenizerFast"),zit.forEach(t),$co=r(Wk," (GroupViT model)"),Wk.forEach(t),kco=i(S),ds=n(S,"LI",{});var Hk=s(ds);qle=n(Hk,"STRONG",{});var Qit=s(qle);Sco=r(Qit,"herbert"),Qit.forEach(t),Rco=r(Hk," \u2014 "),lI=n(Hk,"A",{href:!0});var Wit=s(lI);Pco=r(Wit,"HerbertTokenizer"),Wit.forEach(t),Bco=r(Hk," or "),iI=n(Hk,"A",{href:!0});var Hit=s(iI);Ico=r(Hit,"HerbertTokenizerFast"),Hit.forEach(t),Nco=r(Hk," (HerBERT model)"),Hk.forEach(t),qco=i(S),gh=n(S,"LI",{});var kye=s(gh);jle=n(kye,"STRONG",{});var Uit=s(jle);jco=r(Uit,"hubert"),Uit.forEach(t),Dco=r(kye," \u2014 "),dI=n(kye,"A",{href:!0});var Jit=s(dI);Gco=r(Jit,"Wav2Vec2CTCTokenizer"),Jit.forEach(t),Oco=r(kye," (Hubert model)"),kye.forEach(t),Vco=i(S),cs=n(S,"LI",{});var Uk=s(cs);Dle=n(Uk,"STRONG",{});var Yit=s(Dle);Xco=r(Yit,"ibert"),Yit.forEach(t),zco=r(Uk," \u2014 "),cI=n(Uk,"A",{href:!0});var Kit=s(cI);Qco=r(Kit,"RobertaTokenizer"),Kit.forEach(t),Wco=r(Uk," or "),fI=n(Uk,"A",{href:!0});var Zit=s(fI);Hco=r(Zit,"RobertaTokenizerFast"),Zit.forEach(t),Uco=r(Uk," (I-BERT model)"),Uk.forEach(t),Jco=i(S),fs=n(S,"LI",{});var Jk=s(fs);Gle=n(Jk,"STRONG",{});var edt=s(Gle);Yco=r(edt,"layoutlm"),edt.forEach(t),Kco=r(Jk," \u2014 "),mI=n(Jk,"A",{href:!0});var odt=s(mI);Zco=r(odt,"LayoutLMTokenizer"),odt.forEach(t),efo=r(Jk," or "),gI=n(Jk,"A",{href:!0});var rdt=s(gI);ofo=r(rdt,"LayoutLMTokenizerFast"),rdt.forEach(t),rfo=r(Jk," (LayoutLM model)"),Jk.forEach(t),tfo=i(S),ms=n(S,"LI",{});var Yk=s(ms);Ole=n(Yk,"STRONG",{});var tdt=s(Ole);afo=r(tdt,"layoutlmv2"),tdt.forEach(t),nfo=r(Yk," \u2014 "),hI=n(Yk,"A",{href:!0});var adt=s(hI);sfo=r(adt,"LayoutLMv2Tokenizer"),adt.forEach(t),lfo=r(Yk," or "),pI=n(Yk,"A",{href:!0});var ndt=s(pI);ifo=r(ndt,"LayoutLMv2TokenizerFast"),ndt.forEach(t),dfo=r(Yk," (LayoutLMv2 model)"),Yk.forEach(t),cfo=i(S),gs=n(S,"LI",{});var Kk=s(gs);Vle=n(Kk,"STRONG",{});var sdt=s(Vle);ffo=r(sdt,"layoutlmv3"),sdt.forEach(t),mfo=r(Kk," \u2014 "),_I=n(Kk,"A",{href:!0});var ldt=s(_I);gfo=r(ldt,"LayoutLMv3Tokenizer"),ldt.forEach(t),hfo=r(Kk," or "),uI=n(Kk,"A",{href:!0});var idt=s(uI);pfo=r(idt,"LayoutLMv3TokenizerFast"),idt.forEach(t),_fo=r(Kk," (LayoutLMv3 model)"),Kk.forEach(t),ufo=i(S),hs=n(S,"LI",{});var Zk=s(hs);Xle=n(Zk,"STRONG",{});var ddt=s(Xle);bfo=r(ddt,"layoutxlm"),ddt.forEach(t),vfo=r(Zk," \u2014 "),bI=n(Zk,"A",{href:!0});var cdt=s(bI);Ffo=r(cdt,"LayoutXLMTokenizer"),cdt.forEach(t),Tfo=r(Zk," or "),vI=n(Zk,"A",{href:!0});var fdt=s(vI);Mfo=r(fdt,"LayoutXLMTokenizerFast"),fdt.forEach(t),Efo=r(Zk," (LayoutXLM model)"),Zk.forEach(t),Cfo=i(S),ps=n(S,"LI",{});var eS=s(ps);zle=n(eS,"STRONG",{});var mdt=s(zle);wfo=r(mdt,"led"),mdt.forEach(t),Afo=r(eS," \u2014 "),FI=n(eS,"A",{href:!0});var gdt=s(FI);Lfo=r(gdt,"LEDTokenizer"),gdt.forEach(t),yfo=r(eS," or "),TI=n(eS,"A",{href:!0});var hdt=s(TI);xfo=r(hdt,"LEDTokenizerFast"),hdt.forEach(t),$fo=r(eS," (LED model)"),eS.forEach(t),kfo=i(S),_s=n(S,"LI",{});var oS=s(_s);Qle=n(oS,"STRONG",{});var pdt=s(Qle);Sfo=r(pdt,"longformer"),pdt.forEach(t),Rfo=r(oS," \u2014 "),MI=n(oS,"A",{href:!0});var _dt=s(MI);Pfo=r(_dt,"LongformerTokenizer"),_dt.forEach(t),Bfo=r(oS," or "),EI=n(oS,"A",{href:!0});var udt=s(EI);Ifo=r(udt,"LongformerTokenizerFast"),udt.forEach(t),Nfo=r(oS," (Longformer model)"),oS.forEach(t),qfo=i(S),us=n(S,"LI",{});var rS=s(us);Wle=n(rS,"STRONG",{});var bdt=s(Wle);jfo=r(bdt,"longt5"),bdt.forEach(t),Dfo=r(rS," \u2014 "),CI=n(rS,"A",{href:!0});var vdt=s(CI);Gfo=r(vdt,"T5Tokenizer"),vdt.forEach(t),Ofo=r(rS," or "),wI=n(rS,"A",{href:!0});var Fdt=s(wI);Vfo=r(Fdt,"T5TokenizerFast"),Fdt.forEach(t),Xfo=r(rS," (LongT5 model)"),rS.forEach(t),zfo=i(S),hh=n(S,"LI",{});var Sye=s(hh);Hle=n(Sye,"STRONG",{});var Tdt=s(Hle);Qfo=r(Tdt,"luke"),Tdt.forEach(t),Wfo=r(Sye," \u2014 "),AI=n(Sye,"A",{href:!0});var Mdt=s(AI);Hfo=r(Mdt,"LukeTokenizer"),Mdt.forEach(t),Ufo=r(Sye," (LUKE model)"),Sye.forEach(t),Jfo=i(S),bs=n(S,"LI",{});var tS=s(bs);Ule=n(tS,"STRONG",{});var Edt=s(Ule);Yfo=r(Edt,"lxmert"),Edt.forEach(t),Kfo=r(tS," \u2014 "),LI=n(tS,"A",{href:!0});var Cdt=s(LI);Zfo=r(Cdt,"LxmertTokenizer"),Cdt.forEach(t),emo=r(tS," or "),yI=n(tS,"A",{href:!0});var wdt=s(yI);omo=r(wdt,"LxmertTokenizerFast"),wdt.forEach(t),rmo=r(tS," (LXMERT model)"),tS.forEach(t),tmo=i(S),ph=n(S,"LI",{});var Rye=s(ph);Jle=n(Rye,"STRONG",{});var Adt=s(Jle);amo=r(Adt,"m2m_100"),Adt.forEach(t),nmo=r(Rye," \u2014 "),xI=n(Rye,"A",{href:!0});var Ldt=s(xI);smo=r(Ldt,"M2M100Tokenizer"),Ldt.forEach(t),lmo=r(Rye," (M2M100 model)"),Rye.forEach(t),imo=i(S),_h=n(S,"LI",{});var Pye=s(_h);Yle=n(Pye,"STRONG",{});var ydt=s(Yle);dmo=r(ydt,"marian"),ydt.forEach(t),cmo=r(Pye," \u2014 "),$I=n(Pye,"A",{href:!0});var xdt=s($I);fmo=r(xdt,"MarianTokenizer"),xdt.forEach(t),mmo=r(Pye," (Marian model)"),Pye.forEach(t),gmo=i(S),vs=n(S,"LI",{});var aS=s(vs);Kle=n(aS,"STRONG",{});var $dt=s(Kle);hmo=r($dt,"mbart"),$dt.forEach(t),pmo=r(aS," \u2014 "),kI=n(aS,"A",{href:!0});var kdt=s(kI);_mo=r(kdt,"MBartTokenizer"),kdt.forEach(t),umo=r(aS," or "),SI=n(aS,"A",{href:!0});var Sdt=s(SI);bmo=r(Sdt,"MBartTokenizerFast"),Sdt.forEach(t),vmo=r(aS," (mBART model)"),aS.forEach(t),Fmo=i(S),Fs=n(S,"LI",{});var nS=s(Fs);Zle=n(nS,"STRONG",{});var Rdt=s(Zle);Tmo=r(Rdt,"mbart50"),Rdt.forEach(t),Mmo=r(nS," \u2014 "),RI=n(nS,"A",{href:!0});var Pdt=s(RI);Emo=r(Pdt,"MBart50Tokenizer"),Pdt.forEach(t),Cmo=r(nS," or "),PI=n(nS,"A",{href:!0});var Bdt=s(PI);wmo=r(Bdt,"MBart50TokenizerFast"),Bdt.forEach(t),Amo=r(nS," (mBART-50 model)"),nS.forEach(t),Lmo=i(S),Ts=n(S,"LI",{});var sS=s(Ts);eie=n(sS,"STRONG",{});var Idt=s(eie);ymo=r(Idt,"megatron-bert"),Idt.forEach(t),xmo=r(sS," \u2014 "),BI=n(sS,"A",{href:!0});var Ndt=s(BI);$mo=r(Ndt,"BertTokenizer"),Ndt.forEach(t),kmo=r(sS," or "),II=n(sS,"A",{href:!0});var qdt=s(II);Smo=r(qdt,"BertTokenizerFast"),qdt.forEach(t),Rmo=r(sS," (Megatron-BERT model)"),sS.forEach(t),Pmo=i(S),uh=n(S,"LI",{});var Bye=s(uh);oie=n(Bye,"STRONG",{});var jdt=s(oie);Bmo=r(jdt,"mluke"),jdt.forEach(t),Imo=r(Bye," \u2014 "),NI=n(Bye,"A",{href:!0});var Ddt=s(NI);Nmo=r(Ddt,"MLukeTokenizer"),Ddt.forEach(t),qmo=r(Bye," (mLUKE model)"),Bye.forEach(t),jmo=i(S),Ms=n(S,"LI",{});var lS=s(Ms);rie=n(lS,"STRONG",{});var Gdt=s(rie);Dmo=r(Gdt,"mobilebert"),Gdt.forEach(t),Gmo=r(lS," \u2014 "),qI=n(lS,"A",{href:!0});var Odt=s(qI);Omo=r(Odt,"MobileBertTokenizer"),Odt.forEach(t),Vmo=r(lS," or "),jI=n(lS,"A",{href:!0});var Vdt=s(jI);Xmo=r(Vdt,"MobileBertTokenizerFast"),Vdt.forEach(t),zmo=r(lS," (MobileBERT model)"),lS.forEach(t),Qmo=i(S),Es=n(S,"LI",{});var iS=s(Es);tie=n(iS,"STRONG",{});var Xdt=s(tie);Wmo=r(Xdt,"mpnet"),Xdt.forEach(t),Hmo=r(iS," \u2014 "),DI=n(iS,"A",{href:!0});var zdt=s(DI);Umo=r(zdt,"MPNetTokenizer"),zdt.forEach(t),Jmo=r(iS," or "),GI=n(iS,"A",{href:!0});var Qdt=s(GI);Ymo=r(Qdt,"MPNetTokenizerFast"),Qdt.forEach(t),Kmo=r(iS," (MPNet model)"),iS.forEach(t),Zmo=i(S),Cs=n(S,"LI",{});var dS=s(Cs);aie=n(dS,"STRONG",{});var Wdt=s(aie);ego=r(Wdt,"mt5"),Wdt.forEach(t),ogo=r(dS," \u2014 "),OI=n(dS,"A",{href:!0});var Hdt=s(OI);rgo=r(Hdt,"MT5Tokenizer"),Hdt.forEach(t),tgo=r(dS," or "),VI=n(dS,"A",{href:!0});var Udt=s(VI);ago=r(Udt,"MT5TokenizerFast"),Udt.forEach(t),ngo=r(dS," (MT5 model)"),dS.forEach(t),sgo=i(S),ws=n(S,"LI",{});var cS=s(ws);nie=n(cS,"STRONG",{});var Jdt=s(nie);lgo=r(Jdt,"mvp"),Jdt.forEach(t),igo=r(cS," \u2014 "),XI=n(cS,"A",{href:!0});var Ydt=s(XI);dgo=r(Ydt,"MvpTokenizer"),Ydt.forEach(t),cgo=r(cS," or "),zI=n(cS,"A",{href:!0});var Kdt=s(zI);fgo=r(Kdt,"MvpTokenizerFast"),Kdt.forEach(t),mgo=r(cS," (MVP model)"),cS.forEach(t),ggo=i(S),As=n(S,"LI",{});var fS=s(As);sie=n(fS,"STRONG",{});var Zdt=s(sie);hgo=r(Zdt,"nezha"),Zdt.forEach(t),pgo=r(fS," \u2014 "),QI=n(fS,"A",{href:!0});var ect=s(QI);_go=r(ect,"BertTokenizer"),ect.forEach(t),ugo=r(fS," or "),WI=n(fS,"A",{href:!0});var oct=s(WI);bgo=r(oct,"BertTokenizerFast"),oct.forEach(t),vgo=r(fS," (Nezha model)"),fS.forEach(t),Fgo=i(S),Ls=n(S,"LI",{});var mS=s(Ls);lie=n(mS,"STRONG",{});var rct=s(lie);Tgo=r(rct,"nystromformer"),rct.forEach(t),Mgo=r(mS," \u2014 "),HI=n(mS,"A",{href:!0});var tct=s(HI);Ego=r(tct,"AlbertTokenizer"),tct.forEach(t),Cgo=r(mS," or "),UI=n(mS,"A",{href:!0});var act=s(UI);wgo=r(act,"AlbertTokenizerFast"),act.forEach(t),Ago=r(mS," (Nystr\xF6mformer model)"),mS.forEach(t),Lgo=i(S),ys=n(S,"LI",{});var gS=s(ys);iie=n(gS,"STRONG",{});var nct=s(iie);ygo=r(nct,"openai-gpt"),nct.forEach(t),xgo=r(gS," \u2014 "),JI=n(gS,"A",{href:!0});var sct=s(JI);$go=r(sct,"OpenAIGPTTokenizer"),sct.forEach(t),kgo=r(gS," or "),YI=n(gS,"A",{href:!0});var lct=s(YI);Sgo=r(lct,"OpenAIGPTTokenizerFast"),lct.forEach(t),Rgo=r(gS," (OpenAI GPT model)"),gS.forEach(t),Pgo=i(S),bh=n(S,"LI",{});var Iye=s(bh);die=n(Iye,"STRONG",{});var ict=s(die);Bgo=r(ict,"opt"),ict.forEach(t),Igo=r(Iye," \u2014 "),KI=n(Iye,"A",{href:!0});var dct=s(KI);Ngo=r(dct,"GPT2Tokenizer"),dct.forEach(t),qgo=r(Iye," (OPT model)"),Iye.forEach(t),jgo=i(S),xs=n(S,"LI",{});var hS=s(xs);cie=n(hS,"STRONG",{});var cct=s(cie);Dgo=r(cct,"pegasus"),cct.forEach(t),Ggo=r(hS," \u2014 "),ZI=n(hS,"A",{href:!0});var fct=s(ZI);Ogo=r(fct,"PegasusTokenizer"),fct.forEach(t),Vgo=r(hS," or "),eN=n(hS,"A",{href:!0});var mct=s(eN);Xgo=r(mct,"PegasusTokenizerFast"),mct.forEach(t),zgo=r(hS," (Pegasus model)"),hS.forEach(t),Qgo=i(S),vh=n(S,"LI",{});var Nye=s(vh);fie=n(Nye,"STRONG",{});var gct=s(fie);Wgo=r(gct,"perceiver"),gct.forEach(t),Hgo=r(Nye," \u2014 "),oN=n(Nye,"A",{href:!0});var hct=s(oN);Ugo=r(hct,"PerceiverTokenizer"),hct.forEach(t),Jgo=r(Nye," (Perceiver model)"),Nye.forEach(t),Ygo=i(S),Fh=n(S,"LI",{});var qye=s(Fh);mie=n(qye,"STRONG",{});var pct=s(mie);Kgo=r(pct,"phobert"),pct.forEach(t),Zgo=r(qye," \u2014 "),rN=n(qye,"A",{href:!0});var _ct=s(rN);eho=r(_ct,"PhobertTokenizer"),_ct.forEach(t),oho=r(qye," (PhoBERT model)"),qye.forEach(t),rho=i(S),Th=n(S,"LI",{});var jye=s(Th);gie=n(jye,"STRONG",{});var uct=s(gie);tho=r(uct,"plbart"),uct.forEach(t),aho=r(jye," \u2014 "),tN=n(jye,"A",{href:!0});var bct=s(tN);nho=r(bct,"PLBartTokenizer"),bct.forEach(t),sho=r(jye," (PLBart model)"),jye.forEach(t),lho=i(S),Mh=n(S,"LI",{});var Dye=s(Mh);hie=n(Dye,"STRONG",{});var vct=s(hie);iho=r(vct,"prophetnet"),vct.forEach(t),dho=r(Dye," \u2014 "),aN=n(Dye,"A",{href:!0});var Fct=s(aN);cho=r(Fct,"ProphetNetTokenizer"),Fct.forEach(t),fho=r(Dye," (ProphetNet model)"),Dye.forEach(t),mho=i(S),$s=n(S,"LI",{});var pS=s($s);pie=n(pS,"STRONG",{});var Tct=s(pie);gho=r(Tct,"qdqbert"),Tct.forEach(t),hho=r(pS," \u2014 "),nN=n(pS,"A",{href:!0});var Mct=s(nN);pho=r(Mct,"BertTokenizer"),Mct.forEach(t),_ho=r(pS," or "),sN=n(pS,"A",{href:!0});var Ect=s(sN);uho=r(Ect,"BertTokenizerFast"),Ect.forEach(t),bho=r(pS," (QDQBert model)"),pS.forEach(t),vho=i(S),Eh=n(S,"LI",{});var Gye=s(Eh);_ie=n(Gye,"STRONG",{});var Cct=s(_ie);Fho=r(Cct,"rag"),Cct.forEach(t),Tho=r(Gye," \u2014 "),lN=n(Gye,"A",{href:!0});var wct=s(lN);Mho=r(wct,"RagTokenizer"),wct.forEach(t),Eho=r(Gye," (RAG model)"),Gye.forEach(t),Cho=i(S),ks=n(S,"LI",{});var _S=s(ks);uie=n(_S,"STRONG",{});var Act=s(uie);who=r(Act,"realm"),Act.forEach(t),Aho=r(_S," \u2014 "),iN=n(_S,"A",{href:!0});var Lct=s(iN);Lho=r(Lct,"RealmTokenizer"),Lct.forEach(t),yho=r(_S," or "),dN=n(_S,"A",{href:!0});var yct=s(dN);xho=r(yct,"RealmTokenizerFast"),yct.forEach(t),$ho=r(_S," (REALM model)"),_S.forEach(t),kho=i(S),Ss=n(S,"LI",{});var uS=s(Ss);bie=n(uS,"STRONG",{});var xct=s(bie);Sho=r(xct,"reformer"),xct.forEach(t),Rho=r(uS," \u2014 "),cN=n(uS,"A",{href:!0});var $ct=s(cN);Pho=r($ct,"ReformerTokenizer"),$ct.forEach(t),Bho=r(uS," or "),fN=n(uS,"A",{href:!0});var kct=s(fN);Iho=r(kct,"ReformerTokenizerFast"),kct.forEach(t),Nho=r(uS," (Reformer model)"),uS.forEach(t),qho=i(S),Rs=n(S,"LI",{});var bS=s(Rs);vie=n(bS,"STRONG",{});var Sct=s(vie);jho=r(Sct,"rembert"),Sct.forEach(t),Dho=r(bS," \u2014 "),mN=n(bS,"A",{href:!0});var Rct=s(mN);Gho=r(Rct,"RemBertTokenizer"),Rct.forEach(t),Oho=r(bS," or "),gN=n(bS,"A",{href:!0});var Pct=s(gN);Vho=r(Pct,"RemBertTokenizerFast"),Pct.forEach(t),Xho=r(bS," (RemBERT model)"),bS.forEach(t),zho=i(S),Ps=n(S,"LI",{});var vS=s(Ps);Fie=n(vS,"STRONG",{});var Bct=s(Fie);Qho=r(Bct,"retribert"),Bct.forEach(t),Who=r(vS," \u2014 "),hN=n(vS,"A",{href:!0});var Ict=s(hN);Hho=r(Ict,"RetriBertTokenizer"),Ict.forEach(t),Uho=r(vS," or "),pN=n(vS,"A",{href:!0});var Nct=s(pN);Jho=r(Nct,"RetriBertTokenizerFast"),Nct.forEach(t),Yho=r(vS," (RetriBERT model)"),vS.forEach(t),Kho=i(S),Bs=n(S,"LI",{});var FS=s(Bs);Tie=n(FS,"STRONG",{});var qct=s(Tie);Zho=r(qct,"roberta"),qct.forEach(t),epo=r(FS," \u2014 "),_N=n(FS,"A",{href:!0});var jct=s(_N);opo=r(jct,"RobertaTokenizer"),jct.forEach(t),rpo=r(FS," or "),uN=n(FS,"A",{href:!0});var Dct=s(uN);tpo=r(Dct,"RobertaTokenizerFast"),Dct.forEach(t),apo=r(FS," (RoBERTa model)"),FS.forEach(t),npo=i(S),Is=n(S,"LI",{});var TS=s(Is);Mie=n(TS,"STRONG",{});var Gct=s(Mie);spo=r(Gct,"roformer"),Gct.forEach(t),lpo=r(TS," \u2014 "),bN=n(TS,"A",{href:!0});var Oct=s(bN);ipo=r(Oct,"RoFormerTokenizer"),Oct.forEach(t),dpo=r(TS," or "),vN=n(TS,"A",{href:!0});var Vct=s(vN);cpo=r(Vct,"RoFormerTokenizerFast"),Vct.forEach(t),fpo=r(TS," (RoFormer model)"),TS.forEach(t),mpo=i(S),Ch=n(S,"LI",{});var Oye=s(Ch);Eie=n(Oye,"STRONG",{});var Xct=s(Eie);gpo=r(Xct,"speech_to_text"),Xct.forEach(t),hpo=r(Oye," \u2014 "),FN=n(Oye,"A",{href:!0});var zct=s(FN);ppo=r(zct,"Speech2TextTokenizer"),zct.forEach(t),_po=r(Oye," (Speech2Text model)"),Oye.forEach(t),upo=i(S),wh=n(S,"LI",{});var Vye=s(wh);Cie=n(Vye,"STRONG",{});var Qct=s(Cie);bpo=r(Qct,"speech_to_text_2"),Qct.forEach(t),vpo=r(Vye," \u2014 "),TN=n(Vye,"A",{href:!0});var Wct=s(TN);Fpo=r(Wct,"Speech2Text2Tokenizer"),Wct.forEach(t),Tpo=r(Vye," (Speech2Text2 model)"),Vye.forEach(t),Mpo=i(S),Ns=n(S,"LI",{});var MS=s(Ns);wie=n(MS,"STRONG",{});var Hct=s(wie);Epo=r(Hct,"splinter"),Hct.forEach(t),Cpo=r(MS," \u2014 "),MN=n(MS,"A",{href:!0});var Uct=s(MN);wpo=r(Uct,"SplinterTokenizer"),Uct.forEach(t),Apo=r(MS," or "),EN=n(MS,"A",{href:!0});var Jct=s(EN);Lpo=r(Jct,"SplinterTokenizerFast"),Jct.forEach(t),ypo=r(MS," (Splinter model)"),MS.forEach(t),xpo=i(S),qs=n(S,"LI",{});var ES=s(qs);Aie=n(ES,"STRONG",{});var Yct=s(Aie);$po=r(Yct,"squeezebert"),Yct.forEach(t),kpo=r(ES," \u2014 "),CN=n(ES,"A",{href:!0});var Kct=s(CN);Spo=r(Kct,"SqueezeBertTokenizer"),Kct.forEach(t),Rpo=r(ES," or "),wN=n(ES,"A",{href:!0});var Zct=s(wN);Ppo=r(Zct,"SqueezeBertTokenizerFast"),Zct.forEach(t),Bpo=r(ES," (SqueezeBERT model)"),ES.forEach(t),Ipo=i(S),js=n(S,"LI",{});var CS=s(js);Lie=n(CS,"STRONG",{});var eft=s(Lie);Npo=r(eft,"t5"),eft.forEach(t),qpo=r(CS," \u2014 "),AN=n(CS,"A",{href:!0});var oft=s(AN);jpo=r(oft,"T5Tokenizer"),oft.forEach(t),Dpo=r(CS," or "),LN=n(CS,"A",{href:!0});var rft=s(LN);Gpo=r(rft,"T5TokenizerFast"),rft.forEach(t),Opo=r(CS," (T5 model)"),CS.forEach(t),Vpo=i(S),Ah=n(S,"LI",{});var Xye=s(Ah);yie=n(Xye,"STRONG",{});var tft=s(yie);Xpo=r(tft,"tapas"),tft.forEach(t),zpo=r(Xye," \u2014 "),yN=n(Xye,"A",{href:!0});var aft=s(yN);Qpo=r(aft,"TapasTokenizer"),aft.forEach(t),Wpo=r(Xye," (TAPAS model)"),Xye.forEach(t),Hpo=i(S),Lh=n(S,"LI",{});var zye=s(Lh);xie=n(zye,"STRONG",{});var nft=s(xie);Upo=r(nft,"tapex"),nft.forEach(t),Jpo=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var sft=s(xN);Ypo=r(sft,"TapexTokenizer"),sft.forEach(t),Kpo=r(zye," (TAPEX model)"),zye.forEach(t),Zpo=i(S),yh=n(S,"LI",{});var Qye=s(yh);$ie=n(Qye,"STRONG",{});var lft=s($ie);e_o=r(lft,"transfo-xl"),lft.forEach(t),o_o=r(Qye," \u2014 "),$N=n(Qye,"A",{href:!0});var ift=s($N);r_o=r(ift,"TransfoXLTokenizer"),ift.forEach(t),t_o=r(Qye," (Transformer-XL model)"),Qye.forEach(t),a_o=i(S),Ds=n(S,"LI",{});var wS=s(Ds);kie=n(wS,"STRONG",{});var dft=s(kie);n_o=r(dft,"vilt"),dft.forEach(t),s_o=r(wS," \u2014 "),kN=n(wS,"A",{href:!0});var cft=s(kN);l_o=r(cft,"BertTokenizer"),cft.forEach(t),i_o=r(wS," or "),SN=n(wS,"A",{href:!0});var fft=s(SN);d_o=r(fft,"BertTokenizerFast"),fft.forEach(t),c_o=r(wS," (ViLT model)"),wS.forEach(t),f_o=i(S),Gs=n(S,"LI",{});var AS=s(Gs);Sie=n(AS,"STRONG",{});var mft=s(Sie);m_o=r(mft,"visual_bert"),mft.forEach(t),g_o=r(AS," \u2014 "),RN=n(AS,"A",{href:!0});var gft=s(RN);h_o=r(gft,"BertTokenizer"),gft.forEach(t),p_o=r(AS," or "),PN=n(AS,"A",{href:!0});var hft=s(PN);__o=r(hft,"BertTokenizerFast"),hft.forEach(t),u_o=r(AS," (VisualBERT model)"),AS.forEach(t),b_o=i(S),xh=n(S,"LI",{});var Wye=s(xh);Rie=n(Wye,"STRONG",{});var pft=s(Rie);v_o=r(pft,"wav2vec2"),pft.forEach(t),F_o=r(Wye," \u2014 "),BN=n(Wye,"A",{href:!0});var _ft=s(BN);T_o=r(_ft,"Wav2Vec2CTCTokenizer"),_ft.forEach(t),M_o=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),E_o=i(S),$h=n(S,"LI",{});var Hye=s($h);Pie=n(Hye,"STRONG",{});var uft=s(Pie);C_o=r(uft,"wav2vec2-conformer"),uft.forEach(t),w_o=r(Hye," \u2014 "),IN=n(Hye,"A",{href:!0});var bft=s(IN);A_o=r(bft,"Wav2Vec2CTCTokenizer"),bft.forEach(t),L_o=r(Hye," (Wav2Vec2-Conformer model)"),Hye.forEach(t),y_o=i(S),kh=n(S,"LI",{});var Uye=s(kh);Bie=n(Uye,"STRONG",{});var vft=s(Bie);x_o=r(vft,"wav2vec2_phoneme"),vft.forEach(t),$_o=r(Uye," \u2014 "),NN=n(Uye,"A",{href:!0});var Fft=s(NN);k_o=r(Fft,"Wav2Vec2PhonemeCTCTokenizer"),Fft.forEach(t),S_o=r(Uye," (Wav2Vec2Phoneme model)"),Uye.forEach(t),R_o=i(S),Os=n(S,"LI",{});var LS=s(Os);Iie=n(LS,"STRONG",{});var Tft=s(Iie);P_o=r(Tft,"xglm"),Tft.forEach(t),B_o=r(LS," \u2014 "),qN=n(LS,"A",{href:!0});var Mft=s(qN);I_o=r(Mft,"XGLMTokenizer"),Mft.forEach(t),N_o=r(LS," or "),jN=n(LS,"A",{href:!0});var Eft=s(jN);q_o=r(Eft,"XGLMTokenizerFast"),Eft.forEach(t),j_o=r(LS," (XGLM model)"),LS.forEach(t),D_o=i(S),Sh=n(S,"LI",{});var Jye=s(Sh);Nie=n(Jye,"STRONG",{});var Cft=s(Nie);G_o=r(Cft,"xlm"),Cft.forEach(t),O_o=r(Jye," \u2014 "),DN=n(Jye,"A",{href:!0});var wft=s(DN);V_o=r(wft,"XLMTokenizer"),wft.forEach(t),X_o=r(Jye," (XLM model)"),Jye.forEach(t),z_o=i(S),Rh=n(S,"LI",{});var Yye=s(Rh);qie=n(Yye,"STRONG",{});var Aft=s(qie);Q_o=r(Aft,"xlm-prophetnet"),Aft.forEach(t),W_o=r(Yye," \u2014 "),GN=n(Yye,"A",{href:!0});var Lft=s(GN);H_o=r(Lft,"XLMProphetNetTokenizer"),Lft.forEach(t),U_o=r(Yye," (XLM-ProphetNet model)"),Yye.forEach(t),J_o=i(S),Vs=n(S,"LI",{});var yS=s(Vs);jie=n(yS,"STRONG",{});var yft=s(jie);Y_o=r(yft,"xlm-roberta"),yft.forEach(t),K_o=r(yS," \u2014 "),ON=n(yS,"A",{href:!0});var xft=s(ON);Z_o=r(xft,"XLMRobertaTokenizer"),xft.forEach(t),euo=r(yS," or "),VN=n(yS,"A",{href:!0});var $ft=s(VN);ouo=r($ft,"XLMRobertaTokenizerFast"),$ft.forEach(t),ruo=r(yS," (XLM-RoBERTa model)"),yS.forEach(t),tuo=i(S),Xs=n(S,"LI",{});var xS=s(Xs);Die=n(xS,"STRONG",{});var kft=s(Die);auo=r(kft,"xlm-roberta-xl"),kft.forEach(t),nuo=r(xS," \u2014 "),XN=n(xS,"A",{href:!0});var Sft=s(XN);suo=r(Sft,"RobertaTokenizer"),Sft.forEach(t),luo=r(xS," or "),zN=n(xS,"A",{href:!0});var Rft=s(zN);iuo=r(Rft,"RobertaTokenizerFast"),Rft.forEach(t),duo=r(xS," (XLM-RoBERTa-XL model)"),xS.forEach(t),cuo=i(S),zs=n(S,"LI",{});var $S=s(zs);Gie=n($S,"STRONG",{});var Pft=s(Gie);fuo=r(Pft,"xlnet"),Pft.forEach(t),muo=r($S," \u2014 "),QN=n($S,"A",{href:!0});var Bft=s(QN);guo=r(Bft,"XLNetTokenizer"),Bft.forEach(t),huo=r($S," or "),WN=n($S,"A",{href:!0});var Ift=s(WN);puo=r(Ift,"XLNetTokenizerFast"),Ift.forEach(t),_uo=r($S," (XLNet model)"),$S.forEach(t),uuo=i(S),Qs=n(S,"LI",{});var kS=s(Qs);Oie=n(kS,"STRONG",{});var Nft=s(Oie);buo=r(Nft,"yoso"),Nft.forEach(t),vuo=r(kS," \u2014 "),HN=n(kS,"A",{href:!0});var qft=s(HN);Fuo=r(qft,"AlbertTokenizer"),qft.forEach(t),Tuo=r(kS," or "),UN=n(kS,"A",{href:!0});var jft=s(UN);Muo=r(jft,"AlbertTokenizerFast"),jft.forEach(t),Euo=r(kS," (YOSO model)"),kS.forEach(t),S.forEach(t),Cuo=i(Ks),T(Ph.$$.fragment,Ks),Ks.forEach(t),wuo=i(Ys),Bh=n(Ys,"DIV",{class:!0});var pQe=s(Bh);T(FL.$$.fragment,pQe),Auo=i(pQe),Vie=n(pQe,"P",{});var Dft=s(Vie);Luo=r(Dft,"Register a new tokenizer in this mapping."),Dft.forEach(t),pQe.forEach(t),Ys.forEach(t),hXe=i(f),Ni=n(f,"H2",{class:!0});var _Qe=s(Ni);Ih=n(_Qe,"A",{id:!0,class:!0,href:!0});var Gft=s(Ih);Xie=n(Gft,"SPAN",{});var Oft=s(Xie);T(TL.$$.fragment,Oft),Oft.forEach(t),Gft.forEach(t),yuo=i(_Qe),zie=n(_Qe,"SPAN",{});var Vft=s(zie);xuo=r(Vft,"AutoFeatureExtractor"),Vft.forEach(t),_Qe.forEach(t),pXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(ML.$$.fragment,Zs),$uo=i(Zs),EL=n(Zs,"P",{});var uQe=s(EL);kuo=r(uQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JN=n(uQe,"A",{href:!0});var Xft=s(JN);Suo=r(Xft,"AutoFeatureExtractor.from_pretrained()"),Xft.forEach(t),Ruo=r(uQe," class method."),uQe.forEach(t),Puo=i(Zs),CL=n(Zs,"P",{});var bQe=s(CL);Buo=r(bQe,"This class cannot be instantiated directly using "),Qie=n(bQe,"CODE",{});var zft=s(Qie);Iuo=r(zft,"__init__()"),zft.forEach(t),Nuo=r(bQe," (throws an error)."),bQe.forEach(t),quo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(wL.$$.fragment,aa),juo=i(aa),Wie=n(aa,"P",{});var Qft=s(Wie);Duo=r(Qft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qft.forEach(t),Guo=i(aa),Ba=n(aa,"P",{});var cA=s(Ba);Ouo=r(cA,"The feature extractor class to instantiate is selected based on the "),Hie=n(cA,"CODE",{});var Wft=s(Hie);Vuo=r(Wft,"model_type"),Wft.forEach(t),Xuo=r(cA,` property of the config object
(either passed as an argument or loaded from `),Uie=n(cA,"CODE",{});var Hft=s(Uie);zuo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),Quo=r(cA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jie=n(cA,"CODE",{});var Uft=s(Jie);Wuo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),Huo=r(cA,":"),cA.forEach(t),Uuo=i(aa),J=n(aa,"UL",{});var K=s(J);Nh=n(K,"LI",{});var Kye=s(Nh);Yie=n(Kye,"STRONG",{});var Jft=s(Yie);Juo=r(Jft,"beit"),Jft.forEach(t),Yuo=r(Kye," \u2014 "),YN=n(Kye,"A",{href:!0});var Yft=s(YN);Kuo=r(Yft,"BeitFeatureExtractor"),Yft.forEach(t),Zuo=r(Kye," (BEiT model)"),Kye.forEach(t),e1o=i(K),qh=n(K,"LI",{});var Zye=s(qh);Kie=n(Zye,"STRONG",{});var Kft=s(Kie);o1o=r(Kft,"clip"),Kft.forEach(t),r1o=r(Zye," \u2014 "),KN=n(Zye,"A",{href:!0});var Zft=s(KN);t1o=r(Zft,"CLIPFeatureExtractor"),Zft.forEach(t),a1o=r(Zye," (CLIP model)"),Zye.forEach(t),n1o=i(K),jh=n(K,"LI",{});var e9e=s(jh);Zie=n(e9e,"STRONG",{});var emt=s(Zie);s1o=r(emt,"convnext"),emt.forEach(t),l1o=r(e9e," \u2014 "),ZN=n(e9e,"A",{href:!0});var omt=s(ZN);i1o=r(omt,"ConvNextFeatureExtractor"),omt.forEach(t),d1o=r(e9e," (ConvNeXT model)"),e9e.forEach(t),c1o=i(K),Dh=n(K,"LI",{});var o9e=s(Dh);ede=n(o9e,"STRONG",{});var rmt=s(ede);f1o=r(rmt,"cvt"),rmt.forEach(t),m1o=r(o9e," \u2014 "),eq=n(o9e,"A",{href:!0});var tmt=s(eq);g1o=r(tmt,"ConvNextFeatureExtractor"),tmt.forEach(t),h1o=r(o9e," (CvT model)"),o9e.forEach(t),p1o=i(K),Gh=n(K,"LI",{});var r9e=s(Gh);ode=n(r9e,"STRONG",{});var amt=s(ode);_1o=r(amt,"data2vec-audio"),amt.forEach(t),u1o=r(r9e," \u2014 "),oq=n(r9e,"A",{href:!0});var nmt=s(oq);b1o=r(nmt,"Wav2Vec2FeatureExtractor"),nmt.forEach(t),v1o=r(r9e," (Data2VecAudio model)"),r9e.forEach(t),F1o=i(K),Oh=n(K,"LI",{});var t9e=s(Oh);rde=n(t9e,"STRONG",{});var smt=s(rde);T1o=r(smt,"data2vec-vision"),smt.forEach(t),M1o=r(t9e," \u2014 "),rq=n(t9e,"A",{href:!0});var lmt=s(rq);E1o=r(lmt,"BeitFeatureExtractor"),lmt.forEach(t),C1o=r(t9e," (Data2VecVision model)"),t9e.forEach(t),w1o=i(K),Vh=n(K,"LI",{});var a9e=s(Vh);tde=n(a9e,"STRONG",{});var imt=s(tde);A1o=r(imt,"deformable_detr"),imt.forEach(t),L1o=r(a9e," \u2014 "),tq=n(a9e,"A",{href:!0});var dmt=s(tq);y1o=r(dmt,"DetrFeatureExtractor"),dmt.forEach(t),x1o=r(a9e," (Deformable DETR model)"),a9e.forEach(t),$1o=i(K),Xh=n(K,"LI",{});var n9e=s(Xh);ade=n(n9e,"STRONG",{});var cmt=s(ade);k1o=r(cmt,"deit"),cmt.forEach(t),S1o=r(n9e," \u2014 "),aq=n(n9e,"A",{href:!0});var fmt=s(aq);R1o=r(fmt,"DeiTFeatureExtractor"),fmt.forEach(t),P1o=r(n9e," (DeiT model)"),n9e.forEach(t),B1o=i(K),zh=n(K,"LI",{});var s9e=s(zh);nde=n(s9e,"STRONG",{});var mmt=s(nde);I1o=r(mmt,"detr"),mmt.forEach(t),N1o=r(s9e," \u2014 "),nq=n(s9e,"A",{href:!0});var gmt=s(nq);q1o=r(gmt,"DetrFeatureExtractor"),gmt.forEach(t),j1o=r(s9e," (DETR model)"),s9e.forEach(t),D1o=i(K),Qh=n(K,"LI",{});var l9e=s(Qh);sde=n(l9e,"STRONG",{});var hmt=s(sde);G1o=r(hmt,"dpt"),hmt.forEach(t),O1o=r(l9e," \u2014 "),sq=n(l9e,"A",{href:!0});var pmt=s(sq);V1o=r(pmt,"DPTFeatureExtractor"),pmt.forEach(t),X1o=r(l9e," (DPT model)"),l9e.forEach(t),z1o=i(K),Wh=n(K,"LI",{});var i9e=s(Wh);lde=n(i9e,"STRONG",{});var _mt=s(lde);Q1o=r(_mt,"flava"),_mt.forEach(t),W1o=r(i9e," \u2014 "),lq=n(i9e,"A",{href:!0});var umt=s(lq);H1o=r(umt,"FlavaFeatureExtractor"),umt.forEach(t),U1o=r(i9e," (FLAVA model)"),i9e.forEach(t),J1o=i(K),Hh=n(K,"LI",{});var d9e=s(Hh);ide=n(d9e,"STRONG",{});var bmt=s(ide);Y1o=r(bmt,"glpn"),bmt.forEach(t),K1o=r(d9e," \u2014 "),iq=n(d9e,"A",{href:!0});var vmt=s(iq);Z1o=r(vmt,"GLPNFeatureExtractor"),vmt.forEach(t),e2o=r(d9e," (GLPN model)"),d9e.forEach(t),o2o=i(K),Uh=n(K,"LI",{});var c9e=s(Uh);dde=n(c9e,"STRONG",{});var Fmt=s(dde);r2o=r(Fmt,"groupvit"),Fmt.forEach(t),t2o=r(c9e," \u2014 "),dq=n(c9e,"A",{href:!0});var Tmt=s(dq);a2o=r(Tmt,"CLIPFeatureExtractor"),Tmt.forEach(t),n2o=r(c9e," (GroupViT model)"),c9e.forEach(t),s2o=i(K),Jh=n(K,"LI",{});var f9e=s(Jh);cde=n(f9e,"STRONG",{});var Mmt=s(cde);l2o=r(Mmt,"hubert"),Mmt.forEach(t),i2o=r(f9e," \u2014 "),cq=n(f9e,"A",{href:!0});var Emt=s(cq);d2o=r(Emt,"Wav2Vec2FeatureExtractor"),Emt.forEach(t),c2o=r(f9e," (Hubert model)"),f9e.forEach(t),f2o=i(K),Yh=n(K,"LI",{});var m9e=s(Yh);fde=n(m9e,"STRONG",{});var Cmt=s(fde);m2o=r(Cmt,"imagegpt"),Cmt.forEach(t),g2o=r(m9e," \u2014 "),fq=n(m9e,"A",{href:!0});var wmt=s(fq);h2o=r(wmt,"ImageGPTFeatureExtractor"),wmt.forEach(t),p2o=r(m9e," (ImageGPT model)"),m9e.forEach(t),_2o=i(K),Kh=n(K,"LI",{});var g9e=s(Kh);mde=n(g9e,"STRONG",{});var Amt=s(mde);u2o=r(Amt,"layoutlmv2"),Amt.forEach(t),b2o=r(g9e," \u2014 "),mq=n(g9e,"A",{href:!0});var Lmt=s(mq);v2o=r(Lmt,"LayoutLMv2FeatureExtractor"),Lmt.forEach(t),F2o=r(g9e," (LayoutLMv2 model)"),g9e.forEach(t),T2o=i(K),Zh=n(K,"LI",{});var h9e=s(Zh);gde=n(h9e,"STRONG",{});var ymt=s(gde);M2o=r(ymt,"layoutlmv3"),ymt.forEach(t),E2o=r(h9e," \u2014 "),gq=n(h9e,"A",{href:!0});var xmt=s(gq);C2o=r(xmt,"LayoutLMv3FeatureExtractor"),xmt.forEach(t),w2o=r(h9e," (LayoutLMv3 model)"),h9e.forEach(t),A2o=i(K),ep=n(K,"LI",{});var p9e=s(ep);hde=n(p9e,"STRONG",{});var $mt=s(hde);L2o=r($mt,"levit"),$mt.forEach(t),y2o=r(p9e," \u2014 "),hq=n(p9e,"A",{href:!0});var kmt=s(hq);x2o=r(kmt,"LevitFeatureExtractor"),kmt.forEach(t),$2o=r(p9e," (LeViT model)"),p9e.forEach(t),k2o=i(K),op=n(K,"LI",{});var _9e=s(op);pde=n(_9e,"STRONG",{});var Smt=s(pde);S2o=r(Smt,"maskformer"),Smt.forEach(t),R2o=r(_9e," \u2014 "),pq=n(_9e,"A",{href:!0});var Rmt=s(pq);P2o=r(Rmt,"MaskFormerFeatureExtractor"),Rmt.forEach(t),B2o=r(_9e," (MaskFormer model)"),_9e.forEach(t),I2o=i(K),rp=n(K,"LI",{});var u9e=s(rp);_de=n(u9e,"STRONG",{});var Pmt=s(_de);N2o=r(Pmt,"mctct"),Pmt.forEach(t),q2o=r(u9e," \u2014 "),_q=n(u9e,"A",{href:!0});var Bmt=s(_q);j2o=r(Bmt,"MCTCTFeatureExtractor"),Bmt.forEach(t),D2o=r(u9e," (M-CTC-T model)"),u9e.forEach(t),G2o=i(K),tp=n(K,"LI",{});var b9e=s(tp);ude=n(b9e,"STRONG",{});var Imt=s(ude);O2o=r(Imt,"mobilevit"),Imt.forEach(t),V2o=r(b9e," \u2014 "),uq=n(b9e,"A",{href:!0});var Nmt=s(uq);X2o=r(Nmt,"MobileViTFeatureExtractor"),Nmt.forEach(t),z2o=r(b9e," (MobileViT model)"),b9e.forEach(t),Q2o=i(K),ap=n(K,"LI",{});var v9e=s(ap);bde=n(v9e,"STRONG",{});var qmt=s(bde);W2o=r(qmt,"perceiver"),qmt.forEach(t),H2o=r(v9e," \u2014 "),bq=n(v9e,"A",{href:!0});var jmt=s(bq);U2o=r(jmt,"PerceiverFeatureExtractor"),jmt.forEach(t),J2o=r(v9e," (Perceiver model)"),v9e.forEach(t),Y2o=i(K),np=n(K,"LI",{});var F9e=s(np);vde=n(F9e,"STRONG",{});var Dmt=s(vde);K2o=r(Dmt,"poolformer"),Dmt.forEach(t),Z2o=r(F9e," \u2014 "),vq=n(F9e,"A",{href:!0});var Gmt=s(vq);ebo=r(Gmt,"PoolFormerFeatureExtractor"),Gmt.forEach(t),obo=r(F9e," (PoolFormer model)"),F9e.forEach(t),rbo=i(K),sp=n(K,"LI",{});var T9e=s(sp);Fde=n(T9e,"STRONG",{});var Omt=s(Fde);tbo=r(Omt,"regnet"),Omt.forEach(t),abo=r(T9e," \u2014 "),Fq=n(T9e,"A",{href:!0});var Vmt=s(Fq);nbo=r(Vmt,"ConvNextFeatureExtractor"),Vmt.forEach(t),sbo=r(T9e," (RegNet model)"),T9e.forEach(t),lbo=i(K),lp=n(K,"LI",{});var M9e=s(lp);Tde=n(M9e,"STRONG",{});var Xmt=s(Tde);ibo=r(Xmt,"resnet"),Xmt.forEach(t),dbo=r(M9e," \u2014 "),Tq=n(M9e,"A",{href:!0});var zmt=s(Tq);cbo=r(zmt,"ConvNextFeatureExtractor"),zmt.forEach(t),fbo=r(M9e," (ResNet model)"),M9e.forEach(t),mbo=i(K),ip=n(K,"LI",{});var E9e=s(ip);Mde=n(E9e,"STRONG",{});var Qmt=s(Mde);gbo=r(Qmt,"segformer"),Qmt.forEach(t),hbo=r(E9e," \u2014 "),Mq=n(E9e,"A",{href:!0});var Wmt=s(Mq);pbo=r(Wmt,"SegformerFeatureExtractor"),Wmt.forEach(t),_bo=r(E9e," (SegFormer model)"),E9e.forEach(t),ubo=i(K),dp=n(K,"LI",{});var C9e=s(dp);Ede=n(C9e,"STRONG",{});var Hmt=s(Ede);bbo=r(Hmt,"speech_to_text"),Hmt.forEach(t),vbo=r(C9e," \u2014 "),Eq=n(C9e,"A",{href:!0});var Umt=s(Eq);Fbo=r(Umt,"Speech2TextFeatureExtractor"),Umt.forEach(t),Tbo=r(C9e," (Speech2Text model)"),C9e.forEach(t),Mbo=i(K),cp=n(K,"LI",{});var w9e=s(cp);Cde=n(w9e,"STRONG",{});var Jmt=s(Cde);Ebo=r(Jmt,"swin"),Jmt.forEach(t),Cbo=r(w9e," \u2014 "),Cq=n(w9e,"A",{href:!0});var Ymt=s(Cq);wbo=r(Ymt,"ViTFeatureExtractor"),Ymt.forEach(t),Abo=r(w9e," (Swin Transformer model)"),w9e.forEach(t),Lbo=i(K),fp=n(K,"LI",{});var A9e=s(fp);wde=n(A9e,"STRONG",{});var Kmt=s(wde);ybo=r(Kmt,"van"),Kmt.forEach(t),xbo=r(A9e," \u2014 "),wq=n(A9e,"A",{href:!0});var Zmt=s(wq);$bo=r(Zmt,"ConvNextFeatureExtractor"),Zmt.forEach(t),kbo=r(A9e," (VAN model)"),A9e.forEach(t),Sbo=i(K),mp=n(K,"LI",{});var L9e=s(mp);Ade=n(L9e,"STRONG",{});var egt=s(Ade);Rbo=r(egt,"vilt"),egt.forEach(t),Pbo=r(L9e," \u2014 "),Aq=n(L9e,"A",{href:!0});var ogt=s(Aq);Bbo=r(ogt,"ViltFeatureExtractor"),ogt.forEach(t),Ibo=r(L9e," (ViLT model)"),L9e.forEach(t),Nbo=i(K),gp=n(K,"LI",{});var y9e=s(gp);Lde=n(y9e,"STRONG",{});var rgt=s(Lde);qbo=r(rgt,"vit"),rgt.forEach(t),jbo=r(y9e," \u2014 "),Lq=n(y9e,"A",{href:!0});var tgt=s(Lq);Dbo=r(tgt,"ViTFeatureExtractor"),tgt.forEach(t),Gbo=r(y9e," (ViT model)"),y9e.forEach(t),Obo=i(K),hp=n(K,"LI",{});var x9e=s(hp);yde=n(x9e,"STRONG",{});var agt=s(yde);Vbo=r(agt,"vit_mae"),agt.forEach(t),Xbo=r(x9e," \u2014 "),yq=n(x9e,"A",{href:!0});var ngt=s(yq);zbo=r(ngt,"ViTFeatureExtractor"),ngt.forEach(t),Qbo=r(x9e," (ViTMAE model)"),x9e.forEach(t),Wbo=i(K),pp=n(K,"LI",{});var $9e=s(pp);xde=n($9e,"STRONG",{});var sgt=s(xde);Hbo=r(sgt,"wav2vec2"),sgt.forEach(t),Ubo=r($9e," \u2014 "),xq=n($9e,"A",{href:!0});var lgt=s(xq);Jbo=r(lgt,"Wav2Vec2FeatureExtractor"),lgt.forEach(t),Ybo=r($9e," (Wav2Vec2 model)"),$9e.forEach(t),Kbo=i(K),_p=n(K,"LI",{});var k9e=s(_p);$de=n(k9e,"STRONG",{});var igt=s($de);Zbo=r(igt,"wav2vec2-conformer"),igt.forEach(t),evo=r(k9e," \u2014 "),$q=n(k9e,"A",{href:!0});var dgt=s($q);ovo=r(dgt,"Wav2Vec2FeatureExtractor"),dgt.forEach(t),rvo=r(k9e," (Wav2Vec2-Conformer model)"),k9e.forEach(t),tvo=i(K),up=n(K,"LI",{});var S9e=s(up);kde=n(S9e,"STRONG",{});var cgt=s(kde);avo=r(cgt,"yolos"),cgt.forEach(t),nvo=r(S9e," \u2014 "),kq=n(S9e,"A",{href:!0});var fgt=s(kq);svo=r(fgt,"YolosFeatureExtractor"),fgt.forEach(t),lvo=r(S9e," (YOLOS model)"),S9e.forEach(t),K.forEach(t),ivo=i(aa),T(bp.$$.fragment,aa),dvo=i(aa),T(vp.$$.fragment,aa),aa.forEach(t),cvo=i(Zs),Fp=n(Zs,"DIV",{class:!0});var vQe=s(Fp);T(AL.$$.fragment,vQe),fvo=i(vQe),Sde=n(vQe,"P",{});var mgt=s(Sde);mvo=r(mgt,"Register a new feature extractor for this class."),mgt.forEach(t),vQe.forEach(t),Zs.forEach(t),_Xe=i(f),qi=n(f,"H2",{class:!0});var FQe=s(qi);Tp=n(FQe,"A",{id:!0,class:!0,href:!0});var ggt=s(Tp);Rde=n(ggt,"SPAN",{});var hgt=s(Rde);T(LL.$$.fragment,hgt),hgt.forEach(t),ggt.forEach(t),gvo=i(FQe),Pde=n(FQe,"SPAN",{});var pgt=s(Pde);hvo=r(pgt,"AutoProcessor"),pgt.forEach(t),FQe.forEach(t),uXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(yL.$$.fragment,el),pvo=i(el),xL=n(el,"P",{});var TQe=s(xL);_vo=r(TQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Sq=n(TQe,"A",{href:!0});var _gt=s(Sq);uvo=r(_gt,"AutoProcessor.from_pretrained()"),_gt.forEach(t),bvo=r(TQe," class method."),TQe.forEach(t),vvo=i(el),$L=n(el,"P",{});var MQe=s($L);Fvo=r(MQe,"This class cannot be instantiated directly using "),Bde=n(MQe,"CODE",{});var ugt=s(Bde);Tvo=r(ugt,"__init__()"),ugt.forEach(t),Mvo=r(MQe," (throws an error)."),MQe.forEach(t),Evo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(kL.$$.fragment,na),Cvo=i(na),Ide=n(na,"P",{});var bgt=s(Ide);wvo=r(bgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bgt.forEach(t),Avo=i(na),ji=n(na,"P",{});var Sre=s(ji);Lvo=r(Sre,"The processor class to instantiate is selected based on the "),Nde=n(Sre,"CODE",{});var vgt=s(Nde);yvo=r(vgt,"model_type"),vgt.forEach(t),xvo=r(Sre,` property of the config object (either
passed as an argument or loaded from `),qde=n(Sre,"CODE",{});var Fgt=s(qde);$vo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),kvo=r(Sre," if possible):"),Sre.forEach(t),Svo=i(na),he=n(na,"UL",{});var ue=s(he);Mp=n(ue,"LI",{});var R9e=s(Mp);jde=n(R9e,"STRONG",{});var Tgt=s(jde);Rvo=r(Tgt,"clip"),Tgt.forEach(t),Pvo=r(R9e," \u2014 "),Rq=n(R9e,"A",{href:!0});var Mgt=s(Rq);Bvo=r(Mgt,"CLIPProcessor"),Mgt.forEach(t),Ivo=r(R9e," (CLIP model)"),R9e.forEach(t),Nvo=i(ue),Ep=n(ue,"LI",{});var P9e=s(Ep);Dde=n(P9e,"STRONG",{});var Egt=s(Dde);qvo=r(Egt,"flava"),Egt.forEach(t),jvo=r(P9e," \u2014 "),Gde=n(P9e,"CODE",{});var Cgt=s(Gde);Dvo=r(Cgt,"FLAVAProcessor"),Cgt.forEach(t),Gvo=r(P9e," (FLAVA model)"),P9e.forEach(t),Ovo=i(ue),Cp=n(ue,"LI",{});var B9e=s(Cp);Ode=n(B9e,"STRONG",{});var wgt=s(Ode);Vvo=r(wgt,"groupvit"),wgt.forEach(t),Xvo=r(B9e," \u2014 "),Pq=n(B9e,"A",{href:!0});var Agt=s(Pq);zvo=r(Agt,"CLIPProcessor"),Agt.forEach(t),Qvo=r(B9e," (GroupViT model)"),B9e.forEach(t),Wvo=i(ue),wp=n(ue,"LI",{});var I9e=s(wp);Vde=n(I9e,"STRONG",{});var Lgt=s(Vde);Hvo=r(Lgt,"layoutlmv2"),Lgt.forEach(t),Uvo=r(I9e," \u2014 "),Bq=n(I9e,"A",{href:!0});var ygt=s(Bq);Jvo=r(ygt,"LayoutLMv2Processor"),ygt.forEach(t),Yvo=r(I9e," (LayoutLMv2 model)"),I9e.forEach(t),Kvo=i(ue),Ap=n(ue,"LI",{});var N9e=s(Ap);Xde=n(N9e,"STRONG",{});var xgt=s(Xde);Zvo=r(xgt,"layoutlmv3"),xgt.forEach(t),eFo=r(N9e," \u2014 "),Iq=n(N9e,"A",{href:!0});var $gt=s(Iq);oFo=r($gt,"LayoutLMv3Processor"),$gt.forEach(t),rFo=r(N9e," (LayoutLMv3 model)"),N9e.forEach(t),tFo=i(ue),Lp=n(ue,"LI",{});var q9e=s(Lp);zde=n(q9e,"STRONG",{});var kgt=s(zde);aFo=r(kgt,"layoutxlm"),kgt.forEach(t),nFo=r(q9e," \u2014 "),Nq=n(q9e,"A",{href:!0});var Sgt=s(Nq);sFo=r(Sgt,"LayoutXLMProcessor"),Sgt.forEach(t),lFo=r(q9e," (LayoutXLM model)"),q9e.forEach(t),iFo=i(ue),yp=n(ue,"LI",{});var j9e=s(yp);Qde=n(j9e,"STRONG",{});var Rgt=s(Qde);dFo=r(Rgt,"sew"),Rgt.forEach(t),cFo=r(j9e," \u2014 "),qq=n(j9e,"A",{href:!0});var Pgt=s(qq);fFo=r(Pgt,"Wav2Vec2Processor"),Pgt.forEach(t),mFo=r(j9e," (SEW model)"),j9e.forEach(t),gFo=i(ue),xp=n(ue,"LI",{});var D9e=s(xp);Wde=n(D9e,"STRONG",{});var Bgt=s(Wde);hFo=r(Bgt,"sew-d"),Bgt.forEach(t),pFo=r(D9e," \u2014 "),jq=n(D9e,"A",{href:!0});var Igt=s(jq);_Fo=r(Igt,"Wav2Vec2Processor"),Igt.forEach(t),uFo=r(D9e," (SEW-D model)"),D9e.forEach(t),bFo=i(ue),$p=n(ue,"LI",{});var G9e=s($p);Hde=n(G9e,"STRONG",{});var Ngt=s(Hde);vFo=r(Ngt,"speech_to_text"),Ngt.forEach(t),FFo=r(G9e," \u2014 "),Dq=n(G9e,"A",{href:!0});var qgt=s(Dq);TFo=r(qgt,"Speech2TextProcessor"),qgt.forEach(t),MFo=r(G9e," (Speech2Text model)"),G9e.forEach(t),EFo=i(ue),kp=n(ue,"LI",{});var O9e=s(kp);Ude=n(O9e,"STRONG",{});var jgt=s(Ude);CFo=r(jgt,"speech_to_text_2"),jgt.forEach(t),wFo=r(O9e," \u2014 "),Gq=n(O9e,"A",{href:!0});var Dgt=s(Gq);AFo=r(Dgt,"Speech2Text2Processor"),Dgt.forEach(t),LFo=r(O9e," (Speech2Text2 model)"),O9e.forEach(t),yFo=i(ue),Sp=n(ue,"LI",{});var V9e=s(Sp);Jde=n(V9e,"STRONG",{});var Ggt=s(Jde);xFo=r(Ggt,"trocr"),Ggt.forEach(t),$Fo=r(V9e," \u2014 "),Oq=n(V9e,"A",{href:!0});var Ogt=s(Oq);kFo=r(Ogt,"TrOCRProcessor"),Ogt.forEach(t),SFo=r(V9e," (TrOCR model)"),V9e.forEach(t),RFo=i(ue),Rp=n(ue,"LI",{});var X9e=s(Rp);Yde=n(X9e,"STRONG",{});var Vgt=s(Yde);PFo=r(Vgt,"unispeech"),Vgt.forEach(t),BFo=r(X9e," \u2014 "),Vq=n(X9e,"A",{href:!0});var Xgt=s(Vq);IFo=r(Xgt,"Wav2Vec2Processor"),Xgt.forEach(t),NFo=r(X9e," (UniSpeech model)"),X9e.forEach(t),qFo=i(ue),Pp=n(ue,"LI",{});var z9e=s(Pp);Kde=n(z9e,"STRONG",{});var zgt=s(Kde);jFo=r(zgt,"unispeech-sat"),zgt.forEach(t),DFo=r(z9e," \u2014 "),Xq=n(z9e,"A",{href:!0});var Qgt=s(Xq);GFo=r(Qgt,"Wav2Vec2Processor"),Qgt.forEach(t),OFo=r(z9e," (UniSpeechSat model)"),z9e.forEach(t),VFo=i(ue),Bp=n(ue,"LI",{});var Q9e=s(Bp);Zde=n(Q9e,"STRONG",{});var Wgt=s(Zde);XFo=r(Wgt,"vilt"),Wgt.forEach(t),zFo=r(Q9e," \u2014 "),zq=n(Q9e,"A",{href:!0});var Hgt=s(zq);QFo=r(Hgt,"ViltProcessor"),Hgt.forEach(t),WFo=r(Q9e," (ViLT model)"),Q9e.forEach(t),HFo=i(ue),Ip=n(ue,"LI",{});var W9e=s(Ip);ece=n(W9e,"STRONG",{});var Ugt=s(ece);UFo=r(Ugt,"vision-text-dual-encoder"),Ugt.forEach(t),JFo=r(W9e," \u2014 "),Qq=n(W9e,"A",{href:!0});var Jgt=s(Qq);YFo=r(Jgt,"VisionTextDualEncoderProcessor"),Jgt.forEach(t),KFo=r(W9e," (VisionTextDualEncoder model)"),W9e.forEach(t),ZFo=i(ue),Np=n(ue,"LI",{});var H9e=s(Np);oce=n(H9e,"STRONG",{});var Ygt=s(oce);eTo=r(Ygt,"wav2vec2"),Ygt.forEach(t),oTo=r(H9e," \u2014 "),Wq=n(H9e,"A",{href:!0});var Kgt=s(Wq);rTo=r(Kgt,"Wav2Vec2Processor"),Kgt.forEach(t),tTo=r(H9e," (Wav2Vec2 model)"),H9e.forEach(t),aTo=i(ue),qp=n(ue,"LI",{});var U9e=s(qp);rce=n(U9e,"STRONG",{});var Zgt=s(rce);nTo=r(Zgt,"wav2vec2-conformer"),Zgt.forEach(t),sTo=r(U9e," \u2014 "),Hq=n(U9e,"A",{href:!0});var eht=s(Hq);lTo=r(eht,"Wav2Vec2Processor"),eht.forEach(t),iTo=r(U9e," (Wav2Vec2-Conformer model)"),U9e.forEach(t),dTo=i(ue),jp=n(ue,"LI",{});var J9e=s(jp);tce=n(J9e,"STRONG",{});var oht=s(tce);cTo=r(oht,"wavlm"),oht.forEach(t),fTo=r(J9e," \u2014 "),Uq=n(J9e,"A",{href:!0});var rht=s(Uq);mTo=r(rht,"Wav2Vec2Processor"),rht.forEach(t),gTo=r(J9e," (WavLM model)"),J9e.forEach(t),ue.forEach(t),hTo=i(na),T(Dp.$$.fragment,na),pTo=i(na),T(Gp.$$.fragment,na),na.forEach(t),_To=i(el),Op=n(el,"DIV",{class:!0});var EQe=s(Op);T(SL.$$.fragment,EQe),uTo=i(EQe),ace=n(EQe,"P",{});var tht=s(ace);bTo=r(tht,"Register a new processor for this class."),tht.forEach(t),EQe.forEach(t),el.forEach(t),bXe=i(f),Di=n(f,"H2",{class:!0});var CQe=s(Di);Vp=n(CQe,"A",{id:!0,class:!0,href:!0});var aht=s(Vp);nce=n(aht,"SPAN",{});var nht=s(nce);T(RL.$$.fragment,nht),nht.forEach(t),aht.forEach(t),vTo=i(CQe),sce=n(CQe,"SPAN",{});var sht=s(sce);FTo=r(sht,"AutoModel"),sht.forEach(t),CQe.forEach(t),vXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(PL.$$.fragment,ol),TTo=i(ol),Gi=n(ol,"P",{});var Rre=s(Gi);MTo=r(Rre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jq=n(Rre,"A",{href:!0});var lht=s(Jq);ETo=r(lht,"from_pretrained()"),lht.forEach(t),CTo=r(Rre," class method or the "),Yq=n(Rre,"A",{href:!0});var iht=s(Yq);wTo=r(iht,"from_config()"),iht.forEach(t),ATo=r(Rre,` class
method.`),Rre.forEach(t),LTo=i(ol),BL=n(ol,"P",{});var wQe=s(BL);yTo=r(wQe,"This class cannot be instantiated directly using "),lce=n(wQe,"CODE",{});var dht=s(lce);xTo=r(dht,"__init__()"),dht.forEach(t),$To=r(wQe," (throws an error)."),wQe.forEach(t),kTo=i(ol),lt=n(ol,"DIV",{class:!0});var fA=s(lt);T(IL.$$.fragment,fA),STo=i(fA),ice=n(fA,"P",{});var cht=s(ice);RTo=r(cht,"Instantiates one of the base model classes of the library from a configuration."),cht.forEach(t),PTo=i(fA),Oi=n(fA,"P",{});var Pre=s(Oi);BTo=r(Pre,`Note:
Loading a model from its configuration file does `),dce=n(Pre,"STRONG",{});var fht=s(dce);ITo=r(fht,"not"),fht.forEach(t),NTo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kq=n(Pre,"A",{href:!0});var mht=s(Kq);qTo=r(mht,"from_pretrained()"),mht.forEach(t),jTo=r(Pre," to load the model weights."),Pre.forEach(t),DTo=i(fA),T(Xp.$$.fragment,fA),fA.forEach(t),GTo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(NL.$$.fragment,sa),OTo=i(sa),cce=n(sa,"P",{});var ght=s(cce);VTo=r(ght,"Instantiate one of the base model classes of the library from a pretrained model."),ght.forEach(t),XTo=i(sa),Ia=n(sa,"P",{});var mA=s(Ia);zTo=r(mA,"The model class to instantiate is selected based on the "),fce=n(mA,"CODE",{});var hht=s(fce);QTo=r(hht,"model_type"),hht.forEach(t),WTo=r(mA,` property of the config object (either
passed as an argument or loaded from `),mce=n(mA,"CODE",{});var pht=s(mce);HTo=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),UTo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(mA,"CODE",{});var _ht=s(gce);JTo=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),YTo=r(mA,":"),mA.forEach(t),KTo=i(sa),y=n(sa,"UL",{});var x=s(y);zp=n(x,"LI",{});var Y9e=s(zp);hce=n(Y9e,"STRONG",{});var uht=s(hce);ZTo=r(uht,"albert"),uht.forEach(t),e7o=r(Y9e," \u2014 "),Zq=n(Y9e,"A",{href:!0});var bht=s(Zq);o7o=r(bht,"AlbertModel"),bht.forEach(t),r7o=r(Y9e," (ALBERT model)"),Y9e.forEach(t),t7o=i(x),Qp=n(x,"LI",{});var K9e=s(Qp);pce=n(K9e,"STRONG",{});var vht=s(pce);a7o=r(vht,"bart"),vht.forEach(t),n7o=r(K9e," \u2014 "),ej=n(K9e,"A",{href:!0});var Fht=s(ej);s7o=r(Fht,"BartModel"),Fht.forEach(t),l7o=r(K9e," (BART model)"),K9e.forEach(t),i7o=i(x),Wp=n(x,"LI",{});var Z9e=s(Wp);_ce=n(Z9e,"STRONG",{});var Tht=s(_ce);d7o=r(Tht,"beit"),Tht.forEach(t),c7o=r(Z9e," \u2014 "),oj=n(Z9e,"A",{href:!0});var Mht=s(oj);f7o=r(Mht,"BeitModel"),Mht.forEach(t),m7o=r(Z9e," (BEiT model)"),Z9e.forEach(t),g7o=i(x),Hp=n(x,"LI",{});var exe=s(Hp);uce=n(exe,"STRONG",{});var Eht=s(uce);h7o=r(Eht,"bert"),Eht.forEach(t),p7o=r(exe," \u2014 "),rj=n(exe,"A",{href:!0});var Cht=s(rj);_7o=r(Cht,"BertModel"),Cht.forEach(t),u7o=r(exe," (BERT model)"),exe.forEach(t),b7o=i(x),Up=n(x,"LI",{});var oxe=s(Up);bce=n(oxe,"STRONG",{});var wht=s(bce);v7o=r(wht,"bert-generation"),wht.forEach(t),F7o=r(oxe," \u2014 "),tj=n(oxe,"A",{href:!0});var Aht=s(tj);T7o=r(Aht,"BertGenerationEncoder"),Aht.forEach(t),M7o=r(oxe," (Bert Generation model)"),oxe.forEach(t),E7o=i(x),Jp=n(x,"LI",{});var rxe=s(Jp);vce=n(rxe,"STRONG",{});var Lht=s(vce);C7o=r(Lht,"big_bird"),Lht.forEach(t),w7o=r(rxe," \u2014 "),aj=n(rxe,"A",{href:!0});var yht=s(aj);A7o=r(yht,"BigBirdModel"),yht.forEach(t),L7o=r(rxe," (BigBird model)"),rxe.forEach(t),y7o=i(x),Yp=n(x,"LI",{});var txe=s(Yp);Fce=n(txe,"STRONG",{});var xht=s(Fce);x7o=r(xht,"bigbird_pegasus"),xht.forEach(t),$7o=r(txe," \u2014 "),nj=n(txe,"A",{href:!0});var $ht=s(nj);k7o=r($ht,"BigBirdPegasusModel"),$ht.forEach(t),S7o=r(txe," (BigBird-Pegasus model)"),txe.forEach(t),R7o=i(x),Kp=n(x,"LI",{});var axe=s(Kp);Tce=n(axe,"STRONG",{});var kht=s(Tce);P7o=r(kht,"blenderbot"),kht.forEach(t),B7o=r(axe," \u2014 "),sj=n(axe,"A",{href:!0});var Sht=s(sj);I7o=r(Sht,"BlenderbotModel"),Sht.forEach(t),N7o=r(axe," (Blenderbot model)"),axe.forEach(t),q7o=i(x),Zp=n(x,"LI",{});var nxe=s(Zp);Mce=n(nxe,"STRONG",{});var Rht=s(Mce);j7o=r(Rht,"blenderbot-small"),Rht.forEach(t),D7o=r(nxe," \u2014 "),lj=n(nxe,"A",{href:!0});var Pht=s(lj);G7o=r(Pht,"BlenderbotSmallModel"),Pht.forEach(t),O7o=r(nxe," (BlenderbotSmall model)"),nxe.forEach(t),V7o=i(x),e_=n(x,"LI",{});var sxe=s(e_);Ece=n(sxe,"STRONG",{});var Bht=s(Ece);X7o=r(Bht,"bloom"),Bht.forEach(t),z7o=r(sxe," \u2014 "),ij=n(sxe,"A",{href:!0});var Iht=s(ij);Q7o=r(Iht,"BloomModel"),Iht.forEach(t),W7o=r(sxe," (BLOOM model)"),sxe.forEach(t),H7o=i(x),o_=n(x,"LI",{});var lxe=s(o_);Cce=n(lxe,"STRONG",{});var Nht=s(Cce);U7o=r(Nht,"camembert"),Nht.forEach(t),J7o=r(lxe," \u2014 "),dj=n(lxe,"A",{href:!0});var qht=s(dj);Y7o=r(qht,"CamembertModel"),qht.forEach(t),K7o=r(lxe," (CamemBERT model)"),lxe.forEach(t),Z7o=i(x),r_=n(x,"LI",{});var ixe=s(r_);wce=n(ixe,"STRONG",{});var jht=s(wce);e8o=r(jht,"canine"),jht.forEach(t),o8o=r(ixe," \u2014 "),cj=n(ixe,"A",{href:!0});var Dht=s(cj);r8o=r(Dht,"CanineModel"),Dht.forEach(t),t8o=r(ixe," (CANINE model)"),ixe.forEach(t),a8o=i(x),t_=n(x,"LI",{});var dxe=s(t_);Ace=n(dxe,"STRONG",{});var Ght=s(Ace);n8o=r(Ght,"clip"),Ght.forEach(t),s8o=r(dxe," \u2014 "),fj=n(dxe,"A",{href:!0});var Oht=s(fj);l8o=r(Oht,"CLIPModel"),Oht.forEach(t),i8o=r(dxe," (CLIP model)"),dxe.forEach(t),d8o=i(x),a_=n(x,"LI",{});var cxe=s(a_);Lce=n(cxe,"STRONG",{});var Vht=s(Lce);c8o=r(Vht,"codegen"),Vht.forEach(t),f8o=r(cxe," \u2014 "),mj=n(cxe,"A",{href:!0});var Xht=s(mj);m8o=r(Xht,"CodeGenModel"),Xht.forEach(t),g8o=r(cxe," (CodeGen model)"),cxe.forEach(t),h8o=i(x),n_=n(x,"LI",{});var fxe=s(n_);yce=n(fxe,"STRONG",{});var zht=s(yce);p8o=r(zht,"convbert"),zht.forEach(t),_8o=r(fxe," \u2014 "),gj=n(fxe,"A",{href:!0});var Qht=s(gj);u8o=r(Qht,"ConvBertModel"),Qht.forEach(t),b8o=r(fxe," (ConvBERT model)"),fxe.forEach(t),v8o=i(x),s_=n(x,"LI",{});var mxe=s(s_);xce=n(mxe,"STRONG",{});var Wht=s(xce);F8o=r(Wht,"convnext"),Wht.forEach(t),T8o=r(mxe," \u2014 "),hj=n(mxe,"A",{href:!0});var Hht=s(hj);M8o=r(Hht,"ConvNextModel"),Hht.forEach(t),E8o=r(mxe," (ConvNeXT model)"),mxe.forEach(t),C8o=i(x),l_=n(x,"LI",{});var gxe=s(l_);$ce=n(gxe,"STRONG",{});var Uht=s($ce);w8o=r(Uht,"ctrl"),Uht.forEach(t),A8o=r(gxe," \u2014 "),pj=n(gxe,"A",{href:!0});var Jht=s(pj);L8o=r(Jht,"CTRLModel"),Jht.forEach(t),y8o=r(gxe," (CTRL model)"),gxe.forEach(t),x8o=i(x),i_=n(x,"LI",{});var hxe=s(i_);kce=n(hxe,"STRONG",{});var Yht=s(kce);$8o=r(Yht,"cvt"),Yht.forEach(t),k8o=r(hxe," \u2014 "),_j=n(hxe,"A",{href:!0});var Kht=s(_j);S8o=r(Kht,"CvtModel"),Kht.forEach(t),R8o=r(hxe," (CvT model)"),hxe.forEach(t),P8o=i(x),d_=n(x,"LI",{});var pxe=s(d_);Sce=n(pxe,"STRONG",{});var Zht=s(Sce);B8o=r(Zht,"data2vec-audio"),Zht.forEach(t),I8o=r(pxe," \u2014 "),uj=n(pxe,"A",{href:!0});var ept=s(uj);N8o=r(ept,"Data2VecAudioModel"),ept.forEach(t),q8o=r(pxe," (Data2VecAudio model)"),pxe.forEach(t),j8o=i(x),c_=n(x,"LI",{});var _xe=s(c_);Rce=n(_xe,"STRONG",{});var opt=s(Rce);D8o=r(opt,"data2vec-text"),opt.forEach(t),G8o=r(_xe," \u2014 "),bj=n(_xe,"A",{href:!0});var rpt=s(bj);O8o=r(rpt,"Data2VecTextModel"),rpt.forEach(t),V8o=r(_xe," (Data2VecText model)"),_xe.forEach(t),X8o=i(x),f_=n(x,"LI",{});var uxe=s(f_);Pce=n(uxe,"STRONG",{});var tpt=s(Pce);z8o=r(tpt,"data2vec-vision"),tpt.forEach(t),Q8o=r(uxe," \u2014 "),vj=n(uxe,"A",{href:!0});var apt=s(vj);W8o=r(apt,"Data2VecVisionModel"),apt.forEach(t),H8o=r(uxe," (Data2VecVision model)"),uxe.forEach(t),U8o=i(x),m_=n(x,"LI",{});var bxe=s(m_);Bce=n(bxe,"STRONG",{});var npt=s(Bce);J8o=r(npt,"deberta"),npt.forEach(t),Y8o=r(bxe," \u2014 "),Fj=n(bxe,"A",{href:!0});var spt=s(Fj);K8o=r(spt,"DebertaModel"),spt.forEach(t),Z8o=r(bxe," (DeBERTa model)"),bxe.forEach(t),eMo=i(x),g_=n(x,"LI",{});var vxe=s(g_);Ice=n(vxe,"STRONG",{});var lpt=s(Ice);oMo=r(lpt,"deberta-v2"),lpt.forEach(t),rMo=r(vxe," \u2014 "),Tj=n(vxe,"A",{href:!0});var ipt=s(Tj);tMo=r(ipt,"DebertaV2Model"),ipt.forEach(t),aMo=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),nMo=i(x),h_=n(x,"LI",{});var Fxe=s(h_);Nce=n(Fxe,"STRONG",{});var dpt=s(Nce);sMo=r(dpt,"decision_transformer"),dpt.forEach(t),lMo=r(Fxe," \u2014 "),Mj=n(Fxe,"A",{href:!0});var cpt=s(Mj);iMo=r(cpt,"DecisionTransformerModel"),cpt.forEach(t),dMo=r(Fxe," (Decision Transformer model)"),Fxe.forEach(t),cMo=i(x),p_=n(x,"LI",{});var Txe=s(p_);qce=n(Txe,"STRONG",{});var fpt=s(qce);fMo=r(fpt,"deformable_detr"),fpt.forEach(t),mMo=r(Txe," \u2014 "),Ej=n(Txe,"A",{href:!0});var mpt=s(Ej);gMo=r(mpt,"DeformableDetrModel"),mpt.forEach(t),hMo=r(Txe," (Deformable DETR model)"),Txe.forEach(t),pMo=i(x),__=n(x,"LI",{});var Mxe=s(__);jce=n(Mxe,"STRONG",{});var gpt=s(jce);_Mo=r(gpt,"deit"),gpt.forEach(t),uMo=r(Mxe," \u2014 "),Cj=n(Mxe,"A",{href:!0});var hpt=s(Cj);bMo=r(hpt,"DeiTModel"),hpt.forEach(t),vMo=r(Mxe," (DeiT model)"),Mxe.forEach(t),FMo=i(x),u_=n(x,"LI",{});var Exe=s(u_);Dce=n(Exe,"STRONG",{});var ppt=s(Dce);TMo=r(ppt,"detr"),ppt.forEach(t),MMo=r(Exe," \u2014 "),wj=n(Exe,"A",{href:!0});var _pt=s(wj);EMo=r(_pt,"DetrModel"),_pt.forEach(t),CMo=r(Exe," (DETR model)"),Exe.forEach(t),wMo=i(x),b_=n(x,"LI",{});var Cxe=s(b_);Gce=n(Cxe,"STRONG",{});var upt=s(Gce);AMo=r(upt,"distilbert"),upt.forEach(t),LMo=r(Cxe," \u2014 "),Aj=n(Cxe,"A",{href:!0});var bpt=s(Aj);yMo=r(bpt,"DistilBertModel"),bpt.forEach(t),xMo=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),$Mo=i(x),v_=n(x,"LI",{});var wxe=s(v_);Oce=n(wxe,"STRONG",{});var vpt=s(Oce);kMo=r(vpt,"dpr"),vpt.forEach(t),SMo=r(wxe," \u2014 "),Lj=n(wxe,"A",{href:!0});var Fpt=s(Lj);RMo=r(Fpt,"DPRQuestionEncoder"),Fpt.forEach(t),PMo=r(wxe," (DPR model)"),wxe.forEach(t),BMo=i(x),F_=n(x,"LI",{});var Axe=s(F_);Vce=n(Axe,"STRONG",{});var Tpt=s(Vce);IMo=r(Tpt,"dpt"),Tpt.forEach(t),NMo=r(Axe," \u2014 "),yj=n(Axe,"A",{href:!0});var Mpt=s(yj);qMo=r(Mpt,"DPTModel"),Mpt.forEach(t),jMo=r(Axe," (DPT model)"),Axe.forEach(t),DMo=i(x),T_=n(x,"LI",{});var Lxe=s(T_);Xce=n(Lxe,"STRONG",{});var Ept=s(Xce);GMo=r(Ept,"electra"),Ept.forEach(t),OMo=r(Lxe," \u2014 "),xj=n(Lxe,"A",{href:!0});var Cpt=s(xj);VMo=r(Cpt,"ElectraModel"),Cpt.forEach(t),XMo=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),zMo=i(x),M_=n(x,"LI",{});var yxe=s(M_);zce=n(yxe,"STRONG",{});var wpt=s(zce);QMo=r(wpt,"flaubert"),wpt.forEach(t),WMo=r(yxe," \u2014 "),$j=n(yxe,"A",{href:!0});var Apt=s($j);HMo=r(Apt,"FlaubertModel"),Apt.forEach(t),UMo=r(yxe," (FlauBERT model)"),yxe.forEach(t),JMo=i(x),E_=n(x,"LI",{});var xxe=s(E_);Qce=n(xxe,"STRONG",{});var Lpt=s(Qce);YMo=r(Lpt,"flava"),Lpt.forEach(t),KMo=r(xxe," \u2014 "),kj=n(xxe,"A",{href:!0});var ypt=s(kj);ZMo=r(ypt,"FlavaModel"),ypt.forEach(t),e4o=r(xxe," (FLAVA model)"),xxe.forEach(t),o4o=i(x),C_=n(x,"LI",{});var $xe=s(C_);Wce=n($xe,"STRONG",{});var xpt=s(Wce);r4o=r(xpt,"fnet"),xpt.forEach(t),t4o=r($xe," \u2014 "),Sj=n($xe,"A",{href:!0});var $pt=s(Sj);a4o=r($pt,"FNetModel"),$pt.forEach(t),n4o=r($xe," (FNet model)"),$xe.forEach(t),s4o=i(x),w_=n(x,"LI",{});var kxe=s(w_);Hce=n(kxe,"STRONG",{});var kpt=s(Hce);l4o=r(kpt,"fsmt"),kpt.forEach(t),i4o=r(kxe," \u2014 "),Rj=n(kxe,"A",{href:!0});var Spt=s(Rj);d4o=r(Spt,"FSMTModel"),Spt.forEach(t),c4o=r(kxe," (FairSeq Machine-Translation model)"),kxe.forEach(t),f4o=i(x),Ws=n(x,"LI",{});var SS=s(Ws);Uce=n(SS,"STRONG",{});var Rpt=s(Uce);m4o=r(Rpt,"funnel"),Rpt.forEach(t),g4o=r(SS," \u2014 "),Pj=n(SS,"A",{href:!0});var Ppt=s(Pj);h4o=r(Ppt,"FunnelModel"),Ppt.forEach(t),p4o=r(SS," or "),Bj=n(SS,"A",{href:!0});var Bpt=s(Bj);_4o=r(Bpt,"FunnelBaseModel"),Bpt.forEach(t),u4o=r(SS," (Funnel Transformer model)"),SS.forEach(t),b4o=i(x),A_=n(x,"LI",{});var Sxe=s(A_);Jce=n(Sxe,"STRONG",{});var Ipt=s(Jce);v4o=r(Ipt,"glpn"),Ipt.forEach(t),F4o=r(Sxe," \u2014 "),Ij=n(Sxe,"A",{href:!0});var Npt=s(Ij);T4o=r(Npt,"GLPNModel"),Npt.forEach(t),M4o=r(Sxe," (GLPN model)"),Sxe.forEach(t),E4o=i(x),L_=n(x,"LI",{});var Rxe=s(L_);Yce=n(Rxe,"STRONG",{});var qpt=s(Yce);C4o=r(qpt,"gpt2"),qpt.forEach(t),w4o=r(Rxe," \u2014 "),Nj=n(Rxe,"A",{href:!0});var jpt=s(Nj);A4o=r(jpt,"GPT2Model"),jpt.forEach(t),L4o=r(Rxe," (OpenAI GPT-2 model)"),Rxe.forEach(t),y4o=i(x),y_=n(x,"LI",{});var Pxe=s(y_);Kce=n(Pxe,"STRONG",{});var Dpt=s(Kce);x4o=r(Dpt,"gpt_neo"),Dpt.forEach(t),$4o=r(Pxe," \u2014 "),qj=n(Pxe,"A",{href:!0});var Gpt=s(qj);k4o=r(Gpt,"GPTNeoModel"),Gpt.forEach(t),S4o=r(Pxe," (GPT Neo model)"),Pxe.forEach(t),R4o=i(x),x_=n(x,"LI",{});var Bxe=s(x_);Zce=n(Bxe,"STRONG",{});var Opt=s(Zce);P4o=r(Opt,"gpt_neox"),Opt.forEach(t),B4o=r(Bxe," \u2014 "),jj=n(Bxe,"A",{href:!0});var Vpt=s(jj);I4o=r(Vpt,"GPTNeoXModel"),Vpt.forEach(t),N4o=r(Bxe," (GPT NeoX model)"),Bxe.forEach(t),q4o=i(x),$_=n(x,"LI",{});var Ixe=s($_);efe=n(Ixe,"STRONG",{});var Xpt=s(efe);j4o=r(Xpt,"gptj"),Xpt.forEach(t),D4o=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var zpt=s(Dj);G4o=r(zpt,"GPTJModel"),zpt.forEach(t),O4o=r(Ixe," (GPT-J model)"),Ixe.forEach(t),V4o=i(x),k_=n(x,"LI",{});var Nxe=s(k_);ofe=n(Nxe,"STRONG",{});var Qpt=s(ofe);X4o=r(Qpt,"groupvit"),Qpt.forEach(t),z4o=r(Nxe," \u2014 "),Gj=n(Nxe,"A",{href:!0});var Wpt=s(Gj);Q4o=r(Wpt,"GroupViTModel"),Wpt.forEach(t),W4o=r(Nxe," (GroupViT model)"),Nxe.forEach(t),H4o=i(x),S_=n(x,"LI",{});var qxe=s(S_);rfe=n(qxe,"STRONG",{});var Hpt=s(rfe);U4o=r(Hpt,"hubert"),Hpt.forEach(t),J4o=r(qxe," \u2014 "),Oj=n(qxe,"A",{href:!0});var Upt=s(Oj);Y4o=r(Upt,"HubertModel"),Upt.forEach(t),K4o=r(qxe," (Hubert model)"),qxe.forEach(t),Z4o=i(x),R_=n(x,"LI",{});var jxe=s(R_);tfe=n(jxe,"STRONG",{});var Jpt=s(tfe);eEo=r(Jpt,"ibert"),Jpt.forEach(t),oEo=r(jxe," \u2014 "),Vj=n(jxe,"A",{href:!0});var Ypt=s(Vj);rEo=r(Ypt,"IBertModel"),Ypt.forEach(t),tEo=r(jxe," (I-BERT model)"),jxe.forEach(t),aEo=i(x),P_=n(x,"LI",{});var Dxe=s(P_);afe=n(Dxe,"STRONG",{});var Kpt=s(afe);nEo=r(Kpt,"imagegpt"),Kpt.forEach(t),sEo=r(Dxe," \u2014 "),Xj=n(Dxe,"A",{href:!0});var Zpt=s(Xj);lEo=r(Zpt,"ImageGPTModel"),Zpt.forEach(t),iEo=r(Dxe," (ImageGPT model)"),Dxe.forEach(t),dEo=i(x),B_=n(x,"LI",{});var Gxe=s(B_);nfe=n(Gxe,"STRONG",{});var e_t=s(nfe);cEo=r(e_t,"layoutlm"),e_t.forEach(t),fEo=r(Gxe," \u2014 "),zj=n(Gxe,"A",{href:!0});var o_t=s(zj);mEo=r(o_t,"LayoutLMModel"),o_t.forEach(t),gEo=r(Gxe," (LayoutLM model)"),Gxe.forEach(t),hEo=i(x),I_=n(x,"LI",{});var Oxe=s(I_);sfe=n(Oxe,"STRONG",{});var r_t=s(sfe);pEo=r(r_t,"layoutlmv2"),r_t.forEach(t),_Eo=r(Oxe," \u2014 "),Qj=n(Oxe,"A",{href:!0});var t_t=s(Qj);uEo=r(t_t,"LayoutLMv2Model"),t_t.forEach(t),bEo=r(Oxe," (LayoutLMv2 model)"),Oxe.forEach(t),vEo=i(x),N_=n(x,"LI",{});var Vxe=s(N_);lfe=n(Vxe,"STRONG",{});var a_t=s(lfe);FEo=r(a_t,"layoutlmv3"),a_t.forEach(t),TEo=r(Vxe," \u2014 "),Wj=n(Vxe,"A",{href:!0});var n_t=s(Wj);MEo=r(n_t,"LayoutLMv3Model"),n_t.forEach(t),EEo=r(Vxe," (LayoutLMv3 model)"),Vxe.forEach(t),CEo=i(x),q_=n(x,"LI",{});var Xxe=s(q_);ife=n(Xxe,"STRONG",{});var s_t=s(ife);wEo=r(s_t,"led"),s_t.forEach(t),AEo=r(Xxe," \u2014 "),Hj=n(Xxe,"A",{href:!0});var l_t=s(Hj);LEo=r(l_t,"LEDModel"),l_t.forEach(t),yEo=r(Xxe," (LED model)"),Xxe.forEach(t),xEo=i(x),j_=n(x,"LI",{});var zxe=s(j_);dfe=n(zxe,"STRONG",{});var i_t=s(dfe);$Eo=r(i_t,"levit"),i_t.forEach(t),kEo=r(zxe," \u2014 "),Uj=n(zxe,"A",{href:!0});var d_t=s(Uj);SEo=r(d_t,"LevitModel"),d_t.forEach(t),REo=r(zxe," (LeViT model)"),zxe.forEach(t),PEo=i(x),D_=n(x,"LI",{});var Qxe=s(D_);cfe=n(Qxe,"STRONG",{});var c_t=s(cfe);BEo=r(c_t,"longformer"),c_t.forEach(t),IEo=r(Qxe," \u2014 "),Jj=n(Qxe,"A",{href:!0});var f_t=s(Jj);NEo=r(f_t,"LongformerModel"),f_t.forEach(t),qEo=r(Qxe," (Longformer model)"),Qxe.forEach(t),jEo=i(x),G_=n(x,"LI",{});var Wxe=s(G_);ffe=n(Wxe,"STRONG",{});var m_t=s(ffe);DEo=r(m_t,"longt5"),m_t.forEach(t),GEo=r(Wxe," \u2014 "),Yj=n(Wxe,"A",{href:!0});var g_t=s(Yj);OEo=r(g_t,"LongT5Model"),g_t.forEach(t),VEo=r(Wxe," (LongT5 model)"),Wxe.forEach(t),XEo=i(x),O_=n(x,"LI",{});var Hxe=s(O_);mfe=n(Hxe,"STRONG",{});var h_t=s(mfe);zEo=r(h_t,"luke"),h_t.forEach(t),QEo=r(Hxe," \u2014 "),Kj=n(Hxe,"A",{href:!0});var p_t=s(Kj);WEo=r(p_t,"LukeModel"),p_t.forEach(t),HEo=r(Hxe," (LUKE model)"),Hxe.forEach(t),UEo=i(x),V_=n(x,"LI",{});var Uxe=s(V_);gfe=n(Uxe,"STRONG",{});var __t=s(gfe);JEo=r(__t,"lxmert"),__t.forEach(t),YEo=r(Uxe," \u2014 "),Zj=n(Uxe,"A",{href:!0});var u_t=s(Zj);KEo=r(u_t,"LxmertModel"),u_t.forEach(t),ZEo=r(Uxe," (LXMERT model)"),Uxe.forEach(t),eCo=i(x),X_=n(x,"LI",{});var Jxe=s(X_);hfe=n(Jxe,"STRONG",{});var b_t=s(hfe);oCo=r(b_t,"m2m_100"),b_t.forEach(t),rCo=r(Jxe," \u2014 "),eD=n(Jxe,"A",{href:!0});var v_t=s(eD);tCo=r(v_t,"M2M100Model"),v_t.forEach(t),aCo=r(Jxe," (M2M100 model)"),Jxe.forEach(t),nCo=i(x),z_=n(x,"LI",{});var Yxe=s(z_);pfe=n(Yxe,"STRONG",{});var F_t=s(pfe);sCo=r(F_t,"marian"),F_t.forEach(t),lCo=r(Yxe," \u2014 "),oD=n(Yxe,"A",{href:!0});var T_t=s(oD);iCo=r(T_t,"MarianModel"),T_t.forEach(t),dCo=r(Yxe," (Marian model)"),Yxe.forEach(t),cCo=i(x),Q_=n(x,"LI",{});var Kxe=s(Q_);_fe=n(Kxe,"STRONG",{});var M_t=s(_fe);fCo=r(M_t,"maskformer"),M_t.forEach(t),mCo=r(Kxe," \u2014 "),rD=n(Kxe,"A",{href:!0});var E_t=s(rD);gCo=r(E_t,"MaskFormerModel"),E_t.forEach(t),hCo=r(Kxe," (MaskFormer model)"),Kxe.forEach(t),pCo=i(x),W_=n(x,"LI",{});var Zxe=s(W_);ufe=n(Zxe,"STRONG",{});var C_t=s(ufe);_Co=r(C_t,"mbart"),C_t.forEach(t),uCo=r(Zxe," \u2014 "),tD=n(Zxe,"A",{href:!0});var w_t=s(tD);bCo=r(w_t,"MBartModel"),w_t.forEach(t),vCo=r(Zxe," (mBART model)"),Zxe.forEach(t),FCo=i(x),H_=n(x,"LI",{});var e$e=s(H_);bfe=n(e$e,"STRONG",{});var A_t=s(bfe);TCo=r(A_t,"mctct"),A_t.forEach(t),MCo=r(e$e," \u2014 "),aD=n(e$e,"A",{href:!0});var L_t=s(aD);ECo=r(L_t,"MCTCTModel"),L_t.forEach(t),CCo=r(e$e," (M-CTC-T model)"),e$e.forEach(t),wCo=i(x),U_=n(x,"LI",{});var o$e=s(U_);vfe=n(o$e,"STRONG",{});var y_t=s(vfe);ACo=r(y_t,"megatron-bert"),y_t.forEach(t),LCo=r(o$e," \u2014 "),nD=n(o$e,"A",{href:!0});var x_t=s(nD);yCo=r(x_t,"MegatronBertModel"),x_t.forEach(t),xCo=r(o$e," (Megatron-BERT model)"),o$e.forEach(t),$Co=i(x),J_=n(x,"LI",{});var r$e=s(J_);Ffe=n(r$e,"STRONG",{});var $_t=s(Ffe);kCo=r($_t,"mobilebert"),$_t.forEach(t),SCo=r(r$e," \u2014 "),sD=n(r$e,"A",{href:!0});var k_t=s(sD);RCo=r(k_t,"MobileBertModel"),k_t.forEach(t),PCo=r(r$e," (MobileBERT model)"),r$e.forEach(t),BCo=i(x),Y_=n(x,"LI",{});var t$e=s(Y_);Tfe=n(t$e,"STRONG",{});var S_t=s(Tfe);ICo=r(S_t,"mobilevit"),S_t.forEach(t),NCo=r(t$e," \u2014 "),lD=n(t$e,"A",{href:!0});var R_t=s(lD);qCo=r(R_t,"MobileViTModel"),R_t.forEach(t),jCo=r(t$e," (MobileViT model)"),t$e.forEach(t),DCo=i(x),K_=n(x,"LI",{});var a$e=s(K_);Mfe=n(a$e,"STRONG",{});var P_t=s(Mfe);GCo=r(P_t,"mpnet"),P_t.forEach(t),OCo=r(a$e," \u2014 "),iD=n(a$e,"A",{href:!0});var B_t=s(iD);VCo=r(B_t,"MPNetModel"),B_t.forEach(t),XCo=r(a$e," (MPNet model)"),a$e.forEach(t),zCo=i(x),Z_=n(x,"LI",{});var n$e=s(Z_);Efe=n(n$e,"STRONG",{});var I_t=s(Efe);QCo=r(I_t,"mt5"),I_t.forEach(t),WCo=r(n$e," \u2014 "),dD=n(n$e,"A",{href:!0});var N_t=s(dD);HCo=r(N_t,"MT5Model"),N_t.forEach(t),UCo=r(n$e," (MT5 model)"),n$e.forEach(t),JCo=i(x),eu=n(x,"LI",{});var s$e=s(eu);Cfe=n(s$e,"STRONG",{});var q_t=s(Cfe);YCo=r(q_t,"mvp"),q_t.forEach(t),KCo=r(s$e," \u2014 "),cD=n(s$e,"A",{href:!0});var j_t=s(cD);ZCo=r(j_t,"MvpModel"),j_t.forEach(t),e3o=r(s$e," (MVP model)"),s$e.forEach(t),o3o=i(x),ou=n(x,"LI",{});var l$e=s(ou);wfe=n(l$e,"STRONG",{});var D_t=s(wfe);r3o=r(D_t,"nezha"),D_t.forEach(t),t3o=r(l$e," \u2014 "),fD=n(l$e,"A",{href:!0});var G_t=s(fD);a3o=r(G_t,"NezhaModel"),G_t.forEach(t),n3o=r(l$e," (Nezha model)"),l$e.forEach(t),s3o=i(x),ru=n(x,"LI",{});var i$e=s(ru);Afe=n(i$e,"STRONG",{});var O_t=s(Afe);l3o=r(O_t,"nystromformer"),O_t.forEach(t),i3o=r(i$e," \u2014 "),mD=n(i$e,"A",{href:!0});var V_t=s(mD);d3o=r(V_t,"NystromformerModel"),V_t.forEach(t),c3o=r(i$e," (Nystr\xF6mformer model)"),i$e.forEach(t),f3o=i(x),tu=n(x,"LI",{});var d$e=s(tu);Lfe=n(d$e,"STRONG",{});var X_t=s(Lfe);m3o=r(X_t,"openai-gpt"),X_t.forEach(t),g3o=r(d$e," \u2014 "),gD=n(d$e,"A",{href:!0});var z_t=s(gD);h3o=r(z_t,"OpenAIGPTModel"),z_t.forEach(t),p3o=r(d$e," (OpenAI GPT model)"),d$e.forEach(t),_3o=i(x),au=n(x,"LI",{});var c$e=s(au);yfe=n(c$e,"STRONG",{});var Q_t=s(yfe);u3o=r(Q_t,"opt"),Q_t.forEach(t),b3o=r(c$e," \u2014 "),hD=n(c$e,"A",{href:!0});var W_t=s(hD);v3o=r(W_t,"OPTModel"),W_t.forEach(t),F3o=r(c$e," (OPT model)"),c$e.forEach(t),T3o=i(x),nu=n(x,"LI",{});var f$e=s(nu);xfe=n(f$e,"STRONG",{});var H_t=s(xfe);M3o=r(H_t,"pegasus"),H_t.forEach(t),E3o=r(f$e," \u2014 "),pD=n(f$e,"A",{href:!0});var U_t=s(pD);C3o=r(U_t,"PegasusModel"),U_t.forEach(t),w3o=r(f$e," (Pegasus model)"),f$e.forEach(t),A3o=i(x),su=n(x,"LI",{});var m$e=s(su);$fe=n(m$e,"STRONG",{});var J_t=s($fe);L3o=r(J_t,"perceiver"),J_t.forEach(t),y3o=r(m$e," \u2014 "),_D=n(m$e,"A",{href:!0});var Y_t=s(_D);x3o=r(Y_t,"PerceiverModel"),Y_t.forEach(t),$3o=r(m$e," (Perceiver model)"),m$e.forEach(t),k3o=i(x),lu=n(x,"LI",{});var g$e=s(lu);kfe=n(g$e,"STRONG",{});var K_t=s(kfe);S3o=r(K_t,"plbart"),K_t.forEach(t),R3o=r(g$e," \u2014 "),uD=n(g$e,"A",{href:!0});var Z_t=s(uD);P3o=r(Z_t,"PLBartModel"),Z_t.forEach(t),B3o=r(g$e," (PLBart model)"),g$e.forEach(t),I3o=i(x),iu=n(x,"LI",{});var h$e=s(iu);Sfe=n(h$e,"STRONG",{});var eut=s(Sfe);N3o=r(eut,"poolformer"),eut.forEach(t),q3o=r(h$e," \u2014 "),bD=n(h$e,"A",{href:!0});var out=s(bD);j3o=r(out,"PoolFormerModel"),out.forEach(t),D3o=r(h$e," (PoolFormer model)"),h$e.forEach(t),G3o=i(x),du=n(x,"LI",{});var p$e=s(du);Rfe=n(p$e,"STRONG",{});var rut=s(Rfe);O3o=r(rut,"prophetnet"),rut.forEach(t),V3o=r(p$e," \u2014 "),vD=n(p$e,"A",{href:!0});var tut=s(vD);X3o=r(tut,"ProphetNetModel"),tut.forEach(t),z3o=r(p$e," (ProphetNet model)"),p$e.forEach(t),Q3o=i(x),cu=n(x,"LI",{});var _$e=s(cu);Pfe=n(_$e,"STRONG",{});var aut=s(Pfe);W3o=r(aut,"qdqbert"),aut.forEach(t),H3o=r(_$e," \u2014 "),FD=n(_$e,"A",{href:!0});var nut=s(FD);U3o=r(nut,"QDQBertModel"),nut.forEach(t),J3o=r(_$e," (QDQBert model)"),_$e.forEach(t),Y3o=i(x),fu=n(x,"LI",{});var u$e=s(fu);Bfe=n(u$e,"STRONG",{});var sut=s(Bfe);K3o=r(sut,"reformer"),sut.forEach(t),Z3o=r(u$e," \u2014 "),TD=n(u$e,"A",{href:!0});var lut=s(TD);e5o=r(lut,"ReformerModel"),lut.forEach(t),o5o=r(u$e," (Reformer model)"),u$e.forEach(t),r5o=i(x),mu=n(x,"LI",{});var b$e=s(mu);Ife=n(b$e,"STRONG",{});var iut=s(Ife);t5o=r(iut,"regnet"),iut.forEach(t),a5o=r(b$e," \u2014 "),MD=n(b$e,"A",{href:!0});var dut=s(MD);n5o=r(dut,"RegNetModel"),dut.forEach(t),s5o=r(b$e," (RegNet model)"),b$e.forEach(t),l5o=i(x),gu=n(x,"LI",{});var v$e=s(gu);Nfe=n(v$e,"STRONG",{});var cut=s(Nfe);i5o=r(cut,"rembert"),cut.forEach(t),d5o=r(v$e," \u2014 "),ED=n(v$e,"A",{href:!0});var fut=s(ED);c5o=r(fut,"RemBertModel"),fut.forEach(t),f5o=r(v$e," (RemBERT model)"),v$e.forEach(t),m5o=i(x),hu=n(x,"LI",{});var F$e=s(hu);qfe=n(F$e,"STRONG",{});var mut=s(qfe);g5o=r(mut,"resnet"),mut.forEach(t),h5o=r(F$e," \u2014 "),CD=n(F$e,"A",{href:!0});var gut=s(CD);p5o=r(gut,"ResNetModel"),gut.forEach(t),_5o=r(F$e," (ResNet model)"),F$e.forEach(t),u5o=i(x),pu=n(x,"LI",{});var T$e=s(pu);jfe=n(T$e,"STRONG",{});var hut=s(jfe);b5o=r(hut,"retribert"),hut.forEach(t),v5o=r(T$e," \u2014 "),wD=n(T$e,"A",{href:!0});var put=s(wD);F5o=r(put,"RetriBertModel"),put.forEach(t),T5o=r(T$e," (RetriBERT model)"),T$e.forEach(t),M5o=i(x),_u=n(x,"LI",{});var M$e=s(_u);Dfe=n(M$e,"STRONG",{});var _ut=s(Dfe);E5o=r(_ut,"roberta"),_ut.forEach(t),C5o=r(M$e," \u2014 "),AD=n(M$e,"A",{href:!0});var uut=s(AD);w5o=r(uut,"RobertaModel"),uut.forEach(t),A5o=r(M$e," (RoBERTa model)"),M$e.forEach(t),L5o=i(x),uu=n(x,"LI",{});var E$e=s(uu);Gfe=n(E$e,"STRONG",{});var but=s(Gfe);y5o=r(but,"roformer"),but.forEach(t),x5o=r(E$e," \u2014 "),LD=n(E$e,"A",{href:!0});var vut=s(LD);$5o=r(vut,"RoFormerModel"),vut.forEach(t),k5o=r(E$e," (RoFormer model)"),E$e.forEach(t),S5o=i(x),bu=n(x,"LI",{});var C$e=s(bu);Ofe=n(C$e,"STRONG",{});var Fut=s(Ofe);R5o=r(Fut,"segformer"),Fut.forEach(t),P5o=r(C$e," \u2014 "),yD=n(C$e,"A",{href:!0});var Tut=s(yD);B5o=r(Tut,"SegformerModel"),Tut.forEach(t),I5o=r(C$e," (SegFormer model)"),C$e.forEach(t),N5o=i(x),vu=n(x,"LI",{});var w$e=s(vu);Vfe=n(w$e,"STRONG",{});var Mut=s(Vfe);q5o=r(Mut,"sew"),Mut.forEach(t),j5o=r(w$e," \u2014 "),xD=n(w$e,"A",{href:!0});var Eut=s(xD);D5o=r(Eut,"SEWModel"),Eut.forEach(t),G5o=r(w$e," (SEW model)"),w$e.forEach(t),O5o=i(x),Fu=n(x,"LI",{});var A$e=s(Fu);Xfe=n(A$e,"STRONG",{});var Cut=s(Xfe);V5o=r(Cut,"sew-d"),Cut.forEach(t),X5o=r(A$e," \u2014 "),$D=n(A$e,"A",{href:!0});var wut=s($D);z5o=r(wut,"SEWDModel"),wut.forEach(t),Q5o=r(A$e," (SEW-D model)"),A$e.forEach(t),W5o=i(x),Tu=n(x,"LI",{});var L$e=s(Tu);zfe=n(L$e,"STRONG",{});var Aut=s(zfe);H5o=r(Aut,"speech_to_text"),Aut.forEach(t),U5o=r(L$e," \u2014 "),kD=n(L$e,"A",{href:!0});var Lut=s(kD);J5o=r(Lut,"Speech2TextModel"),Lut.forEach(t),Y5o=r(L$e," (Speech2Text model)"),L$e.forEach(t),K5o=i(x),Mu=n(x,"LI",{});var y$e=s(Mu);Qfe=n(y$e,"STRONG",{});var yut=s(Qfe);Z5o=r(yut,"splinter"),yut.forEach(t),e0o=r(y$e," \u2014 "),SD=n(y$e,"A",{href:!0});var xut=s(SD);o0o=r(xut,"SplinterModel"),xut.forEach(t),r0o=r(y$e," (Splinter model)"),y$e.forEach(t),t0o=i(x),Eu=n(x,"LI",{});var x$e=s(Eu);Wfe=n(x$e,"STRONG",{});var $ut=s(Wfe);a0o=r($ut,"squeezebert"),$ut.forEach(t),n0o=r(x$e," \u2014 "),RD=n(x$e,"A",{href:!0});var kut=s(RD);s0o=r(kut,"SqueezeBertModel"),kut.forEach(t),l0o=r(x$e," (SqueezeBERT model)"),x$e.forEach(t),i0o=i(x),Cu=n(x,"LI",{});var $$e=s(Cu);Hfe=n($$e,"STRONG",{});var Sut=s(Hfe);d0o=r(Sut,"swin"),Sut.forEach(t),c0o=r($$e," \u2014 "),PD=n($$e,"A",{href:!0});var Rut=s(PD);f0o=r(Rut,"SwinModel"),Rut.forEach(t),m0o=r($$e," (Swin Transformer model)"),$$e.forEach(t),g0o=i(x),wu=n(x,"LI",{});var k$e=s(wu);Ufe=n(k$e,"STRONG",{});var Put=s(Ufe);h0o=r(Put,"t5"),Put.forEach(t),p0o=r(k$e," \u2014 "),BD=n(k$e,"A",{href:!0});var But=s(BD);_0o=r(But,"T5Model"),But.forEach(t),u0o=r(k$e," (T5 model)"),k$e.forEach(t),b0o=i(x),Au=n(x,"LI",{});var S$e=s(Au);Jfe=n(S$e,"STRONG",{});var Iut=s(Jfe);v0o=r(Iut,"tapas"),Iut.forEach(t),F0o=r(S$e," \u2014 "),ID=n(S$e,"A",{href:!0});var Nut=s(ID);T0o=r(Nut,"TapasModel"),Nut.forEach(t),M0o=r(S$e," (TAPAS model)"),S$e.forEach(t),E0o=i(x),Lu=n(x,"LI",{});var R$e=s(Lu);Yfe=n(R$e,"STRONG",{});var qut=s(Yfe);C0o=r(qut,"trajectory_transformer"),qut.forEach(t),w0o=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var jut=s(ND);A0o=r(jut,"TrajectoryTransformerModel"),jut.forEach(t),L0o=r(R$e," (Trajectory Transformer model)"),R$e.forEach(t),y0o=i(x),yu=n(x,"LI",{});var P$e=s(yu);Kfe=n(P$e,"STRONG",{});var Dut=s(Kfe);x0o=r(Dut,"transfo-xl"),Dut.forEach(t),$0o=r(P$e," \u2014 "),qD=n(P$e,"A",{href:!0});var Gut=s(qD);k0o=r(Gut,"TransfoXLModel"),Gut.forEach(t),S0o=r(P$e," (Transformer-XL model)"),P$e.forEach(t),R0o=i(x),xu=n(x,"LI",{});var B$e=s(xu);Zfe=n(B$e,"STRONG",{});var Out=s(Zfe);P0o=r(Out,"unispeech"),Out.forEach(t),B0o=r(B$e," \u2014 "),jD=n(B$e,"A",{href:!0});var Vut=s(jD);I0o=r(Vut,"UniSpeechModel"),Vut.forEach(t),N0o=r(B$e," (UniSpeech model)"),B$e.forEach(t),q0o=i(x),$u=n(x,"LI",{});var I$e=s($u);eme=n(I$e,"STRONG",{});var Xut=s(eme);j0o=r(Xut,"unispeech-sat"),Xut.forEach(t),D0o=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var zut=s(DD);G0o=r(zut,"UniSpeechSatModel"),zut.forEach(t),O0o=r(I$e," (UniSpeechSat model)"),I$e.forEach(t),V0o=i(x),ku=n(x,"LI",{});var N$e=s(ku);ome=n(N$e,"STRONG",{});var Qut=s(ome);X0o=r(Qut,"van"),Qut.forEach(t),z0o=r(N$e," \u2014 "),GD=n(N$e,"A",{href:!0});var Wut=s(GD);Q0o=r(Wut,"VanModel"),Wut.forEach(t),W0o=r(N$e," (VAN model)"),N$e.forEach(t),H0o=i(x),Su=n(x,"LI",{});var q$e=s(Su);rme=n(q$e,"STRONG",{});var Hut=s(rme);U0o=r(Hut,"vilt"),Hut.forEach(t),J0o=r(q$e," \u2014 "),OD=n(q$e,"A",{href:!0});var Uut=s(OD);Y0o=r(Uut,"ViltModel"),Uut.forEach(t),K0o=r(q$e," (ViLT model)"),q$e.forEach(t),Z0o=i(x),Ru=n(x,"LI",{});var j$e=s(Ru);tme=n(j$e,"STRONG",{});var Jut=s(tme);ewo=r(Jut,"vision-text-dual-encoder"),Jut.forEach(t),owo=r(j$e," \u2014 "),VD=n(j$e,"A",{href:!0});var Yut=s(VD);rwo=r(Yut,"VisionTextDualEncoderModel"),Yut.forEach(t),two=r(j$e," (VisionTextDualEncoder model)"),j$e.forEach(t),awo=i(x),Pu=n(x,"LI",{});var D$e=s(Pu);ame=n(D$e,"STRONG",{});var Kut=s(ame);nwo=r(Kut,"visual_bert"),Kut.forEach(t),swo=r(D$e," \u2014 "),XD=n(D$e,"A",{href:!0});var Zut=s(XD);lwo=r(Zut,"VisualBertModel"),Zut.forEach(t),iwo=r(D$e," (VisualBERT model)"),D$e.forEach(t),dwo=i(x),Bu=n(x,"LI",{});var G$e=s(Bu);nme=n(G$e,"STRONG",{});var e1t=s(nme);cwo=r(e1t,"vit"),e1t.forEach(t),fwo=r(G$e," \u2014 "),zD=n(G$e,"A",{href:!0});var o1t=s(zD);mwo=r(o1t,"ViTModel"),o1t.forEach(t),gwo=r(G$e," (ViT model)"),G$e.forEach(t),hwo=i(x),Iu=n(x,"LI",{});var O$e=s(Iu);sme=n(O$e,"STRONG",{});var r1t=s(sme);pwo=r(r1t,"vit_mae"),r1t.forEach(t),_wo=r(O$e," \u2014 "),QD=n(O$e,"A",{href:!0});var t1t=s(QD);uwo=r(t1t,"ViTMAEModel"),t1t.forEach(t),bwo=r(O$e," (ViTMAE model)"),O$e.forEach(t),vwo=i(x),Nu=n(x,"LI",{});var V$e=s(Nu);lme=n(V$e,"STRONG",{});var a1t=s(lme);Fwo=r(a1t,"wav2vec2"),a1t.forEach(t),Two=r(V$e," \u2014 "),WD=n(V$e,"A",{href:!0});var n1t=s(WD);Mwo=r(n1t,"Wav2Vec2Model"),n1t.forEach(t),Ewo=r(V$e," (Wav2Vec2 model)"),V$e.forEach(t),Cwo=i(x),qu=n(x,"LI",{});var X$e=s(qu);ime=n(X$e,"STRONG",{});var s1t=s(ime);wwo=r(s1t,"wav2vec2-conformer"),s1t.forEach(t),Awo=r(X$e," \u2014 "),HD=n(X$e,"A",{href:!0});var l1t=s(HD);Lwo=r(l1t,"Wav2Vec2ConformerModel"),l1t.forEach(t),ywo=r(X$e," (Wav2Vec2-Conformer model)"),X$e.forEach(t),xwo=i(x),ju=n(x,"LI",{});var z$e=s(ju);dme=n(z$e,"STRONG",{});var i1t=s(dme);$wo=r(i1t,"wavlm"),i1t.forEach(t),kwo=r(z$e," \u2014 "),UD=n(z$e,"A",{href:!0});var d1t=s(UD);Swo=r(d1t,"WavLMModel"),d1t.forEach(t),Rwo=r(z$e," (WavLM model)"),z$e.forEach(t),Pwo=i(x),Du=n(x,"LI",{});var Q$e=s(Du);cme=n(Q$e,"STRONG",{});var c1t=s(cme);Bwo=r(c1t,"xglm"),c1t.forEach(t),Iwo=r(Q$e," \u2014 "),JD=n(Q$e,"A",{href:!0});var f1t=s(JD);Nwo=r(f1t,"XGLMModel"),f1t.forEach(t),qwo=r(Q$e," (XGLM model)"),Q$e.forEach(t),jwo=i(x),Gu=n(x,"LI",{});var W$e=s(Gu);fme=n(W$e,"STRONG",{});var m1t=s(fme);Dwo=r(m1t,"xlm"),m1t.forEach(t),Gwo=r(W$e," \u2014 "),YD=n(W$e,"A",{href:!0});var g1t=s(YD);Owo=r(g1t,"XLMModel"),g1t.forEach(t),Vwo=r(W$e," (XLM model)"),W$e.forEach(t),Xwo=i(x),Ou=n(x,"LI",{});var H$e=s(Ou);mme=n(H$e,"STRONG",{});var h1t=s(mme);zwo=r(h1t,"xlm-prophetnet"),h1t.forEach(t),Qwo=r(H$e," \u2014 "),KD=n(H$e,"A",{href:!0});var p1t=s(KD);Wwo=r(p1t,"XLMProphetNetModel"),p1t.forEach(t),Hwo=r(H$e," (XLM-ProphetNet model)"),H$e.forEach(t),Uwo=i(x),Vu=n(x,"LI",{});var U$e=s(Vu);gme=n(U$e,"STRONG",{});var _1t=s(gme);Jwo=r(_1t,"xlm-roberta"),_1t.forEach(t),Ywo=r(U$e," \u2014 "),ZD=n(U$e,"A",{href:!0});var u1t=s(ZD);Kwo=r(u1t,"XLMRobertaModel"),u1t.forEach(t),Zwo=r(U$e," (XLM-RoBERTa model)"),U$e.forEach(t),eAo=i(x),Xu=n(x,"LI",{});var J$e=s(Xu);hme=n(J$e,"STRONG",{});var b1t=s(hme);oAo=r(b1t,"xlm-roberta-xl"),b1t.forEach(t),rAo=r(J$e," \u2014 "),eG=n(J$e,"A",{href:!0});var v1t=s(eG);tAo=r(v1t,"XLMRobertaXLModel"),v1t.forEach(t),aAo=r(J$e," (XLM-RoBERTa-XL model)"),J$e.forEach(t),nAo=i(x),zu=n(x,"LI",{});var Y$e=s(zu);pme=n(Y$e,"STRONG",{});var F1t=s(pme);sAo=r(F1t,"xlnet"),F1t.forEach(t),lAo=r(Y$e," \u2014 "),oG=n(Y$e,"A",{href:!0});var T1t=s(oG);iAo=r(T1t,"XLNetModel"),T1t.forEach(t),dAo=r(Y$e," (XLNet model)"),Y$e.forEach(t),cAo=i(x),Qu=n(x,"LI",{});var K$e=s(Qu);_me=n(K$e,"STRONG",{});var M1t=s(_me);fAo=r(M1t,"yolos"),M1t.forEach(t),mAo=r(K$e," \u2014 "),rG=n(K$e,"A",{href:!0});var E1t=s(rG);gAo=r(E1t,"YolosModel"),E1t.forEach(t),hAo=r(K$e," (YOLOS model)"),K$e.forEach(t),pAo=i(x),Wu=n(x,"LI",{});var Z$e=s(Wu);ume=n(Z$e,"STRONG",{});var C1t=s(ume);_Ao=r(C1t,"yoso"),C1t.forEach(t),uAo=r(Z$e," \u2014 "),tG=n(Z$e,"A",{href:!0});var w1t=s(tG);bAo=r(w1t,"YosoModel"),w1t.forEach(t),vAo=r(Z$e," (YOSO model)"),Z$e.forEach(t),x.forEach(t),FAo=i(sa),Hu=n(sa,"P",{});var eke=s(Hu);TAo=r(eke,"The model is set in evaluation mode by default using "),bme=n(eke,"CODE",{});var A1t=s(bme);MAo=r(A1t,"model.eval()"),A1t.forEach(t),EAo=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(eke,"CODE",{});var L1t=s(vme);CAo=r(L1t,"model.train()"),L1t.forEach(t),eke.forEach(t),wAo=i(sa),T(Uu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),FXe=i(f),Vi=n(f,"H2",{class:!0});var AQe=s(Vi);Ju=n(AQe,"A",{id:!0,class:!0,href:!0});var y1t=s(Ju);Fme=n(y1t,"SPAN",{});var x1t=s(Fme);T(qL.$$.fragment,x1t),x1t.forEach(t),y1t.forEach(t),AAo=i(AQe),Tme=n(AQe,"SPAN",{});var $1t=s(Tme);LAo=r($1t,"AutoModelForPreTraining"),$1t.forEach(t),AQe.forEach(t),TXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(jL.$$.fragment,rl),yAo=i(rl),Xi=n(rl,"P",{});var Bre=s(Xi);xAo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aG=n(Bre,"A",{href:!0});var k1t=s(aG);$Ao=r(k1t,"from_pretrained()"),k1t.forEach(t),kAo=r(Bre," class method or the "),nG=n(Bre,"A",{href:!0});var S1t=s(nG);SAo=r(S1t,"from_config()"),S1t.forEach(t),RAo=r(Bre,` class
method.`),Bre.forEach(t),PAo=i(rl),DL=n(rl,"P",{});var LQe=s(DL);BAo=r(LQe,"This class cannot be instantiated directly using "),Mme=n(LQe,"CODE",{});var R1t=s(Mme);IAo=r(R1t,"__init__()"),R1t.forEach(t),NAo=r(LQe," (throws an error)."),LQe.forEach(t),qAo=i(rl),it=n(rl,"DIV",{class:!0});var gA=s(it);T(GL.$$.fragment,gA),jAo=i(gA),Eme=n(gA,"P",{});var P1t=s(Eme);DAo=r(P1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P1t.forEach(t),GAo=i(gA),zi=n(gA,"P",{});var Ire=s(zi);OAo=r(Ire,`Note:
Loading a model from its configuration file does `),Cme=n(Ire,"STRONG",{});var B1t=s(Cme);VAo=r(B1t,"not"),B1t.forEach(t),XAo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(Ire,"A",{href:!0});var I1t=s(sG);zAo=r(I1t,"from_pretrained()"),I1t.forEach(t),QAo=r(Ire," to load the model weights."),Ire.forEach(t),WAo=i(gA),T(Yu.$$.fragment,gA),gA.forEach(t),HAo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(OL.$$.fragment,la),UAo=i(la),wme=n(la,"P",{});var N1t=s(wme);JAo=r(N1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N1t.forEach(t),YAo=i(la),Na=n(la,"P",{});var hA=s(Na);KAo=r(hA,"The model class to instantiate is selected based on the "),Ame=n(hA,"CODE",{});var q1t=s(Ame);ZAo=r(q1t,"model_type"),q1t.forEach(t),e6o=r(hA,` property of the config object (either
passed as an argument or loaded from `),Lme=n(hA,"CODE",{});var j1t=s(Lme);o6o=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),r6o=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(hA,"CODE",{});var D1t=s(yme);t6o=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),a6o=r(hA,":"),hA.forEach(t),n6o=i(la),G=n(la,"UL",{});var O=s(G);Ku=n(O,"LI",{});var oke=s(Ku);xme=n(oke,"STRONG",{});var G1t=s(xme);s6o=r(G1t,"albert"),G1t.forEach(t),l6o=r(oke," \u2014 "),lG=n(oke,"A",{href:!0});var O1t=s(lG);i6o=r(O1t,"AlbertForPreTraining"),O1t.forEach(t),d6o=r(oke," (ALBERT model)"),oke.forEach(t),c6o=i(O),Zu=n(O,"LI",{});var rke=s(Zu);$me=n(rke,"STRONG",{});var V1t=s($me);f6o=r(V1t,"bart"),V1t.forEach(t),m6o=r(rke," \u2014 "),iG=n(rke,"A",{href:!0});var X1t=s(iG);g6o=r(X1t,"BartForConditionalGeneration"),X1t.forEach(t),h6o=r(rke," (BART model)"),rke.forEach(t),p6o=i(O),e1=n(O,"LI",{});var tke=s(e1);kme=n(tke,"STRONG",{});var z1t=s(kme);_6o=r(z1t,"bert"),z1t.forEach(t),u6o=r(tke," \u2014 "),dG=n(tke,"A",{href:!0});var Q1t=s(dG);b6o=r(Q1t,"BertForPreTraining"),Q1t.forEach(t),v6o=r(tke," (BERT model)"),tke.forEach(t),F6o=i(O),o1=n(O,"LI",{});var ake=s(o1);Sme=n(ake,"STRONG",{});var W1t=s(Sme);T6o=r(W1t,"big_bird"),W1t.forEach(t),M6o=r(ake," \u2014 "),cG=n(ake,"A",{href:!0});var H1t=s(cG);E6o=r(H1t,"BigBirdForPreTraining"),H1t.forEach(t),C6o=r(ake," (BigBird model)"),ake.forEach(t),w6o=i(O),r1=n(O,"LI",{});var nke=s(r1);Rme=n(nke,"STRONG",{});var U1t=s(Rme);A6o=r(U1t,"bloom"),U1t.forEach(t),L6o=r(nke," \u2014 "),fG=n(nke,"A",{href:!0});var J1t=s(fG);y6o=r(J1t,"BloomForCausalLM"),J1t.forEach(t),x6o=r(nke," (BLOOM model)"),nke.forEach(t),$6o=i(O),t1=n(O,"LI",{});var ske=s(t1);Pme=n(ske,"STRONG",{});var Y1t=s(Pme);k6o=r(Y1t,"camembert"),Y1t.forEach(t),S6o=r(ske," \u2014 "),mG=n(ske,"A",{href:!0});var K1t=s(mG);R6o=r(K1t,"CamembertForMaskedLM"),K1t.forEach(t),P6o=r(ske," (CamemBERT model)"),ske.forEach(t),B6o=i(O),a1=n(O,"LI",{});var lke=s(a1);Bme=n(lke,"STRONG",{});var Z1t=s(Bme);I6o=r(Z1t,"ctrl"),Z1t.forEach(t),N6o=r(lke," \u2014 "),gG=n(lke,"A",{href:!0});var e2t=s(gG);q6o=r(e2t,"CTRLLMHeadModel"),e2t.forEach(t),j6o=r(lke," (CTRL model)"),lke.forEach(t),D6o=i(O),n1=n(O,"LI",{});var ike=s(n1);Ime=n(ike,"STRONG",{});var o2t=s(Ime);G6o=r(o2t,"data2vec-text"),o2t.forEach(t),O6o=r(ike," \u2014 "),hG=n(ike,"A",{href:!0});var r2t=s(hG);V6o=r(r2t,"Data2VecTextForMaskedLM"),r2t.forEach(t),X6o=r(ike," (Data2VecText model)"),ike.forEach(t),z6o=i(O),s1=n(O,"LI",{});var dke=s(s1);Nme=n(dke,"STRONG",{});var t2t=s(Nme);Q6o=r(t2t,"deberta"),t2t.forEach(t),W6o=r(dke," \u2014 "),pG=n(dke,"A",{href:!0});var a2t=s(pG);H6o=r(a2t,"DebertaForMaskedLM"),a2t.forEach(t),U6o=r(dke," (DeBERTa model)"),dke.forEach(t),J6o=i(O),l1=n(O,"LI",{});var cke=s(l1);qme=n(cke,"STRONG",{});var n2t=s(qme);Y6o=r(n2t,"deberta-v2"),n2t.forEach(t),K6o=r(cke," \u2014 "),_G=n(cke,"A",{href:!0});var s2t=s(_G);Z6o=r(s2t,"DebertaV2ForMaskedLM"),s2t.forEach(t),eLo=r(cke," (DeBERTa-v2 model)"),cke.forEach(t),oLo=i(O),i1=n(O,"LI",{});var fke=s(i1);jme=n(fke,"STRONG",{});var l2t=s(jme);rLo=r(l2t,"distilbert"),l2t.forEach(t),tLo=r(fke," \u2014 "),uG=n(fke,"A",{href:!0});var i2t=s(uG);aLo=r(i2t,"DistilBertForMaskedLM"),i2t.forEach(t),nLo=r(fke," (DistilBERT model)"),fke.forEach(t),sLo=i(O),d1=n(O,"LI",{});var mke=s(d1);Dme=n(mke,"STRONG",{});var d2t=s(Dme);lLo=r(d2t,"electra"),d2t.forEach(t),iLo=r(mke," \u2014 "),bG=n(mke,"A",{href:!0});var c2t=s(bG);dLo=r(c2t,"ElectraForPreTraining"),c2t.forEach(t),cLo=r(mke," (ELECTRA model)"),mke.forEach(t),fLo=i(O),c1=n(O,"LI",{});var gke=s(c1);Gme=n(gke,"STRONG",{});var f2t=s(Gme);mLo=r(f2t,"flaubert"),f2t.forEach(t),gLo=r(gke," \u2014 "),vG=n(gke,"A",{href:!0});var m2t=s(vG);hLo=r(m2t,"FlaubertWithLMHeadModel"),m2t.forEach(t),pLo=r(gke," (FlauBERT model)"),gke.forEach(t),_Lo=i(O),f1=n(O,"LI",{});var hke=s(f1);Ome=n(hke,"STRONG",{});var g2t=s(Ome);uLo=r(g2t,"flava"),g2t.forEach(t),bLo=r(hke," \u2014 "),FG=n(hke,"A",{href:!0});var h2t=s(FG);vLo=r(h2t,"FlavaForPreTraining"),h2t.forEach(t),FLo=r(hke," (FLAVA model)"),hke.forEach(t),TLo=i(O),m1=n(O,"LI",{});var pke=s(m1);Vme=n(pke,"STRONG",{});var p2t=s(Vme);MLo=r(p2t,"fnet"),p2t.forEach(t),ELo=r(pke," \u2014 "),TG=n(pke,"A",{href:!0});var _2t=s(TG);CLo=r(_2t,"FNetForPreTraining"),_2t.forEach(t),wLo=r(pke," (FNet model)"),pke.forEach(t),ALo=i(O),g1=n(O,"LI",{});var _ke=s(g1);Xme=n(_ke,"STRONG",{});var u2t=s(Xme);LLo=r(u2t,"fsmt"),u2t.forEach(t),yLo=r(_ke," \u2014 "),MG=n(_ke,"A",{href:!0});var b2t=s(MG);xLo=r(b2t,"FSMTForConditionalGeneration"),b2t.forEach(t),$Lo=r(_ke," (FairSeq Machine-Translation model)"),_ke.forEach(t),kLo=i(O),h1=n(O,"LI",{});var uke=s(h1);zme=n(uke,"STRONG",{});var v2t=s(zme);SLo=r(v2t,"funnel"),v2t.forEach(t),RLo=r(uke," \u2014 "),EG=n(uke,"A",{href:!0});var F2t=s(EG);PLo=r(F2t,"FunnelForPreTraining"),F2t.forEach(t),BLo=r(uke," (Funnel Transformer model)"),uke.forEach(t),ILo=i(O),p1=n(O,"LI",{});var bke=s(p1);Qme=n(bke,"STRONG",{});var T2t=s(Qme);NLo=r(T2t,"gpt2"),T2t.forEach(t),qLo=r(bke," \u2014 "),CG=n(bke,"A",{href:!0});var M2t=s(CG);jLo=r(M2t,"GPT2LMHeadModel"),M2t.forEach(t),DLo=r(bke," (OpenAI GPT-2 model)"),bke.forEach(t),GLo=i(O),_1=n(O,"LI",{});var vke=s(_1);Wme=n(vke,"STRONG",{});var E2t=s(Wme);OLo=r(E2t,"ibert"),E2t.forEach(t),VLo=r(vke," \u2014 "),wG=n(vke,"A",{href:!0});var C2t=s(wG);XLo=r(C2t,"IBertForMaskedLM"),C2t.forEach(t),zLo=r(vke," (I-BERT model)"),vke.forEach(t),QLo=i(O),u1=n(O,"LI",{});var Fke=s(u1);Hme=n(Fke,"STRONG",{});var w2t=s(Hme);WLo=r(w2t,"layoutlm"),w2t.forEach(t),HLo=r(Fke," \u2014 "),AG=n(Fke,"A",{href:!0});var A2t=s(AG);ULo=r(A2t,"LayoutLMForMaskedLM"),A2t.forEach(t),JLo=r(Fke," (LayoutLM model)"),Fke.forEach(t),YLo=i(O),b1=n(O,"LI",{});var Tke=s(b1);Ume=n(Tke,"STRONG",{});var L2t=s(Ume);KLo=r(L2t,"longformer"),L2t.forEach(t),ZLo=r(Tke," \u2014 "),LG=n(Tke,"A",{href:!0});var y2t=s(LG);eyo=r(y2t,"LongformerForMaskedLM"),y2t.forEach(t),oyo=r(Tke," (Longformer model)"),Tke.forEach(t),ryo=i(O),v1=n(O,"LI",{});var Mke=s(v1);Jme=n(Mke,"STRONG",{});var x2t=s(Jme);tyo=r(x2t,"lxmert"),x2t.forEach(t),ayo=r(Mke," \u2014 "),yG=n(Mke,"A",{href:!0});var $2t=s(yG);nyo=r($2t,"LxmertForPreTraining"),$2t.forEach(t),syo=r(Mke," (LXMERT model)"),Mke.forEach(t),lyo=i(O),F1=n(O,"LI",{});var Eke=s(F1);Yme=n(Eke,"STRONG",{});var k2t=s(Yme);iyo=r(k2t,"megatron-bert"),k2t.forEach(t),dyo=r(Eke," \u2014 "),xG=n(Eke,"A",{href:!0});var S2t=s(xG);cyo=r(S2t,"MegatronBertForPreTraining"),S2t.forEach(t),fyo=r(Eke," (Megatron-BERT model)"),Eke.forEach(t),myo=i(O),T1=n(O,"LI",{});var Cke=s(T1);Kme=n(Cke,"STRONG",{});var R2t=s(Kme);gyo=r(R2t,"mobilebert"),R2t.forEach(t),hyo=r(Cke," \u2014 "),$G=n(Cke,"A",{href:!0});var P2t=s($G);pyo=r(P2t,"MobileBertForPreTraining"),P2t.forEach(t),_yo=r(Cke," (MobileBERT model)"),Cke.forEach(t),uyo=i(O),M1=n(O,"LI",{});var wke=s(M1);Zme=n(wke,"STRONG",{});var B2t=s(Zme);byo=r(B2t,"mpnet"),B2t.forEach(t),vyo=r(wke," \u2014 "),kG=n(wke,"A",{href:!0});var I2t=s(kG);Fyo=r(I2t,"MPNetForMaskedLM"),I2t.forEach(t),Tyo=r(wke," (MPNet model)"),wke.forEach(t),Myo=i(O),E1=n(O,"LI",{});var Ake=s(E1);ege=n(Ake,"STRONG",{});var N2t=s(ege);Eyo=r(N2t,"mvp"),N2t.forEach(t),Cyo=r(Ake," \u2014 "),SG=n(Ake,"A",{href:!0});var q2t=s(SG);wyo=r(q2t,"MvpForConditionalGeneration"),q2t.forEach(t),Ayo=r(Ake," (MVP model)"),Ake.forEach(t),Lyo=i(O),C1=n(O,"LI",{});var Lke=s(C1);oge=n(Lke,"STRONG",{});var j2t=s(oge);yyo=r(j2t,"nezha"),j2t.forEach(t),xyo=r(Lke," \u2014 "),RG=n(Lke,"A",{href:!0});var D2t=s(RG);$yo=r(D2t,"NezhaForPreTraining"),D2t.forEach(t),kyo=r(Lke," (Nezha model)"),Lke.forEach(t),Syo=i(O),w1=n(O,"LI",{});var yke=s(w1);rge=n(yke,"STRONG",{});var G2t=s(rge);Ryo=r(G2t,"openai-gpt"),G2t.forEach(t),Pyo=r(yke," \u2014 "),PG=n(yke,"A",{href:!0});var O2t=s(PG);Byo=r(O2t,"OpenAIGPTLMHeadModel"),O2t.forEach(t),Iyo=r(yke," (OpenAI GPT model)"),yke.forEach(t),Nyo=i(O),A1=n(O,"LI",{});var xke=s(A1);tge=n(xke,"STRONG",{});var V2t=s(tge);qyo=r(V2t,"retribert"),V2t.forEach(t),jyo=r(xke," \u2014 "),BG=n(xke,"A",{href:!0});var X2t=s(BG);Dyo=r(X2t,"RetriBertModel"),X2t.forEach(t),Gyo=r(xke," (RetriBERT model)"),xke.forEach(t),Oyo=i(O),L1=n(O,"LI",{});var $ke=s(L1);age=n($ke,"STRONG",{});var z2t=s(age);Vyo=r(z2t,"roberta"),z2t.forEach(t),Xyo=r($ke," \u2014 "),IG=n($ke,"A",{href:!0});var Q2t=s(IG);zyo=r(Q2t,"RobertaForMaskedLM"),Q2t.forEach(t),Qyo=r($ke," (RoBERTa model)"),$ke.forEach(t),Wyo=i(O),y1=n(O,"LI",{});var kke=s(y1);nge=n(kke,"STRONG",{});var W2t=s(nge);Hyo=r(W2t,"splinter"),W2t.forEach(t),Uyo=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var H2t=s(NG);Jyo=r(H2t,"SplinterForPreTraining"),H2t.forEach(t),Yyo=r(kke," (Splinter model)"),kke.forEach(t),Kyo=i(O),x1=n(O,"LI",{});var Ske=s(x1);sge=n(Ske,"STRONG",{});var U2t=s(sge);Zyo=r(U2t,"squeezebert"),U2t.forEach(t),e9o=r(Ske," \u2014 "),qG=n(Ske,"A",{href:!0});var J2t=s(qG);o9o=r(J2t,"SqueezeBertForMaskedLM"),J2t.forEach(t),r9o=r(Ske," (SqueezeBERT model)"),Ske.forEach(t),t9o=i(O),$1=n(O,"LI",{});var Rke=s($1);lge=n(Rke,"STRONG",{});var Y2t=s(lge);a9o=r(Y2t,"t5"),Y2t.forEach(t),n9o=r(Rke," \u2014 "),jG=n(Rke,"A",{href:!0});var K2t=s(jG);s9o=r(K2t,"T5ForConditionalGeneration"),K2t.forEach(t),l9o=r(Rke," (T5 model)"),Rke.forEach(t),i9o=i(O),k1=n(O,"LI",{});var Pke=s(k1);ige=n(Pke,"STRONG",{});var Z2t=s(ige);d9o=r(Z2t,"tapas"),Z2t.forEach(t),c9o=r(Pke," \u2014 "),DG=n(Pke,"A",{href:!0});var ebt=s(DG);f9o=r(ebt,"TapasForMaskedLM"),ebt.forEach(t),m9o=r(Pke," (TAPAS model)"),Pke.forEach(t),g9o=i(O),S1=n(O,"LI",{});var Bke=s(S1);dge=n(Bke,"STRONG",{});var obt=s(dge);h9o=r(obt,"transfo-xl"),obt.forEach(t),p9o=r(Bke," \u2014 "),GG=n(Bke,"A",{href:!0});var rbt=s(GG);_9o=r(rbt,"TransfoXLLMHeadModel"),rbt.forEach(t),u9o=r(Bke," (Transformer-XL model)"),Bke.forEach(t),b9o=i(O),R1=n(O,"LI",{});var Ike=s(R1);cge=n(Ike,"STRONG",{});var tbt=s(cge);v9o=r(tbt,"unispeech"),tbt.forEach(t),F9o=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var abt=s(OG);T9o=r(abt,"UniSpeechForPreTraining"),abt.forEach(t),M9o=r(Ike," (UniSpeech model)"),Ike.forEach(t),E9o=i(O),P1=n(O,"LI",{});var Nke=s(P1);fge=n(Nke,"STRONG",{});var nbt=s(fge);C9o=r(nbt,"unispeech-sat"),nbt.forEach(t),w9o=r(Nke," \u2014 "),VG=n(Nke,"A",{href:!0});var sbt=s(VG);A9o=r(sbt,"UniSpeechSatForPreTraining"),sbt.forEach(t),L9o=r(Nke," (UniSpeechSat model)"),Nke.forEach(t),y9o=i(O),B1=n(O,"LI",{});var qke=s(B1);mge=n(qke,"STRONG",{});var lbt=s(mge);x9o=r(lbt,"visual_bert"),lbt.forEach(t),$9o=r(qke," \u2014 "),XG=n(qke,"A",{href:!0});var ibt=s(XG);k9o=r(ibt,"VisualBertForPreTraining"),ibt.forEach(t),S9o=r(qke," (VisualBERT model)"),qke.forEach(t),R9o=i(O),I1=n(O,"LI",{});var jke=s(I1);gge=n(jke,"STRONG",{});var dbt=s(gge);P9o=r(dbt,"vit_mae"),dbt.forEach(t),B9o=r(jke," \u2014 "),zG=n(jke,"A",{href:!0});var cbt=s(zG);I9o=r(cbt,"ViTMAEForPreTraining"),cbt.forEach(t),N9o=r(jke," (ViTMAE model)"),jke.forEach(t),q9o=i(O),N1=n(O,"LI",{});var Dke=s(N1);hge=n(Dke,"STRONG",{});var fbt=s(hge);j9o=r(fbt,"wav2vec2"),fbt.forEach(t),D9o=r(Dke," \u2014 "),QG=n(Dke,"A",{href:!0});var mbt=s(QG);G9o=r(mbt,"Wav2Vec2ForPreTraining"),mbt.forEach(t),O9o=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),V9o=i(O),q1=n(O,"LI",{});var Gke=s(q1);pge=n(Gke,"STRONG",{});var gbt=s(pge);X9o=r(gbt,"wav2vec2-conformer"),gbt.forEach(t),z9o=r(Gke," \u2014 "),WG=n(Gke,"A",{href:!0});var hbt=s(WG);Q9o=r(hbt,"Wav2Vec2ConformerForPreTraining"),hbt.forEach(t),W9o=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),H9o=i(O),j1=n(O,"LI",{});var Oke=s(j1);_ge=n(Oke,"STRONG",{});var pbt=s(_ge);U9o=r(pbt,"xlm"),pbt.forEach(t),J9o=r(Oke," \u2014 "),HG=n(Oke,"A",{href:!0});var _bt=s(HG);Y9o=r(_bt,"XLMWithLMHeadModel"),_bt.forEach(t),K9o=r(Oke," (XLM model)"),Oke.forEach(t),Z9o=i(O),D1=n(O,"LI",{});var Vke=s(D1);uge=n(Vke,"STRONG",{});var ubt=s(uge);exo=r(ubt,"xlm-roberta"),ubt.forEach(t),oxo=r(Vke," \u2014 "),UG=n(Vke,"A",{href:!0});var bbt=s(UG);rxo=r(bbt,"XLMRobertaForMaskedLM"),bbt.forEach(t),txo=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),axo=i(O),G1=n(O,"LI",{});var Xke=s(G1);bge=n(Xke,"STRONG",{});var vbt=s(bge);nxo=r(vbt,"xlm-roberta-xl"),vbt.forEach(t),sxo=r(Xke," \u2014 "),JG=n(Xke,"A",{href:!0});var Fbt=s(JG);lxo=r(Fbt,"XLMRobertaXLForMaskedLM"),Fbt.forEach(t),ixo=r(Xke," (XLM-RoBERTa-XL model)"),Xke.forEach(t),dxo=i(O),O1=n(O,"LI",{});var zke=s(O1);vge=n(zke,"STRONG",{});var Tbt=s(vge);cxo=r(Tbt,"xlnet"),Tbt.forEach(t),fxo=r(zke," \u2014 "),YG=n(zke,"A",{href:!0});var Mbt=s(YG);mxo=r(Mbt,"XLNetLMHeadModel"),Mbt.forEach(t),gxo=r(zke," (XLNet model)"),zke.forEach(t),O.forEach(t),hxo=i(la),V1=n(la,"P",{});var Qke=s(V1);pxo=r(Qke,"The model is set in evaluation mode by default using "),Fge=n(Qke,"CODE",{});var Ebt=s(Fge);_xo=r(Ebt,"model.eval()"),Ebt.forEach(t),uxo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(Qke,"CODE",{});var Cbt=s(Tge);bxo=r(Cbt,"model.train()"),Cbt.forEach(t),Qke.forEach(t),vxo=i(la),T(X1.$$.fragment,la),la.forEach(t),rl.forEach(t),MXe=i(f),Qi=n(f,"H2",{class:!0});var yQe=s(Qi);z1=n(yQe,"A",{id:!0,class:!0,href:!0});var wbt=s(z1);Mge=n(wbt,"SPAN",{});var Abt=s(Mge);T(VL.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),Fxo=i(yQe),Ege=n(yQe,"SPAN",{});var Lbt=s(Ege);Txo=r(Lbt,"AutoModelForCausalLM"),Lbt.forEach(t),yQe.forEach(t),EXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(XL.$$.fragment,tl),Mxo=i(tl),Wi=n(tl,"P",{});var Nre=s(Wi);Exo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),KG=n(Nre,"A",{href:!0});var ybt=s(KG);Cxo=r(ybt,"from_pretrained()"),ybt.forEach(t),wxo=r(Nre," class method or the "),ZG=n(Nre,"A",{href:!0});var xbt=s(ZG);Axo=r(xbt,"from_config()"),xbt.forEach(t),Lxo=r(Nre,` class
method.`),Nre.forEach(t),yxo=i(tl),zL=n(tl,"P",{});var xQe=s(zL);xxo=r(xQe,"This class cannot be instantiated directly using "),Cge=n(xQe,"CODE",{});var $bt=s(Cge);$xo=r($bt,"__init__()"),$bt.forEach(t),kxo=r(xQe," (throws an error)."),xQe.forEach(t),Sxo=i(tl),dt=n(tl,"DIV",{class:!0});var pA=s(dt);T(QL.$$.fragment,pA),Rxo=i(pA),wge=n(pA,"P",{});var kbt=s(wge);Pxo=r(kbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kbt.forEach(t),Bxo=i(pA),Hi=n(pA,"P",{});var qre=s(Hi);Ixo=r(qre,`Note:
Loading a model from its configuration file does `),Age=n(qre,"STRONG",{});var Sbt=s(Age);Nxo=r(Sbt,"not"),Sbt.forEach(t),qxo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(qre,"A",{href:!0});var Rbt=s(eO);jxo=r(Rbt,"from_pretrained()"),Rbt.forEach(t),Dxo=r(qre," to load the model weights."),qre.forEach(t),Gxo=i(pA),T(Q1.$$.fragment,pA),pA.forEach(t),Oxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(WL.$$.fragment,ia),Vxo=i(ia),Lge=n(ia,"P",{});var Pbt=s(Lge);Xxo=r(Pbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pbt.forEach(t),zxo=i(ia),qa=n(ia,"P",{});var _A=s(qa);Qxo=r(_A,"The model class to instantiate is selected based on the "),yge=n(_A,"CODE",{});var Bbt=s(yge);Wxo=r(Bbt,"model_type"),Bbt.forEach(t),Hxo=r(_A,` property of the config object (either
passed as an argument or loaded from `),xge=n(_A,"CODE",{});var Ibt=s(xge);Uxo=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Jxo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(_A,"CODE",{});var Nbt=s($ge);Yxo=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),Kxo=r(_A,":"),_A.forEach(t),Zxo=i(ia),z=n(ia,"UL",{});var Q=s(z);W1=n(Q,"LI",{});var Wke=s(W1);kge=n(Wke,"STRONG",{});var qbt=s(kge);e$o=r(qbt,"bart"),qbt.forEach(t),o$o=r(Wke," \u2014 "),oO=n(Wke,"A",{href:!0});var jbt=s(oO);r$o=r(jbt,"BartForCausalLM"),jbt.forEach(t),t$o=r(Wke," (BART model)"),Wke.forEach(t),a$o=i(Q),H1=n(Q,"LI",{});var Hke=s(H1);Sge=n(Hke,"STRONG",{});var Dbt=s(Sge);n$o=r(Dbt,"bert"),Dbt.forEach(t),s$o=r(Hke," \u2014 "),rO=n(Hke,"A",{href:!0});var Gbt=s(rO);l$o=r(Gbt,"BertLMHeadModel"),Gbt.forEach(t),i$o=r(Hke," (BERT model)"),Hke.forEach(t),d$o=i(Q),U1=n(Q,"LI",{});var Uke=s(U1);Rge=n(Uke,"STRONG",{});var Obt=s(Rge);c$o=r(Obt,"bert-generation"),Obt.forEach(t),f$o=r(Uke," \u2014 "),tO=n(Uke,"A",{href:!0});var Vbt=s(tO);m$o=r(Vbt,"BertGenerationDecoder"),Vbt.forEach(t),g$o=r(Uke," (Bert Generation model)"),Uke.forEach(t),h$o=i(Q),J1=n(Q,"LI",{});var Jke=s(J1);Pge=n(Jke,"STRONG",{});var Xbt=s(Pge);p$o=r(Xbt,"big_bird"),Xbt.forEach(t),_$o=r(Jke," \u2014 "),aO=n(Jke,"A",{href:!0});var zbt=s(aO);u$o=r(zbt,"BigBirdForCausalLM"),zbt.forEach(t),b$o=r(Jke," (BigBird model)"),Jke.forEach(t),v$o=i(Q),Y1=n(Q,"LI",{});var Yke=s(Y1);Bge=n(Yke,"STRONG",{});var Qbt=s(Bge);F$o=r(Qbt,"bigbird_pegasus"),Qbt.forEach(t),T$o=r(Yke," \u2014 "),nO=n(Yke,"A",{href:!0});var Wbt=s(nO);M$o=r(Wbt,"BigBirdPegasusForCausalLM"),Wbt.forEach(t),E$o=r(Yke," (BigBird-Pegasus model)"),Yke.forEach(t),C$o=i(Q),K1=n(Q,"LI",{});var Kke=s(K1);Ige=n(Kke,"STRONG",{});var Hbt=s(Ige);w$o=r(Hbt,"blenderbot"),Hbt.forEach(t),A$o=r(Kke," \u2014 "),sO=n(Kke,"A",{href:!0});var Ubt=s(sO);L$o=r(Ubt,"BlenderbotForCausalLM"),Ubt.forEach(t),y$o=r(Kke," (Blenderbot model)"),Kke.forEach(t),x$o=i(Q),Z1=n(Q,"LI",{});var Zke=s(Z1);Nge=n(Zke,"STRONG",{});var Jbt=s(Nge);$$o=r(Jbt,"blenderbot-small"),Jbt.forEach(t),k$o=r(Zke," \u2014 "),lO=n(Zke,"A",{href:!0});var Ybt=s(lO);S$o=r(Ybt,"BlenderbotSmallForCausalLM"),Ybt.forEach(t),R$o=r(Zke," (BlenderbotSmall model)"),Zke.forEach(t),P$o=i(Q),e2=n(Q,"LI",{});var eSe=s(e2);qge=n(eSe,"STRONG",{});var Kbt=s(qge);B$o=r(Kbt,"bloom"),Kbt.forEach(t),I$o=r(eSe," \u2014 "),iO=n(eSe,"A",{href:!0});var Zbt=s(iO);N$o=r(Zbt,"BloomForCausalLM"),Zbt.forEach(t),q$o=r(eSe," (BLOOM model)"),eSe.forEach(t),j$o=i(Q),o2=n(Q,"LI",{});var oSe=s(o2);jge=n(oSe,"STRONG",{});var evt=s(jge);D$o=r(evt,"camembert"),evt.forEach(t),G$o=r(oSe," \u2014 "),dO=n(oSe,"A",{href:!0});var ovt=s(dO);O$o=r(ovt,"CamembertForCausalLM"),ovt.forEach(t),V$o=r(oSe," (CamemBERT model)"),oSe.forEach(t),X$o=i(Q),r2=n(Q,"LI",{});var rSe=s(r2);Dge=n(rSe,"STRONG",{});var rvt=s(Dge);z$o=r(rvt,"codegen"),rvt.forEach(t),Q$o=r(rSe," \u2014 "),cO=n(rSe,"A",{href:!0});var tvt=s(cO);W$o=r(tvt,"CodeGenForCausalLM"),tvt.forEach(t),H$o=r(rSe," (CodeGen model)"),rSe.forEach(t),U$o=i(Q),t2=n(Q,"LI",{});var tSe=s(t2);Gge=n(tSe,"STRONG",{});var avt=s(Gge);J$o=r(avt,"ctrl"),avt.forEach(t),Y$o=r(tSe," \u2014 "),fO=n(tSe,"A",{href:!0});var nvt=s(fO);K$o=r(nvt,"CTRLLMHeadModel"),nvt.forEach(t),Z$o=r(tSe," (CTRL model)"),tSe.forEach(t),eko=i(Q),a2=n(Q,"LI",{});var aSe=s(a2);Oge=n(aSe,"STRONG",{});var svt=s(Oge);oko=r(svt,"data2vec-text"),svt.forEach(t),rko=r(aSe," \u2014 "),mO=n(aSe,"A",{href:!0});var lvt=s(mO);tko=r(lvt,"Data2VecTextForCausalLM"),lvt.forEach(t),ako=r(aSe," (Data2VecText model)"),aSe.forEach(t),nko=i(Q),n2=n(Q,"LI",{});var nSe=s(n2);Vge=n(nSe,"STRONG",{});var ivt=s(Vge);sko=r(ivt,"electra"),ivt.forEach(t),lko=r(nSe," \u2014 "),gO=n(nSe,"A",{href:!0});var dvt=s(gO);iko=r(dvt,"ElectraForCausalLM"),dvt.forEach(t),dko=r(nSe," (ELECTRA model)"),nSe.forEach(t),cko=i(Q),s2=n(Q,"LI",{});var sSe=s(s2);Xge=n(sSe,"STRONG",{});var cvt=s(Xge);fko=r(cvt,"gpt2"),cvt.forEach(t),mko=r(sSe," \u2014 "),hO=n(sSe,"A",{href:!0});var fvt=s(hO);gko=r(fvt,"GPT2LMHeadModel"),fvt.forEach(t),hko=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),pko=i(Q),l2=n(Q,"LI",{});var lSe=s(l2);zge=n(lSe,"STRONG",{});var mvt=s(zge);_ko=r(mvt,"gpt_neo"),mvt.forEach(t),uko=r(lSe," \u2014 "),pO=n(lSe,"A",{href:!0});var gvt=s(pO);bko=r(gvt,"GPTNeoForCausalLM"),gvt.forEach(t),vko=r(lSe," (GPT Neo model)"),lSe.forEach(t),Fko=i(Q),i2=n(Q,"LI",{});var iSe=s(i2);Qge=n(iSe,"STRONG",{});var hvt=s(Qge);Tko=r(hvt,"gpt_neox"),hvt.forEach(t),Mko=r(iSe," \u2014 "),_O=n(iSe,"A",{href:!0});var pvt=s(_O);Eko=r(pvt,"GPTNeoXForCausalLM"),pvt.forEach(t),Cko=r(iSe," (GPT NeoX model)"),iSe.forEach(t),wko=i(Q),d2=n(Q,"LI",{});var dSe=s(d2);Wge=n(dSe,"STRONG",{});var _vt=s(Wge);Ako=r(_vt,"gptj"),_vt.forEach(t),Lko=r(dSe," \u2014 "),uO=n(dSe,"A",{href:!0});var uvt=s(uO);yko=r(uvt,"GPTJForCausalLM"),uvt.forEach(t),xko=r(dSe," (GPT-J model)"),dSe.forEach(t),$ko=i(Q),c2=n(Q,"LI",{});var cSe=s(c2);Hge=n(cSe,"STRONG",{});var bvt=s(Hge);kko=r(bvt,"marian"),bvt.forEach(t),Sko=r(cSe," \u2014 "),bO=n(cSe,"A",{href:!0});var vvt=s(bO);Rko=r(vvt,"MarianForCausalLM"),vvt.forEach(t),Pko=r(cSe," (Marian model)"),cSe.forEach(t),Bko=i(Q),f2=n(Q,"LI",{});var fSe=s(f2);Uge=n(fSe,"STRONG",{});var Fvt=s(Uge);Iko=r(Fvt,"mbart"),Fvt.forEach(t),Nko=r(fSe," \u2014 "),vO=n(fSe,"A",{href:!0});var Tvt=s(vO);qko=r(Tvt,"MBartForCausalLM"),Tvt.forEach(t),jko=r(fSe," (mBART model)"),fSe.forEach(t),Dko=i(Q),m2=n(Q,"LI",{});var mSe=s(m2);Jge=n(mSe,"STRONG",{});var Mvt=s(Jge);Gko=r(Mvt,"megatron-bert"),Mvt.forEach(t),Oko=r(mSe," \u2014 "),FO=n(mSe,"A",{href:!0});var Evt=s(FO);Vko=r(Evt,"MegatronBertForCausalLM"),Evt.forEach(t),Xko=r(mSe," (Megatron-BERT model)"),mSe.forEach(t),zko=i(Q),g2=n(Q,"LI",{});var gSe=s(g2);Yge=n(gSe,"STRONG",{});var Cvt=s(Yge);Qko=r(Cvt,"mvp"),Cvt.forEach(t),Wko=r(gSe," \u2014 "),TO=n(gSe,"A",{href:!0});var wvt=s(TO);Hko=r(wvt,"MvpForCausalLM"),wvt.forEach(t),Uko=r(gSe," (MVP model)"),gSe.forEach(t),Jko=i(Q),h2=n(Q,"LI",{});var hSe=s(h2);Kge=n(hSe,"STRONG",{});var Avt=s(Kge);Yko=r(Avt,"openai-gpt"),Avt.forEach(t),Kko=r(hSe," \u2014 "),MO=n(hSe,"A",{href:!0});var Lvt=s(MO);Zko=r(Lvt,"OpenAIGPTLMHeadModel"),Lvt.forEach(t),eSo=r(hSe," (OpenAI GPT model)"),hSe.forEach(t),oSo=i(Q),p2=n(Q,"LI",{});var pSe=s(p2);Zge=n(pSe,"STRONG",{});var yvt=s(Zge);rSo=r(yvt,"opt"),yvt.forEach(t),tSo=r(pSe," \u2014 "),EO=n(pSe,"A",{href:!0});var xvt=s(EO);aSo=r(xvt,"OPTForCausalLM"),xvt.forEach(t),nSo=r(pSe," (OPT model)"),pSe.forEach(t),sSo=i(Q),_2=n(Q,"LI",{});var _Se=s(_2);ehe=n(_Se,"STRONG",{});var $vt=s(ehe);lSo=r($vt,"pegasus"),$vt.forEach(t),iSo=r(_Se," \u2014 "),CO=n(_Se,"A",{href:!0});var kvt=s(CO);dSo=r(kvt,"PegasusForCausalLM"),kvt.forEach(t),cSo=r(_Se," (Pegasus model)"),_Se.forEach(t),fSo=i(Q),u2=n(Q,"LI",{});var uSe=s(u2);ohe=n(uSe,"STRONG",{});var Svt=s(ohe);mSo=r(Svt,"plbart"),Svt.forEach(t),gSo=r(uSe," \u2014 "),wO=n(uSe,"A",{href:!0});var Rvt=s(wO);hSo=r(Rvt,"PLBartForCausalLM"),Rvt.forEach(t),pSo=r(uSe," (PLBart model)"),uSe.forEach(t),_So=i(Q),b2=n(Q,"LI",{});var bSe=s(b2);rhe=n(bSe,"STRONG",{});var Pvt=s(rhe);uSo=r(Pvt,"prophetnet"),Pvt.forEach(t),bSo=r(bSe," \u2014 "),AO=n(bSe,"A",{href:!0});var Bvt=s(AO);vSo=r(Bvt,"ProphetNetForCausalLM"),Bvt.forEach(t),FSo=r(bSe," (ProphetNet model)"),bSe.forEach(t),TSo=i(Q),v2=n(Q,"LI",{});var vSe=s(v2);the=n(vSe,"STRONG",{});var Ivt=s(the);MSo=r(Ivt,"qdqbert"),Ivt.forEach(t),ESo=r(vSe," \u2014 "),LO=n(vSe,"A",{href:!0});var Nvt=s(LO);CSo=r(Nvt,"QDQBertLMHeadModel"),Nvt.forEach(t),wSo=r(vSe," (QDQBert model)"),vSe.forEach(t),ASo=i(Q),F2=n(Q,"LI",{});var FSe=s(F2);ahe=n(FSe,"STRONG",{});var qvt=s(ahe);LSo=r(qvt,"reformer"),qvt.forEach(t),ySo=r(FSe," \u2014 "),yO=n(FSe,"A",{href:!0});var jvt=s(yO);xSo=r(jvt,"ReformerModelWithLMHead"),jvt.forEach(t),$So=r(FSe," (Reformer model)"),FSe.forEach(t),kSo=i(Q),T2=n(Q,"LI",{});var TSe=s(T2);nhe=n(TSe,"STRONG",{});var Dvt=s(nhe);SSo=r(Dvt,"rembert"),Dvt.forEach(t),RSo=r(TSe," \u2014 "),xO=n(TSe,"A",{href:!0});var Gvt=s(xO);PSo=r(Gvt,"RemBertForCausalLM"),Gvt.forEach(t),BSo=r(TSe," (RemBERT model)"),TSe.forEach(t),ISo=i(Q),M2=n(Q,"LI",{});var MSe=s(M2);she=n(MSe,"STRONG",{});var Ovt=s(she);NSo=r(Ovt,"roberta"),Ovt.forEach(t),qSo=r(MSe," \u2014 "),$O=n(MSe,"A",{href:!0});var Vvt=s($O);jSo=r(Vvt,"RobertaForCausalLM"),Vvt.forEach(t),DSo=r(MSe," (RoBERTa model)"),MSe.forEach(t),GSo=i(Q),E2=n(Q,"LI",{});var ESe=s(E2);lhe=n(ESe,"STRONG",{});var Xvt=s(lhe);OSo=r(Xvt,"roformer"),Xvt.forEach(t),VSo=r(ESe," \u2014 "),kO=n(ESe,"A",{href:!0});var zvt=s(kO);XSo=r(zvt,"RoFormerForCausalLM"),zvt.forEach(t),zSo=r(ESe," (RoFormer model)"),ESe.forEach(t),QSo=i(Q),C2=n(Q,"LI",{});var CSe=s(C2);ihe=n(CSe,"STRONG",{});var Qvt=s(ihe);WSo=r(Qvt,"speech_to_text_2"),Qvt.forEach(t),HSo=r(CSe," \u2014 "),SO=n(CSe,"A",{href:!0});var Wvt=s(SO);USo=r(Wvt,"Speech2Text2ForCausalLM"),Wvt.forEach(t),JSo=r(CSe," (Speech2Text2 model)"),CSe.forEach(t),YSo=i(Q),w2=n(Q,"LI",{});var wSe=s(w2);dhe=n(wSe,"STRONG",{});var Hvt=s(dhe);KSo=r(Hvt,"transfo-xl"),Hvt.forEach(t),ZSo=r(wSe," \u2014 "),RO=n(wSe,"A",{href:!0});var Uvt=s(RO);eRo=r(Uvt,"TransfoXLLMHeadModel"),Uvt.forEach(t),oRo=r(wSe," (Transformer-XL model)"),wSe.forEach(t),rRo=i(Q),A2=n(Q,"LI",{});var ASe=s(A2);che=n(ASe,"STRONG",{});var Jvt=s(che);tRo=r(Jvt,"trocr"),Jvt.forEach(t),aRo=r(ASe," \u2014 "),PO=n(ASe,"A",{href:!0});var Yvt=s(PO);nRo=r(Yvt,"TrOCRForCausalLM"),Yvt.forEach(t),sRo=r(ASe," (TrOCR model)"),ASe.forEach(t),lRo=i(Q),L2=n(Q,"LI",{});var LSe=s(L2);fhe=n(LSe,"STRONG",{});var Kvt=s(fhe);iRo=r(Kvt,"xglm"),Kvt.forEach(t),dRo=r(LSe," \u2014 "),BO=n(LSe,"A",{href:!0});var Zvt=s(BO);cRo=r(Zvt,"XGLMForCausalLM"),Zvt.forEach(t),fRo=r(LSe," (XGLM model)"),LSe.forEach(t),mRo=i(Q),y2=n(Q,"LI",{});var ySe=s(y2);mhe=n(ySe,"STRONG",{});var eFt=s(mhe);gRo=r(eFt,"xlm"),eFt.forEach(t),hRo=r(ySe," \u2014 "),IO=n(ySe,"A",{href:!0});var oFt=s(IO);pRo=r(oFt,"XLMWithLMHeadModel"),oFt.forEach(t),_Ro=r(ySe," (XLM model)"),ySe.forEach(t),uRo=i(Q),x2=n(Q,"LI",{});var xSe=s(x2);ghe=n(xSe,"STRONG",{});var rFt=s(ghe);bRo=r(rFt,"xlm-prophetnet"),rFt.forEach(t),vRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var tFt=s(NO);FRo=r(tFt,"XLMProphetNetForCausalLM"),tFt.forEach(t),TRo=r(xSe," (XLM-ProphetNet model)"),xSe.forEach(t),MRo=i(Q),$2=n(Q,"LI",{});var $Se=s($2);hhe=n($Se,"STRONG",{});var aFt=s(hhe);ERo=r(aFt,"xlm-roberta"),aFt.forEach(t),CRo=r($Se," \u2014 "),qO=n($Se,"A",{href:!0});var nFt=s(qO);wRo=r(nFt,"XLMRobertaForCausalLM"),nFt.forEach(t),ARo=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),LRo=i(Q),k2=n(Q,"LI",{});var kSe=s(k2);phe=n(kSe,"STRONG",{});var sFt=s(phe);yRo=r(sFt,"xlm-roberta-xl"),sFt.forEach(t),xRo=r(kSe," \u2014 "),jO=n(kSe,"A",{href:!0});var lFt=s(jO);$Ro=r(lFt,"XLMRobertaXLForCausalLM"),lFt.forEach(t),kRo=r(kSe," (XLM-RoBERTa-XL model)"),kSe.forEach(t),SRo=i(Q),S2=n(Q,"LI",{});var SSe=s(S2);_he=n(SSe,"STRONG",{});var iFt=s(_he);RRo=r(iFt,"xlnet"),iFt.forEach(t),PRo=r(SSe," \u2014 "),DO=n(SSe,"A",{href:!0});var dFt=s(DO);BRo=r(dFt,"XLNetLMHeadModel"),dFt.forEach(t),IRo=r(SSe," (XLNet model)"),SSe.forEach(t),Q.forEach(t),NRo=i(ia),R2=n(ia,"P",{});var RSe=s(R2);qRo=r(RSe,"The model is set in evaluation mode by default using "),uhe=n(RSe,"CODE",{});var cFt=s(uhe);jRo=r(cFt,"model.eval()"),cFt.forEach(t),DRo=r(RSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(RSe,"CODE",{});var fFt=s(bhe);GRo=r(fFt,"model.train()"),fFt.forEach(t),RSe.forEach(t),ORo=i(ia),T(P2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),CXe=i(f),Ui=n(f,"H2",{class:!0});var $Qe=s(Ui);B2=n($Qe,"A",{id:!0,class:!0,href:!0});var mFt=s(B2);vhe=n(mFt,"SPAN",{});var gFt=s(vhe);T(HL.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),VRo=i($Qe),Fhe=n($Qe,"SPAN",{});var hFt=s(Fhe);XRo=r(hFt,"AutoModelForMaskedLM"),hFt.forEach(t),$Qe.forEach(t),wXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(UL.$$.fragment,al),zRo=i(al),Ji=n(al,"P",{});var jre=s(Ji);QRo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GO=n(jre,"A",{href:!0});var pFt=s(GO);WRo=r(pFt,"from_pretrained()"),pFt.forEach(t),HRo=r(jre," class method or the "),OO=n(jre,"A",{href:!0});var _Ft=s(OO);URo=r(_Ft,"from_config()"),_Ft.forEach(t),JRo=r(jre,` class
method.`),jre.forEach(t),YRo=i(al),JL=n(al,"P",{});var kQe=s(JL);KRo=r(kQe,"This class cannot be instantiated directly using "),The=n(kQe,"CODE",{});var uFt=s(The);ZRo=r(uFt,"__init__()"),uFt.forEach(t),ePo=r(kQe," (throws an error)."),kQe.forEach(t),oPo=i(al),ct=n(al,"DIV",{class:!0});var uA=s(ct);T(YL.$$.fragment,uA),rPo=i(uA),Mhe=n(uA,"P",{});var bFt=s(Mhe);tPo=r(bFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bFt.forEach(t),aPo=i(uA),Yi=n(uA,"P",{});var Dre=s(Yi);nPo=r(Dre,`Note:
Loading a model from its configuration file does `),Ehe=n(Dre,"STRONG",{});var vFt=s(Ehe);sPo=r(vFt,"not"),vFt.forEach(t),lPo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(Dre,"A",{href:!0});var FFt=s(VO);iPo=r(FFt,"from_pretrained()"),FFt.forEach(t),dPo=r(Dre," to load the model weights."),Dre.forEach(t),cPo=i(uA),T(I2.$$.fragment,uA),uA.forEach(t),fPo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(KL.$$.fragment,da),mPo=i(da),Che=n(da,"P",{});var TFt=s(Che);gPo=r(TFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TFt.forEach(t),hPo=i(da),ja=n(da,"P",{});var bA=s(ja);pPo=r(bA,"The model class to instantiate is selected based on the "),whe=n(bA,"CODE",{});var MFt=s(whe);_Po=r(MFt,"model_type"),MFt.forEach(t),uPo=r(bA,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(bA,"CODE",{});var EFt=s(Ahe);bPo=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),vPo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(bA,"CODE",{});var CFt=s(Lhe);FPo=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),TPo=r(bA,":"),bA.forEach(t),MPo=i(da),W=n(da,"UL",{});var H=s(W);N2=n(H,"LI",{});var PSe=s(N2);yhe=n(PSe,"STRONG",{});var wFt=s(yhe);EPo=r(wFt,"albert"),wFt.forEach(t),CPo=r(PSe," \u2014 "),XO=n(PSe,"A",{href:!0});var AFt=s(XO);wPo=r(AFt,"AlbertForMaskedLM"),AFt.forEach(t),APo=r(PSe," (ALBERT model)"),PSe.forEach(t),LPo=i(H),q2=n(H,"LI",{});var BSe=s(q2);xhe=n(BSe,"STRONG",{});var LFt=s(xhe);yPo=r(LFt,"bart"),LFt.forEach(t),xPo=r(BSe," \u2014 "),zO=n(BSe,"A",{href:!0});var yFt=s(zO);$Po=r(yFt,"BartForConditionalGeneration"),yFt.forEach(t),kPo=r(BSe," (BART model)"),BSe.forEach(t),SPo=i(H),j2=n(H,"LI",{});var ISe=s(j2);$he=n(ISe,"STRONG",{});var xFt=s($he);RPo=r(xFt,"bert"),xFt.forEach(t),PPo=r(ISe," \u2014 "),QO=n(ISe,"A",{href:!0});var $Ft=s(QO);BPo=r($Ft,"BertForMaskedLM"),$Ft.forEach(t),IPo=r(ISe," (BERT model)"),ISe.forEach(t),NPo=i(H),D2=n(H,"LI",{});var NSe=s(D2);khe=n(NSe,"STRONG",{});var kFt=s(khe);qPo=r(kFt,"big_bird"),kFt.forEach(t),jPo=r(NSe," \u2014 "),WO=n(NSe,"A",{href:!0});var SFt=s(WO);DPo=r(SFt,"BigBirdForMaskedLM"),SFt.forEach(t),GPo=r(NSe," (BigBird model)"),NSe.forEach(t),OPo=i(H),G2=n(H,"LI",{});var qSe=s(G2);She=n(qSe,"STRONG",{});var RFt=s(She);VPo=r(RFt,"camembert"),RFt.forEach(t),XPo=r(qSe," \u2014 "),HO=n(qSe,"A",{href:!0});var PFt=s(HO);zPo=r(PFt,"CamembertForMaskedLM"),PFt.forEach(t),QPo=r(qSe," (CamemBERT model)"),qSe.forEach(t),WPo=i(H),O2=n(H,"LI",{});var jSe=s(O2);Rhe=n(jSe,"STRONG",{});var BFt=s(Rhe);HPo=r(BFt,"convbert"),BFt.forEach(t),UPo=r(jSe," \u2014 "),UO=n(jSe,"A",{href:!0});var IFt=s(UO);JPo=r(IFt,"ConvBertForMaskedLM"),IFt.forEach(t),YPo=r(jSe," (ConvBERT model)"),jSe.forEach(t),KPo=i(H),V2=n(H,"LI",{});var DSe=s(V2);Phe=n(DSe,"STRONG",{});var NFt=s(Phe);ZPo=r(NFt,"data2vec-text"),NFt.forEach(t),eBo=r(DSe," \u2014 "),JO=n(DSe,"A",{href:!0});var qFt=s(JO);oBo=r(qFt,"Data2VecTextForMaskedLM"),qFt.forEach(t),rBo=r(DSe," (Data2VecText model)"),DSe.forEach(t),tBo=i(H),X2=n(H,"LI",{});var GSe=s(X2);Bhe=n(GSe,"STRONG",{});var jFt=s(Bhe);aBo=r(jFt,"deberta"),jFt.forEach(t),nBo=r(GSe," \u2014 "),YO=n(GSe,"A",{href:!0});var DFt=s(YO);sBo=r(DFt,"DebertaForMaskedLM"),DFt.forEach(t),lBo=r(GSe," (DeBERTa model)"),GSe.forEach(t),iBo=i(H),z2=n(H,"LI",{});var OSe=s(z2);Ihe=n(OSe,"STRONG",{});var GFt=s(Ihe);dBo=r(GFt,"deberta-v2"),GFt.forEach(t),cBo=r(OSe," \u2014 "),KO=n(OSe,"A",{href:!0});var OFt=s(KO);fBo=r(OFt,"DebertaV2ForMaskedLM"),OFt.forEach(t),mBo=r(OSe," (DeBERTa-v2 model)"),OSe.forEach(t),gBo=i(H),Q2=n(H,"LI",{});var VSe=s(Q2);Nhe=n(VSe,"STRONG",{});var VFt=s(Nhe);hBo=r(VFt,"distilbert"),VFt.forEach(t),pBo=r(VSe," \u2014 "),ZO=n(VSe,"A",{href:!0});var XFt=s(ZO);_Bo=r(XFt,"DistilBertForMaskedLM"),XFt.forEach(t),uBo=r(VSe," (DistilBERT model)"),VSe.forEach(t),bBo=i(H),W2=n(H,"LI",{});var XSe=s(W2);qhe=n(XSe,"STRONG",{});var zFt=s(qhe);vBo=r(zFt,"electra"),zFt.forEach(t),FBo=r(XSe," \u2014 "),eV=n(XSe,"A",{href:!0});var QFt=s(eV);TBo=r(QFt,"ElectraForMaskedLM"),QFt.forEach(t),MBo=r(XSe," (ELECTRA model)"),XSe.forEach(t),EBo=i(H),H2=n(H,"LI",{});var zSe=s(H2);jhe=n(zSe,"STRONG",{});var WFt=s(jhe);CBo=r(WFt,"flaubert"),WFt.forEach(t),wBo=r(zSe," \u2014 "),oV=n(zSe,"A",{href:!0});var HFt=s(oV);ABo=r(HFt,"FlaubertWithLMHeadModel"),HFt.forEach(t),LBo=r(zSe," (FlauBERT model)"),zSe.forEach(t),yBo=i(H),U2=n(H,"LI",{});var QSe=s(U2);Dhe=n(QSe,"STRONG",{});var UFt=s(Dhe);xBo=r(UFt,"fnet"),UFt.forEach(t),$Bo=r(QSe," \u2014 "),rV=n(QSe,"A",{href:!0});var JFt=s(rV);kBo=r(JFt,"FNetForMaskedLM"),JFt.forEach(t),SBo=r(QSe," (FNet model)"),QSe.forEach(t),RBo=i(H),J2=n(H,"LI",{});var WSe=s(J2);Ghe=n(WSe,"STRONG",{});var YFt=s(Ghe);PBo=r(YFt,"funnel"),YFt.forEach(t),BBo=r(WSe," \u2014 "),tV=n(WSe,"A",{href:!0});var KFt=s(tV);IBo=r(KFt,"FunnelForMaskedLM"),KFt.forEach(t),NBo=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),qBo=i(H),Y2=n(H,"LI",{});var HSe=s(Y2);Ohe=n(HSe,"STRONG",{});var ZFt=s(Ohe);jBo=r(ZFt,"ibert"),ZFt.forEach(t),DBo=r(HSe," \u2014 "),aV=n(HSe,"A",{href:!0});var eTt=s(aV);GBo=r(eTt,"IBertForMaskedLM"),eTt.forEach(t),OBo=r(HSe," (I-BERT model)"),HSe.forEach(t),VBo=i(H),K2=n(H,"LI",{});var USe=s(K2);Vhe=n(USe,"STRONG",{});var oTt=s(Vhe);XBo=r(oTt,"layoutlm"),oTt.forEach(t),zBo=r(USe," \u2014 "),nV=n(USe,"A",{href:!0});var rTt=s(nV);QBo=r(rTt,"LayoutLMForMaskedLM"),rTt.forEach(t),WBo=r(USe," (LayoutLM model)"),USe.forEach(t),HBo=i(H),Z2=n(H,"LI",{});var JSe=s(Z2);Xhe=n(JSe,"STRONG",{});var tTt=s(Xhe);UBo=r(tTt,"longformer"),tTt.forEach(t),JBo=r(JSe," \u2014 "),sV=n(JSe,"A",{href:!0});var aTt=s(sV);YBo=r(aTt,"LongformerForMaskedLM"),aTt.forEach(t),KBo=r(JSe," (Longformer model)"),JSe.forEach(t),ZBo=i(H),eb=n(H,"LI",{});var YSe=s(eb);zhe=n(YSe,"STRONG",{});var nTt=s(zhe);eIo=r(nTt,"luke"),nTt.forEach(t),oIo=r(YSe," \u2014 "),lV=n(YSe,"A",{href:!0});var sTt=s(lV);rIo=r(sTt,"LukeForMaskedLM"),sTt.forEach(t),tIo=r(YSe," (LUKE model)"),YSe.forEach(t),aIo=i(H),ob=n(H,"LI",{});var KSe=s(ob);Qhe=n(KSe,"STRONG",{});var lTt=s(Qhe);nIo=r(lTt,"mbart"),lTt.forEach(t),sIo=r(KSe," \u2014 "),iV=n(KSe,"A",{href:!0});var iTt=s(iV);lIo=r(iTt,"MBartForConditionalGeneration"),iTt.forEach(t),iIo=r(KSe," (mBART model)"),KSe.forEach(t),dIo=i(H),rb=n(H,"LI",{});var ZSe=s(rb);Whe=n(ZSe,"STRONG",{});var dTt=s(Whe);cIo=r(dTt,"megatron-bert"),dTt.forEach(t),fIo=r(ZSe," \u2014 "),dV=n(ZSe,"A",{href:!0});var cTt=s(dV);mIo=r(cTt,"MegatronBertForMaskedLM"),cTt.forEach(t),gIo=r(ZSe," (Megatron-BERT model)"),ZSe.forEach(t),hIo=i(H),tb=n(H,"LI",{});var eRe=s(tb);Hhe=n(eRe,"STRONG",{});var fTt=s(Hhe);pIo=r(fTt,"mobilebert"),fTt.forEach(t),_Io=r(eRe," \u2014 "),cV=n(eRe,"A",{href:!0});var mTt=s(cV);uIo=r(mTt,"MobileBertForMaskedLM"),mTt.forEach(t),bIo=r(eRe," (MobileBERT model)"),eRe.forEach(t),vIo=i(H),ab=n(H,"LI",{});var oRe=s(ab);Uhe=n(oRe,"STRONG",{});var gTt=s(Uhe);FIo=r(gTt,"mpnet"),gTt.forEach(t),TIo=r(oRe," \u2014 "),fV=n(oRe,"A",{href:!0});var hTt=s(fV);MIo=r(hTt,"MPNetForMaskedLM"),hTt.forEach(t),EIo=r(oRe," (MPNet model)"),oRe.forEach(t),CIo=i(H),nb=n(H,"LI",{});var rRe=s(nb);Jhe=n(rRe,"STRONG",{});var pTt=s(Jhe);wIo=r(pTt,"mvp"),pTt.forEach(t),AIo=r(rRe," \u2014 "),mV=n(rRe,"A",{href:!0});var _Tt=s(mV);LIo=r(_Tt,"MvpForConditionalGeneration"),_Tt.forEach(t),yIo=r(rRe," (MVP model)"),rRe.forEach(t),xIo=i(H),sb=n(H,"LI",{});var tRe=s(sb);Yhe=n(tRe,"STRONG",{});var uTt=s(Yhe);$Io=r(uTt,"nezha"),uTt.forEach(t),kIo=r(tRe," \u2014 "),gV=n(tRe,"A",{href:!0});var bTt=s(gV);SIo=r(bTt,"NezhaForMaskedLM"),bTt.forEach(t),RIo=r(tRe," (Nezha model)"),tRe.forEach(t),PIo=i(H),lb=n(H,"LI",{});var aRe=s(lb);Khe=n(aRe,"STRONG",{});var vTt=s(Khe);BIo=r(vTt,"nystromformer"),vTt.forEach(t),IIo=r(aRe," \u2014 "),hV=n(aRe,"A",{href:!0});var FTt=s(hV);NIo=r(FTt,"NystromformerForMaskedLM"),FTt.forEach(t),qIo=r(aRe," (Nystr\xF6mformer model)"),aRe.forEach(t),jIo=i(H),ib=n(H,"LI",{});var nRe=s(ib);Zhe=n(nRe,"STRONG",{});var TTt=s(Zhe);DIo=r(TTt,"perceiver"),TTt.forEach(t),GIo=r(nRe," \u2014 "),pV=n(nRe,"A",{href:!0});var MTt=s(pV);OIo=r(MTt,"PerceiverForMaskedLM"),MTt.forEach(t),VIo=r(nRe," (Perceiver model)"),nRe.forEach(t),XIo=i(H),db=n(H,"LI",{});var sRe=s(db);epe=n(sRe,"STRONG",{});var ETt=s(epe);zIo=r(ETt,"qdqbert"),ETt.forEach(t),QIo=r(sRe," \u2014 "),_V=n(sRe,"A",{href:!0});var CTt=s(_V);WIo=r(CTt,"QDQBertForMaskedLM"),CTt.forEach(t),HIo=r(sRe," (QDQBert model)"),sRe.forEach(t),UIo=i(H),cb=n(H,"LI",{});var lRe=s(cb);ope=n(lRe,"STRONG",{});var wTt=s(ope);JIo=r(wTt,"reformer"),wTt.forEach(t),YIo=r(lRe," \u2014 "),uV=n(lRe,"A",{href:!0});var ATt=s(uV);KIo=r(ATt,"ReformerForMaskedLM"),ATt.forEach(t),ZIo=r(lRe," (Reformer model)"),lRe.forEach(t),eNo=i(H),fb=n(H,"LI",{});var iRe=s(fb);rpe=n(iRe,"STRONG",{});var LTt=s(rpe);oNo=r(LTt,"rembert"),LTt.forEach(t),rNo=r(iRe," \u2014 "),bV=n(iRe,"A",{href:!0});var yTt=s(bV);tNo=r(yTt,"RemBertForMaskedLM"),yTt.forEach(t),aNo=r(iRe," (RemBERT model)"),iRe.forEach(t),nNo=i(H),mb=n(H,"LI",{});var dRe=s(mb);tpe=n(dRe,"STRONG",{});var xTt=s(tpe);sNo=r(xTt,"roberta"),xTt.forEach(t),lNo=r(dRe," \u2014 "),vV=n(dRe,"A",{href:!0});var $Tt=s(vV);iNo=r($Tt,"RobertaForMaskedLM"),$Tt.forEach(t),dNo=r(dRe," (RoBERTa model)"),dRe.forEach(t),cNo=i(H),gb=n(H,"LI",{});var cRe=s(gb);ape=n(cRe,"STRONG",{});var kTt=s(ape);fNo=r(kTt,"roformer"),kTt.forEach(t),mNo=r(cRe," \u2014 "),FV=n(cRe,"A",{href:!0});var STt=s(FV);gNo=r(STt,"RoFormerForMaskedLM"),STt.forEach(t),hNo=r(cRe," (RoFormer model)"),cRe.forEach(t),pNo=i(H),hb=n(H,"LI",{});var fRe=s(hb);npe=n(fRe,"STRONG",{});var RTt=s(npe);_No=r(RTt,"squeezebert"),RTt.forEach(t),uNo=r(fRe," \u2014 "),TV=n(fRe,"A",{href:!0});var PTt=s(TV);bNo=r(PTt,"SqueezeBertForMaskedLM"),PTt.forEach(t),vNo=r(fRe," (SqueezeBERT model)"),fRe.forEach(t),FNo=i(H),pb=n(H,"LI",{});var mRe=s(pb);spe=n(mRe,"STRONG",{});var BTt=s(spe);TNo=r(BTt,"tapas"),BTt.forEach(t),MNo=r(mRe," \u2014 "),MV=n(mRe,"A",{href:!0});var ITt=s(MV);ENo=r(ITt,"TapasForMaskedLM"),ITt.forEach(t),CNo=r(mRe," (TAPAS model)"),mRe.forEach(t),wNo=i(H),_b=n(H,"LI",{});var gRe=s(_b);lpe=n(gRe,"STRONG",{});var NTt=s(lpe);ANo=r(NTt,"wav2vec2"),NTt.forEach(t),LNo=r(gRe," \u2014 "),ipe=n(gRe,"CODE",{});var qTt=s(ipe);yNo=r(qTt,"Wav2Vec2ForMaskedLM"),qTt.forEach(t),xNo=r(gRe," (Wav2Vec2 model)"),gRe.forEach(t),$No=i(H),ub=n(H,"LI",{});var hRe=s(ub);dpe=n(hRe,"STRONG",{});var jTt=s(dpe);kNo=r(jTt,"xlm"),jTt.forEach(t),SNo=r(hRe," \u2014 "),EV=n(hRe,"A",{href:!0});var DTt=s(EV);RNo=r(DTt,"XLMWithLMHeadModel"),DTt.forEach(t),PNo=r(hRe," (XLM model)"),hRe.forEach(t),BNo=i(H),bb=n(H,"LI",{});var pRe=s(bb);cpe=n(pRe,"STRONG",{});var GTt=s(cpe);INo=r(GTt,"xlm-roberta"),GTt.forEach(t),NNo=r(pRe," \u2014 "),CV=n(pRe,"A",{href:!0});var OTt=s(CV);qNo=r(OTt,"XLMRobertaForMaskedLM"),OTt.forEach(t),jNo=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),DNo=i(H),vb=n(H,"LI",{});var _Re=s(vb);fpe=n(_Re,"STRONG",{});var VTt=s(fpe);GNo=r(VTt,"xlm-roberta-xl"),VTt.forEach(t),ONo=r(_Re," \u2014 "),wV=n(_Re,"A",{href:!0});var XTt=s(wV);VNo=r(XTt,"XLMRobertaXLForMaskedLM"),XTt.forEach(t),XNo=r(_Re," (XLM-RoBERTa-XL model)"),_Re.forEach(t),zNo=i(H),Fb=n(H,"LI",{});var uRe=s(Fb);mpe=n(uRe,"STRONG",{});var zTt=s(mpe);QNo=r(zTt,"yoso"),zTt.forEach(t),WNo=r(uRe," \u2014 "),AV=n(uRe,"A",{href:!0});var QTt=s(AV);HNo=r(QTt,"YosoForMaskedLM"),QTt.forEach(t),UNo=r(uRe," (YOSO model)"),uRe.forEach(t),H.forEach(t),JNo=i(da),Tb=n(da,"P",{});var bRe=s(Tb);YNo=r(bRe,"The model is set in evaluation mode by default using "),gpe=n(bRe,"CODE",{});var WTt=s(gpe);KNo=r(WTt,"model.eval()"),WTt.forEach(t),ZNo=r(bRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(bRe,"CODE",{});var HTt=s(hpe);eqo=r(HTt,"model.train()"),HTt.forEach(t),bRe.forEach(t),oqo=i(da),T(Mb.$$.fragment,da),da.forEach(t),al.forEach(t),AXe=i(f),Ki=n(f,"H2",{class:!0});var SQe=s(Ki);Eb=n(SQe,"A",{id:!0,class:!0,href:!0});var UTt=s(Eb);ppe=n(UTt,"SPAN",{});var JTt=s(ppe);T(ZL.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),rqo=i(SQe),_pe=n(SQe,"SPAN",{});var YTt=s(_pe);tqo=r(YTt,"AutoModelForSeq2SeqLM"),YTt.forEach(t),SQe.forEach(t),LXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(ey.$$.fragment,nl),aqo=i(nl),Zi=n(nl,"P",{});var Gre=s(Zi);nqo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LV=n(Gre,"A",{href:!0});var KTt=s(LV);sqo=r(KTt,"from_pretrained()"),KTt.forEach(t),lqo=r(Gre," class method or the "),yV=n(Gre,"A",{href:!0});var ZTt=s(yV);iqo=r(ZTt,"from_config()"),ZTt.forEach(t),dqo=r(Gre,` class
method.`),Gre.forEach(t),cqo=i(nl),oy=n(nl,"P",{});var RQe=s(oy);fqo=r(RQe,"This class cannot be instantiated directly using "),upe=n(RQe,"CODE",{});var e7t=s(upe);mqo=r(e7t,"__init__()"),e7t.forEach(t),gqo=r(RQe," (throws an error)."),RQe.forEach(t),hqo=i(nl),ft=n(nl,"DIV",{class:!0});var vA=s(ft);T(ry.$$.fragment,vA),pqo=i(vA),bpe=n(vA,"P",{});var o7t=s(bpe);_qo=r(o7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),o7t.forEach(t),uqo=i(vA),ed=n(vA,"P",{});var Ore=s(ed);bqo=r(Ore,`Note:
Loading a model from its configuration file does `),vpe=n(Ore,"STRONG",{});var r7t=s(vpe);vqo=r(r7t,"not"),r7t.forEach(t),Fqo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(Ore,"A",{href:!0});var t7t=s(xV);Tqo=r(t7t,"from_pretrained()"),t7t.forEach(t),Mqo=r(Ore," to load the model weights."),Ore.forEach(t),Eqo=i(vA),T(Cb.$$.fragment,vA),vA.forEach(t),Cqo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(ty.$$.fragment,ca),wqo=i(ca),Fpe=n(ca,"P",{});var a7t=s(Fpe);Aqo=r(a7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a7t.forEach(t),Lqo=i(ca),Da=n(ca,"P",{});var FA=s(Da);yqo=r(FA,"The model class to instantiate is selected based on the "),Tpe=n(FA,"CODE",{});var n7t=s(Tpe);xqo=r(n7t,"model_type"),n7t.forEach(t),$qo=r(FA,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(FA,"CODE",{});var s7t=s(Mpe);kqo=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),Sqo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(FA,"CODE",{});var l7t=s(Epe);Rqo=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),Pqo=r(FA,":"),FA.forEach(t),Bqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);wb=n(be,"LI",{});var vRe=s(wb);Cpe=n(vRe,"STRONG",{});var i7t=s(Cpe);Iqo=r(i7t,"bart"),i7t.forEach(t),Nqo=r(vRe," \u2014 "),$V=n(vRe,"A",{href:!0});var d7t=s($V);qqo=r(d7t,"BartForConditionalGeneration"),d7t.forEach(t),jqo=r(vRe," (BART model)"),vRe.forEach(t),Dqo=i(be),Ab=n(be,"LI",{});var FRe=s(Ab);wpe=n(FRe,"STRONG",{});var c7t=s(wpe);Gqo=r(c7t,"bigbird_pegasus"),c7t.forEach(t),Oqo=r(FRe," \u2014 "),kV=n(FRe,"A",{href:!0});var f7t=s(kV);Vqo=r(f7t,"BigBirdPegasusForConditionalGeneration"),f7t.forEach(t),Xqo=r(FRe," (BigBird-Pegasus model)"),FRe.forEach(t),zqo=i(be),Lb=n(be,"LI",{});var TRe=s(Lb);Ape=n(TRe,"STRONG",{});var m7t=s(Ape);Qqo=r(m7t,"blenderbot"),m7t.forEach(t),Wqo=r(TRe," \u2014 "),SV=n(TRe,"A",{href:!0});var g7t=s(SV);Hqo=r(g7t,"BlenderbotForConditionalGeneration"),g7t.forEach(t),Uqo=r(TRe," (Blenderbot model)"),TRe.forEach(t),Jqo=i(be),yb=n(be,"LI",{});var MRe=s(yb);Lpe=n(MRe,"STRONG",{});var h7t=s(Lpe);Yqo=r(h7t,"blenderbot-small"),h7t.forEach(t),Kqo=r(MRe," \u2014 "),RV=n(MRe,"A",{href:!0});var p7t=s(RV);Zqo=r(p7t,"BlenderbotSmallForConditionalGeneration"),p7t.forEach(t),ejo=r(MRe," (BlenderbotSmall model)"),MRe.forEach(t),ojo=i(be),xb=n(be,"LI",{});var ERe=s(xb);ype=n(ERe,"STRONG",{});var _7t=s(ype);rjo=r(_7t,"encoder-decoder"),_7t.forEach(t),tjo=r(ERe," \u2014 "),PV=n(ERe,"A",{href:!0});var u7t=s(PV);ajo=r(u7t,"EncoderDecoderModel"),u7t.forEach(t),njo=r(ERe," (Encoder decoder model)"),ERe.forEach(t),sjo=i(be),$b=n(be,"LI",{});var CRe=s($b);xpe=n(CRe,"STRONG",{});var b7t=s(xpe);ljo=r(b7t,"fsmt"),b7t.forEach(t),ijo=r(CRe," \u2014 "),BV=n(CRe,"A",{href:!0});var v7t=s(BV);djo=r(v7t,"FSMTForConditionalGeneration"),v7t.forEach(t),cjo=r(CRe," (FairSeq Machine-Translation model)"),CRe.forEach(t),fjo=i(be),kb=n(be,"LI",{});var wRe=s(kb);$pe=n(wRe,"STRONG",{});var F7t=s($pe);mjo=r(F7t,"led"),F7t.forEach(t),gjo=r(wRe," \u2014 "),IV=n(wRe,"A",{href:!0});var T7t=s(IV);hjo=r(T7t,"LEDForConditionalGeneration"),T7t.forEach(t),pjo=r(wRe," (LED model)"),wRe.forEach(t),_jo=i(be),Sb=n(be,"LI",{});var ARe=s(Sb);kpe=n(ARe,"STRONG",{});var M7t=s(kpe);ujo=r(M7t,"longt5"),M7t.forEach(t),bjo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var E7t=s(NV);vjo=r(E7t,"LongT5ForConditionalGeneration"),E7t.forEach(t),Fjo=r(ARe," (LongT5 model)"),ARe.forEach(t),Tjo=i(be),Rb=n(be,"LI",{});var LRe=s(Rb);Spe=n(LRe,"STRONG",{});var C7t=s(Spe);Mjo=r(C7t,"m2m_100"),C7t.forEach(t),Ejo=r(LRe," \u2014 "),qV=n(LRe,"A",{href:!0});var w7t=s(qV);Cjo=r(w7t,"M2M100ForConditionalGeneration"),w7t.forEach(t),wjo=r(LRe," (M2M100 model)"),LRe.forEach(t),Ajo=i(be),Pb=n(be,"LI",{});var yRe=s(Pb);Rpe=n(yRe,"STRONG",{});var A7t=s(Rpe);Ljo=r(A7t,"marian"),A7t.forEach(t),yjo=r(yRe," \u2014 "),jV=n(yRe,"A",{href:!0});var L7t=s(jV);xjo=r(L7t,"MarianMTModel"),L7t.forEach(t),$jo=r(yRe," (Marian model)"),yRe.forEach(t),kjo=i(be),Bb=n(be,"LI",{});var xRe=s(Bb);Ppe=n(xRe,"STRONG",{});var y7t=s(Ppe);Sjo=r(y7t,"mbart"),y7t.forEach(t),Rjo=r(xRe," \u2014 "),DV=n(xRe,"A",{href:!0});var x7t=s(DV);Pjo=r(x7t,"MBartForConditionalGeneration"),x7t.forEach(t),Bjo=r(xRe," (mBART model)"),xRe.forEach(t),Ijo=i(be),Ib=n(be,"LI",{});var $Re=s(Ib);Bpe=n($Re,"STRONG",{});var $7t=s(Bpe);Njo=r($7t,"mt5"),$7t.forEach(t),qjo=r($Re," \u2014 "),GV=n($Re,"A",{href:!0});var k7t=s(GV);jjo=r(k7t,"MT5ForConditionalGeneration"),k7t.forEach(t),Djo=r($Re," (MT5 model)"),$Re.forEach(t),Gjo=i(be),Nb=n(be,"LI",{});var kRe=s(Nb);Ipe=n(kRe,"STRONG",{});var S7t=s(Ipe);Ojo=r(S7t,"mvp"),S7t.forEach(t),Vjo=r(kRe," \u2014 "),OV=n(kRe,"A",{href:!0});var R7t=s(OV);Xjo=r(R7t,"MvpForConditionalGeneration"),R7t.forEach(t),zjo=r(kRe," (MVP model)"),kRe.forEach(t),Qjo=i(be),qb=n(be,"LI",{});var SRe=s(qb);Npe=n(SRe,"STRONG",{});var P7t=s(Npe);Wjo=r(P7t,"pegasus"),P7t.forEach(t),Hjo=r(SRe," \u2014 "),VV=n(SRe,"A",{href:!0});var B7t=s(VV);Ujo=r(B7t,"PegasusForConditionalGeneration"),B7t.forEach(t),Jjo=r(SRe," (Pegasus model)"),SRe.forEach(t),Yjo=i(be),jb=n(be,"LI",{});var RRe=s(jb);qpe=n(RRe,"STRONG",{});var I7t=s(qpe);Kjo=r(I7t,"plbart"),I7t.forEach(t),Zjo=r(RRe," \u2014 "),XV=n(RRe,"A",{href:!0});var N7t=s(XV);eDo=r(N7t,"PLBartForConditionalGeneration"),N7t.forEach(t),oDo=r(RRe," (PLBart model)"),RRe.forEach(t),rDo=i(be),Db=n(be,"LI",{});var PRe=s(Db);jpe=n(PRe,"STRONG",{});var q7t=s(jpe);tDo=r(q7t,"prophetnet"),q7t.forEach(t),aDo=r(PRe," \u2014 "),zV=n(PRe,"A",{href:!0});var j7t=s(zV);nDo=r(j7t,"ProphetNetForConditionalGeneration"),j7t.forEach(t),sDo=r(PRe," (ProphetNet model)"),PRe.forEach(t),lDo=i(be),Gb=n(be,"LI",{});var BRe=s(Gb);Dpe=n(BRe,"STRONG",{});var D7t=s(Dpe);iDo=r(D7t,"t5"),D7t.forEach(t),dDo=r(BRe," \u2014 "),QV=n(BRe,"A",{href:!0});var G7t=s(QV);cDo=r(G7t,"T5ForConditionalGeneration"),G7t.forEach(t),fDo=r(BRe," (T5 model)"),BRe.forEach(t),mDo=i(be),Ob=n(be,"LI",{});var IRe=s(Ob);Gpe=n(IRe,"STRONG",{});var O7t=s(Gpe);gDo=r(O7t,"xlm-prophetnet"),O7t.forEach(t),hDo=r(IRe," \u2014 "),WV=n(IRe,"A",{href:!0});var V7t=s(WV);pDo=r(V7t,"XLMProphetNetForConditionalGeneration"),V7t.forEach(t),_Do=r(IRe," (XLM-ProphetNet model)"),IRe.forEach(t),be.forEach(t),uDo=i(ca),Vb=n(ca,"P",{});var NRe=s(Vb);bDo=r(NRe,"The model is set in evaluation mode by default using "),Ope=n(NRe,"CODE",{});var X7t=s(Ope);vDo=r(X7t,"model.eval()"),X7t.forEach(t),FDo=r(NRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(NRe,"CODE",{});var z7t=s(Vpe);TDo=r(z7t,"model.train()"),z7t.forEach(t),NRe.forEach(t),MDo=i(ca),T(Xb.$$.fragment,ca),ca.forEach(t),nl.forEach(t),yXe=i(f),od=n(f,"H2",{class:!0});var PQe=s(od);zb=n(PQe,"A",{id:!0,class:!0,href:!0});var Q7t=s(zb);Xpe=n(Q7t,"SPAN",{});var W7t=s(Xpe);T(ay.$$.fragment,W7t),W7t.forEach(t),Q7t.forEach(t),EDo=i(PQe),zpe=n(PQe,"SPAN",{});var H7t=s(zpe);CDo=r(H7t,"AutoModelForSequenceClassification"),H7t.forEach(t),PQe.forEach(t),xXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(ny.$$.fragment,sl),wDo=i(sl),rd=n(sl,"P",{});var Vre=s(rd);ADo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HV=n(Vre,"A",{href:!0});var U7t=s(HV);LDo=r(U7t,"from_pretrained()"),U7t.forEach(t),yDo=r(Vre," class method or the "),UV=n(Vre,"A",{href:!0});var J7t=s(UV);xDo=r(J7t,"from_config()"),J7t.forEach(t),$Do=r(Vre,` class
method.`),Vre.forEach(t),kDo=i(sl),sy=n(sl,"P",{});var BQe=s(sy);SDo=r(BQe,"This class cannot be instantiated directly using "),Qpe=n(BQe,"CODE",{});var Y7t=s(Qpe);RDo=r(Y7t,"__init__()"),Y7t.forEach(t),PDo=r(BQe," (throws an error)."),BQe.forEach(t),BDo=i(sl),mt=n(sl,"DIV",{class:!0});var TA=s(mt);T(ly.$$.fragment,TA),IDo=i(TA),Wpe=n(TA,"P",{});var K7t=s(Wpe);NDo=r(K7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K7t.forEach(t),qDo=i(TA),td=n(TA,"P",{});var Xre=s(td);jDo=r(Xre,`Note:
Loading a model from its configuration file does `),Hpe=n(Xre,"STRONG",{});var Z7t=s(Hpe);DDo=r(Z7t,"not"),Z7t.forEach(t),GDo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(Xre,"A",{href:!0});var e8t=s(JV);ODo=r(e8t,"from_pretrained()"),e8t.forEach(t),VDo=r(Xre," to load the model weights."),Xre.forEach(t),XDo=i(TA),T(Qb.$$.fragment,TA),TA.forEach(t),zDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(iy.$$.fragment,fa),QDo=i(fa),Upe=n(fa,"P",{});var o8t=s(Upe);WDo=r(o8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o8t.forEach(t),HDo=i(fa),Ga=n(fa,"P",{});var MA=s(Ga);UDo=r(MA,"The model class to instantiate is selected based on the "),Jpe=n(MA,"CODE",{});var r8t=s(Jpe);JDo=r(r8t,"model_type"),r8t.forEach(t),YDo=r(MA,` property of the config object (either
passed as an argument or loaded from `),Ype=n(MA,"CODE",{});var t8t=s(Ype);KDo=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),ZDo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(MA,"CODE",{});var a8t=s(Kpe);eGo=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),oGo=r(MA,":"),MA.forEach(t),rGo=i(fa),N=n(fa,"UL",{});var j=s(N);Wb=n(j,"LI",{});var qRe=s(Wb);Zpe=n(qRe,"STRONG",{});var n8t=s(Zpe);tGo=r(n8t,"albert"),n8t.forEach(t),aGo=r(qRe," \u2014 "),YV=n(qRe,"A",{href:!0});var s8t=s(YV);nGo=r(s8t,"AlbertForSequenceClassification"),s8t.forEach(t),sGo=r(qRe," (ALBERT model)"),qRe.forEach(t),lGo=i(j),Hb=n(j,"LI",{});var jRe=s(Hb);e_e=n(jRe,"STRONG",{});var l8t=s(e_e);iGo=r(l8t,"bart"),l8t.forEach(t),dGo=r(jRe," \u2014 "),KV=n(jRe,"A",{href:!0});var i8t=s(KV);cGo=r(i8t,"BartForSequenceClassification"),i8t.forEach(t),fGo=r(jRe," (BART model)"),jRe.forEach(t),mGo=i(j),Ub=n(j,"LI",{});var DRe=s(Ub);o_e=n(DRe,"STRONG",{});var d8t=s(o_e);gGo=r(d8t,"bert"),d8t.forEach(t),hGo=r(DRe," \u2014 "),ZV=n(DRe,"A",{href:!0});var c8t=s(ZV);pGo=r(c8t,"BertForSequenceClassification"),c8t.forEach(t),_Go=r(DRe," (BERT model)"),DRe.forEach(t),uGo=i(j),Jb=n(j,"LI",{});var GRe=s(Jb);r_e=n(GRe,"STRONG",{});var f8t=s(r_e);bGo=r(f8t,"big_bird"),f8t.forEach(t),vGo=r(GRe," \u2014 "),eX=n(GRe,"A",{href:!0});var m8t=s(eX);FGo=r(m8t,"BigBirdForSequenceClassification"),m8t.forEach(t),TGo=r(GRe," (BigBird model)"),GRe.forEach(t),MGo=i(j),Yb=n(j,"LI",{});var ORe=s(Yb);t_e=n(ORe,"STRONG",{});var g8t=s(t_e);EGo=r(g8t,"bigbird_pegasus"),g8t.forEach(t),CGo=r(ORe," \u2014 "),oX=n(ORe,"A",{href:!0});var h8t=s(oX);wGo=r(h8t,"BigBirdPegasusForSequenceClassification"),h8t.forEach(t),AGo=r(ORe," (BigBird-Pegasus model)"),ORe.forEach(t),LGo=i(j),Kb=n(j,"LI",{});var VRe=s(Kb);a_e=n(VRe,"STRONG",{});var p8t=s(a_e);yGo=r(p8t,"bloom"),p8t.forEach(t),xGo=r(VRe," \u2014 "),rX=n(VRe,"A",{href:!0});var _8t=s(rX);$Go=r(_8t,"BloomForSequenceClassification"),_8t.forEach(t),kGo=r(VRe," (BLOOM model)"),VRe.forEach(t),SGo=i(j),Zb=n(j,"LI",{});var XRe=s(Zb);n_e=n(XRe,"STRONG",{});var u8t=s(n_e);RGo=r(u8t,"camembert"),u8t.forEach(t),PGo=r(XRe," \u2014 "),tX=n(XRe,"A",{href:!0});var b8t=s(tX);BGo=r(b8t,"CamembertForSequenceClassification"),b8t.forEach(t),IGo=r(XRe," (CamemBERT model)"),XRe.forEach(t),NGo=i(j),ev=n(j,"LI",{});var zRe=s(ev);s_e=n(zRe,"STRONG",{});var v8t=s(s_e);qGo=r(v8t,"canine"),v8t.forEach(t),jGo=r(zRe," \u2014 "),aX=n(zRe,"A",{href:!0});var F8t=s(aX);DGo=r(F8t,"CanineForSequenceClassification"),F8t.forEach(t),GGo=r(zRe," (CANINE model)"),zRe.forEach(t),OGo=i(j),ov=n(j,"LI",{});var QRe=s(ov);l_e=n(QRe,"STRONG",{});var T8t=s(l_e);VGo=r(T8t,"convbert"),T8t.forEach(t),XGo=r(QRe," \u2014 "),nX=n(QRe,"A",{href:!0});var M8t=s(nX);zGo=r(M8t,"ConvBertForSequenceClassification"),M8t.forEach(t),QGo=r(QRe," (ConvBERT model)"),QRe.forEach(t),WGo=i(j),rv=n(j,"LI",{});var WRe=s(rv);i_e=n(WRe,"STRONG",{});var E8t=s(i_e);HGo=r(E8t,"ctrl"),E8t.forEach(t),UGo=r(WRe," \u2014 "),sX=n(WRe,"A",{href:!0});var C8t=s(sX);JGo=r(C8t,"CTRLForSequenceClassification"),C8t.forEach(t),YGo=r(WRe," (CTRL model)"),WRe.forEach(t),KGo=i(j),tv=n(j,"LI",{});var HRe=s(tv);d_e=n(HRe,"STRONG",{});var w8t=s(d_e);ZGo=r(w8t,"data2vec-text"),w8t.forEach(t),eOo=r(HRe," \u2014 "),lX=n(HRe,"A",{href:!0});var A8t=s(lX);oOo=r(A8t,"Data2VecTextForSequenceClassification"),A8t.forEach(t),rOo=r(HRe," (Data2VecText model)"),HRe.forEach(t),tOo=i(j),av=n(j,"LI",{});var URe=s(av);c_e=n(URe,"STRONG",{});var L8t=s(c_e);aOo=r(L8t,"deberta"),L8t.forEach(t),nOo=r(URe," \u2014 "),iX=n(URe,"A",{href:!0});var y8t=s(iX);sOo=r(y8t,"DebertaForSequenceClassification"),y8t.forEach(t),lOo=r(URe," (DeBERTa model)"),URe.forEach(t),iOo=i(j),nv=n(j,"LI",{});var JRe=s(nv);f_e=n(JRe,"STRONG",{});var x8t=s(f_e);dOo=r(x8t,"deberta-v2"),x8t.forEach(t),cOo=r(JRe," \u2014 "),dX=n(JRe,"A",{href:!0});var $8t=s(dX);fOo=r($8t,"DebertaV2ForSequenceClassification"),$8t.forEach(t),mOo=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),gOo=i(j),sv=n(j,"LI",{});var YRe=s(sv);m_e=n(YRe,"STRONG",{});var k8t=s(m_e);hOo=r(k8t,"distilbert"),k8t.forEach(t),pOo=r(YRe," \u2014 "),cX=n(YRe,"A",{href:!0});var S8t=s(cX);_Oo=r(S8t,"DistilBertForSequenceClassification"),S8t.forEach(t),uOo=r(YRe," (DistilBERT model)"),YRe.forEach(t),bOo=i(j),lv=n(j,"LI",{});var KRe=s(lv);g_e=n(KRe,"STRONG",{});var R8t=s(g_e);vOo=r(R8t,"electra"),R8t.forEach(t),FOo=r(KRe," \u2014 "),fX=n(KRe,"A",{href:!0});var P8t=s(fX);TOo=r(P8t,"ElectraForSequenceClassification"),P8t.forEach(t),MOo=r(KRe," (ELECTRA model)"),KRe.forEach(t),EOo=i(j),iv=n(j,"LI",{});var ZRe=s(iv);h_e=n(ZRe,"STRONG",{});var B8t=s(h_e);COo=r(B8t,"flaubert"),B8t.forEach(t),wOo=r(ZRe," \u2014 "),mX=n(ZRe,"A",{href:!0});var I8t=s(mX);AOo=r(I8t,"FlaubertForSequenceClassification"),I8t.forEach(t),LOo=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),yOo=i(j),dv=n(j,"LI",{});var ePe=s(dv);p_e=n(ePe,"STRONG",{});var N8t=s(p_e);xOo=r(N8t,"fnet"),N8t.forEach(t),$Oo=r(ePe," \u2014 "),gX=n(ePe,"A",{href:!0});var q8t=s(gX);kOo=r(q8t,"FNetForSequenceClassification"),q8t.forEach(t),SOo=r(ePe," (FNet model)"),ePe.forEach(t),ROo=i(j),cv=n(j,"LI",{});var oPe=s(cv);__e=n(oPe,"STRONG",{});var j8t=s(__e);POo=r(j8t,"funnel"),j8t.forEach(t),BOo=r(oPe," \u2014 "),hX=n(oPe,"A",{href:!0});var D8t=s(hX);IOo=r(D8t,"FunnelForSequenceClassification"),D8t.forEach(t),NOo=r(oPe," (Funnel Transformer model)"),oPe.forEach(t),qOo=i(j),fv=n(j,"LI",{});var rPe=s(fv);u_e=n(rPe,"STRONG",{});var G8t=s(u_e);jOo=r(G8t,"gpt2"),G8t.forEach(t),DOo=r(rPe," \u2014 "),pX=n(rPe,"A",{href:!0});var O8t=s(pX);GOo=r(O8t,"GPT2ForSequenceClassification"),O8t.forEach(t),OOo=r(rPe," (OpenAI GPT-2 model)"),rPe.forEach(t),VOo=i(j),mv=n(j,"LI",{});var tPe=s(mv);b_e=n(tPe,"STRONG",{});var V8t=s(b_e);XOo=r(V8t,"gpt_neo"),V8t.forEach(t),zOo=r(tPe," \u2014 "),_X=n(tPe,"A",{href:!0});var X8t=s(_X);QOo=r(X8t,"GPTNeoForSequenceClassification"),X8t.forEach(t),WOo=r(tPe," (GPT Neo model)"),tPe.forEach(t),HOo=i(j),gv=n(j,"LI",{});var aPe=s(gv);v_e=n(aPe,"STRONG",{});var z8t=s(v_e);UOo=r(z8t,"gptj"),z8t.forEach(t),JOo=r(aPe," \u2014 "),uX=n(aPe,"A",{href:!0});var Q8t=s(uX);YOo=r(Q8t,"GPTJForSequenceClassification"),Q8t.forEach(t),KOo=r(aPe," (GPT-J model)"),aPe.forEach(t),ZOo=i(j),hv=n(j,"LI",{});var nPe=s(hv);F_e=n(nPe,"STRONG",{});var W8t=s(F_e);eVo=r(W8t,"ibert"),W8t.forEach(t),oVo=r(nPe," \u2014 "),bX=n(nPe,"A",{href:!0});var H8t=s(bX);rVo=r(H8t,"IBertForSequenceClassification"),H8t.forEach(t),tVo=r(nPe," (I-BERT model)"),nPe.forEach(t),aVo=i(j),pv=n(j,"LI",{});var sPe=s(pv);T_e=n(sPe,"STRONG",{});var U8t=s(T_e);nVo=r(U8t,"layoutlm"),U8t.forEach(t),sVo=r(sPe," \u2014 "),vX=n(sPe,"A",{href:!0});var J8t=s(vX);lVo=r(J8t,"LayoutLMForSequenceClassification"),J8t.forEach(t),iVo=r(sPe," (LayoutLM model)"),sPe.forEach(t),dVo=i(j),_v=n(j,"LI",{});var lPe=s(_v);M_e=n(lPe,"STRONG",{});var Y8t=s(M_e);cVo=r(Y8t,"layoutlmv2"),Y8t.forEach(t),fVo=r(lPe," \u2014 "),FX=n(lPe,"A",{href:!0});var K8t=s(FX);mVo=r(K8t,"LayoutLMv2ForSequenceClassification"),K8t.forEach(t),gVo=r(lPe," (LayoutLMv2 model)"),lPe.forEach(t),hVo=i(j),uv=n(j,"LI",{});var iPe=s(uv);E_e=n(iPe,"STRONG",{});var Z8t=s(E_e);pVo=r(Z8t,"layoutlmv3"),Z8t.forEach(t),_Vo=r(iPe," \u2014 "),TX=n(iPe,"A",{href:!0});var eMt=s(TX);uVo=r(eMt,"LayoutLMv3ForSequenceClassification"),eMt.forEach(t),bVo=r(iPe," (LayoutLMv3 model)"),iPe.forEach(t),vVo=i(j),bv=n(j,"LI",{});var dPe=s(bv);C_e=n(dPe,"STRONG",{});var oMt=s(C_e);FVo=r(oMt,"led"),oMt.forEach(t),TVo=r(dPe," \u2014 "),MX=n(dPe,"A",{href:!0});var rMt=s(MX);MVo=r(rMt,"LEDForSequenceClassification"),rMt.forEach(t),EVo=r(dPe," (LED model)"),dPe.forEach(t),CVo=i(j),vv=n(j,"LI",{});var cPe=s(vv);w_e=n(cPe,"STRONG",{});var tMt=s(w_e);wVo=r(tMt,"longformer"),tMt.forEach(t),AVo=r(cPe," \u2014 "),EX=n(cPe,"A",{href:!0});var aMt=s(EX);LVo=r(aMt,"LongformerForSequenceClassification"),aMt.forEach(t),yVo=r(cPe," (Longformer model)"),cPe.forEach(t),xVo=i(j),Fv=n(j,"LI",{});var fPe=s(Fv);A_e=n(fPe,"STRONG",{});var nMt=s(A_e);$Vo=r(nMt,"mbart"),nMt.forEach(t),kVo=r(fPe," \u2014 "),CX=n(fPe,"A",{href:!0});var sMt=s(CX);SVo=r(sMt,"MBartForSequenceClassification"),sMt.forEach(t),RVo=r(fPe," (mBART model)"),fPe.forEach(t),PVo=i(j),Tv=n(j,"LI",{});var mPe=s(Tv);L_e=n(mPe,"STRONG",{});var lMt=s(L_e);BVo=r(lMt,"megatron-bert"),lMt.forEach(t),IVo=r(mPe," \u2014 "),wX=n(mPe,"A",{href:!0});var iMt=s(wX);NVo=r(iMt,"MegatronBertForSequenceClassification"),iMt.forEach(t),qVo=r(mPe," (Megatron-BERT model)"),mPe.forEach(t),jVo=i(j),Mv=n(j,"LI",{});var gPe=s(Mv);y_e=n(gPe,"STRONG",{});var dMt=s(y_e);DVo=r(dMt,"mobilebert"),dMt.forEach(t),GVo=r(gPe," \u2014 "),AX=n(gPe,"A",{href:!0});var cMt=s(AX);OVo=r(cMt,"MobileBertForSequenceClassification"),cMt.forEach(t),VVo=r(gPe," (MobileBERT model)"),gPe.forEach(t),XVo=i(j),Ev=n(j,"LI",{});var hPe=s(Ev);x_e=n(hPe,"STRONG",{});var fMt=s(x_e);zVo=r(fMt,"mpnet"),fMt.forEach(t),QVo=r(hPe," \u2014 "),LX=n(hPe,"A",{href:!0});var mMt=s(LX);WVo=r(mMt,"MPNetForSequenceClassification"),mMt.forEach(t),HVo=r(hPe," (MPNet model)"),hPe.forEach(t),UVo=i(j),Cv=n(j,"LI",{});var pPe=s(Cv);$_e=n(pPe,"STRONG",{});var gMt=s($_e);JVo=r(gMt,"mvp"),gMt.forEach(t),YVo=r(pPe," \u2014 "),yX=n(pPe,"A",{href:!0});var hMt=s(yX);KVo=r(hMt,"MvpForSequenceClassification"),hMt.forEach(t),ZVo=r(pPe," (MVP model)"),pPe.forEach(t),eXo=i(j),wv=n(j,"LI",{});var _Pe=s(wv);k_e=n(_Pe,"STRONG",{});var pMt=s(k_e);oXo=r(pMt,"nezha"),pMt.forEach(t),rXo=r(_Pe," \u2014 "),xX=n(_Pe,"A",{href:!0});var _Mt=s(xX);tXo=r(_Mt,"NezhaForSequenceClassification"),_Mt.forEach(t),aXo=r(_Pe," (Nezha model)"),_Pe.forEach(t),nXo=i(j),Av=n(j,"LI",{});var uPe=s(Av);S_e=n(uPe,"STRONG",{});var uMt=s(S_e);sXo=r(uMt,"nystromformer"),uMt.forEach(t),lXo=r(uPe," \u2014 "),$X=n(uPe,"A",{href:!0});var bMt=s($X);iXo=r(bMt,"NystromformerForSequenceClassification"),bMt.forEach(t),dXo=r(uPe," (Nystr\xF6mformer model)"),uPe.forEach(t),cXo=i(j),Lv=n(j,"LI",{});var bPe=s(Lv);R_e=n(bPe,"STRONG",{});var vMt=s(R_e);fXo=r(vMt,"openai-gpt"),vMt.forEach(t),mXo=r(bPe," \u2014 "),kX=n(bPe,"A",{href:!0});var FMt=s(kX);gXo=r(FMt,"OpenAIGPTForSequenceClassification"),FMt.forEach(t),hXo=r(bPe," (OpenAI GPT model)"),bPe.forEach(t),pXo=i(j),yv=n(j,"LI",{});var vPe=s(yv);P_e=n(vPe,"STRONG",{});var TMt=s(P_e);_Xo=r(TMt,"perceiver"),TMt.forEach(t),uXo=r(vPe," \u2014 "),SX=n(vPe,"A",{href:!0});var MMt=s(SX);bXo=r(MMt,"PerceiverForSequenceClassification"),MMt.forEach(t),vXo=r(vPe," (Perceiver model)"),vPe.forEach(t),FXo=i(j),xv=n(j,"LI",{});var FPe=s(xv);B_e=n(FPe,"STRONG",{});var EMt=s(B_e);TXo=r(EMt,"plbart"),EMt.forEach(t),MXo=r(FPe," \u2014 "),RX=n(FPe,"A",{href:!0});var CMt=s(RX);EXo=r(CMt,"PLBartForSequenceClassification"),CMt.forEach(t),CXo=r(FPe," (PLBart model)"),FPe.forEach(t),wXo=i(j),$v=n(j,"LI",{});var TPe=s($v);I_e=n(TPe,"STRONG",{});var wMt=s(I_e);AXo=r(wMt,"qdqbert"),wMt.forEach(t),LXo=r(TPe," \u2014 "),PX=n(TPe,"A",{href:!0});var AMt=s(PX);yXo=r(AMt,"QDQBertForSequenceClassification"),AMt.forEach(t),xXo=r(TPe," (QDQBert model)"),TPe.forEach(t),$Xo=i(j),kv=n(j,"LI",{});var MPe=s(kv);N_e=n(MPe,"STRONG",{});var LMt=s(N_e);kXo=r(LMt,"reformer"),LMt.forEach(t),SXo=r(MPe," \u2014 "),BX=n(MPe,"A",{href:!0});var yMt=s(BX);RXo=r(yMt,"ReformerForSequenceClassification"),yMt.forEach(t),PXo=r(MPe," (Reformer model)"),MPe.forEach(t),BXo=i(j),Sv=n(j,"LI",{});var EPe=s(Sv);q_e=n(EPe,"STRONG",{});var xMt=s(q_e);IXo=r(xMt,"rembert"),xMt.forEach(t),NXo=r(EPe," \u2014 "),IX=n(EPe,"A",{href:!0});var $Mt=s(IX);qXo=r($Mt,"RemBertForSequenceClassification"),$Mt.forEach(t),jXo=r(EPe," (RemBERT model)"),EPe.forEach(t),DXo=i(j),Rv=n(j,"LI",{});var CPe=s(Rv);j_e=n(CPe,"STRONG",{});var kMt=s(j_e);GXo=r(kMt,"roberta"),kMt.forEach(t),OXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var SMt=s(NX);VXo=r(SMt,"RobertaForSequenceClassification"),SMt.forEach(t),XXo=r(CPe," (RoBERTa model)"),CPe.forEach(t),zXo=i(j),Pv=n(j,"LI",{});var wPe=s(Pv);D_e=n(wPe,"STRONG",{});var RMt=s(D_e);QXo=r(RMt,"roformer"),RMt.forEach(t),WXo=r(wPe," \u2014 "),qX=n(wPe,"A",{href:!0});var PMt=s(qX);HXo=r(PMt,"RoFormerForSequenceClassification"),PMt.forEach(t),UXo=r(wPe," (RoFormer model)"),wPe.forEach(t),JXo=i(j),Bv=n(j,"LI",{});var APe=s(Bv);G_e=n(APe,"STRONG",{});var BMt=s(G_e);YXo=r(BMt,"squeezebert"),BMt.forEach(t),KXo=r(APe," \u2014 "),jX=n(APe,"A",{href:!0});var IMt=s(jX);ZXo=r(IMt,"SqueezeBertForSequenceClassification"),IMt.forEach(t),ezo=r(APe," (SqueezeBERT model)"),APe.forEach(t),ozo=i(j),Iv=n(j,"LI",{});var LPe=s(Iv);O_e=n(LPe,"STRONG",{});var NMt=s(O_e);rzo=r(NMt,"tapas"),NMt.forEach(t),tzo=r(LPe," \u2014 "),DX=n(LPe,"A",{href:!0});var qMt=s(DX);azo=r(qMt,"TapasForSequenceClassification"),qMt.forEach(t),nzo=r(LPe," (TAPAS model)"),LPe.forEach(t),szo=i(j),Nv=n(j,"LI",{});var yPe=s(Nv);V_e=n(yPe,"STRONG",{});var jMt=s(V_e);lzo=r(jMt,"transfo-xl"),jMt.forEach(t),izo=r(yPe," \u2014 "),GX=n(yPe,"A",{href:!0});var DMt=s(GX);dzo=r(DMt,"TransfoXLForSequenceClassification"),DMt.forEach(t),czo=r(yPe," (Transformer-XL model)"),yPe.forEach(t),fzo=i(j),qv=n(j,"LI",{});var xPe=s(qv);X_e=n(xPe,"STRONG",{});var GMt=s(X_e);mzo=r(GMt,"xlm"),GMt.forEach(t),gzo=r(xPe," \u2014 "),OX=n(xPe,"A",{href:!0});var OMt=s(OX);hzo=r(OMt,"XLMForSequenceClassification"),OMt.forEach(t),pzo=r(xPe," (XLM model)"),xPe.forEach(t),_zo=i(j),jv=n(j,"LI",{});var $Pe=s(jv);z_e=n($Pe,"STRONG",{});var VMt=s(z_e);uzo=r(VMt,"xlm-roberta"),VMt.forEach(t),bzo=r($Pe," \u2014 "),VX=n($Pe,"A",{href:!0});var XMt=s(VX);vzo=r(XMt,"XLMRobertaForSequenceClassification"),XMt.forEach(t),Fzo=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),Tzo=i(j),Dv=n(j,"LI",{});var kPe=s(Dv);Q_e=n(kPe,"STRONG",{});var zMt=s(Q_e);Mzo=r(zMt,"xlm-roberta-xl"),zMt.forEach(t),Ezo=r(kPe," \u2014 "),XX=n(kPe,"A",{href:!0});var QMt=s(XX);Czo=r(QMt,"XLMRobertaXLForSequenceClassification"),QMt.forEach(t),wzo=r(kPe," (XLM-RoBERTa-XL model)"),kPe.forEach(t),Azo=i(j),Gv=n(j,"LI",{});var SPe=s(Gv);W_e=n(SPe,"STRONG",{});var WMt=s(W_e);Lzo=r(WMt,"xlnet"),WMt.forEach(t),yzo=r(SPe," \u2014 "),zX=n(SPe,"A",{href:!0});var HMt=s(zX);xzo=r(HMt,"XLNetForSequenceClassification"),HMt.forEach(t),$zo=r(SPe," (XLNet model)"),SPe.forEach(t),kzo=i(j),Ov=n(j,"LI",{});var RPe=s(Ov);H_e=n(RPe,"STRONG",{});var UMt=s(H_e);Szo=r(UMt,"yoso"),UMt.forEach(t),Rzo=r(RPe," \u2014 "),QX=n(RPe,"A",{href:!0});var JMt=s(QX);Pzo=r(JMt,"YosoForSequenceClassification"),JMt.forEach(t),Bzo=r(RPe," (YOSO model)"),RPe.forEach(t),j.forEach(t),Izo=i(fa),Vv=n(fa,"P",{});var PPe=s(Vv);Nzo=r(PPe,"The model is set in evaluation mode by default using "),U_e=n(PPe,"CODE",{});var YMt=s(U_e);qzo=r(YMt,"model.eval()"),YMt.forEach(t),jzo=r(PPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(PPe,"CODE",{});var KMt=s(J_e);Dzo=r(KMt,"model.train()"),KMt.forEach(t),PPe.forEach(t),Gzo=i(fa),T(Xv.$$.fragment,fa),fa.forEach(t),sl.forEach(t),$Xe=i(f),ad=n(f,"H2",{class:!0});var IQe=s(ad);zv=n(IQe,"A",{id:!0,class:!0,href:!0});var ZMt=s(zv);Y_e=n(ZMt,"SPAN",{});var e4t=s(Y_e);T(dy.$$.fragment,e4t),e4t.forEach(t),ZMt.forEach(t),Ozo=i(IQe),K_e=n(IQe,"SPAN",{});var o4t=s(K_e);Vzo=r(o4t,"AutoModelForMultipleChoice"),o4t.forEach(t),IQe.forEach(t),kXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(cy.$$.fragment,ll),Xzo=i(ll),nd=n(ll,"P",{});var zre=s(nd);zzo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=n(zre,"A",{href:!0});var r4t=s(WX);Qzo=r(r4t,"from_pretrained()"),r4t.forEach(t),Wzo=r(zre," class method or the "),HX=n(zre,"A",{href:!0});var t4t=s(HX);Hzo=r(t4t,"from_config()"),t4t.forEach(t),Uzo=r(zre,` class
method.`),zre.forEach(t),Jzo=i(ll),fy=n(ll,"P",{});var NQe=s(fy);Yzo=r(NQe,"This class cannot be instantiated directly using "),Z_e=n(NQe,"CODE",{});var a4t=s(Z_e);Kzo=r(a4t,"__init__()"),a4t.forEach(t),Zzo=r(NQe," (throws an error)."),NQe.forEach(t),eQo=i(ll),gt=n(ll,"DIV",{class:!0});var EA=s(gt);T(my.$$.fragment,EA),oQo=i(EA),eue=n(EA,"P",{});var n4t=s(eue);rQo=r(n4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),n4t.forEach(t),tQo=i(EA),sd=n(EA,"P",{});var Qre=s(sd);aQo=r(Qre,`Note:
Loading a model from its configuration file does `),oue=n(Qre,"STRONG",{});var s4t=s(oue);nQo=r(s4t,"not"),s4t.forEach(t),sQo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(Qre,"A",{href:!0});var l4t=s(UX);lQo=r(l4t,"from_pretrained()"),l4t.forEach(t),iQo=r(Qre," to load the model weights."),Qre.forEach(t),dQo=i(EA),T(Qv.$$.fragment,EA),EA.forEach(t),cQo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(gy.$$.fragment,ma),fQo=i(ma),rue=n(ma,"P",{});var i4t=s(rue);mQo=r(i4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),i4t.forEach(t),gQo=i(ma),Oa=n(ma,"P",{});var CA=s(Oa);hQo=r(CA,"The model class to instantiate is selected based on the "),tue=n(CA,"CODE",{});var d4t=s(tue);pQo=r(d4t,"model_type"),d4t.forEach(t),_Qo=r(CA,` property of the config object (either
passed as an argument or loaded from `),aue=n(CA,"CODE",{});var c4t=s(aue);uQo=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),bQo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(CA,"CODE",{});var f4t=s(nue);vQo=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),FQo=r(CA,":"),CA.forEach(t),TQo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Wv=n(ee,"LI",{});var BPe=s(Wv);sue=n(BPe,"STRONG",{});var m4t=s(sue);MQo=r(m4t,"albert"),m4t.forEach(t),EQo=r(BPe," \u2014 "),JX=n(BPe,"A",{href:!0});var g4t=s(JX);CQo=r(g4t,"AlbertForMultipleChoice"),g4t.forEach(t),wQo=r(BPe," (ALBERT model)"),BPe.forEach(t),AQo=i(ee),Hv=n(ee,"LI",{});var IPe=s(Hv);lue=n(IPe,"STRONG",{});var h4t=s(lue);LQo=r(h4t,"bert"),h4t.forEach(t),yQo=r(IPe," \u2014 "),YX=n(IPe,"A",{href:!0});var p4t=s(YX);xQo=r(p4t,"BertForMultipleChoice"),p4t.forEach(t),$Qo=r(IPe," (BERT model)"),IPe.forEach(t),kQo=i(ee),Uv=n(ee,"LI",{});var NPe=s(Uv);iue=n(NPe,"STRONG",{});var _4t=s(iue);SQo=r(_4t,"big_bird"),_4t.forEach(t),RQo=r(NPe," \u2014 "),KX=n(NPe,"A",{href:!0});var u4t=s(KX);PQo=r(u4t,"BigBirdForMultipleChoice"),u4t.forEach(t),BQo=r(NPe," (BigBird model)"),NPe.forEach(t),IQo=i(ee),Jv=n(ee,"LI",{});var qPe=s(Jv);due=n(qPe,"STRONG",{});var b4t=s(due);NQo=r(b4t,"camembert"),b4t.forEach(t),qQo=r(qPe," \u2014 "),ZX=n(qPe,"A",{href:!0});var v4t=s(ZX);jQo=r(v4t,"CamembertForMultipleChoice"),v4t.forEach(t),DQo=r(qPe," (CamemBERT model)"),qPe.forEach(t),GQo=i(ee),Yv=n(ee,"LI",{});var jPe=s(Yv);cue=n(jPe,"STRONG",{});var F4t=s(cue);OQo=r(F4t,"canine"),F4t.forEach(t),VQo=r(jPe," \u2014 "),ez=n(jPe,"A",{href:!0});var T4t=s(ez);XQo=r(T4t,"CanineForMultipleChoice"),T4t.forEach(t),zQo=r(jPe," (CANINE model)"),jPe.forEach(t),QQo=i(ee),Kv=n(ee,"LI",{});var DPe=s(Kv);fue=n(DPe,"STRONG",{});var M4t=s(fue);WQo=r(M4t,"convbert"),M4t.forEach(t),HQo=r(DPe," \u2014 "),oz=n(DPe,"A",{href:!0});var E4t=s(oz);UQo=r(E4t,"ConvBertForMultipleChoice"),E4t.forEach(t),JQo=r(DPe," (ConvBERT model)"),DPe.forEach(t),YQo=i(ee),Zv=n(ee,"LI",{});var GPe=s(Zv);mue=n(GPe,"STRONG",{});var C4t=s(mue);KQo=r(C4t,"data2vec-text"),C4t.forEach(t),ZQo=r(GPe," \u2014 "),rz=n(GPe,"A",{href:!0});var w4t=s(rz);eWo=r(w4t,"Data2VecTextForMultipleChoice"),w4t.forEach(t),oWo=r(GPe," (Data2VecText model)"),GPe.forEach(t),rWo=i(ee),eF=n(ee,"LI",{});var OPe=s(eF);gue=n(OPe,"STRONG",{});var A4t=s(gue);tWo=r(A4t,"deberta-v2"),A4t.forEach(t),aWo=r(OPe," \u2014 "),tz=n(OPe,"A",{href:!0});var L4t=s(tz);nWo=r(L4t,"DebertaV2ForMultipleChoice"),L4t.forEach(t),sWo=r(OPe," (DeBERTa-v2 model)"),OPe.forEach(t),lWo=i(ee),oF=n(ee,"LI",{});var VPe=s(oF);hue=n(VPe,"STRONG",{});var y4t=s(hue);iWo=r(y4t,"distilbert"),y4t.forEach(t),dWo=r(VPe," \u2014 "),az=n(VPe,"A",{href:!0});var x4t=s(az);cWo=r(x4t,"DistilBertForMultipleChoice"),x4t.forEach(t),fWo=r(VPe," (DistilBERT model)"),VPe.forEach(t),mWo=i(ee),rF=n(ee,"LI",{});var XPe=s(rF);pue=n(XPe,"STRONG",{});var $4t=s(pue);gWo=r($4t,"electra"),$4t.forEach(t),hWo=r(XPe," \u2014 "),nz=n(XPe,"A",{href:!0});var k4t=s(nz);pWo=r(k4t,"ElectraForMultipleChoice"),k4t.forEach(t),_Wo=r(XPe," (ELECTRA model)"),XPe.forEach(t),uWo=i(ee),tF=n(ee,"LI",{});var zPe=s(tF);_ue=n(zPe,"STRONG",{});var S4t=s(_ue);bWo=r(S4t,"flaubert"),S4t.forEach(t),vWo=r(zPe," \u2014 "),sz=n(zPe,"A",{href:!0});var R4t=s(sz);FWo=r(R4t,"FlaubertForMultipleChoice"),R4t.forEach(t),TWo=r(zPe," (FlauBERT model)"),zPe.forEach(t),MWo=i(ee),aF=n(ee,"LI",{});var QPe=s(aF);uue=n(QPe,"STRONG",{});var P4t=s(uue);EWo=r(P4t,"fnet"),P4t.forEach(t),CWo=r(QPe," \u2014 "),lz=n(QPe,"A",{href:!0});var B4t=s(lz);wWo=r(B4t,"FNetForMultipleChoice"),B4t.forEach(t),AWo=r(QPe," (FNet model)"),QPe.forEach(t),LWo=i(ee),nF=n(ee,"LI",{});var WPe=s(nF);bue=n(WPe,"STRONG",{});var I4t=s(bue);yWo=r(I4t,"funnel"),I4t.forEach(t),xWo=r(WPe," \u2014 "),iz=n(WPe,"A",{href:!0});var N4t=s(iz);$Wo=r(N4t,"FunnelForMultipleChoice"),N4t.forEach(t),kWo=r(WPe," (Funnel Transformer model)"),WPe.forEach(t),SWo=i(ee),sF=n(ee,"LI",{});var HPe=s(sF);vue=n(HPe,"STRONG",{});var q4t=s(vue);RWo=r(q4t,"ibert"),q4t.forEach(t),PWo=r(HPe," \u2014 "),dz=n(HPe,"A",{href:!0});var j4t=s(dz);BWo=r(j4t,"IBertForMultipleChoice"),j4t.forEach(t),IWo=r(HPe," (I-BERT model)"),HPe.forEach(t),NWo=i(ee),lF=n(ee,"LI",{});var UPe=s(lF);Fue=n(UPe,"STRONG",{});var D4t=s(Fue);qWo=r(D4t,"longformer"),D4t.forEach(t),jWo=r(UPe," \u2014 "),cz=n(UPe,"A",{href:!0});var G4t=s(cz);DWo=r(G4t,"LongformerForMultipleChoice"),G4t.forEach(t),GWo=r(UPe," (Longformer model)"),UPe.forEach(t),OWo=i(ee),iF=n(ee,"LI",{});var JPe=s(iF);Tue=n(JPe,"STRONG",{});var O4t=s(Tue);VWo=r(O4t,"megatron-bert"),O4t.forEach(t),XWo=r(JPe," \u2014 "),fz=n(JPe,"A",{href:!0});var V4t=s(fz);zWo=r(V4t,"MegatronBertForMultipleChoice"),V4t.forEach(t),QWo=r(JPe," (Megatron-BERT model)"),JPe.forEach(t),WWo=i(ee),dF=n(ee,"LI",{});var YPe=s(dF);Mue=n(YPe,"STRONG",{});var X4t=s(Mue);HWo=r(X4t,"mobilebert"),X4t.forEach(t),UWo=r(YPe," \u2014 "),mz=n(YPe,"A",{href:!0});var z4t=s(mz);JWo=r(z4t,"MobileBertForMultipleChoice"),z4t.forEach(t),YWo=r(YPe," (MobileBERT model)"),YPe.forEach(t),KWo=i(ee),cF=n(ee,"LI",{});var KPe=s(cF);Eue=n(KPe,"STRONG",{});var Q4t=s(Eue);ZWo=r(Q4t,"mpnet"),Q4t.forEach(t),eHo=r(KPe," \u2014 "),gz=n(KPe,"A",{href:!0});var W4t=s(gz);oHo=r(W4t,"MPNetForMultipleChoice"),W4t.forEach(t),rHo=r(KPe," (MPNet model)"),KPe.forEach(t),tHo=i(ee),fF=n(ee,"LI",{});var ZPe=s(fF);Cue=n(ZPe,"STRONG",{});var H4t=s(Cue);aHo=r(H4t,"nezha"),H4t.forEach(t),nHo=r(ZPe," \u2014 "),hz=n(ZPe,"A",{href:!0});var U4t=s(hz);sHo=r(U4t,"NezhaForMultipleChoice"),U4t.forEach(t),lHo=r(ZPe," (Nezha model)"),ZPe.forEach(t),iHo=i(ee),mF=n(ee,"LI",{});var eBe=s(mF);wue=n(eBe,"STRONG",{});var J4t=s(wue);dHo=r(J4t,"nystromformer"),J4t.forEach(t),cHo=r(eBe," \u2014 "),pz=n(eBe,"A",{href:!0});var Y4t=s(pz);fHo=r(Y4t,"NystromformerForMultipleChoice"),Y4t.forEach(t),mHo=r(eBe," (Nystr\xF6mformer model)"),eBe.forEach(t),gHo=i(ee),gF=n(ee,"LI",{});var oBe=s(gF);Aue=n(oBe,"STRONG",{});var K4t=s(Aue);hHo=r(K4t,"qdqbert"),K4t.forEach(t),pHo=r(oBe," \u2014 "),_z=n(oBe,"A",{href:!0});var Z4t=s(_z);_Ho=r(Z4t,"QDQBertForMultipleChoice"),Z4t.forEach(t),uHo=r(oBe," (QDQBert model)"),oBe.forEach(t),bHo=i(ee),hF=n(ee,"LI",{});var rBe=s(hF);Lue=n(rBe,"STRONG",{});var eEt=s(Lue);vHo=r(eEt,"rembert"),eEt.forEach(t),FHo=r(rBe," \u2014 "),uz=n(rBe,"A",{href:!0});var oEt=s(uz);THo=r(oEt,"RemBertForMultipleChoice"),oEt.forEach(t),MHo=r(rBe," (RemBERT model)"),rBe.forEach(t),EHo=i(ee),pF=n(ee,"LI",{});var tBe=s(pF);yue=n(tBe,"STRONG",{});var rEt=s(yue);CHo=r(rEt,"roberta"),rEt.forEach(t),wHo=r(tBe," \u2014 "),bz=n(tBe,"A",{href:!0});var tEt=s(bz);AHo=r(tEt,"RobertaForMultipleChoice"),tEt.forEach(t),LHo=r(tBe," (RoBERTa model)"),tBe.forEach(t),yHo=i(ee),_F=n(ee,"LI",{});var aBe=s(_F);xue=n(aBe,"STRONG",{});var aEt=s(xue);xHo=r(aEt,"roformer"),aEt.forEach(t),$Ho=r(aBe," \u2014 "),vz=n(aBe,"A",{href:!0});var nEt=s(vz);kHo=r(nEt,"RoFormerForMultipleChoice"),nEt.forEach(t),SHo=r(aBe," (RoFormer model)"),aBe.forEach(t),RHo=i(ee),uF=n(ee,"LI",{});var nBe=s(uF);$ue=n(nBe,"STRONG",{});var sEt=s($ue);PHo=r(sEt,"squeezebert"),sEt.forEach(t),BHo=r(nBe," \u2014 "),Fz=n(nBe,"A",{href:!0});var lEt=s(Fz);IHo=r(lEt,"SqueezeBertForMultipleChoice"),lEt.forEach(t),NHo=r(nBe," (SqueezeBERT model)"),nBe.forEach(t),qHo=i(ee),bF=n(ee,"LI",{});var sBe=s(bF);kue=n(sBe,"STRONG",{});var iEt=s(kue);jHo=r(iEt,"xlm"),iEt.forEach(t),DHo=r(sBe," \u2014 "),Tz=n(sBe,"A",{href:!0});var dEt=s(Tz);GHo=r(dEt,"XLMForMultipleChoice"),dEt.forEach(t),OHo=r(sBe," (XLM model)"),sBe.forEach(t),VHo=i(ee),vF=n(ee,"LI",{});var lBe=s(vF);Sue=n(lBe,"STRONG",{});var cEt=s(Sue);XHo=r(cEt,"xlm-roberta"),cEt.forEach(t),zHo=r(lBe," \u2014 "),Mz=n(lBe,"A",{href:!0});var fEt=s(Mz);QHo=r(fEt,"XLMRobertaForMultipleChoice"),fEt.forEach(t),WHo=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),HHo=i(ee),FF=n(ee,"LI",{});var iBe=s(FF);Rue=n(iBe,"STRONG",{});var mEt=s(Rue);UHo=r(mEt,"xlm-roberta-xl"),mEt.forEach(t),JHo=r(iBe," \u2014 "),Ez=n(iBe,"A",{href:!0});var gEt=s(Ez);YHo=r(gEt,"XLMRobertaXLForMultipleChoice"),gEt.forEach(t),KHo=r(iBe," (XLM-RoBERTa-XL model)"),iBe.forEach(t),ZHo=i(ee),TF=n(ee,"LI",{});var dBe=s(TF);Pue=n(dBe,"STRONG",{});var hEt=s(Pue);eUo=r(hEt,"xlnet"),hEt.forEach(t),oUo=r(dBe," \u2014 "),Cz=n(dBe,"A",{href:!0});var pEt=s(Cz);rUo=r(pEt,"XLNetForMultipleChoice"),pEt.forEach(t),tUo=r(dBe," (XLNet model)"),dBe.forEach(t),aUo=i(ee),MF=n(ee,"LI",{});var cBe=s(MF);Bue=n(cBe,"STRONG",{});var _Et=s(Bue);nUo=r(_Et,"yoso"),_Et.forEach(t),sUo=r(cBe," \u2014 "),wz=n(cBe,"A",{href:!0});var uEt=s(wz);lUo=r(uEt,"YosoForMultipleChoice"),uEt.forEach(t),iUo=r(cBe," (YOSO model)"),cBe.forEach(t),ee.forEach(t),dUo=i(ma),EF=n(ma,"P",{});var fBe=s(EF);cUo=r(fBe,"The model is set in evaluation mode by default using "),Iue=n(fBe,"CODE",{});var bEt=s(Iue);fUo=r(bEt,"model.eval()"),bEt.forEach(t),mUo=r(fBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(fBe,"CODE",{});var vEt=s(Nue);gUo=r(vEt,"model.train()"),vEt.forEach(t),fBe.forEach(t),hUo=i(ma),T(CF.$$.fragment,ma),ma.forEach(t),ll.forEach(t),SXe=i(f),ld=n(f,"H2",{class:!0});var qQe=s(ld);wF=n(qQe,"A",{id:!0,class:!0,href:!0});var FEt=s(wF);que=n(FEt,"SPAN",{});var TEt=s(que);T(hy.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),pUo=i(qQe),jue=n(qQe,"SPAN",{});var MEt=s(jue);_Uo=r(MEt,"AutoModelForNextSentencePrediction"),MEt.forEach(t),qQe.forEach(t),RXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(py.$$.fragment,il),uUo=i(il),id=n(il,"P",{});var Wre=s(id);bUo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Az=n(Wre,"A",{href:!0});var EEt=s(Az);vUo=r(EEt,"from_pretrained()"),EEt.forEach(t),FUo=r(Wre," class method or the "),Lz=n(Wre,"A",{href:!0});var CEt=s(Lz);TUo=r(CEt,"from_config()"),CEt.forEach(t),MUo=r(Wre,` class
method.`),Wre.forEach(t),EUo=i(il),_y=n(il,"P",{});var jQe=s(_y);CUo=r(jQe,"This class cannot be instantiated directly using "),Due=n(jQe,"CODE",{});var wEt=s(Due);wUo=r(wEt,"__init__()"),wEt.forEach(t),AUo=r(jQe," (throws an error)."),jQe.forEach(t),LUo=i(il),ht=n(il,"DIV",{class:!0});var wA=s(ht);T(uy.$$.fragment,wA),yUo=i(wA),Gue=n(wA,"P",{});var AEt=s(Gue);xUo=r(AEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AEt.forEach(t),$Uo=i(wA),dd=n(wA,"P",{});var Hre=s(dd);kUo=r(Hre,`Note:
Loading a model from its configuration file does `),Oue=n(Hre,"STRONG",{});var LEt=s(Oue);SUo=r(LEt,"not"),LEt.forEach(t),RUo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Hre,"A",{href:!0});var yEt=s(yz);PUo=r(yEt,"from_pretrained()"),yEt.forEach(t),BUo=r(Hre," to load the model weights."),Hre.forEach(t),IUo=i(wA),T(AF.$$.fragment,wA),wA.forEach(t),NUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(by.$$.fragment,ga),qUo=i(ga),Vue=n(ga,"P",{});var xEt=s(Vue);jUo=r(xEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xEt.forEach(t),DUo=i(ga),Va=n(ga,"P",{});var AA=s(Va);GUo=r(AA,"The model class to instantiate is selected based on the "),Xue=n(AA,"CODE",{});var $Et=s(Xue);OUo=r($Et,"model_type"),$Et.forEach(t),VUo=r(AA,` property of the config object (either
passed as an argument or loaded from `),zue=n(AA,"CODE",{});var kEt=s(zue);XUo=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),zUo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(AA,"CODE",{});var SEt=s(Que);QUo=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),WUo=r(AA,":"),AA.forEach(t),HUo=i(ga),No=n(ga,"UL",{});var ha=s(No);LF=n(ha,"LI",{});var mBe=s(LF);Wue=n(mBe,"STRONG",{});var REt=s(Wue);UUo=r(REt,"bert"),REt.forEach(t),JUo=r(mBe," \u2014 "),xz=n(mBe,"A",{href:!0});var PEt=s(xz);YUo=r(PEt,"BertForNextSentencePrediction"),PEt.forEach(t),KUo=r(mBe," (BERT model)"),mBe.forEach(t),ZUo=i(ha),yF=n(ha,"LI",{});var gBe=s(yF);Hue=n(gBe,"STRONG",{});var BEt=s(Hue);eJo=r(BEt,"fnet"),BEt.forEach(t),oJo=r(gBe," \u2014 "),$z=n(gBe,"A",{href:!0});var IEt=s($z);rJo=r(IEt,"FNetForNextSentencePrediction"),IEt.forEach(t),tJo=r(gBe," (FNet model)"),gBe.forEach(t),aJo=i(ha),xF=n(ha,"LI",{});var hBe=s(xF);Uue=n(hBe,"STRONG",{});var NEt=s(Uue);nJo=r(NEt,"megatron-bert"),NEt.forEach(t),sJo=r(hBe," \u2014 "),kz=n(hBe,"A",{href:!0});var qEt=s(kz);lJo=r(qEt,"MegatronBertForNextSentencePrediction"),qEt.forEach(t),iJo=r(hBe," (Megatron-BERT model)"),hBe.forEach(t),dJo=i(ha),$F=n(ha,"LI",{});var pBe=s($F);Jue=n(pBe,"STRONG",{});var jEt=s(Jue);cJo=r(jEt,"mobilebert"),jEt.forEach(t),fJo=r(pBe," \u2014 "),Sz=n(pBe,"A",{href:!0});var DEt=s(Sz);mJo=r(DEt,"MobileBertForNextSentencePrediction"),DEt.forEach(t),gJo=r(pBe," (MobileBERT model)"),pBe.forEach(t),hJo=i(ha),kF=n(ha,"LI",{});var _Be=s(kF);Yue=n(_Be,"STRONG",{});var GEt=s(Yue);pJo=r(GEt,"nezha"),GEt.forEach(t),_Jo=r(_Be," \u2014 "),Rz=n(_Be,"A",{href:!0});var OEt=s(Rz);uJo=r(OEt,"NezhaForNextSentencePrediction"),OEt.forEach(t),bJo=r(_Be," (Nezha model)"),_Be.forEach(t),vJo=i(ha),SF=n(ha,"LI",{});var uBe=s(SF);Kue=n(uBe,"STRONG",{});var VEt=s(Kue);FJo=r(VEt,"qdqbert"),VEt.forEach(t),TJo=r(uBe," \u2014 "),Pz=n(uBe,"A",{href:!0});var XEt=s(Pz);MJo=r(XEt,"QDQBertForNextSentencePrediction"),XEt.forEach(t),EJo=r(uBe," (QDQBert model)"),uBe.forEach(t),ha.forEach(t),CJo=i(ga),RF=n(ga,"P",{});var bBe=s(RF);wJo=r(bBe,"The model is set in evaluation mode by default using "),Zue=n(bBe,"CODE",{});var zEt=s(Zue);AJo=r(zEt,"model.eval()"),zEt.forEach(t),LJo=r(bBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(bBe,"CODE",{});var QEt=s(e1e);yJo=r(QEt,"model.train()"),QEt.forEach(t),bBe.forEach(t),xJo=i(ga),T(PF.$$.fragment,ga),ga.forEach(t),il.forEach(t),PXe=i(f),cd=n(f,"H2",{class:!0});var DQe=s(cd);BF=n(DQe,"A",{id:!0,class:!0,href:!0});var WEt=s(BF);o1e=n(WEt,"SPAN",{});var HEt=s(o1e);T(vy.$$.fragment,HEt),HEt.forEach(t),WEt.forEach(t),$Jo=i(DQe),r1e=n(DQe,"SPAN",{});var UEt=s(r1e);kJo=r(UEt,"AutoModelForTokenClassification"),UEt.forEach(t),DQe.forEach(t),BXe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(Fy.$$.fragment,dl),SJo=i(dl),fd=n(dl,"P",{});var Ure=s(fd);RJo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bz=n(Ure,"A",{href:!0});var JEt=s(Bz);PJo=r(JEt,"from_pretrained()"),JEt.forEach(t),BJo=r(Ure," class method or the "),Iz=n(Ure,"A",{href:!0});var YEt=s(Iz);IJo=r(YEt,"from_config()"),YEt.forEach(t),NJo=r(Ure,` class
method.`),Ure.forEach(t),qJo=i(dl),Ty=n(dl,"P",{});var GQe=s(Ty);jJo=r(GQe,"This class cannot be instantiated directly using "),t1e=n(GQe,"CODE",{});var KEt=s(t1e);DJo=r(KEt,"__init__()"),KEt.forEach(t),GJo=r(GQe," (throws an error)."),GQe.forEach(t),OJo=i(dl),pt=n(dl,"DIV",{class:!0});var LA=s(pt);T(My.$$.fragment,LA),VJo=i(LA),a1e=n(LA,"P",{});var ZEt=s(a1e);XJo=r(ZEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZEt.forEach(t),zJo=i(LA),md=n(LA,"P",{});var Jre=s(md);QJo=r(Jre,`Note:
Loading a model from its configuration file does `),n1e=n(Jre,"STRONG",{});var eCt=s(n1e);WJo=r(eCt,"not"),eCt.forEach(t),HJo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(Jre,"A",{href:!0});var oCt=s(Nz);UJo=r(oCt,"from_pretrained()"),oCt.forEach(t),JJo=r(Jre," to load the model weights."),Jre.forEach(t),YJo=i(LA),T(IF.$$.fragment,LA),LA.forEach(t),KJo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(Ey.$$.fragment,pa),ZJo=i(pa),s1e=n(pa,"P",{});var rCt=s(s1e);eYo=r(rCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rCt.forEach(t),oYo=i(pa),Xa=n(pa,"P",{});var yA=s(Xa);rYo=r(yA,"The model class to instantiate is selected based on the "),l1e=n(yA,"CODE",{});var tCt=s(l1e);tYo=r(tCt,"model_type"),tCt.forEach(t),aYo=r(yA,` property of the config object (either
passed as an argument or loaded from `),i1e=n(yA,"CODE",{});var aCt=s(i1e);nYo=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),sYo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(yA,"CODE",{});var nCt=s(d1e);lYo=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),iYo=r(yA,":"),yA.forEach(t),dYo=i(pa),U=n(pa,"UL",{});var Y=s(U);NF=n(Y,"LI",{});var vBe=s(NF);c1e=n(vBe,"STRONG",{});var sCt=s(c1e);cYo=r(sCt,"albert"),sCt.forEach(t),fYo=r(vBe," \u2014 "),qz=n(vBe,"A",{href:!0});var lCt=s(qz);mYo=r(lCt,"AlbertForTokenClassification"),lCt.forEach(t),gYo=r(vBe," (ALBERT model)"),vBe.forEach(t),hYo=i(Y),qF=n(Y,"LI",{});var FBe=s(qF);f1e=n(FBe,"STRONG",{});var iCt=s(f1e);pYo=r(iCt,"bert"),iCt.forEach(t),_Yo=r(FBe," \u2014 "),jz=n(FBe,"A",{href:!0});var dCt=s(jz);uYo=r(dCt,"BertForTokenClassification"),dCt.forEach(t),bYo=r(FBe," (BERT model)"),FBe.forEach(t),vYo=i(Y),jF=n(Y,"LI",{});var TBe=s(jF);m1e=n(TBe,"STRONG",{});var cCt=s(m1e);FYo=r(cCt,"big_bird"),cCt.forEach(t),TYo=r(TBe," \u2014 "),Dz=n(TBe,"A",{href:!0});var fCt=s(Dz);MYo=r(fCt,"BigBirdForTokenClassification"),fCt.forEach(t),EYo=r(TBe," (BigBird model)"),TBe.forEach(t),CYo=i(Y),DF=n(Y,"LI",{});var MBe=s(DF);g1e=n(MBe,"STRONG",{});var mCt=s(g1e);wYo=r(mCt,"bloom"),mCt.forEach(t),AYo=r(MBe," \u2014 "),Gz=n(MBe,"A",{href:!0});var gCt=s(Gz);LYo=r(gCt,"BloomForTokenClassification"),gCt.forEach(t),yYo=r(MBe," (BLOOM model)"),MBe.forEach(t),xYo=i(Y),GF=n(Y,"LI",{});var EBe=s(GF);h1e=n(EBe,"STRONG",{});var hCt=s(h1e);$Yo=r(hCt,"camembert"),hCt.forEach(t),kYo=r(EBe," \u2014 "),Oz=n(EBe,"A",{href:!0});var pCt=s(Oz);SYo=r(pCt,"CamembertForTokenClassification"),pCt.forEach(t),RYo=r(EBe," (CamemBERT model)"),EBe.forEach(t),PYo=i(Y),OF=n(Y,"LI",{});var CBe=s(OF);p1e=n(CBe,"STRONG",{});var _Ct=s(p1e);BYo=r(_Ct,"canine"),_Ct.forEach(t),IYo=r(CBe," \u2014 "),Vz=n(CBe,"A",{href:!0});var uCt=s(Vz);NYo=r(uCt,"CanineForTokenClassification"),uCt.forEach(t),qYo=r(CBe," (CANINE model)"),CBe.forEach(t),jYo=i(Y),VF=n(Y,"LI",{});var wBe=s(VF);_1e=n(wBe,"STRONG",{});var bCt=s(_1e);DYo=r(bCt,"convbert"),bCt.forEach(t),GYo=r(wBe," \u2014 "),Xz=n(wBe,"A",{href:!0});var vCt=s(Xz);OYo=r(vCt,"ConvBertForTokenClassification"),vCt.forEach(t),VYo=r(wBe," (ConvBERT model)"),wBe.forEach(t),XYo=i(Y),XF=n(Y,"LI",{});var ABe=s(XF);u1e=n(ABe,"STRONG",{});var FCt=s(u1e);zYo=r(FCt,"data2vec-text"),FCt.forEach(t),QYo=r(ABe," \u2014 "),zz=n(ABe,"A",{href:!0});var TCt=s(zz);WYo=r(TCt,"Data2VecTextForTokenClassification"),TCt.forEach(t),HYo=r(ABe," (Data2VecText model)"),ABe.forEach(t),UYo=i(Y),zF=n(Y,"LI",{});var LBe=s(zF);b1e=n(LBe,"STRONG",{});var MCt=s(b1e);JYo=r(MCt,"deberta"),MCt.forEach(t),YYo=r(LBe," \u2014 "),Qz=n(LBe,"A",{href:!0});var ECt=s(Qz);KYo=r(ECt,"DebertaForTokenClassification"),ECt.forEach(t),ZYo=r(LBe," (DeBERTa model)"),LBe.forEach(t),eKo=i(Y),QF=n(Y,"LI",{});var yBe=s(QF);v1e=n(yBe,"STRONG",{});var CCt=s(v1e);oKo=r(CCt,"deberta-v2"),CCt.forEach(t),rKo=r(yBe," \u2014 "),Wz=n(yBe,"A",{href:!0});var wCt=s(Wz);tKo=r(wCt,"DebertaV2ForTokenClassification"),wCt.forEach(t),aKo=r(yBe," (DeBERTa-v2 model)"),yBe.forEach(t),nKo=i(Y),WF=n(Y,"LI",{});var xBe=s(WF);F1e=n(xBe,"STRONG",{});var ACt=s(F1e);sKo=r(ACt,"distilbert"),ACt.forEach(t),lKo=r(xBe," \u2014 "),Hz=n(xBe,"A",{href:!0});var LCt=s(Hz);iKo=r(LCt,"DistilBertForTokenClassification"),LCt.forEach(t),dKo=r(xBe," (DistilBERT model)"),xBe.forEach(t),cKo=i(Y),HF=n(Y,"LI",{});var $Be=s(HF);T1e=n($Be,"STRONG",{});var yCt=s(T1e);fKo=r(yCt,"electra"),yCt.forEach(t),mKo=r($Be," \u2014 "),Uz=n($Be,"A",{href:!0});var xCt=s(Uz);gKo=r(xCt,"ElectraForTokenClassification"),xCt.forEach(t),hKo=r($Be," (ELECTRA model)"),$Be.forEach(t),pKo=i(Y),UF=n(Y,"LI",{});var kBe=s(UF);M1e=n(kBe,"STRONG",{});var $Ct=s(M1e);_Ko=r($Ct,"flaubert"),$Ct.forEach(t),uKo=r(kBe," \u2014 "),Jz=n(kBe,"A",{href:!0});var kCt=s(Jz);bKo=r(kCt,"FlaubertForTokenClassification"),kCt.forEach(t),vKo=r(kBe," (FlauBERT model)"),kBe.forEach(t),FKo=i(Y),JF=n(Y,"LI",{});var SBe=s(JF);E1e=n(SBe,"STRONG",{});var SCt=s(E1e);TKo=r(SCt,"fnet"),SCt.forEach(t),MKo=r(SBe," \u2014 "),Yz=n(SBe,"A",{href:!0});var RCt=s(Yz);EKo=r(RCt,"FNetForTokenClassification"),RCt.forEach(t),CKo=r(SBe," (FNet model)"),SBe.forEach(t),wKo=i(Y),YF=n(Y,"LI",{});var RBe=s(YF);C1e=n(RBe,"STRONG",{});var PCt=s(C1e);AKo=r(PCt,"funnel"),PCt.forEach(t),LKo=r(RBe," \u2014 "),Kz=n(RBe,"A",{href:!0});var BCt=s(Kz);yKo=r(BCt,"FunnelForTokenClassification"),BCt.forEach(t),xKo=r(RBe," (Funnel Transformer model)"),RBe.forEach(t),$Ko=i(Y),KF=n(Y,"LI",{});var PBe=s(KF);w1e=n(PBe,"STRONG",{});var ICt=s(w1e);kKo=r(ICt,"gpt2"),ICt.forEach(t),SKo=r(PBe," \u2014 "),Zz=n(PBe,"A",{href:!0});var NCt=s(Zz);RKo=r(NCt,"GPT2ForTokenClassification"),NCt.forEach(t),PKo=r(PBe," (OpenAI GPT-2 model)"),PBe.forEach(t),BKo=i(Y),ZF=n(Y,"LI",{});var BBe=s(ZF);A1e=n(BBe,"STRONG",{});var qCt=s(A1e);IKo=r(qCt,"ibert"),qCt.forEach(t),NKo=r(BBe," \u2014 "),eQ=n(BBe,"A",{href:!0});var jCt=s(eQ);qKo=r(jCt,"IBertForTokenClassification"),jCt.forEach(t),jKo=r(BBe," (I-BERT model)"),BBe.forEach(t),DKo=i(Y),eT=n(Y,"LI",{});var IBe=s(eT);L1e=n(IBe,"STRONG",{});var DCt=s(L1e);GKo=r(DCt,"layoutlm"),DCt.forEach(t),OKo=r(IBe," \u2014 "),oQ=n(IBe,"A",{href:!0});var GCt=s(oQ);VKo=r(GCt,"LayoutLMForTokenClassification"),GCt.forEach(t),XKo=r(IBe," (LayoutLM model)"),IBe.forEach(t),zKo=i(Y),oT=n(Y,"LI",{});var NBe=s(oT);y1e=n(NBe,"STRONG",{});var OCt=s(y1e);QKo=r(OCt,"layoutlmv2"),OCt.forEach(t),WKo=r(NBe," \u2014 "),rQ=n(NBe,"A",{href:!0});var VCt=s(rQ);HKo=r(VCt,"LayoutLMv2ForTokenClassification"),VCt.forEach(t),UKo=r(NBe," (LayoutLMv2 model)"),NBe.forEach(t),JKo=i(Y),rT=n(Y,"LI",{});var qBe=s(rT);x1e=n(qBe,"STRONG",{});var XCt=s(x1e);YKo=r(XCt,"layoutlmv3"),XCt.forEach(t),KKo=r(qBe," \u2014 "),tQ=n(qBe,"A",{href:!0});var zCt=s(tQ);ZKo=r(zCt,"LayoutLMv3ForTokenClassification"),zCt.forEach(t),eZo=r(qBe," (LayoutLMv3 model)"),qBe.forEach(t),oZo=i(Y),tT=n(Y,"LI",{});var jBe=s(tT);$1e=n(jBe,"STRONG",{});var QCt=s($1e);rZo=r(QCt,"longformer"),QCt.forEach(t),tZo=r(jBe," \u2014 "),aQ=n(jBe,"A",{href:!0});var WCt=s(aQ);aZo=r(WCt,"LongformerForTokenClassification"),WCt.forEach(t),nZo=r(jBe," (Longformer model)"),jBe.forEach(t),sZo=i(Y),aT=n(Y,"LI",{});var DBe=s(aT);k1e=n(DBe,"STRONG",{});var HCt=s(k1e);lZo=r(HCt,"megatron-bert"),HCt.forEach(t),iZo=r(DBe," \u2014 "),nQ=n(DBe,"A",{href:!0});var UCt=s(nQ);dZo=r(UCt,"MegatronBertForTokenClassification"),UCt.forEach(t),cZo=r(DBe," (Megatron-BERT model)"),DBe.forEach(t),fZo=i(Y),nT=n(Y,"LI",{});var GBe=s(nT);S1e=n(GBe,"STRONG",{});var JCt=s(S1e);mZo=r(JCt,"mobilebert"),JCt.forEach(t),gZo=r(GBe," \u2014 "),sQ=n(GBe,"A",{href:!0});var YCt=s(sQ);hZo=r(YCt,"MobileBertForTokenClassification"),YCt.forEach(t),pZo=r(GBe," (MobileBERT model)"),GBe.forEach(t),_Zo=i(Y),sT=n(Y,"LI",{});var OBe=s(sT);R1e=n(OBe,"STRONG",{});var KCt=s(R1e);uZo=r(KCt,"mpnet"),KCt.forEach(t),bZo=r(OBe," \u2014 "),lQ=n(OBe,"A",{href:!0});var ZCt=s(lQ);vZo=r(ZCt,"MPNetForTokenClassification"),ZCt.forEach(t),FZo=r(OBe," (MPNet model)"),OBe.forEach(t),TZo=i(Y),lT=n(Y,"LI",{});var VBe=s(lT);P1e=n(VBe,"STRONG",{});var e3t=s(P1e);MZo=r(e3t,"nezha"),e3t.forEach(t),EZo=r(VBe," \u2014 "),iQ=n(VBe,"A",{href:!0});var o3t=s(iQ);CZo=r(o3t,"NezhaForTokenClassification"),o3t.forEach(t),wZo=r(VBe," (Nezha model)"),VBe.forEach(t),AZo=i(Y),iT=n(Y,"LI",{});var XBe=s(iT);B1e=n(XBe,"STRONG",{});var r3t=s(B1e);LZo=r(r3t,"nystromformer"),r3t.forEach(t),yZo=r(XBe," \u2014 "),dQ=n(XBe,"A",{href:!0});var t3t=s(dQ);xZo=r(t3t,"NystromformerForTokenClassification"),t3t.forEach(t),$Zo=r(XBe," (Nystr\xF6mformer model)"),XBe.forEach(t),kZo=i(Y),dT=n(Y,"LI",{});var zBe=s(dT);I1e=n(zBe,"STRONG",{});var a3t=s(I1e);SZo=r(a3t,"qdqbert"),a3t.forEach(t),RZo=r(zBe," \u2014 "),cQ=n(zBe,"A",{href:!0});var n3t=s(cQ);PZo=r(n3t,"QDQBertForTokenClassification"),n3t.forEach(t),BZo=r(zBe," (QDQBert model)"),zBe.forEach(t),IZo=i(Y),cT=n(Y,"LI",{});var QBe=s(cT);N1e=n(QBe,"STRONG",{});var s3t=s(N1e);NZo=r(s3t,"rembert"),s3t.forEach(t),qZo=r(QBe," \u2014 "),fQ=n(QBe,"A",{href:!0});var l3t=s(fQ);jZo=r(l3t,"RemBertForTokenClassification"),l3t.forEach(t),DZo=r(QBe," (RemBERT model)"),QBe.forEach(t),GZo=i(Y),fT=n(Y,"LI",{});var WBe=s(fT);q1e=n(WBe,"STRONG",{});var i3t=s(q1e);OZo=r(i3t,"roberta"),i3t.forEach(t),VZo=r(WBe," \u2014 "),mQ=n(WBe,"A",{href:!0});var d3t=s(mQ);XZo=r(d3t,"RobertaForTokenClassification"),d3t.forEach(t),zZo=r(WBe," (RoBERTa model)"),WBe.forEach(t),QZo=i(Y),mT=n(Y,"LI",{});var HBe=s(mT);j1e=n(HBe,"STRONG",{});var c3t=s(j1e);WZo=r(c3t,"roformer"),c3t.forEach(t),HZo=r(HBe," \u2014 "),gQ=n(HBe,"A",{href:!0});var f3t=s(gQ);UZo=r(f3t,"RoFormerForTokenClassification"),f3t.forEach(t),JZo=r(HBe," (RoFormer model)"),HBe.forEach(t),YZo=i(Y),gT=n(Y,"LI",{});var UBe=s(gT);D1e=n(UBe,"STRONG",{});var m3t=s(D1e);KZo=r(m3t,"squeezebert"),m3t.forEach(t),ZZo=r(UBe," \u2014 "),hQ=n(UBe,"A",{href:!0});var g3t=s(hQ);eer=r(g3t,"SqueezeBertForTokenClassification"),g3t.forEach(t),oer=r(UBe," (SqueezeBERT model)"),UBe.forEach(t),rer=i(Y),hT=n(Y,"LI",{});var JBe=s(hT);G1e=n(JBe,"STRONG",{});var h3t=s(G1e);ter=r(h3t,"xlm"),h3t.forEach(t),aer=r(JBe," \u2014 "),pQ=n(JBe,"A",{href:!0});var p3t=s(pQ);ner=r(p3t,"XLMForTokenClassification"),p3t.forEach(t),ser=r(JBe," (XLM model)"),JBe.forEach(t),ler=i(Y),pT=n(Y,"LI",{});var YBe=s(pT);O1e=n(YBe,"STRONG",{});var _3t=s(O1e);ier=r(_3t,"xlm-roberta"),_3t.forEach(t),der=r(YBe," \u2014 "),_Q=n(YBe,"A",{href:!0});var u3t=s(_Q);cer=r(u3t,"XLMRobertaForTokenClassification"),u3t.forEach(t),fer=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),mer=i(Y),_T=n(Y,"LI",{});var KBe=s(_T);V1e=n(KBe,"STRONG",{});var b3t=s(V1e);ger=r(b3t,"xlm-roberta-xl"),b3t.forEach(t),her=r(KBe," \u2014 "),uQ=n(KBe,"A",{href:!0});var v3t=s(uQ);per=r(v3t,"XLMRobertaXLForTokenClassification"),v3t.forEach(t),_er=r(KBe," (XLM-RoBERTa-XL model)"),KBe.forEach(t),uer=i(Y),uT=n(Y,"LI",{});var ZBe=s(uT);X1e=n(ZBe,"STRONG",{});var F3t=s(X1e);ber=r(F3t,"xlnet"),F3t.forEach(t),ver=r(ZBe," \u2014 "),bQ=n(ZBe,"A",{href:!0});var T3t=s(bQ);Fer=r(T3t,"XLNetForTokenClassification"),T3t.forEach(t),Ter=r(ZBe," (XLNet model)"),ZBe.forEach(t),Mer=i(Y),bT=n(Y,"LI",{});var eIe=s(bT);z1e=n(eIe,"STRONG",{});var M3t=s(z1e);Eer=r(M3t,"yoso"),M3t.forEach(t),Cer=r(eIe," \u2014 "),vQ=n(eIe,"A",{href:!0});var E3t=s(vQ);wer=r(E3t,"YosoForTokenClassification"),E3t.forEach(t),Aer=r(eIe," (YOSO model)"),eIe.forEach(t),Y.forEach(t),Ler=i(pa),vT=n(pa,"P",{});var oIe=s(vT);yer=r(oIe,"The model is set in evaluation mode by default using "),Q1e=n(oIe,"CODE",{});var C3t=s(Q1e);xer=r(C3t,"model.eval()"),C3t.forEach(t),$er=r(oIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=n(oIe,"CODE",{});var w3t=s(W1e);ker=r(w3t,"model.train()"),w3t.forEach(t),oIe.forEach(t),Ser=i(pa),T(FT.$$.fragment,pa),pa.forEach(t),dl.forEach(t),IXe=i(f),gd=n(f,"H2",{class:!0});var OQe=s(gd);TT=n(OQe,"A",{id:!0,class:!0,href:!0});var A3t=s(TT);H1e=n(A3t,"SPAN",{});var L3t=s(H1e);T(Cy.$$.fragment,L3t),L3t.forEach(t),A3t.forEach(t),Rer=i(OQe),U1e=n(OQe,"SPAN",{});var y3t=s(U1e);Per=r(y3t,"AutoModelForQuestionAnswering"),y3t.forEach(t),OQe.forEach(t),NXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(wy.$$.fragment,cl),Ber=i(cl),hd=n(cl,"P",{});var Yre=s(hd);Ier=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FQ=n(Yre,"A",{href:!0});var x3t=s(FQ);Ner=r(x3t,"from_pretrained()"),x3t.forEach(t),qer=r(Yre," class method or the "),TQ=n(Yre,"A",{href:!0});var $3t=s(TQ);jer=r($3t,"from_config()"),$3t.forEach(t),Der=r(Yre,` class
method.`),Yre.forEach(t),Ger=i(cl),Ay=n(cl,"P",{});var VQe=s(Ay);Oer=r(VQe,"This class cannot be instantiated directly using "),J1e=n(VQe,"CODE",{});var k3t=s(J1e);Ver=r(k3t,"__init__()"),k3t.forEach(t),Xer=r(VQe," (throws an error)."),VQe.forEach(t),zer=i(cl),_t=n(cl,"DIV",{class:!0});var xA=s(_t);T(Ly.$$.fragment,xA),Qer=i(xA),Y1e=n(xA,"P",{});var S3t=s(Y1e);Wer=r(S3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),S3t.forEach(t),Her=i(xA),pd=n(xA,"P",{});var Kre=s(pd);Uer=r(Kre,`Note:
Loading a model from its configuration file does `),K1e=n(Kre,"STRONG",{});var R3t=s(K1e);Jer=r(R3t,"not"),R3t.forEach(t),Yer=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(Kre,"A",{href:!0});var P3t=s(MQ);Ker=r(P3t,"from_pretrained()"),P3t.forEach(t),Zer=r(Kre," to load the model weights."),Kre.forEach(t),eor=i(xA),T(MT.$$.fragment,xA),xA.forEach(t),oor=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(yy.$$.fragment,_a),ror=i(_a),Z1e=n(_a,"P",{});var B3t=s(Z1e);tor=r(B3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B3t.forEach(t),aor=i(_a),za=n(_a,"P",{});var $A=s(za);nor=r($A,"The model class to instantiate is selected based on the "),e2e=n($A,"CODE",{});var I3t=s(e2e);sor=r(I3t,"model_type"),I3t.forEach(t),lor=r($A,` property of the config object (either
passed as an argument or loaded from `),o2e=n($A,"CODE",{});var N3t=s(o2e);ior=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),dor=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n($A,"CODE",{});var q3t=s(r2e);cor=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),mor=r($A,":"),$A.forEach(t),gor=i(_a),V=n(_a,"UL",{});var X=s(V);ET=n(X,"LI",{});var rIe=s(ET);t2e=n(rIe,"STRONG",{});var j3t=s(t2e);hor=r(j3t,"albert"),j3t.forEach(t),por=r(rIe," \u2014 "),EQ=n(rIe,"A",{href:!0});var D3t=s(EQ);_or=r(D3t,"AlbertForQuestionAnswering"),D3t.forEach(t),uor=r(rIe," (ALBERT model)"),rIe.forEach(t),bor=i(X),CT=n(X,"LI",{});var tIe=s(CT);a2e=n(tIe,"STRONG",{});var G3t=s(a2e);vor=r(G3t,"bart"),G3t.forEach(t),For=r(tIe," \u2014 "),CQ=n(tIe,"A",{href:!0});var O3t=s(CQ);Tor=r(O3t,"BartForQuestionAnswering"),O3t.forEach(t),Mor=r(tIe," (BART model)"),tIe.forEach(t),Eor=i(X),wT=n(X,"LI",{});var aIe=s(wT);n2e=n(aIe,"STRONG",{});var V3t=s(n2e);Cor=r(V3t,"bert"),V3t.forEach(t),wor=r(aIe," \u2014 "),wQ=n(aIe,"A",{href:!0});var X3t=s(wQ);Aor=r(X3t,"BertForQuestionAnswering"),X3t.forEach(t),Lor=r(aIe," (BERT model)"),aIe.forEach(t),yor=i(X),AT=n(X,"LI",{});var nIe=s(AT);s2e=n(nIe,"STRONG",{});var z3t=s(s2e);xor=r(z3t,"big_bird"),z3t.forEach(t),$or=r(nIe," \u2014 "),AQ=n(nIe,"A",{href:!0});var Q3t=s(AQ);kor=r(Q3t,"BigBirdForQuestionAnswering"),Q3t.forEach(t),Sor=r(nIe," (BigBird model)"),nIe.forEach(t),Ror=i(X),LT=n(X,"LI",{});var sIe=s(LT);l2e=n(sIe,"STRONG",{});var W3t=s(l2e);Por=r(W3t,"bigbird_pegasus"),W3t.forEach(t),Bor=r(sIe," \u2014 "),LQ=n(sIe,"A",{href:!0});var H3t=s(LQ);Ior=r(H3t,"BigBirdPegasusForQuestionAnswering"),H3t.forEach(t),Nor=r(sIe," (BigBird-Pegasus model)"),sIe.forEach(t),qor=i(X),yT=n(X,"LI",{});var lIe=s(yT);i2e=n(lIe,"STRONG",{});var U3t=s(i2e);jor=r(U3t,"camembert"),U3t.forEach(t),Dor=r(lIe," \u2014 "),yQ=n(lIe,"A",{href:!0});var J3t=s(yQ);Gor=r(J3t,"CamembertForQuestionAnswering"),J3t.forEach(t),Oor=r(lIe," (CamemBERT model)"),lIe.forEach(t),Vor=i(X),xT=n(X,"LI",{});var iIe=s(xT);d2e=n(iIe,"STRONG",{});var Y3t=s(d2e);Xor=r(Y3t,"canine"),Y3t.forEach(t),zor=r(iIe," \u2014 "),xQ=n(iIe,"A",{href:!0});var K3t=s(xQ);Qor=r(K3t,"CanineForQuestionAnswering"),K3t.forEach(t),Wor=r(iIe," (CANINE model)"),iIe.forEach(t),Hor=i(X),$T=n(X,"LI",{});var dIe=s($T);c2e=n(dIe,"STRONG",{});var Z3t=s(c2e);Uor=r(Z3t,"convbert"),Z3t.forEach(t),Jor=r(dIe," \u2014 "),$Q=n(dIe,"A",{href:!0});var e5t=s($Q);Yor=r(e5t,"ConvBertForQuestionAnswering"),e5t.forEach(t),Kor=r(dIe," (ConvBERT model)"),dIe.forEach(t),Zor=i(X),kT=n(X,"LI",{});var cIe=s(kT);f2e=n(cIe,"STRONG",{});var o5t=s(f2e);err=r(o5t,"data2vec-text"),o5t.forEach(t),orr=r(cIe," \u2014 "),kQ=n(cIe,"A",{href:!0});var r5t=s(kQ);rrr=r(r5t,"Data2VecTextForQuestionAnswering"),r5t.forEach(t),trr=r(cIe," (Data2VecText model)"),cIe.forEach(t),arr=i(X),ST=n(X,"LI",{});var fIe=s(ST);m2e=n(fIe,"STRONG",{});var t5t=s(m2e);nrr=r(t5t,"deberta"),t5t.forEach(t),srr=r(fIe," \u2014 "),SQ=n(fIe,"A",{href:!0});var a5t=s(SQ);lrr=r(a5t,"DebertaForQuestionAnswering"),a5t.forEach(t),irr=r(fIe," (DeBERTa model)"),fIe.forEach(t),drr=i(X),RT=n(X,"LI",{});var mIe=s(RT);g2e=n(mIe,"STRONG",{});var n5t=s(g2e);crr=r(n5t,"deberta-v2"),n5t.forEach(t),frr=r(mIe," \u2014 "),RQ=n(mIe,"A",{href:!0});var s5t=s(RQ);mrr=r(s5t,"DebertaV2ForQuestionAnswering"),s5t.forEach(t),grr=r(mIe," (DeBERTa-v2 model)"),mIe.forEach(t),hrr=i(X),PT=n(X,"LI",{});var gIe=s(PT);h2e=n(gIe,"STRONG",{});var l5t=s(h2e);prr=r(l5t,"distilbert"),l5t.forEach(t),_rr=r(gIe," \u2014 "),PQ=n(gIe,"A",{href:!0});var i5t=s(PQ);urr=r(i5t,"DistilBertForQuestionAnswering"),i5t.forEach(t),brr=r(gIe," (DistilBERT model)"),gIe.forEach(t),vrr=i(X),BT=n(X,"LI",{});var hIe=s(BT);p2e=n(hIe,"STRONG",{});var d5t=s(p2e);Frr=r(d5t,"electra"),d5t.forEach(t),Trr=r(hIe," \u2014 "),BQ=n(hIe,"A",{href:!0});var c5t=s(BQ);Mrr=r(c5t,"ElectraForQuestionAnswering"),c5t.forEach(t),Err=r(hIe," (ELECTRA model)"),hIe.forEach(t),Crr=i(X),IT=n(X,"LI",{});var pIe=s(IT);_2e=n(pIe,"STRONG",{});var f5t=s(_2e);wrr=r(f5t,"flaubert"),f5t.forEach(t),Arr=r(pIe," \u2014 "),IQ=n(pIe,"A",{href:!0});var m5t=s(IQ);Lrr=r(m5t,"FlaubertForQuestionAnsweringSimple"),m5t.forEach(t),yrr=r(pIe," (FlauBERT model)"),pIe.forEach(t),xrr=i(X),NT=n(X,"LI",{});var _Ie=s(NT);u2e=n(_Ie,"STRONG",{});var g5t=s(u2e);$rr=r(g5t,"fnet"),g5t.forEach(t),krr=r(_Ie," \u2014 "),NQ=n(_Ie,"A",{href:!0});var h5t=s(NQ);Srr=r(h5t,"FNetForQuestionAnswering"),h5t.forEach(t),Rrr=r(_Ie," (FNet model)"),_Ie.forEach(t),Prr=i(X),qT=n(X,"LI",{});var uIe=s(qT);b2e=n(uIe,"STRONG",{});var p5t=s(b2e);Brr=r(p5t,"funnel"),p5t.forEach(t),Irr=r(uIe," \u2014 "),qQ=n(uIe,"A",{href:!0});var _5t=s(qQ);Nrr=r(_5t,"FunnelForQuestionAnswering"),_5t.forEach(t),qrr=r(uIe," (Funnel Transformer model)"),uIe.forEach(t),jrr=i(X),jT=n(X,"LI",{});var bIe=s(jT);v2e=n(bIe,"STRONG",{});var u5t=s(v2e);Drr=r(u5t,"gptj"),u5t.forEach(t),Grr=r(bIe," \u2014 "),jQ=n(bIe,"A",{href:!0});var b5t=s(jQ);Orr=r(b5t,"GPTJForQuestionAnswering"),b5t.forEach(t),Vrr=r(bIe," (GPT-J model)"),bIe.forEach(t),Xrr=i(X),DT=n(X,"LI",{});var vIe=s(DT);F2e=n(vIe,"STRONG",{});var v5t=s(F2e);zrr=r(v5t,"ibert"),v5t.forEach(t),Qrr=r(vIe," \u2014 "),DQ=n(vIe,"A",{href:!0});var F5t=s(DQ);Wrr=r(F5t,"IBertForQuestionAnswering"),F5t.forEach(t),Hrr=r(vIe," (I-BERT model)"),vIe.forEach(t),Urr=i(X),GT=n(X,"LI",{});var FIe=s(GT);T2e=n(FIe,"STRONG",{});var T5t=s(T2e);Jrr=r(T5t,"layoutlmv2"),T5t.forEach(t),Yrr=r(FIe," \u2014 "),GQ=n(FIe,"A",{href:!0});var M5t=s(GQ);Krr=r(M5t,"LayoutLMv2ForQuestionAnswering"),M5t.forEach(t),Zrr=r(FIe," (LayoutLMv2 model)"),FIe.forEach(t),etr=i(X),OT=n(X,"LI",{});var TIe=s(OT);M2e=n(TIe,"STRONG",{});var E5t=s(M2e);otr=r(E5t,"layoutlmv3"),E5t.forEach(t),rtr=r(TIe," \u2014 "),OQ=n(TIe,"A",{href:!0});var C5t=s(OQ);ttr=r(C5t,"LayoutLMv3ForQuestionAnswering"),C5t.forEach(t),atr=r(TIe," (LayoutLMv3 model)"),TIe.forEach(t),ntr=i(X),VT=n(X,"LI",{});var MIe=s(VT);E2e=n(MIe,"STRONG",{});var w5t=s(E2e);str=r(w5t,"led"),w5t.forEach(t),ltr=r(MIe," \u2014 "),VQ=n(MIe,"A",{href:!0});var A5t=s(VQ);itr=r(A5t,"LEDForQuestionAnswering"),A5t.forEach(t),dtr=r(MIe," (LED model)"),MIe.forEach(t),ctr=i(X),XT=n(X,"LI",{});var EIe=s(XT);C2e=n(EIe,"STRONG",{});var L5t=s(C2e);ftr=r(L5t,"longformer"),L5t.forEach(t),mtr=r(EIe," \u2014 "),XQ=n(EIe,"A",{href:!0});var y5t=s(XQ);gtr=r(y5t,"LongformerForQuestionAnswering"),y5t.forEach(t),htr=r(EIe," (Longformer model)"),EIe.forEach(t),ptr=i(X),zT=n(X,"LI",{});var CIe=s(zT);w2e=n(CIe,"STRONG",{});var x5t=s(w2e);_tr=r(x5t,"lxmert"),x5t.forEach(t),utr=r(CIe," \u2014 "),zQ=n(CIe,"A",{href:!0});var $5t=s(zQ);btr=r($5t,"LxmertForQuestionAnswering"),$5t.forEach(t),vtr=r(CIe," (LXMERT model)"),CIe.forEach(t),Ftr=i(X),QT=n(X,"LI",{});var wIe=s(QT);A2e=n(wIe,"STRONG",{});var k5t=s(A2e);Ttr=r(k5t,"mbart"),k5t.forEach(t),Mtr=r(wIe," \u2014 "),QQ=n(wIe,"A",{href:!0});var S5t=s(QQ);Etr=r(S5t,"MBartForQuestionAnswering"),S5t.forEach(t),Ctr=r(wIe," (mBART model)"),wIe.forEach(t),wtr=i(X),WT=n(X,"LI",{});var AIe=s(WT);L2e=n(AIe,"STRONG",{});var R5t=s(L2e);Atr=r(R5t,"megatron-bert"),R5t.forEach(t),Ltr=r(AIe," \u2014 "),WQ=n(AIe,"A",{href:!0});var P5t=s(WQ);ytr=r(P5t,"MegatronBertForQuestionAnswering"),P5t.forEach(t),xtr=r(AIe," (Megatron-BERT model)"),AIe.forEach(t),$tr=i(X),HT=n(X,"LI",{});var LIe=s(HT);y2e=n(LIe,"STRONG",{});var B5t=s(y2e);ktr=r(B5t,"mobilebert"),B5t.forEach(t),Str=r(LIe," \u2014 "),HQ=n(LIe,"A",{href:!0});var I5t=s(HQ);Rtr=r(I5t,"MobileBertForQuestionAnswering"),I5t.forEach(t),Ptr=r(LIe," (MobileBERT model)"),LIe.forEach(t),Btr=i(X),UT=n(X,"LI",{});var yIe=s(UT);x2e=n(yIe,"STRONG",{});var N5t=s(x2e);Itr=r(N5t,"mpnet"),N5t.forEach(t),Ntr=r(yIe," \u2014 "),UQ=n(yIe,"A",{href:!0});var q5t=s(UQ);qtr=r(q5t,"MPNetForQuestionAnswering"),q5t.forEach(t),jtr=r(yIe," (MPNet model)"),yIe.forEach(t),Dtr=i(X),JT=n(X,"LI",{});var xIe=s(JT);$2e=n(xIe,"STRONG",{});var j5t=s($2e);Gtr=r(j5t,"mvp"),j5t.forEach(t),Otr=r(xIe," \u2014 "),JQ=n(xIe,"A",{href:!0});var D5t=s(JQ);Vtr=r(D5t,"MvpForQuestionAnswering"),D5t.forEach(t),Xtr=r(xIe," (MVP model)"),xIe.forEach(t),ztr=i(X),YT=n(X,"LI",{});var $Ie=s(YT);k2e=n($Ie,"STRONG",{});var G5t=s(k2e);Qtr=r(G5t,"nezha"),G5t.forEach(t),Wtr=r($Ie," \u2014 "),YQ=n($Ie,"A",{href:!0});var O5t=s(YQ);Htr=r(O5t,"NezhaForQuestionAnswering"),O5t.forEach(t),Utr=r($Ie," (Nezha model)"),$Ie.forEach(t),Jtr=i(X),KT=n(X,"LI",{});var kIe=s(KT);S2e=n(kIe,"STRONG",{});var V5t=s(S2e);Ytr=r(V5t,"nystromformer"),V5t.forEach(t),Ktr=r(kIe," \u2014 "),KQ=n(kIe,"A",{href:!0});var X5t=s(KQ);Ztr=r(X5t,"NystromformerForQuestionAnswering"),X5t.forEach(t),ear=r(kIe," (Nystr\xF6mformer model)"),kIe.forEach(t),oar=i(X),ZT=n(X,"LI",{});var SIe=s(ZT);R2e=n(SIe,"STRONG",{});var z5t=s(R2e);rar=r(z5t,"qdqbert"),z5t.forEach(t),tar=r(SIe," \u2014 "),ZQ=n(SIe,"A",{href:!0});var Q5t=s(ZQ);aar=r(Q5t,"QDQBertForQuestionAnswering"),Q5t.forEach(t),nar=r(SIe," (QDQBert model)"),SIe.forEach(t),sar=i(X),e7=n(X,"LI",{});var RIe=s(e7);P2e=n(RIe,"STRONG",{});var W5t=s(P2e);lar=r(W5t,"reformer"),W5t.forEach(t),iar=r(RIe," \u2014 "),eW=n(RIe,"A",{href:!0});var H5t=s(eW);dar=r(H5t,"ReformerForQuestionAnswering"),H5t.forEach(t),car=r(RIe," (Reformer model)"),RIe.forEach(t),far=i(X),o7=n(X,"LI",{});var PIe=s(o7);B2e=n(PIe,"STRONG",{});var U5t=s(B2e);mar=r(U5t,"rembert"),U5t.forEach(t),gar=r(PIe," \u2014 "),oW=n(PIe,"A",{href:!0});var J5t=s(oW);har=r(J5t,"RemBertForQuestionAnswering"),J5t.forEach(t),par=r(PIe," (RemBERT model)"),PIe.forEach(t),_ar=i(X),r7=n(X,"LI",{});var BIe=s(r7);I2e=n(BIe,"STRONG",{});var Y5t=s(I2e);uar=r(Y5t,"roberta"),Y5t.forEach(t),bar=r(BIe," \u2014 "),rW=n(BIe,"A",{href:!0});var K5t=s(rW);Far=r(K5t,"RobertaForQuestionAnswering"),K5t.forEach(t),Tar=r(BIe," (RoBERTa model)"),BIe.forEach(t),Mar=i(X),t7=n(X,"LI",{});var IIe=s(t7);N2e=n(IIe,"STRONG",{});var Z5t=s(N2e);Ear=r(Z5t,"roformer"),Z5t.forEach(t),Car=r(IIe," \u2014 "),tW=n(IIe,"A",{href:!0});var e0t=s(tW);war=r(e0t,"RoFormerForQuestionAnswering"),e0t.forEach(t),Aar=r(IIe," (RoFormer model)"),IIe.forEach(t),Lar=i(X),a7=n(X,"LI",{});var NIe=s(a7);q2e=n(NIe,"STRONG",{});var o0t=s(q2e);yar=r(o0t,"splinter"),o0t.forEach(t),xar=r(NIe," \u2014 "),aW=n(NIe,"A",{href:!0});var r0t=s(aW);$ar=r(r0t,"SplinterForQuestionAnswering"),r0t.forEach(t),kar=r(NIe," (Splinter model)"),NIe.forEach(t),Sar=i(X),n7=n(X,"LI",{});var qIe=s(n7);j2e=n(qIe,"STRONG",{});var t0t=s(j2e);Rar=r(t0t,"squeezebert"),t0t.forEach(t),Par=r(qIe," \u2014 "),nW=n(qIe,"A",{href:!0});var a0t=s(nW);Bar=r(a0t,"SqueezeBertForQuestionAnswering"),a0t.forEach(t),Iar=r(qIe," (SqueezeBERT model)"),qIe.forEach(t),Nar=i(X),s7=n(X,"LI",{});var jIe=s(s7);D2e=n(jIe,"STRONG",{});var n0t=s(D2e);qar=r(n0t,"xlm"),n0t.forEach(t),jar=r(jIe," \u2014 "),sW=n(jIe,"A",{href:!0});var s0t=s(sW);Dar=r(s0t,"XLMForQuestionAnsweringSimple"),s0t.forEach(t),Gar=r(jIe," (XLM model)"),jIe.forEach(t),Oar=i(X),l7=n(X,"LI",{});var DIe=s(l7);G2e=n(DIe,"STRONG",{});var l0t=s(G2e);Var=r(l0t,"xlm-roberta"),l0t.forEach(t),Xar=r(DIe," \u2014 "),lW=n(DIe,"A",{href:!0});var i0t=s(lW);zar=r(i0t,"XLMRobertaForQuestionAnswering"),i0t.forEach(t),Qar=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),War=i(X),i7=n(X,"LI",{});var GIe=s(i7);O2e=n(GIe,"STRONG",{});var d0t=s(O2e);Har=r(d0t,"xlm-roberta-xl"),d0t.forEach(t),Uar=r(GIe," \u2014 "),iW=n(GIe,"A",{href:!0});var c0t=s(iW);Jar=r(c0t,"XLMRobertaXLForQuestionAnswering"),c0t.forEach(t),Yar=r(GIe," (XLM-RoBERTa-XL model)"),GIe.forEach(t),Kar=i(X),d7=n(X,"LI",{});var OIe=s(d7);V2e=n(OIe,"STRONG",{});var f0t=s(V2e);Zar=r(f0t,"xlnet"),f0t.forEach(t),enr=r(OIe," \u2014 "),dW=n(OIe,"A",{href:!0});var m0t=s(dW);onr=r(m0t,"XLNetForQuestionAnsweringSimple"),m0t.forEach(t),rnr=r(OIe," (XLNet model)"),OIe.forEach(t),tnr=i(X),c7=n(X,"LI",{});var VIe=s(c7);X2e=n(VIe,"STRONG",{});var g0t=s(X2e);anr=r(g0t,"yoso"),g0t.forEach(t),nnr=r(VIe," \u2014 "),cW=n(VIe,"A",{href:!0});var h0t=s(cW);snr=r(h0t,"YosoForQuestionAnswering"),h0t.forEach(t),lnr=r(VIe," (YOSO model)"),VIe.forEach(t),X.forEach(t),inr=i(_a),f7=n(_a,"P",{});var XIe=s(f7);dnr=r(XIe,"The model is set in evaluation mode by default using "),z2e=n(XIe,"CODE",{});var p0t=s(z2e);cnr=r(p0t,"model.eval()"),p0t.forEach(t),fnr=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=n(XIe,"CODE",{});var _0t=s(Q2e);mnr=r(_0t,"model.train()"),_0t.forEach(t),XIe.forEach(t),gnr=i(_a),T(m7.$$.fragment,_a),_a.forEach(t),cl.forEach(t),qXe=i(f),_d=n(f,"H2",{class:!0});var XQe=s(_d);g7=n(XQe,"A",{id:!0,class:!0,href:!0});var u0t=s(g7);W2e=n(u0t,"SPAN",{});var b0t=s(W2e);T(xy.$$.fragment,b0t),b0t.forEach(t),u0t.forEach(t),hnr=i(XQe),H2e=n(XQe,"SPAN",{});var v0t=s(H2e);pnr=r(v0t,"AutoModelForTableQuestionAnswering"),v0t.forEach(t),XQe.forEach(t),jXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T($y.$$.fragment,fl),_nr=i(fl),ud=n(fl,"P",{});var Zre=s(ud);unr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fW=n(Zre,"A",{href:!0});var F0t=s(fW);bnr=r(F0t,"from_pretrained()"),F0t.forEach(t),vnr=r(Zre," class method or the "),mW=n(Zre,"A",{href:!0});var T0t=s(mW);Fnr=r(T0t,"from_config()"),T0t.forEach(t),Tnr=r(Zre,` class
method.`),Zre.forEach(t),Mnr=i(fl),ky=n(fl,"P",{});var zQe=s(ky);Enr=r(zQe,"This class cannot be instantiated directly using "),U2e=n(zQe,"CODE",{});var M0t=s(U2e);Cnr=r(M0t,"__init__()"),M0t.forEach(t),wnr=r(zQe," (throws an error)."),zQe.forEach(t),Anr=i(fl),ut=n(fl,"DIV",{class:!0});var kA=s(ut);T(Sy.$$.fragment,kA),Lnr=i(kA),J2e=n(kA,"P",{});var E0t=s(J2e);ynr=r(E0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E0t.forEach(t),xnr=i(kA),bd=n(kA,"P",{});var ete=s(bd);$nr=r(ete,`Note:
Loading a model from its configuration file does `),Y2e=n(ete,"STRONG",{});var C0t=s(Y2e);knr=r(C0t,"not"),C0t.forEach(t),Snr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(ete,"A",{href:!0});var w0t=s(gW);Rnr=r(w0t,"from_pretrained()"),w0t.forEach(t),Pnr=r(ete," to load the model weights."),ete.forEach(t),Bnr=i(kA),T(h7.$$.fragment,kA),kA.forEach(t),Inr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(Ry.$$.fragment,ua),Nnr=i(ua),K2e=n(ua,"P",{});var A0t=s(K2e);qnr=r(A0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),A0t.forEach(t),jnr=i(ua),Qa=n(ua,"P",{});var SA=s(Qa);Dnr=r(SA,"The model class to instantiate is selected based on the "),Z2e=n(SA,"CODE",{});var L0t=s(Z2e);Gnr=r(L0t,"model_type"),L0t.forEach(t),Onr=r(SA,` property of the config object (either
passed as an argument or loaded from `),ebe=n(SA,"CODE",{});var y0t=s(ebe);Vnr=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),Xnr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(SA,"CODE",{});var x0t=s(obe);znr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),Qnr=r(SA,":"),SA.forEach(t),Wnr=i(ua),rbe=n(ua,"UL",{});var $0t=s(rbe);p7=n($0t,"LI",{});var zIe=s(p7);tbe=n(zIe,"STRONG",{});var k0t=s(tbe);Hnr=r(k0t,"tapas"),k0t.forEach(t),Unr=r(zIe," \u2014 "),hW=n(zIe,"A",{href:!0});var S0t=s(hW);Jnr=r(S0t,"TapasForQuestionAnswering"),S0t.forEach(t),Ynr=r(zIe," (TAPAS model)"),zIe.forEach(t),$0t.forEach(t),Knr=i(ua),_7=n(ua,"P",{});var QIe=s(_7);Znr=r(QIe,"The model is set in evaluation mode by default using "),abe=n(QIe,"CODE",{});var R0t=s(abe);esr=r(R0t,"model.eval()"),R0t.forEach(t),osr=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(QIe,"CODE",{});var P0t=s(nbe);rsr=r(P0t,"model.train()"),P0t.forEach(t),QIe.forEach(t),tsr=i(ua),T(u7.$$.fragment,ua),ua.forEach(t),fl.forEach(t),DXe=i(f),vd=n(f,"H2",{class:!0});var QQe=s(vd);b7=n(QQe,"A",{id:!0,class:!0,href:!0});var B0t=s(b7);sbe=n(B0t,"SPAN",{});var I0t=s(sbe);T(Py.$$.fragment,I0t),I0t.forEach(t),B0t.forEach(t),asr=i(QQe),lbe=n(QQe,"SPAN",{});var N0t=s(lbe);nsr=r(N0t,"AutoModelForImageClassification"),N0t.forEach(t),QQe.forEach(t),GXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(By.$$.fragment,ml),ssr=i(ml),Fd=n(ml,"P",{});var ote=s(Fd);lsr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pW=n(ote,"A",{href:!0});var q0t=s(pW);isr=r(q0t,"from_pretrained()"),q0t.forEach(t),dsr=r(ote," class method or the "),_W=n(ote,"A",{href:!0});var j0t=s(_W);csr=r(j0t,"from_config()"),j0t.forEach(t),fsr=r(ote,` class
method.`),ote.forEach(t),msr=i(ml),Iy=n(ml,"P",{});var WQe=s(Iy);gsr=r(WQe,"This class cannot be instantiated directly using "),ibe=n(WQe,"CODE",{});var D0t=s(ibe);hsr=r(D0t,"__init__()"),D0t.forEach(t),psr=r(WQe," (throws an error)."),WQe.forEach(t),_sr=i(ml),bt=n(ml,"DIV",{class:!0});var RA=s(bt);T(Ny.$$.fragment,RA),usr=i(RA),dbe=n(RA,"P",{});var G0t=s(dbe);bsr=r(G0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G0t.forEach(t),vsr=i(RA),Td=n(RA,"P",{});var rte=s(Td);Fsr=r(rte,`Note:
Loading a model from its configuration file does `),cbe=n(rte,"STRONG",{});var O0t=s(cbe);Tsr=r(O0t,"not"),O0t.forEach(t),Msr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(rte,"A",{href:!0});var V0t=s(uW);Esr=r(V0t,"from_pretrained()"),V0t.forEach(t),Csr=r(rte," to load the model weights."),rte.forEach(t),wsr=i(RA),T(v7.$$.fragment,RA),RA.forEach(t),Asr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(qy.$$.fragment,ba),Lsr=i(ba),fbe=n(ba,"P",{});var X0t=s(fbe);ysr=r(X0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X0t.forEach(t),xsr=i(ba),Wa=n(ba,"P",{});var PA=s(Wa);$sr=r(PA,"The model class to instantiate is selected based on the "),mbe=n(PA,"CODE",{});var z0t=s(mbe);ksr=r(z0t,"model_type"),z0t.forEach(t),Ssr=r(PA,` property of the config object (either
passed as an argument or loaded from `),gbe=n(PA,"CODE",{});var Q0t=s(gbe);Rsr=r(Q0t,"pretrained_model_name_or_path"),Q0t.forEach(t),Psr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(PA,"CODE",{});var W0t=s(hbe);Bsr=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),Isr=r(PA,":"),PA.forEach(t),Nsr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);F7=n(Te,"LI",{});var WIe=s(F7);pbe=n(WIe,"STRONG",{});var H0t=s(pbe);qsr=r(H0t,"beit"),H0t.forEach(t),jsr=r(WIe," \u2014 "),bW=n(WIe,"A",{href:!0});var U0t=s(bW);Dsr=r(U0t,"BeitForImageClassification"),U0t.forEach(t),Gsr=r(WIe," (BEiT model)"),WIe.forEach(t),Osr=i(Te),T7=n(Te,"LI",{});var HIe=s(T7);_be=n(HIe,"STRONG",{});var J0t=s(_be);Vsr=r(J0t,"convnext"),J0t.forEach(t),Xsr=r(HIe," \u2014 "),vW=n(HIe,"A",{href:!0});var Y0t=s(vW);zsr=r(Y0t,"ConvNextForImageClassification"),Y0t.forEach(t),Qsr=r(HIe," (ConvNeXT model)"),HIe.forEach(t),Wsr=i(Te),M7=n(Te,"LI",{});var UIe=s(M7);ube=n(UIe,"STRONG",{});var K0t=s(ube);Hsr=r(K0t,"cvt"),K0t.forEach(t),Usr=r(UIe," \u2014 "),FW=n(UIe,"A",{href:!0});var Z0t=s(FW);Jsr=r(Z0t,"CvtForImageClassification"),Z0t.forEach(t),Ysr=r(UIe," (CvT model)"),UIe.forEach(t),Ksr=i(Te),E7=n(Te,"LI",{});var JIe=s(E7);bbe=n(JIe,"STRONG",{});var ewt=s(bbe);Zsr=r(ewt,"data2vec-vision"),ewt.forEach(t),elr=r(JIe," \u2014 "),TW=n(JIe,"A",{href:!0});var owt=s(TW);olr=r(owt,"Data2VecVisionForImageClassification"),owt.forEach(t),rlr=r(JIe," (Data2VecVision model)"),JIe.forEach(t),tlr=i(Te),Hs=n(Te,"LI",{});var RS=s(Hs);vbe=n(RS,"STRONG",{});var rwt=s(vbe);alr=r(rwt,"deit"),rwt.forEach(t),nlr=r(RS," \u2014 "),MW=n(RS,"A",{href:!0});var twt=s(MW);slr=r(twt,"DeiTForImageClassification"),twt.forEach(t),llr=r(RS," or "),EW=n(RS,"A",{href:!0});var awt=s(EW);ilr=r(awt,"DeiTForImageClassificationWithTeacher"),awt.forEach(t),dlr=r(RS," (DeiT model)"),RS.forEach(t),clr=i(Te),C7=n(Te,"LI",{});var YIe=s(C7);Fbe=n(YIe,"STRONG",{});var nwt=s(Fbe);flr=r(nwt,"imagegpt"),nwt.forEach(t),mlr=r(YIe," \u2014 "),CW=n(YIe,"A",{href:!0});var swt=s(CW);glr=r(swt,"ImageGPTForImageClassification"),swt.forEach(t),hlr=r(YIe," (ImageGPT model)"),YIe.forEach(t),plr=i(Te),Us=n(Te,"LI",{});var PS=s(Us);Tbe=n(PS,"STRONG",{});var lwt=s(Tbe);_lr=r(lwt,"levit"),lwt.forEach(t),ulr=r(PS," \u2014 "),wW=n(PS,"A",{href:!0});var iwt=s(wW);blr=r(iwt,"LevitForImageClassification"),iwt.forEach(t),vlr=r(PS," or "),AW=n(PS,"A",{href:!0});var dwt=s(AW);Flr=r(dwt,"LevitForImageClassificationWithTeacher"),dwt.forEach(t),Tlr=r(PS," (LeViT model)"),PS.forEach(t),Mlr=i(Te),w7=n(Te,"LI",{});var KIe=s(w7);Mbe=n(KIe,"STRONG",{});var cwt=s(Mbe);Elr=r(cwt,"mobilevit"),cwt.forEach(t),Clr=r(KIe," \u2014 "),LW=n(KIe,"A",{href:!0});var fwt=s(LW);wlr=r(fwt,"MobileViTForImageClassification"),fwt.forEach(t),Alr=r(KIe," (MobileViT model)"),KIe.forEach(t),Llr=i(Te),vt=n(Te,"LI",{});var Rf=s(vt);Ebe=n(Rf,"STRONG",{});var mwt=s(Ebe);ylr=r(mwt,"perceiver"),mwt.forEach(t),xlr=r(Rf," \u2014 "),yW=n(Rf,"A",{href:!0});var gwt=s(yW);$lr=r(gwt,"PerceiverForImageClassificationLearned"),gwt.forEach(t),klr=r(Rf," or "),xW=n(Rf,"A",{href:!0});var hwt=s(xW);Slr=r(hwt,"PerceiverForImageClassificationFourier"),hwt.forEach(t),Rlr=r(Rf," or "),$W=n(Rf,"A",{href:!0});var pwt=s($W);Plr=r(pwt,"PerceiverForImageClassificationConvProcessing"),pwt.forEach(t),Blr=r(Rf," (Perceiver model)"),Rf.forEach(t),Ilr=i(Te),A7=n(Te,"LI",{});var ZIe=s(A7);Cbe=n(ZIe,"STRONG",{});var _wt=s(Cbe);Nlr=r(_wt,"poolformer"),_wt.forEach(t),qlr=r(ZIe," \u2014 "),kW=n(ZIe,"A",{href:!0});var uwt=s(kW);jlr=r(uwt,"PoolFormerForImageClassification"),uwt.forEach(t),Dlr=r(ZIe," (PoolFormer model)"),ZIe.forEach(t),Glr=i(Te),L7=n(Te,"LI",{});var eNe=s(L7);wbe=n(eNe,"STRONG",{});var bwt=s(wbe);Olr=r(bwt,"regnet"),bwt.forEach(t),Vlr=r(eNe," \u2014 "),SW=n(eNe,"A",{href:!0});var vwt=s(SW);Xlr=r(vwt,"RegNetForImageClassification"),vwt.forEach(t),zlr=r(eNe," (RegNet model)"),eNe.forEach(t),Qlr=i(Te),y7=n(Te,"LI",{});var oNe=s(y7);Abe=n(oNe,"STRONG",{});var Fwt=s(Abe);Wlr=r(Fwt,"resnet"),Fwt.forEach(t),Hlr=r(oNe," \u2014 "),RW=n(oNe,"A",{href:!0});var Twt=s(RW);Ulr=r(Twt,"ResNetForImageClassification"),Twt.forEach(t),Jlr=r(oNe," (ResNet model)"),oNe.forEach(t),Ylr=i(Te),x7=n(Te,"LI",{});var rNe=s(x7);Lbe=n(rNe,"STRONG",{});var Mwt=s(Lbe);Klr=r(Mwt,"segformer"),Mwt.forEach(t),Zlr=r(rNe," \u2014 "),PW=n(rNe,"A",{href:!0});var Ewt=s(PW);eir=r(Ewt,"SegformerForImageClassification"),Ewt.forEach(t),oir=r(rNe," (SegFormer model)"),rNe.forEach(t),rir=i(Te),$7=n(Te,"LI",{});var tNe=s($7);ybe=n(tNe,"STRONG",{});var Cwt=s(ybe);tir=r(Cwt,"swin"),Cwt.forEach(t),air=r(tNe," \u2014 "),BW=n(tNe,"A",{href:!0});var wwt=s(BW);nir=r(wwt,"SwinForImageClassification"),wwt.forEach(t),sir=r(tNe," (Swin Transformer model)"),tNe.forEach(t),lir=i(Te),k7=n(Te,"LI",{});var aNe=s(k7);xbe=n(aNe,"STRONG",{});var Awt=s(xbe);iir=r(Awt,"van"),Awt.forEach(t),dir=r(aNe," \u2014 "),IW=n(aNe,"A",{href:!0});var Lwt=s(IW);cir=r(Lwt,"VanForImageClassification"),Lwt.forEach(t),fir=r(aNe," (VAN model)"),aNe.forEach(t),mir=i(Te),S7=n(Te,"LI",{});var nNe=s(S7);$be=n(nNe,"STRONG",{});var ywt=s($be);gir=r(ywt,"vit"),ywt.forEach(t),hir=r(nNe," \u2014 "),NW=n(nNe,"A",{href:!0});var xwt=s(NW);pir=r(xwt,"ViTForImageClassification"),xwt.forEach(t),_ir=r(nNe," (ViT model)"),nNe.forEach(t),Te.forEach(t),uir=i(ba),R7=n(ba,"P",{});var sNe=s(R7);bir=r(sNe,"The model is set in evaluation mode by default using "),kbe=n(sNe,"CODE",{});var $wt=s(kbe);vir=r($wt,"model.eval()"),$wt.forEach(t),Fir=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(sNe,"CODE",{});var kwt=s(Sbe);Tir=r(kwt,"model.train()"),kwt.forEach(t),sNe.forEach(t),Mir=i(ba),T(P7.$$.fragment,ba),ba.forEach(t),ml.forEach(t),OXe=i(f),Md=n(f,"H2",{class:!0});var HQe=s(Md);B7=n(HQe,"A",{id:!0,class:!0,href:!0});var Swt=s(B7);Rbe=n(Swt,"SPAN",{});var Rwt=s(Rbe);T(jy.$$.fragment,Rwt),Rwt.forEach(t),Swt.forEach(t),Eir=i(HQe),Pbe=n(HQe,"SPAN",{});var Pwt=s(Pbe);Cir=r(Pwt,"AutoModelForVision2Seq"),Pwt.forEach(t),HQe.forEach(t),VXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(Dy.$$.fragment,gl),wir=i(gl),Ed=n(gl,"P",{});var tte=s(Ed);Air=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qW=n(tte,"A",{href:!0});var Bwt=s(qW);Lir=r(Bwt,"from_pretrained()"),Bwt.forEach(t),yir=r(tte," class method or the "),jW=n(tte,"A",{href:!0});var Iwt=s(jW);xir=r(Iwt,"from_config()"),Iwt.forEach(t),$ir=r(tte,` class
method.`),tte.forEach(t),kir=i(gl),Gy=n(gl,"P",{});var UQe=s(Gy);Sir=r(UQe,"This class cannot be instantiated directly using "),Bbe=n(UQe,"CODE",{});var Nwt=s(Bbe);Rir=r(Nwt,"__init__()"),Nwt.forEach(t),Pir=r(UQe," (throws an error)."),UQe.forEach(t),Bir=i(gl),Ft=n(gl,"DIV",{class:!0});var BA=s(Ft);T(Oy.$$.fragment,BA),Iir=i(BA),Ibe=n(BA,"P",{});var qwt=s(Ibe);Nir=r(qwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qwt.forEach(t),qir=i(BA),Cd=n(BA,"P",{});var ate=s(Cd);jir=r(ate,`Note:
Loading a model from its configuration file does `),Nbe=n(ate,"STRONG",{});var jwt=s(Nbe);Dir=r(jwt,"not"),jwt.forEach(t),Gir=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(ate,"A",{href:!0});var Dwt=s(DW);Oir=r(Dwt,"from_pretrained()"),Dwt.forEach(t),Vir=r(ate," to load the model weights."),ate.forEach(t),Xir=i(BA),T(I7.$$.fragment,BA),BA.forEach(t),zir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Vy.$$.fragment,va),Qir=i(va),qbe=n(va,"P",{});var Gwt=s(qbe);Wir=r(Gwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gwt.forEach(t),Hir=i(va),Ha=n(va,"P",{});var IA=s(Ha);Uir=r(IA,"The model class to instantiate is selected based on the "),jbe=n(IA,"CODE",{});var Owt=s(jbe);Jir=r(Owt,"model_type"),Owt.forEach(t),Yir=r(IA,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(IA,"CODE",{});var Vwt=s(Dbe);Kir=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),Zir=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(IA,"CODE",{});var Xwt=s(Gbe);edr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),odr=r(IA,":"),IA.forEach(t),rdr=i(va),Obe=n(va,"UL",{});var zwt=s(Obe);N7=n(zwt,"LI",{});var lNe=s(N7);Vbe=n(lNe,"STRONG",{});var Qwt=s(Vbe);tdr=r(Qwt,"vision-encoder-decoder"),Qwt.forEach(t),adr=r(lNe," \u2014 "),GW=n(lNe,"A",{href:!0});var Wwt=s(GW);ndr=r(Wwt,"VisionEncoderDecoderModel"),Wwt.forEach(t),sdr=r(lNe," (Vision Encoder decoder model)"),lNe.forEach(t),zwt.forEach(t),ldr=i(va),q7=n(va,"P",{});var iNe=s(q7);idr=r(iNe,"The model is set in evaluation mode by default using "),Xbe=n(iNe,"CODE",{});var Hwt=s(Xbe);ddr=r(Hwt,"model.eval()"),Hwt.forEach(t),cdr=r(iNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=n(iNe,"CODE",{});var Uwt=s(zbe);fdr=r(Uwt,"model.train()"),Uwt.forEach(t),iNe.forEach(t),mdr=i(va),T(j7.$$.fragment,va),va.forEach(t),gl.forEach(t),XXe=i(f),wd=n(f,"H2",{class:!0});var JQe=s(wd);D7=n(JQe,"A",{id:!0,class:!0,href:!0});var Jwt=s(D7);Qbe=n(Jwt,"SPAN",{});var Ywt=s(Qbe);T(Xy.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),gdr=i(JQe),Wbe=n(JQe,"SPAN",{});var Kwt=s(Wbe);hdr=r(Kwt,"AutoModelForVisualQuestionAnswering"),Kwt.forEach(t),JQe.forEach(t),zXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(zy.$$.fragment,hl),pdr=i(hl),Ad=n(hl,"P",{});var nte=s(Ad);_dr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OW=n(nte,"A",{href:!0});var Zwt=s(OW);udr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),bdr=r(nte," class method or the "),VW=n(nte,"A",{href:!0});var eAt=s(VW);vdr=r(eAt,"from_config()"),eAt.forEach(t),Fdr=r(nte,` class
method.`),nte.forEach(t),Tdr=i(hl),Qy=n(hl,"P",{});var YQe=s(Qy);Mdr=r(YQe,"This class cannot be instantiated directly using "),Hbe=n(YQe,"CODE",{});var oAt=s(Hbe);Edr=r(oAt,"__init__()"),oAt.forEach(t),Cdr=r(YQe," (throws an error)."),YQe.forEach(t),wdr=i(hl),Tt=n(hl,"DIV",{class:!0});var NA=s(Tt);T(Wy.$$.fragment,NA),Adr=i(NA),Ube=n(NA,"P",{});var rAt=s(Ube);Ldr=r(rAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),rAt.forEach(t),ydr=i(NA),Ld=n(NA,"P",{});var ste=s(Ld);xdr=r(ste,`Note:
Loading a model from its configuration file does `),Jbe=n(ste,"STRONG",{});var tAt=s(Jbe);$dr=r(tAt,"not"),tAt.forEach(t),kdr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(ste,"A",{href:!0});var aAt=s(XW);Sdr=r(aAt,"from_pretrained()"),aAt.forEach(t),Rdr=r(ste," to load the model weights."),ste.forEach(t),Pdr=i(NA),T(G7.$$.fragment,NA),NA.forEach(t),Bdr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Hy.$$.fragment,Fa),Idr=i(Fa),Ybe=n(Fa,"P",{});var nAt=s(Ybe);Ndr=r(nAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),nAt.forEach(t),qdr=i(Fa),Ua=n(Fa,"P",{});var qA=s(Ua);jdr=r(qA,"The model class to instantiate is selected based on the "),Kbe=n(qA,"CODE",{});var sAt=s(Kbe);Ddr=r(sAt,"model_type"),sAt.forEach(t),Gdr=r(qA,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(qA,"CODE",{});var lAt=s(Zbe);Odr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),Vdr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(qA,"CODE",{});var iAt=s(eve);Xdr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),zdr=r(qA,":"),qA.forEach(t),Qdr=i(Fa),ove=n(Fa,"UL",{});var dAt=s(ove);O7=n(dAt,"LI",{});var dNe=s(O7);rve=n(dNe,"STRONG",{});var cAt=s(rve);Wdr=r(cAt,"vilt"),cAt.forEach(t),Hdr=r(dNe," \u2014 "),zW=n(dNe,"A",{href:!0});var fAt=s(zW);Udr=r(fAt,"ViltForQuestionAnswering"),fAt.forEach(t),Jdr=r(dNe," (ViLT model)"),dNe.forEach(t),dAt.forEach(t),Ydr=i(Fa),V7=n(Fa,"P",{});var cNe=s(V7);Kdr=r(cNe,"The model is set in evaluation mode by default using "),tve=n(cNe,"CODE",{});var mAt=s(tve);Zdr=r(mAt,"model.eval()"),mAt.forEach(t),ecr=r(cNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=n(cNe,"CODE",{});var gAt=s(ave);ocr=r(gAt,"model.train()"),gAt.forEach(t),cNe.forEach(t),rcr=i(Fa),T(X7.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),QXe=i(f),yd=n(f,"H2",{class:!0});var KQe=s(yd);z7=n(KQe,"A",{id:!0,class:!0,href:!0});var hAt=s(z7);nve=n(hAt,"SPAN",{});var pAt=s(nve);T(Uy.$$.fragment,pAt),pAt.forEach(t),hAt.forEach(t),tcr=i(KQe),sve=n(KQe,"SPAN",{});var _At=s(sve);acr=r(_At,"AutoModelForAudioClassification"),_At.forEach(t),KQe.forEach(t),WXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Jy.$$.fragment,pl),ncr=i(pl),xd=n(pl,"P",{});var lte=s(xd);scr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QW=n(lte,"A",{href:!0});var uAt=s(QW);lcr=r(uAt,"from_pretrained()"),uAt.forEach(t),icr=r(lte," class method or the "),WW=n(lte,"A",{href:!0});var bAt=s(WW);dcr=r(bAt,"from_config()"),bAt.forEach(t),ccr=r(lte,` class
method.`),lte.forEach(t),fcr=i(pl),Yy=n(pl,"P",{});var ZQe=s(Yy);mcr=r(ZQe,"This class cannot be instantiated directly using "),lve=n(ZQe,"CODE",{});var vAt=s(lve);gcr=r(vAt,"__init__()"),vAt.forEach(t),hcr=r(ZQe," (throws an error)."),ZQe.forEach(t),pcr=i(pl),Mt=n(pl,"DIV",{class:!0});var jA=s(Mt);T(Ky.$$.fragment,jA),_cr=i(jA),ive=n(jA,"P",{});var FAt=s(ive);ucr=r(FAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),FAt.forEach(t),bcr=i(jA),$d=n(jA,"P",{});var ite=s($d);vcr=r(ite,`Note:
Loading a model from its configuration file does `),dve=n(ite,"STRONG",{});var TAt=s(dve);Fcr=r(TAt,"not"),TAt.forEach(t),Tcr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(ite,"A",{href:!0});var MAt=s(HW);Mcr=r(MAt,"from_pretrained()"),MAt.forEach(t),Ecr=r(ite," to load the model weights."),ite.forEach(t),Ccr=i(jA),T(Q7.$$.fragment,jA),jA.forEach(t),wcr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Zy.$$.fragment,Ta),Acr=i(Ta),cve=n(Ta,"P",{});var EAt=s(cve);Lcr=r(EAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),EAt.forEach(t),ycr=i(Ta),Ja=n(Ta,"P",{});var DA=s(Ja);xcr=r(DA,"The model class to instantiate is selected based on the "),fve=n(DA,"CODE",{});var CAt=s(fve);$cr=r(CAt,"model_type"),CAt.forEach(t),kcr=r(DA,` property of the config object (either
passed as an argument or loaded from `),mve=n(DA,"CODE",{});var wAt=s(mve);Scr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),Rcr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(DA,"CODE",{});var AAt=s(gve);Pcr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),Bcr=r(DA,":"),DA.forEach(t),Icr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);W7=n(ze,"LI",{});var fNe=s(W7);hve=n(fNe,"STRONG",{});var LAt=s(hve);Ncr=r(LAt,"data2vec-audio"),LAt.forEach(t),qcr=r(fNe," \u2014 "),UW=n(fNe,"A",{href:!0});var yAt=s(UW);jcr=r(yAt,"Data2VecAudioForSequenceClassification"),yAt.forEach(t),Dcr=r(fNe," (Data2VecAudio model)"),fNe.forEach(t),Gcr=i(ze),H7=n(ze,"LI",{});var mNe=s(H7);pve=n(mNe,"STRONG",{});var xAt=s(pve);Ocr=r(xAt,"hubert"),xAt.forEach(t),Vcr=r(mNe," \u2014 "),JW=n(mNe,"A",{href:!0});var $At=s(JW);Xcr=r($At,"HubertForSequenceClassification"),$At.forEach(t),zcr=r(mNe," (Hubert model)"),mNe.forEach(t),Qcr=i(ze),U7=n(ze,"LI",{});var gNe=s(U7);_ve=n(gNe,"STRONG",{});var kAt=s(_ve);Wcr=r(kAt,"sew"),kAt.forEach(t),Hcr=r(gNe," \u2014 "),YW=n(gNe,"A",{href:!0});var SAt=s(YW);Ucr=r(SAt,"SEWForSequenceClassification"),SAt.forEach(t),Jcr=r(gNe," (SEW model)"),gNe.forEach(t),Ycr=i(ze),J7=n(ze,"LI",{});var hNe=s(J7);uve=n(hNe,"STRONG",{});var RAt=s(uve);Kcr=r(RAt,"sew-d"),RAt.forEach(t),Zcr=r(hNe," \u2014 "),KW=n(hNe,"A",{href:!0});var PAt=s(KW);efr=r(PAt,"SEWDForSequenceClassification"),PAt.forEach(t),ofr=r(hNe," (SEW-D model)"),hNe.forEach(t),rfr=i(ze),Y7=n(ze,"LI",{});var pNe=s(Y7);bve=n(pNe,"STRONG",{});var BAt=s(bve);tfr=r(BAt,"unispeech"),BAt.forEach(t),afr=r(pNe," \u2014 "),ZW=n(pNe,"A",{href:!0});var IAt=s(ZW);nfr=r(IAt,"UniSpeechForSequenceClassification"),IAt.forEach(t),sfr=r(pNe," (UniSpeech model)"),pNe.forEach(t),lfr=i(ze),K7=n(ze,"LI",{});var _Ne=s(K7);vve=n(_Ne,"STRONG",{});var NAt=s(vve);ifr=r(NAt,"unispeech-sat"),NAt.forEach(t),dfr=r(_Ne," \u2014 "),eH=n(_Ne,"A",{href:!0});var qAt=s(eH);cfr=r(qAt,"UniSpeechSatForSequenceClassification"),qAt.forEach(t),ffr=r(_Ne," (UniSpeechSat model)"),_Ne.forEach(t),mfr=i(ze),Z7=n(ze,"LI",{});var uNe=s(Z7);Fve=n(uNe,"STRONG",{});var jAt=s(Fve);gfr=r(jAt,"wav2vec2"),jAt.forEach(t),hfr=r(uNe," \u2014 "),oH=n(uNe,"A",{href:!0});var DAt=s(oH);pfr=r(DAt,"Wav2Vec2ForSequenceClassification"),DAt.forEach(t),_fr=r(uNe," (Wav2Vec2 model)"),uNe.forEach(t),ufr=i(ze),e8=n(ze,"LI",{});var bNe=s(e8);Tve=n(bNe,"STRONG",{});var GAt=s(Tve);bfr=r(GAt,"wav2vec2-conformer"),GAt.forEach(t),vfr=r(bNe," \u2014 "),rH=n(bNe,"A",{href:!0});var OAt=s(rH);Ffr=r(OAt,"Wav2Vec2ConformerForSequenceClassification"),OAt.forEach(t),Tfr=r(bNe," (Wav2Vec2-Conformer model)"),bNe.forEach(t),Mfr=i(ze),o8=n(ze,"LI",{});var vNe=s(o8);Mve=n(vNe,"STRONG",{});var VAt=s(Mve);Efr=r(VAt,"wavlm"),VAt.forEach(t),Cfr=r(vNe," \u2014 "),tH=n(vNe,"A",{href:!0});var XAt=s(tH);wfr=r(XAt,"WavLMForSequenceClassification"),XAt.forEach(t),Afr=r(vNe," (WavLM model)"),vNe.forEach(t),ze.forEach(t),Lfr=i(Ta),r8=n(Ta,"P",{});var FNe=s(r8);yfr=r(FNe,"The model is set in evaluation mode by default using "),Eve=n(FNe,"CODE",{});var zAt=s(Eve);xfr=r(zAt,"model.eval()"),zAt.forEach(t),$fr=r(FNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n(FNe,"CODE",{});var QAt=s(Cve);kfr=r(QAt,"model.train()"),QAt.forEach(t),FNe.forEach(t),Sfr=i(Ta),T(t8.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),HXe=i(f),kd=n(f,"H2",{class:!0});var eWe=s(kd);a8=n(eWe,"A",{id:!0,class:!0,href:!0});var WAt=s(a8);wve=n(WAt,"SPAN",{});var HAt=s(wve);T(e9.$$.fragment,HAt),HAt.forEach(t),WAt.forEach(t),Rfr=i(eWe),Ave=n(eWe,"SPAN",{});var UAt=s(Ave);Pfr=r(UAt,"AutoModelForAudioFrameClassification"),UAt.forEach(t),eWe.forEach(t),UXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(o9.$$.fragment,_l),Bfr=i(_l),Sd=n(_l,"P",{});var dte=s(Sd);Ifr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aH=n(dte,"A",{href:!0});var JAt=s(aH);Nfr=r(JAt,"from_pretrained()"),JAt.forEach(t),qfr=r(dte," class method or the "),nH=n(dte,"A",{href:!0});var YAt=s(nH);jfr=r(YAt,"from_config()"),YAt.forEach(t),Dfr=r(dte,` class
method.`),dte.forEach(t),Gfr=i(_l),r9=n(_l,"P",{});var oWe=s(r9);Ofr=r(oWe,"This class cannot be instantiated directly using "),Lve=n(oWe,"CODE",{});var KAt=s(Lve);Vfr=r(KAt,"__init__()"),KAt.forEach(t),Xfr=r(oWe," (throws an error)."),oWe.forEach(t),zfr=i(_l),Et=n(_l,"DIV",{class:!0});var GA=s(Et);T(t9.$$.fragment,GA),Qfr=i(GA),yve=n(GA,"P",{});var ZAt=s(yve);Wfr=r(ZAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZAt.forEach(t),Hfr=i(GA),Rd=n(GA,"P",{});var cte=s(Rd);Ufr=r(cte,`Note:
Loading a model from its configuration file does `),xve=n(cte,"STRONG",{});var e6t=s(xve);Jfr=r(e6t,"not"),e6t.forEach(t),Yfr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(cte,"A",{href:!0});var o6t=s(sH);Kfr=r(o6t,"from_pretrained()"),o6t.forEach(t),Zfr=r(cte," to load the model weights."),cte.forEach(t),emr=i(GA),T(n8.$$.fragment,GA),GA.forEach(t),omr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(a9.$$.fragment,Ma),rmr=i(Ma),$ve=n(Ma,"P",{});var r6t=s($ve);tmr=r(r6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),r6t.forEach(t),amr=i(Ma),Ya=n(Ma,"P",{});var OA=s(Ya);nmr=r(OA,"The model class to instantiate is selected based on the "),kve=n(OA,"CODE",{});var t6t=s(kve);smr=r(t6t,"model_type"),t6t.forEach(t),lmr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Sve=n(OA,"CODE",{});var a6t=s(Sve);imr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),dmr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(OA,"CODE",{});var n6t=s(Rve);cmr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),fmr=r(OA,":"),OA.forEach(t),mmr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);s8=n(ul,"LI",{});var TNe=s(s8);Pve=n(TNe,"STRONG",{});var s6t=s(Pve);gmr=r(s6t,"data2vec-audio"),s6t.forEach(t),hmr=r(TNe," \u2014 "),lH=n(TNe,"A",{href:!0});var l6t=s(lH);pmr=r(l6t,"Data2VecAudioForAudioFrameClassification"),l6t.forEach(t),_mr=r(TNe," (Data2VecAudio model)"),TNe.forEach(t),umr=i(ul),l8=n(ul,"LI",{});var MNe=s(l8);Bve=n(MNe,"STRONG",{});var i6t=s(Bve);bmr=r(i6t,"unispeech-sat"),i6t.forEach(t),vmr=r(MNe," \u2014 "),iH=n(MNe,"A",{href:!0});var d6t=s(iH);Fmr=r(d6t,"UniSpeechSatForAudioFrameClassification"),d6t.forEach(t),Tmr=r(MNe," (UniSpeechSat model)"),MNe.forEach(t),Mmr=i(ul),i8=n(ul,"LI",{});var ENe=s(i8);Ive=n(ENe,"STRONG",{});var c6t=s(Ive);Emr=r(c6t,"wav2vec2"),c6t.forEach(t),Cmr=r(ENe," \u2014 "),dH=n(ENe,"A",{href:!0});var f6t=s(dH);wmr=r(f6t,"Wav2Vec2ForAudioFrameClassification"),f6t.forEach(t),Amr=r(ENe," (Wav2Vec2 model)"),ENe.forEach(t),Lmr=i(ul),d8=n(ul,"LI",{});var CNe=s(d8);Nve=n(CNe,"STRONG",{});var m6t=s(Nve);ymr=r(m6t,"wav2vec2-conformer"),m6t.forEach(t),xmr=r(CNe," \u2014 "),cH=n(CNe,"A",{href:!0});var g6t=s(cH);$mr=r(g6t,"Wav2Vec2ConformerForAudioFrameClassification"),g6t.forEach(t),kmr=r(CNe," (Wav2Vec2-Conformer model)"),CNe.forEach(t),Smr=i(ul),c8=n(ul,"LI",{});var wNe=s(c8);qve=n(wNe,"STRONG",{});var h6t=s(qve);Rmr=r(h6t,"wavlm"),h6t.forEach(t),Pmr=r(wNe," \u2014 "),fH=n(wNe,"A",{href:!0});var p6t=s(fH);Bmr=r(p6t,"WavLMForAudioFrameClassification"),p6t.forEach(t),Imr=r(wNe," (WavLM model)"),wNe.forEach(t),ul.forEach(t),Nmr=i(Ma),f8=n(Ma,"P",{});var ANe=s(f8);qmr=r(ANe,"The model is set in evaluation mode by default using "),jve=n(ANe,"CODE",{});var _6t=s(jve);jmr=r(_6t,"model.eval()"),_6t.forEach(t),Dmr=r(ANe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=n(ANe,"CODE",{});var u6t=s(Dve);Gmr=r(u6t,"model.train()"),u6t.forEach(t),ANe.forEach(t),Omr=i(Ma),T(m8.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),JXe=i(f),Pd=n(f,"H2",{class:!0});var rWe=s(Pd);g8=n(rWe,"A",{id:!0,class:!0,href:!0});var b6t=s(g8);Gve=n(b6t,"SPAN",{});var v6t=s(Gve);T(n9.$$.fragment,v6t),v6t.forEach(t),b6t.forEach(t),Vmr=i(rWe),Ove=n(rWe,"SPAN",{});var F6t=s(Ove);Xmr=r(F6t,"AutoModelForCTC"),F6t.forEach(t),rWe.forEach(t),YXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(s9.$$.fragment,bl),zmr=i(bl),Bd=n(bl,"P",{});var fte=s(Bd);Qmr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mH=n(fte,"A",{href:!0});var T6t=s(mH);Wmr=r(T6t,"from_pretrained()"),T6t.forEach(t),Hmr=r(fte," class method or the "),gH=n(fte,"A",{href:!0});var M6t=s(gH);Umr=r(M6t,"from_config()"),M6t.forEach(t),Jmr=r(fte,` class
method.`),fte.forEach(t),Ymr=i(bl),l9=n(bl,"P",{});var tWe=s(l9);Kmr=r(tWe,"This class cannot be instantiated directly using "),Vve=n(tWe,"CODE",{});var E6t=s(Vve);Zmr=r(E6t,"__init__()"),E6t.forEach(t),egr=r(tWe," (throws an error)."),tWe.forEach(t),ogr=i(bl),Ct=n(bl,"DIV",{class:!0});var VA=s(Ct);T(i9.$$.fragment,VA),rgr=i(VA),Xve=n(VA,"P",{});var C6t=s(Xve);tgr=r(C6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),C6t.forEach(t),agr=i(VA),Id=n(VA,"P",{});var mte=s(Id);ngr=r(mte,`Note:
Loading a model from its configuration file does `),zve=n(mte,"STRONG",{});var w6t=s(zve);sgr=r(w6t,"not"),w6t.forEach(t),lgr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(mte,"A",{href:!0});var A6t=s(hH);igr=r(A6t,"from_pretrained()"),A6t.forEach(t),dgr=r(mte," to load the model weights."),mte.forEach(t),cgr=i(VA),T(h8.$$.fragment,VA),VA.forEach(t),fgr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(d9.$$.fragment,Ea),mgr=i(Ea),Qve=n(Ea,"P",{});var L6t=s(Qve);ggr=r(L6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),L6t.forEach(t),hgr=i(Ea),Ka=n(Ea,"P",{});var XA=s(Ka);pgr=r(XA,"The model class to instantiate is selected based on the "),Wve=n(XA,"CODE",{});var y6t=s(Wve);_gr=r(y6t,"model_type"),y6t.forEach(t),ugr=r(XA,` property of the config object (either
passed as an argument or loaded from `),Hve=n(XA,"CODE",{});var x6t=s(Hve);bgr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),vgr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(XA,"CODE",{});var $6t=s(Uve);Fgr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Tgr=r(XA,":"),XA.forEach(t),Mgr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);p8=n(Be,"LI",{});var LNe=s(p8);Jve=n(LNe,"STRONG",{});var k6t=s(Jve);Egr=r(k6t,"data2vec-audio"),k6t.forEach(t),Cgr=r(LNe," \u2014 "),pH=n(LNe,"A",{href:!0});var S6t=s(pH);wgr=r(S6t,"Data2VecAudioForCTC"),S6t.forEach(t),Agr=r(LNe," (Data2VecAudio model)"),LNe.forEach(t),Lgr=i(Be),_8=n(Be,"LI",{});var yNe=s(_8);Yve=n(yNe,"STRONG",{});var R6t=s(Yve);ygr=r(R6t,"hubert"),R6t.forEach(t),xgr=r(yNe," \u2014 "),_H=n(yNe,"A",{href:!0});var P6t=s(_H);$gr=r(P6t,"HubertForCTC"),P6t.forEach(t),kgr=r(yNe," (Hubert model)"),yNe.forEach(t),Sgr=i(Be),u8=n(Be,"LI",{});var xNe=s(u8);Kve=n(xNe,"STRONG",{});var B6t=s(Kve);Rgr=r(B6t,"mctct"),B6t.forEach(t),Pgr=r(xNe," \u2014 "),uH=n(xNe,"A",{href:!0});var I6t=s(uH);Bgr=r(I6t,"MCTCTForCTC"),I6t.forEach(t),Igr=r(xNe," (M-CTC-T model)"),xNe.forEach(t),Ngr=i(Be),b8=n(Be,"LI",{});var $Ne=s(b8);Zve=n($Ne,"STRONG",{});var N6t=s(Zve);qgr=r(N6t,"sew"),N6t.forEach(t),jgr=r($Ne," \u2014 "),bH=n($Ne,"A",{href:!0});var q6t=s(bH);Dgr=r(q6t,"SEWForCTC"),q6t.forEach(t),Ggr=r($Ne," (SEW model)"),$Ne.forEach(t),Ogr=i(Be),v8=n(Be,"LI",{});var kNe=s(v8);eFe=n(kNe,"STRONG",{});var j6t=s(eFe);Vgr=r(j6t,"sew-d"),j6t.forEach(t),Xgr=r(kNe," \u2014 "),vH=n(kNe,"A",{href:!0});var D6t=s(vH);zgr=r(D6t,"SEWDForCTC"),D6t.forEach(t),Qgr=r(kNe," (SEW-D model)"),kNe.forEach(t),Wgr=i(Be),F8=n(Be,"LI",{});var SNe=s(F8);oFe=n(SNe,"STRONG",{});var G6t=s(oFe);Hgr=r(G6t,"unispeech"),G6t.forEach(t),Ugr=r(SNe," \u2014 "),FH=n(SNe,"A",{href:!0});var O6t=s(FH);Jgr=r(O6t,"UniSpeechForCTC"),O6t.forEach(t),Ygr=r(SNe," (UniSpeech model)"),SNe.forEach(t),Kgr=i(Be),T8=n(Be,"LI",{});var RNe=s(T8);rFe=n(RNe,"STRONG",{});var V6t=s(rFe);Zgr=r(V6t,"unispeech-sat"),V6t.forEach(t),ehr=r(RNe," \u2014 "),TH=n(RNe,"A",{href:!0});var X6t=s(TH);ohr=r(X6t,"UniSpeechSatForCTC"),X6t.forEach(t),rhr=r(RNe," (UniSpeechSat model)"),RNe.forEach(t),thr=i(Be),M8=n(Be,"LI",{});var PNe=s(M8);tFe=n(PNe,"STRONG",{});var z6t=s(tFe);ahr=r(z6t,"wav2vec2"),z6t.forEach(t),nhr=r(PNe," \u2014 "),MH=n(PNe,"A",{href:!0});var Q6t=s(MH);shr=r(Q6t,"Wav2Vec2ForCTC"),Q6t.forEach(t),lhr=r(PNe," (Wav2Vec2 model)"),PNe.forEach(t),ihr=i(Be),E8=n(Be,"LI",{});var BNe=s(E8);aFe=n(BNe,"STRONG",{});var W6t=s(aFe);dhr=r(W6t,"wav2vec2-conformer"),W6t.forEach(t),chr=r(BNe," \u2014 "),EH=n(BNe,"A",{href:!0});var H6t=s(EH);fhr=r(H6t,"Wav2Vec2ConformerForCTC"),H6t.forEach(t),mhr=r(BNe," (Wav2Vec2-Conformer model)"),BNe.forEach(t),ghr=i(Be),C8=n(Be,"LI",{});var INe=s(C8);nFe=n(INe,"STRONG",{});var U6t=s(nFe);hhr=r(U6t,"wavlm"),U6t.forEach(t),phr=r(INe," \u2014 "),CH=n(INe,"A",{href:!0});var J6t=s(CH);_hr=r(J6t,"WavLMForCTC"),J6t.forEach(t),uhr=r(INe," (WavLM model)"),INe.forEach(t),Be.forEach(t),bhr=i(Ea),w8=n(Ea,"P",{});var NNe=s(w8);vhr=r(NNe,"The model is set in evaluation mode by default using "),sFe=n(NNe,"CODE",{});var Y6t=s(sFe);Fhr=r(Y6t,"model.eval()"),Y6t.forEach(t),Thr=r(NNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lFe=n(NNe,"CODE",{});var K6t=s(lFe);Mhr=r(K6t,"model.train()"),K6t.forEach(t),NNe.forEach(t),Ehr=i(Ea),T(A8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),KXe=i(f),Nd=n(f,"H2",{class:!0});var aWe=s(Nd);L8=n(aWe,"A",{id:!0,class:!0,href:!0});var Z6t=s(L8);iFe=n(Z6t,"SPAN",{});var eLt=s(iFe);T(c9.$$.fragment,eLt),eLt.forEach(t),Z6t.forEach(t),Chr=i(aWe),dFe=n(aWe,"SPAN",{});var oLt=s(dFe);whr=r(oLt,"AutoModelForSpeechSeq2Seq"),oLt.forEach(t),aWe.forEach(t),ZXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(f9.$$.fragment,vl),Ahr=i(vl),qd=n(vl,"P",{});var gte=s(qd);Lhr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wH=n(gte,"A",{href:!0});var rLt=s(wH);yhr=r(rLt,"from_pretrained()"),rLt.forEach(t),xhr=r(gte," class method or the "),AH=n(gte,"A",{href:!0});var tLt=s(AH);$hr=r(tLt,"from_config()"),tLt.forEach(t),khr=r(gte,` class
method.`),gte.forEach(t),Shr=i(vl),m9=n(vl,"P",{});var nWe=s(m9);Rhr=r(nWe,"This class cannot be instantiated directly using "),cFe=n(nWe,"CODE",{});var aLt=s(cFe);Phr=r(aLt,"__init__()"),aLt.forEach(t),Bhr=r(nWe," (throws an error)."),nWe.forEach(t),Ihr=i(vl),wt=n(vl,"DIV",{class:!0});var zA=s(wt);T(g9.$$.fragment,zA),Nhr=i(zA),fFe=n(zA,"P",{});var nLt=s(fFe);qhr=r(nLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nLt.forEach(t),jhr=i(zA),jd=n(zA,"P",{});var hte=s(jd);Dhr=r(hte,`Note:
Loading a model from its configuration file does `),mFe=n(hte,"STRONG",{});var sLt=s(mFe);Ghr=r(sLt,"not"),sLt.forEach(t),Ohr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(hte,"A",{href:!0});var lLt=s(LH);Vhr=r(lLt,"from_pretrained()"),lLt.forEach(t),Xhr=r(hte," to load the model weights."),hte.forEach(t),zhr=i(zA),T(y8.$$.fragment,zA),zA.forEach(t),Qhr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(h9.$$.fragment,Ca),Whr=i(Ca),gFe=n(Ca,"P",{});var iLt=s(gFe);Hhr=r(iLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iLt.forEach(t),Uhr=i(Ca),Za=n(Ca,"P",{});var QA=s(Za);Jhr=r(QA,"The model class to instantiate is selected based on the "),hFe=n(QA,"CODE",{});var dLt=s(hFe);Yhr=r(dLt,"model_type"),dLt.forEach(t),Khr=r(QA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(QA,"CODE",{});var cLt=s(pFe);Zhr=r(cLt,"pretrained_model_name_or_path"),cLt.forEach(t),epr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(QA,"CODE",{});var fLt=s(_Fe);opr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),rpr=r(QA,":"),QA.forEach(t),tpr=i(Ca),p9=n(Ca,"UL",{});var sWe=s(p9);x8=n(sWe,"LI",{});var qNe=s(x8);uFe=n(qNe,"STRONG",{});var mLt=s(uFe);apr=r(mLt,"speech-encoder-decoder"),mLt.forEach(t),npr=r(qNe," \u2014 "),yH=n(qNe,"A",{href:!0});var gLt=s(yH);spr=r(gLt,"SpeechEncoderDecoderModel"),gLt.forEach(t),lpr=r(qNe," (Speech Encoder decoder model)"),qNe.forEach(t),ipr=i(sWe),$8=n(sWe,"LI",{});var jNe=s($8);bFe=n(jNe,"STRONG",{});var hLt=s(bFe);dpr=r(hLt,"speech_to_text"),hLt.forEach(t),cpr=r(jNe," \u2014 "),xH=n(jNe,"A",{href:!0});var pLt=s(xH);fpr=r(pLt,"Speech2TextForConditionalGeneration"),pLt.forEach(t),mpr=r(jNe," (Speech2Text model)"),jNe.forEach(t),sWe.forEach(t),gpr=i(Ca),k8=n(Ca,"P",{});var DNe=s(k8);hpr=r(DNe,"The model is set in evaluation mode by default using "),vFe=n(DNe,"CODE",{});var _Lt=s(vFe);ppr=r(_Lt,"model.eval()"),_Lt.forEach(t),_pr=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=n(DNe,"CODE",{});var uLt=s(FFe);upr=r(uLt,"model.train()"),uLt.forEach(t),DNe.forEach(t),bpr=i(Ca),T(S8.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),eze=i(f),Dd=n(f,"H2",{class:!0});var lWe=s(Dd);R8=n(lWe,"A",{id:!0,class:!0,href:!0});var bLt=s(R8);TFe=n(bLt,"SPAN",{});var vLt=s(TFe);T(_9.$$.fragment,vLt),vLt.forEach(t),bLt.forEach(t),vpr=i(lWe),MFe=n(lWe,"SPAN",{});var FLt=s(MFe);Fpr=r(FLt,"AutoModelForAudioXVector"),FLt.forEach(t),lWe.forEach(t),oze=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(u9.$$.fragment,Fl),Tpr=i(Fl),Gd=n(Fl,"P",{});var pte=s(Gd);Mpr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$H=n(pte,"A",{href:!0});var TLt=s($H);Epr=r(TLt,"from_pretrained()"),TLt.forEach(t),Cpr=r(pte," class method or the "),kH=n(pte,"A",{href:!0});var MLt=s(kH);wpr=r(MLt,"from_config()"),MLt.forEach(t),Apr=r(pte,` class
method.`),pte.forEach(t),Lpr=i(Fl),b9=n(Fl,"P",{});var iWe=s(b9);ypr=r(iWe,"This class cannot be instantiated directly using "),EFe=n(iWe,"CODE",{});var ELt=s(EFe);xpr=r(ELt,"__init__()"),ELt.forEach(t),$pr=r(iWe," (throws an error)."),iWe.forEach(t),kpr=i(Fl),At=n(Fl,"DIV",{class:!0});var WA=s(At);T(v9.$$.fragment,WA),Spr=i(WA),CFe=n(WA,"P",{});var CLt=s(CFe);Rpr=r(CLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CLt.forEach(t),Ppr=i(WA),Od=n(WA,"P",{});var _te=s(Od);Bpr=r(_te,`Note:
Loading a model from its configuration file does `),wFe=n(_te,"STRONG",{});var wLt=s(wFe);Ipr=r(wLt,"not"),wLt.forEach(t),Npr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(_te,"A",{href:!0});var ALt=s(SH);qpr=r(ALt,"from_pretrained()"),ALt.forEach(t),jpr=r(_te," to load the model weights."),_te.forEach(t),Dpr=i(WA),T(P8.$$.fragment,WA),WA.forEach(t),Gpr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(F9.$$.fragment,wa),Opr=i(wa),AFe=n(wa,"P",{});var LLt=s(AFe);Vpr=r(LLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),LLt.forEach(t),Xpr=i(wa),en=n(wa,"P",{});var HA=s(en);zpr=r(HA,"The model class to instantiate is selected based on the "),LFe=n(HA,"CODE",{});var yLt=s(LFe);Qpr=r(yLt,"model_type"),yLt.forEach(t),Wpr=r(HA,` property of the config object (either
passed as an argument or loaded from `),yFe=n(HA,"CODE",{});var xLt=s(yFe);Hpr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),Upr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(HA,"CODE",{});var $Lt=s(xFe);Jpr=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),Ypr=r(HA,":"),HA.forEach(t),Kpr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);B8=n(Tl,"LI",{});var GNe=s(B8);$Fe=n(GNe,"STRONG",{});var kLt=s($Fe);Zpr=r(kLt,"data2vec-audio"),kLt.forEach(t),e_r=r(GNe," \u2014 "),RH=n(GNe,"A",{href:!0});var SLt=s(RH);o_r=r(SLt,"Data2VecAudioForXVector"),SLt.forEach(t),r_r=r(GNe," (Data2VecAudio model)"),GNe.forEach(t),t_r=i(Tl),I8=n(Tl,"LI",{});var ONe=s(I8);kFe=n(ONe,"STRONG",{});var RLt=s(kFe);a_r=r(RLt,"unispeech-sat"),RLt.forEach(t),n_r=r(ONe," \u2014 "),PH=n(ONe,"A",{href:!0});var PLt=s(PH);s_r=r(PLt,"UniSpeechSatForXVector"),PLt.forEach(t),l_r=r(ONe," (UniSpeechSat model)"),ONe.forEach(t),i_r=i(Tl),N8=n(Tl,"LI",{});var VNe=s(N8);SFe=n(VNe,"STRONG",{});var BLt=s(SFe);d_r=r(BLt,"wav2vec2"),BLt.forEach(t),c_r=r(VNe," \u2014 "),BH=n(VNe,"A",{href:!0});var ILt=s(BH);f_r=r(ILt,"Wav2Vec2ForXVector"),ILt.forEach(t),m_r=r(VNe," (Wav2Vec2 model)"),VNe.forEach(t),g_r=i(Tl),q8=n(Tl,"LI",{});var XNe=s(q8);RFe=n(XNe,"STRONG",{});var NLt=s(RFe);h_r=r(NLt,"wav2vec2-conformer"),NLt.forEach(t),p_r=r(XNe," \u2014 "),IH=n(XNe,"A",{href:!0});var qLt=s(IH);__r=r(qLt,"Wav2Vec2ConformerForXVector"),qLt.forEach(t),u_r=r(XNe," (Wav2Vec2-Conformer model)"),XNe.forEach(t),b_r=i(Tl),j8=n(Tl,"LI",{});var zNe=s(j8);PFe=n(zNe,"STRONG",{});var jLt=s(PFe);v_r=r(jLt,"wavlm"),jLt.forEach(t),F_r=r(zNe," \u2014 "),NH=n(zNe,"A",{href:!0});var DLt=s(NH);T_r=r(DLt,"WavLMForXVector"),DLt.forEach(t),M_r=r(zNe," (WavLM model)"),zNe.forEach(t),Tl.forEach(t),E_r=i(wa),D8=n(wa,"P",{});var QNe=s(D8);C_r=r(QNe,"The model is set in evaluation mode by default using "),BFe=n(QNe,"CODE",{});var GLt=s(BFe);w_r=r(GLt,"model.eval()"),GLt.forEach(t),A_r=r(QNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(QNe,"CODE",{});var OLt=s(IFe);L_r=r(OLt,"model.train()"),OLt.forEach(t),QNe.forEach(t),y_r=i(wa),T(G8.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),rze=i(f),Vd=n(f,"H2",{class:!0});var dWe=s(Vd);O8=n(dWe,"A",{id:!0,class:!0,href:!0});var VLt=s(O8);NFe=n(VLt,"SPAN",{});var XLt=s(NFe);T(T9.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),x_r=i(dWe),qFe=n(dWe,"SPAN",{});var zLt=s(qFe);$_r=r(zLt,"AutoModelForMaskedImageModeling"),zLt.forEach(t),dWe.forEach(t),tze=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(M9.$$.fragment,Ml),k_r=i(Ml),Xd=n(Ml,"P",{});var ute=s(Xd);S_r=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qH=n(ute,"A",{href:!0});var QLt=s(qH);R_r=r(QLt,"from_pretrained()"),QLt.forEach(t),P_r=r(ute," class method or the "),jH=n(ute,"A",{href:!0});var WLt=s(jH);B_r=r(WLt,"from_config()"),WLt.forEach(t),I_r=r(ute,` class
method.`),ute.forEach(t),N_r=i(Ml),E9=n(Ml,"P",{});var cWe=s(E9);q_r=r(cWe,"This class cannot be instantiated directly using "),jFe=n(cWe,"CODE",{});var HLt=s(jFe);j_r=r(HLt,"__init__()"),HLt.forEach(t),D_r=r(cWe," (throws an error)."),cWe.forEach(t),G_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var UA=s(Lt);T(C9.$$.fragment,UA),O_r=i(UA),DFe=n(UA,"P",{});var ULt=s(DFe);V_r=r(ULt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ULt.forEach(t),X_r=i(UA),zd=n(UA,"P",{});var bte=s(zd);z_r=r(bte,`Note:
Loading a model from its configuration file does `),GFe=n(bte,"STRONG",{});var JLt=s(GFe);Q_r=r(JLt,"not"),JLt.forEach(t),W_r=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(bte,"A",{href:!0});var YLt=s(DH);H_r=r(YLt,"from_pretrained()"),YLt.forEach(t),U_r=r(bte," to load the model weights."),bte.forEach(t),J_r=i(UA),T(V8.$$.fragment,UA),UA.forEach(t),Y_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(w9.$$.fragment,Aa),K_r=i(Aa),OFe=n(Aa,"P",{});var KLt=s(OFe);Z_r=r(KLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),KLt.forEach(t),eur=i(Aa),on=n(Aa,"P",{});var JA=s(on);our=r(JA,"The model class to instantiate is selected based on the "),VFe=n(JA,"CODE",{});var ZLt=s(VFe);rur=r(ZLt,"model_type"),ZLt.forEach(t),tur=r(JA,` property of the config object (either
passed as an argument or loaded from `),XFe=n(JA,"CODE",{});var eyt=s(XFe);aur=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),nur=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(JA,"CODE",{});var oyt=s(zFe);sur=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),lur=r(JA,":"),JA.forEach(t),iur=i(Aa),Qd=n(Aa,"UL",{});var vte=s(Qd);X8=n(vte,"LI",{});var WNe=s(X8);QFe=n(WNe,"STRONG",{});var ryt=s(QFe);dur=r(ryt,"deit"),ryt.forEach(t),cur=r(WNe," \u2014 "),GH=n(WNe,"A",{href:!0});var tyt=s(GH);fur=r(tyt,"DeiTForMaskedImageModeling"),tyt.forEach(t),mur=r(WNe," (DeiT model)"),WNe.forEach(t),gur=i(vte),z8=n(vte,"LI",{});var HNe=s(z8);WFe=n(HNe,"STRONG",{});var ayt=s(WFe);hur=r(ayt,"swin"),ayt.forEach(t),pur=r(HNe," \u2014 "),OH=n(HNe,"A",{href:!0});var nyt=s(OH);_ur=r(nyt,"SwinForMaskedImageModeling"),nyt.forEach(t),uur=r(HNe," (Swin Transformer model)"),HNe.forEach(t),bur=i(vte),Q8=n(vte,"LI",{});var UNe=s(Q8);HFe=n(UNe,"STRONG",{});var syt=s(HFe);vur=r(syt,"vit"),syt.forEach(t),Fur=r(UNe," \u2014 "),VH=n(UNe,"A",{href:!0});var lyt=s(VH);Tur=r(lyt,"ViTForMaskedImageModeling"),lyt.forEach(t),Mur=r(UNe," (ViT model)"),UNe.forEach(t),vte.forEach(t),Eur=i(Aa),W8=n(Aa,"P",{});var JNe=s(W8);Cur=r(JNe,"The model is set in evaluation mode by default using "),UFe=n(JNe,"CODE",{});var iyt=s(UFe);wur=r(iyt,"model.eval()"),iyt.forEach(t),Aur=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),JFe=n(JNe,"CODE",{});var dyt=s(JFe);Lur=r(dyt,"model.train()"),dyt.forEach(t),JNe.forEach(t),yur=i(Aa),T(H8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),aze=i(f),Wd=n(f,"H2",{class:!0});var fWe=s(Wd);U8=n(fWe,"A",{id:!0,class:!0,href:!0});var cyt=s(U8);YFe=n(cyt,"SPAN",{});var fyt=s(YFe);T(A9.$$.fragment,fyt),fyt.forEach(t),cyt.forEach(t),xur=i(fWe),KFe=n(fWe,"SPAN",{});var myt=s(KFe);$ur=r(myt,"AutoModelForObjectDetection"),myt.forEach(t),fWe.forEach(t),nze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(L9.$$.fragment,El),kur=i(El),Hd=n(El,"P",{});var Fte=s(Hd);Sur=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XH=n(Fte,"A",{href:!0});var gyt=s(XH);Rur=r(gyt,"from_pretrained()"),gyt.forEach(t),Pur=r(Fte," class method or the "),zH=n(Fte,"A",{href:!0});var hyt=s(zH);Bur=r(hyt,"from_config()"),hyt.forEach(t),Iur=r(Fte,` class
method.`),Fte.forEach(t),Nur=i(El),y9=n(El,"P",{});var mWe=s(y9);qur=r(mWe,"This class cannot be instantiated directly using "),ZFe=n(mWe,"CODE",{});var pyt=s(ZFe);jur=r(pyt,"__init__()"),pyt.forEach(t),Dur=r(mWe," (throws an error)."),mWe.forEach(t),Gur=i(El),yt=n(El,"DIV",{class:!0});var YA=s(yt);T(x9.$$.fragment,YA),Our=i(YA),eTe=n(YA,"P",{});var _yt=s(eTe);Vur=r(_yt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_yt.forEach(t),Xur=i(YA),Ud=n(YA,"P",{});var Tte=s(Ud);zur=r(Tte,`Note:
Loading a model from its configuration file does `),oTe=n(Tte,"STRONG",{});var uyt=s(oTe);Qur=r(uyt,"not"),uyt.forEach(t),Wur=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Tte,"A",{href:!0});var byt=s(QH);Hur=r(byt,"from_pretrained()"),byt.forEach(t),Uur=r(Tte," to load the model weights."),Tte.forEach(t),Jur=i(YA),T(J8.$$.fragment,YA),YA.forEach(t),Yur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T($9.$$.fragment,La),Kur=i(La),rTe=n(La,"P",{});var vyt=s(rTe);Zur=r(vyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vyt.forEach(t),e1r=i(La),rn=n(La,"P",{});var KA=s(rn);o1r=r(KA,"The model class to instantiate is selected based on the "),tTe=n(KA,"CODE",{});var Fyt=s(tTe);r1r=r(Fyt,"model_type"),Fyt.forEach(t),t1r=r(KA,` property of the config object (either
passed as an argument or loaded from `),aTe=n(KA,"CODE",{});var Tyt=s(aTe);a1r=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),n1r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(KA,"CODE",{});var Myt=s(nTe);s1r=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),l1r=r(KA,":"),KA.forEach(t),i1r=i(La),Jd=n(La,"UL",{});var Mte=s(Jd);Y8=n(Mte,"LI",{});var YNe=s(Y8);sTe=n(YNe,"STRONG",{});var Eyt=s(sTe);d1r=r(Eyt,"deformable_detr"),Eyt.forEach(t),c1r=r(YNe," \u2014 "),WH=n(YNe,"A",{href:!0});var Cyt=s(WH);f1r=r(Cyt,"DeformableDetrForObjectDetection"),Cyt.forEach(t),m1r=r(YNe," (Deformable DETR model)"),YNe.forEach(t),g1r=i(Mte),K8=n(Mte,"LI",{});var KNe=s(K8);lTe=n(KNe,"STRONG",{});var wyt=s(lTe);h1r=r(wyt,"detr"),wyt.forEach(t),p1r=r(KNe," \u2014 "),HH=n(KNe,"A",{href:!0});var Ayt=s(HH);_1r=r(Ayt,"DetrForObjectDetection"),Ayt.forEach(t),u1r=r(KNe," (DETR model)"),KNe.forEach(t),b1r=i(Mte),Z8=n(Mte,"LI",{});var ZNe=s(Z8);iTe=n(ZNe,"STRONG",{});var Lyt=s(iTe);v1r=r(Lyt,"yolos"),Lyt.forEach(t),F1r=r(ZNe," \u2014 "),UH=n(ZNe,"A",{href:!0});var yyt=s(UH);T1r=r(yyt,"YolosForObjectDetection"),yyt.forEach(t),M1r=r(ZNe," (YOLOS model)"),ZNe.forEach(t),Mte.forEach(t),E1r=i(La),eM=n(La,"P",{});var eqe=s(eM);C1r=r(eqe,"The model is set in evaluation mode by default using "),dTe=n(eqe,"CODE",{});var xyt=s(dTe);w1r=r(xyt,"model.eval()"),xyt.forEach(t),A1r=r(eqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cTe=n(eqe,"CODE",{});var $yt=s(cTe);L1r=r($yt,"model.train()"),$yt.forEach(t),eqe.forEach(t),y1r=i(La),T(oM.$$.fragment,La),La.forEach(t),El.forEach(t),sze=i(f),Yd=n(f,"H2",{class:!0});var gWe=s(Yd);rM=n(gWe,"A",{id:!0,class:!0,href:!0});var kyt=s(rM);fTe=n(kyt,"SPAN",{});var Syt=s(fTe);T(k9.$$.fragment,Syt),Syt.forEach(t),kyt.forEach(t),x1r=i(gWe),mTe=n(gWe,"SPAN",{});var Ryt=s(mTe);$1r=r(Ryt,"AutoModelForImageSegmentation"),Ryt.forEach(t),gWe.forEach(t),lze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(S9.$$.fragment,Cl),k1r=i(Cl),Kd=n(Cl,"P",{});var Ete=s(Kd);S1r=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),JH=n(Ete,"A",{href:!0});var Pyt=s(JH);R1r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),P1r=r(Ete," class method or the "),YH=n(Ete,"A",{href:!0});var Byt=s(YH);B1r=r(Byt,"from_config()"),Byt.forEach(t),I1r=r(Ete,` class
method.`),Ete.forEach(t),N1r=i(Cl),R9=n(Cl,"P",{});var hWe=s(R9);q1r=r(hWe,"This class cannot be instantiated directly using "),gTe=n(hWe,"CODE",{});var Iyt=s(gTe);j1r=r(Iyt,"__init__()"),Iyt.forEach(t),D1r=r(hWe," (throws an error)."),hWe.forEach(t),G1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var ZA=s(xt);T(P9.$$.fragment,ZA),O1r=i(ZA),hTe=n(ZA,"P",{});var Nyt=s(hTe);V1r=r(Nyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Nyt.forEach(t),X1r=i(ZA),Zd=n(ZA,"P",{});var Cte=s(Zd);z1r=r(Cte,`Note:
Loading a model from its configuration file does `),pTe=n(Cte,"STRONG",{});var qyt=s(pTe);Q1r=r(qyt,"not"),qyt.forEach(t),W1r=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(Cte,"A",{href:!0});var jyt=s(KH);H1r=r(jyt,"from_pretrained()"),jyt.forEach(t),U1r=r(Cte," to load the model weights."),Cte.forEach(t),J1r=i(ZA),T(tM.$$.fragment,ZA),ZA.forEach(t),Y1r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(B9.$$.fragment,ya),K1r=i(ya),_Te=n(ya,"P",{});var Dyt=s(_Te);Z1r=r(Dyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Dyt.forEach(t),e2r=i(ya),tn=n(ya,"P",{});var e6=s(tn);o2r=r(e6,"The model class to instantiate is selected based on the "),uTe=n(e6,"CODE",{});var Gyt=s(uTe);r2r=r(Gyt,"model_type"),Gyt.forEach(t),t2r=r(e6,` property of the config object (either
passed as an argument or loaded from `),bTe=n(e6,"CODE",{});var Oyt=s(bTe);a2r=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),n2r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(e6,"CODE",{});var Vyt=s(vTe);s2r=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),l2r=r(e6,":"),e6.forEach(t),i2r=i(ya),FTe=n(ya,"UL",{});var Xyt=s(FTe);aM=n(Xyt,"LI",{});var oqe=s(aM);TTe=n(oqe,"STRONG",{});var zyt=s(TTe);d2r=r(zyt,"detr"),zyt.forEach(t),c2r=r(oqe," \u2014 "),ZH=n(oqe,"A",{href:!0});var Qyt=s(ZH);f2r=r(Qyt,"DetrForSegmentation"),Qyt.forEach(t),m2r=r(oqe," (DETR model)"),oqe.forEach(t),Xyt.forEach(t),g2r=i(ya),nM=n(ya,"P",{});var rqe=s(nM);h2r=r(rqe,"The model is set in evaluation mode by default using "),MTe=n(rqe,"CODE",{});var Wyt=s(MTe);p2r=r(Wyt,"model.eval()"),Wyt.forEach(t),_2r=r(rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ETe=n(rqe,"CODE",{});var Hyt=s(ETe);u2r=r(Hyt,"model.train()"),Hyt.forEach(t),rqe.forEach(t),b2r=i(ya),T(sM.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),ize=i(f),ec=n(f,"H2",{class:!0});var pWe=s(ec);lM=n(pWe,"A",{id:!0,class:!0,href:!0});var Uyt=s(lM);CTe=n(Uyt,"SPAN",{});var Jyt=s(CTe);T(I9.$$.fragment,Jyt),Jyt.forEach(t),Uyt.forEach(t),v2r=i(pWe),wTe=n(pWe,"SPAN",{});var Yyt=s(wTe);F2r=r(Yyt,"AutoModelForSemanticSegmentation"),Yyt.forEach(t),pWe.forEach(t),dze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(N9.$$.fragment,wl),T2r=i(wl),oc=n(wl,"P",{});var wte=s(oc);M2r=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eU=n(wte,"A",{href:!0});var Kyt=s(eU);E2r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),C2r=r(wte," class method or the "),oU=n(wte,"A",{href:!0});var Zyt=s(oU);w2r=r(Zyt,"from_config()"),Zyt.forEach(t),A2r=r(wte,` class
method.`),wte.forEach(t),L2r=i(wl),q9=n(wl,"P",{});var _We=s(q9);y2r=r(_We,"This class cannot be instantiated directly using "),ATe=n(_We,"CODE",{});var e9t=s(ATe);x2r=r(e9t,"__init__()"),e9t.forEach(t),$2r=r(_We," (throws an error)."),_We.forEach(t),k2r=i(wl),$t=n(wl,"DIV",{class:!0});var o6=s($t);T(j9.$$.fragment,o6),S2r=i(o6),LTe=n(o6,"P",{});var o9t=s(LTe);R2r=r(o9t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),o9t.forEach(t),P2r=i(o6),rc=n(o6,"P",{});var Ate=s(rc);B2r=r(Ate,`Note:
Loading a model from its configuration file does `),yTe=n(Ate,"STRONG",{});var r9t=s(yTe);I2r=r(r9t,"not"),r9t.forEach(t),N2r=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(Ate,"A",{href:!0});var t9t=s(rU);q2r=r(t9t,"from_pretrained()"),t9t.forEach(t),j2r=r(Ate," to load the model weights."),Ate.forEach(t),D2r=i(o6),T(iM.$$.fragment,o6),o6.forEach(t),G2r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(D9.$$.fragment,xa),O2r=i(xa),xTe=n(xa,"P",{});var a9t=s(xTe);V2r=r(a9t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),a9t.forEach(t),X2r=i(xa),an=n(xa,"P",{});var r6=s(an);z2r=r(r6,"The model class to instantiate is selected based on the "),$Te=n(r6,"CODE",{});var n9t=s($Te);Q2r=r(n9t,"model_type"),n9t.forEach(t),W2r=r(r6,` property of the config object (either
passed as an argument or loaded from `),kTe=n(r6,"CODE",{});var s9t=s(kTe);H2r=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),U2r=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(r6,"CODE",{});var l9t=s(STe);J2r=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),Y2r=r(r6,":"),r6.forEach(t),K2r=i(xa),tt=n(xa,"UL",{});var Al=s(tt);dM=n(Al,"LI",{});var tqe=s(dM);RTe=n(tqe,"STRONG",{});var i9t=s(RTe);Z2r=r(i9t,"beit"),i9t.forEach(t),ebr=r(tqe," \u2014 "),tU=n(tqe,"A",{href:!0});var d9t=s(tU);obr=r(d9t,"BeitForSemanticSegmentation"),d9t.forEach(t),rbr=r(tqe," (BEiT model)"),tqe.forEach(t),tbr=i(Al),cM=n(Al,"LI",{});var aqe=s(cM);PTe=n(aqe,"STRONG",{});var c9t=s(PTe);abr=r(c9t,"data2vec-vision"),c9t.forEach(t),nbr=r(aqe," \u2014 "),aU=n(aqe,"A",{href:!0});var f9t=s(aU);sbr=r(f9t,"Data2VecVisionForSemanticSegmentation"),f9t.forEach(t),lbr=r(aqe," (Data2VecVision model)"),aqe.forEach(t),ibr=i(Al),fM=n(Al,"LI",{});var nqe=s(fM);BTe=n(nqe,"STRONG",{});var m9t=s(BTe);dbr=r(m9t,"dpt"),m9t.forEach(t),cbr=r(nqe," \u2014 "),nU=n(nqe,"A",{href:!0});var g9t=s(nU);fbr=r(g9t,"DPTForSemanticSegmentation"),g9t.forEach(t),mbr=r(nqe," (DPT model)"),nqe.forEach(t),gbr=i(Al),mM=n(Al,"LI",{});var sqe=s(mM);ITe=n(sqe,"STRONG",{});var h9t=s(ITe);hbr=r(h9t,"mobilevit"),h9t.forEach(t),pbr=r(sqe," \u2014 "),sU=n(sqe,"A",{href:!0});var p9t=s(sU);_br=r(p9t,"MobileViTForSemanticSegmentation"),p9t.forEach(t),ubr=r(sqe," (MobileViT model)"),sqe.forEach(t),bbr=i(Al),gM=n(Al,"LI",{});var lqe=s(gM);NTe=n(lqe,"STRONG",{});var _9t=s(NTe);vbr=r(_9t,"segformer"),_9t.forEach(t),Fbr=r(lqe," \u2014 "),lU=n(lqe,"A",{href:!0});var u9t=s(lU);Tbr=r(u9t,"SegformerForSemanticSegmentation"),u9t.forEach(t),Mbr=r(lqe," (SegFormer model)"),lqe.forEach(t),Al.forEach(t),Ebr=i(xa),hM=n(xa,"P",{});var iqe=s(hM);Cbr=r(iqe,"The model is set in evaluation mode by default using "),qTe=n(iqe,"CODE",{});var b9t=s(qTe);wbr=r(b9t,"model.eval()"),b9t.forEach(t),Abr=r(iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jTe=n(iqe,"CODE",{});var v9t=s(jTe);Lbr=r(v9t,"model.train()"),v9t.forEach(t),iqe.forEach(t),ybr=i(xa),T(pM.$$.fragment,xa),xa.forEach(t),wl.forEach(t),cze=i(f),tc=n(f,"H2",{class:!0});var uWe=s(tc);_M=n(uWe,"A",{id:!0,class:!0,href:!0});var F9t=s(_M);DTe=n(F9t,"SPAN",{});var T9t=s(DTe);T(G9.$$.fragment,T9t),T9t.forEach(t),F9t.forEach(t),xbr=i(uWe),GTe=n(uWe,"SPAN",{});var M9t=s(GTe);$br=r(M9t,"AutoModelForInstanceSegmentation"),M9t.forEach(t),uWe.forEach(t),fze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(O9.$$.fragment,Ll),kbr=i(Ll),ac=n(Ll,"P",{});var Lte=s(ac);Sbr=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iU=n(Lte,"A",{href:!0});var E9t=s(iU);Rbr=r(E9t,"from_pretrained()"),E9t.forEach(t),Pbr=r(Lte," class method or the "),dU=n(Lte,"A",{href:!0});var C9t=s(dU);Bbr=r(C9t,"from_config()"),C9t.forEach(t),Ibr=r(Lte,` class
method.`),Lte.forEach(t),Nbr=i(Ll),V9=n(Ll,"P",{});var bWe=s(V9);qbr=r(bWe,"This class cannot be instantiated directly using "),OTe=n(bWe,"CODE",{});var w9t=s(OTe);jbr=r(w9t,"__init__()"),w9t.forEach(t),Dbr=r(bWe," (throws an error)."),bWe.forEach(t),Gbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var t6=s(kt);T(X9.$$.fragment,t6),Obr=i(t6),VTe=n(t6,"P",{});var A9t=s(VTe);Vbr=r(A9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),A9t.forEach(t),Xbr=i(t6),nc=n(t6,"P",{});var yte=s(nc);zbr=r(yte,`Note:
Loading a model from its configuration file does `),XTe=n(yte,"STRONG",{});var L9t=s(XTe);Qbr=r(L9t,"not"),L9t.forEach(t),Wbr=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(yte,"A",{href:!0});var y9t=s(cU);Hbr=r(y9t,"from_pretrained()"),y9t.forEach(t),Ubr=r(yte," to load the model weights."),yte.forEach(t),Jbr=i(t6),T(uM.$$.fragment,t6),t6.forEach(t),Ybr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(z9.$$.fragment,$a),Kbr=i($a),zTe=n($a,"P",{});var x9t=s(zTe);Zbr=r(x9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),x9t.forEach(t),evr=i($a),nn=n($a,"P",{});var a6=s(nn);ovr=r(a6,"The model class to instantiate is selected based on the "),QTe=n(a6,"CODE",{});var $9t=s(QTe);rvr=r($9t,"model_type"),$9t.forEach(t),tvr=r(a6,` property of the config object (either
passed as an argument or loaded from `),WTe=n(a6,"CODE",{});var k9t=s(WTe);avr=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),nvr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(a6,"CODE",{});var S9t=s(HTe);svr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),lvr=r(a6,":"),a6.forEach(t),ivr=i($a),UTe=n($a,"UL",{});var R9t=s(UTe);bM=n(R9t,"LI",{});var dqe=s(bM);JTe=n(dqe,"STRONG",{});var P9t=s(JTe);dvr=r(P9t,"maskformer"),P9t.forEach(t),cvr=r(dqe," \u2014 "),fU=n(dqe,"A",{href:!0});var B9t=s(fU);fvr=r(B9t,"MaskFormerForInstanceSegmentation"),B9t.forEach(t),mvr=r(dqe," (MaskFormer model)"),dqe.forEach(t),R9t.forEach(t),gvr=i($a),vM=n($a,"P",{});var cqe=s(vM);hvr=r(cqe,"The model is set in evaluation mode by default using "),YTe=n(cqe,"CODE",{});var I9t=s(YTe);pvr=r(I9t,"model.eval()"),I9t.forEach(t),_vr=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KTe=n(cqe,"CODE",{});var N9t=s(KTe);uvr=r(N9t,"model.train()"),N9t.forEach(t),cqe.forEach(t),bvr=i($a),T(FM.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),mze=i(f),sc=n(f,"H2",{class:!0});var vWe=s(sc);TM=n(vWe,"A",{id:!0,class:!0,href:!0});var q9t=s(TM);ZTe=n(q9t,"SPAN",{});var j9t=s(ZTe);T(Q9.$$.fragment,j9t),j9t.forEach(t),q9t.forEach(t),vvr=i(vWe),e7e=n(vWe,"SPAN",{});var D9t=s(e7e);Fvr=r(D9t,"TFAutoModel"),D9t.forEach(t),vWe.forEach(t),gze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(W9.$$.fragment,yl),Tvr=i(yl),lc=n(yl,"P",{});var xte=s(lc);Mvr=r(xte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mU=n(xte,"A",{href:!0});var G9t=s(mU);Evr=r(G9t,"from_pretrained()"),G9t.forEach(t),Cvr=r(xte," class method or the "),gU=n(xte,"A",{href:!0});var O9t=s(gU);wvr=r(O9t,"from_config()"),O9t.forEach(t),Avr=r(xte,` class
method.`),xte.forEach(t),Lvr=i(yl),H9=n(yl,"P",{});var FWe=s(H9);yvr=r(FWe,"This class cannot be instantiated directly using "),o7e=n(FWe,"CODE",{});var V9t=s(o7e);xvr=r(V9t,"__init__()"),V9t.forEach(t),$vr=r(FWe," (throws an error)."),FWe.forEach(t),kvr=i(yl),St=n(yl,"DIV",{class:!0});var n6=s(St);T(U9.$$.fragment,n6),Svr=i(n6),r7e=n(n6,"P",{});var X9t=s(r7e);Rvr=r(X9t,"Instantiates one of the base model classes of the library from a configuration."),X9t.forEach(t),Pvr=i(n6),ic=n(n6,"P",{});var $te=s(ic);Bvr=r($te,`Note:
Loading a model from its configuration file does `),t7e=n($te,"STRONG",{});var z9t=s(t7e);Ivr=r(z9t,"not"),z9t.forEach(t),Nvr=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n($te,"A",{href:!0});var Q9t=s(hU);qvr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),jvr=r($te," to load the model weights."),$te.forEach(t),Dvr=i(n6),T(MM.$$.fragment,n6),n6.forEach(t),Gvr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(J9.$$.fragment,xl),Ovr=i(xl),a7e=n(xl,"P",{});var W9t=s(a7e);Vvr=r(W9t,"Instantiate one of the base model classes of the library from a pretrained model."),W9t.forEach(t),Xvr=i(xl),sn=n(xl,"P",{});var s6=s(sn);zvr=r(s6,"The model class to instantiate is selected based on the "),n7e=n(s6,"CODE",{});var H9t=s(n7e);Qvr=r(H9t,"model_type"),H9t.forEach(t),Wvr=r(s6,` property of the config object (either
passed as an argument or loaded from `),s7e=n(s6,"CODE",{});var U9t=s(s7e);Hvr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),Uvr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(s6,"CODE",{});var J9t=s(l7e);Jvr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),Yvr=r(s6,":"),s6.forEach(t),Kvr=i(xl),q=n(xl,"UL",{});var D=s(q);EM=n(D,"LI",{});var fqe=s(EM);i7e=n(fqe,"STRONG",{});var Y9t=s(i7e);Zvr=r(Y9t,"albert"),Y9t.forEach(t),eFr=r(fqe," \u2014 "),pU=n(fqe,"A",{href:!0});var K9t=s(pU);oFr=r(K9t,"TFAlbertModel"),K9t.forEach(t),rFr=r(fqe," (ALBERT model)"),fqe.forEach(t),tFr=i(D),CM=n(D,"LI",{});var mqe=s(CM);d7e=n(mqe,"STRONG",{});var Z9t=s(d7e);aFr=r(Z9t,"bart"),Z9t.forEach(t),nFr=r(mqe," \u2014 "),_U=n(mqe,"A",{href:!0});var ext=s(_U);sFr=r(ext,"TFBartModel"),ext.forEach(t),lFr=r(mqe," (BART model)"),mqe.forEach(t),iFr=i(D),wM=n(D,"LI",{});var gqe=s(wM);c7e=n(gqe,"STRONG",{});var oxt=s(c7e);dFr=r(oxt,"bert"),oxt.forEach(t),cFr=r(gqe," \u2014 "),uU=n(gqe,"A",{href:!0});var rxt=s(uU);fFr=r(rxt,"TFBertModel"),rxt.forEach(t),mFr=r(gqe," (BERT model)"),gqe.forEach(t),gFr=i(D),AM=n(D,"LI",{});var hqe=s(AM);f7e=n(hqe,"STRONG",{});var txt=s(f7e);hFr=r(txt,"blenderbot"),txt.forEach(t),pFr=r(hqe," \u2014 "),bU=n(hqe,"A",{href:!0});var axt=s(bU);_Fr=r(axt,"TFBlenderbotModel"),axt.forEach(t),uFr=r(hqe," (Blenderbot model)"),hqe.forEach(t),bFr=i(D),LM=n(D,"LI",{});var pqe=s(LM);m7e=n(pqe,"STRONG",{});var nxt=s(m7e);vFr=r(nxt,"blenderbot-small"),nxt.forEach(t),FFr=r(pqe," \u2014 "),vU=n(pqe,"A",{href:!0});var sxt=s(vU);TFr=r(sxt,"TFBlenderbotSmallModel"),sxt.forEach(t),MFr=r(pqe," (BlenderbotSmall model)"),pqe.forEach(t),EFr=i(D),yM=n(D,"LI",{});var _qe=s(yM);g7e=n(_qe,"STRONG",{});var lxt=s(g7e);CFr=r(lxt,"camembert"),lxt.forEach(t),wFr=r(_qe," \u2014 "),FU=n(_qe,"A",{href:!0});var ixt=s(FU);AFr=r(ixt,"TFCamembertModel"),ixt.forEach(t),LFr=r(_qe," (CamemBERT model)"),_qe.forEach(t),yFr=i(D),xM=n(D,"LI",{});var uqe=s(xM);h7e=n(uqe,"STRONG",{});var dxt=s(h7e);xFr=r(dxt,"clip"),dxt.forEach(t),$Fr=r(uqe," \u2014 "),TU=n(uqe,"A",{href:!0});var cxt=s(TU);kFr=r(cxt,"TFCLIPModel"),cxt.forEach(t),SFr=r(uqe," (CLIP model)"),uqe.forEach(t),RFr=i(D),$M=n(D,"LI",{});var bqe=s($M);p7e=n(bqe,"STRONG",{});var fxt=s(p7e);PFr=r(fxt,"convbert"),fxt.forEach(t),BFr=r(bqe," \u2014 "),MU=n(bqe,"A",{href:!0});var mxt=s(MU);IFr=r(mxt,"TFConvBertModel"),mxt.forEach(t),NFr=r(bqe," (ConvBERT model)"),bqe.forEach(t),qFr=i(D),kM=n(D,"LI",{});var vqe=s(kM);_7e=n(vqe,"STRONG",{});var gxt=s(_7e);jFr=r(gxt,"convnext"),gxt.forEach(t),DFr=r(vqe," \u2014 "),EU=n(vqe,"A",{href:!0});var hxt=s(EU);GFr=r(hxt,"TFConvNextModel"),hxt.forEach(t),OFr=r(vqe," (ConvNeXT model)"),vqe.forEach(t),VFr=i(D),SM=n(D,"LI",{});var Fqe=s(SM);u7e=n(Fqe,"STRONG",{});var pxt=s(u7e);XFr=r(pxt,"ctrl"),pxt.forEach(t),zFr=r(Fqe," \u2014 "),CU=n(Fqe,"A",{href:!0});var _xt=s(CU);QFr=r(_xt,"TFCTRLModel"),_xt.forEach(t),WFr=r(Fqe," (CTRL model)"),Fqe.forEach(t),HFr=i(D),RM=n(D,"LI",{});var Tqe=s(RM);b7e=n(Tqe,"STRONG",{});var uxt=s(b7e);UFr=r(uxt,"data2vec-vision"),uxt.forEach(t),JFr=r(Tqe," \u2014 "),wU=n(Tqe,"A",{href:!0});var bxt=s(wU);YFr=r(bxt,"TFData2VecVisionModel"),bxt.forEach(t),KFr=r(Tqe," (Data2VecVision model)"),Tqe.forEach(t),ZFr=i(D),PM=n(D,"LI",{});var Mqe=s(PM);v7e=n(Mqe,"STRONG",{});var vxt=s(v7e);eTr=r(vxt,"deberta"),vxt.forEach(t),oTr=r(Mqe," \u2014 "),AU=n(Mqe,"A",{href:!0});var Fxt=s(AU);rTr=r(Fxt,"TFDebertaModel"),Fxt.forEach(t),tTr=r(Mqe," (DeBERTa model)"),Mqe.forEach(t),aTr=i(D),BM=n(D,"LI",{});var Eqe=s(BM);F7e=n(Eqe,"STRONG",{});var Txt=s(F7e);nTr=r(Txt,"deberta-v2"),Txt.forEach(t),sTr=r(Eqe," \u2014 "),LU=n(Eqe,"A",{href:!0});var Mxt=s(LU);lTr=r(Mxt,"TFDebertaV2Model"),Mxt.forEach(t),iTr=r(Eqe," (DeBERTa-v2 model)"),Eqe.forEach(t),dTr=i(D),IM=n(D,"LI",{});var Cqe=s(IM);T7e=n(Cqe,"STRONG",{});var Ext=s(T7e);cTr=r(Ext,"distilbert"),Ext.forEach(t),fTr=r(Cqe," \u2014 "),yU=n(Cqe,"A",{href:!0});var Cxt=s(yU);mTr=r(Cxt,"TFDistilBertModel"),Cxt.forEach(t),gTr=r(Cqe," (DistilBERT model)"),Cqe.forEach(t),hTr=i(D),NM=n(D,"LI",{});var wqe=s(NM);M7e=n(wqe,"STRONG",{});var wxt=s(M7e);pTr=r(wxt,"dpr"),wxt.forEach(t),_Tr=r(wqe," \u2014 "),xU=n(wqe,"A",{href:!0});var Axt=s(xU);uTr=r(Axt,"TFDPRQuestionEncoder"),Axt.forEach(t),bTr=r(wqe," (DPR model)"),wqe.forEach(t),vTr=i(D),qM=n(D,"LI",{});var Aqe=s(qM);E7e=n(Aqe,"STRONG",{});var Lxt=s(E7e);FTr=r(Lxt,"electra"),Lxt.forEach(t),TTr=r(Aqe," \u2014 "),$U=n(Aqe,"A",{href:!0});var yxt=s($U);MTr=r(yxt,"TFElectraModel"),yxt.forEach(t),ETr=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),CTr=i(D),jM=n(D,"LI",{});var Lqe=s(jM);C7e=n(Lqe,"STRONG",{});var xxt=s(C7e);wTr=r(xxt,"flaubert"),xxt.forEach(t),ATr=r(Lqe," \u2014 "),kU=n(Lqe,"A",{href:!0});var $xt=s(kU);LTr=r($xt,"TFFlaubertModel"),$xt.forEach(t),yTr=r(Lqe," (FlauBERT model)"),Lqe.forEach(t),xTr=i(D),Js=n(D,"LI",{});var BS=s(Js);w7e=n(BS,"STRONG",{});var kxt=s(w7e);$Tr=r(kxt,"funnel"),kxt.forEach(t),kTr=r(BS," \u2014 "),SU=n(BS,"A",{href:!0});var Sxt=s(SU);STr=r(Sxt,"TFFunnelModel"),Sxt.forEach(t),RTr=r(BS," or "),RU=n(BS,"A",{href:!0});var Rxt=s(RU);PTr=r(Rxt,"TFFunnelBaseModel"),Rxt.forEach(t),BTr=r(BS," (Funnel Transformer model)"),BS.forEach(t),ITr=i(D),DM=n(D,"LI",{});var yqe=s(DM);A7e=n(yqe,"STRONG",{});var Pxt=s(A7e);NTr=r(Pxt,"gpt2"),Pxt.forEach(t),qTr=r(yqe," \u2014 "),PU=n(yqe,"A",{href:!0});var Bxt=s(PU);jTr=r(Bxt,"TFGPT2Model"),Bxt.forEach(t),DTr=r(yqe," (OpenAI GPT-2 model)"),yqe.forEach(t),GTr=i(D),GM=n(D,"LI",{});var xqe=s(GM);L7e=n(xqe,"STRONG",{});var Ixt=s(L7e);OTr=r(Ixt,"gptj"),Ixt.forEach(t),VTr=r(xqe," \u2014 "),BU=n(xqe,"A",{href:!0});var Nxt=s(BU);XTr=r(Nxt,"TFGPTJModel"),Nxt.forEach(t),zTr=r(xqe," (GPT-J model)"),xqe.forEach(t),QTr=i(D),OM=n(D,"LI",{});var $qe=s(OM);y7e=n($qe,"STRONG",{});var qxt=s(y7e);WTr=r(qxt,"hubert"),qxt.forEach(t),HTr=r($qe," \u2014 "),IU=n($qe,"A",{href:!0});var jxt=s(IU);UTr=r(jxt,"TFHubertModel"),jxt.forEach(t),JTr=r($qe," (Hubert model)"),$qe.forEach(t),YTr=i(D),VM=n(D,"LI",{});var kqe=s(VM);x7e=n(kqe,"STRONG",{});var Dxt=s(x7e);KTr=r(Dxt,"layoutlm"),Dxt.forEach(t),ZTr=r(kqe," \u2014 "),NU=n(kqe,"A",{href:!0});var Gxt=s(NU);e7r=r(Gxt,"TFLayoutLMModel"),Gxt.forEach(t),o7r=r(kqe," (LayoutLM model)"),kqe.forEach(t),r7r=i(D),XM=n(D,"LI",{});var Sqe=s(XM);$7e=n(Sqe,"STRONG",{});var Oxt=s($7e);t7r=r(Oxt,"led"),Oxt.forEach(t),a7r=r(Sqe," \u2014 "),qU=n(Sqe,"A",{href:!0});var Vxt=s(qU);n7r=r(Vxt,"TFLEDModel"),Vxt.forEach(t),s7r=r(Sqe," (LED model)"),Sqe.forEach(t),l7r=i(D),zM=n(D,"LI",{});var Rqe=s(zM);k7e=n(Rqe,"STRONG",{});var Xxt=s(k7e);i7r=r(Xxt,"longformer"),Xxt.forEach(t),d7r=r(Rqe," \u2014 "),jU=n(Rqe,"A",{href:!0});var zxt=s(jU);c7r=r(zxt,"TFLongformerModel"),zxt.forEach(t),f7r=r(Rqe," (Longformer model)"),Rqe.forEach(t),m7r=i(D),QM=n(D,"LI",{});var Pqe=s(QM);S7e=n(Pqe,"STRONG",{});var Qxt=s(S7e);g7r=r(Qxt,"lxmert"),Qxt.forEach(t),h7r=r(Pqe," \u2014 "),DU=n(Pqe,"A",{href:!0});var Wxt=s(DU);p7r=r(Wxt,"TFLxmertModel"),Wxt.forEach(t),_7r=r(Pqe," (LXMERT model)"),Pqe.forEach(t),u7r=i(D),WM=n(D,"LI",{});var Bqe=s(WM);R7e=n(Bqe,"STRONG",{});var Hxt=s(R7e);b7r=r(Hxt,"marian"),Hxt.forEach(t),v7r=r(Bqe," \u2014 "),GU=n(Bqe,"A",{href:!0});var Uxt=s(GU);F7r=r(Uxt,"TFMarianModel"),Uxt.forEach(t),T7r=r(Bqe," (Marian model)"),Bqe.forEach(t),M7r=i(D),HM=n(D,"LI",{});var Iqe=s(HM);P7e=n(Iqe,"STRONG",{});var Jxt=s(P7e);E7r=r(Jxt,"mbart"),Jxt.forEach(t),C7r=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var Yxt=s(OU);w7r=r(Yxt,"TFMBartModel"),Yxt.forEach(t),A7r=r(Iqe," (mBART model)"),Iqe.forEach(t),L7r=i(D),UM=n(D,"LI",{});var Nqe=s(UM);B7e=n(Nqe,"STRONG",{});var Kxt=s(B7e);y7r=r(Kxt,"mobilebert"),Kxt.forEach(t),x7r=r(Nqe," \u2014 "),VU=n(Nqe,"A",{href:!0});var Zxt=s(VU);$7r=r(Zxt,"TFMobileBertModel"),Zxt.forEach(t),k7r=r(Nqe," (MobileBERT model)"),Nqe.forEach(t),S7r=i(D),JM=n(D,"LI",{});var qqe=s(JM);I7e=n(qqe,"STRONG",{});var e$t=s(I7e);R7r=r(e$t,"mpnet"),e$t.forEach(t),P7r=r(qqe," \u2014 "),XU=n(qqe,"A",{href:!0});var o$t=s(XU);B7r=r(o$t,"TFMPNetModel"),o$t.forEach(t),I7r=r(qqe," (MPNet model)"),qqe.forEach(t),N7r=i(D),YM=n(D,"LI",{});var jqe=s(YM);N7e=n(jqe,"STRONG",{});var r$t=s(N7e);q7r=r(r$t,"mt5"),r$t.forEach(t),j7r=r(jqe," \u2014 "),zU=n(jqe,"A",{href:!0});var t$t=s(zU);D7r=r(t$t,"TFMT5Model"),t$t.forEach(t),G7r=r(jqe," (MT5 model)"),jqe.forEach(t),O7r=i(D),KM=n(D,"LI",{});var Dqe=s(KM);q7e=n(Dqe,"STRONG",{});var a$t=s(q7e);V7r=r(a$t,"openai-gpt"),a$t.forEach(t),X7r=r(Dqe," \u2014 "),QU=n(Dqe,"A",{href:!0});var n$t=s(QU);z7r=r(n$t,"TFOpenAIGPTModel"),n$t.forEach(t),Q7r=r(Dqe," (OpenAI GPT model)"),Dqe.forEach(t),W7r=i(D),ZM=n(D,"LI",{});var Gqe=s(ZM);j7e=n(Gqe,"STRONG",{});var s$t=s(j7e);H7r=r(s$t,"opt"),s$t.forEach(t),U7r=r(Gqe," \u2014 "),WU=n(Gqe,"A",{href:!0});var l$t=s(WU);J7r=r(l$t,"TFOPTModel"),l$t.forEach(t),Y7r=r(Gqe," (OPT model)"),Gqe.forEach(t),K7r=i(D),e4=n(D,"LI",{});var Oqe=s(e4);D7e=n(Oqe,"STRONG",{});var i$t=s(D7e);Z7r=r(i$t,"pegasus"),i$t.forEach(t),e8r=r(Oqe," \u2014 "),HU=n(Oqe,"A",{href:!0});var d$t=s(HU);o8r=r(d$t,"TFPegasusModel"),d$t.forEach(t),r8r=r(Oqe," (Pegasus model)"),Oqe.forEach(t),t8r=i(D),o4=n(D,"LI",{});var Vqe=s(o4);G7e=n(Vqe,"STRONG",{});var c$t=s(G7e);a8r=r(c$t,"regnet"),c$t.forEach(t),n8r=r(Vqe," \u2014 "),UU=n(Vqe,"A",{href:!0});var f$t=s(UU);s8r=r(f$t,"TFRegNetModel"),f$t.forEach(t),l8r=r(Vqe," (RegNet model)"),Vqe.forEach(t),i8r=i(D),r4=n(D,"LI",{});var Xqe=s(r4);O7e=n(Xqe,"STRONG",{});var m$t=s(O7e);d8r=r(m$t,"rembert"),m$t.forEach(t),c8r=r(Xqe," \u2014 "),JU=n(Xqe,"A",{href:!0});var g$t=s(JU);f8r=r(g$t,"TFRemBertModel"),g$t.forEach(t),m8r=r(Xqe," (RemBERT model)"),Xqe.forEach(t),g8r=i(D),t4=n(D,"LI",{});var zqe=s(t4);V7e=n(zqe,"STRONG",{});var h$t=s(V7e);h8r=r(h$t,"resnet"),h$t.forEach(t),p8r=r(zqe," \u2014 "),YU=n(zqe,"A",{href:!0});var p$t=s(YU);_8r=r(p$t,"TFResNetModel"),p$t.forEach(t),u8r=r(zqe," (ResNet model)"),zqe.forEach(t),b8r=i(D),a4=n(D,"LI",{});var Qqe=s(a4);X7e=n(Qqe,"STRONG",{});var _$t=s(X7e);v8r=r(_$t,"roberta"),_$t.forEach(t),F8r=r(Qqe," \u2014 "),KU=n(Qqe,"A",{href:!0});var u$t=s(KU);T8r=r(u$t,"TFRobertaModel"),u$t.forEach(t),M8r=r(Qqe," (RoBERTa model)"),Qqe.forEach(t),E8r=i(D),n4=n(D,"LI",{});var Wqe=s(n4);z7e=n(Wqe,"STRONG",{});var b$t=s(z7e);C8r=r(b$t,"roformer"),b$t.forEach(t),w8r=r(Wqe," \u2014 "),ZU=n(Wqe,"A",{href:!0});var v$t=s(ZU);A8r=r(v$t,"TFRoFormerModel"),v$t.forEach(t),L8r=r(Wqe," (RoFormer model)"),Wqe.forEach(t),y8r=i(D),s4=n(D,"LI",{});var Hqe=s(s4);Q7e=n(Hqe,"STRONG",{});var F$t=s(Q7e);x8r=r(F$t,"speech_to_text"),F$t.forEach(t),$8r=r(Hqe," \u2014 "),eJ=n(Hqe,"A",{href:!0});var T$t=s(eJ);k8r=r(T$t,"TFSpeech2TextModel"),T$t.forEach(t),S8r=r(Hqe," (Speech2Text model)"),Hqe.forEach(t),R8r=i(D),l4=n(D,"LI",{});var Uqe=s(l4);W7e=n(Uqe,"STRONG",{});var M$t=s(W7e);P8r=r(M$t,"swin"),M$t.forEach(t),B8r=r(Uqe," \u2014 "),oJ=n(Uqe,"A",{href:!0});var E$t=s(oJ);I8r=r(E$t,"TFSwinModel"),E$t.forEach(t),N8r=r(Uqe," (Swin Transformer model)"),Uqe.forEach(t),q8r=i(D),i4=n(D,"LI",{});var Jqe=s(i4);H7e=n(Jqe,"STRONG",{});var C$t=s(H7e);j8r=r(C$t,"t5"),C$t.forEach(t),D8r=r(Jqe," \u2014 "),rJ=n(Jqe,"A",{href:!0});var w$t=s(rJ);G8r=r(w$t,"TFT5Model"),w$t.forEach(t),O8r=r(Jqe," (T5 model)"),Jqe.forEach(t),V8r=i(D),d4=n(D,"LI",{});var Yqe=s(d4);U7e=n(Yqe,"STRONG",{});var A$t=s(U7e);X8r=r(A$t,"tapas"),A$t.forEach(t),z8r=r(Yqe," \u2014 "),tJ=n(Yqe,"A",{href:!0});var L$t=s(tJ);Q8r=r(L$t,"TFTapasModel"),L$t.forEach(t),W8r=r(Yqe," (TAPAS model)"),Yqe.forEach(t),H8r=i(D),c4=n(D,"LI",{});var Kqe=s(c4);J7e=n(Kqe,"STRONG",{});var y$t=s(J7e);U8r=r(y$t,"transfo-xl"),y$t.forEach(t),J8r=r(Kqe," \u2014 "),aJ=n(Kqe,"A",{href:!0});var x$t=s(aJ);Y8r=r(x$t,"TFTransfoXLModel"),x$t.forEach(t),K8r=r(Kqe," (Transformer-XL model)"),Kqe.forEach(t),Z8r=i(D),f4=n(D,"LI",{});var Zqe=s(f4);Y7e=n(Zqe,"STRONG",{});var $$t=s(Y7e);eMr=r($$t,"vit"),$$t.forEach(t),oMr=r(Zqe," \u2014 "),nJ=n(Zqe,"A",{href:!0});var k$t=s(nJ);rMr=r(k$t,"TFViTModel"),k$t.forEach(t),tMr=r(Zqe," (ViT model)"),Zqe.forEach(t),aMr=i(D),m4=n(D,"LI",{});var eje=s(m4);K7e=n(eje,"STRONG",{});var S$t=s(K7e);nMr=r(S$t,"vit_mae"),S$t.forEach(t),sMr=r(eje," \u2014 "),sJ=n(eje,"A",{href:!0});var R$t=s(sJ);lMr=r(R$t,"TFViTMAEModel"),R$t.forEach(t),iMr=r(eje," (ViTMAE model)"),eje.forEach(t),dMr=i(D),g4=n(D,"LI",{});var oje=s(g4);Z7e=n(oje,"STRONG",{});var P$t=s(Z7e);cMr=r(P$t,"wav2vec2"),P$t.forEach(t),fMr=r(oje," \u2014 "),lJ=n(oje,"A",{href:!0});var B$t=s(lJ);mMr=r(B$t,"TFWav2Vec2Model"),B$t.forEach(t),gMr=r(oje," (Wav2Vec2 model)"),oje.forEach(t),hMr=i(D),h4=n(D,"LI",{});var rje=s(h4);e8e=n(rje,"STRONG",{});var I$t=s(e8e);pMr=r(I$t,"xlm"),I$t.forEach(t),_Mr=r(rje," \u2014 "),iJ=n(rje,"A",{href:!0});var N$t=s(iJ);uMr=r(N$t,"TFXLMModel"),N$t.forEach(t),bMr=r(rje," (XLM model)"),rje.forEach(t),vMr=i(D),p4=n(D,"LI",{});var tje=s(p4);o8e=n(tje,"STRONG",{});var q$t=s(o8e);FMr=r(q$t,"xlm-roberta"),q$t.forEach(t),TMr=r(tje," \u2014 "),dJ=n(tje,"A",{href:!0});var j$t=s(dJ);MMr=r(j$t,"TFXLMRobertaModel"),j$t.forEach(t),EMr=r(tje," (XLM-RoBERTa model)"),tje.forEach(t),CMr=i(D),_4=n(D,"LI",{});var aje=s(_4);r8e=n(aje,"STRONG",{});var D$t=s(r8e);wMr=r(D$t,"xlnet"),D$t.forEach(t),AMr=r(aje," \u2014 "),cJ=n(aje,"A",{href:!0});var G$t=s(cJ);LMr=r(G$t,"TFXLNetModel"),G$t.forEach(t),yMr=r(aje," (XLNet model)"),aje.forEach(t),D.forEach(t),xMr=i(xl),T(u4.$$.fragment,xl),xl.forEach(t),yl.forEach(t),hze=i(f),dc=n(f,"H2",{class:!0});var TWe=s(dc);b4=n(TWe,"A",{id:!0,class:!0,href:!0});var O$t=s(b4);t8e=n(O$t,"SPAN",{});var V$t=s(t8e);T(Y9.$$.fragment,V$t),V$t.forEach(t),O$t.forEach(t),$Mr=i(TWe),a8e=n(TWe,"SPAN",{});var X$t=s(a8e);kMr=r(X$t,"TFAutoModelForPreTraining"),X$t.forEach(t),TWe.forEach(t),pze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(K9.$$.fragment,$l),SMr=i($l),cc=n($l,"P",{});var kte=s(cc);RMr=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fJ=n(kte,"A",{href:!0});var z$t=s(fJ);PMr=r(z$t,"from_pretrained()"),z$t.forEach(t),BMr=r(kte," class method or the "),mJ=n(kte,"A",{href:!0});var Q$t=s(mJ);IMr=r(Q$t,"from_config()"),Q$t.forEach(t),NMr=r(kte,` class
method.`),kte.forEach(t),qMr=i($l),Z9=n($l,"P",{});var MWe=s(Z9);jMr=r(MWe,"This class cannot be instantiated directly using "),n8e=n(MWe,"CODE",{});var W$t=s(n8e);DMr=r(W$t,"__init__()"),W$t.forEach(t),GMr=r(MWe," (throws an error)."),MWe.forEach(t),OMr=i($l),Rt=n($l,"DIV",{class:!0});var l6=s(Rt);T(ex.$$.fragment,l6),VMr=i(l6),s8e=n(l6,"P",{});var H$t=s(s8e);XMr=r(H$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H$t.forEach(t),zMr=i(l6),fc=n(l6,"P",{});var Ste=s(fc);QMr=r(Ste,`Note:
Loading a model from its configuration file does `),l8e=n(Ste,"STRONG",{});var U$t=s(l8e);WMr=r(U$t,"not"),U$t.forEach(t),HMr=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(Ste,"A",{href:!0});var J$t=s(gJ);UMr=r(J$t,"from_pretrained()"),J$t.forEach(t),JMr=r(Ste," to load the model weights."),Ste.forEach(t),YMr=i(l6),T(v4.$$.fragment,l6),l6.forEach(t),KMr=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(ox.$$.fragment,kl),ZMr=i(kl),i8e=n(kl,"P",{});var Y$t=s(i8e);e4r=r(Y$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y$t.forEach(t),o4r=i(kl),ln=n(kl,"P",{});var i6=s(ln);r4r=r(i6,"The model class to instantiate is selected based on the "),d8e=n(i6,"CODE",{});var K$t=s(d8e);t4r=r(K$t,"model_type"),K$t.forEach(t),a4r=r(i6,` property of the config object (either
passed as an argument or loaded from `),c8e=n(i6,"CODE",{});var Z$t=s(c8e);n4r=r(Z$t,"pretrained_model_name_or_path"),Z$t.forEach(t),s4r=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f8e=n(i6,"CODE",{});var ekt=s(f8e);l4r=r(ekt,"pretrained_model_name_or_path"),ekt.forEach(t),i4r=r(i6,":"),i6.forEach(t),d4r=i(kl),se=n(kl,"UL",{});var le=s(se);F4=n(le,"LI",{});var nje=s(F4);m8e=n(nje,"STRONG",{});var okt=s(m8e);c4r=r(okt,"albert"),okt.forEach(t),f4r=r(nje," \u2014 "),hJ=n(nje,"A",{href:!0});var rkt=s(hJ);m4r=r(rkt,"TFAlbertForPreTraining"),rkt.forEach(t),g4r=r(nje," (ALBERT model)"),nje.forEach(t),h4r=i(le),T4=n(le,"LI",{});var sje=s(T4);g8e=n(sje,"STRONG",{});var tkt=s(g8e);p4r=r(tkt,"bart"),tkt.forEach(t),_4r=r(sje," \u2014 "),pJ=n(sje,"A",{href:!0});var akt=s(pJ);u4r=r(akt,"TFBartForConditionalGeneration"),akt.forEach(t),b4r=r(sje," (BART model)"),sje.forEach(t),v4r=i(le),M4=n(le,"LI",{});var lje=s(M4);h8e=n(lje,"STRONG",{});var nkt=s(h8e);F4r=r(nkt,"bert"),nkt.forEach(t),T4r=r(lje," \u2014 "),_J=n(lje,"A",{href:!0});var skt=s(_J);M4r=r(skt,"TFBertForPreTraining"),skt.forEach(t),E4r=r(lje," (BERT model)"),lje.forEach(t),C4r=i(le),E4=n(le,"LI",{});var ije=s(E4);p8e=n(ije,"STRONG",{});var lkt=s(p8e);w4r=r(lkt,"camembert"),lkt.forEach(t),A4r=r(ije," \u2014 "),uJ=n(ije,"A",{href:!0});var ikt=s(uJ);L4r=r(ikt,"TFCamembertForMaskedLM"),ikt.forEach(t),y4r=r(ije," (CamemBERT model)"),ije.forEach(t),x4r=i(le),C4=n(le,"LI",{});var dje=s(C4);_8e=n(dje,"STRONG",{});var dkt=s(_8e);$4r=r(dkt,"ctrl"),dkt.forEach(t),k4r=r(dje," \u2014 "),bJ=n(dje,"A",{href:!0});var ckt=s(bJ);S4r=r(ckt,"TFCTRLLMHeadModel"),ckt.forEach(t),R4r=r(dje," (CTRL model)"),dje.forEach(t),P4r=i(le),w4=n(le,"LI",{});var cje=s(w4);u8e=n(cje,"STRONG",{});var fkt=s(u8e);B4r=r(fkt,"distilbert"),fkt.forEach(t),I4r=r(cje," \u2014 "),vJ=n(cje,"A",{href:!0});var mkt=s(vJ);N4r=r(mkt,"TFDistilBertForMaskedLM"),mkt.forEach(t),q4r=r(cje," (DistilBERT model)"),cje.forEach(t),j4r=i(le),A4=n(le,"LI",{});var fje=s(A4);b8e=n(fje,"STRONG",{});var gkt=s(b8e);D4r=r(gkt,"electra"),gkt.forEach(t),G4r=r(fje," \u2014 "),FJ=n(fje,"A",{href:!0});var hkt=s(FJ);O4r=r(hkt,"TFElectraForPreTraining"),hkt.forEach(t),V4r=r(fje," (ELECTRA model)"),fje.forEach(t),X4r=i(le),L4=n(le,"LI",{});var mje=s(L4);v8e=n(mje,"STRONG",{});var pkt=s(v8e);z4r=r(pkt,"flaubert"),pkt.forEach(t),Q4r=r(mje," \u2014 "),TJ=n(mje,"A",{href:!0});var _kt=s(TJ);W4r=r(_kt,"TFFlaubertWithLMHeadModel"),_kt.forEach(t),H4r=r(mje," (FlauBERT model)"),mje.forEach(t),U4r=i(le),y4=n(le,"LI",{});var gje=s(y4);F8e=n(gje,"STRONG",{});var ukt=s(F8e);J4r=r(ukt,"funnel"),ukt.forEach(t),Y4r=r(gje," \u2014 "),MJ=n(gje,"A",{href:!0});var bkt=s(MJ);K4r=r(bkt,"TFFunnelForPreTraining"),bkt.forEach(t),Z4r=r(gje," (Funnel Transformer model)"),gje.forEach(t),eEr=i(le),x4=n(le,"LI",{});var hje=s(x4);T8e=n(hje,"STRONG",{});var vkt=s(T8e);oEr=r(vkt,"gpt2"),vkt.forEach(t),rEr=r(hje," \u2014 "),EJ=n(hje,"A",{href:!0});var Fkt=s(EJ);tEr=r(Fkt,"TFGPT2LMHeadModel"),Fkt.forEach(t),aEr=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),nEr=i(le),$4=n(le,"LI",{});var pje=s($4);M8e=n(pje,"STRONG",{});var Tkt=s(M8e);sEr=r(Tkt,"layoutlm"),Tkt.forEach(t),lEr=r(pje," \u2014 "),CJ=n(pje,"A",{href:!0});var Mkt=s(CJ);iEr=r(Mkt,"TFLayoutLMForMaskedLM"),Mkt.forEach(t),dEr=r(pje," (LayoutLM model)"),pje.forEach(t),cEr=i(le),k4=n(le,"LI",{});var _je=s(k4);E8e=n(_je,"STRONG",{});var Ekt=s(E8e);fEr=r(Ekt,"lxmert"),Ekt.forEach(t),mEr=r(_je," \u2014 "),wJ=n(_je,"A",{href:!0});var Ckt=s(wJ);gEr=r(Ckt,"TFLxmertForPreTraining"),Ckt.forEach(t),hEr=r(_je," (LXMERT model)"),_je.forEach(t),pEr=i(le),S4=n(le,"LI",{});var uje=s(S4);C8e=n(uje,"STRONG",{});var wkt=s(C8e);_Er=r(wkt,"mobilebert"),wkt.forEach(t),uEr=r(uje," \u2014 "),AJ=n(uje,"A",{href:!0});var Akt=s(AJ);bEr=r(Akt,"TFMobileBertForPreTraining"),Akt.forEach(t),vEr=r(uje," (MobileBERT model)"),uje.forEach(t),FEr=i(le),R4=n(le,"LI",{});var bje=s(R4);w8e=n(bje,"STRONG",{});var Lkt=s(w8e);TEr=r(Lkt,"mpnet"),Lkt.forEach(t),MEr=r(bje," \u2014 "),LJ=n(bje,"A",{href:!0});var ykt=s(LJ);EEr=r(ykt,"TFMPNetForMaskedLM"),ykt.forEach(t),CEr=r(bje," (MPNet model)"),bje.forEach(t),wEr=i(le),P4=n(le,"LI",{});var vje=s(P4);A8e=n(vje,"STRONG",{});var xkt=s(A8e);AEr=r(xkt,"openai-gpt"),xkt.forEach(t),LEr=r(vje," \u2014 "),yJ=n(vje,"A",{href:!0});var $kt=s(yJ);yEr=r($kt,"TFOpenAIGPTLMHeadModel"),$kt.forEach(t),xEr=r(vje," (OpenAI GPT model)"),vje.forEach(t),$Er=i(le),B4=n(le,"LI",{});var Fje=s(B4);L8e=n(Fje,"STRONG",{});var kkt=s(L8e);kEr=r(kkt,"roberta"),kkt.forEach(t),SEr=r(Fje," \u2014 "),xJ=n(Fje,"A",{href:!0});var Skt=s(xJ);REr=r(Skt,"TFRobertaForMaskedLM"),Skt.forEach(t),PEr=r(Fje," (RoBERTa model)"),Fje.forEach(t),BEr=i(le),I4=n(le,"LI",{});var Tje=s(I4);y8e=n(Tje,"STRONG",{});var Rkt=s(y8e);IEr=r(Rkt,"t5"),Rkt.forEach(t),NEr=r(Tje," \u2014 "),$J=n(Tje,"A",{href:!0});var Pkt=s($J);qEr=r(Pkt,"TFT5ForConditionalGeneration"),Pkt.forEach(t),jEr=r(Tje," (T5 model)"),Tje.forEach(t),DEr=i(le),N4=n(le,"LI",{});var Mje=s(N4);x8e=n(Mje,"STRONG",{});var Bkt=s(x8e);GEr=r(Bkt,"tapas"),Bkt.forEach(t),OEr=r(Mje," \u2014 "),kJ=n(Mje,"A",{href:!0});var Ikt=s(kJ);VEr=r(Ikt,"TFTapasForMaskedLM"),Ikt.forEach(t),XEr=r(Mje," (TAPAS model)"),Mje.forEach(t),zEr=i(le),q4=n(le,"LI",{});var Eje=s(q4);$8e=n(Eje,"STRONG",{});var Nkt=s($8e);QEr=r(Nkt,"transfo-xl"),Nkt.forEach(t),WEr=r(Eje," \u2014 "),SJ=n(Eje,"A",{href:!0});var qkt=s(SJ);HEr=r(qkt,"TFTransfoXLLMHeadModel"),qkt.forEach(t),UEr=r(Eje," (Transformer-XL model)"),Eje.forEach(t),JEr=i(le),j4=n(le,"LI",{});var Cje=s(j4);k8e=n(Cje,"STRONG",{});var jkt=s(k8e);YEr=r(jkt,"vit_mae"),jkt.forEach(t),KEr=r(Cje," \u2014 "),RJ=n(Cje,"A",{href:!0});var Dkt=s(RJ);ZEr=r(Dkt,"TFViTMAEForPreTraining"),Dkt.forEach(t),eCr=r(Cje," (ViTMAE model)"),Cje.forEach(t),oCr=i(le),D4=n(le,"LI",{});var wje=s(D4);S8e=n(wje,"STRONG",{});var Gkt=s(S8e);rCr=r(Gkt,"xlm"),Gkt.forEach(t),tCr=r(wje," \u2014 "),PJ=n(wje,"A",{href:!0});var Okt=s(PJ);aCr=r(Okt,"TFXLMWithLMHeadModel"),Okt.forEach(t),nCr=r(wje," (XLM model)"),wje.forEach(t),sCr=i(le),G4=n(le,"LI",{});var Aje=s(G4);R8e=n(Aje,"STRONG",{});var Vkt=s(R8e);lCr=r(Vkt,"xlm-roberta"),Vkt.forEach(t),iCr=r(Aje," \u2014 "),BJ=n(Aje,"A",{href:!0});var Xkt=s(BJ);dCr=r(Xkt,"TFXLMRobertaForMaskedLM"),Xkt.forEach(t),cCr=r(Aje," (XLM-RoBERTa model)"),Aje.forEach(t),fCr=i(le),O4=n(le,"LI",{});var Lje=s(O4);P8e=n(Lje,"STRONG",{});var zkt=s(P8e);mCr=r(zkt,"xlnet"),zkt.forEach(t),gCr=r(Lje," \u2014 "),IJ=n(Lje,"A",{href:!0});var Qkt=s(IJ);hCr=r(Qkt,"TFXLNetLMHeadModel"),Qkt.forEach(t),pCr=r(Lje," (XLNet model)"),Lje.forEach(t),le.forEach(t),_Cr=i(kl),T(V4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),_ze=i(f),mc=n(f,"H2",{class:!0});var EWe=s(mc);X4=n(EWe,"A",{id:!0,class:!0,href:!0});var Wkt=s(X4);B8e=n(Wkt,"SPAN",{});var Hkt=s(B8e);T(rx.$$.fragment,Hkt),Hkt.forEach(t),Wkt.forEach(t),uCr=i(EWe),I8e=n(EWe,"SPAN",{});var Ukt=s(I8e);bCr=r(Ukt,"TFAutoModelForCausalLM"),Ukt.forEach(t),EWe.forEach(t),uze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(tx.$$.fragment,Sl),vCr=i(Sl),gc=n(Sl,"P",{});var Rte=s(gc);FCr=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NJ=n(Rte,"A",{href:!0});var Jkt=s(NJ);TCr=r(Jkt,"from_pretrained()"),Jkt.forEach(t),MCr=r(Rte," class method or the "),qJ=n(Rte,"A",{href:!0});var Ykt=s(qJ);ECr=r(Ykt,"from_config()"),Ykt.forEach(t),CCr=r(Rte,` class
method.`),Rte.forEach(t),wCr=i(Sl),ax=n(Sl,"P",{});var CWe=s(ax);ACr=r(CWe,"This class cannot be instantiated directly using "),N8e=n(CWe,"CODE",{});var Kkt=s(N8e);LCr=r(Kkt,"__init__()"),Kkt.forEach(t),yCr=r(CWe," (throws an error)."),CWe.forEach(t),xCr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var d6=s(Pt);T(nx.$$.fragment,d6),$Cr=i(d6),q8e=n(d6,"P",{});var Zkt=s(q8e);kCr=r(Zkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zkt.forEach(t),SCr=i(d6),hc=n(d6,"P",{});var Pte=s(hc);RCr=r(Pte,`Note:
Loading a model from its configuration file does `),j8e=n(Pte,"STRONG",{});var eSt=s(j8e);PCr=r(eSt,"not"),eSt.forEach(t),BCr=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Pte,"A",{href:!0});var oSt=s(jJ);ICr=r(oSt,"from_pretrained()"),oSt.forEach(t),NCr=r(Pte," to load the model weights."),Pte.forEach(t),qCr=i(d6),T(z4.$$.fragment,d6),d6.forEach(t),jCr=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(sx.$$.fragment,Rl),DCr=i(Rl),D8e=n(Rl,"P",{});var rSt=s(D8e);GCr=r(rSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rSt.forEach(t),OCr=i(Rl),dn=n(Rl,"P",{});var c6=s(dn);VCr=r(c6,"The model class to instantiate is selected based on the "),G8e=n(c6,"CODE",{});var tSt=s(G8e);XCr=r(tSt,"model_type"),tSt.forEach(t),zCr=r(c6,` property of the config object (either
passed as an argument or loaded from `),O8e=n(c6,"CODE",{});var aSt=s(O8e);QCr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),WCr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V8e=n(c6,"CODE",{});var nSt=s(V8e);HCr=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),UCr=r(c6,":"),c6.forEach(t),JCr=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);Q4=n(Ce,"LI",{});var yje=s(Q4);X8e=n(yje,"STRONG",{});var sSt=s(X8e);YCr=r(sSt,"bert"),sSt.forEach(t),KCr=r(yje," \u2014 "),DJ=n(yje,"A",{href:!0});var lSt=s(DJ);ZCr=r(lSt,"TFBertLMHeadModel"),lSt.forEach(t),e3r=r(yje," (BERT model)"),yje.forEach(t),o3r=i(Ce),W4=n(Ce,"LI",{});var xje=s(W4);z8e=n(xje,"STRONG",{});var iSt=s(z8e);r3r=r(iSt,"camembert"),iSt.forEach(t),t3r=r(xje," \u2014 "),GJ=n(xje,"A",{href:!0});var dSt=s(GJ);a3r=r(dSt,"TFCamembertForCausalLM"),dSt.forEach(t),n3r=r(xje," (CamemBERT model)"),xje.forEach(t),s3r=i(Ce),H4=n(Ce,"LI",{});var $je=s(H4);Q8e=n($je,"STRONG",{});var cSt=s(Q8e);l3r=r(cSt,"ctrl"),cSt.forEach(t),i3r=r($je," \u2014 "),OJ=n($je,"A",{href:!0});var fSt=s(OJ);d3r=r(fSt,"TFCTRLLMHeadModel"),fSt.forEach(t),c3r=r($je," (CTRL model)"),$je.forEach(t),f3r=i(Ce),U4=n(Ce,"LI",{});var kje=s(U4);W8e=n(kje,"STRONG",{});var mSt=s(W8e);m3r=r(mSt,"gpt2"),mSt.forEach(t),g3r=r(kje," \u2014 "),VJ=n(kje,"A",{href:!0});var gSt=s(VJ);h3r=r(gSt,"TFGPT2LMHeadModel"),gSt.forEach(t),p3r=r(kje," (OpenAI GPT-2 model)"),kje.forEach(t),_3r=i(Ce),J4=n(Ce,"LI",{});var Sje=s(J4);H8e=n(Sje,"STRONG",{});var hSt=s(H8e);u3r=r(hSt,"gptj"),hSt.forEach(t),b3r=r(Sje," \u2014 "),XJ=n(Sje,"A",{href:!0});var pSt=s(XJ);v3r=r(pSt,"TFGPTJForCausalLM"),pSt.forEach(t),F3r=r(Sje," (GPT-J model)"),Sje.forEach(t),T3r=i(Ce),Y4=n(Ce,"LI",{});var Rje=s(Y4);U8e=n(Rje,"STRONG",{});var _St=s(U8e);M3r=r(_St,"openai-gpt"),_St.forEach(t),E3r=r(Rje," \u2014 "),zJ=n(Rje,"A",{href:!0});var uSt=s(zJ);C3r=r(uSt,"TFOpenAIGPTLMHeadModel"),uSt.forEach(t),w3r=r(Rje," (OpenAI GPT model)"),Rje.forEach(t),A3r=i(Ce),K4=n(Ce,"LI",{});var Pje=s(K4);J8e=n(Pje,"STRONG",{});var bSt=s(J8e);L3r=r(bSt,"opt"),bSt.forEach(t),y3r=r(Pje," \u2014 "),QJ=n(Pje,"A",{href:!0});var vSt=s(QJ);x3r=r(vSt,"TFOPTForCausalLM"),vSt.forEach(t),$3r=r(Pje," (OPT model)"),Pje.forEach(t),k3r=i(Ce),Z4=n(Ce,"LI",{});var Bje=s(Z4);Y8e=n(Bje,"STRONG",{});var FSt=s(Y8e);S3r=r(FSt,"rembert"),FSt.forEach(t),R3r=r(Bje," \u2014 "),WJ=n(Bje,"A",{href:!0});var TSt=s(WJ);P3r=r(TSt,"TFRemBertForCausalLM"),TSt.forEach(t),B3r=r(Bje," (RemBERT model)"),Bje.forEach(t),I3r=i(Ce),eE=n(Ce,"LI",{});var Ije=s(eE);K8e=n(Ije,"STRONG",{});var MSt=s(K8e);N3r=r(MSt,"roberta"),MSt.forEach(t),q3r=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var ESt=s(HJ);j3r=r(ESt,"TFRobertaForCausalLM"),ESt.forEach(t),D3r=r(Ije," (RoBERTa model)"),Ije.forEach(t),G3r=i(Ce),oE=n(Ce,"LI",{});var Nje=s(oE);Z8e=n(Nje,"STRONG",{});var CSt=s(Z8e);O3r=r(CSt,"roformer"),CSt.forEach(t),V3r=r(Nje," \u2014 "),UJ=n(Nje,"A",{href:!0});var wSt=s(UJ);X3r=r(wSt,"TFRoFormerForCausalLM"),wSt.forEach(t),z3r=r(Nje," (RoFormer model)"),Nje.forEach(t),Q3r=i(Ce),rE=n(Ce,"LI",{});var qje=s(rE);eMe=n(qje,"STRONG",{});var ASt=s(eMe);W3r=r(ASt,"transfo-xl"),ASt.forEach(t),H3r=r(qje," \u2014 "),JJ=n(qje,"A",{href:!0});var LSt=s(JJ);U3r=r(LSt,"TFTransfoXLLMHeadModel"),LSt.forEach(t),J3r=r(qje," (Transformer-XL model)"),qje.forEach(t),Y3r=i(Ce),tE=n(Ce,"LI",{});var jje=s(tE);oMe=n(jje,"STRONG",{});var ySt=s(oMe);K3r=r(ySt,"xlm"),ySt.forEach(t),Z3r=r(jje," \u2014 "),YJ=n(jje,"A",{href:!0});var xSt=s(YJ);e5r=r(xSt,"TFXLMWithLMHeadModel"),xSt.forEach(t),o5r=r(jje," (XLM model)"),jje.forEach(t),r5r=i(Ce),aE=n(Ce,"LI",{});var Dje=s(aE);rMe=n(Dje,"STRONG",{});var $St=s(rMe);t5r=r($St,"xlnet"),$St.forEach(t),a5r=r(Dje," \u2014 "),KJ=n(Dje,"A",{href:!0});var kSt=s(KJ);n5r=r(kSt,"TFXLNetLMHeadModel"),kSt.forEach(t),s5r=r(Dje," (XLNet model)"),Dje.forEach(t),Ce.forEach(t),l5r=i(Rl),T(nE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),bze=i(f),pc=n(f,"H2",{class:!0});var wWe=s(pc);sE=n(wWe,"A",{id:!0,class:!0,href:!0});var SSt=s(sE);tMe=n(SSt,"SPAN",{});var RSt=s(tMe);T(lx.$$.fragment,RSt),RSt.forEach(t),SSt.forEach(t),i5r=i(wWe),aMe=n(wWe,"SPAN",{});var PSt=s(aMe);d5r=r(PSt,"TFAutoModelForImageClassification"),PSt.forEach(t),wWe.forEach(t),vze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(ix.$$.fragment,Pl),c5r=i(Pl),_c=n(Pl,"P",{});var Bte=s(_c);f5r=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZJ=n(Bte,"A",{href:!0});var BSt=s(ZJ);m5r=r(BSt,"from_pretrained()"),BSt.forEach(t),g5r=r(Bte," class method or the "),eY=n(Bte,"A",{href:!0});var ISt=s(eY);h5r=r(ISt,"from_config()"),ISt.forEach(t),p5r=r(Bte,` class
method.`),Bte.forEach(t),_5r=i(Pl),dx=n(Pl,"P",{});var AWe=s(dx);u5r=r(AWe,"This class cannot be instantiated directly using "),nMe=n(AWe,"CODE",{});var NSt=s(nMe);b5r=r(NSt,"__init__()"),NSt.forEach(t),v5r=r(AWe," (throws an error)."),AWe.forEach(t),F5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var f6=s(Bt);T(cx.$$.fragment,f6),T5r=i(f6),sMe=n(f6,"P",{});var qSt=s(sMe);M5r=r(qSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qSt.forEach(t),E5r=i(f6),uc=n(f6,"P",{});var Ite=s(uc);C5r=r(Ite,`Note:
Loading a model from its configuration file does `),lMe=n(Ite,"STRONG",{});var jSt=s(lMe);w5r=r(jSt,"not"),jSt.forEach(t),A5r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Ite,"A",{href:!0});var DSt=s(oY);L5r=r(DSt,"from_pretrained()"),DSt.forEach(t),y5r=r(Ite," to load the model weights."),Ite.forEach(t),x5r=i(f6),T(lE.$$.fragment,f6),f6.forEach(t),$5r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(fx.$$.fragment,Bl),k5r=i(Bl),iMe=n(Bl,"P",{});var GSt=s(iMe);S5r=r(GSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GSt.forEach(t),R5r=i(Bl),cn=n(Bl,"P",{});var m6=s(cn);P5r=r(m6,"The model class to instantiate is selected based on the "),dMe=n(m6,"CODE",{});var OSt=s(dMe);B5r=r(OSt,"model_type"),OSt.forEach(t),I5r=r(m6,` property of the config object (either
passed as an argument or loaded from `),cMe=n(m6,"CODE",{});var VSt=s(cMe);N5r=r(VSt,"pretrained_model_name_or_path"),VSt.forEach(t),q5r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(m6,"CODE",{});var XSt=s(fMe);j5r=r(XSt,"pretrained_model_name_or_path"),XSt.forEach(t),D5r=r(m6,":"),m6.forEach(t),G5r=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);iE=n(ka,"LI",{});var Gje=s(iE);mMe=n(Gje,"STRONG",{});var zSt=s(mMe);O5r=r(zSt,"convnext"),zSt.forEach(t),V5r=r(Gje," \u2014 "),rY=n(Gje,"A",{href:!0});var QSt=s(rY);X5r=r(QSt,"TFConvNextForImageClassification"),QSt.forEach(t),z5r=r(Gje," (ConvNeXT model)"),Gje.forEach(t),Q5r=i(ka),dE=n(ka,"LI",{});var Oje=s(dE);gMe=n(Oje,"STRONG",{});var WSt=s(gMe);W5r=r(WSt,"data2vec-vision"),WSt.forEach(t),H5r=r(Oje," \u2014 "),tY=n(Oje,"A",{href:!0});var HSt=s(tY);U5r=r(HSt,"TFData2VecVisionForImageClassification"),HSt.forEach(t),J5r=r(Oje," (Data2VecVision model)"),Oje.forEach(t),Y5r=i(ka),cE=n(ka,"LI",{});var Vje=s(cE);hMe=n(Vje,"STRONG",{});var USt=s(hMe);K5r=r(USt,"regnet"),USt.forEach(t),Z5r=r(Vje," \u2014 "),aY=n(Vje,"A",{href:!0});var JSt=s(aY);e0r=r(JSt,"TFRegNetForImageClassification"),JSt.forEach(t),o0r=r(Vje," (RegNet model)"),Vje.forEach(t),r0r=i(ka),fE=n(ka,"LI",{});var Xje=s(fE);pMe=n(Xje,"STRONG",{});var YSt=s(pMe);t0r=r(YSt,"resnet"),YSt.forEach(t),a0r=r(Xje," \u2014 "),nY=n(Xje,"A",{href:!0});var KSt=s(nY);n0r=r(KSt,"TFResNetForImageClassification"),KSt.forEach(t),s0r=r(Xje," (ResNet model)"),Xje.forEach(t),l0r=i(ka),mE=n(ka,"LI",{});var zje=s(mE);_Me=n(zje,"STRONG",{});var ZSt=s(_Me);i0r=r(ZSt,"swin"),ZSt.forEach(t),d0r=r(zje," \u2014 "),sY=n(zje,"A",{href:!0});var eRt=s(sY);c0r=r(eRt,"TFSwinForImageClassification"),eRt.forEach(t),f0r=r(zje," (Swin Transformer model)"),zje.forEach(t),m0r=i(ka),gE=n(ka,"LI",{});var Qje=s(gE);uMe=n(Qje,"STRONG",{});var oRt=s(uMe);g0r=r(oRt,"vit"),oRt.forEach(t),h0r=r(Qje," \u2014 "),lY=n(Qje,"A",{href:!0});var rRt=s(lY);p0r=r(rRt,"TFViTForImageClassification"),rRt.forEach(t),_0r=r(Qje," (ViT model)"),Qje.forEach(t),ka.forEach(t),u0r=i(Bl),T(hE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Fze=i(f),bc=n(f,"H2",{class:!0});var LWe=s(bc);pE=n(LWe,"A",{id:!0,class:!0,href:!0});var tRt=s(pE);bMe=n(tRt,"SPAN",{});var aRt=s(bMe);T(mx.$$.fragment,aRt),aRt.forEach(t),tRt.forEach(t),b0r=i(LWe),vMe=n(LWe,"SPAN",{});var nRt=s(vMe);v0r=r(nRt,"TFAutoModelForMaskedLM"),nRt.forEach(t),LWe.forEach(t),Tze=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(gx.$$.fragment,Il),F0r=i(Il),vc=n(Il,"P",{});var Nte=s(vc);T0r=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=n(Nte,"A",{href:!0});var sRt=s(iY);M0r=r(sRt,"from_pretrained()"),sRt.forEach(t),E0r=r(Nte," class method or the "),dY=n(Nte,"A",{href:!0});var lRt=s(dY);C0r=r(lRt,"from_config()"),lRt.forEach(t),w0r=r(Nte,` class
method.`),Nte.forEach(t),A0r=i(Il),hx=n(Il,"P",{});var yWe=s(hx);L0r=r(yWe,"This class cannot be instantiated directly using "),FMe=n(yWe,"CODE",{});var iRt=s(FMe);y0r=r(iRt,"__init__()"),iRt.forEach(t),x0r=r(yWe," (throws an error)."),yWe.forEach(t),$0r=i(Il),It=n(Il,"DIV",{class:!0});var g6=s(It);T(px.$$.fragment,g6),k0r=i(g6),TMe=n(g6,"P",{});var dRt=s(TMe);S0r=r(dRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dRt.forEach(t),R0r=i(g6),Fc=n(g6,"P",{});var qte=s(Fc);P0r=r(qte,`Note:
Loading a model from its configuration file does `),MMe=n(qte,"STRONG",{});var cRt=s(MMe);B0r=r(cRt,"not"),cRt.forEach(t),I0r=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(qte,"A",{href:!0});var fRt=s(cY);N0r=r(fRt,"from_pretrained()"),fRt.forEach(t),q0r=r(qte," to load the model weights."),qte.forEach(t),j0r=i(g6),T(_E.$$.fragment,g6),g6.forEach(t),D0r=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(_x.$$.fragment,Nl),G0r=i(Nl),EMe=n(Nl,"P",{});var mRt=s(EMe);O0r=r(mRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mRt.forEach(t),V0r=i(Nl),fn=n(Nl,"P",{});var h6=s(fn);X0r=r(h6,"The model class to instantiate is selected based on the "),CMe=n(h6,"CODE",{});var gRt=s(CMe);z0r=r(gRt,"model_type"),gRt.forEach(t),Q0r=r(h6,` property of the config object (either
passed as an argument or loaded from `),wMe=n(h6,"CODE",{});var hRt=s(wMe);W0r=r(hRt,"pretrained_model_name_or_path"),hRt.forEach(t),H0r=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(h6,"CODE",{});var pRt=s(AMe);U0r=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),J0r=r(h6,":"),h6.forEach(t),Y0r=i(Nl),ie=n(Nl,"UL",{});var fe=s(ie);uE=n(fe,"LI",{});var Wje=s(uE);LMe=n(Wje,"STRONG",{});var _Rt=s(LMe);K0r=r(_Rt,"albert"),_Rt.forEach(t),Z0r=r(Wje," \u2014 "),fY=n(Wje,"A",{href:!0});var uRt=s(fY);ewr=r(uRt,"TFAlbertForMaskedLM"),uRt.forEach(t),owr=r(Wje," (ALBERT model)"),Wje.forEach(t),rwr=i(fe),bE=n(fe,"LI",{});var Hje=s(bE);yMe=n(Hje,"STRONG",{});var bRt=s(yMe);twr=r(bRt,"bert"),bRt.forEach(t),awr=r(Hje," \u2014 "),mY=n(Hje,"A",{href:!0});var vRt=s(mY);nwr=r(vRt,"TFBertForMaskedLM"),vRt.forEach(t),swr=r(Hje," (BERT model)"),Hje.forEach(t),lwr=i(fe),vE=n(fe,"LI",{});var Uje=s(vE);xMe=n(Uje,"STRONG",{});var FRt=s(xMe);iwr=r(FRt,"camembert"),FRt.forEach(t),dwr=r(Uje," \u2014 "),gY=n(Uje,"A",{href:!0});var TRt=s(gY);cwr=r(TRt,"TFCamembertForMaskedLM"),TRt.forEach(t),fwr=r(Uje," (CamemBERT model)"),Uje.forEach(t),mwr=i(fe),FE=n(fe,"LI",{});var Jje=s(FE);$Me=n(Jje,"STRONG",{});var MRt=s($Me);gwr=r(MRt,"convbert"),MRt.forEach(t),hwr=r(Jje," \u2014 "),hY=n(Jje,"A",{href:!0});var ERt=s(hY);pwr=r(ERt,"TFConvBertForMaskedLM"),ERt.forEach(t),_wr=r(Jje," (ConvBERT model)"),Jje.forEach(t),uwr=i(fe),TE=n(fe,"LI",{});var Yje=s(TE);kMe=n(Yje,"STRONG",{});var CRt=s(kMe);bwr=r(CRt,"deberta"),CRt.forEach(t),vwr=r(Yje," \u2014 "),pY=n(Yje,"A",{href:!0});var wRt=s(pY);Fwr=r(wRt,"TFDebertaForMaskedLM"),wRt.forEach(t),Twr=r(Yje," (DeBERTa model)"),Yje.forEach(t),Mwr=i(fe),ME=n(fe,"LI",{});var Kje=s(ME);SMe=n(Kje,"STRONG",{});var ARt=s(SMe);Ewr=r(ARt,"deberta-v2"),ARt.forEach(t),Cwr=r(Kje," \u2014 "),_Y=n(Kje,"A",{href:!0});var LRt=s(_Y);wwr=r(LRt,"TFDebertaV2ForMaskedLM"),LRt.forEach(t),Awr=r(Kje," (DeBERTa-v2 model)"),Kje.forEach(t),Lwr=i(fe),EE=n(fe,"LI",{});var Zje=s(EE);RMe=n(Zje,"STRONG",{});var yRt=s(RMe);ywr=r(yRt,"distilbert"),yRt.forEach(t),xwr=r(Zje," \u2014 "),uY=n(Zje,"A",{href:!0});var xRt=s(uY);$wr=r(xRt,"TFDistilBertForMaskedLM"),xRt.forEach(t),kwr=r(Zje," (DistilBERT model)"),Zje.forEach(t),Swr=i(fe),CE=n(fe,"LI",{});var eDe=s(CE);PMe=n(eDe,"STRONG",{});var $Rt=s(PMe);Rwr=r($Rt,"electra"),$Rt.forEach(t),Pwr=r(eDe," \u2014 "),bY=n(eDe,"A",{href:!0});var kRt=s(bY);Bwr=r(kRt,"TFElectraForMaskedLM"),kRt.forEach(t),Iwr=r(eDe," (ELECTRA model)"),eDe.forEach(t),Nwr=i(fe),wE=n(fe,"LI",{});var oDe=s(wE);BMe=n(oDe,"STRONG",{});var SRt=s(BMe);qwr=r(SRt,"flaubert"),SRt.forEach(t),jwr=r(oDe," \u2014 "),vY=n(oDe,"A",{href:!0});var RRt=s(vY);Dwr=r(RRt,"TFFlaubertWithLMHeadModel"),RRt.forEach(t),Gwr=r(oDe," (FlauBERT model)"),oDe.forEach(t),Owr=i(fe),AE=n(fe,"LI",{});var rDe=s(AE);IMe=n(rDe,"STRONG",{});var PRt=s(IMe);Vwr=r(PRt,"funnel"),PRt.forEach(t),Xwr=r(rDe," \u2014 "),FY=n(rDe,"A",{href:!0});var BRt=s(FY);zwr=r(BRt,"TFFunnelForMaskedLM"),BRt.forEach(t),Qwr=r(rDe," (Funnel Transformer model)"),rDe.forEach(t),Wwr=i(fe),LE=n(fe,"LI",{});var tDe=s(LE);NMe=n(tDe,"STRONG",{});var IRt=s(NMe);Hwr=r(IRt,"layoutlm"),IRt.forEach(t),Uwr=r(tDe," \u2014 "),TY=n(tDe,"A",{href:!0});var NRt=s(TY);Jwr=r(NRt,"TFLayoutLMForMaskedLM"),NRt.forEach(t),Ywr=r(tDe," (LayoutLM model)"),tDe.forEach(t),Kwr=i(fe),yE=n(fe,"LI",{});var aDe=s(yE);qMe=n(aDe,"STRONG",{});var qRt=s(qMe);Zwr=r(qRt,"longformer"),qRt.forEach(t),eAr=r(aDe," \u2014 "),MY=n(aDe,"A",{href:!0});var jRt=s(MY);oAr=r(jRt,"TFLongformerForMaskedLM"),jRt.forEach(t),rAr=r(aDe," (Longformer model)"),aDe.forEach(t),tAr=i(fe),xE=n(fe,"LI",{});var nDe=s(xE);jMe=n(nDe,"STRONG",{});var DRt=s(jMe);aAr=r(DRt,"mobilebert"),DRt.forEach(t),nAr=r(nDe," \u2014 "),EY=n(nDe,"A",{href:!0});var GRt=s(EY);sAr=r(GRt,"TFMobileBertForMaskedLM"),GRt.forEach(t),lAr=r(nDe," (MobileBERT model)"),nDe.forEach(t),iAr=i(fe),$E=n(fe,"LI",{});var sDe=s($E);DMe=n(sDe,"STRONG",{});var ORt=s(DMe);dAr=r(ORt,"mpnet"),ORt.forEach(t),cAr=r(sDe," \u2014 "),CY=n(sDe,"A",{href:!0});var VRt=s(CY);fAr=r(VRt,"TFMPNetForMaskedLM"),VRt.forEach(t),mAr=r(sDe," (MPNet model)"),sDe.forEach(t),gAr=i(fe),kE=n(fe,"LI",{});var lDe=s(kE);GMe=n(lDe,"STRONG",{});var XRt=s(GMe);hAr=r(XRt,"rembert"),XRt.forEach(t),pAr=r(lDe," \u2014 "),wY=n(lDe,"A",{href:!0});var zRt=s(wY);_Ar=r(zRt,"TFRemBertForMaskedLM"),zRt.forEach(t),uAr=r(lDe," (RemBERT model)"),lDe.forEach(t),bAr=i(fe),SE=n(fe,"LI",{});var iDe=s(SE);OMe=n(iDe,"STRONG",{});var QRt=s(OMe);vAr=r(QRt,"roberta"),QRt.forEach(t),FAr=r(iDe," \u2014 "),AY=n(iDe,"A",{href:!0});var WRt=s(AY);TAr=r(WRt,"TFRobertaForMaskedLM"),WRt.forEach(t),MAr=r(iDe," (RoBERTa model)"),iDe.forEach(t),EAr=i(fe),RE=n(fe,"LI",{});var dDe=s(RE);VMe=n(dDe,"STRONG",{});var HRt=s(VMe);CAr=r(HRt,"roformer"),HRt.forEach(t),wAr=r(dDe," \u2014 "),LY=n(dDe,"A",{href:!0});var URt=s(LY);AAr=r(URt,"TFRoFormerForMaskedLM"),URt.forEach(t),LAr=r(dDe," (RoFormer model)"),dDe.forEach(t),yAr=i(fe),PE=n(fe,"LI",{});var cDe=s(PE);XMe=n(cDe,"STRONG",{});var JRt=s(XMe);xAr=r(JRt,"tapas"),JRt.forEach(t),$Ar=r(cDe," \u2014 "),yY=n(cDe,"A",{href:!0});var YRt=s(yY);kAr=r(YRt,"TFTapasForMaskedLM"),YRt.forEach(t),SAr=r(cDe," (TAPAS model)"),cDe.forEach(t),RAr=i(fe),BE=n(fe,"LI",{});var fDe=s(BE);zMe=n(fDe,"STRONG",{});var KRt=s(zMe);PAr=r(KRt,"xlm"),KRt.forEach(t),BAr=r(fDe," \u2014 "),xY=n(fDe,"A",{href:!0});var ZRt=s(xY);IAr=r(ZRt,"TFXLMWithLMHeadModel"),ZRt.forEach(t),NAr=r(fDe," (XLM model)"),fDe.forEach(t),qAr=i(fe),IE=n(fe,"LI",{});var mDe=s(IE);QMe=n(mDe,"STRONG",{});var ePt=s(QMe);jAr=r(ePt,"xlm-roberta"),ePt.forEach(t),DAr=r(mDe," \u2014 "),$Y=n(mDe,"A",{href:!0});var oPt=s($Y);GAr=r(oPt,"TFXLMRobertaForMaskedLM"),oPt.forEach(t),OAr=r(mDe," (XLM-RoBERTa model)"),mDe.forEach(t),fe.forEach(t),VAr=i(Nl),T(NE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Mze=i(f),Tc=n(f,"H2",{class:!0});var xWe=s(Tc);qE=n(xWe,"A",{id:!0,class:!0,href:!0});var rPt=s(qE);WMe=n(rPt,"SPAN",{});var tPt=s(WMe);T(ux.$$.fragment,tPt),tPt.forEach(t),rPt.forEach(t),XAr=i(xWe),HMe=n(xWe,"SPAN",{});var aPt=s(HMe);zAr=r(aPt,"TFAutoModelForSeq2SeqLM"),aPt.forEach(t),xWe.forEach(t),Eze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(bx.$$.fragment,ql),QAr=i(ql),Mc=n(ql,"P",{});var jte=s(Mc);WAr=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=n(jte,"A",{href:!0});var nPt=s(kY);HAr=r(nPt,"from_pretrained()"),nPt.forEach(t),UAr=r(jte," class method or the "),SY=n(jte,"A",{href:!0});var sPt=s(SY);JAr=r(sPt,"from_config()"),sPt.forEach(t),YAr=r(jte,` class
method.`),jte.forEach(t),KAr=i(ql),vx=n(ql,"P",{});var $We=s(vx);ZAr=r($We,"This class cannot be instantiated directly using "),UMe=n($We,"CODE",{});var lPt=s(UMe);e6r=r(lPt,"__init__()"),lPt.forEach(t),o6r=r($We," (throws an error)."),$We.forEach(t),r6r=i(ql),Nt=n(ql,"DIV",{class:!0});var p6=s(Nt);T(Fx.$$.fragment,p6),t6r=i(p6),JMe=n(p6,"P",{});var iPt=s(JMe);a6r=r(iPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iPt.forEach(t),n6r=i(p6),Ec=n(p6,"P",{});var Dte=s(Ec);s6r=r(Dte,`Note:
Loading a model from its configuration file does `),YMe=n(Dte,"STRONG",{});var dPt=s(YMe);l6r=r(dPt,"not"),dPt.forEach(t),i6r=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Dte,"A",{href:!0});var cPt=s(RY);d6r=r(cPt,"from_pretrained()"),cPt.forEach(t),c6r=r(Dte," to load the model weights."),Dte.forEach(t),f6r=i(p6),T(jE.$$.fragment,p6),p6.forEach(t),m6r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(Tx.$$.fragment,jl),g6r=i(jl),KMe=n(jl,"P",{});var fPt=s(KMe);h6r=r(fPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fPt.forEach(t),p6r=i(jl),mn=n(jl,"P",{});var _6=s(mn);_6r=r(_6,"The model class to instantiate is selected based on the "),ZMe=n(_6,"CODE",{});var mPt=s(ZMe);u6r=r(mPt,"model_type"),mPt.forEach(t),b6r=r(_6,` property of the config object (either
passed as an argument or loaded from `),e4e=n(_6,"CODE",{});var gPt=s(e4e);v6r=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),F6r=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(_6,"CODE",{});var hPt=s(o4e);T6r=r(hPt,"pretrained_model_name_or_path"),hPt.forEach(t),M6r=r(_6,":"),_6.forEach(t),E6r=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);DE=n(Ie,"LI",{});var gDe=s(DE);r4e=n(gDe,"STRONG",{});var pPt=s(r4e);C6r=r(pPt,"bart"),pPt.forEach(t),w6r=r(gDe," \u2014 "),PY=n(gDe,"A",{href:!0});var _Pt=s(PY);A6r=r(_Pt,"TFBartForConditionalGeneration"),_Pt.forEach(t),L6r=r(gDe," (BART model)"),gDe.forEach(t),y6r=i(Ie),GE=n(Ie,"LI",{});var hDe=s(GE);t4e=n(hDe,"STRONG",{});var uPt=s(t4e);x6r=r(uPt,"blenderbot"),uPt.forEach(t),$6r=r(hDe," \u2014 "),BY=n(hDe,"A",{href:!0});var bPt=s(BY);k6r=r(bPt,"TFBlenderbotForConditionalGeneration"),bPt.forEach(t),S6r=r(hDe," (Blenderbot model)"),hDe.forEach(t),R6r=i(Ie),OE=n(Ie,"LI",{});var pDe=s(OE);a4e=n(pDe,"STRONG",{});var vPt=s(a4e);P6r=r(vPt,"blenderbot-small"),vPt.forEach(t),B6r=r(pDe," \u2014 "),IY=n(pDe,"A",{href:!0});var FPt=s(IY);I6r=r(FPt,"TFBlenderbotSmallForConditionalGeneration"),FPt.forEach(t),N6r=r(pDe," (BlenderbotSmall model)"),pDe.forEach(t),q6r=i(Ie),VE=n(Ie,"LI",{});var _De=s(VE);n4e=n(_De,"STRONG",{});var TPt=s(n4e);j6r=r(TPt,"encoder-decoder"),TPt.forEach(t),D6r=r(_De," \u2014 "),NY=n(_De,"A",{href:!0});var MPt=s(NY);G6r=r(MPt,"TFEncoderDecoderModel"),MPt.forEach(t),O6r=r(_De," (Encoder decoder model)"),_De.forEach(t),V6r=i(Ie),XE=n(Ie,"LI",{});var uDe=s(XE);s4e=n(uDe,"STRONG",{});var EPt=s(s4e);X6r=r(EPt,"led"),EPt.forEach(t),z6r=r(uDe," \u2014 "),qY=n(uDe,"A",{href:!0});var CPt=s(qY);Q6r=r(CPt,"TFLEDForConditionalGeneration"),CPt.forEach(t),W6r=r(uDe," (LED model)"),uDe.forEach(t),H6r=i(Ie),zE=n(Ie,"LI",{});var bDe=s(zE);l4e=n(bDe,"STRONG",{});var wPt=s(l4e);U6r=r(wPt,"marian"),wPt.forEach(t),J6r=r(bDe," \u2014 "),jY=n(bDe,"A",{href:!0});var APt=s(jY);Y6r=r(APt,"TFMarianMTModel"),APt.forEach(t),K6r=r(bDe," (Marian model)"),bDe.forEach(t),Z6r=i(Ie),QE=n(Ie,"LI",{});var vDe=s(QE);i4e=n(vDe,"STRONG",{});var LPt=s(i4e);eLr=r(LPt,"mbart"),LPt.forEach(t),oLr=r(vDe," \u2014 "),DY=n(vDe,"A",{href:!0});var yPt=s(DY);rLr=r(yPt,"TFMBartForConditionalGeneration"),yPt.forEach(t),tLr=r(vDe," (mBART model)"),vDe.forEach(t),aLr=i(Ie),WE=n(Ie,"LI",{});var FDe=s(WE);d4e=n(FDe,"STRONG",{});var xPt=s(d4e);nLr=r(xPt,"mt5"),xPt.forEach(t),sLr=r(FDe," \u2014 "),GY=n(FDe,"A",{href:!0});var $Pt=s(GY);lLr=r($Pt,"TFMT5ForConditionalGeneration"),$Pt.forEach(t),iLr=r(FDe," (MT5 model)"),FDe.forEach(t),dLr=i(Ie),HE=n(Ie,"LI",{});var TDe=s(HE);c4e=n(TDe,"STRONG",{});var kPt=s(c4e);cLr=r(kPt,"pegasus"),kPt.forEach(t),fLr=r(TDe," \u2014 "),OY=n(TDe,"A",{href:!0});var SPt=s(OY);mLr=r(SPt,"TFPegasusForConditionalGeneration"),SPt.forEach(t),gLr=r(TDe," (Pegasus model)"),TDe.forEach(t),hLr=i(Ie),UE=n(Ie,"LI",{});var MDe=s(UE);f4e=n(MDe,"STRONG",{});var RPt=s(f4e);pLr=r(RPt,"t5"),RPt.forEach(t),_Lr=r(MDe," \u2014 "),VY=n(MDe,"A",{href:!0});var PPt=s(VY);uLr=r(PPt,"TFT5ForConditionalGeneration"),PPt.forEach(t),bLr=r(MDe," (T5 model)"),MDe.forEach(t),Ie.forEach(t),vLr=i(jl),T(JE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Cze=i(f),Cc=n(f,"H2",{class:!0});var kWe=s(Cc);YE=n(kWe,"A",{id:!0,class:!0,href:!0});var BPt=s(YE);m4e=n(BPt,"SPAN",{});var IPt=s(m4e);T(Mx.$$.fragment,IPt),IPt.forEach(t),BPt.forEach(t),FLr=i(kWe),g4e=n(kWe,"SPAN",{});var NPt=s(g4e);TLr=r(NPt,"TFAutoModelForSequenceClassification"),NPt.forEach(t),kWe.forEach(t),wze=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(Ex.$$.fragment,Dl),MLr=i(Dl),wc=n(Dl,"P",{});var Gte=s(wc);ELr=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XY=n(Gte,"A",{href:!0});var qPt=s(XY);CLr=r(qPt,"from_pretrained()"),qPt.forEach(t),wLr=r(Gte," class method or the "),zY=n(Gte,"A",{href:!0});var jPt=s(zY);ALr=r(jPt,"from_config()"),jPt.forEach(t),LLr=r(Gte,` class
method.`),Gte.forEach(t),yLr=i(Dl),Cx=n(Dl,"P",{});var SWe=s(Cx);xLr=r(SWe,"This class cannot be instantiated directly using "),h4e=n(SWe,"CODE",{});var DPt=s(h4e);$Lr=r(DPt,"__init__()"),DPt.forEach(t),kLr=r(SWe," (throws an error)."),SWe.forEach(t),SLr=i(Dl),qt=n(Dl,"DIV",{class:!0});var u6=s(qt);T(wx.$$.fragment,u6),RLr=i(u6),p4e=n(u6,"P",{});var GPt=s(p4e);PLr=r(GPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GPt.forEach(t),BLr=i(u6),Ac=n(u6,"P",{});var Ote=s(Ac);ILr=r(Ote,`Note:
Loading a model from its configuration file does `),_4e=n(Ote,"STRONG",{});var OPt=s(_4e);NLr=r(OPt,"not"),OPt.forEach(t),qLr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Ote,"A",{href:!0});var VPt=s(QY);jLr=r(VPt,"from_pretrained()"),VPt.forEach(t),DLr=r(Ote," to load the model weights."),Ote.forEach(t),GLr=i(u6),T(KE.$$.fragment,u6),u6.forEach(t),OLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Ax.$$.fragment,Gl),VLr=i(Gl),u4e=n(Gl,"P",{});var XPt=s(u4e);XLr=r(XPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XPt.forEach(t),zLr=i(Gl),gn=n(Gl,"P",{});var b6=s(gn);QLr=r(b6,"The model class to instantiate is selected based on the "),b4e=n(b6,"CODE",{});var zPt=s(b4e);WLr=r(zPt,"model_type"),zPt.forEach(t),HLr=r(b6,` property of the config object (either
passed as an argument or loaded from `),v4e=n(b6,"CODE",{});var QPt=s(v4e);ULr=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),JLr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(b6,"CODE",{});var WPt=s(F4e);YLr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),KLr=r(b6,":"),b6.forEach(t),ZLr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);ZE=n(ne,"LI",{});var EDe=s(ZE);T4e=n(EDe,"STRONG",{});var HPt=s(T4e);eyr=r(HPt,"albert"),HPt.forEach(t),oyr=r(EDe," \u2014 "),WY=n(EDe,"A",{href:!0});var UPt=s(WY);ryr=r(UPt,"TFAlbertForSequenceClassification"),UPt.forEach(t),tyr=r(EDe," (ALBERT model)"),EDe.forEach(t),ayr=i(ne),eC=n(ne,"LI",{});var CDe=s(eC);M4e=n(CDe,"STRONG",{});var JPt=s(M4e);nyr=r(JPt,"bert"),JPt.forEach(t),syr=r(CDe," \u2014 "),HY=n(CDe,"A",{href:!0});var YPt=s(HY);lyr=r(YPt,"TFBertForSequenceClassification"),YPt.forEach(t),iyr=r(CDe," (BERT model)"),CDe.forEach(t),dyr=i(ne),oC=n(ne,"LI",{});var wDe=s(oC);E4e=n(wDe,"STRONG",{});var KPt=s(E4e);cyr=r(KPt,"camembert"),KPt.forEach(t),fyr=r(wDe," \u2014 "),UY=n(wDe,"A",{href:!0});var ZPt=s(UY);myr=r(ZPt,"TFCamembertForSequenceClassification"),ZPt.forEach(t),gyr=r(wDe," (CamemBERT model)"),wDe.forEach(t),hyr=i(ne),rC=n(ne,"LI",{});var ADe=s(rC);C4e=n(ADe,"STRONG",{});var eBt=s(C4e);pyr=r(eBt,"convbert"),eBt.forEach(t),_yr=r(ADe," \u2014 "),JY=n(ADe,"A",{href:!0});var oBt=s(JY);uyr=r(oBt,"TFConvBertForSequenceClassification"),oBt.forEach(t),byr=r(ADe," (ConvBERT model)"),ADe.forEach(t),vyr=i(ne),tC=n(ne,"LI",{});var LDe=s(tC);w4e=n(LDe,"STRONG",{});var rBt=s(w4e);Fyr=r(rBt,"ctrl"),rBt.forEach(t),Tyr=r(LDe," \u2014 "),YY=n(LDe,"A",{href:!0});var tBt=s(YY);Myr=r(tBt,"TFCTRLForSequenceClassification"),tBt.forEach(t),Eyr=r(LDe," (CTRL model)"),LDe.forEach(t),Cyr=i(ne),aC=n(ne,"LI",{});var yDe=s(aC);A4e=n(yDe,"STRONG",{});var aBt=s(A4e);wyr=r(aBt,"deberta"),aBt.forEach(t),Ayr=r(yDe," \u2014 "),KY=n(yDe,"A",{href:!0});var nBt=s(KY);Lyr=r(nBt,"TFDebertaForSequenceClassification"),nBt.forEach(t),yyr=r(yDe," (DeBERTa model)"),yDe.forEach(t),xyr=i(ne),nC=n(ne,"LI",{});var xDe=s(nC);L4e=n(xDe,"STRONG",{});var sBt=s(L4e);$yr=r(sBt,"deberta-v2"),sBt.forEach(t),kyr=r(xDe," \u2014 "),ZY=n(xDe,"A",{href:!0});var lBt=s(ZY);Syr=r(lBt,"TFDebertaV2ForSequenceClassification"),lBt.forEach(t),Ryr=r(xDe," (DeBERTa-v2 model)"),xDe.forEach(t),Pyr=i(ne),sC=n(ne,"LI",{});var $De=s(sC);y4e=n($De,"STRONG",{});var iBt=s(y4e);Byr=r(iBt,"distilbert"),iBt.forEach(t),Iyr=r($De," \u2014 "),eK=n($De,"A",{href:!0});var dBt=s(eK);Nyr=r(dBt,"TFDistilBertForSequenceClassification"),dBt.forEach(t),qyr=r($De," (DistilBERT model)"),$De.forEach(t),jyr=i(ne),lC=n(ne,"LI",{});var kDe=s(lC);x4e=n(kDe,"STRONG",{});var cBt=s(x4e);Dyr=r(cBt,"electra"),cBt.forEach(t),Gyr=r(kDe," \u2014 "),oK=n(kDe,"A",{href:!0});var fBt=s(oK);Oyr=r(fBt,"TFElectraForSequenceClassification"),fBt.forEach(t),Vyr=r(kDe," (ELECTRA model)"),kDe.forEach(t),Xyr=i(ne),iC=n(ne,"LI",{});var SDe=s(iC);$4e=n(SDe,"STRONG",{});var mBt=s($4e);zyr=r(mBt,"flaubert"),mBt.forEach(t),Qyr=r(SDe," \u2014 "),rK=n(SDe,"A",{href:!0});var gBt=s(rK);Wyr=r(gBt,"TFFlaubertForSequenceClassification"),gBt.forEach(t),Hyr=r(SDe," (FlauBERT model)"),SDe.forEach(t),Uyr=i(ne),dC=n(ne,"LI",{});var RDe=s(dC);k4e=n(RDe,"STRONG",{});var hBt=s(k4e);Jyr=r(hBt,"funnel"),hBt.forEach(t),Yyr=r(RDe," \u2014 "),tK=n(RDe,"A",{href:!0});var pBt=s(tK);Kyr=r(pBt,"TFFunnelForSequenceClassification"),pBt.forEach(t),Zyr=r(RDe," (Funnel Transformer model)"),RDe.forEach(t),e9r=i(ne),cC=n(ne,"LI",{});var PDe=s(cC);S4e=n(PDe,"STRONG",{});var _Bt=s(S4e);o9r=r(_Bt,"gpt2"),_Bt.forEach(t),r9r=r(PDe," \u2014 "),aK=n(PDe,"A",{href:!0});var uBt=s(aK);t9r=r(uBt,"TFGPT2ForSequenceClassification"),uBt.forEach(t),a9r=r(PDe," (OpenAI GPT-2 model)"),PDe.forEach(t),n9r=i(ne),fC=n(ne,"LI",{});var BDe=s(fC);R4e=n(BDe,"STRONG",{});var bBt=s(R4e);s9r=r(bBt,"gptj"),bBt.forEach(t),l9r=r(BDe," \u2014 "),nK=n(BDe,"A",{href:!0});var vBt=s(nK);i9r=r(vBt,"TFGPTJForSequenceClassification"),vBt.forEach(t),d9r=r(BDe," (GPT-J model)"),BDe.forEach(t),c9r=i(ne),mC=n(ne,"LI",{});var IDe=s(mC);P4e=n(IDe,"STRONG",{});var FBt=s(P4e);f9r=r(FBt,"layoutlm"),FBt.forEach(t),m9r=r(IDe," \u2014 "),sK=n(IDe,"A",{href:!0});var TBt=s(sK);g9r=r(TBt,"TFLayoutLMForSequenceClassification"),TBt.forEach(t),h9r=r(IDe," (LayoutLM model)"),IDe.forEach(t),p9r=i(ne),gC=n(ne,"LI",{});var NDe=s(gC);B4e=n(NDe,"STRONG",{});var MBt=s(B4e);_9r=r(MBt,"longformer"),MBt.forEach(t),u9r=r(NDe," \u2014 "),lK=n(NDe,"A",{href:!0});var EBt=s(lK);b9r=r(EBt,"TFLongformerForSequenceClassification"),EBt.forEach(t),v9r=r(NDe," (Longformer model)"),NDe.forEach(t),F9r=i(ne),hC=n(ne,"LI",{});var qDe=s(hC);I4e=n(qDe,"STRONG",{});var CBt=s(I4e);T9r=r(CBt,"mobilebert"),CBt.forEach(t),M9r=r(qDe," \u2014 "),iK=n(qDe,"A",{href:!0});var wBt=s(iK);E9r=r(wBt,"TFMobileBertForSequenceClassification"),wBt.forEach(t),C9r=r(qDe," (MobileBERT model)"),qDe.forEach(t),w9r=i(ne),pC=n(ne,"LI",{});var jDe=s(pC);N4e=n(jDe,"STRONG",{});var ABt=s(N4e);A9r=r(ABt,"mpnet"),ABt.forEach(t),L9r=r(jDe," \u2014 "),dK=n(jDe,"A",{href:!0});var LBt=s(dK);y9r=r(LBt,"TFMPNetForSequenceClassification"),LBt.forEach(t),x9r=r(jDe," (MPNet model)"),jDe.forEach(t),$9r=i(ne),_C=n(ne,"LI",{});var DDe=s(_C);q4e=n(DDe,"STRONG",{});var yBt=s(q4e);k9r=r(yBt,"openai-gpt"),yBt.forEach(t),S9r=r(DDe," \u2014 "),cK=n(DDe,"A",{href:!0});var xBt=s(cK);R9r=r(xBt,"TFOpenAIGPTForSequenceClassification"),xBt.forEach(t),P9r=r(DDe," (OpenAI GPT model)"),DDe.forEach(t),B9r=i(ne),uC=n(ne,"LI",{});var GDe=s(uC);j4e=n(GDe,"STRONG",{});var $Bt=s(j4e);I9r=r($Bt,"rembert"),$Bt.forEach(t),N9r=r(GDe," \u2014 "),fK=n(GDe,"A",{href:!0});var kBt=s(fK);q9r=r(kBt,"TFRemBertForSequenceClassification"),kBt.forEach(t),j9r=r(GDe," (RemBERT model)"),GDe.forEach(t),D9r=i(ne),bC=n(ne,"LI",{});var ODe=s(bC);D4e=n(ODe,"STRONG",{});var SBt=s(D4e);G9r=r(SBt,"roberta"),SBt.forEach(t),O9r=r(ODe," \u2014 "),mK=n(ODe,"A",{href:!0});var RBt=s(mK);V9r=r(RBt,"TFRobertaForSequenceClassification"),RBt.forEach(t),X9r=r(ODe," (RoBERTa model)"),ODe.forEach(t),z9r=i(ne),vC=n(ne,"LI",{});var VDe=s(vC);G4e=n(VDe,"STRONG",{});var PBt=s(G4e);Q9r=r(PBt,"roformer"),PBt.forEach(t),W9r=r(VDe," \u2014 "),gK=n(VDe,"A",{href:!0});var BBt=s(gK);H9r=r(BBt,"TFRoFormerForSequenceClassification"),BBt.forEach(t),U9r=r(VDe," (RoFormer model)"),VDe.forEach(t),J9r=i(ne),FC=n(ne,"LI",{});var XDe=s(FC);O4e=n(XDe,"STRONG",{});var IBt=s(O4e);Y9r=r(IBt,"tapas"),IBt.forEach(t),K9r=r(XDe," \u2014 "),hK=n(XDe,"A",{href:!0});var NBt=s(hK);Z9r=r(NBt,"TFTapasForSequenceClassification"),NBt.forEach(t),exr=r(XDe," (TAPAS model)"),XDe.forEach(t),oxr=i(ne),TC=n(ne,"LI",{});var zDe=s(TC);V4e=n(zDe,"STRONG",{});var qBt=s(V4e);rxr=r(qBt,"transfo-xl"),qBt.forEach(t),txr=r(zDe," \u2014 "),pK=n(zDe,"A",{href:!0});var jBt=s(pK);axr=r(jBt,"TFTransfoXLForSequenceClassification"),jBt.forEach(t),nxr=r(zDe," (Transformer-XL model)"),zDe.forEach(t),sxr=i(ne),MC=n(ne,"LI",{});var QDe=s(MC);X4e=n(QDe,"STRONG",{});var DBt=s(X4e);lxr=r(DBt,"xlm"),DBt.forEach(t),ixr=r(QDe," \u2014 "),_K=n(QDe,"A",{href:!0});var GBt=s(_K);dxr=r(GBt,"TFXLMForSequenceClassification"),GBt.forEach(t),cxr=r(QDe," (XLM model)"),QDe.forEach(t),fxr=i(ne),EC=n(ne,"LI",{});var WDe=s(EC);z4e=n(WDe,"STRONG",{});var OBt=s(z4e);mxr=r(OBt,"xlm-roberta"),OBt.forEach(t),gxr=r(WDe," \u2014 "),uK=n(WDe,"A",{href:!0});var VBt=s(uK);hxr=r(VBt,"TFXLMRobertaForSequenceClassification"),VBt.forEach(t),pxr=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),_xr=i(ne),CC=n(ne,"LI",{});var HDe=s(CC);Q4e=n(HDe,"STRONG",{});var XBt=s(Q4e);uxr=r(XBt,"xlnet"),XBt.forEach(t),bxr=r(HDe," \u2014 "),bK=n(HDe,"A",{href:!0});var zBt=s(bK);vxr=r(zBt,"TFXLNetForSequenceClassification"),zBt.forEach(t),Fxr=r(HDe," (XLNet model)"),HDe.forEach(t),ne.forEach(t),Txr=i(Gl),T(wC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Aze=i(f),Lc=n(f,"H2",{class:!0});var RWe=s(Lc);AC=n(RWe,"A",{id:!0,class:!0,href:!0});var QBt=s(AC);W4e=n(QBt,"SPAN",{});var WBt=s(W4e);T(Lx.$$.fragment,WBt),WBt.forEach(t),QBt.forEach(t),Mxr=i(RWe),H4e=n(RWe,"SPAN",{});var HBt=s(H4e);Exr=r(HBt,"TFAutoModelForMultipleChoice"),HBt.forEach(t),RWe.forEach(t),Lze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(yx.$$.fragment,Ol),Cxr=i(Ol),yc=n(Ol,"P",{});var Vte=s(yc);wxr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vK=n(Vte,"A",{href:!0});var UBt=s(vK);Axr=r(UBt,"from_pretrained()"),UBt.forEach(t),Lxr=r(Vte," class method or the "),FK=n(Vte,"A",{href:!0});var JBt=s(FK);yxr=r(JBt,"from_config()"),JBt.forEach(t),xxr=r(Vte,` class
method.`),Vte.forEach(t),$xr=i(Ol),xx=n(Ol,"P",{});var PWe=s(xx);kxr=r(PWe,"This class cannot be instantiated directly using "),U4e=n(PWe,"CODE",{});var YBt=s(U4e);Sxr=r(YBt,"__init__()"),YBt.forEach(t),Rxr=r(PWe," (throws an error)."),PWe.forEach(t),Pxr=i(Ol),jt=n(Ol,"DIV",{class:!0});var v6=s(jt);T($x.$$.fragment,v6),Bxr=i(v6),J4e=n(v6,"P",{});var KBt=s(J4e);Ixr=r(KBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KBt.forEach(t),Nxr=i(v6),xc=n(v6,"P",{});var Xte=s(xc);qxr=r(Xte,`Note:
Loading a model from its configuration file does `),Y4e=n(Xte,"STRONG",{});var ZBt=s(Y4e);jxr=r(ZBt,"not"),ZBt.forEach(t),Dxr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(Xte,"A",{href:!0});var eIt=s(TK);Gxr=r(eIt,"from_pretrained()"),eIt.forEach(t),Oxr=r(Xte," to load the model weights."),Xte.forEach(t),Vxr=i(v6),T(LC.$$.fragment,v6),v6.forEach(t),Xxr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(kx.$$.fragment,Vl),zxr=i(Vl),K4e=n(Vl,"P",{});var oIt=s(K4e);Qxr=r(oIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oIt.forEach(t),Wxr=i(Vl),hn=n(Vl,"P",{});var F6=s(hn);Hxr=r(F6,"The model class to instantiate is selected based on the "),Z4e=n(F6,"CODE",{});var rIt=s(Z4e);Uxr=r(rIt,"model_type"),rIt.forEach(t),Jxr=r(F6,` property of the config object (either
passed as an argument or loaded from `),eEe=n(F6,"CODE",{});var tIt=s(eEe);Yxr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),Kxr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(F6,"CODE",{});var aIt=s(oEe);Zxr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),e$r=r(F6,":"),F6.forEach(t),o$r=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);yC=n(Fe,"LI",{});var UDe=s(yC);rEe=n(UDe,"STRONG",{});var nIt=s(rEe);r$r=r(nIt,"albert"),nIt.forEach(t),t$r=r(UDe," \u2014 "),MK=n(UDe,"A",{href:!0});var sIt=s(MK);a$r=r(sIt,"TFAlbertForMultipleChoice"),sIt.forEach(t),n$r=r(UDe," (ALBERT model)"),UDe.forEach(t),s$r=i(Fe),xC=n(Fe,"LI",{});var JDe=s(xC);tEe=n(JDe,"STRONG",{});var lIt=s(tEe);l$r=r(lIt,"bert"),lIt.forEach(t),i$r=r(JDe," \u2014 "),EK=n(JDe,"A",{href:!0});var iIt=s(EK);d$r=r(iIt,"TFBertForMultipleChoice"),iIt.forEach(t),c$r=r(JDe," (BERT model)"),JDe.forEach(t),f$r=i(Fe),$C=n(Fe,"LI",{});var YDe=s($C);aEe=n(YDe,"STRONG",{});var dIt=s(aEe);m$r=r(dIt,"camembert"),dIt.forEach(t),g$r=r(YDe," \u2014 "),CK=n(YDe,"A",{href:!0});var cIt=s(CK);h$r=r(cIt,"TFCamembertForMultipleChoice"),cIt.forEach(t),p$r=r(YDe," (CamemBERT model)"),YDe.forEach(t),_$r=i(Fe),kC=n(Fe,"LI",{});var KDe=s(kC);nEe=n(KDe,"STRONG",{});var fIt=s(nEe);u$r=r(fIt,"convbert"),fIt.forEach(t),b$r=r(KDe," \u2014 "),wK=n(KDe,"A",{href:!0});var mIt=s(wK);v$r=r(mIt,"TFConvBertForMultipleChoice"),mIt.forEach(t),F$r=r(KDe," (ConvBERT model)"),KDe.forEach(t),T$r=i(Fe),SC=n(Fe,"LI",{});var ZDe=s(SC);sEe=n(ZDe,"STRONG",{});var gIt=s(sEe);M$r=r(gIt,"distilbert"),gIt.forEach(t),E$r=r(ZDe," \u2014 "),AK=n(ZDe,"A",{href:!0});var hIt=s(AK);C$r=r(hIt,"TFDistilBertForMultipleChoice"),hIt.forEach(t),w$r=r(ZDe," (DistilBERT model)"),ZDe.forEach(t),A$r=i(Fe),RC=n(Fe,"LI",{});var eGe=s(RC);lEe=n(eGe,"STRONG",{});var pIt=s(lEe);L$r=r(pIt,"electra"),pIt.forEach(t),y$r=r(eGe," \u2014 "),LK=n(eGe,"A",{href:!0});var _It=s(LK);x$r=r(_It,"TFElectraForMultipleChoice"),_It.forEach(t),$$r=r(eGe," (ELECTRA model)"),eGe.forEach(t),k$r=i(Fe),PC=n(Fe,"LI",{});var oGe=s(PC);iEe=n(oGe,"STRONG",{});var uIt=s(iEe);S$r=r(uIt,"flaubert"),uIt.forEach(t),R$r=r(oGe," \u2014 "),yK=n(oGe,"A",{href:!0});var bIt=s(yK);P$r=r(bIt,"TFFlaubertForMultipleChoice"),bIt.forEach(t),B$r=r(oGe," (FlauBERT model)"),oGe.forEach(t),I$r=i(Fe),BC=n(Fe,"LI",{});var rGe=s(BC);dEe=n(rGe,"STRONG",{});var vIt=s(dEe);N$r=r(vIt,"funnel"),vIt.forEach(t),q$r=r(rGe," \u2014 "),xK=n(rGe,"A",{href:!0});var FIt=s(xK);j$r=r(FIt,"TFFunnelForMultipleChoice"),FIt.forEach(t),D$r=r(rGe," (Funnel Transformer model)"),rGe.forEach(t),G$r=i(Fe),IC=n(Fe,"LI",{});var tGe=s(IC);cEe=n(tGe,"STRONG",{});var TIt=s(cEe);O$r=r(TIt,"longformer"),TIt.forEach(t),V$r=r(tGe," \u2014 "),$K=n(tGe,"A",{href:!0});var MIt=s($K);X$r=r(MIt,"TFLongformerForMultipleChoice"),MIt.forEach(t),z$r=r(tGe," (Longformer model)"),tGe.forEach(t),Q$r=i(Fe),NC=n(Fe,"LI",{});var aGe=s(NC);fEe=n(aGe,"STRONG",{});var EIt=s(fEe);W$r=r(EIt,"mobilebert"),EIt.forEach(t),H$r=r(aGe," \u2014 "),kK=n(aGe,"A",{href:!0});var CIt=s(kK);U$r=r(CIt,"TFMobileBertForMultipleChoice"),CIt.forEach(t),J$r=r(aGe," (MobileBERT model)"),aGe.forEach(t),Y$r=i(Fe),qC=n(Fe,"LI",{});var nGe=s(qC);mEe=n(nGe,"STRONG",{});var wIt=s(mEe);K$r=r(wIt,"mpnet"),wIt.forEach(t),Z$r=r(nGe," \u2014 "),SK=n(nGe,"A",{href:!0});var AIt=s(SK);ekr=r(AIt,"TFMPNetForMultipleChoice"),AIt.forEach(t),okr=r(nGe," (MPNet model)"),nGe.forEach(t),rkr=i(Fe),jC=n(Fe,"LI",{});var sGe=s(jC);gEe=n(sGe,"STRONG",{});var LIt=s(gEe);tkr=r(LIt,"rembert"),LIt.forEach(t),akr=r(sGe," \u2014 "),RK=n(sGe,"A",{href:!0});var yIt=s(RK);nkr=r(yIt,"TFRemBertForMultipleChoice"),yIt.forEach(t),skr=r(sGe," (RemBERT model)"),sGe.forEach(t),lkr=i(Fe),DC=n(Fe,"LI",{});var lGe=s(DC);hEe=n(lGe,"STRONG",{});var xIt=s(hEe);ikr=r(xIt,"roberta"),xIt.forEach(t),dkr=r(lGe," \u2014 "),PK=n(lGe,"A",{href:!0});var $It=s(PK);ckr=r($It,"TFRobertaForMultipleChoice"),$It.forEach(t),fkr=r(lGe," (RoBERTa model)"),lGe.forEach(t),mkr=i(Fe),GC=n(Fe,"LI",{});var iGe=s(GC);pEe=n(iGe,"STRONG",{});var kIt=s(pEe);gkr=r(kIt,"roformer"),kIt.forEach(t),hkr=r(iGe," \u2014 "),BK=n(iGe,"A",{href:!0});var SIt=s(BK);pkr=r(SIt,"TFRoFormerForMultipleChoice"),SIt.forEach(t),_kr=r(iGe," (RoFormer model)"),iGe.forEach(t),ukr=i(Fe),OC=n(Fe,"LI",{});var dGe=s(OC);_Ee=n(dGe,"STRONG",{});var RIt=s(_Ee);bkr=r(RIt,"xlm"),RIt.forEach(t),vkr=r(dGe," \u2014 "),IK=n(dGe,"A",{href:!0});var PIt=s(IK);Fkr=r(PIt,"TFXLMForMultipleChoice"),PIt.forEach(t),Tkr=r(dGe," (XLM model)"),dGe.forEach(t),Mkr=i(Fe),VC=n(Fe,"LI",{});var cGe=s(VC);uEe=n(cGe,"STRONG",{});var BIt=s(uEe);Ekr=r(BIt,"xlm-roberta"),BIt.forEach(t),Ckr=r(cGe," \u2014 "),NK=n(cGe,"A",{href:!0});var IIt=s(NK);wkr=r(IIt,"TFXLMRobertaForMultipleChoice"),IIt.forEach(t),Akr=r(cGe," (XLM-RoBERTa model)"),cGe.forEach(t),Lkr=i(Fe),XC=n(Fe,"LI",{});var fGe=s(XC);bEe=n(fGe,"STRONG",{});var NIt=s(bEe);ykr=r(NIt,"xlnet"),NIt.forEach(t),xkr=r(fGe," \u2014 "),qK=n(fGe,"A",{href:!0});var qIt=s(qK);$kr=r(qIt,"TFXLNetForMultipleChoice"),qIt.forEach(t),kkr=r(fGe," (XLNet model)"),fGe.forEach(t),Fe.forEach(t),Skr=i(Vl),T(zC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),yze=i(f),$c=n(f,"H2",{class:!0});var BWe=s($c);QC=n(BWe,"A",{id:!0,class:!0,href:!0});var jIt=s(QC);vEe=n(jIt,"SPAN",{});var DIt=s(vEe);T(Sx.$$.fragment,DIt),DIt.forEach(t),jIt.forEach(t),Rkr=i(BWe),FEe=n(BWe,"SPAN",{});var GIt=s(FEe);Pkr=r(GIt,"TFAutoModelForNextSentencePrediction"),GIt.forEach(t),BWe.forEach(t),xze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(Rx.$$.fragment,Xl),Bkr=i(Xl),kc=n(Xl,"P",{});var zte=s(kc);Ikr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=n(zte,"A",{href:!0});var OIt=s(jK);Nkr=r(OIt,"from_pretrained()"),OIt.forEach(t),qkr=r(zte," class method or the "),DK=n(zte,"A",{href:!0});var VIt=s(DK);jkr=r(VIt,"from_config()"),VIt.forEach(t),Dkr=r(zte,` class
method.`),zte.forEach(t),Gkr=i(Xl),Px=n(Xl,"P",{});var IWe=s(Px);Okr=r(IWe,"This class cannot be instantiated directly using "),TEe=n(IWe,"CODE",{});var XIt=s(TEe);Vkr=r(XIt,"__init__()"),XIt.forEach(t),Xkr=r(IWe," (throws an error)."),IWe.forEach(t),zkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var T6=s(Dt);T(Bx.$$.fragment,T6),Qkr=i(T6),MEe=n(T6,"P",{});var zIt=s(MEe);Wkr=r(zIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zIt.forEach(t),Hkr=i(T6),Sc=n(T6,"P",{});var Qte=s(Sc);Ukr=r(Qte,`Note:
Loading a model from its configuration file does `),EEe=n(Qte,"STRONG",{});var QIt=s(EEe);Jkr=r(QIt,"not"),QIt.forEach(t),Ykr=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(Qte,"A",{href:!0});var WIt=s(GK);Kkr=r(WIt,"from_pretrained()"),WIt.forEach(t),Zkr=r(Qte," to load the model weights."),Qte.forEach(t),eSr=i(T6),T(WC.$$.fragment,T6),T6.forEach(t),oSr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Ix.$$.fragment,zl),rSr=i(zl),CEe=n(zl,"P",{});var HIt=s(CEe);tSr=r(HIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HIt.forEach(t),aSr=i(zl),pn=n(zl,"P",{});var M6=s(pn);nSr=r(M6,"The model class to instantiate is selected based on the "),wEe=n(M6,"CODE",{});var UIt=s(wEe);sSr=r(UIt,"model_type"),UIt.forEach(t),lSr=r(M6,` property of the config object (either
passed as an argument or loaded from `),AEe=n(M6,"CODE",{});var JIt=s(AEe);iSr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),dSr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(M6,"CODE",{});var YIt=s(LEe);cSr=r(YIt,"pretrained_model_name_or_path"),YIt.forEach(t),fSr=r(M6,":"),M6.forEach(t),mSr=i(zl),Nx=n(zl,"UL",{});var NWe=s(Nx);HC=n(NWe,"LI",{});var mGe=s(HC);yEe=n(mGe,"STRONG",{});var KIt=s(yEe);gSr=r(KIt,"bert"),KIt.forEach(t),hSr=r(mGe," \u2014 "),OK=n(mGe,"A",{href:!0});var ZIt=s(OK);pSr=r(ZIt,"TFBertForNextSentencePrediction"),ZIt.forEach(t),_Sr=r(mGe," (BERT model)"),mGe.forEach(t),uSr=i(NWe),UC=n(NWe,"LI",{});var gGe=s(UC);xEe=n(gGe,"STRONG",{});var eNt=s(xEe);bSr=r(eNt,"mobilebert"),eNt.forEach(t),vSr=r(gGe," \u2014 "),VK=n(gGe,"A",{href:!0});var oNt=s(VK);FSr=r(oNt,"TFMobileBertForNextSentencePrediction"),oNt.forEach(t),TSr=r(gGe," (MobileBERT model)"),gGe.forEach(t),NWe.forEach(t),MSr=i(zl),T(JC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),$ze=i(f),Rc=n(f,"H2",{class:!0});var qWe=s(Rc);YC=n(qWe,"A",{id:!0,class:!0,href:!0});var rNt=s(YC);$Ee=n(rNt,"SPAN",{});var tNt=s($Ee);T(qx.$$.fragment,tNt),tNt.forEach(t),rNt.forEach(t),ESr=i(qWe),kEe=n(qWe,"SPAN",{});var aNt=s(kEe);CSr=r(aNt,"TFAutoModelForTableQuestionAnswering"),aNt.forEach(t),qWe.forEach(t),kze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(jx.$$.fragment,Ql),wSr=i(Ql),Pc=n(Ql,"P",{});var Wte=s(Pc);ASr=r(Wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XK=n(Wte,"A",{href:!0});var nNt=s(XK);LSr=r(nNt,"from_pretrained()"),nNt.forEach(t),ySr=r(Wte," class method or the "),zK=n(Wte,"A",{href:!0});var sNt=s(zK);xSr=r(sNt,"from_config()"),sNt.forEach(t),$Sr=r(Wte,` class
method.`),Wte.forEach(t),kSr=i(Ql),Dx=n(Ql,"P",{});var jWe=s(Dx);SSr=r(jWe,"This class cannot be instantiated directly using "),SEe=n(jWe,"CODE",{});var lNt=s(SEe);RSr=r(lNt,"__init__()"),lNt.forEach(t),PSr=r(jWe," (throws an error)."),jWe.forEach(t),BSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var E6=s(Gt);T(Gx.$$.fragment,E6),ISr=i(E6),REe=n(E6,"P",{});var iNt=s(REe);NSr=r(iNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iNt.forEach(t),qSr=i(E6),Bc=n(E6,"P",{});var Hte=s(Bc);jSr=r(Hte,`Note:
Loading a model from its configuration file does `),PEe=n(Hte,"STRONG",{});var dNt=s(PEe);DSr=r(dNt,"not"),dNt.forEach(t),GSr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Hte,"A",{href:!0});var cNt=s(QK);OSr=r(cNt,"from_pretrained()"),cNt.forEach(t),VSr=r(Hte," to load the model weights."),Hte.forEach(t),XSr=i(E6),T(KC.$$.fragment,E6),E6.forEach(t),zSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Ox.$$.fragment,Wl),QSr=i(Wl),BEe=n(Wl,"P",{});var fNt=s(BEe);WSr=r(fNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fNt.forEach(t),HSr=i(Wl),_n=n(Wl,"P",{});var C6=s(_n);USr=r(C6,"The model class to instantiate is selected based on the "),IEe=n(C6,"CODE",{});var mNt=s(IEe);JSr=r(mNt,"model_type"),mNt.forEach(t),YSr=r(C6,` property of the config object (either
passed as an argument or loaded from `),NEe=n(C6,"CODE",{});var gNt=s(NEe);KSr=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),ZSr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(C6,"CODE",{});var hNt=s(qEe);eRr=r(hNt,"pretrained_model_name_or_path"),hNt.forEach(t),oRr=r(C6,":"),C6.forEach(t),rRr=i(Wl),jEe=n(Wl,"UL",{});var pNt=s(jEe);ZC=n(pNt,"LI",{});var hGe=s(ZC);DEe=n(hGe,"STRONG",{});var _Nt=s(DEe);tRr=r(_Nt,"tapas"),_Nt.forEach(t),aRr=r(hGe," \u2014 "),WK=n(hGe,"A",{href:!0});var uNt=s(WK);nRr=r(uNt,"TFTapasForQuestionAnswering"),uNt.forEach(t),sRr=r(hGe," (TAPAS model)"),hGe.forEach(t),pNt.forEach(t),lRr=i(Wl),T(e3.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Sze=i(f),Ic=n(f,"H2",{class:!0});var DWe=s(Ic);o3=n(DWe,"A",{id:!0,class:!0,href:!0});var bNt=s(o3);GEe=n(bNt,"SPAN",{});var vNt=s(GEe);T(Vx.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),iRr=i(DWe),OEe=n(DWe,"SPAN",{});var FNt=s(OEe);dRr=r(FNt,"TFAutoModelForTokenClassification"),FNt.forEach(t),DWe.forEach(t),Rze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Xx.$$.fragment,Hl),cRr=i(Hl),Nc=n(Hl,"P",{});var Ute=s(Nc);fRr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HK=n(Ute,"A",{href:!0});var TNt=s(HK);mRr=r(TNt,"from_pretrained()"),TNt.forEach(t),gRr=r(Ute," class method or the "),UK=n(Ute,"A",{href:!0});var MNt=s(UK);hRr=r(MNt,"from_config()"),MNt.forEach(t),pRr=r(Ute,` class
method.`),Ute.forEach(t),_Rr=i(Hl),zx=n(Hl,"P",{});var GWe=s(zx);uRr=r(GWe,"This class cannot be instantiated directly using "),VEe=n(GWe,"CODE",{});var ENt=s(VEe);bRr=r(ENt,"__init__()"),ENt.forEach(t),vRr=r(GWe," (throws an error)."),GWe.forEach(t),FRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var w6=s(Ot);T(Qx.$$.fragment,w6),TRr=i(w6),XEe=n(w6,"P",{});var CNt=s(XEe);MRr=r(CNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CNt.forEach(t),ERr=i(w6),qc=n(w6,"P",{});var Jte=s(qc);CRr=r(Jte,`Note:
Loading a model from its configuration file does `),zEe=n(Jte,"STRONG",{});var wNt=s(zEe);wRr=r(wNt,"not"),wNt.forEach(t),ARr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Jte,"A",{href:!0});var ANt=s(JK);LRr=r(ANt,"from_pretrained()"),ANt.forEach(t),yRr=r(Jte," to load the model weights."),Jte.forEach(t),xRr=i(w6),T(r3.$$.fragment,w6),w6.forEach(t),$Rr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Wx.$$.fragment,Ul),kRr=i(Ul),QEe=n(Ul,"P",{});var LNt=s(QEe);SRr=r(LNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LNt.forEach(t),RRr=i(Ul),un=n(Ul,"P",{});var A6=s(un);PRr=r(A6,"The model class to instantiate is selected based on the "),WEe=n(A6,"CODE",{});var yNt=s(WEe);BRr=r(yNt,"model_type"),yNt.forEach(t),IRr=r(A6,` property of the config object (either
passed as an argument or loaded from `),HEe=n(A6,"CODE",{});var xNt=s(HEe);NRr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),qRr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(A6,"CODE",{});var $Nt=s(UEe);jRr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),DRr=r(A6,":"),A6.forEach(t),GRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);t3=n(me,"LI",{});var pGe=s(t3);JEe=n(pGe,"STRONG",{});var kNt=s(JEe);ORr=r(kNt,"albert"),kNt.forEach(t),VRr=r(pGe," \u2014 "),YK=n(pGe,"A",{href:!0});var SNt=s(YK);XRr=r(SNt,"TFAlbertForTokenClassification"),SNt.forEach(t),zRr=r(pGe," (ALBERT model)"),pGe.forEach(t),QRr=i(me),a3=n(me,"LI",{});var _Ge=s(a3);YEe=n(_Ge,"STRONG",{});var RNt=s(YEe);WRr=r(RNt,"bert"),RNt.forEach(t),HRr=r(_Ge," \u2014 "),KK=n(_Ge,"A",{href:!0});var PNt=s(KK);URr=r(PNt,"TFBertForTokenClassification"),PNt.forEach(t),JRr=r(_Ge," (BERT model)"),_Ge.forEach(t),YRr=i(me),n3=n(me,"LI",{});var uGe=s(n3);KEe=n(uGe,"STRONG",{});var BNt=s(KEe);KRr=r(BNt,"camembert"),BNt.forEach(t),ZRr=r(uGe," \u2014 "),ZK=n(uGe,"A",{href:!0});var INt=s(ZK);ePr=r(INt,"TFCamembertForTokenClassification"),INt.forEach(t),oPr=r(uGe," (CamemBERT model)"),uGe.forEach(t),rPr=i(me),s3=n(me,"LI",{});var bGe=s(s3);ZEe=n(bGe,"STRONG",{});var NNt=s(ZEe);tPr=r(NNt,"convbert"),NNt.forEach(t),aPr=r(bGe," \u2014 "),eZ=n(bGe,"A",{href:!0});var qNt=s(eZ);nPr=r(qNt,"TFConvBertForTokenClassification"),qNt.forEach(t),sPr=r(bGe," (ConvBERT model)"),bGe.forEach(t),lPr=i(me),l3=n(me,"LI",{});var vGe=s(l3);eCe=n(vGe,"STRONG",{});var jNt=s(eCe);iPr=r(jNt,"deberta"),jNt.forEach(t),dPr=r(vGe," \u2014 "),oZ=n(vGe,"A",{href:!0});var DNt=s(oZ);cPr=r(DNt,"TFDebertaForTokenClassification"),DNt.forEach(t),fPr=r(vGe," (DeBERTa model)"),vGe.forEach(t),mPr=i(me),i3=n(me,"LI",{});var FGe=s(i3);oCe=n(FGe,"STRONG",{});var GNt=s(oCe);gPr=r(GNt,"deberta-v2"),GNt.forEach(t),hPr=r(FGe," \u2014 "),rZ=n(FGe,"A",{href:!0});var ONt=s(rZ);pPr=r(ONt,"TFDebertaV2ForTokenClassification"),ONt.forEach(t),_Pr=r(FGe," (DeBERTa-v2 model)"),FGe.forEach(t),uPr=i(me),d3=n(me,"LI",{});var TGe=s(d3);rCe=n(TGe,"STRONG",{});var VNt=s(rCe);bPr=r(VNt,"distilbert"),VNt.forEach(t),vPr=r(TGe," \u2014 "),tZ=n(TGe,"A",{href:!0});var XNt=s(tZ);FPr=r(XNt,"TFDistilBertForTokenClassification"),XNt.forEach(t),TPr=r(TGe," (DistilBERT model)"),TGe.forEach(t),MPr=i(me),c3=n(me,"LI",{});var MGe=s(c3);tCe=n(MGe,"STRONG",{});var zNt=s(tCe);EPr=r(zNt,"electra"),zNt.forEach(t),CPr=r(MGe," \u2014 "),aZ=n(MGe,"A",{href:!0});var QNt=s(aZ);wPr=r(QNt,"TFElectraForTokenClassification"),QNt.forEach(t),APr=r(MGe," (ELECTRA model)"),MGe.forEach(t),LPr=i(me),f3=n(me,"LI",{});var EGe=s(f3);aCe=n(EGe,"STRONG",{});var WNt=s(aCe);yPr=r(WNt,"flaubert"),WNt.forEach(t),xPr=r(EGe," \u2014 "),nZ=n(EGe,"A",{href:!0});var HNt=s(nZ);$Pr=r(HNt,"TFFlaubertForTokenClassification"),HNt.forEach(t),kPr=r(EGe," (FlauBERT model)"),EGe.forEach(t),SPr=i(me),m3=n(me,"LI",{});var CGe=s(m3);nCe=n(CGe,"STRONG",{});var UNt=s(nCe);RPr=r(UNt,"funnel"),UNt.forEach(t),PPr=r(CGe," \u2014 "),sZ=n(CGe,"A",{href:!0});var JNt=s(sZ);BPr=r(JNt,"TFFunnelForTokenClassification"),JNt.forEach(t),IPr=r(CGe," (Funnel Transformer model)"),CGe.forEach(t),NPr=i(me),g3=n(me,"LI",{});var wGe=s(g3);sCe=n(wGe,"STRONG",{});var YNt=s(sCe);qPr=r(YNt,"layoutlm"),YNt.forEach(t),jPr=r(wGe," \u2014 "),lZ=n(wGe,"A",{href:!0});var KNt=s(lZ);DPr=r(KNt,"TFLayoutLMForTokenClassification"),KNt.forEach(t),GPr=r(wGe," (LayoutLM model)"),wGe.forEach(t),OPr=i(me),h3=n(me,"LI",{});var AGe=s(h3);lCe=n(AGe,"STRONG",{});var ZNt=s(lCe);VPr=r(ZNt,"longformer"),ZNt.forEach(t),XPr=r(AGe," \u2014 "),iZ=n(AGe,"A",{href:!0});var eqt=s(iZ);zPr=r(eqt,"TFLongformerForTokenClassification"),eqt.forEach(t),QPr=r(AGe," (Longformer model)"),AGe.forEach(t),WPr=i(me),p3=n(me,"LI",{});var LGe=s(p3);iCe=n(LGe,"STRONG",{});var oqt=s(iCe);HPr=r(oqt,"mobilebert"),oqt.forEach(t),UPr=r(LGe," \u2014 "),dZ=n(LGe,"A",{href:!0});var rqt=s(dZ);JPr=r(rqt,"TFMobileBertForTokenClassification"),rqt.forEach(t),YPr=r(LGe," (MobileBERT model)"),LGe.forEach(t),KPr=i(me),_3=n(me,"LI",{});var yGe=s(_3);dCe=n(yGe,"STRONG",{});var tqt=s(dCe);ZPr=r(tqt,"mpnet"),tqt.forEach(t),eBr=r(yGe," \u2014 "),cZ=n(yGe,"A",{href:!0});var aqt=s(cZ);oBr=r(aqt,"TFMPNetForTokenClassification"),aqt.forEach(t),rBr=r(yGe," (MPNet model)"),yGe.forEach(t),tBr=i(me),u3=n(me,"LI",{});var xGe=s(u3);cCe=n(xGe,"STRONG",{});var nqt=s(cCe);aBr=r(nqt,"rembert"),nqt.forEach(t),nBr=r(xGe," \u2014 "),fZ=n(xGe,"A",{href:!0});var sqt=s(fZ);sBr=r(sqt,"TFRemBertForTokenClassification"),sqt.forEach(t),lBr=r(xGe," (RemBERT model)"),xGe.forEach(t),iBr=i(me),b3=n(me,"LI",{});var $Ge=s(b3);fCe=n($Ge,"STRONG",{});var lqt=s(fCe);dBr=r(lqt,"roberta"),lqt.forEach(t),cBr=r($Ge," \u2014 "),mZ=n($Ge,"A",{href:!0});var iqt=s(mZ);fBr=r(iqt,"TFRobertaForTokenClassification"),iqt.forEach(t),mBr=r($Ge," (RoBERTa model)"),$Ge.forEach(t),gBr=i(me),v3=n(me,"LI",{});var kGe=s(v3);mCe=n(kGe,"STRONG",{});var dqt=s(mCe);hBr=r(dqt,"roformer"),dqt.forEach(t),pBr=r(kGe," \u2014 "),gZ=n(kGe,"A",{href:!0});var cqt=s(gZ);_Br=r(cqt,"TFRoFormerForTokenClassification"),cqt.forEach(t),uBr=r(kGe," (RoFormer model)"),kGe.forEach(t),bBr=i(me),F3=n(me,"LI",{});var SGe=s(F3);gCe=n(SGe,"STRONG",{});var fqt=s(gCe);vBr=r(fqt,"xlm"),fqt.forEach(t),FBr=r(SGe," \u2014 "),hZ=n(SGe,"A",{href:!0});var mqt=s(hZ);TBr=r(mqt,"TFXLMForTokenClassification"),mqt.forEach(t),MBr=r(SGe," (XLM model)"),SGe.forEach(t),EBr=i(me),T3=n(me,"LI",{});var RGe=s(T3);hCe=n(RGe,"STRONG",{});var gqt=s(hCe);CBr=r(gqt,"xlm-roberta"),gqt.forEach(t),wBr=r(RGe," \u2014 "),pZ=n(RGe,"A",{href:!0});var hqt=s(pZ);ABr=r(hqt,"TFXLMRobertaForTokenClassification"),hqt.forEach(t),LBr=r(RGe," (XLM-RoBERTa model)"),RGe.forEach(t),yBr=i(me),M3=n(me,"LI",{});var PGe=s(M3);pCe=n(PGe,"STRONG",{});var pqt=s(pCe);xBr=r(pqt,"xlnet"),pqt.forEach(t),$Br=r(PGe," \u2014 "),_Z=n(PGe,"A",{href:!0});var _qt=s(_Z);kBr=r(_qt,"TFXLNetForTokenClassification"),_qt.forEach(t),SBr=r(PGe," (XLNet model)"),PGe.forEach(t),me.forEach(t),RBr=i(Ul),T(E3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Pze=i(f),jc=n(f,"H2",{class:!0});var OWe=s(jc);C3=n(OWe,"A",{id:!0,class:!0,href:!0});var uqt=s(C3);_Ce=n(uqt,"SPAN",{});var bqt=s(_Ce);T(Hx.$$.fragment,bqt),bqt.forEach(t),uqt.forEach(t),PBr=i(OWe),uCe=n(OWe,"SPAN",{});var vqt=s(uCe);BBr=r(vqt,"TFAutoModelForQuestionAnswering"),vqt.forEach(t),OWe.forEach(t),Bze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Ux.$$.fragment,Jl),IBr=i(Jl),Dc=n(Jl,"P",{});var Yte=s(Dc);NBr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=n(Yte,"A",{href:!0});var Fqt=s(uZ);qBr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),jBr=r(Yte," class method or the "),bZ=n(Yte,"A",{href:!0});var Tqt=s(bZ);DBr=r(Tqt,"from_config()"),Tqt.forEach(t),GBr=r(Yte,` class
method.`),Yte.forEach(t),OBr=i(Jl),Jx=n(Jl,"P",{});var VWe=s(Jx);VBr=r(VWe,"This class cannot be instantiated directly using "),bCe=n(VWe,"CODE",{});var Mqt=s(bCe);XBr=r(Mqt,"__init__()"),Mqt.forEach(t),zBr=r(VWe," (throws an error)."),VWe.forEach(t),QBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var L6=s(Vt);T(Yx.$$.fragment,L6),WBr=i(L6),vCe=n(L6,"P",{});var Eqt=s(vCe);HBr=r(Eqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eqt.forEach(t),UBr=i(L6),Gc=n(L6,"P",{});var Kte=s(Gc);JBr=r(Kte,`Note:
Loading a model from its configuration file does `),FCe=n(Kte,"STRONG",{});var Cqt=s(FCe);YBr=r(Cqt,"not"),Cqt.forEach(t),KBr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Kte,"A",{href:!0});var wqt=s(vZ);ZBr=r(wqt,"from_pretrained()"),wqt.forEach(t),eIr=r(Kte," to load the model weights."),Kte.forEach(t),oIr=i(L6),T(w3.$$.fragment,L6),L6.forEach(t),rIr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Kx.$$.fragment,Yl),tIr=i(Yl),TCe=n(Yl,"P",{});var Aqt=s(TCe);aIr=r(Aqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Aqt.forEach(t),nIr=i(Yl),bn=n(Yl,"P",{});var y6=s(bn);sIr=r(y6,"The model class to instantiate is selected based on the "),MCe=n(y6,"CODE",{});var Lqt=s(MCe);lIr=r(Lqt,"model_type"),Lqt.forEach(t),iIr=r(y6,` property of the config object (either
passed as an argument or loaded from `),ECe=n(y6,"CODE",{});var yqt=s(ECe);dIr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),cIr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CCe=n(y6,"CODE",{});var xqt=s(CCe);fIr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),mIr=r(y6,":"),y6.forEach(t),gIr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);A3=n(ge,"LI",{});var BGe=s(A3);wCe=n(BGe,"STRONG",{});var $qt=s(wCe);hIr=r($qt,"albert"),$qt.forEach(t),pIr=r(BGe," \u2014 "),FZ=n(BGe,"A",{href:!0});var kqt=s(FZ);_Ir=r(kqt,"TFAlbertForQuestionAnswering"),kqt.forEach(t),uIr=r(BGe," (ALBERT model)"),BGe.forEach(t),bIr=i(ge),L3=n(ge,"LI",{});var IGe=s(L3);ACe=n(IGe,"STRONG",{});var Sqt=s(ACe);vIr=r(Sqt,"bert"),Sqt.forEach(t),FIr=r(IGe," \u2014 "),TZ=n(IGe,"A",{href:!0});var Rqt=s(TZ);TIr=r(Rqt,"TFBertForQuestionAnswering"),Rqt.forEach(t),MIr=r(IGe," (BERT model)"),IGe.forEach(t),EIr=i(ge),y3=n(ge,"LI",{});var NGe=s(y3);LCe=n(NGe,"STRONG",{});var Pqt=s(LCe);CIr=r(Pqt,"camembert"),Pqt.forEach(t),wIr=r(NGe," \u2014 "),MZ=n(NGe,"A",{href:!0});var Bqt=s(MZ);AIr=r(Bqt,"TFCamembertForQuestionAnswering"),Bqt.forEach(t),LIr=r(NGe," (CamemBERT model)"),NGe.forEach(t),yIr=i(ge),x3=n(ge,"LI",{});var qGe=s(x3);yCe=n(qGe,"STRONG",{});var Iqt=s(yCe);xIr=r(Iqt,"convbert"),Iqt.forEach(t),$Ir=r(qGe," \u2014 "),EZ=n(qGe,"A",{href:!0});var Nqt=s(EZ);kIr=r(Nqt,"TFConvBertForQuestionAnswering"),Nqt.forEach(t),SIr=r(qGe," (ConvBERT model)"),qGe.forEach(t),RIr=i(ge),$3=n(ge,"LI",{});var jGe=s($3);xCe=n(jGe,"STRONG",{});var qqt=s(xCe);PIr=r(qqt,"deberta"),qqt.forEach(t),BIr=r(jGe," \u2014 "),CZ=n(jGe,"A",{href:!0});var jqt=s(CZ);IIr=r(jqt,"TFDebertaForQuestionAnswering"),jqt.forEach(t),NIr=r(jGe," (DeBERTa model)"),jGe.forEach(t),qIr=i(ge),k3=n(ge,"LI",{});var DGe=s(k3);$Ce=n(DGe,"STRONG",{});var Dqt=s($Ce);jIr=r(Dqt,"deberta-v2"),Dqt.forEach(t),DIr=r(DGe," \u2014 "),wZ=n(DGe,"A",{href:!0});var Gqt=s(wZ);GIr=r(Gqt,"TFDebertaV2ForQuestionAnswering"),Gqt.forEach(t),OIr=r(DGe," (DeBERTa-v2 model)"),DGe.forEach(t),VIr=i(ge),S3=n(ge,"LI",{});var GGe=s(S3);kCe=n(GGe,"STRONG",{});var Oqt=s(kCe);XIr=r(Oqt,"distilbert"),Oqt.forEach(t),zIr=r(GGe," \u2014 "),AZ=n(GGe,"A",{href:!0});var Vqt=s(AZ);QIr=r(Vqt,"TFDistilBertForQuestionAnswering"),Vqt.forEach(t),WIr=r(GGe," (DistilBERT model)"),GGe.forEach(t),HIr=i(ge),R3=n(ge,"LI",{});var OGe=s(R3);SCe=n(OGe,"STRONG",{});var Xqt=s(SCe);UIr=r(Xqt,"electra"),Xqt.forEach(t),JIr=r(OGe," \u2014 "),LZ=n(OGe,"A",{href:!0});var zqt=s(LZ);YIr=r(zqt,"TFElectraForQuestionAnswering"),zqt.forEach(t),KIr=r(OGe," (ELECTRA model)"),OGe.forEach(t),ZIr=i(ge),P3=n(ge,"LI",{});var VGe=s(P3);RCe=n(VGe,"STRONG",{});var Qqt=s(RCe);eNr=r(Qqt,"flaubert"),Qqt.forEach(t),oNr=r(VGe," \u2014 "),yZ=n(VGe,"A",{href:!0});var Wqt=s(yZ);rNr=r(Wqt,"TFFlaubertForQuestionAnsweringSimple"),Wqt.forEach(t),tNr=r(VGe," (FlauBERT model)"),VGe.forEach(t),aNr=i(ge),B3=n(ge,"LI",{});var XGe=s(B3);PCe=n(XGe,"STRONG",{});var Hqt=s(PCe);nNr=r(Hqt,"funnel"),Hqt.forEach(t),sNr=r(XGe," \u2014 "),xZ=n(XGe,"A",{href:!0});var Uqt=s(xZ);lNr=r(Uqt,"TFFunnelForQuestionAnswering"),Uqt.forEach(t),iNr=r(XGe," (Funnel Transformer model)"),XGe.forEach(t),dNr=i(ge),I3=n(ge,"LI",{});var zGe=s(I3);BCe=n(zGe,"STRONG",{});var Jqt=s(BCe);cNr=r(Jqt,"gptj"),Jqt.forEach(t),fNr=r(zGe," \u2014 "),$Z=n(zGe,"A",{href:!0});var Yqt=s($Z);mNr=r(Yqt,"TFGPTJForQuestionAnswering"),Yqt.forEach(t),gNr=r(zGe," (GPT-J model)"),zGe.forEach(t),hNr=i(ge),N3=n(ge,"LI",{});var QGe=s(N3);ICe=n(QGe,"STRONG",{});var Kqt=s(ICe);pNr=r(Kqt,"longformer"),Kqt.forEach(t),_Nr=r(QGe," \u2014 "),kZ=n(QGe,"A",{href:!0});var Zqt=s(kZ);uNr=r(Zqt,"TFLongformerForQuestionAnswering"),Zqt.forEach(t),bNr=r(QGe," (Longformer model)"),QGe.forEach(t),vNr=i(ge),q3=n(ge,"LI",{});var WGe=s(q3);NCe=n(WGe,"STRONG",{});var ejt=s(NCe);FNr=r(ejt,"mobilebert"),ejt.forEach(t),TNr=r(WGe," \u2014 "),SZ=n(WGe,"A",{href:!0});var ojt=s(SZ);MNr=r(ojt,"TFMobileBertForQuestionAnswering"),ojt.forEach(t),ENr=r(WGe," (MobileBERT model)"),WGe.forEach(t),CNr=i(ge),j3=n(ge,"LI",{});var HGe=s(j3);qCe=n(HGe,"STRONG",{});var rjt=s(qCe);wNr=r(rjt,"mpnet"),rjt.forEach(t),ANr=r(HGe," \u2014 "),RZ=n(HGe,"A",{href:!0});var tjt=s(RZ);LNr=r(tjt,"TFMPNetForQuestionAnswering"),tjt.forEach(t),yNr=r(HGe," (MPNet model)"),HGe.forEach(t),xNr=i(ge),D3=n(ge,"LI",{});var UGe=s(D3);jCe=n(UGe,"STRONG",{});var ajt=s(jCe);$Nr=r(ajt,"rembert"),ajt.forEach(t),kNr=r(UGe," \u2014 "),PZ=n(UGe,"A",{href:!0});var njt=s(PZ);SNr=r(njt,"TFRemBertForQuestionAnswering"),njt.forEach(t),RNr=r(UGe," (RemBERT model)"),UGe.forEach(t),PNr=i(ge),G3=n(ge,"LI",{});var JGe=s(G3);DCe=n(JGe,"STRONG",{});var sjt=s(DCe);BNr=r(sjt,"roberta"),sjt.forEach(t),INr=r(JGe," \u2014 "),BZ=n(JGe,"A",{href:!0});var ljt=s(BZ);NNr=r(ljt,"TFRobertaForQuestionAnswering"),ljt.forEach(t),qNr=r(JGe," (RoBERTa model)"),JGe.forEach(t),jNr=i(ge),O3=n(ge,"LI",{});var YGe=s(O3);GCe=n(YGe,"STRONG",{});var ijt=s(GCe);DNr=r(ijt,"roformer"),ijt.forEach(t),GNr=r(YGe," \u2014 "),IZ=n(YGe,"A",{href:!0});var djt=s(IZ);ONr=r(djt,"TFRoFormerForQuestionAnswering"),djt.forEach(t),VNr=r(YGe," (RoFormer model)"),YGe.forEach(t),XNr=i(ge),V3=n(ge,"LI",{});var KGe=s(V3);OCe=n(KGe,"STRONG",{});var cjt=s(OCe);zNr=r(cjt,"xlm"),cjt.forEach(t),QNr=r(KGe," \u2014 "),NZ=n(KGe,"A",{href:!0});var fjt=s(NZ);WNr=r(fjt,"TFXLMForQuestionAnsweringSimple"),fjt.forEach(t),HNr=r(KGe," (XLM model)"),KGe.forEach(t),UNr=i(ge),X3=n(ge,"LI",{});var ZGe=s(X3);VCe=n(ZGe,"STRONG",{});var mjt=s(VCe);JNr=r(mjt,"xlm-roberta"),mjt.forEach(t),YNr=r(ZGe," \u2014 "),qZ=n(ZGe,"A",{href:!0});var gjt=s(qZ);KNr=r(gjt,"TFXLMRobertaForQuestionAnswering"),gjt.forEach(t),ZNr=r(ZGe," (XLM-RoBERTa model)"),ZGe.forEach(t),eqr=i(ge),z3=n(ge,"LI",{});var eOe=s(z3);XCe=n(eOe,"STRONG",{});var hjt=s(XCe);oqr=r(hjt,"xlnet"),hjt.forEach(t),rqr=r(eOe," \u2014 "),jZ=n(eOe,"A",{href:!0});var pjt=s(jZ);tqr=r(pjt,"TFXLNetForQuestionAnsweringSimple"),pjt.forEach(t),aqr=r(eOe," (XLNet model)"),eOe.forEach(t),ge.forEach(t),nqr=i(Yl),T(Q3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Ize=i(f),Oc=n(f,"H2",{class:!0});var XWe=s(Oc);W3=n(XWe,"A",{id:!0,class:!0,href:!0});var _jt=s(W3);zCe=n(_jt,"SPAN",{});var ujt=s(zCe);T(Zx.$$.fragment,ujt),ujt.forEach(t),_jt.forEach(t),sqr=i(XWe),QCe=n(XWe,"SPAN",{});var bjt=s(QCe);lqr=r(bjt,"TFAutoModelForVision2Seq"),bjt.forEach(t),XWe.forEach(t),Nze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(e$.$$.fragment,Kl),iqr=i(Kl),Vc=n(Kl,"P",{});var Zte=s(Vc);dqr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=n(Zte,"A",{href:!0});var vjt=s(DZ);cqr=r(vjt,"from_pretrained()"),vjt.forEach(t),fqr=r(Zte," class method or the "),GZ=n(Zte,"A",{href:!0});var Fjt=s(GZ);mqr=r(Fjt,"from_config()"),Fjt.forEach(t),gqr=r(Zte,` class
method.`),Zte.forEach(t),hqr=i(Kl),o$=n(Kl,"P",{});var zWe=s(o$);pqr=r(zWe,"This class cannot be instantiated directly using "),WCe=n(zWe,"CODE",{});var Tjt=s(WCe);_qr=r(Tjt,"__init__()"),Tjt.forEach(t),uqr=r(zWe," (throws an error)."),zWe.forEach(t),bqr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var x6=s(Xt);T(r$.$$.fragment,x6),vqr=i(x6),HCe=n(x6,"P",{});var Mjt=s(HCe);Fqr=r(Mjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mjt.forEach(t),Tqr=i(x6),Xc=n(x6,"P",{});var eae=s(Xc);Mqr=r(eae,`Note:
Loading a model from its configuration file does `),UCe=n(eae,"STRONG",{});var Ejt=s(UCe);Eqr=r(Ejt,"not"),Ejt.forEach(t),Cqr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(eae,"A",{href:!0});var Cjt=s(OZ);wqr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),Aqr=r(eae," to load the model weights."),eae.forEach(t),Lqr=i(x6),T(H3.$$.fragment,x6),x6.forEach(t),yqr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(t$.$$.fragment,Zl),xqr=i(Zl),JCe=n(Zl,"P",{});var wjt=s(JCe);$qr=r(wjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wjt.forEach(t),kqr=i(Zl),vn=n(Zl,"P",{});var $6=s(vn);Sqr=r($6,"The model class to instantiate is selected based on the "),YCe=n($6,"CODE",{});var Ajt=s(YCe);Rqr=r(Ajt,"model_type"),Ajt.forEach(t),Pqr=r($6,` property of the config object (either
passed as an argument or loaded from `),KCe=n($6,"CODE",{});var Ljt=s(KCe);Bqr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),Iqr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n($6,"CODE",{});var yjt=s(ZCe);Nqr=r(yjt,"pretrained_model_name_or_path"),yjt.forEach(t),qqr=r($6,":"),$6.forEach(t),jqr=i(Zl),e3e=n(Zl,"UL",{});var xjt=s(e3e);U3=n(xjt,"LI",{});var oOe=s(U3);o3e=n(oOe,"STRONG",{});var $jt=s(o3e);Dqr=r($jt,"vision-encoder-decoder"),$jt.forEach(t),Gqr=r(oOe," \u2014 "),VZ=n(oOe,"A",{href:!0});var kjt=s(VZ);Oqr=r(kjt,"TFVisionEncoderDecoderModel"),kjt.forEach(t),Vqr=r(oOe," (Vision Encoder decoder model)"),oOe.forEach(t),xjt.forEach(t),Xqr=i(Zl),T(J3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),qze=i(f),zc=n(f,"H2",{class:!0});var QWe=s(zc);Y3=n(QWe,"A",{id:!0,class:!0,href:!0});var Sjt=s(Y3);r3e=n(Sjt,"SPAN",{});var Rjt=s(r3e);T(a$.$$.fragment,Rjt),Rjt.forEach(t),Sjt.forEach(t),zqr=i(QWe),t3e=n(QWe,"SPAN",{});var Pjt=s(t3e);Qqr=r(Pjt,"TFAutoModelForSpeechSeq2Seq"),Pjt.forEach(t),QWe.forEach(t),jze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(n$.$$.fragment,ei),Wqr=i(ei),Qc=n(ei,"P",{});var oae=s(Qc);Hqr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XZ=n(oae,"A",{href:!0});var Bjt=s(XZ);Uqr=r(Bjt,"from_pretrained()"),Bjt.forEach(t),Jqr=r(oae," class method or the "),zZ=n(oae,"A",{href:!0});var Ijt=s(zZ);Yqr=r(Ijt,"from_config()"),Ijt.forEach(t),Kqr=r(oae,` class
method.`),oae.forEach(t),Zqr=i(ei),s$=n(ei,"P",{});var WWe=s(s$);ejr=r(WWe,"This class cannot be instantiated directly using "),a3e=n(WWe,"CODE",{});var Njt=s(a3e);ojr=r(Njt,"__init__()"),Njt.forEach(t),rjr=r(WWe," (throws an error)."),WWe.forEach(t),tjr=i(ei),zt=n(ei,"DIV",{class:!0});var k6=s(zt);T(l$.$$.fragment,k6),ajr=i(k6),n3e=n(k6,"P",{});var qjt=s(n3e);njr=r(qjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qjt.forEach(t),sjr=i(k6),Wc=n(k6,"P",{});var rae=s(Wc);ljr=r(rae,`Note:
Loading a model from its configuration file does `),s3e=n(rae,"STRONG",{});var jjt=s(s3e);ijr=r(jjt,"not"),jjt.forEach(t),djr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(rae,"A",{href:!0});var Djt=s(QZ);cjr=r(Djt,"from_pretrained()"),Djt.forEach(t),fjr=r(rae," to load the model weights."),rae.forEach(t),mjr=i(k6),T(K3.$$.fragment,k6),k6.forEach(t),gjr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(i$.$$.fragment,oi),hjr=i(oi),l3e=n(oi,"P",{});var Gjt=s(l3e);pjr=r(Gjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gjt.forEach(t),_jr=i(oi),Fn=n(oi,"P",{});var S6=s(Fn);ujr=r(S6,"The model class to instantiate is selected based on the "),i3e=n(S6,"CODE",{});var Ojt=s(i3e);bjr=r(Ojt,"model_type"),Ojt.forEach(t),vjr=r(S6,` property of the config object (either
passed as an argument or loaded from `),d3e=n(S6,"CODE",{});var Vjt=s(d3e);Fjr=r(Vjt,"pretrained_model_name_or_path"),Vjt.forEach(t),Tjr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(S6,"CODE",{});var Xjt=s(c3e);Mjr=r(Xjt,"pretrained_model_name_or_path"),Xjt.forEach(t),Ejr=r(S6,":"),S6.forEach(t),Cjr=i(oi),f3e=n(oi,"UL",{});var zjt=s(f3e);Z3=n(zjt,"LI",{});var rOe=s(Z3);m3e=n(rOe,"STRONG",{});var Qjt=s(m3e);wjr=r(Qjt,"speech_to_text"),Qjt.forEach(t),Ajr=r(rOe," \u2014 "),WZ=n(rOe,"A",{href:!0});var Wjt=s(WZ);Ljr=r(Wjt,"TFSpeech2TextForConditionalGeneration"),Wjt.forEach(t),yjr=r(rOe," (Speech2Text model)"),rOe.forEach(t),zjt.forEach(t),xjr=i(oi),T(e5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Dze=i(f),Hc=n(f,"H2",{class:!0});var HWe=s(Hc);o5=n(HWe,"A",{id:!0,class:!0,href:!0});var Hjt=s(o5);g3e=n(Hjt,"SPAN",{});var Ujt=s(g3e);T(d$.$$.fragment,Ujt),Ujt.forEach(t),Hjt.forEach(t),$jr=i(HWe),h3e=n(HWe,"SPAN",{});var Jjt=s(h3e);kjr=r(Jjt,"FlaxAutoModel"),Jjt.forEach(t),HWe.forEach(t),Gze=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(c$.$$.fragment,ri),Sjr=i(ri),Uc=n(ri,"P",{});var tae=s(Uc);Rjr=r(tae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HZ=n(tae,"A",{href:!0});var Yjt=s(HZ);Pjr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),Bjr=r(tae," class method or the "),UZ=n(tae,"A",{href:!0});var Kjt=s(UZ);Ijr=r(Kjt,"from_config()"),Kjt.forEach(t),Njr=r(tae,` class
method.`),tae.forEach(t),qjr=i(ri),f$=n(ri,"P",{});var UWe=s(f$);jjr=r(UWe,"This class cannot be instantiated directly using "),p3e=n(UWe,"CODE",{});var Zjt=s(p3e);Djr=r(Zjt,"__init__()"),Zjt.forEach(t),Gjr=r(UWe," (throws an error)."),UWe.forEach(t),Ojr=i(ri),Qt=n(ri,"DIV",{class:!0});var R6=s(Qt);T(m$.$$.fragment,R6),Vjr=i(R6),_3e=n(R6,"P",{});var eDt=s(_3e);Xjr=r(eDt,"Instantiates one of the base model classes of the library from a configuration."),eDt.forEach(t),zjr=i(R6),Jc=n(R6,"P",{});var aae=s(Jc);Qjr=r(aae,`Note:
Loading a model from its configuration file does `),u3e=n(aae,"STRONG",{});var oDt=s(u3e);Wjr=r(oDt,"not"),oDt.forEach(t),Hjr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(aae,"A",{href:!0});var rDt=s(JZ);Ujr=r(rDt,"from_pretrained()"),rDt.forEach(t),Jjr=r(aae," to load the model weights."),aae.forEach(t),Yjr=i(R6),T(r5.$$.fragment,R6),R6.forEach(t),Kjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(g$.$$.fragment,ti),Zjr=i(ti),b3e=n(ti,"P",{});var tDt=s(b3e);eDr=r(tDt,"Instantiate one of the base model classes of the library from a pretrained model."),tDt.forEach(t),oDr=i(ti),Tn=n(ti,"P",{});var P6=s(Tn);rDr=r(P6,"The model class to instantiate is selected based on the "),v3e=n(P6,"CODE",{});var aDt=s(v3e);tDr=r(aDt,"model_type"),aDt.forEach(t),aDr=r(P6,` property of the config object (either
passed as an argument or loaded from `),F3e=n(P6,"CODE",{});var nDt=s(F3e);nDr=r(nDt,"pretrained_model_name_or_path"),nDt.forEach(t),sDr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T3e=n(P6,"CODE",{});var sDt=s(T3e);lDr=r(sDt,"pretrained_model_name_or_path"),sDt.forEach(t),iDr=r(P6,":"),P6.forEach(t),dDr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);t5=n(ae,"LI",{});var tOe=s(t5);M3e=n(tOe,"STRONG",{});var lDt=s(M3e);cDr=r(lDt,"albert"),lDt.forEach(t),fDr=r(tOe," \u2014 "),YZ=n(tOe,"A",{href:!0});var iDt=s(YZ);mDr=r(iDt,"FlaxAlbertModel"),iDt.forEach(t),gDr=r(tOe," (ALBERT model)"),tOe.forEach(t),hDr=i(ae),a5=n(ae,"LI",{});var aOe=s(a5);E3e=n(aOe,"STRONG",{});var dDt=s(E3e);pDr=r(dDt,"bart"),dDt.forEach(t),_Dr=r(aOe," \u2014 "),KZ=n(aOe,"A",{href:!0});var cDt=s(KZ);uDr=r(cDt,"FlaxBartModel"),cDt.forEach(t),bDr=r(aOe," (BART model)"),aOe.forEach(t),vDr=i(ae),n5=n(ae,"LI",{});var nOe=s(n5);C3e=n(nOe,"STRONG",{});var fDt=s(C3e);FDr=r(fDt,"beit"),fDt.forEach(t),TDr=r(nOe," \u2014 "),ZZ=n(nOe,"A",{href:!0});var mDt=s(ZZ);MDr=r(mDt,"FlaxBeitModel"),mDt.forEach(t),EDr=r(nOe," (BEiT model)"),nOe.forEach(t),CDr=i(ae),s5=n(ae,"LI",{});var sOe=s(s5);w3e=n(sOe,"STRONG",{});var gDt=s(w3e);wDr=r(gDt,"bert"),gDt.forEach(t),ADr=r(sOe," \u2014 "),eee=n(sOe,"A",{href:!0});var hDt=s(eee);LDr=r(hDt,"FlaxBertModel"),hDt.forEach(t),yDr=r(sOe," (BERT model)"),sOe.forEach(t),xDr=i(ae),l5=n(ae,"LI",{});var lOe=s(l5);A3e=n(lOe,"STRONG",{});var pDt=s(A3e);$Dr=r(pDt,"big_bird"),pDt.forEach(t),kDr=r(lOe," \u2014 "),oee=n(lOe,"A",{href:!0});var _Dt=s(oee);SDr=r(_Dt,"FlaxBigBirdModel"),_Dt.forEach(t),RDr=r(lOe," (BigBird model)"),lOe.forEach(t),PDr=i(ae),i5=n(ae,"LI",{});var iOe=s(i5);L3e=n(iOe,"STRONG",{});var uDt=s(L3e);BDr=r(uDt,"blenderbot"),uDt.forEach(t),IDr=r(iOe," \u2014 "),ree=n(iOe,"A",{href:!0});var bDt=s(ree);NDr=r(bDt,"FlaxBlenderbotModel"),bDt.forEach(t),qDr=r(iOe," (Blenderbot model)"),iOe.forEach(t),jDr=i(ae),d5=n(ae,"LI",{});var dOe=s(d5);y3e=n(dOe,"STRONG",{});var vDt=s(y3e);DDr=r(vDt,"blenderbot-small"),vDt.forEach(t),GDr=r(dOe," \u2014 "),tee=n(dOe,"A",{href:!0});var FDt=s(tee);ODr=r(FDt,"FlaxBlenderbotSmallModel"),FDt.forEach(t),VDr=r(dOe," (BlenderbotSmall model)"),dOe.forEach(t),XDr=i(ae),c5=n(ae,"LI",{});var cOe=s(c5);x3e=n(cOe,"STRONG",{});var TDt=s(x3e);zDr=r(TDt,"clip"),TDt.forEach(t),QDr=r(cOe," \u2014 "),aee=n(cOe,"A",{href:!0});var MDt=s(aee);WDr=r(MDt,"FlaxCLIPModel"),MDt.forEach(t),HDr=r(cOe," (CLIP model)"),cOe.forEach(t),UDr=i(ae),f5=n(ae,"LI",{});var fOe=s(f5);$3e=n(fOe,"STRONG",{});var EDt=s($3e);JDr=r(EDt,"distilbert"),EDt.forEach(t),YDr=r(fOe," \u2014 "),nee=n(fOe,"A",{href:!0});var CDt=s(nee);KDr=r(CDt,"FlaxDistilBertModel"),CDt.forEach(t),ZDr=r(fOe," (DistilBERT model)"),fOe.forEach(t),eGr=i(ae),m5=n(ae,"LI",{});var mOe=s(m5);k3e=n(mOe,"STRONG",{});var wDt=s(k3e);oGr=r(wDt,"electra"),wDt.forEach(t),rGr=r(mOe," \u2014 "),see=n(mOe,"A",{href:!0});var ADt=s(see);tGr=r(ADt,"FlaxElectraModel"),ADt.forEach(t),aGr=r(mOe," (ELECTRA model)"),mOe.forEach(t),nGr=i(ae),g5=n(ae,"LI",{});var gOe=s(g5);S3e=n(gOe,"STRONG",{});var LDt=s(S3e);sGr=r(LDt,"gpt2"),LDt.forEach(t),lGr=r(gOe," \u2014 "),lee=n(gOe,"A",{href:!0});var yDt=s(lee);iGr=r(yDt,"FlaxGPT2Model"),yDt.forEach(t),dGr=r(gOe," (OpenAI GPT-2 model)"),gOe.forEach(t),cGr=i(ae),h5=n(ae,"LI",{});var hOe=s(h5);R3e=n(hOe,"STRONG",{});var xDt=s(R3e);fGr=r(xDt,"gpt_neo"),xDt.forEach(t),mGr=r(hOe," \u2014 "),iee=n(hOe,"A",{href:!0});var $Dt=s(iee);gGr=r($Dt,"FlaxGPTNeoModel"),$Dt.forEach(t),hGr=r(hOe," (GPT Neo model)"),hOe.forEach(t),pGr=i(ae),p5=n(ae,"LI",{});var pOe=s(p5);P3e=n(pOe,"STRONG",{});var kDt=s(P3e);_Gr=r(kDt,"gptj"),kDt.forEach(t),uGr=r(pOe," \u2014 "),dee=n(pOe,"A",{href:!0});var SDt=s(dee);bGr=r(SDt,"FlaxGPTJModel"),SDt.forEach(t),vGr=r(pOe," (GPT-J model)"),pOe.forEach(t),FGr=i(ae),_5=n(ae,"LI",{});var _Oe=s(_5);B3e=n(_Oe,"STRONG",{});var RDt=s(B3e);TGr=r(RDt,"longt5"),RDt.forEach(t),MGr=r(_Oe," \u2014 "),cee=n(_Oe,"A",{href:!0});var PDt=s(cee);EGr=r(PDt,"FlaxLongT5Model"),PDt.forEach(t),CGr=r(_Oe," (LongT5 model)"),_Oe.forEach(t),wGr=i(ae),u5=n(ae,"LI",{});var uOe=s(u5);I3e=n(uOe,"STRONG",{});var BDt=s(I3e);AGr=r(BDt,"marian"),BDt.forEach(t),LGr=r(uOe," \u2014 "),fee=n(uOe,"A",{href:!0});var IDt=s(fee);yGr=r(IDt,"FlaxMarianModel"),IDt.forEach(t),xGr=r(uOe," (Marian model)"),uOe.forEach(t),$Gr=i(ae),b5=n(ae,"LI",{});var bOe=s(b5);N3e=n(bOe,"STRONG",{});var NDt=s(N3e);kGr=r(NDt,"mbart"),NDt.forEach(t),SGr=r(bOe," \u2014 "),mee=n(bOe,"A",{href:!0});var qDt=s(mee);RGr=r(qDt,"FlaxMBartModel"),qDt.forEach(t),PGr=r(bOe," (mBART model)"),bOe.forEach(t),BGr=i(ae),v5=n(ae,"LI",{});var vOe=s(v5);q3e=n(vOe,"STRONG",{});var jDt=s(q3e);IGr=r(jDt,"mt5"),jDt.forEach(t),NGr=r(vOe," \u2014 "),gee=n(vOe,"A",{href:!0});var DDt=s(gee);qGr=r(DDt,"FlaxMT5Model"),DDt.forEach(t),jGr=r(vOe," (MT5 model)"),vOe.forEach(t),DGr=i(ae),F5=n(ae,"LI",{});var FOe=s(F5);j3e=n(FOe,"STRONG",{});var GDt=s(j3e);GGr=r(GDt,"opt"),GDt.forEach(t),OGr=r(FOe," \u2014 "),hee=n(FOe,"A",{href:!0});var ODt=s(hee);VGr=r(ODt,"FlaxOPTModel"),ODt.forEach(t),XGr=r(FOe," (OPT model)"),FOe.forEach(t),zGr=i(ae),T5=n(ae,"LI",{});var TOe=s(T5);D3e=n(TOe,"STRONG",{});var VDt=s(D3e);QGr=r(VDt,"pegasus"),VDt.forEach(t),WGr=r(TOe," \u2014 "),pee=n(TOe,"A",{href:!0});var XDt=s(pee);HGr=r(XDt,"FlaxPegasusModel"),XDt.forEach(t),UGr=r(TOe," (Pegasus model)"),TOe.forEach(t),JGr=i(ae),M5=n(ae,"LI",{});var MOe=s(M5);G3e=n(MOe,"STRONG",{});var zDt=s(G3e);YGr=r(zDt,"roberta"),zDt.forEach(t),KGr=r(MOe," \u2014 "),_ee=n(MOe,"A",{href:!0});var QDt=s(_ee);ZGr=r(QDt,"FlaxRobertaModel"),QDt.forEach(t),eOr=r(MOe," (RoBERTa model)"),MOe.forEach(t),oOr=i(ae),E5=n(ae,"LI",{});var EOe=s(E5);O3e=n(EOe,"STRONG",{});var WDt=s(O3e);rOr=r(WDt,"roformer"),WDt.forEach(t),tOr=r(EOe," \u2014 "),uee=n(EOe,"A",{href:!0});var HDt=s(uee);aOr=r(HDt,"FlaxRoFormerModel"),HDt.forEach(t),nOr=r(EOe," (RoFormer model)"),EOe.forEach(t),sOr=i(ae),C5=n(ae,"LI",{});var COe=s(C5);V3e=n(COe,"STRONG",{});var UDt=s(V3e);lOr=r(UDt,"t5"),UDt.forEach(t),iOr=r(COe," \u2014 "),bee=n(COe,"A",{href:!0});var JDt=s(bee);dOr=r(JDt,"FlaxT5Model"),JDt.forEach(t),cOr=r(COe," (T5 model)"),COe.forEach(t),fOr=i(ae),w5=n(ae,"LI",{});var wOe=s(w5);X3e=n(wOe,"STRONG",{});var YDt=s(X3e);mOr=r(YDt,"vision-text-dual-encoder"),YDt.forEach(t),gOr=r(wOe," \u2014 "),vee=n(wOe,"A",{href:!0});var KDt=s(vee);hOr=r(KDt,"FlaxVisionTextDualEncoderModel"),KDt.forEach(t),pOr=r(wOe," (VisionTextDualEncoder model)"),wOe.forEach(t),_Or=i(ae),A5=n(ae,"LI",{});var AOe=s(A5);z3e=n(AOe,"STRONG",{});var ZDt=s(z3e);uOr=r(ZDt,"vit"),ZDt.forEach(t),bOr=r(AOe," \u2014 "),Fee=n(AOe,"A",{href:!0});var eGt=s(Fee);vOr=r(eGt,"FlaxViTModel"),eGt.forEach(t),FOr=r(AOe," (ViT model)"),AOe.forEach(t),TOr=i(ae),L5=n(ae,"LI",{});var LOe=s(L5);Q3e=n(LOe,"STRONG",{});var oGt=s(Q3e);MOr=r(oGt,"wav2vec2"),oGt.forEach(t),EOr=r(LOe," \u2014 "),Tee=n(LOe,"A",{href:!0});var rGt=s(Tee);COr=r(rGt,"FlaxWav2Vec2Model"),rGt.forEach(t),wOr=r(LOe," (Wav2Vec2 model)"),LOe.forEach(t),AOr=i(ae),y5=n(ae,"LI",{});var yOe=s(y5);W3e=n(yOe,"STRONG",{});var tGt=s(W3e);LOr=r(tGt,"xglm"),tGt.forEach(t),yOr=r(yOe," \u2014 "),Mee=n(yOe,"A",{href:!0});var aGt=s(Mee);xOr=r(aGt,"FlaxXGLMModel"),aGt.forEach(t),$Or=r(yOe," (XGLM model)"),yOe.forEach(t),kOr=i(ae),x5=n(ae,"LI",{});var xOe=s(x5);H3e=n(xOe,"STRONG",{});var nGt=s(H3e);SOr=r(nGt,"xlm-roberta"),nGt.forEach(t),ROr=r(xOe," \u2014 "),Eee=n(xOe,"A",{href:!0});var sGt=s(Eee);POr=r(sGt,"FlaxXLMRobertaModel"),sGt.forEach(t),BOr=r(xOe," (XLM-RoBERTa model)"),xOe.forEach(t),ae.forEach(t),IOr=i(ti),T($5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Oze=i(f),Yc=n(f,"H2",{class:!0});var JWe=s(Yc);k5=n(JWe,"A",{id:!0,class:!0,href:!0});var lGt=s(k5);U3e=n(lGt,"SPAN",{});var iGt=s(U3e);T(h$.$$.fragment,iGt),iGt.forEach(t),lGt.forEach(t),NOr=i(JWe),J3e=n(JWe,"SPAN",{});var dGt=s(J3e);qOr=r(dGt,"FlaxAutoModelForCausalLM"),dGt.forEach(t),JWe.forEach(t),Vze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(p$.$$.fragment,ai),jOr=i(ai),Kc=n(ai,"P",{});var nae=s(Kc);DOr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cee=n(nae,"A",{href:!0});var cGt=s(Cee);GOr=r(cGt,"from_pretrained()"),cGt.forEach(t),OOr=r(nae," class method or the "),wee=n(nae,"A",{href:!0});var fGt=s(wee);VOr=r(fGt,"from_config()"),fGt.forEach(t),XOr=r(nae,` class
method.`),nae.forEach(t),zOr=i(ai),_$=n(ai,"P",{});var YWe=s(_$);QOr=r(YWe,"This class cannot be instantiated directly using "),Y3e=n(YWe,"CODE",{});var mGt=s(Y3e);WOr=r(mGt,"__init__()"),mGt.forEach(t),HOr=r(YWe," (throws an error)."),YWe.forEach(t),UOr=i(ai),Wt=n(ai,"DIV",{class:!0});var B6=s(Wt);T(u$.$$.fragment,B6),JOr=i(B6),K3e=n(B6,"P",{});var gGt=s(K3e);YOr=r(gGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gGt.forEach(t),KOr=i(B6),Zc=n(B6,"P",{});var sae=s(Zc);ZOr=r(sae,`Note:
Loading a model from its configuration file does `),Z3e=n(sae,"STRONG",{});var hGt=s(Z3e);eVr=r(hGt,"not"),hGt.forEach(t),oVr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(sae,"A",{href:!0});var pGt=s(Aee);rVr=r(pGt,"from_pretrained()"),pGt.forEach(t),tVr=r(sae," to load the model weights."),sae.forEach(t),aVr=i(B6),T(S5.$$.fragment,B6),B6.forEach(t),nVr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(b$.$$.fragment,ni),sVr=i(ni),e5e=n(ni,"P",{});var _Gt=s(e5e);lVr=r(_Gt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Gt.forEach(t),iVr=i(ni),Mn=n(ni,"P",{});var I6=s(Mn);dVr=r(I6,"The model class to instantiate is selected based on the "),o5e=n(I6,"CODE",{});var uGt=s(o5e);cVr=r(uGt,"model_type"),uGt.forEach(t),fVr=r(I6,` property of the config object (either
passed as an argument or loaded from `),r5e=n(I6,"CODE",{});var bGt=s(r5e);mVr=r(bGt,"pretrained_model_name_or_path"),bGt.forEach(t),gVr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(I6,"CODE",{});var vGt=s(t5e);hVr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),pVr=r(I6,":"),I6.forEach(t),_Vr=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);R5=n(Ne,"LI",{});var $Oe=s(R5);a5e=n($Oe,"STRONG",{});var FGt=s(a5e);uVr=r(FGt,"bart"),FGt.forEach(t),bVr=r($Oe," \u2014 "),Lee=n($Oe,"A",{href:!0});var TGt=s(Lee);vVr=r(TGt,"FlaxBartForCausalLM"),TGt.forEach(t),FVr=r($Oe," (BART model)"),$Oe.forEach(t),TVr=i(Ne),P5=n(Ne,"LI",{});var kOe=s(P5);n5e=n(kOe,"STRONG",{});var MGt=s(n5e);MVr=r(MGt,"bert"),MGt.forEach(t),EVr=r(kOe," \u2014 "),yee=n(kOe,"A",{href:!0});var EGt=s(yee);CVr=r(EGt,"FlaxBertForCausalLM"),EGt.forEach(t),wVr=r(kOe," (BERT model)"),kOe.forEach(t),AVr=i(Ne),B5=n(Ne,"LI",{});var SOe=s(B5);s5e=n(SOe,"STRONG",{});var CGt=s(s5e);LVr=r(CGt,"big_bird"),CGt.forEach(t),yVr=r(SOe," \u2014 "),xee=n(SOe,"A",{href:!0});var wGt=s(xee);xVr=r(wGt,"FlaxBigBirdForCausalLM"),wGt.forEach(t),$Vr=r(SOe," (BigBird model)"),SOe.forEach(t),kVr=i(Ne),I5=n(Ne,"LI",{});var ROe=s(I5);l5e=n(ROe,"STRONG",{});var AGt=s(l5e);SVr=r(AGt,"electra"),AGt.forEach(t),RVr=r(ROe," \u2014 "),$ee=n(ROe,"A",{href:!0});var LGt=s($ee);PVr=r(LGt,"FlaxElectraForCausalLM"),LGt.forEach(t),BVr=r(ROe," (ELECTRA model)"),ROe.forEach(t),IVr=i(Ne),N5=n(Ne,"LI",{});var POe=s(N5);i5e=n(POe,"STRONG",{});var yGt=s(i5e);NVr=r(yGt,"gpt2"),yGt.forEach(t),qVr=r(POe," \u2014 "),kee=n(POe,"A",{href:!0});var xGt=s(kee);jVr=r(xGt,"FlaxGPT2LMHeadModel"),xGt.forEach(t),DVr=r(POe," (OpenAI GPT-2 model)"),POe.forEach(t),GVr=i(Ne),q5=n(Ne,"LI",{});var BOe=s(q5);d5e=n(BOe,"STRONG",{});var $Gt=s(d5e);OVr=r($Gt,"gpt_neo"),$Gt.forEach(t),VVr=r(BOe," \u2014 "),See=n(BOe,"A",{href:!0});var kGt=s(See);XVr=r(kGt,"FlaxGPTNeoForCausalLM"),kGt.forEach(t),zVr=r(BOe," (GPT Neo model)"),BOe.forEach(t),QVr=i(Ne),j5=n(Ne,"LI",{});var IOe=s(j5);c5e=n(IOe,"STRONG",{});var SGt=s(c5e);WVr=r(SGt,"gptj"),SGt.forEach(t),HVr=r(IOe," \u2014 "),Ree=n(IOe,"A",{href:!0});var RGt=s(Ree);UVr=r(RGt,"FlaxGPTJForCausalLM"),RGt.forEach(t),JVr=r(IOe," (GPT-J model)"),IOe.forEach(t),YVr=i(Ne),D5=n(Ne,"LI",{});var NOe=s(D5);f5e=n(NOe,"STRONG",{});var PGt=s(f5e);KVr=r(PGt,"opt"),PGt.forEach(t),ZVr=r(NOe," \u2014 "),Pee=n(NOe,"A",{href:!0});var BGt=s(Pee);eXr=r(BGt,"FlaxOPTForCausalLM"),BGt.forEach(t),oXr=r(NOe," (OPT model)"),NOe.forEach(t),rXr=i(Ne),G5=n(Ne,"LI",{});var qOe=s(G5);m5e=n(qOe,"STRONG",{});var IGt=s(m5e);tXr=r(IGt,"roberta"),IGt.forEach(t),aXr=r(qOe," \u2014 "),Bee=n(qOe,"A",{href:!0});var NGt=s(Bee);nXr=r(NGt,"FlaxRobertaForCausalLM"),NGt.forEach(t),sXr=r(qOe," (RoBERTa model)"),qOe.forEach(t),lXr=i(Ne),O5=n(Ne,"LI",{});var jOe=s(O5);g5e=n(jOe,"STRONG",{});var qGt=s(g5e);iXr=r(qGt,"xglm"),qGt.forEach(t),dXr=r(jOe," \u2014 "),Iee=n(jOe,"A",{href:!0});var jGt=s(Iee);cXr=r(jGt,"FlaxXGLMForCausalLM"),jGt.forEach(t),fXr=r(jOe," (XGLM model)"),jOe.forEach(t),Ne.forEach(t),mXr=i(ni),T(V5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Xze=i(f),ef=n(f,"H2",{class:!0});var KWe=s(ef);X5=n(KWe,"A",{id:!0,class:!0,href:!0});var DGt=s(X5);h5e=n(DGt,"SPAN",{});var GGt=s(h5e);T(v$.$$.fragment,GGt),GGt.forEach(t),DGt.forEach(t),gXr=i(KWe),p5e=n(KWe,"SPAN",{});var OGt=s(p5e);hXr=r(OGt,"FlaxAutoModelForPreTraining"),OGt.forEach(t),KWe.forEach(t),zze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(F$.$$.fragment,si),pXr=i(si),of=n(si,"P",{});var lae=s(of);_Xr=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nee=n(lae,"A",{href:!0});var VGt=s(Nee);uXr=r(VGt,"from_pretrained()"),VGt.forEach(t),bXr=r(lae," class method or the "),qee=n(lae,"A",{href:!0});var XGt=s(qee);vXr=r(XGt,"from_config()"),XGt.forEach(t),FXr=r(lae,` class
method.`),lae.forEach(t),TXr=i(si),T$=n(si,"P",{});var ZWe=s(T$);MXr=r(ZWe,"This class cannot be instantiated directly using "),_5e=n(ZWe,"CODE",{});var zGt=s(_5e);EXr=r(zGt,"__init__()"),zGt.forEach(t),CXr=r(ZWe," (throws an error)."),ZWe.forEach(t),wXr=i(si),Ht=n(si,"DIV",{class:!0});var N6=s(Ht);T(M$.$$.fragment,N6),AXr=i(N6),u5e=n(N6,"P",{});var QGt=s(u5e);LXr=r(QGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QGt.forEach(t),yXr=i(N6),rf=n(N6,"P",{});var iae=s(rf);xXr=r(iae,`Note:
Loading a model from its configuration file does `),b5e=n(iae,"STRONG",{});var WGt=s(b5e);$Xr=r(WGt,"not"),WGt.forEach(t),kXr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(iae,"A",{href:!0});var HGt=s(jee);SXr=r(HGt,"from_pretrained()"),HGt.forEach(t),RXr=r(iae," to load the model weights."),iae.forEach(t),PXr=i(N6),T(z5.$$.fragment,N6),N6.forEach(t),BXr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(E$.$$.fragment,li),IXr=i(li),v5e=n(li,"P",{});var UGt=s(v5e);NXr=r(UGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UGt.forEach(t),qXr=i(li),En=n(li,"P",{});var q6=s(En);jXr=r(q6,"The model class to instantiate is selected based on the "),F5e=n(q6,"CODE",{});var JGt=s(F5e);DXr=r(JGt,"model_type"),JGt.forEach(t),GXr=r(q6,` property of the config object (either
passed as an argument or loaded from `),T5e=n(q6,"CODE",{});var YGt=s(T5e);OXr=r(YGt,"pretrained_model_name_or_path"),YGt.forEach(t),VXr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(q6,"CODE",{});var KGt=s(M5e);XXr=r(KGt,"pretrained_model_name_or_path"),KGt.forEach(t),zXr=r(q6,":"),q6.forEach(t),QXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);Q5=n(we,"LI",{});var DOe=s(Q5);E5e=n(DOe,"STRONG",{});var ZGt=s(E5e);WXr=r(ZGt,"albert"),ZGt.forEach(t),HXr=r(DOe," \u2014 "),Dee=n(DOe,"A",{href:!0});var eOt=s(Dee);UXr=r(eOt,"FlaxAlbertForPreTraining"),eOt.forEach(t),JXr=r(DOe," (ALBERT model)"),DOe.forEach(t),YXr=i(we),W5=n(we,"LI",{});var GOe=s(W5);C5e=n(GOe,"STRONG",{});var oOt=s(C5e);KXr=r(oOt,"bart"),oOt.forEach(t),ZXr=r(GOe," \u2014 "),Gee=n(GOe,"A",{href:!0});var rOt=s(Gee);ezr=r(rOt,"FlaxBartForConditionalGeneration"),rOt.forEach(t),ozr=r(GOe," (BART model)"),GOe.forEach(t),rzr=i(we),H5=n(we,"LI",{});var OOe=s(H5);w5e=n(OOe,"STRONG",{});var tOt=s(w5e);tzr=r(tOt,"bert"),tOt.forEach(t),azr=r(OOe," \u2014 "),Oee=n(OOe,"A",{href:!0});var aOt=s(Oee);nzr=r(aOt,"FlaxBertForPreTraining"),aOt.forEach(t),szr=r(OOe," (BERT model)"),OOe.forEach(t),lzr=i(we),U5=n(we,"LI",{});var VOe=s(U5);A5e=n(VOe,"STRONG",{});var nOt=s(A5e);izr=r(nOt,"big_bird"),nOt.forEach(t),dzr=r(VOe," \u2014 "),Vee=n(VOe,"A",{href:!0});var sOt=s(Vee);czr=r(sOt,"FlaxBigBirdForPreTraining"),sOt.forEach(t),fzr=r(VOe," (BigBird model)"),VOe.forEach(t),mzr=i(we),J5=n(we,"LI",{});var XOe=s(J5);L5e=n(XOe,"STRONG",{});var lOt=s(L5e);gzr=r(lOt,"electra"),lOt.forEach(t),hzr=r(XOe," \u2014 "),Xee=n(XOe,"A",{href:!0});var iOt=s(Xee);pzr=r(iOt,"FlaxElectraForPreTraining"),iOt.forEach(t),_zr=r(XOe," (ELECTRA model)"),XOe.forEach(t),uzr=i(we),Y5=n(we,"LI",{});var zOe=s(Y5);y5e=n(zOe,"STRONG",{});var dOt=s(y5e);bzr=r(dOt,"longt5"),dOt.forEach(t),vzr=r(zOe," \u2014 "),zee=n(zOe,"A",{href:!0});var cOt=s(zee);Fzr=r(cOt,"FlaxLongT5ForConditionalGeneration"),cOt.forEach(t),Tzr=r(zOe," (LongT5 model)"),zOe.forEach(t),Mzr=i(we),K5=n(we,"LI",{});var QOe=s(K5);x5e=n(QOe,"STRONG",{});var fOt=s(x5e);Ezr=r(fOt,"mbart"),fOt.forEach(t),Czr=r(QOe," \u2014 "),Qee=n(QOe,"A",{href:!0});var mOt=s(Qee);wzr=r(mOt,"FlaxMBartForConditionalGeneration"),mOt.forEach(t),Azr=r(QOe," (mBART model)"),QOe.forEach(t),Lzr=i(we),Z5=n(we,"LI",{});var WOe=s(Z5);$5e=n(WOe,"STRONG",{});var gOt=s($5e);yzr=r(gOt,"mt5"),gOt.forEach(t),xzr=r(WOe," \u2014 "),Wee=n(WOe,"A",{href:!0});var hOt=s(Wee);$zr=r(hOt,"FlaxMT5ForConditionalGeneration"),hOt.forEach(t),kzr=r(WOe," (MT5 model)"),WOe.forEach(t),Szr=i(we),e0=n(we,"LI",{});var HOe=s(e0);k5e=n(HOe,"STRONG",{});var pOt=s(k5e);Rzr=r(pOt,"roberta"),pOt.forEach(t),Pzr=r(HOe," \u2014 "),Hee=n(HOe,"A",{href:!0});var _Ot=s(Hee);Bzr=r(_Ot,"FlaxRobertaForMaskedLM"),_Ot.forEach(t),Izr=r(HOe," (RoBERTa model)"),HOe.forEach(t),Nzr=i(we),o0=n(we,"LI",{});var UOe=s(o0);S5e=n(UOe,"STRONG",{});var uOt=s(S5e);qzr=r(uOt,"roformer"),uOt.forEach(t),jzr=r(UOe," \u2014 "),Uee=n(UOe,"A",{href:!0});var bOt=s(Uee);Dzr=r(bOt,"FlaxRoFormerForMaskedLM"),bOt.forEach(t),Gzr=r(UOe," (RoFormer model)"),UOe.forEach(t),Ozr=i(we),r0=n(we,"LI",{});var JOe=s(r0);R5e=n(JOe,"STRONG",{});var vOt=s(R5e);Vzr=r(vOt,"t5"),vOt.forEach(t),Xzr=r(JOe," \u2014 "),Jee=n(JOe,"A",{href:!0});var FOt=s(Jee);zzr=r(FOt,"FlaxT5ForConditionalGeneration"),FOt.forEach(t),Qzr=r(JOe," (T5 model)"),JOe.forEach(t),Wzr=i(we),t0=n(we,"LI",{});var YOe=s(t0);P5e=n(YOe,"STRONG",{});var TOt=s(P5e);Hzr=r(TOt,"wav2vec2"),TOt.forEach(t),Uzr=r(YOe," \u2014 "),Yee=n(YOe,"A",{href:!0});var MOt=s(Yee);Jzr=r(MOt,"FlaxWav2Vec2ForPreTraining"),MOt.forEach(t),Yzr=r(YOe," (Wav2Vec2 model)"),YOe.forEach(t),Kzr=i(we),a0=n(we,"LI",{});var KOe=s(a0);B5e=n(KOe,"STRONG",{});var EOt=s(B5e);Zzr=r(EOt,"xlm-roberta"),EOt.forEach(t),eQr=r(KOe," \u2014 "),Kee=n(KOe,"A",{href:!0});var COt=s(Kee);oQr=r(COt,"FlaxXLMRobertaForMaskedLM"),COt.forEach(t),rQr=r(KOe," (XLM-RoBERTa model)"),KOe.forEach(t),we.forEach(t),tQr=i(li),T(n0.$$.fragment,li),li.forEach(t),si.forEach(t),Qze=i(f),tf=n(f,"H2",{class:!0});var eHe=s(tf);s0=n(eHe,"A",{id:!0,class:!0,href:!0});var wOt=s(s0);I5e=n(wOt,"SPAN",{});var AOt=s(I5e);T(C$.$$.fragment,AOt),AOt.forEach(t),wOt.forEach(t),aQr=i(eHe),N5e=n(eHe,"SPAN",{});var LOt=s(N5e);nQr=r(LOt,"FlaxAutoModelForMaskedLM"),LOt.forEach(t),eHe.forEach(t),Wze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(w$.$$.fragment,ii),sQr=i(ii),af=n(ii,"P",{});var dae=s(af);lQr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Zee=n(dae,"A",{href:!0});var yOt=s(Zee);iQr=r(yOt,"from_pretrained()"),yOt.forEach(t),dQr=r(dae," class method or the "),eoe=n(dae,"A",{href:!0});var xOt=s(eoe);cQr=r(xOt,"from_config()"),xOt.forEach(t),fQr=r(dae,` class
method.`),dae.forEach(t),mQr=i(ii),A$=n(ii,"P",{});var oHe=s(A$);gQr=r(oHe,"This class cannot be instantiated directly using "),q5e=n(oHe,"CODE",{});var $Ot=s(q5e);hQr=r($Ot,"__init__()"),$Ot.forEach(t),pQr=r(oHe," (throws an error)."),oHe.forEach(t),_Qr=i(ii),Ut=n(ii,"DIV",{class:!0});var j6=s(Ut);T(L$.$$.fragment,j6),uQr=i(j6),j5e=n(j6,"P",{});var kOt=s(j5e);bQr=r(kOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kOt.forEach(t),vQr=i(j6),nf=n(j6,"P",{});var cae=s(nf);FQr=r(cae,`Note:
Loading a model from its configuration file does `),D5e=n(cae,"STRONG",{});var SOt=s(D5e);TQr=r(SOt,"not"),SOt.forEach(t),MQr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(cae,"A",{href:!0});var ROt=s(ooe);EQr=r(ROt,"from_pretrained()"),ROt.forEach(t),CQr=r(cae," to load the model weights."),cae.forEach(t),wQr=i(j6),T(l0.$$.fragment,j6),j6.forEach(t),AQr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(y$.$$.fragment,di),LQr=i(di),G5e=n(di,"P",{});var POt=s(G5e);yQr=r(POt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),POt.forEach(t),xQr=i(di),Cn=n(di,"P",{});var D6=s(Cn);$Qr=r(D6,"The model class to instantiate is selected based on the "),O5e=n(D6,"CODE",{});var BOt=s(O5e);kQr=r(BOt,"model_type"),BOt.forEach(t),SQr=r(D6,` property of the config object (either
passed as an argument or loaded from `),V5e=n(D6,"CODE",{});var IOt=s(V5e);RQr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),PQr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(D6,"CODE",{});var NOt=s(X5e);BQr=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),IQr=r(D6,":"),D6.forEach(t),NQr=i(di),$e=n(di,"UL",{});var qe=s($e);i0=n(qe,"LI",{});var ZOe=s(i0);z5e=n(ZOe,"STRONG",{});var qOt=s(z5e);qQr=r(qOt,"albert"),qOt.forEach(t),jQr=r(ZOe," \u2014 "),roe=n(ZOe,"A",{href:!0});var jOt=s(roe);DQr=r(jOt,"FlaxAlbertForMaskedLM"),jOt.forEach(t),GQr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),OQr=i(qe),d0=n(qe,"LI",{});var eVe=s(d0);Q5e=n(eVe,"STRONG",{});var DOt=s(Q5e);VQr=r(DOt,"bart"),DOt.forEach(t),XQr=r(eVe," \u2014 "),toe=n(eVe,"A",{href:!0});var GOt=s(toe);zQr=r(GOt,"FlaxBartForConditionalGeneration"),GOt.forEach(t),QQr=r(eVe," (BART model)"),eVe.forEach(t),WQr=i(qe),c0=n(qe,"LI",{});var oVe=s(c0);W5e=n(oVe,"STRONG",{});var OOt=s(W5e);HQr=r(OOt,"bert"),OOt.forEach(t),UQr=r(oVe," \u2014 "),aoe=n(oVe,"A",{href:!0});var VOt=s(aoe);JQr=r(VOt,"FlaxBertForMaskedLM"),VOt.forEach(t),YQr=r(oVe," (BERT model)"),oVe.forEach(t),KQr=i(qe),f0=n(qe,"LI",{});var rVe=s(f0);H5e=n(rVe,"STRONG",{});var XOt=s(H5e);ZQr=r(XOt,"big_bird"),XOt.forEach(t),eWr=r(rVe," \u2014 "),noe=n(rVe,"A",{href:!0});var zOt=s(noe);oWr=r(zOt,"FlaxBigBirdForMaskedLM"),zOt.forEach(t),rWr=r(rVe," (BigBird model)"),rVe.forEach(t),tWr=i(qe),m0=n(qe,"LI",{});var tVe=s(m0);U5e=n(tVe,"STRONG",{});var QOt=s(U5e);aWr=r(QOt,"distilbert"),QOt.forEach(t),nWr=r(tVe," \u2014 "),soe=n(tVe,"A",{href:!0});var WOt=s(soe);sWr=r(WOt,"FlaxDistilBertForMaskedLM"),WOt.forEach(t),lWr=r(tVe," (DistilBERT model)"),tVe.forEach(t),iWr=i(qe),g0=n(qe,"LI",{});var aVe=s(g0);J5e=n(aVe,"STRONG",{});var HOt=s(J5e);dWr=r(HOt,"electra"),HOt.forEach(t),cWr=r(aVe," \u2014 "),loe=n(aVe,"A",{href:!0});var UOt=s(loe);fWr=r(UOt,"FlaxElectraForMaskedLM"),UOt.forEach(t),mWr=r(aVe," (ELECTRA model)"),aVe.forEach(t),gWr=i(qe),h0=n(qe,"LI",{});var nVe=s(h0);Y5e=n(nVe,"STRONG",{});var JOt=s(Y5e);hWr=r(JOt,"mbart"),JOt.forEach(t),pWr=r(nVe," \u2014 "),ioe=n(nVe,"A",{href:!0});var YOt=s(ioe);_Wr=r(YOt,"FlaxMBartForConditionalGeneration"),YOt.forEach(t),uWr=r(nVe," (mBART model)"),nVe.forEach(t),bWr=i(qe),p0=n(qe,"LI",{});var sVe=s(p0);K5e=n(sVe,"STRONG",{});var KOt=s(K5e);vWr=r(KOt,"roberta"),KOt.forEach(t),FWr=r(sVe," \u2014 "),doe=n(sVe,"A",{href:!0});var ZOt=s(doe);TWr=r(ZOt,"FlaxRobertaForMaskedLM"),ZOt.forEach(t),MWr=r(sVe," (RoBERTa model)"),sVe.forEach(t),EWr=i(qe),_0=n(qe,"LI",{});var lVe=s(_0);Z5e=n(lVe,"STRONG",{});var eVt=s(Z5e);CWr=r(eVt,"roformer"),eVt.forEach(t),wWr=r(lVe," \u2014 "),coe=n(lVe,"A",{href:!0});var oVt=s(coe);AWr=r(oVt,"FlaxRoFormerForMaskedLM"),oVt.forEach(t),LWr=r(lVe," (RoFormer model)"),lVe.forEach(t),yWr=i(qe),u0=n(qe,"LI",{});var iVe=s(u0);e0e=n(iVe,"STRONG",{});var rVt=s(e0e);xWr=r(rVt,"xlm-roberta"),rVt.forEach(t),$Wr=r(iVe," \u2014 "),foe=n(iVe,"A",{href:!0});var tVt=s(foe);kWr=r(tVt,"FlaxXLMRobertaForMaskedLM"),tVt.forEach(t),SWr=r(iVe," (XLM-RoBERTa model)"),iVe.forEach(t),qe.forEach(t),RWr=i(di),T(b0.$$.fragment,di),di.forEach(t),ii.forEach(t),Hze=i(f),sf=n(f,"H2",{class:!0});var rHe=s(sf);v0=n(rHe,"A",{id:!0,class:!0,href:!0});var aVt=s(v0);o0e=n(aVt,"SPAN",{});var nVt=s(o0e);T(x$.$$.fragment,nVt),nVt.forEach(t),aVt.forEach(t),PWr=i(rHe),r0e=n(rHe,"SPAN",{});var sVt=s(r0e);BWr=r(sVt,"FlaxAutoModelForSeq2SeqLM"),sVt.forEach(t),rHe.forEach(t),Uze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T($$.$$.fragment,ci),IWr=i(ci),lf=n(ci,"P",{});var fae=s(lf);NWr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),moe=n(fae,"A",{href:!0});var lVt=s(moe);qWr=r(lVt,"from_pretrained()"),lVt.forEach(t),jWr=r(fae," class method or the "),goe=n(fae,"A",{href:!0});var iVt=s(goe);DWr=r(iVt,"from_config()"),iVt.forEach(t),GWr=r(fae,` class
method.`),fae.forEach(t),OWr=i(ci),k$=n(ci,"P",{});var tHe=s(k$);VWr=r(tHe,"This class cannot be instantiated directly using "),t0e=n(tHe,"CODE",{});var dVt=s(t0e);XWr=r(dVt,"__init__()"),dVt.forEach(t),zWr=r(tHe," (throws an error)."),tHe.forEach(t),QWr=i(ci),Jt=n(ci,"DIV",{class:!0});var G6=s(Jt);T(S$.$$.fragment,G6),WWr=i(G6),a0e=n(G6,"P",{});var cVt=s(a0e);HWr=r(cVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cVt.forEach(t),UWr=i(G6),df=n(G6,"P",{});var mae=s(df);JWr=r(mae,`Note:
Loading a model from its configuration file does `),n0e=n(mae,"STRONG",{});var fVt=s(n0e);YWr=r(fVt,"not"),fVt.forEach(t),KWr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(mae,"A",{href:!0});var mVt=s(hoe);ZWr=r(mVt,"from_pretrained()"),mVt.forEach(t),eHr=r(mae," to load the model weights."),mae.forEach(t),oHr=i(G6),T(F0.$$.fragment,G6),G6.forEach(t),rHr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(R$.$$.fragment,fi),tHr=i(fi),s0e=n(fi,"P",{});var gVt=s(s0e);aHr=r(gVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gVt.forEach(t),nHr=i(fi),wn=n(fi,"P",{});var O6=s(wn);sHr=r(O6,"The model class to instantiate is selected based on the "),l0e=n(O6,"CODE",{});var hVt=s(l0e);lHr=r(hVt,"model_type"),hVt.forEach(t),iHr=r(O6,` property of the config object (either
passed as an argument or loaded from `),i0e=n(O6,"CODE",{});var pVt=s(i0e);dHr=r(pVt,"pretrained_model_name_or_path"),pVt.forEach(t),cHr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(O6,"CODE",{});var _Vt=s(d0e);fHr=r(_Vt,"pretrained_model_name_or_path"),_Vt.forEach(t),mHr=r(O6,":"),O6.forEach(t),gHr=i(fi),ke=n(fi,"UL",{});var je=s(ke);T0=n(je,"LI",{});var dVe=s(T0);c0e=n(dVe,"STRONG",{});var uVt=s(c0e);hHr=r(uVt,"bart"),uVt.forEach(t),pHr=r(dVe," \u2014 "),poe=n(dVe,"A",{href:!0});var bVt=s(poe);_Hr=r(bVt,"FlaxBartForConditionalGeneration"),bVt.forEach(t),uHr=r(dVe," (BART model)"),dVe.forEach(t),bHr=i(je),M0=n(je,"LI",{});var cVe=s(M0);f0e=n(cVe,"STRONG",{});var vVt=s(f0e);vHr=r(vVt,"blenderbot"),vVt.forEach(t),FHr=r(cVe," \u2014 "),_oe=n(cVe,"A",{href:!0});var FVt=s(_oe);THr=r(FVt,"FlaxBlenderbotForConditionalGeneration"),FVt.forEach(t),MHr=r(cVe," (Blenderbot model)"),cVe.forEach(t),EHr=i(je),E0=n(je,"LI",{});var fVe=s(E0);m0e=n(fVe,"STRONG",{});var TVt=s(m0e);CHr=r(TVt,"blenderbot-small"),TVt.forEach(t),wHr=r(fVe," \u2014 "),uoe=n(fVe,"A",{href:!0});var MVt=s(uoe);AHr=r(MVt,"FlaxBlenderbotSmallForConditionalGeneration"),MVt.forEach(t),LHr=r(fVe," (BlenderbotSmall model)"),fVe.forEach(t),yHr=i(je),C0=n(je,"LI",{});var mVe=s(C0);g0e=n(mVe,"STRONG",{});var EVt=s(g0e);xHr=r(EVt,"encoder-decoder"),EVt.forEach(t),$Hr=r(mVe," \u2014 "),boe=n(mVe,"A",{href:!0});var CVt=s(boe);kHr=r(CVt,"FlaxEncoderDecoderModel"),CVt.forEach(t),SHr=r(mVe," (Encoder decoder model)"),mVe.forEach(t),RHr=i(je),w0=n(je,"LI",{});var gVe=s(w0);h0e=n(gVe,"STRONG",{});var wVt=s(h0e);PHr=r(wVt,"longt5"),wVt.forEach(t),BHr=r(gVe," \u2014 "),voe=n(gVe,"A",{href:!0});var AVt=s(voe);IHr=r(AVt,"FlaxLongT5ForConditionalGeneration"),AVt.forEach(t),NHr=r(gVe," (LongT5 model)"),gVe.forEach(t),qHr=i(je),A0=n(je,"LI",{});var hVe=s(A0);p0e=n(hVe,"STRONG",{});var LVt=s(p0e);jHr=r(LVt,"marian"),LVt.forEach(t),DHr=r(hVe," \u2014 "),Foe=n(hVe,"A",{href:!0});var yVt=s(Foe);GHr=r(yVt,"FlaxMarianMTModel"),yVt.forEach(t),OHr=r(hVe," (Marian model)"),hVe.forEach(t),VHr=i(je),L0=n(je,"LI",{});var pVe=s(L0);_0e=n(pVe,"STRONG",{});var xVt=s(_0e);XHr=r(xVt,"mbart"),xVt.forEach(t),zHr=r(pVe," \u2014 "),Toe=n(pVe,"A",{href:!0});var $Vt=s(Toe);QHr=r($Vt,"FlaxMBartForConditionalGeneration"),$Vt.forEach(t),WHr=r(pVe," (mBART model)"),pVe.forEach(t),HHr=i(je),y0=n(je,"LI",{});var _Ve=s(y0);u0e=n(_Ve,"STRONG",{});var kVt=s(u0e);UHr=r(kVt,"mt5"),kVt.forEach(t),JHr=r(_Ve," \u2014 "),Moe=n(_Ve,"A",{href:!0});var SVt=s(Moe);YHr=r(SVt,"FlaxMT5ForConditionalGeneration"),SVt.forEach(t),KHr=r(_Ve," (MT5 model)"),_Ve.forEach(t),ZHr=i(je),x0=n(je,"LI",{});var uVe=s(x0);b0e=n(uVe,"STRONG",{});var RVt=s(b0e);eUr=r(RVt,"pegasus"),RVt.forEach(t),oUr=r(uVe," \u2014 "),Eoe=n(uVe,"A",{href:!0});var PVt=s(Eoe);rUr=r(PVt,"FlaxPegasusForConditionalGeneration"),PVt.forEach(t),tUr=r(uVe," (Pegasus model)"),uVe.forEach(t),aUr=i(je),$0=n(je,"LI",{});var bVe=s($0);v0e=n(bVe,"STRONG",{});var BVt=s(v0e);nUr=r(BVt,"t5"),BVt.forEach(t),sUr=r(bVe," \u2014 "),Coe=n(bVe,"A",{href:!0});var IVt=s(Coe);lUr=r(IVt,"FlaxT5ForConditionalGeneration"),IVt.forEach(t),iUr=r(bVe," (T5 model)"),bVe.forEach(t),je.forEach(t),dUr=i(fi),T(k0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Jze=i(f),cf=n(f,"H2",{class:!0});var aHe=s(cf);S0=n(aHe,"A",{id:!0,class:!0,href:!0});var NVt=s(S0);F0e=n(NVt,"SPAN",{});var qVt=s(F0e);T(P$.$$.fragment,qVt),qVt.forEach(t),NVt.forEach(t),cUr=i(aHe),T0e=n(aHe,"SPAN",{});var jVt=s(T0e);fUr=r(jVt,"FlaxAutoModelForSequenceClassification"),jVt.forEach(t),aHe.forEach(t),Yze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(B$.$$.fragment,mi),mUr=i(mi),ff=n(mi,"P",{});var gae=s(ff);gUr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),woe=n(gae,"A",{href:!0});var DVt=s(woe);hUr=r(DVt,"from_pretrained()"),DVt.forEach(t),pUr=r(gae," class method or the "),Aoe=n(gae,"A",{href:!0});var GVt=s(Aoe);_Ur=r(GVt,"from_config()"),GVt.forEach(t),uUr=r(gae,` class
method.`),gae.forEach(t),bUr=i(mi),I$=n(mi,"P",{});var nHe=s(I$);vUr=r(nHe,"This class cannot be instantiated directly using "),M0e=n(nHe,"CODE",{});var OVt=s(M0e);FUr=r(OVt,"__init__()"),OVt.forEach(t),TUr=r(nHe," (throws an error)."),nHe.forEach(t),MUr=i(mi),Yt=n(mi,"DIV",{class:!0});var V6=s(Yt);T(N$.$$.fragment,V6),EUr=i(V6),E0e=n(V6,"P",{});var VVt=s(E0e);CUr=r(VVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VVt.forEach(t),wUr=i(V6),mf=n(V6,"P",{});var hae=s(mf);AUr=r(hae,`Note:
Loading a model from its configuration file does `),C0e=n(hae,"STRONG",{});var XVt=s(C0e);LUr=r(XVt,"not"),XVt.forEach(t),yUr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(hae,"A",{href:!0});var zVt=s(Loe);xUr=r(zVt,"from_pretrained()"),zVt.forEach(t),$Ur=r(hae," to load the model weights."),hae.forEach(t),kUr=i(V6),T(R0.$$.fragment,V6),V6.forEach(t),SUr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(q$.$$.fragment,gi),RUr=i(gi),w0e=n(gi,"P",{});var QVt=s(w0e);PUr=r(QVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QVt.forEach(t),BUr=i(gi),An=n(gi,"P",{});var X6=s(An);IUr=r(X6,"The model class to instantiate is selected based on the "),A0e=n(X6,"CODE",{});var WVt=s(A0e);NUr=r(WVt,"model_type"),WVt.forEach(t),qUr=r(X6,` property of the config object (either
passed as an argument or loaded from `),L0e=n(X6,"CODE",{});var HVt=s(L0e);jUr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),DUr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(X6,"CODE",{});var UVt=s(y0e);GUr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),OUr=r(X6,":"),X6.forEach(t),VUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);P0=n(De,"LI",{});var vVe=s(P0);x0e=n(vVe,"STRONG",{});var JVt=s(x0e);XUr=r(JVt,"albert"),JVt.forEach(t),zUr=r(vVe," \u2014 "),yoe=n(vVe,"A",{href:!0});var YVt=s(yoe);QUr=r(YVt,"FlaxAlbertForSequenceClassification"),YVt.forEach(t),WUr=r(vVe," (ALBERT model)"),vVe.forEach(t),HUr=i(De),B0=n(De,"LI",{});var FVe=s(B0);$0e=n(FVe,"STRONG",{});var KVt=s($0e);UUr=r(KVt,"bart"),KVt.forEach(t),JUr=r(FVe," \u2014 "),xoe=n(FVe,"A",{href:!0});var ZVt=s(xoe);YUr=r(ZVt,"FlaxBartForSequenceClassification"),ZVt.forEach(t),KUr=r(FVe," (BART model)"),FVe.forEach(t),ZUr=i(De),I0=n(De,"LI",{});var TVe=s(I0);k0e=n(TVe,"STRONG",{});var eXt=s(k0e);eJr=r(eXt,"bert"),eXt.forEach(t),oJr=r(TVe," \u2014 "),$oe=n(TVe,"A",{href:!0});var oXt=s($oe);rJr=r(oXt,"FlaxBertForSequenceClassification"),oXt.forEach(t),tJr=r(TVe," (BERT model)"),TVe.forEach(t),aJr=i(De),N0=n(De,"LI",{});var MVe=s(N0);S0e=n(MVe,"STRONG",{});var rXt=s(S0e);nJr=r(rXt,"big_bird"),rXt.forEach(t),sJr=r(MVe," \u2014 "),koe=n(MVe,"A",{href:!0});var tXt=s(koe);lJr=r(tXt,"FlaxBigBirdForSequenceClassification"),tXt.forEach(t),iJr=r(MVe," (BigBird model)"),MVe.forEach(t),dJr=i(De),q0=n(De,"LI",{});var EVe=s(q0);R0e=n(EVe,"STRONG",{});var aXt=s(R0e);cJr=r(aXt,"distilbert"),aXt.forEach(t),fJr=r(EVe," \u2014 "),Soe=n(EVe,"A",{href:!0});var nXt=s(Soe);mJr=r(nXt,"FlaxDistilBertForSequenceClassification"),nXt.forEach(t),gJr=r(EVe," (DistilBERT model)"),EVe.forEach(t),hJr=i(De),j0=n(De,"LI",{});var CVe=s(j0);P0e=n(CVe,"STRONG",{});var sXt=s(P0e);pJr=r(sXt,"electra"),sXt.forEach(t),_Jr=r(CVe," \u2014 "),Roe=n(CVe,"A",{href:!0});var lXt=s(Roe);uJr=r(lXt,"FlaxElectraForSequenceClassification"),lXt.forEach(t),bJr=r(CVe," (ELECTRA model)"),CVe.forEach(t),vJr=i(De),D0=n(De,"LI",{});var wVe=s(D0);B0e=n(wVe,"STRONG",{});var iXt=s(B0e);FJr=r(iXt,"mbart"),iXt.forEach(t),TJr=r(wVe," \u2014 "),Poe=n(wVe,"A",{href:!0});var dXt=s(Poe);MJr=r(dXt,"FlaxMBartForSequenceClassification"),dXt.forEach(t),EJr=r(wVe," (mBART model)"),wVe.forEach(t),CJr=i(De),G0=n(De,"LI",{});var AVe=s(G0);I0e=n(AVe,"STRONG",{});var cXt=s(I0e);wJr=r(cXt,"roberta"),cXt.forEach(t),AJr=r(AVe," \u2014 "),Boe=n(AVe,"A",{href:!0});var fXt=s(Boe);LJr=r(fXt,"FlaxRobertaForSequenceClassification"),fXt.forEach(t),yJr=r(AVe," (RoBERTa model)"),AVe.forEach(t),xJr=i(De),O0=n(De,"LI",{});var LVe=s(O0);N0e=n(LVe,"STRONG",{});var mXt=s(N0e);$Jr=r(mXt,"roformer"),mXt.forEach(t),kJr=r(LVe," \u2014 "),Ioe=n(LVe,"A",{href:!0});var gXt=s(Ioe);SJr=r(gXt,"FlaxRoFormerForSequenceClassification"),gXt.forEach(t),RJr=r(LVe," (RoFormer model)"),LVe.forEach(t),PJr=i(De),V0=n(De,"LI",{});var yVe=s(V0);q0e=n(yVe,"STRONG",{});var hXt=s(q0e);BJr=r(hXt,"xlm-roberta"),hXt.forEach(t),IJr=r(yVe," \u2014 "),Noe=n(yVe,"A",{href:!0});var pXt=s(Noe);NJr=r(pXt,"FlaxXLMRobertaForSequenceClassification"),pXt.forEach(t),qJr=r(yVe," (XLM-RoBERTa model)"),yVe.forEach(t),De.forEach(t),jJr=i(gi),T(X0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Kze=i(f),gf=n(f,"H2",{class:!0});var sHe=s(gf);z0=n(sHe,"A",{id:!0,class:!0,href:!0});var _Xt=s(z0);j0e=n(_Xt,"SPAN",{});var uXt=s(j0e);T(j$.$$.fragment,uXt),uXt.forEach(t),_Xt.forEach(t),DJr=i(sHe),D0e=n(sHe,"SPAN",{});var bXt=s(D0e);GJr=r(bXt,"FlaxAutoModelForQuestionAnswering"),bXt.forEach(t),sHe.forEach(t),Zze=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(D$.$$.fragment,hi),OJr=i(hi),hf=n(hi,"P",{});var pae=s(hf);VJr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qoe=n(pae,"A",{href:!0});var vXt=s(qoe);XJr=r(vXt,"from_pretrained()"),vXt.forEach(t),zJr=r(pae," class method or the "),joe=n(pae,"A",{href:!0});var FXt=s(joe);QJr=r(FXt,"from_config()"),FXt.forEach(t),WJr=r(pae,` class
method.`),pae.forEach(t),HJr=i(hi),G$=n(hi,"P",{});var lHe=s(G$);UJr=r(lHe,"This class cannot be instantiated directly using "),G0e=n(lHe,"CODE",{});var TXt=s(G0e);JJr=r(TXt,"__init__()"),TXt.forEach(t),YJr=r(lHe," (throws an error)."),lHe.forEach(t),KJr=i(hi),Kt=n(hi,"DIV",{class:!0});var z6=s(Kt);T(O$.$$.fragment,z6),ZJr=i(z6),O0e=n(z6,"P",{});var MXt=s(O0e);eYr=r(MXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MXt.forEach(t),oYr=i(z6),pf=n(z6,"P",{});var _ae=s(pf);rYr=r(_ae,`Note:
Loading a model from its configuration file does `),V0e=n(_ae,"STRONG",{});var EXt=s(V0e);tYr=r(EXt,"not"),EXt.forEach(t),aYr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=n(_ae,"A",{href:!0});var CXt=s(Doe);nYr=r(CXt,"from_pretrained()"),CXt.forEach(t),sYr=r(_ae," to load the model weights."),_ae.forEach(t),lYr=i(z6),T(Q0.$$.fragment,z6),z6.forEach(t),iYr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(V$.$$.fragment,pi),dYr=i(pi),X0e=n(pi,"P",{});var wXt=s(X0e);cYr=r(wXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wXt.forEach(t),fYr=i(pi),Ln=n(pi,"P",{});var Q6=s(Ln);mYr=r(Q6,"The model class to instantiate is selected based on the "),z0e=n(Q6,"CODE",{});var AXt=s(z0e);gYr=r(AXt,"model_type"),AXt.forEach(t),hYr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(Q6,"CODE",{});var LXt=s(Q0e);pYr=r(LXt,"pretrained_model_name_or_path"),LXt.forEach(t),_Yr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W0e=n(Q6,"CODE",{});var yXt=s(W0e);uYr=r(yXt,"pretrained_model_name_or_path"),yXt.forEach(t),bYr=r(Q6,":"),Q6.forEach(t),vYr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);W0=n(Ge,"LI",{});var xVe=s(W0);H0e=n(xVe,"STRONG",{});var xXt=s(H0e);FYr=r(xXt,"albert"),xXt.forEach(t),TYr=r(xVe," \u2014 "),Goe=n(xVe,"A",{href:!0});var $Xt=s(Goe);MYr=r($Xt,"FlaxAlbertForQuestionAnswering"),$Xt.forEach(t),EYr=r(xVe," (ALBERT model)"),xVe.forEach(t),CYr=i(Ge),H0=n(Ge,"LI",{});var $Ve=s(H0);U0e=n($Ve,"STRONG",{});var kXt=s(U0e);wYr=r(kXt,"bart"),kXt.forEach(t),AYr=r($Ve," \u2014 "),Ooe=n($Ve,"A",{href:!0});var SXt=s(Ooe);LYr=r(SXt,"FlaxBartForQuestionAnswering"),SXt.forEach(t),yYr=r($Ve," (BART model)"),$Ve.forEach(t),xYr=i(Ge),U0=n(Ge,"LI",{});var kVe=s(U0);J0e=n(kVe,"STRONG",{});var RXt=s(J0e);$Yr=r(RXt,"bert"),RXt.forEach(t),kYr=r(kVe," \u2014 "),Voe=n(kVe,"A",{href:!0});var PXt=s(Voe);SYr=r(PXt,"FlaxBertForQuestionAnswering"),PXt.forEach(t),RYr=r(kVe," (BERT model)"),kVe.forEach(t),PYr=i(Ge),J0=n(Ge,"LI",{});var SVe=s(J0);Y0e=n(SVe,"STRONG",{});var BXt=s(Y0e);BYr=r(BXt,"big_bird"),BXt.forEach(t),IYr=r(SVe," \u2014 "),Xoe=n(SVe,"A",{href:!0});var IXt=s(Xoe);NYr=r(IXt,"FlaxBigBirdForQuestionAnswering"),IXt.forEach(t),qYr=r(SVe," (BigBird model)"),SVe.forEach(t),jYr=i(Ge),Y0=n(Ge,"LI",{});var RVe=s(Y0);K0e=n(RVe,"STRONG",{});var NXt=s(K0e);DYr=r(NXt,"distilbert"),NXt.forEach(t),GYr=r(RVe," \u2014 "),zoe=n(RVe,"A",{href:!0});var qXt=s(zoe);OYr=r(qXt,"FlaxDistilBertForQuestionAnswering"),qXt.forEach(t),VYr=r(RVe," (DistilBERT model)"),RVe.forEach(t),XYr=i(Ge),K0=n(Ge,"LI",{});var PVe=s(K0);Z0e=n(PVe,"STRONG",{});var jXt=s(Z0e);zYr=r(jXt,"electra"),jXt.forEach(t),QYr=r(PVe," \u2014 "),Qoe=n(PVe,"A",{href:!0});var DXt=s(Qoe);WYr=r(DXt,"FlaxElectraForQuestionAnswering"),DXt.forEach(t),HYr=r(PVe," (ELECTRA model)"),PVe.forEach(t),UYr=i(Ge),Z0=n(Ge,"LI",{});var BVe=s(Z0);ewe=n(BVe,"STRONG",{});var GXt=s(ewe);JYr=r(GXt,"mbart"),GXt.forEach(t),YYr=r(BVe," \u2014 "),Woe=n(BVe,"A",{href:!0});var OXt=s(Woe);KYr=r(OXt,"FlaxMBartForQuestionAnswering"),OXt.forEach(t),ZYr=r(BVe," (mBART model)"),BVe.forEach(t),eKr=i(Ge),ew=n(Ge,"LI",{});var IVe=s(ew);owe=n(IVe,"STRONG",{});var VXt=s(owe);oKr=r(VXt,"roberta"),VXt.forEach(t),rKr=r(IVe," \u2014 "),Hoe=n(IVe,"A",{href:!0});var XXt=s(Hoe);tKr=r(XXt,"FlaxRobertaForQuestionAnswering"),XXt.forEach(t),aKr=r(IVe," (RoBERTa model)"),IVe.forEach(t),nKr=i(Ge),ow=n(Ge,"LI",{});var NVe=s(ow);rwe=n(NVe,"STRONG",{});var zXt=s(rwe);sKr=r(zXt,"roformer"),zXt.forEach(t),lKr=r(NVe," \u2014 "),Uoe=n(NVe,"A",{href:!0});var QXt=s(Uoe);iKr=r(QXt,"FlaxRoFormerForQuestionAnswering"),QXt.forEach(t),dKr=r(NVe," (RoFormer model)"),NVe.forEach(t),cKr=i(Ge),rw=n(Ge,"LI",{});var qVe=s(rw);twe=n(qVe,"STRONG",{});var WXt=s(twe);fKr=r(WXt,"xlm-roberta"),WXt.forEach(t),mKr=r(qVe," \u2014 "),Joe=n(qVe,"A",{href:!0});var HXt=s(Joe);gKr=r(HXt,"FlaxXLMRobertaForQuestionAnswering"),HXt.forEach(t),hKr=r(qVe," (XLM-RoBERTa model)"),qVe.forEach(t),Ge.forEach(t),pKr=i(pi),T(tw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),eQe=i(f),_f=n(f,"H2",{class:!0});var iHe=s(_f);aw=n(iHe,"A",{id:!0,class:!0,href:!0});var UXt=s(aw);awe=n(UXt,"SPAN",{});var JXt=s(awe);T(X$.$$.fragment,JXt),JXt.forEach(t),UXt.forEach(t),_Kr=i(iHe),nwe=n(iHe,"SPAN",{});var YXt=s(nwe);uKr=r(YXt,"FlaxAutoModelForTokenClassification"),YXt.forEach(t),iHe.forEach(t),oQe=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(z$.$$.fragment,_i),bKr=i(_i),uf=n(_i,"P",{});var uae=s(uf);vKr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yoe=n(uae,"A",{href:!0});var KXt=s(Yoe);FKr=r(KXt,"from_pretrained()"),KXt.forEach(t),TKr=r(uae," class method or the "),Koe=n(uae,"A",{href:!0});var ZXt=s(Koe);MKr=r(ZXt,"from_config()"),ZXt.forEach(t),EKr=r(uae,` class
method.`),uae.forEach(t),CKr=i(_i),Q$=n(_i,"P",{});var dHe=s(Q$);wKr=r(dHe,"This class cannot be instantiated directly using "),swe=n(dHe,"CODE",{});var ezt=s(swe);AKr=r(ezt,"__init__()"),ezt.forEach(t),LKr=r(dHe," (throws an error)."),dHe.forEach(t),yKr=i(_i),Zt=n(_i,"DIV",{class:!0});var W6=s(Zt);T(W$.$$.fragment,W6),xKr=i(W6),lwe=n(W6,"P",{});var ozt=s(lwe);$Kr=r(ozt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ozt.forEach(t),kKr=i(W6),bf=n(W6,"P",{});var bae=s(bf);SKr=r(bae,`Note:
Loading a model from its configuration file does `),iwe=n(bae,"STRONG",{});var rzt=s(iwe);RKr=r(rzt,"not"),rzt.forEach(t),PKr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(bae,"A",{href:!0});var tzt=s(Zoe);BKr=r(tzt,"from_pretrained()"),tzt.forEach(t),IKr=r(bae," to load the model weights."),bae.forEach(t),NKr=i(W6),T(nw.$$.fragment,W6),W6.forEach(t),qKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(H$.$$.fragment,ui),jKr=i(ui),dwe=n(ui,"P",{});var azt=s(dwe);DKr=r(azt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),azt.forEach(t),GKr=i(ui),yn=n(ui,"P",{});var H6=s(yn);OKr=r(H6,"The model class to instantiate is selected based on the "),cwe=n(H6,"CODE",{});var nzt=s(cwe);VKr=r(nzt,"model_type"),nzt.forEach(t),XKr=r(H6,` property of the config object (either
passed as an argument or loaded from `),fwe=n(H6,"CODE",{});var szt=s(fwe);zKr=r(szt,"pretrained_model_name_or_path"),szt.forEach(t),QKr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mwe=n(H6,"CODE",{});var lzt=s(mwe);WKr=r(lzt,"pretrained_model_name_or_path"),lzt.forEach(t),HKr=r(H6,":"),H6.forEach(t),UKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);sw=n(To,"LI",{});var jVe=s(sw);gwe=n(jVe,"STRONG",{});var izt=s(gwe);JKr=r(izt,"albert"),izt.forEach(t),YKr=r(jVe," \u2014 "),ere=n(jVe,"A",{href:!0});var dzt=s(ere);KKr=r(dzt,"FlaxAlbertForTokenClassification"),dzt.forEach(t),ZKr=r(jVe," (ALBERT model)"),jVe.forEach(t),eZr=i(To),lw=n(To,"LI",{});var DVe=s(lw);hwe=n(DVe,"STRONG",{});var czt=s(hwe);oZr=r(czt,"bert"),czt.forEach(t),rZr=r(DVe," \u2014 "),ore=n(DVe,"A",{href:!0});var fzt=s(ore);tZr=r(fzt,"FlaxBertForTokenClassification"),fzt.forEach(t),aZr=r(DVe," (BERT model)"),DVe.forEach(t),nZr=i(To),iw=n(To,"LI",{});var GVe=s(iw);pwe=n(GVe,"STRONG",{});var mzt=s(pwe);sZr=r(mzt,"big_bird"),mzt.forEach(t),lZr=r(GVe," \u2014 "),rre=n(GVe,"A",{href:!0});var gzt=s(rre);iZr=r(gzt,"FlaxBigBirdForTokenClassification"),gzt.forEach(t),dZr=r(GVe," (BigBird model)"),GVe.forEach(t),cZr=i(To),dw=n(To,"LI",{});var OVe=s(dw);_we=n(OVe,"STRONG",{});var hzt=s(_we);fZr=r(hzt,"distilbert"),hzt.forEach(t),mZr=r(OVe," \u2014 "),tre=n(OVe,"A",{href:!0});var pzt=s(tre);gZr=r(pzt,"FlaxDistilBertForTokenClassification"),pzt.forEach(t),hZr=r(OVe," (DistilBERT model)"),OVe.forEach(t),pZr=i(To),cw=n(To,"LI",{});var VVe=s(cw);uwe=n(VVe,"STRONG",{});var _zt=s(uwe);_Zr=r(_zt,"electra"),_zt.forEach(t),uZr=r(VVe," \u2014 "),are=n(VVe,"A",{href:!0});var uzt=s(are);bZr=r(uzt,"FlaxElectraForTokenClassification"),uzt.forEach(t),vZr=r(VVe," (ELECTRA model)"),VVe.forEach(t),FZr=i(To),fw=n(To,"LI",{});var XVe=s(fw);bwe=n(XVe,"STRONG",{});var bzt=s(bwe);TZr=r(bzt,"roberta"),bzt.forEach(t),MZr=r(XVe," \u2014 "),nre=n(XVe,"A",{href:!0});var vzt=s(nre);EZr=r(vzt,"FlaxRobertaForTokenClassification"),vzt.forEach(t),CZr=r(XVe," (RoBERTa model)"),XVe.forEach(t),wZr=i(To),mw=n(To,"LI",{});var zVe=s(mw);vwe=n(zVe,"STRONG",{});var Fzt=s(vwe);AZr=r(Fzt,"roformer"),Fzt.forEach(t),LZr=r(zVe," \u2014 "),sre=n(zVe,"A",{href:!0});var Tzt=s(sre);yZr=r(Tzt,"FlaxRoFormerForTokenClassification"),Tzt.forEach(t),xZr=r(zVe," (RoFormer model)"),zVe.forEach(t),$Zr=i(To),gw=n(To,"LI",{});var QVe=s(gw);Fwe=n(QVe,"STRONG",{});var Mzt=s(Fwe);kZr=r(Mzt,"xlm-roberta"),Mzt.forEach(t),SZr=r(QVe," \u2014 "),lre=n(QVe,"A",{href:!0});var Ezt=s(lre);RZr=r(Ezt,"FlaxXLMRobertaForTokenClassification"),Ezt.forEach(t),PZr=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),To.forEach(t),BZr=i(ui),T(hw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),rQe=i(f),vf=n(f,"H2",{class:!0});var cHe=s(vf);pw=n(cHe,"A",{id:!0,class:!0,href:!0});var Czt=s(pw);Twe=n(Czt,"SPAN",{});var wzt=s(Twe);T(U$.$$.fragment,wzt),wzt.forEach(t),Czt.forEach(t),IZr=i(cHe),Mwe=n(cHe,"SPAN",{});var Azt=s(Mwe);NZr=r(Azt,"FlaxAutoModelForMultipleChoice"),Azt.forEach(t),cHe.forEach(t),tQe=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(J$.$$.fragment,bi),qZr=i(bi),Ff=n(bi,"P",{});var vae=s(Ff);jZr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ire=n(vae,"A",{href:!0});var Lzt=s(ire);DZr=r(Lzt,"from_pretrained()"),Lzt.forEach(t),GZr=r(vae," class method or the "),dre=n(vae,"A",{href:!0});var yzt=s(dre);OZr=r(yzt,"from_config()"),yzt.forEach(t),VZr=r(vae,` class
method.`),vae.forEach(t),XZr=i(bi),Y$=n(bi,"P",{});var fHe=s(Y$);zZr=r(fHe,"This class cannot be instantiated directly using "),Ewe=n(fHe,"CODE",{});var xzt=s(Ewe);QZr=r(xzt,"__init__()"),xzt.forEach(t),WZr=r(fHe," (throws an error)."),fHe.forEach(t),HZr=i(bi),ea=n(bi,"DIV",{class:!0});var U6=s(ea);T(K$.$$.fragment,U6),UZr=i(U6),Cwe=n(U6,"P",{});var $zt=s(Cwe);JZr=r($zt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$zt.forEach(t),YZr=i(U6),Tf=n(U6,"P",{});var Fae=s(Tf);KZr=r(Fae,`Note:
Loading a model from its configuration file does `),wwe=n(Fae,"STRONG",{});var kzt=s(wwe);ZZr=r(kzt,"not"),kzt.forEach(t),eet=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=n(Fae,"A",{href:!0});var Szt=s(cre);oet=r(Szt,"from_pretrained()"),Szt.forEach(t),ret=r(Fae," to load the model weights."),Fae.forEach(t),tet=i(U6),T(_w.$$.fragment,U6),U6.forEach(t),aet=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(Z$.$$.fragment,vi),net=i(vi),Awe=n(vi,"P",{});var Rzt=s(Awe);set=r(Rzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rzt.forEach(t),iet=i(vi),xn=n(vi,"P",{});var J6=s(xn);det=r(J6,"The model class to instantiate is selected based on the "),Lwe=n(J6,"CODE",{});var Pzt=s(Lwe);cet=r(Pzt,"model_type"),Pzt.forEach(t),fet=r(J6,` property of the config object (either
passed as an argument or loaded from `),ywe=n(J6,"CODE",{});var Bzt=s(ywe);met=r(Bzt,"pretrained_model_name_or_path"),Bzt.forEach(t),get=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xwe=n(J6,"CODE",{});var Izt=s(xwe);het=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),pet=r(J6,":"),J6.forEach(t),_et=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);uw=n(Mo,"LI",{});var WVe=s(uw);$we=n(WVe,"STRONG",{});var Nzt=s($we);uet=r(Nzt,"albert"),Nzt.forEach(t),bet=r(WVe," \u2014 "),fre=n(WVe,"A",{href:!0});var qzt=s(fre);vet=r(qzt,"FlaxAlbertForMultipleChoice"),qzt.forEach(t),Fet=r(WVe," (ALBERT model)"),WVe.forEach(t),Tet=i(Mo),bw=n(Mo,"LI",{});var HVe=s(bw);kwe=n(HVe,"STRONG",{});var jzt=s(kwe);Met=r(jzt,"bert"),jzt.forEach(t),Eet=r(HVe," \u2014 "),mre=n(HVe,"A",{href:!0});var Dzt=s(mre);Cet=r(Dzt,"FlaxBertForMultipleChoice"),Dzt.forEach(t),wet=r(HVe," (BERT model)"),HVe.forEach(t),Aet=i(Mo),vw=n(Mo,"LI",{});var UVe=s(vw);Swe=n(UVe,"STRONG",{});var Gzt=s(Swe);Let=r(Gzt,"big_bird"),Gzt.forEach(t),yet=r(UVe," \u2014 "),gre=n(UVe,"A",{href:!0});var Ozt=s(gre);xet=r(Ozt,"FlaxBigBirdForMultipleChoice"),Ozt.forEach(t),$et=r(UVe," (BigBird model)"),UVe.forEach(t),ket=i(Mo),Fw=n(Mo,"LI",{});var JVe=s(Fw);Rwe=n(JVe,"STRONG",{});var Vzt=s(Rwe);Set=r(Vzt,"distilbert"),Vzt.forEach(t),Ret=r(JVe," \u2014 "),hre=n(JVe,"A",{href:!0});var Xzt=s(hre);Pet=r(Xzt,"FlaxDistilBertForMultipleChoice"),Xzt.forEach(t),Bet=r(JVe," (DistilBERT model)"),JVe.forEach(t),Iet=i(Mo),Tw=n(Mo,"LI",{});var YVe=s(Tw);Pwe=n(YVe,"STRONG",{});var zzt=s(Pwe);Net=r(zzt,"electra"),zzt.forEach(t),qet=r(YVe," \u2014 "),pre=n(YVe,"A",{href:!0});var Qzt=s(pre);jet=r(Qzt,"FlaxElectraForMultipleChoice"),Qzt.forEach(t),Det=r(YVe," (ELECTRA model)"),YVe.forEach(t),Get=i(Mo),Mw=n(Mo,"LI",{});var KVe=s(Mw);Bwe=n(KVe,"STRONG",{});var Wzt=s(Bwe);Oet=r(Wzt,"roberta"),Wzt.forEach(t),Vet=r(KVe," \u2014 "),_re=n(KVe,"A",{href:!0});var Hzt=s(_re);Xet=r(Hzt,"FlaxRobertaForMultipleChoice"),Hzt.forEach(t),zet=r(KVe," (RoBERTa model)"),KVe.forEach(t),Qet=i(Mo),Ew=n(Mo,"LI",{});var ZVe=s(Ew);Iwe=n(ZVe,"STRONG",{});var Uzt=s(Iwe);Wet=r(Uzt,"roformer"),Uzt.forEach(t),Het=r(ZVe," \u2014 "),ure=n(ZVe,"A",{href:!0});var Jzt=s(ure);Uet=r(Jzt,"FlaxRoFormerForMultipleChoice"),Jzt.forEach(t),Jet=r(ZVe," (RoFormer model)"),ZVe.forEach(t),Yet=i(Mo),Cw=n(Mo,"LI",{});var eXe=s(Cw);Nwe=n(eXe,"STRONG",{});var Yzt=s(Nwe);Ket=r(Yzt,"xlm-roberta"),Yzt.forEach(t),Zet=r(eXe," \u2014 "),bre=n(eXe,"A",{href:!0});var Kzt=s(bre);eot=r(Kzt,"FlaxXLMRobertaForMultipleChoice"),Kzt.forEach(t),oot=r(eXe," (XLM-RoBERTa model)"),eXe.forEach(t),Mo.forEach(t),rot=i(vi),T(ww.$$.fragment,vi),vi.forEach(t),bi.forEach(t),aQe=i(f),Mf=n(f,"H2",{class:!0});var mHe=s(Mf);Aw=n(mHe,"A",{id:!0,class:!0,href:!0});var Zzt=s(Aw);qwe=n(Zzt,"SPAN",{});var eQt=s(qwe);T(ek.$$.fragment,eQt),eQt.forEach(t),Zzt.forEach(t),tot=i(mHe),jwe=n(mHe,"SPAN",{});var oQt=s(jwe);aot=r(oQt,"FlaxAutoModelForNextSentencePrediction"),oQt.forEach(t),mHe.forEach(t),nQe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(ok.$$.fragment,Fi),not=i(Fi),Ef=n(Fi,"P",{});var Tae=s(Ef);sot=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vre=n(Tae,"A",{href:!0});var rQt=s(vre);lot=r(rQt,"from_pretrained()"),rQt.forEach(t),iot=r(Tae," class method or the "),Fre=n(Tae,"A",{href:!0});var tQt=s(Fre);dot=r(tQt,"from_config()"),tQt.forEach(t),cot=r(Tae,` class
method.`),Tae.forEach(t),fot=i(Fi),rk=n(Fi,"P",{});var gHe=s(rk);mot=r(gHe,"This class cannot be instantiated directly using "),Dwe=n(gHe,"CODE",{});var aQt=s(Dwe);got=r(aQt,"__init__()"),aQt.forEach(t),hot=r(gHe," (throws an error)."),gHe.forEach(t),pot=i(Fi),oa=n(Fi,"DIV",{class:!0});var Y6=s(oa);T(tk.$$.fragment,Y6),_ot=i(Y6),Gwe=n(Y6,"P",{});var nQt=s(Gwe);uot=r(nQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nQt.forEach(t),bot=i(Y6),Cf=n(Y6,"P",{});var Mae=s(Cf);vot=r(Mae,`Note:
Loading a model from its configuration file does `),Owe=n(Mae,"STRONG",{});var sQt=s(Owe);Fot=r(sQt,"not"),sQt.forEach(t),Tot=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(Mae,"A",{href:!0});var lQt=s(Tre);Mot=r(lQt,"from_pretrained()"),lQt.forEach(t),Eot=r(Mae," to load the model weights."),Mae.forEach(t),Cot=i(Y6),T(Lw.$$.fragment,Y6),Y6.forEach(t),wot=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(ak.$$.fragment,Ti),Aot=i(Ti),Vwe=n(Ti,"P",{});var iQt=s(Vwe);Lot=r(iQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iQt.forEach(t),yot=i(Ti),$n=n(Ti,"P",{});var K6=s($n);xot=r(K6,"The model class to instantiate is selected based on the "),Xwe=n(K6,"CODE",{});var dQt=s(Xwe);$ot=r(dQt,"model_type"),dQt.forEach(t),kot=r(K6,` property of the config object (either
passed as an argument or loaded from `),zwe=n(K6,"CODE",{});var cQt=s(zwe);Sot=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),Rot=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qwe=n(K6,"CODE",{});var fQt=s(Qwe);Pot=r(fQt,"pretrained_model_name_or_path"),fQt.forEach(t),Bot=r(K6,":"),K6.forEach(t),Iot=i(Ti),Wwe=n(Ti,"UL",{});var mQt=s(Wwe);yw=n(mQt,"LI",{});var oXe=s(yw);Hwe=n(oXe,"STRONG",{});var gQt=s(Hwe);Not=r(gQt,"bert"),gQt.forEach(t),qot=r(oXe," \u2014 "),Mre=n(oXe,"A",{href:!0});var hQt=s(Mre);jot=r(hQt,"FlaxBertForNextSentencePrediction"),hQt.forEach(t),Dot=r(oXe," (BERT model)"),oXe.forEach(t),mQt.forEach(t),Got=i(Ti),T(xw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),sQe=i(f),wf=n(f,"H2",{class:!0});var hHe=s(wf);$w=n(hHe,"A",{id:!0,class:!0,href:!0});var pQt=s($w);Uwe=n(pQt,"SPAN",{});var _Qt=s(Uwe);T(nk.$$.fragment,_Qt),_Qt.forEach(t),pQt.forEach(t),Oot=i(hHe),Jwe=n(hHe,"SPAN",{});var uQt=s(Jwe);Vot=r(uQt,"FlaxAutoModelForImageClassification"),uQt.forEach(t),hHe.forEach(t),lQe=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(sk.$$.fragment,Mi),Xot=i(Mi),Af=n(Mi,"P",{});var Eae=s(Af);zot=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ere=n(Eae,"A",{href:!0});var bQt=s(Ere);Qot=r(bQt,"from_pretrained()"),bQt.forEach(t),Wot=r(Eae," class method or the "),Cre=n(Eae,"A",{href:!0});var vQt=s(Cre);Hot=r(vQt,"from_config()"),vQt.forEach(t),Uot=r(Eae,` class
method.`),Eae.forEach(t),Jot=i(Mi),lk=n(Mi,"P",{});var pHe=s(lk);Yot=r(pHe,"This class cannot be instantiated directly using "),Ywe=n(pHe,"CODE",{});var FQt=s(Ywe);Kot=r(FQt,"__init__()"),FQt.forEach(t),Zot=r(pHe," (throws an error)."),pHe.forEach(t),ert=i(Mi),ra=n(Mi,"DIV",{class:!0});var Z6=s(ra);T(ik.$$.fragment,Z6),ort=i(Z6),Kwe=n(Z6,"P",{});var TQt=s(Kwe);rrt=r(TQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TQt.forEach(t),trt=i(Z6),Lf=n(Z6,"P",{});var Cae=s(Lf);art=r(Cae,`Note:
Loading a model from its configuration file does `),Zwe=n(Cae,"STRONG",{});var MQt=s(Zwe);nrt=r(MQt,"not"),MQt.forEach(t),srt=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(Cae,"A",{href:!0});var EQt=s(wre);lrt=r(EQt,"from_pretrained()"),EQt.forEach(t),irt=r(Cae," to load the model weights."),Cae.forEach(t),drt=i(Z6),T(kw.$$.fragment,Z6),Z6.forEach(t),crt=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(dk.$$.fragment,Ei),frt=i(Ei),eAe=n(Ei,"P",{});var CQt=s(eAe);mrt=r(CQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CQt.forEach(t),grt=i(Ei),kn=n(Ei,"P",{});var eL=s(kn);hrt=r(eL,"The model class to instantiate is selected based on the "),oAe=n(eL,"CODE",{});var wQt=s(oAe);prt=r(wQt,"model_type"),wQt.forEach(t),_rt=r(eL,` property of the config object (either
passed as an argument or loaded from `),rAe=n(eL,"CODE",{});var AQt=s(rAe);urt=r(AQt,"pretrained_model_name_or_path"),AQt.forEach(t),brt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=n(eL,"CODE",{});var LQt=s(tAe);vrt=r(LQt,"pretrained_model_name_or_path"),LQt.forEach(t),Frt=r(eL,":"),eL.forEach(t),Trt=i(Ei),ck=n(Ei,"UL",{});var _He=s(ck);Sw=n(_He,"LI",{});var rXe=s(Sw);aAe=n(rXe,"STRONG",{});var yQt=s(aAe);Mrt=r(yQt,"beit"),yQt.forEach(t),Ert=r(rXe," \u2014 "),Are=n(rXe,"A",{href:!0});var xQt=s(Are);Crt=r(xQt,"FlaxBeitForImageClassification"),xQt.forEach(t),wrt=r(rXe," (BEiT model)"),rXe.forEach(t),Art=i(_He),Rw=n(_He,"LI",{});var tXe=s(Rw);nAe=n(tXe,"STRONG",{});var $Qt=s(nAe);Lrt=r($Qt,"vit"),$Qt.forEach(t),yrt=r(tXe," \u2014 "),Lre=n(tXe,"A",{href:!0});var kQt=s(Lre);xrt=r(kQt,"FlaxViTForImageClassification"),kQt.forEach(t),$rt=r(tXe," (ViT model)"),tXe.forEach(t),_He.forEach(t),krt=i(Ei),T(Pw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),iQe=i(f),yf=n(f,"H2",{class:!0});var uHe=s(yf);Bw=n(uHe,"A",{id:!0,class:!0,href:!0});var SQt=s(Bw);sAe=n(SQt,"SPAN",{});var RQt=s(sAe);T(fk.$$.fragment,RQt),RQt.forEach(t),SQt.forEach(t),Srt=i(uHe),lAe=n(uHe,"SPAN",{});var PQt=s(lAe);Rrt=r(PQt,"FlaxAutoModelForVision2Seq"),PQt.forEach(t),uHe.forEach(t),dQe=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(mk.$$.fragment,Ci),Prt=i(Ci),xf=n(Ci,"P",{});var wae=s(xf);Brt=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yre=n(wae,"A",{href:!0});var BQt=s(yre);Irt=r(BQt,"from_pretrained()"),BQt.forEach(t),Nrt=r(wae," class method or the "),xre=n(wae,"A",{href:!0});var IQt=s(xre);qrt=r(IQt,"from_config()"),IQt.forEach(t),jrt=r(wae,` class
method.`),wae.forEach(t),Drt=i(Ci),gk=n(Ci,"P",{});var bHe=s(gk);Grt=r(bHe,"This class cannot be instantiated directly using "),iAe=n(bHe,"CODE",{});var NQt=s(iAe);Ort=r(NQt,"__init__()"),NQt.forEach(t),Vrt=r(bHe," (throws an error)."),bHe.forEach(t),Xrt=i(Ci),ta=n(Ci,"DIV",{class:!0});var oL=s(ta);T(hk.$$.fragment,oL),zrt=i(oL),dAe=n(oL,"P",{});var qQt=s(dAe);Qrt=r(qQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qQt.forEach(t),Wrt=i(oL),$f=n(oL,"P",{});var Aae=s($f);Hrt=r(Aae,`Note:
Loading a model from its configuration file does `),cAe=n(Aae,"STRONG",{});var jQt=s(cAe);Urt=r(jQt,"not"),jQt.forEach(t),Jrt=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(Aae,"A",{href:!0});var DQt=s($re);Yrt=r(DQt,"from_pretrained()"),DQt.forEach(t),Krt=r(Aae," to load the model weights."),Aae.forEach(t),Zrt=i(oL),T(Iw.$$.fragment,oL),oL.forEach(t),ett=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(pk.$$.fragment,wi),ott=i(wi),fAe=n(wi,"P",{});var GQt=s(fAe);rtt=r(GQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GQt.forEach(t),ttt=i(wi),Sn=n(wi,"P",{});var rL=s(Sn);att=r(rL,"The model class to instantiate is selected based on the "),mAe=n(rL,"CODE",{});var OQt=s(mAe);ntt=r(OQt,"model_type"),OQt.forEach(t),stt=r(rL,` property of the config object (either
passed as an argument or loaded from `),gAe=n(rL,"CODE",{});var VQt=s(gAe);ltt=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),itt=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=n(rL,"CODE",{});var XQt=s(hAe);dtt=r(XQt,"pretrained_model_name_or_path"),XQt.forEach(t),ctt=r(rL,":"),rL.forEach(t),ftt=i(wi),pAe=n(wi,"UL",{});var zQt=s(pAe);Nw=n(zQt,"LI",{});var aXe=s(Nw);_Ae=n(aXe,"STRONG",{});var QQt=s(_Ae);mtt=r(QQt,"vision-encoder-decoder"),QQt.forEach(t),gtt=r(aXe," \u2014 "),kre=n(aXe,"A",{href:!0});var WQt=s(kre);htt=r(WQt,"FlaxVisionEncoderDecoderModel"),WQt.forEach(t),ptt=r(aXe," (Vision Encoder decoder model)"),aXe.forEach(t),zQt.forEach(t),_tt=i(wi),T(qw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ZHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(OS,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(VS,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertConfig"),c(XS,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartConfig"),c(zS,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitConfig"),c(QS,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertConfig"),c(WS,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(HS,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdConfig"),c(US,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(JS,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(YS,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(KS,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomConfig"),c(ZS,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertConfig"),c(eR,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineConfig"),c(oR,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPConfig"),c(rR,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenConfig"),c(tR,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertConfig"),c(aR,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextConfig"),c(nR,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLConfig"),c(sR,"href","/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtConfig"),c(lR,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(iR,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(dR,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(cR,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaConfig"),c(fR,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(mR,"href","/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(gR,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(hR,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTConfig"),c(pR,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrConfig"),c(_R,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uR,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRConfig"),c(bR,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTConfig"),c(vR,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraConfig"),c(FR,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(TR,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertConfig"),c(MR,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaConfig"),c(ER,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetConfig"),c(CR,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTConfig"),c(wR,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelConfig"),c(AR,"href","/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNConfig"),c(LR,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Config"),c(yR,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(xR,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c($R,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJConfig"),c(kR,"href","/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTConfig"),c(SR,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertConfig"),c(RR,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertConfig"),c(PR,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(BR,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(IR,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(NR,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(qR,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDConfig"),c(jR,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitConfig"),c(DR,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerConfig"),c(GR,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Config"),c(OR,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeConfig"),c(VR,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertConfig"),c(XR,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Config"),c(zR,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianConfig"),c(QR,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(WR,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartConfig"),c(HR,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTConfig"),c(UR,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(JR,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(YR,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(KR,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetConfig"),c(ZR,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Config"),c(eP,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpConfig"),c(oP,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaConfig"),c(rP,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tP,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aP,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTConfig"),c(nP,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusConfig"),c(sP,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lP,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartConfig"),c(iP,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dP,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cP,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fP,"href","/docs/transformers/pr_17281/en/model_doc/rag#transformers.RagConfig"),c(mP,"href","/docs/transformers/pr_17281/en/model_doc/realm#transformers.RealmConfig"),c(gP,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerConfig"),c(hP,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetConfig"),c(pP,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertConfig"),c(_P,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetConfig"),c(uP,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertConfig"),c(bP,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaConfig"),c(vP,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerConfig"),c(FP,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerConfig"),c(TP,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWConfig"),c(MP,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDConfig"),c(EP,"href","/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CP,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wP,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AP,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterConfig"),c(LP,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yP,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinConfig"),c(xP,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Config"),c($P,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasConfig"),c(kP,"href","/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(SP,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(RP,"href","/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRConfig"),c(PP,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BP,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(IP,"href","/docs/transformers/pr_17281/en/model_doc/van#transformers.VanConfig"),c(NP,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltConfig"),c(qP,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(jP,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(DP,"href","/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(GP,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTConfig"),c(OP,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(VP,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(XP,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(zP,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMConfig"),c(QP,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMConfig"),c(WP,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMConfig"),c(HP,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(UP,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(JP,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(YP,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetConfig"),c(KP,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosConfig"),c(ZP,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoTokenizer"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(eB,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(oB,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartTokenizer"),c(aB,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartTokenizerFast"),c(nB,"href","/docs/transformers/pr_17281/en/model_doc/barthez#transformers.BarthezTokenizer"),c(sB,"href","/docs/transformers/pr_17281/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(lB,"href","/docs/transformers/pr_17281/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(iB,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(fB,"href","/docs/transformers/pr_17281/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(mB,"href","/docs/transformers/pr_17281/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(gB,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(hB,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(pB,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_B,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uB,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(bB,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(vB,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(FB,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(TB,"href","/docs/transformers/pr_17281/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MB,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertTokenizer"),c(EB,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineTokenizer"),c(wB,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizer"),c(AB,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(LB,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(yB,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(xB,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertTokenizer"),c($B,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_17281/en/model_doc/cpm#transformers.CpmTokenizer"),c(SB,"href","/docs/transformers/pr_17281/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(RB,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PB,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NB,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(jB,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(DB,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(GB,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(OB,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(VB,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(XB,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraTokenizer"),c(zB,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QB,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WB,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetTokenizer"),c(HB,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(UB,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(JB,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelTokenizer"),c(YB,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(KB,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rI,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(tI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nI,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizer"),c(sI,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lI,"href","/docs/transformers/pr_17281/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iI,"href","/docs/transformers/pr_17281/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cI,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fI,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_I,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uI,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(bI,"href","/docs/transformers/pr_17281/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(vI,"href","/docs/transformers/pr_17281/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FI,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDTokenizer"),c(TI,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDTokenizerFast"),c(MI,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerTokenizer"),c(EI,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(CI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Tokenizer"),c(wI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5TokenizerFast"),c(AI,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeTokenizer"),c(LI,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yI,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(xI,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c($I,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianTokenizer"),c(kI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartTokenizer"),c(SI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(RI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(PI,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(BI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17281/en/model_doc/mluke#transformers.MLukeTokenizer"),c(qI,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(jI,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(DI,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(GI,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(OI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Tokenizer"),c(VI,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5TokenizerFast"),c(XI,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpTokenizer"),c(zI,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(QI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(WI,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(HI,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizer"),c(UI,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JI,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YI,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KI,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZI,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eN,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oN,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rN,"href","/docs/transformers/pr_17281/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tN,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aN,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17281/en/model_doc/rag#transformers.RagTokenizer"),c(iN,"href","/docs/transformers/pr_17281/en/model_doc/realm#transformers.RealmTokenizer"),c(dN,"href","/docs/transformers/pr_17281/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cN,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fN,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mN,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gN,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hN,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pN,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_N,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uN,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vN,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FN,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TN,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MN,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EN,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CN,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wN,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AN,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Tokenizer"),c(LN,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5TokenizerFast"),c(yN,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasTokenizer"),c(xN,"href","/docs/transformers/pr_17281/en/model_doc/tapex#transformers.TapexTokenizer"),c($N,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizer"),c(PN,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertTokenizerFast"),c(BN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NN,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qN,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jN,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DN,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMTokenizer"),c(GN,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ON,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VN,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XN,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zN,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QN,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WN,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HN,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizer"),c(UN,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(JN,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YN,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rq,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fq,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(gq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(hq,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($q,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kq,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"id","transformers.AutoProcessor"),c(Tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Sq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Rq,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPProcessor"),c(Pq,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPProcessor"),c(Bq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Iq,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Nq,"href","/docs/transformers/pr_17281/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(qq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Dq,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Gq,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Oq,"href","/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Vq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltProcessor"),c(Qq,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Wq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"id","transformers.AutoModel"),c(Vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Jq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kq,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zq,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertModel"),c(ej,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartModel"),c(oj,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitModel"),c(rj,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertModel"),c(tj,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(aj,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdModel"),c(nj,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(sj,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(lj,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ij,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomModel"),c(dj,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertModel"),c(cj,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineModel"),c(fj,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.CLIPModel"),c(mj,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenModel"),c(gj,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertModel"),c(hj,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextModel"),c(pj,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLModel"),c(_j,"href","/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtModel"),c(uj,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bj,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vj,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Fj,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaModel"),c(Tj,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Mj,"href","/docs/transformers/pr_17281/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Ej,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(Cj,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTModel"),c(wj,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrModel"),c(Aj,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertModel"),c(Lj,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(yj,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTModel"),c(xj,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraModel"),c($j,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertModel"),c(kj,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaModel"),c(Sj,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetModel"),c(Rj,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTModel"),c(Pj,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelModel"),c(Bj,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Ij,"href","/docs/transformers/pr_17281/en/model_doc/glpn#transformers.GLPNModel"),c(Nj,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2Model"),c(qj,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(jj,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Dj,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJModel"),c(Gj,"href","/docs/transformers/pr_17281/en/model_doc/groupvit#transformers.GroupViTModel"),c(Oj,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertModel"),c(Vj,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertModel"),c(Xj,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(zj,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Qj,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Wj,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Hj,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDModel"),c(Uj,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitModel"),c(Jj,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerModel"),c(Yj,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5Model"),c(Kj,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeModel"),c(Zj,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertModel"),c(eD,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100Model"),c(oD,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianModel"),c(rD,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tD,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartModel"),c(aD,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTModel"),c(nD,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sD,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertModel"),c(lD,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTModel"),c(iD,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetModel"),c(dD,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5Model"),c(cD,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpModel"),c(fD,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaModel"),c(mD,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerModel"),c(gD,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(hD,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTModel"),c(pD,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusModel"),c(_D,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverModel"),c(uD,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartModel"),c(bD,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerModel"),c(vD,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(FD,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertModel"),c(TD,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModel"),c(MD,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetModel"),c(ED,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertModel"),c(CD,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetModel"),c(wD,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel"),c(AD,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaModel"),c(LD,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerModel"),c(yD,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerModel"),c(xD,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWModel"),c($D,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDModel"),c(kD,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(SD,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterModel"),c(RD,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(PD,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinModel"),c(BD,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5Model"),c(ID,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasModel"),c(ND,"href","/docs/transformers/pr_17281/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(qD,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jD,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechModel"),c(DD,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(GD,"href","/docs/transformers/pr_17281/en/model_doc/van#transformers.VanModel"),c(OD,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltModel"),c(VD,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(XD,"href","/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertModel"),c(zD,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTModel"),c(QD,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(WD,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(HD,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(UD,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMModel"),c(JD,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMModel"),c(YD,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMModel"),c(KD,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(ZD,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(eG,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(oG,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetModel"),c(rG,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosModel"),c(tG,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"id","transformers.AutoModelForPreTraining"),c(Ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ju,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(aG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lG,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForPreTraining"),c(iG,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForPreTraining"),c(cG,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(fG,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM"),c(mG,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gG,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hG,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pG,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_G,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uG,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bG,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vG,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(FG,"href","/docs/transformers/pr_17281/en/model_doc/flava#transformers.FlavaForPreTraining"),c(TG,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForPreTraining"),c(MG,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(CG,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wG,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LG,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yG,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xG,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($G,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kG,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SG,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(PG,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(BG,"href","/docs/transformers/pr_17281/en/model_doc/retribert#transformers.RetriBertModel"),c(IG,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(NG,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(qG,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jG,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DG,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GG,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(OG,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(VG,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(XG,"href","/docs/transformers/pr_17281/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(zG,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(QG,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(WG,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(HG,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(UG,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(JG,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(YG,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z1,"id","transformers.AutoModelForCausalLM"),c(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(KG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZG,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oO,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForCausalLM"),c(rO,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertLMHeadModel"),c(tO,"href","/docs/transformers/pr_17281/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(aO,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(nO,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(sO,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(lO,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(iO,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dO,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(cO,"href","/docs/transformers/pr_17281/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(fO,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mO,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(gO,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForCausalLM"),c(hO,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pO,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(_O,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(uO,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(bO,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianForCausalLM"),c(vO,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForCausalLM"),c(FO,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(TO,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForCausalLM"),c(MO,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EO,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.OPTForCausalLM"),c(CO,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wO,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AO,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LO,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(yO,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xO,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($O,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kO,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SO,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RO,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PO,"href","/docs/transformers/pr_17281/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(BO,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(IO,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NO,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(qO,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jO,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DO,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B2,"id","transformers.AutoModelForMaskedLM"),c(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B2,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(GO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zO,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HO,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UO,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JO,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YO,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KO,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oV,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rV,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tV,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aV,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sV,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lV,"href","/docs/transformers/pr_17281/en/model_doc/luke#transformers.LukeForMaskedLM"),c(iV,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(fV,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mV,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(hV,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(_V,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(bV,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FV,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(TV,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MV,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(EV,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(CV,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(AV,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForSeq2SeqLM"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(LV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(BV,"href","/docs/transformers/pr_17281/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17281/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.MarianMTModel"),c(DV,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17281/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17281/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zb,"id","transformers.AutoModelForSequenceClassification"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(HV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c($X,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17281/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForMultipleChoice"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(WX,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(az,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForNextSentencePrediction"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Az,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Rz,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Pz,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForTokenClassification"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(jz,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17281/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(zz,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vQ,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForQuestionAnswering"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17281/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17281/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(NQ,"href","/docs/transformers/pr_17281/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17281/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17281/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17281/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17281/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17281/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17281/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17281/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17281/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17281/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(lW,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(cW,"href","/docs/transformers/pr_17281/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.AutoModelForTableQuestionAnswering"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(fW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.AutoModelForImageClassification"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForImageClassification"),c(vW,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(FW,"href","/docs/transformers/pr_17281/en/model_doc/cvt#transformers.CvtForImageClassification"),c(TW,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(MW,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassification"),c(EW,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(CW,"href","/docs/transformers/pr_17281/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(wW,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassification"),c(AW,"href","/docs/transformers/pr_17281/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(LW,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(yW,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xW,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($W,"href","/docs/transformers/pr_17281/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kW,"href","/docs/transformers/pr_17281/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SW,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RW,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PW,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BW,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForImageClassification"),c(IW,"href","/docs/transformers/pr_17281/en/model_doc/van#transformers.VanForImageClassification"),c(NW,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B7,"id","transformers.AutoModelForVision2Seq"),c(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B7,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(qW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D7,"id","transformers.AutoModelForVisualQuestionAnswering"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(OW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_17281/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.AutoModelForAudioClassification"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.AutoModelForAudioFrameClassification"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.AutoModelForCTC"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_H,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.HubertForCTC"),c(uH,"href","/docs/transformers/pr_17281/en/model_doc/mctct#transformers.MCTCTForCTC"),c(bH,"href","/docs/transformers/pr_17281/en/model_doc/sew#transformers.SEWForCTC"),c(vH,"href","/docs/transformers/pr_17281/en/model_doc/sew-d#transformers.SEWDForCTC"),c(FH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(TH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(MH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(EH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(CH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(wH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17281/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R8,"id","transformers.AutoModelForAudioXVector"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c($H,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PH,"href","/docs/transformers/pr_17281/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(BH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(IH,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(NH,"href","/docs/transformers/pr_17281/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForMaskedImageModeling"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(qH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17281/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OH,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VH,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U8,"id","transformers.AutoModelForObjectDetection"),c(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U8,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(XH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17281/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(HH,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForObjectDetection"),c(UH,"href","/docs/transformers/pr_17281/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForImageSegmentation"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(JH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17281/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForSemanticSegmentation"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(eU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(nU,"href","/docs/transformers/pr_17281/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(sU,"href","/docs/transformers/pr_17281/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(lU,"href","/docs/transformers/pr_17281/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.AutoModelForInstanceSegmentation"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17281/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModel"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(mU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertModel"),c(_U,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartModel"),c(uU,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertModel"),c(bU,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vU,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FU,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertModel"),c(TU,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.TFCLIPModel"),c(MU,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertModel"),c(EU,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextModel"),c(CU,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wU,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AU,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaModel"),c(LU,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yU,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xU,"href","/docs/transformers/pr_17281/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($U,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraModel"),c(kU,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SU,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelModel"),c(RU,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(PU,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2Model"),c(BU,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJModel"),c(IU,"href","/docs/transformers/pr_17281/en/model_doc/hubert#transformers.TFHubertModel"),c(NU,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(qU,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDModel"),c(jU,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerModel"),c(DU,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GU,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianModel"),c(OU,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartModel"),c(VU,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XU,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zU,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5Model"),c(QU,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WU,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTModel"),c(HU,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UU,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetModel"),c(JU,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertModel"),c(YU,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.TFResNetModel"),c(KU,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZU,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eJ,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oJ,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinModel"),c(rJ,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5Model"),c(tJ,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasModel"),c(aJ,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nJ,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTModel"),c(sJ,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lJ,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMModel"),c(dJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cJ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForPreTraining"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pJ,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uJ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vJ,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(TJ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(EJ,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CJ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17281/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(AJ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(LJ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xJ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($J,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(RJ,"href","/docs/transformers/pr_17281/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(PJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForCausalLM"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(GJ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(OJ,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VJ,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XJ,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zJ,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(QJ,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(WJ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(HJ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(UJ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(JJ,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KJ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForImageClassification"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17281/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(tY,"href","/docs/transformers/pr_17281/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(aY,"href","/docs/transformers/pr_17281/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(nY,"href","/docs/transformers/pr_17281/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(sY,"href","/docs/transformers/pr_17281/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(lY,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForMaskedLM"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(iY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mY,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gY,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pY,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uY,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vY,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FY,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TY,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MY,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EY,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wY,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LY,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yY,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xY,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Y,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qY,"href","/docs/transformers/pr_17281/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.TFMarianMTModel"),c(DY,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSequenceClassification"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(XY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17281/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17281/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17281/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForMultipleChoice"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(vK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($K,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(jK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(VK,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17281/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.TFAutoModelForTokenClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(HK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17281/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.TFAutoModelForQuestionAnswering"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(uZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17281/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17281/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17281/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17281/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17281/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(xZ,"href","/docs/transformers/pr_17281/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17281/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17281/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17281/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17281/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qZ,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17281/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.TFAutoModelForVision2Seq"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17281/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModel"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(HZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertModel"),c(KZ,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartModel"),c(ZZ,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitModel"),c(eee,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertModel"),c(oee,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ree,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(tee,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(aee,"href","/docs/transformers/pr_17281/en/model_doc/clip#transformers.FlaxCLIPModel"),c(nee,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(see,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraModel"),c(lee,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(iee,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(dee,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(cee,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(fee,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianModel"),c(mee,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gee,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hee,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTModel"),c(pee,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(_ee,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uee,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bee,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5Model"),c(vee,"href","/docs/transformers/pr_17281/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Fee,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTModel"),c(Tee,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Mee,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Eee,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.FlaxAutoModelForCausalLM"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(Cee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yee,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xee,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($ee,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kee,"href","/docs/transformers/pr_17281/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(See,"href","/docs/transformers/pr_17281/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Ree,"href","/docs/transformers/pr_17281/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Pee,"href","/docs/transformers/pr_17281/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Bee,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Iee,"href","/docs/transformers/pr_17281/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForPreTraining"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Gee,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Oee,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Vee,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Xee,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zee,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Qee,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Wee,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Uee,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Jee,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Yee,"href","/docs/transformers/pr_17281/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Kee,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForMaskedLM"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(Zee,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ooe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(roe,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(toe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(noe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(soe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(loe,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ioe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(doe,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(coe,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(foe,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(moe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(poe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uoe,"href","/docs/transformers/pr_17281/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_17281/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(voe,"href","/docs/transformers/pr_17281/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17281/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Toe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_17281/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Eoe,"href","/docs/transformers/pr_17281/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_17281/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(woe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($oe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(qoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(joe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Doe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Goe,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_17281/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_17281/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForTokenClassification"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ore,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rre,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tre,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(are,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nre,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sre,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lre,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(ire,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fre,"href","/docs/transformers/pr_17281/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mre,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gre,"href","/docs/transformers/pr_17281/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hre,"href","/docs/transformers/pr_17281/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pre,"href","/docs/transformers/pr_17281/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_re,"href","/docs/transformers/pr_17281/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ure,"href","/docs/transformers/pr_17281/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bre,"href","/docs/transformers/pr_17281/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(vre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/pr_17281/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForImageClassification"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(Ere,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Are,"href","/docs/transformers/pr_17281/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Lre,"href","/docs/transformers/pr_17281/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c(yre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xre,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($re,"href","/docs/transformers/pr_17281/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kre,"href","/docs/transformers/pr_17281/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Pf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,tL),e(st,Bf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,aL),e(Qe,Bn),e(Qe,In),e(In,nL),e(Qe,$i),e(Qe,Nn),e(Nn,sL),e(Qe,ki),b(f,If,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,IS),e(Ae,Si),e(Si,NS),e(Ae,qS),b(f,Co,u),b(f,Ra,u),e(Ra,jS),e(Ra,Nf),e(Nf,DS),e(Ra,vHe),b(f,nXe,u),b(f,Ri,u),e(Ri,qf),e(qf,Lae),M(lL,Lae,null),e(Ri,FHe),e(Ri,yae),e(yae,THe),b(f,sXe,u),b(f,qn,u),e(qn,MHe),e(qn,xae),e(xae,EHe),e(qn,CHe),e(qn,$ae),e($ae,wHe),e(qn,AHe),b(f,lXe,u),M(iL,f,u),b(f,iXe,u),b(f,GS,u),e(GS,LHe),b(f,dXe,u),M(jf,f,u),b(f,cXe,u),b(f,Pi,u),e(Pi,Df),e(Df,kae),M(dL,kae,null),e(Pi,yHe),e(Pi,Sae),e(Sae,xHe),b(f,fXe,u),b(f,wo,u),M(cL,wo,null),e(wo,$He),e(wo,fL),e(fL,kHe),e(fL,OS),e(OS,SHe),e(fL,RHe),e(wo,PHe),e(wo,mL),e(mL,BHe),e(mL,Rae),e(Rae,IHe),e(mL,NHe),e(wo,qHe),e(wo,Lr),M(gL,Lr,null),e(Lr,jHe),e(Lr,Pae),e(Pae,DHe),e(Lr,GHe),e(Lr,Bi),e(Bi,OHe),e(Bi,Bae),e(Bae,VHe),e(Bi,XHe),e(Bi,Iae),e(Iae,zHe),e(Bi,QHe),e(Lr,WHe),e(Lr,A),e(A,Gf),e(Gf,Nae),e(Nae,HHe),e(Gf,UHe),e(Gf,VS),e(VS,JHe),e(Gf,YHe),e(A,KHe),e(A,Of),e(Of,qae),e(qae,ZHe),e(Of,eUe),e(Of,XS),e(XS,oUe),e(Of,rUe),e(A,tUe),e(A,Vf),e(Vf,jae),e(jae,aUe),e(Vf,nUe),e(Vf,zS),e(zS,sUe),e(Vf,lUe),e(A,iUe),e(A,Xf),e(Xf,Dae),e(Dae,dUe),e(Xf,cUe),e(Xf,QS),e(QS,fUe),e(Xf,mUe),e(A,gUe),e(A,zf),e(zf,Gae),e(Gae,hUe),e(zf,pUe),e(zf,WS),e(WS,_Ue),e(zf,uUe),e(A,bUe),e(A,Qf),e(Qf,Oae),e(Oae,vUe),e(Qf,FUe),e(Qf,HS),e(HS,TUe),e(Qf,MUe),e(A,EUe),e(A,Wf),e(Wf,Vae),e(Vae,CUe),e(Wf,wUe),e(Wf,US),e(US,AUe),e(Wf,LUe),e(A,yUe),e(A,Hf),e(Hf,Xae),e(Xae,xUe),e(Hf,$Ue),e(Hf,JS),e(JS,kUe),e(Hf,SUe),e(A,RUe),e(A,Uf),e(Uf,zae),e(zae,PUe),e(Uf,BUe),e(Uf,YS),e(YS,IUe),e(Uf,NUe),e(A,qUe),e(A,Jf),e(Jf,Qae),e(Qae,jUe),e(Jf,DUe),e(Jf,KS),e(KS,GUe),e(Jf,OUe),e(A,VUe),e(A,Yf),e(Yf,Wae),e(Wae,XUe),e(Yf,zUe),e(Yf,ZS),e(ZS,QUe),e(Yf,WUe),e(A,HUe),e(A,Kf),e(Kf,Hae),e(Hae,UUe),e(Kf,JUe),e(Kf,eR),e(eR,YUe),e(Kf,KUe),e(A,ZUe),e(A,Zf),e(Zf,Uae),e(Uae,eJe),e(Zf,oJe),e(Zf,oR),e(oR,rJe),e(Zf,tJe),e(A,aJe),e(A,em),e(em,Jae),e(Jae,nJe),e(em,sJe),e(em,rR),e(rR,lJe),e(em,iJe),e(A,dJe),e(A,om),e(om,Yae),e(Yae,cJe),e(om,fJe),e(om,tR),e(tR,mJe),e(om,gJe),e(A,hJe),e(A,rm),e(rm,Kae),e(Kae,pJe),e(rm,_Je),e(rm,aR),e(aR,uJe),e(rm,bJe),e(A,vJe),e(A,tm),e(tm,Zae),e(Zae,FJe),e(tm,TJe),e(tm,nR),e(nR,MJe),e(tm,EJe),e(A,CJe),e(A,am),e(am,ene),e(ene,wJe),e(am,AJe),e(am,sR),e(sR,LJe),e(am,yJe),e(A,xJe),e(A,nm),e(nm,one),e(one,$Je),e(nm,kJe),e(nm,lR),e(lR,SJe),e(nm,RJe),e(A,PJe),e(A,sm),e(sm,rne),e(rne,BJe),e(sm,IJe),e(sm,iR),e(iR,NJe),e(sm,qJe),e(A,jJe),e(A,lm),e(lm,tne),e(tne,DJe),e(lm,GJe),e(lm,dR),e(dR,OJe),e(lm,VJe),e(A,XJe),e(A,im),e(im,ane),e(ane,zJe),e(im,QJe),e(im,cR),e(cR,WJe),e(im,HJe),e(A,UJe),e(A,dm),e(dm,nne),e(nne,JJe),e(dm,YJe),e(dm,fR),e(fR,KJe),e(dm,ZJe),e(A,eYe),e(A,cm),e(cm,sne),e(sne,oYe),e(cm,rYe),e(cm,mR),e(mR,tYe),e(cm,aYe),e(A,nYe),e(A,fm),e(fm,lne),e(lne,sYe),e(fm,lYe),e(fm,gR),e(gR,iYe),e(fm,dYe),e(A,cYe),e(A,mm),e(mm,ine),e(ine,fYe),e(mm,mYe),e(mm,hR),e(hR,gYe),e(mm,hYe),e(A,pYe),e(A,gm),e(gm,dne),e(dne,_Ye),e(gm,uYe),e(gm,pR),e(pR,bYe),e(gm,vYe),e(A,FYe),e(A,hm),e(hm,cne),e(cne,TYe),e(hm,MYe),e(hm,_R),e(_R,EYe),e(hm,CYe),e(A,wYe),e(A,pm),e(pm,fne),e(fne,AYe),e(pm,LYe),e(pm,uR),e(uR,yYe),e(pm,xYe),e(A,$Ye),e(A,_m),e(_m,mne),e(mne,kYe),e(_m,SYe),e(_m,bR),e(bR,RYe),e(_m,PYe),e(A,BYe),e(A,um),e(um,gne),e(gne,IYe),e(um,NYe),e(um,vR),e(vR,qYe),e(um,jYe),e(A,DYe),e(A,bm),e(bm,hne),e(hne,GYe),e(bm,OYe),e(bm,FR),e(FR,VYe),e(bm,XYe),e(A,zYe),e(A,vm),e(vm,pne),e(pne,QYe),e(vm,WYe),e(vm,TR),e(TR,HYe),e(vm,UYe),e(A,JYe),e(A,Fm),e(Fm,_ne),e(_ne,YYe),e(Fm,KYe),e(Fm,MR),e(MR,ZYe),e(Fm,eKe),e(A,oKe),e(A,Tm),e(Tm,une),e(une,rKe),e(Tm,tKe),e(Tm,ER),e(ER,aKe),e(Tm,nKe),e(A,sKe),e(A,Mm),e(Mm,bne),e(bne,lKe),e(Mm,iKe),e(Mm,CR),e(CR,dKe),e(Mm,cKe),e(A,fKe),e(A,Em),e(Em,vne),e(vne,mKe),e(Em,gKe),e(Em,wR),e(wR,hKe),e(Em,pKe),e(A,_Ke),e(A,Cm),e(Cm,Fne),e(Fne,uKe),e(Cm,bKe),e(Cm,AR),e(AR,vKe),e(Cm,FKe),e(A,TKe),e(A,wm),e(wm,Tne),e(Tne,MKe),e(wm,EKe),e(wm,LR),e(LR,CKe),e(wm,wKe),e(A,AKe),e(A,Am),e(Am,Mne),e(Mne,LKe),e(Am,yKe),e(Am,yR),e(yR,xKe),e(Am,$Ke),e(A,kKe),e(A,Lm),e(Lm,Ene),e(Ene,SKe),e(Lm,RKe),e(Lm,xR),e(xR,PKe),e(Lm,BKe),e(A,IKe),e(A,ym),e(ym,Cne),e(Cne,NKe),e(ym,qKe),e(ym,$R),e($R,jKe),e(ym,DKe),e(A,GKe),e(A,xm),e(xm,wne),e(wne,OKe),e(xm,VKe),e(xm,kR),e(kR,XKe),e(xm,zKe),e(A,QKe),e(A,$m),e($m,Ane),e(Ane,WKe),e($m,HKe),e($m,SR),e(SR,UKe),e($m,JKe),e(A,YKe),e(A,km),e(km,Lne),e(Lne,KKe),e(km,ZKe),e(km,RR),e(RR,eZe),e(km,oZe),e(A,rZe),e(A,Sm),e(Sm,yne),e(yne,tZe),e(Sm,aZe),e(Sm,PR),e(PR,nZe),e(Sm,sZe),e(A,lZe),e(A,Rm),e(Rm,xne),e(xne,iZe),e(Rm,dZe),e(Rm,BR),e(BR,cZe),e(Rm,fZe),e(A,mZe),e(A,Pm),e(Pm,$ne),e($ne,gZe),e(Pm,hZe),e(Pm,IR),e(IR,pZe),e(Pm,_Ze),e(A,uZe),e(A,Bm),e(Bm,kne),e(kne,bZe),e(Bm,vZe),e(Bm,NR),e(NR,FZe),e(Bm,TZe),e(A,MZe),e(A,Im),e(Im,Sne),e(Sne,EZe),e(Im,CZe),e(Im,qR),e(qR,wZe),e(Im,AZe),e(A,LZe),e(A,Nm),e(Nm,Rne),e(Rne,yZe),e(Nm,xZe),e(Nm,jR),e(jR,$Ze),e(Nm,kZe),e(A,SZe),e(A,qm),e(qm,Pne),e(Pne,RZe),e(qm,PZe),e(qm,DR),e(DR,BZe),e(qm,IZe),e(A,NZe),e(A,jm),e(jm,Bne),e(Bne,qZe),e(jm,jZe),e(jm,GR),e(GR,DZe),e(jm,GZe),e(A,OZe),e(A,Dm),e(Dm,Ine),e(Ine,VZe),e(Dm,XZe),e(Dm,OR),e(OR,zZe),e(Dm,QZe),e(A,WZe),e(A,Gm),e(Gm,Nne),e(Nne,HZe),e(Gm,UZe),e(Gm,VR),e(VR,JZe),e(Gm,YZe),e(A,KZe),e(A,Om),e(Om,qne),e(qne,ZZe),e(Om,eeo),e(Om,XR),e(XR,oeo),e(Om,reo),e(A,teo),e(A,Vm),e(Vm,jne),e(jne,aeo),e(Vm,neo),e(Vm,zR),e(zR,seo),e(Vm,leo),e(A,ieo),e(A,Xm),e(Xm,Dne),e(Dne,deo),e(Xm,ceo),e(Xm,QR),e(QR,feo),e(Xm,meo),e(A,geo),e(A,zm),e(zm,Gne),e(Gne,heo),e(zm,peo),e(zm,WR),e(WR,_eo),e(zm,ueo),e(A,beo),e(A,Qm),e(Qm,One),e(One,veo),e(Qm,Feo),e(Qm,HR),e(HR,Teo),e(Qm,Meo),e(A,Eeo),e(A,Wm),e(Wm,Vne),e(Vne,Ceo),e(Wm,weo),e(Wm,UR),e(UR,Aeo),e(Wm,Leo),e(A,yeo),e(A,Hm),e(Hm,Xne),e(Xne,xeo),e(Hm,$eo),e(Hm,JR),e(JR,keo),e(Hm,Seo),e(A,Reo),e(A,Um),e(Um,zne),e(zne,Peo),e(Um,Beo),e(Um,YR),e(YR,Ieo),e(Um,Neo),e(A,qeo),e(A,Jm),e(Jm,Qne),e(Qne,jeo),e(Jm,Deo),e(Jm,KR),e(KR,Geo),e(Jm,Oeo),e(A,Veo),e(A,Ym),e(Ym,Wne),e(Wne,Xeo),e(Ym,zeo),e(Ym,ZR),e(ZR,Qeo),e(Ym,Weo),e(A,Heo),e(A,Km),e(Km,Hne),e(Hne,Ueo),e(Km,Jeo),e(Km,eP),e(eP,Yeo),e(Km,Keo),e(A,Zeo),e(A,Zm),e(Zm,Une),e(Une,eoo),e(Zm,ooo),e(Zm,oP),e(oP,roo),e(Zm,too),e(A,aoo),e(A,eg),e(eg,Jne),e(Jne,noo),e(eg,soo),e(eg,rP),e(rP,loo),e(eg,ioo),e(A,doo),e(A,og),e(og,Yne),e(Yne,coo),e(og,foo),e(og,tP),e(tP,moo),e(og,goo),e(A,hoo),e(A,rg),e(rg,Kne),e(Kne,poo),e(rg,_oo),e(rg,aP),e(aP,uoo),e(rg,boo),e(A,voo),e(A,tg),e(tg,Zne),e(Zne,Foo),e(tg,Too),e(tg,nP),e(nP,Moo),e(tg,Eoo),e(A,Coo),e(A,ag),e(ag,ese),e(ese,woo),e(ag,Aoo),e(ag,sP),e(sP,Loo),e(ag,yoo),e(A,xoo),e(A,ng),e(ng,ose),e(ose,$oo),e(ng,koo),e(ng,lP),e(lP,Soo),e(ng,Roo),e(A,Poo),e(A,sg),e(sg,rse),e(rse,Boo),e(sg,Ioo),e(sg,iP),e(iP,Noo),e(sg,qoo),e(A,joo),e(A,lg),e(lg,tse),e(tse,Doo),e(lg,Goo),e(lg,dP),e(dP,Ooo),e(lg,Voo),e(A,Xoo),e(A,ig),e(ig,ase),e(ase,zoo),e(ig,Qoo),e(ig,cP),e(cP,Woo),e(ig,Hoo),e(A,Uoo),e(A,dg),e(dg,nse),e(nse,Joo),e(dg,Yoo),e(dg,fP),e(fP,Koo),e(dg,Zoo),e(A,ero),e(A,cg),e(cg,sse),e(sse,oro),e(cg,rro),e(cg,mP),e(mP,tro),e(cg,aro),e(A,nro),e(A,fg),e(fg,lse),e(lse,sro),e(fg,lro),e(fg,gP),e(gP,iro),e(fg,dro),e(A,cro),e(A,mg),e(mg,ise),e(ise,fro),e(mg,mro),e(mg,hP),e(hP,gro),e(mg,hro),e(A,pro),e(A,gg),e(gg,dse),e(dse,_ro),e(gg,uro),e(gg,pP),e(pP,bro),e(gg,vro),e(A,Fro),e(A,hg),e(hg,cse),e(cse,Tro),e(hg,Mro),e(hg,_P),e(_P,Ero),e(hg,Cro),e(A,wro),e(A,pg),e(pg,fse),e(fse,Aro),e(pg,Lro),e(pg,uP),e(uP,yro),e(pg,xro),e(A,$ro),e(A,_g),e(_g,mse),e(mse,kro),e(_g,Sro),e(_g,bP),e(bP,Rro),e(_g,Pro),e(A,Bro),e(A,ug),e(ug,gse),e(gse,Iro),e(ug,Nro),e(ug,vP),e(vP,qro),e(ug,jro),e(A,Dro),e(A,bg),e(bg,hse),e(hse,Gro),e(bg,Oro),e(bg,FP),e(FP,Vro),e(bg,Xro),e(A,zro),e(A,vg),e(vg,pse),e(pse,Qro),e(vg,Wro),e(vg,TP),e(TP,Hro),e(vg,Uro),e(A,Jro),e(A,Fg),e(Fg,_se),e(_se,Yro),e(Fg,Kro),e(Fg,MP),e(MP,Zro),e(Fg,eto),e(A,oto),e(A,Tg),e(Tg,use),e(use,rto),e(Tg,tto),e(Tg,EP),e(EP,ato),e(Tg,nto),e(A,sto),e(A,Mg),e(Mg,bse),e(bse,lto),e(Mg,ito),e(Mg,CP),e(CP,dto),e(Mg,cto),e(A,fto),e(A,Eg),e(Eg,vse),e(vse,mto),e(Eg,gto),e(Eg,wP),e(wP,hto),e(Eg,pto),e(A,_to),e(A,Cg),e(Cg,Fse),e(Fse,uto),e(Cg,bto),e(Cg,AP),e(AP,vto),e(Cg,Fto),e(A,Tto),e(A,wg),e(wg,Tse),e(Tse,Mto),e(wg,Eto),e(wg,LP),e(LP,Cto),e(wg,wto),e(A,Ato),e(A,Ag),e(Ag,Mse),e(Mse,Lto),e(Ag,yto),e(Ag,yP),e(yP,xto),e(Ag,$to),e(A,kto),e(A,Lg),e(Lg,Ese),e(Ese,Sto),e(Lg,Rto),e(Lg,xP),e(xP,Pto),e(Lg,Bto),e(A,Ito),e(A,yg),e(yg,Cse),e(Cse,Nto),e(yg,qto),e(yg,$P),e($P,jto),e(yg,Dto),e(A,Gto),e(A,xg),e(xg,wse),e(wse,Oto),e(xg,Vto),e(xg,kP),e(kP,Xto),e(xg,zto),e(A,Qto),e(A,$g),e($g,Ase),e(Ase,Wto),e($g,Hto),e($g,SP),e(SP,Uto),e($g,Jto),e(A,Yto),e(A,kg),e(kg,Lse),e(Lse,Kto),e(kg,Zto),e(kg,RP),e(RP,eao),e(kg,oao),e(A,rao),e(A,Sg),e(Sg,yse),e(yse,tao),e(Sg,aao),e(Sg,PP),e(PP,nao),e(Sg,sao),e(A,lao),e(A,Rg),e(Rg,xse),e(xse,iao),e(Rg,dao),e(Rg,BP),e(BP,cao),e(Rg,fao),e(A,mao),e(A,Pg),e(Pg,$se),e($se,gao),e(Pg,hao),e(Pg,IP),e(IP,pao),e(Pg,_ao),e(A,uao),e(A,Bg),e(Bg,kse),e(kse,bao),e(Bg,vao),e(Bg,NP),e(NP,Fao),e(Bg,Tao),e(A,Mao),e(A,Ig),e(Ig,Sse),e(Sse,Eao),e(Ig,Cao),e(Ig,qP),e(qP,wao),e(Ig,Aao),e(A,Lao),e(A,Ng),e(Ng,Rse),e(Rse,yao),e(Ng,xao),e(Ng,jP),e(jP,$ao),e(Ng,kao),e(A,Sao),e(A,qg),e(qg,Pse),e(Pse,Rao),e(qg,Pao),e(qg,DP),e(DP,Bao),e(qg,Iao),e(A,Nao),e(A,jg),e(jg,Bse),e(Bse,qao),e(jg,jao),e(jg,GP),e(GP,Dao),e(jg,Gao),e(A,Oao),e(A,Dg),e(Dg,Ise),e(Ise,Vao),e(Dg,Xao),e(Dg,OP),e(OP,zao),e(Dg,Qao),e(A,Wao),e(A,Gg),e(Gg,Nse),e(Nse,Hao),e(Gg,Uao),e(Gg,VP),e(VP,Jao),e(Gg,Yao),e(A,Kao),e(A,Og),e(Og,qse),e(qse,Zao),e(Og,eno),e(Og,XP),e(XP,ono),e(Og,rno),e(A,tno),e(A,Vg),e(Vg,jse),e(jse,ano),e(Vg,nno),e(Vg,zP),e(zP,sno),e(Vg,lno),e(A,ino),e(A,Xg),e(Xg,Dse),e(Dse,dno),e(Xg,cno),e(Xg,QP),e(QP,fno),e(Xg,mno),e(A,gno),e(A,zg),e(zg,Gse),e(Gse,hno),e(zg,pno),e(zg,WP),e(WP,_no),e(zg,uno),e(A,bno),e(A,Qg),e(Qg,Ose),e(Ose,vno),e(Qg,Fno),e(Qg,HP),e(HP,Tno),e(Qg,Mno),e(A,Eno),e(A,Wg),e(Wg,Vse),e(Vse,Cno),e(Wg,wno),e(Wg,UP),e(UP,Ano),e(Wg,Lno),e(A,yno),e(A,Hg),e(Hg,Xse),e(Xse,xno),e(Hg,$no),e(Hg,JP),e(JP,kno),e(Hg,Sno),e(A,Rno),e(A,Ug),e(Ug,zse),e(zse,Pno),e(Ug,Bno),e(Ug,YP),e(YP,Ino),e(Ug,Nno),e(A,qno),e(A,Jg),e(Jg,Qse),e(Qse,jno),e(Jg,Dno),e(Jg,KP),e(KP,Gno),e(Jg,Ono),e(A,Vno),e(A,Yg),e(Yg,Wse),e(Wse,Xno),e(Yg,zno),e(Yg,ZP),e(ZP,Qno),e(Yg,Wno),e(Lr,Hno),M(Kg,Lr,null),e(wo,Uno),e(wo,Zg),M(hL,Zg,null),e(Zg,Jno),e(Zg,Hse),e(Hse,Yno),b(f,mXe,u),b(f,Ii,u),e(Ii,eh),e(eh,Use),M(pL,Use,null),e(Ii,Kno),e(Ii,Jse),e(Jse,Zno),b(f,gXe,u),b(f,Ao,u),M(_L,Ao,null),e(Ao,eso),e(Ao,uL),e(uL,oso),e(uL,eB),e(eB,rso),e(uL,tso),e(Ao,aso),e(Ao,bL),e(bL,nso),e(bL,Yse),e(Yse,sso),e(bL,lso),e(Ao,iso),e(Ao,yr),M(vL,yr,null),e(yr,dso),e(yr,Kse),e(Kse,cso),e(yr,fso),e(yr,Pa),e(Pa,mso),e(Pa,Zse),e(Zse,gso),e(Pa,hso),e(Pa,ele),e(ele,pso),e(Pa,_so),e(Pa,ole),e(ole,uso),e(Pa,bso),e(yr,vso),e(yr,k),e(k,jn),e(jn,rle),e(rle,Fso),e(jn,Tso),e(jn,oB),e(oB,Mso),e(jn,Eso),e(jn,rB),e(rB,Cso),e(jn,wso),e(k,Aso),e(k,Dn),e(Dn,tle),e(tle,Lso),e(Dn,yso),e(Dn,tB),e(tB,xso),e(Dn,$so),e(Dn,aB),e(aB,kso),e(Dn,Sso),e(k,Rso),e(k,Gn),e(Gn,ale),e(ale,Pso),e(Gn,Bso),e(Gn,nB),e(nB,Iso),e(Gn,Nso),e(Gn,sB),e(sB,qso),e(Gn,jso),e(k,Dso),e(k,oh),e(oh,nle),e(nle,Gso),e(oh,Oso),e(oh,lB),e(lB,Vso),e(oh,Xso),e(k,zso),e(k,On),e(On,sle),e(sle,Qso),e(On,Wso),e(On,iB),e(iB,Hso),e(On,Uso),e(On,dB),e(dB,Jso),e(On,Yso),e(k,Kso),e(k,rh),e(rh,lle),e(lle,Zso),e(rh,elo),e(rh,cB),e(cB,olo),e(rh,rlo),e(k,tlo),e(k,th),e(th,ile),e(ile,alo),e(th,nlo),e(th,fB),e(fB,slo),e(th,llo),e(k,ilo),e(k,ah),e(ah,dle),e(dle,dlo),e(ah,clo),e(ah,mB),e(mB,flo),e(ah,mlo),e(k,glo),e(k,Vn),e(Vn,cle),e(cle,hlo),e(Vn,plo),e(Vn,gB),e(gB,_lo),e(Vn,ulo),e(Vn,hB),e(hB,blo),e(Vn,vlo),e(k,Flo),e(k,Xn),e(Xn,fle),e(fle,Tlo),e(Xn,Mlo),e(Xn,pB),e(pB,Elo),e(Xn,Clo),e(Xn,_B),e(_B,wlo),e(Xn,Alo),e(k,Llo),e(k,zn),e(zn,mle),e(mle,ylo),e(zn,xlo),e(zn,uB),e(uB,$lo),e(zn,klo),e(zn,bB),e(bB,Slo),e(zn,Rlo),e(k,Plo),e(k,nh),e(nh,gle),e(gle,Blo),e(nh,Ilo),e(nh,vB),e(vB,Nlo),e(nh,qlo),e(k,jlo),e(k,sh),e(sh,hle),e(hle,Dlo),e(sh,Glo),e(sh,FB),e(FB,Olo),e(sh,Vlo),e(k,Xlo),e(k,lh),e(lh,ple),e(ple,zlo),e(lh,Qlo),e(lh,TB),e(TB,Wlo),e(lh,Hlo),e(k,Ulo),e(k,Qn),e(Qn,_le),e(_le,Jlo),e(Qn,Ylo),e(Qn,MB),e(MB,Klo),e(Qn,Zlo),e(Qn,EB),e(EB,eio),e(Qn,oio),e(k,rio),e(k,ih),e(ih,ule),e(ule,tio),e(ih,aio),e(ih,CB),e(CB,nio),e(ih,sio),e(k,lio),e(k,Wn),e(Wn,ble),e(ble,iio),e(Wn,dio),e(Wn,wB),e(wB,cio),e(Wn,fio),e(Wn,AB),e(AB,mio),e(Wn,gio),e(k,hio),e(k,Hn),e(Hn,vle),e(vle,pio),e(Hn,_io),e(Hn,LB),e(LB,uio),e(Hn,bio),e(Hn,yB),e(yB,vio),e(Hn,Fio),e(k,Tio),e(k,Un),e(Un,Fle),e(Fle,Mio),e(Un,Eio),e(Un,xB),e(xB,Cio),e(Un,wio),e(Un,$B),e($B,Aio),e(Un,Lio),e(k,yio),e(k,Jn),e(Jn,Tle),e(Tle,xio),e(Jn,$io),e(Jn,kB),e(kB,kio),e(Jn,Sio),e(Jn,SB),e(SB,Rio),e(Jn,Pio),e(k,Bio),e(k,dh),e(dh,Mle),e(Mle,Iio),e(dh,Nio),e(dh,RB),e(RB,qio),e(dh,jio),e(k,Dio),e(k,Yn),e(Yn,Ele),e(Ele,Gio),e(Yn,Oio),e(Yn,PB),e(PB,Vio),e(Yn,Xio),e(Yn,BB),e(BB,zio),e(Yn,Qio),e(k,Wio),e(k,Kn),e(Kn,Cle),e(Cle,Hio),e(Kn,Uio),e(Kn,IB),e(IB,Jio),e(Kn,Yio),e(Kn,NB),e(NB,Kio),e(Kn,Zio),e(k,edo),e(k,Zn),e(Zn,wle),e(wle,odo),e(Zn,rdo),e(Zn,qB),e(qB,tdo),e(Zn,ado),e(Zn,jB),e(jB,ndo),e(Zn,sdo),e(k,ldo),e(k,es),e(es,Ale),e(Ale,ido),e(es,ddo),e(es,DB),e(DB,cdo),e(es,fdo),e(es,GB),e(GB,mdo),e(es,gdo),e(k,hdo),e(k,os),e(os,Lle),e(Lle,pdo),e(os,_do),e(os,OB),e(OB,udo),e(os,bdo),e(os,VB),e(VB,vdo),e(os,Fdo),e(k,Tdo),e(k,rs),e(rs,yle),e(yle,Mdo),e(rs,Edo),e(rs,XB),e(XB,Cdo),e(rs,wdo),e(rs,zB),e(zB,Ado),e(rs,Ldo),e(k,ydo),e(k,ch),e(ch,xle),e(xle,xdo),e(ch,$do),e(ch,QB),e(QB,kdo),e(ch,Sdo),e(k,Rdo),e(k,ts),e(ts,$le),e($le,Pdo),e(ts,Bdo),e(ts,WB),e(WB,Ido),e(ts,Ndo),e(ts,HB),e(HB,qdo),e(ts,jdo),e(k,Ddo),e(k,fh),e(fh,kle),e(kle,Gdo),e(fh,Odo),e(fh,UB),e(UB,Vdo),e(fh,Xdo),e(k,zdo),e(k,as),e(as,Sle),e(Sle,Qdo),e(as,Wdo),e(as,JB),e(JB,Hdo),e(as,Udo),e(as,YB),e(YB,Jdo),e(as,Ydo),e(k,Kdo),e(k,ns),e(ns,Rle),e(Rle,Zdo),e(ns,eco),e(ns,KB),e(KB,oco),e(ns,rco),e(ns,ZB),e(ZB,tco),e(ns,aco),e(k,nco),e(k,ss),e(ss,Ple),e(Ple,sco),e(ss,lco),e(ss,eI),e(eI,ico),e(ss,dco),e(ss,oI),e(oI,cco),e(ss,fco),e(k,mco),e(k,mh),e(mh,Ble),e(Ble,gco),e(mh,hco),e(mh,rI),e(rI,pco),e(mh,_co),e(k,uco),e(k,ls),e(ls,Ile),e(Ile,bco),e(ls,vco),e(ls,tI),e(tI,Fco),e(ls,Tco),e(ls,aI),e(aI,Mco),e(ls,Eco),e(k,Cco),e(k,is),e(is,Nle),e(Nle,wco),e(is,Aco),e(is,nI),e(nI,Lco),e(is,yco),e(is,sI),e(sI,xco),e(is,$co),e(k,kco),e(k,ds),e(ds,qle),e(qle,Sco),e(ds,Rco),e(ds,lI),e(lI,Pco),e(ds,Bco),e(ds,iI),e(iI,Ico),e(ds,Nco),e(k,qco),e(k,gh),e(gh,jle),e(jle,jco),e(gh,Dco),e(gh,dI),e(dI,Gco),e(gh,Oco),e(k,Vco),e(k,cs),e(cs,Dle),e(Dle,Xco),e(cs,zco),e(cs,cI),e(cI,Qco),e(cs,Wco),e(cs,fI),e(fI,Hco),e(cs,Uco),e(k,Jco),e(k,fs),e(fs,Gle),e(Gle,Yco),e(fs,Kco),e(fs,mI),e(mI,Zco),e(fs,efo),e(fs,gI),e(gI,ofo),e(fs,rfo),e(k,tfo),e(k,ms),e(ms,Ole),e(Ole,afo),e(ms,nfo),e(ms,hI),e(hI,sfo),e(ms,lfo),e(ms,pI),e(pI,ifo),e(ms,dfo),e(k,cfo),e(k,gs),e(gs,Vle),e(Vle,ffo),e(gs,mfo),e(gs,_I),e(_I,gfo),e(gs,hfo),e(gs,uI),e(uI,pfo),e(gs,_fo),e(k,ufo),e(k,hs),e(hs,Xle),e(Xle,bfo),e(hs,vfo),e(hs,bI),e(bI,Ffo),e(hs,Tfo),e(hs,vI),e(vI,Mfo),e(hs,Efo),e(k,Cfo),e(k,ps),e(ps,zle),e(zle,wfo),e(ps,Afo),e(ps,FI),e(FI,Lfo),e(ps,yfo),e(ps,TI),e(TI,xfo),e(ps,$fo),e(k,kfo),e(k,_s),e(_s,Qle),e(Qle,Sfo),e(_s,Rfo),e(_s,MI),e(MI,Pfo),e(_s,Bfo),e(_s,EI),e(EI,Ifo),e(_s,Nfo),e(k,qfo),e(k,us),e(us,Wle),e(Wle,jfo),e(us,Dfo),e(us,CI),e(CI,Gfo),e(us,Ofo),e(us,wI),e(wI,Vfo),e(us,Xfo),e(k,zfo),e(k,hh),e(hh,Hle),e(Hle,Qfo),e(hh,Wfo),e(hh,AI),e(AI,Hfo),e(hh,Ufo),e(k,Jfo),e(k,bs),e(bs,Ule),e(Ule,Yfo),e(bs,Kfo),e(bs,LI),e(LI,Zfo),e(bs,emo),e(bs,yI),e(yI,omo),e(bs,rmo),e(k,tmo),e(k,ph),e(ph,Jle),e(Jle,amo),e(ph,nmo),e(ph,xI),e(xI,smo),e(ph,lmo),e(k,imo),e(k,_h),e(_h,Yle),e(Yle,dmo),e(_h,cmo),e(_h,$I),e($I,fmo),e(_h,mmo),e(k,gmo),e(k,vs),e(vs,Kle),e(Kle,hmo),e(vs,pmo),e(vs,kI),e(kI,_mo),e(vs,umo),e(vs,SI),e(SI,bmo),e(vs,vmo),e(k,Fmo),e(k,Fs),e(Fs,Zle),e(Zle,Tmo),e(Fs,Mmo),e(Fs,RI),e(RI,Emo),e(Fs,Cmo),e(Fs,PI),e(PI,wmo),e(Fs,Amo),e(k,Lmo),e(k,Ts),e(Ts,eie),e(eie,ymo),e(Ts,xmo),e(Ts,BI),e(BI,$mo),e(Ts,kmo),e(Ts,II),e(II,Smo),e(Ts,Rmo),e(k,Pmo),e(k,uh),e(uh,oie),e(oie,Bmo),e(uh,Imo),e(uh,NI),e(NI,Nmo),e(uh,qmo),e(k,jmo),e(k,Ms),e(Ms,rie),e(rie,Dmo),e(Ms,Gmo),e(Ms,qI),e(qI,Omo),e(Ms,Vmo),e(Ms,jI),e(jI,Xmo),e(Ms,zmo),e(k,Qmo),e(k,Es),e(Es,tie),e(tie,Wmo),e(Es,Hmo),e(Es,DI),e(DI,Umo),e(Es,Jmo),e(Es,GI),e(GI,Ymo),e(Es,Kmo),e(k,Zmo),e(k,Cs),e(Cs,aie),e(aie,ego),e(Cs,ogo),e(Cs,OI),e(OI,rgo),e(Cs,tgo),e(Cs,VI),e(VI,ago),e(Cs,ngo),e(k,sgo),e(k,ws),e(ws,nie),e(nie,lgo),e(ws,igo),e(ws,XI),e(XI,dgo),e(ws,cgo),e(ws,zI),e(zI,fgo),e(ws,mgo),e(k,ggo),e(k,As),e(As,sie),e(sie,hgo),e(As,pgo),e(As,QI),e(QI,_go),e(As,ugo),e(As,WI),e(WI,bgo),e(As,vgo),e(k,Fgo),e(k,Ls),e(Ls,lie),e(lie,Tgo),e(Ls,Mgo),e(Ls,HI),e(HI,Ego),e(Ls,Cgo),e(Ls,UI),e(UI,wgo),e(Ls,Ago),e(k,Lgo),e(k,ys),e(ys,iie),e(iie,ygo),e(ys,xgo),e(ys,JI),e(JI,$go),e(ys,kgo),e(ys,YI),e(YI,Sgo),e(ys,Rgo),e(k,Pgo),e(k,bh),e(bh,die),e(die,Bgo),e(bh,Igo),e(bh,KI),e(KI,Ngo),e(bh,qgo),e(k,jgo),e(k,xs),e(xs,cie),e(cie,Dgo),e(xs,Ggo),e(xs,ZI),e(ZI,Ogo),e(xs,Vgo),e(xs,eN),e(eN,Xgo),e(xs,zgo),e(k,Qgo),e(k,vh),e(vh,fie),e(fie,Wgo),e(vh,Hgo),e(vh,oN),e(oN,Ugo),e(vh,Jgo),e(k,Ygo),e(k,Fh),e(Fh,mie),e(mie,Kgo),e(Fh,Zgo),e(Fh,rN),e(rN,eho),e(Fh,oho),e(k,rho),e(k,Th),e(Th,gie),e(gie,tho),e(Th,aho),e(Th,tN),e(tN,nho),e(Th,sho),e(k,lho),e(k,Mh),e(Mh,hie),e(hie,iho),e(Mh,dho),e(Mh,aN),e(aN,cho),e(Mh,fho),e(k,mho),e(k,$s),e($s,pie),e(pie,gho),e($s,hho),e($s,nN),e(nN,pho),e($s,_ho),e($s,sN),e(sN,uho),e($s,bho),e(k,vho),e(k,Eh),e(Eh,_ie),e(_ie,Fho),e(Eh,Tho),e(Eh,lN),e(lN,Mho),e(Eh,Eho),e(k,Cho),e(k,ks),e(ks,uie),e(uie,who),e(ks,Aho),e(ks,iN),e(iN,Lho),e(ks,yho),e(ks,dN),e(dN,xho),e(ks,$ho),e(k,kho),e(k,Ss),e(Ss,bie),e(bie,Sho),e(Ss,Rho),e(Ss,cN),e(cN,Pho),e(Ss,Bho),e(Ss,fN),e(fN,Iho),e(Ss,Nho),e(k,qho),e(k,Rs),e(Rs,vie),e(vie,jho),e(Rs,Dho),e(Rs,mN),e(mN,Gho),e(Rs,Oho),e(Rs,gN),e(gN,Vho),e(Rs,Xho),e(k,zho),e(k,Ps),e(Ps,Fie),e(Fie,Qho),e(Ps,Who),e(Ps,hN),e(hN,Hho),e(Ps,Uho),e(Ps,pN),e(pN,Jho),e(Ps,Yho),e(k,Kho),e(k,Bs),e(Bs,Tie),e(Tie,Zho),e(Bs,epo),e(Bs,_N),e(_N,opo),e(Bs,rpo),e(Bs,uN),e(uN,tpo),e(Bs,apo),e(k,npo),e(k,Is),e(Is,Mie),e(Mie,spo),e(Is,lpo),e(Is,bN),e(bN,ipo),e(Is,dpo),e(Is,vN),e(vN,cpo),e(Is,fpo),e(k,mpo),e(k,Ch),e(Ch,Eie),e(Eie,gpo),e(Ch,hpo),e(Ch,FN),e(FN,ppo),e(Ch,_po),e(k,upo),e(k,wh),e(wh,Cie),e(Cie,bpo),e(wh,vpo),e(wh,TN),e(TN,Fpo),e(wh,Tpo),e(k,Mpo),e(k,Ns),e(Ns,wie),e(wie,Epo),e(Ns,Cpo),e(Ns,MN),e(MN,wpo),e(Ns,Apo),e(Ns,EN),e(EN,Lpo),e(Ns,ypo),e(k,xpo),e(k,qs),e(qs,Aie),e(Aie,$po),e(qs,kpo),e(qs,CN),e(CN,Spo),e(qs,Rpo),e(qs,wN),e(wN,Ppo),e(qs,Bpo),e(k,Ipo),e(k,js),e(js,Lie),e(Lie,Npo),e(js,qpo),e(js,AN),e(AN,jpo),e(js,Dpo),e(js,LN),e(LN,Gpo),e(js,Opo),e(k,Vpo),e(k,Ah),e(Ah,yie),e(yie,Xpo),e(Ah,zpo),e(Ah,yN),e(yN,Qpo),e(Ah,Wpo),e(k,Hpo),e(k,Lh),e(Lh,xie),e(xie,Upo),e(Lh,Jpo),e(Lh,xN),e(xN,Ypo),e(Lh,Kpo),e(k,Zpo),e(k,yh),e(yh,$ie),e($ie,e_o),e(yh,o_o),e(yh,$N),e($N,r_o),e(yh,t_o),e(k,a_o),e(k,Ds),e(Ds,kie),e(kie,n_o),e(Ds,s_o),e(Ds,kN),e(kN,l_o),e(Ds,i_o),e(Ds,SN),e(SN,d_o),e(Ds,c_o),e(k,f_o),e(k,Gs),e(Gs,Sie),e(Sie,m_o),e(Gs,g_o),e(Gs,RN),e(RN,h_o),e(Gs,p_o),e(Gs,PN),e(PN,__o),e(Gs,u_o),e(k,b_o),e(k,xh),e(xh,Rie),e(Rie,v_o),e(xh,F_o),e(xh,BN),e(BN,T_o),e(xh,M_o),e(k,E_o),e(k,$h),e($h,Pie),e(Pie,C_o),e($h,w_o),e($h,IN),e(IN,A_o),e($h,L_o),e(k,y_o),e(k,kh),e(kh,Bie),e(Bie,x_o),e(kh,$_o),e(kh,NN),e(NN,k_o),e(kh,S_o),e(k,R_o),e(k,Os),e(Os,Iie),e(Iie,P_o),e(Os,B_o),e(Os,qN),e(qN,I_o),e(Os,N_o),e(Os,jN),e(jN,q_o),e(Os,j_o),e(k,D_o),e(k,Sh),e(Sh,Nie),e(Nie,G_o),e(Sh,O_o),e(Sh,DN),e(DN,V_o),e(Sh,X_o),e(k,z_o),e(k,Rh),e(Rh,qie),e(qie,Q_o),e(Rh,W_o),e(Rh,GN),e(GN,H_o),e(Rh,U_o),e(k,J_o),e(k,Vs),e(Vs,jie),e(jie,Y_o),e(Vs,K_o),e(Vs,ON),e(ON,Z_o),e(Vs,euo),e(Vs,VN),e(VN,ouo),e(Vs,ruo),e(k,tuo),e(k,Xs),e(Xs,Die),e(Die,auo),e(Xs,nuo),e(Xs,XN),e(XN,suo),e(Xs,luo),e(Xs,zN),e(zN,iuo),e(Xs,duo),e(k,cuo),e(k,zs),e(zs,Gie),e(Gie,fuo),e(zs,muo),e(zs,QN),e(QN,guo),e(zs,huo),e(zs,WN),e(WN,puo),e(zs,_uo),e(k,uuo),e(k,Qs),e(Qs,Oie),e(Oie,buo),e(Qs,vuo),e(Qs,HN),e(HN,Fuo),e(Qs,Tuo),e(Qs,UN),e(UN,Muo),e(Qs,Euo),e(yr,Cuo),M(Ph,yr,null),e(Ao,wuo),e(Ao,Bh),M(FL,Bh,null),e(Bh,Auo),e(Bh,Vie),e(Vie,Luo),b(f,hXe,u),b(f,Ni,u),e(Ni,Ih),e(Ih,Xie),M(TL,Xie,null),e(Ni,yuo),e(Ni,zie),e(zie,xuo),b(f,pXe,u),b(f,Lo,u),M(ML,Lo,null),e(Lo,$uo),e(Lo,EL),e(EL,kuo),e(EL,JN),e(JN,Suo),e(EL,Ruo),e(Lo,Puo),e(Lo,CL),e(CL,Buo),e(CL,Qie),e(Qie,Iuo),e(CL,Nuo),e(Lo,quo),e(Lo,He),M(wL,He,null),e(He,juo),e(He,Wie),e(Wie,Duo),e(He,Guo),e(He,Ba),e(Ba,Ouo),e(Ba,Hie),e(Hie,Vuo),e(Ba,Xuo),e(Ba,Uie),e(Uie,zuo),e(Ba,Quo),e(Ba,Jie),e(Jie,Wuo),e(Ba,Huo),e(He,Uuo),e(He,J),e(J,Nh),e(Nh,Yie),e(Yie,Juo),e(Nh,Yuo),e(Nh,YN),e(YN,Kuo),e(Nh,Zuo),e(J,e1o),e(J,qh),e(qh,Kie),e(Kie,o1o),e(qh,r1o),e(qh,KN),e(KN,t1o),e(qh,a1o),e(J,n1o),e(J,jh),e(jh,Zie),e(Zie,s1o),e(jh,l1o),e(jh,ZN),e(ZN,i1o),e(jh,d1o),e(J,c1o),e(J,Dh),e(Dh,ede),e(ede,f1o),e(Dh,m1o),e(Dh,eq),e(eq,g1o),e(Dh,h1o),e(J,p1o),e(J,Gh),e(Gh,ode),e(ode,_1o),e(Gh,u1o),e(Gh,oq),e(oq,b1o),e(Gh,v1o),e(J,F1o),e(J,Oh),e(Oh,rde),e(rde,T1o),e(Oh,M1o),e(Oh,rq),e(rq,E1o),e(Oh,C1o),e(J,w1o),e(J,Vh),e(Vh,tde),e(tde,A1o),e(Vh,L1o),e(Vh,tq),e(tq,y1o),e(Vh,x1o),e(J,$1o),e(J,Xh),e(Xh,ade),e(ade,k1o),e(Xh,S1o),e(Xh,aq),e(aq,R1o),e(Xh,P1o),e(J,B1o),e(J,zh),e(zh,nde),e(nde,I1o),e(zh,N1o),e(zh,nq),e(nq,q1o),e(zh,j1o),e(J,D1o),e(J,Qh),e(Qh,sde),e(sde,G1o),e(Qh,O1o),e(Qh,sq),e(sq,V1o),e(Qh,X1o),e(J,z1o),e(J,Wh),e(Wh,lde),e(lde,Q1o),e(Wh,W1o),e(Wh,lq),e(lq,H1o),e(Wh,U1o),e(J,J1o),e(J,Hh),e(Hh,ide),e(ide,Y1o),e(Hh,K1o),e(Hh,iq),e(iq,Z1o),e(Hh,e2o),e(J,o2o),e(J,Uh),e(Uh,dde),e(dde,r2o),e(Uh,t2o),e(Uh,dq),e(dq,a2o),e(Uh,n2o),e(J,s2o),e(J,Jh),e(Jh,cde),e(cde,l2o),e(Jh,i2o),e(Jh,cq),e(cq,d2o),e(Jh,c2o),e(J,f2o),e(J,Yh),e(Yh,fde),e(fde,m2o),e(Yh,g2o),e(Yh,fq),e(fq,h2o),e(Yh,p2o),e(J,_2o),e(J,Kh),e(Kh,mde),e(mde,u2o),e(Kh,b2o),e(Kh,mq),e(mq,v2o),e(Kh,F2o),e(J,T2o),e(J,Zh),e(Zh,gde),e(gde,M2o),e(Zh,E2o),e(Zh,gq),e(gq,C2o),e(Zh,w2o),e(J,A2o),e(J,ep),e(ep,hde),e(hde,L2o),e(ep,y2o),e(ep,hq),e(hq,x2o),e(ep,$2o),e(J,k2o),e(J,op),e(op,pde),e(pde,S2o),e(op,R2o),e(op,pq),e(pq,P2o),e(op,B2o),e(J,I2o),e(J,rp),e(rp,_de),e(_de,N2o),e(rp,q2o),e(rp,_q),e(_q,j2o),e(rp,D2o),e(J,G2o),e(J,tp),e(tp,ude),e(ude,O2o),e(tp,V2o),e(tp,uq),e(uq,X2o),e(tp,z2o),e(J,Q2o),e(J,ap),e(ap,bde),e(bde,W2o),e(ap,H2o),e(ap,bq),e(bq,U2o),e(ap,J2o),e(J,Y2o),e(J,np),e(np,vde),e(vde,K2o),e(np,Z2o),e(np,vq),e(vq,ebo),e(np,obo),e(J,rbo),e(J,sp),e(sp,Fde),e(Fde,tbo),e(sp,abo),e(sp,Fq),e(Fq,nbo),e(sp,sbo),e(J,lbo),e(J,lp),e(lp,Tde),e(Tde,ibo),e(lp,dbo),e(lp,Tq),e(Tq,cbo),e(lp,fbo),e(J,mbo),e(J,ip),e(ip,Mde),e(Mde,gbo),e(ip,hbo),e(ip,Mq),e(Mq,pbo),e(ip,_bo),e(J,ubo),e(J,dp),e(dp,Ede),e(Ede,bbo),e(dp,vbo),e(dp,Eq),e(Eq,Fbo),e(dp,Tbo),e(J,Mbo),e(J,cp),e(cp,Cde),e(Cde,Ebo),e(cp,Cbo),e(cp,Cq),e(Cq,wbo),e(cp,Abo),e(J,Lbo),e(J,fp),e(fp,wde),e(wde,ybo),e(fp,xbo),e(fp,wq),e(wq,$bo),e(fp,kbo),e(J,Sbo),e(J,mp),e(mp,Ade),e(Ade,Rbo),e(mp,Pbo),e(mp,Aq),e(Aq,Bbo),e(mp,Ibo),e(J,Nbo),e(J,gp),e(gp,Lde),e(Lde,qbo),e(gp,jbo),e(gp,Lq),e(Lq,Dbo),e(gp,Gbo),e(J,Obo),e(J,hp),e(hp,yde),e(yde,Vbo),e(hp,Xbo),e(hp,yq),e(yq,zbo),e(hp,Qbo),e(J,Wbo),e(J,pp),e(pp,xde),e(xde,Hbo),e(pp,Ubo),e(pp,xq),e(xq,Jbo),e(pp,Ybo),e(J,Kbo),e(J,_p),e(_p,$de),e($de,Zbo),e(_p,evo),e(_p,$q),e($q,ovo),e(_p,rvo),e(J,tvo),e(J,up),e(up,kde),e(kde,avo),e(up,nvo),e(up,kq),e(kq,svo),e(up,lvo),e(He,ivo),M(bp,He,null),e(He,dvo),M(vp,He,null),e(Lo,cvo),e(Lo,Fp),M(AL,Fp,null),e(Fp,fvo),e(Fp,Sde),e(Sde,mvo),b(f,_Xe,u),b(f,qi,u),e(qi,Tp),e(Tp,Rde),M(LL,Rde,null),e(qi,gvo),e(qi,Pde),e(Pde,hvo),b(f,uXe,u),b(f,yo,u),M(yL,yo,null),e(yo,pvo),e(yo,xL),e(xL,_vo),e(xL,Sq),e(Sq,uvo),e(xL,bvo),e(yo,vvo),e(yo,$L),e($L,Fvo),e($L,Bde),e(Bde,Tvo),e($L,Mvo),e(yo,Evo),e(yo,Ue),M(kL,Ue,null),e(Ue,Cvo),e(Ue,Ide),e(Ide,wvo),e(Ue,Avo),e(Ue,ji),e(ji,Lvo),e(ji,Nde),e(Nde,yvo),e(ji,xvo),e(ji,qde),e(qde,$vo),e(ji,kvo),e(Ue,Svo),e(Ue,he),e(he,Mp),e(Mp,jde),e(jde,Rvo),e(Mp,Pvo),e(Mp,Rq),e(Rq,Bvo),e(Mp,Ivo),e(he,Nvo),e(he,Ep),e(Ep,Dde),e(Dde,qvo),e(Ep,jvo),e(Ep,Gde),e(Gde,Dvo),e(Ep,Gvo),e(he,Ovo),e(he,Cp),e(Cp,Ode),e(Ode,Vvo),e(Cp,Xvo),e(Cp,Pq),e(Pq,zvo),e(Cp,Qvo),e(he,Wvo),e(he,wp),e(wp,Vde),e(Vde,Hvo),e(wp,Uvo),e(wp,Bq),e(Bq,Jvo),e(wp,Yvo),e(he,Kvo),e(he,Ap),e(Ap,Xde),e(Xde,Zvo),e(Ap,eFo),e(Ap,Iq),e(Iq,oFo),e(Ap,rFo),e(he,tFo),e(he,Lp),e(Lp,zde),e(zde,aFo),e(Lp,nFo),e(Lp,Nq),e(Nq,sFo),e(Lp,lFo),e(he,iFo),e(he,yp),e(yp,Qde),e(Qde,dFo),e(yp,cFo),e(yp,qq),e(qq,fFo),e(yp,mFo),e(he,gFo),e(he,xp),e(xp,Wde),e(Wde,hFo),e(xp,pFo),e(xp,jq),e(jq,_Fo),e(xp,uFo),e(he,bFo),e(he,$p),e($p,Hde),e(Hde,vFo),e($p,FFo),e($p,Dq),e(Dq,TFo),e($p,MFo),e(he,EFo),e(he,kp),e(kp,Ude),e(Ude,CFo),e(kp,wFo),e(kp,Gq),e(Gq,AFo),e(kp,LFo),e(he,yFo),e(he,Sp),e(Sp,Jde),e(Jde,xFo),e(Sp,$Fo),e(Sp,Oq),e(Oq,kFo),e(Sp,SFo),e(he,RFo),e(he,Rp),e(Rp,Yde),e(Yde,PFo),e(Rp,BFo),e(Rp,Vq),e(Vq,IFo),e(Rp,NFo),e(he,qFo),e(he,Pp),e(Pp,Kde),e(Kde,jFo),e(Pp,DFo),e(Pp,Xq),e(Xq,GFo),e(Pp,OFo),e(he,VFo),e(he,Bp),e(Bp,Zde),e(Zde,XFo),e(Bp,zFo),e(Bp,zq),e(zq,QFo),e(Bp,WFo),e(he,HFo),e(he,Ip),e(Ip,ece),e(ece,UFo),e(Ip,JFo),e(Ip,Qq),e(Qq,YFo),e(Ip,KFo),e(he,ZFo),e(he,Np),e(Np,oce),e(oce,eTo),e(Np,oTo),e(Np,Wq),e(Wq,rTo),e(Np,tTo),e(he,aTo),e(he,qp),e(qp,rce),e(rce,nTo),e(qp,sTo),e(qp,Hq),e(Hq,lTo),e(qp,iTo),e(he,dTo),e(he,jp),e(jp,tce),e(tce,cTo),e(jp,fTo),e(jp,Uq),e(Uq,mTo),e(jp,gTo),e(Ue,hTo),M(Dp,Ue,null),e(Ue,pTo),M(Gp,Ue,null),e(yo,_To),e(yo,Op),M(SL,Op,null),e(Op,uTo),e(Op,ace),e(ace,bTo),b(f,bXe,u),b(f,Di,u),e(Di,Vp),e(Vp,nce),M(RL,nce,null),e(Di,vTo),e(Di,sce),e(sce,FTo),b(f,vXe,u),b(f,xo,u),M(PL,xo,null),e(xo,TTo),e(xo,Gi),e(Gi,MTo),e(Gi,Jq),e(Jq,ETo),e(Gi,CTo),e(Gi,Yq),e(Yq,wTo),e(Gi,ATo),e(xo,LTo),e(xo,BL),e(BL,yTo),e(BL,lce),e(lce,xTo),e(BL,$To),e(xo,kTo),e(xo,lt),M(IL,lt,null),e(lt,STo),e(lt,ice),e(ice,RTo),e(lt,PTo),e(lt,Oi),e(Oi,BTo),e(Oi,dce),e(dce,ITo),e(Oi,NTo),e(Oi,Kq),e(Kq,qTo),e(Oi,jTo),e(lt,DTo),M(Xp,lt,null),e(xo,GTo),e(xo,Je),M(NL,Je,null),e(Je,OTo),e(Je,cce),e(cce,VTo),e(Je,XTo),e(Je,Ia),e(Ia,zTo),e(Ia,fce),e(fce,QTo),e(Ia,WTo),e(Ia,mce),e(mce,HTo),e(Ia,UTo),e(Ia,gce),e(gce,JTo),e(Ia,YTo),e(Je,KTo),e(Je,y),e(y,zp),e(zp,hce),e(hce,ZTo),e(zp,e7o),e(zp,Zq),e(Zq,o7o),e(zp,r7o),e(y,t7o),e(y,Qp),e(Qp,pce),e(pce,a7o),e(Qp,n7o),e(Qp,ej),e(ej,s7o),e(Qp,l7o),e(y,i7o),e(y,Wp),e(Wp,_ce),e(_ce,d7o),e(Wp,c7o),e(Wp,oj),e(oj,f7o),e(Wp,m7o),e(y,g7o),e(y,Hp),e(Hp,uce),e(uce,h7o),e(Hp,p7o),e(Hp,rj),e(rj,_7o),e(Hp,u7o),e(y,b7o),e(y,Up),e(Up,bce),e(bce,v7o),e(Up,F7o),e(Up,tj),e(tj,T7o),e(Up,M7o),e(y,E7o),e(y,Jp),e(Jp,vce),e(vce,C7o),e(Jp,w7o),e(Jp,aj),e(aj,A7o),e(Jp,L7o),e(y,y7o),e(y,Yp),e(Yp,Fce),e(Fce,x7o),e(Yp,$7o),e(Yp,nj),e(nj,k7o),e(Yp,S7o),e(y,R7o),e(y,Kp),e(Kp,Tce),e(Tce,P7o),e(Kp,B7o),e(Kp,sj),e(sj,I7o),e(Kp,N7o),e(y,q7o),e(y,Zp),e(Zp,Mce),e(Mce,j7o),e(Zp,D7o),e(Zp,lj),e(lj,G7o),e(Zp,O7o),e(y,V7o),e(y,e_),e(e_,Ece),e(Ece,X7o),e(e_,z7o),e(e_,ij),e(ij,Q7o),e(e_,W7o),e(y,H7o),e(y,o_),e(o_,Cce),e(Cce,U7o),e(o_,J7o),e(o_,dj),e(dj,Y7o),e(o_,K7o),e(y,Z7o),e(y,r_),e(r_,wce),e(wce,e8o),e(r_,o8o),e(r_,cj),e(cj,r8o),e(r_,t8o),e(y,a8o),e(y,t_),e(t_,Ace),e(Ace,n8o),e(t_,s8o),e(t_,fj),e(fj,l8o),e(t_,i8o),e(y,d8o),e(y,a_),e(a_,Lce),e(Lce,c8o),e(a_,f8o),e(a_,mj),e(mj,m8o),e(a_,g8o),e(y,h8o),e(y,n_),e(n_,yce),e(yce,p8o),e(n_,_8o),e(n_,gj),e(gj,u8o),e(n_,b8o),e(y,v8o),e(y,s_),e(s_,xce),e(xce,F8o),e(s_,T8o),e(s_,hj),e(hj,M8o),e(s_,E8o),e(y,C8o),e(y,l_),e(l_,$ce),e($ce,w8o),e(l_,A8o),e(l_,pj),e(pj,L8o),e(l_,y8o),e(y,x8o),e(y,i_),e(i_,kce),e(kce,$8o),e(i_,k8o),e(i_,_j),e(_j,S8o),e(i_,R8o),e(y,P8o),e(y,d_),e(d_,Sce),e(Sce,B8o),e(d_,I8o),e(d_,uj),e(uj,N8o),e(d_,q8o),e(y,j8o),e(y,c_),e(c_,Rce),e(Rce,D8o),e(c_,G8o),e(c_,bj),e(bj,O8o),e(c_,V8o),e(y,X8o),e(y,f_),e(f_,Pce),e(Pce,z8o),e(f_,Q8o),e(f_,vj),e(vj,W8o),e(f_,H8o),e(y,U8o),e(y,m_),e(m_,Bce),e(Bce,J8o),e(m_,Y8o),e(m_,Fj),e(Fj,K8o),e(m_,Z8o),e(y,eMo),e(y,g_),e(g_,Ice),e(Ice,oMo),e(g_,rMo),e(g_,Tj),e(Tj,tMo),e(g_,aMo),e(y,nMo),e(y,h_),e(h_,Nce),e(Nce,sMo),e(h_,lMo),e(h_,Mj),e(Mj,iMo),e(h_,dMo),e(y,cMo),e(y,p_),e(p_,qce),e(qce,fMo),e(p_,mMo),e(p_,Ej),e(Ej,gMo),e(p_,hMo),e(y,pMo),e(y,__),e(__,jce),e(jce,_Mo),e(__,uMo),e(__,Cj),e(Cj,bMo),e(__,vMo),e(y,FMo),e(y,u_),e(u_,Dce),e(Dce,TMo),e(u_,MMo),e(u_,wj),e(wj,EMo),e(u_,CMo),e(y,wMo),e(y,b_),e(b_,Gce),e(Gce,AMo),e(b_,LMo),e(b_,Aj),e(Aj,yMo),e(b_,xMo),e(y,$Mo),e(y,v_),e(v_,Oce),e(Oce,kMo),e(v_,SMo),e(v_,Lj),e(Lj,RMo),e(v_,PMo),e(y,BMo),e(y,F_),e(F_,Vce),e(Vce,IMo),e(F_,NMo),e(F_,yj),e(yj,qMo),e(F_,jMo),e(y,DMo),e(y,T_),e(T_,Xce),e(Xce,GMo),e(T_,OMo),e(T_,xj),e(xj,VMo),e(T_,XMo),e(y,zMo),e(y,M_),e(M_,zce),e(zce,QMo),e(M_,WMo),e(M_,$j),e($j,HMo),e(M_,UMo),e(y,JMo),e(y,E_),e(E_,Qce),e(Qce,YMo),e(E_,KMo),e(E_,kj),e(kj,ZMo),e(E_,e4o),e(y,o4o),e(y,C_),e(C_,Wce),e(Wce,r4o),e(C_,t4o),e(C_,Sj),e(Sj,a4o),e(C_,n4o),e(y,s4o),e(y,w_),e(w_,Hce),e(Hce,l4o),e(w_,i4o),e(w_,Rj),e(Rj,d4o),e(w_,c4o),e(y,f4o),e(y,Ws),e(Ws,Uce),e(Uce,m4o),e(Ws,g4o),e(Ws,Pj),e(Pj,h4o),e(Ws,p4o),e(Ws,Bj),e(Bj,_4o),e(Ws,u4o),e(y,b4o),e(y,A_),e(A_,Jce),e(Jce,v4o),e(A_,F4o),e(A_,Ij),e(Ij,T4o),e(A_,M4o),e(y,E4o),e(y,L_),e(L_,Yce),e(Yce,C4o),e(L_,w4o),e(L_,Nj),e(Nj,A4o),e(L_,L4o),e(y,y4o),e(y,y_),e(y_,Kce),e(Kce,x4o),e(y_,$4o),e(y_,qj),e(qj,k4o),e(y_,S4o),e(y,R4o),e(y,x_),e(x_,Zce),e(Zce,P4o),e(x_,B4o),e(x_,jj),e(jj,I4o),e(x_,N4o),e(y,q4o),e(y,$_),e($_,efe),e(efe,j4o),e($_,D4o),e($_,Dj),e(Dj,G4o),e($_,O4o),e(y,V4o),e(y,k_),e(k_,ofe),e(ofe,X4o),e(k_,z4o),e(k_,Gj),e(Gj,Q4o),e(k_,W4o),e(y,H4o),e(y,S_),e(S_,rfe),e(rfe,U4o),e(S_,J4o),e(S_,Oj),e(Oj,Y4o),e(S_,K4o),e(y,Z4o),e(y,R_),e(R_,tfe),e(tfe,eEo),e(R_,oEo),e(R_,Vj),e(Vj,rEo),e(R_,tEo),e(y,aEo),e(y,P_),e(P_,afe),e(afe,nEo),e(P_,sEo),e(P_,Xj),e(Xj,lEo),e(P_,iEo),e(y,dEo),e(y,B_),e(B_,nfe),e(nfe,cEo),e(B_,fEo),e(B_,zj),e(zj,mEo),e(B_,gEo),e(y,hEo),e(y,I_),e(I_,sfe),e(sfe,pEo),e(I_,_Eo),e(I_,Qj),e(Qj,uEo),e(I_,bEo),e(y,vEo),e(y,N_),e(N_,lfe),e(lfe,FEo),e(N_,TEo),e(N_,Wj),e(Wj,MEo),e(N_,EEo),e(y,CEo),e(y,q_),e(q_,ife),e(ife,wEo),e(q_,AEo),e(q_,Hj),e(Hj,LEo),e(q_,yEo),e(y,xEo),e(y,j_),e(j_,dfe),e(dfe,$Eo),e(j_,kEo),e(j_,Uj),e(Uj,SEo),e(j_,REo),e(y,PEo),e(y,D_),e(D_,cfe),e(cfe,BEo),e(D_,IEo),e(D_,Jj),e(Jj,NEo),e(D_,qEo),e(y,jEo),e(y,G_),e(G_,ffe),e(ffe,DEo),e(G_,GEo),e(G_,Yj),e(Yj,OEo),e(G_,VEo),e(y,XEo),e(y,O_),e(O_,mfe),e(mfe,zEo),e(O_,QEo),e(O_,Kj),e(Kj,WEo),e(O_,HEo),e(y,UEo),e(y,V_),e(V_,gfe),e(gfe,JEo),e(V_,YEo),e(V_,Zj),e(Zj,KEo),e(V_,ZEo),e(y,eCo),e(y,X_),e(X_,hfe),e(hfe,oCo),e(X_,rCo),e(X_,eD),e(eD,tCo),e(X_,aCo),e(y,nCo),e(y,z_),e(z_,pfe),e(pfe,sCo),e(z_,lCo),e(z_,oD),e(oD,iCo),e(z_,dCo),e(y,cCo),e(y,Q_),e(Q_,_fe),e(_fe,fCo),e(Q_,mCo),e(Q_,rD),e(rD,gCo),e(Q_,hCo),e(y,pCo),e(y,W_),e(W_,ufe),e(ufe,_Co),e(W_,uCo),e(W_,tD),e(tD,bCo),e(W_,vCo),e(y,FCo),e(y,H_),e(H_,bfe),e(bfe,TCo),e(H_,MCo),e(H_,aD),e(aD,ECo),e(H_,CCo),e(y,wCo),e(y,U_),e(U_,vfe),e(vfe,ACo),e(U_,LCo),e(U_,nD),e(nD,yCo),e(U_,xCo),e(y,$Co),e(y,J_),e(J_,Ffe),e(Ffe,kCo),e(J_,SCo),e(J_,sD),e(sD,RCo),e(J_,PCo),e(y,BCo),e(y,Y_),e(Y_,Tfe),e(Tfe,ICo),e(Y_,NCo),e(Y_,lD),e(lD,qCo),e(Y_,jCo),e(y,DCo),e(y,K_),e(K_,Mfe),e(Mfe,GCo),e(K_,OCo),e(K_,iD),e(iD,VCo),e(K_,XCo),e(y,zCo),e(y,Z_),e(Z_,Efe),e(Efe,QCo),e(Z_,WCo),e(Z_,dD),e(dD,HCo),e(Z_,UCo),e(y,JCo),e(y,eu),e(eu,Cfe),e(Cfe,YCo),e(eu,KCo),e(eu,cD),e(cD,ZCo),e(eu,e3o),e(y,o3o),e(y,ou),e(ou,wfe),e(wfe,r3o),e(ou,t3o),e(ou,fD),e(fD,a3o),e(ou,n3o),e(y,s3o),e(y,ru),e(ru,Afe),e(Afe,l3o),e(ru,i3o),e(ru,mD),e(mD,d3o),e(ru,c3o),e(y,f3o),e(y,tu),e(tu,Lfe),e(Lfe,m3o),e(tu,g3o),e(tu,gD),e(gD,h3o),e(tu,p3o),e(y,_3o),e(y,au),e(au,yfe),e(yfe,u3o),e(au,b3o),e(au,hD),e(hD,v3o),e(au,F3o),e(y,T3o),e(y,nu),e(nu,xfe),e(xfe,M3o),e(nu,E3o),e(nu,pD),e(pD,C3o),e(nu,w3o),e(y,A3o),e(y,su),e(su,$fe),e($fe,L3o),e(su,y3o),e(su,_D),e(_D,x3o),e(su,$3o),e(y,k3o),e(y,lu),e(lu,kfe),e(kfe,S3o),e(lu,R3o),e(lu,uD),e(uD,P3o),e(lu,B3o),e(y,I3o),e(y,iu),e(iu,Sfe),e(Sfe,N3o),e(iu,q3o),e(iu,bD),e(bD,j3o),e(iu,D3o),e(y,G3o),e(y,du),e(du,Rfe),e(Rfe,O3o),e(du,V3o),e(du,vD),e(vD,X3o),e(du,z3o),e(y,Q3o),e(y,cu),e(cu,Pfe),e(Pfe,W3o),e(cu,H3o),e(cu,FD),e(FD,U3o),e(cu,J3o),e(y,Y3o),e(y,fu),e(fu,Bfe),e(Bfe,K3o),e(fu,Z3o),e(fu,TD),e(TD,e5o),e(fu,o5o),e(y,r5o),e(y,mu),e(mu,Ife),e(Ife,t5o),e(mu,a5o),e(mu,MD),e(MD,n5o),e(mu,s5o),e(y,l5o),e(y,gu),e(gu,Nfe),e(Nfe,i5o),e(gu,d5o),e(gu,ED),e(ED,c5o),e(gu,f5o),e(y,m5o),e(y,hu),e(hu,qfe),e(qfe,g5o),e(hu,h5o),e(hu,CD),e(CD,p5o),e(hu,_5o),e(y,u5o),e(y,pu),e(pu,jfe),e(jfe,b5o),e(pu,v5o),e(pu,wD),e(wD,F5o),e(pu,T5o),e(y,M5o),e(y,_u),e(_u,Dfe),e(Dfe,E5o),e(_u,C5o),e(_u,AD),e(AD,w5o),e(_u,A5o),e(y,L5o),e(y,uu),e(uu,Gfe),e(Gfe,y5o),e(uu,x5o),e(uu,LD),e(LD,$5o),e(uu,k5o),e(y,S5o),e(y,bu),e(bu,Ofe),e(Ofe,R5o),e(bu,P5o),e(bu,yD),e(yD,B5o),e(bu,I5o),e(y,N5o),e(y,vu),e(vu,Vfe),e(Vfe,q5o),e(vu,j5o),e(vu,xD),e(xD,D5o),e(vu,G5o),e(y,O5o),e(y,Fu),e(Fu,Xfe),e(Xfe,V5o),e(Fu,X5o),e(Fu,$D),e($D,z5o),e(Fu,Q5o),e(y,W5o),e(y,Tu),e(Tu,zfe),e(zfe,H5o),e(Tu,U5o),e(Tu,kD),e(kD,J5o),e(Tu,Y5o),e(y,K5o),e(y,Mu),e(Mu,Qfe),e(Qfe,Z5o),e(Mu,e0o),e(Mu,SD),e(SD,o0o),e(Mu,r0o),e(y,t0o),e(y,Eu),e(Eu,Wfe),e(Wfe,a0o),e(Eu,n0o),e(Eu,RD),e(RD,s0o),e(Eu,l0o),e(y,i0o),e(y,Cu),e(Cu,Hfe),e(Hfe,d0o),e(Cu,c0o),e(Cu,PD),e(PD,f0o),e(Cu,m0o),e(y,g0o),e(y,wu),e(wu,Ufe),e(Ufe,h0o),e(wu,p0o),e(wu,BD),e(BD,_0o),e(wu,u0o),e(y,b0o),e(y,Au),e(Au,Jfe),e(Jfe,v0o),e(Au,F0o),e(Au,ID),e(ID,T0o),e(Au,M0o),e(y,E0o),e(y,Lu),e(Lu,Yfe),e(Yfe,C0o),e(Lu,w0o),e(Lu,ND),e(ND,A0o),e(Lu,L0o),e(y,y0o),e(y,yu),e(yu,Kfe),e(Kfe,x0o),e(yu,$0o),e(yu,qD),e(qD,k0o),e(yu,S0o),e(y,R0o),e(y,xu),e(xu,Zfe),e(Zfe,P0o),e(xu,B0o),e(xu,jD),e(jD,I0o),e(xu,N0o),e(y,q0o),e(y,$u),e($u,eme),e(eme,j0o),e($u,D0o),e($u,DD),e(DD,G0o),e($u,O0o),e(y,V0o),e(y,ku),e(ku,ome),e(ome,X0o),e(ku,z0o),e(ku,GD),e(GD,Q0o),e(ku,W0o),e(y,H0o),e(y,Su),e(Su,rme),e(rme,U0o),e(Su,J0o),e(Su,OD),e(OD,Y0o),e(Su,K0o),e(y,Z0o),e(y,Ru),e(Ru,tme),e(tme,ewo),e(Ru,owo),e(Ru,VD),e(VD,rwo),e(Ru,two),e(y,awo),e(y,Pu),e(Pu,ame),e(ame,nwo),e(Pu,swo),e(Pu,XD),e(XD,lwo),e(Pu,iwo),e(y,dwo),e(y,Bu),e(Bu,nme),e(nme,cwo),e(Bu,fwo),e(Bu,zD),e(zD,mwo),e(Bu,gwo),e(y,hwo),e(y,Iu),e(Iu,sme),e(sme,pwo),e(Iu,_wo),e(Iu,QD),e(QD,uwo),e(Iu,bwo),e(y,vwo),e(y,Nu),e(Nu,lme),e(lme,Fwo),e(Nu,Two),e(Nu,WD),e(WD,Mwo),e(Nu,Ewo),e(y,Cwo),e(y,qu),e(qu,ime),e(ime,wwo),e(qu,Awo),e(qu,HD),e(HD,Lwo),e(qu,ywo),e(y,xwo),e(y,ju),e(ju,dme),e(dme,$wo),e(ju,kwo),e(ju,UD),e(UD,Swo),e(ju,Rwo),e(y,Pwo),e(y,Du),e(Du,cme),e(cme,Bwo),e(Du,Iwo),e(Du,JD),e(JD,Nwo),e(Du,qwo),e(y,jwo),e(y,Gu),e(Gu,fme),e(fme,Dwo),e(Gu,Gwo),e(Gu,YD),e(YD,Owo),e(Gu,Vwo),e(y,Xwo),e(y,Ou),e(Ou,mme),e(mme,zwo),e(Ou,Qwo),e(Ou,KD),e(KD,Wwo),e(Ou,Hwo),e(y,Uwo),e(y,Vu),e(Vu,gme),e(gme,Jwo),e(Vu,Ywo),e(Vu,ZD),e(ZD,Kwo),e(Vu,Zwo),e(y,eAo),e(y,Xu),e(Xu,hme),e(hme,oAo),e(Xu,rAo),e(Xu,eG),e(eG,tAo),e(Xu,aAo),e(y,nAo),e(y,zu),e(zu,pme),e(pme,sAo),e(zu,lAo),e(zu,oG),e(oG,iAo),e(zu,dAo),e(y,cAo),e(y,Qu),e(Qu,_me),e(_me,fAo),e(Qu,mAo),e(Qu,rG),e(rG,gAo),e(Qu,hAo),e(y,pAo),e(y,Wu),e(Wu,ume),e(ume,_Ao),e(Wu,uAo),e(Wu,tG),e(tG,bAo),e(Wu,vAo),e(Je,FAo),e(Je,Hu),e(Hu,TAo),e(Hu,bme),e(bme,MAo),e(Hu,EAo),e(Hu,vme),e(vme,CAo),e(Je,wAo),M(Uu,Je,null),b(f,FXe,u),b(f,Vi,u),e(Vi,Ju),e(Ju,Fme),M(qL,Fme,null),e(Vi,AAo),e(Vi,Tme),e(Tme,LAo),b(f,TXe,u),b(f,$o,u),M(jL,$o,null),e($o,yAo),e($o,Xi),e(Xi,xAo),e(Xi,aG),e(aG,$Ao),e(Xi,kAo),e(Xi,nG),e(nG,SAo),e(Xi,RAo),e($o,PAo),e($o,DL),e(DL,BAo),e(DL,Mme),e(Mme,IAo),e(DL,NAo),e($o,qAo),e($o,it),M(GL,it,null),e(it,jAo),e(it,Eme),e(Eme,DAo),e(it,GAo),e(it,zi),e(zi,OAo),e(zi,Cme),e(Cme,VAo),e(zi,XAo),e(zi,sG),e(sG,zAo),e(zi,QAo),e(it,WAo),M(Yu,it,null),e($o,HAo),e($o,Ye),M(OL,Ye,null),e(Ye,UAo),e(Ye,wme),e(wme,JAo),e(Ye,YAo),e(Ye,Na),e(Na,KAo),e(Na,Ame),e(Ame,ZAo),e(Na,e6o),e(Na,Lme),e(Lme,o6o),e(Na,r6o),e(Na,yme),e(yme,t6o),e(Na,a6o),e(Ye,n6o),e(Ye,G),e(G,Ku),e(Ku,xme),e(xme,s6o),e(Ku,l6o),e(Ku,lG),e(lG,i6o),e(Ku,d6o),e(G,c6o),e(G,Zu),e(Zu,$me),e($me,f6o),e(Zu,m6o),e(Zu,iG),e(iG,g6o),e(Zu,h6o),e(G,p6o),e(G,e1),e(e1,kme),e(kme,_6o),e(e1,u6o),e(e1,dG),e(dG,b6o),e(e1,v6o),e(G,F6o),e(G,o1),e(o1,Sme),e(Sme,T6o),e(o1,M6o),e(o1,cG),e(cG,E6o),e(o1,C6o),e(G,w6o),e(G,r1),e(r1,Rme),e(Rme,A6o),e(r1,L6o),e(r1,fG),e(fG,y6o),e(r1,x6o),e(G,$6o),e(G,t1),e(t1,Pme),e(Pme,k6o),e(t1,S6o),e(t1,mG),e(mG,R6o),e(t1,P6o),e(G,B6o),e(G,a1),e(a1,Bme),e(Bme,I6o),e(a1,N6o),e(a1,gG),e(gG,q6o),e(a1,j6o),e(G,D6o),e(G,n1),e(n1,Ime),e(Ime,G6o),e(n1,O6o),e(n1,hG),e(hG,V6o),e(n1,X6o),e(G,z6o),e(G,s1),e(s1,Nme),e(Nme,Q6o),e(s1,W6o),e(s1,pG),e(pG,H6o),e(s1,U6o),e(G,J6o),e(G,l1),e(l1,qme),e(qme,Y6o),e(l1,K6o),e(l1,_G),e(_G,Z6o),e(l1,eLo),e(G,oLo),e(G,i1),e(i1,jme),e(jme,rLo),e(i1,tLo),e(i1,uG),e(uG,aLo),e(i1,nLo),e(G,sLo),e(G,d1),e(d1,Dme),e(Dme,lLo),e(d1,iLo),e(d1,bG),e(bG,dLo),e(d1,cLo),e(G,fLo),e(G,c1),e(c1,Gme),e(Gme,mLo),e(c1,gLo),e(c1,vG),e(vG,hLo),e(c1,pLo),e(G,_Lo),e(G,f1),e(f1,Ome),e(Ome,uLo),e(f1,bLo),e(f1,FG),e(FG,vLo),e(f1,FLo),e(G,TLo),e(G,m1),e(m1,Vme),e(Vme,MLo),e(m1,ELo),e(m1,TG),e(TG,CLo),e(m1,wLo),e(G,ALo),e(G,g1),e(g1,Xme),e(Xme,LLo),e(g1,yLo),e(g1,MG),e(MG,xLo),e(g1,$Lo),e(G,kLo),e(G,h1),e(h1,zme),e(zme,SLo),e(h1,RLo),e(h1,EG),e(EG,PLo),e(h1,BLo),e(G,ILo),e(G,p1),e(p1,Qme),e(Qme,NLo),e(p1,qLo),e(p1,CG),e(CG,jLo),e(p1,DLo),e(G,GLo),e(G,_1),e(_1,Wme),e(Wme,OLo),e(_1,VLo),e(_1,wG),e(wG,XLo),e(_1,zLo),e(G,QLo),e(G,u1),e(u1,Hme),e(Hme,WLo),e(u1,HLo),e(u1,AG),e(AG,ULo),e(u1,JLo),e(G,YLo),e(G,b1),e(b1,Ume),e(Ume,KLo),e(b1,ZLo),e(b1,LG),e(LG,eyo),e(b1,oyo),e(G,ryo),e(G,v1),e(v1,Jme),e(Jme,tyo),e(v1,ayo),e(v1,yG),e(yG,nyo),e(v1,syo),e(G,lyo),e(G,F1),e(F1,Yme),e(Yme,iyo),e(F1,dyo),e(F1,xG),e(xG,cyo),e(F1,fyo),e(G,myo),e(G,T1),e(T1,Kme),e(Kme,gyo),e(T1,hyo),e(T1,$G),e($G,pyo),e(T1,_yo),e(G,uyo),e(G,M1),e(M1,Zme),e(Zme,byo),e(M1,vyo),e(M1,kG),e(kG,Fyo),e(M1,Tyo),e(G,Myo),e(G,E1),e(E1,ege),e(ege,Eyo),e(E1,Cyo),e(E1,SG),e(SG,wyo),e(E1,Ayo),e(G,Lyo),e(G,C1),e(C1,oge),e(oge,yyo),e(C1,xyo),e(C1,RG),e(RG,$yo),e(C1,kyo),e(G,Syo),e(G,w1),e(w1,rge),e(rge,Ryo),e(w1,Pyo),e(w1,PG),e(PG,Byo),e(w1,Iyo),e(G,Nyo),e(G,A1),e(A1,tge),e(tge,qyo),e(A1,jyo),e(A1,BG),e(BG,Dyo),e(A1,Gyo),e(G,Oyo),e(G,L1),e(L1,age),e(age,Vyo),e(L1,Xyo),e(L1,IG),e(IG,zyo),e(L1,Qyo),e(G,Wyo),e(G,y1),e(y1,nge),e(nge,Hyo),e(y1,Uyo),e(y1,NG),e(NG,Jyo),e(y1,Yyo),e(G,Kyo),e(G,x1),e(x1,sge),e(sge,Zyo),e(x1,e9o),e(x1,qG),e(qG,o9o),e(x1,r9o),e(G,t9o),e(G,$1),e($1,lge),e(lge,a9o),e($1,n9o),e($1,jG),e(jG,s9o),e($1,l9o),e(G,i9o),e(G,k1),e(k1,ige),e(ige,d9o),e(k1,c9o),e(k1,DG),e(DG,f9o),e(k1,m9o),e(G,g9o),e(G,S1),e(S1,dge),e(dge,h9o),e(S1,p9o),e(S1,GG),e(GG,_9o),e(S1,u9o),e(G,b9o),e(G,R1),e(R1,cge),e(cge,v9o),e(R1,F9o),e(R1,OG),e(OG,T9o),e(R1,M9o),e(G,E9o),e(G,P1),e(P1,fge),e(fge,C9o),e(P1,w9o),e(P1,VG),e(VG,A9o),e(P1,L9o),e(G,y9o),e(G,B1),e(B1,mge),e(mge,x9o),e(B1,$9o),e(B1,XG),e(XG,k9o),e(B1,S9o),e(G,R9o),e(G,I1),e(I1,gge),e(gge,P9o),e(I1,B9o),e(I1,zG),e(zG,I9o),e(I1,N9o),e(G,q9o),e(G,N1),e(N1,hge),e(hge,j9o),e(N1,D9o),e(N1,QG),e(QG,G9o),e(N1,O9o),e(G,V9o),e(G,q1),e(q1,pge),e(pge,X9o),e(q1,z9o),e(q1,WG),e(WG,Q9o),e(q1,W9o),e(G,H9o),e(G,j1),e(j1,_ge),e(_ge,U9o),e(j1,J9o),e(j1,HG),e(HG,Y9o),e(j1,K9o),e(G,Z9o),e(G,D1),e(D1,uge),e(uge,exo),e(D1,oxo),e(D1,UG),e(UG,rxo),e(D1,txo),e(G,axo),e(G,G1),e(G1,bge),e(bge,nxo),e(G1,sxo),e(G1,JG),e(JG,lxo),e(G1,ixo),e(G,dxo),e(G,O1),e(O1,vge),e(vge,cxo),e(O1,fxo),e(O1,YG),e(YG,mxo),e(O1,gxo),e(Ye,hxo),e(Ye,V1),e(V1,pxo),e(V1,Fge),e(Fge,_xo),e(V1,uxo),e(V1,Tge),e(Tge,bxo),e(Ye,vxo),M(X1,Ye,null),b(f,MXe,u),b(f,Qi,u),e(Qi,z1),e(z1,Mge),M(VL,Mge,null),e(Qi,Fxo),e(Qi,Ege),e(Ege,Txo),b(f,EXe,u),b(f,ko,u),M(XL,ko,null),e(ko,Mxo),e(ko,Wi),e(Wi,Exo),e(Wi,KG),e(KG,Cxo),e(Wi,wxo),e(Wi,ZG),e(ZG,Axo),e(Wi,Lxo),e(ko,yxo),e(ko,zL),e(zL,xxo),e(zL,Cge),e(Cge,$xo),e(zL,kxo),e(ko,Sxo),e(ko,dt),M(QL,dt,null),e(dt,Rxo),e(dt,wge),e(wge,Pxo),e(dt,Bxo),e(dt,Hi),e(Hi,Ixo),e(Hi,Age),e(Age,Nxo),e(Hi,qxo),e(Hi,eO),e(eO,jxo),e(Hi,Dxo),e(dt,Gxo),M(Q1,dt,null),e(ko,Oxo),e(ko,Ke),M(WL,Ke,null),e(Ke,Vxo),e(Ke,Lge),e(Lge,Xxo),e(Ke,zxo),e(Ke,qa),e(qa,Qxo),e(qa,yge),e(yge,Wxo),e(qa,Hxo),e(qa,xge),e(xge,Uxo),e(qa,Jxo),e(qa,$ge),e($ge,Yxo),e(qa,Kxo),e(Ke,Zxo),e(Ke,z),e(z,W1),e(W1,kge),e(kge,e$o),e(W1,o$o),e(W1,oO),e(oO,r$o),e(W1,t$o),e(z,a$o),e(z,H1),e(H1,Sge),e(Sge,n$o),e(H1,s$o),e(H1,rO),e(rO,l$o),e(H1,i$o),e(z,d$o),e(z,U1),e(U1,Rge),e(Rge,c$o),e(U1,f$o),e(U1,tO),e(tO,m$o),e(U1,g$o),e(z,h$o),e(z,J1),e(J1,Pge),e(Pge,p$o),e(J1,_$o),e(J1,aO),e(aO,u$o),e(J1,b$o),e(z,v$o),e(z,Y1),e(Y1,Bge),e(Bge,F$o),e(Y1,T$o),e(Y1,nO),e(nO,M$o),e(Y1,E$o),e(z,C$o),e(z,K1),e(K1,Ige),e(Ige,w$o),e(K1,A$o),e(K1,sO),e(sO,L$o),e(K1,y$o),e(z,x$o),e(z,Z1),e(Z1,Nge),e(Nge,$$o),e(Z1,k$o),e(Z1,lO),e(lO,S$o),e(Z1,R$o),e(z,P$o),e(z,e2),e(e2,qge),e(qge,B$o),e(e2,I$o),e(e2,iO),e(iO,N$o),e(e2,q$o),e(z,j$o),e(z,o2),e(o2,jge),e(jge,D$o),e(o2,G$o),e(o2,dO),e(dO,O$o),e(o2,V$o),e(z,X$o),e(z,r2),e(r2,Dge),e(Dge,z$o),e(r2,Q$o),e(r2,cO),e(cO,W$o),e(r2,H$o),e(z,U$o),e(z,t2),e(t2,Gge),e(Gge,J$o),e(t2,Y$o),e(t2,fO),e(fO,K$o),e(t2,Z$o),e(z,eko),e(z,a2),e(a2,Oge),e(Oge,oko),e(a2,rko),e(a2,mO),e(mO,tko),e(a2,ako),e(z,nko),e(z,n2),e(n2,Vge),e(Vge,sko),e(n2,lko),e(n2,gO),e(gO,iko),e(n2,dko),e(z,cko),e(z,s2),e(s2,Xge),e(Xge,fko),e(s2,mko),e(s2,hO),e(hO,gko),e(s2,hko),e(z,pko),e(z,l2),e(l2,zge),e(zge,_ko),e(l2,uko),e(l2,pO),e(pO,bko),e(l2,vko),e(z,Fko),e(z,i2),e(i2,Qge),e(Qge,Tko),e(i2,Mko),e(i2,_O),e(_O,Eko),e(i2,Cko),e(z,wko),e(z,d2),e(d2,Wge),e(Wge,Ako),e(d2,Lko),e(d2,uO),e(uO,yko),e(d2,xko),e(z,$ko),e(z,c2),e(c2,Hge),e(Hge,kko),e(c2,Sko),e(c2,bO),e(bO,Rko),e(c2,Pko),e(z,Bko),e(z,f2),e(f2,Uge),e(Uge,Iko),e(f2,Nko),e(f2,vO),e(vO,qko),e(f2,jko),e(z,Dko),e(z,m2),e(m2,Jge),e(Jge,Gko),e(m2,Oko),e(m2,FO),e(FO,Vko),e(m2,Xko),e(z,zko),e(z,g2),e(g2,Yge),e(Yge,Qko),e(g2,Wko),e(g2,TO),e(TO,Hko),e(g2,Uko),e(z,Jko),e(z,h2),e(h2,Kge),e(Kge,Yko),e(h2,Kko),e(h2,MO),e(MO,Zko),e(h2,eSo),e(z,oSo),e(z,p2),e(p2,Zge),e(Zge,rSo),e(p2,tSo),e(p2,EO),e(EO,aSo),e(p2,nSo),e(z,sSo),e(z,_2),e(_2,ehe),e(ehe,lSo),e(_2,iSo),e(_2,CO),e(CO,dSo),e(_2,cSo),e(z,fSo),e(z,u2),e(u2,ohe),e(ohe,mSo),e(u2,gSo),e(u2,wO),e(wO,hSo),e(u2,pSo),e(z,_So),e(z,b2),e(b2,rhe),e(rhe,uSo),e(b2,bSo),e(b2,AO),e(AO,vSo),e(b2,FSo),e(z,TSo),e(z,v2),e(v2,the),e(the,MSo),e(v2,ESo),e(v2,LO),e(LO,CSo),e(v2,wSo),e(z,ASo),e(z,F2),e(F2,ahe),e(ahe,LSo),e(F2,ySo),e(F2,yO),e(yO,xSo),e(F2,$So),e(z,kSo),e(z,T2),e(T2,nhe),e(nhe,SSo),e(T2,RSo),e(T2,xO),e(xO,PSo),e(T2,BSo),e(z,ISo),e(z,M2),e(M2,she),e(she,NSo),e(M2,qSo),e(M2,$O),e($O,jSo),e(M2,DSo),e(z,GSo),e(z,E2),e(E2,lhe),e(lhe,OSo),e(E2,VSo),e(E2,kO),e(kO,XSo),e(E2,zSo),e(z,QSo),e(z,C2),e(C2,ihe),e(ihe,WSo),e(C2,HSo),e(C2,SO),e(SO,USo),e(C2,JSo),e(z,YSo),e(z,w2),e(w2,dhe),e(dhe,KSo),e(w2,ZSo),e(w2,RO),e(RO,eRo),e(w2,oRo),e(z,rRo),e(z,A2),e(A2,che),e(che,tRo),e(A2,aRo),e(A2,PO),e(PO,nRo),e(A2,sRo),e(z,lRo),e(z,L2),e(L2,fhe),e(fhe,iRo),e(L2,dRo),e(L2,BO),e(BO,cRo),e(L2,fRo),e(z,mRo),e(z,y2),e(y2,mhe),e(mhe,gRo),e(y2,hRo),e(y2,IO),e(IO,pRo),e(y2,_Ro),e(z,uRo),e(z,x2),e(x2,ghe),e(ghe,bRo),e(x2,vRo),e(x2,NO),e(NO,FRo),e(x2,TRo),e(z,MRo),e(z,$2),e($2,hhe),e(hhe,ERo),e($2,CRo),e($2,qO),e(qO,wRo),e($2,ARo),e(z,LRo),e(z,k2),e(k2,phe),e(phe,yRo),e(k2,xRo),e(k2,jO),e(jO,$Ro),e(k2,kRo),e(z,SRo),e(z,S2),e(S2,_he),e(_he,RRo),e(S2,PRo),e(S2,DO),e(DO,BRo),e(S2,IRo),e(Ke,NRo),e(Ke,R2),e(R2,qRo),e(R2,uhe),e(uhe,jRo),e(R2,DRo),e(R2,bhe),e(bhe,GRo),e(Ke,ORo),M(P2,Ke,null),b(f,CXe,u),b(f,Ui,u),e(Ui,B2),e(B2,vhe),M(HL,vhe,null),e(Ui,VRo),e(Ui,Fhe),e(Fhe,XRo),b(f,wXe,u),b(f,So,u),M(UL,So,null),e(So,zRo),e(So,Ji),e(Ji,QRo),e(Ji,GO),e(GO,WRo),e(Ji,HRo),e(Ji,OO),e(OO,URo),e(Ji,JRo),e(So,YRo),e(So,JL),e(JL,KRo),e(JL,The),e(The,ZRo),e(JL,ePo),e(So,oPo),e(So,ct),M(YL,ct,null),e(ct,rPo),e(ct,Mhe),e(Mhe,tPo),e(ct,aPo),e(ct,Yi),e(Yi,nPo),e(Yi,Ehe),e(Ehe,sPo),e(Yi,lPo),e(Yi,VO),e(VO,iPo),e(Yi,dPo),e(ct,cPo),M(I2,ct,null),e(So,fPo),e(So,Ze),M(KL,Ze,null),e(Ze,mPo),e(Ze,Che),e(Che,gPo),e(Ze,hPo),e(Ze,ja),e(ja,pPo),e(ja,whe),e(whe,_Po),e(ja,uPo),e(ja,Ahe),e(Ahe,bPo),e(ja,vPo),e(ja,Lhe),e(Lhe,FPo),e(ja,TPo),e(Ze,MPo),e(Ze,W),e(W,N2),e(N2,yhe),e(yhe,EPo),e(N2,CPo),e(N2,XO),e(XO,wPo),e(N2,APo),e(W,LPo),e(W,q2),e(q2,xhe),e(xhe,yPo),e(q2,xPo),e(q2,zO),e(zO,$Po),e(q2,kPo),e(W,SPo),e(W,j2),e(j2,$he),e($he,RPo),e(j2,PPo),e(j2,QO),e(QO,BPo),e(j2,IPo),e(W,NPo),e(W,D2),e(D2,khe),e(khe,qPo),e(D2,jPo),e(D2,WO),e(WO,DPo),e(D2,GPo),e(W,OPo),e(W,G2),e(G2,She),e(She,VPo),e(G2,XPo),e(G2,HO),e(HO,zPo),e(G2,QPo),e(W,WPo),e(W,O2),e(O2,Rhe),e(Rhe,HPo),e(O2,UPo),e(O2,UO),e(UO,JPo),e(O2,YPo),e(W,KPo),e(W,V2),e(V2,Phe),e(Phe,ZPo),e(V2,eBo),e(V2,JO),e(JO,oBo),e(V2,rBo),e(W,tBo),e(W,X2),e(X2,Bhe),e(Bhe,aBo),e(X2,nBo),e(X2,YO),e(YO,sBo),e(X2,lBo),e(W,iBo),e(W,z2),e(z2,Ihe),e(Ihe,dBo),e(z2,cBo),e(z2,KO),e(KO,fBo),e(z2,mBo),e(W,gBo),e(W,Q2),e(Q2,Nhe),e(Nhe,hBo),e(Q2,pBo),e(Q2,ZO),e(ZO,_Bo),e(Q2,uBo),e(W,bBo),e(W,W2),e(W2,qhe),e(qhe,vBo),e(W2,FBo),e(W2,eV),e(eV,TBo),e(W2,MBo),e(W,EBo),e(W,H2),e(H2,jhe),e(jhe,CBo),e(H2,wBo),e(H2,oV),e(oV,ABo),e(H2,LBo),e(W,yBo),e(W,U2),e(U2,Dhe),e(Dhe,xBo),e(U2,$Bo),e(U2,rV),e(rV,kBo),e(U2,SBo),e(W,RBo),e(W,J2),e(J2,Ghe),e(Ghe,PBo),e(J2,BBo),e(J2,tV),e(tV,IBo),e(J2,NBo),e(W,qBo),e(W,Y2),e(Y2,Ohe),e(Ohe,jBo),e(Y2,DBo),e(Y2,aV),e(aV,GBo),e(Y2,OBo),e(W,VBo),e(W,K2),e(K2,Vhe),e(Vhe,XBo),e(K2,zBo),e(K2,nV),e(nV,QBo),e(K2,WBo),e(W,HBo),e(W,Z2),e(Z2,Xhe),e(Xhe,UBo),e(Z2,JBo),e(Z2,sV),e(sV,YBo),e(Z2,KBo),e(W,ZBo),e(W,eb),e(eb,zhe),e(zhe,eIo),e(eb,oIo),e(eb,lV),e(lV,rIo),e(eb,tIo),e(W,aIo),e(W,ob),e(ob,Qhe),e(Qhe,nIo),e(ob,sIo),e(ob,iV),e(iV,lIo),e(ob,iIo),e(W,dIo),e(W,rb),e(rb,Whe),e(Whe,cIo),e(rb,fIo),e(rb,dV),e(dV,mIo),e(rb,gIo),e(W,hIo),e(W,tb),e(tb,Hhe),e(Hhe,pIo),e(tb,_Io),e(tb,cV),e(cV,uIo),e(tb,bIo),e(W,vIo),e(W,ab),e(ab,Uhe),e(Uhe,FIo),e(ab,TIo),e(ab,fV),e(fV,MIo),e(ab,EIo),e(W,CIo),e(W,nb),e(nb,Jhe),e(Jhe,wIo),e(nb,AIo),e(nb,mV),e(mV,LIo),e(nb,yIo),e(W,xIo),e(W,sb),e(sb,Yhe),e(Yhe,$Io),e(sb,kIo),e(sb,gV),e(gV,SIo),e(sb,RIo),e(W,PIo),e(W,lb),e(lb,Khe),e(Khe,BIo),e(lb,IIo),e(lb,hV),e(hV,NIo),e(lb,qIo),e(W,jIo),e(W,ib),e(ib,Zhe),e(Zhe,DIo),e(ib,GIo),e(ib,pV),e(pV,OIo),e(ib,VIo),e(W,XIo),e(W,db),e(db,epe),e(epe,zIo),e(db,QIo),e(db,_V),e(_V,WIo),e(db,HIo),e(W,UIo),e(W,cb),e(cb,ope),e(ope,JIo),e(cb,YIo),e(cb,uV),e(uV,KIo),e(cb,ZIo),e(W,eNo),e(W,fb),e(fb,rpe),e(rpe,oNo),e(fb,rNo),e(fb,bV),e(bV,tNo),e(fb,aNo),e(W,nNo),e(W,mb),e(mb,tpe),e(tpe,sNo),e(mb,lNo),e(mb,vV),e(vV,iNo),e(mb,dNo),e(W,cNo),e(W,gb),e(gb,ape),e(ape,fNo),e(gb,mNo),e(gb,FV),e(FV,gNo),e(gb,hNo),e(W,pNo),e(W,hb),e(hb,npe),e(npe,_No),e(hb,uNo),e(hb,TV),e(TV,bNo),e(hb,vNo),e(W,FNo),e(W,pb),e(pb,spe),e(spe,TNo),e(pb,MNo),e(pb,MV),e(MV,ENo),e(pb,CNo),e(W,wNo),e(W,_b),e(_b,lpe),e(lpe,ANo),e(_b,LNo),e(_b,ipe),e(ipe,yNo),e(_b,xNo),e(W,$No),e(W,ub),e(ub,dpe),e(dpe,kNo),e(ub,SNo),e(ub,EV),e(EV,RNo),e(ub,PNo),e(W,BNo),e(W,bb),e(bb,cpe),e(cpe,INo),e(bb,NNo),e(bb,CV),e(CV,qNo),e(bb,jNo),e(W,DNo),e(W,vb),e(vb,fpe),e(fpe,GNo),e(vb,ONo),e(vb,wV),e(wV,VNo),e(vb,XNo),e(W,zNo),e(W,Fb),e(Fb,mpe),e(mpe,QNo),e(Fb,WNo),e(Fb,AV),e(AV,HNo),e(Fb,UNo),e(Ze,JNo),e(Ze,Tb),e(Tb,YNo),e(Tb,gpe),e(gpe,KNo),e(Tb,ZNo),e(Tb,hpe),e(hpe,eqo),e(Ze,oqo),M(Mb,Ze,null),b(f,AXe,u),b(f,Ki,u),e(Ki,Eb),e(Eb,ppe),M(ZL,ppe,null),e(Ki,rqo),e(Ki,_pe),e(_pe,tqo),b(f,LXe,u),b(f,Ro,u),M(ey,Ro,null),e(Ro,aqo),e(Ro,Zi),e(Zi,nqo),e(Zi,LV),e(LV,sqo),e(Zi,lqo),e(Zi,yV),e(yV,iqo),e(Zi,dqo),e(Ro,cqo),e(Ro,oy),e(oy,fqo),e(oy,upe),e(upe,mqo),e(oy,gqo),e(Ro,hqo),e(Ro,ft),M(ry,ft,null),e(ft,pqo),e(ft,bpe),e(bpe,_qo),e(ft,uqo),e(ft,ed),e(ed,bqo),e(ed,vpe),e(vpe,vqo),e(ed,Fqo),e(ed,xV),e(xV,Tqo),e(ed,Mqo),e(ft,Eqo),M(Cb,ft,null),e(Ro,Cqo),e(Ro,eo),M(ty,eo,null),e(eo,wqo),e(eo,Fpe),e(Fpe,Aqo),e(eo,Lqo),e(eo,Da),e(Da,yqo),e(Da,Tpe),e(Tpe,xqo),e(Da,$qo),e(Da,Mpe),e(Mpe,kqo),e(Da,Sqo),e(Da,Epe),e(Epe,Rqo),e(Da,Pqo),e(eo,Bqo),e(eo,pe),e(pe,wb),e(wb,Cpe),e(Cpe,Iqo),e(wb,Nqo),e(wb,$V),e($V,qqo),e(wb,jqo),e(pe,Dqo),e(pe,Ab),e(Ab,wpe),e(wpe,Gqo),e(Ab,Oqo),e(Ab,kV),e(kV,Vqo),e(Ab,Xqo),e(pe,zqo),e(pe,Lb),e(Lb,Ape),e(Ape,Qqo),e(Lb,Wqo),e(Lb,SV),e(SV,Hqo),e(Lb,Uqo),e(pe,Jqo),e(pe,yb),e(yb,Lpe),e(Lpe,Yqo),e(yb,Kqo),e(yb,RV),e(RV,Zqo),e(yb,ejo),e(pe,ojo),e(pe,xb),e(xb,ype),e(ype,rjo),e(xb,tjo),e(xb,PV),e(PV,ajo),e(xb,njo),e(pe,sjo),e(pe,$b),e($b,xpe),e(xpe,ljo),e($b,ijo),e($b,BV),e(BV,djo),e($b,cjo),e(pe,fjo),e(pe,kb),e(kb,$pe),e($pe,mjo),e(kb,gjo),e(kb,IV),e(IV,hjo),e(kb,pjo),e(pe,_jo),e(pe,Sb),e(Sb,kpe),e(kpe,ujo),e(Sb,bjo),e(Sb,NV),e(NV,vjo),e(Sb,Fjo),e(pe,Tjo),e(pe,Rb),e(Rb,Spe),e(Spe,Mjo),e(Rb,Ejo),e(Rb,qV),e(qV,Cjo),e(Rb,wjo),e(pe,Ajo),e(pe,Pb),e(Pb,Rpe),e(Rpe,Ljo),e(Pb,yjo),e(Pb,jV),e(jV,xjo),e(Pb,$jo),e(pe,kjo),e(pe,Bb),e(Bb,Ppe),e(Ppe,Sjo),e(Bb,Rjo),e(Bb,DV),e(DV,Pjo),e(Bb,Bjo),e(pe,Ijo),e(pe,Ib),e(Ib,Bpe),e(Bpe,Njo),e(Ib,qjo),e(Ib,GV),e(GV,jjo),e(Ib,Djo),e(pe,Gjo),e(pe,Nb),e(Nb,Ipe),e(Ipe,Ojo),e(Nb,Vjo),e(Nb,OV),e(OV,Xjo),e(Nb,zjo),e(pe,Qjo),e(pe,qb),e(qb,Npe),e(Npe,Wjo),e(qb,Hjo),e(qb,VV),e(VV,Ujo),e(qb,Jjo),e(pe,Yjo),e(pe,jb),e(jb,qpe),e(qpe,Kjo),e(jb,Zjo),e(jb,XV),e(XV,eDo),e(jb,oDo),e(pe,rDo),e(pe,Db),e(Db,jpe),e(jpe,tDo),e(Db,aDo),e(Db,zV),e(zV,nDo),e(Db,sDo),e(pe,lDo),e(pe,Gb),e(Gb,Dpe),e(Dpe,iDo),e(Gb,dDo),e(Gb,QV),e(QV,cDo),e(Gb,fDo),e(pe,mDo),e(pe,Ob),e(Ob,Gpe),e(Gpe,gDo),e(Ob,hDo),e(Ob,WV),e(WV,pDo),e(Ob,_Do),e(eo,uDo),e(eo,Vb),e(Vb,bDo),e(Vb,Ope),e(Ope,vDo),e(Vb,FDo),e(Vb,Vpe),e(Vpe,TDo),e(eo,MDo),M(Xb,eo,null),b(f,yXe,u),b(f,od,u),e(od,zb),e(zb,Xpe),M(ay,Xpe,null),e(od,EDo),e(od,zpe),e(zpe,CDo),b(f,xXe,u),b(f,Po,u),M(ny,Po,null),e(Po,wDo),e(Po,rd),e(rd,ADo),e(rd,HV),e(HV,LDo),e(rd,yDo),e(rd,UV),e(UV,xDo),e(rd,$Do),e(Po,kDo),e(Po,sy),e(sy,SDo),e(sy,Qpe),e(Qpe,RDo),e(sy,PDo),e(Po,BDo),e(Po,mt),M(ly,mt,null),e(mt,IDo),e(mt,Wpe),e(Wpe,NDo),e(mt,qDo),e(mt,td),e(td,jDo),e(td,Hpe),e(Hpe,DDo),e(td,GDo),e(td,JV),e(JV,ODo),e(td,VDo),e(mt,XDo),M(Qb,mt,null),e(Po,zDo),e(Po,oo),M(iy,oo,null),e(oo,QDo),e(oo,Upe),e(Upe,WDo),e(oo,HDo),e(oo,Ga),e(Ga,UDo),e(Ga,Jpe),e(Jpe,JDo),e(Ga,YDo),e(Ga,Ype),e(Ype,KDo),e(Ga,ZDo),e(Ga,Kpe),e(Kpe,eGo),e(Ga,oGo),e(oo,rGo),e(oo,N),e(N,Wb),e(Wb,Zpe),e(Zpe,tGo),e(Wb,aGo),e(Wb,YV),e(YV,nGo),e(Wb,sGo),e(N,lGo),e(N,Hb),e(Hb,e_e),e(e_e,iGo),e(Hb,dGo),e(Hb,KV),e(KV,cGo),e(Hb,fGo),e(N,mGo),e(N,Ub),e(Ub,o_e),e(o_e,gGo),e(Ub,hGo),e(Ub,ZV),e(ZV,pGo),e(Ub,_Go),e(N,uGo),e(N,Jb),e(Jb,r_e),e(r_e,bGo),e(Jb,vGo),e(Jb,eX),e(eX,FGo),e(Jb,TGo),e(N,MGo),e(N,Yb),e(Yb,t_e),e(t_e,EGo),e(Yb,CGo),e(Yb,oX),e(oX,wGo),e(Yb,AGo),e(N,LGo),e(N,Kb),e(Kb,a_e),e(a_e,yGo),e(Kb,xGo),e(Kb,rX),e(rX,$Go),e(Kb,kGo),e(N,SGo),e(N,Zb),e(Zb,n_e),e(n_e,RGo),e(Zb,PGo),e(Zb,tX),e(tX,BGo),e(Zb,IGo),e(N,NGo),e(N,ev),e(ev,s_e),e(s_e,qGo),e(ev,jGo),e(ev,aX),e(aX,DGo),e(ev,GGo),e(N,OGo),e(N,ov),e(ov,l_e),e(l_e,VGo),e(ov,XGo),e(ov,nX),e(nX,zGo),e(ov,QGo),e(N,WGo),e(N,rv),e(rv,i_e),e(i_e,HGo),e(rv,UGo),e(rv,sX),e(sX,JGo),e(rv,YGo),e(N,KGo),e(N,tv),e(tv,d_e),e(d_e,ZGo),e(tv,eOo),e(tv,lX),e(lX,oOo),e(tv,rOo),e(N,tOo),e(N,av),e(av,c_e),e(c_e,aOo),e(av,nOo),e(av,iX),e(iX,sOo),e(av,lOo),e(N,iOo),e(N,nv),e(nv,f_e),e(f_e,dOo),e(nv,cOo),e(nv,dX),e(dX,fOo),e(nv,mOo),e(N,gOo),e(N,sv),e(sv,m_e),e(m_e,hOo),e(sv,pOo),e(sv,cX),e(cX,_Oo),e(sv,uOo),e(N,bOo),e(N,lv),e(lv,g_e),e(g_e,vOo),e(lv,FOo),e(lv,fX),e(fX,TOo),e(lv,MOo),e(N,EOo),e(N,iv),e(iv,h_e),e(h_e,COo),e(iv,wOo),e(iv,mX),e(mX,AOo),e(iv,LOo),e(N,yOo),e(N,dv),e(dv,p_e),e(p_e,xOo),e(dv,$Oo),e(dv,gX),e(gX,kOo),e(dv,SOo),e(N,ROo),e(N,cv),e(cv,__e),e(__e,POo),e(cv,BOo),e(cv,hX),e(hX,IOo),e(cv,NOo),e(N,qOo),e(N,fv),e(fv,u_e),e(u_e,jOo),e(fv,DOo),e(fv,pX),e(pX,GOo),e(fv,OOo),e(N,VOo),e(N,mv),e(mv,b_e),e(b_e,XOo),e(mv,zOo),e(mv,_X),e(_X,QOo),e(mv,WOo),e(N,HOo),e(N,gv),e(gv,v_e),e(v_e,UOo),e(gv,JOo),e(gv,uX),e(uX,YOo),e(gv,KOo),e(N,ZOo),e(N,hv),e(hv,F_e),e(F_e,eVo),e(hv,oVo),e(hv,bX),e(bX,rVo),e(hv,tVo),e(N,aVo),e(N,pv),e(pv,T_e),e(T_e,nVo),e(pv,sVo),e(pv,vX),e(vX,lVo),e(pv,iVo),e(N,dVo),e(N,_v),e(_v,M_e),e(M_e,cVo),e(_v,fVo),e(_v,FX),e(FX,mVo),e(_v,gVo),e(N,hVo),e(N,uv),e(uv,E_e),e(E_e,pVo),e(uv,_Vo),e(uv,TX),e(TX,uVo),e(uv,bVo),e(N,vVo),e(N,bv),e(bv,C_e),e(C_e,FVo),e(bv,TVo),e(bv,MX),e(MX,MVo),e(bv,EVo),e(N,CVo),e(N,vv),e(vv,w_e),e(w_e,wVo),e(vv,AVo),e(vv,EX),e(EX,LVo),e(vv,yVo),e(N,xVo),e(N,Fv),e(Fv,A_e),e(A_e,$Vo),e(Fv,kVo),e(Fv,CX),e(CX,SVo),e(Fv,RVo),e(N,PVo),e(N,Tv),e(Tv,L_e),e(L_e,BVo),e(Tv,IVo),e(Tv,wX),e(wX,NVo),e(Tv,qVo),e(N,jVo),e(N,Mv),e(Mv,y_e),e(y_e,DVo),e(Mv,GVo),e(Mv,AX),e(AX,OVo),e(Mv,VVo),e(N,XVo),e(N,Ev),e(Ev,x_e),e(x_e,zVo),e(Ev,QVo),e(Ev,LX),e(LX,WVo),e(Ev,HVo),e(N,UVo),e(N,Cv),e(Cv,$_e),e($_e,JVo),e(Cv,YVo),e(Cv,yX),e(yX,KVo),e(Cv,ZVo),e(N,eXo),e(N,wv),e(wv,k_e),e(k_e,oXo),e(wv,rXo),e(wv,xX),e(xX,tXo),e(wv,aXo),e(N,nXo),e(N,Av),e(Av,S_e),e(S_e,sXo),e(Av,lXo),e(Av,$X),e($X,iXo),e(Av,dXo),e(N,cXo),e(N,Lv),e(Lv,R_e),e(R_e,fXo),e(Lv,mXo),e(Lv,kX),e(kX,gXo),e(Lv,hXo),e(N,pXo),e(N,yv),e(yv,P_e),e(P_e,_Xo),e(yv,uXo),e(yv,SX),e(SX,bXo),e(yv,vXo),e(N,FXo),e(N,xv),e(xv,B_e),e(B_e,TXo),e(xv,MXo),e(xv,RX),e(RX,EXo),e(xv,CXo),e(N,wXo),e(N,$v),e($v,I_e),e(I_e,AXo),e($v,LXo),e($v,PX),e(PX,yXo),e($v,xXo),e(N,$Xo),e(N,kv),e(kv,N_e),e(N_e,kXo),e(kv,SXo),e(kv,BX),e(BX,RXo),e(kv,PXo),e(N,BXo),e(N,Sv),e(Sv,q_e),e(q_e,IXo),e(Sv,NXo),e(Sv,IX),e(IX,qXo),e(Sv,jXo),e(N,DXo),e(N,Rv),e(Rv,j_e),e(j_e,GXo),e(Rv,OXo),e(Rv,NX),e(NX,VXo),e(Rv,XXo),e(N,zXo),e(N,Pv),e(Pv,D_e),e(D_e,QXo),e(Pv,WXo),e(Pv,qX),e(qX,HXo),e(Pv,UXo),e(N,JXo),e(N,Bv),e(Bv,G_e),e(G_e,YXo),e(Bv,KXo),e(Bv,jX),e(jX,ZXo),e(Bv,ezo),e(N,ozo),e(N,Iv),e(Iv,O_e),e(O_e,rzo),e(Iv,tzo),e(Iv,DX),e(DX,azo),e(Iv,nzo),e(N,szo),e(N,Nv),e(Nv,V_e),e(V_e,lzo),e(Nv,izo),e(Nv,GX),e(GX,dzo),e(Nv,czo),e(N,fzo),e(N,qv),e(qv,X_e),e(X_e,mzo),e(qv,gzo),e(qv,OX),e(OX,hzo),e(qv,pzo),e(N,_zo),e(N,jv),e(jv,z_e),e(z_e,uzo),e(jv,bzo),e(jv,VX),e(VX,vzo),e(jv,Fzo),e(N,Tzo),e(N,Dv),e(Dv,Q_e),e(Q_e,Mzo),e(Dv,Ezo),e(Dv,XX),e(XX,Czo),e(Dv,wzo),e(N,Azo),e(N,Gv),e(Gv,W_e),e(W_e,Lzo),e(Gv,yzo),e(Gv,zX),e(zX,xzo),e(Gv,$zo),e(N,kzo),e(N,Ov),e(Ov,H_e),e(H_e,Szo),e(Ov,Rzo),e(Ov,QX),e(QX,Pzo),e(Ov,Bzo),e(oo,Izo),e(oo,Vv),e(Vv,Nzo),e(Vv,U_e),e(U_e,qzo),e(Vv,jzo),e(Vv,J_e),e(J_e,Dzo),e(oo,Gzo),M(Xv,oo,null),b(f,$Xe,u),b(f,ad,u),e(ad,zv),e(zv,Y_e),M(dy,Y_e,null),e(ad,Ozo),e(ad,K_e),e(K_e,Vzo),b(f,kXe,u),b(f,Bo,u),M(cy,Bo,null),e(Bo,Xzo),e(Bo,nd),e(nd,zzo),e(nd,WX),e(WX,Qzo),e(nd,Wzo),e(nd,HX),e(HX,Hzo),e(nd,Uzo),e(Bo,Jzo),e(Bo,fy),e(fy,Yzo),e(fy,Z_e),e(Z_e,Kzo),e(fy,Zzo),e(Bo,eQo),e(Bo,gt),M(my,gt,null),e(gt,oQo),e(gt,eue),e(eue,rQo),e(gt,tQo),e(gt,sd),e(sd,aQo),e(sd,oue),e(oue,nQo),e(sd,sQo),e(sd,UX),e(UX,lQo),e(sd,iQo),e(gt,dQo),M(Qv,gt,null),e(Bo,cQo),e(Bo,ro),M(gy,ro,null),e(ro,fQo),e(ro,rue),e(rue,mQo),e(ro,gQo),e(ro,Oa),e(Oa,hQo),e(Oa,tue),e(tue,pQo),e(Oa,_Qo),e(Oa,aue),e(aue,uQo),e(Oa,bQo),e(Oa,nue),e(nue,vQo),e(Oa,FQo),e(ro,TQo),e(ro,Z),e(Z,Wv),e(Wv,sue),e(sue,MQo),e(Wv,EQo),e(Wv,JX),e(JX,CQo),e(Wv,wQo),e(Z,AQo),e(Z,Hv),e(Hv,lue),e(lue,LQo),e(Hv,yQo),e(Hv,YX),e(YX,xQo),e(Hv,$Qo),e(Z,kQo),e(Z,Uv),e(Uv,iue),e(iue,SQo),e(Uv,RQo),e(Uv,KX),e(KX,PQo),e(Uv,BQo),e(Z,IQo),e(Z,Jv),e(Jv,due),e(due,NQo),e(Jv,qQo),e(Jv,ZX),e(ZX,jQo),e(Jv,DQo),e(Z,GQo),e(Z,Yv),e(Yv,cue),e(cue,OQo),e(Yv,VQo),e(Yv,ez),e(ez,XQo),e(Yv,zQo),e(Z,QQo),e(Z,Kv),e(Kv,fue),e(fue,WQo),e(Kv,HQo),e(Kv,oz),e(oz,UQo),e(Kv,JQo),e(Z,YQo),e(Z,Zv),e(Zv,mue),e(mue,KQo),e(Zv,ZQo),e(Zv,rz),e(rz,eWo),e(Zv,oWo),e(Z,rWo),e(Z,eF),e(eF,gue),e(gue,tWo),e(eF,aWo),e(eF,tz),e(tz,nWo),e(eF,sWo),e(Z,lWo),e(Z,oF),e(oF,hue),e(hue,iWo),e(oF,dWo),e(oF,az),e(az,cWo),e(oF,fWo),e(Z,mWo),e(Z,rF),e(rF,pue),e(pue,gWo),e(rF,hWo),e(rF,nz),e(nz,pWo),e(rF,_Wo),e(Z,uWo),e(Z,tF),e(tF,_ue),e(_ue,bWo),e(tF,vWo),e(tF,sz),e(sz,FWo),e(tF,TWo),e(Z,MWo),e(Z,aF),e(aF,uue),e(uue,EWo),e(aF,CWo),e(aF,lz),e(lz,wWo),e(aF,AWo),e(Z,LWo),e(Z,nF),e(nF,bue),e(bue,yWo),e(nF,xWo),e(nF,iz),e(iz,$Wo),e(nF,kWo),e(Z,SWo),e(Z,sF),e(sF,vue),e(vue,RWo),e(sF,PWo),e(sF,dz),e(dz,BWo),e(sF,IWo),e(Z,NWo),e(Z,lF),e(lF,Fue),e(Fue,qWo),e(lF,jWo),e(lF,cz),e(cz,DWo),e(lF,GWo),e(Z,OWo),e(Z,iF),e(iF,Tue),e(Tue,VWo),e(iF,XWo),e(iF,fz),e(fz,zWo),e(iF,QWo),e(Z,WWo),e(Z,dF),e(dF,Mue),e(Mue,HWo),e(dF,UWo),e(dF,mz),e(mz,JWo),e(dF,YWo),e(Z,KWo),e(Z,cF),e(cF,Eue),e(Eue,ZWo),e(cF,eHo),e(cF,gz),e(gz,oHo),e(cF,rHo),e(Z,tHo),e(Z,fF),e(fF,Cue),e(Cue,aHo),e(fF,nHo),e(fF,hz),e(hz,sHo),e(fF,lHo),e(Z,iHo),e(Z,mF),e(mF,wue),e(wue,dHo),e(mF,cHo),e(mF,pz),e(pz,fHo),e(mF,mHo),e(Z,gHo),e(Z,gF),e(gF,Aue),e(Aue,hHo),e(gF,pHo),e(gF,_z),e(_z,_Ho),e(gF,uHo),e(Z,bHo),e(Z,hF),e(hF,Lue),e(Lue,vHo),e(hF,FHo),e(hF,uz),e(uz,THo),e(hF,MHo),e(Z,EHo),e(Z,pF),e(pF,yue),e(yue,CHo),e(pF,wHo),e(pF,bz),e(bz,AHo),e(pF,LHo),e(Z,yHo),e(Z,_F),e(_F,xue),e(xue,xHo),e(_F,$Ho),e(_F,vz),e(vz,kHo),e(_F,SHo),e(Z,RHo),e(Z,uF),e(uF,$ue),e($ue,PHo),e(uF,BHo),e(uF,Fz),e(Fz,IHo),e(uF,NHo),e(Z,qHo),e(Z,bF),e(bF,kue),e(kue,jHo),e(bF,DHo),e(bF,Tz),e(Tz,GHo),e(bF,OHo),e(Z,VHo),e(Z,vF),e(vF,Sue),e(Sue,XHo),e(vF,zHo),e(vF,Mz),e(Mz,QHo),e(vF,WHo),e(Z,HHo),e(Z,FF),e(FF,Rue),e(Rue,UHo),e(FF,JHo),e(FF,Ez),e(Ez,YHo),e(FF,KHo),e(Z,ZHo),e(Z,TF),e(TF,Pue),e(Pue,eUo),e(TF,oUo),e(TF,Cz),e(Cz,rUo),e(TF,tUo),e(Z,aUo),e(Z,MF),e(MF,Bue),e(Bue,nUo),e(MF,sUo),e(MF,wz),e(wz,lUo),e(MF,iUo),e(ro,dUo),e(ro,EF),e(EF,cUo),e(EF,Iue),e(Iue,fUo),e(EF,mUo),e(EF,Nue),e(Nue,gUo),e(ro,hUo),M(CF,ro,null),b(f,SXe,u),b(f,ld,u),e(ld,wF),e(wF,que),M(hy,que,null),e(ld,pUo),e(ld,jue),e(jue,_Uo),b(f,RXe,u),b(f,Io,u),M(py,Io,null),e(Io,uUo),e(Io,id),e(id,bUo),e(id,Az),e(Az,vUo),e(id,FUo),e(id,Lz),e(Lz,TUo),e(id,MUo),e(Io,EUo),e(Io,_y),e(_y,CUo),e(_y,Due),e(Due,wUo),e(_y,AUo),e(Io,LUo),e(Io,ht),M(uy,ht,null),e(ht,yUo),e(ht,Gue),e(Gue,xUo),e(ht,$Uo),e(ht,dd),e(dd,kUo),e(dd,Oue),e(Oue,SUo),e(dd,RUo),e(dd,yz),e(yz,PUo),e(dd,BUo),e(ht,IUo),M(AF,ht,null),e(Io,NUo),e(Io,to),M(by,to,null),e(to,qUo),e(to,Vue),e(Vue,jUo),e(to,DUo),e(to,Va),e(Va,GUo),e(Va,Xue),e(Xue,OUo),e(Va,VUo),e(Va,zue),e(zue,XUo),e(Va,zUo),e(Va,Que),e(Que,QUo),e(Va,WUo),e(to,HUo),e(to,No),e(No,LF),e(LF,Wue),e(Wue,UUo),e(LF,JUo),e(LF,xz),e(xz,YUo),e(LF,KUo),e(No,ZUo),e(No,yF),e(yF,Hue),e(Hue,eJo),e(yF,oJo),e(yF,$z),e($z,rJo),e(yF,tJo),e(No,aJo),e(No,xF),e(xF,Uue),e(Uue,nJo),e(xF,sJo),e(xF,kz),e(kz,lJo),e(xF,iJo),e(No,dJo),e(No,$F),e($F,Jue),e(Jue,cJo),e($F,fJo),e($F,Sz),e(Sz,mJo),e($F,gJo),e(No,hJo),e(No,kF),e(kF,Yue),e(Yue,pJo),e(kF,_Jo),e(kF,Rz),e(Rz,uJo),e(kF,bJo),e(No,vJo),e(No,SF),e(SF,Kue),e(Kue,FJo),e(SF,TJo),e(SF,Pz),e(Pz,MJo),e(SF,EJo),e(to,CJo),e(to,RF),e(RF,wJo),e(RF,Zue),e(Zue,AJo),e(RF,LJo),e(RF,e1e),e(e1e,yJo),e(to,xJo),M(PF,to,null),b(f,PXe,u),b(f,cd,u),e(cd,BF),e(BF,o1e),M(vy,o1e,null),e(cd,$Jo),e(cd,r1e),e(r1e,kJo),b(f,BXe,u),b(f,qo,u),M(Fy,qo,null),e(qo,SJo),e(qo,fd),e(fd,RJo),e(fd,Bz),e(Bz,PJo),e(fd,BJo),e(fd,Iz),e(Iz,IJo),e(fd,NJo),e(qo,qJo),e(qo,Ty),e(Ty,jJo),e(Ty,t1e),e(t1e,DJo),e(Ty,GJo),e(qo,OJo),e(qo,pt),M(My,pt,null),e(pt,VJo),e(pt,a1e),e(a1e,XJo),e(pt,zJo),e(pt,md),e(md,QJo),e(md,n1e),e(n1e,WJo),e(md,HJo),e(md,Nz),e(Nz,UJo),e(md,JJo),e(pt,YJo),M(IF,pt,null),e(qo,KJo),e(qo,ao),M(Ey,ao,null),e(ao,ZJo),e(ao,s1e),e(s1e,eYo),e(ao,oYo),e(ao,Xa),e(Xa,rYo),e(Xa,l1e),e(l1e,tYo),e(Xa,aYo),e(Xa,i1e),e(i1e,nYo),e(Xa,sYo),e(Xa,d1e),e(d1e,lYo),e(Xa,iYo),e(ao,dYo),e(ao,U),e(U,NF),e(NF,c1e),e(c1e,cYo),e(NF,fYo),e(NF,qz),e(qz,mYo),e(NF,gYo),e(U,hYo),e(U,qF),e(qF,f1e),e(f1e,pYo),e(qF,_Yo),e(qF,jz),e(jz,uYo),e(qF,bYo),e(U,vYo),e(U,jF),e(jF,m1e),e(m1e,FYo),e(jF,TYo),e(jF,Dz),e(Dz,MYo),e(jF,EYo),e(U,CYo),e(U,DF),e(DF,g1e),e(g1e,wYo),e(DF,AYo),e(DF,Gz),e(Gz,LYo),e(DF,yYo),e(U,xYo),e(U,GF),e(GF,h1e),e(h1e,$Yo),e(GF,kYo),e(GF,Oz),e(Oz,SYo),e(GF,RYo),e(U,PYo),e(U,OF),e(OF,p1e),e(p1e,BYo),e(OF,IYo),e(OF,Vz),e(Vz,NYo),e(OF,qYo),e(U,jYo),e(U,VF),e(VF,_1e),e(_1e,DYo),e(VF,GYo),e(VF,Xz),e(Xz,OYo),e(VF,VYo),e(U,XYo),e(U,XF),e(XF,u1e),e(u1e,zYo),e(XF,QYo),e(XF,zz),e(zz,WYo),e(XF,HYo),e(U,UYo),e(U,zF),e(zF,b1e),e(b1e,JYo),e(zF,YYo),e(zF,Qz),e(Qz,KYo),e(zF,ZYo),e(U,eKo),e(U,QF),e(QF,v1e),e(v1e,oKo),e(QF,rKo),e(QF,Wz),e(Wz,tKo),e(QF,aKo),e(U,nKo),e(U,WF),e(WF,F1e),e(F1e,sKo),e(WF,lKo),e(WF,Hz),e(Hz,iKo),e(WF,dKo),e(U,cKo),e(U,HF),e(HF,T1e),e(T1e,fKo),e(HF,mKo),e(HF,Uz),e(Uz,gKo),e(HF,hKo),e(U,pKo),e(U,UF),e(UF,M1e),e(M1e,_Ko),e(UF,uKo),e(UF,Jz),e(Jz,bKo),e(UF,vKo),e(U,FKo),e(U,JF),e(JF,E1e),e(E1e,TKo),e(JF,MKo),e(JF,Yz),e(Yz,EKo),e(JF,CKo),e(U,wKo),e(U,YF),e(YF,C1e),e(C1e,AKo),e(YF,LKo),e(YF,Kz),e(Kz,yKo),e(YF,xKo),e(U,$Ko),e(U,KF),e(KF,w1e),e(w1e,kKo),e(KF,SKo),e(KF,Zz),e(Zz,RKo),e(KF,PKo),e(U,BKo),e(U,ZF),e(ZF,A1e),e(A1e,IKo),e(ZF,NKo),e(ZF,eQ),e(eQ,qKo),e(ZF,jKo),e(U,DKo),e(U,eT),e(eT,L1e),e(L1e,GKo),e(eT,OKo),e(eT,oQ),e(oQ,VKo),e(eT,XKo),e(U,zKo),e(U,oT),e(oT,y1e),e(y1e,QKo),e(oT,WKo),e(oT,rQ),e(rQ,HKo),e(oT,UKo),e(U,JKo),e(U,rT),e(rT,x1e),e(x1e,YKo),e(rT,KKo),e(rT,tQ),e(tQ,ZKo),e(rT,eZo),e(U,oZo),e(U,tT),e(tT,$1e),e($1e,rZo),e(tT,tZo),e(tT,aQ),e(aQ,aZo),e(tT,nZo),e(U,sZo),e(U,aT),e(aT,k1e),e(k1e,lZo),e(aT,iZo),e(aT,nQ),e(nQ,dZo),e(aT,cZo),e(U,fZo),e(U,nT),e(nT,S1e),e(S1e,mZo),e(nT,gZo),e(nT,sQ),e(sQ,hZo),e(nT,pZo),e(U,_Zo),e(U,sT),e(sT,R1e),e(R1e,uZo),e(sT,bZo),e(sT,lQ),e(lQ,vZo),e(sT,FZo),e(U,TZo),e(U,lT),e(lT,P1e),e(P1e,MZo),e(lT,EZo),e(lT,iQ),e(iQ,CZo),e(lT,wZo),e(U,AZo),e(U,iT),e(iT,B1e),e(B1e,LZo),e(iT,yZo),e(iT,dQ),e(dQ,xZo),e(iT,$Zo),e(U,kZo),e(U,dT),e(dT,I1e),e(I1e,SZo),e(dT,RZo),e(dT,cQ),e(cQ,PZo),e(dT,BZo),e(U,IZo),e(U,cT),e(cT,N1e),e(N1e,NZo),e(cT,qZo),e(cT,fQ),e(fQ,jZo),e(cT,DZo),e(U,GZo),e(U,fT),e(fT,q1e),e(q1e,OZo),e(fT,VZo),e(fT,mQ),e(mQ,XZo),e(fT,zZo),e(U,QZo),e(U,mT),e(mT,j1e),e(j1e,WZo),e(mT,HZo),e(mT,gQ),e(gQ,UZo),e(mT,JZo),e(U,YZo),e(U,gT),e(gT,D1e),e(D1e,KZo),e(gT,ZZo),e(gT,hQ),e(hQ,eer),e(gT,oer),e(U,rer),e(U,hT),e(hT,G1e),e(G1e,ter),e(hT,aer),e(hT,pQ),e(pQ,ner),e(hT,ser),e(U,ler),e(U,pT),e(pT,O1e),e(O1e,ier),e(pT,der),e(pT,_Q),e(_Q,cer),e(pT,fer),e(U,mer),e(U,_T),e(_T,V1e),e(V1e,ger),e(_T,her),e(_T,uQ),e(uQ,per),e(_T,_er),e(U,uer),e(U,uT),e(uT,X1e),e(X1e,ber),e(uT,ver),e(uT,bQ),e(bQ,Fer),e(uT,Ter),e(U,Mer),e(U,bT),e(bT,z1e),e(z1e,Eer),e(bT,Cer),e(bT,vQ),e(vQ,wer),e(bT,Aer),e(ao,Ler),e(ao,vT),e(vT,yer),e(vT,Q1e),e(Q1e,xer),e(vT,$er),e(vT,W1e),e(W1e,ker),e(ao,Ser),M(FT,ao,null),b(f,IXe,u),b(f,gd,u),e(gd,TT),e(TT,H1e),M(Cy,H1e,null),e(gd,Rer),e(gd,U1e),e(U1e,Per),b(f,NXe,u),b(f,jo,u),M(wy,jo,null),e(jo,Ber),e(jo,hd),e(hd,Ier),e(hd,FQ),e(FQ,Ner),e(hd,qer),e(hd,TQ),e(TQ,jer),e(hd,Der),e(jo,Ger),e(jo,Ay),e(Ay,Oer),e(Ay,J1e),e(J1e,Ver),e(Ay,Xer),e(jo,zer),e(jo,_t),M(Ly,_t,null),e(_t,Qer),e(_t,Y1e),e(Y1e,Wer),e(_t,Her),e(_t,pd),e(pd,Uer),e(pd,K1e),e(K1e,Jer),e(pd,Yer),e(pd,MQ),e(MQ,Ker),e(pd,Zer),e(_t,eor),M(MT,_t,null),e(jo,oor),e(jo,no),M(yy,no,null),e(no,ror),e(no,Z1e),e(Z1e,tor),e(no,aor),e(no,za),e(za,nor),e(za,e2e),e(e2e,sor),e(za,lor),e(za,o2e),e(o2e,ior),e(za,dor),e(za,r2e),e(r2e,cor),e(za,mor),e(no,gor),e(no,V),e(V,ET),e(ET,t2e),e(t2e,hor),e(ET,por),e(ET,EQ),e(EQ,_or),e(ET,uor),e(V,bor),e(V,CT),e(CT,a2e),e(a2e,vor),e(CT,For),e(CT,CQ),e(CQ,Tor),e(CT,Mor),e(V,Eor),e(V,wT),e(wT,n2e),e(n2e,Cor),e(wT,wor),e(wT,wQ),e(wQ,Aor),e(wT,Lor),e(V,yor),e(V,AT),e(AT,s2e),e(s2e,xor),e(AT,$or),e(AT,AQ),e(AQ,kor),e(AT,Sor),e(V,Ror),e(V,LT),e(LT,l2e),e(l2e,Por),e(LT,Bor),e(LT,LQ),e(LQ,Ior),e(LT,Nor),e(V,qor),e(V,yT),e(yT,i2e),e(i2e,jor),e(yT,Dor),e(yT,yQ),e(yQ,Gor),e(yT,Oor),e(V,Vor),e(V,xT),e(xT,d2e),e(d2e,Xor),e(xT,zor),e(xT,xQ),e(xQ,Qor),e(xT,Wor),e(V,Hor),e(V,$T),e($T,c2e),e(c2e,Uor),e($T,Jor),e($T,$Q),e($Q,Yor),e($T,Kor),e(V,Zor),e(V,kT),e(kT,f2e),e(f2e,err),e(kT,orr),e(kT,kQ),e(kQ,rrr),e(kT,trr),e(V,arr),e(V,ST),e(ST,m2e),e(m2e,nrr),e(ST,srr),e(ST,SQ),e(SQ,lrr),e(ST,irr),e(V,drr),e(V,RT),e(RT,g2e),e(g2e,crr),e(RT,frr),e(RT,RQ),e(RQ,mrr),e(RT,grr),e(V,hrr),e(V,PT),e(PT,h2e),e(h2e,prr),e(PT,_rr),e(PT,PQ),e(PQ,urr),e(PT,brr),e(V,vrr),e(V,BT),e(BT,p2e),e(p2e,Frr),e(BT,Trr),e(BT,BQ),e(BQ,Mrr),e(BT,Err),e(V,Crr),e(V,IT),e(IT,_2e),e(_2e,wrr),e(IT,Arr),e(IT,IQ),e(IQ,Lrr),e(IT,yrr),e(V,xrr),e(V,NT),e(NT,u2e),e(u2e,$rr),e(NT,krr),e(NT,NQ),e(NQ,Srr),e(NT,Rrr),e(V,Prr),e(V,qT),e(qT,b2e),e(b2e,Brr),e(qT,Irr),e(qT,qQ),e(qQ,Nrr),e(qT,qrr),e(V,jrr),e(V,jT),e(jT,v2e),e(v2e,Drr),e(jT,Grr),e(jT,jQ),e(jQ,Orr),e(jT,Vrr),e(V,Xrr),e(V,DT),e(DT,F2e),e(F2e,zrr),e(DT,Qrr),e(DT,DQ),e(DQ,Wrr),e(DT,Hrr),e(V,Urr),e(V,GT),e(GT,T2e),e(T2e,Jrr),e(GT,Yrr),e(GT,GQ),e(GQ,Krr),e(GT,Zrr),e(V,etr),e(V,OT),e(OT,M2e),e(M2e,otr),e(OT,rtr),e(OT,OQ),e(OQ,ttr),e(OT,atr),e(V,ntr),e(V,VT),e(VT,E2e),e(E2e,str),e(VT,ltr),e(VT,VQ),e(VQ,itr),e(VT,dtr),e(V,ctr),e(V,XT),e(XT,C2e),e(C2e,ftr),e(XT,mtr),e(XT,XQ),e(XQ,gtr),e(XT,htr),e(V,ptr),e(V,zT),e(zT,w2e),e(w2e,_tr),e(zT,utr),e(zT,zQ),e(zQ,btr),e(zT,vtr),e(V,Ftr),e(V,QT),e(QT,A2e),e(A2e,Ttr),e(QT,Mtr),e(QT,QQ),e(QQ,Etr),e(QT,Ctr),e(V,wtr),e(V,WT),e(WT,L2e),e(L2e,Atr),e(WT,Ltr),e(WT,WQ),e(WQ,ytr),e(WT,xtr),e(V,$tr),e(V,HT),e(HT,y2e),e(y2e,ktr),e(HT,Str),e(HT,HQ),e(HQ,Rtr),e(HT,Ptr),e(V,Btr),e(V,UT),e(UT,x2e),e(x2e,Itr),e(UT,Ntr),e(UT,UQ),e(UQ,qtr),e(UT,jtr),e(V,Dtr),e(V,JT),e(JT,$2e),e($2e,Gtr),e(JT,Otr),e(JT,JQ),e(JQ,Vtr),e(JT,Xtr),e(V,ztr),e(V,YT),e(YT,k2e),e(k2e,Qtr),e(YT,Wtr),e(YT,YQ),e(YQ,Htr),e(YT,Utr),e(V,Jtr),e(V,KT),e(KT,S2e),e(S2e,Ytr),e(KT,Ktr),e(KT,KQ),e(KQ,Ztr),e(KT,ear),e(V,oar),e(V,ZT),e(ZT,R2e),e(R2e,rar),e(ZT,tar),e(ZT,ZQ),e(ZQ,aar),e(ZT,nar),e(V,sar),e(V,e7),e(e7,P2e),e(P2e,lar),e(e7,iar),e(e7,eW),e(eW,dar),e(e7,car),e(V,far),e(V,o7),e(o7,B2e),e(B2e,mar),e(o7,gar),e(o7,oW),e(oW,har),e(o7,par),e(V,_ar),e(V,r7),e(r7,I2e),e(I2e,uar),e(r7,bar),e(r7,rW),e(rW,Far),e(r7,Tar),e(V,Mar),e(V,t7),e(t7,N2e),e(N2e,Ear),e(t7,Car),e(t7,tW),e(tW,war),e(t7,Aar),e(V,Lar),e(V,a7),e(a7,q2e),e(q2e,yar),e(a7,xar),e(a7,aW),e(aW,$ar),e(a7,kar),e(V,Sar),e(V,n7),e(n7,j2e),e(j2e,Rar),e(n7,Par),e(n7,nW),e(nW,Bar),e(n7,Iar),e(V,Nar),e(V,s7),e(s7,D2e),e(D2e,qar),e(s7,jar),e(s7,sW),e(sW,Dar),e(s7,Gar),e(V,Oar),e(V,l7),e(l7,G2e),e(G2e,Var),e(l7,Xar),e(l7,lW),e(lW,zar),e(l7,Qar),e(V,War),e(V,i7),e(i7,O2e),e(O2e,Har),e(i7,Uar),e(i7,iW),e(iW,Jar),e(i7,Yar),e(V,Kar),e(V,d7),e(d7,V2e),e(V2e,Zar),e(d7,enr),e(d7,dW),e(dW,onr),e(d7,rnr),e(V,tnr),e(V,c7),e(c7,X2e),e(X2e,anr),e(c7,nnr),e(c7,cW),e(cW,snr),e(c7,lnr),e(no,inr),e(no,f7),e(f7,dnr),e(f7,z2e),e(z2e,cnr),e(f7,fnr),e(f7,Q2e),e(Q2e,mnr),e(no,gnr),M(m7,no,null),b(f,qXe,u),b(f,_d,u),e(_d,g7),e(g7,W2e),M(xy,W2e,null),e(_d,hnr),e(_d,H2e),e(H2e,pnr),b(f,jXe,u),b(f,Do,u),M($y,Do,null),e(Do,_nr),e(Do,ud),e(ud,unr),e(ud,fW),e(fW,bnr),e(ud,vnr),e(ud,mW),e(mW,Fnr),e(ud,Tnr),e(Do,Mnr),e(Do,ky),e(ky,Enr),e(ky,U2e),e(U2e,Cnr),e(ky,wnr),e(Do,Anr),e(Do,ut),M(Sy,ut,null),e(ut,Lnr),e(ut,J2e),e(J2e,ynr),e(ut,xnr),e(ut,bd),e(bd,$nr),e(bd,Y2e),e(Y2e,knr),e(bd,Snr),e(bd,gW),e(gW,Rnr),e(bd,Pnr),e(ut,Bnr),M(h7,ut,null),e(Do,Inr),e(Do,so),M(Ry,so,null),e(so,Nnr),e(so,K2e),e(K2e,qnr),e(so,jnr),e(so,Qa),e(Qa,Dnr),e(Qa,Z2e),e(Z2e,Gnr),e(Qa,Onr),e(Qa,ebe),e(ebe,Vnr),e(Qa,Xnr),e(Qa,obe),e(obe,znr),e(Qa,Qnr),e(so,Wnr),e(so,rbe),e(rbe,p7),e(p7,tbe),e(tbe,Hnr),e(p7,Unr),e(p7,hW),e(hW,Jnr),e(p7,Ynr),e(so,Knr),e(so,_7),e(_7,Znr),e(_7,abe),e(abe,esr),e(_7,osr),e(_7,nbe),e(nbe,rsr),e(so,tsr),M(u7,so,null),b(f,DXe,u),b(f,vd,u),e(vd,b7),e(b7,sbe),M(Py,sbe,null),e(vd,asr),e(vd,lbe),e(lbe,nsr),b(f,GXe,u),b(f,Go,u),M(By,Go,null),e(Go,ssr),e(Go,Fd),e(Fd,lsr),e(Fd,pW),e(pW,isr),e(Fd,dsr),e(Fd,_W),e(_W,csr),e(Fd,fsr),e(Go,msr),e(Go,Iy),e(Iy,gsr),e(Iy,ibe),e(ibe,hsr),e(Iy,psr),e(Go,_sr),e(Go,bt),M(Ny,bt,null),e(bt,usr),e(bt,dbe),e(dbe,bsr),e(bt,vsr),e(bt,Td),e(Td,Fsr),e(Td,cbe),e(cbe,Tsr),e(Td,Msr),e(Td,uW),e(uW,Esr),e(Td,Csr),e(bt,wsr),M(v7,bt,null),e(Go,Asr),e(Go,lo),M(qy,lo,null),e(lo,Lsr),e(lo,fbe),e(fbe,ysr),e(lo,xsr),e(lo,Wa),e(Wa,$sr),e(Wa,mbe),e(mbe,ksr),e(Wa,Ssr),e(Wa,gbe),e(gbe,Rsr),e(Wa,Psr),e(Wa,hbe),e(hbe,Bsr),e(Wa,Isr),e(lo,Nsr),e(lo,ve),e(ve,F7),e(F7,pbe),e(pbe,qsr),e(F7,jsr),e(F7,bW),e(bW,Dsr),e(F7,Gsr),e(ve,Osr),e(ve,T7),e(T7,_be),e(_be,Vsr),e(T7,Xsr),e(T7,vW),e(vW,zsr),e(T7,Qsr),e(ve,Wsr),e(ve,M7),e(M7,ube),e(ube,Hsr),e(M7,Usr),e(M7,FW),e(FW,Jsr),e(M7,Ysr),e(ve,Ksr),e(ve,E7),e(E7,bbe),e(bbe,Zsr),e(E7,elr),e(E7,TW),e(TW,olr),e(E7,rlr),e(ve,tlr),e(ve,Hs),e(Hs,vbe),e(vbe,alr),e(Hs,nlr),e(Hs,MW),e(MW,slr),e(Hs,llr),e(Hs,EW),e(EW,ilr),e(Hs,dlr),e(ve,clr),e(ve,C7),e(C7,Fbe),e(Fbe,flr),e(C7,mlr),e(C7,CW),e(CW,glr),e(C7,hlr),e(ve,plr),e(ve,Us),e(Us,Tbe),e(Tbe,_lr),e(Us,ulr),e(Us,wW),e(wW,blr),e(Us,vlr),e(Us,AW),e(AW,Flr),e(Us,Tlr),e(ve,Mlr),e(ve,w7),e(w7,Mbe),e(Mbe,Elr),e(w7,Clr),e(w7,LW),e(LW,wlr),e(w7,Alr),e(ve,Llr),e(ve,vt),e(vt,Ebe),e(Ebe,ylr),e(vt,xlr),e(vt,yW),e(yW,$lr),e(vt,klr),e(vt,xW),e(xW,Slr),e(vt,Rlr),e(vt,$W),e($W,Plr),e(vt,Blr),e(ve,Ilr),e(ve,A7),e(A7,Cbe),e(Cbe,Nlr),e(A7,qlr),e(A7,kW),e(kW,jlr),e(A7,Dlr),e(ve,Glr),e(ve,L7),e(L7,wbe),e(wbe,Olr),e(L7,Vlr),e(L7,SW),e(SW,Xlr),e(L7,zlr),e(ve,Qlr),e(ve,y7),e(y7,Abe),e(Abe,Wlr),e(y7,Hlr),e(y7,RW),e(RW,Ulr),e(y7,Jlr),e(ve,Ylr),e(ve,x7),e(x7,Lbe),e(Lbe,Klr),e(x7,Zlr),e(x7,PW),e(PW,eir),e(x7,oir),e(ve,rir),e(ve,$7),e($7,ybe),e(ybe,tir),e($7,air),e($7,BW),e(BW,nir),e($7,sir),e(ve,lir),e(ve,k7),e(k7,xbe),e(xbe,iir),e(k7,dir),e(k7,IW),e(IW,cir),e(k7,fir),e(ve,mir),e(ve,S7),e(S7,$be),e($be,gir),e(S7,hir),e(S7,NW),e(NW,pir),e(S7,_ir),e(lo,uir),e(lo,R7),e(R7,bir),e(R7,kbe),e(kbe,vir),e(R7,Fir),e(R7,Sbe),e(Sbe,Tir),e(lo,Mir),M(P7,lo,null),b(f,OXe,u),b(f,Md,u),e(Md,B7),e(B7,Rbe),M(jy,Rbe,null),e(Md,Eir),e(Md,Pbe),e(Pbe,Cir),b(f,VXe,u),b(f,Oo,u),M(Dy,Oo,null),e(Oo,wir),e(Oo,Ed),e(Ed,Air),e(Ed,qW),e(qW,Lir),e(Ed,yir),e(Ed,jW),e(jW,xir),e(Ed,$ir),e(Oo,kir),e(Oo,Gy),e(Gy,Sir),e(Gy,Bbe),e(Bbe,Rir),e(Gy,Pir),e(Oo,Bir),e(Oo,Ft),M(Oy,Ft,null),e(Ft,Iir),e(Ft,Ibe),e(Ibe,Nir),e(Ft,qir),e(Ft,Cd),e(Cd,jir),e(Cd,Nbe),e(Nbe,Dir),e(Cd,Gir),e(Cd,DW),e(DW,Oir),e(Cd,Vir),e(Ft,Xir),M(I7,Ft,null),e(Oo,zir),e(Oo,io),M(Vy,io,null),e(io,Qir),e(io,qbe),e(qbe,Wir),e(io,Hir),e(io,Ha),e(Ha,Uir),e(Ha,jbe),e(jbe,Jir),e(Ha,Yir),e(Ha,Dbe),e(Dbe,Kir),e(Ha,Zir),e(Ha,Gbe),e(Gbe,edr),e(Ha,odr),e(io,rdr),e(io,Obe),e(Obe,N7),e(N7,Vbe),e(Vbe,tdr),e(N7,adr),e(N7,GW),e(GW,ndr),e(N7,sdr),e(io,ldr),e(io,q7),e(q7,idr),e(q7,Xbe),e(Xbe,ddr),e(q7,cdr),e(q7,zbe),e(zbe,fdr),e(io,mdr),M(j7,io,null),b(f,XXe,u),b(f,wd,u),e(wd,D7),e(D7,Qbe),M(Xy,Qbe,null),e(wd,gdr),e(wd,Wbe),e(Wbe,hdr),b(f,zXe,u),b(f,Vo,u),M(zy,Vo,null),e(Vo,pdr),e(Vo,Ad),e(Ad,_dr),e(Ad,OW),e(OW,udr),e(Ad,bdr),e(Ad,VW),e(VW,vdr),e(Ad,Fdr),e(Vo,Tdr),e(Vo,Qy),e(Qy,Mdr),e(Qy,Hbe),e(Hbe,Edr),e(Qy,Cdr),e(Vo,wdr),e(Vo,Tt),M(Wy,Tt,null),e(Tt,Adr),e(Tt,Ube),e(Ube,Ldr),e(Tt,ydr),e(Tt,Ld),e(Ld,xdr),e(Ld,Jbe),e(Jbe,$dr),e(Ld,kdr),e(Ld,XW),e(XW,Sdr),e(Ld,Rdr),e(Tt,Pdr),M(G7,Tt,null),e(Vo,Bdr),e(Vo,co),M(Hy,co,null),e(co,Idr),e(co,Ybe),e(Ybe,Ndr),e(co,qdr),e(co,Ua),e(Ua,jdr),e(Ua,Kbe),e(Kbe,Ddr),e(Ua,Gdr),e(Ua,Zbe),e(Zbe,Odr),e(Ua,Vdr),e(Ua,eve),e(eve,Xdr),e(Ua,zdr),e(co,Qdr),e(co,ove),e(ove,O7),e(O7,rve),e(rve,Wdr),e(O7,Hdr),e(O7,zW),e(zW,Udr),e(O7,Jdr),e(co,Ydr),e(co,V7),e(V7,Kdr),e(V7,tve),e(tve,Zdr),e(V7,ecr),e(V7,ave),e(ave,ocr),e(co,rcr),M(X7,co,null),b(f,QXe,u),b(f,yd,u),e(yd,z7),e(z7,nve),M(Uy,nve,null),e(yd,tcr),e(yd,sve),e(sve,acr),b(f,WXe,u),b(f,Xo,u),M(Jy,Xo,null),e(Xo,ncr),e(Xo,xd),e(xd,scr),e(xd,QW),e(QW,lcr),e(xd,icr),e(xd,WW),e(WW,dcr),e(xd,ccr),e(Xo,fcr),e(Xo,Yy),e(Yy,mcr),e(Yy,lve),e(lve,gcr),e(Yy,hcr),e(Xo,pcr),e(Xo,Mt),M(Ky,Mt,null),e(Mt,_cr),e(Mt,ive),e(ive,ucr),e(Mt,bcr),e(Mt,$d),e($d,vcr),e($d,dve),e(dve,Fcr),e($d,Tcr),e($d,HW),e(HW,Mcr),e($d,Ecr),e(Mt,Ccr),M(Q7,Mt,null),e(Xo,wcr),e(Xo,fo),M(Zy,fo,null),e(fo,Acr),e(fo,cve),e(cve,Lcr),e(fo,ycr),e(fo,Ja),e(Ja,xcr),e(Ja,fve),e(fve,$cr),e(Ja,kcr),e(Ja,mve),e(mve,Scr),e(Ja,Rcr),e(Ja,gve),e(gve,Pcr),e(Ja,Bcr),e(fo,Icr),e(fo,Pe),e(Pe,W7),e(W7,hve),e(hve,Ncr),e(W7,qcr),e(W7,UW),e(UW,jcr),e(W7,Dcr),e(Pe,Gcr),e(Pe,H7),e(H7,pve),e(pve,Ocr),e(H7,Vcr),e(H7,JW),e(JW,Xcr),e(H7,zcr),e(Pe,Qcr),e(Pe,U7),e(U7,_ve),e(_ve,Wcr),e(U7,Hcr),e(U7,YW),e(YW,Ucr),e(U7,Jcr),e(Pe,Ycr),e(Pe,J7),e(J7,uve),e(uve,Kcr),e(J7,Zcr),e(J7,KW),e(KW,efr),e(J7,ofr),e(Pe,rfr),e(Pe,Y7),e(Y7,bve),e(bve,tfr),e(Y7,afr),e(Y7,ZW),e(ZW,nfr),e(Y7,sfr),e(Pe,lfr),e(Pe,K7),e(K7,vve),e(vve,ifr),e(K7,dfr),e(K7,eH),e(eH,cfr),e(K7,ffr),e(Pe,mfr),e(Pe,Z7),e(Z7,Fve),e(Fve,gfr),e(Z7,hfr),e(Z7,oH),e(oH,pfr),e(Z7,_fr),e(Pe,ufr),e(Pe,e8),e(e8,Tve),e(Tve,bfr),e(e8,vfr),e(e8,rH),e(rH,Ffr),e(e8,Tfr),e(Pe,Mfr),e(Pe,o8),e(o8,Mve),e(Mve,Efr),e(o8,Cfr),e(o8,tH),e(tH,wfr),e(o8,Afr),e(fo,Lfr),e(fo,r8),e(r8,yfr),e(r8,Eve),e(Eve,xfr),e(r8,$fr),e(r8,Cve),e(Cve,kfr),e(fo,Sfr),M(t8,fo,null),b(f,HXe,u),b(f,kd,u),e(kd,a8),e(a8,wve),M(e9,wve,null),e(kd,Rfr),e(kd,Ave),e(Ave,Pfr),b(f,UXe,u),b(f,zo,u),M(o9,zo,null),e(zo,Bfr),e(zo,Sd),e(Sd,Ifr),e(Sd,aH),e(aH,Nfr),e(Sd,qfr),e(Sd,nH),e(nH,jfr),e(Sd,Dfr),e(zo,Gfr),e(zo,r9),e(r9,Ofr),e(r9,Lve),e(Lve,Vfr),e(r9,Xfr),e(zo,zfr),e(zo,Et),M(t9,Et,null),e(Et,Qfr),e(Et,yve),e(yve,Wfr),e(Et,Hfr),e(Et,Rd),e(Rd,Ufr),e(Rd,xve),e(xve,Jfr),e(Rd,Yfr),e(Rd,sH),e(sH,Kfr),e(Rd,Zfr),e(Et,emr),M(n8,Et,null),e(zo,omr),e(zo,mo),M(a9,mo,null),e(mo,rmr),e(mo,$ve),e($ve,tmr),e(mo,amr),e(mo,Ya),e(Ya,nmr),e(Ya,kve),e(kve,smr),e(Ya,lmr),e(Ya,Sve),e(Sve,imr),e(Ya,dmr),e(Ya,Rve),e(Rve,cmr),e(Ya,fmr),e(mo,mmr),e(mo,ot),e(ot,s8),e(s8,Pve),e(Pve,gmr),e(s8,hmr),e(s8,lH),e(lH,pmr),e(s8,_mr),e(ot,umr),e(ot,l8),e(l8,Bve),e(Bve,bmr),e(l8,vmr),e(l8,iH),e(iH,Fmr),e(l8,Tmr),e(ot,Mmr),e(ot,i8),e(i8,Ive),e(Ive,Emr),e(i8,Cmr),e(i8,dH),e(dH,wmr),e(i8,Amr),e(ot,Lmr),e(ot,d8),e(d8,Nve),e(Nve,ymr),e(d8,xmr),e(d8,cH),e(cH,$mr),e(d8,kmr),e(ot,Smr),e(ot,c8),e(c8,qve),e(qve,Rmr),e(c8,Pmr),e(c8,fH),e(fH,Bmr),e(c8,Imr),e(mo,Nmr),e(mo,f8),e(f8,qmr),e(f8,jve),e(jve,jmr),e(f8,Dmr),e(f8,Dve),e(Dve,Gmr),e(mo,Omr),M(m8,mo,null),b(f,JXe,u),b(f,Pd,u),e(Pd,g8),e(g8,Gve),M(n9,Gve,null),e(Pd,Vmr),e(Pd,Ove),e(Ove,Xmr),b(f,YXe,u),b(f,Qo,u),M(s9,Qo,null),e(Qo,zmr),e(Qo,Bd),e(Bd,Qmr),e(Bd,mH),e(mH,Wmr),e(Bd,Hmr),e(Bd,gH),e(gH,Umr),e(Bd,Jmr),e(Qo,Ymr),e(Qo,l9),e(l9,Kmr),e(l9,Vve),e(Vve,Zmr),e(l9,egr),e(Qo,ogr),e(Qo,Ct),M(i9,Ct,null),e(Ct,rgr),e(Ct,Xve),e(Xve,tgr),e(Ct,agr),e(Ct,Id),e(Id,ngr),e(Id,zve),e(zve,sgr),e(Id,lgr),e(Id,hH),e(hH,igr),e(Id,dgr),e(Ct,cgr),M(h8,Ct,null),e(Qo,fgr),e(Qo,go),M(d9,go,null),e(go,mgr),e(go,Qve),e(Qve,ggr),e(go,hgr),e(go,Ka),e(Ka,pgr),e(Ka,Wve),e(Wve,_gr),e(Ka,ugr),e(Ka,Hve),e(Hve,bgr),e(Ka,vgr),e(Ka,Uve),e(Uve,Fgr),e(Ka,Tgr),e(go,Mgr),e(go,Le),e(Le,p8),e(p8,Jve),e(Jve,Egr),e(p8,Cgr),e(p8,pH),e(pH,wgr),e(p8,Agr),e(Le,Lgr),e(Le,_8),e(_8,Yve),e(Yve,ygr),e(_8,xgr),e(_8,_H),e(_H,$gr),e(_8,kgr),e(Le,Sgr),e(Le,u8),e(u8,Kve),e(Kve,Rgr),e(u8,Pgr),e(u8,uH),e(uH,Bgr),e(u8,Igr),e(Le,Ngr),e(Le,b8),e(b8,Zve),e(Zve,qgr),e(b8,jgr),e(b8,bH),e(bH,Dgr),e(b8,Ggr),e(Le,Ogr),e(Le,v8),e(v8,eFe),e(eFe,Vgr),e(v8,Xgr),e(v8,vH),e(vH,zgr),e(v8,Qgr),e(Le,Wgr),e(Le,F8),e(F8,oFe),e(oFe,Hgr),e(F8,Ugr),e(F8,FH),e(FH,Jgr),e(F8,Ygr),e(Le,Kgr),e(Le,T8),e(T8,rFe),e(rFe,Zgr),e(T8,ehr),e(T8,TH),e(TH,ohr),e(T8,rhr),e(Le,thr),e(Le,M8),e(M8,tFe),e(tFe,ahr),e(M8,nhr),e(M8,MH),e(MH,shr),e(M8,lhr),e(Le,ihr),e(Le,E8),e(E8,aFe),e(aFe,dhr),e(E8,chr),e(E8,EH),e(EH,fhr),e(E8,mhr),e(Le,ghr),e(Le,C8),e(C8,nFe),e(nFe,hhr),e(C8,phr),e(C8,CH),e(CH,_hr),e(C8,uhr),e(go,bhr),e(go,w8),e(w8,vhr),e(w8,sFe),e(sFe,Fhr),e(w8,Thr),e(w8,lFe),e(lFe,Mhr),e(go,Ehr),M(A8,go,null),b(f,KXe,u),b(f,Nd,u),e(Nd,L8),e(L8,iFe),M(c9,iFe,null),e(Nd,Chr),e(Nd,dFe),e(dFe,whr),b(f,ZXe,u),b(f,Wo,u),M(f9,Wo,null),e(Wo,Ahr),e(Wo,qd),e(qd,Lhr),e(qd,wH),e(wH,yhr),e(qd,xhr),e(qd,AH),e(AH,$hr),e(qd,khr),e(Wo,Shr),e(Wo,m9),e(m9,Rhr),e(m9,cFe),e(cFe,Phr),e(m9,Bhr),e(Wo,Ihr),e(Wo,wt),M(g9,wt,null),e(wt,Nhr),e(wt,fFe),e(fFe,qhr),e(wt,jhr),e(wt,jd),e(jd,Dhr),e(jd,mFe),e(mFe,Ghr),e(jd,Ohr),e(jd,LH),e(LH,Vhr),e(jd,Xhr),e(wt,zhr),M(y8,wt,null),e(Wo,Qhr),e(Wo,ho),M(h9,ho,null),e(ho,Whr),e(ho,gFe),e(gFe,Hhr),e(ho,Uhr),e(ho,Za),e(Za,Jhr),e(Za,hFe),e(hFe,Yhr),e(Za,Khr),e(Za,pFe),e(pFe,Zhr),e(Za,epr),e(Za,_Fe),e(_Fe,opr),e(Za,rpr),e(ho,tpr),e(ho,p9),e(p9,x8),e(x8,uFe),e(uFe,apr),e(x8,npr),e(x8,yH),e(yH,spr),e(x8,lpr),e(p9,ipr),e(p9,$8),e($8,bFe),e(bFe,dpr),e($8,cpr),e($8,xH),e(xH,fpr),e($8,mpr),e(ho,gpr),e(ho,k8),e(k8,hpr),e(k8,vFe),e(vFe,ppr),e(k8,_pr),e(k8,FFe),e(FFe,upr),e(ho,bpr),M(S8,ho,null),b(f,eze,u),b(f,Dd,u),e(Dd,R8),e(R8,TFe),M(_9,TFe,null),e(Dd,vpr),e(Dd,MFe),e(MFe,Fpr),b(f,oze,u),b(f,Ho,u),M(u9,Ho,null),e(Ho,Tpr),e(Ho,Gd),e(Gd,Mpr),e(Gd,$H),e($H,Epr),e(Gd,Cpr),e(Gd,kH),e(kH,wpr),e(Gd,Apr),e(Ho,Lpr),e(Ho,b9),e(b9,ypr),e(b9,EFe),e(EFe,xpr),e(b9,$pr),e(Ho,kpr),e(Ho,At),M(v9,At,null),e(At,Spr),e(At,CFe),e(CFe,Rpr),e(At,Ppr),e(At,Od),e(Od,Bpr),e(Od,wFe),e(wFe,Ipr),e(Od,Npr),e(Od,SH),e(SH,qpr),e(Od,jpr),e(At,Dpr),M(P8,At,null),e(Ho,Gpr),e(Ho,po),M(F9,po,null),e(po,Opr),e(po,AFe),e(AFe,Vpr),e(po,Xpr),e(po,en),e(en,zpr),e(en,LFe),e(LFe,Qpr),e(en,Wpr),e(en,yFe),e(yFe,Hpr),e(en,Upr),e(en,xFe),e(xFe,Jpr),e(en,Ypr),e(po,Kpr),e(po,rt),e(rt,B8),e(B8,$Fe),e($Fe,Zpr),e(B8,e_r),e(B8,RH),e(RH,o_r),e(B8,r_r),e(rt,t_r),e(rt,I8),e(I8,kFe),e(kFe,a_r),e(I8,n_r),e(I8,PH),e(PH,s_r),e(I8,l_r),e(rt,i_r),e(rt,N8),e(N8,SFe),e(SFe,d_r),e(N8,c_r),e(N8,BH),e(BH,f_r),e(N8,m_r),e(rt,g_r),e(rt,q8),e(q8,RFe),e(RFe,h_r),e(q8,p_r),e(q8,IH),e(IH,__r),e(q8,u_r),e(rt,b_r),e(rt,j8),e(j8,PFe),e(PFe,v_r),e(j8,F_r),e(j8,NH),e(NH,T_r),e(j8,M_r),e(po,E_r),e(po,D8),e(D8,C_r),e(D8,BFe),e(BFe,w_r),e(D8,A_r),e(D8,IFe),e(IFe,L_r),e(po,y_r),M(G8,po,null),b(f,rze,u),b(f,Vd,u),e(Vd,O8),e(O8,NFe),M(T9,NFe,null),e(Vd,x_r),e(Vd,qFe),e(qFe,$_r),b(f,tze,u),b(f,Uo,u),M(M9,Uo,null),e(Uo,k_r),e(Uo,Xd),e(Xd,S_r),e(Xd,qH),e(qH,R_r),e(Xd,P_r),e(Xd,jH),e(jH,B_r),e(Xd,I_r),e(Uo,N_r),e(Uo,E9),e(E9,q_r),e(E9,jFe),e(jFe,j_r),e(E9,D_r),e(Uo,G_r),e(Uo,Lt),M(C9,Lt,null),e(Lt,O_r),e(Lt,DFe),e(DFe,V_r),e(Lt,X_r),e(Lt,zd),e(zd,z_r),e(zd,GFe),e(GFe,Q_r),e(zd,W_r),e(zd,DH),e(DH,H_r),e(zd,U_r),e(Lt,J_r),M(V8,Lt,null),e(Uo,Y_r),e(Uo,_o),M(w9,_o,null),e(_o,K_r),e(_o,OFe),e(OFe,Z_r),e(_o,eur),e(_o,on),e(on,our),e(on,VFe),e(VFe,rur),e(on,tur),e(on,XFe),e(XFe,aur),e(on,nur),e(on,zFe),e(zFe,sur),e(on,lur),e(_o,iur),e(_o,Qd),e(Qd,X8),e(X8,QFe),e(QFe,dur),e(X8,cur),e(X8,GH),e(GH,fur),e(X8,mur),e(Qd,gur),e(Qd,z8),e(z8,WFe),e(WFe,hur),e(z8,pur),e(z8,OH),e(OH,_ur),e(z8,uur),e(Qd,bur),e(Qd,Q8),e(Q8,HFe),e(HFe,vur),e(Q8,Fur),e(Q8,VH),e(VH,Tur),e(Q8,Mur),e(_o,Eur),e(_o,W8),e(W8,Cur),e(W8,UFe),e(UFe,wur),e(W8,Aur),e(W8,JFe),e(JFe,Lur),e(_o,yur),M(H8,_o,null),b(f,aze,u),b(f,Wd,u),e(Wd,U8),e(U8,YFe),M(A9,YFe,null),e(Wd,xur),e(Wd,KFe),e(KFe,$ur),b(f,nze,u),b(f,Jo,u),M(L9,Jo,null),e(Jo,kur),e(Jo,Hd),e(Hd,Sur),e(Hd,XH),e(XH,Rur),e(Hd,Pur),e(Hd,zH),e(zH,Bur),e(Hd,Iur),e(Jo,Nur),e(Jo,y9),e(y9,qur),e(y9,ZFe),e(ZFe,jur),e(y9,Dur),e(Jo,Gur),e(Jo,yt),M(x9,yt,null),e(yt,Our),e(yt,eTe),e(eTe,Vur),e(yt,Xur),e(yt,Ud),e(Ud,zur),e(Ud,oTe),e(oTe,Qur),e(Ud,Wur),e(Ud,QH),e(QH,Hur),e(Ud,Uur),e(yt,Jur),M(J8,yt,null),e(Jo,Yur),e(Jo,uo),M($9,uo,null),e(uo,Kur),e(uo,rTe),e(rTe,Zur),e(uo,e1r),e(uo,rn),e(rn,o1r),e(rn,tTe),e(tTe,r1r),e(rn,t1r),e(rn,aTe),e(aTe,a1r),e(rn,n1r),e(rn,nTe),e(nTe,s1r),e(rn,l1r),e(uo,i1r),e(uo,Jd),e(Jd,Y8),e(Y8,sTe),e(sTe,d1r),e(Y8,c1r),e(Y8,WH),e(WH,f1r),e(Y8,m1r),e(Jd,g1r),e(Jd,K8),e(K8,lTe),e(lTe,h1r),e(K8,p1r),e(K8,HH),e(HH,_1r),e(K8,u1r),e(Jd,b1r),e(Jd,Z8),e(Z8,iTe),e(iTe,v1r),e(Z8,F1r),e(Z8,UH),e(UH,T1r),e(Z8,M1r),e(uo,E1r),e(uo,eM),e(eM,C1r),e(eM,dTe),e(dTe,w1r),e(eM,A1r),e(eM,cTe),e(cTe,L1r),e(uo,y1r),M(oM,uo,null),b(f,sze,u),b(f,Yd,u),e(Yd,rM),e(rM,fTe),M(k9,fTe,null),e(Yd,x1r),e(Yd,mTe),e(mTe,$1r),b(f,lze,u),b(f,Yo,u),M(S9,Yo,null),e(Yo,k1r),e(Yo,Kd),e(Kd,S1r),e(Kd,JH),e(JH,R1r),e(Kd,P1r),e(Kd,YH),e(YH,B1r),e(Kd,I1r),e(Yo,N1r),e(Yo,R9),e(R9,q1r),e(R9,gTe),e(gTe,j1r),e(R9,D1r),e(Yo,G1r),e(Yo,xt),M(P9,xt,null),e(xt,O1r),e(xt,hTe),e(hTe,V1r),e(xt,X1r),e(xt,Zd),e(Zd,z1r),e(Zd,pTe),e(pTe,Q1r),e(Zd,W1r),e(Zd,KH),e(KH,H1r),e(Zd,U1r),e(xt,J1r),M(tM,xt,null),e(Yo,Y1r),e(Yo,bo),M(B9,bo,null),e(bo,K1r),e(bo,_Te),e(_Te,Z1r),e(bo,e2r),e(bo,tn),e(tn,o2r),e(tn,uTe),e(uTe,r2r),e(tn,t2r),e(tn,bTe),e(bTe,a2r),e(tn,n2r),e(tn,vTe),e(vTe,s2r),e(tn,l2r),e(bo,i2r),e(bo,FTe),e(FTe,aM),e(aM,TTe),e(TTe,d2r),e(aM,c2r),e(aM,ZH),e(ZH,f2r),e(aM,m2r),e(bo,g2r),e(bo,nM),e(nM,h2r),e(nM,MTe),e(MTe,p2r),e(nM,_2r),e(nM,ETe),e(ETe,u2r),e(bo,b2r),M(sM,bo,null),b(f,ize,u),b(f,ec,u),e(ec,lM),e(lM,CTe),M(I9,CTe,null),e(ec,v2r),e(ec,wTe),e(wTe,F2r),b(f,dze,u),b(f,Ko,u),M(N9,Ko,null),e(Ko,T2r),e(Ko,oc),e(oc,M2r),e(oc,eU),e(eU,E2r),e(oc,C2r),e(oc,oU),e(oU,w2r),e(oc,A2r),e(Ko,L2r),e(Ko,q9),e(q9,y2r),e(q9,ATe),e(ATe,x2r),e(q9,$2r),e(Ko,k2r),e(Ko,$t),M(j9,$t,null),e($t,S2r),e($t,LTe),e(LTe,R2r),e($t,P2r),e($t,rc),e(rc,B2r),e(rc,yTe),e(yTe,I2r),e(rc,N2r),e(rc,rU),e(rU,q2r),e(rc,j2r),e($t,D2r),M(iM,$t,null),e(Ko,G2r),e(Ko,vo),M(D9,vo,null),e(vo,O2r),e(vo,xTe),e(xTe,V2r),e(vo,X2r),e(vo,an),e(an,z2r),e(an,$Te),e($Te,Q2r),e(an,W2r),e(an,kTe),e(kTe,H2r),e(an,U2r),e(an,STe),e(STe,J2r),e(an,Y2r),e(vo,K2r),e(vo,tt),e(tt,dM),e(dM,RTe),e(RTe,Z2r),e(dM,ebr),e(dM,tU),e(tU,obr),e(dM,rbr),e(tt,tbr),e(tt,cM),e(cM,PTe),e(PTe,abr),e(cM,nbr),e(cM,aU),e(aU,sbr),e(cM,lbr),e(tt,ibr),e(tt,fM),e(fM,BTe),e(BTe,dbr),e(fM,cbr),e(fM,nU),e(nU,fbr),e(fM,mbr),e(tt,gbr),e(tt,mM),e(mM,ITe),e(ITe,hbr),e(mM,pbr),e(mM,sU),e(sU,_br),e(mM,ubr),e(tt,bbr),e(tt,gM),e(gM,NTe),e(NTe,vbr),e(gM,Fbr),e(gM,lU),e(lU,Tbr),e(gM,Mbr),e(vo,Ebr),e(vo,hM),e(hM,Cbr),e(hM,qTe),e(qTe,wbr),e(hM,Abr),e(hM,jTe),e(jTe,Lbr),e(vo,ybr),M(pM,vo,null),b(f,cze,u),b(f,tc,u),e(tc,_M),e(_M,DTe),M(G9,DTe,null),e(tc,xbr),e(tc,GTe),e(GTe,$br),b(f,fze,u),b(f,Zo,u),M(O9,Zo,null),e(Zo,kbr),e(Zo,ac),e(ac,Sbr),e(ac,iU),e(iU,Rbr),e(ac,Pbr),e(ac,dU),e(dU,Bbr),e(ac,Ibr),e(Zo,Nbr),e(Zo,V9),e(V9,qbr),e(V9,OTe),e(OTe,jbr),e(V9,Dbr),e(Zo,Gbr),e(Zo,kt),M(X9,kt,null),e(kt,Obr),e(kt,VTe),e(VTe,Vbr),e(kt,Xbr),e(kt,nc),e(nc,zbr),e(nc,XTe),e(XTe,Qbr),e(nc,Wbr),e(nc,cU),e(cU,Hbr),e(nc,Ubr),e(kt,Jbr),M(uM,kt,null),e(Zo,Ybr),e(Zo,Fo),M(z9,Fo,null),e(Fo,Kbr),e(Fo,zTe),e(zTe,Zbr),e(Fo,evr),e(Fo,nn),e(nn,ovr),e(nn,QTe),e(QTe,rvr),e(nn,tvr),e(nn,WTe),e(WTe,avr),e(nn,nvr),e(nn,HTe),e(HTe,svr),e(nn,lvr),e(Fo,ivr),e(Fo,UTe),e(UTe,bM),e(bM,JTe),e(JTe,dvr),e(bM,cvr),e(bM,fU),e(fU,fvr),e(bM,mvr),e(Fo,gvr),e(Fo,vM),e(vM,hvr),e(vM,YTe),e(YTe,pvr),e(vM,_vr),e(vM,KTe),e(KTe,uvr),e(Fo,bvr),M(FM,Fo,null),b(f,mze,u),b(f,sc,u),e(sc,TM),e(TM,ZTe),M(Q9,ZTe,null),e(sc,vvr),e(sc,e7e),e(e7e,Fvr),b(f,gze,u),b(f,er,u),M(W9,er,null),e(er,Tvr),e(er,lc),e(lc,Mvr),e(lc,mU),e(mU,Evr),e(lc,Cvr),e(lc,gU),e(gU,wvr),e(lc,Avr),e(er,Lvr),e(er,H9),e(H9,yvr),e(H9,o7e),e(o7e,xvr),e(H9,$vr),e(er,kvr),e(er,St),M(U9,St,null),e(St,Svr),e(St,r7e),e(r7e,Rvr),e(St,Pvr),e(St,ic),e(ic,Bvr),e(ic,t7e),e(t7e,Ivr),e(ic,Nvr),e(ic,hU),e(hU,qvr),e(ic,jvr),e(St,Dvr),M(MM,St,null),e(er,Gvr),e(er,xr),M(J9,xr,null),e(xr,Ovr),e(xr,a7e),e(a7e,Vvr),e(xr,Xvr),e(xr,sn),e(sn,zvr),e(sn,n7e),e(n7e,Qvr),e(sn,Wvr),e(sn,s7e),e(s7e,Hvr),e(sn,Uvr),e(sn,l7e),e(l7e,Jvr),e(sn,Yvr),e(xr,Kvr),e(xr,q),e(q,EM),e(EM,i7e),e(i7e,Zvr),e(EM,eFr),e(EM,pU),e(pU,oFr),e(EM,rFr),e(q,tFr),e(q,CM),e(CM,d7e),e(d7e,aFr),e(CM,nFr),e(CM,_U),e(_U,sFr),e(CM,lFr),e(q,iFr),e(q,wM),e(wM,c7e),e(c7e,dFr),e(wM,cFr),e(wM,uU),e(uU,fFr),e(wM,mFr),e(q,gFr),e(q,AM),e(AM,f7e),e(f7e,hFr),e(AM,pFr),e(AM,bU),e(bU,_Fr),e(AM,uFr),e(q,bFr),e(q,LM),e(LM,m7e),e(m7e,vFr),e(LM,FFr),e(LM,vU),e(vU,TFr),e(LM,MFr),e(q,EFr),e(q,yM),e(yM,g7e),e(g7e,CFr),e(yM,wFr),e(yM,FU),e(FU,AFr),e(yM,LFr),e(q,yFr),e(q,xM),e(xM,h7e),e(h7e,xFr),e(xM,$Fr),e(xM,TU),e(TU,kFr),e(xM,SFr),e(q,RFr),e(q,$M),e($M,p7e),e(p7e,PFr),e($M,BFr),e($M,MU),e(MU,IFr),e($M,NFr),e(q,qFr),e(q,kM),e(kM,_7e),e(_7e,jFr),e(kM,DFr),e(kM,EU),e(EU,GFr),e(kM,OFr),e(q,VFr),e(q,SM),e(SM,u7e),e(u7e,XFr),e(SM,zFr),e(SM,CU),e(CU,QFr),e(SM,WFr),e(q,HFr),e(q,RM),e(RM,b7e),e(b7e,UFr),e(RM,JFr),e(RM,wU),e(wU,YFr),e(RM,KFr),e(q,ZFr),e(q,PM),e(PM,v7e),e(v7e,eTr),e(PM,oTr),e(PM,AU),e(AU,rTr),e(PM,tTr),e(q,aTr),e(q,BM),e(BM,F7e),e(F7e,nTr),e(BM,sTr),e(BM,LU),e(LU,lTr),e(BM,iTr),e(q,dTr),e(q,IM),e(IM,T7e),e(T7e,cTr),e(IM,fTr),e(IM,yU),e(yU,mTr),e(IM,gTr),e(q,hTr),e(q,NM),e(NM,M7e),e(M7e,pTr),e(NM,_Tr),e(NM,xU),e(xU,uTr),e(NM,bTr),e(q,vTr),e(q,qM),e(qM,E7e),e(E7e,FTr),e(qM,TTr),e(qM,$U),e($U,MTr),e(qM,ETr),e(q,CTr),e(q,jM),e(jM,C7e),e(C7e,wTr),e(jM,ATr),e(jM,kU),e(kU,LTr),e(jM,yTr),e(q,xTr),e(q,Js),e(Js,w7e),e(w7e,$Tr),e(Js,kTr),e(Js,SU),e(SU,STr),e(Js,RTr),e(Js,RU),e(RU,PTr),e(Js,BTr),e(q,ITr),e(q,DM),e(DM,A7e),e(A7e,NTr),e(DM,qTr),e(DM,PU),e(PU,jTr),e(DM,DTr),e(q,GTr),e(q,GM),e(GM,L7e),e(L7e,OTr),e(GM,VTr),e(GM,BU),e(BU,XTr),e(GM,zTr),e(q,QTr),e(q,OM),e(OM,y7e),e(y7e,WTr),e(OM,HTr),e(OM,IU),e(IU,UTr),e(OM,JTr),e(q,YTr),e(q,VM),e(VM,x7e),e(x7e,KTr),e(VM,ZTr),e(VM,NU),e(NU,e7r),e(VM,o7r),e(q,r7r),e(q,XM),e(XM,$7e),e($7e,t7r),e(XM,a7r),e(XM,qU),e(qU,n7r),e(XM,s7r),e(q,l7r),e(q,zM),e(zM,k7e),e(k7e,i7r),e(zM,d7r),e(zM,jU),e(jU,c7r),e(zM,f7r),e(q,m7r),e(q,QM),e(QM,S7e),e(S7e,g7r),e(QM,h7r),e(QM,DU),e(DU,p7r),e(QM,_7r),e(q,u7r),e(q,WM),e(WM,R7e),e(R7e,b7r),e(WM,v7r),e(WM,GU),e(GU,F7r),e(WM,T7r),e(q,M7r),e(q,HM),e(HM,P7e),e(P7e,E7r),e(HM,C7r),e(HM,OU),e(OU,w7r),e(HM,A7r),e(q,L7r),e(q,UM),e(UM,B7e),e(B7e,y7r),e(UM,x7r),e(UM,VU),e(VU,$7r),e(UM,k7r),e(q,S7r),e(q,JM),e(JM,I7e),e(I7e,R7r),e(JM,P7r),e(JM,XU),e(XU,B7r),e(JM,I7r),e(q,N7r),e(q,YM),e(YM,N7e),e(N7e,q7r),e(YM,j7r),e(YM,zU),e(zU,D7r),e(YM,G7r),e(q,O7r),e(q,KM),e(KM,q7e),e(q7e,V7r),e(KM,X7r),e(KM,QU),e(QU,z7r),e(KM,Q7r),e(q,W7r),e(q,ZM),e(ZM,j7e),e(j7e,H7r),e(ZM,U7r),e(ZM,WU),e(WU,J7r),e(ZM,Y7r),e(q,K7r),e(q,e4),e(e4,D7e),e(D7e,Z7r),e(e4,e8r),e(e4,HU),e(HU,o8r),e(e4,r8r),e(q,t8r),e(q,o4),e(o4,G7e),e(G7e,a8r),e(o4,n8r),e(o4,UU),e(UU,s8r),e(o4,l8r),e(q,i8r),e(q,r4),e(r4,O7e),e(O7e,d8r),e(r4,c8r),e(r4,JU),e(JU,f8r),e(r4,m8r),e(q,g8r),e(q,t4),e(t4,V7e),e(V7e,h8r),e(t4,p8r),e(t4,YU),e(YU,_8r),e(t4,u8r),e(q,b8r),e(q,a4),e(a4,X7e),e(X7e,v8r),e(a4,F8r),e(a4,KU),e(KU,T8r),e(a4,M8r),e(q,E8r),e(q,n4),e(n4,z7e),e(z7e,C8r),e(n4,w8r),e(n4,ZU),e(ZU,A8r),e(n4,L8r),e(q,y8r),e(q,s4),e(s4,Q7e),e(Q7e,x8r),e(s4,$8r),e(s4,eJ),e(eJ,k8r),e(s4,S8r),e(q,R8r),e(q,l4),e(l4,W7e),e(W7e,P8r),e(l4,B8r),e(l4,oJ),e(oJ,I8r),e(l4,N8r),e(q,q8r),e(q,i4),e(i4,H7e),e(H7e,j8r),e(i4,D8r),e(i4,rJ),e(rJ,G8r),e(i4,O8r),e(q,V8r),e(q,d4),e(d4,U7e),e(U7e,X8r),e(d4,z8r),e(d4,tJ),e(tJ,Q8r),e(d4,W8r),e(q,H8r),e(q,c4),e(c4,J7e),e(J7e,U8r),e(c4,J8r),e(c4,aJ),e(aJ,Y8r),e(c4,K8r),e(q,Z8r),e(q,f4),e(f4,Y7e),e(Y7e,eMr),e(f4,oMr),e(f4,nJ),e(nJ,rMr),e(f4,tMr),e(q,aMr),e(q,m4),e(m4,K7e),e(K7e,nMr),e(m4,sMr),e(m4,sJ),e(sJ,lMr),e(m4,iMr),e(q,dMr),e(q,g4),e(g4,Z7e),e(Z7e,cMr),e(g4,fMr),e(g4,lJ),e(lJ,mMr),e(g4,gMr),e(q,hMr),e(q,h4),e(h4,e8e),e(e8e,pMr),e(h4,_Mr),e(h4,iJ),e(iJ,uMr),e(h4,bMr),e(q,vMr),e(q,p4),e(p4,o8e),e(o8e,FMr),e(p4,TMr),e(p4,dJ),e(dJ,MMr),e(p4,EMr),e(q,CMr),e(q,_4),e(_4,r8e),e(r8e,wMr),e(_4,AMr),e(_4,cJ),e(cJ,LMr),e(_4,yMr),e(xr,xMr),M(u4,xr,null),b(f,hze,u),b(f,dc,u),e(dc,b4),e(b4,t8e),M(Y9,t8e,null),e(dc,$Mr),e(dc,a8e),e(a8e,kMr),b(f,pze,u),b(f,or,u),M(K9,or,null),e(or,SMr),e(or,cc),e(cc,RMr),e(cc,fJ),e(fJ,PMr),e(cc,BMr),e(cc,mJ),e(mJ,IMr),e(cc,NMr),e(or,qMr),e(or,Z9),e(Z9,jMr),e(Z9,n8e),e(n8e,DMr),e(Z9,GMr),e(or,OMr),e(or,Rt),M(ex,Rt,null),e(Rt,VMr),e(Rt,s8e),e(s8e,XMr),e(Rt,zMr),e(Rt,fc),e(fc,QMr),e(fc,l8e),e(l8e,WMr),e(fc,HMr),e(fc,gJ),e(gJ,UMr),e(fc,JMr),e(Rt,YMr),M(v4,Rt,null),e(or,KMr),e(or,$r),M(ox,$r,null),e($r,ZMr),e($r,i8e),e(i8e,e4r),e($r,o4r),e($r,ln),e(ln,r4r),e(ln,d8e),e(d8e,t4r),e(ln,a4r),e(ln,c8e),e(c8e,n4r),e(ln,s4r),e(ln,f8e),e(f8e,l4r),e(ln,i4r),e($r,d4r),e($r,se),e(se,F4),e(F4,m8e),e(m8e,c4r),e(F4,f4r),e(F4,hJ),e(hJ,m4r),e(F4,g4r),e(se,h4r),e(se,T4),e(T4,g8e),e(g8e,p4r),e(T4,_4r),e(T4,pJ),e(pJ,u4r),e(T4,b4r),e(se,v4r),e(se,M4),e(M4,h8e),e(h8e,F4r),e(M4,T4r),e(M4,_J),e(_J,M4r),e(M4,E4r),e(se,C4r),e(se,E4),e(E4,p8e),e(p8e,w4r),e(E4,A4r),e(E4,uJ),e(uJ,L4r),e(E4,y4r),e(se,x4r),e(se,C4),e(C4,_8e),e(_8e,$4r),e(C4,k4r),e(C4,bJ),e(bJ,S4r),e(C4,R4r),e(se,P4r),e(se,w4),e(w4,u8e),e(u8e,B4r),e(w4,I4r),e(w4,vJ),e(vJ,N4r),e(w4,q4r),e(se,j4r),e(se,A4),e(A4,b8e),e(b8e,D4r),e(A4,G4r),e(A4,FJ),e(FJ,O4r),e(A4,V4r),e(se,X4r),e(se,L4),e(L4,v8e),e(v8e,z4r),e(L4,Q4r),e(L4,TJ),e(TJ,W4r),e(L4,H4r),e(se,U4r),e(se,y4),e(y4,F8e),e(F8e,J4r),e(y4,Y4r),e(y4,MJ),e(MJ,K4r),e(y4,Z4r),e(se,eEr),e(se,x4),e(x4,T8e),e(T8e,oEr),e(x4,rEr),e(x4,EJ),e(EJ,tEr),e(x4,aEr),e(se,nEr),e(se,$4),e($4,M8e),e(M8e,sEr),e($4,lEr),e($4,CJ),e(CJ,iEr),e($4,dEr),e(se,cEr),e(se,k4),e(k4,E8e),e(E8e,fEr),e(k4,mEr),e(k4,wJ),e(wJ,gEr),e(k4,hEr),e(se,pEr),e(se,S4),e(S4,C8e),e(C8e,_Er),e(S4,uEr),e(S4,AJ),e(AJ,bEr),e(S4,vEr),e(se,FEr),e(se,R4),e(R4,w8e),e(w8e,TEr),e(R4,MEr),e(R4,LJ),e(LJ,EEr),e(R4,CEr),e(se,wEr),e(se,P4),e(P4,A8e),e(A8e,AEr),e(P4,LEr),e(P4,yJ),e(yJ,yEr),e(P4,xEr),e(se,$Er),e(se,B4),e(B4,L8e),e(L8e,kEr),e(B4,SEr),e(B4,xJ),e(xJ,REr),e(B4,PEr),e(se,BEr),e(se,I4),e(I4,y8e),e(y8e,IEr),e(I4,NEr),e(I4,$J),e($J,qEr),e(I4,jEr),e(se,DEr),e(se,N4),e(N4,x8e),e(x8e,GEr),e(N4,OEr),e(N4,kJ),e(kJ,VEr),e(N4,XEr),e(se,zEr),e(se,q4),e(q4,$8e),e($8e,QEr),e(q4,WEr),e(q4,SJ),e(SJ,HEr),e(q4,UEr),e(se,JEr),e(se,j4),e(j4,k8e),e(k8e,YEr),e(j4,KEr),e(j4,RJ),e(RJ,ZEr),e(j4,eCr),e(se,oCr),e(se,D4),e(D4,S8e),e(S8e,rCr),e(D4,tCr),e(D4,PJ),e(PJ,aCr),e(D4,nCr),e(se,sCr),e(se,G4),e(G4,R8e),e(R8e,lCr),e(G4,iCr),e(G4,BJ),e(BJ,dCr),e(G4,cCr),e(se,fCr),e(se,O4),e(O4,P8e),e(P8e,mCr),e(O4,gCr),e(O4,IJ),e(IJ,hCr),e(O4,pCr),e($r,_Cr),M(V4,$r,null),b(f,_ze,u),b(f,mc,u),e(mc,X4),e(X4,B8e),M(rx,B8e,null),e(mc,uCr),e(mc,I8e),e(I8e,bCr),b(f,uze,u),b(f,rr,u),M(tx,rr,null),e(rr,vCr),e(rr,gc),e(gc,FCr),e(gc,NJ),e(NJ,TCr),e(gc,MCr),e(gc,qJ),e(qJ,ECr),e(gc,CCr),e(rr,wCr),e(rr,ax),e(ax,ACr),e(ax,N8e),e(N8e,LCr),e(ax,yCr),e(rr,xCr),e(rr,Pt),M(nx,Pt,null),e(Pt,$Cr),e(Pt,q8e),e(q8e,kCr),e(Pt,SCr),e(Pt,hc),e(hc,RCr),e(hc,j8e),e(j8e,PCr),e(hc,BCr),e(hc,jJ),e(jJ,ICr),e(hc,NCr),e(Pt,qCr),M(z4,Pt,null),e(rr,jCr),e(rr,kr),M(sx,kr,null),e(kr,DCr),e(kr,D8e),e(D8e,GCr),e(kr,OCr),e(kr,dn),e(dn,VCr),e(dn,G8e),e(G8e,XCr),e(dn,zCr),e(dn,O8e),e(O8e,QCr),e(dn,WCr),e(dn,V8e),e(V8e,HCr),e(dn,UCr),e(kr,JCr),e(kr,Me),e(Me,Q4),e(Q4,X8e),e(X8e,YCr),e(Q4,KCr),e(Q4,DJ),e(DJ,ZCr),e(Q4,e3r),e(Me,o3r),e(Me,W4),e(W4,z8e),e(z8e,r3r),e(W4,t3r),e(W4,GJ),e(GJ,a3r),e(W4,n3r),e(Me,s3r),e(Me,H4),e(H4,Q8e),e(Q8e,l3r),e(H4,i3r),e(H4,OJ),e(OJ,d3r),e(H4,c3r),e(Me,f3r),e(Me,U4),e(U4,W8e),e(W8e,m3r),e(U4,g3r),e(U4,VJ),e(VJ,h3r),e(U4,p3r),e(Me,_3r),e(Me,J4),e(J4,H8e),e(H8e,u3r),e(J4,b3r),e(J4,XJ),e(XJ,v3r),e(J4,F3r),e(Me,T3r),e(Me,Y4),e(Y4,U8e),e(U8e,M3r),e(Y4,E3r),e(Y4,zJ),e(zJ,C3r),e(Y4,w3r),e(Me,A3r),e(Me,K4),e(K4,J8e),e(J8e,L3r),e(K4,y3r),e(K4,QJ),e(QJ,x3r),e(K4,$3r),e(Me,k3r),e(Me,Z4),e(Z4,Y8e),e(Y8e,S3r),e(Z4,R3r),e(Z4,WJ),e(WJ,P3r),e(Z4,B3r),e(Me,I3r),e(Me,eE),e(eE,K8e),e(K8e,N3r),e(eE,q3r),e(eE,HJ),e(HJ,j3r),e(eE,D3r),e(Me,G3r),e(Me,oE),e(oE,Z8e),e(Z8e,O3r),e(oE,V3r),e(oE,UJ),e(UJ,X3r),e(oE,z3r),e(Me,Q3r),e(Me,rE),e(rE,eMe),e(eMe,W3r),e(rE,H3r),e(rE,JJ),e(JJ,U3r),e(rE,J3r),e(Me,Y3r),e(Me,tE),e(tE,oMe),e(oMe,K3r),e(tE,Z3r),e(tE,YJ),e(YJ,e5r),e(tE,o5r),e(Me,r5r),e(Me,aE),e(aE,rMe),e(rMe,t5r),e(aE,a5r),e(aE,KJ),e(KJ,n5r),e(aE,s5r),e(kr,l5r),M(nE,kr,null),b(f,bze,u),b(f,pc,u),e(pc,sE),e(sE,tMe),M(lx,tMe,null),e(pc,i5r),e(pc,aMe),e(aMe,d5r),b(f,vze,u),b(f,tr,u),M(ix,tr,null),e(tr,c5r),e(tr,_c),e(_c,f5r),e(_c,ZJ),e(ZJ,m5r),e(_c,g5r),e(_c,eY),e(eY,h5r),e(_c,p5r),e(tr,_5r),e(tr,dx),e(dx,u5r),e(dx,nMe),e(nMe,b5r),e(dx,v5r),e(tr,F5r),e(tr,Bt),M(cx,Bt,null),e(Bt,T5r),e(Bt,sMe),e(sMe,M5r),e(Bt,E5r),e(Bt,uc),e(uc,C5r),e(uc,lMe),e(lMe,w5r),e(uc,A5r),e(uc,oY),e(oY,L5r),e(uc,y5r),e(Bt,x5r),M(lE,Bt,null),e(tr,$5r),e(tr,Sr),M(fx,Sr,null),e(Sr,k5r),e(Sr,iMe),e(iMe,S5r),e(Sr,R5r),e(Sr,cn),e(cn,P5r),e(cn,dMe),e(dMe,B5r),e(cn,I5r),e(cn,cMe),e(cMe,N5r),e(cn,q5r),e(cn,fMe),e(fMe,j5r),e(cn,D5r),e(Sr,G5r),e(Sr,ar),e(ar,iE),e(iE,mMe),e(mMe,O5r),e(iE,V5r),e(iE,rY),e(rY,X5r),e(iE,z5r),e(ar,Q5r),e(ar,dE),e(dE,gMe),e(gMe,W5r),e(dE,H5r),e(dE,tY),e(tY,U5r),e(dE,J5r),e(ar,Y5r),e(ar,cE),e(cE,hMe),e(hMe,K5r),e(cE,Z5r),e(cE,aY),e(aY,e0r),e(cE,o0r),e(ar,r0r),e(ar,fE),e(fE,pMe),e(pMe,t0r),e(fE,a0r),e(fE,nY),e(nY,n0r),e(fE,s0r),e(ar,l0r),e(ar,mE),e(mE,_Me),e(_Me,i0r),e(mE,d0r),e(mE,sY),e(sY,c0r),e(mE,f0r),e(ar,m0r),e(ar,gE),e(gE,uMe),e(uMe,g0r),e(gE,h0r),e(gE,lY),e(lY,p0r),e(gE,_0r),e(Sr,u0r),M(hE,Sr,null),b(f,Fze,u),b(f,bc,u),e(bc,pE),e(pE,bMe),M(mx,bMe,null),e(bc,b0r),e(bc,vMe),e(vMe,v0r),b(f,Tze,u),b(f,nr,u),M(gx,nr,null),e(nr,F0r),e(nr,vc),e(vc,T0r),e(vc,iY),e(iY,M0r),e(vc,E0r),e(vc,dY),e(dY,C0r),e(vc,w0r),e(nr,A0r),e(nr,hx),e(hx,L0r),e(hx,FMe),e(FMe,y0r),e(hx,x0r),e(nr,$0r),e(nr,It),M(px,It,null),e(It,k0r),e(It,TMe),e(TMe,S0r),e(It,R0r),e(It,Fc),e(Fc,P0r),e(Fc,MMe),e(MMe,B0r),e(Fc,I0r),e(Fc,cY),e(cY,N0r),e(Fc,q0r),e(It,j0r),M(_E,It,null),e(nr,D0r),e(nr,Rr),M(_x,Rr,null),e(Rr,G0r),e(Rr,EMe),e(EMe,O0r),e(Rr,V0r),e(Rr,fn),e(fn,X0r),e(fn,CMe),e(CMe,z0r),e(fn,Q0r),e(fn,wMe),e(wMe,W0r),e(fn,H0r),e(fn,AMe),e(AMe,U0r),e(fn,J0r),e(Rr,Y0r),e(Rr,ie),e(ie,uE),e(uE,LMe),e(LMe,K0r),e(uE,Z0r),e(uE,fY),e(fY,ewr),e(uE,owr),e(ie,rwr),e(ie,bE),e(bE,yMe),e(yMe,twr),e(bE,awr),e(bE,mY),e(mY,nwr),e(bE,swr),e(ie,lwr),e(ie,vE),e(vE,xMe),e(xMe,iwr),e(vE,dwr),e(vE,gY),e(gY,cwr),e(vE,fwr),e(ie,mwr),e(ie,FE),e(FE,$Me),e($Me,gwr),e(FE,hwr),e(FE,hY),e(hY,pwr),e(FE,_wr),e(ie,uwr),e(ie,TE),e(TE,kMe),e(kMe,bwr),e(TE,vwr),e(TE,pY),e(pY,Fwr),e(TE,Twr),e(ie,Mwr),e(ie,ME),e(ME,SMe),e(SMe,Ewr),e(ME,Cwr),e(ME,_Y),e(_Y,wwr),e(ME,Awr),e(ie,Lwr),e(ie,EE),e(EE,RMe),e(RMe,ywr),e(EE,xwr),e(EE,uY),e(uY,$wr),e(EE,kwr),e(ie,Swr),e(ie,CE),e(CE,PMe),e(PMe,Rwr),e(CE,Pwr),e(CE,bY),e(bY,Bwr),e(CE,Iwr),e(ie,Nwr),e(ie,wE),e(wE,BMe),e(BMe,qwr),e(wE,jwr),e(wE,vY),e(vY,Dwr),e(wE,Gwr),e(ie,Owr),e(ie,AE),e(AE,IMe),e(IMe,Vwr),e(AE,Xwr),e(AE,FY),e(FY,zwr),e(AE,Qwr),e(ie,Wwr),e(ie,LE),e(LE,NMe),e(NMe,Hwr),e(LE,Uwr),e(LE,TY),e(TY,Jwr),e(LE,Ywr),e(ie,Kwr),e(ie,yE),e(yE,qMe),e(qMe,Zwr),e(yE,eAr),e(yE,MY),e(MY,oAr),e(yE,rAr),e(ie,tAr),e(ie,xE),e(xE,jMe),e(jMe,aAr),e(xE,nAr),e(xE,EY),e(EY,sAr),e(xE,lAr),e(ie,iAr),e(ie,$E),e($E,DMe),e(DMe,dAr),e($E,cAr),e($E,CY),e(CY,fAr),e($E,mAr),e(ie,gAr),e(ie,kE),e(kE,GMe),e(GMe,hAr),e(kE,pAr),e(kE,wY),e(wY,_Ar),e(kE,uAr),e(ie,bAr),e(ie,SE),e(SE,OMe),e(OMe,vAr),e(SE,FAr),e(SE,AY),e(AY,TAr),e(SE,MAr),e(ie,EAr),e(ie,RE),e(RE,VMe),e(VMe,CAr),e(RE,wAr),e(RE,LY),e(LY,AAr),e(RE,LAr),e(ie,yAr),e(ie,PE),e(PE,XMe),e(XMe,xAr),e(PE,$Ar),e(PE,yY),e(yY,kAr),e(PE,SAr),e(ie,RAr),e(ie,BE),e(BE,zMe),e(zMe,PAr),e(BE,BAr),e(BE,xY),e(xY,IAr),e(BE,NAr),e(ie,qAr),e(ie,IE),e(IE,QMe),e(QMe,jAr),e(IE,DAr),e(IE,$Y),e($Y,GAr),e(IE,OAr),e(Rr,VAr),M(NE,Rr,null),b(f,Mze,u),b(f,Tc,u),e(Tc,qE),e(qE,WMe),M(ux,WMe,null),e(Tc,XAr),e(Tc,HMe),e(HMe,zAr),b(f,Eze,u),b(f,sr,u),M(bx,sr,null),e(sr,QAr),e(sr,Mc),e(Mc,WAr),e(Mc,kY),e(kY,HAr),e(Mc,UAr),e(Mc,SY),e(SY,JAr),e(Mc,YAr),e(sr,KAr),e(sr,vx),e(vx,ZAr),e(vx,UMe),e(UMe,e6r),e(vx,o6r),e(sr,r6r),e(sr,Nt),M(Fx,Nt,null),e(Nt,t6r),e(Nt,JMe),e(JMe,a6r),e(Nt,n6r),e(Nt,Ec),e(Ec,s6r),e(Ec,YMe),e(YMe,l6r),e(Ec,i6r),e(Ec,RY),e(RY,d6r),e(Ec,c6r),e(Nt,f6r),M(jE,Nt,null),e(sr,m6r),e(sr,Pr),M(Tx,Pr,null),e(Pr,g6r),e(Pr,KMe),e(KMe,h6r),e(Pr,p6r),e(Pr,mn),e(mn,_6r),e(mn,ZMe),e(ZMe,u6r),e(mn,b6r),e(mn,e4e),e(e4e,v6r),e(mn,F6r),e(mn,o4e),e(o4e,T6r),e(mn,M6r),e(Pr,E6r),e(Pr,ye),e(ye,DE),e(DE,r4e),e(r4e,C6r),e(DE,w6r),e(DE,PY),e(PY,A6r),e(DE,L6r),e(ye,y6r),e(ye,GE),e(GE,t4e),e(t4e,x6r),e(GE,$6r),e(GE,BY),e(BY,k6r),e(GE,S6r),e(ye,R6r),e(ye,OE),e(OE,a4e),e(a4e,P6r),e(OE,B6r),e(OE,IY),e(IY,I6r),e(OE,N6r),e(ye,q6r),e(ye,VE),e(VE,n4e),e(n4e,j6r),e(VE,D6r),e(VE,NY),e(NY,G6r),e(VE,O6r),e(ye,V6r),e(ye,XE),e(XE,s4e),e(s4e,X6r),e(XE,z6r),e(XE,qY),e(qY,Q6r),e(XE,W6r),e(ye,H6r),e(ye,zE),e(zE,l4e),e(l4e,U6r),e(zE,J6r),e(zE,jY),e(jY,Y6r),e(zE,K6r),e(ye,Z6r),e(ye,QE),e(QE,i4e),e(i4e,eLr),e(QE,oLr),e(QE,DY),e(DY,rLr),e(QE,tLr),e(ye,aLr),e(ye,WE),e(WE,d4e),e(d4e,nLr),e(WE,sLr),e(WE,GY),e(GY,lLr),e(WE,iLr),e(ye,dLr),e(ye,HE),e(HE,c4e),e(c4e,cLr),e(HE,fLr),e(HE,OY),e(OY,mLr),e(HE,gLr),e(ye,hLr),e(ye,UE),e(UE,f4e),e(f4e,pLr),e(UE,_Lr),e(UE,VY),e(VY,uLr),e(UE,bLr),e(Pr,vLr),M(JE,Pr,null),b(f,Cze,u),b(f,Cc,u),e(Cc,YE),e(YE,m4e),M(Mx,m4e,null),e(Cc,FLr),e(Cc,g4e),e(g4e,TLr),b(f,wze,u),b(f,lr,u),M(Ex,lr,null),e(lr,MLr),e(lr,wc),e(wc,ELr),e(wc,XY),e(XY,CLr),e(wc,wLr),e(wc,zY),e(zY,ALr),e(wc,LLr),e(lr,yLr),e(lr,Cx),e(Cx,xLr),e(Cx,h4e),e(h4e,$Lr),e(Cx,kLr),e(lr,SLr),e(lr,qt),M(wx,qt,null),e(qt,RLr),e(qt,p4e),e(p4e,PLr),e(qt,BLr),e(qt,Ac),e(Ac,ILr),e(Ac,_4e),e(_4e,NLr),e(Ac,qLr),e(Ac,QY),e(QY,jLr),e(Ac,DLr),e(qt,GLr),M(KE,qt,null),e(lr,OLr),e(lr,Br),M(Ax,Br,null),e(Br,VLr),e(Br,u4e),e(u4e,XLr),e(Br,zLr),e(Br,gn),e(gn,QLr),e(gn,b4e),e(b4e,WLr),e(gn,HLr),e(gn,v4e),e(v4e,ULr),e(gn,JLr),e(gn,F4e),e(F4e,YLr),e(gn,KLr),e(Br,ZLr),e(Br,te),e(te,ZE),e(ZE,T4e),e(T4e,eyr),e(ZE,oyr),e(ZE,WY),e(WY,ryr),e(ZE,tyr),e(te,ayr),e(te,eC),e(eC,M4e),e(M4e,nyr),e(eC,syr),e(eC,HY),e(HY,lyr),e(eC,iyr),e(te,dyr),e(te,oC),e(oC,E4e),e(E4e,cyr),e(oC,fyr),e(oC,UY),e(UY,myr),e(oC,gyr),e(te,hyr),e(te,rC),e(rC,C4e),e(C4e,pyr),e(rC,_yr),e(rC,JY),e(JY,uyr),e(rC,byr),e(te,vyr),e(te,tC),e(tC,w4e),e(w4e,Fyr),e(tC,Tyr),e(tC,YY),e(YY,Myr),e(tC,Eyr),e(te,Cyr),e(te,aC),e(aC,A4e),e(A4e,wyr),e(aC,Ayr),e(aC,KY),e(KY,Lyr),e(aC,yyr),e(te,xyr),e(te,nC),e(nC,L4e),e(L4e,$yr),e(nC,kyr),e(nC,ZY),e(ZY,Syr),e(nC,Ryr),e(te,Pyr),e(te,sC),e(sC,y4e),e(y4e,Byr),e(sC,Iyr),e(sC,eK),e(eK,Nyr),e(sC,qyr),e(te,jyr),e(te,lC),e(lC,x4e),e(x4e,Dyr),e(lC,Gyr),e(lC,oK),e(oK,Oyr),e(lC,Vyr),e(te,Xyr),e(te,iC),e(iC,$4e),e($4e,zyr),e(iC,Qyr),e(iC,rK),e(rK,Wyr),e(iC,Hyr),e(te,Uyr),e(te,dC),e(dC,k4e),e(k4e,Jyr),e(dC,Yyr),e(dC,tK),e(tK,Kyr),e(dC,Zyr),e(te,e9r),e(te,cC),e(cC,S4e),e(S4e,o9r),e(cC,r9r),e(cC,aK),e(aK,t9r),e(cC,a9r),e(te,n9r),e(te,fC),e(fC,R4e),e(R4e,s9r),e(fC,l9r),e(fC,nK),e(nK,i9r),e(fC,d9r),e(te,c9r),e(te,mC),e(mC,P4e),e(P4e,f9r),e(mC,m9r),e(mC,sK),e(sK,g9r),e(mC,h9r),e(te,p9r),e(te,gC),e(gC,B4e),e(B4e,_9r),e(gC,u9r),e(gC,lK),e(lK,b9r),e(gC,v9r),e(te,F9r),e(te,hC),e(hC,I4e),e(I4e,T9r),e(hC,M9r),e(hC,iK),e(iK,E9r),e(hC,C9r),e(te,w9r),e(te,pC),e(pC,N4e),e(N4e,A9r),e(pC,L9r),e(pC,dK),e(dK,y9r),e(pC,x9r),e(te,$9r),e(te,_C),e(_C,q4e),e(q4e,k9r),e(_C,S9r),e(_C,cK),e(cK,R9r),e(_C,P9r),e(te,B9r),e(te,uC),e(uC,j4e),e(j4e,I9r),e(uC,N9r),e(uC,fK),e(fK,q9r),e(uC,j9r),e(te,D9r),e(te,bC),e(bC,D4e),e(D4e,G9r),e(bC,O9r),e(bC,mK),e(mK,V9r),e(bC,X9r),e(te,z9r),e(te,vC),e(vC,G4e),e(G4e,Q9r),e(vC,W9r),e(vC,gK),e(gK,H9r),e(vC,U9r),e(te,J9r),e(te,FC),e(FC,O4e),e(O4e,Y9r),e(FC,K9r),e(FC,hK),e(hK,Z9r),e(FC,exr),e(te,oxr),e(te,TC),e(TC,V4e),e(V4e,rxr),e(TC,txr),e(TC,pK),e(pK,axr),e(TC,nxr),e(te,sxr),e(te,MC),e(MC,X4e),e(X4e,lxr),e(MC,ixr),e(MC,_K),e(_K,dxr),e(MC,cxr),e(te,fxr),e(te,EC),e(EC,z4e),e(z4e,mxr),e(EC,gxr),e(EC,uK),e(uK,hxr),e(EC,pxr),e(te,_xr),e(te,CC),e(CC,Q4e),e(Q4e,uxr),e(CC,bxr),e(CC,bK),e(bK,vxr),e(CC,Fxr),e(Br,Txr),M(wC,Br,null),b(f,Aze,u),b(f,Lc,u),e(Lc,AC),e(AC,W4e),M(Lx,W4e,null),e(Lc,Mxr),e(Lc,H4e),e(H4e,Exr),b(f,Lze,u),b(f,ir,u),M(yx,ir,null),e(ir,Cxr),e(ir,yc),e(yc,wxr),e(yc,vK),e(vK,Axr),e(yc,Lxr),e(yc,FK),e(FK,yxr),e(yc,xxr),e(ir,$xr),e(ir,xx),e(xx,kxr),e(xx,U4e),e(U4e,Sxr),e(xx,Rxr),e(ir,Pxr),e(ir,jt),M($x,jt,null),e(jt,Bxr),e(jt,J4e),e(J4e,Ixr),e(jt,Nxr),e(jt,xc),e(xc,qxr),e(xc,Y4e),e(Y4e,jxr),e(xc,Dxr),e(xc,TK),e(TK,Gxr),e(xc,Oxr),e(jt,Vxr),M(LC,jt,null),e(ir,Xxr),e(ir,Ir),M(kx,Ir,null),e(Ir,zxr),e(Ir,K4e),e(K4e,Qxr),e(Ir,Wxr),e(Ir,hn),e(hn,Hxr),e(hn,Z4e),e(Z4e,Uxr),e(hn,Jxr),e(hn,eEe),e(eEe,Yxr),e(hn,Kxr),e(hn,oEe),e(oEe,Zxr),e(hn,e$r),e(Ir,o$r),e(Ir,_e),e(_e,yC),e(yC,rEe),e(rEe,r$r),e(yC,t$r),e(yC,MK),e(MK,a$r),e(yC,n$r),e(_e,s$r),e(_e,xC),e(xC,tEe),e(tEe,l$r),e(xC,i$r),e(xC,EK),e(EK,d$r),e(xC,c$r),e(_e,f$r),e(_e,$C),e($C,aEe),e(aEe,m$r),e($C,g$r),e($C,CK),e(CK,h$r),e($C,p$r),e(_e,_$r),e(_e,kC),e(kC,nEe),e(nEe,u$r),e(kC,b$r),e(kC,wK),e(wK,v$r),e(kC,F$r),e(_e,T$r),e(_e,SC),e(SC,sEe),e(sEe,M$r),e(SC,E$r),e(SC,AK),e(AK,C$r),e(SC,w$r),e(_e,A$r),e(_e,RC),e(RC,lEe),e(lEe,L$r),e(RC,y$r),e(RC,LK),e(LK,x$r),e(RC,$$r),e(_e,k$r),e(_e,PC),e(PC,iEe),e(iEe,S$r),e(PC,R$r),e(PC,yK),e(yK,P$r),e(PC,B$r),e(_e,I$r),e(_e,BC),e(BC,dEe),e(dEe,N$r),e(BC,q$r),e(BC,xK),e(xK,j$r),e(BC,D$r),e(_e,G$r),e(_e,IC),e(IC,cEe),e(cEe,O$r),e(IC,V$r),e(IC,$K),e($K,X$r),e(IC,z$r),e(_e,Q$r),e(_e,NC),e(NC,fEe),e(fEe,W$r),e(NC,H$r),e(NC,kK),e(kK,U$r),e(NC,J$r),e(_e,Y$r),e(_e,qC),e(qC,mEe),e(mEe,K$r),e(qC,Z$r),e(qC,SK),e(SK,ekr),e(qC,okr),e(_e,rkr),e(_e,jC),e(jC,gEe),e(gEe,tkr),e(jC,akr),e(jC,RK),e(RK,nkr),e(jC,skr),e(_e,lkr),e(_e,DC),e(DC,hEe),e(hEe,ikr),e(DC,dkr),e(DC,PK),e(PK,ckr),e(DC,fkr),e(_e,mkr),e(_e,GC),e(GC,pEe),e(pEe,gkr),e(GC,hkr),e(GC,BK),e(BK,pkr),e(GC,_kr),e(_e,ukr),e(_e,OC),e(OC,_Ee),e(_Ee,bkr),e(OC,vkr),e(OC,IK),e(IK,Fkr),e(OC,Tkr),e(_e,Mkr),e(_e,VC),e(VC,uEe),e(uEe,Ekr),e(VC,Ckr),e(VC,NK),e(NK,wkr),e(VC,Akr),e(_e,Lkr),e(_e,XC),e(XC,bEe),e(bEe,ykr),e(XC,xkr),e(XC,qK),e(qK,$kr),e(XC,kkr),e(Ir,Skr),M(zC,Ir,null),b(f,yze,u),b(f,$c,u),e($c,QC),e(QC,vEe),M(Sx,vEe,null),e($c,Rkr),e($c,FEe),e(FEe,Pkr),b(f,xze,u),b(f,dr,u),M(Rx,dr,null),e(dr,Bkr),e(dr,kc),e(kc,Ikr),e(kc,jK),e(jK,Nkr),e(kc,qkr),e(kc,DK),e(DK,jkr),e(kc,Dkr),e(dr,Gkr),e(dr,Px),e(Px,Okr),e(Px,TEe),e(TEe,Vkr),e(Px,Xkr),e(dr,zkr),e(dr,Dt),M(Bx,Dt,null),e(Dt,Qkr),e(Dt,MEe),e(MEe,Wkr),e(Dt,Hkr),e(Dt,Sc),e(Sc,Ukr),e(Sc,EEe),e(EEe,Jkr),e(Sc,Ykr),e(Sc,GK),e(GK,Kkr),e(Sc,Zkr),e(Dt,eSr),M(WC,Dt,null),e(dr,oSr),e(dr,Nr),M(Ix,Nr,null),e(Nr,rSr),e(Nr,CEe),e(CEe,tSr),e(Nr,aSr),e(Nr,pn),e(pn,nSr),e(pn,wEe),e(wEe,sSr),e(pn,lSr),e(pn,AEe),e(AEe,iSr),e(pn,dSr),e(pn,LEe),e(LEe,cSr),e(pn,fSr),e(Nr,mSr),e(Nr,Nx),e(Nx,HC),e(HC,yEe),e(yEe,gSr),e(HC,hSr),e(HC,OK),e(OK,pSr),e(HC,_Sr),e(Nx,uSr),e(Nx,UC),e(UC,xEe),e(xEe,bSr),e(UC,vSr),e(UC,VK),e(VK,FSr),e(UC,TSr),e(Nr,MSr),M(JC,Nr,null),b(f,$ze,u),b(f,Rc,u),e(Rc,YC),e(YC,$Ee),M(qx,$Ee,null),e(Rc,ESr),e(Rc,kEe),e(kEe,CSr),b(f,kze,u),b(f,cr,u),M(jx,cr,null),e(cr,wSr),e(cr,Pc),e(Pc,ASr),e(Pc,XK),e(XK,LSr),e(Pc,ySr),e(Pc,zK),e(zK,xSr),e(Pc,$Sr),e(cr,kSr),e(cr,Dx),e(Dx,SSr),e(Dx,SEe),e(SEe,RSr),e(Dx,PSr),e(cr,BSr),e(cr,Gt),M(Gx,Gt,null),e(Gt,ISr),e(Gt,REe),e(REe,NSr),e(Gt,qSr),e(Gt,Bc),e(Bc,jSr),e(Bc,PEe),e(PEe,DSr),e(Bc,GSr),e(Bc,QK),e(QK,OSr),e(Bc,VSr),e(Gt,XSr),M(KC,Gt,null),e(cr,zSr),e(cr,qr),M(Ox,qr,null),e(qr,QSr),e(qr,BEe),e(BEe,WSr),e(qr,HSr),e(qr,_n),e(_n,USr),e(_n,IEe),e(IEe,JSr),e(_n,YSr),e(_n,NEe),e(NEe,KSr),e(_n,ZSr),e(_n,qEe),e(qEe,eRr),e(_n,oRr),e(qr,rRr),e(qr,jEe),e(jEe,ZC),e(ZC,DEe),e(DEe,tRr),e(ZC,aRr),e(ZC,WK),e(WK,nRr),e(ZC,sRr),e(qr,lRr),M(e3,qr,null),b(f,Sze,u),b(f,Ic,u),e(Ic,o3),e(o3,GEe),M(Vx,GEe,null),e(Ic,iRr),e(Ic,OEe),e(OEe,dRr),b(f,Rze,u),b(f,fr,u),M(Xx,fr,null),e(fr,cRr),e(fr,Nc),e(Nc,fRr),e(Nc,HK),e(HK,mRr),e(Nc,gRr),e(Nc,UK),e(UK,hRr),e(Nc,pRr),e(fr,_Rr),e(fr,zx),e(zx,uRr),e(zx,VEe),e(VEe,bRr),e(zx,vRr),e(fr,FRr),e(fr,Ot),M(Qx,Ot,null),e(Ot,TRr),e(Ot,XEe),e(XEe,MRr),e(Ot,ERr),e(Ot,qc),e(qc,CRr),e(qc,zEe),e(zEe,wRr),e(qc,ARr),e(qc,JK),e(JK,LRr),e(qc,yRr),e(Ot,xRr),M(r3,Ot,null),e(fr,$Rr),e(fr,jr),M(Wx,jr,null),e(jr,kRr),e(jr,QEe),e(QEe,SRr),e(jr,RRr),e(jr,un),e(un,PRr),e(un,WEe),e(WEe,BRr),e(un,IRr),e(un,HEe),e(HEe,NRr),e(un,qRr),e(un,UEe),e(UEe,jRr),e(un,DRr),e(jr,GRr),e(jr,de),e(de,t3),e(t3,JEe),e(JEe,ORr),e(t3,VRr),e(t3,YK),e(YK,XRr),e(t3,zRr),e(de,QRr),e(de,a3),e(a3,YEe),e(YEe,WRr),e(a3,HRr),e(a3,KK),e(KK,URr),e(a3,JRr),e(de,YRr),e(de,n3),e(n3,KEe),e(KEe,KRr),e(n3,ZRr),e(n3,ZK),e(ZK,ePr),e(n3,oPr),e(de,rPr),e(de,s3),e(s3,ZEe),e(ZEe,tPr),e(s3,aPr),e(s3,eZ),e(eZ,nPr),e(s3,sPr),e(de,lPr),e(de,l3),e(l3,eCe),e(eCe,iPr),e(l3,dPr),e(l3,oZ),e(oZ,cPr),e(l3,fPr),e(de,mPr),e(de,i3),e(i3,oCe),e(oCe,gPr),e(i3,hPr),e(i3,rZ),e(rZ,pPr),e(i3,_Pr),e(de,uPr),e(de,d3),e(d3,rCe),e(rCe,bPr),e(d3,vPr),e(d3,tZ),e(tZ,FPr),e(d3,TPr),e(de,MPr),e(de,c3),e(c3,tCe),e(tCe,EPr),e(c3,CPr),e(c3,aZ),e(aZ,wPr),e(c3,APr),e(de,LPr),e(de,f3),e(f3,aCe),e(aCe,yPr),e(f3,xPr),e(f3,nZ),e(nZ,$Pr),e(f3,kPr),e(de,SPr),e(de,m3),e(m3,nCe),e(nCe,RPr),e(m3,PPr),e(m3,sZ),e(sZ,BPr),e(m3,IPr),e(de,NPr),e(de,g3),e(g3,sCe),e(sCe,qPr),e(g3,jPr),e(g3,lZ),e(lZ,DPr),e(g3,GPr),e(de,OPr),e(de,h3),e(h3,lCe),e(lCe,VPr),e(h3,XPr),e(h3,iZ),e(iZ,zPr),e(h3,QPr),e(de,WPr),e(de,p3),e(p3,iCe),e(iCe,HPr),e(p3,UPr),e(p3,dZ),e(dZ,JPr),e(p3,YPr),e(de,KPr),e(de,_3),e(_3,dCe),e(dCe,ZPr),e(_3,eBr),e(_3,cZ),e(cZ,oBr),e(_3,rBr),e(de,tBr),e(de,u3),e(u3,cCe),e(cCe,aBr),e(u3,nBr),e(u3,fZ),e(fZ,sBr),e(u3,lBr),e(de,iBr),e(de,b3),e(b3,fCe),e(fCe,dBr),e(b3,cBr),e(b3,mZ),e(mZ,fBr),e(b3,mBr),e(de,gBr),e(de,v3),e(v3,mCe),e(mCe,hBr),e(v3,pBr),e(v3,gZ),e(gZ,_Br),e(v3,uBr),e(de,bBr),e(de,F3),e(F3,gCe),e(gCe,vBr),e(F3,FBr),e(F3,hZ),e(hZ,TBr),e(F3,MBr),e(de,EBr),e(de,T3),e(T3,hCe),e(hCe,CBr),e(T3,wBr),e(T3,pZ),e(pZ,ABr),e(T3,LBr),e(de,yBr),e(de,M3),e(M3,pCe),e(pCe,xBr),e(M3,$Br),e(M3,_Z),e(_Z,kBr),e(M3,SBr),e(jr,RBr),M(E3,jr,null),b(f,Pze,u),b(f,jc,u),e(jc,C3),e(C3,_Ce),M(Hx,_Ce,null),e(jc,PBr),e(jc,uCe),e(uCe,BBr),b(f,Bze,u),b(f,mr,u),M(Ux,mr,null),e(mr,IBr),e(mr,Dc),e(Dc,NBr),e(Dc,uZ),e(uZ,qBr),e(Dc,jBr),e(Dc,bZ),e(bZ,DBr),e(Dc,GBr),e(mr,OBr),e(mr,Jx),e(Jx,VBr),e(Jx,bCe),e(bCe,XBr),e(Jx,zBr),e(mr,QBr),e(mr,Vt),M(Yx,Vt,null),e(Vt,WBr),e(Vt,vCe),e(vCe,HBr),e(Vt,UBr),e(Vt,Gc),e(Gc,JBr),e(Gc,FCe),e(FCe,YBr),e(Gc,KBr),e(Gc,vZ),e(vZ,ZBr),e(Gc,eIr),e(Vt,oIr),M(w3,Vt,null),e(mr,rIr),e(mr,Dr),M(Kx,Dr,null),e(Dr,tIr),e(Dr,TCe),e(TCe,aIr),e(Dr,nIr),e(Dr,bn),e(bn,sIr),e(bn,MCe),e(MCe,lIr),e(bn,iIr),e(bn,ECe),e(ECe,dIr),e(bn,cIr),e(bn,CCe),e(CCe,fIr),e(bn,mIr),e(Dr,gIr),e(Dr,ce),e(ce,A3),e(A3,wCe),e(wCe,hIr),e(A3,pIr),e(A3,FZ),e(FZ,_Ir),e(A3,uIr),e(ce,bIr),e(ce,L3),e(L3,ACe),e(ACe,vIr),e(L3,FIr),e(L3,TZ),e(TZ,TIr),e(L3,MIr),e(ce,EIr),e(ce,y3),e(y3,LCe),e(LCe,CIr),e(y3,wIr),e(y3,MZ),e(MZ,AIr),e(y3,LIr),e(ce,yIr),e(ce,x3),e(x3,yCe),e(yCe,xIr),e(x3,$Ir),e(x3,EZ),e(EZ,kIr),e(x3,SIr),e(ce,RIr),e(ce,$3),e($3,xCe),e(xCe,PIr),e($3,BIr),e($3,CZ),e(CZ,IIr),e($3,NIr),e(ce,qIr),e(ce,k3),e(k3,$Ce),e($Ce,jIr),e(k3,DIr),e(k3,wZ),e(wZ,GIr),e(k3,OIr),e(ce,VIr),e(ce,S3),e(S3,kCe),e(kCe,XIr),e(S3,zIr),e(S3,AZ),e(AZ,QIr),e(S3,WIr),e(ce,HIr),e(ce,R3),e(R3,SCe),e(SCe,UIr),e(R3,JIr),e(R3,LZ),e(LZ,YIr),e(R3,KIr),e(ce,ZIr),e(ce,P3),e(P3,RCe),e(RCe,eNr),e(P3,oNr),e(P3,yZ),e(yZ,rNr),e(P3,tNr),e(ce,aNr),e(ce,B3),e(B3,PCe),e(PCe,nNr),e(B3,sNr),e(B3,xZ),e(xZ,lNr),e(B3,iNr),e(ce,dNr),e(ce,I3),e(I3,BCe),e(BCe,cNr),e(I3,fNr),e(I3,$Z),e($Z,mNr),e(I3,gNr),e(ce,hNr),e(ce,N3),e(N3,ICe),e(ICe,pNr),e(N3,_Nr),e(N3,kZ),e(kZ,uNr),e(N3,bNr),e(ce,vNr),e(ce,q3),e(q3,NCe),e(NCe,FNr),e(q3,TNr),e(q3,SZ),e(SZ,MNr),e(q3,ENr),e(ce,CNr),e(ce,j3),e(j3,qCe),e(qCe,wNr),e(j3,ANr),e(j3,RZ),e(RZ,LNr),e(j3,yNr),e(ce,xNr),e(ce,D3),e(D3,jCe),e(jCe,$Nr),e(D3,kNr),e(D3,PZ),e(PZ,SNr),e(D3,RNr),e(ce,PNr),e(ce,G3),e(G3,DCe),e(DCe,BNr),e(G3,INr),e(G3,BZ),e(BZ,NNr),e(G3,qNr),e(ce,jNr),e(ce,O3),e(O3,GCe),e(GCe,DNr),e(O3,GNr),e(O3,IZ),e(IZ,ONr),e(O3,VNr),e(ce,XNr),e(ce,V3),e(V3,OCe),e(OCe,zNr),e(V3,QNr),e(V3,NZ),e(NZ,WNr),e(V3,HNr),e(ce,UNr),e(ce,X3),e(X3,VCe),e(VCe,JNr),e(X3,YNr),e(X3,qZ),e(qZ,KNr),e(X3,ZNr),e(ce,eqr),e(ce,z3),e(z3,XCe),e(XCe,oqr),e(z3,rqr),e(z3,jZ),e(jZ,tqr),e(z3,aqr),e(Dr,nqr),M(Q3,Dr,null),b(f,Ize,u),b(f,Oc,u),e(Oc,W3),e(W3,zCe),M(Zx,zCe,null),e(Oc,sqr),e(Oc,QCe),e(QCe,lqr),b(f,Nze,u),b(f,gr,u),M(e$,gr,null),e(gr,iqr),e(gr,Vc),e(Vc,dqr),e(Vc,DZ),e(DZ,cqr),e(Vc,fqr),e(Vc,GZ),e(GZ,mqr),e(Vc,gqr),e(gr,hqr),e(gr,o$),e(o$,pqr),e(o$,WCe),e(WCe,_qr),e(o$,uqr),e(gr,bqr),e(gr,Xt),M(r$,Xt,null),e(Xt,vqr),e(Xt,HCe),e(HCe,Fqr),e(Xt,Tqr),e(Xt,Xc),e(Xc,Mqr),e(Xc,UCe),e(UCe,Eqr),e(Xc,Cqr),e(Xc,OZ),e(OZ,wqr),e(Xc,Aqr),e(Xt,Lqr),M(H3,Xt,null),e(gr,yqr),e(gr,Gr),M(t$,Gr,null),e(Gr,xqr),e(Gr,JCe),e(JCe,$qr),e(Gr,kqr),e(Gr,vn),e(vn,Sqr),e(vn,YCe),e(YCe,Rqr),e(vn,Pqr),e(vn,KCe),e(KCe,Bqr),e(vn,Iqr),e(vn,ZCe),e(ZCe,Nqr),e(vn,qqr),e(Gr,jqr),e(Gr,e3e),e(e3e,U3),e(U3,o3e),e(o3e,Dqr),e(U3,Gqr),e(U3,VZ),e(VZ,Oqr),e(U3,Vqr),e(Gr,Xqr),M(J3,Gr,null),b(f,qze,u),b(f,zc,u),e(zc,Y3),e(Y3,r3e),M(a$,r3e,null),e(zc,zqr),e(zc,t3e),e(t3e,Qqr),b(f,jze,u),b(f,hr,u),M(n$,hr,null),e(hr,Wqr),e(hr,Qc),e(Qc,Hqr),e(Qc,XZ),e(XZ,Uqr),e(Qc,Jqr),e(Qc,zZ),e(zZ,Yqr),e(Qc,Kqr),e(hr,Zqr),e(hr,s$),e(s$,ejr),e(s$,a3e),e(a3e,ojr),e(s$,rjr),e(hr,tjr),e(hr,zt),M(l$,zt,null),e(zt,ajr),e(zt,n3e),e(n3e,njr),e(zt,sjr),e(zt,Wc),e(Wc,ljr),e(Wc,s3e),e(s3e,ijr),e(Wc,djr),e(Wc,QZ),e(QZ,cjr),e(Wc,fjr),e(zt,mjr),M(K3,zt,null),e(hr,gjr),e(hr,Or),M(i$,Or,null),e(Or,hjr),e(Or,l3e),e(l3e,pjr),e(Or,_jr),e(Or,Fn),e(Fn,ujr),e(Fn,i3e),e(i3e,bjr),e(Fn,vjr),e(Fn,d3e),e(d3e,Fjr),e(Fn,Tjr),e(Fn,c3e),e(c3e,Mjr),e(Fn,Ejr),e(Or,Cjr),e(Or,f3e),e(f3e,Z3),e(Z3,m3e),e(m3e,wjr),e(Z3,Ajr),e(Z3,WZ),e(WZ,Ljr),e(Z3,yjr),e(Or,xjr),M(e5,Or,null),b(f,Dze,u),b(f,Hc,u),e(Hc,o5),e(o5,g3e),M(d$,g3e,null),e(Hc,$jr),e(Hc,h3e),e(h3e,kjr),b(f,Gze,u),b(f,pr,u),M(c$,pr,null),e(pr,Sjr),e(pr,Uc),e(Uc,Rjr),e(Uc,HZ),e(HZ,Pjr),e(Uc,Bjr),e(Uc,UZ),e(UZ,Ijr),e(Uc,Njr),e(pr,qjr),e(pr,f$),e(f$,jjr),e(f$,p3e),e(p3e,Djr),e(f$,Gjr),e(pr,Ojr),e(pr,Qt),M(m$,Qt,null),e(Qt,Vjr),e(Qt,_3e),e(_3e,Xjr),e(Qt,zjr),e(Qt,Jc),e(Jc,Qjr),e(Jc,u3e),e(u3e,Wjr),e(Jc,Hjr),e(Jc,JZ),e(JZ,Ujr),e(Jc,Jjr),e(Qt,Yjr),M(r5,Qt,null),e(pr,Kjr),e(pr,Vr),M(g$,Vr,null),e(Vr,Zjr),e(Vr,b3e),e(b3e,eDr),e(Vr,oDr),e(Vr,Tn),e(Tn,rDr),e(Tn,v3e),e(v3e,tDr),e(Tn,aDr),e(Tn,F3e),e(F3e,nDr),e(Tn,sDr),e(Tn,T3e),e(T3e,lDr),e(Tn,iDr),e(Vr,dDr),e(Vr,oe),e(oe,t5),e(t5,M3e),e(M3e,cDr),e(t5,fDr),e(t5,YZ),e(YZ,mDr),e(t5,gDr),e(oe,hDr),e(oe,a5),e(a5,E3e),e(E3e,pDr),e(a5,_Dr),e(a5,KZ),e(KZ,uDr),e(a5,bDr),e(oe,vDr),e(oe,n5),e(n5,C3e),e(C3e,FDr),e(n5,TDr),e(n5,ZZ),e(ZZ,MDr),e(n5,EDr),e(oe,CDr),e(oe,s5),e(s5,w3e),e(w3e,wDr),e(s5,ADr),e(s5,eee),e(eee,LDr),e(s5,yDr),e(oe,xDr),e(oe,l5),e(l5,A3e),e(A3e,$Dr),e(l5,kDr),e(l5,oee),e(oee,SDr),e(l5,RDr),e(oe,PDr),e(oe,i5),e(i5,L3e),e(L3e,BDr),e(i5,IDr),e(i5,ree),e(ree,NDr),e(i5,qDr),e(oe,jDr),e(oe,d5),e(d5,y3e),e(y3e,DDr),e(d5,GDr),e(d5,tee),e(tee,ODr),e(d5,VDr),e(oe,XDr),e(oe,c5),e(c5,x3e),e(x3e,zDr),e(c5,QDr),e(c5,aee),e(aee,WDr),e(c5,HDr),e(oe,UDr),e(oe,f5),e(f5,$3e),e($3e,JDr),e(f5,YDr),e(f5,nee),e(nee,KDr),e(f5,ZDr),e(oe,eGr),e(oe,m5),e(m5,k3e),e(k3e,oGr),e(m5,rGr),e(m5,see),e(see,tGr),e(m5,aGr),e(oe,nGr),e(oe,g5),e(g5,S3e),e(S3e,sGr),e(g5,lGr),e(g5,lee),e(lee,iGr),e(g5,dGr),e(oe,cGr),e(oe,h5),e(h5,R3e),e(R3e,fGr),e(h5,mGr),e(h5,iee),e(iee,gGr),e(h5,hGr),e(oe,pGr),e(oe,p5),e(p5,P3e),e(P3e,_Gr),e(p5,uGr),e(p5,dee),e(dee,bGr),e(p5,vGr),e(oe,FGr),e(oe,_5),e(_5,B3e),e(B3e,TGr),e(_5,MGr),e(_5,cee),e(cee,EGr),e(_5,CGr),e(oe,wGr),e(oe,u5),e(u5,I3e),e(I3e,AGr),e(u5,LGr),e(u5,fee),e(fee,yGr),e(u5,xGr),e(oe,$Gr),e(oe,b5),e(b5,N3e),e(N3e,kGr),e(b5,SGr),e(b5,mee),e(mee,RGr),e(b5,PGr),e(oe,BGr),e(oe,v5),e(v5,q3e),e(q3e,IGr),e(v5,NGr),e(v5,gee),e(gee,qGr),e(v5,jGr),e(oe,DGr),e(oe,F5),e(F5,j3e),e(j3e,GGr),e(F5,OGr),e(F5,hee),e(hee,VGr),e(F5,XGr),e(oe,zGr),e(oe,T5),e(T5,D3e),e(D3e,QGr),e(T5,WGr),e(T5,pee),e(pee,HGr),e(T5,UGr),e(oe,JGr),e(oe,M5),e(M5,G3e),e(G3e,YGr),e(M5,KGr),e(M5,_ee),e(_ee,ZGr),e(M5,eOr),e(oe,oOr),e(oe,E5),e(E5,O3e),e(O3e,rOr),e(E5,tOr),e(E5,uee),e(uee,aOr),e(E5,nOr),e(oe,sOr),e(oe,C5),e(C5,V3e),e(V3e,lOr),e(C5,iOr),e(C5,bee),e(bee,dOr),e(C5,cOr),e(oe,fOr),e(oe,w5),e(w5,X3e),e(X3e,mOr),e(w5,gOr),e(w5,vee),e(vee,hOr),e(w5,pOr),e(oe,_Or),e(oe,A5),e(A5,z3e),e(z3e,uOr),e(A5,bOr),e(A5,Fee),e(Fee,vOr),e(A5,FOr),e(oe,TOr),e(oe,L5),e(L5,Q3e),e(Q3e,MOr),e(L5,EOr),e(L5,Tee),e(Tee,COr),e(L5,wOr),e(oe,AOr),e(oe,y5),e(y5,W3e),e(W3e,LOr),e(y5,yOr),e(y5,Mee),e(Mee,xOr),e(y5,$Or),e(oe,kOr),e(oe,x5),e(x5,H3e),e(H3e,SOr),e(x5,ROr),e(x5,Eee),e(Eee,POr),e(x5,BOr),e(Vr,IOr),M($5,Vr,null),b(f,Oze,u),b(f,Yc,u),e(Yc,k5),e(k5,U3e),M(h$,U3e,null),e(Yc,NOr),e(Yc,J3e),e(J3e,qOr),b(f,Vze,u),b(f,_r,u),M(p$,_r,null),e(_r,jOr),e(_r,Kc),e(Kc,DOr),e(Kc,Cee),e(Cee,GOr),e(Kc,OOr),e(Kc,wee),e(wee,VOr),e(Kc,XOr),e(_r,zOr),e(_r,_$),e(_$,QOr),e(_$,Y3e),e(Y3e,WOr),e(_$,HOr),e(_r,UOr),e(_r,Wt),M(u$,Wt,null),e(Wt,JOr),e(Wt,K3e),e(K3e,YOr),e(Wt,KOr),e(Wt,Zc),e(Zc,ZOr),e(Zc,Z3e),e(Z3e,eVr),e(Zc,oVr),e(Zc,Aee),e(Aee,rVr),e(Zc,tVr),e(Wt,aVr),M(S5,Wt,null),e(_r,nVr),e(_r,Xr),M(b$,Xr,null),e(Xr,sVr),e(Xr,e5e),e(e5e,lVr),e(Xr,iVr),e(Xr,Mn),e(Mn,dVr),e(Mn,o5e),e(o5e,cVr),e(Mn,fVr),e(Mn,r5e),e(r5e,mVr),e(Mn,gVr),e(Mn,t5e),e(t5e,hVr),e(Mn,pVr),e(Xr,_Vr),e(Xr,xe),e(xe,R5),e(R5,a5e),e(a5e,uVr),e(R5,bVr),e(R5,Lee),e(Lee,vVr),e(R5,FVr),e(xe,TVr),e(xe,P5),e(P5,n5e),e(n5e,MVr),e(P5,EVr),e(P5,yee),e(yee,CVr),e(P5,wVr),e(xe,AVr),e(xe,B5),e(B5,s5e),e(s5e,LVr),e(B5,yVr),e(B5,xee),e(xee,xVr),e(B5,$Vr),e(xe,kVr),e(xe,I5),e(I5,l5e),e(l5e,SVr),e(I5,RVr),e(I5,$ee),e($ee,PVr),e(I5,BVr),e(xe,IVr),e(xe,N5),e(N5,i5e),e(i5e,NVr),e(N5,qVr),e(N5,kee),e(kee,jVr),e(N5,DVr),e(xe,GVr),e(xe,q5),e(q5,d5e),e(d5e,OVr),e(q5,VVr),e(q5,See),e(See,XVr),e(q5,zVr),e(xe,QVr),e(xe,j5),e(j5,c5e),e(c5e,WVr),e(j5,HVr),e(j5,Ree),e(Ree,UVr),e(j5,JVr),e(xe,YVr),e(xe,D5),e(D5,f5e),e(f5e,KVr),e(D5,ZVr),e(D5,Pee),e(Pee,eXr),e(D5,oXr),e(xe,rXr),e(xe,G5),e(G5,m5e),e(m5e,tXr),e(G5,aXr),e(G5,Bee),e(Bee,nXr),e(G5,sXr),e(xe,lXr),e(xe,O5),e(O5,g5e),e(g5e,iXr),e(O5,dXr),e(O5,Iee),e(Iee,cXr),e(O5,fXr),e(Xr,mXr),M(V5,Xr,null),b(f,Xze,u),b(f,ef,u),e(ef,X5),e(X5,h5e),M(v$,h5e,null),e(ef,gXr),e(ef,p5e),e(p5e,hXr),b(f,zze,u),b(f,ur,u),M(F$,ur,null),e(ur,pXr),e(ur,of),e(of,_Xr),e(of,Nee),e(Nee,uXr),e(of,bXr),e(of,qee),e(qee,vXr),e(of,FXr),e(ur,TXr),e(ur,T$),e(T$,MXr),e(T$,_5e),e(_5e,EXr),e(T$,CXr),e(ur,wXr),e(ur,Ht),M(M$,Ht,null),e(Ht,AXr),e(Ht,u5e),e(u5e,LXr),e(Ht,yXr),e(Ht,rf),e(rf,xXr),e(rf,b5e),e(b5e,$Xr),e(rf,kXr),e(rf,jee),e(jee,SXr),e(rf,RXr),e(Ht,PXr),M(z5,Ht,null),e(ur,BXr),e(ur,zr),M(E$,zr,null),e(zr,IXr),e(zr,v5e),e(v5e,NXr),e(zr,qXr),e(zr,En),e(En,jXr),e(En,F5e),e(F5e,DXr),e(En,GXr),e(En,T5e),e(T5e,OXr),e(En,VXr),e(En,M5e),e(M5e,XXr),e(En,zXr),e(zr,QXr),e(zr,Ee),e(Ee,Q5),e(Q5,E5e),e(E5e,WXr),e(Q5,HXr),e(Q5,Dee),e(Dee,UXr),e(Q5,JXr),e(Ee,YXr),e(Ee,W5),e(W5,C5e),e(C5e,KXr),e(W5,ZXr),e(W5,Gee),e(Gee,ezr),e(W5,ozr),e(Ee,rzr),e(Ee,H5),e(H5,w5e),e(w5e,tzr),e(H5,azr),e(H5,Oee),e(Oee,nzr),e(H5,szr),e(Ee,lzr),e(Ee,U5),e(U5,A5e),e(A5e,izr),e(U5,dzr),e(U5,Vee),e(Vee,czr),e(U5,fzr),e(Ee,mzr),e(Ee,J5),e(J5,L5e),e(L5e,gzr),e(J5,hzr),e(J5,Xee),e(Xee,pzr),e(J5,_zr),e(Ee,uzr),e(Ee,Y5),e(Y5,y5e),e(y5e,bzr),e(Y5,vzr),e(Y5,zee),e(zee,Fzr),e(Y5,Tzr),e(Ee,Mzr),e(Ee,K5),e(K5,x5e),e(x5e,Ezr),e(K5,Czr),e(K5,Qee),e(Qee,wzr),e(K5,Azr),e(Ee,Lzr),e(Ee,Z5),e(Z5,$5e),e($5e,yzr),e(Z5,xzr),e(Z5,Wee),e(Wee,$zr),e(Z5,kzr),e(Ee,Szr),e(Ee,e0),e(e0,k5e),e(k5e,Rzr),e(e0,Pzr),e(e0,Hee),e(Hee,Bzr),e(e0,Izr),e(Ee,Nzr),e(Ee,o0),e(o0,S5e),e(S5e,qzr),e(o0,jzr),e(o0,Uee),e(Uee,Dzr),e(o0,Gzr),e(Ee,Ozr),e(Ee,r0),e(r0,R5e),e(R5e,Vzr),e(r0,Xzr),e(r0,Jee),e(Jee,zzr),e(r0,Qzr),e(Ee,Wzr),e(Ee,t0),e(t0,P5e),e(P5e,Hzr),e(t0,Uzr),e(t0,Yee),e(Yee,Jzr),e(t0,Yzr),e(Ee,Kzr),e(Ee,a0),e(a0,B5e),e(B5e,Zzr),e(a0,eQr),e(a0,Kee),e(Kee,oQr),e(a0,rQr),e(zr,tQr),M(n0,zr,null),b(f,Qze,u),b(f,tf,u),e(tf,s0),e(s0,I5e),M(C$,I5e,null),e(tf,aQr),e(tf,N5e),e(N5e,nQr),b(f,Wze,u),b(f,br,u),M(w$,br,null),e(br,sQr),e(br,af),e(af,lQr),e(af,Zee),e(Zee,iQr),e(af,dQr),e(af,eoe),e(eoe,cQr),e(af,fQr),e(br,mQr),e(br,A$),e(A$,gQr),e(A$,q5e),e(q5e,hQr),e(A$,pQr),e(br,_Qr),e(br,Ut),M(L$,Ut,null),e(Ut,uQr),e(Ut,j5e),e(j5e,bQr),e(Ut,vQr),e(Ut,nf),e(nf,FQr),e(nf,D5e),e(D5e,TQr),e(nf,MQr),e(nf,ooe),e(ooe,EQr),e(nf,CQr),e(Ut,wQr),M(l0,Ut,null),e(br,AQr),e(br,Qr),M(y$,Qr,null),e(Qr,LQr),e(Qr,G5e),e(G5e,yQr),e(Qr,xQr),e(Qr,Cn),e(Cn,$Qr),e(Cn,O5e),e(O5e,kQr),e(Cn,SQr),e(Cn,V5e),e(V5e,RQr),e(Cn,PQr),e(Cn,X5e),e(X5e,BQr),e(Cn,IQr),e(Qr,NQr),e(Qr,$e),e($e,i0),e(i0,z5e),e(z5e,qQr),e(i0,jQr),e(i0,roe),e(roe,DQr),e(i0,GQr),e($e,OQr),e($e,d0),e(d0,Q5e),e(Q5e,VQr),e(d0,XQr),e(d0,toe),e(toe,zQr),e(d0,QQr),e($e,WQr),e($e,c0),e(c0,W5e),e(W5e,HQr),e(c0,UQr),e(c0,aoe),e(aoe,JQr),e(c0,YQr),e($e,KQr),e($e,f0),e(f0,H5e),e(H5e,ZQr),e(f0,eWr),e(f0,noe),e(noe,oWr),e(f0,rWr),e($e,tWr),e($e,m0),e(m0,U5e),e(U5e,aWr),e(m0,nWr),e(m0,soe),e(soe,sWr),e(m0,lWr),e($e,iWr),e($e,g0),e(g0,J5e),e(J5e,dWr),e(g0,cWr),e(g0,loe),e(loe,fWr),e(g0,mWr),e($e,gWr),e($e,h0),e(h0,Y5e),e(Y5e,hWr),e(h0,pWr),e(h0,ioe),e(ioe,_Wr),e(h0,uWr),e($e,bWr),e($e,p0),e(p0,K5e),e(K5e,vWr),e(p0,FWr),e(p0,doe),e(doe,TWr),e(p0,MWr),e($e,EWr),e($e,_0),e(_0,Z5e),e(Z5e,CWr),e(_0,wWr),e(_0,coe),e(coe,AWr),e(_0,LWr),e($e,yWr),e($e,u0),e(u0,e0e),e(e0e,xWr),e(u0,$Wr),e(u0,foe),e(foe,kWr),e(u0,SWr),e(Qr,RWr),M(b0,Qr,null),b(f,Hze,u),b(f,sf,u),e(sf,v0),e(v0,o0e),M(x$,o0e,null),e(sf,PWr),e(sf,r0e),e(r0e,BWr),b(f,Uze,u),b(f,vr,u),M($$,vr,null),e(vr,IWr),e(vr,lf),e(lf,NWr),e(lf,moe),e(moe,qWr),e(lf,jWr),e(lf,goe),e(goe,DWr),e(lf,GWr),e(vr,OWr),e(vr,k$),e(k$,VWr),e(k$,t0e),e(t0e,XWr),e(k$,zWr),e(vr,QWr),e(vr,Jt),M(S$,Jt,null),e(Jt,WWr),e(Jt,a0e),e(a0e,HWr),e(Jt,UWr),e(Jt,df),e(df,JWr),e(df,n0e),e(n0e,YWr),e(df,KWr),e(df,hoe),e(hoe,ZWr),e(df,eHr),e(Jt,oHr),M(F0,Jt,null),e(vr,rHr),e(vr,Wr),M(R$,Wr,null),e(Wr,tHr),e(Wr,s0e),e(s0e,aHr),e(Wr,nHr),e(Wr,wn),e(wn,sHr),e(wn,l0e),e(l0e,lHr),e(wn,iHr),e(wn,i0e),e(i0e,dHr),e(wn,cHr),e(wn,d0e),e(d0e,fHr),e(wn,mHr),e(Wr,gHr),e(Wr,ke),e(ke,T0),e(T0,c0e),e(c0e,hHr),e(T0,pHr),e(T0,poe),e(poe,_Hr),e(T0,uHr),e(ke,bHr),e(ke,M0),e(M0,f0e),e(f0e,vHr),e(M0,FHr),e(M0,_oe),e(_oe,THr),e(M0,MHr),e(ke,EHr),e(ke,E0),e(E0,m0e),e(m0e,CHr),e(E0,wHr),e(E0,uoe),e(uoe,AHr),e(E0,LHr),e(ke,yHr),e(ke,C0),e(C0,g0e),e(g0e,xHr),e(C0,$Hr),e(C0,boe),e(boe,kHr),e(C0,SHr),e(ke,RHr),e(ke,w0),e(w0,h0e),e(h0e,PHr),e(w0,BHr),e(w0,voe),e(voe,IHr),e(w0,NHr),e(ke,qHr),e(ke,A0),e(A0,p0e),e(p0e,jHr),e(A0,DHr),e(A0,Foe),e(Foe,GHr),e(A0,OHr),e(ke,VHr),e(ke,L0),e(L0,_0e),e(_0e,XHr),e(L0,zHr),e(L0,Toe),e(Toe,QHr),e(L0,WHr),e(ke,HHr),e(ke,y0),e(y0,u0e),e(u0e,UHr),e(y0,JHr),e(y0,Moe),e(Moe,YHr),e(y0,KHr),e(ke,ZHr),e(ke,x0),e(x0,b0e),e(b0e,eUr),e(x0,oUr),e(x0,Eoe),e(Eoe,rUr),e(x0,tUr),e(ke,aUr),e(ke,$0),e($0,v0e),e(v0e,nUr),e($0,sUr),e($0,Coe),e(Coe,lUr),e($0,iUr),e(Wr,dUr),M(k0,Wr,null),b(f,Jze,u),b(f,cf,u),e(cf,S0),e(S0,F0e),M(P$,F0e,null),e(cf,cUr),e(cf,T0e),e(T0e,fUr),b(f,Yze,u),b(f,Fr,u),M(B$,Fr,null),e(Fr,mUr),e(Fr,ff),e(ff,gUr),e(ff,woe),e(woe,hUr),e(ff,pUr),e(ff,Aoe),e(Aoe,_Ur),e(ff,uUr),e(Fr,bUr),e(Fr,I$),e(I$,vUr),e(I$,M0e),e(M0e,FUr),e(I$,TUr),e(Fr,MUr),e(Fr,Yt),M(N$,Yt,null),e(Yt,EUr),e(Yt,E0e),e(E0e,CUr),e(Yt,wUr),e(Yt,mf),e(mf,AUr),e(mf,C0e),e(C0e,LUr),e(mf,yUr),e(mf,Loe),e(Loe,xUr),e(mf,$Ur),e(Yt,kUr),M(R0,Yt,null),e(Fr,SUr),e(Fr,Hr),M(q$,Hr,null),e(Hr,RUr),e(Hr,w0e),e(w0e,PUr),e(Hr,BUr),e(Hr,An),e(An,IUr),e(An,A0e),e(A0e,NUr),e(An,qUr),e(An,L0e),e(L0e,jUr),e(An,DUr),e(An,y0e),e(y0e,GUr),e(An,OUr),e(Hr,VUr),e(Hr,Se),e(Se,P0),e(P0,x0e),e(x0e,XUr),e(P0,zUr),e(P0,yoe),e(yoe,QUr),e(P0,WUr),e(Se,HUr),e(Se,B0),e(B0,$0e),e($0e,UUr),e(B0,JUr),e(B0,xoe),e(xoe,YUr),e(B0,KUr),e(Se,ZUr),e(Se,I0),e(I0,k0e),e(k0e,eJr),e(I0,oJr),e(I0,$oe),e($oe,rJr),e(I0,tJr),e(Se,aJr),e(Se,N0),e(N0,S0e),e(S0e,nJr),e(N0,sJr),e(N0,koe),e(koe,lJr),e(N0,iJr),e(Se,dJr),e(Se,q0),e(q0,R0e),e(R0e,cJr),e(q0,fJr),e(q0,Soe),e(Soe,mJr),e(q0,gJr),e(Se,hJr),e(Se,j0),e(j0,P0e),e(P0e,pJr),e(j0,_Jr),e(j0,Roe),e(Roe,uJr),e(j0,bJr),e(Se,vJr),e(Se,D0),e(D0,B0e),e(B0e,FJr),e(D0,TJr),e(D0,Poe),e(Poe,MJr),e(D0,EJr),e(Se,CJr),e(Se,G0),e(G0,I0e),e(I0e,wJr),e(G0,AJr),e(G0,Boe),e(Boe,LJr),e(G0,yJr),e(Se,xJr),e(Se,O0),e(O0,N0e),e(N0e,$Jr),e(O0,kJr),e(O0,Ioe),e(Ioe,SJr),e(O0,RJr),e(Se,PJr),e(Se,V0),e(V0,q0e),e(q0e,BJr),e(V0,IJr),e(V0,Noe),e(Noe,NJr),e(V0,qJr),e(Hr,jJr),M(X0,Hr,null),b(f,Kze,u),b(f,gf,u),e(gf,z0),e(z0,j0e),M(j$,j0e,null),e(gf,DJr),e(gf,D0e),e(D0e,GJr),b(f,Zze,u),b(f,Tr,u),M(D$,Tr,null),e(Tr,OJr),e(Tr,hf),e(hf,VJr),e(hf,qoe),e(qoe,XJr),e(hf,zJr),e(hf,joe),e(joe,QJr),e(hf,WJr),e(Tr,HJr),e(Tr,G$),e(G$,UJr),e(G$,G0e),e(G0e,JJr),e(G$,YJr),e(Tr,KJr),e(Tr,Kt),M(O$,Kt,null),e(Kt,ZJr),e(Kt,O0e),e(O0e,eYr),e(Kt,oYr),e(Kt,pf),e(pf,rYr),e(pf,V0e),e(V0e,tYr),e(pf,aYr),e(pf,Doe),e(Doe,nYr),e(pf,sYr),e(Kt,lYr),M(Q0,Kt,null),e(Tr,iYr),e(Tr,Ur),M(V$,Ur,null),e(Ur,dYr),e(Ur,X0e),e(X0e,cYr),e(Ur,fYr),e(Ur,Ln),e(Ln,mYr),e(Ln,z0e),e(z0e,gYr),e(Ln,hYr),e(Ln,Q0e),e(Q0e,pYr),e(Ln,_Yr),e(Ln,W0e),e(W0e,uYr),e(Ln,bYr),e(Ur,vYr),e(Ur,Re),e(Re,W0),e(W0,H0e),e(H0e,FYr),e(W0,TYr),e(W0,Goe),e(Goe,MYr),e(W0,EYr),e(Re,CYr),e(Re,H0),e(H0,U0e),e(U0e,wYr),e(H0,AYr),e(H0,Ooe),e(Ooe,LYr),e(H0,yYr),e(Re,xYr),e(Re,U0),e(U0,J0e),e(J0e,$Yr),e(U0,kYr),e(U0,Voe),e(Voe,SYr),e(U0,RYr),e(Re,PYr),e(Re,J0),e(J0,Y0e),e(Y0e,BYr),e(J0,IYr),e(J0,Xoe),e(Xoe,NYr),e(J0,qYr),e(Re,jYr),e(Re,Y0),e(Y0,K0e),e(K0e,DYr),e(Y0,GYr),e(Y0,zoe),e(zoe,OYr),e(Y0,VYr),e(Re,XYr),e(Re,K0),e(K0,Z0e),e(Z0e,zYr),e(K0,QYr),e(K0,Qoe),e(Qoe,WYr),e(K0,HYr),e(Re,UYr),e(Re,Z0),e(Z0,ewe),e(ewe,JYr),e(Z0,YYr),e(Z0,Woe),e(Woe,KYr),e(Z0,ZYr),e(Re,eKr),e(Re,ew),e(ew,owe),e(owe,oKr),e(ew,rKr),e(ew,Hoe),e(Hoe,tKr),e(ew,aKr),e(Re,nKr),e(Re,ow),e(ow,rwe),e(rwe,sKr),e(ow,lKr),e(ow,Uoe),e(Uoe,iKr),e(ow,dKr),e(Re,cKr),e(Re,rw),e(rw,twe),e(twe,fKr),e(rw,mKr),e(rw,Joe),e(Joe,gKr),e(rw,hKr),e(Ur,pKr),M(tw,Ur,null),b(f,eQe,u),b(f,_f,u),e(_f,aw),e(aw,awe),M(X$,awe,null),e(_f,_Kr),e(_f,nwe),e(nwe,uKr),b(f,oQe,u),b(f,Mr,u),M(z$,Mr,null),e(Mr,bKr),e(Mr,uf),e(uf,vKr),e(uf,Yoe),e(Yoe,FKr),e(uf,TKr),e(uf,Koe),e(Koe,MKr),e(uf,EKr),e(Mr,CKr),e(Mr,Q$),e(Q$,wKr),e(Q$,swe),e(swe,AKr),e(Q$,LKr),e(Mr,yKr),e(Mr,Zt),M(W$,Zt,null),e(Zt,xKr),e(Zt,lwe),e(lwe,$Kr),e(Zt,kKr),e(Zt,bf),e(bf,SKr),e(bf,iwe),e(iwe,RKr),e(bf,PKr),e(bf,Zoe),e(Zoe,BKr),e(bf,IKr),e(Zt,NKr),M(nw,Zt,null),e(Mr,qKr),e(Mr,Jr),M(H$,Jr,null),e(Jr,jKr),e(Jr,dwe),e(dwe,DKr),e(Jr,GKr),e(Jr,yn),e(yn,OKr),e(yn,cwe),e(cwe,VKr),e(yn,XKr),e(yn,fwe),e(fwe,zKr),e(yn,QKr),e(yn,mwe),e(mwe,WKr),e(yn,HKr),e(Jr,UKr),e(Jr,Ve),e(Ve,sw),e(sw,gwe),e(gwe,JKr),e(sw,YKr),e(sw,ere),e(ere,KKr),e(sw,ZKr),e(Ve,eZr),e(Ve,lw),e(lw,hwe),e(hwe,oZr),e(lw,rZr),e(lw,ore),e(ore,tZr),e(lw,aZr),e(Ve,nZr),e(Ve,iw),e(iw,pwe),e(pwe,sZr),e(iw,lZr),e(iw,rre),e(rre,iZr),e(iw,dZr),e(Ve,cZr),e(Ve,dw),e(dw,_we),e(_we,fZr),e(dw,mZr),e(dw,tre),e(tre,gZr),e(dw,hZr),e(Ve,pZr),e(Ve,cw),e(cw,uwe),e(uwe,_Zr),e(cw,uZr),e(cw,are),e(are,bZr),e(cw,vZr),e(Ve,FZr),e(Ve,fw),e(fw,bwe),e(bwe,TZr),e(fw,MZr),e(fw,nre),e(nre,EZr),e(fw,CZr),e(Ve,wZr),e(Ve,mw),e(mw,vwe),e(vwe,AZr),e(mw,LZr),e(mw,sre),e(sre,yZr),e(mw,xZr),e(Ve,$Zr),e(Ve,gw),e(gw,Fwe),e(Fwe,kZr),e(gw,SZr),e(gw,lre),e(lre,RZr),e(gw,PZr),e(Jr,BZr),M(hw,Jr,null),b(f,rQe,u),b(f,vf,u),e(vf,pw),e(pw,Twe),M(U$,Twe,null),e(vf,IZr),e(vf,Mwe),e(Mwe,NZr),b(f,tQe,u),b(f,Er,u),M(J$,Er,null),e(Er,qZr),e(Er,Ff),e(Ff,jZr),e(Ff,ire),e(ire,DZr),e(Ff,GZr),e(Ff,dre),e(dre,OZr),e(Ff,VZr),e(Er,XZr),e(Er,Y$),e(Y$,zZr),e(Y$,Ewe),e(Ewe,QZr),e(Y$,WZr),e(Er,HZr),e(Er,ea),M(K$,ea,null),e(ea,UZr),e(ea,Cwe),e(Cwe,JZr),e(ea,YZr),e(ea,Tf),e(Tf,KZr),e(Tf,wwe),e(wwe,ZZr),e(Tf,eet),e(Tf,cre),e(cre,oet),e(Tf,ret),e(ea,tet),M(_w,ea,null),e(Er,aet),e(Er,Yr),M(Z$,Yr,null),e(Yr,net),e(Yr,Awe),e(Awe,set),e(Yr,iet),e(Yr,xn),e(xn,det),e(xn,Lwe),e(Lwe,cet),e(xn,fet),e(xn,ywe),e(ywe,met),e(xn,get),e(xn,xwe),e(xwe,het),e(xn,pet),e(Yr,_et),e(Yr,Xe),e(Xe,uw),e(uw,$we),e($we,uet),e(uw,bet),e(uw,fre),e(fre,vet),e(uw,Fet),e(Xe,Tet),e(Xe,bw),e(bw,kwe),e(kwe,Met),e(bw,Eet),e(bw,mre),e(mre,Cet),e(bw,wet),e(Xe,Aet),e(Xe,vw),e(vw,Swe),e(Swe,Let),e(vw,yet),e(vw,gre),e(gre,xet),e(vw,$et),e(Xe,ket),e(Xe,Fw),e(Fw,Rwe),e(Rwe,Set),e(Fw,Ret),e(Fw,hre),e(hre,Pet),e(Fw,Bet),e(Xe,Iet),e(Xe,Tw),e(Tw,Pwe),e(Pwe,Net),e(Tw,qet),e(Tw,pre),e(pre,jet),e(Tw,Det),e(Xe,Get),e(Xe,Mw),e(Mw,Bwe),e(Bwe,Oet),e(Mw,Vet),e(Mw,_re),e(_re,Xet),e(Mw,zet),e(Xe,Qet),e(Xe,Ew),e(Ew,Iwe),e(Iwe,Wet),e(Ew,Het),e(Ew,ure),e(ure,Uet),e(Ew,Jet),e(Xe,Yet),e(Xe,Cw),e(Cw,Nwe),e(Nwe,Ket),e(Cw,Zet),e(Cw,bre),e(bre,eot),e(Cw,oot),e(Yr,rot),M(ww,Yr,null),b(f,aQe,u),b(f,Mf,u),e(Mf,Aw),e(Aw,qwe),M(ek,qwe,null),e(Mf,tot),e(Mf,jwe),e(jwe,aot),b(f,nQe,u),b(f,Cr,u),M(ok,Cr,null),e(Cr,not),e(Cr,Ef),e(Ef,sot),e(Ef,vre),e(vre,lot),e(Ef,iot),e(Ef,Fre),e(Fre,dot),e(Ef,cot),e(Cr,fot),e(Cr,rk),e(rk,mot),e(rk,Dwe),e(Dwe,got),e(rk,hot),e(Cr,pot),e(Cr,oa),M(tk,oa,null),e(oa,_ot),e(oa,Gwe),e(Gwe,uot),e(oa,bot),e(oa,Cf),e(Cf,vot),e(Cf,Owe),e(Owe,Fot),e(Cf,Tot),e(Cf,Tre),e(Tre,Mot),e(Cf,Eot),e(oa,Cot),M(Lw,oa,null),e(Cr,wot),e(Cr,Kr),M(ak,Kr,null),e(Kr,Aot),e(Kr,Vwe),e(Vwe,Lot),e(Kr,yot),e(Kr,$n),e($n,xot),e($n,Xwe),e(Xwe,$ot),e($n,kot),e($n,zwe),e(zwe,Sot),e($n,Rot),e($n,Qwe),e(Qwe,Pot),e($n,Bot),e(Kr,Iot),e(Kr,Wwe),e(Wwe,yw),e(yw,Hwe),e(Hwe,Not),e(yw,qot),e(yw,Mre),e(Mre,jot),e(yw,Dot),e(Kr,Got),M(xw,Kr,null),b(f,sQe,u),b(f,wf,u),e(wf,$w),e($w,Uwe),M(nk,Uwe,null),e(wf,Oot),e(wf,Jwe),e(Jwe,Vot),b(f,lQe,u),b(f,wr,u),M(sk,wr,null),e(wr,Xot),e(wr,Af),e(Af,zot),e(Af,Ere),e(Ere,Qot),e(Af,Wot),e(Af,Cre),e(Cre,Hot),e(Af,Uot),e(wr,Jot),e(wr,lk),e(lk,Yot),e(lk,Ywe),e(Ywe,Kot),e(lk,Zot),e(wr,ert),e(wr,ra),M(ik,ra,null),e(ra,ort),e(ra,Kwe),e(Kwe,rrt),e(ra,trt),e(ra,Lf),e(Lf,art),e(Lf,Zwe),e(Zwe,nrt),e(Lf,srt),e(Lf,wre),e(wre,lrt),e(Lf,irt),e(ra,drt),M(kw,ra,null),e(wr,crt),e(wr,Zr),M(dk,Zr,null),e(Zr,frt),e(Zr,eAe),e(eAe,mrt),e(Zr,grt),e(Zr,kn),e(kn,hrt),e(kn,oAe),e(oAe,prt),e(kn,_rt),e(kn,rAe),e(rAe,urt),e(kn,brt),e(kn,tAe),e(tAe,vrt),e(kn,Frt),e(Zr,Trt),e(Zr,ck),e(ck,Sw),e(Sw,aAe),e(aAe,Mrt),e(Sw,Ert),e(Sw,Are),e(Are,Crt),e(Sw,wrt),e(ck,Art),e(ck,Rw),e(Rw,nAe),e(nAe,Lrt),e(Rw,yrt),e(Rw,Lre),e(Lre,xrt),e(Rw,$rt),e(Zr,krt),M(Pw,Zr,null),b(f,iQe,u),b(f,yf,u),e(yf,Bw),e(Bw,sAe),M(fk,sAe,null),e(yf,Srt),e(yf,lAe),e(lAe,Rrt),b(f,dQe,u),b(f,Ar,u),M(mk,Ar,null),e(Ar,Prt),e(Ar,xf),e(xf,Brt),e(xf,yre),e(yre,Irt),e(xf,Nrt),e(xf,xre),e(xre,qrt),e(xf,jrt),e(Ar,Drt),e(Ar,gk),e(gk,Grt),e(gk,iAe),e(iAe,Ort),e(gk,Vrt),e(Ar,Xrt),e(Ar,ta),M(hk,ta,null),e(ta,zrt),e(ta,dAe),e(dAe,Qrt),e(ta,Wrt),e(ta,$f),e($f,Hrt),e($f,cAe),e(cAe,Urt),e($f,Jrt),e($f,$re),e($re,Yrt),e($f,Krt),e(ta,Zrt),M(Iw,ta,null),e(Ar,ett),e(Ar,et),M(pk,et,null),e(et,ott),e(et,fAe),e(fAe,rtt),e(et,ttt),e(et,Sn),e(Sn,att),e(Sn,mAe),e(mAe,ntt),e(Sn,stt),e(Sn,gAe),e(gAe,ltt),e(Sn,itt),e(Sn,hAe),e(hAe,dtt),e(Sn,ctt),e(et,ftt),e(et,pAe),e(pAe,Nw),e(Nw,_Ae),e(_Ae,mtt),e(Nw,gtt),e(Nw,kre),e(kre,htt),e(Nw,ptt),e(et,_tt),M(qw,et,null),cQe=!0},p(f,[u]){const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),jf.$set(_k);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),Kg.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Ph.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),bp.$set(vAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),vp.$set(uk);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),Dp.$set(FAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Gp.$set(Rn);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),Xp.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),Uu.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),Yu.$set(EAe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),X1.$set(bk);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),Q1.$set(CAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),P2.$set(vk);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),I2.$set(wAe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),Mb.$set(Fk);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),Cb.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),Xb.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),Qb.$set(yAe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),Xv.$set(kf);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),Qv.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),CF.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),AF.$set(kAe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),PF.$set(Tk);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),IF.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),FT.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),MT.$set(PAe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),m7.$set(at);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),h7.$set(Mk);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),u7.$set(BAe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),v7.$set(Ek);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),P7.$set(IAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),I7.$set(nt);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),j7.$set(NAe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),G7.$set(Sf);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),X7.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),Q7.$set(jAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),t8.$set(L);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),n8.$set(jw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),m8.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),h8.$set(GAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),A8.$set(Dw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),y8.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),S8.$set(VAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),P8.$set(Gw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),G8.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),V8.$set(zAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),H8.$set(Ow);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),J8.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),oM.$set(WAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),tM.$set(Vw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),sM.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),iM.$set(UAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),pM.$set(Xw);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),uM.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),FM.$set(YAe);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),MM.$set(zw);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),u4.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),v4.$set(ZAe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),V4.$set(Qw);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),z4.$set(e6e);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),nE.$set(o6e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),lE.$set(Ww);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),hE.$set(r6e);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),_E.$set(t6e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),NE.$set(Hw);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),jE.$set(a6e);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),JE.$set(n6e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),KE.$set(Uw);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),wC.$set(s6e);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),LC.$set(l6e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),zC.$set(Jw);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),WC.$set(i6e);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),JC.$set(d6e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),KC.$set(Yw);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),e3.$set(c6e);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),r3.$set(f6e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),E3.$set(Kw);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),w3.$set(m6e);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),Q3.$set(g6e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),H3.$set(Zw);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),J3.$set(h6e);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),K3.$set(p6e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),e5.$set(eA);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),r5.$set(_6e);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),$5.$set(u6e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),S5.$set(oA);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),V5.$set(b6e);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),z5.$set(v6e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),n0.$set(rA);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),l0.$set(F6e);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),b0.$set(T6e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),F0.$set(tA);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),k0.$set(M6e);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),R0.$set(E6e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),X0.$set(aA);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),Q0.$set(C6e);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),tw.$set(w6e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),nw.$set(nA);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),hw.$set(A6e);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),_w.$set(L6e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),ww.$set(sA);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),Lw.$set(y6e);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),xw.$set(x6e);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),kw.$set(lA);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),Pw.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),Iw.$set(k6e);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),qw.$set(iA)},i(f){cQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(jf.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(gL.$$.fragment,f),E(Kg.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(Ph.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(wL.$$.fragment,f),E(bp.$$.fragment,f),E(vp.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(kL.$$.fragment,f),E(Dp.$$.fragment,f),E(Gp.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(Xp.$$.fragment,f),E(NL.$$.fragment,f),E(Uu.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(Yu.$$.fragment,f),E(OL.$$.fragment,f),E(X1.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(Q1.$$.fragment,f),E(WL.$$.fragment,f),E(P2.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(I2.$$.fragment,f),E(KL.$$.fragment,f),E(Mb.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(Cb.$$.fragment,f),E(ty.$$.fragment,f),E(Xb.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Qb.$$.fragment,f),E(iy.$$.fragment,f),E(Xv.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Qv.$$.fragment,f),E(gy.$$.fragment,f),E(CF.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(AF.$$.fragment,f),E(by.$$.fragment,f),E(PF.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(IF.$$.fragment,f),E(Ey.$$.fragment,f),E(FT.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(MT.$$.fragment,f),E(yy.$$.fragment,f),E(m7.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(h7.$$.fragment,f),E(Ry.$$.fragment,f),E(u7.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(v7.$$.fragment,f),E(qy.$$.fragment,f),E(P7.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(I7.$$.fragment,f),E(Vy.$$.fragment,f),E(j7.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(G7.$$.fragment,f),E(Hy.$$.fragment,f),E(X7.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(Q7.$$.fragment,f),E(Zy.$$.fragment,f),E(t8.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(n8.$$.fragment,f),E(a9.$$.fragment,f),E(m8.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(h8.$$.fragment,f),E(d9.$$.fragment,f),E(A8.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(y8.$$.fragment,f),E(h9.$$.fragment,f),E(S8.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(P8.$$.fragment,f),E(F9.$$.fragment,f),E(G8.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(V8.$$.fragment,f),E(w9.$$.fragment,f),E(H8.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(J8.$$.fragment,f),E($9.$$.fragment,f),E(oM.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(tM.$$.fragment,f),E(B9.$$.fragment,f),E(sM.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(iM.$$.fragment,f),E(D9.$$.fragment,f),E(pM.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(uM.$$.fragment,f),E(z9.$$.fragment,f),E(FM.$$.fragment,f),E(Q9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(MM.$$.fragment,f),E(J9.$$.fragment,f),E(u4.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(v4.$$.fragment,f),E(ox.$$.fragment,f),E(V4.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(z4.$$.fragment,f),E(sx.$$.fragment,f),E(nE.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(lE.$$.fragment,f),E(fx.$$.fragment,f),E(hE.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(_E.$$.fragment,f),E(_x.$$.fragment,f),E(NE.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(jE.$$.fragment,f),E(Tx.$$.fragment,f),E(JE.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(KE.$$.fragment,f),E(Ax.$$.fragment,f),E(wC.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(LC.$$.fragment,f),E(kx.$$.fragment,f),E(zC.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(WC.$$.fragment,f),E(Ix.$$.fragment,f),E(JC.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(KC.$$.fragment,f),E(Ox.$$.fragment,f),E(e3.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(r3.$$.fragment,f),E(Wx.$$.fragment,f),E(E3.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(w3.$$.fragment,f),E(Kx.$$.fragment,f),E(Q3.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(H3.$$.fragment,f),E(t$.$$.fragment,f),E(J3.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(K3.$$.fragment,f),E(i$.$$.fragment,f),E(e5.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(r5.$$.fragment,f),E(g$.$$.fragment,f),E($5.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(S5.$$.fragment,f),E(b$.$$.fragment,f),E(V5.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(z5.$$.fragment,f),E(E$.$$.fragment,f),E(n0.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(l0.$$.fragment,f),E(y$.$$.fragment,f),E(b0.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(F0.$$.fragment,f),E(R$.$$.fragment,f),E(k0.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(R0.$$.fragment,f),E(q$.$$.fragment,f),E(X0.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(Q0.$$.fragment,f),E(V$.$$.fragment,f),E(tw.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(nw.$$.fragment,f),E(H$.$$.fragment,f),E(hw.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(_w.$$.fragment,f),E(Z$.$$.fragment,f),E(ww.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(Lw.$$.fragment,f),E(ak.$$.fragment,f),E(xw.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(kw.$$.fragment,f),E(dk.$$.fragment,f),E(Pw.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(Iw.$$.fragment,f),E(pk.$$.fragment,f),E(qw.$$.fragment,f),cQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(jf.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(gL.$$.fragment,f),C(Kg.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(Ph.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(wL.$$.fragment,f),C(bp.$$.fragment,f),C(vp.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(kL.$$.fragment,f),C(Dp.$$.fragment,f),C(Gp.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(Xp.$$.fragment,f),C(NL.$$.fragment,f),C(Uu.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(Yu.$$.fragment,f),C(OL.$$.fragment,f),C(X1.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(Q1.$$.fragment,f),C(WL.$$.fragment,f),C(P2.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(I2.$$.fragment,f),C(KL.$$.fragment,f),C(Mb.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(Cb.$$.fragment,f),C(ty.$$.fragment,f),C(Xb.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Qb.$$.fragment,f),C(iy.$$.fragment,f),C(Xv.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Qv.$$.fragment,f),C(gy.$$.fragment,f),C(CF.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(AF.$$.fragment,f),C(by.$$.fragment,f),C(PF.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(IF.$$.fragment,f),C(Ey.$$.fragment,f),C(FT.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(MT.$$.fragment,f),C(yy.$$.fragment,f),C(m7.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(h7.$$.fragment,f),C(Ry.$$.fragment,f),C(u7.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(v7.$$.fragment,f),C(qy.$$.fragment,f),C(P7.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(I7.$$.fragment,f),C(Vy.$$.fragment,f),C(j7.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(G7.$$.fragment,f),C(Hy.$$.fragment,f),C(X7.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(Q7.$$.fragment,f),C(Zy.$$.fragment,f),C(t8.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(n8.$$.fragment,f),C(a9.$$.fragment,f),C(m8.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(h8.$$.fragment,f),C(d9.$$.fragment,f),C(A8.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(y8.$$.fragment,f),C(h9.$$.fragment,f),C(S8.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(P8.$$.fragment,f),C(F9.$$.fragment,f),C(G8.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(V8.$$.fragment,f),C(w9.$$.fragment,f),C(H8.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(J8.$$.fragment,f),C($9.$$.fragment,f),C(oM.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(tM.$$.fragment,f),C(B9.$$.fragment,f),C(sM.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(iM.$$.fragment,f),C(D9.$$.fragment,f),C(pM.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(uM.$$.fragment,f),C(z9.$$.fragment,f),C(FM.$$.fragment,f),C(Q9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(MM.$$.fragment,f),C(J9.$$.fragment,f),C(u4.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(v4.$$.fragment,f),C(ox.$$.fragment,f),C(V4.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(z4.$$.fragment,f),C(sx.$$.fragment,f),C(nE.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(lE.$$.fragment,f),C(fx.$$.fragment,f),C(hE.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(_E.$$.fragment,f),C(_x.$$.fragment,f),C(NE.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(jE.$$.fragment,f),C(Tx.$$.fragment,f),C(JE.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(KE.$$.fragment,f),C(Ax.$$.fragment,f),C(wC.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(LC.$$.fragment,f),C(kx.$$.fragment,f),C(zC.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(WC.$$.fragment,f),C(Ix.$$.fragment,f),C(JC.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(KC.$$.fragment,f),C(Ox.$$.fragment,f),C(e3.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(r3.$$.fragment,f),C(Wx.$$.fragment,f),C(E3.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(w3.$$.fragment,f),C(Kx.$$.fragment,f),C(Q3.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(H3.$$.fragment,f),C(t$.$$.fragment,f),C(J3.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(K3.$$.fragment,f),C(i$.$$.fragment,f),C(e5.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(r5.$$.fragment,f),C(g$.$$.fragment,f),C($5.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(S5.$$.fragment,f),C(b$.$$.fragment,f),C(V5.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(z5.$$.fragment,f),C(E$.$$.fragment,f),C(n0.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(l0.$$.fragment,f),C(y$.$$.fragment,f),C(b0.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(F0.$$.fragment,f),C(R$.$$.fragment,f),C(k0.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(R0.$$.fragment,f),C(q$.$$.fragment,f),C(X0.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(Q0.$$.fragment,f),C(V$.$$.fragment,f),C(tw.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(nw.$$.fragment,f),C(H$.$$.fragment,f),C(hw.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(_w.$$.fragment,f),C(Z$.$$.fragment,f),C(ww.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(Lw.$$.fragment,f),C(ak.$$.fragment,f),C(xw.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(kw.$$.fragment,f),C(dk.$$.fragment,f),C(Pw.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(Iw.$$.fragment,f),C(pk.$$.fragment,f),C(qw.$$.fragment,f),cQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(If),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(nXe),f&&t(Ri),w(lL),f&&t(sXe),f&&t(qn),f&&t(lXe),w(iL,f),f&&t(iXe),f&&t(GS),f&&t(dXe),w(jf,f),f&&t(cXe),f&&t(Pi),w(dL),f&&t(fXe),f&&t(wo),w(cL),w(gL),w(Kg),w(hL),f&&t(mXe),f&&t(Ii),w(pL),f&&t(gXe),f&&t(Ao),w(_L),w(vL),w(Ph),w(FL),f&&t(hXe),f&&t(Ni),w(TL),f&&t(pXe),f&&t(Lo),w(ML),w(wL),w(bp),w(vp),w(AL),f&&t(_Xe),f&&t(qi),w(LL),f&&t(uXe),f&&t(yo),w(yL),w(kL),w(Dp),w(Gp),w(SL),f&&t(bXe),f&&t(Di),w(RL),f&&t(vXe),f&&t(xo),w(PL),w(IL),w(Xp),w(NL),w(Uu),f&&t(FXe),f&&t(Vi),w(qL),f&&t(TXe),f&&t($o),w(jL),w(GL),w(Yu),w(OL),w(X1),f&&t(MXe),f&&t(Qi),w(VL),f&&t(EXe),f&&t(ko),w(XL),w(QL),w(Q1),w(WL),w(P2),f&&t(CXe),f&&t(Ui),w(HL),f&&t(wXe),f&&t(So),w(UL),w(YL),w(I2),w(KL),w(Mb),f&&t(AXe),f&&t(Ki),w(ZL),f&&t(LXe),f&&t(Ro),w(ey),w(ry),w(Cb),w(ty),w(Xb),f&&t(yXe),f&&t(od),w(ay),f&&t(xXe),f&&t(Po),w(ny),w(ly),w(Qb),w(iy),w(Xv),f&&t($Xe),f&&t(ad),w(dy),f&&t(kXe),f&&t(Bo),w(cy),w(my),w(Qv),w(gy),w(CF),f&&t(SXe),f&&t(ld),w(hy),f&&t(RXe),f&&t(Io),w(py),w(uy),w(AF),w(by),w(PF),f&&t(PXe),f&&t(cd),w(vy),f&&t(BXe),f&&t(qo),w(Fy),w(My),w(IF),w(Ey),w(FT),f&&t(IXe),f&&t(gd),w(Cy),f&&t(NXe),f&&t(jo),w(wy),w(Ly),w(MT),w(yy),w(m7),f&&t(qXe),f&&t(_d),w(xy),f&&t(jXe),f&&t(Do),w($y),w(Sy),w(h7),w(Ry),w(u7),f&&t(DXe),f&&t(vd),w(Py),f&&t(GXe),f&&t(Go),w(By),w(Ny),w(v7),w(qy),w(P7),f&&t(OXe),f&&t(Md),w(jy),f&&t(VXe),f&&t(Oo),w(Dy),w(Oy),w(I7),w(Vy),w(j7),f&&t(XXe),f&&t(wd),w(Xy),f&&t(zXe),f&&t(Vo),w(zy),w(Wy),w(G7),w(Hy),w(X7),f&&t(QXe),f&&t(yd),w(Uy),f&&t(WXe),f&&t(Xo),w(Jy),w(Ky),w(Q7),w(Zy),w(t8),f&&t(HXe),f&&t(kd),w(e9),f&&t(UXe),f&&t(zo),w(o9),w(t9),w(n8),w(a9),w(m8),f&&t(JXe),f&&t(Pd),w(n9),f&&t(YXe),f&&t(Qo),w(s9),w(i9),w(h8),w(d9),w(A8),f&&t(KXe),f&&t(Nd),w(c9),f&&t(ZXe),f&&t(Wo),w(f9),w(g9),w(y8),w(h9),w(S8),f&&t(eze),f&&t(Dd),w(_9),f&&t(oze),f&&t(Ho),w(u9),w(v9),w(P8),w(F9),w(G8),f&&t(rze),f&&t(Vd),w(T9),f&&t(tze),f&&t(Uo),w(M9),w(C9),w(V8),w(w9),w(H8),f&&t(aze),f&&t(Wd),w(A9),f&&t(nze),f&&t(Jo),w(L9),w(x9),w(J8),w($9),w(oM),f&&t(sze),f&&t(Yd),w(k9),f&&t(lze),f&&t(Yo),w(S9),w(P9),w(tM),w(B9),w(sM),f&&t(ize),f&&t(ec),w(I9),f&&t(dze),f&&t(Ko),w(N9),w(j9),w(iM),w(D9),w(pM),f&&t(cze),f&&t(tc),w(G9),f&&t(fze),f&&t(Zo),w(O9),w(X9),w(uM),w(z9),w(FM),f&&t(mze),f&&t(sc),w(Q9),f&&t(gze),f&&t(er),w(W9),w(U9),w(MM),w(J9),w(u4),f&&t(hze),f&&t(dc),w(Y9),f&&t(pze),f&&t(or),w(K9),w(ex),w(v4),w(ox),w(V4),f&&t(_ze),f&&t(mc),w(rx),f&&t(uze),f&&t(rr),w(tx),w(nx),w(z4),w(sx),w(nE),f&&t(bze),f&&t(pc),w(lx),f&&t(vze),f&&t(tr),w(ix),w(cx),w(lE),w(fx),w(hE),f&&t(Fze),f&&t(bc),w(mx),f&&t(Tze),f&&t(nr),w(gx),w(px),w(_E),w(_x),w(NE),f&&t(Mze),f&&t(Tc),w(ux),f&&t(Eze),f&&t(sr),w(bx),w(Fx),w(jE),w(Tx),w(JE),f&&t(Cze),f&&t(Cc),w(Mx),f&&t(wze),f&&t(lr),w(Ex),w(wx),w(KE),w(Ax),w(wC),f&&t(Aze),f&&t(Lc),w(Lx),f&&t(Lze),f&&t(ir),w(yx),w($x),w(LC),w(kx),w(zC),f&&t(yze),f&&t($c),w(Sx),f&&t(xze),f&&t(dr),w(Rx),w(Bx),w(WC),w(Ix),w(JC),f&&t($ze),f&&t(Rc),w(qx),f&&t(kze),f&&t(cr),w(jx),w(Gx),w(KC),w(Ox),w(e3),f&&t(Sze),f&&t(Ic),w(Vx),f&&t(Rze),f&&t(fr),w(Xx),w(Qx),w(r3),w(Wx),w(E3),f&&t(Pze),f&&t(jc),w(Hx),f&&t(Bze),f&&t(mr),w(Ux),w(Yx),w(w3),w(Kx),w(Q3),f&&t(Ize),f&&t(Oc),w(Zx),f&&t(Nze),f&&t(gr),w(e$),w(r$),w(H3),w(t$),w(J3),f&&t(qze),f&&t(zc),w(a$),f&&t(jze),f&&t(hr),w(n$),w(l$),w(K3),w(i$),w(e5),f&&t(Dze),f&&t(Hc),w(d$),f&&t(Gze),f&&t(pr),w(c$),w(m$),w(r5),w(g$),w($5),f&&t(Oze),f&&t(Yc),w(h$),f&&t(Vze),f&&t(_r),w(p$),w(u$),w(S5),w(b$),w(V5),f&&t(Xze),f&&t(ef),w(v$),f&&t(zze),f&&t(ur),w(F$),w(M$),w(z5),w(E$),w(n0),f&&t(Qze),f&&t(tf),w(C$),f&&t(Wze),f&&t(br),w(w$),w(L$),w(l0),w(y$),w(b0),f&&t(Hze),f&&t(sf),w(x$),f&&t(Uze),f&&t(vr),w($$),w(S$),w(F0),w(R$),w(k0),f&&t(Jze),f&&t(cf),w(P$),f&&t(Yze),f&&t(Fr),w(B$),w(N$),w(R0),w(q$),w(X0),f&&t(Kze),f&&t(gf),w(j$),f&&t(Zze),f&&t(Tr),w(D$),w(O$),w(Q0),w(V$),w(tw),f&&t(eQe),f&&t(_f),w(X$),f&&t(oQe),f&&t(Mr),w(z$),w(W$),w(nw),w(H$),w(hw),f&&t(rQe),f&&t(vf),w(U$),f&&t(tQe),f&&t(Er),w(J$),w(K$),w(_w),w(Z$),w(ww),f&&t(aQe),f&&t(Mf),w(ek),f&&t(nQe),f&&t(Cr),w(ok),w(tk),w(Lw),w(ak),w(xw),f&&t(sQe),f&&t(wf),w(nk),f&&t(lQe),f&&t(wr),w(sk),w(ik),w(kw),w(dk),w(Pw),f&&t(iQe),f&&t(yf),w(fk),f&&t(dQe),f&&t(Ar),w(mk),w(hk),w(Iw),w(pk),w(qw)}}}const ZHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eUt($){return KQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lUt extends HQt{constructor(g){super();UQt(this,g,eUt,KHt,JQt,{})}}export{lUt as default,ZHt as metadata};
