import{S as pu,i as cu,s as mu,e as r,k as p,w as d,t as s,M as du,c as l,d as o,m as c,a as n,x as f,h as i,b as m,N as Fr,F as a,g as u,y as h,q as v,o as _,B as b,v as fu}from"../chunks/vendor-5fc3b424.js";import{T as hu}from"../chunks/Tip-12425c03.js";import{Y as vu}from"../chunks/Youtube-22419068.js";import{I as V}from"../chunks/IconCopyLink-13a64c4f.js";import{C as $}from"../chunks/CodeBlock-ee0b374b.js";function _u(Na){let g,Y,E,P,O;return{c(){g=r("p"),Y=s("Para compartir un modelo con la comunidad necesitas una cuenta en "),E=r("a"),P=s("huggingface.co"),O=s(". Tambi\xE9n puedes unirte a una organizaci\xF3n existente o crear una nueva."),this.h()},l(y){g=l(y,"P",{});var C=n(g);Y=i(C,"Para compartir un modelo con la comunidad necesitas una cuenta en "),E=l(C,"A",{href:!0,rel:!0});var J=n(E);P=i(J,"huggingface.co"),J.forEach(o),O=i(C,". Tambi\xE9n puedes unirte a una organizaci\xF3n existente o crear una nueva."),C.forEach(o),this.h()},h(){m(E,"href","https://huggingface.co/join"),m(E,"rel","nofollow")},m(y,C){u(y,g,C),a(g,Y),a(g,E),a(E,P),a(g,O)},d(y){y&&o(g)}}}function bu(Na){let g,Y,E,P,O,y,C,J,Sr,xa,mo,zr,Ia,K,Lr,Pe,Or,Mr,Ra,W,No,Nr,xr,xo,Ir,Ba,k,ji,Ua,X,Ga,M,Z,Io,je,Rr,Ro,Br,Va,fo,Ur,Ya,T,Gr,qe,Vr,Yr,Bo,Jr,Kr,Ja,Q,Wr,Uo,Xr,Zr,Ka,Ce,Wa,ho,Qr,Xa,vo,_o,qi,Za,N,ee,Go,Te,el,Vo,ol,Qa,oe,al,Yo,tl,rl,et,Ae,ot,ae,ll,He,Jo,sl,il,at,De,tt,A,nl,Ko,ul,pl,Fe,cl,ml,rt,Se,lt,x,te,Wo,ze,dl,Xo,fl,st,bo,hl,it,re,vl,go,_l,bl,nt,le,gl,Zo,$l,El,ut,Le,pt,$o,wl,ct,Oe,mt,se,yl,Qo,kl,Pl,dt,Me,ft,Eo,jl,ht,Ne,vt,I,ie,ea,xe,ql,wo,Cl,oa,Tl,_t,Ie,bt,w,Al,yo,Hl,Dl,aa,Fl,Sl,ta,zl,Ll,ra,Ol,Ml,gt,Re,$t,ne,Nl,la,xl,Il,Et,Be,wt,H,Rl,sa,Bl,Ul,ia,Gl,Vl,yt,Ue,kt,R,ue,na,Ge,Yl,ko,Jl,ua,Kl,Pt,D,Wl,pa,Xl,Zl,ca,Ql,es,jt,F,ma,os,as,da,ts,rs,Ve,ls,fa,ss,is,qt,Ye,Ct,pe,ns,Je,ha,us,ps,Tt,Ke,At,B,ce,va,We,cs,Po,ms,_a,ds,Ht,me,fs,ba,hs,vs,Dt,de,_s,ga,bs,gs,Ft,Xe,St,S,$s,$a,Es,ws,Ea,ys,ks,zt,Ze,Lt,fe,Ps,wa,js,qs,Ot,Qe,Mt,he,Cs,ya,Ts,As,Nt,eo,xt,jo,Hs,It,oo,Rt,ve,Ds,ka,Fs,Ss,Bt,_e,zs,ao,Ls,Os,Ut,U,be,Pa,to,Ms,ja,Ns,Gt,ge,xs,ro,Is,Rs,Vt,qo,Co,Ci,Yt,To,Bs,Jt,j,lo,Us,qa,Gs,Vs,Ys,Ca,Js,Ks,Ta,Ws,Xs,Aa,Zs,Kt,z,Qs,Ha,ei,oi,Da,ai,ti,Wt,Ao,Ho,Ti,Xt,G,$e,Fa,so,ri,Sa,li,Zt,Ee,si,za,ii,ni,Qt,we,io,ui,La,pi,ci,mi,no,di,Oa,fi,hi,er,q,vi,uo,_i,bi,po,gi,$i,Ma,Ei,wi,or;return y=new V({}),X=new hu({props:{$$slots:{default:[_u]},$$scope:{ctx:Na}}}),je=new V({}),Ce=new $({props:{code:`model = AutoModel.from_pretrained(
    "julien-c/EsperBERTo-small", revision="v2.0.1"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;julien-c/EsperBERTo-small&quot;</span>, revision=<span class="hljs-string">&quot;v2.0.1&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),Te=new V({}),Ae=new $({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),De=new $({props:{code:"pip install huggingface_hub",highlighted:"pip install huggingface_hub"}}),Se=new $({props:{code:`from huggingface_hub import notebook_login

notebook_login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

<span class="hljs-meta">&gt;&gt;&gt; </span>notebook_login()`}}),ze=new V({}),Le=new $({props:{code:'tf_model = TFDistilBertForSequenceClassification.from_pretrained("path/to/awesome-name-you-picked", from_pt=True)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFDistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;path/to/awesome-name-you-picked&quot;</span>, from_pt=<span class="hljs-literal">True</span>)'}}),Oe=new $({props:{code:'tf_model.save_pretrained("path/to/awesome-name-you-picked")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(<span class="hljs-string">&quot;path/to/awesome-name-you-picked&quot;</span>)'}}),Me=new $({props:{code:`pt_model = DistilBertForSequenceClassification.from_pretrained("path/to/awesome-name-you-picked", from_tf=True)
pt_model.save_pretrained("path/to/awesome-name-you-picked")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = DistilBertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;path/to/awesome-name-you-picked&quot;</span>, from_tf=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(<span class="hljs-string">&quot;path/to/awesome-name-you-picked&quot;</span>)`}}),Ne=new $({props:{code:`flax_model = FlaxDistilBertForSequenceClassification.from_pretrained(
    "path/to/awesome-name-you-picked", from_pt=True
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>flax_model = FlaxDistilBertForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;path/to/awesome-name-you-picked&quot;</span>, from_pt=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)`}}),xe=new V({}),Ie=new vu({props:{id:"Z1-XMy-GNLQ"}}),Re=new $({props:{code:'training_args = TrainingArguments(output_dir="my-awesome-model", push_to_hub=True)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = TrainingArguments(output_dir=<span class="hljs-string">&quot;my-awesome-model&quot;</span>, push_to_hub=<span class="hljs-literal">True</span>)'}}),Be=new $({props:{code:`trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=small_train_dataset,
    eval_dataset=small_eval_dataset,
    compute_metrics=compute_metrics,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>trainer = Trainer(
<span class="hljs-meta">... </span>    model=model,
<span class="hljs-meta">... </span>    args=training_args,
<span class="hljs-meta">... </span>    train_dataset=small_train_dataset,
<span class="hljs-meta">... </span>    eval_dataset=small_eval_dataset,
<span class="hljs-meta">... </span>    compute_metrics=compute_metrics,
<span class="hljs-meta">... </span>)`}}),Ue=new $({props:{code:"trainer.push_to_hub()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.push_to_hub()'}}),Ge=new V({}),Ye=new $({props:{code:`from transformers.keras.callbacks import PushToHubCallback

push_to_hub_callback = PushToHubCallback(
    output_dir="./your_model_save_path", tokenizer=tokenizer, hub_model_id="your-username/my-awesome-model"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.keras.callbacks <span class="hljs-keyword">import</span> PushToHubCallback

<span class="hljs-meta">&gt;&gt;&gt; </span>push_to_hub_callback = PushToHubCallback(
<span class="hljs-meta">... </span>    output_dir=<span class="hljs-string">&quot;./your_model_save_path&quot;</span>, tokenizer=tokenizer, hub_model_id=<span class="hljs-string">&quot;your-username/my-awesome-model&quot;</span>
<span class="hljs-meta">... </span>)`}}),Ke=new $({props:{code:"model.fit(tf_train_dataset, validation_data=tf_validation_dataset, epochs=3, callbacks=push_to_hub_callback)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(tf_train_dataset, validation_data=tf_validation_dataset, epochs=<span class="hljs-number">3</span>, callbacks=push_to_hub_callback)'}}),We=new V({}),Xe=new $({props:{code:'pt_model.push_to_hub("my-awesome-model")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.push_to_hub(<span class="hljs-string">&quot;my-awesome-model&quot;</span>)'}}),Ze=new $({props:{code:`from transformers import AutoModel

model = AutoModel.from_pretrained("your_username/my-awesome-model")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;your_username/my-awesome-model&quot;</span>)`}}),Qe=new $({props:{code:'pt_model.push_to_hub("my-awesome-model", organization="my-awesome-org")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.push_to_hub(<span class="hljs-string">&quot;my-awesome-model&quot;</span>, organization=<span class="hljs-string">&quot;my-awesome-org&quot;</span>)'}}),eo=new $({props:{code:'tokenizer.push_to_hub("my-awesome-model")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.push_to_hub(<span class="hljs-string">&quot;my-awesome-model&quot;</span>)'}}),oo=new $({props:{code:'tf_model.push_to_hub("my-awesome-model")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.push_to_hub(<span class="hljs-string">&quot;my-awesome-model&quot;</span>)'}}),to=new V({}),so=new V({}),{c(){g=r("meta"),Y=p(),E=r("h1"),P=r("a"),O=r("span"),d(y.$$.fragment),C=p(),J=r("span"),Sr=s("Compartir un modelo"),xa=p(),mo=r("p"),zr=s("Los \xFAltimos dos tutoriales mostraron como puedes realizar fine-tunning a un modelo con PyTorch, Keras y \u{1F917} Accelerate para distributed setups (entrenamiento distribuido). \xA1El siguiente paso es compartir tu modelo con la comunidad! En Hugging Face creemos en compartir abiertamente a todos el conocimiento y los recursos para democratizar la inteligencia artificial. En este sentido, te animamos a considerar compartir tu modelo con la comunidad, de esta forma ayudas a otros ahorrando tiempo y recursos."),Ia=p(),K=r("p"),Lr=s("En este tutorial aprender\xE1s dos m\xE9todos para compartir un modelo trained o fine-tuned en el "),Pe=r("a"),Or=s("Model Hub"),Mr=s(":"),Ra=p(),W=r("ul"),No=r("li"),Nr=s("Mediante C\xF3digo, enviando (push) tus archivos al Hub."),xr=p(),xo=r("li"),Ir=s("Con la interfaz Web, con Drag-and-drop de tus archivos al Hub."),Ba=p(),k=r("iframe"),Ua=p(),d(X.$$.fragment),Ga=p(),M=r("h2"),Z=r("a"),Io=r("span"),d(je.$$.fragment),Rr=p(),Ro=r("span"),Br=s("Caracter\xEDsticas de los repositorios"),Va=p(),fo=r("p"),Ur=s("Cada repositorio en el Model Hub se comporta como cualquier otro repositorio en GitHub. Nuestros repositorios ofrecen versioning, commit history, y la habilidad para visualizar diferencias."),Ya=p(),T=r("p"),Gr=s("El versioning desarrollado dentro del Model Hub es basado en git y "),qe=r("a"),Vr=s("git-lfs"),Yr=s(". En otras palabras, puedes tratar un modelo como un repositorio, brindando un mejor control de acceso y escalabilidad. Version control permite "),Bo=r("em"),Jr=s("revisions"),Kr=s(", un m\xE9todo para apuntar a una versi\xF3n espec\xEDfica de un modelo utilizando un commit hash, tag o branch."),Ja=p(),Q=r("p"),Wr=s("Como resultado, puedes cargar una versi\xF3n espec\xEDfica del modelo con el par\xE1metro "),Uo=r("code"),Xr=s("revision"),Zr=s(":"),Ka=p(),d(Ce.$$.fragment),Wa=p(),ho=r("p"),Qr=s("Los archivos son f\xE1cilmente editados dentro de un repositorio. Incluso puedes observar el commit history y las diferencias:"),Xa=p(),vo=r("p"),_o=r("img"),Za=p(),N=r("h2"),ee=r("a"),Go=r("span"),d(Te.$$.fragment),el=p(),Vo=r("span"),ol=s("Configuraci\xF3n inicial"),Qa=p(),oe=r("p"),al=s("Antes de compartir un modelo al Hub necesitar\xE1s tus credenciales de Hugging Face. Si tienes acceso a una terminal ejecuta el siguiente comando en el virtual environment donde \u{1F917} Transformers est\xE9 instalado. Esto guardar\xE1 tu access token dentro de tu folder cache de Hugging Face ("),Yo=r("code"),tl=s("~/.cache/"),rl=s(" by default):"),et=p(),d(Ae.$$.fragment),ot=p(),ae=r("p"),ll=s("Si usas un notebook como Jupyter o Colaboratory, aseg\xFArate de tener instalada la biblioteca "),He=r("a"),Jo=r("code"),sl=s("huggingface_hub"),il=s(". Esta biblioteca te permitir\xE1 interactuar por c\xF3digo con el Hub."),at=p(),d(De.$$.fragment),tt=p(),A=r("p"),nl=s("Luego usa "),Ko=r("code"),ul=s("notebook_login"),pl=s(" para iniciar sesi\xF3n al Hub, y sigue el link "),Fe=r("a"),cl=s("aqu\xED"),ml=s(" para generar un token con el que iniciaremos sesi\xF3n:"),rt=p(),d(Se.$$.fragment),lt=p(),x=r("h2"),te=r("a"),Wo=r("span"),d(ze.$$.fragment),dl=p(),Xo=r("span"),fl=s("Convertir un modelo para todos los Frameworks"),st=p(),bo=r("p"),hl=s("Para asegurarnos que tu modelo pueda ser usado por alguien que est\xE9 trabajando con un framework diferente, te recomendamos convertir y cargar tu modelo con pytorch y tensorflow checkpoints. Si bien los usuarios a\xFAn son capaces de cargar su modelo desde un framework diferente si se omite este paso, ser\xE1 m\xE1s lento debido a que \u{1F917} Transformers necesitar\xE1 convertir el checkpoint sobre-la-marcha."),it=p(),re=r("p"),vl=s("Convertir un checkpoint para otro framework es f\xE1cil. Aseg\xFArate tener Pytorch y TensorFlow instalado (V\xE9ase "),go=r("a"),_l=s("aqu\xED"),bl=s(" para instrucciones de instalaci\xF3n), y luego encuentra el modelo espec\xEDfico para tu tarea en el otro Framework."),nt=p(),le=r("p"),gl=s("Por ejemplo, supongamos que has entrenado DistilBert para sequence classification en PyTorch y quieres convertirlo a su equivalente en TensorFlow. Cargas el equivalente en TensorFlow de tu modelo para tu tarea y especificas "),Zo=r("code"),$l=s("from_pt=True"),El=s(" as\xED \u{1F917} Transformers convertir\xE1 el Pytorch checkpoint a un TensorFlow Checkpoint:"),ut=p(),d(Le.$$.fragment),pt=p(),$o=r("p"),wl=s("Luego guardas tu nuevo modelo TensorFlow con su nuevo checkpoint:"),ct=p(),d(Oe.$$.fragment),mt=p(),se=r("p"),yl=s("De manera similar, especificas "),Qo=r("code"),kl=s("from_tf=True"),Pl=s(" para convertir un checkpoint de TensorFlow a Pytorch:"),dt=p(),d(Me.$$.fragment),ft=p(),Eo=r("p"),jl=s("Si alg\xFAn modelo est\xE1 disponible en Flax, tambi\xE9n puedes convertir un checkpoint de Pytorch a Flax:"),ht=p(),d(Ne.$$.fragment),vt=p(),I=r("h2"),ie=r("a"),ea=r("span"),d(xe.$$.fragment),ql=p(),wo=r("span"),Cl=s("Compartir un modelo con "),oa=r("code"),Tl=s("Trainer"),_t=p(),d(Ie.$$.fragment),bt=p(),w=r("p"),Al=s("Compartir un modelo al Hub es tan simple como a\xF1adir un par\xE1metro extra o un callback. Si recuerdas del tutorial de "),yo=r("a"),Hl=s("fine-tuning tutorial"),Dl=s(", la clase "),aa=r("code"),Fl=s("TrainingArguments"),Sl=s(" es donde especificas los Hiperpar\xE1metros y opciones de entrenamiento adicionales. Una de estas opciones incluye la habilidad de compartir un modelo directamente al Hub. Para ello configuras "),ta=r("code"),zl=s("push_to_hub=True"),Ll=s(" dentro de "),ra=r("code"),Ol=s("TrainingArguments"),Ml=s(":"),gt=p(),d(Re.$$.fragment),$t=p(),ne=r("p"),Nl=s("A continuaci\xF3n, pasa tus argumentos de entrenamiento como usualmente a "),la=r("code"),xl=s("Trainer"),Il=s(":"),Et=p(),d(Be.$$.fragment),wt=p(),H=r("p"),Rl=s("Luego que realizas fine-tune a tu modelo, llamas "),sa=r("code"),Bl=s("push_to_hub()"),Ul=s(" en "),ia=r("code"),Gl=s("Trainer"),Vl=s(" para enviar el modelo al Hub. !\u{1F917} Transformers incluso a\xF1adir\xE1 autom\xE1ticamente los Hiperpar\xE1metros de entrenamiento, resultados de entrenamiento y versiones del Framework a tu model card!"),yt=p(),d(Ue.$$.fragment),kt=p(),R=r("h2"),ue=r("a"),na=r("span"),d(Ge.$$.fragment),Yl=p(),ko=r("span"),Jl=s("Compartir un modelo con "),ua=r("code"),Kl=s("PushToHubCallback"),Pt=p(),D=r("p"),Wl=s("Los usuarios de TensorFlow pueden activar la misma funcionalidad con "),pa=r("code"),Xl=s("PushToHubCallback"),Zl=s(". En la funcion "),ca=r("code"),Ql=s("PushToHubCallback"),es=s(", agrega:"),jt=p(),F=r("ul"),ma=r("li"),os=s("Un directorio de salida para tu modelo."),as=p(),da=r("li"),ts=s("Un tokenizer."),rs=p(),Ve=r("li"),ls=s("El "),fa=r("code"),ss=s("hub_model_id"),is=s(", el cual es tu usuario Hub y el nombre del modelo."),qt=p(),d(Ye.$$.fragment),Ct=p(),pe=r("p"),ns=s("Agregamos el callback a "),Je=r("a"),ha=r("code"),us=s("fit"),ps=s(", y \u{1F917} Transformers enviar\xE1 el modelo entrenado al Hub:"),Tt=p(),d(Ke.$$.fragment),At=p(),B=r("h2"),ce=r("a"),va=r("span"),d(We.$$.fragment),cs=p(),Po=r("span"),ms=s("Usando la funci\xF3n "),_a=r("code"),ds=s("push_to_hub"),Ht=p(),me=r("p"),fs=s("Puedes llamar la funci\xF3n "),ba=r("code"),hs=s("push_to_hub"),vs=s(" directamente en tu modelo para subirlo al Hub."),Dt=p(),de=r("p"),_s=s("Espec\xEDfica el nombre del modelo en "),ga=r("code"),bs=s("push_to_hub"),gs=s(":"),Ft=p(),d(Xe.$$.fragment),St=p(),S=r("p"),$s=s("Esto crear\xE1 un repositorio bajo tu usuario con el nombre del modelo "),$a=r("code"),Es=s("my-awesome-model"),ws=s(". Ahora los usuarios pueden cargar tu modelo con la funci\xF3n "),Ea=r("code"),ys=s("from_pretrained"),ks=s(":"),zt=p(),d(Ze.$$.fragment),Lt=p(),fe=r("p"),Ps=s("Si perteneces a una organizaci\xF3n y quieres compartir tu modelo bajo el nombre de la organizaci\xF3n, a\xF1ade el par\xE1metro "),wa=r("code"),js=s("organization"),qs=s(":"),Ot=p(),d(Qe.$$.fragment),Mt=p(),he=r("p"),Cs=s("La funci\xF3n "),ya=r("code"),Ts=s("push_to_hub"),As=s(" tambi\xE9n puede ser usada para a\xF1adir archivos al repositorio del modelo. Por ejemplo, a\xF1ade un tokenizer al repositorio:"),Nt=p(),d(eo.$$.fragment),xt=p(),jo=r("p"),Hs=s("O quiz\xE1s te gustar\xEDa a\xF1adir la versi\xF3n de TensorFlow de tu modelo fine-tuned en Pytorch:"),It=p(),d(oo.$$.fragment),Rt=p(),ve=r("p"),Ds=s("Ahora, cuando navegues a tu perfil en Hugging Face, deber\xEDas observar el repositorio de tu modelo creado recientemente. Si das click en el tab "),ka=r("strong"),Fs=s("Files"),Ss=s(" observar\xE1s todos los archivos que has subido al repositorio."),Bt=p(),_e=r("p"),zs=s("Para m\xE1s detalles sobre c\xF3mo crear y subir archivos al repositorio, consulta la "),ao=r("a"),Ls=s("documentaci\xF3n del Hub"),Os=s("."),Ut=p(),U=r("h2"),be=r("a"),Pa=r("span"),d(to.$$.fragment),Ms=p(),ja=r("span"),Ns=s("Compartir con la interfaz web"),Gt=p(),ge=r("p"),xs=s("Los usuarios que prefieran un enfoque no-code tienen la opci\xF3n de cargar su modelo a trav\xE9s de la interfaz gr\xE1fica del Hub. Visita la p\xE1gina "),ro=r("a"),Is=s("huggingface.co/new"),Rs=s(" para crear un nuevo repositorio:"),Vt=p(),qo=r("p"),Co=r("img"),Yt=p(),To=r("p"),Bs=s("Desde aqu\xED, a\xF1ade informaci\xF3n acerca del modelo:"),Jt=p(),j=r("ul"),lo=r("li"),Us=s("Selecciona el "),qa=r("strong"),Gs=s("owner"),Vs=s(" (la persona propietaria) del repositorio. Puedes ser t\xFA o cualquier organizaci\xF3n a la que pertenezcas."),Ys=p(),Ca=r("li"),Js=s("Escoge un nombre para tu modelo. Tambi\xE9n ser\xE1 el nombre del repositorio."),Ks=p(),Ta=r("li"),Ws=s("Elige si tu modelo es p\xFAblico o privado."),Xs=p(),Aa=r("li"),Zs=s("Espec\xEDfica la licencia que usar\xE1 tu modelo."),Kt=p(),z=r("p"),Qs=s("Ahora puedes hacer click en el tab "),Ha=r("strong"),ei=s("Files"),oi=s(" y luego en el bot\xF3n "),Da=r("strong"),ai=s("Add file"),ti=s(" para subir un nuevo archivo a tu repositorio. Luego arrastra y suelta un archivo a subir y le a\xF1ades un mensaje al commit."),Wt=p(),Ao=r("p"),Ho=r("img"),Xt=p(),G=r("h2"),$e=r("a"),Fa=r("span"),d(so.$$.fragment),ri=p(),Sa=r("span"),li=s("A\xF1adiendo una tarjeta de modelo"),Zt=p(),Ee=r("p"),si=s("Para asegurarnos que los usuarios entiendan las capacidades de tu modelo, sus limitaciones, posibles sesgos y consideraciones \xE9ticas, por favor a\xF1ade una tarjeta (como una tarjeta de presentaci\xF3n) al repositorio del modelo. La tarjeta de modelo es definida en el archivo "),za=r("code"),ii=s("README.md"),ni=s(". Puedes agregar una de la siguiente manera:"),Qt=p(),we=r("ul"),io=r("li"),ui=s("Elaborando y subiendo manualmente el archivo"),La=r("code"),pi=s("README.md"),ci=s("."),mi=p(),no=r("li"),di=s("Dando click en el bot\xF3n "),Oa=r("strong"),fi=s("Edit model card"),hi=s(" dentro del repositorio."),er=p(),q=r("p"),vi=s("Toma un momento para ver la tarjeta de modelo de DistilBert "),uo=r("a"),_i=s("model card"),bi=s(" para que tengas un buen ejemplo del tipo de informaci\xF3n que deber\xEDa incluir. Consulta "),po=r("a"),gi=s("la documentaci\xF3n"),$i=s(" para m\xE1s detalles acerca de otras opciones que puedes controlar dentro del archivo "),Ma=r("code"),Ei=s("README.md"),wi=s(" como la huella de carbono del modelo o ejemplos de widgets.```"),this.h()},l(e){const t=du('[data-svelte="svelte-1phssyn"]',document.head);g=l(t,"META",{name:!0,content:!0}),t.forEach(o),Y=c(e),E=l(e,"H1",{class:!0});var co=n(E);P=l(co,"A",{id:!0,class:!0,href:!0});var Ai=n(P);O=l(Ai,"SPAN",{});var Hi=n(O);f(y.$$.fragment,Hi),Hi.forEach(o),Ai.forEach(o),C=c(co),J=l(co,"SPAN",{});var Di=n(J);Sr=i(Di,"Compartir un modelo"),Di.forEach(o),co.forEach(o),xa=c(e),mo=l(e,"P",{});var Fi=n(mo);zr=i(Fi,"Los \xFAltimos dos tutoriales mostraron como puedes realizar fine-tunning a un modelo con PyTorch, Keras y \u{1F917} Accelerate para distributed setups (entrenamiento distribuido). \xA1El siguiente paso es compartir tu modelo con la comunidad! En Hugging Face creemos en compartir abiertamente a todos el conocimiento y los recursos para democratizar la inteligencia artificial. En este sentido, te animamos a considerar compartir tu modelo con la comunidad, de esta forma ayudas a otros ahorrando tiempo y recursos."),Fi.forEach(o),Ia=c(e),K=l(e,"P",{});var ar=n(K);Lr=i(ar,"En este tutorial aprender\xE1s dos m\xE9todos para compartir un modelo trained o fine-tuned en el "),Pe=l(ar,"A",{href:!0,rel:!0});var Si=n(Pe);Or=i(Si,"Model Hub"),Si.forEach(o),Mr=i(ar,":"),ar.forEach(o),Ra=c(e),W=l(e,"UL",{});var tr=n(W);No=l(tr,"LI",{});var zi=n(No);Nr=i(zi,"Mediante C\xF3digo, enviando (push) tus archivos al Hub."),zi.forEach(o),xr=c(tr),xo=l(tr,"LI",{});var Li=n(xo);Ir=i(Li,"Con la interfaz Web, con Drag-and-drop de tus archivos al Hub."),Li.forEach(o),tr.forEach(o),Ba=c(e),k=l(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),n(k).forEach(o),Ua=c(e),f(X.$$.fragment,e),Ga=c(e),M=l(e,"H2",{class:!0});var rr=n(M);Z=l(rr,"A",{id:!0,class:!0,href:!0});var Oi=n(Z);Io=l(Oi,"SPAN",{});var Mi=n(Io);f(je.$$.fragment,Mi),Mi.forEach(o),Oi.forEach(o),Rr=c(rr),Ro=l(rr,"SPAN",{});var Ni=n(Ro);Br=i(Ni,"Caracter\xEDsticas de los repositorios"),Ni.forEach(o),rr.forEach(o),Va=c(e),fo=l(e,"P",{});var xi=n(fo);Ur=i(xi,"Cada repositorio en el Model Hub se comporta como cualquier otro repositorio en GitHub. Nuestros repositorios ofrecen versioning, commit history, y la habilidad para visualizar diferencias."),xi.forEach(o),Ya=c(e),T=l(e,"P",{});var Do=n(T);Gr=i(Do,"El versioning desarrollado dentro del Model Hub es basado en git y "),qe=l(Do,"A",{href:!0,rel:!0});var Ii=n(qe);Vr=i(Ii,"git-lfs"),Ii.forEach(o),Yr=i(Do,". En otras palabras, puedes tratar un modelo como un repositorio, brindando un mejor control de acceso y escalabilidad. Version control permite "),Bo=l(Do,"EM",{});var Ri=n(Bo);Jr=i(Ri,"revisions"),Ri.forEach(o),Kr=i(Do,", un m\xE9todo para apuntar a una versi\xF3n espec\xEDfica de un modelo utilizando un commit hash, tag o branch."),Do.forEach(o),Ja=c(e),Q=l(e,"P",{});var lr=n(Q);Wr=i(lr,"Como resultado, puedes cargar una versi\xF3n espec\xEDfica del modelo con el par\xE1metro "),Uo=l(lr,"CODE",{});var Bi=n(Uo);Xr=i(Bi,"revision"),Bi.forEach(o),Zr=i(lr,":"),lr.forEach(o),Ka=c(e),f(Ce.$$.fragment,e),Wa=c(e),ho=l(e,"P",{});var Ui=n(ho);Qr=i(Ui,"Los archivos son f\xE1cilmente editados dentro de un repositorio. Incluso puedes observar el commit history y las diferencias:"),Ui.forEach(o),Xa=c(e),vo=l(e,"P",{});var Gi=n(vo);_o=l(Gi,"IMG",{src:!0,alt:!0}),Gi.forEach(o),Za=c(e),N=l(e,"H2",{class:!0});var sr=n(N);ee=l(sr,"A",{id:!0,class:!0,href:!0});var Vi=n(ee);Go=l(Vi,"SPAN",{});var Yi=n(Go);f(Te.$$.fragment,Yi),Yi.forEach(o),Vi.forEach(o),el=c(sr),Vo=l(sr,"SPAN",{});var Ji=n(Vo);ol=i(Ji,"Configuraci\xF3n inicial"),Ji.forEach(o),sr.forEach(o),Qa=c(e),oe=l(e,"P",{});var ir=n(oe);al=i(ir,"Antes de compartir un modelo al Hub necesitar\xE1s tus credenciales de Hugging Face. Si tienes acceso a una terminal ejecuta el siguiente comando en el virtual environment donde \u{1F917} Transformers est\xE9 instalado. Esto guardar\xE1 tu access token dentro de tu folder cache de Hugging Face ("),Yo=l(ir,"CODE",{});var Ki=n(Yo);tl=i(Ki,"~/.cache/"),Ki.forEach(o),rl=i(ir," by default):"),ir.forEach(o),et=c(e),f(Ae.$$.fragment,e),ot=c(e),ae=l(e,"P",{});var nr=n(ae);ll=i(nr,"Si usas un notebook como Jupyter o Colaboratory, aseg\xFArate de tener instalada la biblioteca "),He=l(nr,"A",{href:!0,rel:!0});var Wi=n(He);Jo=l(Wi,"CODE",{});var Xi=n(Jo);sl=i(Xi,"huggingface_hub"),Xi.forEach(o),Wi.forEach(o),il=i(nr,". Esta biblioteca te permitir\xE1 interactuar por c\xF3digo con el Hub."),nr.forEach(o),at=c(e),f(De.$$.fragment,e),tt=c(e),A=l(e,"P",{});var Fo=n(A);nl=i(Fo,"Luego usa "),Ko=l(Fo,"CODE",{});var Zi=n(Ko);ul=i(Zi,"notebook_login"),Zi.forEach(o),pl=i(Fo," para iniciar sesi\xF3n al Hub, y sigue el link "),Fe=l(Fo,"A",{href:!0,rel:!0});var Qi=n(Fe);cl=i(Qi,"aqu\xED"),Qi.forEach(o),ml=i(Fo," para generar un token con el que iniciaremos sesi\xF3n:"),Fo.forEach(o),rt=c(e),f(Se.$$.fragment,e),lt=c(e),x=l(e,"H2",{class:!0});var ur=n(x);te=l(ur,"A",{id:!0,class:!0,href:!0});var en=n(te);Wo=l(en,"SPAN",{});var on=n(Wo);f(ze.$$.fragment,on),on.forEach(o),en.forEach(o),dl=c(ur),Xo=l(ur,"SPAN",{});var an=n(Xo);fl=i(an,"Convertir un modelo para todos los Frameworks"),an.forEach(o),ur.forEach(o),st=c(e),bo=l(e,"P",{});var tn=n(bo);hl=i(tn,"Para asegurarnos que tu modelo pueda ser usado por alguien que est\xE9 trabajando con un framework diferente, te recomendamos convertir y cargar tu modelo con pytorch y tensorflow checkpoints. Si bien los usuarios a\xFAn son capaces de cargar su modelo desde un framework diferente si se omite este paso, ser\xE1 m\xE1s lento debido a que \u{1F917} Transformers necesitar\xE1 convertir el checkpoint sobre-la-marcha."),tn.forEach(o),it=c(e),re=l(e,"P",{});var pr=n(re);vl=i(pr,"Convertir un checkpoint para otro framework es f\xE1cil. Aseg\xFArate tener Pytorch y TensorFlow instalado (V\xE9ase "),go=l(pr,"A",{href:!0});var rn=n(go);_l=i(rn,"aqu\xED"),rn.forEach(o),bl=i(pr," para instrucciones de instalaci\xF3n), y luego encuentra el modelo espec\xEDfico para tu tarea en el otro Framework."),pr.forEach(o),nt=c(e),le=l(e,"P",{});var cr=n(le);gl=i(cr,"Por ejemplo, supongamos que has entrenado DistilBert para sequence classification en PyTorch y quieres convertirlo a su equivalente en TensorFlow. Cargas el equivalente en TensorFlow de tu modelo para tu tarea y especificas "),Zo=l(cr,"CODE",{});var ln=n(Zo);$l=i(ln,"from_pt=True"),ln.forEach(o),El=i(cr," as\xED \u{1F917} Transformers convertir\xE1 el Pytorch checkpoint a un TensorFlow Checkpoint:"),cr.forEach(o),ut=c(e),f(Le.$$.fragment,e),pt=c(e),$o=l(e,"P",{});var sn=n($o);wl=i(sn,"Luego guardas tu nuevo modelo TensorFlow con su nuevo checkpoint:"),sn.forEach(o),ct=c(e),f(Oe.$$.fragment,e),mt=c(e),se=l(e,"P",{});var mr=n(se);yl=i(mr,"De manera similar, especificas "),Qo=l(mr,"CODE",{});var nn=n(Qo);kl=i(nn,"from_tf=True"),nn.forEach(o),Pl=i(mr," para convertir un checkpoint de TensorFlow a Pytorch:"),mr.forEach(o),dt=c(e),f(Me.$$.fragment,e),ft=c(e),Eo=l(e,"P",{});var un=n(Eo);jl=i(un,"Si alg\xFAn modelo est\xE1 disponible en Flax, tambi\xE9n puedes convertir un checkpoint de Pytorch a Flax:"),un.forEach(o),ht=c(e),f(Ne.$$.fragment,e),vt=c(e),I=l(e,"H2",{class:!0});var dr=n(I);ie=l(dr,"A",{id:!0,class:!0,href:!0});var pn=n(ie);ea=l(pn,"SPAN",{});var cn=n(ea);f(xe.$$.fragment,cn),cn.forEach(o),pn.forEach(o),ql=c(dr),wo=l(dr,"SPAN",{});var yi=n(wo);Cl=i(yi,"Compartir un modelo con "),oa=l(yi,"CODE",{});var mn=n(oa);Tl=i(mn,"Trainer"),mn.forEach(o),yi.forEach(o),dr.forEach(o),_t=c(e),f(Ie.$$.fragment,e),bt=c(e),w=l(e,"P",{});var L=n(w);Al=i(L,"Compartir un modelo al Hub es tan simple como a\xF1adir un par\xE1metro extra o un callback. Si recuerdas del tutorial de "),yo=l(L,"A",{href:!0});var dn=n(yo);Hl=i(dn,"fine-tuning tutorial"),dn.forEach(o),Dl=i(L,", la clase "),aa=l(L,"CODE",{});var fn=n(aa);Fl=i(fn,"TrainingArguments"),fn.forEach(o),Sl=i(L," es donde especificas los Hiperpar\xE1metros y opciones de entrenamiento adicionales. Una de estas opciones incluye la habilidad de compartir un modelo directamente al Hub. Para ello configuras "),ta=l(L,"CODE",{});var hn=n(ta);zl=i(hn,"push_to_hub=True"),hn.forEach(o),Ll=i(L," dentro de "),ra=l(L,"CODE",{});var vn=n(ra);Ol=i(vn,"TrainingArguments"),vn.forEach(o),Ml=i(L,":"),L.forEach(o),gt=c(e),f(Re.$$.fragment,e),$t=c(e),ne=l(e,"P",{});var fr=n(ne);Nl=i(fr,"A continuaci\xF3n, pasa tus argumentos de entrenamiento como usualmente a "),la=l(fr,"CODE",{});var _n=n(la);xl=i(_n,"Trainer"),_n.forEach(o),Il=i(fr,":"),fr.forEach(o),Et=c(e),f(Be.$$.fragment,e),wt=c(e),H=l(e,"P",{});var So=n(H);Rl=i(So,"Luego que realizas fine-tune a tu modelo, llamas "),sa=l(So,"CODE",{});var bn=n(sa);Bl=i(bn,"push_to_hub()"),bn.forEach(o),Ul=i(So," en "),ia=l(So,"CODE",{});var gn=n(ia);Gl=i(gn,"Trainer"),gn.forEach(o),Vl=i(So," para enviar el modelo al Hub. !\u{1F917} Transformers incluso a\xF1adir\xE1 autom\xE1ticamente los Hiperpar\xE1metros de entrenamiento, resultados de entrenamiento y versiones del Framework a tu model card!"),So.forEach(o),yt=c(e),f(Ue.$$.fragment,e),kt=c(e),R=l(e,"H2",{class:!0});var hr=n(R);ue=l(hr,"A",{id:!0,class:!0,href:!0});var $n=n(ue);na=l($n,"SPAN",{});var En=n(na);f(Ge.$$.fragment,En),En.forEach(o),$n.forEach(o),Yl=c(hr),ko=l(hr,"SPAN",{});var ki=n(ko);Jl=i(ki,"Compartir un modelo con "),ua=l(ki,"CODE",{});var wn=n(ua);Kl=i(wn,"PushToHubCallback"),wn.forEach(o),ki.forEach(o),hr.forEach(o),Pt=c(e),D=l(e,"P",{});var zo=n(D);Wl=i(zo,"Los usuarios de TensorFlow pueden activar la misma funcionalidad con "),pa=l(zo,"CODE",{});var yn=n(pa);Xl=i(yn,"PushToHubCallback"),yn.forEach(o),Zl=i(zo,". En la funcion "),ca=l(zo,"CODE",{});var kn=n(ca);Ql=i(kn,"PushToHubCallback"),kn.forEach(o),es=i(zo,", agrega:"),zo.forEach(o),jt=c(e),F=l(e,"UL",{});var Lo=n(F);ma=l(Lo,"LI",{});var Pn=n(ma);os=i(Pn,"Un directorio de salida para tu modelo."),Pn.forEach(o),as=c(Lo),da=l(Lo,"LI",{});var jn=n(da);ts=i(jn,"Un tokenizer."),jn.forEach(o),rs=c(Lo),Ve=l(Lo,"LI",{});var vr=n(Ve);ls=i(vr,"El "),fa=l(vr,"CODE",{});var qn=n(fa);ss=i(qn,"hub_model_id"),qn.forEach(o),is=i(vr,", el cual es tu usuario Hub y el nombre del modelo."),vr.forEach(o),Lo.forEach(o),qt=c(e),f(Ye.$$.fragment,e),Ct=c(e),pe=l(e,"P",{});var _r=n(pe);ns=i(_r,"Agregamos el callback a "),Je=l(_r,"A",{href:!0,rel:!0});var Cn=n(Je);ha=l(Cn,"CODE",{});var Tn=n(ha);us=i(Tn,"fit"),Tn.forEach(o),Cn.forEach(o),ps=i(_r,", y \u{1F917} Transformers enviar\xE1 el modelo entrenado al Hub:"),_r.forEach(o),Tt=c(e),f(Ke.$$.fragment,e),At=c(e),B=l(e,"H2",{class:!0});var br=n(B);ce=l(br,"A",{id:!0,class:!0,href:!0});var An=n(ce);va=l(An,"SPAN",{});var Hn=n(va);f(We.$$.fragment,Hn),Hn.forEach(o),An.forEach(o),cs=c(br),Po=l(br,"SPAN",{});var Pi=n(Po);ms=i(Pi,"Usando la funci\xF3n "),_a=l(Pi,"CODE",{});var Dn=n(_a);ds=i(Dn,"push_to_hub"),Dn.forEach(o),Pi.forEach(o),br.forEach(o),Ht=c(e),me=l(e,"P",{});var gr=n(me);fs=i(gr,"Puedes llamar la funci\xF3n "),ba=l(gr,"CODE",{});var Fn=n(ba);hs=i(Fn,"push_to_hub"),Fn.forEach(o),vs=i(gr," directamente en tu modelo para subirlo al Hub."),gr.forEach(o),Dt=c(e),de=l(e,"P",{});var $r=n(de);_s=i($r,"Espec\xEDfica el nombre del modelo en "),ga=l($r,"CODE",{});var Sn=n(ga);bs=i(Sn,"push_to_hub"),Sn.forEach(o),gs=i($r,":"),$r.forEach(o),Ft=c(e),f(Xe.$$.fragment,e),St=c(e),S=l(e,"P",{});var Oo=n(S);$s=i(Oo,"Esto crear\xE1 un repositorio bajo tu usuario con el nombre del modelo "),$a=l(Oo,"CODE",{});var zn=n($a);Es=i(zn,"my-awesome-model"),zn.forEach(o),ws=i(Oo,". Ahora los usuarios pueden cargar tu modelo con la funci\xF3n "),Ea=l(Oo,"CODE",{});var Ln=n(Ea);ys=i(Ln,"from_pretrained"),Ln.forEach(o),ks=i(Oo,":"),Oo.forEach(o),zt=c(e),f(Ze.$$.fragment,e),Lt=c(e),fe=l(e,"P",{});var Er=n(fe);Ps=i(Er,"Si perteneces a una organizaci\xF3n y quieres compartir tu modelo bajo el nombre de la organizaci\xF3n, a\xF1ade el par\xE1metro "),wa=l(Er,"CODE",{});var On=n(wa);js=i(On,"organization"),On.forEach(o),qs=i(Er,":"),Er.forEach(o),Ot=c(e),f(Qe.$$.fragment,e),Mt=c(e),he=l(e,"P",{});var wr=n(he);Cs=i(wr,"La funci\xF3n "),ya=l(wr,"CODE",{});var Mn=n(ya);Ts=i(Mn,"push_to_hub"),Mn.forEach(o),As=i(wr," tambi\xE9n puede ser usada para a\xF1adir archivos al repositorio del modelo. Por ejemplo, a\xF1ade un tokenizer al repositorio:"),wr.forEach(o),Nt=c(e),f(eo.$$.fragment,e),xt=c(e),jo=l(e,"P",{});var Nn=n(jo);Hs=i(Nn,"O quiz\xE1s te gustar\xEDa a\xF1adir la versi\xF3n de TensorFlow de tu modelo fine-tuned en Pytorch:"),Nn.forEach(o),It=c(e),f(oo.$$.fragment,e),Rt=c(e),ve=l(e,"P",{});var yr=n(ve);Ds=i(yr,"Ahora, cuando navegues a tu perfil en Hugging Face, deber\xEDas observar el repositorio de tu modelo creado recientemente. Si das click en el tab "),ka=l(yr,"STRONG",{});var xn=n(ka);Fs=i(xn,"Files"),xn.forEach(o),Ss=i(yr," observar\xE1s todos los archivos que has subido al repositorio."),yr.forEach(o),Bt=c(e),_e=l(e,"P",{});var kr=n(_e);zs=i(kr,"Para m\xE1s detalles sobre c\xF3mo crear y subir archivos al repositorio, consulta la "),ao=l(kr,"A",{href:!0,rel:!0});var In=n(ao);Ls=i(In,"documentaci\xF3n del Hub"),In.forEach(o),Os=i(kr,"."),kr.forEach(o),Ut=c(e),U=l(e,"H2",{class:!0});var Pr=n(U);be=l(Pr,"A",{id:!0,class:!0,href:!0});var Rn=n(be);Pa=l(Rn,"SPAN",{});var Bn=n(Pa);f(to.$$.fragment,Bn),Bn.forEach(o),Rn.forEach(o),Ms=c(Pr),ja=l(Pr,"SPAN",{});var Un=n(ja);Ns=i(Un,"Compartir con la interfaz web"),Un.forEach(o),Pr.forEach(o),Gt=c(e),ge=l(e,"P",{});var jr=n(ge);xs=i(jr,"Los usuarios que prefieran un enfoque no-code tienen la opci\xF3n de cargar su modelo a trav\xE9s de la interfaz gr\xE1fica del Hub. Visita la p\xE1gina "),ro=l(jr,"A",{href:!0,rel:!0});var Gn=n(ro);Is=i(Gn,"huggingface.co/new"),Gn.forEach(o),Rs=i(jr," para crear un nuevo repositorio:"),jr.forEach(o),Vt=c(e),qo=l(e,"P",{});var Vn=n(qo);Co=l(Vn,"IMG",{src:!0,alt:!0}),Vn.forEach(o),Yt=c(e),To=l(e,"P",{});var Yn=n(To);Bs=i(Yn,"Desde aqu\xED, a\xF1ade informaci\xF3n acerca del modelo:"),Yn.forEach(o),Jt=c(e),j=l(e,"UL",{});var ye=n(j);lo=l(ye,"LI",{});var qr=n(lo);Us=i(qr,"Selecciona el "),qa=l(qr,"STRONG",{});var Jn=n(qa);Gs=i(Jn,"owner"),Jn.forEach(o),Vs=i(qr," (la persona propietaria) del repositorio. Puedes ser t\xFA o cualquier organizaci\xF3n a la que pertenezcas."),qr.forEach(o),Ys=c(ye),Ca=l(ye,"LI",{});var Kn=n(Ca);Js=i(Kn,"Escoge un nombre para tu modelo. Tambi\xE9n ser\xE1 el nombre del repositorio."),Kn.forEach(o),Ks=c(ye),Ta=l(ye,"LI",{});var Wn=n(Ta);Ws=i(Wn,"Elige si tu modelo es p\xFAblico o privado."),Wn.forEach(o),Xs=c(ye),Aa=l(ye,"LI",{});var Xn=n(Aa);Zs=i(Xn,"Espec\xEDfica la licencia que usar\xE1 tu modelo."),Xn.forEach(o),ye.forEach(o),Kt=c(e),z=l(e,"P",{});var Mo=n(z);Qs=i(Mo,"Ahora puedes hacer click en el tab "),Ha=l(Mo,"STRONG",{});var Zn=n(Ha);ei=i(Zn,"Files"),Zn.forEach(o),oi=i(Mo," y luego en el bot\xF3n "),Da=l(Mo,"STRONG",{});var Qn=n(Da);ai=i(Qn,"Add file"),Qn.forEach(o),ti=i(Mo," para subir un nuevo archivo a tu repositorio. Luego arrastra y suelta un archivo a subir y le a\xF1ades un mensaje al commit."),Mo.forEach(o),Wt=c(e),Ao=l(e,"P",{});var eu=n(Ao);Ho=l(eu,"IMG",{src:!0,alt:!0}),eu.forEach(o),Xt=c(e),G=l(e,"H2",{class:!0});var Cr=n(G);$e=l(Cr,"A",{id:!0,class:!0,href:!0});var ou=n($e);Fa=l(ou,"SPAN",{});var au=n(Fa);f(so.$$.fragment,au),au.forEach(o),ou.forEach(o),ri=c(Cr),Sa=l(Cr,"SPAN",{});var tu=n(Sa);li=i(tu,"A\xF1adiendo una tarjeta de modelo"),tu.forEach(o),Cr.forEach(o),Zt=c(e),Ee=l(e,"P",{});var Tr=n(Ee);si=i(Tr,"Para asegurarnos que los usuarios entiendan las capacidades de tu modelo, sus limitaciones, posibles sesgos y consideraciones \xE9ticas, por favor a\xF1ade una tarjeta (como una tarjeta de presentaci\xF3n) al repositorio del modelo. La tarjeta de modelo es definida en el archivo "),za=l(Tr,"CODE",{});var ru=n(za);ii=i(ru,"README.md"),ru.forEach(o),ni=i(Tr,". Puedes agregar una de la siguiente manera:"),Tr.forEach(o),Qt=c(e),we=l(e,"UL",{});var Ar=n(we);io=l(Ar,"LI",{});var Hr=n(io);ui=i(Hr,"Elaborando y subiendo manualmente el archivo"),La=l(Hr,"CODE",{});var lu=n(La);pi=i(lu,"README.md"),lu.forEach(o),ci=i(Hr,"."),Hr.forEach(o),mi=c(Ar),no=l(Ar,"LI",{});var Dr=n(no);di=i(Dr,"Dando click en el bot\xF3n "),Oa=l(Dr,"STRONG",{});var su=n(Oa);fi=i(su,"Edit model card"),su.forEach(o),hi=i(Dr," dentro del repositorio."),Dr.forEach(o),Ar.forEach(o),er=c(e),q=l(e,"P",{});var ke=n(q);vi=i(ke,"Toma un momento para ver la tarjeta de modelo de DistilBert "),uo=l(ke,"A",{href:!0,rel:!0});var iu=n(uo);_i=i(iu,"model card"),iu.forEach(o),bi=i(ke," para que tengas un buen ejemplo del tipo de informaci\xF3n que deber\xEDa incluir. Consulta "),po=l(ke,"A",{href:!0,rel:!0});var nu=n(po);gi=i(nu,"la documentaci\xF3n"),nu.forEach(o),$i=i(ke," para m\xE1s detalles acerca de otras opciones que puedes controlar dentro del archivo "),Ma=l(ke,"CODE",{});var uu=n(Ma);Ei=i(uu,"README.md"),uu.forEach(o),wi=i(ke," como la huella de carbono del modelo o ejemplos de widgets.```"),ke.forEach(o),this.h()},h(){m(g,"name","hf:doc:metadata"),m(g,"content",JSON.stringify(gu)),m(P,"id","compartir-un-modelo"),m(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(P,"href","#compartir-un-modelo"),m(E,"class","relative group"),m(Pe,"href","https://huggingface.co/models"),m(Pe,"rel","nofollow"),m(k,"width","560"),m(k,"height","315"),Fr(k.src,ji="https://www.youtube.com/embed/XvSGPZFEjDY")||m(k,"src",ji),m(k,"title","YouTube video player"),m(k,"frameborder","0"),m(k,"allow",`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture`),k.allowFullscreen=!0,m(Z,"id","caractersticas-de-los-repositorios"),m(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Z,"href","#caractersticas-de-los-repositorios"),m(M,"class","relative group"),m(qe,"href","https://git-lfs.github.com/"),m(qe,"rel","nofollow"),Fr(_o.src,qi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/vis_diff.png")||m(_o,"src",qi),m(_o,"alt","vis_diff"),m(ee,"id","configuracin-inicial"),m(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ee,"href","#configuracin-inicial"),m(N,"class","relative group"),m(He,"href","https://huggingface.co/docs/hub/adding-a-library"),m(He,"rel","nofollow"),m(Fe,"href","https://huggingface.co/settings/token"),m(Fe,"rel","nofollow"),m(te,"id","convertir-un-modelo-para-todos-los-frameworks"),m(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(te,"href","#convertir-un-modelo-para-todos-los-frameworks"),m(x,"class","relative group"),m(go,"href","installation"),m(ie,"id","compartir-un-modelo-con-trainer"),m(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ie,"href","#compartir-un-modelo-con-trainer"),m(I,"class","relative group"),m(yo,"href","training"),m(ue,"id","compartir-un-modelo-con-pushtohubcallback"),m(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ue,"href","#compartir-un-modelo-con-pushtohubcallback"),m(R,"class","relative group"),m(Je,"href","https://keras.io/api/models/model_training_apis/"),m(Je,"rel","nofollow"),m(ce,"id","usando-la-funcin-pushtohub"),m(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ce,"href","#usando-la-funcin-pushtohub"),m(B,"class","relative group"),m(ao,"href","https://huggingface.co/docs/hub/how-to-upstream"),m(ao,"rel","nofollow"),m(be,"id","compartir-con-la-interfaz-web"),m(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(be,"href","#compartir-con-la-interfaz-web"),m(U,"class","relative group"),m(ro,"href","https://huggingface.co/new"),m(ro,"rel","nofollow"),Fr(Co.src,Ci="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/new_model_repo.png")||m(Co,"src",Ci),m(Co,"alt","new_model_repo"),Fr(Ho.src,Ti="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/upload_file.png")||m(Ho,"src",Ti),m(Ho,"alt","upload_file"),m($e,"id","aadiendo-una-tarjeta-de-modelo"),m($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m($e,"href","#aadiendo-una-tarjeta-de-modelo"),m(G,"class","relative group"),m(uo,"href","https://huggingface.co/distilbert-base-uncased"),m(uo,"rel","nofollow"),m(po,"href","https://huggingface.co/docs/hub/model-repos"),m(po,"rel","nofollow")},m(e,t){a(document.head,g),u(e,Y,t),u(e,E,t),a(E,P),a(P,O),h(y,O,null),a(E,C),a(E,J),a(J,Sr),u(e,xa,t),u(e,mo,t),a(mo,zr),u(e,Ia,t),u(e,K,t),a(K,Lr),a(K,Pe),a(Pe,Or),a(K,Mr),u(e,Ra,t),u(e,W,t),a(W,No),a(No,Nr),a(W,xr),a(W,xo),a(xo,Ir),u(e,Ba,t),u(e,k,t),u(e,Ua,t),h(X,e,t),u(e,Ga,t),u(e,M,t),a(M,Z),a(Z,Io),h(je,Io,null),a(M,Rr),a(M,Ro),a(Ro,Br),u(e,Va,t),u(e,fo,t),a(fo,Ur),u(e,Ya,t),u(e,T,t),a(T,Gr),a(T,qe),a(qe,Vr),a(T,Yr),a(T,Bo),a(Bo,Jr),a(T,Kr),u(e,Ja,t),u(e,Q,t),a(Q,Wr),a(Q,Uo),a(Uo,Xr),a(Q,Zr),u(e,Ka,t),h(Ce,e,t),u(e,Wa,t),u(e,ho,t),a(ho,Qr),u(e,Xa,t),u(e,vo,t),a(vo,_o),u(e,Za,t),u(e,N,t),a(N,ee),a(ee,Go),h(Te,Go,null),a(N,el),a(N,Vo),a(Vo,ol),u(e,Qa,t),u(e,oe,t),a(oe,al),a(oe,Yo),a(Yo,tl),a(oe,rl),u(e,et,t),h(Ae,e,t),u(e,ot,t),u(e,ae,t),a(ae,ll),a(ae,He),a(He,Jo),a(Jo,sl),a(ae,il),u(e,at,t),h(De,e,t),u(e,tt,t),u(e,A,t),a(A,nl),a(A,Ko),a(Ko,ul),a(A,pl),a(A,Fe),a(Fe,cl),a(A,ml),u(e,rt,t),h(Se,e,t),u(e,lt,t),u(e,x,t),a(x,te),a(te,Wo),h(ze,Wo,null),a(x,dl),a(x,Xo),a(Xo,fl),u(e,st,t),u(e,bo,t),a(bo,hl),u(e,it,t),u(e,re,t),a(re,vl),a(re,go),a(go,_l),a(re,bl),u(e,nt,t),u(e,le,t),a(le,gl),a(le,Zo),a(Zo,$l),a(le,El),u(e,ut,t),h(Le,e,t),u(e,pt,t),u(e,$o,t),a($o,wl),u(e,ct,t),h(Oe,e,t),u(e,mt,t),u(e,se,t),a(se,yl),a(se,Qo),a(Qo,kl),a(se,Pl),u(e,dt,t),h(Me,e,t),u(e,ft,t),u(e,Eo,t),a(Eo,jl),u(e,ht,t),h(Ne,e,t),u(e,vt,t),u(e,I,t),a(I,ie),a(ie,ea),h(xe,ea,null),a(I,ql),a(I,wo),a(wo,Cl),a(wo,oa),a(oa,Tl),u(e,_t,t),h(Ie,e,t),u(e,bt,t),u(e,w,t),a(w,Al),a(w,yo),a(yo,Hl),a(w,Dl),a(w,aa),a(aa,Fl),a(w,Sl),a(w,ta),a(ta,zl),a(w,Ll),a(w,ra),a(ra,Ol),a(w,Ml),u(e,gt,t),h(Re,e,t),u(e,$t,t),u(e,ne,t),a(ne,Nl),a(ne,la),a(la,xl),a(ne,Il),u(e,Et,t),h(Be,e,t),u(e,wt,t),u(e,H,t),a(H,Rl),a(H,sa),a(sa,Bl),a(H,Ul),a(H,ia),a(ia,Gl),a(H,Vl),u(e,yt,t),h(Ue,e,t),u(e,kt,t),u(e,R,t),a(R,ue),a(ue,na),h(Ge,na,null),a(R,Yl),a(R,ko),a(ko,Jl),a(ko,ua),a(ua,Kl),u(e,Pt,t),u(e,D,t),a(D,Wl),a(D,pa),a(pa,Xl),a(D,Zl),a(D,ca),a(ca,Ql),a(D,es),u(e,jt,t),u(e,F,t),a(F,ma),a(ma,os),a(F,as),a(F,da),a(da,ts),a(F,rs),a(F,Ve),a(Ve,ls),a(Ve,fa),a(fa,ss),a(Ve,is),u(e,qt,t),h(Ye,e,t),u(e,Ct,t),u(e,pe,t),a(pe,ns),a(pe,Je),a(Je,ha),a(ha,us),a(pe,ps),u(e,Tt,t),h(Ke,e,t),u(e,At,t),u(e,B,t),a(B,ce),a(ce,va),h(We,va,null),a(B,cs),a(B,Po),a(Po,ms),a(Po,_a),a(_a,ds),u(e,Ht,t),u(e,me,t),a(me,fs),a(me,ba),a(ba,hs),a(me,vs),u(e,Dt,t),u(e,de,t),a(de,_s),a(de,ga),a(ga,bs),a(de,gs),u(e,Ft,t),h(Xe,e,t),u(e,St,t),u(e,S,t),a(S,$s),a(S,$a),a($a,Es),a(S,ws),a(S,Ea),a(Ea,ys),a(S,ks),u(e,zt,t),h(Ze,e,t),u(e,Lt,t),u(e,fe,t),a(fe,Ps),a(fe,wa),a(wa,js),a(fe,qs),u(e,Ot,t),h(Qe,e,t),u(e,Mt,t),u(e,he,t),a(he,Cs),a(he,ya),a(ya,Ts),a(he,As),u(e,Nt,t),h(eo,e,t),u(e,xt,t),u(e,jo,t),a(jo,Hs),u(e,It,t),h(oo,e,t),u(e,Rt,t),u(e,ve,t),a(ve,Ds),a(ve,ka),a(ka,Fs),a(ve,Ss),u(e,Bt,t),u(e,_e,t),a(_e,zs),a(_e,ao),a(ao,Ls),a(_e,Os),u(e,Ut,t),u(e,U,t),a(U,be),a(be,Pa),h(to,Pa,null),a(U,Ms),a(U,ja),a(ja,Ns),u(e,Gt,t),u(e,ge,t),a(ge,xs),a(ge,ro),a(ro,Is),a(ge,Rs),u(e,Vt,t),u(e,qo,t),a(qo,Co),u(e,Yt,t),u(e,To,t),a(To,Bs),u(e,Jt,t),u(e,j,t),a(j,lo),a(lo,Us),a(lo,qa),a(qa,Gs),a(lo,Vs),a(j,Ys),a(j,Ca),a(Ca,Js),a(j,Ks),a(j,Ta),a(Ta,Ws),a(j,Xs),a(j,Aa),a(Aa,Zs),u(e,Kt,t),u(e,z,t),a(z,Qs),a(z,Ha),a(Ha,ei),a(z,oi),a(z,Da),a(Da,ai),a(z,ti),u(e,Wt,t),u(e,Ao,t),a(Ao,Ho),u(e,Xt,t),u(e,G,t),a(G,$e),a($e,Fa),h(so,Fa,null),a(G,ri),a(G,Sa),a(Sa,li),u(e,Zt,t),u(e,Ee,t),a(Ee,si),a(Ee,za),a(za,ii),a(Ee,ni),u(e,Qt,t),u(e,we,t),a(we,io),a(io,ui),a(io,La),a(La,pi),a(io,ci),a(we,mi),a(we,no),a(no,di),a(no,Oa),a(Oa,fi),a(no,hi),u(e,er,t),u(e,q,t),a(q,vi),a(q,uo),a(uo,_i),a(q,bi),a(q,po),a(po,gi),a(q,$i),a(q,Ma),a(Ma,Ei),a(q,wi),or=!0},p(e,[t]){const co={};t&2&&(co.$$scope={dirty:t,ctx:e}),X.$set(co)},i(e){or||(v(y.$$.fragment,e),v(X.$$.fragment,e),v(je.$$.fragment,e),v(Ce.$$.fragment,e),v(Te.$$.fragment,e),v(Ae.$$.fragment,e),v(De.$$.fragment,e),v(Se.$$.fragment,e),v(ze.$$.fragment,e),v(Le.$$.fragment,e),v(Oe.$$.fragment,e),v(Me.$$.fragment,e),v(Ne.$$.fragment,e),v(xe.$$.fragment,e),v(Ie.$$.fragment,e),v(Re.$$.fragment,e),v(Be.$$.fragment,e),v(Ue.$$.fragment,e),v(Ge.$$.fragment,e),v(Ye.$$.fragment,e),v(Ke.$$.fragment,e),v(We.$$.fragment,e),v(Xe.$$.fragment,e),v(Ze.$$.fragment,e),v(Qe.$$.fragment,e),v(eo.$$.fragment,e),v(oo.$$.fragment,e),v(to.$$.fragment,e),v(so.$$.fragment,e),or=!0)},o(e){_(y.$$.fragment,e),_(X.$$.fragment,e),_(je.$$.fragment,e),_(Ce.$$.fragment,e),_(Te.$$.fragment,e),_(Ae.$$.fragment,e),_(De.$$.fragment,e),_(Se.$$.fragment,e),_(ze.$$.fragment,e),_(Le.$$.fragment,e),_(Oe.$$.fragment,e),_(Me.$$.fragment,e),_(Ne.$$.fragment,e),_(xe.$$.fragment,e),_(Ie.$$.fragment,e),_(Re.$$.fragment,e),_(Be.$$.fragment,e),_(Ue.$$.fragment,e),_(Ge.$$.fragment,e),_(Ye.$$.fragment,e),_(Ke.$$.fragment,e),_(We.$$.fragment,e),_(Xe.$$.fragment,e),_(Ze.$$.fragment,e),_(Qe.$$.fragment,e),_(eo.$$.fragment,e),_(oo.$$.fragment,e),_(to.$$.fragment,e),_(so.$$.fragment,e),or=!1},d(e){o(g),e&&o(Y),e&&o(E),b(y),e&&o(xa),e&&o(mo),e&&o(Ia),e&&o(K),e&&o(Ra),e&&o(W),e&&o(Ba),e&&o(k),e&&o(Ua),b(X,e),e&&o(Ga),e&&o(M),b(je),e&&o(Va),e&&o(fo),e&&o(Ya),e&&o(T),e&&o(Ja),e&&o(Q),e&&o(Ka),b(Ce,e),e&&o(Wa),e&&o(ho),e&&o(Xa),e&&o(vo),e&&o(Za),e&&o(N),b(Te),e&&o(Qa),e&&o(oe),e&&o(et),b(Ae,e),e&&o(ot),e&&o(ae),e&&o(at),b(De,e),e&&o(tt),e&&o(A),e&&o(rt),b(Se,e),e&&o(lt),e&&o(x),b(ze),e&&o(st),e&&o(bo),e&&o(it),e&&o(re),e&&o(nt),e&&o(le),e&&o(ut),b(Le,e),e&&o(pt),e&&o($o),e&&o(ct),b(Oe,e),e&&o(mt),e&&o(se),e&&o(dt),b(Me,e),e&&o(ft),e&&o(Eo),e&&o(ht),b(Ne,e),e&&o(vt),e&&o(I),b(xe),e&&o(_t),b(Ie,e),e&&o(bt),e&&o(w),e&&o(gt),b(Re,e),e&&o($t),e&&o(ne),e&&o(Et),b(Be,e),e&&o(wt),e&&o(H),e&&o(yt),b(Ue,e),e&&o(kt),e&&o(R),b(Ge),e&&o(Pt),e&&o(D),e&&o(jt),e&&o(F),e&&o(qt),b(Ye,e),e&&o(Ct),e&&o(pe),e&&o(Tt),b(Ke,e),e&&o(At),e&&o(B),b(We),e&&o(Ht),e&&o(me),e&&o(Dt),e&&o(de),e&&o(Ft),b(Xe,e),e&&o(St),e&&o(S),e&&o(zt),b(Ze,e),e&&o(Lt),e&&o(fe),e&&o(Ot),b(Qe,e),e&&o(Mt),e&&o(he),e&&o(Nt),b(eo,e),e&&o(xt),e&&o(jo),e&&o(It),b(oo,e),e&&o(Rt),e&&o(ve),e&&o(Bt),e&&o(_e),e&&o(Ut),e&&o(U),b(to),e&&o(Gt),e&&o(ge),e&&o(Vt),e&&o(qo),e&&o(Yt),e&&o(To),e&&o(Jt),e&&o(j),e&&o(Kt),e&&o(z),e&&o(Wt),e&&o(Ao),e&&o(Xt),e&&o(G),b(so),e&&o(Zt),e&&o(Ee),e&&o(Qt),e&&o(we),e&&o(er),e&&o(q)}}}const gu={local:"compartir-un-modelo",sections:[{local:"caractersticas-de-los-repositorios",title:"Caracter\xEDsticas de los repositorios"},{local:"configuracin-inicial",title:"Configuraci\xF3n inicial"},{local:"convertir-un-modelo-para-todos-los-frameworks",title:"Convertir un modelo para todos los Frameworks"},{local:"compartir-un-modelo-con-trainer",title:"Compartir un modelo con `Trainer`"},{local:"compartir-un-modelo-con-pushtohubcallback",title:"Compartir un modelo con `PushToHubCallback`"},{local:"usando-la-funcin-pushtohub",title:"Usando la funci\xF3n `push_to_hub`"},{local:"compartir-con-la-interfaz-web",title:"Compartir con la interfaz web"},{local:"aadiendo-una-tarjeta-de-modelo",title:"A\xF1adiendo una tarjeta de modelo"}],title:"Compartir un modelo"};function $u(Na){return fu(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ju extends pu{constructor(g){super();cu(this,g,$u,bu,mu,{})}}export{ju as default,gu as metadata};
