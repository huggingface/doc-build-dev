import{S as c$t,i as f$t,s as m$t,e as a,k as l,w as F,t as o,M as g$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as h$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as RVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function p$t(L){let g,v,p,m,u,d,h,Mo,mi,uf,rt,gi,hi,EA,_f,je,We,pi,yn,CA,Ln,xn,wA,ui,$n,AA,_i,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),EA=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),CA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),wA=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),AA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var W$=s(p);m=r(W$,"NewModelConfig"),W$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var Q$=s(mi);uf=r(Q$,"model_type"),Q$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var H$=s(gi);hi=r(H$,'"new-model"'),H$.forEach(t),EA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);yn=r(wa,"NewModel"),wa.forEach(t),CA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var U$=s(Ln);xn=r(U$,"PreTrainedModel"),U$.forEach(t),wA=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var vf=s(ui);$n=r(vf,"config_class"),vf.forEach(t),AA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var J$=s(_i);bf=r(J$,"NewModelConfig"),J$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,uf),e(g,rt),e(g,gi),e(gi,hi),e(g,EA),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,pi),e(pi,yn),e(je,CA),e(je,Ln),e(Ln,xn),e(je,wA),e(je,ui),e(ui,$n),e(je,AA),e(je,_i),e(_i,bf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function u$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,u,d,h,Mo,mi,uf,rt,gi,hi,EA,_f,je,We,pi,yn,CA,Ln,xn,wA,ui,$n,AA,_i,bf,Ca,Qe,Ae,W$,bi,Q$,H$,Eo,wa,U$,vf,J$,cOe,Zqe,vi,Ff,ioe,yA,fOe,doe,mOe,eNe,kn,gOe,coe,hOe,pOe,foe,uOe,_Oe,oNe,LA,rNe,Y$,bOe,tNe,Tf,aNe,Fi,Mf,moe,xA,vOe,goe,FOe,nNe,Co,$A,TOe,kA,MOe,K$,EOe,COe,wOe,SA,AOe,hoe,yOe,LOe,xOe,Er,RA,$Oe,poe,kOe,SOe,Ti,ROe,uoe,POe,BOe,_oe,IOe,qOe,NOe,A,Ef,boe,jOe,DOe,Z$,GOe,OOe,VOe,Cf,voe,XOe,zOe,ek,WOe,QOe,HOe,wf,Foe,UOe,JOe,ok,YOe,KOe,ZOe,Af,Toe,eVe,oVe,rk,rVe,tVe,aVe,yf,Moe,nVe,sVe,tk,lVe,iVe,dVe,Lf,Eoe,cVe,fVe,ak,mVe,gVe,hVe,xf,Coe,pVe,uVe,nk,_Ve,bVe,vVe,$f,woe,FVe,TVe,sk,MVe,EVe,CVe,kf,Aoe,wVe,AVe,lk,yVe,LVe,xVe,Sf,yoe,$Ve,kVe,ik,SVe,RVe,PVe,Rf,Loe,BVe,IVe,dk,qVe,NVe,jVe,Pf,xoe,DVe,GVe,ck,OVe,VVe,XVe,Bf,$oe,zVe,WVe,fk,QVe,HVe,UVe,If,koe,JVe,YVe,mk,KVe,ZVe,eXe,qf,Soe,oXe,rXe,gk,tXe,aXe,nXe,Nf,Roe,sXe,lXe,hk,iXe,dXe,cXe,jf,Poe,fXe,mXe,pk,gXe,hXe,pXe,Df,Boe,uXe,_Xe,uk,bXe,vXe,FXe,Gf,Ioe,TXe,MXe,_k,EXe,CXe,wXe,Of,qoe,AXe,yXe,bk,LXe,xXe,$Xe,Vf,Noe,kXe,SXe,vk,RXe,PXe,BXe,Xf,joe,IXe,qXe,Fk,NXe,jXe,DXe,zf,Doe,GXe,OXe,Tk,VXe,XXe,zXe,Wf,Goe,WXe,QXe,Mk,HXe,UXe,JXe,Qf,Ooe,YXe,KXe,Ek,ZXe,eze,oze,Hf,Voe,rze,tze,Ck,aze,nze,sze,Uf,Xoe,lze,ize,wk,dze,cze,fze,Jf,zoe,mze,gze,Ak,hze,pze,uze,Yf,Woe,_ze,bze,yk,vze,Fze,Tze,Kf,Qoe,Mze,Eze,Lk,Cze,wze,Aze,Zf,Hoe,yze,Lze,xk,xze,$ze,kze,em,Uoe,Sze,Rze,$k,Pze,Bze,Ize,om,Joe,qze,Nze,kk,jze,Dze,Gze,rm,Yoe,Oze,Vze,Sk,Xze,zze,Wze,tm,Koe,Qze,Hze,Rk,Uze,Jze,Yze,am,Zoe,Kze,Zze,Pk,eWe,oWe,rWe,nm,ere,tWe,aWe,Bk,nWe,sWe,lWe,sm,ore,iWe,dWe,Ik,cWe,fWe,mWe,lm,rre,gWe,hWe,qk,pWe,uWe,_We,im,tre,bWe,vWe,Nk,FWe,TWe,MWe,dm,are,EWe,CWe,jk,wWe,AWe,yWe,cm,nre,LWe,xWe,Dk,$We,kWe,SWe,fm,sre,RWe,PWe,Gk,BWe,IWe,qWe,mm,lre,NWe,jWe,Ok,DWe,GWe,OWe,gm,ire,VWe,XWe,Vk,zWe,WWe,QWe,hm,dre,HWe,UWe,Xk,JWe,YWe,KWe,pm,cre,ZWe,eQe,zk,oQe,rQe,tQe,um,fre,aQe,nQe,Wk,sQe,lQe,iQe,_m,mre,dQe,cQe,Qk,fQe,mQe,gQe,bm,gre,hQe,pQe,Hk,uQe,_Qe,bQe,vm,hre,vQe,FQe,Uk,TQe,MQe,EQe,Fm,pre,CQe,wQe,Jk,AQe,yQe,LQe,Tm,ure,xQe,$Qe,Yk,kQe,SQe,RQe,Mm,_re,PQe,BQe,Kk,IQe,qQe,NQe,Em,bre,jQe,DQe,Zk,GQe,OQe,VQe,Cm,vre,XQe,zQe,eS,WQe,QQe,HQe,wm,Fre,UQe,JQe,oS,YQe,KQe,ZQe,Am,Tre,eHe,oHe,rS,rHe,tHe,aHe,ym,Mre,nHe,sHe,tS,lHe,iHe,dHe,Lm,Ere,cHe,fHe,aS,mHe,gHe,hHe,xm,Cre,pHe,uHe,nS,_He,bHe,vHe,$m,wre,FHe,THe,sS,MHe,EHe,CHe,km,Are,wHe,AHe,lS,yHe,LHe,xHe,Sm,yre,$He,kHe,iS,SHe,RHe,PHe,Rm,Lre,BHe,IHe,dS,qHe,NHe,jHe,Pm,xre,DHe,GHe,cS,OHe,VHe,XHe,Bm,$re,zHe,WHe,fS,QHe,HHe,UHe,Im,kre,JHe,YHe,mS,KHe,ZHe,eUe,qm,Sre,oUe,rUe,gS,tUe,aUe,nUe,Nm,Rre,sUe,lUe,hS,iUe,dUe,cUe,jm,Pre,fUe,mUe,pS,gUe,hUe,pUe,Dm,Bre,uUe,_Ue,uS,bUe,vUe,FUe,Gm,Ire,TUe,MUe,_S,EUe,CUe,wUe,Om,qre,AUe,yUe,bS,LUe,xUe,$Ue,Vm,Nre,kUe,SUe,vS,RUe,PUe,BUe,Xm,jre,IUe,qUe,FS,NUe,jUe,DUe,zm,Dre,GUe,OUe,TS,VUe,XUe,zUe,Wm,Gre,WUe,QUe,MS,HUe,UUe,JUe,Qm,Ore,YUe,KUe,ES,ZUe,eJe,oJe,Hm,Vre,rJe,tJe,CS,aJe,nJe,sJe,Um,Xre,lJe,iJe,wS,dJe,cJe,fJe,Jm,zre,mJe,gJe,AS,hJe,pJe,uJe,Ym,Wre,_Je,bJe,yS,vJe,FJe,TJe,Km,Qre,MJe,EJe,LS,CJe,wJe,AJe,Zm,Hre,yJe,LJe,xS,xJe,$Je,kJe,eg,Ure,SJe,RJe,$S,PJe,BJe,IJe,og,Jre,qJe,NJe,kS,jJe,DJe,GJe,rg,Yre,OJe,VJe,SS,XJe,zJe,WJe,tg,Kre,QJe,HJe,RS,UJe,JJe,YJe,ag,Zre,KJe,ZJe,PS,eYe,oYe,rYe,ng,ete,tYe,aYe,BS,nYe,sYe,lYe,sg,ote,iYe,dYe,IS,cYe,fYe,mYe,lg,rte,gYe,hYe,qS,pYe,uYe,_Ye,ig,tte,bYe,vYe,NS,FYe,TYe,MYe,dg,ate,EYe,CYe,jS,wYe,AYe,yYe,cg,nte,LYe,xYe,DS,$Ye,kYe,SYe,fg,ste,RYe,PYe,GS,BYe,IYe,qYe,mg,lte,NYe,jYe,OS,DYe,GYe,OYe,gg,ite,VYe,XYe,VS,zYe,WYe,QYe,hg,dte,HYe,UYe,XS,JYe,YYe,KYe,pg,cte,ZYe,eKe,zS,oKe,rKe,tKe,ug,fte,aKe,nKe,WS,sKe,lKe,iKe,_g,mte,dKe,cKe,QS,fKe,mKe,gKe,bg,gte,hKe,pKe,HS,uKe,_Ke,bKe,vg,hte,vKe,FKe,US,TKe,MKe,EKe,Fg,pte,CKe,wKe,JS,AKe,yKe,LKe,Tg,ute,xKe,$Ke,YS,kKe,SKe,RKe,Mg,_te,PKe,BKe,KS,IKe,qKe,NKe,Eg,bte,jKe,DKe,ZS,GKe,OKe,VKe,Cg,XKe,wg,PA,zKe,vte,WKe,sNe,Mi,Ag,Fte,BA,QKe,Tte,HKe,lNe,wo,IA,UKe,qA,JKe,eR,YKe,KKe,ZKe,NA,eZe,Mte,oZe,rZe,tZe,Cr,jA,aZe,Ete,nZe,sZe,Aa,lZe,Cte,iZe,dZe,wte,cZe,fZe,Ate,mZe,gZe,hZe,k,Sn,yte,pZe,uZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,Rn,Lte,MZe,EZe,tR,CZe,wZe,aR,AZe,yZe,LZe,Pn,xte,xZe,$Ze,nR,kZe,SZe,sR,RZe,PZe,BZe,Bn,$te,IZe,qZe,lR,NZe,jZe,iR,DZe,GZe,OZe,In,kte,VZe,XZe,dR,zZe,WZe,cR,QZe,HZe,UZe,yg,Ste,JZe,YZe,fR,KZe,ZZe,eeo,Lg,Rte,oeo,reo,mR,teo,aeo,neo,xg,Pte,seo,leo,gR,ieo,deo,ceo,qn,Bte,feo,meo,hR,geo,heo,pR,peo,ueo,_eo,Nn,Ite,beo,veo,uR,Feo,Teo,_R,Meo,Eeo,Ceo,jn,qte,weo,Aeo,bR,yeo,Leo,vR,xeo,$eo,keo,$g,Nte,Seo,Reo,FR,Peo,Beo,Ieo,kg,jte,qeo,Neo,TR,jeo,Deo,Geo,Dn,Dte,Oeo,Veo,MR,Xeo,zeo,ER,Weo,Qeo,Heo,Sg,Gte,Ueo,Jeo,CR,Yeo,Keo,Zeo,Gn,Ote,eoo,ooo,wR,roo,too,AR,aoo,noo,soo,On,Vte,loo,ioo,yR,doo,coo,LR,foo,moo,goo,Vn,Xte,hoo,poo,xR,uoo,_oo,$R,boo,voo,Foo,Rg,zte,Too,Moo,kR,Eoo,Coo,woo,Xn,Wte,Aoo,yoo,SR,Loo,xoo,RR,$oo,koo,Soo,zn,Qte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Wn,Hte,Doo,Goo,IR,Ooo,Voo,qR,Xoo,zoo,Woo,Qn,Ute,Qoo,Hoo,NR,Uoo,Joo,jR,Yoo,Koo,Zoo,Hn,Jte,ero,oro,DR,rro,tro,GR,aro,nro,sro,Un,Yte,lro,iro,OR,dro,cro,VR,fro,mro,gro,Pg,Kte,hro,pro,XR,uro,_ro,bro,Jn,Zte,vro,Fro,zR,Tro,Mro,WR,Ero,Cro,wro,Bg,eae,Aro,yro,QR,Lro,xro,$ro,Yn,oae,kro,Sro,HR,Rro,Pro,UR,Bro,Iro,qro,Kn,rae,Nro,jro,JR,Dro,Gro,YR,Oro,Vro,Xro,Zn,tae,zro,Wro,KR,Qro,Hro,ZR,Uro,Jro,Yro,Ig,aae,Kro,Zro,eP,eto,oto,rto,es,nae,tto,ato,oP,nto,sto,rP,lto,ito,dto,os,sae,cto,fto,tP,mto,gto,aP,hto,pto,uto,qg,lae,_to,bto,nP,vto,Fto,Tto,rs,iae,Mto,Eto,sP,Cto,wto,lP,Ato,yto,Lto,ts,dae,xto,$to,iP,kto,Sto,dP,Rto,Pto,Bto,as,cae,Ito,qto,cP,Nto,jto,fP,Dto,Gto,Oto,ns,fae,Vto,Xto,mP,zto,Wto,gP,Qto,Hto,Uto,ss,mae,Jto,Yto,hP,Kto,Zto,pP,eao,oao,rao,ls,gae,tao,aao,uP,nao,sao,_P,lao,iao,dao,is,hae,cao,fao,bP,mao,gao,vP,hao,pao,uao,Ng,pae,_ao,bao,FP,vao,Fao,Tao,ds,uae,Mao,Eao,TP,Cao,wao,MP,Aao,yao,Lao,jg,_ae,xao,$ao,EP,kao,Sao,Rao,Dg,bae,Pao,Bao,CP,Iao,qao,Nao,cs,vae,jao,Dao,wP,Gao,Oao,AP,Vao,Xao,zao,fs,Fae,Wao,Qao,yP,Hao,Uao,LP,Jao,Yao,Kao,ms,Tae,Zao,eno,xP,ono,rno,$P,tno,ano,nno,Gg,Mae,sno,lno,kP,ino,dno,cno,gs,Eae,fno,mno,SP,gno,hno,RP,pno,uno,_no,hs,Cae,bno,vno,PP,Fno,Tno,BP,Mno,Eno,Cno,ps,wae,wno,Ano,IP,yno,Lno,qP,xno,$no,kno,us,Aae,Sno,Rno,NP,Pno,Bno,jP,Ino,qno,Nno,_s,yae,jno,Dno,DP,Gno,Ono,GP,Vno,Xno,zno,Og,Lae,Wno,Qno,OP,Hno,Uno,Jno,bs,xae,Yno,Kno,VP,Zno,eso,XP,oso,rso,tso,Vg,$ae,aso,nso,zP,sso,lso,iso,Xg,kae,dso,cso,WP,fso,mso,gso,zg,Sae,hso,pso,QP,uso,_so,bso,Wg,Rae,vso,Fso,HP,Tso,Mso,Eso,vs,Pae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Qg,Bae,kso,Sso,YP,Rso,Pso,Bso,Fs,Iae,Iso,qso,KP,Nso,jso,ZP,Dso,Gso,Oso,Ts,qae,Vso,Xso,eB,zso,Wso,oB,Qso,Hso,Uso,Ms,Nae,Jso,Yso,rB,Kso,Zso,tB,elo,olo,rlo,Es,jae,tlo,alo,aB,nlo,slo,nB,llo,ilo,dlo,Cs,Dae,clo,flo,sB,mlo,glo,lB,hlo,plo,ulo,ws,Gae,_lo,blo,iB,vlo,Flo,dB,Tlo,Mlo,Elo,Hg,Oae,Clo,wlo,cB,Alo,ylo,Llo,Ug,Vae,xlo,$lo,fB,klo,Slo,Rlo,As,Xae,Plo,Blo,mB,Ilo,qlo,gB,Nlo,jlo,Dlo,ys,zae,Glo,Olo,hB,Vlo,Xlo,pB,zlo,Wlo,Qlo,Ls,Wae,Hlo,Ulo,uB,Jlo,Ylo,_B,Klo,Zlo,eio,Jg,Qae,oio,rio,bB,tio,aio,nio,Yg,Hae,sio,lio,vB,iio,dio,cio,Kg,Uae,fio,mio,FB,gio,hio,pio,xs,Jae,uio,_io,TB,bio,vio,MB,Fio,Tio,Mio,Zg,Yae,Eio,Cio,EB,wio,Aio,yio,eh,Kae,Lio,xio,CB,$io,kio,Sio,oh,Zae,Rio,Pio,wB,Bio,Iio,qio,$s,ene,Nio,jio,AB,Dio,Gio,yB,Oio,Vio,Xio,rh,one,zio,Wio,LB,Qio,Hio,Uio,th,rne,Jio,Yio,xB,Kio,Zio,edo,ks,tne,odo,rdo,$B,tdo,ado,kB,ndo,sdo,ldo,Ss,ane,ido,ddo,SB,cdo,fdo,RB,mdo,gdo,hdo,Rs,nne,pdo,udo,PB,_do,bdo,BB,vdo,Fdo,Tdo,Ps,sne,Mdo,Edo,IB,Cdo,wdo,qB,Ado,ydo,Ldo,ah,xdo,nh,DA,$do,lne,kdo,iNe,Ei,sh,ine,GA,Sdo,dne,Rdo,dNe,Ao,OA,Pdo,VA,Bdo,NB,Ido,qdo,Ndo,XA,jdo,cne,Ddo,Gdo,Odo,He,zA,Vdo,fne,Xdo,zdo,ya,Wdo,mne,Qdo,Hdo,gne,Udo,Jdo,hne,Ydo,Kdo,Zdo,Y,lh,pne,eco,oco,jB,rco,tco,aco,ih,une,nco,sco,DB,lco,ico,dco,dh,_ne,cco,fco,GB,mco,gco,hco,ch,bne,pco,uco,OB,_co,bco,vco,fh,vne,Fco,Tco,VB,Mco,Eco,Cco,mh,Fne,wco,Aco,XB,yco,Lco,xco,gh,Tne,$co,kco,zB,Sco,Rco,Pco,hh,Mne,Bco,Ico,WB,qco,Nco,jco,ph,Ene,Dco,Gco,QB,Oco,Vco,Xco,uh,Cne,zco,Wco,HB,Qco,Hco,Uco,_h,wne,Jco,Yco,UB,Kco,Zco,efo,bh,Ane,ofo,rfo,JB,tfo,afo,nfo,vh,yne,sfo,lfo,YB,ifo,dfo,cfo,Fh,Lne,ffo,mfo,KB,gfo,hfo,pfo,Th,xne,ufo,_fo,ZB,bfo,vfo,Ffo,Mh,$ne,Tfo,Mfo,eI,Efo,Cfo,wfo,Eh,kne,Afo,yfo,oI,Lfo,xfo,$fo,Ch,Sne,kfo,Sfo,rI,Rfo,Pfo,Bfo,wh,Rne,Ifo,qfo,tI,Nfo,jfo,Dfo,Ah,Pne,Gfo,Ofo,aI,Vfo,Xfo,zfo,yh,Bne,Wfo,Qfo,nI,Hfo,Ufo,Jfo,Lh,Ine,Yfo,Kfo,sI,Zfo,emo,omo,xh,qne,rmo,tmo,lI,amo,nmo,smo,$h,Nne,lmo,imo,iI,dmo,cmo,fmo,kh,jne,mmo,gmo,dI,hmo,pmo,umo,Sh,Dne,_mo,bmo,cI,vmo,Fmo,Tmo,Rh,Gne,Mmo,Emo,fI,Cmo,wmo,Amo,Ph,One,ymo,Lmo,mI,xmo,$mo,kmo,Bh,Vne,Smo,Rmo,gI,Pmo,Bmo,Imo,Ih,qmo,qh,Nmo,Nh,WA,jmo,Xne,Dmo,cNe,Ci,jh,zne,QA,Gmo,Wne,Omo,fNe,yo,HA,Vmo,UA,Xmo,hI,zmo,Wmo,Qmo,JA,Hmo,Qne,Umo,Jmo,Ymo,Ue,YA,Kmo,Hne,Zmo,ego,wi,ogo,Une,rgo,tgo,Jne,ago,ngo,sgo,he,Dh,Yne,lgo,igo,pI,dgo,cgo,fgo,Gh,Kne,mgo,ggo,Zne,hgo,pgo,ugo,Oh,ese,_go,bgo,uI,vgo,Fgo,Tgo,Vh,ose,Mgo,Ego,_I,Cgo,wgo,Ago,Xh,rse,ygo,Lgo,bI,xgo,$go,kgo,zh,tse,Sgo,Rgo,vI,Pgo,Bgo,Igo,Wh,ase,qgo,Ngo,FI,jgo,Dgo,Ggo,Qh,nse,Ogo,Vgo,TI,Xgo,zgo,Wgo,Hh,sse,Qgo,Hgo,MI,Ugo,Jgo,Ygo,Uh,lse,Kgo,Zgo,EI,eho,oho,rho,Jh,ise,tho,aho,CI,nho,sho,lho,Yh,dse,iho,dho,wI,cho,fho,mho,Kh,cse,gho,hho,AI,pho,uho,_ho,Zh,fse,bho,vho,yI,Fho,Tho,Mho,ep,mse,Eho,Cho,LI,who,Aho,yho,op,gse,Lho,xho,xI,$ho,kho,Sho,rp,hse,Rho,Pho,$I,Bho,Iho,qho,tp,Nho,ap,jho,np,KA,Dho,pse,Gho,mNe,Ai,sp,use,ZA,Oho,_se,Vho,gNe,Lo,ey,Xho,yi,zho,kI,Who,Qho,SI,Hho,Uho,Jho,oy,Yho,bse,Kho,Zho,epo,tt,ry,opo,vse,rpo,tpo,Li,apo,Fse,npo,spo,RI,lpo,ipo,dpo,lp,cpo,Je,ty,fpo,Tse,mpo,gpo,La,hpo,Mse,ppo,upo,Ese,_po,bpo,Cse,vpo,Fpo,Tpo,x,ip,wse,Mpo,Epo,PI,Cpo,wpo,Apo,dp,Ase,ypo,Lpo,BI,xpo,$po,kpo,cp,yse,Spo,Rpo,II,Ppo,Bpo,Ipo,fp,Lse,qpo,Npo,qI,jpo,Dpo,Gpo,mp,xse,Opo,Vpo,NI,Xpo,zpo,Wpo,gp,$se,Qpo,Hpo,jI,Upo,Jpo,Ypo,hp,kse,Kpo,Zpo,DI,euo,ouo,ruo,pp,Sse,tuo,auo,GI,nuo,suo,luo,up,Rse,iuo,duo,OI,cuo,fuo,muo,_p,Pse,guo,huo,VI,puo,uuo,_uo,bp,Bse,buo,vuo,XI,Fuo,Tuo,Muo,vp,Ise,Euo,Cuo,zI,wuo,Auo,yuo,Fp,qse,Luo,xuo,WI,$uo,kuo,Suo,Tp,Nse,Ruo,Puo,QI,Buo,Iuo,quo,Mp,jse,Nuo,juo,HI,Duo,Guo,Ouo,Ep,Dse,Vuo,Xuo,UI,zuo,Wuo,Quo,Cp,Gse,Huo,Uuo,JI,Juo,Yuo,Kuo,wp,Ose,Zuo,e_o,YI,o_o,r_o,t_o,Ap,Vse,a_o,n_o,KI,s_o,l_o,i_o,yp,Xse,d_o,c_o,ZI,f_o,m_o,g_o,Lp,zse,h_o,p_o,eq,u_o,__o,b_o,xp,Wse,v_o,F_o,oq,T_o,M_o,E_o,$p,Qse,C_o,w_o,rq,A_o,y_o,L_o,kp,Hse,x_o,$_o,tq,k_o,S_o,R_o,Sp,Use,P_o,B_o,aq,I_o,q_o,N_o,Rp,Jse,j_o,D_o,nq,G_o,O_o,V_o,Pp,Yse,X_o,z_o,sq,W_o,Q_o,H_o,Bp,Kse,U_o,J_o,lq,Y_o,K_o,Z_o,Ip,Zse,e2o,o2o,iq,r2o,t2o,a2o,qp,ele,n2o,s2o,dq,l2o,i2o,d2o,Np,ole,c2o,f2o,cq,m2o,g2o,h2o,jp,rle,p2o,u2o,fq,_2o,b2o,v2o,Bs,tle,F2o,T2o,mq,M2o,E2o,gq,C2o,w2o,A2o,Dp,ale,y2o,L2o,hq,x2o,$2o,k2o,Gp,nle,S2o,R2o,pq,P2o,B2o,I2o,Op,sle,q2o,N2o,uq,j2o,D2o,G2o,Vp,lle,O2o,V2o,_q,X2o,z2o,W2o,Xp,ile,Q2o,H2o,bq,U2o,J2o,Y2o,zp,dle,K2o,Z2o,vq,e1o,o1o,r1o,Wp,cle,t1o,a1o,Fq,n1o,s1o,l1o,Qp,fle,i1o,d1o,Tq,c1o,f1o,m1o,Hp,mle,g1o,h1o,Mq,p1o,u1o,_1o,Up,gle,b1o,v1o,Eq,F1o,T1o,M1o,Jp,hle,E1o,C1o,Cq,w1o,A1o,y1o,Yp,ple,L1o,x1o,wq,$1o,k1o,S1o,Kp,ule,R1o,P1o,Aq,B1o,I1o,q1o,Zp,_le,N1o,j1o,yq,D1o,G1o,O1o,eu,ble,V1o,X1o,Lq,z1o,W1o,Q1o,ou,vle,H1o,U1o,xq,J1o,Y1o,K1o,ru,Fle,Z1o,ebo,$q,obo,rbo,tbo,tu,Tle,abo,nbo,kq,sbo,lbo,ibo,au,Mle,dbo,cbo,Sq,fbo,mbo,gbo,nu,Ele,hbo,pbo,Rq,ubo,_bo,bbo,su,Cle,vbo,Fbo,Pq,Tbo,Mbo,Ebo,lu,wle,Cbo,wbo,Bq,Abo,ybo,Lbo,iu,Ale,xbo,$bo,Iq,kbo,Sbo,Rbo,du,yle,Pbo,Bbo,qq,Ibo,qbo,Nbo,cu,Lle,jbo,Dbo,Nq,Gbo,Obo,Vbo,fu,xle,Xbo,zbo,jq,Wbo,Qbo,Hbo,mu,$le,Ubo,Jbo,Dq,Ybo,Kbo,Zbo,gu,kle,e4o,o4o,Gq,r4o,t4o,a4o,hu,Sle,n4o,s4o,Oq,l4o,i4o,d4o,pu,Rle,c4o,f4o,Vq,m4o,g4o,h4o,uu,Ple,p4o,u4o,Xq,_4o,b4o,v4o,_u,Ble,F4o,T4o,zq,M4o,E4o,C4o,bu,Ile,w4o,A4o,Wq,y4o,L4o,x4o,vu,qle,$4o,k4o,Qq,S4o,R4o,P4o,Fu,Nle,B4o,I4o,Hq,q4o,N4o,j4o,Tu,jle,D4o,G4o,Uq,O4o,V4o,X4o,Mu,Dle,z4o,W4o,Jq,Q4o,H4o,U4o,Eu,Gle,J4o,Y4o,Yq,K4o,Z4o,evo,Cu,Ole,ovo,rvo,Kq,tvo,avo,nvo,wu,Vle,svo,lvo,Zq,ivo,dvo,cvo,Au,Xle,fvo,mvo,eN,gvo,hvo,pvo,yu,zle,uvo,_vo,oN,bvo,vvo,Fvo,Lu,Wle,Tvo,Mvo,rN,Evo,Cvo,wvo,xu,Qle,Avo,yvo,tN,Lvo,xvo,$vo,$u,Hle,kvo,Svo,aN,Rvo,Pvo,Bvo,ku,Ule,Ivo,qvo,nN,Nvo,jvo,Dvo,Su,Jle,Gvo,Ovo,sN,Vvo,Xvo,zvo,Ru,Yle,Wvo,Qvo,lN,Hvo,Uvo,Jvo,Pu,Kle,Yvo,Kvo,iN,Zvo,e5o,o5o,Bu,Zle,r5o,t5o,dN,a5o,n5o,s5o,Iu,eie,l5o,i5o,cN,d5o,c5o,f5o,qu,oie,m5o,g5o,fN,h5o,p5o,u5o,Nu,rie,_5o,b5o,mN,v5o,F5o,T5o,ju,tie,M5o,E5o,gN,C5o,w5o,A5o,Du,aie,y5o,L5o,hN,x5o,$5o,k5o,Gu,nie,S5o,R5o,pN,P5o,B5o,I5o,Ou,sie,q5o,N5o,uN,j5o,D5o,G5o,Vu,lie,O5o,V5o,_N,X5o,z5o,W5o,Xu,iie,Q5o,H5o,bN,U5o,J5o,Y5o,zu,die,K5o,Z5o,vN,eFo,oFo,rFo,Wu,cie,tFo,aFo,FN,nFo,sFo,lFo,Qu,fie,iFo,dFo,TN,cFo,fFo,mFo,Hu,mie,gFo,hFo,MN,pFo,uFo,_Fo,Uu,gie,bFo,vFo,EN,FFo,TFo,MFo,Ju,hie,EFo,CFo,CN,wFo,AFo,yFo,Yu,pie,LFo,xFo,wN,$Fo,kFo,SFo,Ku,uie,RFo,PFo,AN,BFo,IFo,qFo,Zu,_ie,NFo,jFo,yN,DFo,GFo,OFo,e_,bie,VFo,XFo,LN,zFo,WFo,QFo,o_,HFo,vie,UFo,JFo,Fie,YFo,KFo,r_,hNe,xi,t_,Tie,ay,ZFo,Mie,eTo,pNe,xo,ny,oTo,$i,rTo,xN,tTo,aTo,$N,nTo,sTo,lTo,sy,iTo,Eie,dTo,cTo,fTo,at,ly,mTo,Cie,gTo,hTo,ki,pTo,wie,uTo,_To,kN,bTo,vTo,FTo,a_,TTo,Ye,iy,MTo,Aie,ETo,CTo,xa,wTo,yie,ATo,yTo,Lie,LTo,xTo,xie,$To,kTo,STo,G,n_,$ie,RTo,PTo,SN,BTo,ITo,qTo,s_,kie,NTo,jTo,RN,DTo,GTo,OTo,l_,Sie,VTo,XTo,PN,zTo,WTo,QTo,i_,Rie,HTo,UTo,BN,JTo,YTo,KTo,d_,Pie,ZTo,e7o,IN,o7o,r7o,t7o,c_,Bie,a7o,n7o,qN,s7o,l7o,i7o,f_,Iie,d7o,c7o,NN,f7o,m7o,g7o,m_,qie,h7o,p7o,jN,u7o,_7o,b7o,g_,Nie,v7o,F7o,DN,T7o,M7o,E7o,h_,jie,C7o,w7o,GN,A7o,y7o,L7o,p_,Die,x7o,$7o,ON,k7o,S7o,R7o,u_,Gie,P7o,B7o,VN,I7o,q7o,N7o,__,Oie,j7o,D7o,XN,G7o,O7o,V7o,b_,Vie,X7o,z7o,zN,W7o,Q7o,H7o,v_,Xie,U7o,J7o,WN,Y7o,K7o,Z7o,F_,zie,eMo,oMo,QN,rMo,tMo,aMo,T_,Wie,nMo,sMo,HN,lMo,iMo,dMo,M_,Qie,cMo,fMo,UN,mMo,gMo,hMo,E_,Hie,pMo,uMo,JN,_Mo,bMo,vMo,C_,Uie,FMo,TMo,YN,MMo,EMo,CMo,w_,Jie,wMo,AMo,KN,yMo,LMo,xMo,A_,Yie,$Mo,kMo,ZN,SMo,RMo,PMo,y_,Kie,BMo,IMo,ej,qMo,NMo,jMo,L_,Zie,DMo,GMo,oj,OMo,VMo,XMo,x_,ede,zMo,WMo,rj,QMo,HMo,UMo,$_,ode,JMo,YMo,tj,KMo,ZMo,eEo,k_,rde,oEo,rEo,aj,tEo,aEo,nEo,S_,tde,sEo,lEo,nj,iEo,dEo,cEo,R_,ade,fEo,mEo,sj,gEo,hEo,pEo,P_,nde,uEo,_Eo,lj,bEo,vEo,FEo,B_,sde,TEo,MEo,ij,EEo,CEo,wEo,I_,lde,AEo,yEo,dj,LEo,xEo,$Eo,q_,ide,kEo,SEo,cj,REo,PEo,BEo,N_,dde,IEo,qEo,fj,NEo,jEo,DEo,j_,cde,GEo,OEo,mj,VEo,XEo,zEo,D_,fde,WEo,QEo,gj,HEo,UEo,JEo,G_,mde,YEo,KEo,hj,ZEo,eCo,oCo,O_,gde,rCo,tCo,pj,aCo,nCo,sCo,V_,hde,lCo,iCo,uj,dCo,cCo,fCo,X_,pde,mCo,gCo,_j,hCo,pCo,uCo,z_,ude,_Co,bCo,bj,vCo,FCo,TCo,W_,_de,MCo,ECo,vj,CCo,wCo,ACo,Q_,yCo,bde,LCo,xCo,vde,$Co,kCo,H_,uNe,Si,U_,Fde,dy,SCo,Tde,RCo,_Ne,$o,cy,PCo,Ri,BCo,Fj,ICo,qCo,Tj,NCo,jCo,DCo,fy,GCo,Mde,OCo,VCo,XCo,nt,my,zCo,Ede,WCo,QCo,Pi,HCo,Cde,UCo,JCo,Mj,YCo,KCo,ZCo,J_,e3o,Ke,gy,o3o,wde,r3o,t3o,$a,a3o,Ade,n3o,s3o,yde,l3o,i3o,Lde,d3o,c3o,f3o,z,Y_,xde,m3o,g3o,Ej,h3o,p3o,u3o,K_,$de,_3o,b3o,Cj,v3o,F3o,T3o,Z_,kde,M3o,E3o,wj,C3o,w3o,A3o,e2,Sde,y3o,L3o,Aj,x3o,$3o,k3o,o2,Rde,S3o,R3o,yj,P3o,B3o,I3o,r2,Pde,q3o,N3o,Lj,j3o,D3o,G3o,t2,Bde,O3o,V3o,xj,X3o,z3o,W3o,a2,Ide,Q3o,H3o,$j,U3o,J3o,Y3o,n2,qde,K3o,Z3o,kj,ewo,owo,rwo,s2,Nde,two,awo,Sj,nwo,swo,lwo,l2,jde,iwo,dwo,Rj,cwo,fwo,mwo,i2,Dde,gwo,hwo,Pj,pwo,uwo,_wo,d2,Gde,bwo,vwo,Bj,Fwo,Two,Mwo,c2,Ode,Ewo,Cwo,Ij,wwo,Awo,ywo,f2,Vde,Lwo,xwo,qj,$wo,kwo,Swo,m2,Xde,Rwo,Pwo,Nj,Bwo,Iwo,qwo,g2,zde,Nwo,jwo,jj,Dwo,Gwo,Owo,h2,Wde,Vwo,Xwo,Dj,zwo,Wwo,Qwo,p2,Qde,Hwo,Uwo,Gj,Jwo,Ywo,Kwo,u2,Hde,Zwo,e0o,Oj,o0o,r0o,t0o,_2,Ude,a0o,n0o,Vj,s0o,l0o,i0o,b2,Jde,d0o,c0o,Xj,f0o,m0o,g0o,v2,Yde,h0o,p0o,zj,u0o,_0o,b0o,F2,Kde,v0o,F0o,Wj,T0o,M0o,E0o,T2,Zde,C0o,w0o,Qj,A0o,y0o,L0o,M2,ece,x0o,$0o,Hj,k0o,S0o,R0o,E2,oce,P0o,B0o,Uj,I0o,q0o,N0o,C2,rce,j0o,D0o,Jj,G0o,O0o,V0o,w2,tce,X0o,z0o,Yj,W0o,Q0o,H0o,A2,ace,U0o,J0o,Kj,Y0o,K0o,Z0o,y2,nce,e6o,o6o,Zj,r6o,t6o,a6o,L2,sce,n6o,s6o,eD,l6o,i6o,d6o,x2,lce,c6o,f6o,oD,m6o,g6o,h6o,$2,ice,p6o,u6o,rD,_6o,b6o,v6o,k2,dce,F6o,T6o,tD,M6o,E6o,C6o,S2,cce,w6o,A6o,aD,y6o,L6o,x6o,R2,fce,$6o,k6o,nD,S6o,R6o,P6o,P2,B6o,mce,I6o,q6o,gce,N6o,j6o,B2,bNe,Bi,I2,hce,hy,D6o,pce,G6o,vNe,ko,py,O6o,Ii,V6o,sD,X6o,z6o,lD,W6o,Q6o,H6o,uy,U6o,uce,J6o,Y6o,K6o,st,_y,Z6o,_ce,eAo,oAo,qi,rAo,bce,tAo,aAo,iD,nAo,sAo,lAo,q2,iAo,Ze,by,dAo,vce,cAo,fAo,ka,mAo,Fce,gAo,hAo,Tce,pAo,uAo,Mce,_Ao,bAo,vAo,Q,N2,Ece,FAo,TAo,dD,MAo,EAo,CAo,j2,Cce,wAo,AAo,cD,yAo,LAo,xAo,D2,wce,$Ao,kAo,fD,SAo,RAo,PAo,G2,Ace,BAo,IAo,mD,qAo,NAo,jAo,O2,yce,DAo,GAo,gD,OAo,VAo,XAo,V2,Lce,zAo,WAo,hD,QAo,HAo,UAo,X2,xce,JAo,YAo,pD,KAo,ZAo,eyo,z2,$ce,oyo,ryo,uD,tyo,ayo,nyo,W2,kce,syo,lyo,_D,iyo,dyo,cyo,Q2,Sce,fyo,myo,bD,gyo,hyo,pyo,H2,Rce,uyo,_yo,vD,byo,vyo,Fyo,U2,Pce,Tyo,Myo,FD,Eyo,Cyo,wyo,J2,Bce,Ayo,yyo,TD,Lyo,xyo,$yo,Y2,Ice,kyo,Syo,MD,Ryo,Pyo,Byo,K2,qce,Iyo,qyo,ED,Nyo,jyo,Dyo,Z2,Nce,Gyo,Oyo,CD,Vyo,Xyo,zyo,e1,jce,Wyo,Qyo,wD,Hyo,Uyo,Jyo,o1,Dce,Yyo,Kyo,AD,Zyo,eLo,oLo,r1,Gce,rLo,tLo,yD,aLo,nLo,sLo,t1,Oce,lLo,iLo,LD,dLo,cLo,fLo,a1,Vce,mLo,gLo,xD,hLo,pLo,uLo,n1,Xce,_Lo,bLo,$D,vLo,FLo,TLo,s1,zce,MLo,ELo,kD,CLo,wLo,ALo,l1,Wce,yLo,LLo,SD,xLo,$Lo,kLo,i1,Qce,SLo,RLo,RD,PLo,BLo,ILo,d1,Hce,qLo,NLo,PD,jLo,DLo,GLo,c1,Uce,OLo,VLo,BD,XLo,zLo,WLo,f1,Jce,QLo,HLo,ID,ULo,JLo,YLo,m1,Yce,KLo,ZLo,qD,e8o,o8o,r8o,g1,Kce,t8o,a8o,ND,n8o,s8o,l8o,h1,Zce,i8o,d8o,efe,c8o,f8o,m8o,p1,ofe,g8o,h8o,jD,p8o,u8o,_8o,u1,rfe,b8o,v8o,DD,F8o,T8o,M8o,_1,tfe,E8o,C8o,GD,w8o,A8o,y8o,b1,afe,L8o,x8o,OD,$8o,k8o,S8o,v1,R8o,nfe,P8o,B8o,sfe,I8o,q8o,F1,FNe,Ni,T1,lfe,vy,N8o,ife,j8o,TNe,So,Fy,D8o,ji,G8o,VD,O8o,V8o,XD,X8o,z8o,W8o,Ty,Q8o,dfe,H8o,U8o,J8o,lt,My,Y8o,cfe,K8o,Z8o,Di,e9o,ffe,o9o,r9o,zD,t9o,a9o,n9o,M1,s9o,eo,Ey,l9o,mfe,i9o,d9o,Sa,c9o,gfe,f9o,m9o,hfe,g9o,h9o,pfe,p9o,u9o,_9o,ue,E1,ufe,b9o,v9o,WD,F9o,T9o,M9o,C1,_fe,E9o,C9o,QD,w9o,A9o,y9o,w1,bfe,L9o,x9o,HD,$9o,k9o,S9o,A1,vfe,R9o,P9o,UD,B9o,I9o,q9o,y1,Ffe,N9o,j9o,JD,D9o,G9o,O9o,L1,Tfe,V9o,X9o,YD,z9o,W9o,Q9o,x1,Mfe,H9o,U9o,KD,J9o,Y9o,K9o,$1,Efe,Z9o,exo,ZD,oxo,rxo,txo,k1,Cfe,axo,nxo,eG,sxo,lxo,ixo,S1,wfe,dxo,cxo,oG,fxo,mxo,gxo,R1,Afe,hxo,pxo,rG,uxo,_xo,bxo,P1,yfe,vxo,Fxo,tG,Txo,Mxo,Exo,B1,Lfe,Cxo,wxo,aG,Axo,yxo,Lxo,I1,xfe,xxo,$xo,nG,kxo,Sxo,Rxo,q1,$fe,Pxo,Bxo,sG,Ixo,qxo,Nxo,N1,kfe,jxo,Dxo,lG,Gxo,Oxo,Vxo,j1,Xxo,Sfe,zxo,Wxo,Rfe,Qxo,Hxo,D1,MNe,Gi,G1,Pfe,Cy,Uxo,Bfe,Jxo,ENe,Ro,wy,Yxo,Oi,Kxo,iG,Zxo,e$o,dG,o$o,r$o,t$o,Ay,a$o,Ife,n$o,s$o,l$o,it,yy,i$o,qfe,d$o,c$o,Vi,f$o,Nfe,m$o,g$o,cG,h$o,p$o,u$o,O1,_$o,oo,Ly,b$o,jfe,v$o,F$o,Ra,T$o,Dfe,M$o,E$o,Gfe,C$o,w$o,Ofe,A$o,y$o,L$o,q,V1,Vfe,x$o,$$o,fG,k$o,S$o,R$o,X1,Xfe,P$o,B$o,mG,I$o,q$o,N$o,z1,zfe,j$o,D$o,gG,G$o,O$o,V$o,W1,Wfe,X$o,z$o,hG,W$o,Q$o,H$o,Q1,Qfe,U$o,J$o,pG,Y$o,K$o,Z$o,H1,Hfe,eko,oko,uG,rko,tko,ako,U1,Ufe,nko,sko,_G,lko,iko,dko,J1,Jfe,cko,fko,bG,mko,gko,hko,Y1,Yfe,pko,uko,vG,_ko,bko,vko,K1,Kfe,Fko,Tko,FG,Mko,Eko,Cko,Z1,Zfe,wko,Ako,TG,yko,Lko,xko,eb,eme,$ko,kko,MG,Sko,Rko,Pko,ob,ome,Bko,Iko,EG,qko,Nko,jko,rb,rme,Dko,Gko,CG,Oko,Vko,Xko,tb,tme,zko,Wko,wG,Qko,Hko,Uko,ab,ame,Jko,Yko,AG,Kko,Zko,eSo,nb,nme,oSo,rSo,yG,tSo,aSo,nSo,sb,sme,sSo,lSo,LG,iSo,dSo,cSo,lb,lme,fSo,mSo,xG,gSo,hSo,pSo,ib,ime,uSo,_So,$G,bSo,vSo,FSo,db,dme,TSo,MSo,kG,ESo,CSo,wSo,cb,cme,ASo,ySo,SG,LSo,xSo,$So,fb,fme,kSo,SSo,RG,RSo,PSo,BSo,mb,mme,ISo,qSo,PG,NSo,jSo,DSo,gb,gme,GSo,OSo,BG,VSo,XSo,zSo,hb,hme,WSo,QSo,IG,HSo,USo,JSo,pb,pme,YSo,KSo,qG,ZSo,eRo,oRo,ub,ume,rRo,tRo,NG,aRo,nRo,sRo,_b,_me,lRo,iRo,jG,dRo,cRo,fRo,bb,bme,mRo,gRo,DG,hRo,pRo,uRo,vb,vme,_Ro,bRo,GG,vRo,FRo,TRo,Fb,Fme,MRo,ERo,OG,CRo,wRo,ARo,Tb,Tme,yRo,LRo,VG,xRo,$Ro,kRo,Mb,Mme,SRo,RRo,XG,PRo,BRo,IRo,Eb,Eme,qRo,NRo,zG,jRo,DRo,GRo,Cb,Cme,ORo,VRo,WG,XRo,zRo,WRo,wb,wme,QRo,HRo,QG,URo,JRo,YRo,Ab,Ame,KRo,ZRo,HG,ePo,oPo,rPo,yb,yme,tPo,aPo,UG,nPo,sPo,lPo,Lb,Lme,iPo,dPo,JG,cPo,fPo,mPo,xb,xme,gPo,hPo,YG,pPo,uPo,_Po,$b,$me,bPo,vPo,KG,FPo,TPo,MPo,kb,kme,EPo,CPo,ZG,wPo,APo,yPo,Sb,Sme,LPo,xPo,eO,$Po,kPo,SPo,Rb,Rme,RPo,PPo,oO,BPo,IPo,qPo,Pb,Pme,NPo,jPo,rO,DPo,GPo,OPo,Bb,Bme,VPo,XPo,tO,zPo,WPo,QPo,Ib,HPo,Ime,UPo,JPo,qme,YPo,KPo,qb,CNe,Xi,Nb,Nme,xy,ZPo,jme,eBo,wNe,Po,$y,oBo,zi,rBo,aO,tBo,aBo,nO,nBo,sBo,lBo,ky,iBo,Dme,dBo,cBo,fBo,dt,Sy,mBo,Gme,gBo,hBo,Wi,pBo,Ome,uBo,_Bo,sO,bBo,vBo,FBo,jb,TBo,ro,Ry,MBo,Vme,EBo,CBo,Pa,wBo,Xme,ABo,yBo,zme,LBo,xBo,Wme,$Bo,kBo,SBo,K,Db,Qme,RBo,PBo,lO,BBo,IBo,qBo,Gb,Hme,NBo,jBo,iO,DBo,GBo,OBo,Ob,Ume,VBo,XBo,dO,zBo,WBo,QBo,Vb,Jme,HBo,UBo,cO,JBo,YBo,KBo,Xb,Yme,ZBo,eIo,fO,oIo,rIo,tIo,zb,Kme,aIo,nIo,mO,sIo,lIo,iIo,Wb,Zme,dIo,cIo,gO,fIo,mIo,gIo,Qb,ege,hIo,pIo,hO,uIo,_Io,bIo,Hb,oge,vIo,FIo,pO,TIo,MIo,EIo,Ub,rge,CIo,wIo,uO,AIo,yIo,LIo,Jb,tge,xIo,$Io,_O,kIo,SIo,RIo,Yb,age,PIo,BIo,bO,IIo,qIo,NIo,Kb,nge,jIo,DIo,vO,GIo,OIo,VIo,Zb,sge,XIo,zIo,FO,WIo,QIo,HIo,e4,lge,UIo,JIo,TO,YIo,KIo,ZIo,o4,ige,eqo,oqo,MO,rqo,tqo,aqo,r4,dge,nqo,sqo,EO,lqo,iqo,dqo,t4,cge,cqo,fqo,CO,mqo,gqo,hqo,a4,fge,pqo,uqo,wO,_qo,bqo,vqo,n4,mge,Fqo,Tqo,AO,Mqo,Eqo,Cqo,s4,gge,wqo,Aqo,yO,yqo,Lqo,xqo,l4,hge,$qo,kqo,LO,Sqo,Rqo,Pqo,i4,pge,Bqo,Iqo,xO,qqo,Nqo,jqo,d4,uge,Dqo,Gqo,$O,Oqo,Vqo,Xqo,c4,_ge,zqo,Wqo,kO,Qqo,Hqo,Uqo,f4,bge,Jqo,Yqo,SO,Kqo,Zqo,eNo,m4,vge,oNo,rNo,RO,tNo,aNo,nNo,g4,Fge,sNo,lNo,PO,iNo,dNo,cNo,h4,Tge,fNo,mNo,BO,gNo,hNo,pNo,p4,uNo,Mge,_No,bNo,Ege,vNo,FNo,u4,ANe,Qi,_4,Cge,Py,TNo,wge,MNo,yNe,Bo,By,ENo,Hi,CNo,IO,wNo,ANo,qO,yNo,LNo,xNo,Iy,$No,Age,kNo,SNo,RNo,ct,qy,PNo,yge,BNo,INo,Ui,qNo,Lge,NNo,jNo,NO,DNo,GNo,ONo,b4,VNo,to,Ny,XNo,xge,zNo,WNo,Ba,QNo,$ge,HNo,UNo,kge,JNo,YNo,Sge,KNo,ZNo,ejo,Yr,v4,Rge,ojo,rjo,jO,tjo,ajo,njo,F4,Pge,sjo,ljo,DO,ijo,djo,cjo,T4,Bge,fjo,mjo,GO,gjo,hjo,pjo,M4,Ige,ujo,_jo,OO,bjo,vjo,Fjo,E4,qge,Tjo,Mjo,VO,Ejo,Cjo,wjo,C4,Ajo,Nge,yjo,Ljo,jge,xjo,$jo,w4,LNe,Ji,A4,Dge,jy,kjo,Gge,Sjo,xNe,Io,Dy,Rjo,Yi,Pjo,XO,Bjo,Ijo,zO,qjo,Njo,jjo,Gy,Djo,Oge,Gjo,Ojo,Vjo,ft,Oy,Xjo,Vge,zjo,Wjo,Ki,Qjo,Xge,Hjo,Ujo,WO,Jjo,Yjo,Kjo,y4,Zjo,ao,Vy,eDo,zge,oDo,rDo,Ia,tDo,Wge,aDo,nDo,Qge,sDo,lDo,Hge,iDo,dDo,cDo,H,L4,Uge,fDo,mDo,QO,gDo,hDo,pDo,x4,Jge,uDo,_Do,HO,bDo,vDo,FDo,$4,Yge,TDo,MDo,UO,EDo,CDo,wDo,k4,Kge,ADo,yDo,JO,LDo,xDo,$Do,S4,Zge,kDo,SDo,YO,RDo,PDo,BDo,R4,ehe,IDo,qDo,KO,NDo,jDo,DDo,P4,ohe,GDo,ODo,ZO,VDo,XDo,zDo,B4,rhe,WDo,QDo,eV,HDo,UDo,JDo,I4,the,YDo,KDo,oV,ZDo,eGo,oGo,q4,ahe,rGo,tGo,rV,aGo,nGo,sGo,N4,nhe,lGo,iGo,tV,dGo,cGo,fGo,j4,she,mGo,gGo,aV,hGo,pGo,uGo,D4,lhe,_Go,bGo,nV,vGo,FGo,TGo,G4,ihe,MGo,EGo,sV,CGo,wGo,AGo,O4,dhe,yGo,LGo,lV,xGo,$Go,kGo,V4,che,SGo,RGo,iV,PGo,BGo,IGo,X4,fhe,qGo,NGo,dV,jGo,DGo,GGo,z4,mhe,OGo,VGo,cV,XGo,zGo,WGo,W4,ghe,QGo,HGo,fV,UGo,JGo,YGo,Q4,hhe,KGo,ZGo,mV,eOo,oOo,rOo,H4,phe,tOo,aOo,gV,nOo,sOo,lOo,U4,uhe,iOo,dOo,hV,cOo,fOo,mOo,J4,_he,gOo,hOo,pV,pOo,uOo,_Oo,Y4,bhe,bOo,vOo,uV,FOo,TOo,MOo,K4,vhe,EOo,COo,_V,wOo,AOo,yOo,Z4,Fhe,LOo,xOo,bV,$Oo,kOo,SOo,ev,The,ROo,POo,vV,BOo,IOo,qOo,ov,Mhe,NOo,jOo,FV,DOo,GOo,OOo,rv,Ehe,VOo,XOo,TV,zOo,WOo,QOo,tv,Che,HOo,UOo,MV,JOo,YOo,KOo,av,whe,ZOo,eVo,EV,oVo,rVo,tVo,nv,Ahe,aVo,nVo,CV,sVo,lVo,iVo,sv,yhe,dVo,cVo,wV,fVo,mVo,gVo,lv,Lhe,hVo,pVo,AV,uVo,_Vo,bVo,iv,vVo,xhe,FVo,TVo,$he,MVo,EVo,dv,$Ne,Zi,cv,khe,Xy,CVo,She,wVo,kNe,qo,zy,AVo,ed,yVo,yV,LVo,xVo,LV,$Vo,kVo,SVo,Wy,RVo,Rhe,PVo,BVo,IVo,mt,Qy,qVo,Phe,NVo,jVo,od,DVo,Bhe,GVo,OVo,xV,VVo,XVo,zVo,fv,WVo,no,Hy,QVo,Ihe,HVo,UVo,qa,JVo,qhe,YVo,KVo,Nhe,ZVo,eXo,jhe,oXo,rXo,tXo,V,mv,Dhe,aXo,nXo,$V,sXo,lXo,iXo,gv,Ghe,dXo,cXo,kV,fXo,mXo,gXo,hv,Ohe,hXo,pXo,SV,uXo,_Xo,bXo,pv,Vhe,vXo,FXo,RV,TXo,MXo,EXo,uv,Xhe,CXo,wXo,PV,AXo,yXo,LXo,_v,zhe,xXo,$Xo,BV,kXo,SXo,RXo,bv,Whe,PXo,BXo,IV,IXo,qXo,NXo,vv,Qhe,jXo,DXo,qV,GXo,OXo,VXo,Fv,Hhe,XXo,zXo,NV,WXo,QXo,HXo,Tv,Uhe,UXo,JXo,jV,YXo,KXo,ZXo,Mv,Jhe,ezo,ozo,DV,rzo,tzo,azo,Ev,Yhe,nzo,szo,GV,lzo,izo,dzo,Cv,Khe,czo,fzo,OV,mzo,gzo,hzo,wv,Zhe,pzo,uzo,VV,_zo,bzo,vzo,Av,epe,Fzo,Tzo,XV,Mzo,Ezo,Czo,yv,ope,wzo,Azo,zV,yzo,Lzo,xzo,Lv,rpe,$zo,kzo,WV,Szo,Rzo,Pzo,xv,tpe,Bzo,Izo,QV,qzo,Nzo,jzo,$v,ape,Dzo,Gzo,HV,Ozo,Vzo,Xzo,kv,npe,zzo,Wzo,UV,Qzo,Hzo,Uzo,Sv,spe,Jzo,Yzo,JV,Kzo,Zzo,eWo,Rv,lpe,oWo,rWo,YV,tWo,aWo,nWo,Pv,ipe,sWo,lWo,KV,iWo,dWo,cWo,Bv,dpe,fWo,mWo,ZV,gWo,hWo,pWo,Iv,cpe,uWo,_Wo,eX,bWo,vWo,FWo,qv,fpe,TWo,MWo,oX,EWo,CWo,wWo,Nv,mpe,AWo,yWo,rX,LWo,xWo,$Wo,jv,gpe,kWo,SWo,tX,RWo,PWo,BWo,Dv,hpe,IWo,qWo,aX,NWo,jWo,DWo,Gv,ppe,GWo,OWo,nX,VWo,XWo,zWo,Ov,upe,WWo,QWo,sX,HWo,UWo,JWo,Vv,_pe,YWo,KWo,lX,ZWo,eQo,oQo,Xv,bpe,rQo,tQo,iX,aQo,nQo,sQo,zv,vpe,lQo,iQo,dX,dQo,cQo,fQo,Wv,Fpe,mQo,gQo,cX,hQo,pQo,uQo,Qv,Tpe,_Qo,bQo,fX,vQo,FQo,TQo,Hv,Mpe,MQo,EQo,mX,CQo,wQo,AQo,Uv,Epe,yQo,LQo,gX,xQo,$Qo,kQo,Jv,Cpe,SQo,RQo,hX,PQo,BQo,IQo,Yv,wpe,qQo,NQo,pX,jQo,DQo,GQo,Kv,OQo,Ape,VQo,XQo,ype,zQo,WQo,Zv,SNe,rd,e5,Lpe,Uy,QQo,xpe,HQo,RNe,No,Jy,UQo,td,JQo,uX,YQo,KQo,_X,ZQo,eHo,oHo,Yy,rHo,$pe,tHo,aHo,nHo,gt,Ky,sHo,kpe,lHo,iHo,ad,dHo,Spe,cHo,fHo,bX,mHo,gHo,hHo,o5,pHo,so,Zy,uHo,Rpe,_Ho,bHo,Na,vHo,Ppe,FHo,THo,Bpe,MHo,EHo,Ipe,CHo,wHo,AHo,qpe,r5,Npe,yHo,LHo,vX,xHo,$Ho,kHo,t5,SHo,jpe,RHo,PHo,Dpe,BHo,IHo,a5,PNe,nd,n5,Gpe,eL,qHo,Ope,NHo,BNe,jo,oL,jHo,sd,DHo,FX,GHo,OHo,TX,VHo,XHo,zHo,rL,WHo,Vpe,QHo,HHo,UHo,ht,tL,JHo,Xpe,YHo,KHo,ld,ZHo,zpe,eUo,oUo,MX,rUo,tUo,aUo,s5,nUo,lo,aL,sUo,Wpe,lUo,iUo,ja,dUo,Qpe,cUo,fUo,Hpe,mUo,gUo,Upe,hUo,pUo,uUo,Fe,l5,Jpe,_Uo,bUo,EX,vUo,FUo,TUo,i5,Ype,MUo,EUo,CX,CUo,wUo,AUo,d5,Kpe,yUo,LUo,wX,xUo,$Uo,kUo,c5,Zpe,SUo,RUo,AX,PUo,BUo,IUo,Is,eue,qUo,NUo,yX,jUo,DUo,LX,GUo,OUo,VUo,f5,oue,XUo,zUo,xX,WUo,QUo,HUo,pt,rue,UUo,JUo,$X,YUo,KUo,kX,ZUo,eJo,SX,oJo,rJo,tJo,m5,tue,aJo,nJo,RX,sJo,lJo,iJo,g5,aue,dJo,cJo,PX,fJo,mJo,gJo,h5,nue,hJo,pJo,BX,uJo,_Jo,bJo,p5,sue,vJo,FJo,IX,TJo,MJo,EJo,u5,lue,CJo,wJo,qX,AJo,yJo,LJo,_5,iue,xJo,$Jo,NX,kJo,SJo,RJo,b5,due,PJo,BJo,jX,IJo,qJo,NJo,v5,jJo,cue,DJo,GJo,fue,OJo,VJo,F5,INe,id,T5,mue,nL,XJo,gue,zJo,qNe,Do,sL,WJo,dd,QJo,DX,HJo,UJo,GX,JJo,YJo,KJo,lL,ZJo,hue,eYo,oYo,rYo,ut,iL,tYo,pue,aYo,nYo,cd,sYo,uue,lYo,iYo,OX,dYo,cYo,fYo,M5,mYo,io,dL,gYo,_ue,hYo,pYo,Da,uYo,bue,_Yo,bYo,vue,vYo,FYo,Fue,TYo,MYo,EYo,Tue,E5,Mue,CYo,wYo,VX,AYo,yYo,LYo,C5,xYo,Eue,$Yo,kYo,Cue,SYo,RYo,w5,NNe,fd,A5,wue,cL,PYo,Aue,BYo,jNe,Go,fL,IYo,md,qYo,XX,NYo,jYo,zX,DYo,GYo,OYo,mL,VYo,yue,XYo,zYo,WYo,_t,gL,QYo,Lue,HYo,UYo,gd,JYo,xue,YYo,KYo,WX,ZYo,eKo,oKo,y5,rKo,co,hL,tKo,$ue,aKo,nKo,Ga,sKo,kue,lKo,iKo,Sue,dKo,cKo,Rue,fKo,mKo,gKo,ke,L5,Pue,hKo,pKo,QX,uKo,_Ko,bKo,x5,Bue,vKo,FKo,HX,TKo,MKo,EKo,$5,Iue,CKo,wKo,UX,AKo,yKo,LKo,k5,que,xKo,$Ko,JX,kKo,SKo,RKo,S5,Nue,PKo,BKo,YX,IKo,qKo,NKo,R5,jue,jKo,DKo,KX,GKo,OKo,VKo,P5,Due,XKo,zKo,ZX,WKo,QKo,HKo,B5,Gue,UKo,JKo,ez,YKo,KKo,ZKo,I5,Oue,eZo,oZo,oz,rZo,tZo,aZo,q5,nZo,Vue,sZo,lZo,Xue,iZo,dZo,N5,DNe,hd,j5,zue,pL,cZo,Wue,fZo,GNe,Oo,uL,mZo,pd,gZo,rz,hZo,pZo,tz,uZo,_Zo,bZo,_L,vZo,Que,FZo,TZo,MZo,bt,bL,EZo,Hue,CZo,wZo,ud,AZo,Uue,yZo,LZo,az,xZo,$Zo,kZo,D5,SZo,fo,vL,RZo,Jue,PZo,BZo,Oa,IZo,Yue,qZo,NZo,Kue,jZo,DZo,Zue,GZo,OZo,VZo,Kr,G5,e_e,XZo,zZo,nz,WZo,QZo,HZo,O5,o_e,UZo,JZo,sz,YZo,KZo,ZZo,V5,r_e,eer,oer,lz,rer,ter,aer,X5,t_e,ner,ser,iz,ler,ier,der,z5,a_e,cer,fer,dz,mer,ger,her,W5,per,n_e,uer,_er,s_e,ber,ver,Q5,ONe,_d,H5,l_e,FL,Fer,i_e,Ter,VNe,Vo,TL,Mer,bd,Eer,cz,Cer,wer,fz,Aer,yer,Ler,ML,xer,d_e,$er,ker,Ser,vt,EL,Rer,c_e,Per,Ber,vd,Ier,f_e,qer,Ner,mz,jer,Der,Ger,U5,Oer,mo,CL,Ver,m_e,Xer,zer,Va,Wer,g_e,Qer,Her,h_e,Uer,Jer,p_e,Yer,Ker,Zer,Se,J5,u_e,eor,oor,gz,ror,tor,aor,Y5,__e,nor,sor,hz,lor,ior,dor,K5,b_e,cor,mor,pz,gor,hor,por,Z5,v_e,uor,_or,uz,bor,vor,For,eF,F_e,Tor,Mor,_z,Eor,Cor,wor,oF,T_e,Aor,yor,bz,Lor,xor,$or,rF,M_e,kor,Sor,vz,Ror,Por,Bor,tF,E_e,Ior,qor,Fz,Nor,jor,Dor,aF,C_e,Gor,Oor,Tz,Vor,Xor,zor,nF,Wor,w_e,Qor,Hor,A_e,Uor,Jor,sF,XNe,Fd,lF,y_e,wL,Yor,L_e,Kor,zNe,Xo,AL,Zor,Td,err,Mz,orr,rrr,Ez,trr,arr,nrr,yL,srr,x_e,lrr,irr,drr,Ft,LL,crr,$_e,frr,mrr,Md,grr,k_e,hrr,prr,Cz,urr,_rr,brr,iF,vrr,go,xL,Frr,S_e,Trr,Mrr,Xa,Err,R_e,Crr,wrr,P_e,Arr,yrr,B_e,Lrr,xrr,$rr,$L,dF,I_e,krr,Srr,wz,Rrr,Prr,Brr,cF,q_e,Irr,qrr,Az,Nrr,jrr,Drr,fF,Grr,N_e,Orr,Vrr,j_e,Xrr,zrr,mF,WNe,Ed,gF,D_e,kL,Wrr,G_e,Qrr,QNe,zo,SL,Hrr,Cd,Urr,yz,Jrr,Yrr,Lz,Krr,Zrr,etr,RL,otr,O_e,rtr,ttr,atr,Tt,PL,ntr,V_e,str,ltr,wd,itr,X_e,dtr,ctr,xz,ftr,mtr,gtr,hF,htr,ho,BL,ptr,z_e,utr,_tr,za,btr,W_e,vtr,Ftr,Q_e,Ttr,Mtr,H_e,Etr,Ctr,wtr,Zr,pF,U_e,Atr,ytr,$z,Ltr,xtr,$tr,uF,J_e,ktr,Str,kz,Rtr,Ptr,Btr,_F,Y_e,Itr,qtr,Sz,Ntr,jtr,Dtr,bF,K_e,Gtr,Otr,Rz,Vtr,Xtr,ztr,vF,Z_e,Wtr,Qtr,Pz,Htr,Utr,Jtr,FF,Ytr,e2e,Ktr,Ztr,o2e,ear,oar,TF,HNe,Ad,MF,r2e,IL,rar,t2e,tar,UNe,Wo,qL,aar,yd,nar,Bz,sar,lar,Iz,iar,dar,car,NL,far,a2e,mar,gar,har,Mt,jL,par,n2e,uar,_ar,Ld,bar,s2e,Far,Tar,qz,Mar,Ear,Car,EF,war,po,DL,Aar,l2e,yar,Lar,Wa,xar,i2e,$ar,kar,d2e,Sar,Rar,c2e,Par,Bar,Iar,xd,CF,f2e,qar,Nar,Nz,jar,Dar,Gar,wF,m2e,Oar,Var,jz,Xar,zar,War,AF,g2e,Qar,Har,Dz,Uar,Jar,Yar,yF,Kar,h2e,Zar,enr,p2e,onr,rnr,LF,JNe,$d,xF,u2e,GL,tnr,_2e,anr,YNe,Qo,OL,nnr,kd,snr,Gz,lnr,inr,Oz,dnr,cnr,fnr,VL,mnr,b2e,gnr,hnr,pnr,Et,XL,unr,v2e,_nr,bnr,Sd,vnr,F2e,Fnr,Tnr,Vz,Mnr,Enr,Cnr,$F,wnr,uo,zL,Anr,T2e,ynr,Lnr,Qa,xnr,M2e,$nr,knr,E2e,Snr,Rnr,C2e,Pnr,Bnr,Inr,WL,kF,w2e,qnr,Nnr,Xz,jnr,Dnr,Gnr,SF,A2e,Onr,Vnr,zz,Xnr,znr,Wnr,RF,Qnr,y2e,Hnr,Unr,L2e,Jnr,Ynr,PF,KNe,Rd,BF,x2e,QL,Knr,$2e,Znr,ZNe,Ho,HL,esr,Pd,osr,Wz,rsr,tsr,Qz,asr,nsr,ssr,UL,lsr,k2e,isr,dsr,csr,Ct,JL,fsr,S2e,msr,gsr,Bd,hsr,R2e,psr,usr,Hz,_sr,bsr,vsr,IF,Fsr,_o,YL,Tsr,P2e,Msr,Esr,Ha,Csr,B2e,wsr,Asr,I2e,ysr,Lsr,q2e,xsr,$sr,ksr,N2e,qF,j2e,Ssr,Rsr,Uz,Psr,Bsr,Isr,NF,qsr,D2e,Nsr,jsr,G2e,Dsr,Gsr,jF,eje,Id,DF,O2e,KL,Osr,V2e,Vsr,oje,Uo,ZL,Xsr,qd,zsr,Jz,Wsr,Qsr,Yz,Hsr,Usr,Jsr,e8,Ysr,X2e,Ksr,Zsr,elr,wt,o8,olr,z2e,rlr,tlr,Nd,alr,W2e,nlr,slr,Kz,llr,ilr,dlr,GF,clr,bo,r8,flr,Q2e,mlr,glr,Ua,hlr,H2e,plr,ulr,U2e,_lr,blr,J2e,vlr,Flr,Tlr,Ja,OF,Y2e,Mlr,Elr,Zz,Clr,wlr,Alr,VF,K2e,ylr,Llr,eW,xlr,$lr,klr,XF,Z2e,Slr,Rlr,oW,Plr,Blr,Ilr,zF,e1e,qlr,Nlr,rW,jlr,Dlr,Glr,WF,Olr,o1e,Vlr,Xlr,r1e,zlr,Wlr,QF,rje,jd,HF,t1e,t8,Qlr,a1e,Hlr,tje,Jo,a8,Ulr,Dd,Jlr,tW,Ylr,Klr,aW,Zlr,eir,oir,n8,rir,n1e,tir,air,nir,At,s8,sir,s1e,lir,iir,Gd,dir,l1e,cir,fir,nW,mir,gir,hir,UF,pir,vo,l8,uir,i1e,_ir,bir,Ya,vir,d1e,Fir,Tir,c1e,Mir,Eir,f1e,Cir,wir,Air,m1e,JF,g1e,yir,Lir,sW,xir,$ir,kir,YF,Sir,h1e,Rir,Pir,p1e,Bir,Iir,KF,aje,Od,ZF,u1e,i8,qir,_1e,Nir,nje,Yo,d8,jir,Vd,Dir,lW,Gir,Oir,iW,Vir,Xir,zir,c8,Wir,b1e,Qir,Hir,Uir,yt,f8,Jir,v1e,Yir,Kir,Xd,Zir,F1e,edr,odr,dW,rdr,tdr,adr,eT,ndr,wr,m8,sdr,T1e,ldr,idr,Ka,ddr,M1e,cdr,fdr,E1e,mdr,gdr,C1e,hdr,pdr,udr,N,oT,w1e,_dr,bdr,cW,vdr,Fdr,Tdr,rT,A1e,Mdr,Edr,fW,Cdr,wdr,Adr,tT,y1e,ydr,Ldr,mW,xdr,$dr,kdr,aT,L1e,Sdr,Rdr,gW,Pdr,Bdr,Idr,nT,x1e,qdr,Ndr,hW,jdr,Ddr,Gdr,sT,$1e,Odr,Vdr,pW,Xdr,zdr,Wdr,lT,k1e,Qdr,Hdr,uW,Udr,Jdr,Ydr,iT,S1e,Kdr,Zdr,_W,ecr,ocr,rcr,dT,R1e,tcr,acr,bW,ncr,scr,lcr,cT,P1e,icr,dcr,vW,ccr,fcr,mcr,fT,B1e,gcr,hcr,FW,pcr,ucr,_cr,mT,I1e,bcr,vcr,TW,Fcr,Tcr,Mcr,gT,q1e,Ecr,Ccr,MW,wcr,Acr,ycr,hT,N1e,Lcr,xcr,EW,$cr,kcr,Scr,pT,j1e,Rcr,Pcr,CW,Bcr,Icr,qcr,uT,D1e,Ncr,jcr,wW,Dcr,Gcr,Ocr,_T,G1e,Vcr,Xcr,AW,zcr,Wcr,Qcr,qs,O1e,Hcr,Ucr,yW,Jcr,Ycr,LW,Kcr,Zcr,efr,bT,V1e,ofr,rfr,xW,tfr,afr,nfr,vT,X1e,sfr,lfr,$W,ifr,dfr,cfr,FT,z1e,ffr,mfr,kW,gfr,hfr,pfr,TT,W1e,ufr,_fr,SW,bfr,vfr,Ffr,MT,Q1e,Tfr,Mfr,RW,Efr,Cfr,wfr,ET,H1e,Afr,yfr,PW,Lfr,xfr,$fr,CT,U1e,kfr,Sfr,BW,Rfr,Pfr,Bfr,wT,J1e,Ifr,qfr,IW,Nfr,jfr,Dfr,AT,Y1e,Gfr,Ofr,qW,Vfr,Xfr,zfr,yT,K1e,Wfr,Qfr,NW,Hfr,Ufr,Jfr,LT,Z1e,Yfr,Kfr,jW,Zfr,emr,omr,xT,ebe,rmr,tmr,DW,amr,nmr,smr,$T,obe,lmr,imr,GW,dmr,cmr,fmr,kT,rbe,mmr,gmr,OW,hmr,pmr,umr,ST,tbe,_mr,bmr,VW,vmr,Fmr,Tmr,RT,abe,Mmr,Emr,XW,Cmr,wmr,Amr,PT,nbe,ymr,Lmr,zW,xmr,$mr,kmr,BT,sbe,Smr,Rmr,WW,Pmr,Bmr,Imr,IT,lbe,qmr,Nmr,QW,jmr,Dmr,Gmr,qT,ibe,Omr,Vmr,HW,Xmr,zmr,Wmr,NT,dbe,Qmr,Hmr,UW,Umr,Jmr,Ymr,jT,cbe,Kmr,Zmr,JW,egr,ogr,rgr,DT,fbe,tgr,agr,YW,ngr,sgr,lgr,GT,mbe,igr,dgr,KW,cgr,fgr,mgr,OT,gbe,ggr,hgr,ZW,pgr,ugr,_gr,VT,hbe,bgr,vgr,eQ,Fgr,Tgr,Mgr,XT,pbe,Egr,Cgr,oQ,wgr,Agr,ygr,zT,ube,Lgr,xgr,rQ,$gr,kgr,Sgr,WT,sje,zd,QT,_be,g8,Rgr,bbe,Pgr,lje,Ko,h8,Bgr,Wd,Igr,tQ,qgr,Ngr,aQ,jgr,Dgr,Ggr,p8,Ogr,vbe,Vgr,Xgr,zgr,Lt,u8,Wgr,Fbe,Qgr,Hgr,Qd,Ugr,Tbe,Jgr,Ygr,nQ,Kgr,Zgr,ehr,HT,ohr,Ar,_8,rhr,Mbe,thr,ahr,Za,nhr,Ebe,shr,lhr,Cbe,ihr,dhr,wbe,chr,fhr,mhr,se,UT,Abe,ghr,hhr,sQ,phr,uhr,_hr,JT,ybe,bhr,vhr,lQ,Fhr,Thr,Mhr,YT,Lbe,Ehr,Chr,iQ,whr,Ahr,yhr,KT,xbe,Lhr,xhr,dQ,$hr,khr,Shr,ZT,$be,Rhr,Phr,cQ,Bhr,Ihr,qhr,e7,kbe,Nhr,jhr,fQ,Dhr,Ghr,Ohr,o7,Sbe,Vhr,Xhr,mQ,zhr,Whr,Qhr,r7,Rbe,Hhr,Uhr,gQ,Jhr,Yhr,Khr,t7,Pbe,Zhr,epr,hQ,opr,rpr,tpr,a7,Bbe,apr,npr,pQ,spr,lpr,ipr,n7,Ibe,dpr,cpr,uQ,fpr,mpr,gpr,s7,qbe,hpr,ppr,_Q,upr,_pr,bpr,l7,Nbe,vpr,Fpr,bQ,Tpr,Mpr,Epr,i7,jbe,Cpr,wpr,vQ,Apr,ypr,Lpr,d7,Dbe,xpr,$pr,FQ,kpr,Spr,Rpr,c7,Gbe,Ppr,Bpr,TQ,Ipr,qpr,Npr,f7,Obe,jpr,Dpr,MQ,Gpr,Opr,Vpr,m7,Vbe,Xpr,zpr,EQ,Wpr,Qpr,Hpr,g7,Xbe,Upr,Jpr,CQ,Ypr,Kpr,Zpr,h7,zbe,eur,our,wQ,rur,tur,aur,p7,Wbe,nur,sur,AQ,lur,iur,dur,u7,Qbe,cur,fur,yQ,mur,gur,hur,_7,Hbe,pur,uur,LQ,_ur,bur,vur,b7,ije,Hd,v7,Ube,b8,Fur,Jbe,Tur,dje,Zo,v8,Mur,Ud,Eur,xQ,Cur,wur,$Q,Aur,yur,Lur,F8,xur,Ybe,$ur,kur,Sur,xt,T8,Rur,Kbe,Pur,Bur,Jd,Iur,Zbe,qur,Nur,kQ,jur,Dur,Gur,F7,Our,yr,M8,Vur,e4e,Xur,zur,en,Wur,o4e,Qur,Hur,r4e,Uur,Jur,t4e,Yur,Kur,Zur,Me,T7,a4e,e_r,o_r,SQ,r_r,t_r,a_r,M7,n4e,n_r,s_r,RQ,l_r,i_r,d_r,E7,s4e,c_r,f_r,PQ,m_r,g_r,h_r,C7,l4e,p_r,u_r,BQ,__r,b_r,v_r,w7,i4e,F_r,T_r,IQ,M_r,E_r,C_r,A7,d4e,w_r,A_r,qQ,y_r,L_r,x_r,y7,c4e,$_r,k_r,NQ,S_r,R_r,P_r,L7,f4e,B_r,I_r,jQ,q_r,N_r,j_r,x7,m4e,D_r,G_r,DQ,O_r,V_r,X_r,$7,g4e,z_r,W_r,GQ,Q_r,H_r,U_r,k7,h4e,J_r,Y_r,OQ,K_r,Z_r,e2r,S7,p4e,o2r,r2r,VQ,t2r,a2r,n2r,R7,cje,Yd,P7,u4e,E8,s2r,_4e,l2r,fje,er,C8,i2r,Kd,d2r,XQ,c2r,f2r,zQ,m2r,g2r,h2r,w8,p2r,b4e,u2r,_2r,b2r,$t,A8,v2r,v4e,F2r,T2r,Zd,M2r,F4e,E2r,C2r,WQ,w2r,A2r,y2r,B7,L2r,Lr,y8,x2r,T4e,$2r,k2r,on,S2r,M4e,R2r,P2r,E4e,B2r,I2r,C4e,q2r,N2r,j2r,rn,I7,w4e,D2r,G2r,QQ,O2r,V2r,X2r,q7,A4e,z2r,W2r,HQ,Q2r,H2r,U2r,N7,y4e,J2r,Y2r,UQ,K2r,Z2r,e1r,j7,L4e,o1r,r1r,JQ,t1r,a1r,n1r,D7,mje,ec,G7,x4e,L8,s1r,$4e,l1r,gje,or,x8,i1r,oc,d1r,YQ,c1r,f1r,KQ,m1r,g1r,h1r,$8,p1r,k4e,u1r,_1r,b1r,kt,k8,v1r,S4e,F1r,T1r,rc,M1r,R4e,E1r,C1r,ZQ,w1r,A1r,y1r,O7,L1r,xr,S8,x1r,P4e,$1r,k1r,tn,S1r,B4e,R1r,P1r,I4e,B1r,I1r,q4e,q1r,N1r,j1r,ie,V7,N4e,D1r,G1r,eH,O1r,V1r,X1r,X7,j4e,z1r,W1r,oH,Q1r,H1r,U1r,z7,D4e,J1r,Y1r,rH,K1r,Z1r,ebr,W7,G4e,obr,rbr,tH,tbr,abr,nbr,Q7,O4e,sbr,lbr,aH,ibr,dbr,cbr,H7,V4e,fbr,mbr,nH,gbr,hbr,pbr,U7,X4e,ubr,_br,sH,bbr,vbr,Fbr,J7,z4e,Tbr,Mbr,lH,Ebr,Cbr,wbr,Y7,W4e,Abr,ybr,iH,Lbr,xbr,$br,K7,Q4e,kbr,Sbr,dH,Rbr,Pbr,Bbr,Z7,H4e,Ibr,qbr,cH,Nbr,jbr,Dbr,eM,U4e,Gbr,Obr,fH,Vbr,Xbr,zbr,oM,J4e,Wbr,Qbr,mH,Hbr,Ubr,Jbr,rM,Y4e,Ybr,Kbr,gH,Zbr,e4r,o4r,tM,K4e,r4r,t4r,hH,a4r,n4r,s4r,aM,Z4e,l4r,i4r,pH,d4r,c4r,f4r,nM,eve,m4r,g4r,uH,h4r,p4r,u4r,sM,ove,_4r,b4r,_H,v4r,F4r,T4r,lM,rve,M4r,E4r,bH,C4r,w4r,A4r,iM,tve,y4r,L4r,vH,x4r,$4r,k4r,dM,hje,tc,cM,ave,R8,S4r,nve,R4r,pje,rr,P8,P4r,ac,B4r,FH,I4r,q4r,TH,N4r,j4r,D4r,B8,G4r,sve,O4r,V4r,X4r,St,I8,z4r,lve,W4r,Q4r,nc,H4r,ive,U4r,J4r,MH,Y4r,K4r,Z4r,fM,evr,$r,q8,ovr,dve,rvr,tvr,an,avr,cve,nvr,svr,fve,lvr,ivr,mve,dvr,cvr,fvr,ye,mM,gve,mvr,gvr,EH,hvr,pvr,uvr,gM,hve,_vr,bvr,CH,vvr,Fvr,Tvr,hM,pve,Mvr,Evr,wH,Cvr,wvr,Avr,pM,uve,yvr,Lvr,AH,xvr,$vr,kvr,uM,_ve,Svr,Rvr,yH,Pvr,Bvr,Ivr,_M,bve,qvr,Nvr,LH,jvr,Dvr,Gvr,bM,vve,Ovr,Vvr,xH,Xvr,zvr,Wvr,vM,Fve,Qvr,Hvr,$H,Uvr,Jvr,Yvr,FM,Tve,Kvr,Zvr,kH,e5r,o5r,r5r,TM,Mve,t5r,a5r,SH,n5r,s5r,l5r,MM,uje,sc,EM,Eve,N8,i5r,Cve,d5r,_je,tr,j8,c5r,lc,f5r,RH,m5r,g5r,PH,h5r,p5r,u5r,D8,_5r,wve,b5r,v5r,F5r,Rt,G8,T5r,Ave,M5r,E5r,ic,C5r,yve,w5r,A5r,BH,y5r,L5r,x5r,CM,$5r,kr,O8,k5r,Lve,S5r,R5r,nn,P5r,xve,B5r,I5r,$ve,q5r,N5r,kve,j5r,D5r,G5r,oe,wM,Sve,O5r,V5r,IH,X5r,z5r,W5r,AM,Rve,Q5r,H5r,qH,U5r,J5r,Y5r,yM,Pve,K5r,Z5r,NH,eFr,oFr,rFr,LM,Bve,tFr,aFr,jH,nFr,sFr,lFr,xM,Ive,iFr,dFr,DH,cFr,fFr,mFr,$M,qve,gFr,hFr,GH,pFr,uFr,_Fr,kM,Nve,bFr,vFr,OH,FFr,TFr,MFr,SM,jve,EFr,CFr,VH,wFr,AFr,yFr,RM,Dve,LFr,xFr,XH,$Fr,kFr,SFr,PM,Gve,RFr,PFr,zH,BFr,IFr,qFr,BM,Ove,NFr,jFr,WH,DFr,GFr,OFr,IM,Vve,VFr,XFr,QH,zFr,WFr,QFr,qM,Xve,HFr,UFr,HH,JFr,YFr,KFr,NM,zve,ZFr,eTr,UH,oTr,rTr,tTr,jM,Wve,aTr,nTr,JH,sTr,lTr,iTr,DM,Qve,dTr,cTr,YH,fTr,mTr,gTr,GM,Hve,hTr,pTr,KH,uTr,_Tr,bTr,OM,Uve,vTr,FTr,ZH,TTr,MTr,ETr,VM,Jve,CTr,wTr,eU,ATr,yTr,LTr,XM,Yve,xTr,$Tr,oU,kTr,STr,RTr,zM,Kve,PTr,BTr,rU,ITr,qTr,NTr,WM,Zve,jTr,DTr,tU,GTr,OTr,VTr,QM,e5e,XTr,zTr,aU,WTr,QTr,HTr,HM,o5e,UTr,JTr,nU,YTr,KTr,ZTr,UM,r5e,e7r,o7r,sU,r7r,t7r,a7r,JM,t5e,n7r,s7r,lU,l7r,i7r,d7r,YM,bje,dc,KM,a5e,V8,c7r,n5e,f7r,vje,ar,X8,m7r,cc,g7r,iU,h7r,p7r,dU,u7r,_7r,b7r,z8,v7r,s5e,F7r,T7r,M7r,Pt,W8,E7r,l5e,C7r,w7r,fc,A7r,i5e,y7r,L7r,cU,x7r,$7r,k7r,ZM,S7r,Sr,Q8,R7r,d5e,P7r,B7r,sn,I7r,c5e,q7r,N7r,f5e,j7r,D7r,m5e,G7r,O7r,V7r,pe,eE,g5e,X7r,z7r,fU,W7r,Q7r,H7r,oE,h5e,U7r,J7r,mU,Y7r,K7r,Z7r,rE,p5e,eMr,oMr,gU,rMr,tMr,aMr,tE,u5e,nMr,sMr,hU,lMr,iMr,dMr,aE,_5e,cMr,fMr,pU,mMr,gMr,hMr,nE,b5e,pMr,uMr,uU,_Mr,bMr,vMr,sE,v5e,FMr,TMr,_U,MMr,EMr,CMr,lE,F5e,wMr,AMr,bU,yMr,LMr,xMr,iE,T5e,$Mr,kMr,vU,SMr,RMr,PMr,dE,M5e,BMr,IMr,FU,qMr,NMr,jMr,cE,E5e,DMr,GMr,TU,OMr,VMr,XMr,fE,C5e,zMr,WMr,MU,QMr,HMr,UMr,mE,w5e,JMr,YMr,EU,KMr,ZMr,eEr,gE,A5e,oEr,rEr,CU,tEr,aEr,nEr,hE,y5e,sEr,lEr,wU,iEr,dEr,cEr,pE,L5e,fEr,mEr,AU,gEr,hEr,pEr,uE,x5e,uEr,_Er,yU,bEr,vEr,FEr,_E,Fje,mc,bE,$5e,H8,TEr,k5e,MEr,Tje,nr,U8,EEr,gc,CEr,LU,wEr,AEr,xU,yEr,LEr,xEr,J8,$Er,S5e,kEr,SEr,REr,Bt,Y8,PEr,R5e,BEr,IEr,hc,qEr,P5e,NEr,jEr,$U,DEr,GEr,OEr,vE,VEr,Rr,K8,XEr,B5e,zEr,WEr,ln,QEr,I5e,HEr,UEr,q5e,JEr,YEr,N5e,KEr,ZEr,eCr,Z8,FE,j5e,oCr,rCr,kU,tCr,aCr,nCr,TE,D5e,sCr,lCr,SU,iCr,dCr,cCr,ME,Mje,pc,EE,G5e,e9,fCr,O5e,mCr,Eje,sr,o9,gCr,uc,hCr,RU,pCr,uCr,PU,_Cr,bCr,vCr,r9,FCr,V5e,TCr,MCr,ECr,It,t9,CCr,X5e,wCr,ACr,_c,yCr,z5e,LCr,xCr,BU,$Cr,kCr,SCr,CE,RCr,Pr,a9,PCr,W5e,BCr,ICr,dn,qCr,Q5e,NCr,jCr,H5e,DCr,GCr,U5e,OCr,VCr,XCr,J5e,wE,Y5e,zCr,WCr,IU,QCr,HCr,UCr,AE,Cje,bc,yE,K5e,n9,JCr,Z5e,YCr,wje,lr,s9,KCr,vc,ZCr,qU,e3r,o3r,NU,r3r,t3r,a3r,l9,n3r,eFe,s3r,l3r,i3r,qt,i9,d3r,oFe,c3r,f3r,Fc,m3r,rFe,g3r,h3r,jU,p3r,u3r,_3r,LE,b3r,Br,d9,v3r,tFe,F3r,T3r,cn,M3r,aFe,E3r,C3r,nFe,w3r,A3r,sFe,y3r,L3r,x3r,de,xE,lFe,$3r,k3r,DU,S3r,R3r,P3r,$E,iFe,B3r,I3r,GU,q3r,N3r,j3r,kE,dFe,D3r,G3r,OU,O3r,V3r,X3r,SE,cFe,z3r,W3r,VU,Q3r,H3r,U3r,RE,fFe,J3r,Y3r,XU,K3r,Z3r,ewr,PE,mFe,owr,rwr,zU,twr,awr,nwr,BE,gFe,swr,lwr,WU,iwr,dwr,cwr,IE,hFe,fwr,mwr,QU,gwr,hwr,pwr,qE,pFe,uwr,_wr,HU,bwr,vwr,Fwr,NE,uFe,Twr,Mwr,UU,Ewr,Cwr,wwr,jE,_Fe,Awr,ywr,JU,Lwr,xwr,$wr,DE,bFe,kwr,Swr,YU,Rwr,Pwr,Bwr,GE,vFe,Iwr,qwr,KU,Nwr,jwr,Dwr,OE,FFe,Gwr,Owr,ZU,Vwr,Xwr,zwr,VE,TFe,Wwr,Qwr,eJ,Hwr,Uwr,Jwr,XE,MFe,Ywr,Kwr,oJ,Zwr,e0r,o0r,zE,EFe,r0r,t0r,rJ,a0r,n0r,s0r,WE,CFe,l0r,i0r,tJ,d0r,c0r,f0r,QE,wFe,m0r,g0r,aJ,h0r,p0r,u0r,HE,AFe,_0r,b0r,nJ,v0r,F0r,T0r,UE,Aje,Tc,JE,yFe,c9,M0r,LFe,E0r,yje,ir,f9,C0r,Mc,w0r,sJ,A0r,y0r,lJ,L0r,x0r,$0r,m9,k0r,xFe,S0r,R0r,P0r,Nt,g9,B0r,$Fe,I0r,q0r,Ec,N0r,kFe,j0r,D0r,iJ,G0r,O0r,V0r,YE,X0r,Ir,h9,z0r,SFe,W0r,Q0r,fn,H0r,RFe,U0r,J0r,PFe,Y0r,K0r,BFe,Z0r,e6r,o6r,ce,KE,IFe,r6r,t6r,dJ,a6r,n6r,s6r,ZE,qFe,l6r,i6r,cJ,d6r,c6r,f6r,eC,NFe,m6r,g6r,fJ,h6r,p6r,u6r,oC,jFe,_6r,b6r,mJ,v6r,F6r,T6r,rC,DFe,M6r,E6r,gJ,C6r,w6r,A6r,tC,GFe,y6r,L6r,hJ,x6r,$6r,k6r,aC,OFe,S6r,R6r,pJ,P6r,B6r,I6r,nC,VFe,q6r,N6r,uJ,j6r,D6r,G6r,sC,XFe,O6r,V6r,_J,X6r,z6r,W6r,lC,zFe,Q6r,H6r,bJ,U6r,J6r,Y6r,iC,WFe,K6r,Z6r,vJ,eAr,oAr,rAr,dC,QFe,tAr,aAr,FJ,nAr,sAr,lAr,cC,HFe,iAr,dAr,TJ,cAr,fAr,mAr,fC,UFe,gAr,hAr,MJ,pAr,uAr,_Ar,mC,JFe,bAr,vAr,EJ,FAr,TAr,MAr,gC,YFe,EAr,CAr,CJ,wAr,AAr,yAr,hC,KFe,LAr,xAr,wJ,$Ar,kAr,SAr,pC,ZFe,RAr,PAr,AJ,BAr,IAr,qAr,uC,eTe,NAr,jAr,yJ,DAr,GAr,OAr,_C,oTe,VAr,XAr,LJ,zAr,WAr,QAr,bC,Lje,Cc,vC,rTe,p9,HAr,tTe,UAr,xje,dr,u9,JAr,wc,YAr,xJ,KAr,ZAr,$J,eyr,oyr,ryr,_9,tyr,aTe,ayr,nyr,syr,jt,b9,lyr,nTe,iyr,dyr,Ac,cyr,sTe,fyr,myr,kJ,gyr,hyr,pyr,FC,uyr,qr,v9,_yr,lTe,byr,vyr,mn,Fyr,iTe,Tyr,Myr,dTe,Eyr,Cyr,cTe,wyr,Ayr,yyr,fTe,TC,mTe,Lyr,xyr,SJ,$yr,kyr,Syr,MC,$je,yc,EC,gTe,F9,Ryr,hTe,Pyr,kje,cr,T9,Byr,Lc,Iyr,RJ,qyr,Nyr,PJ,jyr,Dyr,Gyr,M9,Oyr,pTe,Vyr,Xyr,zyr,Dt,E9,Wyr,uTe,Qyr,Hyr,xc,Uyr,_Te,Jyr,Yyr,BJ,Kyr,Zyr,eLr,CC,oLr,Nr,C9,rLr,bTe,tLr,aLr,gn,nLr,vTe,sLr,lLr,FTe,iLr,dLr,TTe,cLr,fLr,mLr,MTe,wC,ETe,gLr,hLr,IJ,pLr,uLr,_Lr,AC,Sje,$c,yC,CTe,w9,bLr,wTe,vLr,Rje,fr,A9,FLr,kc,TLr,qJ,MLr,ELr,NJ,CLr,wLr,ALr,y9,yLr,ATe,LLr,xLr,$Lr,Gt,L9,kLr,yTe,SLr,RLr,Sc,PLr,LTe,BLr,ILr,jJ,qLr,NLr,jLr,LC,DLr,jr,x9,GLr,xTe,OLr,VLr,hn,XLr,$Te,zLr,WLr,kTe,QLr,HLr,STe,ULr,JLr,YLr,te,xC,RTe,KLr,ZLr,DJ,e8r,o8r,r8r,$C,PTe,t8r,a8r,GJ,n8r,s8r,l8r,kC,BTe,i8r,d8r,OJ,c8r,f8r,m8r,SC,ITe,g8r,h8r,VJ,p8r,u8r,_8r,RC,qTe,b8r,v8r,XJ,F8r,T8r,M8r,PC,NTe,E8r,C8r,zJ,w8r,A8r,y8r,BC,jTe,L8r,x8r,WJ,$8r,k8r,S8r,IC,DTe,R8r,P8r,QJ,B8r,I8r,q8r,qC,GTe,N8r,j8r,HJ,D8r,G8r,O8r,NC,OTe,V8r,X8r,UJ,z8r,W8r,Q8r,jC,VTe,H8r,U8r,JJ,J8r,Y8r,K8r,DC,XTe,Z8r,e9r,YJ,o9r,r9r,t9r,GC,zTe,a9r,n9r,KJ,s9r,l9r,i9r,OC,WTe,d9r,c9r,ZJ,f9r,m9r,g9r,VC,QTe,h9r,p9r,eY,u9r,_9r,b9r,XC,HTe,v9r,F9r,oY,T9r,M9r,E9r,zC,UTe,C9r,w9r,rY,A9r,y9r,L9r,WC,JTe,x9r,$9r,tY,k9r,S9r,R9r,QC,YTe,P9r,B9r,aY,I9r,q9r,N9r,HC,KTe,j9r,D9r,nY,G9r,O9r,V9r,UC,ZTe,X9r,z9r,sY,W9r,Q9r,H9r,JC,e7e,U9r,J9r,lY,Y9r,K9r,Z9r,YC,o7e,exr,oxr,iY,rxr,txr,axr,KC,r7e,nxr,sxr,dY,lxr,ixr,dxr,ZC,t7e,cxr,fxr,cY,mxr,gxr,hxr,e3,Pje,Rc,o3,a7e,$9,pxr,n7e,uxr,Bje,mr,k9,_xr,Pc,bxr,fY,vxr,Fxr,mY,Txr,Mxr,Exr,S9,Cxr,s7e,wxr,Axr,yxr,Ot,R9,Lxr,l7e,xxr,$xr,Bc,kxr,i7e,Sxr,Rxr,gY,Pxr,Bxr,Ixr,r3,qxr,Dr,P9,Nxr,d7e,jxr,Dxr,pn,Gxr,c7e,Oxr,Vxr,f7e,Xxr,zxr,m7e,Wxr,Qxr,Hxr,Re,t3,g7e,Uxr,Jxr,hY,Yxr,Kxr,Zxr,a3,h7e,e$r,o$r,pY,r$r,t$r,a$r,n3,p7e,n$r,s$r,uY,l$r,i$r,d$r,s3,u7e,c$r,f$r,_Y,m$r,g$r,h$r,l3,_7e,p$r,u$r,bY,_$r,b$r,v$r,i3,b7e,F$r,T$r,vY,M$r,E$r,C$r,d3,v7e,w$r,A$r,FY,y$r,L$r,x$r,c3,F7e,$$r,k$r,TY,S$r,R$r,P$r,f3,T7e,B$r,I$r,MY,q$r,N$r,j$r,m3,Ije,Ic,g3,M7e,B9,D$r,E7e,G$r,qje,gr,I9,O$r,qc,V$r,EY,X$r,z$r,CY,W$r,Q$r,H$r,q9,U$r,C7e,J$r,Y$r,K$r,Vt,N9,Z$r,w7e,ekr,okr,Nc,rkr,A7e,tkr,akr,wY,nkr,skr,lkr,h3,ikr,Gr,j9,dkr,y7e,ckr,fkr,un,mkr,L7e,gkr,hkr,x7e,pkr,ukr,$7e,_kr,bkr,vkr,Ee,p3,k7e,Fkr,Tkr,AY,Mkr,Ekr,Ckr,u3,S7e,wkr,Akr,yY,ykr,Lkr,xkr,_3,R7e,$kr,kkr,LY,Skr,Rkr,Pkr,b3,P7e,Bkr,Ikr,xY,qkr,Nkr,jkr,v3,B7e,Dkr,Gkr,$Y,Okr,Vkr,Xkr,F3,I7e,zkr,Wkr,kY,Qkr,Hkr,Ukr,T3,q7e,Jkr,Ykr,SY,Kkr,Zkr,eSr,M3,N7e,oSr,rSr,RY,tSr,aSr,nSr,E3,j7e,sSr,lSr,PY,iSr,dSr,cSr,C3,D7e,fSr,mSr,BY,gSr,hSr,pSr,w3,G7e,uSr,_Sr,IY,bSr,vSr,FSr,A3,O7e,TSr,MSr,qY,ESr,CSr,wSr,y3,Nje,jc,L3,V7e,D9,ASr,X7e,ySr,jje,hr,G9,LSr,Dc,xSr,NY,$Sr,kSr,jY,SSr,RSr,PSr,O9,BSr,z7e,ISr,qSr,NSr,Xt,V9,jSr,W7e,DSr,GSr,Gc,OSr,Q7e,VSr,XSr,DY,zSr,WSr,QSr,x3,HSr,Or,X9,USr,H7e,JSr,YSr,_n,KSr,U7e,ZSr,eRr,J7e,oRr,rRr,Y7e,tRr,aRr,nRr,Le,$3,K7e,sRr,lRr,GY,iRr,dRr,cRr,k3,Z7e,fRr,mRr,OY,gRr,hRr,pRr,S3,eMe,uRr,_Rr,VY,bRr,vRr,FRr,R3,oMe,TRr,MRr,XY,ERr,CRr,wRr,P3,rMe,ARr,yRr,zY,LRr,xRr,$Rr,B3,tMe,kRr,SRr,WY,RRr,PRr,BRr,I3,aMe,IRr,qRr,QY,NRr,jRr,DRr,q3,nMe,GRr,ORr,HY,VRr,XRr,zRr,N3,sMe,WRr,QRr,UY,HRr,URr,JRr,j3,lMe,YRr,KRr,JY,ZRr,ePr,oPr,D3,Dje,Oc,G3,iMe,z9,rPr,dMe,tPr,Gje,pr,W9,aPr,Vc,nPr,YY,sPr,lPr,KY,iPr,dPr,cPr,Q9,fPr,cMe,mPr,gPr,hPr,zt,H9,pPr,fMe,uPr,_Pr,Xc,bPr,mMe,vPr,FPr,ZY,TPr,MPr,EPr,O3,CPr,Vr,U9,wPr,gMe,APr,yPr,bn,LPr,hMe,xPr,$Pr,pMe,kPr,SPr,uMe,RPr,PPr,BPr,Pe,V3,_Me,IPr,qPr,eK,NPr,jPr,DPr,X3,bMe,GPr,OPr,oK,VPr,XPr,zPr,z3,vMe,WPr,QPr,rK,HPr,UPr,JPr,W3,FMe,YPr,KPr,tK,ZPr,eBr,oBr,Q3,TMe,rBr,tBr,aK,aBr,nBr,sBr,H3,MMe,lBr,iBr,nK,dBr,cBr,fBr,U3,EMe,mBr,gBr,sK,hBr,pBr,uBr,J3,CMe,_Br,bBr,lK,vBr,FBr,TBr,Y3,wMe,MBr,EBr,iK,CBr,wBr,ABr,K3,Oje,zc,Z3,AMe,J9,yBr,yMe,LBr,Vje,ur,Y9,xBr,Wc,$Br,dK,kBr,SBr,cK,RBr,PBr,BBr,K9,IBr,LMe,qBr,NBr,jBr,Wt,Z9,DBr,xMe,GBr,OBr,Qc,VBr,$Me,XBr,zBr,fK,WBr,QBr,HBr,ew,UBr,Xr,ex,JBr,kMe,YBr,KBr,vn,ZBr,SMe,eIr,oIr,RMe,rIr,tIr,PMe,aIr,nIr,sIr,xe,ow,BMe,lIr,iIr,mK,dIr,cIr,fIr,rw,IMe,mIr,gIr,gK,hIr,pIr,uIr,tw,qMe,_Ir,bIr,hK,vIr,FIr,TIr,aw,NMe,MIr,EIr,pK,CIr,wIr,AIr,nw,jMe,yIr,LIr,uK,xIr,$Ir,kIr,sw,DMe,SIr,RIr,_K,PIr,BIr,IIr,lw,GMe,qIr,NIr,bK,jIr,DIr,GIr,iw,OMe,OIr,VIr,vK,XIr,zIr,WIr,dw,VMe,QIr,HIr,FK,UIr,JIr,YIr,cw,XMe,KIr,ZIr,TK,eqr,oqr,rqr,fw,Xje,Hc,mw,zMe,ox,tqr,WMe,aqr,zje,_r,rx,nqr,Uc,sqr,MK,lqr,iqr,EK,dqr,cqr,fqr,tx,mqr,QMe,gqr,hqr,pqr,Qt,ax,uqr,HMe,_qr,bqr,Jc,vqr,UMe,Fqr,Tqr,CK,Mqr,Eqr,Cqr,gw,wqr,zr,nx,Aqr,JMe,yqr,Lqr,Fn,xqr,YMe,$qr,kqr,KMe,Sqr,Rqr,ZMe,Pqr,Bqr,Iqr,$e,hw,eEe,qqr,Nqr,wK,jqr,Dqr,Gqr,pw,oEe,Oqr,Vqr,AK,Xqr,zqr,Wqr,uw,rEe,Qqr,Hqr,yK,Uqr,Jqr,Yqr,_w,tEe,Kqr,Zqr,LK,eNr,oNr,rNr,bw,aEe,tNr,aNr,xK,nNr,sNr,lNr,vw,nEe,iNr,dNr,$K,cNr,fNr,mNr,Fw,sEe,gNr,hNr,kK,pNr,uNr,_Nr,Tw,lEe,bNr,vNr,SK,FNr,TNr,MNr,Mw,iEe,ENr,CNr,RK,wNr,ANr,yNr,Ew,dEe,LNr,xNr,PK,$Nr,kNr,SNr,Cw,Wje,Yc,ww,cEe,sx,RNr,fEe,PNr,Qje,br,lx,BNr,Kc,INr,BK,qNr,NNr,IK,jNr,DNr,GNr,ix,ONr,mEe,VNr,XNr,zNr,Ht,dx,WNr,gEe,QNr,HNr,Zc,UNr,hEe,JNr,YNr,qK,KNr,ZNr,ejr,Aw,ojr,Wr,cx,rjr,pEe,tjr,ajr,Tn,njr,uEe,sjr,ljr,_Ee,ijr,djr,bEe,cjr,fjr,mjr,De,yw,vEe,gjr,hjr,NK,pjr,ujr,_jr,Lw,FEe,bjr,vjr,jK,Fjr,Tjr,Mjr,xw,TEe,Ejr,Cjr,DK,wjr,Ajr,yjr,$w,MEe,Ljr,xjr,GK,$jr,kjr,Sjr,kw,EEe,Rjr,Pjr,OK,Bjr,Ijr,qjr,Sw,CEe,Njr,jjr,VK,Djr,Gjr,Ojr,Rw,wEe,Vjr,Xjr,XK,zjr,Wjr,Qjr,Pw,AEe,Hjr,Ujr,zK,Jjr,Yjr,Kjr,Bw,Hje,ef,Iw,yEe,fx,Zjr,LEe,eDr,Uje,vr,mx,oDr,of,rDr,WK,tDr,aDr,QK,nDr,sDr,lDr,gx,iDr,xEe,dDr,cDr,fDr,Ut,hx,mDr,$Ee,gDr,hDr,rf,pDr,kEe,uDr,_Dr,HK,bDr,vDr,FDr,qw,TDr,Qr,px,MDr,SEe,EDr,CDr,Mn,wDr,REe,ADr,yDr,PEe,LDr,xDr,BEe,$Dr,kDr,SDr,Ge,Nw,IEe,RDr,PDr,UK,BDr,IDr,qDr,jw,qEe,NDr,jDr,JK,DDr,GDr,ODr,Dw,NEe,VDr,XDr,YK,zDr,WDr,QDr,Gw,jEe,HDr,UDr,KK,JDr,YDr,KDr,Ow,DEe,ZDr,eGr,ZK,oGr,rGr,tGr,Vw,GEe,aGr,nGr,eZ,sGr,lGr,iGr,Xw,OEe,dGr,cGr,oZ,fGr,mGr,gGr,zw,VEe,hGr,pGr,rZ,uGr,_Gr,bGr,Ww,Jje,tf,Qw,XEe,ux,vGr,zEe,FGr,Yje,Fr,_x,TGr,af,MGr,tZ,EGr,CGr,aZ,wGr,AGr,yGr,bx,LGr,WEe,xGr,$Gr,kGr,Jt,vx,SGr,QEe,RGr,PGr,nf,BGr,HEe,IGr,qGr,nZ,NGr,jGr,DGr,Hw,GGr,Hr,Fx,OGr,UEe,VGr,XGr,En,zGr,JEe,WGr,QGr,YEe,HGr,UGr,KEe,JGr,YGr,KGr,ZEe,Uw,eCe,ZGr,eOr,sZ,oOr,rOr,tOr,Jw,Kje,sf,Yw,oCe,Tx,aOr,rCe,nOr,Zje,Tr,Mx,sOr,lf,lOr,lZ,iOr,dOr,iZ,cOr,fOr,mOr,Ex,gOr,tCe,hOr,pOr,uOr,Yt,Cx,_Or,aCe,bOr,vOr,df,FOr,nCe,TOr,MOr,dZ,EOr,COr,wOr,Kw,AOr,Ur,wx,yOr,sCe,LOr,xOr,Cn,$Or,lCe,kOr,SOr,iCe,ROr,POr,dCe,BOr,IOr,qOr,Ax,Zw,cCe,NOr,jOr,cZ,DOr,GOr,OOr,e0,fCe,VOr,XOr,fZ,zOr,WOr,QOr,o0,eDe,cf,r0,mCe,yx,HOr,gCe,UOr,oDe,Mr,Lx,JOr,ff,YOr,mZ,KOr,ZOr,gZ,eVr,oVr,rVr,xx,tVr,hCe,aVr,nVr,sVr,Kt,$x,lVr,pCe,iVr,dVr,mf,cVr,uCe,fVr,mVr,hZ,gVr,hVr,pVr,t0,uVr,Jr,kx,_Vr,_Ce,bVr,vVr,wn,FVr,bCe,TVr,MVr,vCe,EVr,CVr,FCe,wVr,AVr,yVr,TCe,a0,MCe,LVr,xVr,pZ,$Vr,kVr,SVr,n0,rDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yA=new re({}),LA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new RVr({props:{warning:!0,$$slots:{default:[p$t]},$$scope:{ctx:L}}}),xA=new re({}),$A=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L584"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L607"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L730"}}),BA=new re({}),IA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L396"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17254/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L410"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L609"}}),GA=new re({}),OA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new RVr({props:{$$slots:{default:[b$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),WA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L88"}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new RVr({props:{$$slots:{default:[F$t]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),KA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L255"}}),ZA=new re({}),ey=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L736"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L743"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L758"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),B2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L765"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L772"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L781"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L815"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L822"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L808"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L790"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L797"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L831"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L870"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L877"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),pL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L900"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L884"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L891"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L909"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),IL=new re({}),qL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L916"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L863"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L838"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L845"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L854"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),N8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),ux=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),yx=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),uf=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),EA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),CA=o("AutoConfig"),Ln=o(", "),xn=a("a"),wA=o("AutoModel"),ui=o(`, and
`),$n=a("a"),AA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),W$=o("will create a model that is an instance of "),bi=a("a"),Q$=o("BertModel"),H$=o("."),Eo=l(),wa=a("p"),U$=o("There is one class of "),vf=a("code"),J$=o("AutoModel"),cOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Zqe=l(),vi=a("h2"),Ff=a("a"),ioe=a("span"),F(yA.$$.fragment),fOe=l(),doe=a("span"),mOe=o("Extending the Auto Classes"),eNe=l(),kn=a("p"),gOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),coe=a("code"),hOe=o("NewModel"),pOe=o(", make sure you have a "),foe=a("code"),uOe=o("NewModelConfig"),_Oe=o(` then you can add those to the auto
classes like this:`),oNe=l(),F(LA.$$.fragment),rNe=l(),Y$=a("p"),bOe=o("You will then be able to use the auto classes like you would usually do!"),tNe=l(),F(Tf.$$.fragment),aNe=l(),Fi=a("h2"),Mf=a("a"),moe=a("span"),F(xA.$$.fragment),vOe=l(),goe=a("span"),FOe=o("AutoConfig"),nNe=l(),Co=a("div"),F($A.$$.fragment),TOe=l(),kA=a("p"),MOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),K$=a("a"),EOe=o("from_pretrained()"),COe=o(" class method."),wOe=l(),SA=a("p"),AOe=o("This class cannot be instantiated directly using "),hoe=a("code"),yOe=o("__init__()"),LOe=o(" (throws an error)."),xOe=l(),Er=a("div"),F(RA.$$.fragment),$Oe=l(),poe=a("p"),kOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SOe=l(),Ti=a("p"),ROe=o("The configuration class to instantiate is selected based on the "),uoe=a("code"),POe=o("model_type"),BOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_oe=a("code"),IOe=o("pretrained_model_name_or_path"),qOe=o(":"),NOe=l(),A=a("ul"),Ef=a("li"),boe=a("strong"),jOe=o("albert"),DOe=o(" \u2014 "),Z$=a("a"),GOe=o("AlbertConfig"),OOe=o(" (ALBERT model)"),VOe=l(),Cf=a("li"),voe=a("strong"),XOe=o("bart"),zOe=o(" \u2014 "),ek=a("a"),WOe=o("BartConfig"),QOe=o(" (BART model)"),HOe=l(),wf=a("li"),Foe=a("strong"),UOe=o("beit"),JOe=o(" \u2014 "),ok=a("a"),YOe=o("BeitConfig"),KOe=o(" (BEiT model)"),ZOe=l(),Af=a("li"),Toe=a("strong"),eVe=o("bert"),oVe=o(" \u2014 "),rk=a("a"),rVe=o("BertConfig"),tVe=o(" (BERT model)"),aVe=l(),yf=a("li"),Moe=a("strong"),nVe=o("bert-generation"),sVe=o(" \u2014 "),tk=a("a"),lVe=o("BertGenerationConfig"),iVe=o(" (Bert Generation model)"),dVe=l(),Lf=a("li"),Eoe=a("strong"),cVe=o("big_bird"),fVe=o(" \u2014 "),ak=a("a"),mVe=o("BigBirdConfig"),gVe=o(" (BigBird model)"),hVe=l(),xf=a("li"),Coe=a("strong"),pVe=o("bigbird_pegasus"),uVe=o(" \u2014 "),nk=a("a"),_Ve=o("BigBirdPegasusConfig"),bVe=o(" (BigBirdPegasus model)"),vVe=l(),$f=a("li"),woe=a("strong"),FVe=o("blenderbot"),TVe=o(" \u2014 "),sk=a("a"),MVe=o("BlenderbotConfig"),EVe=o(" (Blenderbot model)"),CVe=l(),kf=a("li"),Aoe=a("strong"),wVe=o("blenderbot-small"),AVe=o(" \u2014 "),lk=a("a"),yVe=o("BlenderbotSmallConfig"),LVe=o(" (BlenderbotSmall model)"),xVe=l(),Sf=a("li"),yoe=a("strong"),$Ve=o("camembert"),kVe=o(" \u2014 "),ik=a("a"),SVe=o("CamembertConfig"),RVe=o(" (CamemBERT model)"),PVe=l(),Rf=a("li"),Loe=a("strong"),BVe=o("canine"),IVe=o(" \u2014 "),dk=a("a"),qVe=o("CanineConfig"),NVe=o(" (Canine model)"),jVe=l(),Pf=a("li"),xoe=a("strong"),DVe=o("clip"),GVe=o(" \u2014 "),ck=a("a"),OVe=o("CLIPConfig"),VVe=o(" (CLIP model)"),XVe=l(),Bf=a("li"),$oe=a("strong"),zVe=o("convbert"),WVe=o(" \u2014 "),fk=a("a"),QVe=o("ConvBertConfig"),HVe=o(" (ConvBERT model)"),UVe=l(),If=a("li"),koe=a("strong"),JVe=o("convnext"),YVe=o(" \u2014 "),mk=a("a"),KVe=o("ConvNextConfig"),ZVe=o(" (ConvNext model)"),eXe=l(),qf=a("li"),Soe=a("strong"),oXe=o("ctrl"),rXe=o(" \u2014 "),gk=a("a"),tXe=o("CTRLConfig"),aXe=o(" (CTRL model)"),nXe=l(),Nf=a("li"),Roe=a("strong"),sXe=o("cvt"),lXe=o(" \u2014 "),hk=a("a"),iXe=o("CvtConfig"),dXe=o(" (CvT model)"),cXe=l(),jf=a("li"),Poe=a("strong"),fXe=o("data2vec-audio"),mXe=o(" \u2014 "),pk=a("a"),gXe=o("Data2VecAudioConfig"),hXe=o(" (Data2VecAudio model)"),pXe=l(),Df=a("li"),Boe=a("strong"),uXe=o("data2vec-text"),_Xe=o(" \u2014 "),uk=a("a"),bXe=o("Data2VecTextConfig"),vXe=o(" (Data2VecText model)"),FXe=l(),Gf=a("li"),Ioe=a("strong"),TXe=o("data2vec-vision"),MXe=o(" \u2014 "),_k=a("a"),EXe=o("Data2VecVisionConfig"),CXe=o(" (Data2VecVision model)"),wXe=l(),Of=a("li"),qoe=a("strong"),AXe=o("deberta"),yXe=o(" \u2014 "),bk=a("a"),LXe=o("DebertaConfig"),xXe=o(" (DeBERTa model)"),$Xe=l(),Vf=a("li"),Noe=a("strong"),kXe=o("deberta-v2"),SXe=o(" \u2014 "),vk=a("a"),RXe=o("DebertaV2Config"),PXe=o(" (DeBERTa-v2 model)"),BXe=l(),Xf=a("li"),joe=a("strong"),IXe=o("decision_transformer"),qXe=o(" \u2014 "),Fk=a("a"),NXe=o("DecisionTransformerConfig"),jXe=o(" (Decision Transformer model)"),DXe=l(),zf=a("li"),Doe=a("strong"),GXe=o("deit"),OXe=o(" \u2014 "),Tk=a("a"),VXe=o("DeiTConfig"),XXe=o(" (DeiT model)"),zXe=l(),Wf=a("li"),Goe=a("strong"),WXe=o("detr"),QXe=o(" \u2014 "),Mk=a("a"),HXe=o("DetrConfig"),UXe=o(" (DETR model)"),JXe=l(),Qf=a("li"),Ooe=a("strong"),YXe=o("distilbert"),KXe=o(" \u2014 "),Ek=a("a"),ZXe=o("DistilBertConfig"),eze=o(" (DistilBERT model)"),oze=l(),Hf=a("li"),Voe=a("strong"),rze=o("dpr"),tze=o(" \u2014 "),Ck=a("a"),aze=o("DPRConfig"),nze=o(" (DPR model)"),sze=l(),Uf=a("li"),Xoe=a("strong"),lze=o("dpt"),ize=o(" \u2014 "),wk=a("a"),dze=o("DPTConfig"),cze=o(" (DPT model)"),fze=l(),Jf=a("li"),zoe=a("strong"),mze=o("electra"),gze=o(" \u2014 "),Ak=a("a"),hze=o("ElectraConfig"),pze=o(" (ELECTRA model)"),uze=l(),Yf=a("li"),Woe=a("strong"),_ze=o("encoder-decoder"),bze=o(" \u2014 "),yk=a("a"),vze=o("EncoderDecoderConfig"),Fze=o(" (Encoder decoder model)"),Tze=l(),Kf=a("li"),Qoe=a("strong"),Mze=o("flaubert"),Eze=o(" \u2014 "),Lk=a("a"),Cze=o("FlaubertConfig"),wze=o(" (FlauBERT model)"),Aze=l(),Zf=a("li"),Hoe=a("strong"),yze=o("flava"),Lze=o(" \u2014 "),xk=a("a"),xze=o("FlavaConfig"),$ze=o(" (Flava model)"),kze=l(),em=a("li"),Uoe=a("strong"),Sze=o("fnet"),Rze=o(" \u2014 "),$k=a("a"),Pze=o("FNetConfig"),Bze=o(" (FNet model)"),Ize=l(),om=a("li"),Joe=a("strong"),qze=o("fsmt"),Nze=o(" \u2014 "),kk=a("a"),jze=o("FSMTConfig"),Dze=o(" (FairSeq Machine-Translation model)"),Gze=l(),rm=a("li"),Yoe=a("strong"),Oze=o("funnel"),Vze=o(" \u2014 "),Sk=a("a"),Xze=o("FunnelConfig"),zze=o(" (Funnel Transformer model)"),Wze=l(),tm=a("li"),Koe=a("strong"),Qze=o("glpn"),Hze=o(" \u2014 "),Rk=a("a"),Uze=o("GLPNConfig"),Jze=o(" (GLPN model)"),Yze=l(),am=a("li"),Zoe=a("strong"),Kze=o("gpt2"),Zze=o(" \u2014 "),Pk=a("a"),eWe=o("GPT2Config"),oWe=o(" (OpenAI GPT-2 model)"),rWe=l(),nm=a("li"),ere=a("strong"),tWe=o("gpt_neo"),aWe=o(" \u2014 "),Bk=a("a"),nWe=o("GPTNeoConfig"),sWe=o(" (GPT Neo model)"),lWe=l(),sm=a("li"),ore=a("strong"),iWe=o("gpt_neox"),dWe=o(" \u2014 "),Ik=a("a"),cWe=o("GPTNeoXConfig"),fWe=o(" (GPT NeoX model)"),mWe=l(),lm=a("li"),rre=a("strong"),gWe=o("gptj"),hWe=o(" \u2014 "),qk=a("a"),pWe=o("GPTJConfig"),uWe=o(" (GPT-J model)"),_We=l(),im=a("li"),tre=a("strong"),bWe=o("hubert"),vWe=o(" \u2014 "),Nk=a("a"),FWe=o("HubertConfig"),TWe=o(" (Hubert model)"),MWe=l(),dm=a("li"),are=a("strong"),EWe=o("ibert"),CWe=o(" \u2014 "),jk=a("a"),wWe=o("IBertConfig"),AWe=o(" (I-BERT model)"),yWe=l(),cm=a("li"),nre=a("strong"),LWe=o("imagegpt"),xWe=o(" \u2014 "),Dk=a("a"),$We=o("ImageGPTConfig"),kWe=o(" (ImageGPT model)"),SWe=l(),fm=a("li"),sre=a("strong"),RWe=o("layoutlm"),PWe=o(" \u2014 "),Gk=a("a"),BWe=o("LayoutLMConfig"),IWe=o(" (LayoutLM model)"),qWe=l(),mm=a("li"),lre=a("strong"),NWe=o("layoutlmv2"),jWe=o(" \u2014 "),Ok=a("a"),DWe=o("LayoutLMv2Config"),GWe=o(" (LayoutLMv2 model)"),OWe=l(),gm=a("li"),ire=a("strong"),VWe=o("layoutlmv3"),XWe=o(" \u2014 "),Vk=a("a"),zWe=o("LayoutLMv3Config"),WWe=o(" (LayoutLMv3 model)"),QWe=l(),hm=a("li"),dre=a("strong"),HWe=o("led"),UWe=o(" \u2014 "),Xk=a("a"),JWe=o("LEDConfig"),YWe=o(" (LED model)"),KWe=l(),pm=a("li"),cre=a("strong"),ZWe=o("longformer"),eQe=o(" \u2014 "),zk=a("a"),oQe=o("LongformerConfig"),rQe=o(" (Longformer model)"),tQe=l(),um=a("li"),fre=a("strong"),aQe=o("luke"),nQe=o(" \u2014 "),Wk=a("a"),sQe=o("LukeConfig"),lQe=o(" (LUKE model)"),iQe=l(),_m=a("li"),mre=a("strong"),dQe=o("lxmert"),cQe=o(" \u2014 "),Qk=a("a"),fQe=o("LxmertConfig"),mQe=o(" (LXMERT model)"),gQe=l(),bm=a("li"),gre=a("strong"),hQe=o("m2m_100"),pQe=o(" \u2014 "),Hk=a("a"),uQe=o("M2M100Config"),_Qe=o(" (M2M100 model)"),bQe=l(),vm=a("li"),hre=a("strong"),vQe=o("marian"),FQe=o(" \u2014 "),Uk=a("a"),TQe=o("MarianConfig"),MQe=o(" (Marian model)"),EQe=l(),Fm=a("li"),pre=a("strong"),CQe=o("maskformer"),wQe=o(" \u2014 "),Jk=a("a"),AQe=o("MaskFormerConfig"),yQe=o(" (MaskFormer model)"),LQe=l(),Tm=a("li"),ure=a("strong"),xQe=o("mbart"),$Qe=o(" \u2014 "),Yk=a("a"),kQe=o("MBartConfig"),SQe=o(" (mBART model)"),RQe=l(),Mm=a("li"),_re=a("strong"),PQe=o("megatron-bert"),BQe=o(" \u2014 "),Kk=a("a"),IQe=o("MegatronBertConfig"),qQe=o(" (MegatronBert model)"),NQe=l(),Em=a("li"),bre=a("strong"),jQe=o("mobilebert"),DQe=o(" \u2014 "),Zk=a("a"),GQe=o("MobileBertConfig"),OQe=o(" (MobileBERT model)"),VQe=l(),Cm=a("li"),vre=a("strong"),XQe=o("mpnet"),zQe=o(" \u2014 "),eS=a("a"),WQe=o("MPNetConfig"),QQe=o(" (MPNet model)"),HQe=l(),wm=a("li"),Fre=a("strong"),UQe=o("mt5"),JQe=o(" \u2014 "),oS=a("a"),YQe=o("MT5Config"),KQe=o(" (mT5 model)"),ZQe=l(),Am=a("li"),Tre=a("strong"),eHe=o("nystromformer"),oHe=o(" \u2014 "),rS=a("a"),rHe=o("NystromformerConfig"),tHe=o(" (Nystromformer model)"),aHe=l(),ym=a("li"),Mre=a("strong"),nHe=o("openai-gpt"),sHe=o(" \u2014 "),tS=a("a"),lHe=o("OpenAIGPTConfig"),iHe=o(" (OpenAI GPT model)"),dHe=l(),Lm=a("li"),Ere=a("strong"),cHe=o("opt"),fHe=o(" \u2014 "),aS=a("a"),mHe=o("OPTConfig"),gHe=o(" (OPT model)"),hHe=l(),xm=a("li"),Cre=a("strong"),pHe=o("pegasus"),uHe=o(" \u2014 "),nS=a("a"),_He=o("PegasusConfig"),bHe=o(" (Pegasus model)"),vHe=l(),$m=a("li"),wre=a("strong"),FHe=o("perceiver"),THe=o(" \u2014 "),sS=a("a"),MHe=o("PerceiverConfig"),EHe=o(" (Perceiver model)"),CHe=l(),km=a("li"),Are=a("strong"),wHe=o("plbart"),AHe=o(" \u2014 "),lS=a("a"),yHe=o("PLBartConfig"),LHe=o(" (PLBart model)"),xHe=l(),Sm=a("li"),yre=a("strong"),$He=o("poolformer"),kHe=o(" \u2014 "),iS=a("a"),SHe=o("PoolFormerConfig"),RHe=o(" (PoolFormer model)"),PHe=l(),Rm=a("li"),Lre=a("strong"),BHe=o("prophetnet"),IHe=o(" \u2014 "),dS=a("a"),qHe=o("ProphetNetConfig"),NHe=o(" (ProphetNet model)"),jHe=l(),Pm=a("li"),xre=a("strong"),DHe=o("qdqbert"),GHe=o(" \u2014 "),cS=a("a"),OHe=o("QDQBertConfig"),VHe=o(" (QDQBert model)"),XHe=l(),Bm=a("li"),$re=a("strong"),zHe=o("rag"),WHe=o(" \u2014 "),fS=a("a"),QHe=o("RagConfig"),HHe=o(" (RAG model)"),UHe=l(),Im=a("li"),kre=a("strong"),JHe=o("realm"),YHe=o(" \u2014 "),mS=a("a"),KHe=o("RealmConfig"),ZHe=o(" (Realm model)"),eUe=l(),qm=a("li"),Sre=a("strong"),oUe=o("reformer"),rUe=o(" \u2014 "),gS=a("a"),tUe=o("ReformerConfig"),aUe=o(" (Reformer model)"),nUe=l(),Nm=a("li"),Rre=a("strong"),sUe=o("regnet"),lUe=o(" \u2014 "),hS=a("a"),iUe=o("RegNetConfig"),dUe=o(" (RegNet model)"),cUe=l(),jm=a("li"),Pre=a("strong"),fUe=o("rembert"),mUe=o(" \u2014 "),pS=a("a"),gUe=o("RemBertConfig"),hUe=o(" (RemBERT model)"),pUe=l(),Dm=a("li"),Bre=a("strong"),uUe=o("resnet"),_Ue=o(" \u2014 "),uS=a("a"),bUe=o("ResNetConfig"),vUe=o(" (ResNet model)"),FUe=l(),Gm=a("li"),Ire=a("strong"),TUe=o("retribert"),MUe=o(" \u2014 "),_S=a("a"),EUe=o("RetriBertConfig"),CUe=o(" (RetriBERT model)"),wUe=l(),Om=a("li"),qre=a("strong"),AUe=o("roberta"),yUe=o(" \u2014 "),bS=a("a"),LUe=o("RobertaConfig"),xUe=o(" (RoBERTa model)"),$Ue=l(),Vm=a("li"),Nre=a("strong"),kUe=o("roformer"),SUe=o(" \u2014 "),vS=a("a"),RUe=o("RoFormerConfig"),PUe=o(" (RoFormer model)"),BUe=l(),Xm=a("li"),jre=a("strong"),IUe=o("segformer"),qUe=o(" \u2014 "),FS=a("a"),NUe=o("SegformerConfig"),jUe=o(" (SegFormer model)"),DUe=l(),zm=a("li"),Dre=a("strong"),GUe=o("sew"),OUe=o(" \u2014 "),TS=a("a"),VUe=o("SEWConfig"),XUe=o(" (SEW model)"),zUe=l(),Wm=a("li"),Gre=a("strong"),WUe=o("sew-d"),QUe=o(" \u2014 "),MS=a("a"),HUe=o("SEWDConfig"),UUe=o(" (SEW-D model)"),JUe=l(),Qm=a("li"),Ore=a("strong"),YUe=o("speech-encoder-decoder"),KUe=o(" \u2014 "),ES=a("a"),ZUe=o("SpeechEncoderDecoderConfig"),eJe=o(" (Speech Encoder decoder model)"),oJe=l(),Hm=a("li"),Vre=a("strong"),rJe=o("speech_to_text"),tJe=o(" \u2014 "),CS=a("a"),aJe=o("Speech2TextConfig"),nJe=o(" (Speech2Text model)"),sJe=l(),Um=a("li"),Xre=a("strong"),lJe=o("speech_to_text_2"),iJe=o(" \u2014 "),wS=a("a"),dJe=o("Speech2Text2Config"),cJe=o(" (Speech2Text2 model)"),fJe=l(),Jm=a("li"),zre=a("strong"),mJe=o("splinter"),gJe=o(" \u2014 "),AS=a("a"),hJe=o("SplinterConfig"),pJe=o(" (Splinter model)"),uJe=l(),Ym=a("li"),Wre=a("strong"),_Je=o("squeezebert"),bJe=o(" \u2014 "),yS=a("a"),vJe=o("SqueezeBertConfig"),FJe=o(" (SqueezeBERT model)"),TJe=l(),Km=a("li"),Qre=a("strong"),MJe=o("swin"),EJe=o(" \u2014 "),LS=a("a"),CJe=o("SwinConfig"),wJe=o(" (Swin model)"),AJe=l(),Zm=a("li"),Hre=a("strong"),yJe=o("t5"),LJe=o(" \u2014 "),xS=a("a"),xJe=o("T5Config"),$Je=o(" (T5 model)"),kJe=l(),eg=a("li"),Ure=a("strong"),SJe=o("tapas"),RJe=o(" \u2014 "),$S=a("a"),PJe=o("TapasConfig"),BJe=o(" (TAPAS model)"),IJe=l(),og=a("li"),Jre=a("strong"),qJe=o("trajectory_transformer"),NJe=o(" \u2014 "),kS=a("a"),jJe=o("TrajectoryTransformerConfig"),DJe=o(" (Trajectory Transformer model)"),GJe=l(),rg=a("li"),Yre=a("strong"),OJe=o("transfo-xl"),VJe=o(" \u2014 "),SS=a("a"),XJe=o("TransfoXLConfig"),zJe=o(" (Transformer-XL model)"),WJe=l(),tg=a("li"),Kre=a("strong"),QJe=o("trocr"),HJe=o(" \u2014 "),RS=a("a"),UJe=o("TrOCRConfig"),JJe=o(" (TrOCR model)"),YJe=l(),ag=a("li"),Zre=a("strong"),KJe=o("unispeech"),ZJe=o(" \u2014 "),PS=a("a"),eYe=o("UniSpeechConfig"),oYe=o(" (UniSpeech model)"),rYe=l(),ng=a("li"),ete=a("strong"),tYe=o("unispeech-sat"),aYe=o(" \u2014 "),BS=a("a"),nYe=o("UniSpeechSatConfig"),sYe=o(" (UniSpeechSat model)"),lYe=l(),sg=a("li"),ote=a("strong"),iYe=o("van"),dYe=o(" \u2014 "),IS=a("a"),cYe=o("VanConfig"),fYe=o(" (VAN model)"),mYe=l(),lg=a("li"),rte=a("strong"),gYe=o("vilt"),hYe=o(" \u2014 "),qS=a("a"),pYe=o("ViltConfig"),uYe=o(" (ViLT model)"),_Ye=l(),ig=a("li"),tte=a("strong"),bYe=o("vision-encoder-decoder"),vYe=o(" \u2014 "),NS=a("a"),FYe=o("VisionEncoderDecoderConfig"),TYe=o(" (Vision Encoder decoder model)"),MYe=l(),dg=a("li"),ate=a("strong"),EYe=o("vision-text-dual-encoder"),CYe=o(" \u2014 "),jS=a("a"),wYe=o("VisionTextDualEncoderConfig"),AYe=o(" (VisionTextDualEncoder model)"),yYe=l(),cg=a("li"),nte=a("strong"),LYe=o("visual_bert"),xYe=o(" \u2014 "),DS=a("a"),$Ye=o("VisualBertConfig"),kYe=o(" (VisualBert model)"),SYe=l(),fg=a("li"),ste=a("strong"),RYe=o("vit"),PYe=o(" \u2014 "),GS=a("a"),BYe=o("ViTConfig"),IYe=o(" (ViT model)"),qYe=l(),mg=a("li"),lte=a("strong"),NYe=o("vit_mae"),jYe=o(" \u2014 "),OS=a("a"),DYe=o("ViTMAEConfig"),GYe=o(" (ViTMAE model)"),OYe=l(),gg=a("li"),ite=a("strong"),VYe=o("wav2vec2"),XYe=o(" \u2014 "),VS=a("a"),zYe=o("Wav2Vec2Config"),WYe=o(" (Wav2Vec2 model)"),QYe=l(),hg=a("li"),dte=a("strong"),HYe=o("wav2vec2-conformer"),UYe=o(" \u2014 "),XS=a("a"),JYe=o("Wav2Vec2ConformerConfig"),YYe=o(" (Wav2Vec2-Conformer model)"),KYe=l(),pg=a("li"),cte=a("strong"),ZYe=o("wavlm"),eKe=o(" \u2014 "),zS=a("a"),oKe=o("WavLMConfig"),rKe=o(" (WavLM model)"),tKe=l(),ug=a("li"),fte=a("strong"),aKe=o("xglm"),nKe=o(" \u2014 "),WS=a("a"),sKe=o("XGLMConfig"),lKe=o(" (XGLM model)"),iKe=l(),_g=a("li"),mte=a("strong"),dKe=o("xlm"),cKe=o(" \u2014 "),QS=a("a"),fKe=o("XLMConfig"),mKe=o(" (XLM model)"),gKe=l(),bg=a("li"),gte=a("strong"),hKe=o("xlm-prophetnet"),pKe=o(" \u2014 "),HS=a("a"),uKe=o("XLMProphetNetConfig"),_Ke=o(" (XLMProphetNet model)"),bKe=l(),vg=a("li"),hte=a("strong"),vKe=o("xlm-roberta"),FKe=o(" \u2014 "),US=a("a"),TKe=o("XLMRobertaConfig"),MKe=o(" (XLM-RoBERTa model)"),EKe=l(),Fg=a("li"),pte=a("strong"),CKe=o("xlm-roberta-xl"),wKe=o(" \u2014 "),JS=a("a"),AKe=o("XLMRobertaXLConfig"),yKe=o(" (XLM-RoBERTa-XL model)"),LKe=l(),Tg=a("li"),ute=a("strong"),xKe=o("xlnet"),$Ke=o(" \u2014 "),YS=a("a"),kKe=o("XLNetConfig"),SKe=o(" (XLNet model)"),RKe=l(),Mg=a("li"),_te=a("strong"),PKe=o("yolos"),BKe=o(" \u2014 "),KS=a("a"),IKe=o("YolosConfig"),qKe=o(" (YOLOS model)"),NKe=l(),Eg=a("li"),bte=a("strong"),jKe=o("yoso"),DKe=o(" \u2014 "),ZS=a("a"),GKe=o("YosoConfig"),OKe=o(" (YOSO model)"),VKe=l(),F(Cg.$$.fragment),XKe=l(),wg=a("div"),F(PA.$$.fragment),zKe=l(),vte=a("p"),WKe=o("Register a new configuration for this class."),sNe=l(),Mi=a("h2"),Ag=a("a"),Fte=a("span"),F(BA.$$.fragment),QKe=l(),Tte=a("span"),HKe=o("AutoTokenizer"),lNe=l(),wo=a("div"),F(IA.$$.fragment),UKe=l(),qA=a("p"),JKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eR=a("a"),YKe=o("AutoTokenizer.from_pretrained()"),KKe=o(" class method."),ZKe=l(),NA=a("p"),eZe=o("This class cannot be instantiated directly using "),Mte=a("code"),oZe=o("__init__()"),rZe=o(" (throws an error)."),tZe=l(),Cr=a("div"),F(jA.$$.fragment),aZe=l(),Ete=a("p"),nZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sZe=l(),Aa=a("p"),lZe=o("The tokenizer class to instantiate is selected based on the "),Cte=a("code"),iZe=o("model_type"),dZe=o(` property of the config object (either
passed as an argument or loaded from `),wte=a("code"),cZe=o("pretrained_model_name_or_path"),fZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ate=a("code"),mZe=o("pretrained_model_name_or_path"),gZe=o(":"),hZe=l(),k=a("ul"),Sn=a("li"),yte=a("strong"),pZe=o("albert"),uZe=o(" \u2014 "),oR=a("a"),_Ze=o("AlbertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("AlbertTokenizerFast"),FZe=o(" (ALBERT model)"),TZe=l(),Rn=a("li"),Lte=a("strong"),MZe=o("bart"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("BartTokenizer"),wZe=o(" or "),aR=a("a"),AZe=o("BartTokenizerFast"),yZe=o(" (BART model)"),LZe=l(),Pn=a("li"),xte=a("strong"),xZe=o("barthez"),$Ze=o(" \u2014 "),nR=a("a"),kZe=o("BarthezTokenizer"),SZe=o(" or "),sR=a("a"),RZe=o("BarthezTokenizerFast"),PZe=o(" (BARThez model)"),BZe=l(),Bn=a("li"),$te=a("strong"),IZe=o("bartpho"),qZe=o(" \u2014 "),lR=a("a"),NZe=o("BartphoTokenizer"),jZe=o(" or "),iR=a("a"),DZe=o("BartphoTokenizerFast"),GZe=o(" (BARTpho model)"),OZe=l(),In=a("li"),kte=a("strong"),VZe=o("bert"),XZe=o(" \u2014 "),dR=a("a"),zZe=o("BertTokenizer"),WZe=o(" or "),cR=a("a"),QZe=o("BertTokenizerFast"),HZe=o(" (BERT model)"),UZe=l(),yg=a("li"),Ste=a("strong"),JZe=o("bert-generation"),YZe=o(" \u2014 "),fR=a("a"),KZe=o("BertGenerationTokenizer"),ZZe=o(" (Bert Generation model)"),eeo=l(),Lg=a("li"),Rte=a("strong"),oeo=o("bert-japanese"),reo=o(" \u2014 "),mR=a("a"),teo=o("BertJapaneseTokenizer"),aeo=o(" (BertJapanese model)"),neo=l(),xg=a("li"),Pte=a("strong"),seo=o("bertweet"),leo=o(" \u2014 "),gR=a("a"),ieo=o("BertweetTokenizer"),deo=o(" (Bertweet model)"),ceo=l(),qn=a("li"),Bte=a("strong"),feo=o("big_bird"),meo=o(" \u2014 "),hR=a("a"),geo=o("BigBirdTokenizer"),heo=o(" or "),pR=a("a"),peo=o("BigBirdTokenizerFast"),ueo=o(" (BigBird model)"),_eo=l(),Nn=a("li"),Ite=a("strong"),beo=o("bigbird_pegasus"),veo=o(" \u2014 "),uR=a("a"),Feo=o("PegasusTokenizer"),Teo=o(" or "),_R=a("a"),Meo=o("PegasusTokenizerFast"),Eeo=o(" (BigBirdPegasus model)"),Ceo=l(),jn=a("li"),qte=a("strong"),weo=o("blenderbot"),Aeo=o(" \u2014 "),bR=a("a"),yeo=o("BlenderbotTokenizer"),Leo=o(" or "),vR=a("a"),xeo=o("BlenderbotTokenizerFast"),$eo=o(" (Blenderbot model)"),keo=l(),$g=a("li"),Nte=a("strong"),Seo=o("blenderbot-small"),Reo=o(" \u2014 "),FR=a("a"),Peo=o("BlenderbotSmallTokenizer"),Beo=o(" (BlenderbotSmall model)"),Ieo=l(),kg=a("li"),jte=a("strong"),qeo=o("byt5"),Neo=o(" \u2014 "),TR=a("a"),jeo=o("ByT5Tokenizer"),Deo=o(" (ByT5 model)"),Geo=l(),Dn=a("li"),Dte=a("strong"),Oeo=o("camembert"),Veo=o(" \u2014 "),MR=a("a"),Xeo=o("CamembertTokenizer"),zeo=o(" or "),ER=a("a"),Weo=o("CamembertTokenizerFast"),Qeo=o(" (CamemBERT model)"),Heo=l(),Sg=a("li"),Gte=a("strong"),Ueo=o("canine"),Jeo=o(" \u2014 "),CR=a("a"),Yeo=o("CanineTokenizer"),Keo=o(" (Canine model)"),Zeo=l(),Gn=a("li"),Ote=a("strong"),eoo=o("clip"),ooo=o(" \u2014 "),wR=a("a"),roo=o("CLIPTokenizer"),too=o(" or "),AR=a("a"),aoo=o("CLIPTokenizerFast"),noo=o(" (CLIP model)"),soo=l(),On=a("li"),Vte=a("strong"),loo=o("convbert"),ioo=o(" \u2014 "),yR=a("a"),doo=o("ConvBertTokenizer"),coo=o(" or "),LR=a("a"),foo=o("ConvBertTokenizerFast"),moo=o(" (ConvBERT model)"),goo=l(),Vn=a("li"),Xte=a("strong"),hoo=o("cpm"),poo=o(" \u2014 "),xR=a("a"),uoo=o("CpmTokenizer"),_oo=o(" or "),$R=a("a"),boo=o("CpmTokenizerFast"),voo=o(" (CPM model)"),Foo=l(),Rg=a("li"),zte=a("strong"),Too=o("ctrl"),Moo=o(" \u2014 "),kR=a("a"),Eoo=o("CTRLTokenizer"),Coo=o(" (CTRL model)"),woo=l(),Xn=a("li"),Wte=a("strong"),Aoo=o("data2vec-text"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("RobertaTokenizer"),xoo=o(" or "),RR=a("a"),$oo=o("RobertaTokenizerFast"),koo=o(" (Data2VecText model)"),Soo=l(),zn=a("li"),Qte=a("strong"),Roo=o("deberta"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("DebertaTokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("DebertaTokenizerFast"),Noo=o(" (DeBERTa model)"),joo=l(),Wn=a("li"),Hte=a("strong"),Doo=o("deberta-v2"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("DebertaV2Tokenizer"),Voo=o(" or "),qR=a("a"),Xoo=o("DebertaV2TokenizerFast"),zoo=o(" (DeBERTa-v2 model)"),Woo=l(),Qn=a("li"),Ute=a("strong"),Qoo=o("distilbert"),Hoo=o(" \u2014 "),NR=a("a"),Uoo=o("DistilBertTokenizer"),Joo=o(" or "),jR=a("a"),Yoo=o("DistilBertTokenizerFast"),Koo=o(" (DistilBERT model)"),Zoo=l(),Hn=a("li"),Jte=a("strong"),ero=o("dpr"),oro=o(" \u2014 "),DR=a("a"),rro=o("DPRQuestionEncoderTokenizer"),tro=o(" or "),GR=a("a"),aro=o("DPRQuestionEncoderTokenizerFast"),nro=o(" (DPR model)"),sro=l(),Un=a("li"),Yte=a("strong"),lro=o("electra"),iro=o(" \u2014 "),OR=a("a"),dro=o("ElectraTokenizer"),cro=o(" or "),VR=a("a"),fro=o("ElectraTokenizerFast"),mro=o(" (ELECTRA model)"),gro=l(),Pg=a("li"),Kte=a("strong"),hro=o("flaubert"),pro=o(" \u2014 "),XR=a("a"),uro=o("FlaubertTokenizer"),_ro=o(" (FlauBERT model)"),bro=l(),Jn=a("li"),Zte=a("strong"),vro=o("fnet"),Fro=o(" \u2014 "),zR=a("a"),Tro=o("FNetTokenizer"),Mro=o(" or "),WR=a("a"),Ero=o("FNetTokenizerFast"),Cro=o(" (FNet model)"),wro=l(),Bg=a("li"),eae=a("strong"),Aro=o("fsmt"),yro=o(" \u2014 "),QR=a("a"),Lro=o("FSMTTokenizer"),xro=o(" (FairSeq Machine-Translation model)"),$ro=l(),Yn=a("li"),oae=a("strong"),kro=o("funnel"),Sro=o(" \u2014 "),HR=a("a"),Rro=o("FunnelTokenizer"),Pro=o(" or "),UR=a("a"),Bro=o("FunnelTokenizerFast"),Iro=o(" (Funnel Transformer model)"),qro=l(),Kn=a("li"),rae=a("strong"),Nro=o("gpt2"),jro=o(" \u2014 "),JR=a("a"),Dro=o("GPT2Tokenizer"),Gro=o(" or "),YR=a("a"),Oro=o("GPT2TokenizerFast"),Vro=o(" (OpenAI GPT-2 model)"),Xro=l(),Zn=a("li"),tae=a("strong"),zro=o("gpt_neo"),Wro=o(" \u2014 "),KR=a("a"),Qro=o("GPT2Tokenizer"),Hro=o(" or "),ZR=a("a"),Uro=o("GPT2TokenizerFast"),Jro=o(" (GPT Neo model)"),Yro=l(),Ig=a("li"),aae=a("strong"),Kro=o("gpt_neox"),Zro=o(" \u2014 "),eP=a("a"),eto=o("GPTNeoXTokenizerFast"),oto=o(" (GPT NeoX model)"),rto=l(),es=a("li"),nae=a("strong"),tto=o("gptj"),ato=o(" \u2014 "),oP=a("a"),nto=o("GPT2Tokenizer"),sto=o(" or "),rP=a("a"),lto=o("GPT2TokenizerFast"),ito=o(" (GPT-J model)"),dto=l(),os=a("li"),sae=a("strong"),cto=o("herbert"),fto=o(" \u2014 "),tP=a("a"),mto=o("HerbertTokenizer"),gto=o(" or "),aP=a("a"),hto=o("HerbertTokenizerFast"),pto=o(" (HerBERT model)"),uto=l(),qg=a("li"),lae=a("strong"),_to=o("hubert"),bto=o(" \u2014 "),nP=a("a"),vto=o("Wav2Vec2CTCTokenizer"),Fto=o(" (Hubert model)"),Tto=l(),rs=a("li"),iae=a("strong"),Mto=o("ibert"),Eto=o(" \u2014 "),sP=a("a"),Cto=o("RobertaTokenizer"),wto=o(" or "),lP=a("a"),Ato=o("RobertaTokenizerFast"),yto=o(" (I-BERT model)"),Lto=l(),ts=a("li"),dae=a("strong"),xto=o("layoutlm"),$to=o(" \u2014 "),iP=a("a"),kto=o("LayoutLMTokenizer"),Sto=o(" or "),dP=a("a"),Rto=o("LayoutLMTokenizerFast"),Pto=o(" (LayoutLM model)"),Bto=l(),as=a("li"),cae=a("strong"),Ito=o("layoutlmv2"),qto=o(" \u2014 "),cP=a("a"),Nto=o("LayoutLMv2Tokenizer"),jto=o(" or "),fP=a("a"),Dto=o("LayoutLMv2TokenizerFast"),Gto=o(" (LayoutLMv2 model)"),Oto=l(),ns=a("li"),fae=a("strong"),Vto=o("layoutlmv3"),Xto=o(" \u2014 "),mP=a("a"),zto=o("LayoutLMv3Tokenizer"),Wto=o(" or "),gP=a("a"),Qto=o("LayoutLMv3TokenizerFast"),Hto=o(" (LayoutLMv3 model)"),Uto=l(),ss=a("li"),mae=a("strong"),Jto=o("layoutxlm"),Yto=o(" \u2014 "),hP=a("a"),Kto=o("LayoutXLMTokenizer"),Zto=o(" or "),pP=a("a"),eao=o("LayoutXLMTokenizerFast"),oao=o(" (LayoutXLM model)"),rao=l(),ls=a("li"),gae=a("strong"),tao=o("led"),aao=o(" \u2014 "),uP=a("a"),nao=o("LEDTokenizer"),sao=o(" or "),_P=a("a"),lao=o("LEDTokenizerFast"),iao=o(" (LED model)"),dao=l(),is=a("li"),hae=a("strong"),cao=o("longformer"),fao=o(" \u2014 "),bP=a("a"),mao=o("LongformerTokenizer"),gao=o(" or "),vP=a("a"),hao=o("LongformerTokenizerFast"),pao=o(" (Longformer model)"),uao=l(),Ng=a("li"),pae=a("strong"),_ao=o("luke"),bao=o(" \u2014 "),FP=a("a"),vao=o("LukeTokenizer"),Fao=o(" (LUKE model)"),Tao=l(),ds=a("li"),uae=a("strong"),Mao=o("lxmert"),Eao=o(" \u2014 "),TP=a("a"),Cao=o("LxmertTokenizer"),wao=o(" or "),MP=a("a"),Aao=o("LxmertTokenizerFast"),yao=o(" (LXMERT model)"),Lao=l(),jg=a("li"),_ae=a("strong"),xao=o("m2m_100"),$ao=o(" \u2014 "),EP=a("a"),kao=o("M2M100Tokenizer"),Sao=o(" (M2M100 model)"),Rao=l(),Dg=a("li"),bae=a("strong"),Pao=o("marian"),Bao=o(" \u2014 "),CP=a("a"),Iao=o("MarianTokenizer"),qao=o(" (Marian model)"),Nao=l(),cs=a("li"),vae=a("strong"),jao=o("mbart"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("MBartTokenizer"),Oao=o(" or "),AP=a("a"),Vao=o("MBartTokenizerFast"),Xao=o(" (mBART model)"),zao=l(),fs=a("li"),Fae=a("strong"),Wao=o("mbart50"),Qao=o(" \u2014 "),yP=a("a"),Hao=o("MBart50Tokenizer"),Uao=o(" or "),LP=a("a"),Jao=o("MBart50TokenizerFast"),Yao=o(" (mBART-50 model)"),Kao=l(),ms=a("li"),Tae=a("strong"),Zao=o("megatron-bert"),eno=o(" \u2014 "),xP=a("a"),ono=o("BertTokenizer"),rno=o(" or "),$P=a("a"),tno=o("BertTokenizerFast"),ano=o(" (MegatronBert model)"),nno=l(),Gg=a("li"),Mae=a("strong"),sno=o("mluke"),lno=o(" \u2014 "),kP=a("a"),ino=o("MLukeTokenizer"),dno=o(" (mLUKE model)"),cno=l(),gs=a("li"),Eae=a("strong"),fno=o("mobilebert"),mno=o(" \u2014 "),SP=a("a"),gno=o("MobileBertTokenizer"),hno=o(" or "),RP=a("a"),pno=o("MobileBertTokenizerFast"),uno=o(" (MobileBERT model)"),_no=l(),hs=a("li"),Cae=a("strong"),bno=o("mpnet"),vno=o(" \u2014 "),PP=a("a"),Fno=o("MPNetTokenizer"),Tno=o(" or "),BP=a("a"),Mno=o("MPNetTokenizerFast"),Eno=o(" (MPNet model)"),Cno=l(),ps=a("li"),wae=a("strong"),wno=o("mt5"),Ano=o(" \u2014 "),IP=a("a"),yno=o("MT5Tokenizer"),Lno=o(" or "),qP=a("a"),xno=o("MT5TokenizerFast"),$no=o(" (mT5 model)"),kno=l(),us=a("li"),Aae=a("strong"),Sno=o("nystromformer"),Rno=o(" \u2014 "),NP=a("a"),Pno=o("AlbertTokenizer"),Bno=o(" or "),jP=a("a"),Ino=o("AlbertTokenizerFast"),qno=o(" (Nystromformer model)"),Nno=l(),_s=a("li"),yae=a("strong"),jno=o("openai-gpt"),Dno=o(" \u2014 "),DP=a("a"),Gno=o("OpenAIGPTTokenizer"),Ono=o(" or "),GP=a("a"),Vno=o("OpenAIGPTTokenizerFast"),Xno=o(" (OpenAI GPT model)"),zno=l(),Og=a("li"),Lae=a("strong"),Wno=o("opt"),Qno=o(" \u2014 "),OP=a("a"),Hno=o("GPT2Tokenizer"),Uno=o(" (OPT model)"),Jno=l(),bs=a("li"),xae=a("strong"),Yno=o("pegasus"),Kno=o(" \u2014 "),VP=a("a"),Zno=o("PegasusTokenizer"),eso=o(" or "),XP=a("a"),oso=o("PegasusTokenizerFast"),rso=o(" (Pegasus model)"),tso=l(),Vg=a("li"),$ae=a("strong"),aso=o("perceiver"),nso=o(" \u2014 "),zP=a("a"),sso=o("PerceiverTokenizer"),lso=o(" (Perceiver model)"),iso=l(),Xg=a("li"),kae=a("strong"),dso=o("phobert"),cso=o(" \u2014 "),WP=a("a"),fso=o("PhobertTokenizer"),mso=o(" (PhoBERT model)"),gso=l(),zg=a("li"),Sae=a("strong"),hso=o("plbart"),pso=o(" \u2014 "),QP=a("a"),uso=o("PLBartTokenizer"),_so=o(" (PLBart model)"),bso=l(),Wg=a("li"),Rae=a("strong"),vso=o("prophetnet"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("ProphetNetTokenizer"),Mso=o(" (ProphetNet model)"),Eso=l(),vs=a("li"),Pae=a("strong"),Cso=o("qdqbert"),wso=o(" \u2014 "),UP=a("a"),Aso=o("BertTokenizer"),yso=o(" or "),JP=a("a"),Lso=o("BertTokenizerFast"),xso=o(" (QDQBert model)"),$so=l(),Qg=a("li"),Bae=a("strong"),kso=o("rag"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("RagTokenizer"),Pso=o(" (RAG model)"),Bso=l(),Fs=a("li"),Iae=a("strong"),Iso=o("realm"),qso=o(" \u2014 "),KP=a("a"),Nso=o("RealmTokenizer"),jso=o(" or "),ZP=a("a"),Dso=o("RealmTokenizerFast"),Gso=o(" (Realm model)"),Oso=l(),Ts=a("li"),qae=a("strong"),Vso=o("reformer"),Xso=o(" \u2014 "),eB=a("a"),zso=o("ReformerTokenizer"),Wso=o(" or "),oB=a("a"),Qso=o("ReformerTokenizerFast"),Hso=o(" (Reformer model)"),Uso=l(),Ms=a("li"),Nae=a("strong"),Jso=o("rembert"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("RemBertTokenizer"),Zso=o(" or "),tB=a("a"),elo=o("RemBertTokenizerFast"),olo=o(" (RemBERT model)"),rlo=l(),Es=a("li"),jae=a("strong"),tlo=o("retribert"),alo=o(" \u2014 "),aB=a("a"),nlo=o("RetriBertTokenizer"),slo=o(" or "),nB=a("a"),llo=o("RetriBertTokenizerFast"),ilo=o(" (RetriBERT model)"),dlo=l(),Cs=a("li"),Dae=a("strong"),clo=o("roberta"),flo=o(" \u2014 "),sB=a("a"),mlo=o("RobertaTokenizer"),glo=o(" or "),lB=a("a"),hlo=o("RobertaTokenizerFast"),plo=o(" (RoBERTa model)"),ulo=l(),ws=a("li"),Gae=a("strong"),_lo=o("roformer"),blo=o(" \u2014 "),iB=a("a"),vlo=o("RoFormerTokenizer"),Flo=o(" or "),dB=a("a"),Tlo=o("RoFormerTokenizerFast"),Mlo=o(" (RoFormer model)"),Elo=l(),Hg=a("li"),Oae=a("strong"),Clo=o("speech_to_text"),wlo=o(" \u2014 "),cB=a("a"),Alo=o("Speech2TextTokenizer"),ylo=o(" (Speech2Text model)"),Llo=l(),Ug=a("li"),Vae=a("strong"),xlo=o("speech_to_text_2"),$lo=o(" \u2014 "),fB=a("a"),klo=o("Speech2Text2Tokenizer"),Slo=o(" (Speech2Text2 model)"),Rlo=l(),As=a("li"),Xae=a("strong"),Plo=o("splinter"),Blo=o(" \u2014 "),mB=a("a"),Ilo=o("SplinterTokenizer"),qlo=o(" or "),gB=a("a"),Nlo=o("SplinterTokenizerFast"),jlo=o(" (Splinter model)"),Dlo=l(),ys=a("li"),zae=a("strong"),Glo=o("squeezebert"),Olo=o(" \u2014 "),hB=a("a"),Vlo=o("SqueezeBertTokenizer"),Xlo=o(" or "),pB=a("a"),zlo=o("SqueezeBertTokenizerFast"),Wlo=o(" (SqueezeBERT model)"),Qlo=l(),Ls=a("li"),Wae=a("strong"),Hlo=o("t5"),Ulo=o(" \u2014 "),uB=a("a"),Jlo=o("T5Tokenizer"),Ylo=o(" or "),_B=a("a"),Klo=o("T5TokenizerFast"),Zlo=o(" (T5 model)"),eio=l(),Jg=a("li"),Qae=a("strong"),oio=o("tapas"),rio=o(" \u2014 "),bB=a("a"),tio=o("TapasTokenizer"),aio=o(" (TAPAS model)"),nio=l(),Yg=a("li"),Hae=a("strong"),sio=o("tapex"),lio=o(" \u2014 "),vB=a("a"),iio=o("TapexTokenizer"),dio=o(" (TAPEX model)"),cio=l(),Kg=a("li"),Uae=a("strong"),fio=o("transfo-xl"),mio=o(" \u2014 "),FB=a("a"),gio=o("TransfoXLTokenizer"),hio=o(" (Transformer-XL model)"),pio=l(),xs=a("li"),Jae=a("strong"),uio=o("visual_bert"),_io=o(" \u2014 "),TB=a("a"),bio=o("BertTokenizer"),vio=o(" or "),MB=a("a"),Fio=o("BertTokenizerFast"),Tio=o(" (VisualBert model)"),Mio=l(),Zg=a("li"),Yae=a("strong"),Eio=o("wav2vec2"),Cio=o(" \u2014 "),EB=a("a"),wio=o("Wav2Vec2CTCTokenizer"),Aio=o(" (Wav2Vec2 model)"),yio=l(),eh=a("li"),Kae=a("strong"),Lio=o("wav2vec2-conformer"),xio=o(" \u2014 "),CB=a("a"),$io=o("Wav2Vec2CTCTokenizer"),kio=o(" (Wav2Vec2-Conformer model)"),Sio=l(),oh=a("li"),Zae=a("strong"),Rio=o("wav2vec2_phoneme"),Pio=o(" \u2014 "),wB=a("a"),Bio=o("Wav2Vec2PhonemeCTCTokenizer"),Iio=o(" (Wav2Vec2Phoneme model)"),qio=l(),$s=a("li"),ene=a("strong"),Nio=o("xglm"),jio=o(" \u2014 "),AB=a("a"),Dio=o("XGLMTokenizer"),Gio=o(" or "),yB=a("a"),Oio=o("XGLMTokenizerFast"),Vio=o(" (XGLM model)"),Xio=l(),rh=a("li"),one=a("strong"),zio=o("xlm"),Wio=o(" \u2014 "),LB=a("a"),Qio=o("XLMTokenizer"),Hio=o(" (XLM model)"),Uio=l(),th=a("li"),rne=a("strong"),Jio=o("xlm-prophetnet"),Yio=o(" \u2014 "),xB=a("a"),Kio=o("XLMProphetNetTokenizer"),Zio=o(" (XLMProphetNet model)"),edo=l(),ks=a("li"),tne=a("strong"),odo=o("xlm-roberta"),rdo=o(" \u2014 "),$B=a("a"),tdo=o("XLMRobertaTokenizer"),ado=o(" or "),kB=a("a"),ndo=o("XLMRobertaTokenizerFast"),sdo=o(" (XLM-RoBERTa model)"),ldo=l(),Ss=a("li"),ane=a("strong"),ido=o("xlm-roberta-xl"),ddo=o(" \u2014 "),SB=a("a"),cdo=o("RobertaTokenizer"),fdo=o(" or "),RB=a("a"),mdo=o("RobertaTokenizerFast"),gdo=o(" (XLM-RoBERTa-XL model)"),hdo=l(),Rs=a("li"),nne=a("strong"),pdo=o("xlnet"),udo=o(" \u2014 "),PB=a("a"),_do=o("XLNetTokenizer"),bdo=o(" or "),BB=a("a"),vdo=o("XLNetTokenizerFast"),Fdo=o(" (XLNet model)"),Tdo=l(),Ps=a("li"),sne=a("strong"),Mdo=o("yoso"),Edo=o(" \u2014 "),IB=a("a"),Cdo=o("AlbertTokenizer"),wdo=o(" or "),qB=a("a"),Ado=o("AlbertTokenizerFast"),ydo=o(" (YOSO model)"),Ldo=l(),F(ah.$$.fragment),xdo=l(),nh=a("div"),F(DA.$$.fragment),$do=l(),lne=a("p"),kdo=o("Register a new tokenizer in this mapping."),iNe=l(),Ei=a("h2"),sh=a("a"),ine=a("span"),F(GA.$$.fragment),Sdo=l(),dne=a("span"),Rdo=o("AutoFeatureExtractor"),dNe=l(),Ao=a("div"),F(OA.$$.fragment),Pdo=l(),VA=a("p"),Bdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NB=a("a"),Ido=o("AutoFeatureExtractor.from_pretrained()"),qdo=o(" class method."),Ndo=l(),XA=a("p"),jdo=o("This class cannot be instantiated directly using "),cne=a("code"),Ddo=o("__init__()"),Gdo=o(" (throws an error)."),Odo=l(),He=a("div"),F(zA.$$.fragment),Vdo=l(),fne=a("p"),Xdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zdo=l(),ya=a("p"),Wdo=o("The feature extractor class to instantiate is selected based on the "),mne=a("code"),Qdo=o("model_type"),Hdo=o(` property of the config object
(either passed as an argument or loaded from `),gne=a("code"),Udo=o("pretrained_model_name_or_path"),Jdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hne=a("code"),Ydo=o("pretrained_model_name_or_path"),Kdo=o(":"),Zdo=l(),Y=a("ul"),lh=a("li"),pne=a("strong"),eco=o("beit"),oco=o(" \u2014 "),jB=a("a"),rco=o("BeitFeatureExtractor"),tco=o(" (BEiT model)"),aco=l(),ih=a("li"),une=a("strong"),nco=o("clip"),sco=o(" \u2014 "),DB=a("a"),lco=o("CLIPFeatureExtractor"),ico=o(" (CLIP model)"),dco=l(),dh=a("li"),_ne=a("strong"),cco=o("convnext"),fco=o(" \u2014 "),GB=a("a"),mco=o("ConvNextFeatureExtractor"),gco=o(" (ConvNext model)"),hco=l(),ch=a("li"),bne=a("strong"),pco=o("cvt"),uco=o(" \u2014 "),OB=a("a"),_co=o("ConvNextFeatureExtractor"),bco=o(" (CvT model)"),vco=l(),fh=a("li"),vne=a("strong"),Fco=o("data2vec-audio"),Tco=o(" \u2014 "),VB=a("a"),Mco=o("Wav2Vec2FeatureExtractor"),Eco=o(" (Data2VecAudio model)"),Cco=l(),mh=a("li"),Fne=a("strong"),wco=o("data2vec-vision"),Aco=o(" \u2014 "),XB=a("a"),yco=o("BeitFeatureExtractor"),Lco=o(" (Data2VecVision model)"),xco=l(),gh=a("li"),Tne=a("strong"),$co=o("deit"),kco=o(" \u2014 "),zB=a("a"),Sco=o("DeiTFeatureExtractor"),Rco=o(" (DeiT model)"),Pco=l(),hh=a("li"),Mne=a("strong"),Bco=o("detr"),Ico=o(" \u2014 "),WB=a("a"),qco=o("DetrFeatureExtractor"),Nco=o(" (DETR model)"),jco=l(),ph=a("li"),Ene=a("strong"),Dco=o("dpt"),Gco=o(" \u2014 "),QB=a("a"),Oco=o("DPTFeatureExtractor"),Vco=o(" (DPT model)"),Xco=l(),uh=a("li"),Cne=a("strong"),zco=o("flava"),Wco=o(" \u2014 "),HB=a("a"),Qco=o("FlavaFeatureExtractor"),Hco=o(" (Flava model)"),Uco=l(),_h=a("li"),wne=a("strong"),Jco=o("glpn"),Yco=o(" \u2014 "),UB=a("a"),Kco=o("GLPNFeatureExtractor"),Zco=o(" (GLPN model)"),efo=l(),bh=a("li"),Ane=a("strong"),ofo=o("hubert"),rfo=o(" \u2014 "),JB=a("a"),tfo=o("Wav2Vec2FeatureExtractor"),afo=o(" (Hubert model)"),nfo=l(),vh=a("li"),yne=a("strong"),sfo=o("imagegpt"),lfo=o(" \u2014 "),YB=a("a"),ifo=o("ImageGPTFeatureExtractor"),dfo=o(" (ImageGPT model)"),cfo=l(),Fh=a("li"),Lne=a("strong"),ffo=o("layoutlmv2"),mfo=o(" \u2014 "),KB=a("a"),gfo=o("LayoutLMv2FeatureExtractor"),hfo=o(" (LayoutLMv2 model)"),pfo=l(),Th=a("li"),xne=a("strong"),ufo=o("layoutlmv3"),_fo=o(" \u2014 "),ZB=a("a"),bfo=o("LayoutLMv3FeatureExtractor"),vfo=o(" (LayoutLMv3 model)"),Ffo=l(),Mh=a("li"),$ne=a("strong"),Tfo=o("maskformer"),Mfo=o(" \u2014 "),eI=a("a"),Efo=o("MaskFormerFeatureExtractor"),Cfo=o(" (MaskFormer model)"),wfo=l(),Eh=a("li"),kne=a("strong"),Afo=o("perceiver"),yfo=o(" \u2014 "),oI=a("a"),Lfo=o("PerceiverFeatureExtractor"),xfo=o(" (Perceiver model)"),$fo=l(),Ch=a("li"),Sne=a("strong"),kfo=o("poolformer"),Sfo=o(" \u2014 "),rI=a("a"),Rfo=o("PoolFormerFeatureExtractor"),Pfo=o(" (PoolFormer model)"),Bfo=l(),wh=a("li"),Rne=a("strong"),Ifo=o("regnet"),qfo=o(" \u2014 "),tI=a("a"),Nfo=o("ConvNextFeatureExtractor"),jfo=o(" (RegNet model)"),Dfo=l(),Ah=a("li"),Pne=a("strong"),Gfo=o("resnet"),Ofo=o(" \u2014 "),aI=a("a"),Vfo=o("ConvNextFeatureExtractor"),Xfo=o(" (ResNet model)"),zfo=l(),yh=a("li"),Bne=a("strong"),Wfo=o("segformer"),Qfo=o(" \u2014 "),nI=a("a"),Hfo=o("SegformerFeatureExtractor"),Ufo=o(" (SegFormer model)"),Jfo=l(),Lh=a("li"),Ine=a("strong"),Yfo=o("speech_to_text"),Kfo=o(" \u2014 "),sI=a("a"),Zfo=o("Speech2TextFeatureExtractor"),emo=o(" (Speech2Text model)"),omo=l(),xh=a("li"),qne=a("strong"),rmo=o("swin"),tmo=o(" \u2014 "),lI=a("a"),amo=o("ViTFeatureExtractor"),nmo=o(" (Swin model)"),smo=l(),$h=a("li"),Nne=a("strong"),lmo=o("van"),imo=o(" \u2014 "),iI=a("a"),dmo=o("ConvNextFeatureExtractor"),cmo=o(" (VAN model)"),fmo=l(),kh=a("li"),jne=a("strong"),mmo=o("vit"),gmo=o(" \u2014 "),dI=a("a"),hmo=o("ViTFeatureExtractor"),pmo=o(" (ViT model)"),umo=l(),Sh=a("li"),Dne=a("strong"),_mo=o("vit_mae"),bmo=o(" \u2014 "),cI=a("a"),vmo=o("ViTFeatureExtractor"),Fmo=o(" (ViTMAE model)"),Tmo=l(),Rh=a("li"),Gne=a("strong"),Mmo=o("wav2vec2"),Emo=o(" \u2014 "),fI=a("a"),Cmo=o("Wav2Vec2FeatureExtractor"),wmo=o(" (Wav2Vec2 model)"),Amo=l(),Ph=a("li"),One=a("strong"),ymo=o("wav2vec2-conformer"),Lmo=o(" \u2014 "),mI=a("a"),xmo=o("Wav2Vec2FeatureExtractor"),$mo=o(" (Wav2Vec2-Conformer model)"),kmo=l(),Bh=a("li"),Vne=a("strong"),Smo=o("yolos"),Rmo=o(" \u2014 "),gI=a("a"),Pmo=o("YolosFeatureExtractor"),Bmo=o(" (YOLOS model)"),Imo=l(),F(Ih.$$.fragment),qmo=l(),F(qh.$$.fragment),Nmo=l(),Nh=a("div"),F(WA.$$.fragment),jmo=l(),Xne=a("p"),Dmo=o("Register a new feature extractor for this class."),cNe=l(),Ci=a("h2"),jh=a("a"),zne=a("span"),F(QA.$$.fragment),Gmo=l(),Wne=a("span"),Omo=o("AutoProcessor"),fNe=l(),yo=a("div"),F(HA.$$.fragment),Vmo=l(),UA=a("p"),Xmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hI=a("a"),zmo=o("AutoProcessor.from_pretrained()"),Wmo=o(" class method."),Qmo=l(),JA=a("p"),Hmo=o("This class cannot be instantiated directly using "),Qne=a("code"),Umo=o("__init__()"),Jmo=o(" (throws an error)."),Ymo=l(),Ue=a("div"),F(YA.$$.fragment),Kmo=l(),Hne=a("p"),Zmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ego=l(),wi=a("p"),ogo=o("The processor class to instantiate is selected based on the "),Une=a("code"),rgo=o("model_type"),tgo=o(` property of the config object (either
passed as an argument or loaded from `),Jne=a("code"),ago=o("pretrained_model_name_or_path"),ngo=o(" if possible):"),sgo=l(),he=a("ul"),Dh=a("li"),Yne=a("strong"),lgo=o("clip"),igo=o(" \u2014 "),pI=a("a"),dgo=o("CLIPProcessor"),cgo=o(" (CLIP model)"),fgo=l(),Gh=a("li"),Kne=a("strong"),mgo=o("flava"),ggo=o(" \u2014 "),Zne=a("code"),hgo=o("FLAVAProcessor"),pgo=o(" (Flava model)"),ugo=l(),Oh=a("li"),ese=a("strong"),_go=o("layoutlmv2"),bgo=o(" \u2014 "),uI=a("a"),vgo=o("LayoutLMv2Processor"),Fgo=o(" (LayoutLMv2 model)"),Tgo=l(),Vh=a("li"),ose=a("strong"),Mgo=o("layoutlmv3"),Ego=o(" \u2014 "),_I=a("a"),Cgo=o("LayoutLMv3Processor"),wgo=o(" (LayoutLMv3 model)"),Ago=l(),Xh=a("li"),rse=a("strong"),ygo=o("layoutxlm"),Lgo=o(" \u2014 "),bI=a("a"),xgo=o("LayoutXLMProcessor"),$go=o(" (LayoutXLM model)"),kgo=l(),zh=a("li"),tse=a("strong"),Sgo=o("sew"),Rgo=o(" \u2014 "),vI=a("a"),Pgo=o("Wav2Vec2Processor"),Bgo=o(" (SEW model)"),Igo=l(),Wh=a("li"),ase=a("strong"),qgo=o("sew-d"),Ngo=o(" \u2014 "),FI=a("a"),jgo=o("Wav2Vec2Processor"),Dgo=o(" (SEW-D model)"),Ggo=l(),Qh=a("li"),nse=a("strong"),Ogo=o("speech_to_text"),Vgo=o(" \u2014 "),TI=a("a"),Xgo=o("Speech2TextProcessor"),zgo=o(" (Speech2Text model)"),Wgo=l(),Hh=a("li"),sse=a("strong"),Qgo=o("speech_to_text_2"),Hgo=o(" \u2014 "),MI=a("a"),Ugo=o("Speech2Text2Processor"),Jgo=o(" (Speech2Text2 model)"),Ygo=l(),Uh=a("li"),lse=a("strong"),Kgo=o("trocr"),Zgo=o(" \u2014 "),EI=a("a"),eho=o("TrOCRProcessor"),oho=o(" (TrOCR model)"),rho=l(),Jh=a("li"),ise=a("strong"),tho=o("unispeech"),aho=o(" \u2014 "),CI=a("a"),nho=o("Wav2Vec2Processor"),sho=o(" (UniSpeech model)"),lho=l(),Yh=a("li"),dse=a("strong"),iho=o("unispeech-sat"),dho=o(" \u2014 "),wI=a("a"),cho=o("Wav2Vec2Processor"),fho=o(" (UniSpeechSat model)"),mho=l(),Kh=a("li"),cse=a("strong"),gho=o("vilt"),hho=o(" \u2014 "),AI=a("a"),pho=o("ViltProcessor"),uho=o(" (ViLT model)"),_ho=l(),Zh=a("li"),fse=a("strong"),bho=o("vision-text-dual-encoder"),vho=o(" \u2014 "),yI=a("a"),Fho=o("VisionTextDualEncoderProcessor"),Tho=o(" (VisionTextDualEncoder model)"),Mho=l(),ep=a("li"),mse=a("strong"),Eho=o("wav2vec2"),Cho=o(" \u2014 "),LI=a("a"),who=o("Wav2Vec2Processor"),Aho=o(" (Wav2Vec2 model)"),yho=l(),op=a("li"),gse=a("strong"),Lho=o("wav2vec2-conformer"),xho=o(" \u2014 "),xI=a("a"),$ho=o("Wav2Vec2Processor"),kho=o(" (Wav2Vec2-Conformer model)"),Sho=l(),rp=a("li"),hse=a("strong"),Rho=o("wavlm"),Pho=o(" \u2014 "),$I=a("a"),Bho=o("Wav2Vec2Processor"),Iho=o(" (WavLM model)"),qho=l(),F(tp.$$.fragment),Nho=l(),F(ap.$$.fragment),jho=l(),np=a("div"),F(KA.$$.fragment),Dho=l(),pse=a("p"),Gho=o("Register a new processor for this class."),mNe=l(),Ai=a("h2"),sp=a("a"),use=a("span"),F(ZA.$$.fragment),Oho=l(),_se=a("span"),Vho=o("AutoModel"),gNe=l(),Lo=a("div"),F(ey.$$.fragment),Xho=l(),yi=a("p"),zho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kI=a("a"),Who=o("from_pretrained()"),Qho=o(" class method or the "),SI=a("a"),Hho=o("from_config()"),Uho=o(` class
method.`),Jho=l(),oy=a("p"),Yho=o("This class cannot be instantiated directly using "),bse=a("code"),Kho=o("__init__()"),Zho=o(" (throws an error)."),epo=l(),tt=a("div"),F(ry.$$.fragment),opo=l(),vse=a("p"),rpo=o("Instantiates one of the base model classes of the library from a configuration."),tpo=l(),Li=a("p"),apo=o(`Note:
Loading a model from its configuration file does `),Fse=a("strong"),npo=o("not"),spo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=a("a"),lpo=o("from_pretrained()"),ipo=o(" to load the model weights."),dpo=l(),F(lp.$$.fragment),cpo=l(),Je=a("div"),F(ty.$$.fragment),fpo=l(),Tse=a("p"),mpo=o("Instantiate one of the base model classes of the library from a pretrained model."),gpo=l(),La=a("p"),hpo=o("The model class to instantiate is selected based on the "),Mse=a("code"),ppo=o("model_type"),upo=o(` property of the config object (either
passed as an argument or loaded from `),Ese=a("code"),_po=o("pretrained_model_name_or_path"),bpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),vpo=o("pretrained_model_name_or_path"),Fpo=o(":"),Tpo=l(),x=a("ul"),ip=a("li"),wse=a("strong"),Mpo=o("albert"),Epo=o(" \u2014 "),PI=a("a"),Cpo=o("AlbertModel"),wpo=o(" (ALBERT model)"),Apo=l(),dp=a("li"),Ase=a("strong"),ypo=o("bart"),Lpo=o(" \u2014 "),BI=a("a"),xpo=o("BartModel"),$po=o(" (BART model)"),kpo=l(),cp=a("li"),yse=a("strong"),Spo=o("beit"),Rpo=o(" \u2014 "),II=a("a"),Ppo=o("BeitModel"),Bpo=o(" (BEiT model)"),Ipo=l(),fp=a("li"),Lse=a("strong"),qpo=o("bert"),Npo=o(" \u2014 "),qI=a("a"),jpo=o("BertModel"),Dpo=o(" (BERT model)"),Gpo=l(),mp=a("li"),xse=a("strong"),Opo=o("bert-generation"),Vpo=o(" \u2014 "),NI=a("a"),Xpo=o("BertGenerationEncoder"),zpo=o(" (Bert Generation model)"),Wpo=l(),gp=a("li"),$se=a("strong"),Qpo=o("big_bird"),Hpo=o(" \u2014 "),jI=a("a"),Upo=o("BigBirdModel"),Jpo=o(" (BigBird model)"),Ypo=l(),hp=a("li"),kse=a("strong"),Kpo=o("bigbird_pegasus"),Zpo=o(" \u2014 "),DI=a("a"),euo=o("BigBirdPegasusModel"),ouo=o(" (BigBirdPegasus model)"),ruo=l(),pp=a("li"),Sse=a("strong"),tuo=o("blenderbot"),auo=o(" \u2014 "),GI=a("a"),nuo=o("BlenderbotModel"),suo=o(" (Blenderbot model)"),luo=l(),up=a("li"),Rse=a("strong"),iuo=o("blenderbot-small"),duo=o(" \u2014 "),OI=a("a"),cuo=o("BlenderbotSmallModel"),fuo=o(" (BlenderbotSmall model)"),muo=l(),_p=a("li"),Pse=a("strong"),guo=o("camembert"),huo=o(" \u2014 "),VI=a("a"),puo=o("CamembertModel"),uuo=o(" (CamemBERT model)"),_uo=l(),bp=a("li"),Bse=a("strong"),buo=o("canine"),vuo=o(" \u2014 "),XI=a("a"),Fuo=o("CanineModel"),Tuo=o(" (Canine model)"),Muo=l(),vp=a("li"),Ise=a("strong"),Euo=o("clip"),Cuo=o(" \u2014 "),zI=a("a"),wuo=o("CLIPModel"),Auo=o(" (CLIP model)"),yuo=l(),Fp=a("li"),qse=a("strong"),Luo=o("convbert"),xuo=o(" \u2014 "),WI=a("a"),$uo=o("ConvBertModel"),kuo=o(" (ConvBERT model)"),Suo=l(),Tp=a("li"),Nse=a("strong"),Ruo=o("convnext"),Puo=o(" \u2014 "),QI=a("a"),Buo=o("ConvNextModel"),Iuo=o(" (ConvNext model)"),quo=l(),Mp=a("li"),jse=a("strong"),Nuo=o("ctrl"),juo=o(" \u2014 "),HI=a("a"),Duo=o("CTRLModel"),Guo=o(" (CTRL model)"),Ouo=l(),Ep=a("li"),Dse=a("strong"),Vuo=o("cvt"),Xuo=o(" \u2014 "),UI=a("a"),zuo=o("CvtModel"),Wuo=o(" (CvT model)"),Quo=l(),Cp=a("li"),Gse=a("strong"),Huo=o("data2vec-audio"),Uuo=o(" \u2014 "),JI=a("a"),Juo=o("Data2VecAudioModel"),Yuo=o(" (Data2VecAudio model)"),Kuo=l(),wp=a("li"),Ose=a("strong"),Zuo=o("data2vec-text"),e_o=o(" \u2014 "),YI=a("a"),o_o=o("Data2VecTextModel"),r_o=o(" (Data2VecText model)"),t_o=l(),Ap=a("li"),Vse=a("strong"),a_o=o("data2vec-vision"),n_o=o(" \u2014 "),KI=a("a"),s_o=o("Data2VecVisionModel"),l_o=o(" (Data2VecVision model)"),i_o=l(),yp=a("li"),Xse=a("strong"),d_o=o("deberta"),c_o=o(" \u2014 "),ZI=a("a"),f_o=o("DebertaModel"),m_o=o(" (DeBERTa model)"),g_o=l(),Lp=a("li"),zse=a("strong"),h_o=o("deberta-v2"),p_o=o(" \u2014 "),eq=a("a"),u_o=o("DebertaV2Model"),__o=o(" (DeBERTa-v2 model)"),b_o=l(),xp=a("li"),Wse=a("strong"),v_o=o("decision_transformer"),F_o=o(" \u2014 "),oq=a("a"),T_o=o("DecisionTransformerModel"),M_o=o(" (Decision Transformer model)"),E_o=l(),$p=a("li"),Qse=a("strong"),C_o=o("deit"),w_o=o(" \u2014 "),rq=a("a"),A_o=o("DeiTModel"),y_o=o(" (DeiT model)"),L_o=l(),kp=a("li"),Hse=a("strong"),x_o=o("detr"),$_o=o(" \u2014 "),tq=a("a"),k_o=o("DetrModel"),S_o=o(" (DETR model)"),R_o=l(),Sp=a("li"),Use=a("strong"),P_o=o("distilbert"),B_o=o(" \u2014 "),aq=a("a"),I_o=o("DistilBertModel"),q_o=o(" (DistilBERT model)"),N_o=l(),Rp=a("li"),Jse=a("strong"),j_o=o("dpr"),D_o=o(" \u2014 "),nq=a("a"),G_o=o("DPRQuestionEncoder"),O_o=o(" (DPR model)"),V_o=l(),Pp=a("li"),Yse=a("strong"),X_o=o("dpt"),z_o=o(" \u2014 "),sq=a("a"),W_o=o("DPTModel"),Q_o=o(" (DPT model)"),H_o=l(),Bp=a("li"),Kse=a("strong"),U_o=o("electra"),J_o=o(" \u2014 "),lq=a("a"),Y_o=o("ElectraModel"),K_o=o(" (ELECTRA model)"),Z_o=l(),Ip=a("li"),Zse=a("strong"),e2o=o("flaubert"),o2o=o(" \u2014 "),iq=a("a"),r2o=o("FlaubertModel"),t2o=o(" (FlauBERT model)"),a2o=l(),qp=a("li"),ele=a("strong"),n2o=o("flava"),s2o=o(" \u2014 "),dq=a("a"),l2o=o("FlavaModel"),i2o=o(" (Flava model)"),d2o=l(),Np=a("li"),ole=a("strong"),c2o=o("fnet"),f2o=o(" \u2014 "),cq=a("a"),m2o=o("FNetModel"),g2o=o(" (FNet model)"),h2o=l(),jp=a("li"),rle=a("strong"),p2o=o("fsmt"),u2o=o(" \u2014 "),fq=a("a"),_2o=o("FSMTModel"),b2o=o(" (FairSeq Machine-Translation model)"),v2o=l(),Bs=a("li"),tle=a("strong"),F2o=o("funnel"),T2o=o(" \u2014 "),mq=a("a"),M2o=o("FunnelModel"),E2o=o(" or "),gq=a("a"),C2o=o("FunnelBaseModel"),w2o=o(" (Funnel Transformer model)"),A2o=l(),Dp=a("li"),ale=a("strong"),y2o=o("glpn"),L2o=o(" \u2014 "),hq=a("a"),x2o=o("GLPNModel"),$2o=o(" (GLPN model)"),k2o=l(),Gp=a("li"),nle=a("strong"),S2o=o("gpt2"),R2o=o(" \u2014 "),pq=a("a"),P2o=o("GPT2Model"),B2o=o(" (OpenAI GPT-2 model)"),I2o=l(),Op=a("li"),sle=a("strong"),q2o=o("gpt_neo"),N2o=o(" \u2014 "),uq=a("a"),j2o=o("GPTNeoModel"),D2o=o(" (GPT Neo model)"),G2o=l(),Vp=a("li"),lle=a("strong"),O2o=o("gpt_neox"),V2o=o(" \u2014 "),_q=a("a"),X2o=o("GPTNeoXModel"),z2o=o(" (GPT NeoX model)"),W2o=l(),Xp=a("li"),ile=a("strong"),Q2o=o("gptj"),H2o=o(" \u2014 "),bq=a("a"),U2o=o("GPTJModel"),J2o=o(" (GPT-J model)"),Y2o=l(),zp=a("li"),dle=a("strong"),K2o=o("hubert"),Z2o=o(" \u2014 "),vq=a("a"),e1o=o("HubertModel"),o1o=o(" (Hubert model)"),r1o=l(),Wp=a("li"),cle=a("strong"),t1o=o("ibert"),a1o=o(" \u2014 "),Fq=a("a"),n1o=o("IBertModel"),s1o=o(" (I-BERT model)"),l1o=l(),Qp=a("li"),fle=a("strong"),i1o=o("imagegpt"),d1o=o(" \u2014 "),Tq=a("a"),c1o=o("ImageGPTModel"),f1o=o(" (ImageGPT model)"),m1o=l(),Hp=a("li"),mle=a("strong"),g1o=o("layoutlm"),h1o=o(" \u2014 "),Mq=a("a"),p1o=o("LayoutLMModel"),u1o=o(" (LayoutLM model)"),_1o=l(),Up=a("li"),gle=a("strong"),b1o=o("layoutlmv2"),v1o=o(" \u2014 "),Eq=a("a"),F1o=o("LayoutLMv2Model"),T1o=o(" (LayoutLMv2 model)"),M1o=l(),Jp=a("li"),hle=a("strong"),E1o=o("layoutlmv3"),C1o=o(" \u2014 "),Cq=a("a"),w1o=o("LayoutLMv3Model"),A1o=o(" (LayoutLMv3 model)"),y1o=l(),Yp=a("li"),ple=a("strong"),L1o=o("led"),x1o=o(" \u2014 "),wq=a("a"),$1o=o("LEDModel"),k1o=o(" (LED model)"),S1o=l(),Kp=a("li"),ule=a("strong"),R1o=o("longformer"),P1o=o(" \u2014 "),Aq=a("a"),B1o=o("LongformerModel"),I1o=o(" (Longformer model)"),q1o=l(),Zp=a("li"),_le=a("strong"),N1o=o("luke"),j1o=o(" \u2014 "),yq=a("a"),D1o=o("LukeModel"),G1o=o(" (LUKE model)"),O1o=l(),eu=a("li"),ble=a("strong"),V1o=o("lxmert"),X1o=o(" \u2014 "),Lq=a("a"),z1o=o("LxmertModel"),W1o=o(" (LXMERT model)"),Q1o=l(),ou=a("li"),vle=a("strong"),H1o=o("m2m_100"),U1o=o(" \u2014 "),xq=a("a"),J1o=o("M2M100Model"),Y1o=o(" (M2M100 model)"),K1o=l(),ru=a("li"),Fle=a("strong"),Z1o=o("marian"),ebo=o(" \u2014 "),$q=a("a"),obo=o("MarianModel"),rbo=o(" (Marian model)"),tbo=l(),tu=a("li"),Tle=a("strong"),abo=o("maskformer"),nbo=o(" \u2014 "),kq=a("a"),sbo=o("MaskFormerModel"),lbo=o(" (MaskFormer model)"),ibo=l(),au=a("li"),Mle=a("strong"),dbo=o("mbart"),cbo=o(" \u2014 "),Sq=a("a"),fbo=o("MBartModel"),mbo=o(" (mBART model)"),gbo=l(),nu=a("li"),Ele=a("strong"),hbo=o("megatron-bert"),pbo=o(" \u2014 "),Rq=a("a"),ubo=o("MegatronBertModel"),_bo=o(" (MegatronBert model)"),bbo=l(),su=a("li"),Cle=a("strong"),vbo=o("mobilebert"),Fbo=o(" \u2014 "),Pq=a("a"),Tbo=o("MobileBertModel"),Mbo=o(" (MobileBERT model)"),Ebo=l(),lu=a("li"),wle=a("strong"),Cbo=o("mpnet"),wbo=o(" \u2014 "),Bq=a("a"),Abo=o("MPNetModel"),ybo=o(" (MPNet model)"),Lbo=l(),iu=a("li"),Ale=a("strong"),xbo=o("mt5"),$bo=o(" \u2014 "),Iq=a("a"),kbo=o("MT5Model"),Sbo=o(" (mT5 model)"),Rbo=l(),du=a("li"),yle=a("strong"),Pbo=o("nystromformer"),Bbo=o(" \u2014 "),qq=a("a"),Ibo=o("NystromformerModel"),qbo=o(" (Nystromformer model)"),Nbo=l(),cu=a("li"),Lle=a("strong"),jbo=o("openai-gpt"),Dbo=o(" \u2014 "),Nq=a("a"),Gbo=o("OpenAIGPTModel"),Obo=o(" (OpenAI GPT model)"),Vbo=l(),fu=a("li"),xle=a("strong"),Xbo=o("opt"),zbo=o(" \u2014 "),jq=a("a"),Wbo=o("OPTModel"),Qbo=o(" (OPT model)"),Hbo=l(),mu=a("li"),$le=a("strong"),Ubo=o("pegasus"),Jbo=o(" \u2014 "),Dq=a("a"),Ybo=o("PegasusModel"),Kbo=o(" (Pegasus model)"),Zbo=l(),gu=a("li"),kle=a("strong"),e4o=o("perceiver"),o4o=o(" \u2014 "),Gq=a("a"),r4o=o("PerceiverModel"),t4o=o(" (Perceiver model)"),a4o=l(),hu=a("li"),Sle=a("strong"),n4o=o("plbart"),s4o=o(" \u2014 "),Oq=a("a"),l4o=o("PLBartModel"),i4o=o(" (PLBart model)"),d4o=l(),pu=a("li"),Rle=a("strong"),c4o=o("poolformer"),f4o=o(" \u2014 "),Vq=a("a"),m4o=o("PoolFormerModel"),g4o=o(" (PoolFormer model)"),h4o=l(),uu=a("li"),Ple=a("strong"),p4o=o("prophetnet"),u4o=o(" \u2014 "),Xq=a("a"),_4o=o("ProphetNetModel"),b4o=o(" (ProphetNet model)"),v4o=l(),_u=a("li"),Ble=a("strong"),F4o=o("qdqbert"),T4o=o(" \u2014 "),zq=a("a"),M4o=o("QDQBertModel"),E4o=o(" (QDQBert model)"),C4o=l(),bu=a("li"),Ile=a("strong"),w4o=o("reformer"),A4o=o(" \u2014 "),Wq=a("a"),y4o=o("ReformerModel"),L4o=o(" (Reformer model)"),x4o=l(),vu=a("li"),qle=a("strong"),$4o=o("regnet"),k4o=o(" \u2014 "),Qq=a("a"),S4o=o("RegNetModel"),R4o=o(" (RegNet model)"),P4o=l(),Fu=a("li"),Nle=a("strong"),B4o=o("rembert"),I4o=o(" \u2014 "),Hq=a("a"),q4o=o("RemBertModel"),N4o=o(" (RemBERT model)"),j4o=l(),Tu=a("li"),jle=a("strong"),D4o=o("resnet"),G4o=o(" \u2014 "),Uq=a("a"),O4o=o("ResNetModel"),V4o=o(" (ResNet model)"),X4o=l(),Mu=a("li"),Dle=a("strong"),z4o=o("retribert"),W4o=o(" \u2014 "),Jq=a("a"),Q4o=o("RetriBertModel"),H4o=o(" (RetriBERT model)"),U4o=l(),Eu=a("li"),Gle=a("strong"),J4o=o("roberta"),Y4o=o(" \u2014 "),Yq=a("a"),K4o=o("RobertaModel"),Z4o=o(" (RoBERTa model)"),evo=l(),Cu=a("li"),Ole=a("strong"),ovo=o("roformer"),rvo=o(" \u2014 "),Kq=a("a"),tvo=o("RoFormerModel"),avo=o(" (RoFormer model)"),nvo=l(),wu=a("li"),Vle=a("strong"),svo=o("segformer"),lvo=o(" \u2014 "),Zq=a("a"),ivo=o("SegformerModel"),dvo=o(" (SegFormer model)"),cvo=l(),Au=a("li"),Xle=a("strong"),fvo=o("sew"),mvo=o(" \u2014 "),eN=a("a"),gvo=o("SEWModel"),hvo=o(" (SEW model)"),pvo=l(),yu=a("li"),zle=a("strong"),uvo=o("sew-d"),_vo=o(" \u2014 "),oN=a("a"),bvo=o("SEWDModel"),vvo=o(" (SEW-D model)"),Fvo=l(),Lu=a("li"),Wle=a("strong"),Tvo=o("speech_to_text"),Mvo=o(" \u2014 "),rN=a("a"),Evo=o("Speech2TextModel"),Cvo=o(" (Speech2Text model)"),wvo=l(),xu=a("li"),Qle=a("strong"),Avo=o("splinter"),yvo=o(" \u2014 "),tN=a("a"),Lvo=o("SplinterModel"),xvo=o(" (Splinter model)"),$vo=l(),$u=a("li"),Hle=a("strong"),kvo=o("squeezebert"),Svo=o(" \u2014 "),aN=a("a"),Rvo=o("SqueezeBertModel"),Pvo=o(" (SqueezeBERT model)"),Bvo=l(),ku=a("li"),Ule=a("strong"),Ivo=o("swin"),qvo=o(" \u2014 "),nN=a("a"),Nvo=o("SwinModel"),jvo=o(" (Swin model)"),Dvo=l(),Su=a("li"),Jle=a("strong"),Gvo=o("t5"),Ovo=o(" \u2014 "),sN=a("a"),Vvo=o("T5Model"),Xvo=o(" (T5 model)"),zvo=l(),Ru=a("li"),Yle=a("strong"),Wvo=o("tapas"),Qvo=o(" \u2014 "),lN=a("a"),Hvo=o("TapasModel"),Uvo=o(" (TAPAS model)"),Jvo=l(),Pu=a("li"),Kle=a("strong"),Yvo=o("trajectory_transformer"),Kvo=o(" \u2014 "),iN=a("a"),Zvo=o("TrajectoryTransformerModel"),e5o=o(" (Trajectory Transformer model)"),o5o=l(),Bu=a("li"),Zle=a("strong"),r5o=o("transfo-xl"),t5o=o(" \u2014 "),dN=a("a"),a5o=o("TransfoXLModel"),n5o=o(" (Transformer-XL model)"),s5o=l(),Iu=a("li"),eie=a("strong"),l5o=o("unispeech"),i5o=o(" \u2014 "),cN=a("a"),d5o=o("UniSpeechModel"),c5o=o(" (UniSpeech model)"),f5o=l(),qu=a("li"),oie=a("strong"),m5o=o("unispeech-sat"),g5o=o(" \u2014 "),fN=a("a"),h5o=o("UniSpeechSatModel"),p5o=o(" (UniSpeechSat model)"),u5o=l(),Nu=a("li"),rie=a("strong"),_5o=o("van"),b5o=o(" \u2014 "),mN=a("a"),v5o=o("VanModel"),F5o=o(" (VAN model)"),T5o=l(),ju=a("li"),tie=a("strong"),M5o=o("vilt"),E5o=o(" \u2014 "),gN=a("a"),C5o=o("ViltModel"),w5o=o(" (ViLT model)"),A5o=l(),Du=a("li"),aie=a("strong"),y5o=o("vision-text-dual-encoder"),L5o=o(" \u2014 "),hN=a("a"),x5o=o("VisionTextDualEncoderModel"),$5o=o(" (VisionTextDualEncoder model)"),k5o=l(),Gu=a("li"),nie=a("strong"),S5o=o("visual_bert"),R5o=o(" \u2014 "),pN=a("a"),P5o=o("VisualBertModel"),B5o=o(" (VisualBert model)"),I5o=l(),Ou=a("li"),sie=a("strong"),q5o=o("vit"),N5o=o(" \u2014 "),uN=a("a"),j5o=o("ViTModel"),D5o=o(" (ViT model)"),G5o=l(),Vu=a("li"),lie=a("strong"),O5o=o("vit_mae"),V5o=o(" \u2014 "),_N=a("a"),X5o=o("ViTMAEModel"),z5o=o(" (ViTMAE model)"),W5o=l(),Xu=a("li"),iie=a("strong"),Q5o=o("wav2vec2"),H5o=o(" \u2014 "),bN=a("a"),U5o=o("Wav2Vec2Model"),J5o=o(" (Wav2Vec2 model)"),Y5o=l(),zu=a("li"),die=a("strong"),K5o=o("wav2vec2-conformer"),Z5o=o(" \u2014 "),vN=a("a"),eFo=o("Wav2Vec2ConformerModel"),oFo=o(" (Wav2Vec2-Conformer model)"),rFo=l(),Wu=a("li"),cie=a("strong"),tFo=o("wavlm"),aFo=o(" \u2014 "),FN=a("a"),nFo=o("WavLMModel"),sFo=o(" (WavLM model)"),lFo=l(),Qu=a("li"),fie=a("strong"),iFo=o("xglm"),dFo=o(" \u2014 "),TN=a("a"),cFo=o("XGLMModel"),fFo=o(" (XGLM model)"),mFo=l(),Hu=a("li"),mie=a("strong"),gFo=o("xlm"),hFo=o(" \u2014 "),MN=a("a"),pFo=o("XLMModel"),uFo=o(" (XLM model)"),_Fo=l(),Uu=a("li"),gie=a("strong"),bFo=o("xlm-prophetnet"),vFo=o(" \u2014 "),EN=a("a"),FFo=o("XLMProphetNetModel"),TFo=o(" (XLMProphetNet model)"),MFo=l(),Ju=a("li"),hie=a("strong"),EFo=o("xlm-roberta"),CFo=o(" \u2014 "),CN=a("a"),wFo=o("XLMRobertaModel"),AFo=o(" (XLM-RoBERTa model)"),yFo=l(),Yu=a("li"),pie=a("strong"),LFo=o("xlm-roberta-xl"),xFo=o(" \u2014 "),wN=a("a"),$Fo=o("XLMRobertaXLModel"),kFo=o(" (XLM-RoBERTa-XL model)"),SFo=l(),Ku=a("li"),uie=a("strong"),RFo=o("xlnet"),PFo=o(" \u2014 "),AN=a("a"),BFo=o("XLNetModel"),IFo=o(" (XLNet model)"),qFo=l(),Zu=a("li"),_ie=a("strong"),NFo=o("yolos"),jFo=o(" \u2014 "),yN=a("a"),DFo=o("YolosModel"),GFo=o(" (YOLOS model)"),OFo=l(),e_=a("li"),bie=a("strong"),VFo=o("yoso"),XFo=o(" \u2014 "),LN=a("a"),zFo=o("YosoModel"),WFo=o(" (YOSO model)"),QFo=l(),o_=a("p"),HFo=o("The model is set in evaluation mode by default using "),vie=a("code"),UFo=o("model.eval()"),JFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=a("code"),YFo=o("model.train()"),KFo=l(),F(r_.$$.fragment),hNe=l(),xi=a("h2"),t_=a("a"),Tie=a("span"),F(ay.$$.fragment),ZFo=l(),Mie=a("span"),eTo=o("AutoModelForPreTraining"),pNe=l(),xo=a("div"),F(ny.$$.fragment),oTo=l(),$i=a("p"),rTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xN=a("a"),tTo=o("from_pretrained()"),aTo=o(" class method or the "),$N=a("a"),nTo=o("from_config()"),sTo=o(` class
method.`),lTo=l(),sy=a("p"),iTo=o("This class cannot be instantiated directly using "),Eie=a("code"),dTo=o("__init__()"),cTo=o(" (throws an error)."),fTo=l(),at=a("div"),F(ly.$$.fragment),mTo=l(),Cie=a("p"),gTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hTo=l(),ki=a("p"),pTo=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),uTo=o("not"),_To=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kN=a("a"),bTo=o("from_pretrained()"),vTo=o(" to load the model weights."),FTo=l(),F(a_.$$.fragment),TTo=l(),Ye=a("div"),F(iy.$$.fragment),MTo=l(),Aie=a("p"),ETo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CTo=l(),xa=a("p"),wTo=o("The model class to instantiate is selected based on the "),yie=a("code"),ATo=o("model_type"),yTo=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),LTo=o("pretrained_model_name_or_path"),xTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=a("code"),$To=o("pretrained_model_name_or_path"),kTo=o(":"),STo=l(),G=a("ul"),n_=a("li"),$ie=a("strong"),RTo=o("albert"),PTo=o(" \u2014 "),SN=a("a"),BTo=o("AlbertForPreTraining"),ITo=o(" (ALBERT model)"),qTo=l(),s_=a("li"),kie=a("strong"),NTo=o("bart"),jTo=o(" \u2014 "),RN=a("a"),DTo=o("BartForConditionalGeneration"),GTo=o(" (BART model)"),OTo=l(),l_=a("li"),Sie=a("strong"),VTo=o("bert"),XTo=o(" \u2014 "),PN=a("a"),zTo=o("BertForPreTraining"),WTo=o(" (BERT model)"),QTo=l(),i_=a("li"),Rie=a("strong"),HTo=o("big_bird"),UTo=o(" \u2014 "),BN=a("a"),JTo=o("BigBirdForPreTraining"),YTo=o(" (BigBird model)"),KTo=l(),d_=a("li"),Pie=a("strong"),ZTo=o("camembert"),e7o=o(" \u2014 "),IN=a("a"),o7o=o("CamembertForMaskedLM"),r7o=o(" (CamemBERT model)"),t7o=l(),c_=a("li"),Bie=a("strong"),a7o=o("ctrl"),n7o=o(" \u2014 "),qN=a("a"),s7o=o("CTRLLMHeadModel"),l7o=o(" (CTRL model)"),i7o=l(),f_=a("li"),Iie=a("strong"),d7o=o("data2vec-text"),c7o=o(" \u2014 "),NN=a("a"),f7o=o("Data2VecTextForMaskedLM"),m7o=o(" (Data2VecText model)"),g7o=l(),m_=a("li"),qie=a("strong"),h7o=o("deberta"),p7o=o(" \u2014 "),jN=a("a"),u7o=o("DebertaForMaskedLM"),_7o=o(" (DeBERTa model)"),b7o=l(),g_=a("li"),Nie=a("strong"),v7o=o("deberta-v2"),F7o=o(" \u2014 "),DN=a("a"),T7o=o("DebertaV2ForMaskedLM"),M7o=o(" (DeBERTa-v2 model)"),E7o=l(),h_=a("li"),jie=a("strong"),C7o=o("distilbert"),w7o=o(" \u2014 "),GN=a("a"),A7o=o("DistilBertForMaskedLM"),y7o=o(" (DistilBERT model)"),L7o=l(),p_=a("li"),Die=a("strong"),x7o=o("electra"),$7o=o(" \u2014 "),ON=a("a"),k7o=o("ElectraForPreTraining"),S7o=o(" (ELECTRA model)"),R7o=l(),u_=a("li"),Gie=a("strong"),P7o=o("flaubert"),B7o=o(" \u2014 "),VN=a("a"),I7o=o("FlaubertWithLMHeadModel"),q7o=o(" (FlauBERT model)"),N7o=l(),__=a("li"),Oie=a("strong"),j7o=o("flava"),D7o=o(" \u2014 "),XN=a("a"),G7o=o("FlavaForPreTraining"),O7o=o(" (Flava model)"),V7o=l(),b_=a("li"),Vie=a("strong"),X7o=o("fnet"),z7o=o(" \u2014 "),zN=a("a"),W7o=o("FNetForPreTraining"),Q7o=o(" (FNet model)"),H7o=l(),v_=a("li"),Xie=a("strong"),U7o=o("fsmt"),J7o=o(" \u2014 "),WN=a("a"),Y7o=o("FSMTForConditionalGeneration"),K7o=o(" (FairSeq Machine-Translation model)"),Z7o=l(),F_=a("li"),zie=a("strong"),eMo=o("funnel"),oMo=o(" \u2014 "),QN=a("a"),rMo=o("FunnelForPreTraining"),tMo=o(" (Funnel Transformer model)"),aMo=l(),T_=a("li"),Wie=a("strong"),nMo=o("gpt2"),sMo=o(" \u2014 "),HN=a("a"),lMo=o("GPT2LMHeadModel"),iMo=o(" (OpenAI GPT-2 model)"),dMo=l(),M_=a("li"),Qie=a("strong"),cMo=o("ibert"),fMo=o(" \u2014 "),UN=a("a"),mMo=o("IBertForMaskedLM"),gMo=o(" (I-BERT model)"),hMo=l(),E_=a("li"),Hie=a("strong"),pMo=o("layoutlm"),uMo=o(" \u2014 "),JN=a("a"),_Mo=o("LayoutLMForMaskedLM"),bMo=o(" (LayoutLM model)"),vMo=l(),C_=a("li"),Uie=a("strong"),FMo=o("longformer"),TMo=o(" \u2014 "),YN=a("a"),MMo=o("LongformerForMaskedLM"),EMo=o(" (Longformer model)"),CMo=l(),w_=a("li"),Jie=a("strong"),wMo=o("lxmert"),AMo=o(" \u2014 "),KN=a("a"),yMo=o("LxmertForPreTraining"),LMo=o(" (LXMERT model)"),xMo=l(),A_=a("li"),Yie=a("strong"),$Mo=o("megatron-bert"),kMo=o(" \u2014 "),ZN=a("a"),SMo=o("MegatronBertForPreTraining"),RMo=o(" (MegatronBert model)"),PMo=l(),y_=a("li"),Kie=a("strong"),BMo=o("mobilebert"),IMo=o(" \u2014 "),ej=a("a"),qMo=o("MobileBertForPreTraining"),NMo=o(" (MobileBERT model)"),jMo=l(),L_=a("li"),Zie=a("strong"),DMo=o("mpnet"),GMo=o(" \u2014 "),oj=a("a"),OMo=o("MPNetForMaskedLM"),VMo=o(" (MPNet model)"),XMo=l(),x_=a("li"),ede=a("strong"),zMo=o("openai-gpt"),WMo=o(" \u2014 "),rj=a("a"),QMo=o("OpenAIGPTLMHeadModel"),HMo=o(" (OpenAI GPT model)"),UMo=l(),$_=a("li"),ode=a("strong"),JMo=o("retribert"),YMo=o(" \u2014 "),tj=a("a"),KMo=o("RetriBertModel"),ZMo=o(" (RetriBERT model)"),eEo=l(),k_=a("li"),rde=a("strong"),oEo=o("roberta"),rEo=o(" \u2014 "),aj=a("a"),tEo=o("RobertaForMaskedLM"),aEo=o(" (RoBERTa model)"),nEo=l(),S_=a("li"),tde=a("strong"),sEo=o("splinter"),lEo=o(" \u2014 "),nj=a("a"),iEo=o("SplinterForPreTraining"),dEo=o(" (Splinter model)"),cEo=l(),R_=a("li"),ade=a("strong"),fEo=o("squeezebert"),mEo=o(" \u2014 "),sj=a("a"),gEo=o("SqueezeBertForMaskedLM"),hEo=o(" (SqueezeBERT model)"),pEo=l(),P_=a("li"),nde=a("strong"),uEo=o("t5"),_Eo=o(" \u2014 "),lj=a("a"),bEo=o("T5ForConditionalGeneration"),vEo=o(" (T5 model)"),FEo=l(),B_=a("li"),sde=a("strong"),TEo=o("tapas"),MEo=o(" \u2014 "),ij=a("a"),EEo=o("TapasForMaskedLM"),CEo=o(" (TAPAS model)"),wEo=l(),I_=a("li"),lde=a("strong"),AEo=o("transfo-xl"),yEo=o(" \u2014 "),dj=a("a"),LEo=o("TransfoXLLMHeadModel"),xEo=o(" (Transformer-XL model)"),$Eo=l(),q_=a("li"),ide=a("strong"),kEo=o("unispeech"),SEo=o(" \u2014 "),cj=a("a"),REo=o("UniSpeechForPreTraining"),PEo=o(" (UniSpeech model)"),BEo=l(),N_=a("li"),dde=a("strong"),IEo=o("unispeech-sat"),qEo=o(" \u2014 "),fj=a("a"),NEo=o("UniSpeechSatForPreTraining"),jEo=o(" (UniSpeechSat model)"),DEo=l(),j_=a("li"),cde=a("strong"),GEo=o("visual_bert"),OEo=o(" \u2014 "),mj=a("a"),VEo=o("VisualBertForPreTraining"),XEo=o(" (VisualBert model)"),zEo=l(),D_=a("li"),fde=a("strong"),WEo=o("vit_mae"),QEo=o(" \u2014 "),gj=a("a"),HEo=o("ViTMAEForPreTraining"),UEo=o(" (ViTMAE model)"),JEo=l(),G_=a("li"),mde=a("strong"),YEo=o("wav2vec2"),KEo=o(" \u2014 "),hj=a("a"),ZEo=o("Wav2Vec2ForPreTraining"),eCo=o(" (Wav2Vec2 model)"),oCo=l(),O_=a("li"),gde=a("strong"),rCo=o("wav2vec2-conformer"),tCo=o(" \u2014 "),pj=a("a"),aCo=o("Wav2Vec2ConformerForPreTraining"),nCo=o(" (Wav2Vec2-Conformer model)"),sCo=l(),V_=a("li"),hde=a("strong"),lCo=o("xlm"),iCo=o(" \u2014 "),uj=a("a"),dCo=o("XLMWithLMHeadModel"),cCo=o(" (XLM model)"),fCo=l(),X_=a("li"),pde=a("strong"),mCo=o("xlm-roberta"),gCo=o(" \u2014 "),_j=a("a"),hCo=o("XLMRobertaForMaskedLM"),pCo=o(" (XLM-RoBERTa model)"),uCo=l(),z_=a("li"),ude=a("strong"),_Co=o("xlm-roberta-xl"),bCo=o(" \u2014 "),bj=a("a"),vCo=o("XLMRobertaXLForMaskedLM"),FCo=o(" (XLM-RoBERTa-XL model)"),TCo=l(),W_=a("li"),_de=a("strong"),MCo=o("xlnet"),ECo=o(" \u2014 "),vj=a("a"),CCo=o("XLNetLMHeadModel"),wCo=o(" (XLNet model)"),ACo=l(),Q_=a("p"),yCo=o("The model is set in evaluation mode by default using "),bde=a("code"),LCo=o("model.eval()"),xCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),$Co=o("model.train()"),kCo=l(),F(H_.$$.fragment),uNe=l(),Si=a("h2"),U_=a("a"),Fde=a("span"),F(dy.$$.fragment),SCo=l(),Tde=a("span"),RCo=o("AutoModelForCausalLM"),_Ne=l(),$o=a("div"),F(cy.$$.fragment),PCo=l(),Ri=a("p"),BCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fj=a("a"),ICo=o("from_pretrained()"),qCo=o(" class method or the "),Tj=a("a"),NCo=o("from_config()"),jCo=o(` class
method.`),DCo=l(),fy=a("p"),GCo=o("This class cannot be instantiated directly using "),Mde=a("code"),OCo=o("__init__()"),VCo=o(" (throws an error)."),XCo=l(),nt=a("div"),F(my.$$.fragment),zCo=l(),Ede=a("p"),WCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QCo=l(),Pi=a("p"),HCo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),UCo=o("not"),JCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),YCo=o("from_pretrained()"),KCo=o(" to load the model weights."),ZCo=l(),F(J_.$$.fragment),e3o=l(),Ke=a("div"),F(gy.$$.fragment),o3o=l(),wde=a("p"),r3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t3o=l(),$a=a("p"),a3o=o("The model class to instantiate is selected based on the "),Ade=a("code"),n3o=o("model_type"),s3o=o(` property of the config object (either
passed as an argument or loaded from `),yde=a("code"),l3o=o("pretrained_model_name_or_path"),i3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),d3o=o("pretrained_model_name_or_path"),c3o=o(":"),f3o=l(),z=a("ul"),Y_=a("li"),xde=a("strong"),m3o=o("bart"),g3o=o(" \u2014 "),Ej=a("a"),h3o=o("BartForCausalLM"),p3o=o(" (BART model)"),u3o=l(),K_=a("li"),$de=a("strong"),_3o=o("bert"),b3o=o(" \u2014 "),Cj=a("a"),v3o=o("BertLMHeadModel"),F3o=o(" (BERT model)"),T3o=l(),Z_=a("li"),kde=a("strong"),M3o=o("bert-generation"),E3o=o(" \u2014 "),wj=a("a"),C3o=o("BertGenerationDecoder"),w3o=o(" (Bert Generation model)"),A3o=l(),e2=a("li"),Sde=a("strong"),y3o=o("big_bird"),L3o=o(" \u2014 "),Aj=a("a"),x3o=o("BigBirdForCausalLM"),$3o=o(" (BigBird model)"),k3o=l(),o2=a("li"),Rde=a("strong"),S3o=o("bigbird_pegasus"),R3o=o(" \u2014 "),yj=a("a"),P3o=o("BigBirdPegasusForCausalLM"),B3o=o(" (BigBirdPegasus model)"),I3o=l(),r2=a("li"),Pde=a("strong"),q3o=o("blenderbot"),N3o=o(" \u2014 "),Lj=a("a"),j3o=o("BlenderbotForCausalLM"),D3o=o(" (Blenderbot model)"),G3o=l(),t2=a("li"),Bde=a("strong"),O3o=o("blenderbot-small"),V3o=o(" \u2014 "),xj=a("a"),X3o=o("BlenderbotSmallForCausalLM"),z3o=o(" (BlenderbotSmall model)"),W3o=l(),a2=a("li"),Ide=a("strong"),Q3o=o("camembert"),H3o=o(" \u2014 "),$j=a("a"),U3o=o("CamembertForCausalLM"),J3o=o(" (CamemBERT model)"),Y3o=l(),n2=a("li"),qde=a("strong"),K3o=o("ctrl"),Z3o=o(" \u2014 "),kj=a("a"),ewo=o("CTRLLMHeadModel"),owo=o(" (CTRL model)"),rwo=l(),s2=a("li"),Nde=a("strong"),two=o("data2vec-text"),awo=o(" \u2014 "),Sj=a("a"),nwo=o("Data2VecTextForCausalLM"),swo=o(" (Data2VecText model)"),lwo=l(),l2=a("li"),jde=a("strong"),iwo=o("electra"),dwo=o(" \u2014 "),Rj=a("a"),cwo=o("ElectraForCausalLM"),fwo=o(" (ELECTRA model)"),mwo=l(),i2=a("li"),Dde=a("strong"),gwo=o("gpt2"),hwo=o(" \u2014 "),Pj=a("a"),pwo=o("GPT2LMHeadModel"),uwo=o(" (OpenAI GPT-2 model)"),_wo=l(),d2=a("li"),Gde=a("strong"),bwo=o("gpt_neo"),vwo=o(" \u2014 "),Bj=a("a"),Fwo=o("GPTNeoForCausalLM"),Two=o(" (GPT Neo model)"),Mwo=l(),c2=a("li"),Ode=a("strong"),Ewo=o("gpt_neox"),Cwo=o(" \u2014 "),Ij=a("a"),wwo=o("GPTNeoXForCausalLM"),Awo=o(" (GPT NeoX model)"),ywo=l(),f2=a("li"),Vde=a("strong"),Lwo=o("gptj"),xwo=o(" \u2014 "),qj=a("a"),$wo=o("GPTJForCausalLM"),kwo=o(" (GPT-J model)"),Swo=l(),m2=a("li"),Xde=a("strong"),Rwo=o("marian"),Pwo=o(" \u2014 "),Nj=a("a"),Bwo=o("MarianForCausalLM"),Iwo=o(" (Marian model)"),qwo=l(),g2=a("li"),zde=a("strong"),Nwo=o("mbart"),jwo=o(" \u2014 "),jj=a("a"),Dwo=o("MBartForCausalLM"),Gwo=o(" (mBART model)"),Owo=l(),h2=a("li"),Wde=a("strong"),Vwo=o("megatron-bert"),Xwo=o(" \u2014 "),Dj=a("a"),zwo=o("MegatronBertForCausalLM"),Wwo=o(" (MegatronBert model)"),Qwo=l(),p2=a("li"),Qde=a("strong"),Hwo=o("openai-gpt"),Uwo=o(" \u2014 "),Gj=a("a"),Jwo=o("OpenAIGPTLMHeadModel"),Ywo=o(" (OpenAI GPT model)"),Kwo=l(),u2=a("li"),Hde=a("strong"),Zwo=o("opt"),e0o=o(" \u2014 "),Oj=a("a"),o0o=o("OPTForCausalLM"),r0o=o(" (OPT model)"),t0o=l(),_2=a("li"),Ude=a("strong"),a0o=o("pegasus"),n0o=o(" \u2014 "),Vj=a("a"),s0o=o("PegasusForCausalLM"),l0o=o(" (Pegasus model)"),i0o=l(),b2=a("li"),Jde=a("strong"),d0o=o("plbart"),c0o=o(" \u2014 "),Xj=a("a"),f0o=o("PLBartForCausalLM"),m0o=o(" (PLBart model)"),g0o=l(),v2=a("li"),Yde=a("strong"),h0o=o("prophetnet"),p0o=o(" \u2014 "),zj=a("a"),u0o=o("ProphetNetForCausalLM"),_0o=o(" (ProphetNet model)"),b0o=l(),F2=a("li"),Kde=a("strong"),v0o=o("qdqbert"),F0o=o(" \u2014 "),Wj=a("a"),T0o=o("QDQBertLMHeadModel"),M0o=o(" (QDQBert model)"),E0o=l(),T2=a("li"),Zde=a("strong"),C0o=o("reformer"),w0o=o(" \u2014 "),Qj=a("a"),A0o=o("ReformerModelWithLMHead"),y0o=o(" (Reformer model)"),L0o=l(),M2=a("li"),ece=a("strong"),x0o=o("rembert"),$0o=o(" \u2014 "),Hj=a("a"),k0o=o("RemBertForCausalLM"),S0o=o(" (RemBERT model)"),R0o=l(),E2=a("li"),oce=a("strong"),P0o=o("roberta"),B0o=o(" \u2014 "),Uj=a("a"),I0o=o("RobertaForCausalLM"),q0o=o(" (RoBERTa model)"),N0o=l(),C2=a("li"),rce=a("strong"),j0o=o("roformer"),D0o=o(" \u2014 "),Jj=a("a"),G0o=o("RoFormerForCausalLM"),O0o=o(" (RoFormer model)"),V0o=l(),w2=a("li"),tce=a("strong"),X0o=o("speech_to_text_2"),z0o=o(" \u2014 "),Yj=a("a"),W0o=o("Speech2Text2ForCausalLM"),Q0o=o(" (Speech2Text2 model)"),H0o=l(),A2=a("li"),ace=a("strong"),U0o=o("transfo-xl"),J0o=o(" \u2014 "),Kj=a("a"),Y0o=o("TransfoXLLMHeadModel"),K0o=o(" (Transformer-XL model)"),Z0o=l(),y2=a("li"),nce=a("strong"),e6o=o("trocr"),o6o=o(" \u2014 "),Zj=a("a"),r6o=o("TrOCRForCausalLM"),t6o=o(" (TrOCR model)"),a6o=l(),L2=a("li"),sce=a("strong"),n6o=o("xglm"),s6o=o(" \u2014 "),eD=a("a"),l6o=o("XGLMForCausalLM"),i6o=o(" (XGLM model)"),d6o=l(),x2=a("li"),lce=a("strong"),c6o=o("xlm"),f6o=o(" \u2014 "),oD=a("a"),m6o=o("XLMWithLMHeadModel"),g6o=o(" (XLM model)"),h6o=l(),$2=a("li"),ice=a("strong"),p6o=o("xlm-prophetnet"),u6o=o(" \u2014 "),rD=a("a"),_6o=o("XLMProphetNetForCausalLM"),b6o=o(" (XLMProphetNet model)"),v6o=l(),k2=a("li"),dce=a("strong"),F6o=o("xlm-roberta"),T6o=o(" \u2014 "),tD=a("a"),M6o=o("XLMRobertaForCausalLM"),E6o=o(" (XLM-RoBERTa model)"),C6o=l(),S2=a("li"),cce=a("strong"),w6o=o("xlm-roberta-xl"),A6o=o(" \u2014 "),aD=a("a"),y6o=o("XLMRobertaXLForCausalLM"),L6o=o(" (XLM-RoBERTa-XL model)"),x6o=l(),R2=a("li"),fce=a("strong"),$6o=o("xlnet"),k6o=o(" \u2014 "),nD=a("a"),S6o=o("XLNetLMHeadModel"),R6o=o(" (XLNet model)"),P6o=l(),P2=a("p"),B6o=o("The model is set in evaluation mode by default using "),mce=a("code"),I6o=o("model.eval()"),q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=a("code"),N6o=o("model.train()"),j6o=l(),F(B2.$$.fragment),bNe=l(),Bi=a("h2"),I2=a("a"),hce=a("span"),F(hy.$$.fragment),D6o=l(),pce=a("span"),G6o=o("AutoModelForMaskedLM"),vNe=l(),ko=a("div"),F(py.$$.fragment),O6o=l(),Ii=a("p"),V6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sD=a("a"),X6o=o("from_pretrained()"),z6o=o(" class method or the "),lD=a("a"),W6o=o("from_config()"),Q6o=o(` class
method.`),H6o=l(),uy=a("p"),U6o=o("This class cannot be instantiated directly using "),uce=a("code"),J6o=o("__init__()"),Y6o=o(" (throws an error)."),K6o=l(),st=a("div"),F(_y.$$.fragment),Z6o=l(),_ce=a("p"),eAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oAo=l(),qi=a("p"),rAo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),tAo=o("not"),aAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),nAo=o("from_pretrained()"),sAo=o(" to load the model weights."),lAo=l(),F(q2.$$.fragment),iAo=l(),Ze=a("div"),F(by.$$.fragment),dAo=l(),vce=a("p"),cAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fAo=l(),ka=a("p"),mAo=o("The model class to instantiate is selected based on the "),Fce=a("code"),gAo=o("model_type"),hAo=o(` property of the config object (either
passed as an argument or loaded from `),Tce=a("code"),pAo=o("pretrained_model_name_or_path"),uAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),_Ao=o("pretrained_model_name_or_path"),bAo=o(":"),vAo=l(),Q=a("ul"),N2=a("li"),Ece=a("strong"),FAo=o("albert"),TAo=o(" \u2014 "),dD=a("a"),MAo=o("AlbertForMaskedLM"),EAo=o(" (ALBERT model)"),CAo=l(),j2=a("li"),Cce=a("strong"),wAo=o("bart"),AAo=o(" \u2014 "),cD=a("a"),yAo=o("BartForConditionalGeneration"),LAo=o(" (BART model)"),xAo=l(),D2=a("li"),wce=a("strong"),$Ao=o("bert"),kAo=o(" \u2014 "),fD=a("a"),SAo=o("BertForMaskedLM"),RAo=o(" (BERT model)"),PAo=l(),G2=a("li"),Ace=a("strong"),BAo=o("big_bird"),IAo=o(" \u2014 "),mD=a("a"),qAo=o("BigBirdForMaskedLM"),NAo=o(" (BigBird model)"),jAo=l(),O2=a("li"),yce=a("strong"),DAo=o("camembert"),GAo=o(" \u2014 "),gD=a("a"),OAo=o("CamembertForMaskedLM"),VAo=o(" (CamemBERT model)"),XAo=l(),V2=a("li"),Lce=a("strong"),zAo=o("convbert"),WAo=o(" \u2014 "),hD=a("a"),QAo=o("ConvBertForMaskedLM"),HAo=o(" (ConvBERT model)"),UAo=l(),X2=a("li"),xce=a("strong"),JAo=o("data2vec-text"),YAo=o(" \u2014 "),pD=a("a"),KAo=o("Data2VecTextForMaskedLM"),ZAo=o(" (Data2VecText model)"),eyo=l(),z2=a("li"),$ce=a("strong"),oyo=o("deberta"),ryo=o(" \u2014 "),uD=a("a"),tyo=o("DebertaForMaskedLM"),ayo=o(" (DeBERTa model)"),nyo=l(),W2=a("li"),kce=a("strong"),syo=o("deberta-v2"),lyo=o(" \u2014 "),_D=a("a"),iyo=o("DebertaV2ForMaskedLM"),dyo=o(" (DeBERTa-v2 model)"),cyo=l(),Q2=a("li"),Sce=a("strong"),fyo=o("distilbert"),myo=o(" \u2014 "),bD=a("a"),gyo=o("DistilBertForMaskedLM"),hyo=o(" (DistilBERT model)"),pyo=l(),H2=a("li"),Rce=a("strong"),uyo=o("electra"),_yo=o(" \u2014 "),vD=a("a"),byo=o("ElectraForMaskedLM"),vyo=o(" (ELECTRA model)"),Fyo=l(),U2=a("li"),Pce=a("strong"),Tyo=o("flaubert"),Myo=o(" \u2014 "),FD=a("a"),Eyo=o("FlaubertWithLMHeadModel"),Cyo=o(" (FlauBERT model)"),wyo=l(),J2=a("li"),Bce=a("strong"),Ayo=o("fnet"),yyo=o(" \u2014 "),TD=a("a"),Lyo=o("FNetForMaskedLM"),xyo=o(" (FNet model)"),$yo=l(),Y2=a("li"),Ice=a("strong"),kyo=o("funnel"),Syo=o(" \u2014 "),MD=a("a"),Ryo=o("FunnelForMaskedLM"),Pyo=o(" (Funnel Transformer model)"),Byo=l(),K2=a("li"),qce=a("strong"),Iyo=o("ibert"),qyo=o(" \u2014 "),ED=a("a"),Nyo=o("IBertForMaskedLM"),jyo=o(" (I-BERT model)"),Dyo=l(),Z2=a("li"),Nce=a("strong"),Gyo=o("layoutlm"),Oyo=o(" \u2014 "),CD=a("a"),Vyo=o("LayoutLMForMaskedLM"),Xyo=o(" (LayoutLM model)"),zyo=l(),e1=a("li"),jce=a("strong"),Wyo=o("longformer"),Qyo=o(" \u2014 "),wD=a("a"),Hyo=o("LongformerForMaskedLM"),Uyo=o(" (Longformer model)"),Jyo=l(),o1=a("li"),Dce=a("strong"),Yyo=o("mbart"),Kyo=o(" \u2014 "),AD=a("a"),Zyo=o("MBartForConditionalGeneration"),eLo=o(" (mBART model)"),oLo=l(),r1=a("li"),Gce=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),yD=a("a"),aLo=o("MegatronBertForMaskedLM"),nLo=o(" (MegatronBert model)"),sLo=l(),t1=a("li"),Oce=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),LD=a("a"),dLo=o("MobileBertForMaskedLM"),cLo=o(" (MobileBERT model)"),fLo=l(),a1=a("li"),Vce=a("strong"),mLo=o("mpnet"),gLo=o(" \u2014 "),xD=a("a"),hLo=o("MPNetForMaskedLM"),pLo=o(" (MPNet model)"),uLo=l(),n1=a("li"),Xce=a("strong"),_Lo=o("nystromformer"),bLo=o(" \u2014 "),$D=a("a"),vLo=o("NystromformerForMaskedLM"),FLo=o(" (Nystromformer model)"),TLo=l(),s1=a("li"),zce=a("strong"),MLo=o("perceiver"),ELo=o(" \u2014 "),kD=a("a"),CLo=o("PerceiverForMaskedLM"),wLo=o(" (Perceiver model)"),ALo=l(),l1=a("li"),Wce=a("strong"),yLo=o("qdqbert"),LLo=o(" \u2014 "),SD=a("a"),xLo=o("QDQBertForMaskedLM"),$Lo=o(" (QDQBert model)"),kLo=l(),i1=a("li"),Qce=a("strong"),SLo=o("reformer"),RLo=o(" \u2014 "),RD=a("a"),PLo=o("ReformerForMaskedLM"),BLo=o(" (Reformer model)"),ILo=l(),d1=a("li"),Hce=a("strong"),qLo=o("rembert"),NLo=o(" \u2014 "),PD=a("a"),jLo=o("RemBertForMaskedLM"),DLo=o(" (RemBERT model)"),GLo=l(),c1=a("li"),Uce=a("strong"),OLo=o("roberta"),VLo=o(" \u2014 "),BD=a("a"),XLo=o("RobertaForMaskedLM"),zLo=o(" (RoBERTa model)"),WLo=l(),f1=a("li"),Jce=a("strong"),QLo=o("roformer"),HLo=o(" \u2014 "),ID=a("a"),ULo=o("RoFormerForMaskedLM"),JLo=o(" (RoFormer model)"),YLo=l(),m1=a("li"),Yce=a("strong"),KLo=o("squeezebert"),ZLo=o(" \u2014 "),qD=a("a"),e8o=o("SqueezeBertForMaskedLM"),o8o=o(" (SqueezeBERT model)"),r8o=l(),g1=a("li"),Kce=a("strong"),t8o=o("tapas"),a8o=o(" \u2014 "),ND=a("a"),n8o=o("TapasForMaskedLM"),s8o=o(" (TAPAS model)"),l8o=l(),h1=a("li"),Zce=a("strong"),i8o=o("wav2vec2"),d8o=o(" \u2014 "),efe=a("code"),c8o=o("Wav2Vec2ForMaskedLM"),f8o=o(" (Wav2Vec2 model)"),m8o=l(),p1=a("li"),ofe=a("strong"),g8o=o("xlm"),h8o=o(" \u2014 "),jD=a("a"),p8o=o("XLMWithLMHeadModel"),u8o=o(" (XLM model)"),_8o=l(),u1=a("li"),rfe=a("strong"),b8o=o("xlm-roberta"),v8o=o(" \u2014 "),DD=a("a"),F8o=o("XLMRobertaForMaskedLM"),T8o=o(" (XLM-RoBERTa model)"),M8o=l(),_1=a("li"),tfe=a("strong"),E8o=o("xlm-roberta-xl"),C8o=o(" \u2014 "),GD=a("a"),w8o=o("XLMRobertaXLForMaskedLM"),A8o=o(" (XLM-RoBERTa-XL model)"),y8o=l(),b1=a("li"),afe=a("strong"),L8o=o("yoso"),x8o=o(" \u2014 "),OD=a("a"),$8o=o("YosoForMaskedLM"),k8o=o(" (YOSO model)"),S8o=l(),v1=a("p"),R8o=o("The model is set in evaluation mode by default using "),nfe=a("code"),P8o=o("model.eval()"),B8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),I8o=o("model.train()"),q8o=l(),F(F1.$$.fragment),FNe=l(),Ni=a("h2"),T1=a("a"),lfe=a("span"),F(vy.$$.fragment),N8o=l(),ife=a("span"),j8o=o("AutoModelForSeq2SeqLM"),TNe=l(),So=a("div"),F(Fy.$$.fragment),D8o=l(),ji=a("p"),G8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=a("a"),O8o=o("from_pretrained()"),V8o=o(" class method or the "),XD=a("a"),X8o=o("from_config()"),z8o=o(` class
method.`),W8o=l(),Ty=a("p"),Q8o=o("This class cannot be instantiated directly using "),dfe=a("code"),H8o=o("__init__()"),U8o=o(" (throws an error)."),J8o=l(),lt=a("div"),F(My.$$.fragment),Y8o=l(),cfe=a("p"),K8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z8o=l(),Di=a("p"),e9o=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),o9o=o("not"),r9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),t9o=o("from_pretrained()"),a9o=o(" to load the model weights."),n9o=l(),F(M1.$$.fragment),s9o=l(),eo=a("div"),F(Ey.$$.fragment),l9o=l(),mfe=a("p"),i9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d9o=l(),Sa=a("p"),c9o=o("The model class to instantiate is selected based on the "),gfe=a("code"),f9o=o("model_type"),m9o=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),g9o=o("pretrained_model_name_or_path"),h9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),p9o=o("pretrained_model_name_or_path"),u9o=o(":"),_9o=l(),ue=a("ul"),E1=a("li"),ufe=a("strong"),b9o=o("bart"),v9o=o(" \u2014 "),WD=a("a"),F9o=o("BartForConditionalGeneration"),T9o=o(" (BART model)"),M9o=l(),C1=a("li"),_fe=a("strong"),E9o=o("bigbird_pegasus"),C9o=o(" \u2014 "),QD=a("a"),w9o=o("BigBirdPegasusForConditionalGeneration"),A9o=o(" (BigBirdPegasus model)"),y9o=l(),w1=a("li"),bfe=a("strong"),L9o=o("blenderbot"),x9o=o(" \u2014 "),HD=a("a"),$9o=o("BlenderbotForConditionalGeneration"),k9o=o(" (Blenderbot model)"),S9o=l(),A1=a("li"),vfe=a("strong"),R9o=o("blenderbot-small"),P9o=o(" \u2014 "),UD=a("a"),B9o=o("BlenderbotSmallForConditionalGeneration"),I9o=o(" (BlenderbotSmall model)"),q9o=l(),y1=a("li"),Ffe=a("strong"),N9o=o("encoder-decoder"),j9o=o(" \u2014 "),JD=a("a"),D9o=o("EncoderDecoderModel"),G9o=o(" (Encoder decoder model)"),O9o=l(),L1=a("li"),Tfe=a("strong"),V9o=o("fsmt"),X9o=o(" \u2014 "),YD=a("a"),z9o=o("FSMTForConditionalGeneration"),W9o=o(" (FairSeq Machine-Translation model)"),Q9o=l(),x1=a("li"),Mfe=a("strong"),H9o=o("led"),U9o=o(" \u2014 "),KD=a("a"),J9o=o("LEDForConditionalGeneration"),Y9o=o(" (LED model)"),K9o=l(),$1=a("li"),Efe=a("strong"),Z9o=o("m2m_100"),exo=o(" \u2014 "),ZD=a("a"),oxo=o("M2M100ForConditionalGeneration"),rxo=o(" (M2M100 model)"),txo=l(),k1=a("li"),Cfe=a("strong"),axo=o("marian"),nxo=o(" \u2014 "),eG=a("a"),sxo=o("MarianMTModel"),lxo=o(" (Marian model)"),ixo=l(),S1=a("li"),wfe=a("strong"),dxo=o("mbart"),cxo=o(" \u2014 "),oG=a("a"),fxo=o("MBartForConditionalGeneration"),mxo=o(" (mBART model)"),gxo=l(),R1=a("li"),Afe=a("strong"),hxo=o("mt5"),pxo=o(" \u2014 "),rG=a("a"),uxo=o("MT5ForConditionalGeneration"),_xo=o(" (mT5 model)"),bxo=l(),P1=a("li"),yfe=a("strong"),vxo=o("pegasus"),Fxo=o(" \u2014 "),tG=a("a"),Txo=o("PegasusForConditionalGeneration"),Mxo=o(" (Pegasus model)"),Exo=l(),B1=a("li"),Lfe=a("strong"),Cxo=o("plbart"),wxo=o(" \u2014 "),aG=a("a"),Axo=o("PLBartForConditionalGeneration"),yxo=o(" (PLBart model)"),Lxo=l(),I1=a("li"),xfe=a("strong"),xxo=o("prophetnet"),$xo=o(" \u2014 "),nG=a("a"),kxo=o("ProphetNetForConditionalGeneration"),Sxo=o(" (ProphetNet model)"),Rxo=l(),q1=a("li"),$fe=a("strong"),Pxo=o("t5"),Bxo=o(" \u2014 "),sG=a("a"),Ixo=o("T5ForConditionalGeneration"),qxo=o(" (T5 model)"),Nxo=l(),N1=a("li"),kfe=a("strong"),jxo=o("xlm-prophetnet"),Dxo=o(" \u2014 "),lG=a("a"),Gxo=o("XLMProphetNetForConditionalGeneration"),Oxo=o(" (XLMProphetNet model)"),Vxo=l(),j1=a("p"),Xxo=o("The model is set in evaluation mode by default using "),Sfe=a("code"),zxo=o("model.eval()"),Wxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=a("code"),Qxo=o("model.train()"),Hxo=l(),F(D1.$$.fragment),MNe=l(),Gi=a("h2"),G1=a("a"),Pfe=a("span"),F(Cy.$$.fragment),Uxo=l(),Bfe=a("span"),Jxo=o("AutoModelForSequenceClassification"),ENe=l(),Ro=a("div"),F(wy.$$.fragment),Yxo=l(),Oi=a("p"),Kxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=a("a"),Zxo=o("from_pretrained()"),e$o=o(" class method or the "),dG=a("a"),o$o=o("from_config()"),r$o=o(` class
method.`),t$o=l(),Ay=a("p"),a$o=o("This class cannot be instantiated directly using "),Ife=a("code"),n$o=o("__init__()"),s$o=o(" (throws an error)."),l$o=l(),it=a("div"),F(yy.$$.fragment),i$o=l(),qfe=a("p"),d$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c$o=l(),Vi=a("p"),f$o=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),m$o=o("not"),g$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),h$o=o("from_pretrained()"),p$o=o(" to load the model weights."),u$o=l(),F(O1.$$.fragment),_$o=l(),oo=a("div"),F(Ly.$$.fragment),b$o=l(),jfe=a("p"),v$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F$o=l(),Ra=a("p"),T$o=o("The model class to instantiate is selected based on the "),Dfe=a("code"),M$o=o("model_type"),E$o=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),C$o=o("pretrained_model_name_or_path"),w$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),A$o=o("pretrained_model_name_or_path"),y$o=o(":"),L$o=l(),q=a("ul"),V1=a("li"),Vfe=a("strong"),x$o=o("albert"),$$o=o(" \u2014 "),fG=a("a"),k$o=o("AlbertForSequenceClassification"),S$o=o(" (ALBERT model)"),R$o=l(),X1=a("li"),Xfe=a("strong"),P$o=o("bart"),B$o=o(" \u2014 "),mG=a("a"),I$o=o("BartForSequenceClassification"),q$o=o(" (BART model)"),N$o=l(),z1=a("li"),zfe=a("strong"),j$o=o("bert"),D$o=o(" \u2014 "),gG=a("a"),G$o=o("BertForSequenceClassification"),O$o=o(" (BERT model)"),V$o=l(),W1=a("li"),Wfe=a("strong"),X$o=o("big_bird"),z$o=o(" \u2014 "),hG=a("a"),W$o=o("BigBirdForSequenceClassification"),Q$o=o(" (BigBird model)"),H$o=l(),Q1=a("li"),Qfe=a("strong"),U$o=o("bigbird_pegasus"),J$o=o(" \u2014 "),pG=a("a"),Y$o=o("BigBirdPegasusForSequenceClassification"),K$o=o(" (BigBirdPegasus model)"),Z$o=l(),H1=a("li"),Hfe=a("strong"),eko=o("camembert"),oko=o(" \u2014 "),uG=a("a"),rko=o("CamembertForSequenceClassification"),tko=o(" (CamemBERT model)"),ako=l(),U1=a("li"),Ufe=a("strong"),nko=o("canine"),sko=o(" \u2014 "),_G=a("a"),lko=o("CanineForSequenceClassification"),iko=o(" (Canine model)"),dko=l(),J1=a("li"),Jfe=a("strong"),cko=o("convbert"),fko=o(" \u2014 "),bG=a("a"),mko=o("ConvBertForSequenceClassification"),gko=o(" (ConvBERT model)"),hko=l(),Y1=a("li"),Yfe=a("strong"),pko=o("ctrl"),uko=o(" \u2014 "),vG=a("a"),_ko=o("CTRLForSequenceClassification"),bko=o(" (CTRL model)"),vko=l(),K1=a("li"),Kfe=a("strong"),Fko=o("data2vec-text"),Tko=o(" \u2014 "),FG=a("a"),Mko=o("Data2VecTextForSequenceClassification"),Eko=o(" (Data2VecText model)"),Cko=l(),Z1=a("li"),Zfe=a("strong"),wko=o("deberta"),Ako=o(" \u2014 "),TG=a("a"),yko=o("DebertaForSequenceClassification"),Lko=o(" (DeBERTa model)"),xko=l(),eb=a("li"),eme=a("strong"),$ko=o("deberta-v2"),kko=o(" \u2014 "),MG=a("a"),Sko=o("DebertaV2ForSequenceClassification"),Rko=o(" (DeBERTa-v2 model)"),Pko=l(),ob=a("li"),ome=a("strong"),Bko=o("distilbert"),Iko=o(" \u2014 "),EG=a("a"),qko=o("DistilBertForSequenceClassification"),Nko=o(" (DistilBERT model)"),jko=l(),rb=a("li"),rme=a("strong"),Dko=o("electra"),Gko=o(" \u2014 "),CG=a("a"),Oko=o("ElectraForSequenceClassification"),Vko=o(" (ELECTRA model)"),Xko=l(),tb=a("li"),tme=a("strong"),zko=o("flaubert"),Wko=o(" \u2014 "),wG=a("a"),Qko=o("FlaubertForSequenceClassification"),Hko=o(" (FlauBERT model)"),Uko=l(),ab=a("li"),ame=a("strong"),Jko=o("fnet"),Yko=o(" \u2014 "),AG=a("a"),Kko=o("FNetForSequenceClassification"),Zko=o(" (FNet model)"),eSo=l(),nb=a("li"),nme=a("strong"),oSo=o("funnel"),rSo=o(" \u2014 "),yG=a("a"),tSo=o("FunnelForSequenceClassification"),aSo=o(" (Funnel Transformer model)"),nSo=l(),sb=a("li"),sme=a("strong"),sSo=o("gpt2"),lSo=o(" \u2014 "),LG=a("a"),iSo=o("GPT2ForSequenceClassification"),dSo=o(" (OpenAI GPT-2 model)"),cSo=l(),lb=a("li"),lme=a("strong"),fSo=o("gpt_neo"),mSo=o(" \u2014 "),xG=a("a"),gSo=o("GPTNeoForSequenceClassification"),hSo=o(" (GPT Neo model)"),pSo=l(),ib=a("li"),ime=a("strong"),uSo=o("gptj"),_So=o(" \u2014 "),$G=a("a"),bSo=o("GPTJForSequenceClassification"),vSo=o(" (GPT-J model)"),FSo=l(),db=a("li"),dme=a("strong"),TSo=o("ibert"),MSo=o(" \u2014 "),kG=a("a"),ESo=o("IBertForSequenceClassification"),CSo=o(" (I-BERT model)"),wSo=l(),cb=a("li"),cme=a("strong"),ASo=o("layoutlm"),ySo=o(" \u2014 "),SG=a("a"),LSo=o("LayoutLMForSequenceClassification"),xSo=o(" (LayoutLM model)"),$So=l(),fb=a("li"),fme=a("strong"),kSo=o("layoutlmv2"),SSo=o(" \u2014 "),RG=a("a"),RSo=o("LayoutLMv2ForSequenceClassification"),PSo=o(" (LayoutLMv2 model)"),BSo=l(),mb=a("li"),mme=a("strong"),ISo=o("layoutlmv3"),qSo=o(" \u2014 "),PG=a("a"),NSo=o("LayoutLMv3ForSequenceClassification"),jSo=o(" (LayoutLMv3 model)"),DSo=l(),gb=a("li"),gme=a("strong"),GSo=o("led"),OSo=o(" \u2014 "),BG=a("a"),VSo=o("LEDForSequenceClassification"),XSo=o(" (LED model)"),zSo=l(),hb=a("li"),hme=a("strong"),WSo=o("longformer"),QSo=o(" \u2014 "),IG=a("a"),HSo=o("LongformerForSequenceClassification"),USo=o(" (Longformer model)"),JSo=l(),pb=a("li"),pme=a("strong"),YSo=o("mbart"),KSo=o(" \u2014 "),qG=a("a"),ZSo=o("MBartForSequenceClassification"),eRo=o(" (mBART model)"),oRo=l(),ub=a("li"),ume=a("strong"),rRo=o("megatron-bert"),tRo=o(" \u2014 "),NG=a("a"),aRo=o("MegatronBertForSequenceClassification"),nRo=o(" (MegatronBert model)"),sRo=l(),_b=a("li"),_me=a("strong"),lRo=o("mobilebert"),iRo=o(" \u2014 "),jG=a("a"),dRo=o("MobileBertForSequenceClassification"),cRo=o(" (MobileBERT model)"),fRo=l(),bb=a("li"),bme=a("strong"),mRo=o("mpnet"),gRo=o(" \u2014 "),DG=a("a"),hRo=o("MPNetForSequenceClassification"),pRo=o(" (MPNet model)"),uRo=l(),vb=a("li"),vme=a("strong"),_Ro=o("nystromformer"),bRo=o(" \u2014 "),GG=a("a"),vRo=o("NystromformerForSequenceClassification"),FRo=o(" (Nystromformer model)"),TRo=l(),Fb=a("li"),Fme=a("strong"),MRo=o("openai-gpt"),ERo=o(" \u2014 "),OG=a("a"),CRo=o("OpenAIGPTForSequenceClassification"),wRo=o(" (OpenAI GPT model)"),ARo=l(),Tb=a("li"),Tme=a("strong"),yRo=o("perceiver"),LRo=o(" \u2014 "),VG=a("a"),xRo=o("PerceiverForSequenceClassification"),$Ro=o(" (Perceiver model)"),kRo=l(),Mb=a("li"),Mme=a("strong"),SRo=o("plbart"),RRo=o(" \u2014 "),XG=a("a"),PRo=o("PLBartForSequenceClassification"),BRo=o(" (PLBart model)"),IRo=l(),Eb=a("li"),Eme=a("strong"),qRo=o("qdqbert"),NRo=o(" \u2014 "),zG=a("a"),jRo=o("QDQBertForSequenceClassification"),DRo=o(" (QDQBert model)"),GRo=l(),Cb=a("li"),Cme=a("strong"),ORo=o("reformer"),VRo=o(" \u2014 "),WG=a("a"),XRo=o("ReformerForSequenceClassification"),zRo=o(" (Reformer model)"),WRo=l(),wb=a("li"),wme=a("strong"),QRo=o("rembert"),HRo=o(" \u2014 "),QG=a("a"),URo=o("RemBertForSequenceClassification"),JRo=o(" (RemBERT model)"),YRo=l(),Ab=a("li"),Ame=a("strong"),KRo=o("roberta"),ZRo=o(" \u2014 "),HG=a("a"),ePo=o("RobertaForSequenceClassification"),oPo=o(" (RoBERTa model)"),rPo=l(),yb=a("li"),yme=a("strong"),tPo=o("roformer"),aPo=o(" \u2014 "),UG=a("a"),nPo=o("RoFormerForSequenceClassification"),sPo=o(" (RoFormer model)"),lPo=l(),Lb=a("li"),Lme=a("strong"),iPo=o("squeezebert"),dPo=o(" \u2014 "),JG=a("a"),cPo=o("SqueezeBertForSequenceClassification"),fPo=o(" (SqueezeBERT model)"),mPo=l(),xb=a("li"),xme=a("strong"),gPo=o("tapas"),hPo=o(" \u2014 "),YG=a("a"),pPo=o("TapasForSequenceClassification"),uPo=o(" (TAPAS model)"),_Po=l(),$b=a("li"),$me=a("strong"),bPo=o("transfo-xl"),vPo=o(" \u2014 "),KG=a("a"),FPo=o("TransfoXLForSequenceClassification"),TPo=o(" (Transformer-XL model)"),MPo=l(),kb=a("li"),kme=a("strong"),EPo=o("xlm"),CPo=o(" \u2014 "),ZG=a("a"),wPo=o("XLMForSequenceClassification"),APo=o(" (XLM model)"),yPo=l(),Sb=a("li"),Sme=a("strong"),LPo=o("xlm-roberta"),xPo=o(" \u2014 "),eO=a("a"),$Po=o("XLMRobertaForSequenceClassification"),kPo=o(" (XLM-RoBERTa model)"),SPo=l(),Rb=a("li"),Rme=a("strong"),RPo=o("xlm-roberta-xl"),PPo=o(" \u2014 "),oO=a("a"),BPo=o("XLMRobertaXLForSequenceClassification"),IPo=o(" (XLM-RoBERTa-XL model)"),qPo=l(),Pb=a("li"),Pme=a("strong"),NPo=o("xlnet"),jPo=o(" \u2014 "),rO=a("a"),DPo=o("XLNetForSequenceClassification"),GPo=o(" (XLNet model)"),OPo=l(),Bb=a("li"),Bme=a("strong"),VPo=o("yoso"),XPo=o(" \u2014 "),tO=a("a"),zPo=o("YosoForSequenceClassification"),WPo=o(" (YOSO model)"),QPo=l(),Ib=a("p"),HPo=o("The model is set in evaluation mode by default using "),Ime=a("code"),UPo=o("model.eval()"),JPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),YPo=o("model.train()"),KPo=l(),F(qb.$$.fragment),CNe=l(),Xi=a("h2"),Nb=a("a"),Nme=a("span"),F(xy.$$.fragment),ZPo=l(),jme=a("span"),eBo=o("AutoModelForMultipleChoice"),wNe=l(),Po=a("div"),F($y.$$.fragment),oBo=l(),zi=a("p"),rBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=a("a"),tBo=o("from_pretrained()"),aBo=o(" class method or the "),nO=a("a"),nBo=o("from_config()"),sBo=o(` class
method.`),lBo=l(),ky=a("p"),iBo=o("This class cannot be instantiated directly using "),Dme=a("code"),dBo=o("__init__()"),cBo=o(" (throws an error)."),fBo=l(),dt=a("div"),F(Sy.$$.fragment),mBo=l(),Gme=a("p"),gBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hBo=l(),Wi=a("p"),pBo=o(`Note:
Loading a model from its configuration file does `),Ome=a("strong"),uBo=o("not"),_Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),bBo=o("from_pretrained()"),vBo=o(" to load the model weights."),FBo=l(),F(jb.$$.fragment),TBo=l(),ro=a("div"),F(Ry.$$.fragment),MBo=l(),Vme=a("p"),EBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CBo=l(),Pa=a("p"),wBo=o("The model class to instantiate is selected based on the "),Xme=a("code"),ABo=o("model_type"),yBo=o(` property of the config object (either
passed as an argument or loaded from `),zme=a("code"),LBo=o("pretrained_model_name_or_path"),xBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=a("code"),$Bo=o("pretrained_model_name_or_path"),kBo=o(":"),SBo=l(),K=a("ul"),Db=a("li"),Qme=a("strong"),RBo=o("albert"),PBo=o(" \u2014 "),lO=a("a"),BBo=o("AlbertForMultipleChoice"),IBo=o(" (ALBERT model)"),qBo=l(),Gb=a("li"),Hme=a("strong"),NBo=o("bert"),jBo=o(" \u2014 "),iO=a("a"),DBo=o("BertForMultipleChoice"),GBo=o(" (BERT model)"),OBo=l(),Ob=a("li"),Ume=a("strong"),VBo=o("big_bird"),XBo=o(" \u2014 "),dO=a("a"),zBo=o("BigBirdForMultipleChoice"),WBo=o(" (BigBird model)"),QBo=l(),Vb=a("li"),Jme=a("strong"),HBo=o("camembert"),UBo=o(" \u2014 "),cO=a("a"),JBo=o("CamembertForMultipleChoice"),YBo=o(" (CamemBERT model)"),KBo=l(),Xb=a("li"),Yme=a("strong"),ZBo=o("canine"),eIo=o(" \u2014 "),fO=a("a"),oIo=o("CanineForMultipleChoice"),rIo=o(" (Canine model)"),tIo=l(),zb=a("li"),Kme=a("strong"),aIo=o("convbert"),nIo=o(" \u2014 "),mO=a("a"),sIo=o("ConvBertForMultipleChoice"),lIo=o(" (ConvBERT model)"),iIo=l(),Wb=a("li"),Zme=a("strong"),dIo=o("data2vec-text"),cIo=o(" \u2014 "),gO=a("a"),fIo=o("Data2VecTextForMultipleChoice"),mIo=o(" (Data2VecText model)"),gIo=l(),Qb=a("li"),ege=a("strong"),hIo=o("deberta-v2"),pIo=o(" \u2014 "),hO=a("a"),uIo=o("DebertaV2ForMultipleChoice"),_Io=o(" (DeBERTa-v2 model)"),bIo=l(),Hb=a("li"),oge=a("strong"),vIo=o("distilbert"),FIo=o(" \u2014 "),pO=a("a"),TIo=o("DistilBertForMultipleChoice"),MIo=o(" (DistilBERT model)"),EIo=l(),Ub=a("li"),rge=a("strong"),CIo=o("electra"),wIo=o(" \u2014 "),uO=a("a"),AIo=o("ElectraForMultipleChoice"),yIo=o(" (ELECTRA model)"),LIo=l(),Jb=a("li"),tge=a("strong"),xIo=o("flaubert"),$Io=o(" \u2014 "),_O=a("a"),kIo=o("FlaubertForMultipleChoice"),SIo=o(" (FlauBERT model)"),RIo=l(),Yb=a("li"),age=a("strong"),PIo=o("fnet"),BIo=o(" \u2014 "),bO=a("a"),IIo=o("FNetForMultipleChoice"),qIo=o(" (FNet model)"),NIo=l(),Kb=a("li"),nge=a("strong"),jIo=o("funnel"),DIo=o(" \u2014 "),vO=a("a"),GIo=o("FunnelForMultipleChoice"),OIo=o(" (Funnel Transformer model)"),VIo=l(),Zb=a("li"),sge=a("strong"),XIo=o("ibert"),zIo=o(" \u2014 "),FO=a("a"),WIo=o("IBertForMultipleChoice"),QIo=o(" (I-BERT model)"),HIo=l(),e4=a("li"),lge=a("strong"),UIo=o("longformer"),JIo=o(" \u2014 "),TO=a("a"),YIo=o("LongformerForMultipleChoice"),KIo=o(" (Longformer model)"),ZIo=l(),o4=a("li"),ige=a("strong"),eqo=o("megatron-bert"),oqo=o(" \u2014 "),MO=a("a"),rqo=o("MegatronBertForMultipleChoice"),tqo=o(" (MegatronBert model)"),aqo=l(),r4=a("li"),dge=a("strong"),nqo=o("mobilebert"),sqo=o(" \u2014 "),EO=a("a"),lqo=o("MobileBertForMultipleChoice"),iqo=o(" (MobileBERT model)"),dqo=l(),t4=a("li"),cge=a("strong"),cqo=o("mpnet"),fqo=o(" \u2014 "),CO=a("a"),mqo=o("MPNetForMultipleChoice"),gqo=o(" (MPNet model)"),hqo=l(),a4=a("li"),fge=a("strong"),pqo=o("nystromformer"),uqo=o(" \u2014 "),wO=a("a"),_qo=o("NystromformerForMultipleChoice"),bqo=o(" (Nystromformer model)"),vqo=l(),n4=a("li"),mge=a("strong"),Fqo=o("qdqbert"),Tqo=o(" \u2014 "),AO=a("a"),Mqo=o("QDQBertForMultipleChoice"),Eqo=o(" (QDQBert model)"),Cqo=l(),s4=a("li"),gge=a("strong"),wqo=o("rembert"),Aqo=o(" \u2014 "),yO=a("a"),yqo=o("RemBertForMultipleChoice"),Lqo=o(" (RemBERT model)"),xqo=l(),l4=a("li"),hge=a("strong"),$qo=o("roberta"),kqo=o(" \u2014 "),LO=a("a"),Sqo=o("RobertaForMultipleChoice"),Rqo=o(" (RoBERTa model)"),Pqo=l(),i4=a("li"),pge=a("strong"),Bqo=o("roformer"),Iqo=o(" \u2014 "),xO=a("a"),qqo=o("RoFormerForMultipleChoice"),Nqo=o(" (RoFormer model)"),jqo=l(),d4=a("li"),uge=a("strong"),Dqo=o("squeezebert"),Gqo=o(" \u2014 "),$O=a("a"),Oqo=o("SqueezeBertForMultipleChoice"),Vqo=o(" (SqueezeBERT model)"),Xqo=l(),c4=a("li"),_ge=a("strong"),zqo=o("xlm"),Wqo=o(" \u2014 "),kO=a("a"),Qqo=o("XLMForMultipleChoice"),Hqo=o(" (XLM model)"),Uqo=l(),f4=a("li"),bge=a("strong"),Jqo=o("xlm-roberta"),Yqo=o(" \u2014 "),SO=a("a"),Kqo=o("XLMRobertaForMultipleChoice"),Zqo=o(" (XLM-RoBERTa model)"),eNo=l(),m4=a("li"),vge=a("strong"),oNo=o("xlm-roberta-xl"),rNo=o(" \u2014 "),RO=a("a"),tNo=o("XLMRobertaXLForMultipleChoice"),aNo=o(" (XLM-RoBERTa-XL model)"),nNo=l(),g4=a("li"),Fge=a("strong"),sNo=o("xlnet"),lNo=o(" \u2014 "),PO=a("a"),iNo=o("XLNetForMultipleChoice"),dNo=o(" (XLNet model)"),cNo=l(),h4=a("li"),Tge=a("strong"),fNo=o("yoso"),mNo=o(" \u2014 "),BO=a("a"),gNo=o("YosoForMultipleChoice"),hNo=o(" (YOSO model)"),pNo=l(),p4=a("p"),uNo=o("The model is set in evaluation mode by default using "),Mge=a("code"),_No=o("model.eval()"),bNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=a("code"),vNo=o("model.train()"),FNo=l(),F(u4.$$.fragment),ANe=l(),Qi=a("h2"),_4=a("a"),Cge=a("span"),F(Py.$$.fragment),TNo=l(),wge=a("span"),MNo=o("AutoModelForNextSentencePrediction"),yNe=l(),Bo=a("div"),F(By.$$.fragment),ENo=l(),Hi=a("p"),CNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=a("a"),wNo=o("from_pretrained()"),ANo=o(" class method or the "),qO=a("a"),yNo=o("from_config()"),LNo=o(` class
method.`),xNo=l(),Iy=a("p"),$No=o("This class cannot be instantiated directly using "),Age=a("code"),kNo=o("__init__()"),SNo=o(" (throws an error)."),RNo=l(),ct=a("div"),F(qy.$$.fragment),PNo=l(),yge=a("p"),BNo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),INo=l(),Ui=a("p"),qNo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),NNo=o("not"),jNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),DNo=o("from_pretrained()"),GNo=o(" to load the model weights."),ONo=l(),F(b4.$$.fragment),VNo=l(),to=a("div"),F(Ny.$$.fragment),XNo=l(),xge=a("p"),zNo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WNo=l(),Ba=a("p"),QNo=o("The model class to instantiate is selected based on the "),$ge=a("code"),HNo=o("model_type"),UNo=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),JNo=o("pretrained_model_name_or_path"),YNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=a("code"),KNo=o("pretrained_model_name_or_path"),ZNo=o(":"),ejo=l(),Yr=a("ul"),v4=a("li"),Rge=a("strong"),ojo=o("bert"),rjo=o(" \u2014 "),jO=a("a"),tjo=o("BertForNextSentencePrediction"),ajo=o(" (BERT model)"),njo=l(),F4=a("li"),Pge=a("strong"),sjo=o("fnet"),ljo=o(" \u2014 "),DO=a("a"),ijo=o("FNetForNextSentencePrediction"),djo=o(" (FNet model)"),cjo=l(),T4=a("li"),Bge=a("strong"),fjo=o("megatron-bert"),mjo=o(" \u2014 "),GO=a("a"),gjo=o("MegatronBertForNextSentencePrediction"),hjo=o(" (MegatronBert model)"),pjo=l(),M4=a("li"),Ige=a("strong"),ujo=o("mobilebert"),_jo=o(" \u2014 "),OO=a("a"),bjo=o("MobileBertForNextSentencePrediction"),vjo=o(" (MobileBERT model)"),Fjo=l(),E4=a("li"),qge=a("strong"),Tjo=o("qdqbert"),Mjo=o(" \u2014 "),VO=a("a"),Ejo=o("QDQBertForNextSentencePrediction"),Cjo=o(" (QDQBert model)"),wjo=l(),C4=a("p"),Ajo=o("The model is set in evaluation mode by default using "),Nge=a("code"),yjo=o("model.eval()"),Ljo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),xjo=o("model.train()"),$jo=l(),F(w4.$$.fragment),LNe=l(),Ji=a("h2"),A4=a("a"),Dge=a("span"),F(jy.$$.fragment),kjo=l(),Gge=a("span"),Sjo=o("AutoModelForTokenClassification"),xNe=l(),Io=a("div"),F(Dy.$$.fragment),Rjo=l(),Yi=a("p"),Pjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=a("a"),Bjo=o("from_pretrained()"),Ijo=o(" class method or the "),zO=a("a"),qjo=o("from_config()"),Njo=o(` class
method.`),jjo=l(),Gy=a("p"),Djo=o("This class cannot be instantiated directly using "),Oge=a("code"),Gjo=o("__init__()"),Ojo=o(" (throws an error)."),Vjo=l(),ft=a("div"),F(Oy.$$.fragment),Xjo=l(),Vge=a("p"),zjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wjo=l(),Ki=a("p"),Qjo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),Hjo=o("not"),Ujo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" to load the model weights."),Kjo=l(),F(y4.$$.fragment),Zjo=l(),ao=a("div"),F(Vy.$$.fragment),eDo=l(),zge=a("p"),oDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rDo=l(),Ia=a("p"),tDo=o("The model class to instantiate is selected based on the "),Wge=a("code"),aDo=o("model_type"),nDo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),sDo=o("pretrained_model_name_or_path"),lDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=a("code"),iDo=o("pretrained_model_name_or_path"),dDo=o(":"),cDo=l(),H=a("ul"),L4=a("li"),Uge=a("strong"),fDo=o("albert"),mDo=o(" \u2014 "),QO=a("a"),gDo=o("AlbertForTokenClassification"),hDo=o(" (ALBERT model)"),pDo=l(),x4=a("li"),Jge=a("strong"),uDo=o("bert"),_Do=o(" \u2014 "),HO=a("a"),bDo=o("BertForTokenClassification"),vDo=o(" (BERT model)"),FDo=l(),$4=a("li"),Yge=a("strong"),TDo=o("big_bird"),MDo=o(" \u2014 "),UO=a("a"),EDo=o("BigBirdForTokenClassification"),CDo=o(" (BigBird model)"),wDo=l(),k4=a("li"),Kge=a("strong"),ADo=o("camembert"),yDo=o(" \u2014 "),JO=a("a"),LDo=o("CamembertForTokenClassification"),xDo=o(" (CamemBERT model)"),$Do=l(),S4=a("li"),Zge=a("strong"),kDo=o("canine"),SDo=o(" \u2014 "),YO=a("a"),RDo=o("CanineForTokenClassification"),PDo=o(" (Canine model)"),BDo=l(),R4=a("li"),ehe=a("strong"),IDo=o("convbert"),qDo=o(" \u2014 "),KO=a("a"),NDo=o("ConvBertForTokenClassification"),jDo=o(" (ConvBERT model)"),DDo=l(),P4=a("li"),ohe=a("strong"),GDo=o("data2vec-text"),ODo=o(" \u2014 "),ZO=a("a"),VDo=o("Data2VecTextForTokenClassification"),XDo=o(" (Data2VecText model)"),zDo=l(),B4=a("li"),rhe=a("strong"),WDo=o("deberta"),QDo=o(" \u2014 "),eV=a("a"),HDo=o("DebertaForTokenClassification"),UDo=o(" (DeBERTa model)"),JDo=l(),I4=a("li"),the=a("strong"),YDo=o("deberta-v2"),KDo=o(" \u2014 "),oV=a("a"),ZDo=o("DebertaV2ForTokenClassification"),eGo=o(" (DeBERTa-v2 model)"),oGo=l(),q4=a("li"),ahe=a("strong"),rGo=o("distilbert"),tGo=o(" \u2014 "),rV=a("a"),aGo=o("DistilBertForTokenClassification"),nGo=o(" (DistilBERT model)"),sGo=l(),N4=a("li"),nhe=a("strong"),lGo=o("electra"),iGo=o(" \u2014 "),tV=a("a"),dGo=o("ElectraForTokenClassification"),cGo=o(" (ELECTRA model)"),fGo=l(),j4=a("li"),she=a("strong"),mGo=o("flaubert"),gGo=o(" \u2014 "),aV=a("a"),hGo=o("FlaubertForTokenClassification"),pGo=o(" (FlauBERT model)"),uGo=l(),D4=a("li"),lhe=a("strong"),_Go=o("fnet"),bGo=o(" \u2014 "),nV=a("a"),vGo=o("FNetForTokenClassification"),FGo=o(" (FNet model)"),TGo=l(),G4=a("li"),ihe=a("strong"),MGo=o("funnel"),EGo=o(" \u2014 "),sV=a("a"),CGo=o("FunnelForTokenClassification"),wGo=o(" (Funnel Transformer model)"),AGo=l(),O4=a("li"),dhe=a("strong"),yGo=o("gpt2"),LGo=o(" \u2014 "),lV=a("a"),xGo=o("GPT2ForTokenClassification"),$Go=o(" (OpenAI GPT-2 model)"),kGo=l(),V4=a("li"),che=a("strong"),SGo=o("ibert"),RGo=o(" \u2014 "),iV=a("a"),PGo=o("IBertForTokenClassification"),BGo=o(" (I-BERT model)"),IGo=l(),X4=a("li"),fhe=a("strong"),qGo=o("layoutlm"),NGo=o(" \u2014 "),dV=a("a"),jGo=o("LayoutLMForTokenClassification"),DGo=o(" (LayoutLM model)"),GGo=l(),z4=a("li"),mhe=a("strong"),OGo=o("layoutlmv2"),VGo=o(" \u2014 "),cV=a("a"),XGo=o("LayoutLMv2ForTokenClassification"),zGo=o(" (LayoutLMv2 model)"),WGo=l(),W4=a("li"),ghe=a("strong"),QGo=o("layoutlmv3"),HGo=o(" \u2014 "),fV=a("a"),UGo=o("LayoutLMv3ForTokenClassification"),JGo=o(" (LayoutLMv3 model)"),YGo=l(),Q4=a("li"),hhe=a("strong"),KGo=o("longformer"),ZGo=o(" \u2014 "),mV=a("a"),eOo=o("LongformerForTokenClassification"),oOo=o(" (Longformer model)"),rOo=l(),H4=a("li"),phe=a("strong"),tOo=o("megatron-bert"),aOo=o(" \u2014 "),gV=a("a"),nOo=o("MegatronBertForTokenClassification"),sOo=o(" (MegatronBert model)"),lOo=l(),U4=a("li"),uhe=a("strong"),iOo=o("mobilebert"),dOo=o(" \u2014 "),hV=a("a"),cOo=o("MobileBertForTokenClassification"),fOo=o(" (MobileBERT model)"),mOo=l(),J4=a("li"),_he=a("strong"),gOo=o("mpnet"),hOo=o(" \u2014 "),pV=a("a"),pOo=o("MPNetForTokenClassification"),uOo=o(" (MPNet model)"),_Oo=l(),Y4=a("li"),bhe=a("strong"),bOo=o("nystromformer"),vOo=o(" \u2014 "),uV=a("a"),FOo=o("NystromformerForTokenClassification"),TOo=o(" (Nystromformer model)"),MOo=l(),K4=a("li"),vhe=a("strong"),EOo=o("qdqbert"),COo=o(" \u2014 "),_V=a("a"),wOo=o("QDQBertForTokenClassification"),AOo=o(" (QDQBert model)"),yOo=l(),Z4=a("li"),Fhe=a("strong"),LOo=o("rembert"),xOo=o(" \u2014 "),bV=a("a"),$Oo=o("RemBertForTokenClassification"),kOo=o(" (RemBERT model)"),SOo=l(),ev=a("li"),The=a("strong"),ROo=o("roberta"),POo=o(" \u2014 "),vV=a("a"),BOo=o("RobertaForTokenClassification"),IOo=o(" (RoBERTa model)"),qOo=l(),ov=a("li"),Mhe=a("strong"),NOo=o("roformer"),jOo=o(" \u2014 "),FV=a("a"),DOo=o("RoFormerForTokenClassification"),GOo=o(" (RoFormer model)"),OOo=l(),rv=a("li"),Ehe=a("strong"),VOo=o("squeezebert"),XOo=o(" \u2014 "),TV=a("a"),zOo=o("SqueezeBertForTokenClassification"),WOo=o(" (SqueezeBERT model)"),QOo=l(),tv=a("li"),Che=a("strong"),HOo=o("xlm"),UOo=o(" \u2014 "),MV=a("a"),JOo=o("XLMForTokenClassification"),YOo=o(" (XLM model)"),KOo=l(),av=a("li"),whe=a("strong"),ZOo=o("xlm-roberta"),eVo=o(" \u2014 "),EV=a("a"),oVo=o("XLMRobertaForTokenClassification"),rVo=o(" (XLM-RoBERTa model)"),tVo=l(),nv=a("li"),Ahe=a("strong"),aVo=o("xlm-roberta-xl"),nVo=o(" \u2014 "),CV=a("a"),sVo=o("XLMRobertaXLForTokenClassification"),lVo=o(" (XLM-RoBERTa-XL model)"),iVo=l(),sv=a("li"),yhe=a("strong"),dVo=o("xlnet"),cVo=o(" \u2014 "),wV=a("a"),fVo=o("XLNetForTokenClassification"),mVo=o(" (XLNet model)"),gVo=l(),lv=a("li"),Lhe=a("strong"),hVo=o("yoso"),pVo=o(" \u2014 "),AV=a("a"),uVo=o("YosoForTokenClassification"),_Vo=o(" (YOSO model)"),bVo=l(),iv=a("p"),vVo=o("The model is set in evaluation mode by default using "),xhe=a("code"),FVo=o("model.eval()"),TVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),MVo=o("model.train()"),EVo=l(),F(dv.$$.fragment),$Ne=l(),Zi=a("h2"),cv=a("a"),khe=a("span"),F(Xy.$$.fragment),CVo=l(),She=a("span"),wVo=o("AutoModelForQuestionAnswering"),kNe=l(),qo=a("div"),F(zy.$$.fragment),AVo=l(),ed=a("p"),yVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=a("a"),LVo=o("from_pretrained()"),xVo=o(" class method or the "),LV=a("a"),$Vo=o("from_config()"),kVo=o(` class
method.`),SVo=l(),Wy=a("p"),RVo=o("This class cannot be instantiated directly using "),Rhe=a("code"),PVo=o("__init__()"),BVo=o(" (throws an error)."),IVo=l(),mt=a("div"),F(Qy.$$.fragment),qVo=l(),Phe=a("p"),NVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jVo=l(),od=a("p"),DVo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),GVo=o("not"),OVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),VVo=o("from_pretrained()"),XVo=o(" to load the model weights."),zVo=l(),F(fv.$$.fragment),WVo=l(),no=a("div"),F(Hy.$$.fragment),QVo=l(),Ihe=a("p"),HVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UVo=l(),qa=a("p"),JVo=o("The model class to instantiate is selected based on the "),qhe=a("code"),YVo=o("model_type"),KVo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),ZVo=o("pretrained_model_name_or_path"),eXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),oXo=o("pretrained_model_name_or_path"),rXo=o(":"),tXo=l(),V=a("ul"),mv=a("li"),Dhe=a("strong"),aXo=o("albert"),nXo=o(" \u2014 "),$V=a("a"),sXo=o("AlbertForQuestionAnswering"),lXo=o(" (ALBERT model)"),iXo=l(),gv=a("li"),Ghe=a("strong"),dXo=o("bart"),cXo=o(" \u2014 "),kV=a("a"),fXo=o("BartForQuestionAnswering"),mXo=o(" (BART model)"),gXo=l(),hv=a("li"),Ohe=a("strong"),hXo=o("bert"),pXo=o(" \u2014 "),SV=a("a"),uXo=o("BertForQuestionAnswering"),_Xo=o(" (BERT model)"),bXo=l(),pv=a("li"),Vhe=a("strong"),vXo=o("big_bird"),FXo=o(" \u2014 "),RV=a("a"),TXo=o("BigBirdForQuestionAnswering"),MXo=o(" (BigBird model)"),EXo=l(),uv=a("li"),Xhe=a("strong"),CXo=o("bigbird_pegasus"),wXo=o(" \u2014 "),PV=a("a"),AXo=o("BigBirdPegasusForQuestionAnswering"),yXo=o(" (BigBirdPegasus model)"),LXo=l(),_v=a("li"),zhe=a("strong"),xXo=o("camembert"),$Xo=o(" \u2014 "),BV=a("a"),kXo=o("CamembertForQuestionAnswering"),SXo=o(" (CamemBERT model)"),RXo=l(),bv=a("li"),Whe=a("strong"),PXo=o("canine"),BXo=o(" \u2014 "),IV=a("a"),IXo=o("CanineForQuestionAnswering"),qXo=o(" (Canine model)"),NXo=l(),vv=a("li"),Qhe=a("strong"),jXo=o("convbert"),DXo=o(" \u2014 "),qV=a("a"),GXo=o("ConvBertForQuestionAnswering"),OXo=o(" (ConvBERT model)"),VXo=l(),Fv=a("li"),Hhe=a("strong"),XXo=o("data2vec-text"),zXo=o(" \u2014 "),NV=a("a"),WXo=o("Data2VecTextForQuestionAnswering"),QXo=o(" (Data2VecText model)"),HXo=l(),Tv=a("li"),Uhe=a("strong"),UXo=o("deberta"),JXo=o(" \u2014 "),jV=a("a"),YXo=o("DebertaForQuestionAnswering"),KXo=o(" (DeBERTa model)"),ZXo=l(),Mv=a("li"),Jhe=a("strong"),ezo=o("deberta-v2"),ozo=o(" \u2014 "),DV=a("a"),rzo=o("DebertaV2ForQuestionAnswering"),tzo=o(" (DeBERTa-v2 model)"),azo=l(),Ev=a("li"),Yhe=a("strong"),nzo=o("distilbert"),szo=o(" \u2014 "),GV=a("a"),lzo=o("DistilBertForQuestionAnswering"),izo=o(" (DistilBERT model)"),dzo=l(),Cv=a("li"),Khe=a("strong"),czo=o("electra"),fzo=o(" \u2014 "),OV=a("a"),mzo=o("ElectraForQuestionAnswering"),gzo=o(" (ELECTRA model)"),hzo=l(),wv=a("li"),Zhe=a("strong"),pzo=o("flaubert"),uzo=o(" \u2014 "),VV=a("a"),_zo=o("FlaubertForQuestionAnsweringSimple"),bzo=o(" (FlauBERT model)"),vzo=l(),Av=a("li"),epe=a("strong"),Fzo=o("fnet"),Tzo=o(" \u2014 "),XV=a("a"),Mzo=o("FNetForQuestionAnswering"),Ezo=o(" (FNet model)"),Czo=l(),yv=a("li"),ope=a("strong"),wzo=o("funnel"),Azo=o(" \u2014 "),zV=a("a"),yzo=o("FunnelForQuestionAnswering"),Lzo=o(" (Funnel Transformer model)"),xzo=l(),Lv=a("li"),rpe=a("strong"),$zo=o("gptj"),kzo=o(" \u2014 "),WV=a("a"),Szo=o("GPTJForQuestionAnswering"),Rzo=o(" (GPT-J model)"),Pzo=l(),xv=a("li"),tpe=a("strong"),Bzo=o("ibert"),Izo=o(" \u2014 "),QV=a("a"),qzo=o("IBertForQuestionAnswering"),Nzo=o(" (I-BERT model)"),jzo=l(),$v=a("li"),ape=a("strong"),Dzo=o("layoutlmv2"),Gzo=o(" \u2014 "),HV=a("a"),Ozo=o("LayoutLMv2ForQuestionAnswering"),Vzo=o(" (LayoutLMv2 model)"),Xzo=l(),kv=a("li"),npe=a("strong"),zzo=o("layoutlmv3"),Wzo=o(" \u2014 "),UV=a("a"),Qzo=o("LayoutLMv3ForQuestionAnswering"),Hzo=o(" (LayoutLMv3 model)"),Uzo=l(),Sv=a("li"),spe=a("strong"),Jzo=o("led"),Yzo=o(" \u2014 "),JV=a("a"),Kzo=o("LEDForQuestionAnswering"),Zzo=o(" (LED model)"),eWo=l(),Rv=a("li"),lpe=a("strong"),oWo=o("longformer"),rWo=o(" \u2014 "),YV=a("a"),tWo=o("LongformerForQuestionAnswering"),aWo=o(" (Longformer model)"),nWo=l(),Pv=a("li"),ipe=a("strong"),sWo=o("lxmert"),lWo=o(" \u2014 "),KV=a("a"),iWo=o("LxmertForQuestionAnswering"),dWo=o(" (LXMERT model)"),cWo=l(),Bv=a("li"),dpe=a("strong"),fWo=o("mbart"),mWo=o(" \u2014 "),ZV=a("a"),gWo=o("MBartForQuestionAnswering"),hWo=o(" (mBART model)"),pWo=l(),Iv=a("li"),cpe=a("strong"),uWo=o("megatron-bert"),_Wo=o(" \u2014 "),eX=a("a"),bWo=o("MegatronBertForQuestionAnswering"),vWo=o(" (MegatronBert model)"),FWo=l(),qv=a("li"),fpe=a("strong"),TWo=o("mobilebert"),MWo=o(" \u2014 "),oX=a("a"),EWo=o("MobileBertForQuestionAnswering"),CWo=o(" (MobileBERT model)"),wWo=l(),Nv=a("li"),mpe=a("strong"),AWo=o("mpnet"),yWo=o(" \u2014 "),rX=a("a"),LWo=o("MPNetForQuestionAnswering"),xWo=o(" (MPNet model)"),$Wo=l(),jv=a("li"),gpe=a("strong"),kWo=o("nystromformer"),SWo=o(" \u2014 "),tX=a("a"),RWo=o("NystromformerForQuestionAnswering"),PWo=o(" (Nystromformer model)"),BWo=l(),Dv=a("li"),hpe=a("strong"),IWo=o("qdqbert"),qWo=o(" \u2014 "),aX=a("a"),NWo=o("QDQBertForQuestionAnswering"),jWo=o(" (QDQBert model)"),DWo=l(),Gv=a("li"),ppe=a("strong"),GWo=o("reformer"),OWo=o(" \u2014 "),nX=a("a"),VWo=o("ReformerForQuestionAnswering"),XWo=o(" (Reformer model)"),zWo=l(),Ov=a("li"),upe=a("strong"),WWo=o("rembert"),QWo=o(" \u2014 "),sX=a("a"),HWo=o("RemBertForQuestionAnswering"),UWo=o(" (RemBERT model)"),JWo=l(),Vv=a("li"),_pe=a("strong"),YWo=o("roberta"),KWo=o(" \u2014 "),lX=a("a"),ZWo=o("RobertaForQuestionAnswering"),eQo=o(" (RoBERTa model)"),oQo=l(),Xv=a("li"),bpe=a("strong"),rQo=o("roformer"),tQo=o(" \u2014 "),iX=a("a"),aQo=o("RoFormerForQuestionAnswering"),nQo=o(" (RoFormer model)"),sQo=l(),zv=a("li"),vpe=a("strong"),lQo=o("splinter"),iQo=o(" \u2014 "),dX=a("a"),dQo=o("SplinterForQuestionAnswering"),cQo=o(" (Splinter model)"),fQo=l(),Wv=a("li"),Fpe=a("strong"),mQo=o("squeezebert"),gQo=o(" \u2014 "),cX=a("a"),hQo=o("SqueezeBertForQuestionAnswering"),pQo=o(" (SqueezeBERT model)"),uQo=l(),Qv=a("li"),Tpe=a("strong"),_Qo=o("xlm"),bQo=o(" \u2014 "),fX=a("a"),vQo=o("XLMForQuestionAnsweringSimple"),FQo=o(" (XLM model)"),TQo=l(),Hv=a("li"),Mpe=a("strong"),MQo=o("xlm-roberta"),EQo=o(" \u2014 "),mX=a("a"),CQo=o("XLMRobertaForQuestionAnswering"),wQo=o(" (XLM-RoBERTa model)"),AQo=l(),Uv=a("li"),Epe=a("strong"),yQo=o("xlm-roberta-xl"),LQo=o(" \u2014 "),gX=a("a"),xQo=o("XLMRobertaXLForQuestionAnswering"),$Qo=o(" (XLM-RoBERTa-XL model)"),kQo=l(),Jv=a("li"),Cpe=a("strong"),SQo=o("xlnet"),RQo=o(" \u2014 "),hX=a("a"),PQo=o("XLNetForQuestionAnsweringSimple"),BQo=o(" (XLNet model)"),IQo=l(),Yv=a("li"),wpe=a("strong"),qQo=o("yoso"),NQo=o(" \u2014 "),pX=a("a"),jQo=o("YosoForQuestionAnswering"),DQo=o(" (YOSO model)"),GQo=l(),Kv=a("p"),OQo=o("The model is set in evaluation mode by default using "),Ape=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),zQo=o("model.train()"),WQo=l(),F(Zv.$$.fragment),SNe=l(),rd=a("h2"),e5=a("a"),Lpe=a("span"),F(Uy.$$.fragment),QQo=l(),xpe=a("span"),HQo=o("AutoModelForTableQuestionAnswering"),RNe=l(),No=a("div"),F(Jy.$$.fragment),UQo=l(),td=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uX=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),_X=a("a"),ZQo=o("from_config()"),eHo=o(` class
method.`),oHo=l(),Yy=a("p"),rHo=o("This class cannot be instantiated directly using "),$pe=a("code"),tHo=o("__init__()"),aHo=o(" (throws an error)."),nHo=l(),gt=a("div"),F(Ky.$$.fragment),sHo=l(),kpe=a("p"),lHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iHo=l(),ad=a("p"),dHo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),cHo=o("not"),fHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),mHo=o("from_pretrained()"),gHo=o(" to load the model weights."),hHo=l(),F(o5.$$.fragment),pHo=l(),so=a("div"),F(Zy.$$.fragment),uHo=l(),Rpe=a("p"),_Ho=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bHo=l(),Na=a("p"),vHo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),FHo=o("model_type"),THo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),MHo=o("pretrained_model_name_or_path"),EHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(":"),AHo=l(),qpe=a("ul"),r5=a("li"),Npe=a("strong"),yHo=o("tapas"),LHo=o(" \u2014 "),vX=a("a"),xHo=o("TapasForQuestionAnswering"),$Ho=o(" (TAPAS model)"),kHo=l(),t5=a("p"),SHo=o("The model is set in evaluation mode by default using "),jpe=a("code"),RHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),BHo=o("model.train()"),IHo=l(),F(a5.$$.fragment),PNe=l(),nd=a("h2"),n5=a("a"),Gpe=a("span"),F(eL.$$.fragment),qHo=l(),Ope=a("span"),NHo=o("AutoModelForImageClassification"),BNe=l(),jo=a("div"),F(oL.$$.fragment),jHo=l(),sd=a("p"),DHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=a("a"),GHo=o("from_pretrained()"),OHo=o(" class method or the "),TX=a("a"),VHo=o("from_config()"),XHo=o(` class
method.`),zHo=l(),rL=a("p"),WHo=o("This class cannot be instantiated directly using "),Vpe=a("code"),QHo=o("__init__()"),HHo=o(" (throws an error)."),UHo=l(),ht=a("div"),F(tL.$$.fragment),JHo=l(),Xpe=a("p"),YHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KHo=l(),ld=a("p"),ZHo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),eUo=o("not"),oUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),rUo=o("from_pretrained()"),tUo=o(" to load the model weights."),aUo=l(),F(s5.$$.fragment),nUo=l(),lo=a("div"),F(aL.$$.fragment),sUo=l(),Wpe=a("p"),lUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iUo=l(),ja=a("p"),dUo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),cUo=o("model_type"),fUo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),hUo=o("pretrained_model_name_or_path"),pUo=o(":"),uUo=l(),Fe=a("ul"),l5=a("li"),Jpe=a("strong"),_Uo=o("beit"),bUo=o(" \u2014 "),EX=a("a"),vUo=o("BeitForImageClassification"),FUo=o(" (BEiT model)"),TUo=l(),i5=a("li"),Ype=a("strong"),MUo=o("convnext"),EUo=o(" \u2014 "),CX=a("a"),CUo=o("ConvNextForImageClassification"),wUo=o(" (ConvNext model)"),AUo=l(),d5=a("li"),Kpe=a("strong"),yUo=o("cvt"),LUo=o(" \u2014 "),wX=a("a"),xUo=o("CvtForImageClassification"),$Uo=o(" (CvT model)"),kUo=l(),c5=a("li"),Zpe=a("strong"),SUo=o("data2vec-vision"),RUo=o(" \u2014 "),AX=a("a"),PUo=o("Data2VecVisionForImageClassification"),BUo=o(" (Data2VecVision model)"),IUo=l(),Is=a("li"),eue=a("strong"),qUo=o("deit"),NUo=o(" \u2014 "),yX=a("a"),jUo=o("DeiTForImageClassification"),DUo=o(" or "),LX=a("a"),GUo=o("DeiTForImageClassificationWithTeacher"),OUo=o(" (DeiT model)"),VUo=l(),f5=a("li"),oue=a("strong"),XUo=o("imagegpt"),zUo=o(" \u2014 "),xX=a("a"),WUo=o("ImageGPTForImageClassification"),QUo=o(" (ImageGPT model)"),HUo=l(),pt=a("li"),rue=a("strong"),UUo=o("perceiver"),JUo=o(" \u2014 "),$X=a("a"),YUo=o("PerceiverForImageClassificationLearned"),KUo=o(" or "),kX=a("a"),ZUo=o("PerceiverForImageClassificationFourier"),eJo=o(" or "),SX=a("a"),oJo=o("PerceiverForImageClassificationConvProcessing"),rJo=o(" (Perceiver model)"),tJo=l(),m5=a("li"),tue=a("strong"),aJo=o("poolformer"),nJo=o(" \u2014 "),RX=a("a"),sJo=o("PoolFormerForImageClassification"),lJo=o(" (PoolFormer model)"),iJo=l(),g5=a("li"),aue=a("strong"),dJo=o("regnet"),cJo=o(" \u2014 "),PX=a("a"),fJo=o("RegNetForImageClassification"),mJo=o(" (RegNet model)"),gJo=l(),h5=a("li"),nue=a("strong"),hJo=o("resnet"),pJo=o(" \u2014 "),BX=a("a"),uJo=o("ResNetForImageClassification"),_Jo=o(" (ResNet model)"),bJo=l(),p5=a("li"),sue=a("strong"),vJo=o("segformer"),FJo=o(" \u2014 "),IX=a("a"),TJo=o("SegformerForImageClassification"),MJo=o(" (SegFormer model)"),EJo=l(),u5=a("li"),lue=a("strong"),CJo=o("swin"),wJo=o(" \u2014 "),qX=a("a"),AJo=o("SwinForImageClassification"),yJo=o(" (Swin model)"),LJo=l(),_5=a("li"),iue=a("strong"),xJo=o("van"),$Jo=o(" \u2014 "),NX=a("a"),kJo=o("VanForImageClassification"),SJo=o(" (VAN model)"),RJo=l(),b5=a("li"),due=a("strong"),PJo=o("vit"),BJo=o(" \u2014 "),jX=a("a"),IJo=o("ViTForImageClassification"),qJo=o(" (ViT model)"),NJo=l(),v5=a("p"),jJo=o("The model is set in evaluation mode by default using "),cue=a("code"),DJo=o("model.eval()"),GJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),OJo=o("model.train()"),VJo=l(),F(F5.$$.fragment),INe=l(),id=a("h2"),T5=a("a"),mue=a("span"),F(nL.$$.fragment),XJo=l(),gue=a("span"),zJo=o("AutoModelForVision2Seq"),qNe=l(),Do=a("div"),F(sL.$$.fragment),WJo=l(),dd=a("p"),QJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=a("a"),HJo=o("from_pretrained()"),UJo=o(" class method or the "),GX=a("a"),JJo=o("from_config()"),YJo=o(` class
method.`),KJo=l(),lL=a("p"),ZJo=o("This class cannot be instantiated directly using "),hue=a("code"),eYo=o("__init__()"),oYo=o(" (throws an error)."),rYo=l(),ut=a("div"),F(iL.$$.fragment),tYo=l(),pue=a("p"),aYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nYo=l(),cd=a("p"),sYo=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),lYo=o("not"),iYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),dYo=o("from_pretrained()"),cYo=o(" to load the model weights."),fYo=l(),F(M5.$$.fragment),mYo=l(),io=a("div"),F(dL.$$.fragment),gYo=l(),_ue=a("p"),hYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pYo=l(),Da=a("p"),uYo=o("The model class to instantiate is selected based on the "),bue=a("code"),_Yo=o("model_type"),bYo=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(":"),EYo=l(),Tue=a("ul"),E5=a("li"),Mue=a("strong"),CYo=o("vision-encoder-decoder"),wYo=o(" \u2014 "),VX=a("a"),AYo=o("VisionEncoderDecoderModel"),yYo=o(" (Vision Encoder decoder model)"),LYo=l(),C5=a("p"),xYo=o("The model is set in evaluation mode by default using "),Eue=a("code"),$Yo=o("model.eval()"),kYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),SYo=o("model.train()"),RYo=l(),F(w5.$$.fragment),NNe=l(),fd=a("h2"),A5=a("a"),wue=a("span"),F(cL.$$.fragment),PYo=l(),Aue=a("span"),BYo=o("AutoModelForAudioClassification"),jNe=l(),Go=a("div"),F(fL.$$.fragment),IYo=l(),md=a("p"),qYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=a("a"),NYo=o("from_pretrained()"),jYo=o(" class method or the "),zX=a("a"),DYo=o("from_config()"),GYo=o(` class
method.`),OYo=l(),mL=a("p"),VYo=o("This class cannot be instantiated directly using "),yue=a("code"),XYo=o("__init__()"),zYo=o(" (throws an error)."),WYo=l(),_t=a("div"),F(gL.$$.fragment),QYo=l(),Lue=a("p"),HYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),UYo=l(),gd=a("p"),JYo=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),YYo=o("not"),KYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),ZYo=o("from_pretrained()"),eKo=o(" to load the model weights."),oKo=l(),F(y5.$$.fragment),rKo=l(),co=a("div"),F(hL.$$.fragment),tKo=l(),$ue=a("p"),aKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nKo=l(),Ga=a("p"),sKo=o("The model class to instantiate is selected based on the "),kue=a("code"),lKo=o("model_type"),iKo=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(":"),gKo=l(),ke=a("ul"),L5=a("li"),Pue=a("strong"),hKo=o("data2vec-audio"),pKo=o(" \u2014 "),QX=a("a"),uKo=o("Data2VecAudioForSequenceClassification"),_Ko=o(" (Data2VecAudio model)"),bKo=l(),x5=a("li"),Bue=a("strong"),vKo=o("hubert"),FKo=o(" \u2014 "),HX=a("a"),TKo=o("HubertForSequenceClassification"),MKo=o(" (Hubert model)"),EKo=l(),$5=a("li"),Iue=a("strong"),CKo=o("sew"),wKo=o(" \u2014 "),UX=a("a"),AKo=o("SEWForSequenceClassification"),yKo=o(" (SEW model)"),LKo=l(),k5=a("li"),que=a("strong"),xKo=o("sew-d"),$Ko=o(" \u2014 "),JX=a("a"),kKo=o("SEWDForSequenceClassification"),SKo=o(" (SEW-D model)"),RKo=l(),S5=a("li"),Nue=a("strong"),PKo=o("unispeech"),BKo=o(" \u2014 "),YX=a("a"),IKo=o("UniSpeechForSequenceClassification"),qKo=o(" (UniSpeech model)"),NKo=l(),R5=a("li"),jue=a("strong"),jKo=o("unispeech-sat"),DKo=o(" \u2014 "),KX=a("a"),GKo=o("UniSpeechSatForSequenceClassification"),OKo=o(" (UniSpeechSat model)"),VKo=l(),P5=a("li"),Due=a("strong"),XKo=o("wav2vec2"),zKo=o(" \u2014 "),ZX=a("a"),WKo=o("Wav2Vec2ForSequenceClassification"),QKo=o(" (Wav2Vec2 model)"),HKo=l(),B5=a("li"),Gue=a("strong"),UKo=o("wav2vec2-conformer"),JKo=o(" \u2014 "),ez=a("a"),YKo=o("Wav2Vec2ConformerForSequenceClassification"),KKo=o(" (Wav2Vec2-Conformer model)"),ZKo=l(),I5=a("li"),Oue=a("strong"),eZo=o("wavlm"),oZo=o(" \u2014 "),oz=a("a"),rZo=o("WavLMForSequenceClassification"),tZo=o(" (WavLM model)"),aZo=l(),q5=a("p"),nZo=o("The model is set in evaluation mode by default using "),Vue=a("code"),sZo=o("model.eval()"),lZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),iZo=o("model.train()"),dZo=l(),F(N5.$$.fragment),DNe=l(),hd=a("h2"),j5=a("a"),zue=a("span"),F(pL.$$.fragment),cZo=l(),Wue=a("span"),fZo=o("AutoModelForAudioFrameClassification"),GNe=l(),Oo=a("div"),F(uL.$$.fragment),mZo=l(),pd=a("p"),gZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=a("a"),hZo=o("from_pretrained()"),pZo=o(" class method or the "),tz=a("a"),uZo=o("from_config()"),_Zo=o(` class
method.`),bZo=l(),_L=a("p"),vZo=o("This class cannot be instantiated directly using "),Que=a("code"),FZo=o("__init__()"),TZo=o(" (throws an error)."),MZo=l(),bt=a("div"),F(bL.$$.fragment),EZo=l(),Hue=a("p"),CZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wZo=l(),ud=a("p"),AZo=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),yZo=o("not"),LZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),xZo=o("from_pretrained()"),$Zo=o(" to load the model weights."),kZo=l(),F(D5.$$.fragment),SZo=l(),fo=a("div"),F(vL.$$.fragment),RZo=l(),Jue=a("p"),PZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),BZo=l(),Oa=a("p"),IZo=o("The model class to instantiate is selected based on the "),Yue=a("code"),qZo=o("model_type"),NZo=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),GZo=o("pretrained_model_name_or_path"),OZo=o(":"),VZo=l(),Kr=a("ul"),G5=a("li"),e_e=a("strong"),XZo=o("data2vec-audio"),zZo=o(" \u2014 "),nz=a("a"),WZo=o("Data2VecAudioForAudioFrameClassification"),QZo=o(" (Data2VecAudio model)"),HZo=l(),O5=a("li"),o_e=a("strong"),UZo=o("unispeech-sat"),JZo=o(" \u2014 "),sz=a("a"),YZo=o("UniSpeechSatForAudioFrameClassification"),KZo=o(" (UniSpeechSat model)"),ZZo=l(),V5=a("li"),r_e=a("strong"),eer=o("wav2vec2"),oer=o(" \u2014 "),lz=a("a"),rer=o("Wav2Vec2ForAudioFrameClassification"),ter=o(" (Wav2Vec2 model)"),aer=l(),X5=a("li"),t_e=a("strong"),ner=o("wav2vec2-conformer"),ser=o(" \u2014 "),iz=a("a"),ler=o("Wav2Vec2ConformerForAudioFrameClassification"),ier=o(" (Wav2Vec2-Conformer model)"),der=l(),z5=a("li"),a_e=a("strong"),cer=o("wavlm"),fer=o(" \u2014 "),dz=a("a"),mer=o("WavLMForAudioFrameClassification"),ger=o(" (WavLM model)"),her=l(),W5=a("p"),per=o("The model is set in evaluation mode by default using "),n_e=a("code"),uer=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),ber=o("model.train()"),ver=l(),F(Q5.$$.fragment),ONe=l(),_d=a("h2"),H5=a("a"),l_e=a("span"),F(FL.$$.fragment),Fer=l(),i_e=a("span"),Ter=o("AutoModelForCTC"),VNe=l(),Vo=a("div"),F(TL.$$.fragment),Mer=l(),bd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),fz=a("a"),Aer=o("from_config()"),yer=o(` class
method.`),Ler=l(),ML=a("p"),xer=o("This class cannot be instantiated directly using "),d_e=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),vt=a("div"),F(EL.$$.fragment),Rer=l(),c_e=a("p"),Per=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ber=l(),vd=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),qer=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(U5.$$.fragment),Oer=l(),mo=a("div"),F(CL.$$.fragment),Ver=l(),m_e=a("p"),Xer=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zer=l(),Va=a("p"),Wer=o("The model class to instantiate is selected based on the "),g_e=a("code"),Qer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),Se=a("ul"),J5=a("li"),u_e=a("strong"),eor=o("data2vec-audio"),oor=o(" \u2014 "),gz=a("a"),ror=o("Data2VecAudioForCTC"),tor=o(" (Data2VecAudio model)"),aor=l(),Y5=a("li"),__e=a("strong"),nor=o("hubert"),sor=o(" \u2014 "),hz=a("a"),lor=o("HubertForCTC"),ior=o(" (Hubert model)"),dor=l(),K5=a("li"),b_e=a("strong"),cor=o("sew"),mor=o(" \u2014 "),pz=a("a"),gor=o("SEWForCTC"),hor=o(" (SEW model)"),por=l(),Z5=a("li"),v_e=a("strong"),uor=o("sew-d"),_or=o(" \u2014 "),uz=a("a"),bor=o("SEWDForCTC"),vor=o(" (SEW-D model)"),For=l(),eF=a("li"),F_e=a("strong"),Tor=o("unispeech"),Mor=o(" \u2014 "),_z=a("a"),Eor=o("UniSpeechForCTC"),Cor=o(" (UniSpeech model)"),wor=l(),oF=a("li"),T_e=a("strong"),Aor=o("unispeech-sat"),yor=o(" \u2014 "),bz=a("a"),Lor=o("UniSpeechSatForCTC"),xor=o(" (UniSpeechSat model)"),$or=l(),rF=a("li"),M_e=a("strong"),kor=o("wav2vec2"),Sor=o(" \u2014 "),vz=a("a"),Ror=o("Wav2Vec2ForCTC"),Por=o(" (Wav2Vec2 model)"),Bor=l(),tF=a("li"),E_e=a("strong"),Ior=o("wav2vec2-conformer"),qor=o(" \u2014 "),Fz=a("a"),Nor=o("Wav2Vec2ConformerForCTC"),jor=o(" (Wav2Vec2-Conformer model)"),Dor=l(),aF=a("li"),C_e=a("strong"),Gor=o("wavlm"),Oor=o(" \u2014 "),Tz=a("a"),Vor=o("WavLMForCTC"),Xor=o(" (WavLM model)"),zor=l(),nF=a("p"),Wor=o("The model is set in evaluation mode by default using "),w_e=a("code"),Qor=o("model.eval()"),Hor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),Uor=o("model.train()"),Jor=l(),F(sF.$$.fragment),XNe=l(),Fd=a("h2"),lF=a("a"),y_e=a("span"),F(wL.$$.fragment),Yor=l(),L_e=a("span"),Kor=o("AutoModelForSpeechSeq2Seq"),zNe=l(),Xo=a("div"),F(AL.$$.fragment),Zor=l(),Td=a("p"),err=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=a("a"),orr=o("from_pretrained()"),rrr=o(" class method or the "),Ez=a("a"),trr=o("from_config()"),arr=o(` class
method.`),nrr=l(),yL=a("p"),srr=o("This class cannot be instantiated directly using "),x_e=a("code"),lrr=o("__init__()"),irr=o(" (throws an error)."),drr=l(),Ft=a("div"),F(LL.$$.fragment),crr=l(),$_e=a("p"),frr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mrr=l(),Md=a("p"),grr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),hrr=o("not"),prr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),urr=o("from_pretrained()"),_rr=o(" to load the model weights."),brr=l(),F(iF.$$.fragment),vrr=l(),go=a("div"),F(xL.$$.fragment),Frr=l(),S_e=a("p"),Trr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mrr=l(),Xa=a("p"),Err=o("The model class to instantiate is selected based on the "),R_e=a("code"),Crr=o("model_type"),wrr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),Arr=o("pretrained_model_name_or_path"),yrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),Lrr=o("pretrained_model_name_or_path"),xrr=o(":"),$rr=l(),$L=a("ul"),dF=a("li"),I_e=a("strong"),krr=o("speech-encoder-decoder"),Srr=o(" \u2014 "),wz=a("a"),Rrr=o("SpeechEncoderDecoderModel"),Prr=o(" (Speech Encoder decoder model)"),Brr=l(),cF=a("li"),q_e=a("strong"),Irr=o("speech_to_text"),qrr=o(" \u2014 "),Az=a("a"),Nrr=o("Speech2TextForConditionalGeneration"),jrr=o(" (Speech2Text model)"),Drr=l(),fF=a("p"),Grr=o("The model is set in evaluation mode by default using "),N_e=a("code"),Orr=o("model.eval()"),Vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),Xrr=o("model.train()"),zrr=l(),F(mF.$$.fragment),WNe=l(),Ed=a("h2"),gF=a("a"),D_e=a("span"),F(kL.$$.fragment),Wrr=l(),G_e=a("span"),Qrr=o("AutoModelForAudioXVector"),QNe=l(),zo=a("div"),F(SL.$$.fragment),Hrr=l(),Cd=a("p"),Urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=a("a"),Jrr=o("from_pretrained()"),Yrr=o(" class method or the "),Lz=a("a"),Krr=o("from_config()"),Zrr=o(` class
method.`),etr=l(),RL=a("p"),otr=o("This class cannot be instantiated directly using "),O_e=a("code"),rtr=o("__init__()"),ttr=o(" (throws an error)."),atr=l(),Tt=a("div"),F(PL.$$.fragment),ntr=l(),V_e=a("p"),str=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ltr=l(),wd=a("p"),itr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),dtr=o("not"),ctr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),ftr=o("from_pretrained()"),mtr=o(" to load the model weights."),gtr=l(),F(hF.$$.fragment),htr=l(),ho=a("div"),F(BL.$$.fragment),ptr=l(),z_e=a("p"),utr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_tr=l(),za=a("p"),btr=o("The model class to instantiate is selected based on the "),W_e=a("code"),vtr=o("model_type"),Ftr=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),Ttr=o("pretrained_model_name_or_path"),Mtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),Etr=o("pretrained_model_name_or_path"),Ctr=o(":"),wtr=l(),Zr=a("ul"),pF=a("li"),U_e=a("strong"),Atr=o("data2vec-audio"),ytr=o(" \u2014 "),$z=a("a"),Ltr=o("Data2VecAudioForXVector"),xtr=o(" (Data2VecAudio model)"),$tr=l(),uF=a("li"),J_e=a("strong"),ktr=o("unispeech-sat"),Str=o(" \u2014 "),kz=a("a"),Rtr=o("UniSpeechSatForXVector"),Ptr=o(" (UniSpeechSat model)"),Btr=l(),_F=a("li"),Y_e=a("strong"),Itr=o("wav2vec2"),qtr=o(" \u2014 "),Sz=a("a"),Ntr=o("Wav2Vec2ForXVector"),jtr=o(" (Wav2Vec2 model)"),Dtr=l(),bF=a("li"),K_e=a("strong"),Gtr=o("wav2vec2-conformer"),Otr=o(" \u2014 "),Rz=a("a"),Vtr=o("Wav2Vec2ConformerForXVector"),Xtr=o(" (Wav2Vec2-Conformer model)"),ztr=l(),vF=a("li"),Z_e=a("strong"),Wtr=o("wavlm"),Qtr=o(" \u2014 "),Pz=a("a"),Htr=o("WavLMForXVector"),Utr=o(" (WavLM model)"),Jtr=l(),FF=a("p"),Ytr=o("The model is set in evaluation mode by default using "),e2e=a("code"),Ktr=o("model.eval()"),Ztr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=a("code"),ear=o("model.train()"),oar=l(),F(TF.$$.fragment),HNe=l(),Ad=a("h2"),MF=a("a"),r2e=a("span"),F(IL.$$.fragment),rar=l(),t2e=a("span"),tar=o("AutoModelForMaskedImageModeling"),UNe=l(),Wo=a("div"),F(qL.$$.fragment),aar=l(),yd=a("p"),nar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=a("a"),sar=o("from_pretrained()"),lar=o(" class method or the "),Iz=a("a"),iar=o("from_config()"),dar=o(` class
method.`),car=l(),NL=a("p"),far=o("This class cannot be instantiated directly using "),a2e=a("code"),mar=o("__init__()"),gar=o(" (throws an error)."),har=l(),Mt=a("div"),F(jL.$$.fragment),par=l(),n2e=a("p"),uar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_ar=l(),Ld=a("p"),bar=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),Far=o("not"),Tar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),Mar=o("from_pretrained()"),Ear=o(" to load the model weights."),Car=l(),F(EF.$$.fragment),war=l(),po=a("div"),F(DL.$$.fragment),Aar=l(),l2e=a("p"),yar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lar=l(),Wa=a("p"),xar=o("The model class to instantiate is selected based on the "),i2e=a("code"),$ar=o("model_type"),kar=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),Sar=o("pretrained_model_name_or_path"),Rar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),Par=o("pretrained_model_name_or_path"),Bar=o(":"),Iar=l(),xd=a("ul"),CF=a("li"),f2e=a("strong"),qar=o("deit"),Nar=o(" \u2014 "),Nz=a("a"),jar=o("DeiTForMaskedImageModeling"),Dar=o(" (DeiT model)"),Gar=l(),wF=a("li"),m2e=a("strong"),Oar=o("swin"),Var=o(" \u2014 "),jz=a("a"),Xar=o("SwinForMaskedImageModeling"),zar=o(" (Swin model)"),War=l(),AF=a("li"),g2e=a("strong"),Qar=o("vit"),Har=o(" \u2014 "),Dz=a("a"),Uar=o("ViTForMaskedImageModeling"),Jar=o(" (ViT model)"),Yar=l(),yF=a("p"),Kar=o("The model is set in evaluation mode by default using "),h2e=a("code"),Zar=o("model.eval()"),enr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=a("code"),onr=o("model.train()"),rnr=l(),F(LF.$$.fragment),JNe=l(),$d=a("h2"),xF=a("a"),u2e=a("span"),F(GL.$$.fragment),tnr=l(),_2e=a("span"),anr=o("AutoModelForObjectDetection"),YNe=l(),Qo=a("div"),F(OL.$$.fragment),nnr=l(),kd=a("p"),snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=a("a"),lnr=o("from_pretrained()"),inr=o(" class method or the "),Oz=a("a"),dnr=o("from_config()"),cnr=o(` class
method.`),fnr=l(),VL=a("p"),mnr=o("This class cannot be instantiated directly using "),b2e=a("code"),gnr=o("__init__()"),hnr=o(" (throws an error)."),pnr=l(),Et=a("div"),F(XL.$$.fragment),unr=l(),v2e=a("p"),_nr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),bnr=l(),Sd=a("p"),vnr=o(`Note:
Loading a model from its configuration file does `),F2e=a("strong"),Fnr=o("not"),Tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Mnr=o("from_pretrained()"),Enr=o(" to load the model weights."),Cnr=l(),F($F.$$.fragment),wnr=l(),uo=a("div"),F(zL.$$.fragment),Anr=l(),T2e=a("p"),ynr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lnr=l(),Qa=a("p"),xnr=o("The model class to instantiate is selected based on the "),M2e=a("code"),$nr=o("model_type"),knr=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),Pnr=o("pretrained_model_name_or_path"),Bnr=o(":"),Inr=l(),WL=a("ul"),kF=a("li"),w2e=a("strong"),qnr=o("detr"),Nnr=o(" \u2014 "),Xz=a("a"),jnr=o("DetrForObjectDetection"),Dnr=o(" (DETR model)"),Gnr=l(),SF=a("li"),A2e=a("strong"),Onr=o("yolos"),Vnr=o(" \u2014 "),zz=a("a"),Xnr=o("YolosForObjectDetection"),znr=o(" (YOLOS model)"),Wnr=l(),RF=a("p"),Qnr=o("The model is set in evaluation mode by default using "),y2e=a("code"),Hnr=o("model.eval()"),Unr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),Jnr=o("model.train()"),Ynr=l(),F(PF.$$.fragment),KNe=l(),Rd=a("h2"),BF=a("a"),x2e=a("span"),F(QL.$$.fragment),Knr=l(),$2e=a("span"),Znr=o("AutoModelForImageSegmentation"),ZNe=l(),Ho=a("div"),F(HL.$$.fragment),esr=l(),Pd=a("p"),osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=a("a"),rsr=o("from_pretrained()"),tsr=o(" class method or the "),Qz=a("a"),asr=o("from_config()"),nsr=o(` class
method.`),ssr=l(),UL=a("p"),lsr=o("This class cannot be instantiated directly using "),k2e=a("code"),isr=o("__init__()"),dsr=o(" (throws an error)."),csr=l(),Ct=a("div"),F(JL.$$.fragment),fsr=l(),S2e=a("p"),msr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gsr=l(),Bd=a("p"),hsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),psr=o("not"),usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),_sr=o("from_pretrained()"),bsr=o(" to load the model weights."),vsr=l(),F(IF.$$.fragment),Fsr=l(),_o=a("div"),F(YL.$$.fragment),Tsr=l(),P2e=a("p"),Msr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Esr=l(),Ha=a("p"),Csr=o("The model class to instantiate is selected based on the "),B2e=a("code"),wsr=o("model_type"),Asr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),ysr=o("pretrained_model_name_or_path"),Lsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(":"),ksr=l(),N2e=a("ul"),qF=a("li"),j2e=a("strong"),Ssr=o("detr"),Rsr=o(" \u2014 "),Uz=a("a"),Psr=o("DetrForSegmentation"),Bsr=o(" (DETR model)"),Isr=l(),NF=a("p"),qsr=o("The model is set in evaluation mode by default using "),D2e=a("code"),Nsr=o("model.eval()"),jsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),Dsr=o("model.train()"),Gsr=l(),F(jF.$$.fragment),eje=l(),Id=a("h2"),DF=a("a"),O2e=a("span"),F(KL.$$.fragment),Osr=l(),V2e=a("span"),Vsr=o("AutoModelForSemanticSegmentation"),oje=l(),Uo=a("div"),F(ZL.$$.fragment),Xsr=l(),qd=a("p"),zsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=a("a"),Wsr=o("from_pretrained()"),Qsr=o(" class method or the "),Yz=a("a"),Hsr=o("from_config()"),Usr=o(` class
method.`),Jsr=l(),e8=a("p"),Ysr=o("This class cannot be instantiated directly using "),X2e=a("code"),Ksr=o("__init__()"),Zsr=o(" (throws an error)."),elr=l(),wt=a("div"),F(o8.$$.fragment),olr=l(),z2e=a("p"),rlr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tlr=l(),Nd=a("p"),alr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),nlr=o("not"),slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),llr=o("from_pretrained()"),ilr=o(" to load the model weights."),dlr=l(),F(GF.$$.fragment),clr=l(),bo=a("div"),F(r8.$$.fragment),flr=l(),Q2e=a("p"),mlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),glr=l(),Ua=a("p"),hlr=o("The model class to instantiate is selected based on the "),H2e=a("code"),plr=o("model_type"),ulr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),_lr=o("pretrained_model_name_or_path"),blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),vlr=o("pretrained_model_name_or_path"),Flr=o(":"),Tlr=l(),Ja=a("ul"),OF=a("li"),Y2e=a("strong"),Mlr=o("beit"),Elr=o(" \u2014 "),Zz=a("a"),Clr=o("BeitForSemanticSegmentation"),wlr=o(" (BEiT model)"),Alr=l(),VF=a("li"),K2e=a("strong"),ylr=o("data2vec-vision"),Llr=o(" \u2014 "),eW=a("a"),xlr=o("Data2VecVisionForSemanticSegmentation"),$lr=o(" (Data2VecVision model)"),klr=l(),XF=a("li"),Z2e=a("strong"),Slr=o("dpt"),Rlr=o(" \u2014 "),oW=a("a"),Plr=o("DPTForSemanticSegmentation"),Blr=o(" (DPT model)"),Ilr=l(),zF=a("li"),e1e=a("strong"),qlr=o("segformer"),Nlr=o(" \u2014 "),rW=a("a"),jlr=o("SegformerForSemanticSegmentation"),Dlr=o(" (SegFormer model)"),Glr=l(),WF=a("p"),Olr=o("The model is set in evaluation mode by default using "),o1e=a("code"),Vlr=o("model.eval()"),Xlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),zlr=o("model.train()"),Wlr=l(),F(QF.$$.fragment),rje=l(),jd=a("h2"),HF=a("a"),t1e=a("span"),F(t8.$$.fragment),Qlr=l(),a1e=a("span"),Hlr=o("AutoModelForInstanceSegmentation"),tje=l(),Jo=a("div"),F(a8.$$.fragment),Ulr=l(),Dd=a("p"),Jlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=a("a"),Ylr=o("from_pretrained()"),Klr=o(" class method or the "),aW=a("a"),Zlr=o("from_config()"),eir=o(` class
method.`),oir=l(),n8=a("p"),rir=o("This class cannot be instantiated directly using "),n1e=a("code"),tir=o("__init__()"),air=o(" (throws an error)."),nir=l(),At=a("div"),F(s8.$$.fragment),sir=l(),s1e=a("p"),lir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),iir=l(),Gd=a("p"),dir=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),cir=o("not"),fir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),mir=o("from_pretrained()"),gir=o(" to load the model weights."),hir=l(),F(UF.$$.fragment),pir=l(),vo=a("div"),F(l8.$$.fragment),uir=l(),i1e=a("p"),_ir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bir=l(),Ya=a("p"),vir=o("The model class to instantiate is selected based on the "),d1e=a("code"),Fir=o("model_type"),Tir=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),Mir=o("pretrained_model_name_or_path"),Eir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),Cir=o("pretrained_model_name_or_path"),wir=o(":"),Air=l(),m1e=a("ul"),JF=a("li"),g1e=a("strong"),yir=o("maskformer"),Lir=o(" \u2014 "),sW=a("a"),xir=o("MaskFormerForInstanceSegmentation"),$ir=o(" (MaskFormer model)"),kir=l(),YF=a("p"),Sir=o("The model is set in evaluation mode by default using "),h1e=a("code"),Rir=o("model.eval()"),Pir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),Bir=o("model.train()"),Iir=l(),F(KF.$$.fragment),aje=l(),Od=a("h2"),ZF=a("a"),u1e=a("span"),F(i8.$$.fragment),qir=l(),_1e=a("span"),Nir=o("TFAutoModel"),nje=l(),Yo=a("div"),F(d8.$$.fragment),jir=l(),Vd=a("p"),Dir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=a("a"),Gir=o("from_pretrained()"),Oir=o(" class method or the "),iW=a("a"),Vir=o("from_config()"),Xir=o(` class
method.`),zir=l(),c8=a("p"),Wir=o("This class cannot be instantiated directly using "),b1e=a("code"),Qir=o("__init__()"),Hir=o(" (throws an error)."),Uir=l(),yt=a("div"),F(f8.$$.fragment),Jir=l(),v1e=a("p"),Yir=o("Instantiates one of the base model classes of the library from a configuration."),Kir=l(),Xd=a("p"),Zir=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),edr=o("not"),odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),rdr=o("from_pretrained()"),tdr=o(" to load the model weights."),adr=l(),F(eT.$$.fragment),ndr=l(),wr=a("div"),F(m8.$$.fragment),sdr=l(),T1e=a("p"),ldr=o("Instantiate one of the base model classes of the library from a pretrained model."),idr=l(),Ka=a("p"),ddr=o("The model class to instantiate is selected based on the "),M1e=a("code"),cdr=o("model_type"),fdr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(":"),udr=l(),N=a("ul"),oT=a("li"),w1e=a("strong"),_dr=o("albert"),bdr=o(" \u2014 "),cW=a("a"),vdr=o("TFAlbertModel"),Fdr=o(" (ALBERT model)"),Tdr=l(),rT=a("li"),A1e=a("strong"),Mdr=o("bart"),Edr=o(" \u2014 "),fW=a("a"),Cdr=o("TFBartModel"),wdr=o(" (BART model)"),Adr=l(),tT=a("li"),y1e=a("strong"),ydr=o("bert"),Ldr=o(" \u2014 "),mW=a("a"),xdr=o("TFBertModel"),$dr=o(" (BERT model)"),kdr=l(),aT=a("li"),L1e=a("strong"),Sdr=o("blenderbot"),Rdr=o(" \u2014 "),gW=a("a"),Pdr=o("TFBlenderbotModel"),Bdr=o(" (Blenderbot model)"),Idr=l(),nT=a("li"),x1e=a("strong"),qdr=o("blenderbot-small"),Ndr=o(" \u2014 "),hW=a("a"),jdr=o("TFBlenderbotSmallModel"),Ddr=o(" (BlenderbotSmall model)"),Gdr=l(),sT=a("li"),$1e=a("strong"),Odr=o("camembert"),Vdr=o(" \u2014 "),pW=a("a"),Xdr=o("TFCamembertModel"),zdr=o(" (CamemBERT model)"),Wdr=l(),lT=a("li"),k1e=a("strong"),Qdr=o("clip"),Hdr=o(" \u2014 "),uW=a("a"),Udr=o("TFCLIPModel"),Jdr=o(" (CLIP model)"),Ydr=l(),iT=a("li"),S1e=a("strong"),Kdr=o("convbert"),Zdr=o(" \u2014 "),_W=a("a"),ecr=o("TFConvBertModel"),ocr=o(" (ConvBERT model)"),rcr=l(),dT=a("li"),R1e=a("strong"),tcr=o("convnext"),acr=o(" \u2014 "),bW=a("a"),ncr=o("TFConvNextModel"),scr=o(" (ConvNext model)"),lcr=l(),cT=a("li"),P1e=a("strong"),icr=o("ctrl"),dcr=o(" \u2014 "),vW=a("a"),ccr=o("TFCTRLModel"),fcr=o(" (CTRL model)"),mcr=l(),fT=a("li"),B1e=a("strong"),gcr=o("data2vec-vision"),hcr=o(" \u2014 "),FW=a("a"),pcr=o("TFData2VecVisionModel"),ucr=o(" (Data2VecVision model)"),_cr=l(),mT=a("li"),I1e=a("strong"),bcr=o("deberta"),vcr=o(" \u2014 "),TW=a("a"),Fcr=o("TFDebertaModel"),Tcr=o(" (DeBERTa model)"),Mcr=l(),gT=a("li"),q1e=a("strong"),Ecr=o("deberta-v2"),Ccr=o(" \u2014 "),MW=a("a"),wcr=o("TFDebertaV2Model"),Acr=o(" (DeBERTa-v2 model)"),ycr=l(),hT=a("li"),N1e=a("strong"),Lcr=o("distilbert"),xcr=o(" \u2014 "),EW=a("a"),$cr=o("TFDistilBertModel"),kcr=o(" (DistilBERT model)"),Scr=l(),pT=a("li"),j1e=a("strong"),Rcr=o("dpr"),Pcr=o(" \u2014 "),CW=a("a"),Bcr=o("TFDPRQuestionEncoder"),Icr=o(" (DPR model)"),qcr=l(),uT=a("li"),D1e=a("strong"),Ncr=o("electra"),jcr=o(" \u2014 "),wW=a("a"),Dcr=o("TFElectraModel"),Gcr=o(" (ELECTRA model)"),Ocr=l(),_T=a("li"),G1e=a("strong"),Vcr=o("flaubert"),Xcr=o(" \u2014 "),AW=a("a"),zcr=o("TFFlaubertModel"),Wcr=o(" (FlauBERT model)"),Qcr=l(),qs=a("li"),O1e=a("strong"),Hcr=o("funnel"),Ucr=o(" \u2014 "),yW=a("a"),Jcr=o("TFFunnelModel"),Ycr=o(" or "),LW=a("a"),Kcr=o("TFFunnelBaseModel"),Zcr=o(" (Funnel Transformer model)"),efr=l(),bT=a("li"),V1e=a("strong"),ofr=o("gpt2"),rfr=o(" \u2014 "),xW=a("a"),tfr=o("TFGPT2Model"),afr=o(" (OpenAI GPT-2 model)"),nfr=l(),vT=a("li"),X1e=a("strong"),sfr=o("gptj"),lfr=o(" \u2014 "),$W=a("a"),ifr=o("TFGPTJModel"),dfr=o(" (GPT-J model)"),cfr=l(),FT=a("li"),z1e=a("strong"),ffr=o("hubert"),mfr=o(" \u2014 "),kW=a("a"),gfr=o("TFHubertModel"),hfr=o(" (Hubert model)"),pfr=l(),TT=a("li"),W1e=a("strong"),ufr=o("layoutlm"),_fr=o(" \u2014 "),SW=a("a"),bfr=o("TFLayoutLMModel"),vfr=o(" (LayoutLM model)"),Ffr=l(),MT=a("li"),Q1e=a("strong"),Tfr=o("led"),Mfr=o(" \u2014 "),RW=a("a"),Efr=o("TFLEDModel"),Cfr=o(" (LED model)"),wfr=l(),ET=a("li"),H1e=a("strong"),Afr=o("longformer"),yfr=o(" \u2014 "),PW=a("a"),Lfr=o("TFLongformerModel"),xfr=o(" (Longformer model)"),$fr=l(),CT=a("li"),U1e=a("strong"),kfr=o("lxmert"),Sfr=o(" \u2014 "),BW=a("a"),Rfr=o("TFLxmertModel"),Pfr=o(" (LXMERT model)"),Bfr=l(),wT=a("li"),J1e=a("strong"),Ifr=o("marian"),qfr=o(" \u2014 "),IW=a("a"),Nfr=o("TFMarianModel"),jfr=o(" (Marian model)"),Dfr=l(),AT=a("li"),Y1e=a("strong"),Gfr=o("mbart"),Ofr=o(" \u2014 "),qW=a("a"),Vfr=o("TFMBartModel"),Xfr=o(" (mBART model)"),zfr=l(),yT=a("li"),K1e=a("strong"),Wfr=o("mobilebert"),Qfr=o(" \u2014 "),NW=a("a"),Hfr=o("TFMobileBertModel"),Ufr=o(" (MobileBERT model)"),Jfr=l(),LT=a("li"),Z1e=a("strong"),Yfr=o("mpnet"),Kfr=o(" \u2014 "),jW=a("a"),Zfr=o("TFMPNetModel"),emr=o(" (MPNet model)"),omr=l(),xT=a("li"),ebe=a("strong"),rmr=o("mt5"),tmr=o(" \u2014 "),DW=a("a"),amr=o("TFMT5Model"),nmr=o(" (mT5 model)"),smr=l(),$T=a("li"),obe=a("strong"),lmr=o("openai-gpt"),imr=o(" \u2014 "),GW=a("a"),dmr=o("TFOpenAIGPTModel"),cmr=o(" (OpenAI GPT model)"),fmr=l(),kT=a("li"),rbe=a("strong"),mmr=o("pegasus"),gmr=o(" \u2014 "),OW=a("a"),hmr=o("TFPegasusModel"),pmr=o(" (Pegasus model)"),umr=l(),ST=a("li"),tbe=a("strong"),_mr=o("rembert"),bmr=o(" \u2014 "),VW=a("a"),vmr=o("TFRemBertModel"),Fmr=o(" (RemBERT model)"),Tmr=l(),RT=a("li"),abe=a("strong"),Mmr=o("roberta"),Emr=o(" \u2014 "),XW=a("a"),Cmr=o("TFRobertaModel"),wmr=o(" (RoBERTa model)"),Amr=l(),PT=a("li"),nbe=a("strong"),ymr=o("roformer"),Lmr=o(" \u2014 "),zW=a("a"),xmr=o("TFRoFormerModel"),$mr=o(" (RoFormer model)"),kmr=l(),BT=a("li"),sbe=a("strong"),Smr=o("speech_to_text"),Rmr=o(" \u2014 "),WW=a("a"),Pmr=o("TFSpeech2TextModel"),Bmr=o(" (Speech2Text model)"),Imr=l(),IT=a("li"),lbe=a("strong"),qmr=o("swin"),Nmr=o(" \u2014 "),QW=a("a"),jmr=o("TFSwinModel"),Dmr=o(" (Swin model)"),Gmr=l(),qT=a("li"),ibe=a("strong"),Omr=o("t5"),Vmr=o(" \u2014 "),HW=a("a"),Xmr=o("TFT5Model"),zmr=o(" (T5 model)"),Wmr=l(),NT=a("li"),dbe=a("strong"),Qmr=o("tapas"),Hmr=o(" \u2014 "),UW=a("a"),Umr=o("TFTapasModel"),Jmr=o(" (TAPAS model)"),Ymr=l(),jT=a("li"),cbe=a("strong"),Kmr=o("transfo-xl"),Zmr=o(" \u2014 "),JW=a("a"),egr=o("TFTransfoXLModel"),ogr=o(" (Transformer-XL model)"),rgr=l(),DT=a("li"),fbe=a("strong"),tgr=o("vit"),agr=o(" \u2014 "),YW=a("a"),ngr=o("TFViTModel"),sgr=o(" (ViT model)"),lgr=l(),GT=a("li"),mbe=a("strong"),igr=o("vit_mae"),dgr=o(" \u2014 "),KW=a("a"),cgr=o("TFViTMAEModel"),fgr=o(" (ViTMAE model)"),mgr=l(),OT=a("li"),gbe=a("strong"),ggr=o("wav2vec2"),hgr=o(" \u2014 "),ZW=a("a"),pgr=o("TFWav2Vec2Model"),ugr=o(" (Wav2Vec2 model)"),_gr=l(),VT=a("li"),hbe=a("strong"),bgr=o("xlm"),vgr=o(" \u2014 "),eQ=a("a"),Fgr=o("TFXLMModel"),Tgr=o(" (XLM model)"),Mgr=l(),XT=a("li"),pbe=a("strong"),Egr=o("xlm-roberta"),Cgr=o(" \u2014 "),oQ=a("a"),wgr=o("TFXLMRobertaModel"),Agr=o(" (XLM-RoBERTa model)"),ygr=l(),zT=a("li"),ube=a("strong"),Lgr=o("xlnet"),xgr=o(" \u2014 "),rQ=a("a"),$gr=o("TFXLNetModel"),kgr=o(" (XLNet model)"),Sgr=l(),F(WT.$$.fragment),sje=l(),zd=a("h2"),QT=a("a"),_be=a("span"),F(g8.$$.fragment),Rgr=l(),bbe=a("span"),Pgr=o("TFAutoModelForPreTraining"),lje=l(),Ko=a("div"),F(h8.$$.fragment),Bgr=l(),Wd=a("p"),Igr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tQ=a("a"),qgr=o("from_pretrained()"),Ngr=o(" class method or the "),aQ=a("a"),jgr=o("from_config()"),Dgr=o(` class
method.`),Ggr=l(),p8=a("p"),Ogr=o("This class cannot be instantiated directly using "),vbe=a("code"),Vgr=o("__init__()"),Xgr=o(" (throws an error)."),zgr=l(),Lt=a("div"),F(u8.$$.fragment),Wgr=l(),Fbe=a("p"),Qgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hgr=l(),Qd=a("p"),Ugr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Jgr=o("not"),Ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" to load the model weights."),ehr=l(),F(HT.$$.fragment),ohr=l(),Ar=a("div"),F(_8.$$.fragment),rhr=l(),Mbe=a("p"),thr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ahr=l(),Za=a("p"),nhr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),shr=o("model_type"),lhr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),ihr=o("pretrained_model_name_or_path"),dhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),chr=o("pretrained_model_name_or_path"),fhr=o(":"),mhr=l(),se=a("ul"),UT=a("li"),Abe=a("strong"),ghr=o("albert"),hhr=o(" \u2014 "),sQ=a("a"),phr=o("TFAlbertForPreTraining"),uhr=o(" (ALBERT model)"),_hr=l(),JT=a("li"),ybe=a("strong"),bhr=o("bart"),vhr=o(" \u2014 "),lQ=a("a"),Fhr=o("TFBartForConditionalGeneration"),Thr=o(" (BART model)"),Mhr=l(),YT=a("li"),Lbe=a("strong"),Ehr=o("bert"),Chr=o(" \u2014 "),iQ=a("a"),whr=o("TFBertForPreTraining"),Ahr=o(" (BERT model)"),yhr=l(),KT=a("li"),xbe=a("strong"),Lhr=o("camembert"),xhr=o(" \u2014 "),dQ=a("a"),$hr=o("TFCamembertForMaskedLM"),khr=o(" (CamemBERT model)"),Shr=l(),ZT=a("li"),$be=a("strong"),Rhr=o("ctrl"),Phr=o(" \u2014 "),cQ=a("a"),Bhr=o("TFCTRLLMHeadModel"),Ihr=o(" (CTRL model)"),qhr=l(),e7=a("li"),kbe=a("strong"),Nhr=o("distilbert"),jhr=o(" \u2014 "),fQ=a("a"),Dhr=o("TFDistilBertForMaskedLM"),Ghr=o(" (DistilBERT model)"),Ohr=l(),o7=a("li"),Sbe=a("strong"),Vhr=o("electra"),Xhr=o(" \u2014 "),mQ=a("a"),zhr=o("TFElectraForPreTraining"),Whr=o(" (ELECTRA model)"),Qhr=l(),r7=a("li"),Rbe=a("strong"),Hhr=o("flaubert"),Uhr=o(" \u2014 "),gQ=a("a"),Jhr=o("TFFlaubertWithLMHeadModel"),Yhr=o(" (FlauBERT model)"),Khr=l(),t7=a("li"),Pbe=a("strong"),Zhr=o("funnel"),epr=o(" \u2014 "),hQ=a("a"),opr=o("TFFunnelForPreTraining"),rpr=o(" (Funnel Transformer model)"),tpr=l(),a7=a("li"),Bbe=a("strong"),apr=o("gpt2"),npr=o(" \u2014 "),pQ=a("a"),spr=o("TFGPT2LMHeadModel"),lpr=o(" (OpenAI GPT-2 model)"),ipr=l(),n7=a("li"),Ibe=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),uQ=a("a"),fpr=o("TFLayoutLMForMaskedLM"),mpr=o(" (LayoutLM model)"),gpr=l(),s7=a("li"),qbe=a("strong"),hpr=o("lxmert"),ppr=o(" \u2014 "),_Q=a("a"),upr=o("TFLxmertForPreTraining"),_pr=o(" (LXMERT model)"),bpr=l(),l7=a("li"),Nbe=a("strong"),vpr=o("mobilebert"),Fpr=o(" \u2014 "),bQ=a("a"),Tpr=o("TFMobileBertForPreTraining"),Mpr=o(" (MobileBERT model)"),Epr=l(),i7=a("li"),jbe=a("strong"),Cpr=o("mpnet"),wpr=o(" \u2014 "),vQ=a("a"),Apr=o("TFMPNetForMaskedLM"),ypr=o(" (MPNet model)"),Lpr=l(),d7=a("li"),Dbe=a("strong"),xpr=o("openai-gpt"),$pr=o(" \u2014 "),FQ=a("a"),kpr=o("TFOpenAIGPTLMHeadModel"),Spr=o(" (OpenAI GPT model)"),Rpr=l(),c7=a("li"),Gbe=a("strong"),Ppr=o("roberta"),Bpr=o(" \u2014 "),TQ=a("a"),Ipr=o("TFRobertaForMaskedLM"),qpr=o(" (RoBERTa model)"),Npr=l(),f7=a("li"),Obe=a("strong"),jpr=o("t5"),Dpr=o(" \u2014 "),MQ=a("a"),Gpr=o("TFT5ForConditionalGeneration"),Opr=o(" (T5 model)"),Vpr=l(),m7=a("li"),Vbe=a("strong"),Xpr=o("tapas"),zpr=o(" \u2014 "),EQ=a("a"),Wpr=o("TFTapasForMaskedLM"),Qpr=o(" (TAPAS model)"),Hpr=l(),g7=a("li"),Xbe=a("strong"),Upr=o("transfo-xl"),Jpr=o(" \u2014 "),CQ=a("a"),Ypr=o("TFTransfoXLLMHeadModel"),Kpr=o(" (Transformer-XL model)"),Zpr=l(),h7=a("li"),zbe=a("strong"),eur=o("vit_mae"),our=o(" \u2014 "),wQ=a("a"),rur=o("TFViTMAEForPreTraining"),tur=o(" (ViTMAE model)"),aur=l(),p7=a("li"),Wbe=a("strong"),nur=o("xlm"),sur=o(" \u2014 "),AQ=a("a"),lur=o("TFXLMWithLMHeadModel"),iur=o(" (XLM model)"),dur=l(),u7=a("li"),Qbe=a("strong"),cur=o("xlm-roberta"),fur=o(" \u2014 "),yQ=a("a"),mur=o("TFXLMRobertaForMaskedLM"),gur=o(" (XLM-RoBERTa model)"),hur=l(),_7=a("li"),Hbe=a("strong"),pur=o("xlnet"),uur=o(" \u2014 "),LQ=a("a"),_ur=o("TFXLNetLMHeadModel"),bur=o(" (XLNet model)"),vur=l(),F(b7.$$.fragment),ije=l(),Hd=a("h2"),v7=a("a"),Ube=a("span"),F(b8.$$.fragment),Fur=l(),Jbe=a("span"),Tur=o("TFAutoModelForCausalLM"),dje=l(),Zo=a("div"),F(v8.$$.fragment),Mur=l(),Ud=a("p"),Eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xQ=a("a"),Cur=o("from_pretrained()"),wur=o(" class method or the "),$Q=a("a"),Aur=o("from_config()"),yur=o(` class
method.`),Lur=l(),F8=a("p"),xur=o("This class cannot be instantiated directly using "),Ybe=a("code"),$ur=o("__init__()"),kur=o(" (throws an error)."),Sur=l(),xt=a("div"),F(T8.$$.fragment),Rur=l(),Kbe=a("p"),Pur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bur=l(),Jd=a("p"),Iur=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),qur=o("not"),Nur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),jur=o("from_pretrained()"),Dur=o(" to load the model weights."),Gur=l(),F(F7.$$.fragment),Our=l(),yr=a("div"),F(M8.$$.fragment),Vur=l(),e4e=a("p"),Xur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zur=l(),en=a("p"),Wur=o("The model class to instantiate is selected based on the "),o4e=a("code"),Qur=o("model_type"),Hur=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),Yur=o("pretrained_model_name_or_path"),Kur=o(":"),Zur=l(),Me=a("ul"),T7=a("li"),a4e=a("strong"),e_r=o("bert"),o_r=o(" \u2014 "),SQ=a("a"),r_r=o("TFBertLMHeadModel"),t_r=o(" (BERT model)"),a_r=l(),M7=a("li"),n4e=a("strong"),n_r=o("camembert"),s_r=o(" \u2014 "),RQ=a("a"),l_r=o("TFCamembertForCausalLM"),i_r=o(" (CamemBERT model)"),d_r=l(),E7=a("li"),s4e=a("strong"),c_r=o("ctrl"),f_r=o(" \u2014 "),PQ=a("a"),m_r=o("TFCTRLLMHeadModel"),g_r=o(" (CTRL model)"),h_r=l(),C7=a("li"),l4e=a("strong"),p_r=o("gpt2"),u_r=o(" \u2014 "),BQ=a("a"),__r=o("TFGPT2LMHeadModel"),b_r=o(" (OpenAI GPT-2 model)"),v_r=l(),w7=a("li"),i4e=a("strong"),F_r=o("gptj"),T_r=o(" \u2014 "),IQ=a("a"),M_r=o("TFGPTJForCausalLM"),E_r=o(" (GPT-J model)"),C_r=l(),A7=a("li"),d4e=a("strong"),w_r=o("openai-gpt"),A_r=o(" \u2014 "),qQ=a("a"),y_r=o("TFOpenAIGPTLMHeadModel"),L_r=o(" (OpenAI GPT model)"),x_r=l(),y7=a("li"),c4e=a("strong"),$_r=o("rembert"),k_r=o(" \u2014 "),NQ=a("a"),S_r=o("TFRemBertForCausalLM"),R_r=o(" (RemBERT model)"),P_r=l(),L7=a("li"),f4e=a("strong"),B_r=o("roberta"),I_r=o(" \u2014 "),jQ=a("a"),q_r=o("TFRobertaForCausalLM"),N_r=o(" (RoBERTa model)"),j_r=l(),x7=a("li"),m4e=a("strong"),D_r=o("roformer"),G_r=o(" \u2014 "),DQ=a("a"),O_r=o("TFRoFormerForCausalLM"),V_r=o(" (RoFormer model)"),X_r=l(),$7=a("li"),g4e=a("strong"),z_r=o("transfo-xl"),W_r=o(" \u2014 "),GQ=a("a"),Q_r=o("TFTransfoXLLMHeadModel"),H_r=o(" (Transformer-XL model)"),U_r=l(),k7=a("li"),h4e=a("strong"),J_r=o("xlm"),Y_r=o(" \u2014 "),OQ=a("a"),K_r=o("TFXLMWithLMHeadModel"),Z_r=o(" (XLM model)"),e2r=l(),S7=a("li"),p4e=a("strong"),o2r=o("xlnet"),r2r=o(" \u2014 "),VQ=a("a"),t2r=o("TFXLNetLMHeadModel"),a2r=o(" (XLNet model)"),n2r=l(),F(R7.$$.fragment),cje=l(),Yd=a("h2"),P7=a("a"),u4e=a("span"),F(E8.$$.fragment),s2r=l(),_4e=a("span"),l2r=o("TFAutoModelForImageClassification"),fje=l(),er=a("div"),F(C8.$$.fragment),i2r=l(),Kd=a("p"),d2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XQ=a("a"),c2r=o("from_pretrained()"),f2r=o(" class method or the "),zQ=a("a"),m2r=o("from_config()"),g2r=o(` class
method.`),h2r=l(),w8=a("p"),p2r=o("This class cannot be instantiated directly using "),b4e=a("code"),u2r=o("__init__()"),_2r=o(" (throws an error)."),b2r=l(),$t=a("div"),F(A8.$$.fragment),v2r=l(),v4e=a("p"),F2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),T2r=l(),Zd=a("p"),M2r=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),E2r=o("not"),C2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),w2r=o("from_pretrained()"),A2r=o(" to load the model weights."),y2r=l(),F(B7.$$.fragment),L2r=l(),Lr=a("div"),F(y8.$$.fragment),x2r=l(),T4e=a("p"),$2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),k2r=l(),on=a("p"),S2r=o("The model class to instantiate is selected based on the "),M4e=a("code"),R2r=o("model_type"),P2r=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),B2r=o("pretrained_model_name_or_path"),I2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),q2r=o("pretrained_model_name_or_path"),N2r=o(":"),j2r=l(),rn=a("ul"),I7=a("li"),w4e=a("strong"),D2r=o("convnext"),G2r=o(" \u2014 "),QQ=a("a"),O2r=o("TFConvNextForImageClassification"),V2r=o(" (ConvNext model)"),X2r=l(),q7=a("li"),A4e=a("strong"),z2r=o("data2vec-vision"),W2r=o(" \u2014 "),HQ=a("a"),Q2r=o("TFData2VecVisionForImageClassification"),H2r=o(" (Data2VecVision model)"),U2r=l(),N7=a("li"),y4e=a("strong"),J2r=o("swin"),Y2r=o(" \u2014 "),UQ=a("a"),K2r=o("TFSwinForImageClassification"),Z2r=o(" (Swin model)"),e1r=l(),j7=a("li"),L4e=a("strong"),o1r=o("vit"),r1r=o(" \u2014 "),JQ=a("a"),t1r=o("TFViTForImageClassification"),a1r=o(" (ViT model)"),n1r=l(),F(D7.$$.fragment),mje=l(),ec=a("h2"),G7=a("a"),x4e=a("span"),F(L8.$$.fragment),s1r=l(),$4e=a("span"),l1r=o("TFAutoModelForMaskedLM"),gje=l(),or=a("div"),F(x8.$$.fragment),i1r=l(),oc=a("p"),d1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YQ=a("a"),c1r=o("from_pretrained()"),f1r=o(" class method or the "),KQ=a("a"),m1r=o("from_config()"),g1r=o(` class
method.`),h1r=l(),$8=a("p"),p1r=o("This class cannot be instantiated directly using "),k4e=a("code"),u1r=o("__init__()"),_1r=o(" (throws an error)."),b1r=l(),kt=a("div"),F(k8.$$.fragment),v1r=l(),S4e=a("p"),F1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T1r=l(),rc=a("p"),M1r=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),E1r=o("not"),C1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),w1r=o("from_pretrained()"),A1r=o(" to load the model weights."),y1r=l(),F(O7.$$.fragment),L1r=l(),xr=a("div"),F(S8.$$.fragment),x1r=l(),P4e=a("p"),$1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k1r=l(),tn=a("p"),S1r=o("The model class to instantiate is selected based on the "),B4e=a("code"),R1r=o("model_type"),P1r=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),B1r=o("pretrained_model_name_or_path"),I1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),q1r=o("pretrained_model_name_or_path"),N1r=o(":"),j1r=l(),ie=a("ul"),V7=a("li"),N4e=a("strong"),D1r=o("albert"),G1r=o(" \u2014 "),eH=a("a"),O1r=o("TFAlbertForMaskedLM"),V1r=o(" (ALBERT model)"),X1r=l(),X7=a("li"),j4e=a("strong"),z1r=o("bert"),W1r=o(" \u2014 "),oH=a("a"),Q1r=o("TFBertForMaskedLM"),H1r=o(" (BERT model)"),U1r=l(),z7=a("li"),D4e=a("strong"),J1r=o("camembert"),Y1r=o(" \u2014 "),rH=a("a"),K1r=o("TFCamembertForMaskedLM"),Z1r=o(" (CamemBERT model)"),ebr=l(),W7=a("li"),G4e=a("strong"),obr=o("convbert"),rbr=o(" \u2014 "),tH=a("a"),tbr=o("TFConvBertForMaskedLM"),abr=o(" (ConvBERT model)"),nbr=l(),Q7=a("li"),O4e=a("strong"),sbr=o("deberta"),lbr=o(" \u2014 "),aH=a("a"),ibr=o("TFDebertaForMaskedLM"),dbr=o(" (DeBERTa model)"),cbr=l(),H7=a("li"),V4e=a("strong"),fbr=o("deberta-v2"),mbr=o(" \u2014 "),nH=a("a"),gbr=o("TFDebertaV2ForMaskedLM"),hbr=o(" (DeBERTa-v2 model)"),pbr=l(),U7=a("li"),X4e=a("strong"),ubr=o("distilbert"),_br=o(" \u2014 "),sH=a("a"),bbr=o("TFDistilBertForMaskedLM"),vbr=o(" (DistilBERT model)"),Fbr=l(),J7=a("li"),z4e=a("strong"),Tbr=o("electra"),Mbr=o(" \u2014 "),lH=a("a"),Ebr=o("TFElectraForMaskedLM"),Cbr=o(" (ELECTRA model)"),wbr=l(),Y7=a("li"),W4e=a("strong"),Abr=o("flaubert"),ybr=o(" \u2014 "),iH=a("a"),Lbr=o("TFFlaubertWithLMHeadModel"),xbr=o(" (FlauBERT model)"),$br=l(),K7=a("li"),Q4e=a("strong"),kbr=o("funnel"),Sbr=o(" \u2014 "),dH=a("a"),Rbr=o("TFFunnelForMaskedLM"),Pbr=o(" (Funnel Transformer model)"),Bbr=l(),Z7=a("li"),H4e=a("strong"),Ibr=o("layoutlm"),qbr=o(" \u2014 "),cH=a("a"),Nbr=o("TFLayoutLMForMaskedLM"),jbr=o(" (LayoutLM model)"),Dbr=l(),eM=a("li"),U4e=a("strong"),Gbr=o("longformer"),Obr=o(" \u2014 "),fH=a("a"),Vbr=o("TFLongformerForMaskedLM"),Xbr=o(" (Longformer model)"),zbr=l(),oM=a("li"),J4e=a("strong"),Wbr=o("mobilebert"),Qbr=o(" \u2014 "),mH=a("a"),Hbr=o("TFMobileBertForMaskedLM"),Ubr=o(" (MobileBERT model)"),Jbr=l(),rM=a("li"),Y4e=a("strong"),Ybr=o("mpnet"),Kbr=o(" \u2014 "),gH=a("a"),Zbr=o("TFMPNetForMaskedLM"),e4r=o(" (MPNet model)"),o4r=l(),tM=a("li"),K4e=a("strong"),r4r=o("rembert"),t4r=o(" \u2014 "),hH=a("a"),a4r=o("TFRemBertForMaskedLM"),n4r=o(" (RemBERT model)"),s4r=l(),aM=a("li"),Z4e=a("strong"),l4r=o("roberta"),i4r=o(" \u2014 "),pH=a("a"),d4r=o("TFRobertaForMaskedLM"),c4r=o(" (RoBERTa model)"),f4r=l(),nM=a("li"),eve=a("strong"),m4r=o("roformer"),g4r=o(" \u2014 "),uH=a("a"),h4r=o("TFRoFormerForMaskedLM"),p4r=o(" (RoFormer model)"),u4r=l(),sM=a("li"),ove=a("strong"),_4r=o("tapas"),b4r=o(" \u2014 "),_H=a("a"),v4r=o("TFTapasForMaskedLM"),F4r=o(" (TAPAS model)"),T4r=l(),lM=a("li"),rve=a("strong"),M4r=o("xlm"),E4r=o(" \u2014 "),bH=a("a"),C4r=o("TFXLMWithLMHeadModel"),w4r=o(" (XLM model)"),A4r=l(),iM=a("li"),tve=a("strong"),y4r=o("xlm-roberta"),L4r=o(" \u2014 "),vH=a("a"),x4r=o("TFXLMRobertaForMaskedLM"),$4r=o(" (XLM-RoBERTa model)"),k4r=l(),F(dM.$$.fragment),hje=l(),tc=a("h2"),cM=a("a"),ave=a("span"),F(R8.$$.fragment),S4r=l(),nve=a("span"),R4r=o("TFAutoModelForSeq2SeqLM"),pje=l(),rr=a("div"),F(P8.$$.fragment),P4r=l(),ac=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FH=a("a"),I4r=o("from_pretrained()"),q4r=o(" class method or the "),TH=a("a"),N4r=o("from_config()"),j4r=o(` class
method.`),D4r=l(),B8=a("p"),G4r=o("This class cannot be instantiated directly using "),sve=a("code"),O4r=o("__init__()"),V4r=o(" (throws an error)."),X4r=l(),St=a("div"),F(I8.$$.fragment),z4r=l(),lve=a("p"),W4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q4r=l(),nc=a("p"),H4r=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),U4r=o("not"),J4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Y4r=o("from_pretrained()"),K4r=o(" to load the model weights."),Z4r=l(),F(fM.$$.fragment),evr=l(),$r=a("div"),F(q8.$$.fragment),ovr=l(),dve=a("p"),rvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tvr=l(),an=a("p"),avr=o("The model class to instantiate is selected based on the "),cve=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),ye=a("ul"),mM=a("li"),gve=a("strong"),mvr=o("bart"),gvr=o(" \u2014 "),EH=a("a"),hvr=o("TFBartForConditionalGeneration"),pvr=o(" (BART model)"),uvr=l(),gM=a("li"),hve=a("strong"),_vr=o("blenderbot"),bvr=o(" \u2014 "),CH=a("a"),vvr=o("TFBlenderbotForConditionalGeneration"),Fvr=o(" (Blenderbot model)"),Tvr=l(),hM=a("li"),pve=a("strong"),Mvr=o("blenderbot-small"),Evr=o(" \u2014 "),wH=a("a"),Cvr=o("TFBlenderbotSmallForConditionalGeneration"),wvr=o(" (BlenderbotSmall model)"),Avr=l(),pM=a("li"),uve=a("strong"),yvr=o("encoder-decoder"),Lvr=o(" \u2014 "),AH=a("a"),xvr=o("TFEncoderDecoderModel"),$vr=o(" (Encoder decoder model)"),kvr=l(),uM=a("li"),_ve=a("strong"),Svr=o("led"),Rvr=o(" \u2014 "),yH=a("a"),Pvr=o("TFLEDForConditionalGeneration"),Bvr=o(" (LED model)"),Ivr=l(),_M=a("li"),bve=a("strong"),qvr=o("marian"),Nvr=o(" \u2014 "),LH=a("a"),jvr=o("TFMarianMTModel"),Dvr=o(" (Marian model)"),Gvr=l(),bM=a("li"),vve=a("strong"),Ovr=o("mbart"),Vvr=o(" \u2014 "),xH=a("a"),Xvr=o("TFMBartForConditionalGeneration"),zvr=o(" (mBART model)"),Wvr=l(),vM=a("li"),Fve=a("strong"),Qvr=o("mt5"),Hvr=o(" \u2014 "),$H=a("a"),Uvr=o("TFMT5ForConditionalGeneration"),Jvr=o(" (mT5 model)"),Yvr=l(),FM=a("li"),Tve=a("strong"),Kvr=o("pegasus"),Zvr=o(" \u2014 "),kH=a("a"),e5r=o("TFPegasusForConditionalGeneration"),o5r=o(" (Pegasus model)"),r5r=l(),TM=a("li"),Mve=a("strong"),t5r=o("t5"),a5r=o(" \u2014 "),SH=a("a"),n5r=o("TFT5ForConditionalGeneration"),s5r=o(" (T5 model)"),l5r=l(),F(MM.$$.fragment),uje=l(),sc=a("h2"),EM=a("a"),Eve=a("span"),F(N8.$$.fragment),i5r=l(),Cve=a("span"),d5r=o("TFAutoModelForSequenceClassification"),_je=l(),tr=a("div"),F(j8.$$.fragment),c5r=l(),lc=a("p"),f5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RH=a("a"),m5r=o("from_pretrained()"),g5r=o(" class method or the "),PH=a("a"),h5r=o("from_config()"),p5r=o(` class
method.`),u5r=l(),D8=a("p"),_5r=o("This class cannot be instantiated directly using "),wve=a("code"),b5r=o("__init__()"),v5r=o(" (throws an error)."),F5r=l(),Rt=a("div"),F(G8.$$.fragment),T5r=l(),Ave=a("p"),M5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E5r=l(),ic=a("p"),C5r=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),w5r=o("not"),A5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),y5r=o("from_pretrained()"),L5r=o(" to load the model weights."),x5r=l(),F(CM.$$.fragment),$5r=l(),kr=a("div"),F(O8.$$.fragment),k5r=l(),Lve=a("p"),S5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R5r=l(),nn=a("p"),P5r=o("The model class to instantiate is selected based on the "),xve=a("code"),B5r=o("model_type"),I5r=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),q5r=o("pretrained_model_name_or_path"),N5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),j5r=o("pretrained_model_name_or_path"),D5r=o(":"),G5r=l(),oe=a("ul"),wM=a("li"),Sve=a("strong"),O5r=o("albert"),V5r=o(" \u2014 "),IH=a("a"),X5r=o("TFAlbertForSequenceClassification"),z5r=o(" (ALBERT model)"),W5r=l(),AM=a("li"),Rve=a("strong"),Q5r=o("bert"),H5r=o(" \u2014 "),qH=a("a"),U5r=o("TFBertForSequenceClassification"),J5r=o(" (BERT model)"),Y5r=l(),yM=a("li"),Pve=a("strong"),K5r=o("camembert"),Z5r=o(" \u2014 "),NH=a("a"),eFr=o("TFCamembertForSequenceClassification"),oFr=o(" (CamemBERT model)"),rFr=l(),LM=a("li"),Bve=a("strong"),tFr=o("convbert"),aFr=o(" \u2014 "),jH=a("a"),nFr=o("TFConvBertForSequenceClassification"),sFr=o(" (ConvBERT model)"),lFr=l(),xM=a("li"),Ive=a("strong"),iFr=o("ctrl"),dFr=o(" \u2014 "),DH=a("a"),cFr=o("TFCTRLForSequenceClassification"),fFr=o(" (CTRL model)"),mFr=l(),$M=a("li"),qve=a("strong"),gFr=o("deberta"),hFr=o(" \u2014 "),GH=a("a"),pFr=o("TFDebertaForSequenceClassification"),uFr=o(" (DeBERTa model)"),_Fr=l(),kM=a("li"),Nve=a("strong"),bFr=o("deberta-v2"),vFr=o(" \u2014 "),OH=a("a"),FFr=o("TFDebertaV2ForSequenceClassification"),TFr=o(" (DeBERTa-v2 model)"),MFr=l(),SM=a("li"),jve=a("strong"),EFr=o("distilbert"),CFr=o(" \u2014 "),VH=a("a"),wFr=o("TFDistilBertForSequenceClassification"),AFr=o(" (DistilBERT model)"),yFr=l(),RM=a("li"),Dve=a("strong"),LFr=o("electra"),xFr=o(" \u2014 "),XH=a("a"),$Fr=o("TFElectraForSequenceClassification"),kFr=o(" (ELECTRA model)"),SFr=l(),PM=a("li"),Gve=a("strong"),RFr=o("flaubert"),PFr=o(" \u2014 "),zH=a("a"),BFr=o("TFFlaubertForSequenceClassification"),IFr=o(" (FlauBERT model)"),qFr=l(),BM=a("li"),Ove=a("strong"),NFr=o("funnel"),jFr=o(" \u2014 "),WH=a("a"),DFr=o("TFFunnelForSequenceClassification"),GFr=o(" (Funnel Transformer model)"),OFr=l(),IM=a("li"),Vve=a("strong"),VFr=o("gpt2"),XFr=o(" \u2014 "),QH=a("a"),zFr=o("TFGPT2ForSequenceClassification"),WFr=o(" (OpenAI GPT-2 model)"),QFr=l(),qM=a("li"),Xve=a("strong"),HFr=o("gptj"),UFr=o(" \u2014 "),HH=a("a"),JFr=o("TFGPTJForSequenceClassification"),YFr=o(" (GPT-J model)"),KFr=l(),NM=a("li"),zve=a("strong"),ZFr=o("layoutlm"),eTr=o(" \u2014 "),UH=a("a"),oTr=o("TFLayoutLMForSequenceClassification"),rTr=o(" (LayoutLM model)"),tTr=l(),jM=a("li"),Wve=a("strong"),aTr=o("longformer"),nTr=o(" \u2014 "),JH=a("a"),sTr=o("TFLongformerForSequenceClassification"),lTr=o(" (Longformer model)"),iTr=l(),DM=a("li"),Qve=a("strong"),dTr=o("mobilebert"),cTr=o(" \u2014 "),YH=a("a"),fTr=o("TFMobileBertForSequenceClassification"),mTr=o(" (MobileBERT model)"),gTr=l(),GM=a("li"),Hve=a("strong"),hTr=o("mpnet"),pTr=o(" \u2014 "),KH=a("a"),uTr=o("TFMPNetForSequenceClassification"),_Tr=o(" (MPNet model)"),bTr=l(),OM=a("li"),Uve=a("strong"),vTr=o("openai-gpt"),FTr=o(" \u2014 "),ZH=a("a"),TTr=o("TFOpenAIGPTForSequenceClassification"),MTr=o(" (OpenAI GPT model)"),ETr=l(),VM=a("li"),Jve=a("strong"),CTr=o("rembert"),wTr=o(" \u2014 "),eU=a("a"),ATr=o("TFRemBertForSequenceClassification"),yTr=o(" (RemBERT model)"),LTr=l(),XM=a("li"),Yve=a("strong"),xTr=o("roberta"),$Tr=o(" \u2014 "),oU=a("a"),kTr=o("TFRobertaForSequenceClassification"),STr=o(" (RoBERTa model)"),RTr=l(),zM=a("li"),Kve=a("strong"),PTr=o("roformer"),BTr=o(" \u2014 "),rU=a("a"),ITr=o("TFRoFormerForSequenceClassification"),qTr=o(" (RoFormer model)"),NTr=l(),WM=a("li"),Zve=a("strong"),jTr=o("tapas"),DTr=o(" \u2014 "),tU=a("a"),GTr=o("TFTapasForSequenceClassification"),OTr=o(" (TAPAS model)"),VTr=l(),QM=a("li"),e5e=a("strong"),XTr=o("transfo-xl"),zTr=o(" \u2014 "),aU=a("a"),WTr=o("TFTransfoXLForSequenceClassification"),QTr=o(" (Transformer-XL model)"),HTr=l(),HM=a("li"),o5e=a("strong"),UTr=o("xlm"),JTr=o(" \u2014 "),nU=a("a"),YTr=o("TFXLMForSequenceClassification"),KTr=o(" (XLM model)"),ZTr=l(),UM=a("li"),r5e=a("strong"),e7r=o("xlm-roberta"),o7r=o(" \u2014 "),sU=a("a"),r7r=o("TFXLMRobertaForSequenceClassification"),t7r=o(" (XLM-RoBERTa model)"),a7r=l(),JM=a("li"),t5e=a("strong"),n7r=o("xlnet"),s7r=o(" \u2014 "),lU=a("a"),l7r=o("TFXLNetForSequenceClassification"),i7r=o(" (XLNet model)"),d7r=l(),F(YM.$$.fragment),bje=l(),dc=a("h2"),KM=a("a"),a5e=a("span"),F(V8.$$.fragment),c7r=l(),n5e=a("span"),f7r=o("TFAutoModelForMultipleChoice"),vje=l(),ar=a("div"),F(X8.$$.fragment),m7r=l(),cc=a("p"),g7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iU=a("a"),h7r=o("from_pretrained()"),p7r=o(" class method or the "),dU=a("a"),u7r=o("from_config()"),_7r=o(` class
method.`),b7r=l(),z8=a("p"),v7r=o("This class cannot be instantiated directly using "),s5e=a("code"),F7r=o("__init__()"),T7r=o(" (throws an error)."),M7r=l(),Pt=a("div"),F(W8.$$.fragment),E7r=l(),l5e=a("p"),C7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w7r=l(),fc=a("p"),A7r=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),y7r=o("not"),L7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),x7r=o("from_pretrained()"),$7r=o(" to load the model weights."),k7r=l(),F(ZM.$$.fragment),S7r=l(),Sr=a("div"),F(Q8.$$.fragment),R7r=l(),d5e=a("p"),P7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B7r=l(),sn=a("p"),I7r=o("The model class to instantiate is selected based on the "),c5e=a("code"),q7r=o("model_type"),N7r=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),j7r=o("pretrained_model_name_or_path"),D7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(":"),V7r=l(),pe=a("ul"),eE=a("li"),g5e=a("strong"),X7r=o("albert"),z7r=o(" \u2014 "),fU=a("a"),W7r=o("TFAlbertForMultipleChoice"),Q7r=o(" (ALBERT model)"),H7r=l(),oE=a("li"),h5e=a("strong"),U7r=o("bert"),J7r=o(" \u2014 "),mU=a("a"),Y7r=o("TFBertForMultipleChoice"),K7r=o(" (BERT model)"),Z7r=l(),rE=a("li"),p5e=a("strong"),eMr=o("camembert"),oMr=o(" \u2014 "),gU=a("a"),rMr=o("TFCamembertForMultipleChoice"),tMr=o(" (CamemBERT model)"),aMr=l(),tE=a("li"),u5e=a("strong"),nMr=o("convbert"),sMr=o(" \u2014 "),hU=a("a"),lMr=o("TFConvBertForMultipleChoice"),iMr=o(" (ConvBERT model)"),dMr=l(),aE=a("li"),_5e=a("strong"),cMr=o("distilbert"),fMr=o(" \u2014 "),pU=a("a"),mMr=o("TFDistilBertForMultipleChoice"),gMr=o(" (DistilBERT model)"),hMr=l(),nE=a("li"),b5e=a("strong"),pMr=o("electra"),uMr=o(" \u2014 "),uU=a("a"),_Mr=o("TFElectraForMultipleChoice"),bMr=o(" (ELECTRA model)"),vMr=l(),sE=a("li"),v5e=a("strong"),FMr=o("flaubert"),TMr=o(" \u2014 "),_U=a("a"),MMr=o("TFFlaubertForMultipleChoice"),EMr=o(" (FlauBERT model)"),CMr=l(),lE=a("li"),F5e=a("strong"),wMr=o("funnel"),AMr=o(" \u2014 "),bU=a("a"),yMr=o("TFFunnelForMultipleChoice"),LMr=o(" (Funnel Transformer model)"),xMr=l(),iE=a("li"),T5e=a("strong"),$Mr=o("longformer"),kMr=o(" \u2014 "),vU=a("a"),SMr=o("TFLongformerForMultipleChoice"),RMr=o(" (Longformer model)"),PMr=l(),dE=a("li"),M5e=a("strong"),BMr=o("mobilebert"),IMr=o(" \u2014 "),FU=a("a"),qMr=o("TFMobileBertForMultipleChoice"),NMr=o(" (MobileBERT model)"),jMr=l(),cE=a("li"),E5e=a("strong"),DMr=o("mpnet"),GMr=o(" \u2014 "),TU=a("a"),OMr=o("TFMPNetForMultipleChoice"),VMr=o(" (MPNet model)"),XMr=l(),fE=a("li"),C5e=a("strong"),zMr=o("rembert"),WMr=o(" \u2014 "),MU=a("a"),QMr=o("TFRemBertForMultipleChoice"),HMr=o(" (RemBERT model)"),UMr=l(),mE=a("li"),w5e=a("strong"),JMr=o("roberta"),YMr=o(" \u2014 "),EU=a("a"),KMr=o("TFRobertaForMultipleChoice"),ZMr=o(" (RoBERTa model)"),eEr=l(),gE=a("li"),A5e=a("strong"),oEr=o("roformer"),rEr=o(" \u2014 "),CU=a("a"),tEr=o("TFRoFormerForMultipleChoice"),aEr=o(" (RoFormer model)"),nEr=l(),hE=a("li"),y5e=a("strong"),sEr=o("xlm"),lEr=o(" \u2014 "),wU=a("a"),iEr=o("TFXLMForMultipleChoice"),dEr=o(" (XLM model)"),cEr=l(),pE=a("li"),L5e=a("strong"),fEr=o("xlm-roberta"),mEr=o(" \u2014 "),AU=a("a"),gEr=o("TFXLMRobertaForMultipleChoice"),hEr=o(" (XLM-RoBERTa model)"),pEr=l(),uE=a("li"),x5e=a("strong"),uEr=o("xlnet"),_Er=o(" \u2014 "),yU=a("a"),bEr=o("TFXLNetForMultipleChoice"),vEr=o(" (XLNet model)"),FEr=l(),F(_E.$$.fragment),Fje=l(),mc=a("h2"),bE=a("a"),$5e=a("span"),F(H8.$$.fragment),TEr=l(),k5e=a("span"),MEr=o("TFAutoModelForNextSentencePrediction"),Tje=l(),nr=a("div"),F(U8.$$.fragment),EEr=l(),gc=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LU=a("a"),wEr=o("from_pretrained()"),AEr=o(" class method or the "),xU=a("a"),yEr=o("from_config()"),LEr=o(` class
method.`),xEr=l(),J8=a("p"),$Er=o("This class cannot be instantiated directly using "),S5e=a("code"),kEr=o("__init__()"),SEr=o(" (throws an error)."),REr=l(),Bt=a("div"),F(Y8.$$.fragment),PEr=l(),R5e=a("p"),BEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IEr=l(),hc=a("p"),qEr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),NEr=o("not"),jEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),DEr=o("from_pretrained()"),GEr=o(" to load the model weights."),OEr=l(),F(vE.$$.fragment),VEr=l(),Rr=a("div"),F(K8.$$.fragment),XEr=l(),B5e=a("p"),zEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WEr=l(),ln=a("p"),QEr=o("The model class to instantiate is selected based on the "),I5e=a("code"),HEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),eCr=l(),Z8=a("ul"),FE=a("li"),j5e=a("strong"),oCr=o("bert"),rCr=o(" \u2014 "),kU=a("a"),tCr=o("TFBertForNextSentencePrediction"),aCr=o(" (BERT model)"),nCr=l(),TE=a("li"),D5e=a("strong"),sCr=o("mobilebert"),lCr=o(" \u2014 "),SU=a("a"),iCr=o("TFMobileBertForNextSentencePrediction"),dCr=o(" (MobileBERT model)"),cCr=l(),F(ME.$$.fragment),Mje=l(),pc=a("h2"),EE=a("a"),G5e=a("span"),F(e9.$$.fragment),fCr=l(),O5e=a("span"),mCr=o("TFAutoModelForTableQuestionAnswering"),Eje=l(),sr=a("div"),F(o9.$$.fragment),gCr=l(),uc=a("p"),hCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RU=a("a"),pCr=o("from_pretrained()"),uCr=o(" class method or the "),PU=a("a"),_Cr=o("from_config()"),bCr=o(` class
method.`),vCr=l(),r9=a("p"),FCr=o("This class cannot be instantiated directly using "),V5e=a("code"),TCr=o("__init__()"),MCr=o(" (throws an error)."),ECr=l(),It=a("div"),F(t9.$$.fragment),CCr=l(),X5e=a("p"),wCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ACr=l(),_c=a("p"),yCr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),LCr=o("not"),xCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),$Cr=o("from_pretrained()"),kCr=o(" to load the model weights."),SCr=l(),F(CE.$$.fragment),RCr=l(),Pr=a("div"),F(a9.$$.fragment),PCr=l(),W5e=a("p"),BCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ICr=l(),dn=a("p"),qCr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),NCr=o("model_type"),jCr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(":"),XCr=l(),J5e=a("ul"),wE=a("li"),Y5e=a("strong"),zCr=o("tapas"),WCr=o(" \u2014 "),IU=a("a"),QCr=o("TFTapasForQuestionAnswering"),HCr=o(" (TAPAS model)"),UCr=l(),F(AE.$$.fragment),Cje=l(),bc=a("h2"),yE=a("a"),K5e=a("span"),F(n9.$$.fragment),JCr=l(),Z5e=a("span"),YCr=o("TFAutoModelForTokenClassification"),wje=l(),lr=a("div"),F(s9.$$.fragment),KCr=l(),vc=a("p"),ZCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qU=a("a"),e3r=o("from_pretrained()"),o3r=o(" class method or the "),NU=a("a"),r3r=o("from_config()"),t3r=o(` class
method.`),a3r=l(),l9=a("p"),n3r=o("This class cannot be instantiated directly using "),eFe=a("code"),s3r=o("__init__()"),l3r=o(" (throws an error)."),i3r=l(),qt=a("div"),F(i9.$$.fragment),d3r=l(),oFe=a("p"),c3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f3r=l(),Fc=a("p"),m3r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),g3r=o("not"),h3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),p3r=o("from_pretrained()"),u3r=o(" to load the model weights."),_3r=l(),F(LE.$$.fragment),b3r=l(),Br=a("div"),F(d9.$$.fragment),v3r=l(),tFe=a("p"),F3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T3r=l(),cn=a("p"),M3r=o("The model class to instantiate is selected based on the "),aFe=a("code"),E3r=o("model_type"),C3r=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),w3r=o("pretrained_model_name_or_path"),A3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(":"),x3r=l(),de=a("ul"),xE=a("li"),lFe=a("strong"),$3r=o("albert"),k3r=o(" \u2014 "),DU=a("a"),S3r=o("TFAlbertForTokenClassification"),R3r=o(" (ALBERT model)"),P3r=l(),$E=a("li"),iFe=a("strong"),B3r=o("bert"),I3r=o(" \u2014 "),GU=a("a"),q3r=o("TFBertForTokenClassification"),N3r=o(" (BERT model)"),j3r=l(),kE=a("li"),dFe=a("strong"),D3r=o("camembert"),G3r=o(" \u2014 "),OU=a("a"),O3r=o("TFCamembertForTokenClassification"),V3r=o(" (CamemBERT model)"),X3r=l(),SE=a("li"),cFe=a("strong"),z3r=o("convbert"),W3r=o(" \u2014 "),VU=a("a"),Q3r=o("TFConvBertForTokenClassification"),H3r=o(" (ConvBERT model)"),U3r=l(),RE=a("li"),fFe=a("strong"),J3r=o("deberta"),Y3r=o(" \u2014 "),XU=a("a"),K3r=o("TFDebertaForTokenClassification"),Z3r=o(" (DeBERTa model)"),ewr=l(),PE=a("li"),mFe=a("strong"),owr=o("deberta-v2"),rwr=o(" \u2014 "),zU=a("a"),twr=o("TFDebertaV2ForTokenClassification"),awr=o(" (DeBERTa-v2 model)"),nwr=l(),BE=a("li"),gFe=a("strong"),swr=o("distilbert"),lwr=o(" \u2014 "),WU=a("a"),iwr=o("TFDistilBertForTokenClassification"),dwr=o(" (DistilBERT model)"),cwr=l(),IE=a("li"),hFe=a("strong"),fwr=o("electra"),mwr=o(" \u2014 "),QU=a("a"),gwr=o("TFElectraForTokenClassification"),hwr=o(" (ELECTRA model)"),pwr=l(),qE=a("li"),pFe=a("strong"),uwr=o("flaubert"),_wr=o(" \u2014 "),HU=a("a"),bwr=o("TFFlaubertForTokenClassification"),vwr=o(" (FlauBERT model)"),Fwr=l(),NE=a("li"),uFe=a("strong"),Twr=o("funnel"),Mwr=o(" \u2014 "),UU=a("a"),Ewr=o("TFFunnelForTokenClassification"),Cwr=o(" (Funnel Transformer model)"),wwr=l(),jE=a("li"),_Fe=a("strong"),Awr=o("layoutlm"),ywr=o(" \u2014 "),JU=a("a"),Lwr=o("TFLayoutLMForTokenClassification"),xwr=o(" (LayoutLM model)"),$wr=l(),DE=a("li"),bFe=a("strong"),kwr=o("longformer"),Swr=o(" \u2014 "),YU=a("a"),Rwr=o("TFLongformerForTokenClassification"),Pwr=o(" (Longformer model)"),Bwr=l(),GE=a("li"),vFe=a("strong"),Iwr=o("mobilebert"),qwr=o(" \u2014 "),KU=a("a"),Nwr=o("TFMobileBertForTokenClassification"),jwr=o(" (MobileBERT model)"),Dwr=l(),OE=a("li"),FFe=a("strong"),Gwr=o("mpnet"),Owr=o(" \u2014 "),ZU=a("a"),Vwr=o("TFMPNetForTokenClassification"),Xwr=o(" (MPNet model)"),zwr=l(),VE=a("li"),TFe=a("strong"),Wwr=o("rembert"),Qwr=o(" \u2014 "),eJ=a("a"),Hwr=o("TFRemBertForTokenClassification"),Uwr=o(" (RemBERT model)"),Jwr=l(),XE=a("li"),MFe=a("strong"),Ywr=o("roberta"),Kwr=o(" \u2014 "),oJ=a("a"),Zwr=o("TFRobertaForTokenClassification"),e0r=o(" (RoBERTa model)"),o0r=l(),zE=a("li"),EFe=a("strong"),r0r=o("roformer"),t0r=o(" \u2014 "),rJ=a("a"),a0r=o("TFRoFormerForTokenClassification"),n0r=o(" (RoFormer model)"),s0r=l(),WE=a("li"),CFe=a("strong"),l0r=o("xlm"),i0r=o(" \u2014 "),tJ=a("a"),d0r=o("TFXLMForTokenClassification"),c0r=o(" (XLM model)"),f0r=l(),QE=a("li"),wFe=a("strong"),m0r=o("xlm-roberta"),g0r=o(" \u2014 "),aJ=a("a"),h0r=o("TFXLMRobertaForTokenClassification"),p0r=o(" (XLM-RoBERTa model)"),u0r=l(),HE=a("li"),AFe=a("strong"),_0r=o("xlnet"),b0r=o(" \u2014 "),nJ=a("a"),v0r=o("TFXLNetForTokenClassification"),F0r=o(" (XLNet model)"),T0r=l(),F(UE.$$.fragment),Aje=l(),Tc=a("h2"),JE=a("a"),yFe=a("span"),F(c9.$$.fragment),M0r=l(),LFe=a("span"),E0r=o("TFAutoModelForQuestionAnswering"),yje=l(),ir=a("div"),F(f9.$$.fragment),C0r=l(),Mc=a("p"),w0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=a("a"),A0r=o("from_pretrained()"),y0r=o(" class method or the "),lJ=a("a"),L0r=o("from_config()"),x0r=o(` class
method.`),$0r=l(),m9=a("p"),k0r=o("This class cannot be instantiated directly using "),xFe=a("code"),S0r=o("__init__()"),R0r=o(" (throws an error)."),P0r=l(),Nt=a("div"),F(g9.$$.fragment),B0r=l(),$Fe=a("p"),I0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q0r=l(),Ec=a("p"),N0r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),j0r=o("not"),D0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" to load the model weights."),V0r=l(),F(YE.$$.fragment),X0r=l(),Ir=a("div"),F(h9.$$.fragment),z0r=l(),SFe=a("p"),W0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q0r=l(),fn=a("p"),H0r=o("The model class to instantiate is selected based on the "),RFe=a("code"),U0r=o("model_type"),J0r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),Z0r=o("pretrained_model_name_or_path"),e6r=o(":"),o6r=l(),ce=a("ul"),KE=a("li"),IFe=a("strong"),r6r=o("albert"),t6r=o(" \u2014 "),dJ=a("a"),a6r=o("TFAlbertForQuestionAnswering"),n6r=o(" (ALBERT model)"),s6r=l(),ZE=a("li"),qFe=a("strong"),l6r=o("bert"),i6r=o(" \u2014 "),cJ=a("a"),d6r=o("TFBertForQuestionAnswering"),c6r=o(" (BERT model)"),f6r=l(),eC=a("li"),NFe=a("strong"),m6r=o("camembert"),g6r=o(" \u2014 "),fJ=a("a"),h6r=o("TFCamembertForQuestionAnswering"),p6r=o(" (CamemBERT model)"),u6r=l(),oC=a("li"),jFe=a("strong"),_6r=o("convbert"),b6r=o(" \u2014 "),mJ=a("a"),v6r=o("TFConvBertForQuestionAnswering"),F6r=o(" (ConvBERT model)"),T6r=l(),rC=a("li"),DFe=a("strong"),M6r=o("deberta"),E6r=o(" \u2014 "),gJ=a("a"),C6r=o("TFDebertaForQuestionAnswering"),w6r=o(" (DeBERTa model)"),A6r=l(),tC=a("li"),GFe=a("strong"),y6r=o("deberta-v2"),L6r=o(" \u2014 "),hJ=a("a"),x6r=o("TFDebertaV2ForQuestionAnswering"),$6r=o(" (DeBERTa-v2 model)"),k6r=l(),aC=a("li"),OFe=a("strong"),S6r=o("distilbert"),R6r=o(" \u2014 "),pJ=a("a"),P6r=o("TFDistilBertForQuestionAnswering"),B6r=o(" (DistilBERT model)"),I6r=l(),nC=a("li"),VFe=a("strong"),q6r=o("electra"),N6r=o(" \u2014 "),uJ=a("a"),j6r=o("TFElectraForQuestionAnswering"),D6r=o(" (ELECTRA model)"),G6r=l(),sC=a("li"),XFe=a("strong"),O6r=o("flaubert"),V6r=o(" \u2014 "),_J=a("a"),X6r=o("TFFlaubertForQuestionAnsweringSimple"),z6r=o(" (FlauBERT model)"),W6r=l(),lC=a("li"),zFe=a("strong"),Q6r=o("funnel"),H6r=o(" \u2014 "),bJ=a("a"),U6r=o("TFFunnelForQuestionAnswering"),J6r=o(" (Funnel Transformer model)"),Y6r=l(),iC=a("li"),WFe=a("strong"),K6r=o("gptj"),Z6r=o(" \u2014 "),vJ=a("a"),eAr=o("TFGPTJForQuestionAnswering"),oAr=o(" (GPT-J model)"),rAr=l(),dC=a("li"),QFe=a("strong"),tAr=o("longformer"),aAr=o(" \u2014 "),FJ=a("a"),nAr=o("TFLongformerForQuestionAnswering"),sAr=o(" (Longformer model)"),lAr=l(),cC=a("li"),HFe=a("strong"),iAr=o("mobilebert"),dAr=o(" \u2014 "),TJ=a("a"),cAr=o("TFMobileBertForQuestionAnswering"),fAr=o(" (MobileBERT model)"),mAr=l(),fC=a("li"),UFe=a("strong"),gAr=o("mpnet"),hAr=o(" \u2014 "),MJ=a("a"),pAr=o("TFMPNetForQuestionAnswering"),uAr=o(" (MPNet model)"),_Ar=l(),mC=a("li"),JFe=a("strong"),bAr=o("rembert"),vAr=o(" \u2014 "),EJ=a("a"),FAr=o("TFRemBertForQuestionAnswering"),TAr=o(" (RemBERT model)"),MAr=l(),gC=a("li"),YFe=a("strong"),EAr=o("roberta"),CAr=o(" \u2014 "),CJ=a("a"),wAr=o("TFRobertaForQuestionAnswering"),AAr=o(" (RoBERTa model)"),yAr=l(),hC=a("li"),KFe=a("strong"),LAr=o("roformer"),xAr=o(" \u2014 "),wJ=a("a"),$Ar=o("TFRoFormerForQuestionAnswering"),kAr=o(" (RoFormer model)"),SAr=l(),pC=a("li"),ZFe=a("strong"),RAr=o("xlm"),PAr=o(" \u2014 "),AJ=a("a"),BAr=o("TFXLMForQuestionAnsweringSimple"),IAr=o(" (XLM model)"),qAr=l(),uC=a("li"),eTe=a("strong"),NAr=o("xlm-roberta"),jAr=o(" \u2014 "),yJ=a("a"),DAr=o("TFXLMRobertaForQuestionAnswering"),GAr=o(" (XLM-RoBERTa model)"),OAr=l(),_C=a("li"),oTe=a("strong"),VAr=o("xlnet"),XAr=o(" \u2014 "),LJ=a("a"),zAr=o("TFXLNetForQuestionAnsweringSimple"),WAr=o(" (XLNet model)"),QAr=l(),F(bC.$$.fragment),Lje=l(),Cc=a("h2"),vC=a("a"),rTe=a("span"),F(p9.$$.fragment),HAr=l(),tTe=a("span"),UAr=o("TFAutoModelForVision2Seq"),xje=l(),dr=a("div"),F(u9.$$.fragment),JAr=l(),wc=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xJ=a("a"),KAr=o("from_pretrained()"),ZAr=o(" class method or the "),$J=a("a"),eyr=o("from_config()"),oyr=o(` class
method.`),ryr=l(),_9=a("p"),tyr=o("This class cannot be instantiated directly using "),aTe=a("code"),ayr=o("__init__()"),nyr=o(" (throws an error)."),syr=l(),jt=a("div"),F(b9.$$.fragment),lyr=l(),nTe=a("p"),iyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dyr=l(),Ac=a("p"),cyr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),fyr=o("not"),myr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" to load the model weights."),pyr=l(),F(FC.$$.fragment),uyr=l(),qr=a("div"),F(v9.$$.fragment),_yr=l(),lTe=a("p"),byr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vyr=l(),mn=a("p"),Fyr=o("The model class to instantiate is selected based on the "),iTe=a("code"),Tyr=o("model_type"),Myr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),Eyr=o("pretrained_model_name_or_path"),Cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),wyr=o("pretrained_model_name_or_path"),Ayr=o(":"),yyr=l(),fTe=a("ul"),TC=a("li"),mTe=a("strong"),Lyr=o("vision-encoder-decoder"),xyr=o(" \u2014 "),SJ=a("a"),$yr=o("TFVisionEncoderDecoderModel"),kyr=o(" (Vision Encoder decoder model)"),Syr=l(),F(MC.$$.fragment),$je=l(),yc=a("h2"),EC=a("a"),gTe=a("span"),F(F9.$$.fragment),Ryr=l(),hTe=a("span"),Pyr=o("TFAutoModelForSpeechSeq2Seq"),kje=l(),cr=a("div"),F(T9.$$.fragment),Byr=l(),Lc=a("p"),Iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RJ=a("a"),qyr=o("from_pretrained()"),Nyr=o(" class method or the "),PJ=a("a"),jyr=o("from_config()"),Dyr=o(` class
method.`),Gyr=l(),M9=a("p"),Oyr=o("This class cannot be instantiated directly using "),pTe=a("code"),Vyr=o("__init__()"),Xyr=o(" (throws an error)."),zyr=l(),Dt=a("div"),F(E9.$$.fragment),Wyr=l(),uTe=a("p"),Qyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hyr=l(),xc=a("p"),Uyr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),Jyr=o("not"),Yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" to load the model weights."),eLr=l(),F(CC.$$.fragment),oLr=l(),Nr=a("div"),F(C9.$$.fragment),rLr=l(),bTe=a("p"),tLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aLr=l(),gn=a("p"),nLr=o("The model class to instantiate is selected based on the "),vTe=a("code"),sLr=o("model_type"),lLr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),iLr=o("pretrained_model_name_or_path"),dLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),cLr=o("pretrained_model_name_or_path"),fLr=o(":"),mLr=l(),MTe=a("ul"),wC=a("li"),ETe=a("strong"),gLr=o("speech_to_text"),hLr=o(" \u2014 "),IJ=a("a"),pLr=o("TFSpeech2TextForConditionalGeneration"),uLr=o(" (Speech2Text model)"),_Lr=l(),F(AC.$$.fragment),Sje=l(),$c=a("h2"),yC=a("a"),CTe=a("span"),F(w9.$$.fragment),bLr=l(),wTe=a("span"),vLr=o("FlaxAutoModel"),Rje=l(),fr=a("div"),F(A9.$$.fragment),FLr=l(),kc=a("p"),TLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qJ=a("a"),MLr=o("from_pretrained()"),ELr=o(" class method or the "),NJ=a("a"),CLr=o("from_config()"),wLr=o(` class
method.`),ALr=l(),y9=a("p"),yLr=o("This class cannot be instantiated directly using "),ATe=a("code"),LLr=o("__init__()"),xLr=o(" (throws an error)."),$Lr=l(),Gt=a("div"),F(L9.$$.fragment),kLr=l(),yTe=a("p"),SLr=o("Instantiates one of the base model classes of the library from a configuration."),RLr=l(),Sc=a("p"),PLr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),BLr=o("not"),ILr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),qLr=o("from_pretrained()"),NLr=o(" to load the model weights."),jLr=l(),F(LC.$$.fragment),DLr=l(),jr=a("div"),F(x9.$$.fragment),GLr=l(),xTe=a("p"),OLr=o("Instantiate one of the base model classes of the library from a pretrained model."),VLr=l(),hn=a("p"),XLr=o("The model class to instantiate is selected based on the "),$Te=a("code"),zLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),QLr=o("pretrained_model_name_or_path"),HLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(":"),YLr=l(),te=a("ul"),xC=a("li"),RTe=a("strong"),KLr=o("albert"),ZLr=o(" \u2014 "),DJ=a("a"),e8r=o("FlaxAlbertModel"),o8r=o(" (ALBERT model)"),r8r=l(),$C=a("li"),PTe=a("strong"),t8r=o("bart"),a8r=o(" \u2014 "),GJ=a("a"),n8r=o("FlaxBartModel"),s8r=o(" (BART model)"),l8r=l(),kC=a("li"),BTe=a("strong"),i8r=o("beit"),d8r=o(" \u2014 "),OJ=a("a"),c8r=o("FlaxBeitModel"),f8r=o(" (BEiT model)"),m8r=l(),SC=a("li"),ITe=a("strong"),g8r=o("bert"),h8r=o(" \u2014 "),VJ=a("a"),p8r=o("FlaxBertModel"),u8r=o(" (BERT model)"),_8r=l(),RC=a("li"),qTe=a("strong"),b8r=o("big_bird"),v8r=o(" \u2014 "),XJ=a("a"),F8r=o("FlaxBigBirdModel"),T8r=o(" (BigBird model)"),M8r=l(),PC=a("li"),NTe=a("strong"),E8r=o("blenderbot"),C8r=o(" \u2014 "),zJ=a("a"),w8r=o("FlaxBlenderbotModel"),A8r=o(" (Blenderbot model)"),y8r=l(),BC=a("li"),jTe=a("strong"),L8r=o("blenderbot-small"),x8r=o(" \u2014 "),WJ=a("a"),$8r=o("FlaxBlenderbotSmallModel"),k8r=o(" (BlenderbotSmall model)"),S8r=l(),IC=a("li"),DTe=a("strong"),R8r=o("clip"),P8r=o(" \u2014 "),QJ=a("a"),B8r=o("FlaxCLIPModel"),I8r=o(" (CLIP model)"),q8r=l(),qC=a("li"),GTe=a("strong"),N8r=o("distilbert"),j8r=o(" \u2014 "),HJ=a("a"),D8r=o("FlaxDistilBertModel"),G8r=o(" (DistilBERT model)"),O8r=l(),NC=a("li"),OTe=a("strong"),V8r=o("electra"),X8r=o(" \u2014 "),UJ=a("a"),z8r=o("FlaxElectraModel"),W8r=o(" (ELECTRA model)"),Q8r=l(),jC=a("li"),VTe=a("strong"),H8r=o("gpt2"),U8r=o(" \u2014 "),JJ=a("a"),J8r=o("FlaxGPT2Model"),Y8r=o(" (OpenAI GPT-2 model)"),K8r=l(),DC=a("li"),XTe=a("strong"),Z8r=o("gpt_neo"),e9r=o(" \u2014 "),YJ=a("a"),o9r=o("FlaxGPTNeoModel"),r9r=o(" (GPT Neo model)"),t9r=l(),GC=a("li"),zTe=a("strong"),a9r=o("gptj"),n9r=o(" \u2014 "),KJ=a("a"),s9r=o("FlaxGPTJModel"),l9r=o(" (GPT-J model)"),i9r=l(),OC=a("li"),WTe=a("strong"),d9r=o("marian"),c9r=o(" \u2014 "),ZJ=a("a"),f9r=o("FlaxMarianModel"),m9r=o(" (Marian model)"),g9r=l(),VC=a("li"),QTe=a("strong"),h9r=o("mbart"),p9r=o(" \u2014 "),eY=a("a"),u9r=o("FlaxMBartModel"),_9r=o(" (mBART model)"),b9r=l(),XC=a("li"),HTe=a("strong"),v9r=o("mt5"),F9r=o(" \u2014 "),oY=a("a"),T9r=o("FlaxMT5Model"),M9r=o(" (mT5 model)"),E9r=l(),zC=a("li"),UTe=a("strong"),C9r=o("pegasus"),w9r=o(" \u2014 "),rY=a("a"),A9r=o("FlaxPegasusModel"),y9r=o(" (Pegasus model)"),L9r=l(),WC=a("li"),JTe=a("strong"),x9r=o("roberta"),$9r=o(" \u2014 "),tY=a("a"),k9r=o("FlaxRobertaModel"),S9r=o(" (RoBERTa model)"),R9r=l(),QC=a("li"),YTe=a("strong"),P9r=o("roformer"),B9r=o(" \u2014 "),aY=a("a"),I9r=o("FlaxRoFormerModel"),q9r=o(" (RoFormer model)"),N9r=l(),HC=a("li"),KTe=a("strong"),j9r=o("t5"),D9r=o(" \u2014 "),nY=a("a"),G9r=o("FlaxT5Model"),O9r=o(" (T5 model)"),V9r=l(),UC=a("li"),ZTe=a("strong"),X9r=o("vision-text-dual-encoder"),z9r=o(" \u2014 "),sY=a("a"),W9r=o("FlaxVisionTextDualEncoderModel"),Q9r=o(" (VisionTextDualEncoder model)"),H9r=l(),JC=a("li"),e7e=a("strong"),U9r=o("vit"),J9r=o(" \u2014 "),lY=a("a"),Y9r=o("FlaxViTModel"),K9r=o(" (ViT model)"),Z9r=l(),YC=a("li"),o7e=a("strong"),exr=o("wav2vec2"),oxr=o(" \u2014 "),iY=a("a"),rxr=o("FlaxWav2Vec2Model"),txr=o(" (Wav2Vec2 model)"),axr=l(),KC=a("li"),r7e=a("strong"),nxr=o("xglm"),sxr=o(" \u2014 "),dY=a("a"),lxr=o("FlaxXGLMModel"),ixr=o(" (XGLM model)"),dxr=l(),ZC=a("li"),t7e=a("strong"),cxr=o("xlm-roberta"),fxr=o(" \u2014 "),cY=a("a"),mxr=o("FlaxXLMRobertaModel"),gxr=o(" (XLM-RoBERTa model)"),hxr=l(),F(e3.$$.fragment),Pje=l(),Rc=a("h2"),o3=a("a"),a7e=a("span"),F($9.$$.fragment),pxr=l(),n7e=a("span"),uxr=o("FlaxAutoModelForCausalLM"),Bje=l(),mr=a("div"),F(k9.$$.fragment),_xr=l(),Pc=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fY=a("a"),vxr=o("from_pretrained()"),Fxr=o(" class method or the "),mY=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),S9=a("p"),Cxr=o("This class cannot be instantiated directly using "),s7e=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),yxr=l(),Ot=a("div"),F(R9.$$.fragment),Lxr=l(),l7e=a("p"),xxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$xr=l(),Bc=a("p"),kxr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),Sxr=o("not"),Rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),Pxr=o("from_pretrained()"),Bxr=o(" to load the model weights."),Ixr=l(),F(r3.$$.fragment),qxr=l(),Dr=a("div"),F(P9.$$.fragment),Nxr=l(),d7e=a("p"),jxr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dxr=l(),pn=a("p"),Gxr=o("The model class to instantiate is selected based on the "),c7e=a("code"),Oxr=o("model_type"),Vxr=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),Wxr=o("pretrained_model_name_or_path"),Qxr=o(":"),Hxr=l(),Re=a("ul"),t3=a("li"),g7e=a("strong"),Uxr=o("bart"),Jxr=o(" \u2014 "),hY=a("a"),Yxr=o("FlaxBartForCausalLM"),Kxr=o(" (BART model)"),Zxr=l(),a3=a("li"),h7e=a("strong"),e$r=o("bert"),o$r=o(" \u2014 "),pY=a("a"),r$r=o("FlaxBertForCausalLM"),t$r=o(" (BERT model)"),a$r=l(),n3=a("li"),p7e=a("strong"),n$r=o("big_bird"),s$r=o(" \u2014 "),uY=a("a"),l$r=o("FlaxBigBirdForCausalLM"),i$r=o(" (BigBird model)"),d$r=l(),s3=a("li"),u7e=a("strong"),c$r=o("electra"),f$r=o(" \u2014 "),_Y=a("a"),m$r=o("FlaxElectraForCausalLM"),g$r=o(" (ELECTRA model)"),h$r=l(),l3=a("li"),_7e=a("strong"),p$r=o("gpt2"),u$r=o(" \u2014 "),bY=a("a"),_$r=o("FlaxGPT2LMHeadModel"),b$r=o(" (OpenAI GPT-2 model)"),v$r=l(),i3=a("li"),b7e=a("strong"),F$r=o("gpt_neo"),T$r=o(" \u2014 "),vY=a("a"),M$r=o("FlaxGPTNeoForCausalLM"),E$r=o(" (GPT Neo model)"),C$r=l(),d3=a("li"),v7e=a("strong"),w$r=o("gptj"),A$r=o(" \u2014 "),FY=a("a"),y$r=o("FlaxGPTJForCausalLM"),L$r=o(" (GPT-J model)"),x$r=l(),c3=a("li"),F7e=a("strong"),$$r=o("roberta"),k$r=o(" \u2014 "),TY=a("a"),S$r=o("FlaxRobertaForCausalLM"),R$r=o(" (RoBERTa model)"),P$r=l(),f3=a("li"),T7e=a("strong"),B$r=o("xglm"),I$r=o(" \u2014 "),MY=a("a"),q$r=o("FlaxXGLMForCausalLM"),N$r=o(" (XGLM model)"),j$r=l(),F(m3.$$.fragment),Ije=l(),Ic=a("h2"),g3=a("a"),M7e=a("span"),F(B9.$$.fragment),D$r=l(),E7e=a("span"),G$r=o("FlaxAutoModelForPreTraining"),qje=l(),gr=a("div"),F(I9.$$.fragment),O$r=l(),qc=a("p"),V$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EY=a("a"),X$r=o("from_pretrained()"),z$r=o(" class method or the "),CY=a("a"),W$r=o("from_config()"),Q$r=o(` class
method.`),H$r=l(),q9=a("p"),U$r=o("This class cannot be instantiated directly using "),C7e=a("code"),J$r=o("__init__()"),Y$r=o(" (throws an error)."),K$r=l(),Vt=a("div"),F(N9.$$.fragment),Z$r=l(),w7e=a("p"),ekr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),okr=l(),Nc=a("p"),rkr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),tkr=o("not"),akr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),nkr=o("from_pretrained()"),skr=o(" to load the model weights."),lkr=l(),F(h3.$$.fragment),ikr=l(),Gr=a("div"),F(j9.$$.fragment),dkr=l(),y7e=a("p"),ckr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fkr=l(),un=a("p"),mkr=o("The model class to instantiate is selected based on the "),L7e=a("code"),gkr=o("model_type"),hkr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),pkr=o("pretrained_model_name_or_path"),ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),_kr=o("pretrained_model_name_or_path"),bkr=o(":"),vkr=l(),Ee=a("ul"),p3=a("li"),k7e=a("strong"),Fkr=o("albert"),Tkr=o(" \u2014 "),AY=a("a"),Mkr=o("FlaxAlbertForPreTraining"),Ekr=o(" (ALBERT model)"),Ckr=l(),u3=a("li"),S7e=a("strong"),wkr=o("bart"),Akr=o(" \u2014 "),yY=a("a"),ykr=o("FlaxBartForConditionalGeneration"),Lkr=o(" (BART model)"),xkr=l(),_3=a("li"),R7e=a("strong"),$kr=o("bert"),kkr=o(" \u2014 "),LY=a("a"),Skr=o("FlaxBertForPreTraining"),Rkr=o(" (BERT model)"),Pkr=l(),b3=a("li"),P7e=a("strong"),Bkr=o("big_bird"),Ikr=o(" \u2014 "),xY=a("a"),qkr=o("FlaxBigBirdForPreTraining"),Nkr=o(" (BigBird model)"),jkr=l(),v3=a("li"),B7e=a("strong"),Dkr=o("electra"),Gkr=o(" \u2014 "),$Y=a("a"),Okr=o("FlaxElectraForPreTraining"),Vkr=o(" (ELECTRA model)"),Xkr=l(),F3=a("li"),I7e=a("strong"),zkr=o("mbart"),Wkr=o(" \u2014 "),kY=a("a"),Qkr=o("FlaxMBartForConditionalGeneration"),Hkr=o(" (mBART model)"),Ukr=l(),T3=a("li"),q7e=a("strong"),Jkr=o("mt5"),Ykr=o(" \u2014 "),SY=a("a"),Kkr=o("FlaxMT5ForConditionalGeneration"),Zkr=o(" (mT5 model)"),eSr=l(),M3=a("li"),N7e=a("strong"),oSr=o("roberta"),rSr=o(" \u2014 "),RY=a("a"),tSr=o("FlaxRobertaForMaskedLM"),aSr=o(" (RoBERTa model)"),nSr=l(),E3=a("li"),j7e=a("strong"),sSr=o("roformer"),lSr=o(" \u2014 "),PY=a("a"),iSr=o("FlaxRoFormerForMaskedLM"),dSr=o(" (RoFormer model)"),cSr=l(),C3=a("li"),D7e=a("strong"),fSr=o("t5"),mSr=o(" \u2014 "),BY=a("a"),gSr=o("FlaxT5ForConditionalGeneration"),hSr=o(" (T5 model)"),pSr=l(),w3=a("li"),G7e=a("strong"),uSr=o("wav2vec2"),_Sr=o(" \u2014 "),IY=a("a"),bSr=o("FlaxWav2Vec2ForPreTraining"),vSr=o(" (Wav2Vec2 model)"),FSr=l(),A3=a("li"),O7e=a("strong"),TSr=o("xlm-roberta"),MSr=o(" \u2014 "),qY=a("a"),ESr=o("FlaxXLMRobertaForMaskedLM"),CSr=o(" (XLM-RoBERTa model)"),wSr=l(),F(y3.$$.fragment),Nje=l(),jc=a("h2"),L3=a("a"),V7e=a("span"),F(D9.$$.fragment),ASr=l(),X7e=a("span"),ySr=o("FlaxAutoModelForMaskedLM"),jje=l(),hr=a("div"),F(G9.$$.fragment),LSr=l(),Dc=a("p"),xSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=a("a"),$Sr=o("from_pretrained()"),kSr=o(" class method or the "),jY=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),PSr=l(),O9=a("p"),BSr=o("This class cannot be instantiated directly using "),z7e=a("code"),ISr=o("__init__()"),qSr=o(" (throws an error)."),NSr=l(),Xt=a("div"),F(V9.$$.fragment),jSr=l(),W7e=a("p"),DSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GSr=l(),Gc=a("p"),OSr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),VSr=o("not"),XSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),zSr=o("from_pretrained()"),WSr=o(" to load the model weights."),QSr=l(),F(x3.$$.fragment),HSr=l(),Or=a("div"),F(X9.$$.fragment),USr=l(),H7e=a("p"),JSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YSr=l(),_n=a("p"),KSr=o("The model class to instantiate is selected based on the "),U7e=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),Le=a("ul"),$3=a("li"),K7e=a("strong"),sRr=o("albert"),lRr=o(" \u2014 "),GY=a("a"),iRr=o("FlaxAlbertForMaskedLM"),dRr=o(" (ALBERT model)"),cRr=l(),k3=a("li"),Z7e=a("strong"),fRr=o("bart"),mRr=o(" \u2014 "),OY=a("a"),gRr=o("FlaxBartForConditionalGeneration"),hRr=o(" (BART model)"),pRr=l(),S3=a("li"),eMe=a("strong"),uRr=o("bert"),_Rr=o(" \u2014 "),VY=a("a"),bRr=o("FlaxBertForMaskedLM"),vRr=o(" (BERT model)"),FRr=l(),R3=a("li"),oMe=a("strong"),TRr=o("big_bird"),MRr=o(" \u2014 "),XY=a("a"),ERr=o("FlaxBigBirdForMaskedLM"),CRr=o(" (BigBird model)"),wRr=l(),P3=a("li"),rMe=a("strong"),ARr=o("distilbert"),yRr=o(" \u2014 "),zY=a("a"),LRr=o("FlaxDistilBertForMaskedLM"),xRr=o(" (DistilBERT model)"),$Rr=l(),B3=a("li"),tMe=a("strong"),kRr=o("electra"),SRr=o(" \u2014 "),WY=a("a"),RRr=o("FlaxElectraForMaskedLM"),PRr=o(" (ELECTRA model)"),BRr=l(),I3=a("li"),aMe=a("strong"),IRr=o("mbart"),qRr=o(" \u2014 "),QY=a("a"),NRr=o("FlaxMBartForConditionalGeneration"),jRr=o(" (mBART model)"),DRr=l(),q3=a("li"),nMe=a("strong"),GRr=o("roberta"),ORr=o(" \u2014 "),HY=a("a"),VRr=o("FlaxRobertaForMaskedLM"),XRr=o(" (RoBERTa model)"),zRr=l(),N3=a("li"),sMe=a("strong"),WRr=o("roformer"),QRr=o(" \u2014 "),UY=a("a"),HRr=o("FlaxRoFormerForMaskedLM"),URr=o(" (RoFormer model)"),JRr=l(),j3=a("li"),lMe=a("strong"),YRr=o("xlm-roberta"),KRr=o(" \u2014 "),JY=a("a"),ZRr=o("FlaxXLMRobertaForMaskedLM"),ePr=o(" (XLM-RoBERTa model)"),oPr=l(),F(D3.$$.fragment),Dje=l(),Oc=a("h2"),G3=a("a"),iMe=a("span"),F(z9.$$.fragment),rPr=l(),dMe=a("span"),tPr=o("FlaxAutoModelForSeq2SeqLM"),Gje=l(),pr=a("div"),F(W9.$$.fragment),aPr=l(),Vc=a("p"),nPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YY=a("a"),sPr=o("from_pretrained()"),lPr=o(" class method or the "),KY=a("a"),iPr=o("from_config()"),dPr=o(` class
method.`),cPr=l(),Q9=a("p"),fPr=o("This class cannot be instantiated directly using "),cMe=a("code"),mPr=o("__init__()"),gPr=o(" (throws an error)."),hPr=l(),zt=a("div"),F(H9.$$.fragment),pPr=l(),fMe=a("p"),uPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Pr=l(),Xc=a("p"),bPr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),vPr=o("not"),FPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),TPr=o("from_pretrained()"),MPr=o(" to load the model weights."),EPr=l(),F(O3.$$.fragment),CPr=l(),Vr=a("div"),F(U9.$$.fragment),wPr=l(),gMe=a("p"),APr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yPr=l(),bn=a("p"),LPr=o("The model class to instantiate is selected based on the "),hMe=a("code"),xPr=o("model_type"),$Pr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),kPr=o("pretrained_model_name_or_path"),SPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),RPr=o("pretrained_model_name_or_path"),PPr=o(":"),BPr=l(),Pe=a("ul"),V3=a("li"),_Me=a("strong"),IPr=o("bart"),qPr=o(" \u2014 "),eK=a("a"),NPr=o("FlaxBartForConditionalGeneration"),jPr=o(" (BART model)"),DPr=l(),X3=a("li"),bMe=a("strong"),GPr=o("blenderbot"),OPr=o(" \u2014 "),oK=a("a"),VPr=o("FlaxBlenderbotForConditionalGeneration"),XPr=o(" (Blenderbot model)"),zPr=l(),z3=a("li"),vMe=a("strong"),WPr=o("blenderbot-small"),QPr=o(" \u2014 "),rK=a("a"),HPr=o("FlaxBlenderbotSmallForConditionalGeneration"),UPr=o(" (BlenderbotSmall model)"),JPr=l(),W3=a("li"),FMe=a("strong"),YPr=o("encoder-decoder"),KPr=o(" \u2014 "),tK=a("a"),ZPr=o("FlaxEncoderDecoderModel"),eBr=o(" (Encoder decoder model)"),oBr=l(),Q3=a("li"),TMe=a("strong"),rBr=o("marian"),tBr=o(" \u2014 "),aK=a("a"),aBr=o("FlaxMarianMTModel"),nBr=o(" (Marian model)"),sBr=l(),H3=a("li"),MMe=a("strong"),lBr=o("mbart"),iBr=o(" \u2014 "),nK=a("a"),dBr=o("FlaxMBartForConditionalGeneration"),cBr=o(" (mBART model)"),fBr=l(),U3=a("li"),EMe=a("strong"),mBr=o("mt5"),gBr=o(" \u2014 "),sK=a("a"),hBr=o("FlaxMT5ForConditionalGeneration"),pBr=o(" (mT5 model)"),uBr=l(),J3=a("li"),CMe=a("strong"),_Br=o("pegasus"),bBr=o(" \u2014 "),lK=a("a"),vBr=o("FlaxPegasusForConditionalGeneration"),FBr=o(" (Pegasus model)"),TBr=l(),Y3=a("li"),wMe=a("strong"),MBr=o("t5"),EBr=o(" \u2014 "),iK=a("a"),CBr=o("FlaxT5ForConditionalGeneration"),wBr=o(" (T5 model)"),ABr=l(),F(K3.$$.fragment),Oje=l(),zc=a("h2"),Z3=a("a"),AMe=a("span"),F(J9.$$.fragment),yBr=l(),yMe=a("span"),LBr=o("FlaxAutoModelForSequenceClassification"),Vje=l(),ur=a("div"),F(Y9.$$.fragment),xBr=l(),Wc=a("p"),$Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dK=a("a"),kBr=o("from_pretrained()"),SBr=o(" class method or the "),cK=a("a"),RBr=o("from_config()"),PBr=o(` class
method.`),BBr=l(),K9=a("p"),IBr=o("This class cannot be instantiated directly using "),LMe=a("code"),qBr=o("__init__()"),NBr=o(" (throws an error)."),jBr=l(),Wt=a("div"),F(Z9.$$.fragment),DBr=l(),xMe=a("p"),GBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OBr=l(),Qc=a("p"),VBr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),XBr=o("not"),zBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),WBr=o("from_pretrained()"),QBr=o(" to load the model weights."),HBr=l(),F(ew.$$.fragment),UBr=l(),Xr=a("div"),F(ex.$$.fragment),JBr=l(),kMe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KBr=l(),vn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),SMe=a("code"),eIr=o("model_type"),oIr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(":"),sIr=l(),xe=a("ul"),ow=a("li"),BMe=a("strong"),lIr=o("albert"),iIr=o(" \u2014 "),mK=a("a"),dIr=o("FlaxAlbertForSequenceClassification"),cIr=o(" (ALBERT model)"),fIr=l(),rw=a("li"),IMe=a("strong"),mIr=o("bart"),gIr=o(" \u2014 "),gK=a("a"),hIr=o("FlaxBartForSequenceClassification"),pIr=o(" (BART model)"),uIr=l(),tw=a("li"),qMe=a("strong"),_Ir=o("bert"),bIr=o(" \u2014 "),hK=a("a"),vIr=o("FlaxBertForSequenceClassification"),FIr=o(" (BERT model)"),TIr=l(),aw=a("li"),NMe=a("strong"),MIr=o("big_bird"),EIr=o(" \u2014 "),pK=a("a"),CIr=o("FlaxBigBirdForSequenceClassification"),wIr=o(" (BigBird model)"),AIr=l(),nw=a("li"),jMe=a("strong"),yIr=o("distilbert"),LIr=o(" \u2014 "),uK=a("a"),xIr=o("FlaxDistilBertForSequenceClassification"),$Ir=o(" (DistilBERT model)"),kIr=l(),sw=a("li"),DMe=a("strong"),SIr=o("electra"),RIr=o(" \u2014 "),_K=a("a"),PIr=o("FlaxElectraForSequenceClassification"),BIr=o(" (ELECTRA model)"),IIr=l(),lw=a("li"),GMe=a("strong"),qIr=o("mbart"),NIr=o(" \u2014 "),bK=a("a"),jIr=o("FlaxMBartForSequenceClassification"),DIr=o(" (mBART model)"),GIr=l(),iw=a("li"),OMe=a("strong"),OIr=o("roberta"),VIr=o(" \u2014 "),vK=a("a"),XIr=o("FlaxRobertaForSequenceClassification"),zIr=o(" (RoBERTa model)"),WIr=l(),dw=a("li"),VMe=a("strong"),QIr=o("roformer"),HIr=o(" \u2014 "),FK=a("a"),UIr=o("FlaxRoFormerForSequenceClassification"),JIr=o(" (RoFormer model)"),YIr=l(),cw=a("li"),XMe=a("strong"),KIr=o("xlm-roberta"),ZIr=o(" \u2014 "),TK=a("a"),eqr=o("FlaxXLMRobertaForSequenceClassification"),oqr=o(" (XLM-RoBERTa model)"),rqr=l(),F(fw.$$.fragment),Xje=l(),Hc=a("h2"),mw=a("a"),zMe=a("span"),F(ox.$$.fragment),tqr=l(),WMe=a("span"),aqr=o("FlaxAutoModelForQuestionAnswering"),zje=l(),_r=a("div"),F(rx.$$.fragment),nqr=l(),Uc=a("p"),sqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MK=a("a"),lqr=o("from_pretrained()"),iqr=o(" class method or the "),EK=a("a"),dqr=o("from_config()"),cqr=o(` class
method.`),fqr=l(),tx=a("p"),mqr=o("This class cannot be instantiated directly using "),QMe=a("code"),gqr=o("__init__()"),hqr=o(" (throws an error)."),pqr=l(),Qt=a("div"),F(ax.$$.fragment),uqr=l(),HMe=a("p"),_qr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bqr=l(),Jc=a("p"),vqr=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),Fqr=o("not"),Tqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" to load the model weights."),Cqr=l(),F(gw.$$.fragment),wqr=l(),zr=a("div"),F(nx.$$.fragment),Aqr=l(),JMe=a("p"),yqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lqr=l(),Fn=a("p"),xqr=o("The model class to instantiate is selected based on the "),YMe=a("code"),$qr=o("model_type"),kqr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),Sqr=o("pretrained_model_name_or_path"),Rqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),Pqr=o("pretrained_model_name_or_path"),Bqr=o(":"),Iqr=l(),$e=a("ul"),hw=a("li"),eEe=a("strong"),qqr=o("albert"),Nqr=o(" \u2014 "),wK=a("a"),jqr=o("FlaxAlbertForQuestionAnswering"),Dqr=o(" (ALBERT model)"),Gqr=l(),pw=a("li"),oEe=a("strong"),Oqr=o("bart"),Vqr=o(" \u2014 "),AK=a("a"),Xqr=o("FlaxBartForQuestionAnswering"),zqr=o(" (BART model)"),Wqr=l(),uw=a("li"),rEe=a("strong"),Qqr=o("bert"),Hqr=o(" \u2014 "),yK=a("a"),Uqr=o("FlaxBertForQuestionAnswering"),Jqr=o(" (BERT model)"),Yqr=l(),_w=a("li"),tEe=a("strong"),Kqr=o("big_bird"),Zqr=o(" \u2014 "),LK=a("a"),eNr=o("FlaxBigBirdForQuestionAnswering"),oNr=o(" (BigBird model)"),rNr=l(),bw=a("li"),aEe=a("strong"),tNr=o("distilbert"),aNr=o(" \u2014 "),xK=a("a"),nNr=o("FlaxDistilBertForQuestionAnswering"),sNr=o(" (DistilBERT model)"),lNr=l(),vw=a("li"),nEe=a("strong"),iNr=o("electra"),dNr=o(" \u2014 "),$K=a("a"),cNr=o("FlaxElectraForQuestionAnswering"),fNr=o(" (ELECTRA model)"),mNr=l(),Fw=a("li"),sEe=a("strong"),gNr=o("mbart"),hNr=o(" \u2014 "),kK=a("a"),pNr=o("FlaxMBartForQuestionAnswering"),uNr=o(" (mBART model)"),_Nr=l(),Tw=a("li"),lEe=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),SK=a("a"),FNr=o("FlaxRobertaForQuestionAnswering"),TNr=o(" (RoBERTa model)"),MNr=l(),Mw=a("li"),iEe=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),RK=a("a"),wNr=o("FlaxRoFormerForQuestionAnswering"),ANr=o(" (RoFormer model)"),yNr=l(),Ew=a("li"),dEe=a("strong"),LNr=o("xlm-roberta"),xNr=o(" \u2014 "),PK=a("a"),$Nr=o("FlaxXLMRobertaForQuestionAnswering"),kNr=o(" (XLM-RoBERTa model)"),SNr=l(),F(Cw.$$.fragment),Wje=l(),Yc=a("h2"),ww=a("a"),cEe=a("span"),F(sx.$$.fragment),RNr=l(),fEe=a("span"),PNr=o("FlaxAutoModelForTokenClassification"),Qje=l(),br=a("div"),F(lx.$$.fragment),BNr=l(),Kc=a("p"),INr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BK=a("a"),qNr=o("from_pretrained()"),NNr=o(" class method or the "),IK=a("a"),jNr=o("from_config()"),DNr=o(` class
method.`),GNr=l(),ix=a("p"),ONr=o("This class cannot be instantiated directly using "),mEe=a("code"),VNr=o("__init__()"),XNr=o(" (throws an error)."),zNr=l(),Ht=a("div"),F(dx.$$.fragment),WNr=l(),gEe=a("p"),QNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HNr=l(),Zc=a("p"),UNr=o(`Note:
Loading a model from its configuration file does `),hEe=a("strong"),JNr=o("not"),YNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),KNr=o("from_pretrained()"),ZNr=o(" to load the model weights."),ejr=l(),F(Aw.$$.fragment),ojr=l(),Wr=a("div"),F(cx.$$.fragment),rjr=l(),pEe=a("p"),tjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ajr=l(),Tn=a("p"),njr=o("The model class to instantiate is selected based on the "),uEe=a("code"),sjr=o("model_type"),ljr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=a("code"),cjr=o("pretrained_model_name_or_path"),fjr=o(":"),mjr=l(),De=a("ul"),yw=a("li"),vEe=a("strong"),gjr=o("albert"),hjr=o(" \u2014 "),NK=a("a"),pjr=o("FlaxAlbertForTokenClassification"),ujr=o(" (ALBERT model)"),_jr=l(),Lw=a("li"),FEe=a("strong"),bjr=o("bert"),vjr=o(" \u2014 "),jK=a("a"),Fjr=o("FlaxBertForTokenClassification"),Tjr=o(" (BERT model)"),Mjr=l(),xw=a("li"),TEe=a("strong"),Ejr=o("big_bird"),Cjr=o(" \u2014 "),DK=a("a"),wjr=o("FlaxBigBirdForTokenClassification"),Ajr=o(" (BigBird model)"),yjr=l(),$w=a("li"),MEe=a("strong"),Ljr=o("distilbert"),xjr=o(" \u2014 "),GK=a("a"),$jr=o("FlaxDistilBertForTokenClassification"),kjr=o(" (DistilBERT model)"),Sjr=l(),kw=a("li"),EEe=a("strong"),Rjr=o("electra"),Pjr=o(" \u2014 "),OK=a("a"),Bjr=o("FlaxElectraForTokenClassification"),Ijr=o(" (ELECTRA model)"),qjr=l(),Sw=a("li"),CEe=a("strong"),Njr=o("roberta"),jjr=o(" \u2014 "),VK=a("a"),Djr=o("FlaxRobertaForTokenClassification"),Gjr=o(" (RoBERTa model)"),Ojr=l(),Rw=a("li"),wEe=a("strong"),Vjr=o("roformer"),Xjr=o(" \u2014 "),XK=a("a"),zjr=o("FlaxRoFormerForTokenClassification"),Wjr=o(" (RoFormer model)"),Qjr=l(),Pw=a("li"),AEe=a("strong"),Hjr=o("xlm-roberta"),Ujr=o(" \u2014 "),zK=a("a"),Jjr=o("FlaxXLMRobertaForTokenClassification"),Yjr=o(" (XLM-RoBERTa model)"),Kjr=l(),F(Bw.$$.fragment),Hje=l(),ef=a("h2"),Iw=a("a"),yEe=a("span"),F(fx.$$.fragment),Zjr=l(),LEe=a("span"),eDr=o("FlaxAutoModelForMultipleChoice"),Uje=l(),vr=a("div"),F(mx.$$.fragment),oDr=l(),of=a("p"),rDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WK=a("a"),tDr=o("from_pretrained()"),aDr=o(" class method or the "),QK=a("a"),nDr=o("from_config()"),sDr=o(` class
method.`),lDr=l(),gx=a("p"),iDr=o("This class cannot be instantiated directly using "),xEe=a("code"),dDr=o("__init__()"),cDr=o(" (throws an error)."),fDr=l(),Ut=a("div"),F(hx.$$.fragment),mDr=l(),$Ee=a("p"),gDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hDr=l(),rf=a("p"),pDr=o(`Note:
Loading a model from its configuration file does `),kEe=a("strong"),uDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),bDr=o("from_pretrained()"),vDr=o(" to load the model weights."),FDr=l(),F(qw.$$.fragment),TDr=l(),Qr=a("div"),F(px.$$.fragment),MDr=l(),SEe=a("p"),EDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CDr=l(),Mn=a("p"),wDr=o("The model class to instantiate is selected based on the "),REe=a("code"),ADr=o("model_type"),yDr=o(` property of the config object (either
passed as an argument or loaded from `),PEe=a("code"),LDr=o("pretrained_model_name_or_path"),xDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=a("code"),$Dr=o("pretrained_model_name_or_path"),kDr=o(":"),SDr=l(),Ge=a("ul"),Nw=a("li"),IEe=a("strong"),RDr=o("albert"),PDr=o(" \u2014 "),UK=a("a"),BDr=o("FlaxAlbertForMultipleChoice"),IDr=o(" (ALBERT model)"),qDr=l(),jw=a("li"),qEe=a("strong"),NDr=o("bert"),jDr=o(" \u2014 "),JK=a("a"),DDr=o("FlaxBertForMultipleChoice"),GDr=o(" (BERT model)"),ODr=l(),Dw=a("li"),NEe=a("strong"),VDr=o("big_bird"),XDr=o(" \u2014 "),YK=a("a"),zDr=o("FlaxBigBirdForMultipleChoice"),WDr=o(" (BigBird model)"),QDr=l(),Gw=a("li"),jEe=a("strong"),HDr=o("distilbert"),UDr=o(" \u2014 "),KK=a("a"),JDr=o("FlaxDistilBertForMultipleChoice"),YDr=o(" (DistilBERT model)"),KDr=l(),Ow=a("li"),DEe=a("strong"),ZDr=o("electra"),eGr=o(" \u2014 "),ZK=a("a"),oGr=o("FlaxElectraForMultipleChoice"),rGr=o(" (ELECTRA model)"),tGr=l(),Vw=a("li"),GEe=a("strong"),aGr=o("roberta"),nGr=o(" \u2014 "),eZ=a("a"),sGr=o("FlaxRobertaForMultipleChoice"),lGr=o(" (RoBERTa model)"),iGr=l(),Xw=a("li"),OEe=a("strong"),dGr=o("roformer"),cGr=o(" \u2014 "),oZ=a("a"),fGr=o("FlaxRoFormerForMultipleChoice"),mGr=o(" (RoFormer model)"),gGr=l(),zw=a("li"),VEe=a("strong"),hGr=o("xlm-roberta"),pGr=o(" \u2014 "),rZ=a("a"),uGr=o("FlaxXLMRobertaForMultipleChoice"),_Gr=o(" (XLM-RoBERTa model)"),bGr=l(),F(Ww.$$.fragment),Jje=l(),tf=a("h2"),Qw=a("a"),XEe=a("span"),F(ux.$$.fragment),vGr=l(),zEe=a("span"),FGr=o("FlaxAutoModelForNextSentencePrediction"),Yje=l(),Fr=a("div"),F(_x.$$.fragment),TGr=l(),af=a("p"),MGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tZ=a("a"),EGr=o("from_pretrained()"),CGr=o(" class method or the "),aZ=a("a"),wGr=o("from_config()"),AGr=o(` class
method.`),yGr=l(),bx=a("p"),LGr=o("This class cannot be instantiated directly using "),WEe=a("code"),xGr=o("__init__()"),$Gr=o(" (throws an error)."),kGr=l(),Jt=a("div"),F(vx.$$.fragment),SGr=l(),QEe=a("p"),RGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PGr=l(),nf=a("p"),BGr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),IGr=o("not"),qGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),NGr=o("from_pretrained()"),jGr=o(" to load the model weights."),DGr=l(),F(Hw.$$.fragment),GGr=l(),Hr=a("div"),F(Fx.$$.fragment),OGr=l(),UEe=a("p"),VGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XGr=l(),En=a("p"),zGr=o("The model class to instantiate is selected based on the "),JEe=a("code"),WGr=o("model_type"),QGr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),HGr=o("pretrained_model_name_or_path"),UGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),JGr=o("pretrained_model_name_or_path"),YGr=o(":"),KGr=l(),ZEe=a("ul"),Uw=a("li"),eCe=a("strong"),ZGr=o("bert"),eOr=o(" \u2014 "),sZ=a("a"),oOr=o("FlaxBertForNextSentencePrediction"),rOr=o(" (BERT model)"),tOr=l(),F(Jw.$$.fragment),Kje=l(),sf=a("h2"),Yw=a("a"),oCe=a("span"),F(Tx.$$.fragment),aOr=l(),rCe=a("span"),nOr=o("FlaxAutoModelForImageClassification"),Zje=l(),Tr=a("div"),F(Mx.$$.fragment),sOr=l(),lf=a("p"),lOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lZ=a("a"),iOr=o("from_pretrained()"),dOr=o(" class method or the "),iZ=a("a"),cOr=o("from_config()"),fOr=o(` class
method.`),mOr=l(),Ex=a("p"),gOr=o("This class cannot be instantiated directly using "),tCe=a("code"),hOr=o("__init__()"),pOr=o(" (throws an error)."),uOr=l(),Yt=a("div"),F(Cx.$$.fragment),_Or=l(),aCe=a("p"),bOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vOr=l(),df=a("p"),FOr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),TOr=o("not"),MOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),EOr=o("from_pretrained()"),COr=o(" to load the model weights."),wOr=l(),F(Kw.$$.fragment),AOr=l(),Ur=a("div"),F(wx.$$.fragment),yOr=l(),sCe=a("p"),LOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xOr=l(),Cn=a("p"),$Or=o("The model class to instantiate is selected based on the "),lCe=a("code"),kOr=o("model_type"),SOr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),ROr=o("pretrained_model_name_or_path"),POr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),BOr=o("pretrained_model_name_or_path"),IOr=o(":"),qOr=l(),Ax=a("ul"),Zw=a("li"),cCe=a("strong"),NOr=o("beit"),jOr=o(" \u2014 "),cZ=a("a"),DOr=o("FlaxBeitForImageClassification"),GOr=o(" (BEiT model)"),OOr=l(),e0=a("li"),fCe=a("strong"),VOr=o("vit"),XOr=o(" \u2014 "),fZ=a("a"),zOr=o("FlaxViTForImageClassification"),WOr=o(" (ViT model)"),QOr=l(),F(o0.$$.fragment),eDe=l(),cf=a("h2"),r0=a("a"),mCe=a("span"),F(yx.$$.fragment),HOr=l(),gCe=a("span"),UOr=o("FlaxAutoModelForVision2Seq"),oDe=l(),Mr=a("div"),F(Lx.$$.fragment),JOr=l(),ff=a("p"),YOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mZ=a("a"),KOr=o("from_pretrained()"),ZOr=o(" class method or the "),gZ=a("a"),eVr=o("from_config()"),oVr=o(` class
method.`),rVr=l(),xx=a("p"),tVr=o("This class cannot be instantiated directly using "),hCe=a("code"),aVr=o("__init__()"),nVr=o(" (throws an error)."),sVr=l(),Kt=a("div"),F($x.$$.fragment),lVr=l(),pCe=a("p"),iVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dVr=l(),mf=a("p"),cVr=o(`Note:
Loading a model from its configuration file does `),uCe=a("strong"),fVr=o("not"),mVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=a("a"),gVr=o("from_pretrained()"),hVr=o(" to load the model weights."),pVr=l(),F(t0.$$.fragment),uVr=l(),Jr=a("div"),F(kx.$$.fragment),_Vr=l(),_Ce=a("p"),bVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vVr=l(),wn=a("p"),FVr=o("The model class to instantiate is selected based on the "),bCe=a("code"),TVr=o("model_type"),MVr=o(` property of the config object (either
passed as an argument or loaded from `),vCe=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=a("code"),wVr=o("pretrained_model_name_or_path"),AVr=o(":"),yVr=l(),TCe=a("ul"),a0=a("li"),MCe=a("strong"),LVr=o("vision-encoder-decoder"),xVr=o(" \u2014 "),pZ=a("a"),$Vr=o("FlaxVisionEncoderDecoderModel"),kVr=o(" (Vision Encoder decoder model)"),SVr=l(),F(n0.$$.fragment),this.h()},l(f){const _=g$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Sx=s(p);m=n(Sx,"A",{id:!0,class:!0,href:!0});var ECe=s(m);u=n(ECe,"SPAN",{});var CCe=s(u);T(d.$$.fragment,CCe),CCe.forEach(t),ECe.forEach(t),h=i(Sx),Mo=n(Sx,"SPAN",{});var wCe=s(Mo);mi=r(wCe,"Auto Classes"),wCe.forEach(t),Sx.forEach(t),uf=i(f),rt=n(f,"P",{});var Rx=s(rt);gi=r(Rx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Rx,"CODE",{});var ACe=s(hi);EA=r(ACe,"from_pretrained()"),ACe.forEach(t),_f=r(Rx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Rx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var yCe=s(yn);CA=r(yCe,"AutoConfig"),yCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var LCe=s(xn);wA=r(LCe,"AutoModel"),LCe.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var xCe=s($n);AA=r(xCe,"AutoTokenizer"),xCe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Px=s(Ae);W$=r(Px,"will create a model that is an instance of "),bi=n(Px,"A",{href:!0});var $Ce=s(bi);Q$=r($Ce,"BertModel"),$Ce.forEach(t),H$=r(Px,"."),Px.forEach(t),Eo=i(f),wa=n(f,"P",{});var Bx=s(wa);U$=r(Bx,"There is one class of "),vf=n(Bx,"CODE",{});var kCe=s(vf);J$=r(kCe,"AutoModel"),kCe.forEach(t),cOe=r(Bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bx.forEach(t),Zqe=i(f),vi=n(f,"H2",{class:!0});var Ix=s(vi);Ff=n(Ix,"A",{id:!0,class:!0,href:!0});var SCe=s(Ff);ioe=n(SCe,"SPAN",{});var RCe=s(ioe);T(yA.$$.fragment,RCe),RCe.forEach(t),SCe.forEach(t),fOe=i(Ix),doe=n(Ix,"SPAN",{});var PCe=s(doe);mOe=r(PCe,"Extending the Auto Classes"),PCe.forEach(t),Ix.forEach(t),eNe=i(f),kn=n(f,"P",{});var gf=s(kn);gOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),coe=n(gf,"CODE",{});var BCe=s(coe);hOe=r(BCe,"NewModel"),BCe.forEach(t),pOe=r(gf,", make sure you have a "),foe=n(gf,"CODE",{});var ICe=s(foe);uOe=r(ICe,"NewModelConfig"),ICe.forEach(t),_Oe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),oNe=i(f),T(LA.$$.fragment,f),rNe=i(f),Y$=n(f,"P",{});var qCe=s(Y$);bOe=r(qCe,"You will then be able to use the auto classes like you would usually do!"),qCe.forEach(t),tNe=i(f),T(Tf.$$.fragment,f),aNe=i(f),Fi=n(f,"H2",{class:!0});var qx=s(Fi);Mf=n(qx,"A",{id:!0,class:!0,href:!0});var NCe=s(Mf);moe=n(NCe,"SPAN",{});var jCe=s(moe);T(xA.$$.fragment,jCe),jCe.forEach(t),NCe.forEach(t),vOe=i(qx),goe=n(qx,"SPAN",{});var DCe=s(goe);FOe=r(DCe,"AutoConfig"),DCe.forEach(t),qx.forEach(t),nNe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T($A.$$.fragment,et),TOe=i(et),kA=n(et,"P",{});var Nx=s(kA);MOe=r(Nx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),K$=n(Nx,"A",{href:!0});var GCe=s(K$);EOe=r(GCe,"from_pretrained()"),GCe.forEach(t),COe=r(Nx," class method."),Nx.forEach(t),wOe=i(et),SA=n(et,"P",{});var jx=s(SA);AOe=r(jx,"This class cannot be instantiated directly using "),hoe=n(jx,"CODE",{});var OCe=s(hoe);yOe=r(OCe,"__init__()"),OCe.forEach(t),LOe=r(jx," (throws an error)."),jx.forEach(t),xOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(RA.$$.fragment,ot),$Oe=i(ot),poe=n(ot,"P",{});var VCe=s(poe);kOe=r(VCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),VCe.forEach(t),SOe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);ROe=r(hf,"The configuration class to instantiate is selected based on the "),uoe=n(hf,"CODE",{});var XCe=s(uoe);POe=r(XCe,"model_type"),XCe.forEach(t),BOe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_oe=n(hf,"CODE",{});var zCe=s(_oe);IOe=r(zCe,"pretrained_model_name_or_path"),zCe.forEach(t),qOe=r(hf,":"),hf.forEach(t),NOe=i(ot),A=n(ot,"UL",{});var y=s(A);Ef=n(y,"LI",{});var s0=s(Ef);boe=n(s0,"STRONG",{});var WCe=s(boe);jOe=r(WCe,"albert"),WCe.forEach(t),DOe=r(s0," \u2014 "),Z$=n(s0,"A",{href:!0});var QCe=s(Z$);GOe=r(QCe,"AlbertConfig"),QCe.forEach(t),OOe=r(s0," (ALBERT model)"),s0.forEach(t),VOe=i(y),Cf=n(y,"LI",{});var l0=s(Cf);voe=n(l0,"STRONG",{});var HCe=s(voe);XOe=r(HCe,"bart"),HCe.forEach(t),zOe=r(l0," \u2014 "),ek=n(l0,"A",{href:!0});var UCe=s(ek);WOe=r(UCe,"BartConfig"),UCe.forEach(t),QOe=r(l0," (BART model)"),l0.forEach(t),HOe=i(y),wf=n(y,"LI",{});var i0=s(wf);Foe=n(i0,"STRONG",{});var JCe=s(Foe);UOe=r(JCe,"beit"),JCe.forEach(t),JOe=r(i0," \u2014 "),ok=n(i0,"A",{href:!0});var YCe=s(ok);YOe=r(YCe,"BeitConfig"),YCe.forEach(t),KOe=r(i0," (BEiT model)"),i0.forEach(t),ZOe=i(y),Af=n(y,"LI",{});var d0=s(Af);Toe=n(d0,"STRONG",{});var KCe=s(Toe);eVe=r(KCe,"bert"),KCe.forEach(t),oVe=r(d0," \u2014 "),rk=n(d0,"A",{href:!0});var ZCe=s(rk);rVe=r(ZCe,"BertConfig"),ZCe.forEach(t),tVe=r(d0," (BERT model)"),d0.forEach(t),aVe=i(y),yf=n(y,"LI",{});var c0=s(yf);Moe=n(c0,"STRONG",{});var e3e=s(Moe);nVe=r(e3e,"bert-generation"),e3e.forEach(t),sVe=r(c0," \u2014 "),tk=n(c0,"A",{href:!0});var o3e=s(tk);lVe=r(o3e,"BertGenerationConfig"),o3e.forEach(t),iVe=r(c0," (Bert Generation model)"),c0.forEach(t),dVe=i(y),Lf=n(y,"LI",{});var f0=s(Lf);Eoe=n(f0,"STRONG",{});var r3e=s(Eoe);cVe=r(r3e,"big_bird"),r3e.forEach(t),fVe=r(f0," \u2014 "),ak=n(f0,"A",{href:!0});var t3e=s(ak);mVe=r(t3e,"BigBirdConfig"),t3e.forEach(t),gVe=r(f0," (BigBird model)"),f0.forEach(t),hVe=i(y),xf=n(y,"LI",{});var m0=s(xf);Coe=n(m0,"STRONG",{});var a3e=s(Coe);pVe=r(a3e,"bigbird_pegasus"),a3e.forEach(t),uVe=r(m0," \u2014 "),nk=n(m0,"A",{href:!0});var n3e=s(nk);_Ve=r(n3e,"BigBirdPegasusConfig"),n3e.forEach(t),bVe=r(m0," (BigBirdPegasus model)"),m0.forEach(t),vVe=i(y),$f=n(y,"LI",{});var g0=s($f);woe=n(g0,"STRONG",{});var s3e=s(woe);FVe=r(s3e,"blenderbot"),s3e.forEach(t),TVe=r(g0," \u2014 "),sk=n(g0,"A",{href:!0});var l3e=s(sk);MVe=r(l3e,"BlenderbotConfig"),l3e.forEach(t),EVe=r(g0," (Blenderbot model)"),g0.forEach(t),CVe=i(y),kf=n(y,"LI",{});var h0=s(kf);Aoe=n(h0,"STRONG",{});var i3e=s(Aoe);wVe=r(i3e,"blenderbot-small"),i3e.forEach(t),AVe=r(h0," \u2014 "),lk=n(h0,"A",{href:!0});var d3e=s(lk);yVe=r(d3e,"BlenderbotSmallConfig"),d3e.forEach(t),LVe=r(h0," (BlenderbotSmall model)"),h0.forEach(t),xVe=i(y),Sf=n(y,"LI",{});var p0=s(Sf);yoe=n(p0,"STRONG",{});var c3e=s(yoe);$Ve=r(c3e,"camembert"),c3e.forEach(t),kVe=r(p0," \u2014 "),ik=n(p0,"A",{href:!0});var f3e=s(ik);SVe=r(f3e,"CamembertConfig"),f3e.forEach(t),RVe=r(p0," (CamemBERT model)"),p0.forEach(t),PVe=i(y),Rf=n(y,"LI",{});var u0=s(Rf);Loe=n(u0,"STRONG",{});var m3e=s(Loe);BVe=r(m3e,"canine"),m3e.forEach(t),IVe=r(u0," \u2014 "),dk=n(u0,"A",{href:!0});var g3e=s(dk);qVe=r(g3e,"CanineConfig"),g3e.forEach(t),NVe=r(u0," (Canine model)"),u0.forEach(t),jVe=i(y),Pf=n(y,"LI",{});var _0=s(Pf);xoe=n(_0,"STRONG",{});var h3e=s(xoe);DVe=r(h3e,"clip"),h3e.forEach(t),GVe=r(_0," \u2014 "),ck=n(_0,"A",{href:!0});var p3e=s(ck);OVe=r(p3e,"CLIPConfig"),p3e.forEach(t),VVe=r(_0," (CLIP model)"),_0.forEach(t),XVe=i(y),Bf=n(y,"LI",{});var b0=s(Bf);$oe=n(b0,"STRONG",{});var u3e=s($oe);zVe=r(u3e,"convbert"),u3e.forEach(t),WVe=r(b0," \u2014 "),fk=n(b0,"A",{href:!0});var _3e=s(fk);QVe=r(_3e,"ConvBertConfig"),_3e.forEach(t),HVe=r(b0," (ConvBERT model)"),b0.forEach(t),UVe=i(y),If=n(y,"LI",{});var v0=s(If);koe=n(v0,"STRONG",{});var b3e=s(koe);JVe=r(b3e,"convnext"),b3e.forEach(t),YVe=r(v0," \u2014 "),mk=n(v0,"A",{href:!0});var v3e=s(mk);KVe=r(v3e,"ConvNextConfig"),v3e.forEach(t),ZVe=r(v0," (ConvNext model)"),v0.forEach(t),eXe=i(y),qf=n(y,"LI",{});var F0=s(qf);Soe=n(F0,"STRONG",{});var F3e=s(Soe);oXe=r(F3e,"ctrl"),F3e.forEach(t),rXe=r(F0," \u2014 "),gk=n(F0,"A",{href:!0});var T3e=s(gk);tXe=r(T3e,"CTRLConfig"),T3e.forEach(t),aXe=r(F0," (CTRL model)"),F0.forEach(t),nXe=i(y),Nf=n(y,"LI",{});var T0=s(Nf);Roe=n(T0,"STRONG",{});var M3e=s(Roe);sXe=r(M3e,"cvt"),M3e.forEach(t),lXe=r(T0," \u2014 "),hk=n(T0,"A",{href:!0});var E3e=s(hk);iXe=r(E3e,"CvtConfig"),E3e.forEach(t),dXe=r(T0," (CvT model)"),T0.forEach(t),cXe=i(y),jf=n(y,"LI",{});var M0=s(jf);Poe=n(M0,"STRONG",{});var C3e=s(Poe);fXe=r(C3e,"data2vec-audio"),C3e.forEach(t),mXe=r(M0," \u2014 "),pk=n(M0,"A",{href:!0});var w3e=s(pk);gXe=r(w3e,"Data2VecAudioConfig"),w3e.forEach(t),hXe=r(M0," (Data2VecAudio model)"),M0.forEach(t),pXe=i(y),Df=n(y,"LI",{});var E0=s(Df);Boe=n(E0,"STRONG",{});var A3e=s(Boe);uXe=r(A3e,"data2vec-text"),A3e.forEach(t),_Xe=r(E0," \u2014 "),uk=n(E0,"A",{href:!0});var y3e=s(uk);bXe=r(y3e,"Data2VecTextConfig"),y3e.forEach(t),vXe=r(E0," (Data2VecText model)"),E0.forEach(t),FXe=i(y),Gf=n(y,"LI",{});var C0=s(Gf);Ioe=n(C0,"STRONG",{});var L3e=s(Ioe);TXe=r(L3e,"data2vec-vision"),L3e.forEach(t),MXe=r(C0," \u2014 "),_k=n(C0,"A",{href:!0});var x3e=s(_k);EXe=r(x3e,"Data2VecVisionConfig"),x3e.forEach(t),CXe=r(C0," (Data2VecVision model)"),C0.forEach(t),wXe=i(y),Of=n(y,"LI",{});var w0=s(Of);qoe=n(w0,"STRONG",{});var $3e=s(qoe);AXe=r($3e,"deberta"),$3e.forEach(t),yXe=r(w0," \u2014 "),bk=n(w0,"A",{href:!0});var k3e=s(bk);LXe=r(k3e,"DebertaConfig"),k3e.forEach(t),xXe=r(w0," (DeBERTa model)"),w0.forEach(t),$Xe=i(y),Vf=n(y,"LI",{});var A0=s(Vf);Noe=n(A0,"STRONG",{});var S3e=s(Noe);kXe=r(S3e,"deberta-v2"),S3e.forEach(t),SXe=r(A0," \u2014 "),vk=n(A0,"A",{href:!0});var R3e=s(vk);RXe=r(R3e,"DebertaV2Config"),R3e.forEach(t),PXe=r(A0," (DeBERTa-v2 model)"),A0.forEach(t),BXe=i(y),Xf=n(y,"LI",{});var y0=s(Xf);joe=n(y0,"STRONG",{});var P3e=s(joe);IXe=r(P3e,"decision_transformer"),P3e.forEach(t),qXe=r(y0," \u2014 "),Fk=n(y0,"A",{href:!0});var B3e=s(Fk);NXe=r(B3e,"DecisionTransformerConfig"),B3e.forEach(t),jXe=r(y0," (Decision Transformer model)"),y0.forEach(t),DXe=i(y),zf=n(y,"LI",{});var L0=s(zf);Doe=n(L0,"STRONG",{});var I3e=s(Doe);GXe=r(I3e,"deit"),I3e.forEach(t),OXe=r(L0," \u2014 "),Tk=n(L0,"A",{href:!0});var PVr=s(Tk);VXe=r(PVr,"DeiTConfig"),PVr.forEach(t),XXe=r(L0," (DeiT model)"),L0.forEach(t),zXe=i(y),Wf=n(y,"LI",{});var q3e=s(Wf);Goe=n(q3e,"STRONG",{});var BVr=s(Goe);WXe=r(BVr,"detr"),BVr.forEach(t),QXe=r(q3e," \u2014 "),Mk=n(q3e,"A",{href:!0});var IVr=s(Mk);HXe=r(IVr,"DetrConfig"),IVr.forEach(t),UXe=r(q3e," (DETR model)"),q3e.forEach(t),JXe=i(y),Qf=n(y,"LI",{});var N3e=s(Qf);Ooe=n(N3e,"STRONG",{});var qVr=s(Ooe);YXe=r(qVr,"distilbert"),qVr.forEach(t),KXe=r(N3e," \u2014 "),Ek=n(N3e,"A",{href:!0});var NVr=s(Ek);ZXe=r(NVr,"DistilBertConfig"),NVr.forEach(t),eze=r(N3e," (DistilBERT model)"),N3e.forEach(t),oze=i(y),Hf=n(y,"LI",{});var j3e=s(Hf);Voe=n(j3e,"STRONG",{});var jVr=s(Voe);rze=r(jVr,"dpr"),jVr.forEach(t),tze=r(j3e," \u2014 "),Ck=n(j3e,"A",{href:!0});var DVr=s(Ck);aze=r(DVr,"DPRConfig"),DVr.forEach(t),nze=r(j3e," (DPR model)"),j3e.forEach(t),sze=i(y),Uf=n(y,"LI",{});var D3e=s(Uf);Xoe=n(D3e,"STRONG",{});var GVr=s(Xoe);lze=r(GVr,"dpt"),GVr.forEach(t),ize=r(D3e," \u2014 "),wk=n(D3e,"A",{href:!0});var OVr=s(wk);dze=r(OVr,"DPTConfig"),OVr.forEach(t),cze=r(D3e," (DPT model)"),D3e.forEach(t),fze=i(y),Jf=n(y,"LI",{});var G3e=s(Jf);zoe=n(G3e,"STRONG",{});var VVr=s(zoe);mze=r(VVr,"electra"),VVr.forEach(t),gze=r(G3e," \u2014 "),Ak=n(G3e,"A",{href:!0});var XVr=s(Ak);hze=r(XVr,"ElectraConfig"),XVr.forEach(t),pze=r(G3e," (ELECTRA model)"),G3e.forEach(t),uze=i(y),Yf=n(y,"LI",{});var O3e=s(Yf);Woe=n(O3e,"STRONG",{});var zVr=s(Woe);_ze=r(zVr,"encoder-decoder"),zVr.forEach(t),bze=r(O3e," \u2014 "),yk=n(O3e,"A",{href:!0});var WVr=s(yk);vze=r(WVr,"EncoderDecoderConfig"),WVr.forEach(t),Fze=r(O3e," (Encoder decoder model)"),O3e.forEach(t),Tze=i(y),Kf=n(y,"LI",{});var V3e=s(Kf);Qoe=n(V3e,"STRONG",{});var QVr=s(Qoe);Mze=r(QVr,"flaubert"),QVr.forEach(t),Eze=r(V3e," \u2014 "),Lk=n(V3e,"A",{href:!0});var HVr=s(Lk);Cze=r(HVr,"FlaubertConfig"),HVr.forEach(t),wze=r(V3e," (FlauBERT model)"),V3e.forEach(t),Aze=i(y),Zf=n(y,"LI",{});var X3e=s(Zf);Hoe=n(X3e,"STRONG",{});var UVr=s(Hoe);yze=r(UVr,"flava"),UVr.forEach(t),Lze=r(X3e," \u2014 "),xk=n(X3e,"A",{href:!0});var JVr=s(xk);xze=r(JVr,"FlavaConfig"),JVr.forEach(t),$ze=r(X3e," (Flava model)"),X3e.forEach(t),kze=i(y),em=n(y,"LI",{});var z3e=s(em);Uoe=n(z3e,"STRONG",{});var YVr=s(Uoe);Sze=r(YVr,"fnet"),YVr.forEach(t),Rze=r(z3e," \u2014 "),$k=n(z3e,"A",{href:!0});var KVr=s($k);Pze=r(KVr,"FNetConfig"),KVr.forEach(t),Bze=r(z3e," (FNet model)"),z3e.forEach(t),Ize=i(y),om=n(y,"LI",{});var W3e=s(om);Joe=n(W3e,"STRONG",{});var ZVr=s(Joe);qze=r(ZVr,"fsmt"),ZVr.forEach(t),Nze=r(W3e," \u2014 "),kk=n(W3e,"A",{href:!0});var eXr=s(kk);jze=r(eXr,"FSMTConfig"),eXr.forEach(t),Dze=r(W3e," (FairSeq Machine-Translation model)"),W3e.forEach(t),Gze=i(y),rm=n(y,"LI",{});var Q3e=s(rm);Yoe=n(Q3e,"STRONG",{});var oXr=s(Yoe);Oze=r(oXr,"funnel"),oXr.forEach(t),Vze=r(Q3e," \u2014 "),Sk=n(Q3e,"A",{href:!0});var rXr=s(Sk);Xze=r(rXr,"FunnelConfig"),rXr.forEach(t),zze=r(Q3e," (Funnel Transformer model)"),Q3e.forEach(t),Wze=i(y),tm=n(y,"LI",{});var H3e=s(tm);Koe=n(H3e,"STRONG",{});var tXr=s(Koe);Qze=r(tXr,"glpn"),tXr.forEach(t),Hze=r(H3e," \u2014 "),Rk=n(H3e,"A",{href:!0});var aXr=s(Rk);Uze=r(aXr,"GLPNConfig"),aXr.forEach(t),Jze=r(H3e," (GLPN model)"),H3e.forEach(t),Yze=i(y),am=n(y,"LI",{});var U3e=s(am);Zoe=n(U3e,"STRONG",{});var nXr=s(Zoe);Kze=r(nXr,"gpt2"),nXr.forEach(t),Zze=r(U3e," \u2014 "),Pk=n(U3e,"A",{href:!0});var sXr=s(Pk);eWe=r(sXr,"GPT2Config"),sXr.forEach(t),oWe=r(U3e," (OpenAI GPT-2 model)"),U3e.forEach(t),rWe=i(y),nm=n(y,"LI",{});var J3e=s(nm);ere=n(J3e,"STRONG",{});var lXr=s(ere);tWe=r(lXr,"gpt_neo"),lXr.forEach(t),aWe=r(J3e," \u2014 "),Bk=n(J3e,"A",{href:!0});var iXr=s(Bk);nWe=r(iXr,"GPTNeoConfig"),iXr.forEach(t),sWe=r(J3e," (GPT Neo model)"),J3e.forEach(t),lWe=i(y),sm=n(y,"LI",{});var Y3e=s(sm);ore=n(Y3e,"STRONG",{});var dXr=s(ore);iWe=r(dXr,"gpt_neox"),dXr.forEach(t),dWe=r(Y3e," \u2014 "),Ik=n(Y3e,"A",{href:!0});var cXr=s(Ik);cWe=r(cXr,"GPTNeoXConfig"),cXr.forEach(t),fWe=r(Y3e," (GPT NeoX model)"),Y3e.forEach(t),mWe=i(y),lm=n(y,"LI",{});var K3e=s(lm);rre=n(K3e,"STRONG",{});var fXr=s(rre);gWe=r(fXr,"gptj"),fXr.forEach(t),hWe=r(K3e," \u2014 "),qk=n(K3e,"A",{href:!0});var mXr=s(qk);pWe=r(mXr,"GPTJConfig"),mXr.forEach(t),uWe=r(K3e," (GPT-J model)"),K3e.forEach(t),_We=i(y),im=n(y,"LI",{});var Z3e=s(im);tre=n(Z3e,"STRONG",{});var gXr=s(tre);bWe=r(gXr,"hubert"),gXr.forEach(t),vWe=r(Z3e," \u2014 "),Nk=n(Z3e,"A",{href:!0});var hXr=s(Nk);FWe=r(hXr,"HubertConfig"),hXr.forEach(t),TWe=r(Z3e," (Hubert model)"),Z3e.forEach(t),MWe=i(y),dm=n(y,"LI",{});var ewe=s(dm);are=n(ewe,"STRONG",{});var pXr=s(are);EWe=r(pXr,"ibert"),pXr.forEach(t),CWe=r(ewe," \u2014 "),jk=n(ewe,"A",{href:!0});var uXr=s(jk);wWe=r(uXr,"IBertConfig"),uXr.forEach(t),AWe=r(ewe," (I-BERT model)"),ewe.forEach(t),yWe=i(y),cm=n(y,"LI",{});var owe=s(cm);nre=n(owe,"STRONG",{});var _Xr=s(nre);LWe=r(_Xr,"imagegpt"),_Xr.forEach(t),xWe=r(owe," \u2014 "),Dk=n(owe,"A",{href:!0});var bXr=s(Dk);$We=r(bXr,"ImageGPTConfig"),bXr.forEach(t),kWe=r(owe," (ImageGPT model)"),owe.forEach(t),SWe=i(y),fm=n(y,"LI",{});var rwe=s(fm);sre=n(rwe,"STRONG",{});var vXr=s(sre);RWe=r(vXr,"layoutlm"),vXr.forEach(t),PWe=r(rwe," \u2014 "),Gk=n(rwe,"A",{href:!0});var FXr=s(Gk);BWe=r(FXr,"LayoutLMConfig"),FXr.forEach(t),IWe=r(rwe," (LayoutLM model)"),rwe.forEach(t),qWe=i(y),mm=n(y,"LI",{});var twe=s(mm);lre=n(twe,"STRONG",{});var TXr=s(lre);NWe=r(TXr,"layoutlmv2"),TXr.forEach(t),jWe=r(twe," \u2014 "),Ok=n(twe,"A",{href:!0});var MXr=s(Ok);DWe=r(MXr,"LayoutLMv2Config"),MXr.forEach(t),GWe=r(twe," (LayoutLMv2 model)"),twe.forEach(t),OWe=i(y),gm=n(y,"LI",{});var awe=s(gm);ire=n(awe,"STRONG",{});var EXr=s(ire);VWe=r(EXr,"layoutlmv3"),EXr.forEach(t),XWe=r(awe," \u2014 "),Vk=n(awe,"A",{href:!0});var CXr=s(Vk);zWe=r(CXr,"LayoutLMv3Config"),CXr.forEach(t),WWe=r(awe," (LayoutLMv3 model)"),awe.forEach(t),QWe=i(y),hm=n(y,"LI",{});var nwe=s(hm);dre=n(nwe,"STRONG",{});var wXr=s(dre);HWe=r(wXr,"led"),wXr.forEach(t),UWe=r(nwe," \u2014 "),Xk=n(nwe,"A",{href:!0});var AXr=s(Xk);JWe=r(AXr,"LEDConfig"),AXr.forEach(t),YWe=r(nwe," (LED model)"),nwe.forEach(t),KWe=i(y),pm=n(y,"LI",{});var swe=s(pm);cre=n(swe,"STRONG",{});var yXr=s(cre);ZWe=r(yXr,"longformer"),yXr.forEach(t),eQe=r(swe," \u2014 "),zk=n(swe,"A",{href:!0});var LXr=s(zk);oQe=r(LXr,"LongformerConfig"),LXr.forEach(t),rQe=r(swe," (Longformer model)"),swe.forEach(t),tQe=i(y),um=n(y,"LI",{});var lwe=s(um);fre=n(lwe,"STRONG",{});var xXr=s(fre);aQe=r(xXr,"luke"),xXr.forEach(t),nQe=r(lwe," \u2014 "),Wk=n(lwe,"A",{href:!0});var $Xr=s(Wk);sQe=r($Xr,"LukeConfig"),$Xr.forEach(t),lQe=r(lwe," (LUKE model)"),lwe.forEach(t),iQe=i(y),_m=n(y,"LI",{});var iwe=s(_m);mre=n(iwe,"STRONG",{});var kXr=s(mre);dQe=r(kXr,"lxmert"),kXr.forEach(t),cQe=r(iwe," \u2014 "),Qk=n(iwe,"A",{href:!0});var SXr=s(Qk);fQe=r(SXr,"LxmertConfig"),SXr.forEach(t),mQe=r(iwe," (LXMERT model)"),iwe.forEach(t),gQe=i(y),bm=n(y,"LI",{});var dwe=s(bm);gre=n(dwe,"STRONG",{});var RXr=s(gre);hQe=r(RXr,"m2m_100"),RXr.forEach(t),pQe=r(dwe," \u2014 "),Hk=n(dwe,"A",{href:!0});var PXr=s(Hk);uQe=r(PXr,"M2M100Config"),PXr.forEach(t),_Qe=r(dwe," (M2M100 model)"),dwe.forEach(t),bQe=i(y),vm=n(y,"LI",{});var cwe=s(vm);hre=n(cwe,"STRONG",{});var BXr=s(hre);vQe=r(BXr,"marian"),BXr.forEach(t),FQe=r(cwe," \u2014 "),Uk=n(cwe,"A",{href:!0});var IXr=s(Uk);TQe=r(IXr,"MarianConfig"),IXr.forEach(t),MQe=r(cwe," (Marian model)"),cwe.forEach(t),EQe=i(y),Fm=n(y,"LI",{});var fwe=s(Fm);pre=n(fwe,"STRONG",{});var qXr=s(pre);CQe=r(qXr,"maskformer"),qXr.forEach(t),wQe=r(fwe," \u2014 "),Jk=n(fwe,"A",{href:!0});var NXr=s(Jk);AQe=r(NXr,"MaskFormerConfig"),NXr.forEach(t),yQe=r(fwe," (MaskFormer model)"),fwe.forEach(t),LQe=i(y),Tm=n(y,"LI",{});var mwe=s(Tm);ure=n(mwe,"STRONG",{});var jXr=s(ure);xQe=r(jXr,"mbart"),jXr.forEach(t),$Qe=r(mwe," \u2014 "),Yk=n(mwe,"A",{href:!0});var DXr=s(Yk);kQe=r(DXr,"MBartConfig"),DXr.forEach(t),SQe=r(mwe," (mBART model)"),mwe.forEach(t),RQe=i(y),Mm=n(y,"LI",{});var gwe=s(Mm);_re=n(gwe,"STRONG",{});var GXr=s(_re);PQe=r(GXr,"megatron-bert"),GXr.forEach(t),BQe=r(gwe," \u2014 "),Kk=n(gwe,"A",{href:!0});var OXr=s(Kk);IQe=r(OXr,"MegatronBertConfig"),OXr.forEach(t),qQe=r(gwe," (MegatronBert model)"),gwe.forEach(t),NQe=i(y),Em=n(y,"LI",{});var hwe=s(Em);bre=n(hwe,"STRONG",{});var VXr=s(bre);jQe=r(VXr,"mobilebert"),VXr.forEach(t),DQe=r(hwe," \u2014 "),Zk=n(hwe,"A",{href:!0});var XXr=s(Zk);GQe=r(XXr,"MobileBertConfig"),XXr.forEach(t),OQe=r(hwe," (MobileBERT model)"),hwe.forEach(t),VQe=i(y),Cm=n(y,"LI",{});var pwe=s(Cm);vre=n(pwe,"STRONG",{});var zXr=s(vre);XQe=r(zXr,"mpnet"),zXr.forEach(t),zQe=r(pwe," \u2014 "),eS=n(pwe,"A",{href:!0});var WXr=s(eS);WQe=r(WXr,"MPNetConfig"),WXr.forEach(t),QQe=r(pwe," (MPNet model)"),pwe.forEach(t),HQe=i(y),wm=n(y,"LI",{});var uwe=s(wm);Fre=n(uwe,"STRONG",{});var QXr=s(Fre);UQe=r(QXr,"mt5"),QXr.forEach(t),JQe=r(uwe," \u2014 "),oS=n(uwe,"A",{href:!0});var HXr=s(oS);YQe=r(HXr,"MT5Config"),HXr.forEach(t),KQe=r(uwe," (mT5 model)"),uwe.forEach(t),ZQe=i(y),Am=n(y,"LI",{});var _we=s(Am);Tre=n(_we,"STRONG",{});var UXr=s(Tre);eHe=r(UXr,"nystromformer"),UXr.forEach(t),oHe=r(_we," \u2014 "),rS=n(_we,"A",{href:!0});var JXr=s(rS);rHe=r(JXr,"NystromformerConfig"),JXr.forEach(t),tHe=r(_we," (Nystromformer model)"),_we.forEach(t),aHe=i(y),ym=n(y,"LI",{});var bwe=s(ym);Mre=n(bwe,"STRONG",{});var YXr=s(Mre);nHe=r(YXr,"openai-gpt"),YXr.forEach(t),sHe=r(bwe," \u2014 "),tS=n(bwe,"A",{href:!0});var KXr=s(tS);lHe=r(KXr,"OpenAIGPTConfig"),KXr.forEach(t),iHe=r(bwe," (OpenAI GPT model)"),bwe.forEach(t),dHe=i(y),Lm=n(y,"LI",{});var vwe=s(Lm);Ere=n(vwe,"STRONG",{});var ZXr=s(Ere);cHe=r(ZXr,"opt"),ZXr.forEach(t),fHe=r(vwe," \u2014 "),aS=n(vwe,"A",{href:!0});var ezr=s(aS);mHe=r(ezr,"OPTConfig"),ezr.forEach(t),gHe=r(vwe," (OPT model)"),vwe.forEach(t),hHe=i(y),xm=n(y,"LI",{});var Fwe=s(xm);Cre=n(Fwe,"STRONG",{});var ozr=s(Cre);pHe=r(ozr,"pegasus"),ozr.forEach(t),uHe=r(Fwe," \u2014 "),nS=n(Fwe,"A",{href:!0});var rzr=s(nS);_He=r(rzr,"PegasusConfig"),rzr.forEach(t),bHe=r(Fwe," (Pegasus model)"),Fwe.forEach(t),vHe=i(y),$m=n(y,"LI",{});var Twe=s($m);wre=n(Twe,"STRONG",{});var tzr=s(wre);FHe=r(tzr,"perceiver"),tzr.forEach(t),THe=r(Twe," \u2014 "),sS=n(Twe,"A",{href:!0});var azr=s(sS);MHe=r(azr,"PerceiverConfig"),azr.forEach(t),EHe=r(Twe," (Perceiver model)"),Twe.forEach(t),CHe=i(y),km=n(y,"LI",{});var Mwe=s(km);Are=n(Mwe,"STRONG",{});var nzr=s(Are);wHe=r(nzr,"plbart"),nzr.forEach(t),AHe=r(Mwe," \u2014 "),lS=n(Mwe,"A",{href:!0});var szr=s(lS);yHe=r(szr,"PLBartConfig"),szr.forEach(t),LHe=r(Mwe," (PLBart model)"),Mwe.forEach(t),xHe=i(y),Sm=n(y,"LI",{});var Ewe=s(Sm);yre=n(Ewe,"STRONG",{});var lzr=s(yre);$He=r(lzr,"poolformer"),lzr.forEach(t),kHe=r(Ewe," \u2014 "),iS=n(Ewe,"A",{href:!0});var izr=s(iS);SHe=r(izr,"PoolFormerConfig"),izr.forEach(t),RHe=r(Ewe," (PoolFormer model)"),Ewe.forEach(t),PHe=i(y),Rm=n(y,"LI",{});var Cwe=s(Rm);Lre=n(Cwe,"STRONG",{});var dzr=s(Lre);BHe=r(dzr,"prophetnet"),dzr.forEach(t),IHe=r(Cwe," \u2014 "),dS=n(Cwe,"A",{href:!0});var czr=s(dS);qHe=r(czr,"ProphetNetConfig"),czr.forEach(t),NHe=r(Cwe," (ProphetNet model)"),Cwe.forEach(t),jHe=i(y),Pm=n(y,"LI",{});var wwe=s(Pm);xre=n(wwe,"STRONG",{});var fzr=s(xre);DHe=r(fzr,"qdqbert"),fzr.forEach(t),GHe=r(wwe," \u2014 "),cS=n(wwe,"A",{href:!0});var mzr=s(cS);OHe=r(mzr,"QDQBertConfig"),mzr.forEach(t),VHe=r(wwe," (QDQBert model)"),wwe.forEach(t),XHe=i(y),Bm=n(y,"LI",{});var Awe=s(Bm);$re=n(Awe,"STRONG",{});var gzr=s($re);zHe=r(gzr,"rag"),gzr.forEach(t),WHe=r(Awe," \u2014 "),fS=n(Awe,"A",{href:!0});var hzr=s(fS);QHe=r(hzr,"RagConfig"),hzr.forEach(t),HHe=r(Awe," (RAG model)"),Awe.forEach(t),UHe=i(y),Im=n(y,"LI",{});var ywe=s(Im);kre=n(ywe,"STRONG",{});var pzr=s(kre);JHe=r(pzr,"realm"),pzr.forEach(t),YHe=r(ywe," \u2014 "),mS=n(ywe,"A",{href:!0});var uzr=s(mS);KHe=r(uzr,"RealmConfig"),uzr.forEach(t),ZHe=r(ywe," (Realm model)"),ywe.forEach(t),eUe=i(y),qm=n(y,"LI",{});var Lwe=s(qm);Sre=n(Lwe,"STRONG",{});var _zr=s(Sre);oUe=r(_zr,"reformer"),_zr.forEach(t),rUe=r(Lwe," \u2014 "),gS=n(Lwe,"A",{href:!0});var bzr=s(gS);tUe=r(bzr,"ReformerConfig"),bzr.forEach(t),aUe=r(Lwe," (Reformer model)"),Lwe.forEach(t),nUe=i(y),Nm=n(y,"LI",{});var xwe=s(Nm);Rre=n(xwe,"STRONG",{});var vzr=s(Rre);sUe=r(vzr,"regnet"),vzr.forEach(t),lUe=r(xwe," \u2014 "),hS=n(xwe,"A",{href:!0});var Fzr=s(hS);iUe=r(Fzr,"RegNetConfig"),Fzr.forEach(t),dUe=r(xwe," (RegNet model)"),xwe.forEach(t),cUe=i(y),jm=n(y,"LI",{});var $we=s(jm);Pre=n($we,"STRONG",{});var Tzr=s(Pre);fUe=r(Tzr,"rembert"),Tzr.forEach(t),mUe=r($we," \u2014 "),pS=n($we,"A",{href:!0});var Mzr=s(pS);gUe=r(Mzr,"RemBertConfig"),Mzr.forEach(t),hUe=r($we," (RemBERT model)"),$we.forEach(t),pUe=i(y),Dm=n(y,"LI",{});var kwe=s(Dm);Bre=n(kwe,"STRONG",{});var Ezr=s(Bre);uUe=r(Ezr,"resnet"),Ezr.forEach(t),_Ue=r(kwe," \u2014 "),uS=n(kwe,"A",{href:!0});var Czr=s(uS);bUe=r(Czr,"ResNetConfig"),Czr.forEach(t),vUe=r(kwe," (ResNet model)"),kwe.forEach(t),FUe=i(y),Gm=n(y,"LI",{});var Swe=s(Gm);Ire=n(Swe,"STRONG",{});var wzr=s(Ire);TUe=r(wzr,"retribert"),wzr.forEach(t),MUe=r(Swe," \u2014 "),_S=n(Swe,"A",{href:!0});var Azr=s(_S);EUe=r(Azr,"RetriBertConfig"),Azr.forEach(t),CUe=r(Swe," (RetriBERT model)"),Swe.forEach(t),wUe=i(y),Om=n(y,"LI",{});var Rwe=s(Om);qre=n(Rwe,"STRONG",{});var yzr=s(qre);AUe=r(yzr,"roberta"),yzr.forEach(t),yUe=r(Rwe," \u2014 "),bS=n(Rwe,"A",{href:!0});var Lzr=s(bS);LUe=r(Lzr,"RobertaConfig"),Lzr.forEach(t),xUe=r(Rwe," (RoBERTa model)"),Rwe.forEach(t),$Ue=i(y),Vm=n(y,"LI",{});var Pwe=s(Vm);Nre=n(Pwe,"STRONG",{});var xzr=s(Nre);kUe=r(xzr,"roformer"),xzr.forEach(t),SUe=r(Pwe," \u2014 "),vS=n(Pwe,"A",{href:!0});var $zr=s(vS);RUe=r($zr,"RoFormerConfig"),$zr.forEach(t),PUe=r(Pwe," (RoFormer model)"),Pwe.forEach(t),BUe=i(y),Xm=n(y,"LI",{});var Bwe=s(Xm);jre=n(Bwe,"STRONG",{});var kzr=s(jre);IUe=r(kzr,"segformer"),kzr.forEach(t),qUe=r(Bwe," \u2014 "),FS=n(Bwe,"A",{href:!0});var Szr=s(FS);NUe=r(Szr,"SegformerConfig"),Szr.forEach(t),jUe=r(Bwe," (SegFormer model)"),Bwe.forEach(t),DUe=i(y),zm=n(y,"LI",{});var Iwe=s(zm);Dre=n(Iwe,"STRONG",{});var Rzr=s(Dre);GUe=r(Rzr,"sew"),Rzr.forEach(t),OUe=r(Iwe," \u2014 "),TS=n(Iwe,"A",{href:!0});var Pzr=s(TS);VUe=r(Pzr,"SEWConfig"),Pzr.forEach(t),XUe=r(Iwe," (SEW model)"),Iwe.forEach(t),zUe=i(y),Wm=n(y,"LI",{});var qwe=s(Wm);Gre=n(qwe,"STRONG",{});var Bzr=s(Gre);WUe=r(Bzr,"sew-d"),Bzr.forEach(t),QUe=r(qwe," \u2014 "),MS=n(qwe,"A",{href:!0});var Izr=s(MS);HUe=r(Izr,"SEWDConfig"),Izr.forEach(t),UUe=r(qwe," (SEW-D model)"),qwe.forEach(t),JUe=i(y),Qm=n(y,"LI",{});var Nwe=s(Qm);Ore=n(Nwe,"STRONG",{});var qzr=s(Ore);YUe=r(qzr,"speech-encoder-decoder"),qzr.forEach(t),KUe=r(Nwe," \u2014 "),ES=n(Nwe,"A",{href:!0});var Nzr=s(ES);ZUe=r(Nzr,"SpeechEncoderDecoderConfig"),Nzr.forEach(t),eJe=r(Nwe," (Speech Encoder decoder model)"),Nwe.forEach(t),oJe=i(y),Hm=n(y,"LI",{});var jwe=s(Hm);Vre=n(jwe,"STRONG",{});var jzr=s(Vre);rJe=r(jzr,"speech_to_text"),jzr.forEach(t),tJe=r(jwe," \u2014 "),CS=n(jwe,"A",{href:!0});var Dzr=s(CS);aJe=r(Dzr,"Speech2TextConfig"),Dzr.forEach(t),nJe=r(jwe," (Speech2Text model)"),jwe.forEach(t),sJe=i(y),Um=n(y,"LI",{});var Dwe=s(Um);Xre=n(Dwe,"STRONG",{});var Gzr=s(Xre);lJe=r(Gzr,"speech_to_text_2"),Gzr.forEach(t),iJe=r(Dwe," \u2014 "),wS=n(Dwe,"A",{href:!0});var Ozr=s(wS);dJe=r(Ozr,"Speech2Text2Config"),Ozr.forEach(t),cJe=r(Dwe," (Speech2Text2 model)"),Dwe.forEach(t),fJe=i(y),Jm=n(y,"LI",{});var Gwe=s(Jm);zre=n(Gwe,"STRONG",{});var Vzr=s(zre);mJe=r(Vzr,"splinter"),Vzr.forEach(t),gJe=r(Gwe," \u2014 "),AS=n(Gwe,"A",{href:!0});var Xzr=s(AS);hJe=r(Xzr,"SplinterConfig"),Xzr.forEach(t),pJe=r(Gwe," (Splinter model)"),Gwe.forEach(t),uJe=i(y),Ym=n(y,"LI",{});var Owe=s(Ym);Wre=n(Owe,"STRONG",{});var zzr=s(Wre);_Je=r(zzr,"squeezebert"),zzr.forEach(t),bJe=r(Owe," \u2014 "),yS=n(Owe,"A",{href:!0});var Wzr=s(yS);vJe=r(Wzr,"SqueezeBertConfig"),Wzr.forEach(t),FJe=r(Owe," (SqueezeBERT model)"),Owe.forEach(t),TJe=i(y),Km=n(y,"LI",{});var Vwe=s(Km);Qre=n(Vwe,"STRONG",{});var Qzr=s(Qre);MJe=r(Qzr,"swin"),Qzr.forEach(t),EJe=r(Vwe," \u2014 "),LS=n(Vwe,"A",{href:!0});var Hzr=s(LS);CJe=r(Hzr,"SwinConfig"),Hzr.forEach(t),wJe=r(Vwe," (Swin model)"),Vwe.forEach(t),AJe=i(y),Zm=n(y,"LI",{});var Xwe=s(Zm);Hre=n(Xwe,"STRONG",{});var Uzr=s(Hre);yJe=r(Uzr,"t5"),Uzr.forEach(t),LJe=r(Xwe," \u2014 "),xS=n(Xwe,"A",{href:!0});var Jzr=s(xS);xJe=r(Jzr,"T5Config"),Jzr.forEach(t),$Je=r(Xwe," (T5 model)"),Xwe.forEach(t),kJe=i(y),eg=n(y,"LI",{});var zwe=s(eg);Ure=n(zwe,"STRONG",{});var Yzr=s(Ure);SJe=r(Yzr,"tapas"),Yzr.forEach(t),RJe=r(zwe," \u2014 "),$S=n(zwe,"A",{href:!0});var Kzr=s($S);PJe=r(Kzr,"TapasConfig"),Kzr.forEach(t),BJe=r(zwe," (TAPAS model)"),zwe.forEach(t),IJe=i(y),og=n(y,"LI",{});var Wwe=s(og);Jre=n(Wwe,"STRONG",{});var Zzr=s(Jre);qJe=r(Zzr,"trajectory_transformer"),Zzr.forEach(t),NJe=r(Wwe," \u2014 "),kS=n(Wwe,"A",{href:!0});var eWr=s(kS);jJe=r(eWr,"TrajectoryTransformerConfig"),eWr.forEach(t),DJe=r(Wwe," (Trajectory Transformer model)"),Wwe.forEach(t),GJe=i(y),rg=n(y,"LI",{});var Qwe=s(rg);Yre=n(Qwe,"STRONG",{});var oWr=s(Yre);OJe=r(oWr,"transfo-xl"),oWr.forEach(t),VJe=r(Qwe," \u2014 "),SS=n(Qwe,"A",{href:!0});var rWr=s(SS);XJe=r(rWr,"TransfoXLConfig"),rWr.forEach(t),zJe=r(Qwe," (Transformer-XL model)"),Qwe.forEach(t),WJe=i(y),tg=n(y,"LI",{});var Hwe=s(tg);Kre=n(Hwe,"STRONG",{});var tWr=s(Kre);QJe=r(tWr,"trocr"),tWr.forEach(t),HJe=r(Hwe," \u2014 "),RS=n(Hwe,"A",{href:!0});var aWr=s(RS);UJe=r(aWr,"TrOCRConfig"),aWr.forEach(t),JJe=r(Hwe," (TrOCR model)"),Hwe.forEach(t),YJe=i(y),ag=n(y,"LI",{});var Uwe=s(ag);Zre=n(Uwe,"STRONG",{});var nWr=s(Zre);KJe=r(nWr,"unispeech"),nWr.forEach(t),ZJe=r(Uwe," \u2014 "),PS=n(Uwe,"A",{href:!0});var sWr=s(PS);eYe=r(sWr,"UniSpeechConfig"),sWr.forEach(t),oYe=r(Uwe," (UniSpeech model)"),Uwe.forEach(t),rYe=i(y),ng=n(y,"LI",{});var Jwe=s(ng);ete=n(Jwe,"STRONG",{});var lWr=s(ete);tYe=r(lWr,"unispeech-sat"),lWr.forEach(t),aYe=r(Jwe," \u2014 "),BS=n(Jwe,"A",{href:!0});var iWr=s(BS);nYe=r(iWr,"UniSpeechSatConfig"),iWr.forEach(t),sYe=r(Jwe," (UniSpeechSat model)"),Jwe.forEach(t),lYe=i(y),sg=n(y,"LI",{});var Ywe=s(sg);ote=n(Ywe,"STRONG",{});var dWr=s(ote);iYe=r(dWr,"van"),dWr.forEach(t),dYe=r(Ywe," \u2014 "),IS=n(Ywe,"A",{href:!0});var cWr=s(IS);cYe=r(cWr,"VanConfig"),cWr.forEach(t),fYe=r(Ywe," (VAN model)"),Ywe.forEach(t),mYe=i(y),lg=n(y,"LI",{});var Kwe=s(lg);rte=n(Kwe,"STRONG",{});var fWr=s(rte);gYe=r(fWr,"vilt"),fWr.forEach(t),hYe=r(Kwe," \u2014 "),qS=n(Kwe,"A",{href:!0});var mWr=s(qS);pYe=r(mWr,"ViltConfig"),mWr.forEach(t),uYe=r(Kwe," (ViLT model)"),Kwe.forEach(t),_Ye=i(y),ig=n(y,"LI",{});var Zwe=s(ig);tte=n(Zwe,"STRONG",{});var gWr=s(tte);bYe=r(gWr,"vision-encoder-decoder"),gWr.forEach(t),vYe=r(Zwe," \u2014 "),NS=n(Zwe,"A",{href:!0});var hWr=s(NS);FYe=r(hWr,"VisionEncoderDecoderConfig"),hWr.forEach(t),TYe=r(Zwe," (Vision Encoder decoder model)"),Zwe.forEach(t),MYe=i(y),dg=n(y,"LI",{});var e0e=s(dg);ate=n(e0e,"STRONG",{});var pWr=s(ate);EYe=r(pWr,"vision-text-dual-encoder"),pWr.forEach(t),CYe=r(e0e," \u2014 "),jS=n(e0e,"A",{href:!0});var uWr=s(jS);wYe=r(uWr,"VisionTextDualEncoderConfig"),uWr.forEach(t),AYe=r(e0e," (VisionTextDualEncoder model)"),e0e.forEach(t),yYe=i(y),cg=n(y,"LI",{});var o0e=s(cg);nte=n(o0e,"STRONG",{});var _Wr=s(nte);LYe=r(_Wr,"visual_bert"),_Wr.forEach(t),xYe=r(o0e," \u2014 "),DS=n(o0e,"A",{href:!0});var bWr=s(DS);$Ye=r(bWr,"VisualBertConfig"),bWr.forEach(t),kYe=r(o0e," (VisualBert model)"),o0e.forEach(t),SYe=i(y),fg=n(y,"LI",{});var r0e=s(fg);ste=n(r0e,"STRONG",{});var vWr=s(ste);RYe=r(vWr,"vit"),vWr.forEach(t),PYe=r(r0e," \u2014 "),GS=n(r0e,"A",{href:!0});var FWr=s(GS);BYe=r(FWr,"ViTConfig"),FWr.forEach(t),IYe=r(r0e," (ViT model)"),r0e.forEach(t),qYe=i(y),mg=n(y,"LI",{});var t0e=s(mg);lte=n(t0e,"STRONG",{});var TWr=s(lte);NYe=r(TWr,"vit_mae"),TWr.forEach(t),jYe=r(t0e," \u2014 "),OS=n(t0e,"A",{href:!0});var MWr=s(OS);DYe=r(MWr,"ViTMAEConfig"),MWr.forEach(t),GYe=r(t0e," (ViTMAE model)"),t0e.forEach(t),OYe=i(y),gg=n(y,"LI",{});var a0e=s(gg);ite=n(a0e,"STRONG",{});var EWr=s(ite);VYe=r(EWr,"wav2vec2"),EWr.forEach(t),XYe=r(a0e," \u2014 "),VS=n(a0e,"A",{href:!0});var CWr=s(VS);zYe=r(CWr,"Wav2Vec2Config"),CWr.forEach(t),WYe=r(a0e," (Wav2Vec2 model)"),a0e.forEach(t),QYe=i(y),hg=n(y,"LI",{});var n0e=s(hg);dte=n(n0e,"STRONG",{});var wWr=s(dte);HYe=r(wWr,"wav2vec2-conformer"),wWr.forEach(t),UYe=r(n0e," \u2014 "),XS=n(n0e,"A",{href:!0});var AWr=s(XS);JYe=r(AWr,"Wav2Vec2ConformerConfig"),AWr.forEach(t),YYe=r(n0e," (Wav2Vec2-Conformer model)"),n0e.forEach(t),KYe=i(y),pg=n(y,"LI",{});var s0e=s(pg);cte=n(s0e,"STRONG",{});var yWr=s(cte);ZYe=r(yWr,"wavlm"),yWr.forEach(t),eKe=r(s0e," \u2014 "),zS=n(s0e,"A",{href:!0});var LWr=s(zS);oKe=r(LWr,"WavLMConfig"),LWr.forEach(t),rKe=r(s0e," (WavLM model)"),s0e.forEach(t),tKe=i(y),ug=n(y,"LI",{});var l0e=s(ug);fte=n(l0e,"STRONG",{});var xWr=s(fte);aKe=r(xWr,"xglm"),xWr.forEach(t),nKe=r(l0e," \u2014 "),WS=n(l0e,"A",{href:!0});var $Wr=s(WS);sKe=r($Wr,"XGLMConfig"),$Wr.forEach(t),lKe=r(l0e," (XGLM model)"),l0e.forEach(t),iKe=i(y),_g=n(y,"LI",{});var i0e=s(_g);mte=n(i0e,"STRONG",{});var kWr=s(mte);dKe=r(kWr,"xlm"),kWr.forEach(t),cKe=r(i0e," \u2014 "),QS=n(i0e,"A",{href:!0});var SWr=s(QS);fKe=r(SWr,"XLMConfig"),SWr.forEach(t),mKe=r(i0e," (XLM model)"),i0e.forEach(t),gKe=i(y),bg=n(y,"LI",{});var d0e=s(bg);gte=n(d0e,"STRONG",{});var RWr=s(gte);hKe=r(RWr,"xlm-prophetnet"),RWr.forEach(t),pKe=r(d0e," \u2014 "),HS=n(d0e,"A",{href:!0});var PWr=s(HS);uKe=r(PWr,"XLMProphetNetConfig"),PWr.forEach(t),_Ke=r(d0e," (XLMProphetNet model)"),d0e.forEach(t),bKe=i(y),vg=n(y,"LI",{});var c0e=s(vg);hte=n(c0e,"STRONG",{});var BWr=s(hte);vKe=r(BWr,"xlm-roberta"),BWr.forEach(t),FKe=r(c0e," \u2014 "),US=n(c0e,"A",{href:!0});var IWr=s(US);TKe=r(IWr,"XLMRobertaConfig"),IWr.forEach(t),MKe=r(c0e," (XLM-RoBERTa model)"),c0e.forEach(t),EKe=i(y),Fg=n(y,"LI",{});var f0e=s(Fg);pte=n(f0e,"STRONG",{});var qWr=s(pte);CKe=r(qWr,"xlm-roberta-xl"),qWr.forEach(t),wKe=r(f0e," \u2014 "),JS=n(f0e,"A",{href:!0});var NWr=s(JS);AKe=r(NWr,"XLMRobertaXLConfig"),NWr.forEach(t),yKe=r(f0e," (XLM-RoBERTa-XL model)"),f0e.forEach(t),LKe=i(y),Tg=n(y,"LI",{});var m0e=s(Tg);ute=n(m0e,"STRONG",{});var jWr=s(ute);xKe=r(jWr,"xlnet"),jWr.forEach(t),$Ke=r(m0e," \u2014 "),YS=n(m0e,"A",{href:!0});var DWr=s(YS);kKe=r(DWr,"XLNetConfig"),DWr.forEach(t),SKe=r(m0e," (XLNet model)"),m0e.forEach(t),RKe=i(y),Mg=n(y,"LI",{});var g0e=s(Mg);_te=n(g0e,"STRONG",{});var GWr=s(_te);PKe=r(GWr,"yolos"),GWr.forEach(t),BKe=r(g0e," \u2014 "),KS=n(g0e,"A",{href:!0});var OWr=s(KS);IKe=r(OWr,"YolosConfig"),OWr.forEach(t),qKe=r(g0e," (YOLOS model)"),g0e.forEach(t),NKe=i(y),Eg=n(y,"LI",{});var h0e=s(Eg);bte=n(h0e,"STRONG",{});var VWr=s(bte);jKe=r(VWr,"yoso"),VWr.forEach(t),DKe=r(h0e," \u2014 "),ZS=n(h0e,"A",{href:!0});var XWr=s(ZS);GKe=r(XWr,"YosoConfig"),XWr.forEach(t),OKe=r(h0e," (YOSO model)"),h0e.forEach(t),y.forEach(t),VKe=i(ot),T(Cg.$$.fragment,ot),ot.forEach(t),XKe=i(et),wg=n(et,"DIV",{class:!0});var tDe=s(wg);T(PA.$$.fragment,tDe),zKe=i(tDe),vte=n(tDe,"P",{});var zWr=s(vte);WKe=r(zWr,"Register a new configuration for this class."),zWr.forEach(t),tDe.forEach(t),et.forEach(t),sNe=i(f),Mi=n(f,"H2",{class:!0});var aDe=s(Mi);Ag=n(aDe,"A",{id:!0,class:!0,href:!0});var WWr=s(Ag);Fte=n(WWr,"SPAN",{});var QWr=s(Fte);T(BA.$$.fragment,QWr),QWr.forEach(t),WWr.forEach(t),QKe=i(aDe),Tte=n(aDe,"SPAN",{});var HWr=s(Tte);HKe=r(HWr,"AutoTokenizer"),HWr.forEach(t),aDe.forEach(t),lNe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(IA.$$.fragment,Ns),UKe=i(Ns),qA=n(Ns,"P",{});var nDe=s(qA);JKe=r(nDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eR=n(nDe,"A",{href:!0});var UWr=s(eR);YKe=r(UWr,"AutoTokenizer.from_pretrained()"),UWr.forEach(t),KKe=r(nDe," class method."),nDe.forEach(t),ZKe=i(Ns),NA=n(Ns,"P",{});var sDe=s(NA);eZe=r(sDe,"This class cannot be instantiated directly using "),Mte=n(sDe,"CODE",{});var JWr=s(Mte);oZe=r(JWr,"__init__()"),JWr.forEach(t),rZe=r(sDe," (throws an error)."),sDe.forEach(t),tZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var js=s(Cr);T(jA.$$.fragment,js),aZe=i(js),Ete=n(js,"P",{});var YWr=s(Ete);nZe=r(YWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YWr.forEach(t),sZe=i(js),Aa=n(js,"P",{});var x0=s(Aa);lZe=r(x0,"The tokenizer class to instantiate is selected based on the "),Cte=n(x0,"CODE",{});var KWr=s(Cte);iZe=r(KWr,"model_type"),KWr.forEach(t),dZe=r(x0,` property of the config object (either
passed as an argument or loaded from `),wte=n(x0,"CODE",{});var ZWr=s(wte);cZe=r(ZWr,"pretrained_model_name_or_path"),ZWr.forEach(t),fZe=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ate=n(x0,"CODE",{});var eQr=s(Ate);mZe=r(eQr,"pretrained_model_name_or_path"),eQr.forEach(t),gZe=r(x0,":"),x0.forEach(t),hZe=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Dx=s(Sn);yte=n(Dx,"STRONG",{});var oQr=s(yte);pZe=r(oQr,"albert"),oQr.forEach(t),uZe=r(Dx," \u2014 "),oR=n(Dx,"A",{href:!0});var rQr=s(oR);_Ze=r(rQr,"AlbertTokenizer"),rQr.forEach(t),bZe=r(Dx," or "),rR=n(Dx,"A",{href:!0});var tQr=s(rR);vZe=r(tQr,"AlbertTokenizerFast"),tQr.forEach(t),FZe=r(Dx," (ALBERT model)"),Dx.forEach(t),TZe=i(S),Rn=n(S,"LI",{});var Gx=s(Rn);Lte=n(Gx,"STRONG",{});var aQr=s(Lte);MZe=r(aQr,"bart"),aQr.forEach(t),EZe=r(Gx," \u2014 "),tR=n(Gx,"A",{href:!0});var nQr=s(tR);CZe=r(nQr,"BartTokenizer"),nQr.forEach(t),wZe=r(Gx," or "),aR=n(Gx,"A",{href:!0});var sQr=s(aR);AZe=r(sQr,"BartTokenizerFast"),sQr.forEach(t),yZe=r(Gx," (BART model)"),Gx.forEach(t),LZe=i(S),Pn=n(S,"LI",{});var Ox=s(Pn);xte=n(Ox,"STRONG",{});var lQr=s(xte);xZe=r(lQr,"barthez"),lQr.forEach(t),$Ze=r(Ox," \u2014 "),nR=n(Ox,"A",{href:!0});var iQr=s(nR);kZe=r(iQr,"BarthezTokenizer"),iQr.forEach(t),SZe=r(Ox," or "),sR=n(Ox,"A",{href:!0});var dQr=s(sR);RZe=r(dQr,"BarthezTokenizerFast"),dQr.forEach(t),PZe=r(Ox," (BARThez model)"),Ox.forEach(t),BZe=i(S),Bn=n(S,"LI",{});var Vx=s(Bn);$te=n(Vx,"STRONG",{});var cQr=s($te);IZe=r(cQr,"bartpho"),cQr.forEach(t),qZe=r(Vx," \u2014 "),lR=n(Vx,"A",{href:!0});var fQr=s(lR);NZe=r(fQr,"BartphoTokenizer"),fQr.forEach(t),jZe=r(Vx," or "),iR=n(Vx,"A",{href:!0});var mQr=s(iR);DZe=r(mQr,"BartphoTokenizerFast"),mQr.forEach(t),GZe=r(Vx," (BARTpho model)"),Vx.forEach(t),OZe=i(S),In=n(S,"LI",{});var Xx=s(In);kte=n(Xx,"STRONG",{});var gQr=s(kte);VZe=r(gQr,"bert"),gQr.forEach(t),XZe=r(Xx," \u2014 "),dR=n(Xx,"A",{href:!0});var hQr=s(dR);zZe=r(hQr,"BertTokenizer"),hQr.forEach(t),WZe=r(Xx," or "),cR=n(Xx,"A",{href:!0});var pQr=s(cR);QZe=r(pQr,"BertTokenizerFast"),pQr.forEach(t),HZe=r(Xx," (BERT model)"),Xx.forEach(t),UZe=i(S),yg=n(S,"LI",{});var p0e=s(yg);Ste=n(p0e,"STRONG",{});var uQr=s(Ste);JZe=r(uQr,"bert-generation"),uQr.forEach(t),YZe=r(p0e," \u2014 "),fR=n(p0e,"A",{href:!0});var _Qr=s(fR);KZe=r(_Qr,"BertGenerationTokenizer"),_Qr.forEach(t),ZZe=r(p0e," (Bert Generation model)"),p0e.forEach(t),eeo=i(S),Lg=n(S,"LI",{});var u0e=s(Lg);Rte=n(u0e,"STRONG",{});var bQr=s(Rte);oeo=r(bQr,"bert-japanese"),bQr.forEach(t),reo=r(u0e," \u2014 "),mR=n(u0e,"A",{href:!0});var vQr=s(mR);teo=r(vQr,"BertJapaneseTokenizer"),vQr.forEach(t),aeo=r(u0e," (BertJapanese model)"),u0e.forEach(t),neo=i(S),xg=n(S,"LI",{});var _0e=s(xg);Pte=n(_0e,"STRONG",{});var FQr=s(Pte);seo=r(FQr,"bertweet"),FQr.forEach(t),leo=r(_0e," \u2014 "),gR=n(_0e,"A",{href:!0});var TQr=s(gR);ieo=r(TQr,"BertweetTokenizer"),TQr.forEach(t),deo=r(_0e," (Bertweet model)"),_0e.forEach(t),ceo=i(S),qn=n(S,"LI",{});var zx=s(qn);Bte=n(zx,"STRONG",{});var MQr=s(Bte);feo=r(MQr,"big_bird"),MQr.forEach(t),meo=r(zx," \u2014 "),hR=n(zx,"A",{href:!0});var EQr=s(hR);geo=r(EQr,"BigBirdTokenizer"),EQr.forEach(t),heo=r(zx," or "),pR=n(zx,"A",{href:!0});var CQr=s(pR);peo=r(CQr,"BigBirdTokenizerFast"),CQr.forEach(t),ueo=r(zx," (BigBird model)"),zx.forEach(t),_eo=i(S),Nn=n(S,"LI",{});var Wx=s(Nn);Ite=n(Wx,"STRONG",{});var wQr=s(Ite);beo=r(wQr,"bigbird_pegasus"),wQr.forEach(t),veo=r(Wx," \u2014 "),uR=n(Wx,"A",{href:!0});var AQr=s(uR);Feo=r(AQr,"PegasusTokenizer"),AQr.forEach(t),Teo=r(Wx," or "),_R=n(Wx,"A",{href:!0});var yQr=s(_R);Meo=r(yQr,"PegasusTokenizerFast"),yQr.forEach(t),Eeo=r(Wx," (BigBirdPegasus model)"),Wx.forEach(t),Ceo=i(S),jn=n(S,"LI",{});var Qx=s(jn);qte=n(Qx,"STRONG",{});var LQr=s(qte);weo=r(LQr,"blenderbot"),LQr.forEach(t),Aeo=r(Qx," \u2014 "),bR=n(Qx,"A",{href:!0});var xQr=s(bR);yeo=r(xQr,"BlenderbotTokenizer"),xQr.forEach(t),Leo=r(Qx," or "),vR=n(Qx,"A",{href:!0});var $Qr=s(vR);xeo=r($Qr,"BlenderbotTokenizerFast"),$Qr.forEach(t),$eo=r(Qx," (Blenderbot model)"),Qx.forEach(t),keo=i(S),$g=n(S,"LI",{});var b0e=s($g);Nte=n(b0e,"STRONG",{});var kQr=s(Nte);Seo=r(kQr,"blenderbot-small"),kQr.forEach(t),Reo=r(b0e," \u2014 "),FR=n(b0e,"A",{href:!0});var SQr=s(FR);Peo=r(SQr,"BlenderbotSmallTokenizer"),SQr.forEach(t),Beo=r(b0e," (BlenderbotSmall model)"),b0e.forEach(t),Ieo=i(S),kg=n(S,"LI",{});var v0e=s(kg);jte=n(v0e,"STRONG",{});var RQr=s(jte);qeo=r(RQr,"byt5"),RQr.forEach(t),Neo=r(v0e," \u2014 "),TR=n(v0e,"A",{href:!0});var PQr=s(TR);jeo=r(PQr,"ByT5Tokenizer"),PQr.forEach(t),Deo=r(v0e," (ByT5 model)"),v0e.forEach(t),Geo=i(S),Dn=n(S,"LI",{});var Hx=s(Dn);Dte=n(Hx,"STRONG",{});var BQr=s(Dte);Oeo=r(BQr,"camembert"),BQr.forEach(t),Veo=r(Hx," \u2014 "),MR=n(Hx,"A",{href:!0});var IQr=s(MR);Xeo=r(IQr,"CamembertTokenizer"),IQr.forEach(t),zeo=r(Hx," or "),ER=n(Hx,"A",{href:!0});var qQr=s(ER);Weo=r(qQr,"CamembertTokenizerFast"),qQr.forEach(t),Qeo=r(Hx," (CamemBERT model)"),Hx.forEach(t),Heo=i(S),Sg=n(S,"LI",{});var F0e=s(Sg);Gte=n(F0e,"STRONG",{});var NQr=s(Gte);Ueo=r(NQr,"canine"),NQr.forEach(t),Jeo=r(F0e," \u2014 "),CR=n(F0e,"A",{href:!0});var jQr=s(CR);Yeo=r(jQr,"CanineTokenizer"),jQr.forEach(t),Keo=r(F0e," (Canine model)"),F0e.forEach(t),Zeo=i(S),Gn=n(S,"LI",{});var Ux=s(Gn);Ote=n(Ux,"STRONG",{});var DQr=s(Ote);eoo=r(DQr,"clip"),DQr.forEach(t),ooo=r(Ux," \u2014 "),wR=n(Ux,"A",{href:!0});var GQr=s(wR);roo=r(GQr,"CLIPTokenizer"),GQr.forEach(t),too=r(Ux," or "),AR=n(Ux,"A",{href:!0});var OQr=s(AR);aoo=r(OQr,"CLIPTokenizerFast"),OQr.forEach(t),noo=r(Ux," (CLIP model)"),Ux.forEach(t),soo=i(S),On=n(S,"LI",{});var Jx=s(On);Vte=n(Jx,"STRONG",{});var VQr=s(Vte);loo=r(VQr,"convbert"),VQr.forEach(t),ioo=r(Jx," \u2014 "),yR=n(Jx,"A",{href:!0});var XQr=s(yR);doo=r(XQr,"ConvBertTokenizer"),XQr.forEach(t),coo=r(Jx," or "),LR=n(Jx,"A",{href:!0});var zQr=s(LR);foo=r(zQr,"ConvBertTokenizerFast"),zQr.forEach(t),moo=r(Jx," (ConvBERT model)"),Jx.forEach(t),goo=i(S),Vn=n(S,"LI",{});var Yx=s(Vn);Xte=n(Yx,"STRONG",{});var WQr=s(Xte);hoo=r(WQr,"cpm"),WQr.forEach(t),poo=r(Yx," \u2014 "),xR=n(Yx,"A",{href:!0});var QQr=s(xR);uoo=r(QQr,"CpmTokenizer"),QQr.forEach(t),_oo=r(Yx," or "),$R=n(Yx,"A",{href:!0});var HQr=s($R);boo=r(HQr,"CpmTokenizerFast"),HQr.forEach(t),voo=r(Yx," (CPM model)"),Yx.forEach(t),Foo=i(S),Rg=n(S,"LI",{});var T0e=s(Rg);zte=n(T0e,"STRONG",{});var UQr=s(zte);Too=r(UQr,"ctrl"),UQr.forEach(t),Moo=r(T0e," \u2014 "),kR=n(T0e,"A",{href:!0});var JQr=s(kR);Eoo=r(JQr,"CTRLTokenizer"),JQr.forEach(t),Coo=r(T0e," (CTRL model)"),T0e.forEach(t),woo=i(S),Xn=n(S,"LI",{});var Kx=s(Xn);Wte=n(Kx,"STRONG",{});var YQr=s(Wte);Aoo=r(YQr,"data2vec-text"),YQr.forEach(t),yoo=r(Kx," \u2014 "),SR=n(Kx,"A",{href:!0});var KQr=s(SR);Loo=r(KQr,"RobertaTokenizer"),KQr.forEach(t),xoo=r(Kx," or "),RR=n(Kx,"A",{href:!0});var ZQr=s(RR);$oo=r(ZQr,"RobertaTokenizerFast"),ZQr.forEach(t),koo=r(Kx," (Data2VecText model)"),Kx.forEach(t),Soo=i(S),zn=n(S,"LI",{});var Zx=s(zn);Qte=n(Zx,"STRONG",{});var eHr=s(Qte);Roo=r(eHr,"deberta"),eHr.forEach(t),Poo=r(Zx," \u2014 "),PR=n(Zx,"A",{href:!0});var oHr=s(PR);Boo=r(oHr,"DebertaTokenizer"),oHr.forEach(t),Ioo=r(Zx," or "),BR=n(Zx,"A",{href:!0});var rHr=s(BR);qoo=r(rHr,"DebertaTokenizerFast"),rHr.forEach(t),Noo=r(Zx," (DeBERTa model)"),Zx.forEach(t),joo=i(S),Wn=n(S,"LI",{});var e$=s(Wn);Hte=n(e$,"STRONG",{});var tHr=s(Hte);Doo=r(tHr,"deberta-v2"),tHr.forEach(t),Goo=r(e$," \u2014 "),IR=n(e$,"A",{href:!0});var aHr=s(IR);Ooo=r(aHr,"DebertaV2Tokenizer"),aHr.forEach(t),Voo=r(e$," or "),qR=n(e$,"A",{href:!0});var nHr=s(qR);Xoo=r(nHr,"DebertaV2TokenizerFast"),nHr.forEach(t),zoo=r(e$," (DeBERTa-v2 model)"),e$.forEach(t),Woo=i(S),Qn=n(S,"LI",{});var o$=s(Qn);Ute=n(o$,"STRONG",{});var sHr=s(Ute);Qoo=r(sHr,"distilbert"),sHr.forEach(t),Hoo=r(o$," \u2014 "),NR=n(o$,"A",{href:!0});var lHr=s(NR);Uoo=r(lHr,"DistilBertTokenizer"),lHr.forEach(t),Joo=r(o$," or "),jR=n(o$,"A",{href:!0});var iHr=s(jR);Yoo=r(iHr,"DistilBertTokenizerFast"),iHr.forEach(t),Koo=r(o$," (DistilBERT model)"),o$.forEach(t),Zoo=i(S),Hn=n(S,"LI",{});var r$=s(Hn);Jte=n(r$,"STRONG",{});var dHr=s(Jte);ero=r(dHr,"dpr"),dHr.forEach(t),oro=r(r$," \u2014 "),DR=n(r$,"A",{href:!0});var cHr=s(DR);rro=r(cHr,"DPRQuestionEncoderTokenizer"),cHr.forEach(t),tro=r(r$," or "),GR=n(r$,"A",{href:!0});var fHr=s(GR);aro=r(fHr,"DPRQuestionEncoderTokenizerFast"),fHr.forEach(t),nro=r(r$," (DPR model)"),r$.forEach(t),sro=i(S),Un=n(S,"LI",{});var t$=s(Un);Yte=n(t$,"STRONG",{});var mHr=s(Yte);lro=r(mHr,"electra"),mHr.forEach(t),iro=r(t$," \u2014 "),OR=n(t$,"A",{href:!0});var gHr=s(OR);dro=r(gHr,"ElectraTokenizer"),gHr.forEach(t),cro=r(t$," or "),VR=n(t$,"A",{href:!0});var hHr=s(VR);fro=r(hHr,"ElectraTokenizerFast"),hHr.forEach(t),mro=r(t$," (ELECTRA model)"),t$.forEach(t),gro=i(S),Pg=n(S,"LI",{});var M0e=s(Pg);Kte=n(M0e,"STRONG",{});var pHr=s(Kte);hro=r(pHr,"flaubert"),pHr.forEach(t),pro=r(M0e," \u2014 "),XR=n(M0e,"A",{href:!0});var uHr=s(XR);uro=r(uHr,"FlaubertTokenizer"),uHr.forEach(t),_ro=r(M0e," (FlauBERT model)"),M0e.forEach(t),bro=i(S),Jn=n(S,"LI",{});var a$=s(Jn);Zte=n(a$,"STRONG",{});var _Hr=s(Zte);vro=r(_Hr,"fnet"),_Hr.forEach(t),Fro=r(a$," \u2014 "),zR=n(a$,"A",{href:!0});var bHr=s(zR);Tro=r(bHr,"FNetTokenizer"),bHr.forEach(t),Mro=r(a$," or "),WR=n(a$,"A",{href:!0});var vHr=s(WR);Ero=r(vHr,"FNetTokenizerFast"),vHr.forEach(t),Cro=r(a$," (FNet model)"),a$.forEach(t),wro=i(S),Bg=n(S,"LI",{});var E0e=s(Bg);eae=n(E0e,"STRONG",{});var FHr=s(eae);Aro=r(FHr,"fsmt"),FHr.forEach(t),yro=r(E0e," \u2014 "),QR=n(E0e,"A",{href:!0});var THr=s(QR);Lro=r(THr,"FSMTTokenizer"),THr.forEach(t),xro=r(E0e," (FairSeq Machine-Translation model)"),E0e.forEach(t),$ro=i(S),Yn=n(S,"LI",{});var n$=s(Yn);oae=n(n$,"STRONG",{});var MHr=s(oae);kro=r(MHr,"funnel"),MHr.forEach(t),Sro=r(n$," \u2014 "),HR=n(n$,"A",{href:!0});var EHr=s(HR);Rro=r(EHr,"FunnelTokenizer"),EHr.forEach(t),Pro=r(n$," or "),UR=n(n$,"A",{href:!0});var CHr=s(UR);Bro=r(CHr,"FunnelTokenizerFast"),CHr.forEach(t),Iro=r(n$," (Funnel Transformer model)"),n$.forEach(t),qro=i(S),Kn=n(S,"LI",{});var s$=s(Kn);rae=n(s$,"STRONG",{});var wHr=s(rae);Nro=r(wHr,"gpt2"),wHr.forEach(t),jro=r(s$," \u2014 "),JR=n(s$,"A",{href:!0});var AHr=s(JR);Dro=r(AHr,"GPT2Tokenizer"),AHr.forEach(t),Gro=r(s$," or "),YR=n(s$,"A",{href:!0});var yHr=s(YR);Oro=r(yHr,"GPT2TokenizerFast"),yHr.forEach(t),Vro=r(s$," (OpenAI GPT-2 model)"),s$.forEach(t),Xro=i(S),Zn=n(S,"LI",{});var l$=s(Zn);tae=n(l$,"STRONG",{});var LHr=s(tae);zro=r(LHr,"gpt_neo"),LHr.forEach(t),Wro=r(l$," \u2014 "),KR=n(l$,"A",{href:!0});var xHr=s(KR);Qro=r(xHr,"GPT2Tokenizer"),xHr.forEach(t),Hro=r(l$," or "),ZR=n(l$,"A",{href:!0});var $Hr=s(ZR);Uro=r($Hr,"GPT2TokenizerFast"),$Hr.forEach(t),Jro=r(l$," (GPT Neo model)"),l$.forEach(t),Yro=i(S),Ig=n(S,"LI",{});var C0e=s(Ig);aae=n(C0e,"STRONG",{});var kHr=s(aae);Kro=r(kHr,"gpt_neox"),kHr.forEach(t),Zro=r(C0e," \u2014 "),eP=n(C0e,"A",{href:!0});var SHr=s(eP);eto=r(SHr,"GPTNeoXTokenizerFast"),SHr.forEach(t),oto=r(C0e," (GPT NeoX model)"),C0e.forEach(t),rto=i(S),es=n(S,"LI",{});var i$=s(es);nae=n(i$,"STRONG",{});var RHr=s(nae);tto=r(RHr,"gptj"),RHr.forEach(t),ato=r(i$," \u2014 "),oP=n(i$,"A",{href:!0});var PHr=s(oP);nto=r(PHr,"GPT2Tokenizer"),PHr.forEach(t),sto=r(i$," or "),rP=n(i$,"A",{href:!0});var BHr=s(rP);lto=r(BHr,"GPT2TokenizerFast"),BHr.forEach(t),ito=r(i$," (GPT-J model)"),i$.forEach(t),dto=i(S),os=n(S,"LI",{});var d$=s(os);sae=n(d$,"STRONG",{});var IHr=s(sae);cto=r(IHr,"herbert"),IHr.forEach(t),fto=r(d$," \u2014 "),tP=n(d$,"A",{href:!0});var qHr=s(tP);mto=r(qHr,"HerbertTokenizer"),qHr.forEach(t),gto=r(d$," or "),aP=n(d$,"A",{href:!0});var NHr=s(aP);hto=r(NHr,"HerbertTokenizerFast"),NHr.forEach(t),pto=r(d$," (HerBERT model)"),d$.forEach(t),uto=i(S),qg=n(S,"LI",{});var w0e=s(qg);lae=n(w0e,"STRONG",{});var jHr=s(lae);_to=r(jHr,"hubert"),jHr.forEach(t),bto=r(w0e," \u2014 "),nP=n(w0e,"A",{href:!0});var DHr=s(nP);vto=r(DHr,"Wav2Vec2CTCTokenizer"),DHr.forEach(t),Fto=r(w0e," (Hubert model)"),w0e.forEach(t),Tto=i(S),rs=n(S,"LI",{});var c$=s(rs);iae=n(c$,"STRONG",{});var GHr=s(iae);Mto=r(GHr,"ibert"),GHr.forEach(t),Eto=r(c$," \u2014 "),sP=n(c$,"A",{href:!0});var OHr=s(sP);Cto=r(OHr,"RobertaTokenizer"),OHr.forEach(t),wto=r(c$," or "),lP=n(c$,"A",{href:!0});var VHr=s(lP);Ato=r(VHr,"RobertaTokenizerFast"),VHr.forEach(t),yto=r(c$," (I-BERT model)"),c$.forEach(t),Lto=i(S),ts=n(S,"LI",{});var f$=s(ts);dae=n(f$,"STRONG",{});var XHr=s(dae);xto=r(XHr,"layoutlm"),XHr.forEach(t),$to=r(f$," \u2014 "),iP=n(f$,"A",{href:!0});var zHr=s(iP);kto=r(zHr,"LayoutLMTokenizer"),zHr.forEach(t),Sto=r(f$," or "),dP=n(f$,"A",{href:!0});var WHr=s(dP);Rto=r(WHr,"LayoutLMTokenizerFast"),WHr.forEach(t),Pto=r(f$," (LayoutLM model)"),f$.forEach(t),Bto=i(S),as=n(S,"LI",{});var m$=s(as);cae=n(m$,"STRONG",{});var QHr=s(cae);Ito=r(QHr,"layoutlmv2"),QHr.forEach(t),qto=r(m$," \u2014 "),cP=n(m$,"A",{href:!0});var HHr=s(cP);Nto=r(HHr,"LayoutLMv2Tokenizer"),HHr.forEach(t),jto=r(m$," or "),fP=n(m$,"A",{href:!0});var UHr=s(fP);Dto=r(UHr,"LayoutLMv2TokenizerFast"),UHr.forEach(t),Gto=r(m$," (LayoutLMv2 model)"),m$.forEach(t),Oto=i(S),ns=n(S,"LI",{});var g$=s(ns);fae=n(g$,"STRONG",{});var JHr=s(fae);Vto=r(JHr,"layoutlmv3"),JHr.forEach(t),Xto=r(g$," \u2014 "),mP=n(g$,"A",{href:!0});var YHr=s(mP);zto=r(YHr,"LayoutLMv3Tokenizer"),YHr.forEach(t),Wto=r(g$," or "),gP=n(g$,"A",{href:!0});var KHr=s(gP);Qto=r(KHr,"LayoutLMv3TokenizerFast"),KHr.forEach(t),Hto=r(g$," (LayoutLMv3 model)"),g$.forEach(t),Uto=i(S),ss=n(S,"LI",{});var h$=s(ss);mae=n(h$,"STRONG",{});var ZHr=s(mae);Jto=r(ZHr,"layoutxlm"),ZHr.forEach(t),Yto=r(h$," \u2014 "),hP=n(h$,"A",{href:!0});var eUr=s(hP);Kto=r(eUr,"LayoutXLMTokenizer"),eUr.forEach(t),Zto=r(h$," or "),pP=n(h$,"A",{href:!0});var oUr=s(pP);eao=r(oUr,"LayoutXLMTokenizerFast"),oUr.forEach(t),oao=r(h$," (LayoutXLM model)"),h$.forEach(t),rao=i(S),ls=n(S,"LI",{});var p$=s(ls);gae=n(p$,"STRONG",{});var rUr=s(gae);tao=r(rUr,"led"),rUr.forEach(t),aao=r(p$," \u2014 "),uP=n(p$,"A",{href:!0});var tUr=s(uP);nao=r(tUr,"LEDTokenizer"),tUr.forEach(t),sao=r(p$," or "),_P=n(p$,"A",{href:!0});var aUr=s(_P);lao=r(aUr,"LEDTokenizerFast"),aUr.forEach(t),iao=r(p$," (LED model)"),p$.forEach(t),dao=i(S),is=n(S,"LI",{});var u$=s(is);hae=n(u$,"STRONG",{});var nUr=s(hae);cao=r(nUr,"longformer"),nUr.forEach(t),fao=r(u$," \u2014 "),bP=n(u$,"A",{href:!0});var sUr=s(bP);mao=r(sUr,"LongformerTokenizer"),sUr.forEach(t),gao=r(u$," or "),vP=n(u$,"A",{href:!0});var lUr=s(vP);hao=r(lUr,"LongformerTokenizerFast"),lUr.forEach(t),pao=r(u$," (Longformer model)"),u$.forEach(t),uao=i(S),Ng=n(S,"LI",{});var A0e=s(Ng);pae=n(A0e,"STRONG",{});var iUr=s(pae);_ao=r(iUr,"luke"),iUr.forEach(t),bao=r(A0e," \u2014 "),FP=n(A0e,"A",{href:!0});var dUr=s(FP);vao=r(dUr,"LukeTokenizer"),dUr.forEach(t),Fao=r(A0e," (LUKE model)"),A0e.forEach(t),Tao=i(S),ds=n(S,"LI",{});var _$=s(ds);uae=n(_$,"STRONG",{});var cUr=s(uae);Mao=r(cUr,"lxmert"),cUr.forEach(t),Eao=r(_$," \u2014 "),TP=n(_$,"A",{href:!0});var fUr=s(TP);Cao=r(fUr,"LxmertTokenizer"),fUr.forEach(t),wao=r(_$," or "),MP=n(_$,"A",{href:!0});var mUr=s(MP);Aao=r(mUr,"LxmertTokenizerFast"),mUr.forEach(t),yao=r(_$," (LXMERT model)"),_$.forEach(t),Lao=i(S),jg=n(S,"LI",{});var y0e=s(jg);_ae=n(y0e,"STRONG",{});var gUr=s(_ae);xao=r(gUr,"m2m_100"),gUr.forEach(t),$ao=r(y0e," \u2014 "),EP=n(y0e,"A",{href:!0});var hUr=s(EP);kao=r(hUr,"M2M100Tokenizer"),hUr.forEach(t),Sao=r(y0e," (M2M100 model)"),y0e.forEach(t),Rao=i(S),Dg=n(S,"LI",{});var L0e=s(Dg);bae=n(L0e,"STRONG",{});var pUr=s(bae);Pao=r(pUr,"marian"),pUr.forEach(t),Bao=r(L0e," \u2014 "),CP=n(L0e,"A",{href:!0});var uUr=s(CP);Iao=r(uUr,"MarianTokenizer"),uUr.forEach(t),qao=r(L0e," (Marian model)"),L0e.forEach(t),Nao=i(S),cs=n(S,"LI",{});var b$=s(cs);vae=n(b$,"STRONG",{});var _Ur=s(vae);jao=r(_Ur,"mbart"),_Ur.forEach(t),Dao=r(b$," \u2014 "),wP=n(b$,"A",{href:!0});var bUr=s(wP);Gao=r(bUr,"MBartTokenizer"),bUr.forEach(t),Oao=r(b$," or "),AP=n(b$,"A",{href:!0});var vUr=s(AP);Vao=r(vUr,"MBartTokenizerFast"),vUr.forEach(t),Xao=r(b$," (mBART model)"),b$.forEach(t),zao=i(S),fs=n(S,"LI",{});var v$=s(fs);Fae=n(v$,"STRONG",{});var FUr=s(Fae);Wao=r(FUr,"mbart50"),FUr.forEach(t),Qao=r(v$," \u2014 "),yP=n(v$,"A",{href:!0});var TUr=s(yP);Hao=r(TUr,"MBart50Tokenizer"),TUr.forEach(t),Uao=r(v$," or "),LP=n(v$,"A",{href:!0});var MUr=s(LP);Jao=r(MUr,"MBart50TokenizerFast"),MUr.forEach(t),Yao=r(v$," (mBART-50 model)"),v$.forEach(t),Kao=i(S),ms=n(S,"LI",{});var F$=s(ms);Tae=n(F$,"STRONG",{});var EUr=s(Tae);Zao=r(EUr,"megatron-bert"),EUr.forEach(t),eno=r(F$," \u2014 "),xP=n(F$,"A",{href:!0});var CUr=s(xP);ono=r(CUr,"BertTokenizer"),CUr.forEach(t),rno=r(F$," or "),$P=n(F$,"A",{href:!0});var wUr=s($P);tno=r(wUr,"BertTokenizerFast"),wUr.forEach(t),ano=r(F$," (MegatronBert model)"),F$.forEach(t),nno=i(S),Gg=n(S,"LI",{});var x0e=s(Gg);Mae=n(x0e,"STRONG",{});var AUr=s(Mae);sno=r(AUr,"mluke"),AUr.forEach(t),lno=r(x0e," \u2014 "),kP=n(x0e,"A",{href:!0});var yUr=s(kP);ino=r(yUr,"MLukeTokenizer"),yUr.forEach(t),dno=r(x0e," (mLUKE model)"),x0e.forEach(t),cno=i(S),gs=n(S,"LI",{});var T$=s(gs);Eae=n(T$,"STRONG",{});var LUr=s(Eae);fno=r(LUr,"mobilebert"),LUr.forEach(t),mno=r(T$," \u2014 "),SP=n(T$,"A",{href:!0});var xUr=s(SP);gno=r(xUr,"MobileBertTokenizer"),xUr.forEach(t),hno=r(T$," or "),RP=n(T$,"A",{href:!0});var $Ur=s(RP);pno=r($Ur,"MobileBertTokenizerFast"),$Ur.forEach(t),uno=r(T$," (MobileBERT model)"),T$.forEach(t),_no=i(S),hs=n(S,"LI",{});var M$=s(hs);Cae=n(M$,"STRONG",{});var kUr=s(Cae);bno=r(kUr,"mpnet"),kUr.forEach(t),vno=r(M$," \u2014 "),PP=n(M$,"A",{href:!0});var SUr=s(PP);Fno=r(SUr,"MPNetTokenizer"),SUr.forEach(t),Tno=r(M$," or "),BP=n(M$,"A",{href:!0});var RUr=s(BP);Mno=r(RUr,"MPNetTokenizerFast"),RUr.forEach(t),Eno=r(M$," (MPNet model)"),M$.forEach(t),Cno=i(S),ps=n(S,"LI",{});var E$=s(ps);wae=n(E$,"STRONG",{});var PUr=s(wae);wno=r(PUr,"mt5"),PUr.forEach(t),Ano=r(E$," \u2014 "),IP=n(E$,"A",{href:!0});var BUr=s(IP);yno=r(BUr,"MT5Tokenizer"),BUr.forEach(t),Lno=r(E$," or "),qP=n(E$,"A",{href:!0});var IUr=s(qP);xno=r(IUr,"MT5TokenizerFast"),IUr.forEach(t),$no=r(E$," (mT5 model)"),E$.forEach(t),kno=i(S),us=n(S,"LI",{});var C$=s(us);Aae=n(C$,"STRONG",{});var qUr=s(Aae);Sno=r(qUr,"nystromformer"),qUr.forEach(t),Rno=r(C$," \u2014 "),NP=n(C$,"A",{href:!0});var NUr=s(NP);Pno=r(NUr,"AlbertTokenizer"),NUr.forEach(t),Bno=r(C$," or "),jP=n(C$,"A",{href:!0});var jUr=s(jP);Ino=r(jUr,"AlbertTokenizerFast"),jUr.forEach(t),qno=r(C$," (Nystromformer model)"),C$.forEach(t),Nno=i(S),_s=n(S,"LI",{});var w$=s(_s);yae=n(w$,"STRONG",{});var DUr=s(yae);jno=r(DUr,"openai-gpt"),DUr.forEach(t),Dno=r(w$," \u2014 "),DP=n(w$,"A",{href:!0});var GUr=s(DP);Gno=r(GUr,"OpenAIGPTTokenizer"),GUr.forEach(t),Ono=r(w$," or "),GP=n(w$,"A",{href:!0});var OUr=s(GP);Vno=r(OUr,"OpenAIGPTTokenizerFast"),OUr.forEach(t),Xno=r(w$," (OpenAI GPT model)"),w$.forEach(t),zno=i(S),Og=n(S,"LI",{});var $0e=s(Og);Lae=n($0e,"STRONG",{});var VUr=s(Lae);Wno=r(VUr,"opt"),VUr.forEach(t),Qno=r($0e," \u2014 "),OP=n($0e,"A",{href:!0});var XUr=s(OP);Hno=r(XUr,"GPT2Tokenizer"),XUr.forEach(t),Uno=r($0e," (OPT model)"),$0e.forEach(t),Jno=i(S),bs=n(S,"LI",{});var A$=s(bs);xae=n(A$,"STRONG",{});var zUr=s(xae);Yno=r(zUr,"pegasus"),zUr.forEach(t),Kno=r(A$," \u2014 "),VP=n(A$,"A",{href:!0});var WUr=s(VP);Zno=r(WUr,"PegasusTokenizer"),WUr.forEach(t),eso=r(A$," or "),XP=n(A$,"A",{href:!0});var QUr=s(XP);oso=r(QUr,"PegasusTokenizerFast"),QUr.forEach(t),rso=r(A$," (Pegasus model)"),A$.forEach(t),tso=i(S),Vg=n(S,"LI",{});var k0e=s(Vg);$ae=n(k0e,"STRONG",{});var HUr=s($ae);aso=r(HUr,"perceiver"),HUr.forEach(t),nso=r(k0e," \u2014 "),zP=n(k0e,"A",{href:!0});var UUr=s(zP);sso=r(UUr,"PerceiverTokenizer"),UUr.forEach(t),lso=r(k0e," (Perceiver model)"),k0e.forEach(t),iso=i(S),Xg=n(S,"LI",{});var S0e=s(Xg);kae=n(S0e,"STRONG",{});var JUr=s(kae);dso=r(JUr,"phobert"),JUr.forEach(t),cso=r(S0e," \u2014 "),WP=n(S0e,"A",{href:!0});var YUr=s(WP);fso=r(YUr,"PhobertTokenizer"),YUr.forEach(t),mso=r(S0e," (PhoBERT model)"),S0e.forEach(t),gso=i(S),zg=n(S,"LI",{});var R0e=s(zg);Sae=n(R0e,"STRONG",{});var KUr=s(Sae);hso=r(KUr,"plbart"),KUr.forEach(t),pso=r(R0e," \u2014 "),QP=n(R0e,"A",{href:!0});var ZUr=s(QP);uso=r(ZUr,"PLBartTokenizer"),ZUr.forEach(t),_so=r(R0e," (PLBart model)"),R0e.forEach(t),bso=i(S),Wg=n(S,"LI",{});var P0e=s(Wg);Rae=n(P0e,"STRONG",{});var eJr=s(Rae);vso=r(eJr,"prophetnet"),eJr.forEach(t),Fso=r(P0e," \u2014 "),HP=n(P0e,"A",{href:!0});var oJr=s(HP);Tso=r(oJr,"ProphetNetTokenizer"),oJr.forEach(t),Mso=r(P0e," (ProphetNet model)"),P0e.forEach(t),Eso=i(S),vs=n(S,"LI",{});var y$=s(vs);Pae=n(y$,"STRONG",{});var rJr=s(Pae);Cso=r(rJr,"qdqbert"),rJr.forEach(t),wso=r(y$," \u2014 "),UP=n(y$,"A",{href:!0});var tJr=s(UP);Aso=r(tJr,"BertTokenizer"),tJr.forEach(t),yso=r(y$," or "),JP=n(y$,"A",{href:!0});var aJr=s(JP);Lso=r(aJr,"BertTokenizerFast"),aJr.forEach(t),xso=r(y$," (QDQBert model)"),y$.forEach(t),$so=i(S),Qg=n(S,"LI",{});var B0e=s(Qg);Bae=n(B0e,"STRONG",{});var nJr=s(Bae);kso=r(nJr,"rag"),nJr.forEach(t),Sso=r(B0e," \u2014 "),YP=n(B0e,"A",{href:!0});var sJr=s(YP);Rso=r(sJr,"RagTokenizer"),sJr.forEach(t),Pso=r(B0e," (RAG model)"),B0e.forEach(t),Bso=i(S),Fs=n(S,"LI",{});var L$=s(Fs);Iae=n(L$,"STRONG",{});var lJr=s(Iae);Iso=r(lJr,"realm"),lJr.forEach(t),qso=r(L$," \u2014 "),KP=n(L$,"A",{href:!0});var iJr=s(KP);Nso=r(iJr,"RealmTokenizer"),iJr.forEach(t),jso=r(L$," or "),ZP=n(L$,"A",{href:!0});var dJr=s(ZP);Dso=r(dJr,"RealmTokenizerFast"),dJr.forEach(t),Gso=r(L$," (Realm model)"),L$.forEach(t),Oso=i(S),Ts=n(S,"LI",{});var x$=s(Ts);qae=n(x$,"STRONG",{});var cJr=s(qae);Vso=r(cJr,"reformer"),cJr.forEach(t),Xso=r(x$," \u2014 "),eB=n(x$,"A",{href:!0});var fJr=s(eB);zso=r(fJr,"ReformerTokenizer"),fJr.forEach(t),Wso=r(x$," or "),oB=n(x$,"A",{href:!0});var mJr=s(oB);Qso=r(mJr,"ReformerTokenizerFast"),mJr.forEach(t),Hso=r(x$," (Reformer model)"),x$.forEach(t),Uso=i(S),Ms=n(S,"LI",{});var $$=s(Ms);Nae=n($$,"STRONG",{});var gJr=s(Nae);Jso=r(gJr,"rembert"),gJr.forEach(t),Yso=r($$," \u2014 "),rB=n($$,"A",{href:!0});var hJr=s(rB);Kso=r(hJr,"RemBertTokenizer"),hJr.forEach(t),Zso=r($$," or "),tB=n($$,"A",{href:!0});var pJr=s(tB);elo=r(pJr,"RemBertTokenizerFast"),pJr.forEach(t),olo=r($$," (RemBERT model)"),$$.forEach(t),rlo=i(S),Es=n(S,"LI",{});var k$=s(Es);jae=n(k$,"STRONG",{});var uJr=s(jae);tlo=r(uJr,"retribert"),uJr.forEach(t),alo=r(k$," \u2014 "),aB=n(k$,"A",{href:!0});var _Jr=s(aB);nlo=r(_Jr,"RetriBertTokenizer"),_Jr.forEach(t),slo=r(k$," or "),nB=n(k$,"A",{href:!0});var bJr=s(nB);llo=r(bJr,"RetriBertTokenizerFast"),bJr.forEach(t),ilo=r(k$," (RetriBERT model)"),k$.forEach(t),dlo=i(S),Cs=n(S,"LI",{});var S$=s(Cs);Dae=n(S$,"STRONG",{});var vJr=s(Dae);clo=r(vJr,"roberta"),vJr.forEach(t),flo=r(S$," \u2014 "),sB=n(S$,"A",{href:!0});var FJr=s(sB);mlo=r(FJr,"RobertaTokenizer"),FJr.forEach(t),glo=r(S$," or "),lB=n(S$,"A",{href:!0});var TJr=s(lB);hlo=r(TJr,"RobertaTokenizerFast"),TJr.forEach(t),plo=r(S$," (RoBERTa model)"),S$.forEach(t),ulo=i(S),ws=n(S,"LI",{});var R$=s(ws);Gae=n(R$,"STRONG",{});var MJr=s(Gae);_lo=r(MJr,"roformer"),MJr.forEach(t),blo=r(R$," \u2014 "),iB=n(R$,"A",{href:!0});var EJr=s(iB);vlo=r(EJr,"RoFormerTokenizer"),EJr.forEach(t),Flo=r(R$," or "),dB=n(R$,"A",{href:!0});var CJr=s(dB);Tlo=r(CJr,"RoFormerTokenizerFast"),CJr.forEach(t),Mlo=r(R$," (RoFormer model)"),R$.forEach(t),Elo=i(S),Hg=n(S,"LI",{});var I0e=s(Hg);Oae=n(I0e,"STRONG",{});var wJr=s(Oae);Clo=r(wJr,"speech_to_text"),wJr.forEach(t),wlo=r(I0e," \u2014 "),cB=n(I0e,"A",{href:!0});var AJr=s(cB);Alo=r(AJr,"Speech2TextTokenizer"),AJr.forEach(t),ylo=r(I0e," (Speech2Text model)"),I0e.forEach(t),Llo=i(S),Ug=n(S,"LI",{});var q0e=s(Ug);Vae=n(q0e,"STRONG",{});var yJr=s(Vae);xlo=r(yJr,"speech_to_text_2"),yJr.forEach(t),$lo=r(q0e," \u2014 "),fB=n(q0e,"A",{href:!0});var LJr=s(fB);klo=r(LJr,"Speech2Text2Tokenizer"),LJr.forEach(t),Slo=r(q0e," (Speech2Text2 model)"),q0e.forEach(t),Rlo=i(S),As=n(S,"LI",{});var P$=s(As);Xae=n(P$,"STRONG",{});var xJr=s(Xae);Plo=r(xJr,"splinter"),xJr.forEach(t),Blo=r(P$," \u2014 "),mB=n(P$,"A",{href:!0});var $Jr=s(mB);Ilo=r($Jr,"SplinterTokenizer"),$Jr.forEach(t),qlo=r(P$," or "),gB=n(P$,"A",{href:!0});var kJr=s(gB);Nlo=r(kJr,"SplinterTokenizerFast"),kJr.forEach(t),jlo=r(P$," (Splinter model)"),P$.forEach(t),Dlo=i(S),ys=n(S,"LI",{});var B$=s(ys);zae=n(B$,"STRONG",{});var SJr=s(zae);Glo=r(SJr,"squeezebert"),SJr.forEach(t),Olo=r(B$," \u2014 "),hB=n(B$,"A",{href:!0});var RJr=s(hB);Vlo=r(RJr,"SqueezeBertTokenizer"),RJr.forEach(t),Xlo=r(B$," or "),pB=n(B$,"A",{href:!0});var PJr=s(pB);zlo=r(PJr,"SqueezeBertTokenizerFast"),PJr.forEach(t),Wlo=r(B$," (SqueezeBERT model)"),B$.forEach(t),Qlo=i(S),Ls=n(S,"LI",{});var I$=s(Ls);Wae=n(I$,"STRONG",{});var BJr=s(Wae);Hlo=r(BJr,"t5"),BJr.forEach(t),Ulo=r(I$," \u2014 "),uB=n(I$,"A",{href:!0});var IJr=s(uB);Jlo=r(IJr,"T5Tokenizer"),IJr.forEach(t),Ylo=r(I$," or "),_B=n(I$,"A",{href:!0});var qJr=s(_B);Klo=r(qJr,"T5TokenizerFast"),qJr.forEach(t),Zlo=r(I$," (T5 model)"),I$.forEach(t),eio=i(S),Jg=n(S,"LI",{});var N0e=s(Jg);Qae=n(N0e,"STRONG",{});var NJr=s(Qae);oio=r(NJr,"tapas"),NJr.forEach(t),rio=r(N0e," \u2014 "),bB=n(N0e,"A",{href:!0});var jJr=s(bB);tio=r(jJr,"TapasTokenizer"),jJr.forEach(t),aio=r(N0e," (TAPAS model)"),N0e.forEach(t),nio=i(S),Yg=n(S,"LI",{});var j0e=s(Yg);Hae=n(j0e,"STRONG",{});var DJr=s(Hae);sio=r(DJr,"tapex"),DJr.forEach(t),lio=r(j0e," \u2014 "),vB=n(j0e,"A",{href:!0});var GJr=s(vB);iio=r(GJr,"TapexTokenizer"),GJr.forEach(t),dio=r(j0e," (TAPEX model)"),j0e.forEach(t),cio=i(S),Kg=n(S,"LI",{});var D0e=s(Kg);Uae=n(D0e,"STRONG",{});var OJr=s(Uae);fio=r(OJr,"transfo-xl"),OJr.forEach(t),mio=r(D0e," \u2014 "),FB=n(D0e,"A",{href:!0});var VJr=s(FB);gio=r(VJr,"TransfoXLTokenizer"),VJr.forEach(t),hio=r(D0e," (Transformer-XL model)"),D0e.forEach(t),pio=i(S),xs=n(S,"LI",{});var q$=s(xs);Jae=n(q$,"STRONG",{});var XJr=s(Jae);uio=r(XJr,"visual_bert"),XJr.forEach(t),_io=r(q$," \u2014 "),TB=n(q$,"A",{href:!0});var zJr=s(TB);bio=r(zJr,"BertTokenizer"),zJr.forEach(t),vio=r(q$," or "),MB=n(q$,"A",{href:!0});var WJr=s(MB);Fio=r(WJr,"BertTokenizerFast"),WJr.forEach(t),Tio=r(q$," (VisualBert model)"),q$.forEach(t),Mio=i(S),Zg=n(S,"LI",{});var G0e=s(Zg);Yae=n(G0e,"STRONG",{});var QJr=s(Yae);Eio=r(QJr,"wav2vec2"),QJr.forEach(t),Cio=r(G0e," \u2014 "),EB=n(G0e,"A",{href:!0});var HJr=s(EB);wio=r(HJr,"Wav2Vec2CTCTokenizer"),HJr.forEach(t),Aio=r(G0e," (Wav2Vec2 model)"),G0e.forEach(t),yio=i(S),eh=n(S,"LI",{});var O0e=s(eh);Kae=n(O0e,"STRONG",{});var UJr=s(Kae);Lio=r(UJr,"wav2vec2-conformer"),UJr.forEach(t),xio=r(O0e," \u2014 "),CB=n(O0e,"A",{href:!0});var JJr=s(CB);$io=r(JJr,"Wav2Vec2CTCTokenizer"),JJr.forEach(t),kio=r(O0e," (Wav2Vec2-Conformer model)"),O0e.forEach(t),Sio=i(S),oh=n(S,"LI",{});var V0e=s(oh);Zae=n(V0e,"STRONG",{});var YJr=s(Zae);Rio=r(YJr,"wav2vec2_phoneme"),YJr.forEach(t),Pio=r(V0e," \u2014 "),wB=n(V0e,"A",{href:!0});var KJr=s(wB);Bio=r(KJr,"Wav2Vec2PhonemeCTCTokenizer"),KJr.forEach(t),Iio=r(V0e," (Wav2Vec2Phoneme model)"),V0e.forEach(t),qio=i(S),$s=n(S,"LI",{});var N$=s($s);ene=n(N$,"STRONG",{});var ZJr=s(ene);Nio=r(ZJr,"xglm"),ZJr.forEach(t),jio=r(N$," \u2014 "),AB=n(N$,"A",{href:!0});var eYr=s(AB);Dio=r(eYr,"XGLMTokenizer"),eYr.forEach(t),Gio=r(N$," or "),yB=n(N$,"A",{href:!0});var oYr=s(yB);Oio=r(oYr,"XGLMTokenizerFast"),oYr.forEach(t),Vio=r(N$," (XGLM model)"),N$.forEach(t),Xio=i(S),rh=n(S,"LI",{});var X0e=s(rh);one=n(X0e,"STRONG",{});var rYr=s(one);zio=r(rYr,"xlm"),rYr.forEach(t),Wio=r(X0e," \u2014 "),LB=n(X0e,"A",{href:!0});var tYr=s(LB);Qio=r(tYr,"XLMTokenizer"),tYr.forEach(t),Hio=r(X0e," (XLM model)"),X0e.forEach(t),Uio=i(S),th=n(S,"LI",{});var z0e=s(th);rne=n(z0e,"STRONG",{});var aYr=s(rne);Jio=r(aYr,"xlm-prophetnet"),aYr.forEach(t),Yio=r(z0e," \u2014 "),xB=n(z0e,"A",{href:!0});var nYr=s(xB);Kio=r(nYr,"XLMProphetNetTokenizer"),nYr.forEach(t),Zio=r(z0e," (XLMProphetNet model)"),z0e.forEach(t),edo=i(S),ks=n(S,"LI",{});var j$=s(ks);tne=n(j$,"STRONG",{});var sYr=s(tne);odo=r(sYr,"xlm-roberta"),sYr.forEach(t),rdo=r(j$," \u2014 "),$B=n(j$,"A",{href:!0});var lYr=s($B);tdo=r(lYr,"XLMRobertaTokenizer"),lYr.forEach(t),ado=r(j$," or "),kB=n(j$,"A",{href:!0});var iYr=s(kB);ndo=r(iYr,"XLMRobertaTokenizerFast"),iYr.forEach(t),sdo=r(j$," (XLM-RoBERTa model)"),j$.forEach(t),ldo=i(S),Ss=n(S,"LI",{});var D$=s(Ss);ane=n(D$,"STRONG",{});var dYr=s(ane);ido=r(dYr,"xlm-roberta-xl"),dYr.forEach(t),ddo=r(D$," \u2014 "),SB=n(D$,"A",{href:!0});var cYr=s(SB);cdo=r(cYr,"RobertaTokenizer"),cYr.forEach(t),fdo=r(D$," or "),RB=n(D$,"A",{href:!0});var fYr=s(RB);mdo=r(fYr,"RobertaTokenizerFast"),fYr.forEach(t),gdo=r(D$," (XLM-RoBERTa-XL model)"),D$.forEach(t),hdo=i(S),Rs=n(S,"LI",{});var G$=s(Rs);nne=n(G$,"STRONG",{});var mYr=s(nne);pdo=r(mYr,"xlnet"),mYr.forEach(t),udo=r(G$," \u2014 "),PB=n(G$,"A",{href:!0});var gYr=s(PB);_do=r(gYr,"XLNetTokenizer"),gYr.forEach(t),bdo=r(G$," or "),BB=n(G$,"A",{href:!0});var hYr=s(BB);vdo=r(hYr,"XLNetTokenizerFast"),hYr.forEach(t),Fdo=r(G$," (XLNet model)"),G$.forEach(t),Tdo=i(S),Ps=n(S,"LI",{});var O$=s(Ps);sne=n(O$,"STRONG",{});var pYr=s(sne);Mdo=r(pYr,"yoso"),pYr.forEach(t),Edo=r(O$," \u2014 "),IB=n(O$,"A",{href:!0});var uYr=s(IB);Cdo=r(uYr,"AlbertTokenizer"),uYr.forEach(t),wdo=r(O$," or "),qB=n(O$,"A",{href:!0});var _Yr=s(qB);Ado=r(_Yr,"AlbertTokenizerFast"),_Yr.forEach(t),ydo=r(O$," (YOSO model)"),O$.forEach(t),S.forEach(t),Ldo=i(js),T(ah.$$.fragment,js),js.forEach(t),xdo=i(Ns),nh=n(Ns,"DIV",{class:!0});var lDe=s(nh);T(DA.$$.fragment,lDe),$do=i(lDe),lne=n(lDe,"P",{});var bYr=s(lne);kdo=r(bYr,"Register a new tokenizer in this mapping."),bYr.forEach(t),lDe.forEach(t),Ns.forEach(t),iNe=i(f),Ei=n(f,"H2",{class:!0});var iDe=s(Ei);sh=n(iDe,"A",{id:!0,class:!0,href:!0});var vYr=s(sh);ine=n(vYr,"SPAN",{});var FYr=s(ine);T(GA.$$.fragment,FYr),FYr.forEach(t),vYr.forEach(t),Sdo=i(iDe),dne=n(iDe,"SPAN",{});var TYr=s(dne);Rdo=r(TYr,"AutoFeatureExtractor"),TYr.forEach(t),iDe.forEach(t),dNe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(OA.$$.fragment,Ds),Pdo=i(Ds),VA=n(Ds,"P",{});var dDe=s(VA);Bdo=r(dDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NB=n(dDe,"A",{href:!0});var MYr=s(NB);Ido=r(MYr,"AutoFeatureExtractor.from_pretrained()"),MYr.forEach(t),qdo=r(dDe," class method."),dDe.forEach(t),Ndo=i(Ds),XA=n(Ds,"P",{});var cDe=s(XA);jdo=r(cDe,"This class cannot be instantiated directly using "),cne=n(cDe,"CODE",{});var EYr=s(cne);Ddo=r(EYr,"__init__()"),EYr.forEach(t),Gdo=r(cDe," (throws an error)."),cDe.forEach(t),Odo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(zA.$$.fragment,Zt),Vdo=i(Zt),fne=n(Zt,"P",{});var CYr=s(fne);Xdo=r(CYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CYr.forEach(t),zdo=i(Zt),ya=n(Zt,"P",{});var $0=s(ya);Wdo=r($0,"The feature extractor class to instantiate is selected based on the "),mne=n($0,"CODE",{});var wYr=s(mne);Qdo=r(wYr,"model_type"),wYr.forEach(t),Hdo=r($0,` property of the config object
(either passed as an argument or loaded from `),gne=n($0,"CODE",{});var AYr=s(gne);Udo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),Jdo=r($0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),hne=n($0,"CODE",{});var yYr=s(hne);Ydo=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),Kdo=r($0,":"),$0.forEach(t),Zdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var W0e=s(lh);pne=n(W0e,"STRONG",{});var LYr=s(pne);eco=r(LYr,"beit"),LYr.forEach(t),oco=r(W0e," \u2014 "),jB=n(W0e,"A",{href:!0});var xYr=s(jB);rco=r(xYr,"BeitFeatureExtractor"),xYr.forEach(t),tco=r(W0e," (BEiT model)"),W0e.forEach(t),aco=i(Z),ih=n(Z,"LI",{});var Q0e=s(ih);une=n(Q0e,"STRONG",{});var $Yr=s(une);nco=r($Yr,"clip"),$Yr.forEach(t),sco=r(Q0e," \u2014 "),DB=n(Q0e,"A",{href:!0});var kYr=s(DB);lco=r(kYr,"CLIPFeatureExtractor"),kYr.forEach(t),ico=r(Q0e," (CLIP model)"),Q0e.forEach(t),dco=i(Z),dh=n(Z,"LI",{});var H0e=s(dh);_ne=n(H0e,"STRONG",{});var SYr=s(_ne);cco=r(SYr,"convnext"),SYr.forEach(t),fco=r(H0e," \u2014 "),GB=n(H0e,"A",{href:!0});var RYr=s(GB);mco=r(RYr,"ConvNextFeatureExtractor"),RYr.forEach(t),gco=r(H0e," (ConvNext model)"),H0e.forEach(t),hco=i(Z),ch=n(Z,"LI",{});var U0e=s(ch);bne=n(U0e,"STRONG",{});var PYr=s(bne);pco=r(PYr,"cvt"),PYr.forEach(t),uco=r(U0e," \u2014 "),OB=n(U0e,"A",{href:!0});var BYr=s(OB);_co=r(BYr,"ConvNextFeatureExtractor"),BYr.forEach(t),bco=r(U0e," (CvT model)"),U0e.forEach(t),vco=i(Z),fh=n(Z,"LI",{});var J0e=s(fh);vne=n(J0e,"STRONG",{});var IYr=s(vne);Fco=r(IYr,"data2vec-audio"),IYr.forEach(t),Tco=r(J0e," \u2014 "),VB=n(J0e,"A",{href:!0});var qYr=s(VB);Mco=r(qYr,"Wav2Vec2FeatureExtractor"),qYr.forEach(t),Eco=r(J0e," (Data2VecAudio model)"),J0e.forEach(t),Cco=i(Z),mh=n(Z,"LI",{});var Y0e=s(mh);Fne=n(Y0e,"STRONG",{});var NYr=s(Fne);wco=r(NYr,"data2vec-vision"),NYr.forEach(t),Aco=r(Y0e," \u2014 "),XB=n(Y0e,"A",{href:!0});var jYr=s(XB);yco=r(jYr,"BeitFeatureExtractor"),jYr.forEach(t),Lco=r(Y0e," (Data2VecVision model)"),Y0e.forEach(t),xco=i(Z),gh=n(Z,"LI",{});var K0e=s(gh);Tne=n(K0e,"STRONG",{});var DYr=s(Tne);$co=r(DYr,"deit"),DYr.forEach(t),kco=r(K0e," \u2014 "),zB=n(K0e,"A",{href:!0});var GYr=s(zB);Sco=r(GYr,"DeiTFeatureExtractor"),GYr.forEach(t),Rco=r(K0e," (DeiT model)"),K0e.forEach(t),Pco=i(Z),hh=n(Z,"LI",{});var Z0e=s(hh);Mne=n(Z0e,"STRONG",{});var OYr=s(Mne);Bco=r(OYr,"detr"),OYr.forEach(t),Ico=r(Z0e," \u2014 "),WB=n(Z0e,"A",{href:!0});var VYr=s(WB);qco=r(VYr,"DetrFeatureExtractor"),VYr.forEach(t),Nco=r(Z0e," (DETR model)"),Z0e.forEach(t),jco=i(Z),ph=n(Z,"LI",{});var e6e=s(ph);Ene=n(e6e,"STRONG",{});var XYr=s(Ene);Dco=r(XYr,"dpt"),XYr.forEach(t),Gco=r(e6e," \u2014 "),QB=n(e6e,"A",{href:!0});var zYr=s(QB);Oco=r(zYr,"DPTFeatureExtractor"),zYr.forEach(t),Vco=r(e6e," (DPT model)"),e6e.forEach(t),Xco=i(Z),uh=n(Z,"LI",{});var o6e=s(uh);Cne=n(o6e,"STRONG",{});var WYr=s(Cne);zco=r(WYr,"flava"),WYr.forEach(t),Wco=r(o6e," \u2014 "),HB=n(o6e,"A",{href:!0});var QYr=s(HB);Qco=r(QYr,"FlavaFeatureExtractor"),QYr.forEach(t),Hco=r(o6e," (Flava model)"),o6e.forEach(t),Uco=i(Z),_h=n(Z,"LI",{});var r6e=s(_h);wne=n(r6e,"STRONG",{});var HYr=s(wne);Jco=r(HYr,"glpn"),HYr.forEach(t),Yco=r(r6e," \u2014 "),UB=n(r6e,"A",{href:!0});var UYr=s(UB);Kco=r(UYr,"GLPNFeatureExtractor"),UYr.forEach(t),Zco=r(r6e," (GLPN model)"),r6e.forEach(t),efo=i(Z),bh=n(Z,"LI",{});var t6e=s(bh);Ane=n(t6e,"STRONG",{});var JYr=s(Ane);ofo=r(JYr,"hubert"),JYr.forEach(t),rfo=r(t6e," \u2014 "),JB=n(t6e,"A",{href:!0});var YYr=s(JB);tfo=r(YYr,"Wav2Vec2FeatureExtractor"),YYr.forEach(t),afo=r(t6e," (Hubert model)"),t6e.forEach(t),nfo=i(Z),vh=n(Z,"LI",{});var a6e=s(vh);yne=n(a6e,"STRONG",{});var KYr=s(yne);sfo=r(KYr,"imagegpt"),KYr.forEach(t),lfo=r(a6e," \u2014 "),YB=n(a6e,"A",{href:!0});var ZYr=s(YB);ifo=r(ZYr,"ImageGPTFeatureExtractor"),ZYr.forEach(t),dfo=r(a6e," (ImageGPT model)"),a6e.forEach(t),cfo=i(Z),Fh=n(Z,"LI",{});var n6e=s(Fh);Lne=n(n6e,"STRONG",{});var eKr=s(Lne);ffo=r(eKr,"layoutlmv2"),eKr.forEach(t),mfo=r(n6e," \u2014 "),KB=n(n6e,"A",{href:!0});var oKr=s(KB);gfo=r(oKr,"LayoutLMv2FeatureExtractor"),oKr.forEach(t),hfo=r(n6e," (LayoutLMv2 model)"),n6e.forEach(t),pfo=i(Z),Th=n(Z,"LI",{});var s6e=s(Th);xne=n(s6e,"STRONG",{});var rKr=s(xne);ufo=r(rKr,"layoutlmv3"),rKr.forEach(t),_fo=r(s6e," \u2014 "),ZB=n(s6e,"A",{href:!0});var tKr=s(ZB);bfo=r(tKr,"LayoutLMv3FeatureExtractor"),tKr.forEach(t),vfo=r(s6e," (LayoutLMv3 model)"),s6e.forEach(t),Ffo=i(Z),Mh=n(Z,"LI",{});var l6e=s(Mh);$ne=n(l6e,"STRONG",{});var aKr=s($ne);Tfo=r(aKr,"maskformer"),aKr.forEach(t),Mfo=r(l6e," \u2014 "),eI=n(l6e,"A",{href:!0});var nKr=s(eI);Efo=r(nKr,"MaskFormerFeatureExtractor"),nKr.forEach(t),Cfo=r(l6e," (MaskFormer model)"),l6e.forEach(t),wfo=i(Z),Eh=n(Z,"LI",{});var i6e=s(Eh);kne=n(i6e,"STRONG",{});var sKr=s(kne);Afo=r(sKr,"perceiver"),sKr.forEach(t),yfo=r(i6e," \u2014 "),oI=n(i6e,"A",{href:!0});var lKr=s(oI);Lfo=r(lKr,"PerceiverFeatureExtractor"),lKr.forEach(t),xfo=r(i6e," (Perceiver model)"),i6e.forEach(t),$fo=i(Z),Ch=n(Z,"LI",{});var d6e=s(Ch);Sne=n(d6e,"STRONG",{});var iKr=s(Sne);kfo=r(iKr,"poolformer"),iKr.forEach(t),Sfo=r(d6e," \u2014 "),rI=n(d6e,"A",{href:!0});var dKr=s(rI);Rfo=r(dKr,"PoolFormerFeatureExtractor"),dKr.forEach(t),Pfo=r(d6e," (PoolFormer model)"),d6e.forEach(t),Bfo=i(Z),wh=n(Z,"LI",{});var c6e=s(wh);Rne=n(c6e,"STRONG",{});var cKr=s(Rne);Ifo=r(cKr,"regnet"),cKr.forEach(t),qfo=r(c6e," \u2014 "),tI=n(c6e,"A",{href:!0});var fKr=s(tI);Nfo=r(fKr,"ConvNextFeatureExtractor"),fKr.forEach(t),jfo=r(c6e," (RegNet model)"),c6e.forEach(t),Dfo=i(Z),Ah=n(Z,"LI",{});var f6e=s(Ah);Pne=n(f6e,"STRONG",{});var mKr=s(Pne);Gfo=r(mKr,"resnet"),mKr.forEach(t),Ofo=r(f6e," \u2014 "),aI=n(f6e,"A",{href:!0});var gKr=s(aI);Vfo=r(gKr,"ConvNextFeatureExtractor"),gKr.forEach(t),Xfo=r(f6e," (ResNet model)"),f6e.forEach(t),zfo=i(Z),yh=n(Z,"LI",{});var m6e=s(yh);Bne=n(m6e,"STRONG",{});var hKr=s(Bne);Wfo=r(hKr,"segformer"),hKr.forEach(t),Qfo=r(m6e," \u2014 "),nI=n(m6e,"A",{href:!0});var pKr=s(nI);Hfo=r(pKr,"SegformerFeatureExtractor"),pKr.forEach(t),Ufo=r(m6e," (SegFormer model)"),m6e.forEach(t),Jfo=i(Z),Lh=n(Z,"LI",{});var g6e=s(Lh);Ine=n(g6e,"STRONG",{});var uKr=s(Ine);Yfo=r(uKr,"speech_to_text"),uKr.forEach(t),Kfo=r(g6e," \u2014 "),sI=n(g6e,"A",{href:!0});var _Kr=s(sI);Zfo=r(_Kr,"Speech2TextFeatureExtractor"),_Kr.forEach(t),emo=r(g6e," (Speech2Text model)"),g6e.forEach(t),omo=i(Z),xh=n(Z,"LI",{});var h6e=s(xh);qne=n(h6e,"STRONG",{});var bKr=s(qne);rmo=r(bKr,"swin"),bKr.forEach(t),tmo=r(h6e," \u2014 "),lI=n(h6e,"A",{href:!0});var vKr=s(lI);amo=r(vKr,"ViTFeatureExtractor"),vKr.forEach(t),nmo=r(h6e," (Swin model)"),h6e.forEach(t),smo=i(Z),$h=n(Z,"LI",{});var p6e=s($h);Nne=n(p6e,"STRONG",{});var FKr=s(Nne);lmo=r(FKr,"van"),FKr.forEach(t),imo=r(p6e," \u2014 "),iI=n(p6e,"A",{href:!0});var TKr=s(iI);dmo=r(TKr,"ConvNextFeatureExtractor"),TKr.forEach(t),cmo=r(p6e," (VAN model)"),p6e.forEach(t),fmo=i(Z),kh=n(Z,"LI",{});var u6e=s(kh);jne=n(u6e,"STRONG",{});var MKr=s(jne);mmo=r(MKr,"vit"),MKr.forEach(t),gmo=r(u6e," \u2014 "),dI=n(u6e,"A",{href:!0});var EKr=s(dI);hmo=r(EKr,"ViTFeatureExtractor"),EKr.forEach(t),pmo=r(u6e," (ViT model)"),u6e.forEach(t),umo=i(Z),Sh=n(Z,"LI",{});var _6e=s(Sh);Dne=n(_6e,"STRONG",{});var CKr=s(Dne);_mo=r(CKr,"vit_mae"),CKr.forEach(t),bmo=r(_6e," \u2014 "),cI=n(_6e,"A",{href:!0});var wKr=s(cI);vmo=r(wKr,"ViTFeatureExtractor"),wKr.forEach(t),Fmo=r(_6e," (ViTMAE model)"),_6e.forEach(t),Tmo=i(Z),Rh=n(Z,"LI",{});var b6e=s(Rh);Gne=n(b6e,"STRONG",{});var AKr=s(Gne);Mmo=r(AKr,"wav2vec2"),AKr.forEach(t),Emo=r(b6e," \u2014 "),fI=n(b6e,"A",{href:!0});var yKr=s(fI);Cmo=r(yKr,"Wav2Vec2FeatureExtractor"),yKr.forEach(t),wmo=r(b6e," (Wav2Vec2 model)"),b6e.forEach(t),Amo=i(Z),Ph=n(Z,"LI",{});var v6e=s(Ph);One=n(v6e,"STRONG",{});var LKr=s(One);ymo=r(LKr,"wav2vec2-conformer"),LKr.forEach(t),Lmo=r(v6e," \u2014 "),mI=n(v6e,"A",{href:!0});var xKr=s(mI);xmo=r(xKr,"Wav2Vec2FeatureExtractor"),xKr.forEach(t),$mo=r(v6e," (Wav2Vec2-Conformer model)"),v6e.forEach(t),kmo=i(Z),Bh=n(Z,"LI",{});var F6e=s(Bh);Vne=n(F6e,"STRONG",{});var $Kr=s(Vne);Smo=r($Kr,"yolos"),$Kr.forEach(t),Rmo=r(F6e," \u2014 "),gI=n(F6e,"A",{href:!0});var kKr=s(gI);Pmo=r(kKr,"YolosFeatureExtractor"),kKr.forEach(t),Bmo=r(F6e," (YOLOS model)"),F6e.forEach(t),Z.forEach(t),Imo=i(Zt),T(Ih.$$.fragment,Zt),qmo=i(Zt),T(qh.$$.fragment,Zt),Zt.forEach(t),Nmo=i(Ds),Nh=n(Ds,"DIV",{class:!0});var fDe=s(Nh);T(WA.$$.fragment,fDe),jmo=i(fDe),Xne=n(fDe,"P",{});var SKr=s(Xne);Dmo=r(SKr,"Register a new feature extractor for this class."),SKr.forEach(t),fDe.forEach(t),Ds.forEach(t),cNe=i(f),Ci=n(f,"H2",{class:!0});var mDe=s(Ci);jh=n(mDe,"A",{id:!0,class:!0,href:!0});var RKr=s(jh);zne=n(RKr,"SPAN",{});var PKr=s(zne);T(QA.$$.fragment,PKr),PKr.forEach(t),RKr.forEach(t),Gmo=i(mDe),Wne=n(mDe,"SPAN",{});var BKr=s(Wne);Omo=r(BKr,"AutoProcessor"),BKr.forEach(t),mDe.forEach(t),fNe=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(HA.$$.fragment,Gs),Vmo=i(Gs),UA=n(Gs,"P",{});var gDe=s(UA);Xmo=r(gDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hI=n(gDe,"A",{href:!0});var IKr=s(hI);zmo=r(IKr,"AutoProcessor.from_pretrained()"),IKr.forEach(t),Wmo=r(gDe," class method."),gDe.forEach(t),Qmo=i(Gs),JA=n(Gs,"P",{});var hDe=s(JA);Hmo=r(hDe,"This class cannot be instantiated directly using "),Qne=n(hDe,"CODE",{});var qKr=s(Qne);Umo=r(qKr,"__init__()"),qKr.forEach(t),Jmo=r(hDe," (throws an error)."),hDe.forEach(t),Ymo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(YA.$$.fragment,ea),Kmo=i(ea),Hne=n(ea,"P",{});var NKr=s(Hne);Zmo=r(NKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),NKr.forEach(t),ego=i(ea),wi=n(ea,"P",{});var uZ=s(wi);ogo=r(uZ,"The processor class to instantiate is selected based on the "),Une=n(uZ,"CODE",{});var jKr=s(Une);rgo=r(jKr,"model_type"),jKr.forEach(t),tgo=r(uZ,` property of the config object (either
passed as an argument or loaded from `),Jne=n(uZ,"CODE",{});var DKr=s(Jne);ago=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),ngo=r(uZ," if possible):"),uZ.forEach(t),sgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var T6e=s(Dh);Yne=n(T6e,"STRONG",{});var GKr=s(Yne);lgo=r(GKr,"clip"),GKr.forEach(t),igo=r(T6e," \u2014 "),pI=n(T6e,"A",{href:!0});var OKr=s(pI);dgo=r(OKr,"CLIPProcessor"),OKr.forEach(t),cgo=r(T6e," (CLIP model)"),T6e.forEach(t),fgo=i(_e),Gh=n(_e,"LI",{});var M6e=s(Gh);Kne=n(M6e,"STRONG",{});var VKr=s(Kne);mgo=r(VKr,"flava"),VKr.forEach(t),ggo=r(M6e," \u2014 "),Zne=n(M6e,"CODE",{});var XKr=s(Zne);hgo=r(XKr,"FLAVAProcessor"),XKr.forEach(t),pgo=r(M6e," (Flava model)"),M6e.forEach(t),ugo=i(_e),Oh=n(_e,"LI",{});var E6e=s(Oh);ese=n(E6e,"STRONG",{});var zKr=s(ese);_go=r(zKr,"layoutlmv2"),zKr.forEach(t),bgo=r(E6e," \u2014 "),uI=n(E6e,"A",{href:!0});var WKr=s(uI);vgo=r(WKr,"LayoutLMv2Processor"),WKr.forEach(t),Fgo=r(E6e," (LayoutLMv2 model)"),E6e.forEach(t),Tgo=i(_e),Vh=n(_e,"LI",{});var C6e=s(Vh);ose=n(C6e,"STRONG",{});var QKr=s(ose);Mgo=r(QKr,"layoutlmv3"),QKr.forEach(t),Ego=r(C6e," \u2014 "),_I=n(C6e,"A",{href:!0});var HKr=s(_I);Cgo=r(HKr,"LayoutLMv3Processor"),HKr.forEach(t),wgo=r(C6e," (LayoutLMv3 model)"),C6e.forEach(t),Ago=i(_e),Xh=n(_e,"LI",{});var w6e=s(Xh);rse=n(w6e,"STRONG",{});var UKr=s(rse);ygo=r(UKr,"layoutxlm"),UKr.forEach(t),Lgo=r(w6e," \u2014 "),bI=n(w6e,"A",{href:!0});var JKr=s(bI);xgo=r(JKr,"LayoutXLMProcessor"),JKr.forEach(t),$go=r(w6e," (LayoutXLM model)"),w6e.forEach(t),kgo=i(_e),zh=n(_e,"LI",{});var A6e=s(zh);tse=n(A6e,"STRONG",{});var YKr=s(tse);Sgo=r(YKr,"sew"),YKr.forEach(t),Rgo=r(A6e," \u2014 "),vI=n(A6e,"A",{href:!0});var KKr=s(vI);Pgo=r(KKr,"Wav2Vec2Processor"),KKr.forEach(t),Bgo=r(A6e," (SEW model)"),A6e.forEach(t),Igo=i(_e),Wh=n(_e,"LI",{});var y6e=s(Wh);ase=n(y6e,"STRONG",{});var ZKr=s(ase);qgo=r(ZKr,"sew-d"),ZKr.forEach(t),Ngo=r(y6e," \u2014 "),FI=n(y6e,"A",{href:!0});var eZr=s(FI);jgo=r(eZr,"Wav2Vec2Processor"),eZr.forEach(t),Dgo=r(y6e," (SEW-D model)"),y6e.forEach(t),Ggo=i(_e),Qh=n(_e,"LI",{});var L6e=s(Qh);nse=n(L6e,"STRONG",{});var oZr=s(nse);Ogo=r(oZr,"speech_to_text"),oZr.forEach(t),Vgo=r(L6e," \u2014 "),TI=n(L6e,"A",{href:!0});var rZr=s(TI);Xgo=r(rZr,"Speech2TextProcessor"),rZr.forEach(t),zgo=r(L6e," (Speech2Text model)"),L6e.forEach(t),Wgo=i(_e),Hh=n(_e,"LI",{});var x6e=s(Hh);sse=n(x6e,"STRONG",{});var tZr=s(sse);Qgo=r(tZr,"speech_to_text_2"),tZr.forEach(t),Hgo=r(x6e," \u2014 "),MI=n(x6e,"A",{href:!0});var aZr=s(MI);Ugo=r(aZr,"Speech2Text2Processor"),aZr.forEach(t),Jgo=r(x6e," (Speech2Text2 model)"),x6e.forEach(t),Ygo=i(_e),Uh=n(_e,"LI",{});var $6e=s(Uh);lse=n($6e,"STRONG",{});var nZr=s(lse);Kgo=r(nZr,"trocr"),nZr.forEach(t),Zgo=r($6e," \u2014 "),EI=n($6e,"A",{href:!0});var sZr=s(EI);eho=r(sZr,"TrOCRProcessor"),sZr.forEach(t),oho=r($6e," (TrOCR model)"),$6e.forEach(t),rho=i(_e),Jh=n(_e,"LI",{});var k6e=s(Jh);ise=n(k6e,"STRONG",{});var lZr=s(ise);tho=r(lZr,"unispeech"),lZr.forEach(t),aho=r(k6e," \u2014 "),CI=n(k6e,"A",{href:!0});var iZr=s(CI);nho=r(iZr,"Wav2Vec2Processor"),iZr.forEach(t),sho=r(k6e," (UniSpeech model)"),k6e.forEach(t),lho=i(_e),Yh=n(_e,"LI",{});var S6e=s(Yh);dse=n(S6e,"STRONG",{});var dZr=s(dse);iho=r(dZr,"unispeech-sat"),dZr.forEach(t),dho=r(S6e," \u2014 "),wI=n(S6e,"A",{href:!0});var cZr=s(wI);cho=r(cZr,"Wav2Vec2Processor"),cZr.forEach(t),fho=r(S6e," (UniSpeechSat model)"),S6e.forEach(t),mho=i(_e),Kh=n(_e,"LI",{});var R6e=s(Kh);cse=n(R6e,"STRONG",{});var fZr=s(cse);gho=r(fZr,"vilt"),fZr.forEach(t),hho=r(R6e," \u2014 "),AI=n(R6e,"A",{href:!0});var mZr=s(AI);pho=r(mZr,"ViltProcessor"),mZr.forEach(t),uho=r(R6e," (ViLT model)"),R6e.forEach(t),_ho=i(_e),Zh=n(_e,"LI",{});var P6e=s(Zh);fse=n(P6e,"STRONG",{});var gZr=s(fse);bho=r(gZr,"vision-text-dual-encoder"),gZr.forEach(t),vho=r(P6e," \u2014 "),yI=n(P6e,"A",{href:!0});var hZr=s(yI);Fho=r(hZr,"VisionTextDualEncoderProcessor"),hZr.forEach(t),Tho=r(P6e," (VisionTextDualEncoder model)"),P6e.forEach(t),Mho=i(_e),ep=n(_e,"LI",{});var B6e=s(ep);mse=n(B6e,"STRONG",{});var pZr=s(mse);Eho=r(pZr,"wav2vec2"),pZr.forEach(t),Cho=r(B6e," \u2014 "),LI=n(B6e,"A",{href:!0});var uZr=s(LI);who=r(uZr,"Wav2Vec2Processor"),uZr.forEach(t),Aho=r(B6e," (Wav2Vec2 model)"),B6e.forEach(t),yho=i(_e),op=n(_e,"LI",{});var I6e=s(op);gse=n(I6e,"STRONG",{});var _Zr=s(gse);Lho=r(_Zr,"wav2vec2-conformer"),_Zr.forEach(t),xho=r(I6e," \u2014 "),xI=n(I6e,"A",{href:!0});var bZr=s(xI);$ho=r(bZr,"Wav2Vec2Processor"),bZr.forEach(t),kho=r(I6e," (Wav2Vec2-Conformer model)"),I6e.forEach(t),Sho=i(_e),rp=n(_e,"LI",{});var q6e=s(rp);hse=n(q6e,"STRONG",{});var vZr=s(hse);Rho=r(vZr,"wavlm"),vZr.forEach(t),Pho=r(q6e," \u2014 "),$I=n(q6e,"A",{href:!0});var FZr=s($I);Bho=r(FZr,"Wav2Vec2Processor"),FZr.forEach(t),Iho=r(q6e," (WavLM model)"),q6e.forEach(t),_e.forEach(t),qho=i(ea),T(tp.$$.fragment,ea),Nho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),jho=i(Gs),np=n(Gs,"DIV",{class:!0});var pDe=s(np);T(KA.$$.fragment,pDe),Dho=i(pDe),pse=n(pDe,"P",{});var TZr=s(pse);Gho=r(TZr,"Register a new processor for this class."),TZr.forEach(t),pDe.forEach(t),Gs.forEach(t),mNe=i(f),Ai=n(f,"H2",{class:!0});var uDe=s(Ai);sp=n(uDe,"A",{id:!0,class:!0,href:!0});var MZr=s(sp);use=n(MZr,"SPAN",{});var EZr=s(use);T(ZA.$$.fragment,EZr),EZr.forEach(t),MZr.forEach(t),Oho=i(uDe),_se=n(uDe,"SPAN",{});var CZr=s(_se);Vho=r(CZr,"AutoModel"),CZr.forEach(t),uDe.forEach(t),gNe=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(ey.$$.fragment,Os),Xho=i(Os),yi=n(Os,"P",{});var _Z=s(yi);zho=r(_Z,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kI=n(_Z,"A",{href:!0});var wZr=s(kI);Who=r(wZr,"from_pretrained()"),wZr.forEach(t),Qho=r(_Z," class method or the "),SI=n(_Z,"A",{href:!0});var AZr=s(SI);Hho=r(AZr,"from_config()"),AZr.forEach(t),Uho=r(_Z,` class
method.`),_Z.forEach(t),Jho=i(Os),oy=n(Os,"P",{});var _De=s(oy);Yho=r(_De,"This class cannot be instantiated directly using "),bse=n(_De,"CODE",{});var yZr=s(bse);Kho=r(yZr,"__init__()"),yZr.forEach(t),Zho=r(_De," (throws an error)."),_De.forEach(t),epo=i(Os),tt=n(Os,"DIV",{class:!0});var k0=s(tt);T(ry.$$.fragment,k0),opo=i(k0),vse=n(k0,"P",{});var LZr=s(vse);rpo=r(LZr,"Instantiates one of the base model classes of the library from a configuration."),LZr.forEach(t),tpo=i(k0),Li=n(k0,"P",{});var bZ=s(Li);apo=r(bZ,`Note:
Loading a model from its configuration file does `),Fse=n(bZ,"STRONG",{});var xZr=s(Fse);npo=r(xZr,"not"),xZr.forEach(t),spo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=n(bZ,"A",{href:!0});var $Zr=s(RI);lpo=r($Zr,"from_pretrained()"),$Zr.forEach(t),ipo=r(bZ," to load the model weights."),bZ.forEach(t),dpo=i(k0),T(lp.$$.fragment,k0),k0.forEach(t),cpo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(ty.$$.fragment,oa),fpo=i(oa),Tse=n(oa,"P",{});var kZr=s(Tse);mpo=r(kZr,"Instantiate one of the base model classes of the library from a pretrained model."),kZr.forEach(t),gpo=i(oa),La=n(oa,"P",{});var S0=s(La);hpo=r(S0,"The model class to instantiate is selected based on the "),Mse=n(S0,"CODE",{});var SZr=s(Mse);ppo=r(SZr,"model_type"),SZr.forEach(t),upo=r(S0,` property of the config object (either
passed as an argument or loaded from `),Ese=n(S0,"CODE",{});var RZr=s(Ese);_po=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),bpo=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(S0,"CODE",{});var PZr=s(Cse);vpo=r(PZr,"pretrained_model_name_or_path"),PZr.forEach(t),Fpo=r(S0,":"),S0.forEach(t),Tpo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var N6e=s(ip);wse=n(N6e,"STRONG",{});var BZr=s(wse);Mpo=r(BZr,"albert"),BZr.forEach(t),Epo=r(N6e," \u2014 "),PI=n(N6e,"A",{href:!0});var IZr=s(PI);Cpo=r(IZr,"AlbertModel"),IZr.forEach(t),wpo=r(N6e," (ALBERT model)"),N6e.forEach(t),Apo=i($),dp=n($,"LI",{});var j6e=s(dp);Ase=n(j6e,"STRONG",{});var qZr=s(Ase);ypo=r(qZr,"bart"),qZr.forEach(t),Lpo=r(j6e," \u2014 "),BI=n(j6e,"A",{href:!0});var NZr=s(BI);xpo=r(NZr,"BartModel"),NZr.forEach(t),$po=r(j6e," (BART model)"),j6e.forEach(t),kpo=i($),cp=n($,"LI",{});var D6e=s(cp);yse=n(D6e,"STRONG",{});var jZr=s(yse);Spo=r(jZr,"beit"),jZr.forEach(t),Rpo=r(D6e," \u2014 "),II=n(D6e,"A",{href:!0});var DZr=s(II);Ppo=r(DZr,"BeitModel"),DZr.forEach(t),Bpo=r(D6e," (BEiT model)"),D6e.forEach(t),Ipo=i($),fp=n($,"LI",{});var G6e=s(fp);Lse=n(G6e,"STRONG",{});var GZr=s(Lse);qpo=r(GZr,"bert"),GZr.forEach(t),Npo=r(G6e," \u2014 "),qI=n(G6e,"A",{href:!0});var OZr=s(qI);jpo=r(OZr,"BertModel"),OZr.forEach(t),Dpo=r(G6e," (BERT model)"),G6e.forEach(t),Gpo=i($),mp=n($,"LI",{});var O6e=s(mp);xse=n(O6e,"STRONG",{});var VZr=s(xse);Opo=r(VZr,"bert-generation"),VZr.forEach(t),Vpo=r(O6e," \u2014 "),NI=n(O6e,"A",{href:!0});var XZr=s(NI);Xpo=r(XZr,"BertGenerationEncoder"),XZr.forEach(t),zpo=r(O6e," (Bert Generation model)"),O6e.forEach(t),Wpo=i($),gp=n($,"LI",{});var V6e=s(gp);$se=n(V6e,"STRONG",{});var zZr=s($se);Qpo=r(zZr,"big_bird"),zZr.forEach(t),Hpo=r(V6e," \u2014 "),jI=n(V6e,"A",{href:!0});var WZr=s(jI);Upo=r(WZr,"BigBirdModel"),WZr.forEach(t),Jpo=r(V6e," (BigBird model)"),V6e.forEach(t),Ypo=i($),hp=n($,"LI",{});var X6e=s(hp);kse=n(X6e,"STRONG",{});var QZr=s(kse);Kpo=r(QZr,"bigbird_pegasus"),QZr.forEach(t),Zpo=r(X6e," \u2014 "),DI=n(X6e,"A",{href:!0});var HZr=s(DI);euo=r(HZr,"BigBirdPegasusModel"),HZr.forEach(t),ouo=r(X6e," (BigBirdPegasus model)"),X6e.forEach(t),ruo=i($),pp=n($,"LI",{});var z6e=s(pp);Sse=n(z6e,"STRONG",{});var UZr=s(Sse);tuo=r(UZr,"blenderbot"),UZr.forEach(t),auo=r(z6e," \u2014 "),GI=n(z6e,"A",{href:!0});var JZr=s(GI);nuo=r(JZr,"BlenderbotModel"),JZr.forEach(t),suo=r(z6e," (Blenderbot model)"),z6e.forEach(t),luo=i($),up=n($,"LI",{});var W6e=s(up);Rse=n(W6e,"STRONG",{});var YZr=s(Rse);iuo=r(YZr,"blenderbot-small"),YZr.forEach(t),duo=r(W6e," \u2014 "),OI=n(W6e,"A",{href:!0});var KZr=s(OI);cuo=r(KZr,"BlenderbotSmallModel"),KZr.forEach(t),fuo=r(W6e," (BlenderbotSmall model)"),W6e.forEach(t),muo=i($),_p=n($,"LI",{});var Q6e=s(_p);Pse=n(Q6e,"STRONG",{});var ZZr=s(Pse);guo=r(ZZr,"camembert"),ZZr.forEach(t),huo=r(Q6e," \u2014 "),VI=n(Q6e,"A",{href:!0});var eet=s(VI);puo=r(eet,"CamembertModel"),eet.forEach(t),uuo=r(Q6e," (CamemBERT model)"),Q6e.forEach(t),_uo=i($),bp=n($,"LI",{});var H6e=s(bp);Bse=n(H6e,"STRONG",{});var oet=s(Bse);buo=r(oet,"canine"),oet.forEach(t),vuo=r(H6e," \u2014 "),XI=n(H6e,"A",{href:!0});var ret=s(XI);Fuo=r(ret,"CanineModel"),ret.forEach(t),Tuo=r(H6e," (Canine model)"),H6e.forEach(t),Muo=i($),vp=n($,"LI",{});var U6e=s(vp);Ise=n(U6e,"STRONG",{});var tet=s(Ise);Euo=r(tet,"clip"),tet.forEach(t),Cuo=r(U6e," \u2014 "),zI=n(U6e,"A",{href:!0});var aet=s(zI);wuo=r(aet,"CLIPModel"),aet.forEach(t),Auo=r(U6e," (CLIP model)"),U6e.forEach(t),yuo=i($),Fp=n($,"LI",{});var J6e=s(Fp);qse=n(J6e,"STRONG",{});var net=s(qse);Luo=r(net,"convbert"),net.forEach(t),xuo=r(J6e," \u2014 "),WI=n(J6e,"A",{href:!0});var set=s(WI);$uo=r(set,"ConvBertModel"),set.forEach(t),kuo=r(J6e," (ConvBERT model)"),J6e.forEach(t),Suo=i($),Tp=n($,"LI",{});var Y6e=s(Tp);Nse=n(Y6e,"STRONG",{});var iet=s(Nse);Ruo=r(iet,"convnext"),iet.forEach(t),Puo=r(Y6e," \u2014 "),QI=n(Y6e,"A",{href:!0});var det=s(QI);Buo=r(det,"ConvNextModel"),det.forEach(t),Iuo=r(Y6e," (ConvNext model)"),Y6e.forEach(t),quo=i($),Mp=n($,"LI",{});var K6e=s(Mp);jse=n(K6e,"STRONG",{});var cet=s(jse);Nuo=r(cet,"ctrl"),cet.forEach(t),juo=r(K6e," \u2014 "),HI=n(K6e,"A",{href:!0});var fet=s(HI);Duo=r(fet,"CTRLModel"),fet.forEach(t),Guo=r(K6e," (CTRL model)"),K6e.forEach(t),Ouo=i($),Ep=n($,"LI",{});var Z6e=s(Ep);Dse=n(Z6e,"STRONG",{});var met=s(Dse);Vuo=r(met,"cvt"),met.forEach(t),Xuo=r(Z6e," \u2014 "),UI=n(Z6e,"A",{href:!0});var get=s(UI);zuo=r(get,"CvtModel"),get.forEach(t),Wuo=r(Z6e," (CvT model)"),Z6e.forEach(t),Quo=i($),Cp=n($,"LI",{});var eAe=s(Cp);Gse=n(eAe,"STRONG",{});var het=s(Gse);Huo=r(het,"data2vec-audio"),het.forEach(t),Uuo=r(eAe," \u2014 "),JI=n(eAe,"A",{href:!0});var pet=s(JI);Juo=r(pet,"Data2VecAudioModel"),pet.forEach(t),Yuo=r(eAe," (Data2VecAudio model)"),eAe.forEach(t),Kuo=i($),wp=n($,"LI",{});var oAe=s(wp);Ose=n(oAe,"STRONG",{});var uet=s(Ose);Zuo=r(uet,"data2vec-text"),uet.forEach(t),e_o=r(oAe," \u2014 "),YI=n(oAe,"A",{href:!0});var _et=s(YI);o_o=r(_et,"Data2VecTextModel"),_et.forEach(t),r_o=r(oAe," (Data2VecText model)"),oAe.forEach(t),t_o=i($),Ap=n($,"LI",{});var rAe=s(Ap);Vse=n(rAe,"STRONG",{});var bet=s(Vse);a_o=r(bet,"data2vec-vision"),bet.forEach(t),n_o=r(rAe," \u2014 "),KI=n(rAe,"A",{href:!0});var vet=s(KI);s_o=r(vet,"Data2VecVisionModel"),vet.forEach(t),l_o=r(rAe," (Data2VecVision model)"),rAe.forEach(t),i_o=i($),yp=n($,"LI",{});var tAe=s(yp);Xse=n(tAe,"STRONG",{});var Fet=s(Xse);d_o=r(Fet,"deberta"),Fet.forEach(t),c_o=r(tAe," \u2014 "),ZI=n(tAe,"A",{href:!0});var Tet=s(ZI);f_o=r(Tet,"DebertaModel"),Tet.forEach(t),m_o=r(tAe," (DeBERTa model)"),tAe.forEach(t),g_o=i($),Lp=n($,"LI",{});var aAe=s(Lp);zse=n(aAe,"STRONG",{});var Met=s(zse);h_o=r(Met,"deberta-v2"),Met.forEach(t),p_o=r(aAe," \u2014 "),eq=n(aAe,"A",{href:!0});var Eet=s(eq);u_o=r(Eet,"DebertaV2Model"),Eet.forEach(t),__o=r(aAe," (DeBERTa-v2 model)"),aAe.forEach(t),b_o=i($),xp=n($,"LI",{});var nAe=s(xp);Wse=n(nAe,"STRONG",{});var Cet=s(Wse);v_o=r(Cet,"decision_transformer"),Cet.forEach(t),F_o=r(nAe," \u2014 "),oq=n(nAe,"A",{href:!0});var wet=s(oq);T_o=r(wet,"DecisionTransformerModel"),wet.forEach(t),M_o=r(nAe," (Decision Transformer model)"),nAe.forEach(t),E_o=i($),$p=n($,"LI",{});var sAe=s($p);Qse=n(sAe,"STRONG",{});var Aet=s(Qse);C_o=r(Aet,"deit"),Aet.forEach(t),w_o=r(sAe," \u2014 "),rq=n(sAe,"A",{href:!0});var yet=s(rq);A_o=r(yet,"DeiTModel"),yet.forEach(t),y_o=r(sAe," (DeiT model)"),sAe.forEach(t),L_o=i($),kp=n($,"LI",{});var lAe=s(kp);Hse=n(lAe,"STRONG",{});var Let=s(Hse);x_o=r(Let,"detr"),Let.forEach(t),$_o=r(lAe," \u2014 "),tq=n(lAe,"A",{href:!0});var xet=s(tq);k_o=r(xet,"DetrModel"),xet.forEach(t),S_o=r(lAe," (DETR model)"),lAe.forEach(t),R_o=i($),Sp=n($,"LI",{});var iAe=s(Sp);Use=n(iAe,"STRONG",{});var $et=s(Use);P_o=r($et,"distilbert"),$et.forEach(t),B_o=r(iAe," \u2014 "),aq=n(iAe,"A",{href:!0});var ket=s(aq);I_o=r(ket,"DistilBertModel"),ket.forEach(t),q_o=r(iAe," (DistilBERT model)"),iAe.forEach(t),N_o=i($),Rp=n($,"LI",{});var dAe=s(Rp);Jse=n(dAe,"STRONG",{});var Set=s(Jse);j_o=r(Set,"dpr"),Set.forEach(t),D_o=r(dAe," \u2014 "),nq=n(dAe,"A",{href:!0});var Ret=s(nq);G_o=r(Ret,"DPRQuestionEncoder"),Ret.forEach(t),O_o=r(dAe," (DPR model)"),dAe.forEach(t),V_o=i($),Pp=n($,"LI",{});var cAe=s(Pp);Yse=n(cAe,"STRONG",{});var Pet=s(Yse);X_o=r(Pet,"dpt"),Pet.forEach(t),z_o=r(cAe," \u2014 "),sq=n(cAe,"A",{href:!0});var Bet=s(sq);W_o=r(Bet,"DPTModel"),Bet.forEach(t),Q_o=r(cAe," (DPT model)"),cAe.forEach(t),H_o=i($),Bp=n($,"LI",{});var fAe=s(Bp);Kse=n(fAe,"STRONG",{});var Iet=s(Kse);U_o=r(Iet,"electra"),Iet.forEach(t),J_o=r(fAe," \u2014 "),lq=n(fAe,"A",{href:!0});var qet=s(lq);Y_o=r(qet,"ElectraModel"),qet.forEach(t),K_o=r(fAe," (ELECTRA model)"),fAe.forEach(t),Z_o=i($),Ip=n($,"LI",{});var mAe=s(Ip);Zse=n(mAe,"STRONG",{});var Net=s(Zse);e2o=r(Net,"flaubert"),Net.forEach(t),o2o=r(mAe," \u2014 "),iq=n(mAe,"A",{href:!0});var jet=s(iq);r2o=r(jet,"FlaubertModel"),jet.forEach(t),t2o=r(mAe," (FlauBERT model)"),mAe.forEach(t),a2o=i($),qp=n($,"LI",{});var gAe=s(qp);ele=n(gAe,"STRONG",{});var Det=s(ele);n2o=r(Det,"flava"),Det.forEach(t),s2o=r(gAe," \u2014 "),dq=n(gAe,"A",{href:!0});var Get=s(dq);l2o=r(Get,"FlavaModel"),Get.forEach(t),i2o=r(gAe," (Flava model)"),gAe.forEach(t),d2o=i($),Np=n($,"LI",{});var hAe=s(Np);ole=n(hAe,"STRONG",{});var Oet=s(ole);c2o=r(Oet,"fnet"),Oet.forEach(t),f2o=r(hAe," \u2014 "),cq=n(hAe,"A",{href:!0});var Vet=s(cq);m2o=r(Vet,"FNetModel"),Vet.forEach(t),g2o=r(hAe," (FNet model)"),hAe.forEach(t),h2o=i($),jp=n($,"LI",{});var pAe=s(jp);rle=n(pAe,"STRONG",{});var Xet=s(rle);p2o=r(Xet,"fsmt"),Xet.forEach(t),u2o=r(pAe," \u2014 "),fq=n(pAe,"A",{href:!0});var zet=s(fq);_2o=r(zet,"FSMTModel"),zet.forEach(t),b2o=r(pAe," (FairSeq Machine-Translation model)"),pAe.forEach(t),v2o=i($),Bs=n($,"LI",{});var V$=s(Bs);tle=n(V$,"STRONG",{});var Wet=s(tle);F2o=r(Wet,"funnel"),Wet.forEach(t),T2o=r(V$," \u2014 "),mq=n(V$,"A",{href:!0});var Qet=s(mq);M2o=r(Qet,"FunnelModel"),Qet.forEach(t),E2o=r(V$," or "),gq=n(V$,"A",{href:!0});var Het=s(gq);C2o=r(Het,"FunnelBaseModel"),Het.forEach(t),w2o=r(V$," (Funnel Transformer model)"),V$.forEach(t),A2o=i($),Dp=n($,"LI",{});var uAe=s(Dp);ale=n(uAe,"STRONG",{});var Uet=s(ale);y2o=r(Uet,"glpn"),Uet.forEach(t),L2o=r(uAe," \u2014 "),hq=n(uAe,"A",{href:!0});var Jet=s(hq);x2o=r(Jet,"GLPNModel"),Jet.forEach(t),$2o=r(uAe," (GLPN model)"),uAe.forEach(t),k2o=i($),Gp=n($,"LI",{});var _Ae=s(Gp);nle=n(_Ae,"STRONG",{});var Yet=s(nle);S2o=r(Yet,"gpt2"),Yet.forEach(t),R2o=r(_Ae," \u2014 "),pq=n(_Ae,"A",{href:!0});var Ket=s(pq);P2o=r(Ket,"GPT2Model"),Ket.forEach(t),B2o=r(_Ae," (OpenAI GPT-2 model)"),_Ae.forEach(t),I2o=i($),Op=n($,"LI",{});var bAe=s(Op);sle=n(bAe,"STRONG",{});var Zet=s(sle);q2o=r(Zet,"gpt_neo"),Zet.forEach(t),N2o=r(bAe," \u2014 "),uq=n(bAe,"A",{href:!0});var eot=s(uq);j2o=r(eot,"GPTNeoModel"),eot.forEach(t),D2o=r(bAe," (GPT Neo model)"),bAe.forEach(t),G2o=i($),Vp=n($,"LI",{});var vAe=s(Vp);lle=n(vAe,"STRONG",{});var oot=s(lle);O2o=r(oot,"gpt_neox"),oot.forEach(t),V2o=r(vAe," \u2014 "),_q=n(vAe,"A",{href:!0});var rot=s(_q);X2o=r(rot,"GPTNeoXModel"),rot.forEach(t),z2o=r(vAe," (GPT NeoX model)"),vAe.forEach(t),W2o=i($),Xp=n($,"LI",{});var FAe=s(Xp);ile=n(FAe,"STRONG",{});var tot=s(ile);Q2o=r(tot,"gptj"),tot.forEach(t),H2o=r(FAe," \u2014 "),bq=n(FAe,"A",{href:!0});var aot=s(bq);U2o=r(aot,"GPTJModel"),aot.forEach(t),J2o=r(FAe," (GPT-J model)"),FAe.forEach(t),Y2o=i($),zp=n($,"LI",{});var TAe=s(zp);dle=n(TAe,"STRONG",{});var not=s(dle);K2o=r(not,"hubert"),not.forEach(t),Z2o=r(TAe," \u2014 "),vq=n(TAe,"A",{href:!0});var sot=s(vq);e1o=r(sot,"HubertModel"),sot.forEach(t),o1o=r(TAe," (Hubert model)"),TAe.forEach(t),r1o=i($),Wp=n($,"LI",{});var MAe=s(Wp);cle=n(MAe,"STRONG",{});var lot=s(cle);t1o=r(lot,"ibert"),lot.forEach(t),a1o=r(MAe," \u2014 "),Fq=n(MAe,"A",{href:!0});var iot=s(Fq);n1o=r(iot,"IBertModel"),iot.forEach(t),s1o=r(MAe," (I-BERT model)"),MAe.forEach(t),l1o=i($),Qp=n($,"LI",{});var EAe=s(Qp);fle=n(EAe,"STRONG",{});var dot=s(fle);i1o=r(dot,"imagegpt"),dot.forEach(t),d1o=r(EAe," \u2014 "),Tq=n(EAe,"A",{href:!0});var cot=s(Tq);c1o=r(cot,"ImageGPTModel"),cot.forEach(t),f1o=r(EAe," (ImageGPT model)"),EAe.forEach(t),m1o=i($),Hp=n($,"LI",{});var CAe=s(Hp);mle=n(CAe,"STRONG",{});var fot=s(mle);g1o=r(fot,"layoutlm"),fot.forEach(t),h1o=r(CAe," \u2014 "),Mq=n(CAe,"A",{href:!0});var mot=s(Mq);p1o=r(mot,"LayoutLMModel"),mot.forEach(t),u1o=r(CAe," (LayoutLM model)"),CAe.forEach(t),_1o=i($),Up=n($,"LI",{});var wAe=s(Up);gle=n(wAe,"STRONG",{});var got=s(gle);b1o=r(got,"layoutlmv2"),got.forEach(t),v1o=r(wAe," \u2014 "),Eq=n(wAe,"A",{href:!0});var hot=s(Eq);F1o=r(hot,"LayoutLMv2Model"),hot.forEach(t),T1o=r(wAe," (LayoutLMv2 model)"),wAe.forEach(t),M1o=i($),Jp=n($,"LI",{});var AAe=s(Jp);hle=n(AAe,"STRONG",{});var pot=s(hle);E1o=r(pot,"layoutlmv3"),pot.forEach(t),C1o=r(AAe," \u2014 "),Cq=n(AAe,"A",{href:!0});var uot=s(Cq);w1o=r(uot,"LayoutLMv3Model"),uot.forEach(t),A1o=r(AAe," (LayoutLMv3 model)"),AAe.forEach(t),y1o=i($),Yp=n($,"LI",{});var yAe=s(Yp);ple=n(yAe,"STRONG",{});var _ot=s(ple);L1o=r(_ot,"led"),_ot.forEach(t),x1o=r(yAe," \u2014 "),wq=n(yAe,"A",{href:!0});var bot=s(wq);$1o=r(bot,"LEDModel"),bot.forEach(t),k1o=r(yAe," (LED model)"),yAe.forEach(t),S1o=i($),Kp=n($,"LI",{});var LAe=s(Kp);ule=n(LAe,"STRONG",{});var vot=s(ule);R1o=r(vot,"longformer"),vot.forEach(t),P1o=r(LAe," \u2014 "),Aq=n(LAe,"A",{href:!0});var Fot=s(Aq);B1o=r(Fot,"LongformerModel"),Fot.forEach(t),I1o=r(LAe," (Longformer model)"),LAe.forEach(t),q1o=i($),Zp=n($,"LI",{});var xAe=s(Zp);_le=n(xAe,"STRONG",{});var Tot=s(_le);N1o=r(Tot,"luke"),Tot.forEach(t),j1o=r(xAe," \u2014 "),yq=n(xAe,"A",{href:!0});var Mot=s(yq);D1o=r(Mot,"LukeModel"),Mot.forEach(t),G1o=r(xAe," (LUKE model)"),xAe.forEach(t),O1o=i($),eu=n($,"LI",{});var $Ae=s(eu);ble=n($Ae,"STRONG",{});var Eot=s(ble);V1o=r(Eot,"lxmert"),Eot.forEach(t),X1o=r($Ae," \u2014 "),Lq=n($Ae,"A",{href:!0});var Cot=s(Lq);z1o=r(Cot,"LxmertModel"),Cot.forEach(t),W1o=r($Ae," (LXMERT model)"),$Ae.forEach(t),Q1o=i($),ou=n($,"LI",{});var kAe=s(ou);vle=n(kAe,"STRONG",{});var wot=s(vle);H1o=r(wot,"m2m_100"),wot.forEach(t),U1o=r(kAe," \u2014 "),xq=n(kAe,"A",{href:!0});var Aot=s(xq);J1o=r(Aot,"M2M100Model"),Aot.forEach(t),Y1o=r(kAe," (M2M100 model)"),kAe.forEach(t),K1o=i($),ru=n($,"LI",{});var SAe=s(ru);Fle=n(SAe,"STRONG",{});var yot=s(Fle);Z1o=r(yot,"marian"),yot.forEach(t),ebo=r(SAe," \u2014 "),$q=n(SAe,"A",{href:!0});var Lot=s($q);obo=r(Lot,"MarianModel"),Lot.forEach(t),rbo=r(SAe," (Marian model)"),SAe.forEach(t),tbo=i($),tu=n($,"LI",{});var RAe=s(tu);Tle=n(RAe,"STRONG",{});var xot=s(Tle);abo=r(xot,"maskformer"),xot.forEach(t),nbo=r(RAe," \u2014 "),kq=n(RAe,"A",{href:!0});var $ot=s(kq);sbo=r($ot,"MaskFormerModel"),$ot.forEach(t),lbo=r(RAe," (MaskFormer model)"),RAe.forEach(t),ibo=i($),au=n($,"LI",{});var PAe=s(au);Mle=n(PAe,"STRONG",{});var kot=s(Mle);dbo=r(kot,"mbart"),kot.forEach(t),cbo=r(PAe," \u2014 "),Sq=n(PAe,"A",{href:!0});var Sot=s(Sq);fbo=r(Sot,"MBartModel"),Sot.forEach(t),mbo=r(PAe," (mBART model)"),PAe.forEach(t),gbo=i($),nu=n($,"LI",{});var BAe=s(nu);Ele=n(BAe,"STRONG",{});var Rot=s(Ele);hbo=r(Rot,"megatron-bert"),Rot.forEach(t),pbo=r(BAe," \u2014 "),Rq=n(BAe,"A",{href:!0});var Pot=s(Rq);ubo=r(Pot,"MegatronBertModel"),Pot.forEach(t),_bo=r(BAe," (MegatronBert model)"),BAe.forEach(t),bbo=i($),su=n($,"LI",{});var IAe=s(su);Cle=n(IAe,"STRONG",{});var Bot=s(Cle);vbo=r(Bot,"mobilebert"),Bot.forEach(t),Fbo=r(IAe," \u2014 "),Pq=n(IAe,"A",{href:!0});var Iot=s(Pq);Tbo=r(Iot,"MobileBertModel"),Iot.forEach(t),Mbo=r(IAe," (MobileBERT model)"),IAe.forEach(t),Ebo=i($),lu=n($,"LI",{});var qAe=s(lu);wle=n(qAe,"STRONG",{});var qot=s(wle);Cbo=r(qot,"mpnet"),qot.forEach(t),wbo=r(qAe," \u2014 "),Bq=n(qAe,"A",{href:!0});var Not=s(Bq);Abo=r(Not,"MPNetModel"),Not.forEach(t),ybo=r(qAe," (MPNet model)"),qAe.forEach(t),Lbo=i($),iu=n($,"LI",{});var NAe=s(iu);Ale=n(NAe,"STRONG",{});var jot=s(Ale);xbo=r(jot,"mt5"),jot.forEach(t),$bo=r(NAe," \u2014 "),Iq=n(NAe,"A",{href:!0});var Dot=s(Iq);kbo=r(Dot,"MT5Model"),Dot.forEach(t),Sbo=r(NAe," (mT5 model)"),NAe.forEach(t),Rbo=i($),du=n($,"LI",{});var jAe=s(du);yle=n(jAe,"STRONG",{});var Got=s(yle);Pbo=r(Got,"nystromformer"),Got.forEach(t),Bbo=r(jAe," \u2014 "),qq=n(jAe,"A",{href:!0});var Oot=s(qq);Ibo=r(Oot,"NystromformerModel"),Oot.forEach(t),qbo=r(jAe," (Nystromformer model)"),jAe.forEach(t),Nbo=i($),cu=n($,"LI",{});var DAe=s(cu);Lle=n(DAe,"STRONG",{});var Vot=s(Lle);jbo=r(Vot,"openai-gpt"),Vot.forEach(t),Dbo=r(DAe," \u2014 "),Nq=n(DAe,"A",{href:!0});var Xot=s(Nq);Gbo=r(Xot,"OpenAIGPTModel"),Xot.forEach(t),Obo=r(DAe," (OpenAI GPT model)"),DAe.forEach(t),Vbo=i($),fu=n($,"LI",{});var GAe=s(fu);xle=n(GAe,"STRONG",{});var zot=s(xle);Xbo=r(zot,"opt"),zot.forEach(t),zbo=r(GAe," \u2014 "),jq=n(GAe,"A",{href:!0});var Wot=s(jq);Wbo=r(Wot,"OPTModel"),Wot.forEach(t),Qbo=r(GAe," (OPT model)"),GAe.forEach(t),Hbo=i($),mu=n($,"LI",{});var OAe=s(mu);$le=n(OAe,"STRONG",{});var Qot=s($le);Ubo=r(Qot,"pegasus"),Qot.forEach(t),Jbo=r(OAe," \u2014 "),Dq=n(OAe,"A",{href:!0});var Hot=s(Dq);Ybo=r(Hot,"PegasusModel"),Hot.forEach(t),Kbo=r(OAe," (Pegasus model)"),OAe.forEach(t),Zbo=i($),gu=n($,"LI",{});var VAe=s(gu);kle=n(VAe,"STRONG",{});var Uot=s(kle);e4o=r(Uot,"perceiver"),Uot.forEach(t),o4o=r(VAe," \u2014 "),Gq=n(VAe,"A",{href:!0});var Jot=s(Gq);r4o=r(Jot,"PerceiverModel"),Jot.forEach(t),t4o=r(VAe," (Perceiver model)"),VAe.forEach(t),a4o=i($),hu=n($,"LI",{});var XAe=s(hu);Sle=n(XAe,"STRONG",{});var Yot=s(Sle);n4o=r(Yot,"plbart"),Yot.forEach(t),s4o=r(XAe," \u2014 "),Oq=n(XAe,"A",{href:!0});var Kot=s(Oq);l4o=r(Kot,"PLBartModel"),Kot.forEach(t),i4o=r(XAe," (PLBart model)"),XAe.forEach(t),d4o=i($),pu=n($,"LI",{});var zAe=s(pu);Rle=n(zAe,"STRONG",{});var Zot=s(Rle);c4o=r(Zot,"poolformer"),Zot.forEach(t),f4o=r(zAe," \u2014 "),Vq=n(zAe,"A",{href:!0});var ert=s(Vq);m4o=r(ert,"PoolFormerModel"),ert.forEach(t),g4o=r(zAe," (PoolFormer model)"),zAe.forEach(t),h4o=i($),uu=n($,"LI",{});var WAe=s(uu);Ple=n(WAe,"STRONG",{});var ort=s(Ple);p4o=r(ort,"prophetnet"),ort.forEach(t),u4o=r(WAe," \u2014 "),Xq=n(WAe,"A",{href:!0});var rrt=s(Xq);_4o=r(rrt,"ProphetNetModel"),rrt.forEach(t),b4o=r(WAe," (ProphetNet model)"),WAe.forEach(t),v4o=i($),_u=n($,"LI",{});var QAe=s(_u);Ble=n(QAe,"STRONG",{});var trt=s(Ble);F4o=r(trt,"qdqbert"),trt.forEach(t),T4o=r(QAe," \u2014 "),zq=n(QAe,"A",{href:!0});var art=s(zq);M4o=r(art,"QDQBertModel"),art.forEach(t),E4o=r(QAe," (QDQBert model)"),QAe.forEach(t),C4o=i($),bu=n($,"LI",{});var HAe=s(bu);Ile=n(HAe,"STRONG",{});var nrt=s(Ile);w4o=r(nrt,"reformer"),nrt.forEach(t),A4o=r(HAe," \u2014 "),Wq=n(HAe,"A",{href:!0});var srt=s(Wq);y4o=r(srt,"ReformerModel"),srt.forEach(t),L4o=r(HAe," (Reformer model)"),HAe.forEach(t),x4o=i($),vu=n($,"LI",{});var UAe=s(vu);qle=n(UAe,"STRONG",{});var lrt=s(qle);$4o=r(lrt,"regnet"),lrt.forEach(t),k4o=r(UAe," \u2014 "),Qq=n(UAe,"A",{href:!0});var irt=s(Qq);S4o=r(irt,"RegNetModel"),irt.forEach(t),R4o=r(UAe," (RegNet model)"),UAe.forEach(t),P4o=i($),Fu=n($,"LI",{});var JAe=s(Fu);Nle=n(JAe,"STRONG",{});var drt=s(Nle);B4o=r(drt,"rembert"),drt.forEach(t),I4o=r(JAe," \u2014 "),Hq=n(JAe,"A",{href:!0});var crt=s(Hq);q4o=r(crt,"RemBertModel"),crt.forEach(t),N4o=r(JAe," (RemBERT model)"),JAe.forEach(t),j4o=i($),Tu=n($,"LI",{});var YAe=s(Tu);jle=n(YAe,"STRONG",{});var frt=s(jle);D4o=r(frt,"resnet"),frt.forEach(t),G4o=r(YAe," \u2014 "),Uq=n(YAe,"A",{href:!0});var mrt=s(Uq);O4o=r(mrt,"ResNetModel"),mrt.forEach(t),V4o=r(YAe," (ResNet model)"),YAe.forEach(t),X4o=i($),Mu=n($,"LI",{});var KAe=s(Mu);Dle=n(KAe,"STRONG",{});var grt=s(Dle);z4o=r(grt,"retribert"),grt.forEach(t),W4o=r(KAe," \u2014 "),Jq=n(KAe,"A",{href:!0});var hrt=s(Jq);Q4o=r(hrt,"RetriBertModel"),hrt.forEach(t),H4o=r(KAe," (RetriBERT model)"),KAe.forEach(t),U4o=i($),Eu=n($,"LI",{});var ZAe=s(Eu);Gle=n(ZAe,"STRONG",{});var prt=s(Gle);J4o=r(prt,"roberta"),prt.forEach(t),Y4o=r(ZAe," \u2014 "),Yq=n(ZAe,"A",{href:!0});var urt=s(Yq);K4o=r(urt,"RobertaModel"),urt.forEach(t),Z4o=r(ZAe," (RoBERTa model)"),ZAe.forEach(t),evo=i($),Cu=n($,"LI",{});var eye=s(Cu);Ole=n(eye,"STRONG",{});var _rt=s(Ole);ovo=r(_rt,"roformer"),_rt.forEach(t),rvo=r(eye," \u2014 "),Kq=n(eye,"A",{href:!0});var brt=s(Kq);tvo=r(brt,"RoFormerModel"),brt.forEach(t),avo=r(eye," (RoFormer model)"),eye.forEach(t),nvo=i($),wu=n($,"LI",{});var oye=s(wu);Vle=n(oye,"STRONG",{});var vrt=s(Vle);svo=r(vrt,"segformer"),vrt.forEach(t),lvo=r(oye," \u2014 "),Zq=n(oye,"A",{href:!0});var Frt=s(Zq);ivo=r(Frt,"SegformerModel"),Frt.forEach(t),dvo=r(oye," (SegFormer model)"),oye.forEach(t),cvo=i($),Au=n($,"LI",{});var rye=s(Au);Xle=n(rye,"STRONG",{});var Trt=s(Xle);fvo=r(Trt,"sew"),Trt.forEach(t),mvo=r(rye," \u2014 "),eN=n(rye,"A",{href:!0});var Mrt=s(eN);gvo=r(Mrt,"SEWModel"),Mrt.forEach(t),hvo=r(rye," (SEW model)"),rye.forEach(t),pvo=i($),yu=n($,"LI",{});var tye=s(yu);zle=n(tye,"STRONG",{});var Ert=s(zle);uvo=r(Ert,"sew-d"),Ert.forEach(t),_vo=r(tye," \u2014 "),oN=n(tye,"A",{href:!0});var Crt=s(oN);bvo=r(Crt,"SEWDModel"),Crt.forEach(t),vvo=r(tye," (SEW-D model)"),tye.forEach(t),Fvo=i($),Lu=n($,"LI",{});var aye=s(Lu);Wle=n(aye,"STRONG",{});var wrt=s(Wle);Tvo=r(wrt,"speech_to_text"),wrt.forEach(t),Mvo=r(aye," \u2014 "),rN=n(aye,"A",{href:!0});var Art=s(rN);Evo=r(Art,"Speech2TextModel"),Art.forEach(t),Cvo=r(aye," (Speech2Text model)"),aye.forEach(t),wvo=i($),xu=n($,"LI",{});var nye=s(xu);Qle=n(nye,"STRONG",{});var yrt=s(Qle);Avo=r(yrt,"splinter"),yrt.forEach(t),yvo=r(nye," \u2014 "),tN=n(nye,"A",{href:!0});var Lrt=s(tN);Lvo=r(Lrt,"SplinterModel"),Lrt.forEach(t),xvo=r(nye," (Splinter model)"),nye.forEach(t),$vo=i($),$u=n($,"LI",{});var sye=s($u);Hle=n(sye,"STRONG",{});var xrt=s(Hle);kvo=r(xrt,"squeezebert"),xrt.forEach(t),Svo=r(sye," \u2014 "),aN=n(sye,"A",{href:!0});var $rt=s(aN);Rvo=r($rt,"SqueezeBertModel"),$rt.forEach(t),Pvo=r(sye," (SqueezeBERT model)"),sye.forEach(t),Bvo=i($),ku=n($,"LI",{});var lye=s(ku);Ule=n(lye,"STRONG",{});var krt=s(Ule);Ivo=r(krt,"swin"),krt.forEach(t),qvo=r(lye," \u2014 "),nN=n(lye,"A",{href:!0});var Srt=s(nN);Nvo=r(Srt,"SwinModel"),Srt.forEach(t),jvo=r(lye," (Swin model)"),lye.forEach(t),Dvo=i($),Su=n($,"LI",{});var iye=s(Su);Jle=n(iye,"STRONG",{});var Rrt=s(Jle);Gvo=r(Rrt,"t5"),Rrt.forEach(t),Ovo=r(iye," \u2014 "),sN=n(iye,"A",{href:!0});var Prt=s(sN);Vvo=r(Prt,"T5Model"),Prt.forEach(t),Xvo=r(iye," (T5 model)"),iye.forEach(t),zvo=i($),Ru=n($,"LI",{});var dye=s(Ru);Yle=n(dye,"STRONG",{});var Brt=s(Yle);Wvo=r(Brt,"tapas"),Brt.forEach(t),Qvo=r(dye," \u2014 "),lN=n(dye,"A",{href:!0});var Irt=s(lN);Hvo=r(Irt,"TapasModel"),Irt.forEach(t),Uvo=r(dye," (TAPAS model)"),dye.forEach(t),Jvo=i($),Pu=n($,"LI",{});var cye=s(Pu);Kle=n(cye,"STRONG",{});var qrt=s(Kle);Yvo=r(qrt,"trajectory_transformer"),qrt.forEach(t),Kvo=r(cye," \u2014 "),iN=n(cye,"A",{href:!0});var Nrt=s(iN);Zvo=r(Nrt,"TrajectoryTransformerModel"),Nrt.forEach(t),e5o=r(cye," (Trajectory Transformer model)"),cye.forEach(t),o5o=i($),Bu=n($,"LI",{});var fye=s(Bu);Zle=n(fye,"STRONG",{});var jrt=s(Zle);r5o=r(jrt,"transfo-xl"),jrt.forEach(t),t5o=r(fye," \u2014 "),dN=n(fye,"A",{href:!0});var Drt=s(dN);a5o=r(Drt,"TransfoXLModel"),Drt.forEach(t),n5o=r(fye," (Transformer-XL model)"),fye.forEach(t),s5o=i($),Iu=n($,"LI",{});var mye=s(Iu);eie=n(mye,"STRONG",{});var Grt=s(eie);l5o=r(Grt,"unispeech"),Grt.forEach(t),i5o=r(mye," \u2014 "),cN=n(mye,"A",{href:!0});var Ort=s(cN);d5o=r(Ort,"UniSpeechModel"),Ort.forEach(t),c5o=r(mye," (UniSpeech model)"),mye.forEach(t),f5o=i($),qu=n($,"LI",{});var gye=s(qu);oie=n(gye,"STRONG",{});var Vrt=s(oie);m5o=r(Vrt,"unispeech-sat"),Vrt.forEach(t),g5o=r(gye," \u2014 "),fN=n(gye,"A",{href:!0});var Xrt=s(fN);h5o=r(Xrt,"UniSpeechSatModel"),Xrt.forEach(t),p5o=r(gye," (UniSpeechSat model)"),gye.forEach(t),u5o=i($),Nu=n($,"LI",{});var hye=s(Nu);rie=n(hye,"STRONG",{});var zrt=s(rie);_5o=r(zrt,"van"),zrt.forEach(t),b5o=r(hye," \u2014 "),mN=n(hye,"A",{href:!0});var Wrt=s(mN);v5o=r(Wrt,"VanModel"),Wrt.forEach(t),F5o=r(hye," (VAN model)"),hye.forEach(t),T5o=i($),ju=n($,"LI",{});var pye=s(ju);tie=n(pye,"STRONG",{});var Qrt=s(tie);M5o=r(Qrt,"vilt"),Qrt.forEach(t),E5o=r(pye," \u2014 "),gN=n(pye,"A",{href:!0});var Hrt=s(gN);C5o=r(Hrt,"ViltModel"),Hrt.forEach(t),w5o=r(pye," (ViLT model)"),pye.forEach(t),A5o=i($),Du=n($,"LI",{});var uye=s(Du);aie=n(uye,"STRONG",{});var Urt=s(aie);y5o=r(Urt,"vision-text-dual-encoder"),Urt.forEach(t),L5o=r(uye," \u2014 "),hN=n(uye,"A",{href:!0});var Jrt=s(hN);x5o=r(Jrt,"VisionTextDualEncoderModel"),Jrt.forEach(t),$5o=r(uye," (VisionTextDualEncoder model)"),uye.forEach(t),k5o=i($),Gu=n($,"LI",{});var _ye=s(Gu);nie=n(_ye,"STRONG",{});var Yrt=s(nie);S5o=r(Yrt,"visual_bert"),Yrt.forEach(t),R5o=r(_ye," \u2014 "),pN=n(_ye,"A",{href:!0});var Krt=s(pN);P5o=r(Krt,"VisualBertModel"),Krt.forEach(t),B5o=r(_ye," (VisualBert model)"),_ye.forEach(t),I5o=i($),Ou=n($,"LI",{});var bye=s(Ou);sie=n(bye,"STRONG",{});var Zrt=s(sie);q5o=r(Zrt,"vit"),Zrt.forEach(t),N5o=r(bye," \u2014 "),uN=n(bye,"A",{href:!0});var ett=s(uN);j5o=r(ett,"ViTModel"),ett.forEach(t),D5o=r(bye," (ViT model)"),bye.forEach(t),G5o=i($),Vu=n($,"LI",{});var vye=s(Vu);lie=n(vye,"STRONG",{});var ott=s(lie);O5o=r(ott,"vit_mae"),ott.forEach(t),V5o=r(vye," \u2014 "),_N=n(vye,"A",{href:!0});var rtt=s(_N);X5o=r(rtt,"ViTMAEModel"),rtt.forEach(t),z5o=r(vye," (ViTMAE model)"),vye.forEach(t),W5o=i($),Xu=n($,"LI",{});var Fye=s(Xu);iie=n(Fye,"STRONG",{});var ttt=s(iie);Q5o=r(ttt,"wav2vec2"),ttt.forEach(t),H5o=r(Fye," \u2014 "),bN=n(Fye,"A",{href:!0});var att=s(bN);U5o=r(att,"Wav2Vec2Model"),att.forEach(t),J5o=r(Fye," (Wav2Vec2 model)"),Fye.forEach(t),Y5o=i($),zu=n($,"LI",{});var Tye=s(zu);die=n(Tye,"STRONG",{});var ntt=s(die);K5o=r(ntt,"wav2vec2-conformer"),ntt.forEach(t),Z5o=r(Tye," \u2014 "),vN=n(Tye,"A",{href:!0});var stt=s(vN);eFo=r(stt,"Wav2Vec2ConformerModel"),stt.forEach(t),oFo=r(Tye," (Wav2Vec2-Conformer model)"),Tye.forEach(t),rFo=i($),Wu=n($,"LI",{});var Mye=s(Wu);cie=n(Mye,"STRONG",{});var ltt=s(cie);tFo=r(ltt,"wavlm"),ltt.forEach(t),aFo=r(Mye," \u2014 "),FN=n(Mye,"A",{href:!0});var itt=s(FN);nFo=r(itt,"WavLMModel"),itt.forEach(t),sFo=r(Mye," (WavLM model)"),Mye.forEach(t),lFo=i($),Qu=n($,"LI",{});var Eye=s(Qu);fie=n(Eye,"STRONG",{});var dtt=s(fie);iFo=r(dtt,"xglm"),dtt.forEach(t),dFo=r(Eye," \u2014 "),TN=n(Eye,"A",{href:!0});var ctt=s(TN);cFo=r(ctt,"XGLMModel"),ctt.forEach(t),fFo=r(Eye," (XGLM model)"),Eye.forEach(t),mFo=i($),Hu=n($,"LI",{});var Cye=s(Hu);mie=n(Cye,"STRONG",{});var ftt=s(mie);gFo=r(ftt,"xlm"),ftt.forEach(t),hFo=r(Cye," \u2014 "),MN=n(Cye,"A",{href:!0});var mtt=s(MN);pFo=r(mtt,"XLMModel"),mtt.forEach(t),uFo=r(Cye," (XLM model)"),Cye.forEach(t),_Fo=i($),Uu=n($,"LI",{});var wye=s(Uu);gie=n(wye,"STRONG",{});var gtt=s(gie);bFo=r(gtt,"xlm-prophetnet"),gtt.forEach(t),vFo=r(wye," \u2014 "),EN=n(wye,"A",{href:!0});var htt=s(EN);FFo=r(htt,"XLMProphetNetModel"),htt.forEach(t),TFo=r(wye," (XLMProphetNet model)"),wye.forEach(t),MFo=i($),Ju=n($,"LI",{});var Aye=s(Ju);hie=n(Aye,"STRONG",{});var ptt=s(hie);EFo=r(ptt,"xlm-roberta"),ptt.forEach(t),CFo=r(Aye," \u2014 "),CN=n(Aye,"A",{href:!0});var utt=s(CN);wFo=r(utt,"XLMRobertaModel"),utt.forEach(t),AFo=r(Aye," (XLM-RoBERTa model)"),Aye.forEach(t),yFo=i($),Yu=n($,"LI",{});var yye=s(Yu);pie=n(yye,"STRONG",{});var _tt=s(pie);LFo=r(_tt,"xlm-roberta-xl"),_tt.forEach(t),xFo=r(yye," \u2014 "),wN=n(yye,"A",{href:!0});var btt=s(wN);$Fo=r(btt,"XLMRobertaXLModel"),btt.forEach(t),kFo=r(yye," (XLM-RoBERTa-XL model)"),yye.forEach(t),SFo=i($),Ku=n($,"LI",{});var Lye=s(Ku);uie=n(Lye,"STRONG",{});var vtt=s(uie);RFo=r(vtt,"xlnet"),vtt.forEach(t),PFo=r(Lye," \u2014 "),AN=n(Lye,"A",{href:!0});var Ftt=s(AN);BFo=r(Ftt,"XLNetModel"),Ftt.forEach(t),IFo=r(Lye," (XLNet model)"),Lye.forEach(t),qFo=i($),Zu=n($,"LI",{});var xye=s(Zu);_ie=n(xye,"STRONG",{});var Ttt=s(_ie);NFo=r(Ttt,"yolos"),Ttt.forEach(t),jFo=r(xye," \u2014 "),yN=n(xye,"A",{href:!0});var Mtt=s(yN);DFo=r(Mtt,"YolosModel"),Mtt.forEach(t),GFo=r(xye," (YOLOS model)"),xye.forEach(t),OFo=i($),e_=n($,"LI",{});var $ye=s(e_);bie=n($ye,"STRONG",{});var Ett=s(bie);VFo=r(Ett,"yoso"),Ett.forEach(t),XFo=r($ye," \u2014 "),LN=n($ye,"A",{href:!0});var Ctt=s(LN);zFo=r(Ctt,"YosoModel"),Ctt.forEach(t),WFo=r($ye," (YOSO model)"),$ye.forEach(t),$.forEach(t),QFo=i(oa),o_=n(oa,"P",{});var kye=s(o_);HFo=r(kye,"The model is set in evaluation mode by default using "),vie=n(kye,"CODE",{});var wtt=s(vie);UFo=r(wtt,"model.eval()"),wtt.forEach(t),JFo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=n(kye,"CODE",{});var Att=s(Fie);YFo=r(Att,"model.train()"),Att.forEach(t),kye.forEach(t),KFo=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Os.forEach(t),hNe=i(f),xi=n(f,"H2",{class:!0});var bDe=s(xi);t_=n(bDe,"A",{id:!0,class:!0,href:!0});var ytt=s(t_);Tie=n(ytt,"SPAN",{});var Ltt=s(Tie);T(ay.$$.fragment,Ltt),Ltt.forEach(t),ytt.forEach(t),ZFo=i(bDe),Mie=n(bDe,"SPAN",{});var xtt=s(Mie);eTo=r(xtt,"AutoModelForPreTraining"),xtt.forEach(t),bDe.forEach(t),pNe=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(ny.$$.fragment,Vs),oTo=i(Vs),$i=n(Vs,"P",{});var vZ=s($i);rTo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xN=n(vZ,"A",{href:!0});var $tt=s(xN);tTo=r($tt,"from_pretrained()"),$tt.forEach(t),aTo=r(vZ," class method or the "),$N=n(vZ,"A",{href:!0});var ktt=s($N);nTo=r(ktt,"from_config()"),ktt.forEach(t),sTo=r(vZ,` class
method.`),vZ.forEach(t),lTo=i(Vs),sy=n(Vs,"P",{});var vDe=s(sy);iTo=r(vDe,"This class cannot be instantiated directly using "),Eie=n(vDe,"CODE",{});var Stt=s(Eie);dTo=r(Stt,"__init__()"),Stt.forEach(t),cTo=r(vDe," (throws an error)."),vDe.forEach(t),fTo=i(Vs),at=n(Vs,"DIV",{class:!0});var R0=s(at);T(ly.$$.fragment,R0),mTo=i(R0),Cie=n(R0,"P",{});var Rtt=s(Cie);gTo=r(Rtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rtt.forEach(t),hTo=i(R0),ki=n(R0,"P",{});var FZ=s(ki);pTo=r(FZ,`Note:
Loading a model from its configuration file does `),wie=n(FZ,"STRONG",{});var Ptt=s(wie);uTo=r(Ptt,"not"),Ptt.forEach(t),_To=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kN=n(FZ,"A",{href:!0});var Btt=s(kN);bTo=r(Btt,"from_pretrained()"),Btt.forEach(t),vTo=r(FZ," to load the model weights."),FZ.forEach(t),FTo=i(R0),T(a_.$$.fragment,R0),R0.forEach(t),TTo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(iy.$$.fragment,ra),MTo=i(ra),Aie=n(ra,"P",{});var Itt=s(Aie);ETo=r(Itt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Itt.forEach(t),CTo=i(ra),xa=n(ra,"P",{});var P0=s(xa);wTo=r(P0,"The model class to instantiate is selected based on the "),yie=n(P0,"CODE",{});var qtt=s(yie);ATo=r(qtt,"model_type"),qtt.forEach(t),yTo=r(P0,` property of the config object (either
passed as an argument or loaded from `),Lie=n(P0,"CODE",{});var Ntt=s(Lie);LTo=r(Ntt,"pretrained_model_name_or_path"),Ntt.forEach(t),xTo=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=n(P0,"CODE",{});var jtt=s(xie);$To=r(jtt,"pretrained_model_name_or_path"),jtt.forEach(t),kTo=r(P0,":"),P0.forEach(t),STo=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var Sye=s(n_);$ie=n(Sye,"STRONG",{});var Dtt=s($ie);RTo=r(Dtt,"albert"),Dtt.forEach(t),PTo=r(Sye," \u2014 "),SN=n(Sye,"A",{href:!0});var Gtt=s(SN);BTo=r(Gtt,"AlbertForPreTraining"),Gtt.forEach(t),ITo=r(Sye," (ALBERT model)"),Sye.forEach(t),qTo=i(O),s_=n(O,"LI",{});var Rye=s(s_);kie=n(Rye,"STRONG",{});var Ott=s(kie);NTo=r(Ott,"bart"),Ott.forEach(t),jTo=r(Rye," \u2014 "),RN=n(Rye,"A",{href:!0});var Vtt=s(RN);DTo=r(Vtt,"BartForConditionalGeneration"),Vtt.forEach(t),GTo=r(Rye," (BART model)"),Rye.forEach(t),OTo=i(O),l_=n(O,"LI",{});var Pye=s(l_);Sie=n(Pye,"STRONG",{});var Xtt=s(Sie);VTo=r(Xtt,"bert"),Xtt.forEach(t),XTo=r(Pye," \u2014 "),PN=n(Pye,"A",{href:!0});var ztt=s(PN);zTo=r(ztt,"BertForPreTraining"),ztt.forEach(t),WTo=r(Pye," (BERT model)"),Pye.forEach(t),QTo=i(O),i_=n(O,"LI",{});var Bye=s(i_);Rie=n(Bye,"STRONG",{});var Wtt=s(Rie);HTo=r(Wtt,"big_bird"),Wtt.forEach(t),UTo=r(Bye," \u2014 "),BN=n(Bye,"A",{href:!0});var Qtt=s(BN);JTo=r(Qtt,"BigBirdForPreTraining"),Qtt.forEach(t),YTo=r(Bye," (BigBird model)"),Bye.forEach(t),KTo=i(O),d_=n(O,"LI",{});var Iye=s(d_);Pie=n(Iye,"STRONG",{});var Htt=s(Pie);ZTo=r(Htt,"camembert"),Htt.forEach(t),e7o=r(Iye," \u2014 "),IN=n(Iye,"A",{href:!0});var Utt=s(IN);o7o=r(Utt,"CamembertForMaskedLM"),Utt.forEach(t),r7o=r(Iye," (CamemBERT model)"),Iye.forEach(t),t7o=i(O),c_=n(O,"LI",{});var qye=s(c_);Bie=n(qye,"STRONG",{});var Jtt=s(Bie);a7o=r(Jtt,"ctrl"),Jtt.forEach(t),n7o=r(qye," \u2014 "),qN=n(qye,"A",{href:!0});var Ytt=s(qN);s7o=r(Ytt,"CTRLLMHeadModel"),Ytt.forEach(t),l7o=r(qye," (CTRL model)"),qye.forEach(t),i7o=i(O),f_=n(O,"LI",{});var Nye=s(f_);Iie=n(Nye,"STRONG",{});var Ktt=s(Iie);d7o=r(Ktt,"data2vec-text"),Ktt.forEach(t),c7o=r(Nye," \u2014 "),NN=n(Nye,"A",{href:!0});var Ztt=s(NN);f7o=r(Ztt,"Data2VecTextForMaskedLM"),Ztt.forEach(t),m7o=r(Nye," (Data2VecText model)"),Nye.forEach(t),g7o=i(O),m_=n(O,"LI",{});var jye=s(m_);qie=n(jye,"STRONG",{});var eat=s(qie);h7o=r(eat,"deberta"),eat.forEach(t),p7o=r(jye," \u2014 "),jN=n(jye,"A",{href:!0});var oat=s(jN);u7o=r(oat,"DebertaForMaskedLM"),oat.forEach(t),_7o=r(jye," (DeBERTa model)"),jye.forEach(t),b7o=i(O),g_=n(O,"LI",{});var Dye=s(g_);Nie=n(Dye,"STRONG",{});var rat=s(Nie);v7o=r(rat,"deberta-v2"),rat.forEach(t),F7o=r(Dye," \u2014 "),DN=n(Dye,"A",{href:!0});var tat=s(DN);T7o=r(tat,"DebertaV2ForMaskedLM"),tat.forEach(t),M7o=r(Dye," (DeBERTa-v2 model)"),Dye.forEach(t),E7o=i(O),h_=n(O,"LI",{});var Gye=s(h_);jie=n(Gye,"STRONG",{});var aat=s(jie);C7o=r(aat,"distilbert"),aat.forEach(t),w7o=r(Gye," \u2014 "),GN=n(Gye,"A",{href:!0});var nat=s(GN);A7o=r(nat,"DistilBertForMaskedLM"),nat.forEach(t),y7o=r(Gye," (DistilBERT model)"),Gye.forEach(t),L7o=i(O),p_=n(O,"LI",{});var Oye=s(p_);Die=n(Oye,"STRONG",{});var sat=s(Die);x7o=r(sat,"electra"),sat.forEach(t),$7o=r(Oye," \u2014 "),ON=n(Oye,"A",{href:!0});var lat=s(ON);k7o=r(lat,"ElectraForPreTraining"),lat.forEach(t),S7o=r(Oye," (ELECTRA model)"),Oye.forEach(t),R7o=i(O),u_=n(O,"LI",{});var Vye=s(u_);Gie=n(Vye,"STRONG",{});var iat=s(Gie);P7o=r(iat,"flaubert"),iat.forEach(t),B7o=r(Vye," \u2014 "),VN=n(Vye,"A",{href:!0});var dat=s(VN);I7o=r(dat,"FlaubertWithLMHeadModel"),dat.forEach(t),q7o=r(Vye," (FlauBERT model)"),Vye.forEach(t),N7o=i(O),__=n(O,"LI",{});var Xye=s(__);Oie=n(Xye,"STRONG",{});var cat=s(Oie);j7o=r(cat,"flava"),cat.forEach(t),D7o=r(Xye," \u2014 "),XN=n(Xye,"A",{href:!0});var fat=s(XN);G7o=r(fat,"FlavaForPreTraining"),fat.forEach(t),O7o=r(Xye," (Flava model)"),Xye.forEach(t),V7o=i(O),b_=n(O,"LI",{});var zye=s(b_);Vie=n(zye,"STRONG",{});var mat=s(Vie);X7o=r(mat,"fnet"),mat.forEach(t),z7o=r(zye," \u2014 "),zN=n(zye,"A",{href:!0});var gat=s(zN);W7o=r(gat,"FNetForPreTraining"),gat.forEach(t),Q7o=r(zye," (FNet model)"),zye.forEach(t),H7o=i(O),v_=n(O,"LI",{});var Wye=s(v_);Xie=n(Wye,"STRONG",{});var hat=s(Xie);U7o=r(hat,"fsmt"),hat.forEach(t),J7o=r(Wye," \u2014 "),WN=n(Wye,"A",{href:!0});var pat=s(WN);Y7o=r(pat,"FSMTForConditionalGeneration"),pat.forEach(t),K7o=r(Wye," (FairSeq Machine-Translation model)"),Wye.forEach(t),Z7o=i(O),F_=n(O,"LI",{});var Qye=s(F_);zie=n(Qye,"STRONG",{});var uat=s(zie);eMo=r(uat,"funnel"),uat.forEach(t),oMo=r(Qye," \u2014 "),QN=n(Qye,"A",{href:!0});var _at=s(QN);rMo=r(_at,"FunnelForPreTraining"),_at.forEach(t),tMo=r(Qye," (Funnel Transformer model)"),Qye.forEach(t),aMo=i(O),T_=n(O,"LI",{});var Hye=s(T_);Wie=n(Hye,"STRONG",{});var bat=s(Wie);nMo=r(bat,"gpt2"),bat.forEach(t),sMo=r(Hye," \u2014 "),HN=n(Hye,"A",{href:!0});var vat=s(HN);lMo=r(vat,"GPT2LMHeadModel"),vat.forEach(t),iMo=r(Hye," (OpenAI GPT-2 model)"),Hye.forEach(t),dMo=i(O),M_=n(O,"LI",{});var Uye=s(M_);Qie=n(Uye,"STRONG",{});var Fat=s(Qie);cMo=r(Fat,"ibert"),Fat.forEach(t),fMo=r(Uye," \u2014 "),UN=n(Uye,"A",{href:!0});var Tat=s(UN);mMo=r(Tat,"IBertForMaskedLM"),Tat.forEach(t),gMo=r(Uye," (I-BERT model)"),Uye.forEach(t),hMo=i(O),E_=n(O,"LI",{});var Jye=s(E_);Hie=n(Jye,"STRONG",{});var Mat=s(Hie);pMo=r(Mat,"layoutlm"),Mat.forEach(t),uMo=r(Jye," \u2014 "),JN=n(Jye,"A",{href:!0});var Eat=s(JN);_Mo=r(Eat,"LayoutLMForMaskedLM"),Eat.forEach(t),bMo=r(Jye," (LayoutLM model)"),Jye.forEach(t),vMo=i(O),C_=n(O,"LI",{});var Yye=s(C_);Uie=n(Yye,"STRONG",{});var Cat=s(Uie);FMo=r(Cat,"longformer"),Cat.forEach(t),TMo=r(Yye," \u2014 "),YN=n(Yye,"A",{href:!0});var wat=s(YN);MMo=r(wat,"LongformerForMaskedLM"),wat.forEach(t),EMo=r(Yye," (Longformer model)"),Yye.forEach(t),CMo=i(O),w_=n(O,"LI",{});var Kye=s(w_);Jie=n(Kye,"STRONG",{});var Aat=s(Jie);wMo=r(Aat,"lxmert"),Aat.forEach(t),AMo=r(Kye," \u2014 "),KN=n(Kye,"A",{href:!0});var yat=s(KN);yMo=r(yat,"LxmertForPreTraining"),yat.forEach(t),LMo=r(Kye," (LXMERT model)"),Kye.forEach(t),xMo=i(O),A_=n(O,"LI",{});var Zye=s(A_);Yie=n(Zye,"STRONG",{});var Lat=s(Yie);$Mo=r(Lat,"megatron-bert"),Lat.forEach(t),kMo=r(Zye," \u2014 "),ZN=n(Zye,"A",{href:!0});var xat=s(ZN);SMo=r(xat,"MegatronBertForPreTraining"),xat.forEach(t),RMo=r(Zye," (MegatronBert model)"),Zye.forEach(t),PMo=i(O),y_=n(O,"LI",{});var eLe=s(y_);Kie=n(eLe,"STRONG",{});var $at=s(Kie);BMo=r($at,"mobilebert"),$at.forEach(t),IMo=r(eLe," \u2014 "),ej=n(eLe,"A",{href:!0});var kat=s(ej);qMo=r(kat,"MobileBertForPreTraining"),kat.forEach(t),NMo=r(eLe," (MobileBERT model)"),eLe.forEach(t),jMo=i(O),L_=n(O,"LI",{});var oLe=s(L_);Zie=n(oLe,"STRONG",{});var Sat=s(Zie);DMo=r(Sat,"mpnet"),Sat.forEach(t),GMo=r(oLe," \u2014 "),oj=n(oLe,"A",{href:!0});var Rat=s(oj);OMo=r(Rat,"MPNetForMaskedLM"),Rat.forEach(t),VMo=r(oLe," (MPNet model)"),oLe.forEach(t),XMo=i(O),x_=n(O,"LI",{});var rLe=s(x_);ede=n(rLe,"STRONG",{});var Pat=s(ede);zMo=r(Pat,"openai-gpt"),Pat.forEach(t),WMo=r(rLe," \u2014 "),rj=n(rLe,"A",{href:!0});var Bat=s(rj);QMo=r(Bat,"OpenAIGPTLMHeadModel"),Bat.forEach(t),HMo=r(rLe," (OpenAI GPT model)"),rLe.forEach(t),UMo=i(O),$_=n(O,"LI",{});var tLe=s($_);ode=n(tLe,"STRONG",{});var Iat=s(ode);JMo=r(Iat,"retribert"),Iat.forEach(t),YMo=r(tLe," \u2014 "),tj=n(tLe,"A",{href:!0});var qat=s(tj);KMo=r(qat,"RetriBertModel"),qat.forEach(t),ZMo=r(tLe," (RetriBERT model)"),tLe.forEach(t),eEo=i(O),k_=n(O,"LI",{});var aLe=s(k_);rde=n(aLe,"STRONG",{});var Nat=s(rde);oEo=r(Nat,"roberta"),Nat.forEach(t),rEo=r(aLe," \u2014 "),aj=n(aLe,"A",{href:!0});var jat=s(aj);tEo=r(jat,"RobertaForMaskedLM"),jat.forEach(t),aEo=r(aLe," (RoBERTa model)"),aLe.forEach(t),nEo=i(O),S_=n(O,"LI",{});var nLe=s(S_);tde=n(nLe,"STRONG",{});var Dat=s(tde);sEo=r(Dat,"splinter"),Dat.forEach(t),lEo=r(nLe," \u2014 "),nj=n(nLe,"A",{href:!0});var Gat=s(nj);iEo=r(Gat,"SplinterForPreTraining"),Gat.forEach(t),dEo=r(nLe," (Splinter model)"),nLe.forEach(t),cEo=i(O),R_=n(O,"LI",{});var sLe=s(R_);ade=n(sLe,"STRONG",{});var Oat=s(ade);fEo=r(Oat,"squeezebert"),Oat.forEach(t),mEo=r(sLe," \u2014 "),sj=n(sLe,"A",{href:!0});var Vat=s(sj);gEo=r(Vat,"SqueezeBertForMaskedLM"),Vat.forEach(t),hEo=r(sLe," (SqueezeBERT model)"),sLe.forEach(t),pEo=i(O),P_=n(O,"LI",{});var lLe=s(P_);nde=n(lLe,"STRONG",{});var Xat=s(nde);uEo=r(Xat,"t5"),Xat.forEach(t),_Eo=r(lLe," \u2014 "),lj=n(lLe,"A",{href:!0});var zat=s(lj);bEo=r(zat,"T5ForConditionalGeneration"),zat.forEach(t),vEo=r(lLe," (T5 model)"),lLe.forEach(t),FEo=i(O),B_=n(O,"LI",{});var iLe=s(B_);sde=n(iLe,"STRONG",{});var Wat=s(sde);TEo=r(Wat,"tapas"),Wat.forEach(t),MEo=r(iLe," \u2014 "),ij=n(iLe,"A",{href:!0});var Qat=s(ij);EEo=r(Qat,"TapasForMaskedLM"),Qat.forEach(t),CEo=r(iLe," (TAPAS model)"),iLe.forEach(t),wEo=i(O),I_=n(O,"LI",{});var dLe=s(I_);lde=n(dLe,"STRONG",{});var Hat=s(lde);AEo=r(Hat,"transfo-xl"),Hat.forEach(t),yEo=r(dLe," \u2014 "),dj=n(dLe,"A",{href:!0});var Uat=s(dj);LEo=r(Uat,"TransfoXLLMHeadModel"),Uat.forEach(t),xEo=r(dLe," (Transformer-XL model)"),dLe.forEach(t),$Eo=i(O),q_=n(O,"LI",{});var cLe=s(q_);ide=n(cLe,"STRONG",{});var Jat=s(ide);kEo=r(Jat,"unispeech"),Jat.forEach(t),SEo=r(cLe," \u2014 "),cj=n(cLe,"A",{href:!0});var Yat=s(cj);REo=r(Yat,"UniSpeechForPreTraining"),Yat.forEach(t),PEo=r(cLe," (UniSpeech model)"),cLe.forEach(t),BEo=i(O),N_=n(O,"LI",{});var fLe=s(N_);dde=n(fLe,"STRONG",{});var Kat=s(dde);IEo=r(Kat,"unispeech-sat"),Kat.forEach(t),qEo=r(fLe," \u2014 "),fj=n(fLe,"A",{href:!0});var Zat=s(fj);NEo=r(Zat,"UniSpeechSatForPreTraining"),Zat.forEach(t),jEo=r(fLe," (UniSpeechSat model)"),fLe.forEach(t),DEo=i(O),j_=n(O,"LI",{});var mLe=s(j_);cde=n(mLe,"STRONG",{});var ent=s(cde);GEo=r(ent,"visual_bert"),ent.forEach(t),OEo=r(mLe," \u2014 "),mj=n(mLe,"A",{href:!0});var ont=s(mj);VEo=r(ont,"VisualBertForPreTraining"),ont.forEach(t),XEo=r(mLe," (VisualBert model)"),mLe.forEach(t),zEo=i(O),D_=n(O,"LI",{});var gLe=s(D_);fde=n(gLe,"STRONG",{});var rnt=s(fde);WEo=r(rnt,"vit_mae"),rnt.forEach(t),QEo=r(gLe," \u2014 "),gj=n(gLe,"A",{href:!0});var tnt=s(gj);HEo=r(tnt,"ViTMAEForPreTraining"),tnt.forEach(t),UEo=r(gLe," (ViTMAE model)"),gLe.forEach(t),JEo=i(O),G_=n(O,"LI",{});var hLe=s(G_);mde=n(hLe,"STRONG",{});var ant=s(mde);YEo=r(ant,"wav2vec2"),ant.forEach(t),KEo=r(hLe," \u2014 "),hj=n(hLe,"A",{href:!0});var nnt=s(hj);ZEo=r(nnt,"Wav2Vec2ForPreTraining"),nnt.forEach(t),eCo=r(hLe," (Wav2Vec2 model)"),hLe.forEach(t),oCo=i(O),O_=n(O,"LI",{});var pLe=s(O_);gde=n(pLe,"STRONG",{});var snt=s(gde);rCo=r(snt,"wav2vec2-conformer"),snt.forEach(t),tCo=r(pLe," \u2014 "),pj=n(pLe,"A",{href:!0});var lnt=s(pj);aCo=r(lnt,"Wav2Vec2ConformerForPreTraining"),lnt.forEach(t),nCo=r(pLe," (Wav2Vec2-Conformer model)"),pLe.forEach(t),sCo=i(O),V_=n(O,"LI",{});var uLe=s(V_);hde=n(uLe,"STRONG",{});var int=s(hde);lCo=r(int,"xlm"),int.forEach(t),iCo=r(uLe," \u2014 "),uj=n(uLe,"A",{href:!0});var dnt=s(uj);dCo=r(dnt,"XLMWithLMHeadModel"),dnt.forEach(t),cCo=r(uLe," (XLM model)"),uLe.forEach(t),fCo=i(O),X_=n(O,"LI",{});var _Le=s(X_);pde=n(_Le,"STRONG",{});var cnt=s(pde);mCo=r(cnt,"xlm-roberta"),cnt.forEach(t),gCo=r(_Le," \u2014 "),_j=n(_Le,"A",{href:!0});var fnt=s(_j);hCo=r(fnt,"XLMRobertaForMaskedLM"),fnt.forEach(t),pCo=r(_Le," (XLM-RoBERTa model)"),_Le.forEach(t),uCo=i(O),z_=n(O,"LI",{});var bLe=s(z_);ude=n(bLe,"STRONG",{});var mnt=s(ude);_Co=r(mnt,"xlm-roberta-xl"),mnt.forEach(t),bCo=r(bLe," \u2014 "),bj=n(bLe,"A",{href:!0});var gnt=s(bj);vCo=r(gnt,"XLMRobertaXLForMaskedLM"),gnt.forEach(t),FCo=r(bLe," (XLM-RoBERTa-XL model)"),bLe.forEach(t),TCo=i(O),W_=n(O,"LI",{});var vLe=s(W_);_de=n(vLe,"STRONG",{});var hnt=s(_de);MCo=r(hnt,"xlnet"),hnt.forEach(t),ECo=r(vLe," \u2014 "),vj=n(vLe,"A",{href:!0});var pnt=s(vj);CCo=r(pnt,"XLNetLMHeadModel"),pnt.forEach(t),wCo=r(vLe," (XLNet model)"),vLe.forEach(t),O.forEach(t),ACo=i(ra),Q_=n(ra,"P",{});var FLe=s(Q_);yCo=r(FLe,"The model is set in evaluation mode by default using "),bde=n(FLe,"CODE",{});var unt=s(bde);LCo=r(unt,"model.eval()"),unt.forEach(t),xCo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(FLe,"CODE",{});var _nt=s(vde);$Co=r(_nt,"model.train()"),_nt.forEach(t),FLe.forEach(t),kCo=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),uNe=i(f),Si=n(f,"H2",{class:!0});var FDe=s(Si);U_=n(FDe,"A",{id:!0,class:!0,href:!0});var bnt=s(U_);Fde=n(bnt,"SPAN",{});var vnt=s(Fde);T(dy.$$.fragment,vnt),vnt.forEach(t),bnt.forEach(t),SCo=i(FDe),Tde=n(FDe,"SPAN",{});var Fnt=s(Tde);RCo=r(Fnt,"AutoModelForCausalLM"),Fnt.forEach(t),FDe.forEach(t),_Ne=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(cy.$$.fragment,Xs),PCo=i(Xs),Ri=n(Xs,"P",{});var TZ=s(Ri);BCo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fj=n(TZ,"A",{href:!0});var Tnt=s(Fj);ICo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),qCo=r(TZ," class method or the "),Tj=n(TZ,"A",{href:!0});var Mnt=s(Tj);NCo=r(Mnt,"from_config()"),Mnt.forEach(t),jCo=r(TZ,` class
method.`),TZ.forEach(t),DCo=i(Xs),fy=n(Xs,"P",{});var TDe=s(fy);GCo=r(TDe,"This class cannot be instantiated directly using "),Mde=n(TDe,"CODE",{});var Ent=s(Mde);OCo=r(Ent,"__init__()"),Ent.forEach(t),VCo=r(TDe," (throws an error)."),TDe.forEach(t),XCo=i(Xs),nt=n(Xs,"DIV",{class:!0});var B0=s(nt);T(my.$$.fragment,B0),zCo=i(B0),Ede=n(B0,"P",{});var Cnt=s(Ede);WCo=r(Cnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cnt.forEach(t),QCo=i(B0),Pi=n(B0,"P",{});var MZ=s(Pi);HCo=r(MZ,`Note:
Loading a model from its configuration file does `),Cde=n(MZ,"STRONG",{});var wnt=s(Cde);UCo=r(wnt,"not"),wnt.forEach(t),JCo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(MZ,"A",{href:!0});var Ant=s(Mj);YCo=r(Ant,"from_pretrained()"),Ant.forEach(t),KCo=r(MZ," to load the model weights."),MZ.forEach(t),ZCo=i(B0),T(J_.$$.fragment,B0),B0.forEach(t),e3o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(gy.$$.fragment,ta),o3o=i(ta),wde=n(ta,"P",{});var ynt=s(wde);r3o=r(ynt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ynt.forEach(t),t3o=i(ta),$a=n(ta,"P",{});var I0=s($a);a3o=r(I0,"The model class to instantiate is selected based on the "),Ade=n(I0,"CODE",{});var Lnt=s(Ade);n3o=r(Lnt,"model_type"),Lnt.forEach(t),s3o=r(I0,` property of the config object (either
passed as an argument or loaded from `),yde=n(I0,"CODE",{});var xnt=s(yde);l3o=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),i3o=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(I0,"CODE",{});var $nt=s(Lde);d3o=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),c3o=r(I0,":"),I0.forEach(t),f3o=i(ta),z=n(ta,"UL",{});var W=s(z);Y_=n(W,"LI",{});var TLe=s(Y_);xde=n(TLe,"STRONG",{});var knt=s(xde);m3o=r(knt,"bart"),knt.forEach(t),g3o=r(TLe," \u2014 "),Ej=n(TLe,"A",{href:!0});var Snt=s(Ej);h3o=r(Snt,"BartForCausalLM"),Snt.forEach(t),p3o=r(TLe," (BART model)"),TLe.forEach(t),u3o=i(W),K_=n(W,"LI",{});var MLe=s(K_);$de=n(MLe,"STRONG",{});var Rnt=s($de);_3o=r(Rnt,"bert"),Rnt.forEach(t),b3o=r(MLe," \u2014 "),Cj=n(MLe,"A",{href:!0});var Pnt=s(Cj);v3o=r(Pnt,"BertLMHeadModel"),Pnt.forEach(t),F3o=r(MLe," (BERT model)"),MLe.forEach(t),T3o=i(W),Z_=n(W,"LI",{});var ELe=s(Z_);kde=n(ELe,"STRONG",{});var Bnt=s(kde);M3o=r(Bnt,"bert-generation"),Bnt.forEach(t),E3o=r(ELe," \u2014 "),wj=n(ELe,"A",{href:!0});var Int=s(wj);C3o=r(Int,"BertGenerationDecoder"),Int.forEach(t),w3o=r(ELe," (Bert Generation model)"),ELe.forEach(t),A3o=i(W),e2=n(W,"LI",{});var CLe=s(e2);Sde=n(CLe,"STRONG",{});var qnt=s(Sde);y3o=r(qnt,"big_bird"),qnt.forEach(t),L3o=r(CLe," \u2014 "),Aj=n(CLe,"A",{href:!0});var Nnt=s(Aj);x3o=r(Nnt,"BigBirdForCausalLM"),Nnt.forEach(t),$3o=r(CLe," (BigBird model)"),CLe.forEach(t),k3o=i(W),o2=n(W,"LI",{});var wLe=s(o2);Rde=n(wLe,"STRONG",{});var jnt=s(Rde);S3o=r(jnt,"bigbird_pegasus"),jnt.forEach(t),R3o=r(wLe," \u2014 "),yj=n(wLe,"A",{href:!0});var Dnt=s(yj);P3o=r(Dnt,"BigBirdPegasusForCausalLM"),Dnt.forEach(t),B3o=r(wLe," (BigBirdPegasus model)"),wLe.forEach(t),I3o=i(W),r2=n(W,"LI",{});var ALe=s(r2);Pde=n(ALe,"STRONG",{});var Gnt=s(Pde);q3o=r(Gnt,"blenderbot"),Gnt.forEach(t),N3o=r(ALe," \u2014 "),Lj=n(ALe,"A",{href:!0});var Ont=s(Lj);j3o=r(Ont,"BlenderbotForCausalLM"),Ont.forEach(t),D3o=r(ALe," (Blenderbot model)"),ALe.forEach(t),G3o=i(W),t2=n(W,"LI",{});var yLe=s(t2);Bde=n(yLe,"STRONG",{});var Vnt=s(Bde);O3o=r(Vnt,"blenderbot-small"),Vnt.forEach(t),V3o=r(yLe," \u2014 "),xj=n(yLe,"A",{href:!0});var Xnt=s(xj);X3o=r(Xnt,"BlenderbotSmallForCausalLM"),Xnt.forEach(t),z3o=r(yLe," (BlenderbotSmall model)"),yLe.forEach(t),W3o=i(W),a2=n(W,"LI",{});var LLe=s(a2);Ide=n(LLe,"STRONG",{});var znt=s(Ide);Q3o=r(znt,"camembert"),znt.forEach(t),H3o=r(LLe," \u2014 "),$j=n(LLe,"A",{href:!0});var Wnt=s($j);U3o=r(Wnt,"CamembertForCausalLM"),Wnt.forEach(t),J3o=r(LLe," (CamemBERT model)"),LLe.forEach(t),Y3o=i(W),n2=n(W,"LI",{});var xLe=s(n2);qde=n(xLe,"STRONG",{});var Qnt=s(qde);K3o=r(Qnt,"ctrl"),Qnt.forEach(t),Z3o=r(xLe," \u2014 "),kj=n(xLe,"A",{href:!0});var Hnt=s(kj);ewo=r(Hnt,"CTRLLMHeadModel"),Hnt.forEach(t),owo=r(xLe," (CTRL model)"),xLe.forEach(t),rwo=i(W),s2=n(W,"LI",{});var $Le=s(s2);Nde=n($Le,"STRONG",{});var Unt=s(Nde);two=r(Unt,"data2vec-text"),Unt.forEach(t),awo=r($Le," \u2014 "),Sj=n($Le,"A",{href:!0});var Jnt=s(Sj);nwo=r(Jnt,"Data2VecTextForCausalLM"),Jnt.forEach(t),swo=r($Le," (Data2VecText model)"),$Le.forEach(t),lwo=i(W),l2=n(W,"LI",{});var kLe=s(l2);jde=n(kLe,"STRONG",{});var Ynt=s(jde);iwo=r(Ynt,"electra"),Ynt.forEach(t),dwo=r(kLe," \u2014 "),Rj=n(kLe,"A",{href:!0});var Knt=s(Rj);cwo=r(Knt,"ElectraForCausalLM"),Knt.forEach(t),fwo=r(kLe," (ELECTRA model)"),kLe.forEach(t),mwo=i(W),i2=n(W,"LI",{});var SLe=s(i2);Dde=n(SLe,"STRONG",{});var Znt=s(Dde);gwo=r(Znt,"gpt2"),Znt.forEach(t),hwo=r(SLe," \u2014 "),Pj=n(SLe,"A",{href:!0});var est=s(Pj);pwo=r(est,"GPT2LMHeadModel"),est.forEach(t),uwo=r(SLe," (OpenAI GPT-2 model)"),SLe.forEach(t),_wo=i(W),d2=n(W,"LI",{});var RLe=s(d2);Gde=n(RLe,"STRONG",{});var ost=s(Gde);bwo=r(ost,"gpt_neo"),ost.forEach(t),vwo=r(RLe," \u2014 "),Bj=n(RLe,"A",{href:!0});var rst=s(Bj);Fwo=r(rst,"GPTNeoForCausalLM"),rst.forEach(t),Two=r(RLe," (GPT Neo model)"),RLe.forEach(t),Mwo=i(W),c2=n(W,"LI",{});var PLe=s(c2);Ode=n(PLe,"STRONG",{});var tst=s(Ode);Ewo=r(tst,"gpt_neox"),tst.forEach(t),Cwo=r(PLe," \u2014 "),Ij=n(PLe,"A",{href:!0});var ast=s(Ij);wwo=r(ast,"GPTNeoXForCausalLM"),ast.forEach(t),Awo=r(PLe," (GPT NeoX model)"),PLe.forEach(t),ywo=i(W),f2=n(W,"LI",{});var BLe=s(f2);Vde=n(BLe,"STRONG",{});var nst=s(Vde);Lwo=r(nst,"gptj"),nst.forEach(t),xwo=r(BLe," \u2014 "),qj=n(BLe,"A",{href:!0});var sst=s(qj);$wo=r(sst,"GPTJForCausalLM"),sst.forEach(t),kwo=r(BLe," (GPT-J model)"),BLe.forEach(t),Swo=i(W),m2=n(W,"LI",{});var ILe=s(m2);Xde=n(ILe,"STRONG",{});var lst=s(Xde);Rwo=r(lst,"marian"),lst.forEach(t),Pwo=r(ILe," \u2014 "),Nj=n(ILe,"A",{href:!0});var ist=s(Nj);Bwo=r(ist,"MarianForCausalLM"),ist.forEach(t),Iwo=r(ILe," (Marian model)"),ILe.forEach(t),qwo=i(W),g2=n(W,"LI",{});var qLe=s(g2);zde=n(qLe,"STRONG",{});var dst=s(zde);Nwo=r(dst,"mbart"),dst.forEach(t),jwo=r(qLe," \u2014 "),jj=n(qLe,"A",{href:!0});var cst=s(jj);Dwo=r(cst,"MBartForCausalLM"),cst.forEach(t),Gwo=r(qLe," (mBART model)"),qLe.forEach(t),Owo=i(W),h2=n(W,"LI",{});var NLe=s(h2);Wde=n(NLe,"STRONG",{});var fst=s(Wde);Vwo=r(fst,"megatron-bert"),fst.forEach(t),Xwo=r(NLe," \u2014 "),Dj=n(NLe,"A",{href:!0});var mst=s(Dj);zwo=r(mst,"MegatronBertForCausalLM"),mst.forEach(t),Wwo=r(NLe," (MegatronBert model)"),NLe.forEach(t),Qwo=i(W),p2=n(W,"LI",{});var jLe=s(p2);Qde=n(jLe,"STRONG",{});var gst=s(Qde);Hwo=r(gst,"openai-gpt"),gst.forEach(t),Uwo=r(jLe," \u2014 "),Gj=n(jLe,"A",{href:!0});var hst=s(Gj);Jwo=r(hst,"OpenAIGPTLMHeadModel"),hst.forEach(t),Ywo=r(jLe," (OpenAI GPT model)"),jLe.forEach(t),Kwo=i(W),u2=n(W,"LI",{});var DLe=s(u2);Hde=n(DLe,"STRONG",{});var pst=s(Hde);Zwo=r(pst,"opt"),pst.forEach(t),e0o=r(DLe," \u2014 "),Oj=n(DLe,"A",{href:!0});var ust=s(Oj);o0o=r(ust,"OPTForCausalLM"),ust.forEach(t),r0o=r(DLe," (OPT model)"),DLe.forEach(t),t0o=i(W),_2=n(W,"LI",{});var GLe=s(_2);Ude=n(GLe,"STRONG",{});var _st=s(Ude);a0o=r(_st,"pegasus"),_st.forEach(t),n0o=r(GLe," \u2014 "),Vj=n(GLe,"A",{href:!0});var bst=s(Vj);s0o=r(bst,"PegasusForCausalLM"),bst.forEach(t),l0o=r(GLe," (Pegasus model)"),GLe.forEach(t),i0o=i(W),b2=n(W,"LI",{});var OLe=s(b2);Jde=n(OLe,"STRONG",{});var vst=s(Jde);d0o=r(vst,"plbart"),vst.forEach(t),c0o=r(OLe," \u2014 "),Xj=n(OLe,"A",{href:!0});var Fst=s(Xj);f0o=r(Fst,"PLBartForCausalLM"),Fst.forEach(t),m0o=r(OLe," (PLBart model)"),OLe.forEach(t),g0o=i(W),v2=n(W,"LI",{});var VLe=s(v2);Yde=n(VLe,"STRONG",{});var Tst=s(Yde);h0o=r(Tst,"prophetnet"),Tst.forEach(t),p0o=r(VLe," \u2014 "),zj=n(VLe,"A",{href:!0});var Mst=s(zj);u0o=r(Mst,"ProphetNetForCausalLM"),Mst.forEach(t),_0o=r(VLe," (ProphetNet model)"),VLe.forEach(t),b0o=i(W),F2=n(W,"LI",{});var XLe=s(F2);Kde=n(XLe,"STRONG",{});var Est=s(Kde);v0o=r(Est,"qdqbert"),Est.forEach(t),F0o=r(XLe," \u2014 "),Wj=n(XLe,"A",{href:!0});var Cst=s(Wj);T0o=r(Cst,"QDQBertLMHeadModel"),Cst.forEach(t),M0o=r(XLe," (QDQBert model)"),XLe.forEach(t),E0o=i(W),T2=n(W,"LI",{});var zLe=s(T2);Zde=n(zLe,"STRONG",{});var wst=s(Zde);C0o=r(wst,"reformer"),wst.forEach(t),w0o=r(zLe," \u2014 "),Qj=n(zLe,"A",{href:!0});var Ast=s(Qj);A0o=r(Ast,"ReformerModelWithLMHead"),Ast.forEach(t),y0o=r(zLe," (Reformer model)"),zLe.forEach(t),L0o=i(W),M2=n(W,"LI",{});var WLe=s(M2);ece=n(WLe,"STRONG",{});var yst=s(ece);x0o=r(yst,"rembert"),yst.forEach(t),$0o=r(WLe," \u2014 "),Hj=n(WLe,"A",{href:!0});var Lst=s(Hj);k0o=r(Lst,"RemBertForCausalLM"),Lst.forEach(t),S0o=r(WLe," (RemBERT model)"),WLe.forEach(t),R0o=i(W),E2=n(W,"LI",{});var QLe=s(E2);oce=n(QLe,"STRONG",{});var xst=s(oce);P0o=r(xst,"roberta"),xst.forEach(t),B0o=r(QLe," \u2014 "),Uj=n(QLe,"A",{href:!0});var $st=s(Uj);I0o=r($st,"RobertaForCausalLM"),$st.forEach(t),q0o=r(QLe," (RoBERTa model)"),QLe.forEach(t),N0o=i(W),C2=n(W,"LI",{});var HLe=s(C2);rce=n(HLe,"STRONG",{});var kst=s(rce);j0o=r(kst,"roformer"),kst.forEach(t),D0o=r(HLe," \u2014 "),Jj=n(HLe,"A",{href:!0});var Sst=s(Jj);G0o=r(Sst,"RoFormerForCausalLM"),Sst.forEach(t),O0o=r(HLe," (RoFormer model)"),HLe.forEach(t),V0o=i(W),w2=n(W,"LI",{});var ULe=s(w2);tce=n(ULe,"STRONG",{});var Rst=s(tce);X0o=r(Rst,"speech_to_text_2"),Rst.forEach(t),z0o=r(ULe," \u2014 "),Yj=n(ULe,"A",{href:!0});var Pst=s(Yj);W0o=r(Pst,"Speech2Text2ForCausalLM"),Pst.forEach(t),Q0o=r(ULe," (Speech2Text2 model)"),ULe.forEach(t),H0o=i(W),A2=n(W,"LI",{});var JLe=s(A2);ace=n(JLe,"STRONG",{});var Bst=s(ace);U0o=r(Bst,"transfo-xl"),Bst.forEach(t),J0o=r(JLe," \u2014 "),Kj=n(JLe,"A",{href:!0});var Ist=s(Kj);Y0o=r(Ist,"TransfoXLLMHeadModel"),Ist.forEach(t),K0o=r(JLe," (Transformer-XL model)"),JLe.forEach(t),Z0o=i(W),y2=n(W,"LI",{});var YLe=s(y2);nce=n(YLe,"STRONG",{});var qst=s(nce);e6o=r(qst,"trocr"),qst.forEach(t),o6o=r(YLe," \u2014 "),Zj=n(YLe,"A",{href:!0});var Nst=s(Zj);r6o=r(Nst,"TrOCRForCausalLM"),Nst.forEach(t),t6o=r(YLe," (TrOCR model)"),YLe.forEach(t),a6o=i(W),L2=n(W,"LI",{});var KLe=s(L2);sce=n(KLe,"STRONG",{});var jst=s(sce);n6o=r(jst,"xglm"),jst.forEach(t),s6o=r(KLe," \u2014 "),eD=n(KLe,"A",{href:!0});var Dst=s(eD);l6o=r(Dst,"XGLMForCausalLM"),Dst.forEach(t),i6o=r(KLe," (XGLM model)"),KLe.forEach(t),d6o=i(W),x2=n(W,"LI",{});var ZLe=s(x2);lce=n(ZLe,"STRONG",{});var Gst=s(lce);c6o=r(Gst,"xlm"),Gst.forEach(t),f6o=r(ZLe," \u2014 "),oD=n(ZLe,"A",{href:!0});var Ost=s(oD);m6o=r(Ost,"XLMWithLMHeadModel"),Ost.forEach(t),g6o=r(ZLe," (XLM model)"),ZLe.forEach(t),h6o=i(W),$2=n(W,"LI",{});var e8e=s($2);ice=n(e8e,"STRONG",{});var Vst=s(ice);p6o=r(Vst,"xlm-prophetnet"),Vst.forEach(t),u6o=r(e8e," \u2014 "),rD=n(e8e,"A",{href:!0});var Xst=s(rD);_6o=r(Xst,"XLMProphetNetForCausalLM"),Xst.forEach(t),b6o=r(e8e," (XLMProphetNet model)"),e8e.forEach(t),v6o=i(W),k2=n(W,"LI",{});var o8e=s(k2);dce=n(o8e,"STRONG",{});var zst=s(dce);F6o=r(zst,"xlm-roberta"),zst.forEach(t),T6o=r(o8e," \u2014 "),tD=n(o8e,"A",{href:!0});var Wst=s(tD);M6o=r(Wst,"XLMRobertaForCausalLM"),Wst.forEach(t),E6o=r(o8e," (XLM-RoBERTa model)"),o8e.forEach(t),C6o=i(W),S2=n(W,"LI",{});var r8e=s(S2);cce=n(r8e,"STRONG",{});var Qst=s(cce);w6o=r(Qst,"xlm-roberta-xl"),Qst.forEach(t),A6o=r(r8e," \u2014 "),aD=n(r8e,"A",{href:!0});var Hst=s(aD);y6o=r(Hst,"XLMRobertaXLForCausalLM"),Hst.forEach(t),L6o=r(r8e," (XLM-RoBERTa-XL model)"),r8e.forEach(t),x6o=i(W),R2=n(W,"LI",{});var t8e=s(R2);fce=n(t8e,"STRONG",{});var Ust=s(fce);$6o=r(Ust,"xlnet"),Ust.forEach(t),k6o=r(t8e," \u2014 "),nD=n(t8e,"A",{href:!0});var Jst=s(nD);S6o=r(Jst,"XLNetLMHeadModel"),Jst.forEach(t),R6o=r(t8e," (XLNet model)"),t8e.forEach(t),W.forEach(t),P6o=i(ta),P2=n(ta,"P",{});var a8e=s(P2);B6o=r(a8e,"The model is set in evaluation mode by default using "),mce=n(a8e,"CODE",{});var Yst=s(mce);I6o=r(Yst,"model.eval()"),Yst.forEach(t),q6o=r(a8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=n(a8e,"CODE",{});var Kst=s(gce);N6o=r(Kst,"model.train()"),Kst.forEach(t),a8e.forEach(t),j6o=i(ta),T(B2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),bNe=i(f),Bi=n(f,"H2",{class:!0});var MDe=s(Bi);I2=n(MDe,"A",{id:!0,class:!0,href:!0});var Zst=s(I2);hce=n(Zst,"SPAN",{});var elt=s(hce);T(hy.$$.fragment,elt),elt.forEach(t),Zst.forEach(t),D6o=i(MDe),pce=n(MDe,"SPAN",{});var olt=s(pce);G6o=r(olt,"AutoModelForMaskedLM"),olt.forEach(t),MDe.forEach(t),vNe=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(py.$$.fragment,zs),O6o=i(zs),Ii=n(zs,"P",{});var EZ=s(Ii);V6o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sD=n(EZ,"A",{href:!0});var rlt=s(sD);X6o=r(rlt,"from_pretrained()"),rlt.forEach(t),z6o=r(EZ," class method or the "),lD=n(EZ,"A",{href:!0});var tlt=s(lD);W6o=r(tlt,"from_config()"),tlt.forEach(t),Q6o=r(EZ,` class
method.`),EZ.forEach(t),H6o=i(zs),uy=n(zs,"P",{});var EDe=s(uy);U6o=r(EDe,"This class cannot be instantiated directly using "),uce=n(EDe,"CODE",{});var alt=s(uce);J6o=r(alt,"__init__()"),alt.forEach(t),Y6o=r(EDe," (throws an error)."),EDe.forEach(t),K6o=i(zs),st=n(zs,"DIV",{class:!0});var q0=s(st);T(_y.$$.fragment,q0),Z6o=i(q0),_ce=n(q0,"P",{});var nlt=s(_ce);eAo=r(nlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nlt.forEach(t),oAo=i(q0),qi=n(q0,"P",{});var CZ=s(qi);rAo=r(CZ,`Note:
Loading a model from its configuration file does `),bce=n(CZ,"STRONG",{});var slt=s(bce);tAo=r(slt,"not"),slt.forEach(t),aAo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(CZ,"A",{href:!0});var llt=s(iD);nAo=r(llt,"from_pretrained()"),llt.forEach(t),sAo=r(CZ," to load the model weights."),CZ.forEach(t),lAo=i(q0),T(q2.$$.fragment,q0),q0.forEach(t),iAo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(by.$$.fragment,aa),dAo=i(aa),vce=n(aa,"P",{});var ilt=s(vce);cAo=r(ilt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ilt.forEach(t),fAo=i(aa),ka=n(aa,"P",{});var N0=s(ka);mAo=r(N0,"The model class to instantiate is selected based on the "),Fce=n(N0,"CODE",{});var dlt=s(Fce);gAo=r(dlt,"model_type"),dlt.forEach(t),hAo=r(N0,` property of the config object (either
passed as an argument or loaded from `),Tce=n(N0,"CODE",{});var clt=s(Tce);pAo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),uAo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(N0,"CODE",{});var flt=s(Mce);_Ao=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),bAo=r(N0,":"),N0.forEach(t),vAo=i(aa),Q=n(aa,"UL",{});var U=s(Q);N2=n(U,"LI",{});var n8e=s(N2);Ece=n(n8e,"STRONG",{});var mlt=s(Ece);FAo=r(mlt,"albert"),mlt.forEach(t),TAo=r(n8e," \u2014 "),dD=n(n8e,"A",{href:!0});var glt=s(dD);MAo=r(glt,"AlbertForMaskedLM"),glt.forEach(t),EAo=r(n8e," (ALBERT model)"),n8e.forEach(t),CAo=i(U),j2=n(U,"LI",{});var s8e=s(j2);Cce=n(s8e,"STRONG",{});var hlt=s(Cce);wAo=r(hlt,"bart"),hlt.forEach(t),AAo=r(s8e," \u2014 "),cD=n(s8e,"A",{href:!0});var plt=s(cD);yAo=r(plt,"BartForConditionalGeneration"),plt.forEach(t),LAo=r(s8e," (BART model)"),s8e.forEach(t),xAo=i(U),D2=n(U,"LI",{});var l8e=s(D2);wce=n(l8e,"STRONG",{});var ult=s(wce);$Ao=r(ult,"bert"),ult.forEach(t),kAo=r(l8e," \u2014 "),fD=n(l8e,"A",{href:!0});var _lt=s(fD);SAo=r(_lt,"BertForMaskedLM"),_lt.forEach(t),RAo=r(l8e," (BERT model)"),l8e.forEach(t),PAo=i(U),G2=n(U,"LI",{});var i8e=s(G2);Ace=n(i8e,"STRONG",{});var blt=s(Ace);BAo=r(blt,"big_bird"),blt.forEach(t),IAo=r(i8e," \u2014 "),mD=n(i8e,"A",{href:!0});var vlt=s(mD);qAo=r(vlt,"BigBirdForMaskedLM"),vlt.forEach(t),NAo=r(i8e," (BigBird model)"),i8e.forEach(t),jAo=i(U),O2=n(U,"LI",{});var d8e=s(O2);yce=n(d8e,"STRONG",{});var Flt=s(yce);DAo=r(Flt,"camembert"),Flt.forEach(t),GAo=r(d8e," \u2014 "),gD=n(d8e,"A",{href:!0});var Tlt=s(gD);OAo=r(Tlt,"CamembertForMaskedLM"),Tlt.forEach(t),VAo=r(d8e," (CamemBERT model)"),d8e.forEach(t),XAo=i(U),V2=n(U,"LI",{});var c8e=s(V2);Lce=n(c8e,"STRONG",{});var Mlt=s(Lce);zAo=r(Mlt,"convbert"),Mlt.forEach(t),WAo=r(c8e," \u2014 "),hD=n(c8e,"A",{href:!0});var Elt=s(hD);QAo=r(Elt,"ConvBertForMaskedLM"),Elt.forEach(t),HAo=r(c8e," (ConvBERT model)"),c8e.forEach(t),UAo=i(U),X2=n(U,"LI",{});var f8e=s(X2);xce=n(f8e,"STRONG",{});var Clt=s(xce);JAo=r(Clt,"data2vec-text"),Clt.forEach(t),YAo=r(f8e," \u2014 "),pD=n(f8e,"A",{href:!0});var wlt=s(pD);KAo=r(wlt,"Data2VecTextForMaskedLM"),wlt.forEach(t),ZAo=r(f8e," (Data2VecText model)"),f8e.forEach(t),eyo=i(U),z2=n(U,"LI",{});var m8e=s(z2);$ce=n(m8e,"STRONG",{});var Alt=s($ce);oyo=r(Alt,"deberta"),Alt.forEach(t),ryo=r(m8e," \u2014 "),uD=n(m8e,"A",{href:!0});var ylt=s(uD);tyo=r(ylt,"DebertaForMaskedLM"),ylt.forEach(t),ayo=r(m8e," (DeBERTa model)"),m8e.forEach(t),nyo=i(U),W2=n(U,"LI",{});var g8e=s(W2);kce=n(g8e,"STRONG",{});var Llt=s(kce);syo=r(Llt,"deberta-v2"),Llt.forEach(t),lyo=r(g8e," \u2014 "),_D=n(g8e,"A",{href:!0});var xlt=s(_D);iyo=r(xlt,"DebertaV2ForMaskedLM"),xlt.forEach(t),dyo=r(g8e," (DeBERTa-v2 model)"),g8e.forEach(t),cyo=i(U),Q2=n(U,"LI",{});var h8e=s(Q2);Sce=n(h8e,"STRONG",{});var $lt=s(Sce);fyo=r($lt,"distilbert"),$lt.forEach(t),myo=r(h8e," \u2014 "),bD=n(h8e,"A",{href:!0});var klt=s(bD);gyo=r(klt,"DistilBertForMaskedLM"),klt.forEach(t),hyo=r(h8e," (DistilBERT model)"),h8e.forEach(t),pyo=i(U),H2=n(U,"LI",{});var p8e=s(H2);Rce=n(p8e,"STRONG",{});var Slt=s(Rce);uyo=r(Slt,"electra"),Slt.forEach(t),_yo=r(p8e," \u2014 "),vD=n(p8e,"A",{href:!0});var Rlt=s(vD);byo=r(Rlt,"ElectraForMaskedLM"),Rlt.forEach(t),vyo=r(p8e," (ELECTRA model)"),p8e.forEach(t),Fyo=i(U),U2=n(U,"LI",{});var u8e=s(U2);Pce=n(u8e,"STRONG",{});var Plt=s(Pce);Tyo=r(Plt,"flaubert"),Plt.forEach(t),Myo=r(u8e," \u2014 "),FD=n(u8e,"A",{href:!0});var Blt=s(FD);Eyo=r(Blt,"FlaubertWithLMHeadModel"),Blt.forEach(t),Cyo=r(u8e," (FlauBERT model)"),u8e.forEach(t),wyo=i(U),J2=n(U,"LI",{});var _8e=s(J2);Bce=n(_8e,"STRONG",{});var Ilt=s(Bce);Ayo=r(Ilt,"fnet"),Ilt.forEach(t),yyo=r(_8e," \u2014 "),TD=n(_8e,"A",{href:!0});var qlt=s(TD);Lyo=r(qlt,"FNetForMaskedLM"),qlt.forEach(t),xyo=r(_8e," (FNet model)"),_8e.forEach(t),$yo=i(U),Y2=n(U,"LI",{});var b8e=s(Y2);Ice=n(b8e,"STRONG",{});var Nlt=s(Ice);kyo=r(Nlt,"funnel"),Nlt.forEach(t),Syo=r(b8e," \u2014 "),MD=n(b8e,"A",{href:!0});var jlt=s(MD);Ryo=r(jlt,"FunnelForMaskedLM"),jlt.forEach(t),Pyo=r(b8e," (Funnel Transformer model)"),b8e.forEach(t),Byo=i(U),K2=n(U,"LI",{});var v8e=s(K2);qce=n(v8e,"STRONG",{});var Dlt=s(qce);Iyo=r(Dlt,"ibert"),Dlt.forEach(t),qyo=r(v8e," \u2014 "),ED=n(v8e,"A",{href:!0});var Glt=s(ED);Nyo=r(Glt,"IBertForMaskedLM"),Glt.forEach(t),jyo=r(v8e," (I-BERT model)"),v8e.forEach(t),Dyo=i(U),Z2=n(U,"LI",{});var F8e=s(Z2);Nce=n(F8e,"STRONG",{});var Olt=s(Nce);Gyo=r(Olt,"layoutlm"),Olt.forEach(t),Oyo=r(F8e," \u2014 "),CD=n(F8e,"A",{href:!0});var Vlt=s(CD);Vyo=r(Vlt,"LayoutLMForMaskedLM"),Vlt.forEach(t),Xyo=r(F8e," (LayoutLM model)"),F8e.forEach(t),zyo=i(U),e1=n(U,"LI",{});var T8e=s(e1);jce=n(T8e,"STRONG",{});var Xlt=s(jce);Wyo=r(Xlt,"longformer"),Xlt.forEach(t),Qyo=r(T8e," \u2014 "),wD=n(T8e,"A",{href:!0});var zlt=s(wD);Hyo=r(zlt,"LongformerForMaskedLM"),zlt.forEach(t),Uyo=r(T8e," (Longformer model)"),T8e.forEach(t),Jyo=i(U),o1=n(U,"LI",{});var M8e=s(o1);Dce=n(M8e,"STRONG",{});var Wlt=s(Dce);Yyo=r(Wlt,"mbart"),Wlt.forEach(t),Kyo=r(M8e," \u2014 "),AD=n(M8e,"A",{href:!0});var Qlt=s(AD);Zyo=r(Qlt,"MBartForConditionalGeneration"),Qlt.forEach(t),eLo=r(M8e," (mBART model)"),M8e.forEach(t),oLo=i(U),r1=n(U,"LI",{});var E8e=s(r1);Gce=n(E8e,"STRONG",{});var Hlt=s(Gce);rLo=r(Hlt,"megatron-bert"),Hlt.forEach(t),tLo=r(E8e," \u2014 "),yD=n(E8e,"A",{href:!0});var Ult=s(yD);aLo=r(Ult,"MegatronBertForMaskedLM"),Ult.forEach(t),nLo=r(E8e," (MegatronBert model)"),E8e.forEach(t),sLo=i(U),t1=n(U,"LI",{});var C8e=s(t1);Oce=n(C8e,"STRONG",{});var Jlt=s(Oce);lLo=r(Jlt,"mobilebert"),Jlt.forEach(t),iLo=r(C8e," \u2014 "),LD=n(C8e,"A",{href:!0});var Ylt=s(LD);dLo=r(Ylt,"MobileBertForMaskedLM"),Ylt.forEach(t),cLo=r(C8e," (MobileBERT model)"),C8e.forEach(t),fLo=i(U),a1=n(U,"LI",{});var w8e=s(a1);Vce=n(w8e,"STRONG",{});var Klt=s(Vce);mLo=r(Klt,"mpnet"),Klt.forEach(t),gLo=r(w8e," \u2014 "),xD=n(w8e,"A",{href:!0});var Zlt=s(xD);hLo=r(Zlt,"MPNetForMaskedLM"),Zlt.forEach(t),pLo=r(w8e," (MPNet model)"),w8e.forEach(t),uLo=i(U),n1=n(U,"LI",{});var A8e=s(n1);Xce=n(A8e,"STRONG",{});var eit=s(Xce);_Lo=r(eit,"nystromformer"),eit.forEach(t),bLo=r(A8e," \u2014 "),$D=n(A8e,"A",{href:!0});var oit=s($D);vLo=r(oit,"NystromformerForMaskedLM"),oit.forEach(t),FLo=r(A8e," (Nystromformer model)"),A8e.forEach(t),TLo=i(U),s1=n(U,"LI",{});var y8e=s(s1);zce=n(y8e,"STRONG",{});var rit=s(zce);MLo=r(rit,"perceiver"),rit.forEach(t),ELo=r(y8e," \u2014 "),kD=n(y8e,"A",{href:!0});var tit=s(kD);CLo=r(tit,"PerceiverForMaskedLM"),tit.forEach(t),wLo=r(y8e," (Perceiver model)"),y8e.forEach(t),ALo=i(U),l1=n(U,"LI",{});var L8e=s(l1);Wce=n(L8e,"STRONG",{});var ait=s(Wce);yLo=r(ait,"qdqbert"),ait.forEach(t),LLo=r(L8e," \u2014 "),SD=n(L8e,"A",{href:!0});var nit=s(SD);xLo=r(nit,"QDQBertForMaskedLM"),nit.forEach(t),$Lo=r(L8e," (QDQBert model)"),L8e.forEach(t),kLo=i(U),i1=n(U,"LI",{});var x8e=s(i1);Qce=n(x8e,"STRONG",{});var sit=s(Qce);SLo=r(sit,"reformer"),sit.forEach(t),RLo=r(x8e," \u2014 "),RD=n(x8e,"A",{href:!0});var lit=s(RD);PLo=r(lit,"ReformerForMaskedLM"),lit.forEach(t),BLo=r(x8e," (Reformer model)"),x8e.forEach(t),ILo=i(U),d1=n(U,"LI",{});var $8e=s(d1);Hce=n($8e,"STRONG",{});var iit=s(Hce);qLo=r(iit,"rembert"),iit.forEach(t),NLo=r($8e," \u2014 "),PD=n($8e,"A",{href:!0});var dit=s(PD);jLo=r(dit,"RemBertForMaskedLM"),dit.forEach(t),DLo=r($8e," (RemBERT model)"),$8e.forEach(t),GLo=i(U),c1=n(U,"LI",{});var k8e=s(c1);Uce=n(k8e,"STRONG",{});var cit=s(Uce);OLo=r(cit,"roberta"),cit.forEach(t),VLo=r(k8e," \u2014 "),BD=n(k8e,"A",{href:!0});var fit=s(BD);XLo=r(fit,"RobertaForMaskedLM"),fit.forEach(t),zLo=r(k8e," (RoBERTa model)"),k8e.forEach(t),WLo=i(U),f1=n(U,"LI",{});var S8e=s(f1);Jce=n(S8e,"STRONG",{});var mit=s(Jce);QLo=r(mit,"roformer"),mit.forEach(t),HLo=r(S8e," \u2014 "),ID=n(S8e,"A",{href:!0});var git=s(ID);ULo=r(git,"RoFormerForMaskedLM"),git.forEach(t),JLo=r(S8e," (RoFormer model)"),S8e.forEach(t),YLo=i(U),m1=n(U,"LI",{});var R8e=s(m1);Yce=n(R8e,"STRONG",{});var hit=s(Yce);KLo=r(hit,"squeezebert"),hit.forEach(t),ZLo=r(R8e," \u2014 "),qD=n(R8e,"A",{href:!0});var pit=s(qD);e8o=r(pit,"SqueezeBertForMaskedLM"),pit.forEach(t),o8o=r(R8e," (SqueezeBERT model)"),R8e.forEach(t),r8o=i(U),g1=n(U,"LI",{});var P8e=s(g1);Kce=n(P8e,"STRONG",{});var uit=s(Kce);t8o=r(uit,"tapas"),uit.forEach(t),a8o=r(P8e," \u2014 "),ND=n(P8e,"A",{href:!0});var _it=s(ND);n8o=r(_it,"TapasForMaskedLM"),_it.forEach(t),s8o=r(P8e," (TAPAS model)"),P8e.forEach(t),l8o=i(U),h1=n(U,"LI",{});var B8e=s(h1);Zce=n(B8e,"STRONG",{});var bit=s(Zce);i8o=r(bit,"wav2vec2"),bit.forEach(t),d8o=r(B8e," \u2014 "),efe=n(B8e,"CODE",{});var vit=s(efe);c8o=r(vit,"Wav2Vec2ForMaskedLM"),vit.forEach(t),f8o=r(B8e," (Wav2Vec2 model)"),B8e.forEach(t),m8o=i(U),p1=n(U,"LI",{});var I8e=s(p1);ofe=n(I8e,"STRONG",{});var Fit=s(ofe);g8o=r(Fit,"xlm"),Fit.forEach(t),h8o=r(I8e," \u2014 "),jD=n(I8e,"A",{href:!0});var Tit=s(jD);p8o=r(Tit,"XLMWithLMHeadModel"),Tit.forEach(t),u8o=r(I8e," (XLM model)"),I8e.forEach(t),_8o=i(U),u1=n(U,"LI",{});var q8e=s(u1);rfe=n(q8e,"STRONG",{});var Mit=s(rfe);b8o=r(Mit,"xlm-roberta"),Mit.forEach(t),v8o=r(q8e," \u2014 "),DD=n(q8e,"A",{href:!0});var Eit=s(DD);F8o=r(Eit,"XLMRobertaForMaskedLM"),Eit.forEach(t),T8o=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),M8o=i(U),_1=n(U,"LI",{});var N8e=s(_1);tfe=n(N8e,"STRONG",{});var Cit=s(tfe);E8o=r(Cit,"xlm-roberta-xl"),Cit.forEach(t),C8o=r(N8e," \u2014 "),GD=n(N8e,"A",{href:!0});var wit=s(GD);w8o=r(wit,"XLMRobertaXLForMaskedLM"),wit.forEach(t),A8o=r(N8e," (XLM-RoBERTa-XL model)"),N8e.forEach(t),y8o=i(U),b1=n(U,"LI",{});var j8e=s(b1);afe=n(j8e,"STRONG",{});var Ait=s(afe);L8o=r(Ait,"yoso"),Ait.forEach(t),x8o=r(j8e," \u2014 "),OD=n(j8e,"A",{href:!0});var yit=s(OD);$8o=r(yit,"YosoForMaskedLM"),yit.forEach(t),k8o=r(j8e," (YOSO model)"),j8e.forEach(t),U.forEach(t),S8o=i(aa),v1=n(aa,"P",{});var D8e=s(v1);R8o=r(D8e,"The model is set in evaluation mode by default using "),nfe=n(D8e,"CODE",{});var Lit=s(nfe);P8o=r(Lit,"model.eval()"),Lit.forEach(t),B8o=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(D8e,"CODE",{});var xit=s(sfe);I8o=r(xit,"model.train()"),xit.forEach(t),D8e.forEach(t),q8o=i(aa),T(F1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),FNe=i(f),Ni=n(f,"H2",{class:!0});var CDe=s(Ni);T1=n(CDe,"A",{id:!0,class:!0,href:!0});var $it=s(T1);lfe=n($it,"SPAN",{});var kit=s(lfe);T(vy.$$.fragment,kit),kit.forEach(t),$it.forEach(t),N8o=i(CDe),ife=n(CDe,"SPAN",{});var Sit=s(ife);j8o=r(Sit,"AutoModelForSeq2SeqLM"),Sit.forEach(t),CDe.forEach(t),TNe=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(Fy.$$.fragment,Ws),D8o=i(Ws),ji=n(Ws,"P",{});var wZ=s(ji);G8o=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=n(wZ,"A",{href:!0});var Rit=s(VD);O8o=r(Rit,"from_pretrained()"),Rit.forEach(t),V8o=r(wZ," class method or the "),XD=n(wZ,"A",{href:!0});var Pit=s(XD);X8o=r(Pit,"from_config()"),Pit.forEach(t),z8o=r(wZ,` class
method.`),wZ.forEach(t),W8o=i(Ws),Ty=n(Ws,"P",{});var wDe=s(Ty);Q8o=r(wDe,"This class cannot be instantiated directly using "),dfe=n(wDe,"CODE",{});var Bit=s(dfe);H8o=r(Bit,"__init__()"),Bit.forEach(t),U8o=r(wDe," (throws an error)."),wDe.forEach(t),J8o=i(Ws),lt=n(Ws,"DIV",{class:!0});var j0=s(lt);T(My.$$.fragment,j0),Y8o=i(j0),cfe=n(j0,"P",{});var Iit=s(cfe);K8o=r(Iit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Iit.forEach(t),Z8o=i(j0),Di=n(j0,"P",{});var AZ=s(Di);e9o=r(AZ,`Note:
Loading a model from its configuration file does `),ffe=n(AZ,"STRONG",{});var qit=s(ffe);o9o=r(qit,"not"),qit.forEach(t),r9o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(AZ,"A",{href:!0});var Nit=s(zD);t9o=r(Nit,"from_pretrained()"),Nit.forEach(t),a9o=r(AZ," to load the model weights."),AZ.forEach(t),n9o=i(j0),T(M1.$$.fragment,j0),j0.forEach(t),s9o=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(Ey.$$.fragment,na),l9o=i(na),mfe=n(na,"P",{});var jit=s(mfe);i9o=r(jit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jit.forEach(t),d9o=i(na),Sa=n(na,"P",{});var D0=s(Sa);c9o=r(D0,"The model class to instantiate is selected based on the "),gfe=n(D0,"CODE",{});var Dit=s(gfe);f9o=r(Dit,"model_type"),Dit.forEach(t),m9o=r(D0,` property of the config object (either
passed as an argument or loaded from `),hfe=n(D0,"CODE",{});var Git=s(hfe);g9o=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),h9o=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(D0,"CODE",{});var Oit=s(pfe);p9o=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),u9o=r(D0,":"),D0.forEach(t),_9o=i(na),ue=n(na,"UL",{});var ve=s(ue);E1=n(ve,"LI",{});var G8e=s(E1);ufe=n(G8e,"STRONG",{});var Vit=s(ufe);b9o=r(Vit,"bart"),Vit.forEach(t),v9o=r(G8e," \u2014 "),WD=n(G8e,"A",{href:!0});var Xit=s(WD);F9o=r(Xit,"BartForConditionalGeneration"),Xit.forEach(t),T9o=r(G8e," (BART model)"),G8e.forEach(t),M9o=i(ve),C1=n(ve,"LI",{});var O8e=s(C1);_fe=n(O8e,"STRONG",{});var zit=s(_fe);E9o=r(zit,"bigbird_pegasus"),zit.forEach(t),C9o=r(O8e," \u2014 "),QD=n(O8e,"A",{href:!0});var Wit=s(QD);w9o=r(Wit,"BigBirdPegasusForConditionalGeneration"),Wit.forEach(t),A9o=r(O8e," (BigBirdPegasus model)"),O8e.forEach(t),y9o=i(ve),w1=n(ve,"LI",{});var V8e=s(w1);bfe=n(V8e,"STRONG",{});var Qit=s(bfe);L9o=r(Qit,"blenderbot"),Qit.forEach(t),x9o=r(V8e," \u2014 "),HD=n(V8e,"A",{href:!0});var Hit=s(HD);$9o=r(Hit,"BlenderbotForConditionalGeneration"),Hit.forEach(t),k9o=r(V8e," (Blenderbot model)"),V8e.forEach(t),S9o=i(ve),A1=n(ve,"LI",{});var X8e=s(A1);vfe=n(X8e,"STRONG",{});var Uit=s(vfe);R9o=r(Uit,"blenderbot-small"),Uit.forEach(t),P9o=r(X8e," \u2014 "),UD=n(X8e,"A",{href:!0});var Jit=s(UD);B9o=r(Jit,"BlenderbotSmallForConditionalGeneration"),Jit.forEach(t),I9o=r(X8e," (BlenderbotSmall model)"),X8e.forEach(t),q9o=i(ve),y1=n(ve,"LI",{});var z8e=s(y1);Ffe=n(z8e,"STRONG",{});var Yit=s(Ffe);N9o=r(Yit,"encoder-decoder"),Yit.forEach(t),j9o=r(z8e," \u2014 "),JD=n(z8e,"A",{href:!0});var Kit=s(JD);D9o=r(Kit,"EncoderDecoderModel"),Kit.forEach(t),G9o=r(z8e," (Encoder decoder model)"),z8e.forEach(t),O9o=i(ve),L1=n(ve,"LI",{});var W8e=s(L1);Tfe=n(W8e,"STRONG",{});var Zit=s(Tfe);V9o=r(Zit,"fsmt"),Zit.forEach(t),X9o=r(W8e," \u2014 "),YD=n(W8e,"A",{href:!0});var edt=s(YD);z9o=r(edt,"FSMTForConditionalGeneration"),edt.forEach(t),W9o=r(W8e," (FairSeq Machine-Translation model)"),W8e.forEach(t),Q9o=i(ve),x1=n(ve,"LI",{});var Q8e=s(x1);Mfe=n(Q8e,"STRONG",{});var odt=s(Mfe);H9o=r(odt,"led"),odt.forEach(t),U9o=r(Q8e," \u2014 "),KD=n(Q8e,"A",{href:!0});var rdt=s(KD);J9o=r(rdt,"LEDForConditionalGeneration"),rdt.forEach(t),Y9o=r(Q8e," (LED model)"),Q8e.forEach(t),K9o=i(ve),$1=n(ve,"LI",{});var H8e=s($1);Efe=n(H8e,"STRONG",{});var tdt=s(Efe);Z9o=r(tdt,"m2m_100"),tdt.forEach(t),exo=r(H8e," \u2014 "),ZD=n(H8e,"A",{href:!0});var adt=s(ZD);oxo=r(adt,"M2M100ForConditionalGeneration"),adt.forEach(t),rxo=r(H8e," (M2M100 model)"),H8e.forEach(t),txo=i(ve),k1=n(ve,"LI",{});var U8e=s(k1);Cfe=n(U8e,"STRONG",{});var ndt=s(Cfe);axo=r(ndt,"marian"),ndt.forEach(t),nxo=r(U8e," \u2014 "),eG=n(U8e,"A",{href:!0});var sdt=s(eG);sxo=r(sdt,"MarianMTModel"),sdt.forEach(t),lxo=r(U8e," (Marian model)"),U8e.forEach(t),ixo=i(ve),S1=n(ve,"LI",{});var J8e=s(S1);wfe=n(J8e,"STRONG",{});var ldt=s(wfe);dxo=r(ldt,"mbart"),ldt.forEach(t),cxo=r(J8e," \u2014 "),oG=n(J8e,"A",{href:!0});var idt=s(oG);fxo=r(idt,"MBartForConditionalGeneration"),idt.forEach(t),mxo=r(J8e," (mBART model)"),J8e.forEach(t),gxo=i(ve),R1=n(ve,"LI",{});var Y8e=s(R1);Afe=n(Y8e,"STRONG",{});var ddt=s(Afe);hxo=r(ddt,"mt5"),ddt.forEach(t),pxo=r(Y8e," \u2014 "),rG=n(Y8e,"A",{href:!0});var cdt=s(rG);uxo=r(cdt,"MT5ForConditionalGeneration"),cdt.forEach(t),_xo=r(Y8e," (mT5 model)"),Y8e.forEach(t),bxo=i(ve),P1=n(ve,"LI",{});var K8e=s(P1);yfe=n(K8e,"STRONG",{});var fdt=s(yfe);vxo=r(fdt,"pegasus"),fdt.forEach(t),Fxo=r(K8e," \u2014 "),tG=n(K8e,"A",{href:!0});var mdt=s(tG);Txo=r(mdt,"PegasusForConditionalGeneration"),mdt.forEach(t),Mxo=r(K8e," (Pegasus model)"),K8e.forEach(t),Exo=i(ve),B1=n(ve,"LI",{});var Z8e=s(B1);Lfe=n(Z8e,"STRONG",{});var gdt=s(Lfe);Cxo=r(gdt,"plbart"),gdt.forEach(t),wxo=r(Z8e," \u2014 "),aG=n(Z8e,"A",{href:!0});var hdt=s(aG);Axo=r(hdt,"PLBartForConditionalGeneration"),hdt.forEach(t),yxo=r(Z8e," (PLBart model)"),Z8e.forEach(t),Lxo=i(ve),I1=n(ve,"LI",{});var e9e=s(I1);xfe=n(e9e,"STRONG",{});var pdt=s(xfe);xxo=r(pdt,"prophetnet"),pdt.forEach(t),$xo=r(e9e," \u2014 "),nG=n(e9e,"A",{href:!0});var udt=s(nG);kxo=r(udt,"ProphetNetForConditionalGeneration"),udt.forEach(t),Sxo=r(e9e," (ProphetNet model)"),e9e.forEach(t),Rxo=i(ve),q1=n(ve,"LI",{});var o9e=s(q1);$fe=n(o9e,"STRONG",{});var _dt=s($fe);Pxo=r(_dt,"t5"),_dt.forEach(t),Bxo=r(o9e," \u2014 "),sG=n(o9e,"A",{href:!0});var bdt=s(sG);Ixo=r(bdt,"T5ForConditionalGeneration"),bdt.forEach(t),qxo=r(o9e," (T5 model)"),o9e.forEach(t),Nxo=i(ve),N1=n(ve,"LI",{});var r9e=s(N1);kfe=n(r9e,"STRONG",{});var vdt=s(kfe);jxo=r(vdt,"xlm-prophetnet"),vdt.forEach(t),Dxo=r(r9e," \u2014 "),lG=n(r9e,"A",{href:!0});var Fdt=s(lG);Gxo=r(Fdt,"XLMProphetNetForConditionalGeneration"),Fdt.forEach(t),Oxo=r(r9e," (XLMProphetNet model)"),r9e.forEach(t),ve.forEach(t),Vxo=i(na),j1=n(na,"P",{});var t9e=s(j1);Xxo=r(t9e,"The model is set in evaluation mode by default using "),Sfe=n(t9e,"CODE",{});var Tdt=s(Sfe);zxo=r(Tdt,"model.eval()"),Tdt.forEach(t),Wxo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=n(t9e,"CODE",{});var Mdt=s(Rfe);Qxo=r(Mdt,"model.train()"),Mdt.forEach(t),t9e.forEach(t),Hxo=i(na),T(D1.$$.fragment,na),na.forEach(t),Ws.forEach(t),MNe=i(f),Gi=n(f,"H2",{class:!0});var ADe=s(Gi);G1=n(ADe,"A",{id:!0,class:!0,href:!0});var Edt=s(G1);Pfe=n(Edt,"SPAN",{});var Cdt=s(Pfe);T(Cy.$$.fragment,Cdt),Cdt.forEach(t),Edt.forEach(t),Uxo=i(ADe),Bfe=n(ADe,"SPAN",{});var wdt=s(Bfe);Jxo=r(wdt,"AutoModelForSequenceClassification"),wdt.forEach(t),ADe.forEach(t),ENe=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(wy.$$.fragment,Qs),Yxo=i(Qs),Oi=n(Qs,"P",{});var yZ=s(Oi);Kxo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=n(yZ,"A",{href:!0});var Adt=s(iG);Zxo=r(Adt,"from_pretrained()"),Adt.forEach(t),e$o=r(yZ," class method or the "),dG=n(yZ,"A",{href:!0});var ydt=s(dG);o$o=r(ydt,"from_config()"),ydt.forEach(t),r$o=r(yZ,` class
method.`),yZ.forEach(t),t$o=i(Qs),Ay=n(Qs,"P",{});var yDe=s(Ay);a$o=r(yDe,"This class cannot be instantiated directly using "),Ife=n(yDe,"CODE",{});var Ldt=s(Ife);n$o=r(Ldt,"__init__()"),Ldt.forEach(t),s$o=r(yDe," (throws an error)."),yDe.forEach(t),l$o=i(Qs),it=n(Qs,"DIV",{class:!0});var G0=s(it);T(yy.$$.fragment,G0),i$o=i(G0),qfe=n(G0,"P",{});var xdt=s(qfe);d$o=r(xdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xdt.forEach(t),c$o=i(G0),Vi=n(G0,"P",{});var LZ=s(Vi);f$o=r(LZ,`Note:
Loading a model from its configuration file does `),Nfe=n(LZ,"STRONG",{});var $dt=s(Nfe);m$o=r($dt,"not"),$dt.forEach(t),g$o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(LZ,"A",{href:!0});var kdt=s(cG);h$o=r(kdt,"from_pretrained()"),kdt.forEach(t),p$o=r(LZ," to load the model weights."),LZ.forEach(t),u$o=i(G0),T(O1.$$.fragment,G0),G0.forEach(t),_$o=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Ly.$$.fragment,sa),b$o=i(sa),jfe=n(sa,"P",{});var Sdt=s(jfe);v$o=r(Sdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Sdt.forEach(t),F$o=i(sa),Ra=n(sa,"P",{});var O0=s(Ra);T$o=r(O0,"The model class to instantiate is selected based on the "),Dfe=n(O0,"CODE",{});var Rdt=s(Dfe);M$o=r(Rdt,"model_type"),Rdt.forEach(t),E$o=r(O0,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(O0,"CODE",{});var Pdt=s(Gfe);C$o=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),w$o=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(O0,"CODE",{});var Bdt=s(Ofe);A$o=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),y$o=r(O0,":"),O0.forEach(t),L$o=i(sa),q=n(sa,"UL",{});var j=s(q);V1=n(j,"LI",{});var a9e=s(V1);Vfe=n(a9e,"STRONG",{});var Idt=s(Vfe);x$o=r(Idt,"albert"),Idt.forEach(t),$$o=r(a9e," \u2014 "),fG=n(a9e,"A",{href:!0});var qdt=s(fG);k$o=r(qdt,"AlbertForSequenceClassification"),qdt.forEach(t),S$o=r(a9e," (ALBERT model)"),a9e.forEach(t),R$o=i(j),X1=n(j,"LI",{});var n9e=s(X1);Xfe=n(n9e,"STRONG",{});var Ndt=s(Xfe);P$o=r(Ndt,"bart"),Ndt.forEach(t),B$o=r(n9e," \u2014 "),mG=n(n9e,"A",{href:!0});var jdt=s(mG);I$o=r(jdt,"BartForSequenceClassification"),jdt.forEach(t),q$o=r(n9e," (BART model)"),n9e.forEach(t),N$o=i(j),z1=n(j,"LI",{});var s9e=s(z1);zfe=n(s9e,"STRONG",{});var Ddt=s(zfe);j$o=r(Ddt,"bert"),Ddt.forEach(t),D$o=r(s9e," \u2014 "),gG=n(s9e,"A",{href:!0});var Gdt=s(gG);G$o=r(Gdt,"BertForSequenceClassification"),Gdt.forEach(t),O$o=r(s9e," (BERT model)"),s9e.forEach(t),V$o=i(j),W1=n(j,"LI",{});var l9e=s(W1);Wfe=n(l9e,"STRONG",{});var Odt=s(Wfe);X$o=r(Odt,"big_bird"),Odt.forEach(t),z$o=r(l9e," \u2014 "),hG=n(l9e,"A",{href:!0});var Vdt=s(hG);W$o=r(Vdt,"BigBirdForSequenceClassification"),Vdt.forEach(t),Q$o=r(l9e," (BigBird model)"),l9e.forEach(t),H$o=i(j),Q1=n(j,"LI",{});var i9e=s(Q1);Qfe=n(i9e,"STRONG",{});var Xdt=s(Qfe);U$o=r(Xdt,"bigbird_pegasus"),Xdt.forEach(t),J$o=r(i9e," \u2014 "),pG=n(i9e,"A",{href:!0});var zdt=s(pG);Y$o=r(zdt,"BigBirdPegasusForSequenceClassification"),zdt.forEach(t),K$o=r(i9e," (BigBirdPegasus model)"),i9e.forEach(t),Z$o=i(j),H1=n(j,"LI",{});var d9e=s(H1);Hfe=n(d9e,"STRONG",{});var Wdt=s(Hfe);eko=r(Wdt,"camembert"),Wdt.forEach(t),oko=r(d9e," \u2014 "),uG=n(d9e,"A",{href:!0});var Qdt=s(uG);rko=r(Qdt,"CamembertForSequenceClassification"),Qdt.forEach(t),tko=r(d9e," (CamemBERT model)"),d9e.forEach(t),ako=i(j),U1=n(j,"LI",{});var c9e=s(U1);Ufe=n(c9e,"STRONG",{});var Hdt=s(Ufe);nko=r(Hdt,"canine"),Hdt.forEach(t),sko=r(c9e," \u2014 "),_G=n(c9e,"A",{href:!0});var Udt=s(_G);lko=r(Udt,"CanineForSequenceClassification"),Udt.forEach(t),iko=r(c9e," (Canine model)"),c9e.forEach(t),dko=i(j),J1=n(j,"LI",{});var f9e=s(J1);Jfe=n(f9e,"STRONG",{});var Jdt=s(Jfe);cko=r(Jdt,"convbert"),Jdt.forEach(t),fko=r(f9e," \u2014 "),bG=n(f9e,"A",{href:!0});var Ydt=s(bG);mko=r(Ydt,"ConvBertForSequenceClassification"),Ydt.forEach(t),gko=r(f9e," (ConvBERT model)"),f9e.forEach(t),hko=i(j),Y1=n(j,"LI",{});var m9e=s(Y1);Yfe=n(m9e,"STRONG",{});var Kdt=s(Yfe);pko=r(Kdt,"ctrl"),Kdt.forEach(t),uko=r(m9e," \u2014 "),vG=n(m9e,"A",{href:!0});var Zdt=s(vG);_ko=r(Zdt,"CTRLForSequenceClassification"),Zdt.forEach(t),bko=r(m9e," (CTRL model)"),m9e.forEach(t),vko=i(j),K1=n(j,"LI",{});var g9e=s(K1);Kfe=n(g9e,"STRONG",{});var ect=s(Kfe);Fko=r(ect,"data2vec-text"),ect.forEach(t),Tko=r(g9e," \u2014 "),FG=n(g9e,"A",{href:!0});var oct=s(FG);Mko=r(oct,"Data2VecTextForSequenceClassification"),oct.forEach(t),Eko=r(g9e," (Data2VecText model)"),g9e.forEach(t),Cko=i(j),Z1=n(j,"LI",{});var h9e=s(Z1);Zfe=n(h9e,"STRONG",{});var rct=s(Zfe);wko=r(rct,"deberta"),rct.forEach(t),Ako=r(h9e," \u2014 "),TG=n(h9e,"A",{href:!0});var tct=s(TG);yko=r(tct,"DebertaForSequenceClassification"),tct.forEach(t),Lko=r(h9e," (DeBERTa model)"),h9e.forEach(t),xko=i(j),eb=n(j,"LI",{});var p9e=s(eb);eme=n(p9e,"STRONG",{});var act=s(eme);$ko=r(act,"deberta-v2"),act.forEach(t),kko=r(p9e," \u2014 "),MG=n(p9e,"A",{href:!0});var nct=s(MG);Sko=r(nct,"DebertaV2ForSequenceClassification"),nct.forEach(t),Rko=r(p9e," (DeBERTa-v2 model)"),p9e.forEach(t),Pko=i(j),ob=n(j,"LI",{});var u9e=s(ob);ome=n(u9e,"STRONG",{});var sct=s(ome);Bko=r(sct,"distilbert"),sct.forEach(t),Iko=r(u9e," \u2014 "),EG=n(u9e,"A",{href:!0});var lct=s(EG);qko=r(lct,"DistilBertForSequenceClassification"),lct.forEach(t),Nko=r(u9e," (DistilBERT model)"),u9e.forEach(t),jko=i(j),rb=n(j,"LI",{});var _9e=s(rb);rme=n(_9e,"STRONG",{});var ict=s(rme);Dko=r(ict,"electra"),ict.forEach(t),Gko=r(_9e," \u2014 "),CG=n(_9e,"A",{href:!0});var dct=s(CG);Oko=r(dct,"ElectraForSequenceClassification"),dct.forEach(t),Vko=r(_9e," (ELECTRA model)"),_9e.forEach(t),Xko=i(j),tb=n(j,"LI",{});var b9e=s(tb);tme=n(b9e,"STRONG",{});var cct=s(tme);zko=r(cct,"flaubert"),cct.forEach(t),Wko=r(b9e," \u2014 "),wG=n(b9e,"A",{href:!0});var fct=s(wG);Qko=r(fct,"FlaubertForSequenceClassification"),fct.forEach(t),Hko=r(b9e," (FlauBERT model)"),b9e.forEach(t),Uko=i(j),ab=n(j,"LI",{});var v9e=s(ab);ame=n(v9e,"STRONG",{});var mct=s(ame);Jko=r(mct,"fnet"),mct.forEach(t),Yko=r(v9e," \u2014 "),AG=n(v9e,"A",{href:!0});var gct=s(AG);Kko=r(gct,"FNetForSequenceClassification"),gct.forEach(t),Zko=r(v9e," (FNet model)"),v9e.forEach(t),eSo=i(j),nb=n(j,"LI",{});var F9e=s(nb);nme=n(F9e,"STRONG",{});var hct=s(nme);oSo=r(hct,"funnel"),hct.forEach(t),rSo=r(F9e," \u2014 "),yG=n(F9e,"A",{href:!0});var pct=s(yG);tSo=r(pct,"FunnelForSequenceClassification"),pct.forEach(t),aSo=r(F9e," (Funnel Transformer model)"),F9e.forEach(t),nSo=i(j),sb=n(j,"LI",{});var T9e=s(sb);sme=n(T9e,"STRONG",{});var uct=s(sme);sSo=r(uct,"gpt2"),uct.forEach(t),lSo=r(T9e," \u2014 "),LG=n(T9e,"A",{href:!0});var _ct=s(LG);iSo=r(_ct,"GPT2ForSequenceClassification"),_ct.forEach(t),dSo=r(T9e," (OpenAI GPT-2 model)"),T9e.forEach(t),cSo=i(j),lb=n(j,"LI",{});var M9e=s(lb);lme=n(M9e,"STRONG",{});var bct=s(lme);fSo=r(bct,"gpt_neo"),bct.forEach(t),mSo=r(M9e," \u2014 "),xG=n(M9e,"A",{href:!0});var vct=s(xG);gSo=r(vct,"GPTNeoForSequenceClassification"),vct.forEach(t),hSo=r(M9e," (GPT Neo model)"),M9e.forEach(t),pSo=i(j),ib=n(j,"LI",{});var E9e=s(ib);ime=n(E9e,"STRONG",{});var Fct=s(ime);uSo=r(Fct,"gptj"),Fct.forEach(t),_So=r(E9e," \u2014 "),$G=n(E9e,"A",{href:!0});var Tct=s($G);bSo=r(Tct,"GPTJForSequenceClassification"),Tct.forEach(t),vSo=r(E9e," (GPT-J model)"),E9e.forEach(t),FSo=i(j),db=n(j,"LI",{});var C9e=s(db);dme=n(C9e,"STRONG",{});var Mct=s(dme);TSo=r(Mct,"ibert"),Mct.forEach(t),MSo=r(C9e," \u2014 "),kG=n(C9e,"A",{href:!0});var Ect=s(kG);ESo=r(Ect,"IBertForSequenceClassification"),Ect.forEach(t),CSo=r(C9e," (I-BERT model)"),C9e.forEach(t),wSo=i(j),cb=n(j,"LI",{});var w9e=s(cb);cme=n(w9e,"STRONG",{});var Cct=s(cme);ASo=r(Cct,"layoutlm"),Cct.forEach(t),ySo=r(w9e," \u2014 "),SG=n(w9e,"A",{href:!0});var wct=s(SG);LSo=r(wct,"LayoutLMForSequenceClassification"),wct.forEach(t),xSo=r(w9e," (LayoutLM model)"),w9e.forEach(t),$So=i(j),fb=n(j,"LI",{});var A9e=s(fb);fme=n(A9e,"STRONG",{});var Act=s(fme);kSo=r(Act,"layoutlmv2"),Act.forEach(t),SSo=r(A9e," \u2014 "),RG=n(A9e,"A",{href:!0});var yct=s(RG);RSo=r(yct,"LayoutLMv2ForSequenceClassification"),yct.forEach(t),PSo=r(A9e," (LayoutLMv2 model)"),A9e.forEach(t),BSo=i(j),mb=n(j,"LI",{});var y9e=s(mb);mme=n(y9e,"STRONG",{});var Lct=s(mme);ISo=r(Lct,"layoutlmv3"),Lct.forEach(t),qSo=r(y9e," \u2014 "),PG=n(y9e,"A",{href:!0});var xct=s(PG);NSo=r(xct,"LayoutLMv3ForSequenceClassification"),xct.forEach(t),jSo=r(y9e," (LayoutLMv3 model)"),y9e.forEach(t),DSo=i(j),gb=n(j,"LI",{});var L9e=s(gb);gme=n(L9e,"STRONG",{});var $ct=s(gme);GSo=r($ct,"led"),$ct.forEach(t),OSo=r(L9e," \u2014 "),BG=n(L9e,"A",{href:!0});var kct=s(BG);VSo=r(kct,"LEDForSequenceClassification"),kct.forEach(t),XSo=r(L9e," (LED model)"),L9e.forEach(t),zSo=i(j),hb=n(j,"LI",{});var x9e=s(hb);hme=n(x9e,"STRONG",{});var Sct=s(hme);WSo=r(Sct,"longformer"),Sct.forEach(t),QSo=r(x9e," \u2014 "),IG=n(x9e,"A",{href:!0});var Rct=s(IG);HSo=r(Rct,"LongformerForSequenceClassification"),Rct.forEach(t),USo=r(x9e," (Longformer model)"),x9e.forEach(t),JSo=i(j),pb=n(j,"LI",{});var $9e=s(pb);pme=n($9e,"STRONG",{});var Pct=s(pme);YSo=r(Pct,"mbart"),Pct.forEach(t),KSo=r($9e," \u2014 "),qG=n($9e,"A",{href:!0});var Bct=s(qG);ZSo=r(Bct,"MBartForSequenceClassification"),Bct.forEach(t),eRo=r($9e," (mBART model)"),$9e.forEach(t),oRo=i(j),ub=n(j,"LI",{});var k9e=s(ub);ume=n(k9e,"STRONG",{});var Ict=s(ume);rRo=r(Ict,"megatron-bert"),Ict.forEach(t),tRo=r(k9e," \u2014 "),NG=n(k9e,"A",{href:!0});var qct=s(NG);aRo=r(qct,"MegatronBertForSequenceClassification"),qct.forEach(t),nRo=r(k9e," (MegatronBert model)"),k9e.forEach(t),sRo=i(j),_b=n(j,"LI",{});var S9e=s(_b);_me=n(S9e,"STRONG",{});var Nct=s(_me);lRo=r(Nct,"mobilebert"),Nct.forEach(t),iRo=r(S9e," \u2014 "),jG=n(S9e,"A",{href:!0});var jct=s(jG);dRo=r(jct,"MobileBertForSequenceClassification"),jct.forEach(t),cRo=r(S9e," (MobileBERT model)"),S9e.forEach(t),fRo=i(j),bb=n(j,"LI",{});var R9e=s(bb);bme=n(R9e,"STRONG",{});var Dct=s(bme);mRo=r(Dct,"mpnet"),Dct.forEach(t),gRo=r(R9e," \u2014 "),DG=n(R9e,"A",{href:!0});var Gct=s(DG);hRo=r(Gct,"MPNetForSequenceClassification"),Gct.forEach(t),pRo=r(R9e," (MPNet model)"),R9e.forEach(t),uRo=i(j),vb=n(j,"LI",{});var P9e=s(vb);vme=n(P9e,"STRONG",{});var Oct=s(vme);_Ro=r(Oct,"nystromformer"),Oct.forEach(t),bRo=r(P9e," \u2014 "),GG=n(P9e,"A",{href:!0});var Vct=s(GG);vRo=r(Vct,"NystromformerForSequenceClassification"),Vct.forEach(t),FRo=r(P9e," (Nystromformer model)"),P9e.forEach(t),TRo=i(j),Fb=n(j,"LI",{});var B9e=s(Fb);Fme=n(B9e,"STRONG",{});var Xct=s(Fme);MRo=r(Xct,"openai-gpt"),Xct.forEach(t),ERo=r(B9e," \u2014 "),OG=n(B9e,"A",{href:!0});var zct=s(OG);CRo=r(zct,"OpenAIGPTForSequenceClassification"),zct.forEach(t),wRo=r(B9e," (OpenAI GPT model)"),B9e.forEach(t),ARo=i(j),Tb=n(j,"LI",{});var I9e=s(Tb);Tme=n(I9e,"STRONG",{});var Wct=s(Tme);yRo=r(Wct,"perceiver"),Wct.forEach(t),LRo=r(I9e," \u2014 "),VG=n(I9e,"A",{href:!0});var Qct=s(VG);xRo=r(Qct,"PerceiverForSequenceClassification"),Qct.forEach(t),$Ro=r(I9e," (Perceiver model)"),I9e.forEach(t),kRo=i(j),Mb=n(j,"LI",{});var q9e=s(Mb);Mme=n(q9e,"STRONG",{});var Hct=s(Mme);SRo=r(Hct,"plbart"),Hct.forEach(t),RRo=r(q9e," \u2014 "),XG=n(q9e,"A",{href:!0});var Uct=s(XG);PRo=r(Uct,"PLBartForSequenceClassification"),Uct.forEach(t),BRo=r(q9e," (PLBart model)"),q9e.forEach(t),IRo=i(j),Eb=n(j,"LI",{});var N9e=s(Eb);Eme=n(N9e,"STRONG",{});var Jct=s(Eme);qRo=r(Jct,"qdqbert"),Jct.forEach(t),NRo=r(N9e," \u2014 "),zG=n(N9e,"A",{href:!0});var Yct=s(zG);jRo=r(Yct,"QDQBertForSequenceClassification"),Yct.forEach(t),DRo=r(N9e," (QDQBert model)"),N9e.forEach(t),GRo=i(j),Cb=n(j,"LI",{});var j9e=s(Cb);Cme=n(j9e,"STRONG",{});var Kct=s(Cme);ORo=r(Kct,"reformer"),Kct.forEach(t),VRo=r(j9e," \u2014 "),WG=n(j9e,"A",{href:!0});var Zct=s(WG);XRo=r(Zct,"ReformerForSequenceClassification"),Zct.forEach(t),zRo=r(j9e," (Reformer model)"),j9e.forEach(t),WRo=i(j),wb=n(j,"LI",{});var D9e=s(wb);wme=n(D9e,"STRONG",{});var eft=s(wme);QRo=r(eft,"rembert"),eft.forEach(t),HRo=r(D9e," \u2014 "),QG=n(D9e,"A",{href:!0});var oft=s(QG);URo=r(oft,"RemBertForSequenceClassification"),oft.forEach(t),JRo=r(D9e," (RemBERT model)"),D9e.forEach(t),YRo=i(j),Ab=n(j,"LI",{});var G9e=s(Ab);Ame=n(G9e,"STRONG",{});var rft=s(Ame);KRo=r(rft,"roberta"),rft.forEach(t),ZRo=r(G9e," \u2014 "),HG=n(G9e,"A",{href:!0});var tft=s(HG);ePo=r(tft,"RobertaForSequenceClassification"),tft.forEach(t),oPo=r(G9e," (RoBERTa model)"),G9e.forEach(t),rPo=i(j),yb=n(j,"LI",{});var O9e=s(yb);yme=n(O9e,"STRONG",{});var aft=s(yme);tPo=r(aft,"roformer"),aft.forEach(t),aPo=r(O9e," \u2014 "),UG=n(O9e,"A",{href:!0});var nft=s(UG);nPo=r(nft,"RoFormerForSequenceClassification"),nft.forEach(t),sPo=r(O9e," (RoFormer model)"),O9e.forEach(t),lPo=i(j),Lb=n(j,"LI",{});var V9e=s(Lb);Lme=n(V9e,"STRONG",{});var sft=s(Lme);iPo=r(sft,"squeezebert"),sft.forEach(t),dPo=r(V9e," \u2014 "),JG=n(V9e,"A",{href:!0});var lft=s(JG);cPo=r(lft,"SqueezeBertForSequenceClassification"),lft.forEach(t),fPo=r(V9e," (SqueezeBERT model)"),V9e.forEach(t),mPo=i(j),xb=n(j,"LI",{});var X9e=s(xb);xme=n(X9e,"STRONG",{});var ift=s(xme);gPo=r(ift,"tapas"),ift.forEach(t),hPo=r(X9e," \u2014 "),YG=n(X9e,"A",{href:!0});var dft=s(YG);pPo=r(dft,"TapasForSequenceClassification"),dft.forEach(t),uPo=r(X9e," (TAPAS model)"),X9e.forEach(t),_Po=i(j),$b=n(j,"LI",{});var z9e=s($b);$me=n(z9e,"STRONG",{});var cft=s($me);bPo=r(cft,"transfo-xl"),cft.forEach(t),vPo=r(z9e," \u2014 "),KG=n(z9e,"A",{href:!0});var fft=s(KG);FPo=r(fft,"TransfoXLForSequenceClassification"),fft.forEach(t),TPo=r(z9e," (Transformer-XL model)"),z9e.forEach(t),MPo=i(j),kb=n(j,"LI",{});var W9e=s(kb);kme=n(W9e,"STRONG",{});var mft=s(kme);EPo=r(mft,"xlm"),mft.forEach(t),CPo=r(W9e," \u2014 "),ZG=n(W9e,"A",{href:!0});var gft=s(ZG);wPo=r(gft,"XLMForSequenceClassification"),gft.forEach(t),APo=r(W9e," (XLM model)"),W9e.forEach(t),yPo=i(j),Sb=n(j,"LI",{});var Q9e=s(Sb);Sme=n(Q9e,"STRONG",{});var hft=s(Sme);LPo=r(hft,"xlm-roberta"),hft.forEach(t),xPo=r(Q9e," \u2014 "),eO=n(Q9e,"A",{href:!0});var pft=s(eO);$Po=r(pft,"XLMRobertaForSequenceClassification"),pft.forEach(t),kPo=r(Q9e," (XLM-RoBERTa model)"),Q9e.forEach(t),SPo=i(j),Rb=n(j,"LI",{});var H9e=s(Rb);Rme=n(H9e,"STRONG",{});var uft=s(Rme);RPo=r(uft,"xlm-roberta-xl"),uft.forEach(t),PPo=r(H9e," \u2014 "),oO=n(H9e,"A",{href:!0});var _ft=s(oO);BPo=r(_ft,"XLMRobertaXLForSequenceClassification"),_ft.forEach(t),IPo=r(H9e," (XLM-RoBERTa-XL model)"),H9e.forEach(t),qPo=i(j),Pb=n(j,"LI",{});var U9e=s(Pb);Pme=n(U9e,"STRONG",{});var bft=s(Pme);NPo=r(bft,"xlnet"),bft.forEach(t),jPo=r(U9e," \u2014 "),rO=n(U9e,"A",{href:!0});var vft=s(rO);DPo=r(vft,"XLNetForSequenceClassification"),vft.forEach(t),GPo=r(U9e," (XLNet model)"),U9e.forEach(t),OPo=i(j),Bb=n(j,"LI",{});var J9e=s(Bb);Bme=n(J9e,"STRONG",{});var Fft=s(Bme);VPo=r(Fft,"yoso"),Fft.forEach(t),XPo=r(J9e," \u2014 "),tO=n(J9e,"A",{href:!0});var Tft=s(tO);zPo=r(Tft,"YosoForSequenceClassification"),Tft.forEach(t),WPo=r(J9e," (YOSO model)"),J9e.forEach(t),j.forEach(t),QPo=i(sa),Ib=n(sa,"P",{});var Y9e=s(Ib);HPo=r(Y9e,"The model is set in evaluation mode by default using "),Ime=n(Y9e,"CODE",{});var Mft=s(Ime);UPo=r(Mft,"model.eval()"),Mft.forEach(t),JPo=r(Y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(Y9e,"CODE",{});var Eft=s(qme);YPo=r(Eft,"model.train()"),Eft.forEach(t),Y9e.forEach(t),KPo=i(sa),T(qb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),CNe=i(f),Xi=n(f,"H2",{class:!0});var LDe=s(Xi);Nb=n(LDe,"A",{id:!0,class:!0,href:!0});var Cft=s(Nb);Nme=n(Cft,"SPAN",{});var wft=s(Nme);T(xy.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),ZPo=i(LDe),jme=n(LDe,"SPAN",{});var Aft=s(jme);eBo=r(Aft,"AutoModelForMultipleChoice"),Aft.forEach(t),LDe.forEach(t),wNe=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T($y.$$.fragment,Hs),oBo=i(Hs),zi=n(Hs,"P",{});var xZ=s(zi);rBo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=n(xZ,"A",{href:!0});var yft=s(aO);tBo=r(yft,"from_pretrained()"),yft.forEach(t),aBo=r(xZ," class method or the "),nO=n(xZ,"A",{href:!0});var Lft=s(nO);nBo=r(Lft,"from_config()"),Lft.forEach(t),sBo=r(xZ,` class
method.`),xZ.forEach(t),lBo=i(Hs),ky=n(Hs,"P",{});var xDe=s(ky);iBo=r(xDe,"This class cannot be instantiated directly using "),Dme=n(xDe,"CODE",{});var xft=s(Dme);dBo=r(xft,"__init__()"),xft.forEach(t),cBo=r(xDe," (throws an error)."),xDe.forEach(t),fBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var V0=s(dt);T(Sy.$$.fragment,V0),mBo=i(V0),Gme=n(V0,"P",{});var $ft=s(Gme);gBo=r($ft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$ft.forEach(t),hBo=i(V0),Wi=n(V0,"P",{});var $Z=s(Wi);pBo=r($Z,`Note:
Loading a model from its configuration file does `),Ome=n($Z,"STRONG",{});var kft=s(Ome);uBo=r(kft,"not"),kft.forEach(t),_Bo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n($Z,"A",{href:!0});var Sft=s(sO);bBo=r(Sft,"from_pretrained()"),Sft.forEach(t),vBo=r($Z," to load the model weights."),$Z.forEach(t),FBo=i(V0),T(jb.$$.fragment,V0),V0.forEach(t),TBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(Ry.$$.fragment,la),MBo=i(la),Vme=n(la,"P",{});var Rft=s(Vme);EBo=r(Rft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rft.forEach(t),CBo=i(la),Pa=n(la,"P",{});var X0=s(Pa);wBo=r(X0,"The model class to instantiate is selected based on the "),Xme=n(X0,"CODE",{});var Pft=s(Xme);ABo=r(Pft,"model_type"),Pft.forEach(t),yBo=r(X0,` property of the config object (either
passed as an argument or loaded from `),zme=n(X0,"CODE",{});var Bft=s(zme);LBo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),xBo=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=n(X0,"CODE",{});var Ift=s(Wme);$Bo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),kBo=r(X0,":"),X0.forEach(t),SBo=i(la),K=n(la,"UL",{});var ee=s(K);Db=n(ee,"LI",{});var K9e=s(Db);Qme=n(K9e,"STRONG",{});var qft=s(Qme);RBo=r(qft,"albert"),qft.forEach(t),PBo=r(K9e," \u2014 "),lO=n(K9e,"A",{href:!0});var Nft=s(lO);BBo=r(Nft,"AlbertForMultipleChoice"),Nft.forEach(t),IBo=r(K9e," (ALBERT model)"),K9e.forEach(t),qBo=i(ee),Gb=n(ee,"LI",{});var Z9e=s(Gb);Hme=n(Z9e,"STRONG",{});var jft=s(Hme);NBo=r(jft,"bert"),jft.forEach(t),jBo=r(Z9e," \u2014 "),iO=n(Z9e,"A",{href:!0});var Dft=s(iO);DBo=r(Dft,"BertForMultipleChoice"),Dft.forEach(t),GBo=r(Z9e," (BERT model)"),Z9e.forEach(t),OBo=i(ee),Ob=n(ee,"LI",{});var exe=s(Ob);Ume=n(exe,"STRONG",{});var Gft=s(Ume);VBo=r(Gft,"big_bird"),Gft.forEach(t),XBo=r(exe," \u2014 "),dO=n(exe,"A",{href:!0});var Oft=s(dO);zBo=r(Oft,"BigBirdForMultipleChoice"),Oft.forEach(t),WBo=r(exe," (BigBird model)"),exe.forEach(t),QBo=i(ee),Vb=n(ee,"LI",{});var oxe=s(Vb);Jme=n(oxe,"STRONG",{});var Vft=s(Jme);HBo=r(Vft,"camembert"),Vft.forEach(t),UBo=r(oxe," \u2014 "),cO=n(oxe,"A",{href:!0});var Xft=s(cO);JBo=r(Xft,"CamembertForMultipleChoice"),Xft.forEach(t),YBo=r(oxe," (CamemBERT model)"),oxe.forEach(t),KBo=i(ee),Xb=n(ee,"LI",{});var rxe=s(Xb);Yme=n(rxe,"STRONG",{});var zft=s(Yme);ZBo=r(zft,"canine"),zft.forEach(t),eIo=r(rxe," \u2014 "),fO=n(rxe,"A",{href:!0});var Wft=s(fO);oIo=r(Wft,"CanineForMultipleChoice"),Wft.forEach(t),rIo=r(rxe," (Canine model)"),rxe.forEach(t),tIo=i(ee),zb=n(ee,"LI",{});var txe=s(zb);Kme=n(txe,"STRONG",{});var Qft=s(Kme);aIo=r(Qft,"convbert"),Qft.forEach(t),nIo=r(txe," \u2014 "),mO=n(txe,"A",{href:!0});var Hft=s(mO);sIo=r(Hft,"ConvBertForMultipleChoice"),Hft.forEach(t),lIo=r(txe," (ConvBERT model)"),txe.forEach(t),iIo=i(ee),Wb=n(ee,"LI",{});var axe=s(Wb);Zme=n(axe,"STRONG",{});var Uft=s(Zme);dIo=r(Uft,"data2vec-text"),Uft.forEach(t),cIo=r(axe," \u2014 "),gO=n(axe,"A",{href:!0});var Jft=s(gO);fIo=r(Jft,"Data2VecTextForMultipleChoice"),Jft.forEach(t),mIo=r(axe," (Data2VecText model)"),axe.forEach(t),gIo=i(ee),Qb=n(ee,"LI",{});var nxe=s(Qb);ege=n(nxe,"STRONG",{});var Yft=s(ege);hIo=r(Yft,"deberta-v2"),Yft.forEach(t),pIo=r(nxe," \u2014 "),hO=n(nxe,"A",{href:!0});var Kft=s(hO);uIo=r(Kft,"DebertaV2ForMultipleChoice"),Kft.forEach(t),_Io=r(nxe," (DeBERTa-v2 model)"),nxe.forEach(t),bIo=i(ee),Hb=n(ee,"LI",{});var sxe=s(Hb);oge=n(sxe,"STRONG",{});var Zft=s(oge);vIo=r(Zft,"distilbert"),Zft.forEach(t),FIo=r(sxe," \u2014 "),pO=n(sxe,"A",{href:!0});var emt=s(pO);TIo=r(emt,"DistilBertForMultipleChoice"),emt.forEach(t),MIo=r(sxe," (DistilBERT model)"),sxe.forEach(t),EIo=i(ee),Ub=n(ee,"LI",{});var lxe=s(Ub);rge=n(lxe,"STRONG",{});var omt=s(rge);CIo=r(omt,"electra"),omt.forEach(t),wIo=r(lxe," \u2014 "),uO=n(lxe,"A",{href:!0});var rmt=s(uO);AIo=r(rmt,"ElectraForMultipleChoice"),rmt.forEach(t),yIo=r(lxe," (ELECTRA model)"),lxe.forEach(t),LIo=i(ee),Jb=n(ee,"LI",{});var ixe=s(Jb);tge=n(ixe,"STRONG",{});var tmt=s(tge);xIo=r(tmt,"flaubert"),tmt.forEach(t),$Io=r(ixe," \u2014 "),_O=n(ixe,"A",{href:!0});var amt=s(_O);kIo=r(amt,"FlaubertForMultipleChoice"),amt.forEach(t),SIo=r(ixe," (FlauBERT model)"),ixe.forEach(t),RIo=i(ee),Yb=n(ee,"LI",{});var dxe=s(Yb);age=n(dxe,"STRONG",{});var nmt=s(age);PIo=r(nmt,"fnet"),nmt.forEach(t),BIo=r(dxe," \u2014 "),bO=n(dxe,"A",{href:!0});var smt=s(bO);IIo=r(smt,"FNetForMultipleChoice"),smt.forEach(t),qIo=r(dxe," (FNet model)"),dxe.forEach(t),NIo=i(ee),Kb=n(ee,"LI",{});var cxe=s(Kb);nge=n(cxe,"STRONG",{});var lmt=s(nge);jIo=r(lmt,"funnel"),lmt.forEach(t),DIo=r(cxe," \u2014 "),vO=n(cxe,"A",{href:!0});var imt=s(vO);GIo=r(imt,"FunnelForMultipleChoice"),imt.forEach(t),OIo=r(cxe," (Funnel Transformer model)"),cxe.forEach(t),VIo=i(ee),Zb=n(ee,"LI",{});var fxe=s(Zb);sge=n(fxe,"STRONG",{});var dmt=s(sge);XIo=r(dmt,"ibert"),dmt.forEach(t),zIo=r(fxe," \u2014 "),FO=n(fxe,"A",{href:!0});var cmt=s(FO);WIo=r(cmt,"IBertForMultipleChoice"),cmt.forEach(t),QIo=r(fxe," (I-BERT model)"),fxe.forEach(t),HIo=i(ee),e4=n(ee,"LI",{});var mxe=s(e4);lge=n(mxe,"STRONG",{});var fmt=s(lge);UIo=r(fmt,"longformer"),fmt.forEach(t),JIo=r(mxe," \u2014 "),TO=n(mxe,"A",{href:!0});var mmt=s(TO);YIo=r(mmt,"LongformerForMultipleChoice"),mmt.forEach(t),KIo=r(mxe," (Longformer model)"),mxe.forEach(t),ZIo=i(ee),o4=n(ee,"LI",{});var gxe=s(o4);ige=n(gxe,"STRONG",{});var gmt=s(ige);eqo=r(gmt,"megatron-bert"),gmt.forEach(t),oqo=r(gxe," \u2014 "),MO=n(gxe,"A",{href:!0});var hmt=s(MO);rqo=r(hmt,"MegatronBertForMultipleChoice"),hmt.forEach(t),tqo=r(gxe," (MegatronBert model)"),gxe.forEach(t),aqo=i(ee),r4=n(ee,"LI",{});var hxe=s(r4);dge=n(hxe,"STRONG",{});var pmt=s(dge);nqo=r(pmt,"mobilebert"),pmt.forEach(t),sqo=r(hxe," \u2014 "),EO=n(hxe,"A",{href:!0});var umt=s(EO);lqo=r(umt,"MobileBertForMultipleChoice"),umt.forEach(t),iqo=r(hxe," (MobileBERT model)"),hxe.forEach(t),dqo=i(ee),t4=n(ee,"LI",{});var pxe=s(t4);cge=n(pxe,"STRONG",{});var _mt=s(cge);cqo=r(_mt,"mpnet"),_mt.forEach(t),fqo=r(pxe," \u2014 "),CO=n(pxe,"A",{href:!0});var bmt=s(CO);mqo=r(bmt,"MPNetForMultipleChoice"),bmt.forEach(t),gqo=r(pxe," (MPNet model)"),pxe.forEach(t),hqo=i(ee),a4=n(ee,"LI",{});var uxe=s(a4);fge=n(uxe,"STRONG",{});var vmt=s(fge);pqo=r(vmt,"nystromformer"),vmt.forEach(t),uqo=r(uxe," \u2014 "),wO=n(uxe,"A",{href:!0});var Fmt=s(wO);_qo=r(Fmt,"NystromformerForMultipleChoice"),Fmt.forEach(t),bqo=r(uxe," (Nystromformer model)"),uxe.forEach(t),vqo=i(ee),n4=n(ee,"LI",{});var _xe=s(n4);mge=n(_xe,"STRONG",{});var Tmt=s(mge);Fqo=r(Tmt,"qdqbert"),Tmt.forEach(t),Tqo=r(_xe," \u2014 "),AO=n(_xe,"A",{href:!0});var Mmt=s(AO);Mqo=r(Mmt,"QDQBertForMultipleChoice"),Mmt.forEach(t),Eqo=r(_xe," (QDQBert model)"),_xe.forEach(t),Cqo=i(ee),s4=n(ee,"LI",{});var bxe=s(s4);gge=n(bxe,"STRONG",{});var Emt=s(gge);wqo=r(Emt,"rembert"),Emt.forEach(t),Aqo=r(bxe," \u2014 "),yO=n(bxe,"A",{href:!0});var Cmt=s(yO);yqo=r(Cmt,"RemBertForMultipleChoice"),Cmt.forEach(t),Lqo=r(bxe," (RemBERT model)"),bxe.forEach(t),xqo=i(ee),l4=n(ee,"LI",{});var vxe=s(l4);hge=n(vxe,"STRONG",{});var wmt=s(hge);$qo=r(wmt,"roberta"),wmt.forEach(t),kqo=r(vxe," \u2014 "),LO=n(vxe,"A",{href:!0});var Amt=s(LO);Sqo=r(Amt,"RobertaForMultipleChoice"),Amt.forEach(t),Rqo=r(vxe," (RoBERTa model)"),vxe.forEach(t),Pqo=i(ee),i4=n(ee,"LI",{});var Fxe=s(i4);pge=n(Fxe,"STRONG",{});var ymt=s(pge);Bqo=r(ymt,"roformer"),ymt.forEach(t),Iqo=r(Fxe," \u2014 "),xO=n(Fxe,"A",{href:!0});var Lmt=s(xO);qqo=r(Lmt,"RoFormerForMultipleChoice"),Lmt.forEach(t),Nqo=r(Fxe," (RoFormer model)"),Fxe.forEach(t),jqo=i(ee),d4=n(ee,"LI",{});var Txe=s(d4);uge=n(Txe,"STRONG",{});var xmt=s(uge);Dqo=r(xmt,"squeezebert"),xmt.forEach(t),Gqo=r(Txe," \u2014 "),$O=n(Txe,"A",{href:!0});var $mt=s($O);Oqo=r($mt,"SqueezeBertForMultipleChoice"),$mt.forEach(t),Vqo=r(Txe," (SqueezeBERT model)"),Txe.forEach(t),Xqo=i(ee),c4=n(ee,"LI",{});var Mxe=s(c4);_ge=n(Mxe,"STRONG",{});var kmt=s(_ge);zqo=r(kmt,"xlm"),kmt.forEach(t),Wqo=r(Mxe," \u2014 "),kO=n(Mxe,"A",{href:!0});var Smt=s(kO);Qqo=r(Smt,"XLMForMultipleChoice"),Smt.forEach(t),Hqo=r(Mxe," (XLM model)"),Mxe.forEach(t),Uqo=i(ee),f4=n(ee,"LI",{});var Exe=s(f4);bge=n(Exe,"STRONG",{});var Rmt=s(bge);Jqo=r(Rmt,"xlm-roberta"),Rmt.forEach(t),Yqo=r(Exe," \u2014 "),SO=n(Exe,"A",{href:!0});var Pmt=s(SO);Kqo=r(Pmt,"XLMRobertaForMultipleChoice"),Pmt.forEach(t),Zqo=r(Exe," (XLM-RoBERTa model)"),Exe.forEach(t),eNo=i(ee),m4=n(ee,"LI",{});var Cxe=s(m4);vge=n(Cxe,"STRONG",{});var Bmt=s(vge);oNo=r(Bmt,"xlm-roberta-xl"),Bmt.forEach(t),rNo=r(Cxe," \u2014 "),RO=n(Cxe,"A",{href:!0});var Imt=s(RO);tNo=r(Imt,"XLMRobertaXLForMultipleChoice"),Imt.forEach(t),aNo=r(Cxe," (XLM-RoBERTa-XL model)"),Cxe.forEach(t),nNo=i(ee),g4=n(ee,"LI",{});var wxe=s(g4);Fge=n(wxe,"STRONG",{});var qmt=s(Fge);sNo=r(qmt,"xlnet"),qmt.forEach(t),lNo=r(wxe," \u2014 "),PO=n(wxe,"A",{href:!0});var Nmt=s(PO);iNo=r(Nmt,"XLNetForMultipleChoice"),Nmt.forEach(t),dNo=r(wxe," (XLNet model)"),wxe.forEach(t),cNo=i(ee),h4=n(ee,"LI",{});var Axe=s(h4);Tge=n(Axe,"STRONG",{});var jmt=s(Tge);fNo=r(jmt,"yoso"),jmt.forEach(t),mNo=r(Axe," \u2014 "),BO=n(Axe,"A",{href:!0});var Dmt=s(BO);gNo=r(Dmt,"YosoForMultipleChoice"),Dmt.forEach(t),hNo=r(Axe," (YOSO model)"),Axe.forEach(t),ee.forEach(t),pNo=i(la),p4=n(la,"P",{});var yxe=s(p4);uNo=r(yxe,"The model is set in evaluation mode by default using "),Mge=n(yxe,"CODE",{});var Gmt=s(Mge);_No=r(Gmt,"model.eval()"),Gmt.forEach(t),bNo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=n(yxe,"CODE",{});var Omt=s(Ege);vNo=r(Omt,"model.train()"),Omt.forEach(t),yxe.forEach(t),FNo=i(la),T(u4.$$.fragment,la),la.forEach(t),Hs.forEach(t),ANe=i(f),Qi=n(f,"H2",{class:!0});var $De=s(Qi);_4=n($De,"A",{id:!0,class:!0,href:!0});var Vmt=s(_4);Cge=n(Vmt,"SPAN",{});var Xmt=s(Cge);T(Py.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),TNo=i($De),wge=n($De,"SPAN",{});var zmt=s(wge);MNo=r(zmt,"AutoModelForNextSentencePrediction"),zmt.forEach(t),$De.forEach(t),yNe=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(By.$$.fragment,Us),ENo=i(Us),Hi=n(Us,"P",{});var kZ=s(Hi);CNo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=n(kZ,"A",{href:!0});var Wmt=s(IO);wNo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),ANo=r(kZ," class method or the "),qO=n(kZ,"A",{href:!0});var Qmt=s(qO);yNo=r(Qmt,"from_config()"),Qmt.forEach(t),LNo=r(kZ,` class
method.`),kZ.forEach(t),xNo=i(Us),Iy=n(Us,"P",{});var kDe=s(Iy);$No=r(kDe,"This class cannot be instantiated directly using "),Age=n(kDe,"CODE",{});var Hmt=s(Age);kNo=r(Hmt,"__init__()"),Hmt.forEach(t),SNo=r(kDe," (throws an error)."),kDe.forEach(t),RNo=i(Us),ct=n(Us,"DIV",{class:!0});var z0=s(ct);T(qy.$$.fragment,z0),PNo=i(z0),yge=n(z0,"P",{});var Umt=s(yge);BNo=r(Umt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Umt.forEach(t),INo=i(z0),Ui=n(z0,"P",{});var SZ=s(Ui);qNo=r(SZ,`Note:
Loading a model from its configuration file does `),Lge=n(SZ,"STRONG",{});var Jmt=s(Lge);NNo=r(Jmt,"not"),Jmt.forEach(t),jNo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(SZ,"A",{href:!0});var Ymt=s(NO);DNo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),GNo=r(SZ," to load the model weights."),SZ.forEach(t),ONo=i(z0),T(b4.$$.fragment,z0),z0.forEach(t),VNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Ny.$$.fragment,ia),XNo=i(ia),xge=n(ia,"P",{});var Kmt=s(xge);zNo=r(Kmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kmt.forEach(t),WNo=i(ia),Ba=n(ia,"P",{});var W0=s(Ba);QNo=r(W0,"The model class to instantiate is selected based on the "),$ge=n(W0,"CODE",{});var Zmt=s($ge);HNo=r(Zmt,"model_type"),Zmt.forEach(t),UNo=r(W0,` property of the config object (either
passed as an argument or loaded from `),kge=n(W0,"CODE",{});var egt=s(kge);JNo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),YNo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=n(W0,"CODE",{});var ogt=s(Sge);KNo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),ZNo=r(W0,":"),W0.forEach(t),ejo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);v4=n(Js,"LI",{});var Lxe=s(v4);Rge=n(Lxe,"STRONG",{});var rgt=s(Rge);ojo=r(rgt,"bert"),rgt.forEach(t),rjo=r(Lxe," \u2014 "),jO=n(Lxe,"A",{href:!0});var tgt=s(jO);tjo=r(tgt,"BertForNextSentencePrediction"),tgt.forEach(t),ajo=r(Lxe," (BERT model)"),Lxe.forEach(t),njo=i(Js),F4=n(Js,"LI",{});var xxe=s(F4);Pge=n(xxe,"STRONG",{});var agt=s(Pge);sjo=r(agt,"fnet"),agt.forEach(t),ljo=r(xxe," \u2014 "),DO=n(xxe,"A",{href:!0});var ngt=s(DO);ijo=r(ngt,"FNetForNextSentencePrediction"),ngt.forEach(t),djo=r(xxe," (FNet model)"),xxe.forEach(t),cjo=i(Js),T4=n(Js,"LI",{});var $xe=s(T4);Bge=n($xe,"STRONG",{});var sgt=s(Bge);fjo=r(sgt,"megatron-bert"),sgt.forEach(t),mjo=r($xe," \u2014 "),GO=n($xe,"A",{href:!0});var lgt=s(GO);gjo=r(lgt,"MegatronBertForNextSentencePrediction"),lgt.forEach(t),hjo=r($xe," (MegatronBert model)"),$xe.forEach(t),pjo=i(Js),M4=n(Js,"LI",{});var kxe=s(M4);Ige=n(kxe,"STRONG",{});var igt=s(Ige);ujo=r(igt,"mobilebert"),igt.forEach(t),_jo=r(kxe," \u2014 "),OO=n(kxe,"A",{href:!0});var dgt=s(OO);bjo=r(dgt,"MobileBertForNextSentencePrediction"),dgt.forEach(t),vjo=r(kxe," (MobileBERT model)"),kxe.forEach(t),Fjo=i(Js),E4=n(Js,"LI",{});var Sxe=s(E4);qge=n(Sxe,"STRONG",{});var cgt=s(qge);Tjo=r(cgt,"qdqbert"),cgt.forEach(t),Mjo=r(Sxe," \u2014 "),VO=n(Sxe,"A",{href:!0});var fgt=s(VO);Ejo=r(fgt,"QDQBertForNextSentencePrediction"),fgt.forEach(t),Cjo=r(Sxe," (QDQBert model)"),Sxe.forEach(t),Js.forEach(t),wjo=i(ia),C4=n(ia,"P",{});var Rxe=s(C4);Ajo=r(Rxe,"The model is set in evaluation mode by default using "),Nge=n(Rxe,"CODE",{});var mgt=s(Nge);yjo=r(mgt,"model.eval()"),mgt.forEach(t),Ljo=r(Rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(Rxe,"CODE",{});var ggt=s(jge);xjo=r(ggt,"model.train()"),ggt.forEach(t),Rxe.forEach(t),$jo=i(ia),T(w4.$$.fragment,ia),ia.forEach(t),Us.forEach(t),LNe=i(f),Ji=n(f,"H2",{class:!0});var SDe=s(Ji);A4=n(SDe,"A",{id:!0,class:!0,href:!0});var hgt=s(A4);Dge=n(hgt,"SPAN",{});var pgt=s(Dge);T(jy.$$.fragment,pgt),pgt.forEach(t),hgt.forEach(t),kjo=i(SDe),Gge=n(SDe,"SPAN",{});var ugt=s(Gge);Sjo=r(ugt,"AutoModelForTokenClassification"),ugt.forEach(t),SDe.forEach(t),xNe=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(Dy.$$.fragment,Ys),Rjo=i(Ys),Yi=n(Ys,"P",{});var RZ=s(Yi);Pjo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=n(RZ,"A",{href:!0});var _gt=s(XO);Bjo=r(_gt,"from_pretrained()"),_gt.forEach(t),Ijo=r(RZ," class method or the "),zO=n(RZ,"A",{href:!0});var bgt=s(zO);qjo=r(bgt,"from_config()"),bgt.forEach(t),Njo=r(RZ,` class
method.`),RZ.forEach(t),jjo=i(Ys),Gy=n(Ys,"P",{});var RDe=s(Gy);Djo=r(RDe,"This class cannot be instantiated directly using "),Oge=n(RDe,"CODE",{});var vgt=s(Oge);Gjo=r(vgt,"__init__()"),vgt.forEach(t),Ojo=r(RDe," (throws an error)."),RDe.forEach(t),Vjo=i(Ys),ft=n(Ys,"DIV",{class:!0});var Q0=s(ft);T(Oy.$$.fragment,Q0),Xjo=i(Q0),Vge=n(Q0,"P",{});var Fgt=s(Vge);zjo=r(Fgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fgt.forEach(t),Wjo=i(Q0),Ki=n(Q0,"P",{});var PZ=s(Ki);Qjo=r(PZ,`Note:
Loading a model from its configuration file does `),Xge=n(PZ,"STRONG",{});var Tgt=s(Xge);Hjo=r(Tgt,"not"),Tgt.forEach(t),Ujo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(PZ,"A",{href:!0});var Mgt=s(WO);Jjo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),Yjo=r(PZ," to load the model weights."),PZ.forEach(t),Kjo=i(Q0),T(y4.$$.fragment,Q0),Q0.forEach(t),Zjo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(Vy.$$.fragment,da),eDo=i(da),zge=n(da,"P",{});var Egt=s(zge);oDo=r(Egt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Egt.forEach(t),rDo=i(da),Ia=n(da,"P",{});var H0=s(Ia);tDo=r(H0,"The model class to instantiate is selected based on the "),Wge=n(H0,"CODE",{});var Cgt=s(Wge);aDo=r(Cgt,"model_type"),Cgt.forEach(t),nDo=r(H0,` property of the config object (either
passed as an argument or loaded from `),Qge=n(H0,"CODE",{});var wgt=s(Qge);sDo=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),lDo=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=n(H0,"CODE",{});var Agt=s(Hge);iDo=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),dDo=r(H0,":"),H0.forEach(t),cDo=i(da),H=n(da,"UL",{});var J=s(H);L4=n(J,"LI",{});var Pxe=s(L4);Uge=n(Pxe,"STRONG",{});var ygt=s(Uge);fDo=r(ygt,"albert"),ygt.forEach(t),mDo=r(Pxe," \u2014 "),QO=n(Pxe,"A",{href:!0});var Lgt=s(QO);gDo=r(Lgt,"AlbertForTokenClassification"),Lgt.forEach(t),hDo=r(Pxe," (ALBERT model)"),Pxe.forEach(t),pDo=i(J),x4=n(J,"LI",{});var Bxe=s(x4);Jge=n(Bxe,"STRONG",{});var xgt=s(Jge);uDo=r(xgt,"bert"),xgt.forEach(t),_Do=r(Bxe," \u2014 "),HO=n(Bxe,"A",{href:!0});var $gt=s(HO);bDo=r($gt,"BertForTokenClassification"),$gt.forEach(t),vDo=r(Bxe," (BERT model)"),Bxe.forEach(t),FDo=i(J),$4=n(J,"LI",{});var Ixe=s($4);Yge=n(Ixe,"STRONG",{});var kgt=s(Yge);TDo=r(kgt,"big_bird"),kgt.forEach(t),MDo=r(Ixe," \u2014 "),UO=n(Ixe,"A",{href:!0});var Sgt=s(UO);EDo=r(Sgt,"BigBirdForTokenClassification"),Sgt.forEach(t),CDo=r(Ixe," (BigBird model)"),Ixe.forEach(t),wDo=i(J),k4=n(J,"LI",{});var qxe=s(k4);Kge=n(qxe,"STRONG",{});var Rgt=s(Kge);ADo=r(Rgt,"camembert"),Rgt.forEach(t),yDo=r(qxe," \u2014 "),JO=n(qxe,"A",{href:!0});var Pgt=s(JO);LDo=r(Pgt,"CamembertForTokenClassification"),Pgt.forEach(t),xDo=r(qxe," (CamemBERT model)"),qxe.forEach(t),$Do=i(J),S4=n(J,"LI",{});var Nxe=s(S4);Zge=n(Nxe,"STRONG",{});var Bgt=s(Zge);kDo=r(Bgt,"canine"),Bgt.forEach(t),SDo=r(Nxe," \u2014 "),YO=n(Nxe,"A",{href:!0});var Igt=s(YO);RDo=r(Igt,"CanineForTokenClassification"),Igt.forEach(t),PDo=r(Nxe," (Canine model)"),Nxe.forEach(t),BDo=i(J),R4=n(J,"LI",{});var jxe=s(R4);ehe=n(jxe,"STRONG",{});var qgt=s(ehe);IDo=r(qgt,"convbert"),qgt.forEach(t),qDo=r(jxe," \u2014 "),KO=n(jxe,"A",{href:!0});var Ngt=s(KO);NDo=r(Ngt,"ConvBertForTokenClassification"),Ngt.forEach(t),jDo=r(jxe," (ConvBERT model)"),jxe.forEach(t),DDo=i(J),P4=n(J,"LI",{});var Dxe=s(P4);ohe=n(Dxe,"STRONG",{});var jgt=s(ohe);GDo=r(jgt,"data2vec-text"),jgt.forEach(t),ODo=r(Dxe," \u2014 "),ZO=n(Dxe,"A",{href:!0});var Dgt=s(ZO);VDo=r(Dgt,"Data2VecTextForTokenClassification"),Dgt.forEach(t),XDo=r(Dxe," (Data2VecText model)"),Dxe.forEach(t),zDo=i(J),B4=n(J,"LI",{});var Gxe=s(B4);rhe=n(Gxe,"STRONG",{});var Ggt=s(rhe);WDo=r(Ggt,"deberta"),Ggt.forEach(t),QDo=r(Gxe," \u2014 "),eV=n(Gxe,"A",{href:!0});var Ogt=s(eV);HDo=r(Ogt,"DebertaForTokenClassification"),Ogt.forEach(t),UDo=r(Gxe," (DeBERTa model)"),Gxe.forEach(t),JDo=i(J),I4=n(J,"LI",{});var Oxe=s(I4);the=n(Oxe,"STRONG",{});var Vgt=s(the);YDo=r(Vgt,"deberta-v2"),Vgt.forEach(t),KDo=r(Oxe," \u2014 "),oV=n(Oxe,"A",{href:!0});var Xgt=s(oV);ZDo=r(Xgt,"DebertaV2ForTokenClassification"),Xgt.forEach(t),eGo=r(Oxe," (DeBERTa-v2 model)"),Oxe.forEach(t),oGo=i(J),q4=n(J,"LI",{});var Vxe=s(q4);ahe=n(Vxe,"STRONG",{});var zgt=s(ahe);rGo=r(zgt,"distilbert"),zgt.forEach(t),tGo=r(Vxe," \u2014 "),rV=n(Vxe,"A",{href:!0});var Wgt=s(rV);aGo=r(Wgt,"DistilBertForTokenClassification"),Wgt.forEach(t),nGo=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),sGo=i(J),N4=n(J,"LI",{});var Xxe=s(N4);nhe=n(Xxe,"STRONG",{});var Qgt=s(nhe);lGo=r(Qgt,"electra"),Qgt.forEach(t),iGo=r(Xxe," \u2014 "),tV=n(Xxe,"A",{href:!0});var Hgt=s(tV);dGo=r(Hgt,"ElectraForTokenClassification"),Hgt.forEach(t),cGo=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),fGo=i(J),j4=n(J,"LI",{});var zxe=s(j4);she=n(zxe,"STRONG",{});var Ugt=s(she);mGo=r(Ugt,"flaubert"),Ugt.forEach(t),gGo=r(zxe," \u2014 "),aV=n(zxe,"A",{href:!0});var Jgt=s(aV);hGo=r(Jgt,"FlaubertForTokenClassification"),Jgt.forEach(t),pGo=r(zxe," (FlauBERT model)"),zxe.forEach(t),uGo=i(J),D4=n(J,"LI",{});var Wxe=s(D4);lhe=n(Wxe,"STRONG",{});var Ygt=s(lhe);_Go=r(Ygt,"fnet"),Ygt.forEach(t),bGo=r(Wxe," \u2014 "),nV=n(Wxe,"A",{href:!0});var Kgt=s(nV);vGo=r(Kgt,"FNetForTokenClassification"),Kgt.forEach(t),FGo=r(Wxe," (FNet model)"),Wxe.forEach(t),TGo=i(J),G4=n(J,"LI",{});var Qxe=s(G4);ihe=n(Qxe,"STRONG",{});var Zgt=s(ihe);MGo=r(Zgt,"funnel"),Zgt.forEach(t),EGo=r(Qxe," \u2014 "),sV=n(Qxe,"A",{href:!0});var eht=s(sV);CGo=r(eht,"FunnelForTokenClassification"),eht.forEach(t),wGo=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),AGo=i(J),O4=n(J,"LI",{});var Hxe=s(O4);dhe=n(Hxe,"STRONG",{});var oht=s(dhe);yGo=r(oht,"gpt2"),oht.forEach(t),LGo=r(Hxe," \u2014 "),lV=n(Hxe,"A",{href:!0});var rht=s(lV);xGo=r(rht,"GPT2ForTokenClassification"),rht.forEach(t),$Go=r(Hxe," (OpenAI GPT-2 model)"),Hxe.forEach(t),kGo=i(J),V4=n(J,"LI",{});var Uxe=s(V4);che=n(Uxe,"STRONG",{});var tht=s(che);SGo=r(tht,"ibert"),tht.forEach(t),RGo=r(Uxe," \u2014 "),iV=n(Uxe,"A",{href:!0});var aht=s(iV);PGo=r(aht,"IBertForTokenClassification"),aht.forEach(t),BGo=r(Uxe," (I-BERT model)"),Uxe.forEach(t),IGo=i(J),X4=n(J,"LI",{});var Jxe=s(X4);fhe=n(Jxe,"STRONG",{});var nht=s(fhe);qGo=r(nht,"layoutlm"),nht.forEach(t),NGo=r(Jxe," \u2014 "),dV=n(Jxe,"A",{href:!0});var sht=s(dV);jGo=r(sht,"LayoutLMForTokenClassification"),sht.forEach(t),DGo=r(Jxe," (LayoutLM model)"),Jxe.forEach(t),GGo=i(J),z4=n(J,"LI",{});var Yxe=s(z4);mhe=n(Yxe,"STRONG",{});var lht=s(mhe);OGo=r(lht,"layoutlmv2"),lht.forEach(t),VGo=r(Yxe," \u2014 "),cV=n(Yxe,"A",{href:!0});var iht=s(cV);XGo=r(iht,"LayoutLMv2ForTokenClassification"),iht.forEach(t),zGo=r(Yxe," (LayoutLMv2 model)"),Yxe.forEach(t),WGo=i(J),W4=n(J,"LI",{});var Kxe=s(W4);ghe=n(Kxe,"STRONG",{});var dht=s(ghe);QGo=r(dht,"layoutlmv3"),dht.forEach(t),HGo=r(Kxe," \u2014 "),fV=n(Kxe,"A",{href:!0});var cht=s(fV);UGo=r(cht,"LayoutLMv3ForTokenClassification"),cht.forEach(t),JGo=r(Kxe," (LayoutLMv3 model)"),Kxe.forEach(t),YGo=i(J),Q4=n(J,"LI",{});var Zxe=s(Q4);hhe=n(Zxe,"STRONG",{});var fht=s(hhe);KGo=r(fht,"longformer"),fht.forEach(t),ZGo=r(Zxe," \u2014 "),mV=n(Zxe,"A",{href:!0});var mht=s(mV);eOo=r(mht,"LongformerForTokenClassification"),mht.forEach(t),oOo=r(Zxe," (Longformer model)"),Zxe.forEach(t),rOo=i(J),H4=n(J,"LI",{});var e$e=s(H4);phe=n(e$e,"STRONG",{});var ght=s(phe);tOo=r(ght,"megatron-bert"),ght.forEach(t),aOo=r(e$e," \u2014 "),gV=n(e$e,"A",{href:!0});var hht=s(gV);nOo=r(hht,"MegatronBertForTokenClassification"),hht.forEach(t),sOo=r(e$e," (MegatronBert model)"),e$e.forEach(t),lOo=i(J),U4=n(J,"LI",{});var o$e=s(U4);uhe=n(o$e,"STRONG",{});var pht=s(uhe);iOo=r(pht,"mobilebert"),pht.forEach(t),dOo=r(o$e," \u2014 "),hV=n(o$e,"A",{href:!0});var uht=s(hV);cOo=r(uht,"MobileBertForTokenClassification"),uht.forEach(t),fOo=r(o$e," (MobileBERT model)"),o$e.forEach(t),mOo=i(J),J4=n(J,"LI",{});var r$e=s(J4);_he=n(r$e,"STRONG",{});var _ht=s(_he);gOo=r(_ht,"mpnet"),_ht.forEach(t),hOo=r(r$e," \u2014 "),pV=n(r$e,"A",{href:!0});var bht=s(pV);pOo=r(bht,"MPNetForTokenClassification"),bht.forEach(t),uOo=r(r$e," (MPNet model)"),r$e.forEach(t),_Oo=i(J),Y4=n(J,"LI",{});var t$e=s(Y4);bhe=n(t$e,"STRONG",{});var vht=s(bhe);bOo=r(vht,"nystromformer"),vht.forEach(t),vOo=r(t$e," \u2014 "),uV=n(t$e,"A",{href:!0});var Fht=s(uV);FOo=r(Fht,"NystromformerForTokenClassification"),Fht.forEach(t),TOo=r(t$e," (Nystromformer model)"),t$e.forEach(t),MOo=i(J),K4=n(J,"LI",{});var a$e=s(K4);vhe=n(a$e,"STRONG",{});var Tht=s(vhe);EOo=r(Tht,"qdqbert"),Tht.forEach(t),COo=r(a$e," \u2014 "),_V=n(a$e,"A",{href:!0});var Mht=s(_V);wOo=r(Mht,"QDQBertForTokenClassification"),Mht.forEach(t),AOo=r(a$e," (QDQBert model)"),a$e.forEach(t),yOo=i(J),Z4=n(J,"LI",{});var n$e=s(Z4);Fhe=n(n$e,"STRONG",{});var Eht=s(Fhe);LOo=r(Eht,"rembert"),Eht.forEach(t),xOo=r(n$e," \u2014 "),bV=n(n$e,"A",{href:!0});var Cht=s(bV);$Oo=r(Cht,"RemBertForTokenClassification"),Cht.forEach(t),kOo=r(n$e," (RemBERT model)"),n$e.forEach(t),SOo=i(J),ev=n(J,"LI",{});var s$e=s(ev);The=n(s$e,"STRONG",{});var wht=s(The);ROo=r(wht,"roberta"),wht.forEach(t),POo=r(s$e," \u2014 "),vV=n(s$e,"A",{href:!0});var Aht=s(vV);BOo=r(Aht,"RobertaForTokenClassification"),Aht.forEach(t),IOo=r(s$e," (RoBERTa model)"),s$e.forEach(t),qOo=i(J),ov=n(J,"LI",{});var l$e=s(ov);Mhe=n(l$e,"STRONG",{});var yht=s(Mhe);NOo=r(yht,"roformer"),yht.forEach(t),jOo=r(l$e," \u2014 "),FV=n(l$e,"A",{href:!0});var Lht=s(FV);DOo=r(Lht,"RoFormerForTokenClassification"),Lht.forEach(t),GOo=r(l$e," (RoFormer model)"),l$e.forEach(t),OOo=i(J),rv=n(J,"LI",{});var i$e=s(rv);Ehe=n(i$e,"STRONG",{});var xht=s(Ehe);VOo=r(xht,"squeezebert"),xht.forEach(t),XOo=r(i$e," \u2014 "),TV=n(i$e,"A",{href:!0});var $ht=s(TV);zOo=r($ht,"SqueezeBertForTokenClassification"),$ht.forEach(t),WOo=r(i$e," (SqueezeBERT model)"),i$e.forEach(t),QOo=i(J),tv=n(J,"LI",{});var d$e=s(tv);Che=n(d$e,"STRONG",{});var kht=s(Che);HOo=r(kht,"xlm"),kht.forEach(t),UOo=r(d$e," \u2014 "),MV=n(d$e,"A",{href:!0});var Sht=s(MV);JOo=r(Sht,"XLMForTokenClassification"),Sht.forEach(t),YOo=r(d$e," (XLM model)"),d$e.forEach(t),KOo=i(J),av=n(J,"LI",{});var c$e=s(av);whe=n(c$e,"STRONG",{});var Rht=s(whe);ZOo=r(Rht,"xlm-roberta"),Rht.forEach(t),eVo=r(c$e," \u2014 "),EV=n(c$e,"A",{href:!0});var Pht=s(EV);oVo=r(Pht,"XLMRobertaForTokenClassification"),Pht.forEach(t),rVo=r(c$e," (XLM-RoBERTa model)"),c$e.forEach(t),tVo=i(J),nv=n(J,"LI",{});var f$e=s(nv);Ahe=n(f$e,"STRONG",{});var Bht=s(Ahe);aVo=r(Bht,"xlm-roberta-xl"),Bht.forEach(t),nVo=r(f$e," \u2014 "),CV=n(f$e,"A",{href:!0});var Iht=s(CV);sVo=r(Iht,"XLMRobertaXLForTokenClassification"),Iht.forEach(t),lVo=r(f$e," (XLM-RoBERTa-XL model)"),f$e.forEach(t),iVo=i(J),sv=n(J,"LI",{});var m$e=s(sv);yhe=n(m$e,"STRONG",{});var qht=s(yhe);dVo=r(qht,"xlnet"),qht.forEach(t),cVo=r(m$e," \u2014 "),wV=n(m$e,"A",{href:!0});var Nht=s(wV);fVo=r(Nht,"XLNetForTokenClassification"),Nht.forEach(t),mVo=r(m$e," (XLNet model)"),m$e.forEach(t),gVo=i(J),lv=n(J,"LI",{});var g$e=s(lv);Lhe=n(g$e,"STRONG",{});var jht=s(Lhe);hVo=r(jht,"yoso"),jht.forEach(t),pVo=r(g$e," \u2014 "),AV=n(g$e,"A",{href:!0});var Dht=s(AV);uVo=r(Dht,"YosoForTokenClassification"),Dht.forEach(t),_Vo=r(g$e," (YOSO model)"),g$e.forEach(t),J.forEach(t),bVo=i(da),iv=n(da,"P",{});var h$e=s(iv);vVo=r(h$e,"The model is set in evaluation mode by default using "),xhe=n(h$e,"CODE",{});var Ght=s(xhe);FVo=r(Ght,"model.eval()"),Ght.forEach(t),TVo=r(h$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(h$e,"CODE",{});var Oht=s($he);MVo=r(Oht,"model.train()"),Oht.forEach(t),h$e.forEach(t),EVo=i(da),T(dv.$$.fragment,da),da.forEach(t),Ys.forEach(t),$Ne=i(f),Zi=n(f,"H2",{class:!0});var PDe=s(Zi);cv=n(PDe,"A",{id:!0,class:!0,href:!0});var Vht=s(cv);khe=n(Vht,"SPAN",{});var Xht=s(khe);T(Xy.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),CVo=i(PDe),She=n(PDe,"SPAN",{});var zht=s(She);wVo=r(zht,"AutoModelForQuestionAnswering"),zht.forEach(t),PDe.forEach(t),kNe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(zy.$$.fragment,Ks),AVo=i(Ks),ed=n(Ks,"P",{});var BZ=s(ed);yVo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=n(BZ,"A",{href:!0});var Wht=s(yV);LVo=r(Wht,"from_pretrained()"),Wht.forEach(t),xVo=r(BZ," class method or the "),LV=n(BZ,"A",{href:!0});var Qht=s(LV);$Vo=r(Qht,"from_config()"),Qht.forEach(t),kVo=r(BZ,` class
method.`),BZ.forEach(t),SVo=i(Ks),Wy=n(Ks,"P",{});var BDe=s(Wy);RVo=r(BDe,"This class cannot be instantiated directly using "),Rhe=n(BDe,"CODE",{});var Hht=s(Rhe);PVo=r(Hht,"__init__()"),Hht.forEach(t),BVo=r(BDe," (throws an error)."),BDe.forEach(t),IVo=i(Ks),mt=n(Ks,"DIV",{class:!0});var U0=s(mt);T(Qy.$$.fragment,U0),qVo=i(U0),Phe=n(U0,"P",{});var Uht=s(Phe);NVo=r(Uht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Uht.forEach(t),jVo=i(U0),od=n(U0,"P",{});var IZ=s(od);DVo=r(IZ,`Note:
Loading a model from its configuration file does `),Bhe=n(IZ,"STRONG",{});var Jht=s(Bhe);GVo=r(Jht,"not"),Jht.forEach(t),OVo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(IZ,"A",{href:!0});var Yht=s(xV);VVo=r(Yht,"from_pretrained()"),Yht.forEach(t),XVo=r(IZ," to load the model weights."),IZ.forEach(t),zVo=i(U0),T(fv.$$.fragment,U0),U0.forEach(t),WVo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(Hy.$$.fragment,ca),QVo=i(ca),Ihe=n(ca,"P",{});var Kht=s(Ihe);HVo=r(Kht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kht.forEach(t),UVo=i(ca),qa=n(ca,"P",{});var J0=s(qa);JVo=r(J0,"The model class to instantiate is selected based on the "),qhe=n(J0,"CODE",{});var Zht=s(qhe);YVo=r(Zht,"model_type"),Zht.forEach(t),KVo=r(J0,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(J0,"CODE",{});var ept=s(Nhe);ZVo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),eXo=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(J0,"CODE",{});var opt=s(jhe);oXo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),rXo=r(J0,":"),J0.forEach(t),tXo=i(ca),V=n(ca,"UL",{});var X=s(V);mv=n(X,"LI",{});var p$e=s(mv);Dhe=n(p$e,"STRONG",{});var rpt=s(Dhe);aXo=r(rpt,"albert"),rpt.forEach(t),nXo=r(p$e," \u2014 "),$V=n(p$e,"A",{href:!0});var tpt=s($V);sXo=r(tpt,"AlbertForQuestionAnswering"),tpt.forEach(t),lXo=r(p$e," (ALBERT model)"),p$e.forEach(t),iXo=i(X),gv=n(X,"LI",{});var u$e=s(gv);Ghe=n(u$e,"STRONG",{});var apt=s(Ghe);dXo=r(apt,"bart"),apt.forEach(t),cXo=r(u$e," \u2014 "),kV=n(u$e,"A",{href:!0});var npt=s(kV);fXo=r(npt,"BartForQuestionAnswering"),npt.forEach(t),mXo=r(u$e," (BART model)"),u$e.forEach(t),gXo=i(X),hv=n(X,"LI",{});var _$e=s(hv);Ohe=n(_$e,"STRONG",{});var spt=s(Ohe);hXo=r(spt,"bert"),spt.forEach(t),pXo=r(_$e," \u2014 "),SV=n(_$e,"A",{href:!0});var lpt=s(SV);uXo=r(lpt,"BertForQuestionAnswering"),lpt.forEach(t),_Xo=r(_$e," (BERT model)"),_$e.forEach(t),bXo=i(X),pv=n(X,"LI",{});var b$e=s(pv);Vhe=n(b$e,"STRONG",{});var ipt=s(Vhe);vXo=r(ipt,"big_bird"),ipt.forEach(t),FXo=r(b$e," \u2014 "),RV=n(b$e,"A",{href:!0});var dpt=s(RV);TXo=r(dpt,"BigBirdForQuestionAnswering"),dpt.forEach(t),MXo=r(b$e," (BigBird model)"),b$e.forEach(t),EXo=i(X),uv=n(X,"LI",{});var v$e=s(uv);Xhe=n(v$e,"STRONG",{});var cpt=s(Xhe);CXo=r(cpt,"bigbird_pegasus"),cpt.forEach(t),wXo=r(v$e," \u2014 "),PV=n(v$e,"A",{href:!0});var fpt=s(PV);AXo=r(fpt,"BigBirdPegasusForQuestionAnswering"),fpt.forEach(t),yXo=r(v$e," (BigBirdPegasus model)"),v$e.forEach(t),LXo=i(X),_v=n(X,"LI",{});var F$e=s(_v);zhe=n(F$e,"STRONG",{});var mpt=s(zhe);xXo=r(mpt,"camembert"),mpt.forEach(t),$Xo=r(F$e," \u2014 "),BV=n(F$e,"A",{href:!0});var gpt=s(BV);kXo=r(gpt,"CamembertForQuestionAnswering"),gpt.forEach(t),SXo=r(F$e," (CamemBERT model)"),F$e.forEach(t),RXo=i(X),bv=n(X,"LI",{});var T$e=s(bv);Whe=n(T$e,"STRONG",{});var hpt=s(Whe);PXo=r(hpt,"canine"),hpt.forEach(t),BXo=r(T$e," \u2014 "),IV=n(T$e,"A",{href:!0});var ppt=s(IV);IXo=r(ppt,"CanineForQuestionAnswering"),ppt.forEach(t),qXo=r(T$e," (Canine model)"),T$e.forEach(t),NXo=i(X),vv=n(X,"LI",{});var M$e=s(vv);Qhe=n(M$e,"STRONG",{});var upt=s(Qhe);jXo=r(upt,"convbert"),upt.forEach(t),DXo=r(M$e," \u2014 "),qV=n(M$e,"A",{href:!0});var _pt=s(qV);GXo=r(_pt,"ConvBertForQuestionAnswering"),_pt.forEach(t),OXo=r(M$e," (ConvBERT model)"),M$e.forEach(t),VXo=i(X),Fv=n(X,"LI",{});var E$e=s(Fv);Hhe=n(E$e,"STRONG",{});var bpt=s(Hhe);XXo=r(bpt,"data2vec-text"),bpt.forEach(t),zXo=r(E$e," \u2014 "),NV=n(E$e,"A",{href:!0});var vpt=s(NV);WXo=r(vpt,"Data2VecTextForQuestionAnswering"),vpt.forEach(t),QXo=r(E$e," (Data2VecText model)"),E$e.forEach(t),HXo=i(X),Tv=n(X,"LI",{});var C$e=s(Tv);Uhe=n(C$e,"STRONG",{});var Fpt=s(Uhe);UXo=r(Fpt,"deberta"),Fpt.forEach(t),JXo=r(C$e," \u2014 "),jV=n(C$e,"A",{href:!0});var Tpt=s(jV);YXo=r(Tpt,"DebertaForQuestionAnswering"),Tpt.forEach(t),KXo=r(C$e," (DeBERTa model)"),C$e.forEach(t),ZXo=i(X),Mv=n(X,"LI",{});var w$e=s(Mv);Jhe=n(w$e,"STRONG",{});var Mpt=s(Jhe);ezo=r(Mpt,"deberta-v2"),Mpt.forEach(t),ozo=r(w$e," \u2014 "),DV=n(w$e,"A",{href:!0});var Ept=s(DV);rzo=r(Ept,"DebertaV2ForQuestionAnswering"),Ept.forEach(t),tzo=r(w$e," (DeBERTa-v2 model)"),w$e.forEach(t),azo=i(X),Ev=n(X,"LI",{});var A$e=s(Ev);Yhe=n(A$e,"STRONG",{});var Cpt=s(Yhe);nzo=r(Cpt,"distilbert"),Cpt.forEach(t),szo=r(A$e," \u2014 "),GV=n(A$e,"A",{href:!0});var wpt=s(GV);lzo=r(wpt,"DistilBertForQuestionAnswering"),wpt.forEach(t),izo=r(A$e," (DistilBERT model)"),A$e.forEach(t),dzo=i(X),Cv=n(X,"LI",{});var y$e=s(Cv);Khe=n(y$e,"STRONG",{});var Apt=s(Khe);czo=r(Apt,"electra"),Apt.forEach(t),fzo=r(y$e," \u2014 "),OV=n(y$e,"A",{href:!0});var ypt=s(OV);mzo=r(ypt,"ElectraForQuestionAnswering"),ypt.forEach(t),gzo=r(y$e," (ELECTRA model)"),y$e.forEach(t),hzo=i(X),wv=n(X,"LI",{});var L$e=s(wv);Zhe=n(L$e,"STRONG",{});var Lpt=s(Zhe);pzo=r(Lpt,"flaubert"),Lpt.forEach(t),uzo=r(L$e," \u2014 "),VV=n(L$e,"A",{href:!0});var xpt=s(VV);_zo=r(xpt,"FlaubertForQuestionAnsweringSimple"),xpt.forEach(t),bzo=r(L$e," (FlauBERT model)"),L$e.forEach(t),vzo=i(X),Av=n(X,"LI",{});var x$e=s(Av);epe=n(x$e,"STRONG",{});var $pt=s(epe);Fzo=r($pt,"fnet"),$pt.forEach(t),Tzo=r(x$e," \u2014 "),XV=n(x$e,"A",{href:!0});var kpt=s(XV);Mzo=r(kpt,"FNetForQuestionAnswering"),kpt.forEach(t),Ezo=r(x$e," (FNet model)"),x$e.forEach(t),Czo=i(X),yv=n(X,"LI",{});var $$e=s(yv);ope=n($$e,"STRONG",{});var Spt=s(ope);wzo=r(Spt,"funnel"),Spt.forEach(t),Azo=r($$e," \u2014 "),zV=n($$e,"A",{href:!0});var Rpt=s(zV);yzo=r(Rpt,"FunnelForQuestionAnswering"),Rpt.forEach(t),Lzo=r($$e," (Funnel Transformer model)"),$$e.forEach(t),xzo=i(X),Lv=n(X,"LI",{});var k$e=s(Lv);rpe=n(k$e,"STRONG",{});var Ppt=s(rpe);$zo=r(Ppt,"gptj"),Ppt.forEach(t),kzo=r(k$e," \u2014 "),WV=n(k$e,"A",{href:!0});var Bpt=s(WV);Szo=r(Bpt,"GPTJForQuestionAnswering"),Bpt.forEach(t),Rzo=r(k$e," (GPT-J model)"),k$e.forEach(t),Pzo=i(X),xv=n(X,"LI",{});var S$e=s(xv);tpe=n(S$e,"STRONG",{});var Ipt=s(tpe);Bzo=r(Ipt,"ibert"),Ipt.forEach(t),Izo=r(S$e," \u2014 "),QV=n(S$e,"A",{href:!0});var qpt=s(QV);qzo=r(qpt,"IBertForQuestionAnswering"),qpt.forEach(t),Nzo=r(S$e," (I-BERT model)"),S$e.forEach(t),jzo=i(X),$v=n(X,"LI",{});var R$e=s($v);ape=n(R$e,"STRONG",{});var Npt=s(ape);Dzo=r(Npt,"layoutlmv2"),Npt.forEach(t),Gzo=r(R$e," \u2014 "),HV=n(R$e,"A",{href:!0});var jpt=s(HV);Ozo=r(jpt,"LayoutLMv2ForQuestionAnswering"),jpt.forEach(t),Vzo=r(R$e," (LayoutLMv2 model)"),R$e.forEach(t),Xzo=i(X),kv=n(X,"LI",{});var P$e=s(kv);npe=n(P$e,"STRONG",{});var Dpt=s(npe);zzo=r(Dpt,"layoutlmv3"),Dpt.forEach(t),Wzo=r(P$e," \u2014 "),UV=n(P$e,"A",{href:!0});var Gpt=s(UV);Qzo=r(Gpt,"LayoutLMv3ForQuestionAnswering"),Gpt.forEach(t),Hzo=r(P$e," (LayoutLMv3 model)"),P$e.forEach(t),Uzo=i(X),Sv=n(X,"LI",{});var B$e=s(Sv);spe=n(B$e,"STRONG",{});var Opt=s(spe);Jzo=r(Opt,"led"),Opt.forEach(t),Yzo=r(B$e," \u2014 "),JV=n(B$e,"A",{href:!0});var Vpt=s(JV);Kzo=r(Vpt,"LEDForQuestionAnswering"),Vpt.forEach(t),Zzo=r(B$e," (LED model)"),B$e.forEach(t),eWo=i(X),Rv=n(X,"LI",{});var I$e=s(Rv);lpe=n(I$e,"STRONG",{});var Xpt=s(lpe);oWo=r(Xpt,"longformer"),Xpt.forEach(t),rWo=r(I$e," \u2014 "),YV=n(I$e,"A",{href:!0});var zpt=s(YV);tWo=r(zpt,"LongformerForQuestionAnswering"),zpt.forEach(t),aWo=r(I$e," (Longformer model)"),I$e.forEach(t),nWo=i(X),Pv=n(X,"LI",{});var q$e=s(Pv);ipe=n(q$e,"STRONG",{});var Wpt=s(ipe);sWo=r(Wpt,"lxmert"),Wpt.forEach(t),lWo=r(q$e," \u2014 "),KV=n(q$e,"A",{href:!0});var Qpt=s(KV);iWo=r(Qpt,"LxmertForQuestionAnswering"),Qpt.forEach(t),dWo=r(q$e," (LXMERT model)"),q$e.forEach(t),cWo=i(X),Bv=n(X,"LI",{});var N$e=s(Bv);dpe=n(N$e,"STRONG",{});var Hpt=s(dpe);fWo=r(Hpt,"mbart"),Hpt.forEach(t),mWo=r(N$e," \u2014 "),ZV=n(N$e,"A",{href:!0});var Upt=s(ZV);gWo=r(Upt,"MBartForQuestionAnswering"),Upt.forEach(t),hWo=r(N$e," (mBART model)"),N$e.forEach(t),pWo=i(X),Iv=n(X,"LI",{});var j$e=s(Iv);cpe=n(j$e,"STRONG",{});var Jpt=s(cpe);uWo=r(Jpt,"megatron-bert"),Jpt.forEach(t),_Wo=r(j$e," \u2014 "),eX=n(j$e,"A",{href:!0});var Ypt=s(eX);bWo=r(Ypt,"MegatronBertForQuestionAnswering"),Ypt.forEach(t),vWo=r(j$e," (MegatronBert model)"),j$e.forEach(t),FWo=i(X),qv=n(X,"LI",{});var D$e=s(qv);fpe=n(D$e,"STRONG",{});var Kpt=s(fpe);TWo=r(Kpt,"mobilebert"),Kpt.forEach(t),MWo=r(D$e," \u2014 "),oX=n(D$e,"A",{href:!0});var Zpt=s(oX);EWo=r(Zpt,"MobileBertForQuestionAnswering"),Zpt.forEach(t),CWo=r(D$e," (MobileBERT model)"),D$e.forEach(t),wWo=i(X),Nv=n(X,"LI",{});var G$e=s(Nv);mpe=n(G$e,"STRONG",{});var eut=s(mpe);AWo=r(eut,"mpnet"),eut.forEach(t),yWo=r(G$e," \u2014 "),rX=n(G$e,"A",{href:!0});var out=s(rX);LWo=r(out,"MPNetForQuestionAnswering"),out.forEach(t),xWo=r(G$e," (MPNet model)"),G$e.forEach(t),$Wo=i(X),jv=n(X,"LI",{});var O$e=s(jv);gpe=n(O$e,"STRONG",{});var rut=s(gpe);kWo=r(rut,"nystromformer"),rut.forEach(t),SWo=r(O$e," \u2014 "),tX=n(O$e,"A",{href:!0});var tut=s(tX);RWo=r(tut,"NystromformerForQuestionAnswering"),tut.forEach(t),PWo=r(O$e," (Nystromformer model)"),O$e.forEach(t),BWo=i(X),Dv=n(X,"LI",{});var V$e=s(Dv);hpe=n(V$e,"STRONG",{});var aut=s(hpe);IWo=r(aut,"qdqbert"),aut.forEach(t),qWo=r(V$e," \u2014 "),aX=n(V$e,"A",{href:!0});var nut=s(aX);NWo=r(nut,"QDQBertForQuestionAnswering"),nut.forEach(t),jWo=r(V$e," (QDQBert model)"),V$e.forEach(t),DWo=i(X),Gv=n(X,"LI",{});var X$e=s(Gv);ppe=n(X$e,"STRONG",{});var sut=s(ppe);GWo=r(sut,"reformer"),sut.forEach(t),OWo=r(X$e," \u2014 "),nX=n(X$e,"A",{href:!0});var lut=s(nX);VWo=r(lut,"ReformerForQuestionAnswering"),lut.forEach(t),XWo=r(X$e," (Reformer model)"),X$e.forEach(t),zWo=i(X),Ov=n(X,"LI",{});var z$e=s(Ov);upe=n(z$e,"STRONG",{});var iut=s(upe);WWo=r(iut,"rembert"),iut.forEach(t),QWo=r(z$e," \u2014 "),sX=n(z$e,"A",{href:!0});var dut=s(sX);HWo=r(dut,"RemBertForQuestionAnswering"),dut.forEach(t),UWo=r(z$e," (RemBERT model)"),z$e.forEach(t),JWo=i(X),Vv=n(X,"LI",{});var W$e=s(Vv);_pe=n(W$e,"STRONG",{});var cut=s(_pe);YWo=r(cut,"roberta"),cut.forEach(t),KWo=r(W$e," \u2014 "),lX=n(W$e,"A",{href:!0});var fut=s(lX);ZWo=r(fut,"RobertaForQuestionAnswering"),fut.forEach(t),eQo=r(W$e," (RoBERTa model)"),W$e.forEach(t),oQo=i(X),Xv=n(X,"LI",{});var Q$e=s(Xv);bpe=n(Q$e,"STRONG",{});var mut=s(bpe);rQo=r(mut,"roformer"),mut.forEach(t),tQo=r(Q$e," \u2014 "),iX=n(Q$e,"A",{href:!0});var gut=s(iX);aQo=r(gut,"RoFormerForQuestionAnswering"),gut.forEach(t),nQo=r(Q$e," (RoFormer model)"),Q$e.forEach(t),sQo=i(X),zv=n(X,"LI",{});var H$e=s(zv);vpe=n(H$e,"STRONG",{});var hut=s(vpe);lQo=r(hut,"splinter"),hut.forEach(t),iQo=r(H$e," \u2014 "),dX=n(H$e,"A",{href:!0});var put=s(dX);dQo=r(put,"SplinterForQuestionAnswering"),put.forEach(t),cQo=r(H$e," (Splinter model)"),H$e.forEach(t),fQo=i(X),Wv=n(X,"LI",{});var U$e=s(Wv);Fpe=n(U$e,"STRONG",{});var uut=s(Fpe);mQo=r(uut,"squeezebert"),uut.forEach(t),gQo=r(U$e," \u2014 "),cX=n(U$e,"A",{href:!0});var _ut=s(cX);hQo=r(_ut,"SqueezeBertForQuestionAnswering"),_ut.forEach(t),pQo=r(U$e," (SqueezeBERT model)"),U$e.forEach(t),uQo=i(X),Qv=n(X,"LI",{});var J$e=s(Qv);Tpe=n(J$e,"STRONG",{});var but=s(Tpe);_Qo=r(but,"xlm"),but.forEach(t),bQo=r(J$e," \u2014 "),fX=n(J$e,"A",{href:!0});var vut=s(fX);vQo=r(vut,"XLMForQuestionAnsweringSimple"),vut.forEach(t),FQo=r(J$e," (XLM model)"),J$e.forEach(t),TQo=i(X),Hv=n(X,"LI",{});var Y$e=s(Hv);Mpe=n(Y$e,"STRONG",{});var Fut=s(Mpe);MQo=r(Fut,"xlm-roberta"),Fut.forEach(t),EQo=r(Y$e," \u2014 "),mX=n(Y$e,"A",{href:!0});var Tut=s(mX);CQo=r(Tut,"XLMRobertaForQuestionAnswering"),Tut.forEach(t),wQo=r(Y$e," (XLM-RoBERTa model)"),Y$e.forEach(t),AQo=i(X),Uv=n(X,"LI",{});var K$e=s(Uv);Epe=n(K$e,"STRONG",{});var Mut=s(Epe);yQo=r(Mut,"xlm-roberta-xl"),Mut.forEach(t),LQo=r(K$e," \u2014 "),gX=n(K$e,"A",{href:!0});var Eut=s(gX);xQo=r(Eut,"XLMRobertaXLForQuestionAnswering"),Eut.forEach(t),$Qo=r(K$e," (XLM-RoBERTa-XL model)"),K$e.forEach(t),kQo=i(X),Jv=n(X,"LI",{});var Z$e=s(Jv);Cpe=n(Z$e,"STRONG",{});var Cut=s(Cpe);SQo=r(Cut,"xlnet"),Cut.forEach(t),RQo=r(Z$e," \u2014 "),hX=n(Z$e,"A",{href:!0});var wut=s(hX);PQo=r(wut,"XLNetForQuestionAnsweringSimple"),wut.forEach(t),BQo=r(Z$e," (XLNet model)"),Z$e.forEach(t),IQo=i(X),Yv=n(X,"LI",{});var eke=s(Yv);wpe=n(eke,"STRONG",{});var Aut=s(wpe);qQo=r(Aut,"yoso"),Aut.forEach(t),NQo=r(eke," \u2014 "),pX=n(eke,"A",{href:!0});var yut=s(pX);jQo=r(yut,"YosoForQuestionAnswering"),yut.forEach(t),DQo=r(eke," (YOSO model)"),eke.forEach(t),X.forEach(t),GQo=i(ca),Kv=n(ca,"P",{});var oke=s(Kv);OQo=r(oke,"The model is set in evaluation mode by default using "),Ape=n(oke,"CODE",{});var Lut=s(Ape);VQo=r(Lut,"model.eval()"),Lut.forEach(t),XQo=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(oke,"CODE",{});var xut=s(ype);zQo=r(xut,"model.train()"),xut.forEach(t),oke.forEach(t),WQo=i(ca),T(Zv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),SNe=i(f),rd=n(f,"H2",{class:!0});var IDe=s(rd);e5=n(IDe,"A",{id:!0,class:!0,href:!0});var $ut=s(e5);Lpe=n($ut,"SPAN",{});var kut=s(Lpe);T(Uy.$$.fragment,kut),kut.forEach(t),$ut.forEach(t),QQo=i(IDe),xpe=n(IDe,"SPAN",{});var Sut=s(xpe);HQo=r(Sut,"AutoModelForTableQuestionAnswering"),Sut.forEach(t),IDe.forEach(t),RNe=i(f),No=n(f,"DIV",{class:!0});var Zs=s(No);T(Jy.$$.fragment,Zs),UQo=i(Zs),td=n(Zs,"P",{});var qZ=s(td);JQo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uX=n(qZ,"A",{href:!0});var Rut=s(uX);YQo=r(Rut,"from_pretrained()"),Rut.forEach(t),KQo=r(qZ," class method or the "),_X=n(qZ,"A",{href:!0});var Put=s(_X);ZQo=r(Put,"from_config()"),Put.forEach(t),eHo=r(qZ,` class
method.`),qZ.forEach(t),oHo=i(Zs),Yy=n(Zs,"P",{});var qDe=s(Yy);rHo=r(qDe,"This class cannot be instantiated directly using "),$pe=n(qDe,"CODE",{});var But=s($pe);tHo=r(But,"__init__()"),But.forEach(t),aHo=r(qDe," (throws an error)."),qDe.forEach(t),nHo=i(Zs),gt=n(Zs,"DIV",{class:!0});var Y0=s(gt);T(Ky.$$.fragment,Y0),sHo=i(Y0),kpe=n(Y0,"P",{});var Iut=s(kpe);lHo=r(Iut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Iut.forEach(t),iHo=i(Y0),ad=n(Y0,"P",{});var NZ=s(ad);dHo=r(NZ,`Note:
Loading a model from its configuration file does `),Spe=n(NZ,"STRONG",{});var qut=s(Spe);cHo=r(qut,"not"),qut.forEach(t),fHo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(NZ,"A",{href:!0});var Nut=s(bX);mHo=r(Nut,"from_pretrained()"),Nut.forEach(t),gHo=r(NZ," to load the model weights."),NZ.forEach(t),hHo=i(Y0),T(o5.$$.fragment,Y0),Y0.forEach(t),pHo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(Zy.$$.fragment,fa),uHo=i(fa),Rpe=n(fa,"P",{});var jut=s(Rpe);_Ho=r(jut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jut.forEach(t),bHo=i(fa),Na=n(fa,"P",{});var K0=s(Na);vHo=r(K0,"The model class to instantiate is selected based on the "),Ppe=n(K0,"CODE",{});var Dut=s(Ppe);FHo=r(Dut,"model_type"),Dut.forEach(t),THo=r(K0,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(K0,"CODE",{});var Gut=s(Bpe);MHo=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),EHo=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(K0,"CODE",{});var Out=s(Ipe);CHo=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),wHo=r(K0,":"),K0.forEach(t),AHo=i(fa),qpe=n(fa,"UL",{});var Vut=s(qpe);r5=n(Vut,"LI",{});var rke=s(r5);Npe=n(rke,"STRONG",{});var Xut=s(Npe);yHo=r(Xut,"tapas"),Xut.forEach(t),LHo=r(rke," \u2014 "),vX=n(rke,"A",{href:!0});var zut=s(vX);xHo=r(zut,"TapasForQuestionAnswering"),zut.forEach(t),$Ho=r(rke," (TAPAS model)"),rke.forEach(t),Vut.forEach(t),kHo=i(fa),t5=n(fa,"P",{});var tke=s(t5);SHo=r(tke,"The model is set in evaluation mode by default using "),jpe=n(tke,"CODE",{});var Wut=s(jpe);RHo=r(Wut,"model.eval()"),Wut.forEach(t),PHo=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(tke,"CODE",{});var Qut=s(Dpe);BHo=r(Qut,"model.train()"),Qut.forEach(t),tke.forEach(t),IHo=i(fa),T(a5.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),PNe=i(f),nd=n(f,"H2",{class:!0});var NDe=s(nd);n5=n(NDe,"A",{id:!0,class:!0,href:!0});var Hut=s(n5);Gpe=n(Hut,"SPAN",{});var Uut=s(Gpe);T(eL.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),qHo=i(NDe),Ope=n(NDe,"SPAN",{});var Jut=s(Ope);NHo=r(Jut,"AutoModelForImageClassification"),Jut.forEach(t),NDe.forEach(t),BNe=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(oL.$$.fragment,el),jHo=i(el),sd=n(el,"P",{});var jZ=s(sd);DHo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=n(jZ,"A",{href:!0});var Yut=s(FX);GHo=r(Yut,"from_pretrained()"),Yut.forEach(t),OHo=r(jZ," class method or the "),TX=n(jZ,"A",{href:!0});var Kut=s(TX);VHo=r(Kut,"from_config()"),Kut.forEach(t),XHo=r(jZ,` class
method.`),jZ.forEach(t),zHo=i(el),rL=n(el,"P",{});var jDe=s(rL);WHo=r(jDe,"This class cannot be instantiated directly using "),Vpe=n(jDe,"CODE",{});var Zut=s(Vpe);QHo=r(Zut,"__init__()"),Zut.forEach(t),HHo=r(jDe," (throws an error)."),jDe.forEach(t),UHo=i(el),ht=n(el,"DIV",{class:!0});var Z0=s(ht);T(tL.$$.fragment,Z0),JHo=i(Z0),Xpe=n(Z0,"P",{});var e_t=s(Xpe);YHo=r(e_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),e_t.forEach(t),KHo=i(Z0),ld=n(Z0,"P",{});var DZ=s(ld);ZHo=r(DZ,`Note:
Loading a model from its configuration file does `),zpe=n(DZ,"STRONG",{});var o_t=s(zpe);eUo=r(o_t,"not"),o_t.forEach(t),oUo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(DZ,"A",{href:!0});var r_t=s(MX);rUo=r(r_t,"from_pretrained()"),r_t.forEach(t),tUo=r(DZ," to load the model weights."),DZ.forEach(t),aUo=i(Z0),T(s5.$$.fragment,Z0),Z0.forEach(t),nUo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(aL.$$.fragment,ma),sUo=i(ma),Wpe=n(ma,"P",{});var t_t=s(Wpe);lUo=r(t_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t_t.forEach(t),iUo=i(ma),ja=n(ma,"P",{});var e6=s(ja);dUo=r(e6,"The model class to instantiate is selected based on the "),Qpe=n(e6,"CODE",{});var a_t=s(Qpe);cUo=r(a_t,"model_type"),a_t.forEach(t),fUo=r(e6,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(e6,"CODE",{});var n_t=s(Hpe);mUo=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),gUo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(e6,"CODE",{});var s_t=s(Upe);hUo=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),pUo=r(e6,":"),e6.forEach(t),uUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);l5=n(Te,"LI",{});var ake=s(l5);Jpe=n(ake,"STRONG",{});var l_t=s(Jpe);_Uo=r(l_t,"beit"),l_t.forEach(t),bUo=r(ake," \u2014 "),EX=n(ake,"A",{href:!0});var i_t=s(EX);vUo=r(i_t,"BeitForImageClassification"),i_t.forEach(t),FUo=r(ake," (BEiT model)"),ake.forEach(t),TUo=i(Te),i5=n(Te,"LI",{});var nke=s(i5);Ype=n(nke,"STRONG",{});var d_t=s(Ype);MUo=r(d_t,"convnext"),d_t.forEach(t),EUo=r(nke," \u2014 "),CX=n(nke,"A",{href:!0});var c_t=s(CX);CUo=r(c_t,"ConvNextForImageClassification"),c_t.forEach(t),wUo=r(nke," (ConvNext model)"),nke.forEach(t),AUo=i(Te),d5=n(Te,"LI",{});var ske=s(d5);Kpe=n(ske,"STRONG",{});var f_t=s(Kpe);yUo=r(f_t,"cvt"),f_t.forEach(t),LUo=r(ske," \u2014 "),wX=n(ske,"A",{href:!0});var m_t=s(wX);xUo=r(m_t,"CvtForImageClassification"),m_t.forEach(t),$Uo=r(ske," (CvT model)"),ske.forEach(t),kUo=i(Te),c5=n(Te,"LI",{});var lke=s(c5);Zpe=n(lke,"STRONG",{});var g_t=s(Zpe);SUo=r(g_t,"data2vec-vision"),g_t.forEach(t),RUo=r(lke," \u2014 "),AX=n(lke,"A",{href:!0});var h_t=s(AX);PUo=r(h_t,"Data2VecVisionForImageClassification"),h_t.forEach(t),BUo=r(lke," (Data2VecVision model)"),lke.forEach(t),IUo=i(Te),Is=n(Te,"LI",{});var X$=s(Is);eue=n(X$,"STRONG",{});var p_t=s(eue);qUo=r(p_t,"deit"),p_t.forEach(t),NUo=r(X$," \u2014 "),yX=n(X$,"A",{href:!0});var u_t=s(yX);jUo=r(u_t,"DeiTForImageClassification"),u_t.forEach(t),DUo=r(X$," or "),LX=n(X$,"A",{href:!0});var __t=s(LX);GUo=r(__t,"DeiTForImageClassificationWithTeacher"),__t.forEach(t),OUo=r(X$," (DeiT model)"),X$.forEach(t),VUo=i(Te),f5=n(Te,"LI",{});var ike=s(f5);oue=n(ike,"STRONG",{});var b_t=s(oue);XUo=r(b_t,"imagegpt"),b_t.forEach(t),zUo=r(ike," \u2014 "),xX=n(ike,"A",{href:!0});var v_t=s(xX);WUo=r(v_t,"ImageGPTForImageClassification"),v_t.forEach(t),QUo=r(ike," (ImageGPT model)"),ike.forEach(t),HUo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);rue=n(pf,"STRONG",{});var F_t=s(rue);UUo=r(F_t,"perceiver"),F_t.forEach(t),JUo=r(pf," \u2014 "),$X=n(pf,"A",{href:!0});var T_t=s($X);YUo=r(T_t,"PerceiverForImageClassificationLearned"),T_t.forEach(t),KUo=r(pf," or "),kX=n(pf,"A",{href:!0});var M_t=s(kX);ZUo=r(M_t,"PerceiverForImageClassificationFourier"),M_t.forEach(t),eJo=r(pf," or "),SX=n(pf,"A",{href:!0});var E_t=s(SX);oJo=r(E_t,"PerceiverForImageClassificationConvProcessing"),E_t.forEach(t),rJo=r(pf," (Perceiver model)"),pf.forEach(t),tJo=i(Te),m5=n(Te,"LI",{});var dke=s(m5);tue=n(dke,"STRONG",{});var C_t=s(tue);aJo=r(C_t,"poolformer"),C_t.forEach(t),nJo=r(dke," \u2014 "),RX=n(dke,"A",{href:!0});var w_t=s(RX);sJo=r(w_t,"PoolFormerForImageClassification"),w_t.forEach(t),lJo=r(dke," (PoolFormer model)"),dke.forEach(t),iJo=i(Te),g5=n(Te,"LI",{});var cke=s(g5);aue=n(cke,"STRONG",{});var A_t=s(aue);dJo=r(A_t,"regnet"),A_t.forEach(t),cJo=r(cke," \u2014 "),PX=n(cke,"A",{href:!0});var y_t=s(PX);fJo=r(y_t,"RegNetForImageClassification"),y_t.forEach(t),mJo=r(cke," (RegNet model)"),cke.forEach(t),gJo=i(Te),h5=n(Te,"LI",{});var fke=s(h5);nue=n(fke,"STRONG",{});var L_t=s(nue);hJo=r(L_t,"resnet"),L_t.forEach(t),pJo=r(fke," \u2014 "),BX=n(fke,"A",{href:!0});var x_t=s(BX);uJo=r(x_t,"ResNetForImageClassification"),x_t.forEach(t),_Jo=r(fke," (ResNet model)"),fke.forEach(t),bJo=i(Te),p5=n(Te,"LI",{});var mke=s(p5);sue=n(mke,"STRONG",{});var $_t=s(sue);vJo=r($_t,"segformer"),$_t.forEach(t),FJo=r(mke," \u2014 "),IX=n(mke,"A",{href:!0});var k_t=s(IX);TJo=r(k_t,"SegformerForImageClassification"),k_t.forEach(t),MJo=r(mke," (SegFormer model)"),mke.forEach(t),EJo=i(Te),u5=n(Te,"LI",{});var gke=s(u5);lue=n(gke,"STRONG",{});var S_t=s(lue);CJo=r(S_t,"swin"),S_t.forEach(t),wJo=r(gke," \u2014 "),qX=n(gke,"A",{href:!0});var R_t=s(qX);AJo=r(R_t,"SwinForImageClassification"),R_t.forEach(t),yJo=r(gke," (Swin model)"),gke.forEach(t),LJo=i(Te),_5=n(Te,"LI",{});var hke=s(_5);iue=n(hke,"STRONG",{});var P_t=s(iue);xJo=r(P_t,"van"),P_t.forEach(t),$Jo=r(hke," \u2014 "),NX=n(hke,"A",{href:!0});var B_t=s(NX);kJo=r(B_t,"VanForImageClassification"),B_t.forEach(t),SJo=r(hke," (VAN model)"),hke.forEach(t),RJo=i(Te),b5=n(Te,"LI",{});var pke=s(b5);due=n(pke,"STRONG",{});var I_t=s(due);PJo=r(I_t,"vit"),I_t.forEach(t),BJo=r(pke," \u2014 "),jX=n(pke,"A",{href:!0});var q_t=s(jX);IJo=r(q_t,"ViTForImageClassification"),q_t.forEach(t),qJo=r(pke," (ViT model)"),pke.forEach(t),Te.forEach(t),NJo=i(ma),v5=n(ma,"P",{});var uke=s(v5);jJo=r(uke,"The model is set in evaluation mode by default using "),cue=n(uke,"CODE",{});var N_t=s(cue);DJo=r(N_t,"model.eval()"),N_t.forEach(t),GJo=r(uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(uke,"CODE",{});var j_t=s(fue);OJo=r(j_t,"model.train()"),j_t.forEach(t),uke.forEach(t),VJo=i(ma),T(F5.$$.fragment,ma),ma.forEach(t),el.forEach(t),INe=i(f),id=n(f,"H2",{class:!0});var DDe=s(id);T5=n(DDe,"A",{id:!0,class:!0,href:!0});var D_t=s(T5);mue=n(D_t,"SPAN",{});var G_t=s(mue);T(nL.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),XJo=i(DDe),gue=n(DDe,"SPAN",{});var O_t=s(gue);zJo=r(O_t,"AutoModelForVision2Seq"),O_t.forEach(t),DDe.forEach(t),qNe=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(sL.$$.fragment,ol),WJo=i(ol),dd=n(ol,"P",{});var GZ=s(dd);QJo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=n(GZ,"A",{href:!0});var V_t=s(DX);HJo=r(V_t,"from_pretrained()"),V_t.forEach(t),UJo=r(GZ," class method or the "),GX=n(GZ,"A",{href:!0});var X_t=s(GX);JJo=r(X_t,"from_config()"),X_t.forEach(t),YJo=r(GZ,` class
method.`),GZ.forEach(t),KJo=i(ol),lL=n(ol,"P",{});var GDe=s(lL);ZJo=r(GDe,"This class cannot be instantiated directly using "),hue=n(GDe,"CODE",{});var z_t=s(hue);eYo=r(z_t,"__init__()"),z_t.forEach(t),oYo=r(GDe," (throws an error)."),GDe.forEach(t),rYo=i(ol),ut=n(ol,"DIV",{class:!0});var o6=s(ut);T(iL.$$.fragment,o6),tYo=i(o6),pue=n(o6,"P",{});var W_t=s(pue);aYo=r(W_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W_t.forEach(t),nYo=i(o6),cd=n(o6,"P",{});var OZ=s(cd);sYo=r(OZ,`Note:
Loading a model from its configuration file does `),uue=n(OZ,"STRONG",{});var Q_t=s(uue);lYo=r(Q_t,"not"),Q_t.forEach(t),iYo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(OZ,"A",{href:!0});var H_t=s(OX);dYo=r(H_t,"from_pretrained()"),H_t.forEach(t),cYo=r(OZ," to load the model weights."),OZ.forEach(t),fYo=i(o6),T(M5.$$.fragment,o6),o6.forEach(t),mYo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(dL.$$.fragment,ga),gYo=i(ga),_ue=n(ga,"P",{});var U_t=s(_ue);hYo=r(U_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U_t.forEach(t),pYo=i(ga),Da=n(ga,"P",{});var r6=s(Da);uYo=r(r6,"The model class to instantiate is selected based on the "),bue=n(r6,"CODE",{});var J_t=s(bue);_Yo=r(J_t,"model_type"),J_t.forEach(t),bYo=r(r6,` property of the config object (either
passed as an argument or loaded from `),vue=n(r6,"CODE",{});var Y_t=s(vue);vYo=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),FYo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(r6,"CODE",{});var K_t=s(Fue);TYo=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),MYo=r(r6,":"),r6.forEach(t),EYo=i(ga),Tue=n(ga,"UL",{});var Z_t=s(Tue);E5=n(Z_t,"LI",{});var _ke=s(E5);Mue=n(_ke,"STRONG",{});var e2t=s(Mue);CYo=r(e2t,"vision-encoder-decoder"),e2t.forEach(t),wYo=r(_ke," \u2014 "),VX=n(_ke,"A",{href:!0});var o2t=s(VX);AYo=r(o2t,"VisionEncoderDecoderModel"),o2t.forEach(t),yYo=r(_ke," (Vision Encoder decoder model)"),_ke.forEach(t),Z_t.forEach(t),LYo=i(ga),C5=n(ga,"P",{});var bke=s(C5);xYo=r(bke,"The model is set in evaluation mode by default using "),Eue=n(bke,"CODE",{});var r2t=s(Eue);$Yo=r(r2t,"model.eval()"),r2t.forEach(t),kYo=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(bke,"CODE",{});var t2t=s(Cue);SYo=r(t2t,"model.train()"),t2t.forEach(t),bke.forEach(t),RYo=i(ga),T(w5.$$.fragment,ga),ga.forEach(t),ol.forEach(t),NNe=i(f),fd=n(f,"H2",{class:!0});var ODe=s(fd);A5=n(ODe,"A",{id:!0,class:!0,href:!0});var a2t=s(A5);wue=n(a2t,"SPAN",{});var n2t=s(wue);T(cL.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),PYo=i(ODe),Aue=n(ODe,"SPAN",{});var s2t=s(Aue);BYo=r(s2t,"AutoModelForAudioClassification"),s2t.forEach(t),ODe.forEach(t),jNe=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(fL.$$.fragment,rl),IYo=i(rl),md=n(rl,"P",{});var VZ=s(md);qYo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=n(VZ,"A",{href:!0});var l2t=s(XX);NYo=r(l2t,"from_pretrained()"),l2t.forEach(t),jYo=r(VZ," class method or the "),zX=n(VZ,"A",{href:!0});var i2t=s(zX);DYo=r(i2t,"from_config()"),i2t.forEach(t),GYo=r(VZ,` class
method.`),VZ.forEach(t),OYo=i(rl),mL=n(rl,"P",{});var VDe=s(mL);VYo=r(VDe,"This class cannot be instantiated directly using "),yue=n(VDe,"CODE",{});var d2t=s(yue);XYo=r(d2t,"__init__()"),d2t.forEach(t),zYo=r(VDe," (throws an error)."),VDe.forEach(t),WYo=i(rl),_t=n(rl,"DIV",{class:!0});var t6=s(_t);T(gL.$$.fragment,t6),QYo=i(t6),Lue=n(t6,"P",{});var c2t=s(Lue);HYo=r(c2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),c2t.forEach(t),UYo=i(t6),gd=n(t6,"P",{});var XZ=s(gd);JYo=r(XZ,`Note:
Loading a model from its configuration file does `),xue=n(XZ,"STRONG",{});var f2t=s(xue);YYo=r(f2t,"not"),f2t.forEach(t),KYo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(XZ,"A",{href:!0});var m2t=s(WX);ZYo=r(m2t,"from_pretrained()"),m2t.forEach(t),eKo=r(XZ," to load the model weights."),XZ.forEach(t),oKo=i(t6),T(y5.$$.fragment,t6),t6.forEach(t),rKo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(hL.$$.fragment,ha),tKo=i(ha),$ue=n(ha,"P",{});var g2t=s($ue);aKo=r(g2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),g2t.forEach(t),nKo=i(ha),Ga=n(ha,"P",{});var a6=s(Ga);sKo=r(a6,"The model class to instantiate is selected based on the "),kue=n(a6,"CODE",{});var h2t=s(kue);lKo=r(h2t,"model_type"),h2t.forEach(t),iKo=r(a6,` property of the config object (either
passed as an argument or loaded from `),Sue=n(a6,"CODE",{});var p2t=s(Sue);dKo=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),cKo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(a6,"CODE",{});var u2t=s(Rue);fKo=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),mKo=r(a6,":"),a6.forEach(t),gKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);L5=n(Oe,"LI",{});var vke=s(L5);Pue=n(vke,"STRONG",{});var _2t=s(Pue);hKo=r(_2t,"data2vec-audio"),_2t.forEach(t),pKo=r(vke," \u2014 "),QX=n(vke,"A",{href:!0});var b2t=s(QX);uKo=r(b2t,"Data2VecAudioForSequenceClassification"),b2t.forEach(t),_Ko=r(vke," (Data2VecAudio model)"),vke.forEach(t),bKo=i(Oe),x5=n(Oe,"LI",{});var Fke=s(x5);Bue=n(Fke,"STRONG",{});var v2t=s(Bue);vKo=r(v2t,"hubert"),v2t.forEach(t),FKo=r(Fke," \u2014 "),HX=n(Fke,"A",{href:!0});var F2t=s(HX);TKo=r(F2t,"HubertForSequenceClassification"),F2t.forEach(t),MKo=r(Fke," (Hubert model)"),Fke.forEach(t),EKo=i(Oe),$5=n(Oe,"LI",{});var Tke=s($5);Iue=n(Tke,"STRONG",{});var T2t=s(Iue);CKo=r(T2t,"sew"),T2t.forEach(t),wKo=r(Tke," \u2014 "),UX=n(Tke,"A",{href:!0});var M2t=s(UX);AKo=r(M2t,"SEWForSequenceClassification"),M2t.forEach(t),yKo=r(Tke," (SEW model)"),Tke.forEach(t),LKo=i(Oe),k5=n(Oe,"LI",{});var Mke=s(k5);que=n(Mke,"STRONG",{});var E2t=s(que);xKo=r(E2t,"sew-d"),E2t.forEach(t),$Ko=r(Mke," \u2014 "),JX=n(Mke,"A",{href:!0});var C2t=s(JX);kKo=r(C2t,"SEWDForSequenceClassification"),C2t.forEach(t),SKo=r(Mke," (SEW-D model)"),Mke.forEach(t),RKo=i(Oe),S5=n(Oe,"LI",{});var Eke=s(S5);Nue=n(Eke,"STRONG",{});var w2t=s(Nue);PKo=r(w2t,"unispeech"),w2t.forEach(t),BKo=r(Eke," \u2014 "),YX=n(Eke,"A",{href:!0});var A2t=s(YX);IKo=r(A2t,"UniSpeechForSequenceClassification"),A2t.forEach(t),qKo=r(Eke," (UniSpeech model)"),Eke.forEach(t),NKo=i(Oe),R5=n(Oe,"LI",{});var Cke=s(R5);jue=n(Cke,"STRONG",{});var y2t=s(jue);jKo=r(y2t,"unispeech-sat"),y2t.forEach(t),DKo=r(Cke," \u2014 "),KX=n(Cke,"A",{href:!0});var L2t=s(KX);GKo=r(L2t,"UniSpeechSatForSequenceClassification"),L2t.forEach(t),OKo=r(Cke," (UniSpeechSat model)"),Cke.forEach(t),VKo=i(Oe),P5=n(Oe,"LI",{});var wke=s(P5);Due=n(wke,"STRONG",{});var x2t=s(Due);XKo=r(x2t,"wav2vec2"),x2t.forEach(t),zKo=r(wke," \u2014 "),ZX=n(wke,"A",{href:!0});var $2t=s(ZX);WKo=r($2t,"Wav2Vec2ForSequenceClassification"),$2t.forEach(t),QKo=r(wke," (Wav2Vec2 model)"),wke.forEach(t),HKo=i(Oe),B5=n(Oe,"LI",{});var Ake=s(B5);Gue=n(Ake,"STRONG",{});var k2t=s(Gue);UKo=r(k2t,"wav2vec2-conformer"),k2t.forEach(t),JKo=r(Ake," \u2014 "),ez=n(Ake,"A",{href:!0});var S2t=s(ez);YKo=r(S2t,"Wav2Vec2ConformerForSequenceClassification"),S2t.forEach(t),KKo=r(Ake," (Wav2Vec2-Conformer model)"),Ake.forEach(t),ZKo=i(Oe),I5=n(Oe,"LI",{});var yke=s(I5);Oue=n(yke,"STRONG",{});var R2t=s(Oue);eZo=r(R2t,"wavlm"),R2t.forEach(t),oZo=r(yke," \u2014 "),oz=n(yke,"A",{href:!0});var P2t=s(oz);rZo=r(P2t,"WavLMForSequenceClassification"),P2t.forEach(t),tZo=r(yke," (WavLM model)"),yke.forEach(t),Oe.forEach(t),aZo=i(ha),q5=n(ha,"P",{});var Lke=s(q5);nZo=r(Lke,"The model is set in evaluation mode by default using "),Vue=n(Lke,"CODE",{});var B2t=s(Vue);sZo=r(B2t,"model.eval()"),B2t.forEach(t),lZo=r(Lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(Lke,"CODE",{});var I2t=s(Xue);iZo=r(I2t,"model.train()"),I2t.forEach(t),Lke.forEach(t),dZo=i(ha),T(N5.$$.fragment,ha),ha.forEach(t),rl.forEach(t),DNe=i(f),hd=n(f,"H2",{class:!0});var XDe=s(hd);j5=n(XDe,"A",{id:!0,class:!0,href:!0});var q2t=s(j5);zue=n(q2t,"SPAN",{});var N2t=s(zue);T(pL.$$.fragment,N2t),N2t.forEach(t),q2t.forEach(t),cZo=i(XDe),Wue=n(XDe,"SPAN",{});var j2t=s(Wue);fZo=r(j2t,"AutoModelForAudioFrameClassification"),j2t.forEach(t),XDe.forEach(t),GNe=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(uL.$$.fragment,tl),mZo=i(tl),pd=n(tl,"P",{});var zZ=s(pd);gZo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=n(zZ,"A",{href:!0});var D2t=s(rz);hZo=r(D2t,"from_pretrained()"),D2t.forEach(t),pZo=r(zZ," class method or the "),tz=n(zZ,"A",{href:!0});var G2t=s(tz);uZo=r(G2t,"from_config()"),G2t.forEach(t),_Zo=r(zZ,` class
method.`),zZ.forEach(t),bZo=i(tl),_L=n(tl,"P",{});var zDe=s(_L);vZo=r(zDe,"This class cannot be instantiated directly using "),Que=n(zDe,"CODE",{});var O2t=s(Que);FZo=r(O2t,"__init__()"),O2t.forEach(t),TZo=r(zDe," (throws an error)."),zDe.forEach(t),MZo=i(tl),bt=n(tl,"DIV",{class:!0});var n6=s(bt);T(bL.$$.fragment,n6),EZo=i(n6),Hue=n(n6,"P",{});var V2t=s(Hue);CZo=r(V2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),V2t.forEach(t),wZo=i(n6),ud=n(n6,"P",{});var WZ=s(ud);AZo=r(WZ,`Note:
Loading a model from its configuration file does `),Uue=n(WZ,"STRONG",{});var X2t=s(Uue);yZo=r(X2t,"not"),X2t.forEach(t),LZo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(WZ,"A",{href:!0});var z2t=s(az);xZo=r(z2t,"from_pretrained()"),z2t.forEach(t),$Zo=r(WZ," to load the model weights."),WZ.forEach(t),kZo=i(n6),T(D5.$$.fragment,n6),n6.forEach(t),SZo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(vL.$$.fragment,pa),RZo=i(pa),Jue=n(pa,"P",{});var W2t=s(Jue);PZo=r(W2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),W2t.forEach(t),BZo=i(pa),Oa=n(pa,"P",{});var s6=s(Oa);IZo=r(s6,"The model class to instantiate is selected based on the "),Yue=n(s6,"CODE",{});var Q2t=s(Yue);qZo=r(Q2t,"model_type"),Q2t.forEach(t),NZo=r(s6,` property of the config object (either
passed as an argument or loaded from `),Kue=n(s6,"CODE",{});var H2t=s(Kue);jZo=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),DZo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(s6,"CODE",{});var U2t=s(Zue);GZo=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),OZo=r(s6,":"),s6.forEach(t),VZo=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);G5=n(al,"LI",{});var xke=s(G5);e_e=n(xke,"STRONG",{});var J2t=s(e_e);XZo=r(J2t,"data2vec-audio"),J2t.forEach(t),zZo=r(xke," \u2014 "),nz=n(xke,"A",{href:!0});var Y2t=s(nz);WZo=r(Y2t,"Data2VecAudioForAudioFrameClassification"),Y2t.forEach(t),QZo=r(xke," (Data2VecAudio model)"),xke.forEach(t),HZo=i(al),O5=n(al,"LI",{});var $ke=s(O5);o_e=n($ke,"STRONG",{});var K2t=s(o_e);UZo=r(K2t,"unispeech-sat"),K2t.forEach(t),JZo=r($ke," \u2014 "),sz=n($ke,"A",{href:!0});var Z2t=s(sz);YZo=r(Z2t,"UniSpeechSatForAudioFrameClassification"),Z2t.forEach(t),KZo=r($ke," (UniSpeechSat model)"),$ke.forEach(t),ZZo=i(al),V5=n(al,"LI",{});var kke=s(V5);r_e=n(kke,"STRONG",{});var e1t=s(r_e);eer=r(e1t,"wav2vec2"),e1t.forEach(t),oer=r(kke," \u2014 "),lz=n(kke,"A",{href:!0});var o1t=s(lz);rer=r(o1t,"Wav2Vec2ForAudioFrameClassification"),o1t.forEach(t),ter=r(kke," (Wav2Vec2 model)"),kke.forEach(t),aer=i(al),X5=n(al,"LI",{});var Ske=s(X5);t_e=n(Ske,"STRONG",{});var r1t=s(t_e);ner=r(r1t,"wav2vec2-conformer"),r1t.forEach(t),ser=r(Ske," \u2014 "),iz=n(Ske,"A",{href:!0});var t1t=s(iz);ler=r(t1t,"Wav2Vec2ConformerForAudioFrameClassification"),t1t.forEach(t),ier=r(Ske," (Wav2Vec2-Conformer model)"),Ske.forEach(t),der=i(al),z5=n(al,"LI",{});var Rke=s(z5);a_e=n(Rke,"STRONG",{});var a1t=s(a_e);cer=r(a1t,"wavlm"),a1t.forEach(t),fer=r(Rke," \u2014 "),dz=n(Rke,"A",{href:!0});var n1t=s(dz);mer=r(n1t,"WavLMForAudioFrameClassification"),n1t.forEach(t),ger=r(Rke," (WavLM model)"),Rke.forEach(t),al.forEach(t),her=i(pa),W5=n(pa,"P",{});var Pke=s(W5);per=r(Pke,"The model is set in evaluation mode by default using "),n_e=n(Pke,"CODE",{});var s1t=s(n_e);uer=r(s1t,"model.eval()"),s1t.forEach(t),_er=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(Pke,"CODE",{});var l1t=s(s_e);ber=r(l1t,"model.train()"),l1t.forEach(t),Pke.forEach(t),ver=i(pa),T(Q5.$$.fragment,pa),pa.forEach(t),tl.forEach(t),ONe=i(f),_d=n(f,"H2",{class:!0});var WDe=s(_d);H5=n(WDe,"A",{id:!0,class:!0,href:!0});var i1t=s(H5);l_e=n(i1t,"SPAN",{});var d1t=s(l_e);T(FL.$$.fragment,d1t),d1t.forEach(t),i1t.forEach(t),Fer=i(WDe),i_e=n(WDe,"SPAN",{});var c1t=s(i_e);Ter=r(c1t,"AutoModelForCTC"),c1t.forEach(t),WDe.forEach(t),VNe=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(TL.$$.fragment,nl),Mer=i(nl),bd=n(nl,"P",{});var QZ=s(bd);Eer=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=n(QZ,"A",{href:!0});var f1t=s(cz);Cer=r(f1t,"from_pretrained()"),f1t.forEach(t),wer=r(QZ," class method or the "),fz=n(QZ,"A",{href:!0});var m1t=s(fz);Aer=r(m1t,"from_config()"),m1t.forEach(t),yer=r(QZ,` class
method.`),QZ.forEach(t),Ler=i(nl),ML=n(nl,"P",{});var QDe=s(ML);xer=r(QDe,"This class cannot be instantiated directly using "),d_e=n(QDe,"CODE",{});var g1t=s(d_e);$er=r(g1t,"__init__()"),g1t.forEach(t),ker=r(QDe," (throws an error)."),QDe.forEach(t),Ser=i(nl),vt=n(nl,"DIV",{class:!0});var l6=s(vt);T(EL.$$.fragment,l6),Rer=i(l6),c_e=n(l6,"P",{});var h1t=s(c_e);Per=r(h1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),h1t.forEach(t),Ber=i(l6),vd=n(l6,"P",{});var HZ=s(vd);Ier=r(HZ,`Note:
Loading a model from its configuration file does `),f_e=n(HZ,"STRONG",{});var p1t=s(f_e);qer=r(p1t,"not"),p1t.forEach(t),Ner=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(HZ,"A",{href:!0});var u1t=s(mz);jer=r(u1t,"from_pretrained()"),u1t.forEach(t),Der=r(HZ," to load the model weights."),HZ.forEach(t),Ger=i(l6),T(U5.$$.fragment,l6),l6.forEach(t),Oer=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(CL.$$.fragment,ua),Ver=i(ua),m_e=n(ua,"P",{});var _1t=s(m_e);Xer=r(_1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_1t.forEach(t),zer=i(ua),Va=n(ua,"P",{});var i6=s(Va);Wer=r(i6,"The model class to instantiate is selected based on the "),g_e=n(i6,"CODE",{});var b1t=s(g_e);Qer=r(b1t,"model_type"),b1t.forEach(t),Her=r(i6,` property of the config object (either
passed as an argument or loaded from `),h_e=n(i6,"CODE",{});var v1t=s(h_e);Uer=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Jer=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(i6,"CODE",{});var F1t=s(p_e);Yer=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),Ker=r(i6,":"),i6.forEach(t),Zer=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);J5=n(Ve,"LI",{});var Bke=s(J5);u_e=n(Bke,"STRONG",{});var T1t=s(u_e);eor=r(T1t,"data2vec-audio"),T1t.forEach(t),oor=r(Bke," \u2014 "),gz=n(Bke,"A",{href:!0});var M1t=s(gz);ror=r(M1t,"Data2VecAudioForCTC"),M1t.forEach(t),tor=r(Bke," (Data2VecAudio model)"),Bke.forEach(t),aor=i(Ve),Y5=n(Ve,"LI",{});var Ike=s(Y5);__e=n(Ike,"STRONG",{});var E1t=s(__e);nor=r(E1t,"hubert"),E1t.forEach(t),sor=r(Ike," \u2014 "),hz=n(Ike,"A",{href:!0});var C1t=s(hz);lor=r(C1t,"HubertForCTC"),C1t.forEach(t),ior=r(Ike," (Hubert model)"),Ike.forEach(t),dor=i(Ve),K5=n(Ve,"LI",{});var qke=s(K5);b_e=n(qke,"STRONG",{});var w1t=s(b_e);cor=r(w1t,"sew"),w1t.forEach(t),mor=r(qke," \u2014 "),pz=n(qke,"A",{href:!0});var A1t=s(pz);gor=r(A1t,"SEWForCTC"),A1t.forEach(t),hor=r(qke," (SEW model)"),qke.forEach(t),por=i(Ve),Z5=n(Ve,"LI",{});var Nke=s(Z5);v_e=n(Nke,"STRONG",{});var y1t=s(v_e);uor=r(y1t,"sew-d"),y1t.forEach(t),_or=r(Nke," \u2014 "),uz=n(Nke,"A",{href:!0});var L1t=s(uz);bor=r(L1t,"SEWDForCTC"),L1t.forEach(t),vor=r(Nke," (SEW-D model)"),Nke.forEach(t),For=i(Ve),eF=n(Ve,"LI",{});var jke=s(eF);F_e=n(jke,"STRONG",{});var x1t=s(F_e);Tor=r(x1t,"unispeech"),x1t.forEach(t),Mor=r(jke," \u2014 "),_z=n(jke,"A",{href:!0});var $1t=s(_z);Eor=r($1t,"UniSpeechForCTC"),$1t.forEach(t),Cor=r(jke," (UniSpeech model)"),jke.forEach(t),wor=i(Ve),oF=n(Ve,"LI",{});var Dke=s(oF);T_e=n(Dke,"STRONG",{});var k1t=s(T_e);Aor=r(k1t,"unispeech-sat"),k1t.forEach(t),yor=r(Dke," \u2014 "),bz=n(Dke,"A",{href:!0});var S1t=s(bz);Lor=r(S1t,"UniSpeechSatForCTC"),S1t.forEach(t),xor=r(Dke," (UniSpeechSat model)"),Dke.forEach(t),$or=i(Ve),rF=n(Ve,"LI",{});var Gke=s(rF);M_e=n(Gke,"STRONG",{});var R1t=s(M_e);kor=r(R1t,"wav2vec2"),R1t.forEach(t),Sor=r(Gke," \u2014 "),vz=n(Gke,"A",{href:!0});var P1t=s(vz);Ror=r(P1t,"Wav2Vec2ForCTC"),P1t.forEach(t),Por=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),Bor=i(Ve),tF=n(Ve,"LI",{});var Oke=s(tF);E_e=n(Oke,"STRONG",{});var B1t=s(E_e);Ior=r(B1t,"wav2vec2-conformer"),B1t.forEach(t),qor=r(Oke," \u2014 "),Fz=n(Oke,"A",{href:!0});var I1t=s(Fz);Nor=r(I1t,"Wav2Vec2ConformerForCTC"),I1t.forEach(t),jor=r(Oke," (Wav2Vec2-Conformer model)"),Oke.forEach(t),Dor=i(Ve),aF=n(Ve,"LI",{});var Vke=s(aF);C_e=n(Vke,"STRONG",{});var q1t=s(C_e);Gor=r(q1t,"wavlm"),q1t.forEach(t),Oor=r(Vke," \u2014 "),Tz=n(Vke,"A",{href:!0});var N1t=s(Tz);Vor=r(N1t,"WavLMForCTC"),N1t.forEach(t),Xor=r(Vke," (WavLM model)"),Vke.forEach(t),Ve.forEach(t),zor=i(ua),nF=n(ua,"P",{});var Xke=s(nF);Wor=r(Xke,"The model is set in evaluation mode by default using "),w_e=n(Xke,"CODE",{});var j1t=s(w_e);Qor=r(j1t,"model.eval()"),j1t.forEach(t),Hor=r(Xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(Xke,"CODE",{});var D1t=s(A_e);Uor=r(D1t,"model.train()"),D1t.forEach(t),Xke.forEach(t),Jor=i(ua),T(sF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),XNe=i(f),Fd=n(f,"H2",{class:!0});var HDe=s(Fd);lF=n(HDe,"A",{id:!0,class:!0,href:!0});var G1t=s(lF);y_e=n(G1t,"SPAN",{});var O1t=s(y_e);T(wL.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),Yor=i(HDe),L_e=n(HDe,"SPAN",{});var V1t=s(L_e);Kor=r(V1t,"AutoModelForSpeechSeq2Seq"),V1t.forEach(t),HDe.forEach(t),zNe=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(AL.$$.fragment,sl),Zor=i(sl),Td=n(sl,"P",{});var UZ=s(Td);err=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=n(UZ,"A",{href:!0});var X1t=s(Mz);orr=r(X1t,"from_pretrained()"),X1t.forEach(t),rrr=r(UZ," class method or the "),Ez=n(UZ,"A",{href:!0});var z1t=s(Ez);trr=r(z1t,"from_config()"),z1t.forEach(t),arr=r(UZ,` class
method.`),UZ.forEach(t),nrr=i(sl),yL=n(sl,"P",{});var UDe=s(yL);srr=r(UDe,"This class cannot be instantiated directly using "),x_e=n(UDe,"CODE",{});var W1t=s(x_e);lrr=r(W1t,"__init__()"),W1t.forEach(t),irr=r(UDe," (throws an error)."),UDe.forEach(t),drr=i(sl),Ft=n(sl,"DIV",{class:!0});var d6=s(Ft);T(LL.$$.fragment,d6),crr=i(d6),$_e=n(d6,"P",{});var Q1t=s($_e);frr=r(Q1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Q1t.forEach(t),mrr=i(d6),Md=n(d6,"P",{});var JZ=s(Md);grr=r(JZ,`Note:
Loading a model from its configuration file does `),k_e=n(JZ,"STRONG",{});var H1t=s(k_e);hrr=r(H1t,"not"),H1t.forEach(t),prr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(JZ,"A",{href:!0});var U1t=s(Cz);urr=r(U1t,"from_pretrained()"),U1t.forEach(t),_rr=r(JZ," to load the model weights."),JZ.forEach(t),brr=i(d6),T(iF.$$.fragment,d6),d6.forEach(t),vrr=i(sl),go=n(sl,"DIV",{class:!0});var _a=s(go);T(xL.$$.fragment,_a),Frr=i(_a),S_e=n(_a,"P",{});var J1t=s(S_e);Trr=r(J1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),J1t.forEach(t),Mrr=i(_a),Xa=n(_a,"P",{});var c6=s(Xa);Err=r(c6,"The model class to instantiate is selected based on the "),R_e=n(c6,"CODE",{});var Y1t=s(R_e);Crr=r(Y1t,"model_type"),Y1t.forEach(t),wrr=r(c6,` property of the config object (either
passed as an argument or loaded from `),P_e=n(c6,"CODE",{});var K1t=s(P_e);Arr=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),yrr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(c6,"CODE",{});var Z1t=s(B_e);Lrr=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),xrr=r(c6,":"),c6.forEach(t),$rr=i(_a),$L=n(_a,"UL",{});var JDe=s($L);dF=n(JDe,"LI",{});var zke=s(dF);I_e=n(zke,"STRONG",{});var ebt=s(I_e);krr=r(ebt,"speech-encoder-decoder"),ebt.forEach(t),Srr=r(zke," \u2014 "),wz=n(zke,"A",{href:!0});var obt=s(wz);Rrr=r(obt,"SpeechEncoderDecoderModel"),obt.forEach(t),Prr=r(zke," (Speech Encoder decoder model)"),zke.forEach(t),Brr=i(JDe),cF=n(JDe,"LI",{});var Wke=s(cF);q_e=n(Wke,"STRONG",{});var rbt=s(q_e);Irr=r(rbt,"speech_to_text"),rbt.forEach(t),qrr=r(Wke," \u2014 "),Az=n(Wke,"A",{href:!0});var tbt=s(Az);Nrr=r(tbt,"Speech2TextForConditionalGeneration"),tbt.forEach(t),jrr=r(Wke," (Speech2Text model)"),Wke.forEach(t),JDe.forEach(t),Drr=i(_a),fF=n(_a,"P",{});var Qke=s(fF);Grr=r(Qke,"The model is set in evaluation mode by default using "),N_e=n(Qke,"CODE",{});var abt=s(N_e);Orr=r(abt,"model.eval()"),abt.forEach(t),Vrr=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(Qke,"CODE",{});var nbt=s(j_e);Xrr=r(nbt,"model.train()"),nbt.forEach(t),Qke.forEach(t),zrr=i(_a),T(mF.$$.fragment,_a),_a.forEach(t),sl.forEach(t),WNe=i(f),Ed=n(f,"H2",{class:!0});var YDe=s(Ed);gF=n(YDe,"A",{id:!0,class:!0,href:!0});var sbt=s(gF);D_e=n(sbt,"SPAN",{});var lbt=s(D_e);T(kL.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),Wrr=i(YDe),G_e=n(YDe,"SPAN",{});var ibt=s(G_e);Qrr=r(ibt,"AutoModelForAudioXVector"),ibt.forEach(t),YDe.forEach(t),QNe=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(SL.$$.fragment,ll),Hrr=i(ll),Cd=n(ll,"P",{});var YZ=s(Cd);Urr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=n(YZ,"A",{href:!0});var dbt=s(yz);Jrr=r(dbt,"from_pretrained()"),dbt.forEach(t),Yrr=r(YZ," class method or the "),Lz=n(YZ,"A",{href:!0});var cbt=s(Lz);Krr=r(cbt,"from_config()"),cbt.forEach(t),Zrr=r(YZ,` class
method.`),YZ.forEach(t),etr=i(ll),RL=n(ll,"P",{});var KDe=s(RL);otr=r(KDe,"This class cannot be instantiated directly using "),O_e=n(KDe,"CODE",{});var fbt=s(O_e);rtr=r(fbt,"__init__()"),fbt.forEach(t),ttr=r(KDe," (throws an error)."),KDe.forEach(t),atr=i(ll),Tt=n(ll,"DIV",{class:!0});var f6=s(Tt);T(PL.$$.fragment,f6),ntr=i(f6),V_e=n(f6,"P",{});var mbt=s(V_e);str=r(mbt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mbt.forEach(t),ltr=i(f6),wd=n(f6,"P",{});var KZ=s(wd);itr=r(KZ,`Note:
Loading a model from its configuration file does `),X_e=n(KZ,"STRONG",{});var gbt=s(X_e);dtr=r(gbt,"not"),gbt.forEach(t),ctr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(KZ,"A",{href:!0});var hbt=s(xz);ftr=r(hbt,"from_pretrained()"),hbt.forEach(t),mtr=r(KZ," to load the model weights."),KZ.forEach(t),gtr=i(f6),T(hF.$$.fragment,f6),f6.forEach(t),htr=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(BL.$$.fragment,ba),ptr=i(ba),z_e=n(ba,"P",{});var pbt=s(z_e);utr=r(pbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pbt.forEach(t),_tr=i(ba),za=n(ba,"P",{});var m6=s(za);btr=r(m6,"The model class to instantiate is selected based on the "),W_e=n(m6,"CODE",{});var ubt=s(W_e);vtr=r(ubt,"model_type"),ubt.forEach(t),Ftr=r(m6,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(m6,"CODE",{});var _bt=s(Q_e);Ttr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),Mtr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(m6,"CODE",{});var bbt=s(H_e);Etr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Ctr=r(m6,":"),m6.forEach(t),wtr=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);pF=n(il,"LI",{});var Hke=s(pF);U_e=n(Hke,"STRONG",{});var vbt=s(U_e);Atr=r(vbt,"data2vec-audio"),vbt.forEach(t),ytr=r(Hke," \u2014 "),$z=n(Hke,"A",{href:!0});var Fbt=s($z);Ltr=r(Fbt,"Data2VecAudioForXVector"),Fbt.forEach(t),xtr=r(Hke," (Data2VecAudio model)"),Hke.forEach(t),$tr=i(il),uF=n(il,"LI",{});var Uke=s(uF);J_e=n(Uke,"STRONG",{});var Tbt=s(J_e);ktr=r(Tbt,"unispeech-sat"),Tbt.forEach(t),Str=r(Uke," \u2014 "),kz=n(Uke,"A",{href:!0});var Mbt=s(kz);Rtr=r(Mbt,"UniSpeechSatForXVector"),Mbt.forEach(t),Ptr=r(Uke," (UniSpeechSat model)"),Uke.forEach(t),Btr=i(il),_F=n(il,"LI",{});var Jke=s(_F);Y_e=n(Jke,"STRONG",{});var Ebt=s(Y_e);Itr=r(Ebt,"wav2vec2"),Ebt.forEach(t),qtr=r(Jke," \u2014 "),Sz=n(Jke,"A",{href:!0});var Cbt=s(Sz);Ntr=r(Cbt,"Wav2Vec2ForXVector"),Cbt.forEach(t),jtr=r(Jke," (Wav2Vec2 model)"),Jke.forEach(t),Dtr=i(il),bF=n(il,"LI",{});var Yke=s(bF);K_e=n(Yke,"STRONG",{});var wbt=s(K_e);Gtr=r(wbt,"wav2vec2-conformer"),wbt.forEach(t),Otr=r(Yke," \u2014 "),Rz=n(Yke,"A",{href:!0});var Abt=s(Rz);Vtr=r(Abt,"Wav2Vec2ConformerForXVector"),Abt.forEach(t),Xtr=r(Yke," (Wav2Vec2-Conformer model)"),Yke.forEach(t),ztr=i(il),vF=n(il,"LI",{});var Kke=s(vF);Z_e=n(Kke,"STRONG",{});var ybt=s(Z_e);Wtr=r(ybt,"wavlm"),ybt.forEach(t),Qtr=r(Kke," \u2014 "),Pz=n(Kke,"A",{href:!0});var Lbt=s(Pz);Htr=r(Lbt,"WavLMForXVector"),Lbt.forEach(t),Utr=r(Kke," (WavLM model)"),Kke.forEach(t),il.forEach(t),Jtr=i(ba),FF=n(ba,"P",{});var Zke=s(FF);Ytr=r(Zke,"The model is set in evaluation mode by default using "),e2e=n(Zke,"CODE",{});var xbt=s(e2e);Ktr=r(xbt,"model.eval()"),xbt.forEach(t),Ztr=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o2e=n(Zke,"CODE",{});var $bt=s(o2e);ear=r($bt,"model.train()"),$bt.forEach(t),Zke.forEach(t),oar=i(ba),T(TF.$$.fragment,ba),ba.forEach(t),ll.forEach(t),HNe=i(f),Ad=n(f,"H2",{class:!0});var ZDe=s(Ad);MF=n(ZDe,"A",{id:!0,class:!0,href:!0});var kbt=s(MF);r2e=n(kbt,"SPAN",{});var Sbt=s(r2e);T(IL.$$.fragment,Sbt),Sbt.forEach(t),kbt.forEach(t),rar=i(ZDe),t2e=n(ZDe,"SPAN",{});var Rbt=s(t2e);tar=r(Rbt,"AutoModelForMaskedImageModeling"),Rbt.forEach(t),ZDe.forEach(t),UNe=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(qL.$$.fragment,dl),aar=i(dl),yd=n(dl,"P",{});var ZZ=s(yd);nar=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=n(ZZ,"A",{href:!0});var Pbt=s(Bz);sar=r(Pbt,"from_pretrained()"),Pbt.forEach(t),lar=r(ZZ," class method or the "),Iz=n(ZZ,"A",{href:!0});var Bbt=s(Iz);iar=r(Bbt,"from_config()"),Bbt.forEach(t),dar=r(ZZ,` class
method.`),ZZ.forEach(t),car=i(dl),NL=n(dl,"P",{});var eGe=s(NL);far=r(eGe,"This class cannot be instantiated directly using "),a2e=n(eGe,"CODE",{});var Ibt=s(a2e);mar=r(Ibt,"__init__()"),Ibt.forEach(t),gar=r(eGe," (throws an error)."),eGe.forEach(t),har=i(dl),Mt=n(dl,"DIV",{class:!0});var g6=s(Mt);T(jL.$$.fragment,g6),par=i(g6),n2e=n(g6,"P",{});var qbt=s(n2e);uar=r(qbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qbt.forEach(t),_ar=i(g6),Ld=n(g6,"P",{});var eee=s(Ld);bar=r(eee,`Note:
Loading a model from its configuration file does `),s2e=n(eee,"STRONG",{});var Nbt=s(s2e);Far=r(Nbt,"not"),Nbt.forEach(t),Tar=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(eee,"A",{href:!0});var jbt=s(qz);Mar=r(jbt,"from_pretrained()"),jbt.forEach(t),Ear=r(eee," to load the model weights."),eee.forEach(t),Car=i(g6),T(EF.$$.fragment,g6),g6.forEach(t),war=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(DL.$$.fragment,va),Aar=i(va),l2e=n(va,"P",{});var Dbt=s(l2e);yar=r(Dbt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dbt.forEach(t),Lar=i(va),Wa=n(va,"P",{});var h6=s(Wa);xar=r(h6,"The model class to instantiate is selected based on the "),i2e=n(h6,"CODE",{});var Gbt=s(i2e);$ar=r(Gbt,"model_type"),Gbt.forEach(t),kar=r(h6,` property of the config object (either
passed as an argument or loaded from `),d2e=n(h6,"CODE",{});var Obt=s(d2e);Sar=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),Rar=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(h6,"CODE",{});var Vbt=s(c2e);Par=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),Bar=r(h6,":"),h6.forEach(t),Iar=i(va),xd=n(va,"UL",{});var oee=s(xd);CF=n(oee,"LI",{});var eSe=s(CF);f2e=n(eSe,"STRONG",{});var Xbt=s(f2e);qar=r(Xbt,"deit"),Xbt.forEach(t),Nar=r(eSe," \u2014 "),Nz=n(eSe,"A",{href:!0});var zbt=s(Nz);jar=r(zbt,"DeiTForMaskedImageModeling"),zbt.forEach(t),Dar=r(eSe," (DeiT model)"),eSe.forEach(t),Gar=i(oee),wF=n(oee,"LI",{});var oSe=s(wF);m2e=n(oSe,"STRONG",{});var Wbt=s(m2e);Oar=r(Wbt,"swin"),Wbt.forEach(t),Var=r(oSe," \u2014 "),jz=n(oSe,"A",{href:!0});var Qbt=s(jz);Xar=r(Qbt,"SwinForMaskedImageModeling"),Qbt.forEach(t),zar=r(oSe," (Swin model)"),oSe.forEach(t),War=i(oee),AF=n(oee,"LI",{});var rSe=s(AF);g2e=n(rSe,"STRONG",{});var Hbt=s(g2e);Qar=r(Hbt,"vit"),Hbt.forEach(t),Har=r(rSe," \u2014 "),Dz=n(rSe,"A",{href:!0});var Ubt=s(Dz);Uar=r(Ubt,"ViTForMaskedImageModeling"),Ubt.forEach(t),Jar=r(rSe," (ViT model)"),rSe.forEach(t),oee.forEach(t),Yar=i(va),yF=n(va,"P",{});var tSe=s(yF);Kar=r(tSe,"The model is set in evaluation mode by default using "),h2e=n(tSe,"CODE",{});var Jbt=s(h2e);Zar=r(Jbt,"model.eval()"),Jbt.forEach(t),enr=r(tSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p2e=n(tSe,"CODE",{});var Ybt=s(p2e);onr=r(Ybt,"model.train()"),Ybt.forEach(t),tSe.forEach(t),rnr=i(va),T(LF.$$.fragment,va),va.forEach(t),dl.forEach(t),JNe=i(f),$d=n(f,"H2",{class:!0});var oGe=s($d);xF=n(oGe,"A",{id:!0,class:!0,href:!0});var Kbt=s(xF);u2e=n(Kbt,"SPAN",{});var Zbt=s(u2e);T(GL.$$.fragment,Zbt),Zbt.forEach(t),Kbt.forEach(t),tnr=i(oGe),_2e=n(oGe,"SPAN",{});var e4t=s(_2e);anr=r(e4t,"AutoModelForObjectDetection"),e4t.forEach(t),oGe.forEach(t),YNe=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(OL.$$.fragment,cl),nnr=i(cl),kd=n(cl,"P",{});var ree=s(kd);snr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=n(ree,"A",{href:!0});var o4t=s(Gz);lnr=r(o4t,"from_pretrained()"),o4t.forEach(t),inr=r(ree," class method or the "),Oz=n(ree,"A",{href:!0});var r4t=s(Oz);dnr=r(r4t,"from_config()"),r4t.forEach(t),cnr=r(ree,` class
method.`),ree.forEach(t),fnr=i(cl),VL=n(cl,"P",{});var rGe=s(VL);mnr=r(rGe,"This class cannot be instantiated directly using "),b2e=n(rGe,"CODE",{});var t4t=s(b2e);gnr=r(t4t,"__init__()"),t4t.forEach(t),hnr=r(rGe," (throws an error)."),rGe.forEach(t),pnr=i(cl),Et=n(cl,"DIV",{class:!0});var p6=s(Et);T(XL.$$.fragment,p6),unr=i(p6),v2e=n(p6,"P",{});var a4t=s(v2e);_nr=r(a4t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),a4t.forEach(t),bnr=i(p6),Sd=n(p6,"P",{});var tee=s(Sd);vnr=r(tee,`Note:
Loading a model from its configuration file does `),F2e=n(tee,"STRONG",{});var n4t=s(F2e);Fnr=r(n4t,"not"),n4t.forEach(t),Tnr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(tee,"A",{href:!0});var s4t=s(Vz);Mnr=r(s4t,"from_pretrained()"),s4t.forEach(t),Enr=r(tee," to load the model weights."),tee.forEach(t),Cnr=i(p6),T($F.$$.fragment,p6),p6.forEach(t),wnr=i(cl),uo=n(cl,"DIV",{class:!0});var Fa=s(uo);T(zL.$$.fragment,Fa),Anr=i(Fa),T2e=n(Fa,"P",{});var l4t=s(T2e);ynr=r(l4t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),l4t.forEach(t),Lnr=i(Fa),Qa=n(Fa,"P",{});var u6=s(Qa);xnr=r(u6,"The model class to instantiate is selected based on the "),M2e=n(u6,"CODE",{});var i4t=s(M2e);$nr=r(i4t,"model_type"),i4t.forEach(t),knr=r(u6,` property of the config object (either
passed as an argument or loaded from `),E2e=n(u6,"CODE",{});var d4t=s(E2e);Snr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),Rnr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(u6,"CODE",{});var c4t=s(C2e);Pnr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),Bnr=r(u6,":"),u6.forEach(t),Inr=i(Fa),WL=n(Fa,"UL",{});var tGe=s(WL);kF=n(tGe,"LI",{});var aSe=s(kF);w2e=n(aSe,"STRONG",{});var f4t=s(w2e);qnr=r(f4t,"detr"),f4t.forEach(t),Nnr=r(aSe," \u2014 "),Xz=n(aSe,"A",{href:!0});var m4t=s(Xz);jnr=r(m4t,"DetrForObjectDetection"),m4t.forEach(t),Dnr=r(aSe," (DETR model)"),aSe.forEach(t),Gnr=i(tGe),SF=n(tGe,"LI",{});var nSe=s(SF);A2e=n(nSe,"STRONG",{});var g4t=s(A2e);Onr=r(g4t,"yolos"),g4t.forEach(t),Vnr=r(nSe," \u2014 "),zz=n(nSe,"A",{href:!0});var h4t=s(zz);Xnr=r(h4t,"YolosForObjectDetection"),h4t.forEach(t),znr=r(nSe," (YOLOS model)"),nSe.forEach(t),tGe.forEach(t),Wnr=i(Fa),RF=n(Fa,"P",{});var sSe=s(RF);Qnr=r(sSe,"The model is set in evaluation mode by default using "),y2e=n(sSe,"CODE",{});var p4t=s(y2e);Hnr=r(p4t,"model.eval()"),p4t.forEach(t),Unr=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(sSe,"CODE",{});var u4t=s(L2e);Jnr=r(u4t,"model.train()"),u4t.forEach(t),sSe.forEach(t),Ynr=i(Fa),T(PF.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),KNe=i(f),Rd=n(f,"H2",{class:!0});var aGe=s(Rd);BF=n(aGe,"A",{id:!0,class:!0,href:!0});var _4t=s(BF);x2e=n(_4t,"SPAN",{});var b4t=s(x2e);T(QL.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),Knr=i(aGe),$2e=n(aGe,"SPAN",{});var v4t=s($2e);Znr=r(v4t,"AutoModelForImageSegmentation"),v4t.forEach(t),aGe.forEach(t),ZNe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(HL.$$.fragment,fl),esr=i(fl),Pd=n(fl,"P",{});var aee=s(Pd);osr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=n(aee,"A",{href:!0});var F4t=s(Wz);rsr=r(F4t,"from_pretrained()"),F4t.forEach(t),tsr=r(aee," class method or the "),Qz=n(aee,"A",{href:!0});var T4t=s(Qz);asr=r(T4t,"from_config()"),T4t.forEach(t),nsr=r(aee,` class
method.`),aee.forEach(t),ssr=i(fl),UL=n(fl,"P",{});var nGe=s(UL);lsr=r(nGe,"This class cannot be instantiated directly using "),k2e=n(nGe,"CODE",{});var M4t=s(k2e);isr=r(M4t,"__init__()"),M4t.forEach(t),dsr=r(nGe," (throws an error)."),nGe.forEach(t),csr=i(fl),Ct=n(fl,"DIV",{class:!0});var _6=s(Ct);T(JL.$$.fragment,_6),fsr=i(_6),S2e=n(_6,"P",{});var E4t=s(S2e);msr=r(E4t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),E4t.forEach(t),gsr=i(_6),Bd=n(_6,"P",{});var nee=s(Bd);hsr=r(nee,`Note:
Loading a model from its configuration file does `),R2e=n(nee,"STRONG",{});var C4t=s(R2e);psr=r(C4t,"not"),C4t.forEach(t),usr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(nee,"A",{href:!0});var w4t=s(Hz);_sr=r(w4t,"from_pretrained()"),w4t.forEach(t),bsr=r(nee," to load the model weights."),nee.forEach(t),vsr=i(_6),T(IF.$$.fragment,_6),_6.forEach(t),Fsr=i(fl),_o=n(fl,"DIV",{class:!0});var Ta=s(_o);T(YL.$$.fragment,Ta),Tsr=i(Ta),P2e=n(Ta,"P",{});var A4t=s(P2e);Msr=r(A4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),A4t.forEach(t),Esr=i(Ta),Ha=n(Ta,"P",{});var b6=s(Ha);Csr=r(b6,"The model class to instantiate is selected based on the "),B2e=n(b6,"CODE",{});var y4t=s(B2e);wsr=r(y4t,"model_type"),y4t.forEach(t),Asr=r(b6,` property of the config object (either
passed as an argument or loaded from `),I2e=n(b6,"CODE",{});var L4t=s(I2e);ysr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),Lsr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(b6,"CODE",{});var x4t=s(q2e);xsr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),$sr=r(b6,":"),b6.forEach(t),ksr=i(Ta),N2e=n(Ta,"UL",{});var $4t=s(N2e);qF=n($4t,"LI",{});var lSe=s(qF);j2e=n(lSe,"STRONG",{});var k4t=s(j2e);Ssr=r(k4t,"detr"),k4t.forEach(t),Rsr=r(lSe," \u2014 "),Uz=n(lSe,"A",{href:!0});var S4t=s(Uz);Psr=r(S4t,"DetrForSegmentation"),S4t.forEach(t),Bsr=r(lSe," (DETR model)"),lSe.forEach(t),$4t.forEach(t),Isr=i(Ta),NF=n(Ta,"P",{});var iSe=s(NF);qsr=r(iSe,"The model is set in evaluation mode by default using "),D2e=n(iSe,"CODE",{});var R4t=s(D2e);Nsr=r(R4t,"model.eval()"),R4t.forEach(t),jsr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(iSe,"CODE",{});var P4t=s(G2e);Dsr=r(P4t,"model.train()"),P4t.forEach(t),iSe.forEach(t),Gsr=i(Ta),T(jF.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),eje=i(f),Id=n(f,"H2",{class:!0});var sGe=s(Id);DF=n(sGe,"A",{id:!0,class:!0,href:!0});var B4t=s(DF);O2e=n(B4t,"SPAN",{});var I4t=s(O2e);T(KL.$$.fragment,I4t),I4t.forEach(t),B4t.forEach(t),Osr=i(sGe),V2e=n(sGe,"SPAN",{});var q4t=s(V2e);Vsr=r(q4t,"AutoModelForSemanticSegmentation"),q4t.forEach(t),sGe.forEach(t),oje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(ZL.$$.fragment,ml),Xsr=i(ml),qd=n(ml,"P",{});var see=s(qd);zsr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=n(see,"A",{href:!0});var N4t=s(Jz);Wsr=r(N4t,"from_pretrained()"),N4t.forEach(t),Qsr=r(see," class method or the "),Yz=n(see,"A",{href:!0});var j4t=s(Yz);Hsr=r(j4t,"from_config()"),j4t.forEach(t),Usr=r(see,` class
method.`),see.forEach(t),Jsr=i(ml),e8=n(ml,"P",{});var lGe=s(e8);Ysr=r(lGe,"This class cannot be instantiated directly using "),X2e=n(lGe,"CODE",{});var D4t=s(X2e);Ksr=r(D4t,"__init__()"),D4t.forEach(t),Zsr=r(lGe," (throws an error)."),lGe.forEach(t),elr=i(ml),wt=n(ml,"DIV",{class:!0});var v6=s(wt);T(o8.$$.fragment,v6),olr=i(v6),z2e=n(v6,"P",{});var G4t=s(z2e);rlr=r(G4t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),G4t.forEach(t),tlr=i(v6),Nd=n(v6,"P",{});var lee=s(Nd);alr=r(lee,`Note:
Loading a model from its configuration file does `),W2e=n(lee,"STRONG",{});var O4t=s(W2e);nlr=r(O4t,"not"),O4t.forEach(t),slr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(lee,"A",{href:!0});var V4t=s(Kz);llr=r(V4t,"from_pretrained()"),V4t.forEach(t),ilr=r(lee," to load the model weights."),lee.forEach(t),dlr=i(v6),T(GF.$$.fragment,v6),v6.forEach(t),clr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(r8.$$.fragment,Ma),flr=i(Ma),Q2e=n(Ma,"P",{});var X4t=s(Q2e);mlr=r(X4t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),X4t.forEach(t),glr=i(Ma),Ua=n(Ma,"P",{});var F6=s(Ua);hlr=r(F6,"The model class to instantiate is selected based on the "),H2e=n(F6,"CODE",{});var z4t=s(H2e);plr=r(z4t,"model_type"),z4t.forEach(t),ulr=r(F6,` property of the config object (either
passed as an argument or loaded from `),U2e=n(F6,"CODE",{});var W4t=s(U2e);_lr=r(W4t,"pretrained_model_name_or_path"),W4t.forEach(t),blr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(F6,"CODE",{});var Q4t=s(J2e);vlr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),Flr=r(F6,":"),F6.forEach(t),Tlr=i(Ma),Ja=n(Ma,"UL",{});var T6=s(Ja);OF=n(T6,"LI",{});var dSe=s(OF);Y2e=n(dSe,"STRONG",{});var H4t=s(Y2e);Mlr=r(H4t,"beit"),H4t.forEach(t),Elr=r(dSe," \u2014 "),Zz=n(dSe,"A",{href:!0});var U4t=s(Zz);Clr=r(U4t,"BeitForSemanticSegmentation"),U4t.forEach(t),wlr=r(dSe," (BEiT model)"),dSe.forEach(t),Alr=i(T6),VF=n(T6,"LI",{});var cSe=s(VF);K2e=n(cSe,"STRONG",{});var J4t=s(K2e);ylr=r(J4t,"data2vec-vision"),J4t.forEach(t),Llr=r(cSe," \u2014 "),eW=n(cSe,"A",{href:!0});var Y4t=s(eW);xlr=r(Y4t,"Data2VecVisionForSemanticSegmentation"),Y4t.forEach(t),$lr=r(cSe," (Data2VecVision model)"),cSe.forEach(t),klr=i(T6),XF=n(T6,"LI",{});var fSe=s(XF);Z2e=n(fSe,"STRONG",{});var K4t=s(Z2e);Slr=r(K4t,"dpt"),K4t.forEach(t),Rlr=r(fSe," \u2014 "),oW=n(fSe,"A",{href:!0});var Z4t=s(oW);Plr=r(Z4t,"DPTForSemanticSegmentation"),Z4t.forEach(t),Blr=r(fSe," (DPT model)"),fSe.forEach(t),Ilr=i(T6),zF=n(T6,"LI",{});var mSe=s(zF);e1e=n(mSe,"STRONG",{});var evt=s(e1e);qlr=r(evt,"segformer"),evt.forEach(t),Nlr=r(mSe," \u2014 "),rW=n(mSe,"A",{href:!0});var ovt=s(rW);jlr=r(ovt,"SegformerForSemanticSegmentation"),ovt.forEach(t),Dlr=r(mSe," (SegFormer model)"),mSe.forEach(t),T6.forEach(t),Glr=i(Ma),WF=n(Ma,"P",{});var gSe=s(WF);Olr=r(gSe,"The model is set in evaluation mode by default using "),o1e=n(gSe,"CODE",{});var rvt=s(o1e);Vlr=r(rvt,"model.eval()"),rvt.forEach(t),Xlr=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(gSe,"CODE",{});var tvt=s(r1e);zlr=r(tvt,"model.train()"),tvt.forEach(t),gSe.forEach(t),Wlr=i(Ma),T(QF.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),rje=i(f),jd=n(f,"H2",{class:!0});var iGe=s(jd);HF=n(iGe,"A",{id:!0,class:!0,href:!0});var avt=s(HF);t1e=n(avt,"SPAN",{});var nvt=s(t1e);T(t8.$$.fragment,nvt),nvt.forEach(t),avt.forEach(t),Qlr=i(iGe),a1e=n(iGe,"SPAN",{});var svt=s(a1e);Hlr=r(svt,"AutoModelForInstanceSegmentation"),svt.forEach(t),iGe.forEach(t),tje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(a8.$$.fragment,gl),Ulr=i(gl),Dd=n(gl,"P",{});var iee=s(Dd);Jlr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=n(iee,"A",{href:!0});var lvt=s(tW);Ylr=r(lvt,"from_pretrained()"),lvt.forEach(t),Klr=r(iee," class method or the "),aW=n(iee,"A",{href:!0});var ivt=s(aW);Zlr=r(ivt,"from_config()"),ivt.forEach(t),eir=r(iee,` class
method.`),iee.forEach(t),oir=i(gl),n8=n(gl,"P",{});var dGe=s(n8);rir=r(dGe,"This class cannot be instantiated directly using "),n1e=n(dGe,"CODE",{});var dvt=s(n1e);tir=r(dvt,"__init__()"),dvt.forEach(t),air=r(dGe," (throws an error)."),dGe.forEach(t),nir=i(gl),At=n(gl,"DIV",{class:!0});var M6=s(At);T(s8.$$.fragment,M6),sir=i(M6),s1e=n(M6,"P",{});var cvt=s(s1e);lir=r(cvt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cvt.forEach(t),iir=i(M6),Gd=n(M6,"P",{});var dee=s(Gd);dir=r(dee,`Note:
Loading a model from its configuration file does `),l1e=n(dee,"STRONG",{});var fvt=s(l1e);cir=r(fvt,"not"),fvt.forEach(t),fir=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(dee,"A",{href:!0});var mvt=s(nW);mir=r(mvt,"from_pretrained()"),mvt.forEach(t),gir=r(dee," to load the model weights."),dee.forEach(t),hir=i(M6),T(UF.$$.fragment,M6),M6.forEach(t),pir=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(l8.$$.fragment,Ea),uir=i(Ea),i1e=n(Ea,"P",{});var gvt=s(i1e);_ir=r(gvt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gvt.forEach(t),bir=i(Ea),Ya=n(Ea,"P",{});var E6=s(Ya);vir=r(E6,"The model class to instantiate is selected based on the "),d1e=n(E6,"CODE",{});var hvt=s(d1e);Fir=r(hvt,"model_type"),hvt.forEach(t),Tir=r(E6,` property of the config object (either
passed as an argument or loaded from `),c1e=n(E6,"CODE",{});var pvt=s(c1e);Mir=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),Eir=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(E6,"CODE",{});var uvt=s(f1e);Cir=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),wir=r(E6,":"),E6.forEach(t),Air=i(Ea),m1e=n(Ea,"UL",{});var _vt=s(m1e);JF=n(_vt,"LI",{});var hSe=s(JF);g1e=n(hSe,"STRONG",{});var bvt=s(g1e);yir=r(bvt,"maskformer"),bvt.forEach(t),Lir=r(hSe," \u2014 "),sW=n(hSe,"A",{href:!0});var vvt=s(sW);xir=r(vvt,"MaskFormerForInstanceSegmentation"),vvt.forEach(t),$ir=r(hSe," (MaskFormer model)"),hSe.forEach(t),_vt.forEach(t),kir=i(Ea),YF=n(Ea,"P",{});var pSe=s(YF);Sir=r(pSe,"The model is set in evaluation mode by default using "),h1e=n(pSe,"CODE",{});var Fvt=s(h1e);Rir=r(Fvt,"model.eval()"),Fvt.forEach(t),Pir=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(pSe,"CODE",{});var Tvt=s(p1e);Bir=r(Tvt,"model.train()"),Tvt.forEach(t),pSe.forEach(t),Iir=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),aje=i(f),Od=n(f,"H2",{class:!0});var cGe=s(Od);ZF=n(cGe,"A",{id:!0,class:!0,href:!0});var Mvt=s(ZF);u1e=n(Mvt,"SPAN",{});var Evt=s(u1e);T(i8.$$.fragment,Evt),Evt.forEach(t),Mvt.forEach(t),qir=i(cGe),_1e=n(cGe,"SPAN",{});var Cvt=s(_1e);Nir=r(Cvt,"TFAutoModel"),Cvt.forEach(t),cGe.forEach(t),nje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(d8.$$.fragment,hl),jir=i(hl),Vd=n(hl,"P",{});var cee=s(Vd);Dir=r(cee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=n(cee,"A",{href:!0});var wvt=s(lW);Gir=r(wvt,"from_pretrained()"),wvt.forEach(t),Oir=r(cee," class method or the "),iW=n(cee,"A",{href:!0});var Avt=s(iW);Vir=r(Avt,"from_config()"),Avt.forEach(t),Xir=r(cee,` class
method.`),cee.forEach(t),zir=i(hl),c8=n(hl,"P",{});var fGe=s(c8);Wir=r(fGe,"This class cannot be instantiated directly using "),b1e=n(fGe,"CODE",{});var yvt=s(b1e);Qir=r(yvt,"__init__()"),yvt.forEach(t),Hir=r(fGe," (throws an error)."),fGe.forEach(t),Uir=i(hl),yt=n(hl,"DIV",{class:!0});var C6=s(yt);T(f8.$$.fragment,C6),Jir=i(C6),v1e=n(C6,"P",{});var Lvt=s(v1e);Yir=r(Lvt,"Instantiates one of the base model classes of the library from a configuration."),Lvt.forEach(t),Kir=i(C6),Xd=n(C6,"P",{});var fee=s(Xd);Zir=r(fee,`Note:
Loading a model from its configuration file does `),F1e=n(fee,"STRONG",{});var xvt=s(F1e);edr=r(xvt,"not"),xvt.forEach(t),odr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(fee,"A",{href:!0});var $vt=s(dW);rdr=r($vt,"from_pretrained()"),$vt.forEach(t),tdr=r(fee," to load the model weights."),fee.forEach(t),adr=i(C6),T(eT.$$.fragment,C6),C6.forEach(t),ndr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(m8.$$.fragment,pl),sdr=i(pl),T1e=n(pl,"P",{});var kvt=s(T1e);ldr=r(kvt,"Instantiate one of the base model classes of the library from a pretrained model."),kvt.forEach(t),idr=i(pl),Ka=n(pl,"P",{});var w6=s(Ka);ddr=r(w6,"The model class to instantiate is selected based on the "),M1e=n(w6,"CODE",{});var Svt=s(M1e);cdr=r(Svt,"model_type"),Svt.forEach(t),fdr=r(w6,` property of the config object (either
passed as an argument or loaded from `),E1e=n(w6,"CODE",{});var Rvt=s(E1e);mdr=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),gdr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(w6,"CODE",{});var Pvt=s(C1e);hdr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),pdr=r(w6,":"),w6.forEach(t),udr=i(pl),N=n(pl,"UL",{});var D=s(N);oT=n(D,"LI",{});var uSe=s(oT);w1e=n(uSe,"STRONG",{});var Bvt=s(w1e);_dr=r(Bvt,"albert"),Bvt.forEach(t),bdr=r(uSe," \u2014 "),cW=n(uSe,"A",{href:!0});var Ivt=s(cW);vdr=r(Ivt,"TFAlbertModel"),Ivt.forEach(t),Fdr=r(uSe," (ALBERT model)"),uSe.forEach(t),Tdr=i(D),rT=n(D,"LI",{});var _Se=s(rT);A1e=n(_Se,"STRONG",{});var qvt=s(A1e);Mdr=r(qvt,"bart"),qvt.forEach(t),Edr=r(_Se," \u2014 "),fW=n(_Se,"A",{href:!0});var Nvt=s(fW);Cdr=r(Nvt,"TFBartModel"),Nvt.forEach(t),wdr=r(_Se," (BART model)"),_Se.forEach(t),Adr=i(D),tT=n(D,"LI",{});var bSe=s(tT);y1e=n(bSe,"STRONG",{});var jvt=s(y1e);ydr=r(jvt,"bert"),jvt.forEach(t),Ldr=r(bSe," \u2014 "),mW=n(bSe,"A",{href:!0});var Dvt=s(mW);xdr=r(Dvt,"TFBertModel"),Dvt.forEach(t),$dr=r(bSe," (BERT model)"),bSe.forEach(t),kdr=i(D),aT=n(D,"LI",{});var vSe=s(aT);L1e=n(vSe,"STRONG",{});var Gvt=s(L1e);Sdr=r(Gvt,"blenderbot"),Gvt.forEach(t),Rdr=r(vSe," \u2014 "),gW=n(vSe,"A",{href:!0});var Ovt=s(gW);Pdr=r(Ovt,"TFBlenderbotModel"),Ovt.forEach(t),Bdr=r(vSe," (Blenderbot model)"),vSe.forEach(t),Idr=i(D),nT=n(D,"LI",{});var FSe=s(nT);x1e=n(FSe,"STRONG",{});var Vvt=s(x1e);qdr=r(Vvt,"blenderbot-small"),Vvt.forEach(t),Ndr=r(FSe," \u2014 "),hW=n(FSe,"A",{href:!0});var Xvt=s(hW);jdr=r(Xvt,"TFBlenderbotSmallModel"),Xvt.forEach(t),Ddr=r(FSe," (BlenderbotSmall model)"),FSe.forEach(t),Gdr=i(D),sT=n(D,"LI",{});var TSe=s(sT);$1e=n(TSe,"STRONG",{});var zvt=s($1e);Odr=r(zvt,"camembert"),zvt.forEach(t),Vdr=r(TSe," \u2014 "),pW=n(TSe,"A",{href:!0});var Wvt=s(pW);Xdr=r(Wvt,"TFCamembertModel"),Wvt.forEach(t),zdr=r(TSe," (CamemBERT model)"),TSe.forEach(t),Wdr=i(D),lT=n(D,"LI",{});var MSe=s(lT);k1e=n(MSe,"STRONG",{});var Qvt=s(k1e);Qdr=r(Qvt,"clip"),Qvt.forEach(t),Hdr=r(MSe," \u2014 "),uW=n(MSe,"A",{href:!0});var Hvt=s(uW);Udr=r(Hvt,"TFCLIPModel"),Hvt.forEach(t),Jdr=r(MSe," (CLIP model)"),MSe.forEach(t),Ydr=i(D),iT=n(D,"LI",{});var ESe=s(iT);S1e=n(ESe,"STRONG",{});var Uvt=s(S1e);Kdr=r(Uvt,"convbert"),Uvt.forEach(t),Zdr=r(ESe," \u2014 "),_W=n(ESe,"A",{href:!0});var Jvt=s(_W);ecr=r(Jvt,"TFConvBertModel"),Jvt.forEach(t),ocr=r(ESe," (ConvBERT model)"),ESe.forEach(t),rcr=i(D),dT=n(D,"LI",{});var CSe=s(dT);R1e=n(CSe,"STRONG",{});var Yvt=s(R1e);tcr=r(Yvt,"convnext"),Yvt.forEach(t),acr=r(CSe," \u2014 "),bW=n(CSe,"A",{href:!0});var Kvt=s(bW);ncr=r(Kvt,"TFConvNextModel"),Kvt.forEach(t),scr=r(CSe," (ConvNext model)"),CSe.forEach(t),lcr=i(D),cT=n(D,"LI",{});var wSe=s(cT);P1e=n(wSe,"STRONG",{});var Zvt=s(P1e);icr=r(Zvt,"ctrl"),Zvt.forEach(t),dcr=r(wSe," \u2014 "),vW=n(wSe,"A",{href:!0});var e5t=s(vW);ccr=r(e5t,"TFCTRLModel"),e5t.forEach(t),fcr=r(wSe," (CTRL model)"),wSe.forEach(t),mcr=i(D),fT=n(D,"LI",{});var ASe=s(fT);B1e=n(ASe,"STRONG",{});var o5t=s(B1e);gcr=r(o5t,"data2vec-vision"),o5t.forEach(t),hcr=r(ASe," \u2014 "),FW=n(ASe,"A",{href:!0});var r5t=s(FW);pcr=r(r5t,"TFData2VecVisionModel"),r5t.forEach(t),ucr=r(ASe," (Data2VecVision model)"),ASe.forEach(t),_cr=i(D),mT=n(D,"LI",{});var ySe=s(mT);I1e=n(ySe,"STRONG",{});var t5t=s(I1e);bcr=r(t5t,"deberta"),t5t.forEach(t),vcr=r(ySe," \u2014 "),TW=n(ySe,"A",{href:!0});var a5t=s(TW);Fcr=r(a5t,"TFDebertaModel"),a5t.forEach(t),Tcr=r(ySe," (DeBERTa model)"),ySe.forEach(t),Mcr=i(D),gT=n(D,"LI",{});var LSe=s(gT);q1e=n(LSe,"STRONG",{});var n5t=s(q1e);Ecr=r(n5t,"deberta-v2"),n5t.forEach(t),Ccr=r(LSe," \u2014 "),MW=n(LSe,"A",{href:!0});var s5t=s(MW);wcr=r(s5t,"TFDebertaV2Model"),s5t.forEach(t),Acr=r(LSe," (DeBERTa-v2 model)"),LSe.forEach(t),ycr=i(D),hT=n(D,"LI",{});var xSe=s(hT);N1e=n(xSe,"STRONG",{});var l5t=s(N1e);Lcr=r(l5t,"distilbert"),l5t.forEach(t),xcr=r(xSe," \u2014 "),EW=n(xSe,"A",{href:!0});var i5t=s(EW);$cr=r(i5t,"TFDistilBertModel"),i5t.forEach(t),kcr=r(xSe," (DistilBERT model)"),xSe.forEach(t),Scr=i(D),pT=n(D,"LI",{});var $Se=s(pT);j1e=n($Se,"STRONG",{});var d5t=s(j1e);Rcr=r(d5t,"dpr"),d5t.forEach(t),Pcr=r($Se," \u2014 "),CW=n($Se,"A",{href:!0});var c5t=s(CW);Bcr=r(c5t,"TFDPRQuestionEncoder"),c5t.forEach(t),Icr=r($Se," (DPR model)"),$Se.forEach(t),qcr=i(D),uT=n(D,"LI",{});var kSe=s(uT);D1e=n(kSe,"STRONG",{});var f5t=s(D1e);Ncr=r(f5t,"electra"),f5t.forEach(t),jcr=r(kSe," \u2014 "),wW=n(kSe,"A",{href:!0});var m5t=s(wW);Dcr=r(m5t,"TFElectraModel"),m5t.forEach(t),Gcr=r(kSe," (ELECTRA model)"),kSe.forEach(t),Ocr=i(D),_T=n(D,"LI",{});var SSe=s(_T);G1e=n(SSe,"STRONG",{});var g5t=s(G1e);Vcr=r(g5t,"flaubert"),g5t.forEach(t),Xcr=r(SSe," \u2014 "),AW=n(SSe,"A",{href:!0});var h5t=s(AW);zcr=r(h5t,"TFFlaubertModel"),h5t.forEach(t),Wcr=r(SSe," (FlauBERT model)"),SSe.forEach(t),Qcr=i(D),qs=n(D,"LI",{});var z$=s(qs);O1e=n(z$,"STRONG",{});var p5t=s(O1e);Hcr=r(p5t,"funnel"),p5t.forEach(t),Ucr=r(z$," \u2014 "),yW=n(z$,"A",{href:!0});var u5t=s(yW);Jcr=r(u5t,"TFFunnelModel"),u5t.forEach(t),Ycr=r(z$," or "),LW=n(z$,"A",{href:!0});var _5t=s(LW);Kcr=r(_5t,"TFFunnelBaseModel"),_5t.forEach(t),Zcr=r(z$," (Funnel Transformer model)"),z$.forEach(t),efr=i(D),bT=n(D,"LI",{});var RSe=s(bT);V1e=n(RSe,"STRONG",{});var b5t=s(V1e);ofr=r(b5t,"gpt2"),b5t.forEach(t),rfr=r(RSe," \u2014 "),xW=n(RSe,"A",{href:!0});var v5t=s(xW);tfr=r(v5t,"TFGPT2Model"),v5t.forEach(t),afr=r(RSe," (OpenAI GPT-2 model)"),RSe.forEach(t),nfr=i(D),vT=n(D,"LI",{});var PSe=s(vT);X1e=n(PSe,"STRONG",{});var F5t=s(X1e);sfr=r(F5t,"gptj"),F5t.forEach(t),lfr=r(PSe," \u2014 "),$W=n(PSe,"A",{href:!0});var T5t=s($W);ifr=r(T5t,"TFGPTJModel"),T5t.forEach(t),dfr=r(PSe," (GPT-J model)"),PSe.forEach(t),cfr=i(D),FT=n(D,"LI",{});var BSe=s(FT);z1e=n(BSe,"STRONG",{});var M5t=s(z1e);ffr=r(M5t,"hubert"),M5t.forEach(t),mfr=r(BSe," \u2014 "),kW=n(BSe,"A",{href:!0});var E5t=s(kW);gfr=r(E5t,"TFHubertModel"),E5t.forEach(t),hfr=r(BSe," (Hubert model)"),BSe.forEach(t),pfr=i(D),TT=n(D,"LI",{});var ISe=s(TT);W1e=n(ISe,"STRONG",{});var C5t=s(W1e);ufr=r(C5t,"layoutlm"),C5t.forEach(t),_fr=r(ISe," \u2014 "),SW=n(ISe,"A",{href:!0});var w5t=s(SW);bfr=r(w5t,"TFLayoutLMModel"),w5t.forEach(t),vfr=r(ISe," (LayoutLM model)"),ISe.forEach(t),Ffr=i(D),MT=n(D,"LI",{});var qSe=s(MT);Q1e=n(qSe,"STRONG",{});var A5t=s(Q1e);Tfr=r(A5t,"led"),A5t.forEach(t),Mfr=r(qSe," \u2014 "),RW=n(qSe,"A",{href:!0});var y5t=s(RW);Efr=r(y5t,"TFLEDModel"),y5t.forEach(t),Cfr=r(qSe," (LED model)"),qSe.forEach(t),wfr=i(D),ET=n(D,"LI",{});var NSe=s(ET);H1e=n(NSe,"STRONG",{});var L5t=s(H1e);Afr=r(L5t,"longformer"),L5t.forEach(t),yfr=r(NSe," \u2014 "),PW=n(NSe,"A",{href:!0});var x5t=s(PW);Lfr=r(x5t,"TFLongformerModel"),x5t.forEach(t),xfr=r(NSe," (Longformer model)"),NSe.forEach(t),$fr=i(D),CT=n(D,"LI",{});var jSe=s(CT);U1e=n(jSe,"STRONG",{});var $5t=s(U1e);kfr=r($5t,"lxmert"),$5t.forEach(t),Sfr=r(jSe," \u2014 "),BW=n(jSe,"A",{href:!0});var k5t=s(BW);Rfr=r(k5t,"TFLxmertModel"),k5t.forEach(t),Pfr=r(jSe," (LXMERT model)"),jSe.forEach(t),Bfr=i(D),wT=n(D,"LI",{});var DSe=s(wT);J1e=n(DSe,"STRONG",{});var S5t=s(J1e);Ifr=r(S5t,"marian"),S5t.forEach(t),qfr=r(DSe," \u2014 "),IW=n(DSe,"A",{href:!0});var R5t=s(IW);Nfr=r(R5t,"TFMarianModel"),R5t.forEach(t),jfr=r(DSe," (Marian model)"),DSe.forEach(t),Dfr=i(D),AT=n(D,"LI",{});var GSe=s(AT);Y1e=n(GSe,"STRONG",{});var P5t=s(Y1e);Gfr=r(P5t,"mbart"),P5t.forEach(t),Ofr=r(GSe," \u2014 "),qW=n(GSe,"A",{href:!0});var B5t=s(qW);Vfr=r(B5t,"TFMBartModel"),B5t.forEach(t),Xfr=r(GSe," (mBART model)"),GSe.forEach(t),zfr=i(D),yT=n(D,"LI",{});var OSe=s(yT);K1e=n(OSe,"STRONG",{});var I5t=s(K1e);Wfr=r(I5t,"mobilebert"),I5t.forEach(t),Qfr=r(OSe," \u2014 "),NW=n(OSe,"A",{href:!0});var q5t=s(NW);Hfr=r(q5t,"TFMobileBertModel"),q5t.forEach(t),Ufr=r(OSe," (MobileBERT model)"),OSe.forEach(t),Jfr=i(D),LT=n(D,"LI",{});var VSe=s(LT);Z1e=n(VSe,"STRONG",{});var N5t=s(Z1e);Yfr=r(N5t,"mpnet"),N5t.forEach(t),Kfr=r(VSe," \u2014 "),jW=n(VSe,"A",{href:!0});var j5t=s(jW);Zfr=r(j5t,"TFMPNetModel"),j5t.forEach(t),emr=r(VSe," (MPNet model)"),VSe.forEach(t),omr=i(D),xT=n(D,"LI",{});var XSe=s(xT);ebe=n(XSe,"STRONG",{});var D5t=s(ebe);rmr=r(D5t,"mt5"),D5t.forEach(t),tmr=r(XSe," \u2014 "),DW=n(XSe,"A",{href:!0});var G5t=s(DW);amr=r(G5t,"TFMT5Model"),G5t.forEach(t),nmr=r(XSe," (mT5 model)"),XSe.forEach(t),smr=i(D),$T=n(D,"LI",{});var zSe=s($T);obe=n(zSe,"STRONG",{});var O5t=s(obe);lmr=r(O5t,"openai-gpt"),O5t.forEach(t),imr=r(zSe," \u2014 "),GW=n(zSe,"A",{href:!0});var V5t=s(GW);dmr=r(V5t,"TFOpenAIGPTModel"),V5t.forEach(t),cmr=r(zSe," (OpenAI GPT model)"),zSe.forEach(t),fmr=i(D),kT=n(D,"LI",{});var WSe=s(kT);rbe=n(WSe,"STRONG",{});var X5t=s(rbe);mmr=r(X5t,"pegasus"),X5t.forEach(t),gmr=r(WSe," \u2014 "),OW=n(WSe,"A",{href:!0});var z5t=s(OW);hmr=r(z5t,"TFPegasusModel"),z5t.forEach(t),pmr=r(WSe," (Pegasus model)"),WSe.forEach(t),umr=i(D),ST=n(D,"LI",{});var QSe=s(ST);tbe=n(QSe,"STRONG",{});var W5t=s(tbe);_mr=r(W5t,"rembert"),W5t.forEach(t),bmr=r(QSe," \u2014 "),VW=n(QSe,"A",{href:!0});var Q5t=s(VW);vmr=r(Q5t,"TFRemBertModel"),Q5t.forEach(t),Fmr=r(QSe," (RemBERT model)"),QSe.forEach(t),Tmr=i(D),RT=n(D,"LI",{});var HSe=s(RT);abe=n(HSe,"STRONG",{});var H5t=s(abe);Mmr=r(H5t,"roberta"),H5t.forEach(t),Emr=r(HSe," \u2014 "),XW=n(HSe,"A",{href:!0});var U5t=s(XW);Cmr=r(U5t,"TFRobertaModel"),U5t.forEach(t),wmr=r(HSe," (RoBERTa model)"),HSe.forEach(t),Amr=i(D),PT=n(D,"LI",{});var USe=s(PT);nbe=n(USe,"STRONG",{});var J5t=s(nbe);ymr=r(J5t,"roformer"),J5t.forEach(t),Lmr=r(USe," \u2014 "),zW=n(USe,"A",{href:!0});var Y5t=s(zW);xmr=r(Y5t,"TFRoFormerModel"),Y5t.forEach(t),$mr=r(USe," (RoFormer model)"),USe.forEach(t),kmr=i(D),BT=n(D,"LI",{});var JSe=s(BT);sbe=n(JSe,"STRONG",{});var K5t=s(sbe);Smr=r(K5t,"speech_to_text"),K5t.forEach(t),Rmr=r(JSe," \u2014 "),WW=n(JSe,"A",{href:!0});var Z5t=s(WW);Pmr=r(Z5t,"TFSpeech2TextModel"),Z5t.forEach(t),Bmr=r(JSe," (Speech2Text model)"),JSe.forEach(t),Imr=i(D),IT=n(D,"LI",{});var YSe=s(IT);lbe=n(YSe,"STRONG",{});var eFt=s(lbe);qmr=r(eFt,"swin"),eFt.forEach(t),Nmr=r(YSe," \u2014 "),QW=n(YSe,"A",{href:!0});var oFt=s(QW);jmr=r(oFt,"TFSwinModel"),oFt.forEach(t),Dmr=r(YSe," (Swin model)"),YSe.forEach(t),Gmr=i(D),qT=n(D,"LI",{});var KSe=s(qT);ibe=n(KSe,"STRONG",{});var rFt=s(ibe);Omr=r(rFt,"t5"),rFt.forEach(t),Vmr=r(KSe," \u2014 "),HW=n(KSe,"A",{href:!0});var tFt=s(HW);Xmr=r(tFt,"TFT5Model"),tFt.forEach(t),zmr=r(KSe," (T5 model)"),KSe.forEach(t),Wmr=i(D),NT=n(D,"LI",{});var ZSe=s(NT);dbe=n(ZSe,"STRONG",{});var aFt=s(dbe);Qmr=r(aFt,"tapas"),aFt.forEach(t),Hmr=r(ZSe," \u2014 "),UW=n(ZSe,"A",{href:!0});var nFt=s(UW);Umr=r(nFt,"TFTapasModel"),nFt.forEach(t),Jmr=r(ZSe," (TAPAS model)"),ZSe.forEach(t),Ymr=i(D),jT=n(D,"LI",{});var eRe=s(jT);cbe=n(eRe,"STRONG",{});var sFt=s(cbe);Kmr=r(sFt,"transfo-xl"),sFt.forEach(t),Zmr=r(eRe," \u2014 "),JW=n(eRe,"A",{href:!0});var lFt=s(JW);egr=r(lFt,"TFTransfoXLModel"),lFt.forEach(t),ogr=r(eRe," (Transformer-XL model)"),eRe.forEach(t),rgr=i(D),DT=n(D,"LI",{});var oRe=s(DT);fbe=n(oRe,"STRONG",{});var iFt=s(fbe);tgr=r(iFt,"vit"),iFt.forEach(t),agr=r(oRe," \u2014 "),YW=n(oRe,"A",{href:!0});var dFt=s(YW);ngr=r(dFt,"TFViTModel"),dFt.forEach(t),sgr=r(oRe," (ViT model)"),oRe.forEach(t),lgr=i(D),GT=n(D,"LI",{});var rRe=s(GT);mbe=n(rRe,"STRONG",{});var cFt=s(mbe);igr=r(cFt,"vit_mae"),cFt.forEach(t),dgr=r(rRe," \u2014 "),KW=n(rRe,"A",{href:!0});var fFt=s(KW);cgr=r(fFt,"TFViTMAEModel"),fFt.forEach(t),fgr=r(rRe," (ViTMAE model)"),rRe.forEach(t),mgr=i(D),OT=n(D,"LI",{});var tRe=s(OT);gbe=n(tRe,"STRONG",{});var mFt=s(gbe);ggr=r(mFt,"wav2vec2"),mFt.forEach(t),hgr=r(tRe," \u2014 "),ZW=n(tRe,"A",{href:!0});var gFt=s(ZW);pgr=r(gFt,"TFWav2Vec2Model"),gFt.forEach(t),ugr=r(tRe," (Wav2Vec2 model)"),tRe.forEach(t),_gr=i(D),VT=n(D,"LI",{});var aRe=s(VT);hbe=n(aRe,"STRONG",{});var hFt=s(hbe);bgr=r(hFt,"xlm"),hFt.forEach(t),vgr=r(aRe," \u2014 "),eQ=n(aRe,"A",{href:!0});var pFt=s(eQ);Fgr=r(pFt,"TFXLMModel"),pFt.forEach(t),Tgr=r(aRe," (XLM model)"),aRe.forEach(t),Mgr=i(D),XT=n(D,"LI",{});var nRe=s(XT);pbe=n(nRe,"STRONG",{});var uFt=s(pbe);Egr=r(uFt,"xlm-roberta"),uFt.forEach(t),Cgr=r(nRe," \u2014 "),oQ=n(nRe,"A",{href:!0});var _Ft=s(oQ);wgr=r(_Ft,"TFXLMRobertaModel"),_Ft.forEach(t),Agr=r(nRe," (XLM-RoBERTa model)"),nRe.forEach(t),ygr=i(D),zT=n(D,"LI",{});var sRe=s(zT);ube=n(sRe,"STRONG",{});var bFt=s(ube);Lgr=r(bFt,"xlnet"),bFt.forEach(t),xgr=r(sRe," \u2014 "),rQ=n(sRe,"A",{href:!0});var vFt=s(rQ);$gr=r(vFt,"TFXLNetModel"),vFt.forEach(t),kgr=r(sRe," (XLNet model)"),sRe.forEach(t),D.forEach(t),Sgr=i(pl),T(WT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),sje=i(f),zd=n(f,"H2",{class:!0});var mGe=s(zd);QT=n(mGe,"A",{id:!0,class:!0,href:!0});var FFt=s(QT);_be=n(FFt,"SPAN",{});var TFt=s(_be);T(g8.$$.fragment,TFt),TFt.forEach(t),FFt.forEach(t),Rgr=i(mGe),bbe=n(mGe,"SPAN",{});var MFt=s(bbe);Pgr=r(MFt,"TFAutoModelForPreTraining"),MFt.forEach(t),mGe.forEach(t),lje=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(h8.$$.fragment,ul),Bgr=i(ul),Wd=n(ul,"P",{});var mee=s(Wd);Igr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tQ=n(mee,"A",{href:!0});var EFt=s(tQ);qgr=r(EFt,"from_pretrained()"),EFt.forEach(t),Ngr=r(mee," class method or the "),aQ=n(mee,"A",{href:!0});var CFt=s(aQ);jgr=r(CFt,"from_config()"),CFt.forEach(t),Dgr=r(mee,` class
method.`),mee.forEach(t),Ggr=i(ul),p8=n(ul,"P",{});var gGe=s(p8);Ogr=r(gGe,"This class cannot be instantiated directly using "),vbe=n(gGe,"CODE",{});var wFt=s(vbe);Vgr=r(wFt,"__init__()"),wFt.forEach(t),Xgr=r(gGe," (throws an error)."),gGe.forEach(t),zgr=i(ul),Lt=n(ul,"DIV",{class:!0});var A6=s(Lt);T(u8.$$.fragment,A6),Wgr=i(A6),Fbe=n(A6,"P",{});var AFt=s(Fbe);Qgr=r(AFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),AFt.forEach(t),Hgr=i(A6),Qd=n(A6,"P",{});var gee=s(Qd);Ugr=r(gee,`Note:
Loading a model from its configuration file does `),Tbe=n(gee,"STRONG",{});var yFt=s(Tbe);Jgr=r(yFt,"not"),yFt.forEach(t),Ygr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(gee,"A",{href:!0});var LFt=s(nQ);Kgr=r(LFt,"from_pretrained()"),LFt.forEach(t),Zgr=r(gee," to load the model weights."),gee.forEach(t),ehr=i(A6),T(HT.$$.fragment,A6),A6.forEach(t),ohr=i(ul),Ar=n(ul,"DIV",{class:!0});var _l=s(Ar);T(_8.$$.fragment,_l),rhr=i(_l),Mbe=n(_l,"P",{});var xFt=s(Mbe);thr=r(xFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xFt.forEach(t),ahr=i(_l),Za=n(_l,"P",{});var y6=s(Za);nhr=r(y6,"The model class to instantiate is selected based on the "),Ebe=n(y6,"CODE",{});var $Ft=s(Ebe);shr=r($Ft,"model_type"),$Ft.forEach(t),lhr=r(y6,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(y6,"CODE",{});var kFt=s(Cbe);ihr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),dhr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(y6,"CODE",{});var SFt=s(wbe);chr=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),fhr=r(y6,":"),y6.forEach(t),mhr=i(_l),se=n(_l,"UL",{});var le=s(se);UT=n(le,"LI",{});var lRe=s(UT);Abe=n(lRe,"STRONG",{});var RFt=s(Abe);ghr=r(RFt,"albert"),RFt.forEach(t),hhr=r(lRe," \u2014 "),sQ=n(lRe,"A",{href:!0});var PFt=s(sQ);phr=r(PFt,"TFAlbertForPreTraining"),PFt.forEach(t),uhr=r(lRe," (ALBERT model)"),lRe.forEach(t),_hr=i(le),JT=n(le,"LI",{});var iRe=s(JT);ybe=n(iRe,"STRONG",{});var BFt=s(ybe);bhr=r(BFt,"bart"),BFt.forEach(t),vhr=r(iRe," \u2014 "),lQ=n(iRe,"A",{href:!0});var IFt=s(lQ);Fhr=r(IFt,"TFBartForConditionalGeneration"),IFt.forEach(t),Thr=r(iRe," (BART model)"),iRe.forEach(t),Mhr=i(le),YT=n(le,"LI",{});var dRe=s(YT);Lbe=n(dRe,"STRONG",{});var qFt=s(Lbe);Ehr=r(qFt,"bert"),qFt.forEach(t),Chr=r(dRe," \u2014 "),iQ=n(dRe,"A",{href:!0});var NFt=s(iQ);whr=r(NFt,"TFBertForPreTraining"),NFt.forEach(t),Ahr=r(dRe," (BERT model)"),dRe.forEach(t),yhr=i(le),KT=n(le,"LI",{});var cRe=s(KT);xbe=n(cRe,"STRONG",{});var jFt=s(xbe);Lhr=r(jFt,"camembert"),jFt.forEach(t),xhr=r(cRe," \u2014 "),dQ=n(cRe,"A",{href:!0});var DFt=s(dQ);$hr=r(DFt,"TFCamembertForMaskedLM"),DFt.forEach(t),khr=r(cRe," (CamemBERT model)"),cRe.forEach(t),Shr=i(le),ZT=n(le,"LI",{});var fRe=s(ZT);$be=n(fRe,"STRONG",{});var GFt=s($be);Rhr=r(GFt,"ctrl"),GFt.forEach(t),Phr=r(fRe," \u2014 "),cQ=n(fRe,"A",{href:!0});var OFt=s(cQ);Bhr=r(OFt,"TFCTRLLMHeadModel"),OFt.forEach(t),Ihr=r(fRe," (CTRL model)"),fRe.forEach(t),qhr=i(le),e7=n(le,"LI",{});var mRe=s(e7);kbe=n(mRe,"STRONG",{});var VFt=s(kbe);Nhr=r(VFt,"distilbert"),VFt.forEach(t),jhr=r(mRe," \u2014 "),fQ=n(mRe,"A",{href:!0});var XFt=s(fQ);Dhr=r(XFt,"TFDistilBertForMaskedLM"),XFt.forEach(t),Ghr=r(mRe," (DistilBERT model)"),mRe.forEach(t),Ohr=i(le),o7=n(le,"LI",{});var gRe=s(o7);Sbe=n(gRe,"STRONG",{});var zFt=s(Sbe);Vhr=r(zFt,"electra"),zFt.forEach(t),Xhr=r(gRe," \u2014 "),mQ=n(gRe,"A",{href:!0});var WFt=s(mQ);zhr=r(WFt,"TFElectraForPreTraining"),WFt.forEach(t),Whr=r(gRe," (ELECTRA model)"),gRe.forEach(t),Qhr=i(le),r7=n(le,"LI",{});var hRe=s(r7);Rbe=n(hRe,"STRONG",{});var QFt=s(Rbe);Hhr=r(QFt,"flaubert"),QFt.forEach(t),Uhr=r(hRe," \u2014 "),gQ=n(hRe,"A",{href:!0});var HFt=s(gQ);Jhr=r(HFt,"TFFlaubertWithLMHeadModel"),HFt.forEach(t),Yhr=r(hRe," (FlauBERT model)"),hRe.forEach(t),Khr=i(le),t7=n(le,"LI",{});var pRe=s(t7);Pbe=n(pRe,"STRONG",{});var UFt=s(Pbe);Zhr=r(UFt,"funnel"),UFt.forEach(t),epr=r(pRe," \u2014 "),hQ=n(pRe,"A",{href:!0});var JFt=s(hQ);opr=r(JFt,"TFFunnelForPreTraining"),JFt.forEach(t),rpr=r(pRe," (Funnel Transformer model)"),pRe.forEach(t),tpr=i(le),a7=n(le,"LI",{});var uRe=s(a7);Bbe=n(uRe,"STRONG",{});var YFt=s(Bbe);apr=r(YFt,"gpt2"),YFt.forEach(t),npr=r(uRe," \u2014 "),pQ=n(uRe,"A",{href:!0});var KFt=s(pQ);spr=r(KFt,"TFGPT2LMHeadModel"),KFt.forEach(t),lpr=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),ipr=i(le),n7=n(le,"LI",{});var _Re=s(n7);Ibe=n(_Re,"STRONG",{});var ZFt=s(Ibe);dpr=r(ZFt,"layoutlm"),ZFt.forEach(t),cpr=r(_Re," \u2014 "),uQ=n(_Re,"A",{href:!0});var eTt=s(uQ);fpr=r(eTt,"TFLayoutLMForMaskedLM"),eTt.forEach(t),mpr=r(_Re," (LayoutLM model)"),_Re.forEach(t),gpr=i(le),s7=n(le,"LI",{});var bRe=s(s7);qbe=n(bRe,"STRONG",{});var oTt=s(qbe);hpr=r(oTt,"lxmert"),oTt.forEach(t),ppr=r(bRe," \u2014 "),_Q=n(bRe,"A",{href:!0});var rTt=s(_Q);upr=r(rTt,"TFLxmertForPreTraining"),rTt.forEach(t),_pr=r(bRe," (LXMERT model)"),bRe.forEach(t),bpr=i(le),l7=n(le,"LI",{});var vRe=s(l7);Nbe=n(vRe,"STRONG",{});var tTt=s(Nbe);vpr=r(tTt,"mobilebert"),tTt.forEach(t),Fpr=r(vRe," \u2014 "),bQ=n(vRe,"A",{href:!0});var aTt=s(bQ);Tpr=r(aTt,"TFMobileBertForPreTraining"),aTt.forEach(t),Mpr=r(vRe," (MobileBERT model)"),vRe.forEach(t),Epr=i(le),i7=n(le,"LI",{});var FRe=s(i7);jbe=n(FRe,"STRONG",{});var nTt=s(jbe);Cpr=r(nTt,"mpnet"),nTt.forEach(t),wpr=r(FRe," \u2014 "),vQ=n(FRe,"A",{href:!0});var sTt=s(vQ);Apr=r(sTt,"TFMPNetForMaskedLM"),sTt.forEach(t),ypr=r(FRe," (MPNet model)"),FRe.forEach(t),Lpr=i(le),d7=n(le,"LI",{});var TRe=s(d7);Dbe=n(TRe,"STRONG",{});var lTt=s(Dbe);xpr=r(lTt,"openai-gpt"),lTt.forEach(t),$pr=r(TRe," \u2014 "),FQ=n(TRe,"A",{href:!0});var iTt=s(FQ);kpr=r(iTt,"TFOpenAIGPTLMHeadModel"),iTt.forEach(t),Spr=r(TRe," (OpenAI GPT model)"),TRe.forEach(t),Rpr=i(le),c7=n(le,"LI",{});var MRe=s(c7);Gbe=n(MRe,"STRONG",{});var dTt=s(Gbe);Ppr=r(dTt,"roberta"),dTt.forEach(t),Bpr=r(MRe," \u2014 "),TQ=n(MRe,"A",{href:!0});var cTt=s(TQ);Ipr=r(cTt,"TFRobertaForMaskedLM"),cTt.forEach(t),qpr=r(MRe," (RoBERTa model)"),MRe.forEach(t),Npr=i(le),f7=n(le,"LI",{});var ERe=s(f7);Obe=n(ERe,"STRONG",{});var fTt=s(Obe);jpr=r(fTt,"t5"),fTt.forEach(t),Dpr=r(ERe," \u2014 "),MQ=n(ERe,"A",{href:!0});var mTt=s(MQ);Gpr=r(mTt,"TFT5ForConditionalGeneration"),mTt.forEach(t),Opr=r(ERe," (T5 model)"),ERe.forEach(t),Vpr=i(le),m7=n(le,"LI",{});var CRe=s(m7);Vbe=n(CRe,"STRONG",{});var gTt=s(Vbe);Xpr=r(gTt,"tapas"),gTt.forEach(t),zpr=r(CRe," \u2014 "),EQ=n(CRe,"A",{href:!0});var hTt=s(EQ);Wpr=r(hTt,"TFTapasForMaskedLM"),hTt.forEach(t),Qpr=r(CRe," (TAPAS model)"),CRe.forEach(t),Hpr=i(le),g7=n(le,"LI",{});var wRe=s(g7);Xbe=n(wRe,"STRONG",{});var pTt=s(Xbe);Upr=r(pTt,"transfo-xl"),pTt.forEach(t),Jpr=r(wRe," \u2014 "),CQ=n(wRe,"A",{href:!0});var uTt=s(CQ);Ypr=r(uTt,"TFTransfoXLLMHeadModel"),uTt.forEach(t),Kpr=r(wRe," (Transformer-XL model)"),wRe.forEach(t),Zpr=i(le),h7=n(le,"LI",{});var ARe=s(h7);zbe=n(ARe,"STRONG",{});var _Tt=s(zbe);eur=r(_Tt,"vit_mae"),_Tt.forEach(t),our=r(ARe," \u2014 "),wQ=n(ARe,"A",{href:!0});var bTt=s(wQ);rur=r(bTt,"TFViTMAEForPreTraining"),bTt.forEach(t),tur=r(ARe," (ViTMAE model)"),ARe.forEach(t),aur=i(le),p7=n(le,"LI",{});var yRe=s(p7);Wbe=n(yRe,"STRONG",{});var vTt=s(Wbe);nur=r(vTt,"xlm"),vTt.forEach(t),sur=r(yRe," \u2014 "),AQ=n(yRe,"A",{href:!0});var FTt=s(AQ);lur=r(FTt,"TFXLMWithLMHeadModel"),FTt.forEach(t),iur=r(yRe," (XLM model)"),yRe.forEach(t),dur=i(le),u7=n(le,"LI",{});var LRe=s(u7);Qbe=n(LRe,"STRONG",{});var TTt=s(Qbe);cur=r(TTt,"xlm-roberta"),TTt.forEach(t),fur=r(LRe," \u2014 "),yQ=n(LRe,"A",{href:!0});var MTt=s(yQ);mur=r(MTt,"TFXLMRobertaForMaskedLM"),MTt.forEach(t),gur=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),hur=i(le),_7=n(le,"LI",{});var xRe=s(_7);Hbe=n(xRe,"STRONG",{});var ETt=s(Hbe);pur=r(ETt,"xlnet"),ETt.forEach(t),uur=r(xRe," \u2014 "),LQ=n(xRe,"A",{href:!0});var CTt=s(LQ);_ur=r(CTt,"TFXLNetLMHeadModel"),CTt.forEach(t),bur=r(xRe," (XLNet model)"),xRe.forEach(t),le.forEach(t),vur=i(_l),T(b7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),ije=i(f),Hd=n(f,"H2",{class:!0});var hGe=s(Hd);v7=n(hGe,"A",{id:!0,class:!0,href:!0});var wTt=s(v7);Ube=n(wTt,"SPAN",{});var ATt=s(Ube);T(b8.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),Fur=i(hGe),Jbe=n(hGe,"SPAN",{});var yTt=s(Jbe);Tur=r(yTt,"TFAutoModelForCausalLM"),yTt.forEach(t),hGe.forEach(t),dje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(v8.$$.fragment,bl),Mur=i(bl),Ud=n(bl,"P",{});var hee=s(Ud);Eur=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xQ=n(hee,"A",{href:!0});var LTt=s(xQ);Cur=r(LTt,"from_pretrained()"),LTt.forEach(t),wur=r(hee," class method or the "),$Q=n(hee,"A",{href:!0});var xTt=s($Q);Aur=r(xTt,"from_config()"),xTt.forEach(t),yur=r(hee,` class
method.`),hee.forEach(t),Lur=i(bl),F8=n(bl,"P",{});var pGe=s(F8);xur=r(pGe,"This class cannot be instantiated directly using "),Ybe=n(pGe,"CODE",{});var $Tt=s(Ybe);$ur=r($Tt,"__init__()"),$Tt.forEach(t),kur=r(pGe," (throws an error)."),pGe.forEach(t),Sur=i(bl),xt=n(bl,"DIV",{class:!0});var L6=s(xt);T(T8.$$.fragment,L6),Rur=i(L6),Kbe=n(L6,"P",{});var kTt=s(Kbe);Pur=r(kTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kTt.forEach(t),Bur=i(L6),Jd=n(L6,"P",{});var pee=s(Jd);Iur=r(pee,`Note:
Loading a model from its configuration file does `),Zbe=n(pee,"STRONG",{});var STt=s(Zbe);qur=r(STt,"not"),STt.forEach(t),Nur=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(pee,"A",{href:!0});var RTt=s(kQ);jur=r(RTt,"from_pretrained()"),RTt.forEach(t),Dur=r(pee," to load the model weights."),pee.forEach(t),Gur=i(L6),T(F7.$$.fragment,L6),L6.forEach(t),Our=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(M8.$$.fragment,vl),Vur=i(vl),e4e=n(vl,"P",{});var PTt=s(e4e);Xur=r(PTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PTt.forEach(t),zur=i(vl),en=n(vl,"P",{});var x6=s(en);Wur=r(x6,"The model class to instantiate is selected based on the "),o4e=n(x6,"CODE",{});var BTt=s(o4e);Qur=r(BTt,"model_type"),BTt.forEach(t),Hur=r(x6,` property of the config object (either
passed as an argument or loaded from `),r4e=n(x6,"CODE",{});var ITt=s(r4e);Uur=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),Jur=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(x6,"CODE",{});var qTt=s(t4e);Yur=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),Kur=r(x6,":"),x6.forEach(t),Zur=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);T7=n(Ce,"LI",{});var $Re=s(T7);a4e=n($Re,"STRONG",{});var NTt=s(a4e);e_r=r(NTt,"bert"),NTt.forEach(t),o_r=r($Re," \u2014 "),SQ=n($Re,"A",{href:!0});var jTt=s(SQ);r_r=r(jTt,"TFBertLMHeadModel"),jTt.forEach(t),t_r=r($Re," (BERT model)"),$Re.forEach(t),a_r=i(Ce),M7=n(Ce,"LI",{});var kRe=s(M7);n4e=n(kRe,"STRONG",{});var DTt=s(n4e);n_r=r(DTt,"camembert"),DTt.forEach(t),s_r=r(kRe," \u2014 "),RQ=n(kRe,"A",{href:!0});var GTt=s(RQ);l_r=r(GTt,"TFCamembertForCausalLM"),GTt.forEach(t),i_r=r(kRe," (CamemBERT model)"),kRe.forEach(t),d_r=i(Ce),E7=n(Ce,"LI",{});var SRe=s(E7);s4e=n(SRe,"STRONG",{});var OTt=s(s4e);c_r=r(OTt,"ctrl"),OTt.forEach(t),f_r=r(SRe," \u2014 "),PQ=n(SRe,"A",{href:!0});var VTt=s(PQ);m_r=r(VTt,"TFCTRLLMHeadModel"),VTt.forEach(t),g_r=r(SRe," (CTRL model)"),SRe.forEach(t),h_r=i(Ce),C7=n(Ce,"LI",{});var RRe=s(C7);l4e=n(RRe,"STRONG",{});var XTt=s(l4e);p_r=r(XTt,"gpt2"),XTt.forEach(t),u_r=r(RRe," \u2014 "),BQ=n(RRe,"A",{href:!0});var zTt=s(BQ);__r=r(zTt,"TFGPT2LMHeadModel"),zTt.forEach(t),b_r=r(RRe," (OpenAI GPT-2 model)"),RRe.forEach(t),v_r=i(Ce),w7=n(Ce,"LI",{});var PRe=s(w7);i4e=n(PRe,"STRONG",{});var WTt=s(i4e);F_r=r(WTt,"gptj"),WTt.forEach(t),T_r=r(PRe," \u2014 "),IQ=n(PRe,"A",{href:!0});var QTt=s(IQ);M_r=r(QTt,"TFGPTJForCausalLM"),QTt.forEach(t),E_r=r(PRe," (GPT-J model)"),PRe.forEach(t),C_r=i(Ce),A7=n(Ce,"LI",{});var BRe=s(A7);d4e=n(BRe,"STRONG",{});var HTt=s(d4e);w_r=r(HTt,"openai-gpt"),HTt.forEach(t),A_r=r(BRe," \u2014 "),qQ=n(BRe,"A",{href:!0});var UTt=s(qQ);y_r=r(UTt,"TFOpenAIGPTLMHeadModel"),UTt.forEach(t),L_r=r(BRe," (OpenAI GPT model)"),BRe.forEach(t),x_r=i(Ce),y7=n(Ce,"LI",{});var IRe=s(y7);c4e=n(IRe,"STRONG",{});var JTt=s(c4e);$_r=r(JTt,"rembert"),JTt.forEach(t),k_r=r(IRe," \u2014 "),NQ=n(IRe,"A",{href:!0});var YTt=s(NQ);S_r=r(YTt,"TFRemBertForCausalLM"),YTt.forEach(t),R_r=r(IRe," (RemBERT model)"),IRe.forEach(t),P_r=i(Ce),L7=n(Ce,"LI",{});var qRe=s(L7);f4e=n(qRe,"STRONG",{});var KTt=s(f4e);B_r=r(KTt,"roberta"),KTt.forEach(t),I_r=r(qRe," \u2014 "),jQ=n(qRe,"A",{href:!0});var ZTt=s(jQ);q_r=r(ZTt,"TFRobertaForCausalLM"),ZTt.forEach(t),N_r=r(qRe," (RoBERTa model)"),qRe.forEach(t),j_r=i(Ce),x7=n(Ce,"LI",{});var NRe=s(x7);m4e=n(NRe,"STRONG",{});var e7t=s(m4e);D_r=r(e7t,"roformer"),e7t.forEach(t),G_r=r(NRe," \u2014 "),DQ=n(NRe,"A",{href:!0});var o7t=s(DQ);O_r=r(o7t,"TFRoFormerForCausalLM"),o7t.forEach(t),V_r=r(NRe," (RoFormer model)"),NRe.forEach(t),X_r=i(Ce),$7=n(Ce,"LI",{});var jRe=s($7);g4e=n(jRe,"STRONG",{});var r7t=s(g4e);z_r=r(r7t,"transfo-xl"),r7t.forEach(t),W_r=r(jRe," \u2014 "),GQ=n(jRe,"A",{href:!0});var t7t=s(GQ);Q_r=r(t7t,"TFTransfoXLLMHeadModel"),t7t.forEach(t),H_r=r(jRe," (Transformer-XL model)"),jRe.forEach(t),U_r=i(Ce),k7=n(Ce,"LI",{});var DRe=s(k7);h4e=n(DRe,"STRONG",{});var a7t=s(h4e);J_r=r(a7t,"xlm"),a7t.forEach(t),Y_r=r(DRe," \u2014 "),OQ=n(DRe,"A",{href:!0});var n7t=s(OQ);K_r=r(n7t,"TFXLMWithLMHeadModel"),n7t.forEach(t),Z_r=r(DRe," (XLM model)"),DRe.forEach(t),e2r=i(Ce),S7=n(Ce,"LI",{});var GRe=s(S7);p4e=n(GRe,"STRONG",{});var s7t=s(p4e);o2r=r(s7t,"xlnet"),s7t.forEach(t),r2r=r(GRe," \u2014 "),VQ=n(GRe,"A",{href:!0});var l7t=s(VQ);t2r=r(l7t,"TFXLNetLMHeadModel"),l7t.forEach(t),a2r=r(GRe," (XLNet model)"),GRe.forEach(t),Ce.forEach(t),n2r=i(vl),T(R7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),cje=i(f),Yd=n(f,"H2",{class:!0});var uGe=s(Yd);P7=n(uGe,"A",{id:!0,class:!0,href:!0});var i7t=s(P7);u4e=n(i7t,"SPAN",{});var d7t=s(u4e);T(E8.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),s2r=i(uGe),_4e=n(uGe,"SPAN",{});var c7t=s(_4e);l2r=r(c7t,"TFAutoModelForImageClassification"),c7t.forEach(t),uGe.forEach(t),fje=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(C8.$$.fragment,Fl),i2r=i(Fl),Kd=n(Fl,"P",{});var uee=s(Kd);d2r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XQ=n(uee,"A",{href:!0});var f7t=s(XQ);c2r=r(f7t,"from_pretrained()"),f7t.forEach(t),f2r=r(uee," class method or the "),zQ=n(uee,"A",{href:!0});var m7t=s(zQ);m2r=r(m7t,"from_config()"),m7t.forEach(t),g2r=r(uee,` class
method.`),uee.forEach(t),h2r=i(Fl),w8=n(Fl,"P",{});var _Ge=s(w8);p2r=r(_Ge,"This class cannot be instantiated directly using "),b4e=n(_Ge,"CODE",{});var g7t=s(b4e);u2r=r(g7t,"__init__()"),g7t.forEach(t),_2r=r(_Ge," (throws an error)."),_Ge.forEach(t),b2r=i(Fl),$t=n(Fl,"DIV",{class:!0});var $6=s($t);T(A8.$$.fragment,$6),v2r=i($6),v4e=n($6,"P",{});var h7t=s(v4e);F2r=r(h7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h7t.forEach(t),T2r=i($6),Zd=n($6,"P",{});var _ee=s(Zd);M2r=r(_ee,`Note:
Loading a model from its configuration file does `),F4e=n(_ee,"STRONG",{});var p7t=s(F4e);E2r=r(p7t,"not"),p7t.forEach(t),C2r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(_ee,"A",{href:!0});var u7t=s(WQ);w2r=r(u7t,"from_pretrained()"),u7t.forEach(t),A2r=r(_ee," to load the model weights."),_ee.forEach(t),y2r=i($6),T(B7.$$.fragment,$6),$6.forEach(t),L2r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(y8.$$.fragment,Tl),x2r=i(Tl),T4e=n(Tl,"P",{});var _7t=s(T4e);$2r=r(_7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_7t.forEach(t),k2r=i(Tl),on=n(Tl,"P",{});var k6=s(on);S2r=r(k6,"The model class to instantiate is selected based on the "),M4e=n(k6,"CODE",{});var b7t=s(M4e);R2r=r(b7t,"model_type"),b7t.forEach(t),P2r=r(k6,` property of the config object (either
passed as an argument or loaded from `),E4e=n(k6,"CODE",{});var v7t=s(E4e);B2r=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),I2r=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(k6,"CODE",{});var F7t=s(C4e);q2r=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),N2r=r(k6,":"),k6.forEach(t),j2r=i(Tl),rn=n(Tl,"UL",{});var S6=s(rn);I7=n(S6,"LI",{});var ORe=s(I7);w4e=n(ORe,"STRONG",{});var T7t=s(w4e);D2r=r(T7t,"convnext"),T7t.forEach(t),G2r=r(ORe," \u2014 "),QQ=n(ORe,"A",{href:!0});var M7t=s(QQ);O2r=r(M7t,"TFConvNextForImageClassification"),M7t.forEach(t),V2r=r(ORe," (ConvNext model)"),ORe.forEach(t),X2r=i(S6),q7=n(S6,"LI",{});var VRe=s(q7);A4e=n(VRe,"STRONG",{});var E7t=s(A4e);z2r=r(E7t,"data2vec-vision"),E7t.forEach(t),W2r=r(VRe," \u2014 "),HQ=n(VRe,"A",{href:!0});var C7t=s(HQ);Q2r=r(C7t,"TFData2VecVisionForImageClassification"),C7t.forEach(t),H2r=r(VRe," (Data2VecVision model)"),VRe.forEach(t),U2r=i(S6),N7=n(S6,"LI",{});var XRe=s(N7);y4e=n(XRe,"STRONG",{});var w7t=s(y4e);J2r=r(w7t,"swin"),w7t.forEach(t),Y2r=r(XRe," \u2014 "),UQ=n(XRe,"A",{href:!0});var A7t=s(UQ);K2r=r(A7t,"TFSwinForImageClassification"),A7t.forEach(t),Z2r=r(XRe," (Swin model)"),XRe.forEach(t),e1r=i(S6),j7=n(S6,"LI",{});var zRe=s(j7);L4e=n(zRe,"STRONG",{});var y7t=s(L4e);o1r=r(y7t,"vit"),y7t.forEach(t),r1r=r(zRe," \u2014 "),JQ=n(zRe,"A",{href:!0});var L7t=s(JQ);t1r=r(L7t,"TFViTForImageClassification"),L7t.forEach(t),a1r=r(zRe," (ViT model)"),zRe.forEach(t),S6.forEach(t),n1r=i(Tl),T(D7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),mje=i(f),ec=n(f,"H2",{class:!0});var bGe=s(ec);G7=n(bGe,"A",{id:!0,class:!0,href:!0});var x7t=s(G7);x4e=n(x7t,"SPAN",{});var $7t=s(x4e);T(L8.$$.fragment,$7t),$7t.forEach(t),x7t.forEach(t),s1r=i(bGe),$4e=n(bGe,"SPAN",{});var k7t=s($4e);l1r=r(k7t,"TFAutoModelForMaskedLM"),k7t.forEach(t),bGe.forEach(t),gje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(x8.$$.fragment,Ml),i1r=i(Ml),oc=n(Ml,"P",{});var bee=s(oc);d1r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),YQ=n(bee,"A",{href:!0});var S7t=s(YQ);c1r=r(S7t,"from_pretrained()"),S7t.forEach(t),f1r=r(bee," class method or the "),KQ=n(bee,"A",{href:!0});var R7t=s(KQ);m1r=r(R7t,"from_config()"),R7t.forEach(t),g1r=r(bee,` class
method.`),bee.forEach(t),h1r=i(Ml),$8=n(Ml,"P",{});var vGe=s($8);p1r=r(vGe,"This class cannot be instantiated directly using "),k4e=n(vGe,"CODE",{});var P7t=s(k4e);u1r=r(P7t,"__init__()"),P7t.forEach(t),_1r=r(vGe," (throws an error)."),vGe.forEach(t),b1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var R6=s(kt);T(k8.$$.fragment,R6),v1r=i(R6),S4e=n(R6,"P",{});var B7t=s(S4e);F1r=r(B7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B7t.forEach(t),T1r=i(R6),rc=n(R6,"P",{});var vee=s(rc);M1r=r(vee,`Note:
Loading a model from its configuration file does `),R4e=n(vee,"STRONG",{});var I7t=s(R4e);E1r=r(I7t,"not"),I7t.forEach(t),C1r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(vee,"A",{href:!0});var q7t=s(ZQ);w1r=r(q7t,"from_pretrained()"),q7t.forEach(t),A1r=r(vee," to load the model weights."),vee.forEach(t),y1r=i(R6),T(O7.$$.fragment,R6),R6.forEach(t),L1r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(S8.$$.fragment,El),x1r=i(El),P4e=n(El,"P",{});var N7t=s(P4e);$1r=r(N7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N7t.forEach(t),k1r=i(El),tn=n(El,"P",{});var P6=s(tn);S1r=r(P6,"The model class to instantiate is selected based on the "),B4e=n(P6,"CODE",{});var j7t=s(B4e);R1r=r(j7t,"model_type"),j7t.forEach(t),P1r=r(P6,` property of the config object (either
passed as an argument or loaded from `),I4e=n(P6,"CODE",{});var D7t=s(I4e);B1r=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),I1r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(P6,"CODE",{});var G7t=s(q4e);q1r=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),N1r=r(P6,":"),P6.forEach(t),j1r=i(El),ie=n(El,"UL",{});var fe=s(ie);V7=n(fe,"LI",{});var WRe=s(V7);N4e=n(WRe,"STRONG",{});var O7t=s(N4e);D1r=r(O7t,"albert"),O7t.forEach(t),G1r=r(WRe," \u2014 "),eH=n(WRe,"A",{href:!0});var V7t=s(eH);O1r=r(V7t,"TFAlbertForMaskedLM"),V7t.forEach(t),V1r=r(WRe," (ALBERT model)"),WRe.forEach(t),X1r=i(fe),X7=n(fe,"LI",{});var QRe=s(X7);j4e=n(QRe,"STRONG",{});var X7t=s(j4e);z1r=r(X7t,"bert"),X7t.forEach(t),W1r=r(QRe," \u2014 "),oH=n(QRe,"A",{href:!0});var z7t=s(oH);Q1r=r(z7t,"TFBertForMaskedLM"),z7t.forEach(t),H1r=r(QRe," (BERT model)"),QRe.forEach(t),U1r=i(fe),z7=n(fe,"LI",{});var HRe=s(z7);D4e=n(HRe,"STRONG",{});var W7t=s(D4e);J1r=r(W7t,"camembert"),W7t.forEach(t),Y1r=r(HRe," \u2014 "),rH=n(HRe,"A",{href:!0});var Q7t=s(rH);K1r=r(Q7t,"TFCamembertForMaskedLM"),Q7t.forEach(t),Z1r=r(HRe," (CamemBERT model)"),HRe.forEach(t),ebr=i(fe),W7=n(fe,"LI",{});var URe=s(W7);G4e=n(URe,"STRONG",{});var H7t=s(G4e);obr=r(H7t,"convbert"),H7t.forEach(t),rbr=r(URe," \u2014 "),tH=n(URe,"A",{href:!0});var U7t=s(tH);tbr=r(U7t,"TFConvBertForMaskedLM"),U7t.forEach(t),abr=r(URe," (ConvBERT model)"),URe.forEach(t),nbr=i(fe),Q7=n(fe,"LI",{});var JRe=s(Q7);O4e=n(JRe,"STRONG",{});var J7t=s(O4e);sbr=r(J7t,"deberta"),J7t.forEach(t),lbr=r(JRe," \u2014 "),aH=n(JRe,"A",{href:!0});var Y7t=s(aH);ibr=r(Y7t,"TFDebertaForMaskedLM"),Y7t.forEach(t),dbr=r(JRe," (DeBERTa model)"),JRe.forEach(t),cbr=i(fe),H7=n(fe,"LI",{});var YRe=s(H7);V4e=n(YRe,"STRONG",{});var K7t=s(V4e);fbr=r(K7t,"deberta-v2"),K7t.forEach(t),mbr=r(YRe," \u2014 "),nH=n(YRe,"A",{href:!0});var Z7t=s(nH);gbr=r(Z7t,"TFDebertaV2ForMaskedLM"),Z7t.forEach(t),hbr=r(YRe," (DeBERTa-v2 model)"),YRe.forEach(t),pbr=i(fe),U7=n(fe,"LI",{});var KRe=s(U7);X4e=n(KRe,"STRONG",{});var eMt=s(X4e);ubr=r(eMt,"distilbert"),eMt.forEach(t),_br=r(KRe," \u2014 "),sH=n(KRe,"A",{href:!0});var oMt=s(sH);bbr=r(oMt,"TFDistilBertForMaskedLM"),oMt.forEach(t),vbr=r(KRe," (DistilBERT model)"),KRe.forEach(t),Fbr=i(fe),J7=n(fe,"LI",{});var ZRe=s(J7);z4e=n(ZRe,"STRONG",{});var rMt=s(z4e);Tbr=r(rMt,"electra"),rMt.forEach(t),Mbr=r(ZRe," \u2014 "),lH=n(ZRe,"A",{href:!0});var tMt=s(lH);Ebr=r(tMt,"TFElectraForMaskedLM"),tMt.forEach(t),Cbr=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),wbr=i(fe),Y7=n(fe,"LI",{});var ePe=s(Y7);W4e=n(ePe,"STRONG",{});var aMt=s(W4e);Abr=r(aMt,"flaubert"),aMt.forEach(t),ybr=r(ePe," \u2014 "),iH=n(ePe,"A",{href:!0});var nMt=s(iH);Lbr=r(nMt,"TFFlaubertWithLMHeadModel"),nMt.forEach(t),xbr=r(ePe," (FlauBERT model)"),ePe.forEach(t),$br=i(fe),K7=n(fe,"LI",{});var oPe=s(K7);Q4e=n(oPe,"STRONG",{});var sMt=s(Q4e);kbr=r(sMt,"funnel"),sMt.forEach(t),Sbr=r(oPe," \u2014 "),dH=n(oPe,"A",{href:!0});var lMt=s(dH);Rbr=r(lMt,"TFFunnelForMaskedLM"),lMt.forEach(t),Pbr=r(oPe," (Funnel Transformer model)"),oPe.forEach(t),Bbr=i(fe),Z7=n(fe,"LI",{});var rPe=s(Z7);H4e=n(rPe,"STRONG",{});var iMt=s(H4e);Ibr=r(iMt,"layoutlm"),iMt.forEach(t),qbr=r(rPe," \u2014 "),cH=n(rPe,"A",{href:!0});var dMt=s(cH);Nbr=r(dMt,"TFLayoutLMForMaskedLM"),dMt.forEach(t),jbr=r(rPe," (LayoutLM model)"),rPe.forEach(t),Dbr=i(fe),eM=n(fe,"LI",{});var tPe=s(eM);U4e=n(tPe,"STRONG",{});var cMt=s(U4e);Gbr=r(cMt,"longformer"),cMt.forEach(t),Obr=r(tPe," \u2014 "),fH=n(tPe,"A",{href:!0});var fMt=s(fH);Vbr=r(fMt,"TFLongformerForMaskedLM"),fMt.forEach(t),Xbr=r(tPe," (Longformer model)"),tPe.forEach(t),zbr=i(fe),oM=n(fe,"LI",{});var aPe=s(oM);J4e=n(aPe,"STRONG",{});var mMt=s(J4e);Wbr=r(mMt,"mobilebert"),mMt.forEach(t),Qbr=r(aPe," \u2014 "),mH=n(aPe,"A",{href:!0});var gMt=s(mH);Hbr=r(gMt,"TFMobileBertForMaskedLM"),gMt.forEach(t),Ubr=r(aPe," (MobileBERT model)"),aPe.forEach(t),Jbr=i(fe),rM=n(fe,"LI",{});var nPe=s(rM);Y4e=n(nPe,"STRONG",{});var hMt=s(Y4e);Ybr=r(hMt,"mpnet"),hMt.forEach(t),Kbr=r(nPe," \u2014 "),gH=n(nPe,"A",{href:!0});var pMt=s(gH);Zbr=r(pMt,"TFMPNetForMaskedLM"),pMt.forEach(t),e4r=r(nPe," (MPNet model)"),nPe.forEach(t),o4r=i(fe),tM=n(fe,"LI",{});var sPe=s(tM);K4e=n(sPe,"STRONG",{});var uMt=s(K4e);r4r=r(uMt,"rembert"),uMt.forEach(t),t4r=r(sPe," \u2014 "),hH=n(sPe,"A",{href:!0});var _Mt=s(hH);a4r=r(_Mt,"TFRemBertForMaskedLM"),_Mt.forEach(t),n4r=r(sPe," (RemBERT model)"),sPe.forEach(t),s4r=i(fe),aM=n(fe,"LI",{});var lPe=s(aM);Z4e=n(lPe,"STRONG",{});var bMt=s(Z4e);l4r=r(bMt,"roberta"),bMt.forEach(t),i4r=r(lPe," \u2014 "),pH=n(lPe,"A",{href:!0});var vMt=s(pH);d4r=r(vMt,"TFRobertaForMaskedLM"),vMt.forEach(t),c4r=r(lPe," (RoBERTa model)"),lPe.forEach(t),f4r=i(fe),nM=n(fe,"LI",{});var iPe=s(nM);eve=n(iPe,"STRONG",{});var FMt=s(eve);m4r=r(FMt,"roformer"),FMt.forEach(t),g4r=r(iPe," \u2014 "),uH=n(iPe,"A",{href:!0});var TMt=s(uH);h4r=r(TMt,"TFRoFormerForMaskedLM"),TMt.forEach(t),p4r=r(iPe," (RoFormer model)"),iPe.forEach(t),u4r=i(fe),sM=n(fe,"LI",{});var dPe=s(sM);ove=n(dPe,"STRONG",{});var MMt=s(ove);_4r=r(MMt,"tapas"),MMt.forEach(t),b4r=r(dPe," \u2014 "),_H=n(dPe,"A",{href:!0});var EMt=s(_H);v4r=r(EMt,"TFTapasForMaskedLM"),EMt.forEach(t),F4r=r(dPe," (TAPAS model)"),dPe.forEach(t),T4r=i(fe),lM=n(fe,"LI",{});var cPe=s(lM);rve=n(cPe,"STRONG",{});var CMt=s(rve);M4r=r(CMt,"xlm"),CMt.forEach(t),E4r=r(cPe," \u2014 "),bH=n(cPe,"A",{href:!0});var wMt=s(bH);C4r=r(wMt,"TFXLMWithLMHeadModel"),wMt.forEach(t),w4r=r(cPe," (XLM model)"),cPe.forEach(t),A4r=i(fe),iM=n(fe,"LI",{});var fPe=s(iM);tve=n(fPe,"STRONG",{});var AMt=s(tve);y4r=r(AMt,"xlm-roberta"),AMt.forEach(t),L4r=r(fPe," \u2014 "),vH=n(fPe,"A",{href:!0});var yMt=s(vH);x4r=r(yMt,"TFXLMRobertaForMaskedLM"),yMt.forEach(t),$4r=r(fPe," (XLM-RoBERTa model)"),fPe.forEach(t),fe.forEach(t),k4r=i(El),T(dM.$$.fragment,El),El.forEach(t),Ml.forEach(t),hje=i(f),tc=n(f,"H2",{class:!0});var FGe=s(tc);cM=n(FGe,"A",{id:!0,class:!0,href:!0});var LMt=s(cM);ave=n(LMt,"SPAN",{});var xMt=s(ave);T(R8.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),S4r=i(FGe),nve=n(FGe,"SPAN",{});var $Mt=s(nve);R4r=r($Mt,"TFAutoModelForSeq2SeqLM"),$Mt.forEach(t),FGe.forEach(t),pje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(P8.$$.fragment,Cl),P4r=i(Cl),ac=n(Cl,"P",{});var Fee=s(ac);B4r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FH=n(Fee,"A",{href:!0});var kMt=s(FH);I4r=r(kMt,"from_pretrained()"),kMt.forEach(t),q4r=r(Fee," class method or the "),TH=n(Fee,"A",{href:!0});var SMt=s(TH);N4r=r(SMt,"from_config()"),SMt.forEach(t),j4r=r(Fee,` class
method.`),Fee.forEach(t),D4r=i(Cl),B8=n(Cl,"P",{});var TGe=s(B8);G4r=r(TGe,"This class cannot be instantiated directly using "),sve=n(TGe,"CODE",{});var RMt=s(sve);O4r=r(RMt,"__init__()"),RMt.forEach(t),V4r=r(TGe," (throws an error)."),TGe.forEach(t),X4r=i(Cl),St=n(Cl,"DIV",{class:!0});var B6=s(St);T(I8.$$.fragment,B6),z4r=i(B6),lve=n(B6,"P",{});var PMt=s(lve);W4r=r(PMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PMt.forEach(t),Q4r=i(B6),nc=n(B6,"P",{});var Tee=s(nc);H4r=r(Tee,`Note:
Loading a model from its configuration file does `),ive=n(Tee,"STRONG",{});var BMt=s(ive);U4r=r(BMt,"not"),BMt.forEach(t),J4r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Tee,"A",{href:!0});var IMt=s(MH);Y4r=r(IMt,"from_pretrained()"),IMt.forEach(t),K4r=r(Tee," to load the model weights."),Tee.forEach(t),Z4r=i(B6),T(fM.$$.fragment,B6),B6.forEach(t),evr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(q8.$$.fragment,wl),ovr=i(wl),dve=n(wl,"P",{});var qMt=s(dve);rvr=r(qMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qMt.forEach(t),tvr=i(wl),an=n(wl,"P",{});var I6=s(an);avr=r(I6,"The model class to instantiate is selected based on the "),cve=n(I6,"CODE",{});var NMt=s(cve);nvr=r(NMt,"model_type"),NMt.forEach(t),svr=r(I6,` property of the config object (either
passed as an argument or loaded from `),fve=n(I6,"CODE",{});var jMt=s(fve);lvr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),ivr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(I6,"CODE",{});var DMt=s(mve);dvr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),cvr=r(I6,":"),I6.forEach(t),fvr=i(wl),ye=n(wl,"UL",{});var Be=s(ye);mM=n(Be,"LI",{});var mPe=s(mM);gve=n(mPe,"STRONG",{});var GMt=s(gve);mvr=r(GMt,"bart"),GMt.forEach(t),gvr=r(mPe," \u2014 "),EH=n(mPe,"A",{href:!0});var OMt=s(EH);hvr=r(OMt,"TFBartForConditionalGeneration"),OMt.forEach(t),pvr=r(mPe," (BART model)"),mPe.forEach(t),uvr=i(Be),gM=n(Be,"LI",{});var gPe=s(gM);hve=n(gPe,"STRONG",{});var VMt=s(hve);_vr=r(VMt,"blenderbot"),VMt.forEach(t),bvr=r(gPe," \u2014 "),CH=n(gPe,"A",{href:!0});var XMt=s(CH);vvr=r(XMt,"TFBlenderbotForConditionalGeneration"),XMt.forEach(t),Fvr=r(gPe," (Blenderbot model)"),gPe.forEach(t),Tvr=i(Be),hM=n(Be,"LI",{});var hPe=s(hM);pve=n(hPe,"STRONG",{});var zMt=s(pve);Mvr=r(zMt,"blenderbot-small"),zMt.forEach(t),Evr=r(hPe," \u2014 "),wH=n(hPe,"A",{href:!0});var WMt=s(wH);Cvr=r(WMt,"TFBlenderbotSmallForConditionalGeneration"),WMt.forEach(t),wvr=r(hPe," (BlenderbotSmall model)"),hPe.forEach(t),Avr=i(Be),pM=n(Be,"LI",{});var pPe=s(pM);uve=n(pPe,"STRONG",{});var QMt=s(uve);yvr=r(QMt,"encoder-decoder"),QMt.forEach(t),Lvr=r(pPe," \u2014 "),AH=n(pPe,"A",{href:!0});var HMt=s(AH);xvr=r(HMt,"TFEncoderDecoderModel"),HMt.forEach(t),$vr=r(pPe," (Encoder decoder model)"),pPe.forEach(t),kvr=i(Be),uM=n(Be,"LI",{});var uPe=s(uM);_ve=n(uPe,"STRONG",{});var UMt=s(_ve);Svr=r(UMt,"led"),UMt.forEach(t),Rvr=r(uPe," \u2014 "),yH=n(uPe,"A",{href:!0});var JMt=s(yH);Pvr=r(JMt,"TFLEDForConditionalGeneration"),JMt.forEach(t),Bvr=r(uPe," (LED model)"),uPe.forEach(t),Ivr=i(Be),_M=n(Be,"LI",{});var _Pe=s(_M);bve=n(_Pe,"STRONG",{});var YMt=s(bve);qvr=r(YMt,"marian"),YMt.forEach(t),Nvr=r(_Pe," \u2014 "),LH=n(_Pe,"A",{href:!0});var KMt=s(LH);jvr=r(KMt,"TFMarianMTModel"),KMt.forEach(t),Dvr=r(_Pe," (Marian model)"),_Pe.forEach(t),Gvr=i(Be),bM=n(Be,"LI",{});var bPe=s(bM);vve=n(bPe,"STRONG",{});var ZMt=s(vve);Ovr=r(ZMt,"mbart"),ZMt.forEach(t),Vvr=r(bPe," \u2014 "),xH=n(bPe,"A",{href:!0});var eEt=s(xH);Xvr=r(eEt,"TFMBartForConditionalGeneration"),eEt.forEach(t),zvr=r(bPe," (mBART model)"),bPe.forEach(t),Wvr=i(Be),vM=n(Be,"LI",{});var vPe=s(vM);Fve=n(vPe,"STRONG",{});var oEt=s(Fve);Qvr=r(oEt,"mt5"),oEt.forEach(t),Hvr=r(vPe," \u2014 "),$H=n(vPe,"A",{href:!0});var rEt=s($H);Uvr=r(rEt,"TFMT5ForConditionalGeneration"),rEt.forEach(t),Jvr=r(vPe," (mT5 model)"),vPe.forEach(t),Yvr=i(Be),FM=n(Be,"LI",{});var FPe=s(FM);Tve=n(FPe,"STRONG",{});var tEt=s(Tve);Kvr=r(tEt,"pegasus"),tEt.forEach(t),Zvr=r(FPe," \u2014 "),kH=n(FPe,"A",{href:!0});var aEt=s(kH);e5r=r(aEt,"TFPegasusForConditionalGeneration"),aEt.forEach(t),o5r=r(FPe," (Pegasus model)"),FPe.forEach(t),r5r=i(Be),TM=n(Be,"LI",{});var TPe=s(TM);Mve=n(TPe,"STRONG",{});var nEt=s(Mve);t5r=r(nEt,"t5"),nEt.forEach(t),a5r=r(TPe," \u2014 "),SH=n(TPe,"A",{href:!0});var sEt=s(SH);n5r=r(sEt,"TFT5ForConditionalGeneration"),sEt.forEach(t),s5r=r(TPe," (T5 model)"),TPe.forEach(t),Be.forEach(t),l5r=i(wl),T(MM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),uje=i(f),sc=n(f,"H2",{class:!0});var MGe=s(sc);EM=n(MGe,"A",{id:!0,class:!0,href:!0});var lEt=s(EM);Eve=n(lEt,"SPAN",{});var iEt=s(Eve);T(N8.$$.fragment,iEt),iEt.forEach(t),lEt.forEach(t),i5r=i(MGe),Cve=n(MGe,"SPAN",{});var dEt=s(Cve);d5r=r(dEt,"TFAutoModelForSequenceClassification"),dEt.forEach(t),MGe.forEach(t),_je=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(j8.$$.fragment,Al),c5r=i(Al),lc=n(Al,"P",{});var Mee=s(lc);f5r=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RH=n(Mee,"A",{href:!0});var cEt=s(RH);m5r=r(cEt,"from_pretrained()"),cEt.forEach(t),g5r=r(Mee," class method or the "),PH=n(Mee,"A",{href:!0});var fEt=s(PH);h5r=r(fEt,"from_config()"),fEt.forEach(t),p5r=r(Mee,` class
method.`),Mee.forEach(t),u5r=i(Al),D8=n(Al,"P",{});var EGe=s(D8);_5r=r(EGe,"This class cannot be instantiated directly using "),wve=n(EGe,"CODE",{});var mEt=s(wve);b5r=r(mEt,"__init__()"),mEt.forEach(t),v5r=r(EGe," (throws an error)."),EGe.forEach(t),F5r=i(Al),Rt=n(Al,"DIV",{class:!0});var q6=s(Rt);T(G8.$$.fragment,q6),T5r=i(q6),Ave=n(q6,"P",{});var gEt=s(Ave);M5r=r(gEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gEt.forEach(t),E5r=i(q6),ic=n(q6,"P",{});var Eee=s(ic);C5r=r(Eee,`Note:
Loading a model from its configuration file does `),yve=n(Eee,"STRONG",{});var hEt=s(yve);w5r=r(hEt,"not"),hEt.forEach(t),A5r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Eee,"A",{href:!0});var pEt=s(BH);y5r=r(pEt,"from_pretrained()"),pEt.forEach(t),L5r=r(Eee," to load the model weights."),Eee.forEach(t),x5r=i(q6),T(CM.$$.fragment,q6),q6.forEach(t),$5r=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(O8.$$.fragment,yl),k5r=i(yl),Lve=n(yl,"P",{});var uEt=s(Lve);S5r=r(uEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uEt.forEach(t),R5r=i(yl),nn=n(yl,"P",{});var N6=s(nn);P5r=r(N6,"The model class to instantiate is selected based on the "),xve=n(N6,"CODE",{});var _Et=s(xve);B5r=r(_Et,"model_type"),_Et.forEach(t),I5r=r(N6,` property of the config object (either
passed as an argument or loaded from `),$ve=n(N6,"CODE",{});var bEt=s($ve);q5r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),N5r=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(N6,"CODE",{});var vEt=s(kve);j5r=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),D5r=r(N6,":"),N6.forEach(t),G5r=i(yl),oe=n(yl,"UL",{});var ae=s(oe);wM=n(ae,"LI",{});var MPe=s(wM);Sve=n(MPe,"STRONG",{});var FEt=s(Sve);O5r=r(FEt,"albert"),FEt.forEach(t),V5r=r(MPe," \u2014 "),IH=n(MPe,"A",{href:!0});var TEt=s(IH);X5r=r(TEt,"TFAlbertForSequenceClassification"),TEt.forEach(t),z5r=r(MPe," (ALBERT model)"),MPe.forEach(t),W5r=i(ae),AM=n(ae,"LI",{});var EPe=s(AM);Rve=n(EPe,"STRONG",{});var MEt=s(Rve);Q5r=r(MEt,"bert"),MEt.forEach(t),H5r=r(EPe," \u2014 "),qH=n(EPe,"A",{href:!0});var EEt=s(qH);U5r=r(EEt,"TFBertForSequenceClassification"),EEt.forEach(t),J5r=r(EPe," (BERT model)"),EPe.forEach(t),Y5r=i(ae),yM=n(ae,"LI",{});var CPe=s(yM);Pve=n(CPe,"STRONG",{});var CEt=s(Pve);K5r=r(CEt,"camembert"),CEt.forEach(t),Z5r=r(CPe," \u2014 "),NH=n(CPe,"A",{href:!0});var wEt=s(NH);eFr=r(wEt,"TFCamembertForSequenceClassification"),wEt.forEach(t),oFr=r(CPe," (CamemBERT model)"),CPe.forEach(t),rFr=i(ae),LM=n(ae,"LI",{});var wPe=s(LM);Bve=n(wPe,"STRONG",{});var AEt=s(Bve);tFr=r(AEt,"convbert"),AEt.forEach(t),aFr=r(wPe," \u2014 "),jH=n(wPe,"A",{href:!0});var yEt=s(jH);nFr=r(yEt,"TFConvBertForSequenceClassification"),yEt.forEach(t),sFr=r(wPe," (ConvBERT model)"),wPe.forEach(t),lFr=i(ae),xM=n(ae,"LI",{});var APe=s(xM);Ive=n(APe,"STRONG",{});var LEt=s(Ive);iFr=r(LEt,"ctrl"),LEt.forEach(t),dFr=r(APe," \u2014 "),DH=n(APe,"A",{href:!0});var xEt=s(DH);cFr=r(xEt,"TFCTRLForSequenceClassification"),xEt.forEach(t),fFr=r(APe," (CTRL model)"),APe.forEach(t),mFr=i(ae),$M=n(ae,"LI",{});var yPe=s($M);qve=n(yPe,"STRONG",{});var $Et=s(qve);gFr=r($Et,"deberta"),$Et.forEach(t),hFr=r(yPe," \u2014 "),GH=n(yPe,"A",{href:!0});var kEt=s(GH);pFr=r(kEt,"TFDebertaForSequenceClassification"),kEt.forEach(t),uFr=r(yPe," (DeBERTa model)"),yPe.forEach(t),_Fr=i(ae),kM=n(ae,"LI",{});var LPe=s(kM);Nve=n(LPe,"STRONG",{});var SEt=s(Nve);bFr=r(SEt,"deberta-v2"),SEt.forEach(t),vFr=r(LPe," \u2014 "),OH=n(LPe,"A",{href:!0});var REt=s(OH);FFr=r(REt,"TFDebertaV2ForSequenceClassification"),REt.forEach(t),TFr=r(LPe," (DeBERTa-v2 model)"),LPe.forEach(t),MFr=i(ae),SM=n(ae,"LI",{});var xPe=s(SM);jve=n(xPe,"STRONG",{});var PEt=s(jve);EFr=r(PEt,"distilbert"),PEt.forEach(t),CFr=r(xPe," \u2014 "),VH=n(xPe,"A",{href:!0});var BEt=s(VH);wFr=r(BEt,"TFDistilBertForSequenceClassification"),BEt.forEach(t),AFr=r(xPe," (DistilBERT model)"),xPe.forEach(t),yFr=i(ae),RM=n(ae,"LI",{});var $Pe=s(RM);Dve=n($Pe,"STRONG",{});var IEt=s(Dve);LFr=r(IEt,"electra"),IEt.forEach(t),xFr=r($Pe," \u2014 "),XH=n($Pe,"A",{href:!0});var qEt=s(XH);$Fr=r(qEt,"TFElectraForSequenceClassification"),qEt.forEach(t),kFr=r($Pe," (ELECTRA model)"),$Pe.forEach(t),SFr=i(ae),PM=n(ae,"LI",{});var kPe=s(PM);Gve=n(kPe,"STRONG",{});var NEt=s(Gve);RFr=r(NEt,"flaubert"),NEt.forEach(t),PFr=r(kPe," \u2014 "),zH=n(kPe,"A",{href:!0});var jEt=s(zH);BFr=r(jEt,"TFFlaubertForSequenceClassification"),jEt.forEach(t),IFr=r(kPe," (FlauBERT model)"),kPe.forEach(t),qFr=i(ae),BM=n(ae,"LI",{});var SPe=s(BM);Ove=n(SPe,"STRONG",{});var DEt=s(Ove);NFr=r(DEt,"funnel"),DEt.forEach(t),jFr=r(SPe," \u2014 "),WH=n(SPe,"A",{href:!0});var GEt=s(WH);DFr=r(GEt,"TFFunnelForSequenceClassification"),GEt.forEach(t),GFr=r(SPe," (Funnel Transformer model)"),SPe.forEach(t),OFr=i(ae),IM=n(ae,"LI",{});var RPe=s(IM);Vve=n(RPe,"STRONG",{});var OEt=s(Vve);VFr=r(OEt,"gpt2"),OEt.forEach(t),XFr=r(RPe," \u2014 "),QH=n(RPe,"A",{href:!0});var VEt=s(QH);zFr=r(VEt,"TFGPT2ForSequenceClassification"),VEt.forEach(t),WFr=r(RPe," (OpenAI GPT-2 model)"),RPe.forEach(t),QFr=i(ae),qM=n(ae,"LI",{});var PPe=s(qM);Xve=n(PPe,"STRONG",{});var XEt=s(Xve);HFr=r(XEt,"gptj"),XEt.forEach(t),UFr=r(PPe," \u2014 "),HH=n(PPe,"A",{href:!0});var zEt=s(HH);JFr=r(zEt,"TFGPTJForSequenceClassification"),zEt.forEach(t),YFr=r(PPe," (GPT-J model)"),PPe.forEach(t),KFr=i(ae),NM=n(ae,"LI",{});var BPe=s(NM);zve=n(BPe,"STRONG",{});var WEt=s(zve);ZFr=r(WEt,"layoutlm"),WEt.forEach(t),eTr=r(BPe," \u2014 "),UH=n(BPe,"A",{href:!0});var QEt=s(UH);oTr=r(QEt,"TFLayoutLMForSequenceClassification"),QEt.forEach(t),rTr=r(BPe," (LayoutLM model)"),BPe.forEach(t),tTr=i(ae),jM=n(ae,"LI",{});var IPe=s(jM);Wve=n(IPe,"STRONG",{});var HEt=s(Wve);aTr=r(HEt,"longformer"),HEt.forEach(t),nTr=r(IPe," \u2014 "),JH=n(IPe,"A",{href:!0});var UEt=s(JH);sTr=r(UEt,"TFLongformerForSequenceClassification"),UEt.forEach(t),lTr=r(IPe," (Longformer model)"),IPe.forEach(t),iTr=i(ae),DM=n(ae,"LI",{});var qPe=s(DM);Qve=n(qPe,"STRONG",{});var JEt=s(Qve);dTr=r(JEt,"mobilebert"),JEt.forEach(t),cTr=r(qPe," \u2014 "),YH=n(qPe,"A",{href:!0});var YEt=s(YH);fTr=r(YEt,"TFMobileBertForSequenceClassification"),YEt.forEach(t),mTr=r(qPe," (MobileBERT model)"),qPe.forEach(t),gTr=i(ae),GM=n(ae,"LI",{});var NPe=s(GM);Hve=n(NPe,"STRONG",{});var KEt=s(Hve);hTr=r(KEt,"mpnet"),KEt.forEach(t),pTr=r(NPe," \u2014 "),KH=n(NPe,"A",{href:!0});var ZEt=s(KH);uTr=r(ZEt,"TFMPNetForSequenceClassification"),ZEt.forEach(t),_Tr=r(NPe," (MPNet model)"),NPe.forEach(t),bTr=i(ae),OM=n(ae,"LI",{});var jPe=s(OM);Uve=n(jPe,"STRONG",{});var eCt=s(Uve);vTr=r(eCt,"openai-gpt"),eCt.forEach(t),FTr=r(jPe," \u2014 "),ZH=n(jPe,"A",{href:!0});var oCt=s(ZH);TTr=r(oCt,"TFOpenAIGPTForSequenceClassification"),oCt.forEach(t),MTr=r(jPe," (OpenAI GPT model)"),jPe.forEach(t),ETr=i(ae),VM=n(ae,"LI",{});var DPe=s(VM);Jve=n(DPe,"STRONG",{});var rCt=s(Jve);CTr=r(rCt,"rembert"),rCt.forEach(t),wTr=r(DPe," \u2014 "),eU=n(DPe,"A",{href:!0});var tCt=s(eU);ATr=r(tCt,"TFRemBertForSequenceClassification"),tCt.forEach(t),yTr=r(DPe," (RemBERT model)"),DPe.forEach(t),LTr=i(ae),XM=n(ae,"LI",{});var GPe=s(XM);Yve=n(GPe,"STRONG",{});var aCt=s(Yve);xTr=r(aCt,"roberta"),aCt.forEach(t),$Tr=r(GPe," \u2014 "),oU=n(GPe,"A",{href:!0});var nCt=s(oU);kTr=r(nCt,"TFRobertaForSequenceClassification"),nCt.forEach(t),STr=r(GPe," (RoBERTa model)"),GPe.forEach(t),RTr=i(ae),zM=n(ae,"LI",{});var OPe=s(zM);Kve=n(OPe,"STRONG",{});var sCt=s(Kve);PTr=r(sCt,"roformer"),sCt.forEach(t),BTr=r(OPe," \u2014 "),rU=n(OPe,"A",{href:!0});var lCt=s(rU);ITr=r(lCt,"TFRoFormerForSequenceClassification"),lCt.forEach(t),qTr=r(OPe," (RoFormer model)"),OPe.forEach(t),NTr=i(ae),WM=n(ae,"LI",{});var VPe=s(WM);Zve=n(VPe,"STRONG",{});var iCt=s(Zve);jTr=r(iCt,"tapas"),iCt.forEach(t),DTr=r(VPe," \u2014 "),tU=n(VPe,"A",{href:!0});var dCt=s(tU);GTr=r(dCt,"TFTapasForSequenceClassification"),dCt.forEach(t),OTr=r(VPe," (TAPAS model)"),VPe.forEach(t),VTr=i(ae),QM=n(ae,"LI",{});var XPe=s(QM);e5e=n(XPe,"STRONG",{});var cCt=s(e5e);XTr=r(cCt,"transfo-xl"),cCt.forEach(t),zTr=r(XPe," \u2014 "),aU=n(XPe,"A",{href:!0});var fCt=s(aU);WTr=r(fCt,"TFTransfoXLForSequenceClassification"),fCt.forEach(t),QTr=r(XPe," (Transformer-XL model)"),XPe.forEach(t),HTr=i(ae),HM=n(ae,"LI",{});var zPe=s(HM);o5e=n(zPe,"STRONG",{});var mCt=s(o5e);UTr=r(mCt,"xlm"),mCt.forEach(t),JTr=r(zPe," \u2014 "),nU=n(zPe,"A",{href:!0});var gCt=s(nU);YTr=r(gCt,"TFXLMForSequenceClassification"),gCt.forEach(t),KTr=r(zPe," (XLM model)"),zPe.forEach(t),ZTr=i(ae),UM=n(ae,"LI",{});var WPe=s(UM);r5e=n(WPe,"STRONG",{});var hCt=s(r5e);e7r=r(hCt,"xlm-roberta"),hCt.forEach(t),o7r=r(WPe," \u2014 "),sU=n(WPe,"A",{href:!0});var pCt=s(sU);r7r=r(pCt,"TFXLMRobertaForSequenceClassification"),pCt.forEach(t),t7r=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),a7r=i(ae),JM=n(ae,"LI",{});var QPe=s(JM);t5e=n(QPe,"STRONG",{});var uCt=s(t5e);n7r=r(uCt,"xlnet"),uCt.forEach(t),s7r=r(QPe," \u2014 "),lU=n(QPe,"A",{href:!0});var _Ct=s(lU);l7r=r(_Ct,"TFXLNetForSequenceClassification"),_Ct.forEach(t),i7r=r(QPe," (XLNet model)"),QPe.forEach(t),ae.forEach(t),d7r=i(yl),T(YM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),bje=i(f),dc=n(f,"H2",{class:!0});var CGe=s(dc);KM=n(CGe,"A",{id:!0,class:!0,href:!0});var bCt=s(KM);a5e=n(bCt,"SPAN",{});var vCt=s(a5e);T(V8.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),c7r=i(CGe),n5e=n(CGe,"SPAN",{});var FCt=s(n5e);f7r=r(FCt,"TFAutoModelForMultipleChoice"),FCt.forEach(t),CGe.forEach(t),vje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(X8.$$.fragment,Ll),m7r=i(Ll),cc=n(Ll,"P",{});var Cee=s(cc);g7r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iU=n(Cee,"A",{href:!0});var TCt=s(iU);h7r=r(TCt,"from_pretrained()"),TCt.forEach(t),p7r=r(Cee," class method or the "),dU=n(Cee,"A",{href:!0});var MCt=s(dU);u7r=r(MCt,"from_config()"),MCt.forEach(t),_7r=r(Cee,` class
method.`),Cee.forEach(t),b7r=i(Ll),z8=n(Ll,"P",{});var wGe=s(z8);v7r=r(wGe,"This class cannot be instantiated directly using "),s5e=n(wGe,"CODE",{});var ECt=s(s5e);F7r=r(ECt,"__init__()"),ECt.forEach(t),T7r=r(wGe," (throws an error)."),wGe.forEach(t),M7r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var j6=s(Pt);T(W8.$$.fragment,j6),E7r=i(j6),l5e=n(j6,"P",{});var CCt=s(l5e);C7r=r(CCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CCt.forEach(t),w7r=i(j6),fc=n(j6,"P",{});var wee=s(fc);A7r=r(wee,`Note:
Loading a model from its configuration file does `),i5e=n(wee,"STRONG",{});var wCt=s(i5e);y7r=r(wCt,"not"),wCt.forEach(t),L7r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(wee,"A",{href:!0});var ACt=s(cU);x7r=r(ACt,"from_pretrained()"),ACt.forEach(t),$7r=r(wee," to load the model weights."),wee.forEach(t),k7r=i(j6),T(ZM.$$.fragment,j6),j6.forEach(t),S7r=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(Q8.$$.fragment,xl),R7r=i(xl),d5e=n(xl,"P",{});var yCt=s(d5e);P7r=r(yCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yCt.forEach(t),B7r=i(xl),sn=n(xl,"P",{});var D6=s(sn);I7r=r(D6,"The model class to instantiate is selected based on the "),c5e=n(D6,"CODE",{});var LCt=s(c5e);q7r=r(LCt,"model_type"),LCt.forEach(t),N7r=r(D6,` property of the config object (either
passed as an argument or loaded from `),f5e=n(D6,"CODE",{});var xCt=s(f5e);j7r=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),D7r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(D6,"CODE",{});var $Ct=s(m5e);G7r=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),O7r=r(D6,":"),D6.forEach(t),V7r=i(xl),pe=n(xl,"UL",{});var be=s(pe);eE=n(be,"LI",{});var HPe=s(eE);g5e=n(HPe,"STRONG",{});var kCt=s(g5e);X7r=r(kCt,"albert"),kCt.forEach(t),z7r=r(HPe," \u2014 "),fU=n(HPe,"A",{href:!0});var SCt=s(fU);W7r=r(SCt,"TFAlbertForMultipleChoice"),SCt.forEach(t),Q7r=r(HPe," (ALBERT model)"),HPe.forEach(t),H7r=i(be),oE=n(be,"LI",{});var UPe=s(oE);h5e=n(UPe,"STRONG",{});var RCt=s(h5e);U7r=r(RCt,"bert"),RCt.forEach(t),J7r=r(UPe," \u2014 "),mU=n(UPe,"A",{href:!0});var PCt=s(mU);Y7r=r(PCt,"TFBertForMultipleChoice"),PCt.forEach(t),K7r=r(UPe," (BERT model)"),UPe.forEach(t),Z7r=i(be),rE=n(be,"LI",{});var JPe=s(rE);p5e=n(JPe,"STRONG",{});var BCt=s(p5e);eMr=r(BCt,"camembert"),BCt.forEach(t),oMr=r(JPe," \u2014 "),gU=n(JPe,"A",{href:!0});var ICt=s(gU);rMr=r(ICt,"TFCamembertForMultipleChoice"),ICt.forEach(t),tMr=r(JPe," (CamemBERT model)"),JPe.forEach(t),aMr=i(be),tE=n(be,"LI",{});var YPe=s(tE);u5e=n(YPe,"STRONG",{});var qCt=s(u5e);nMr=r(qCt,"convbert"),qCt.forEach(t),sMr=r(YPe," \u2014 "),hU=n(YPe,"A",{href:!0});var NCt=s(hU);lMr=r(NCt,"TFConvBertForMultipleChoice"),NCt.forEach(t),iMr=r(YPe," (ConvBERT model)"),YPe.forEach(t),dMr=i(be),aE=n(be,"LI",{});var KPe=s(aE);_5e=n(KPe,"STRONG",{});var jCt=s(_5e);cMr=r(jCt,"distilbert"),jCt.forEach(t),fMr=r(KPe," \u2014 "),pU=n(KPe,"A",{href:!0});var DCt=s(pU);mMr=r(DCt,"TFDistilBertForMultipleChoice"),DCt.forEach(t),gMr=r(KPe," (DistilBERT model)"),KPe.forEach(t),hMr=i(be),nE=n(be,"LI",{});var ZPe=s(nE);b5e=n(ZPe,"STRONG",{});var GCt=s(b5e);pMr=r(GCt,"electra"),GCt.forEach(t),uMr=r(ZPe," \u2014 "),uU=n(ZPe,"A",{href:!0});var OCt=s(uU);_Mr=r(OCt,"TFElectraForMultipleChoice"),OCt.forEach(t),bMr=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),vMr=i(be),sE=n(be,"LI",{});var eBe=s(sE);v5e=n(eBe,"STRONG",{});var VCt=s(v5e);FMr=r(VCt,"flaubert"),VCt.forEach(t),TMr=r(eBe," \u2014 "),_U=n(eBe,"A",{href:!0});var XCt=s(_U);MMr=r(XCt,"TFFlaubertForMultipleChoice"),XCt.forEach(t),EMr=r(eBe," (FlauBERT model)"),eBe.forEach(t),CMr=i(be),lE=n(be,"LI",{});var oBe=s(lE);F5e=n(oBe,"STRONG",{});var zCt=s(F5e);wMr=r(zCt,"funnel"),zCt.forEach(t),AMr=r(oBe," \u2014 "),bU=n(oBe,"A",{href:!0});var WCt=s(bU);yMr=r(WCt,"TFFunnelForMultipleChoice"),WCt.forEach(t),LMr=r(oBe," (Funnel Transformer model)"),oBe.forEach(t),xMr=i(be),iE=n(be,"LI",{});var rBe=s(iE);T5e=n(rBe,"STRONG",{});var QCt=s(T5e);$Mr=r(QCt,"longformer"),QCt.forEach(t),kMr=r(rBe," \u2014 "),vU=n(rBe,"A",{href:!0});var HCt=s(vU);SMr=r(HCt,"TFLongformerForMultipleChoice"),HCt.forEach(t),RMr=r(rBe," (Longformer model)"),rBe.forEach(t),PMr=i(be),dE=n(be,"LI",{});var tBe=s(dE);M5e=n(tBe,"STRONG",{});var UCt=s(M5e);BMr=r(UCt,"mobilebert"),UCt.forEach(t),IMr=r(tBe," \u2014 "),FU=n(tBe,"A",{href:!0});var JCt=s(FU);qMr=r(JCt,"TFMobileBertForMultipleChoice"),JCt.forEach(t),NMr=r(tBe," (MobileBERT model)"),tBe.forEach(t),jMr=i(be),cE=n(be,"LI",{});var aBe=s(cE);E5e=n(aBe,"STRONG",{});var YCt=s(E5e);DMr=r(YCt,"mpnet"),YCt.forEach(t),GMr=r(aBe," \u2014 "),TU=n(aBe,"A",{href:!0});var KCt=s(TU);OMr=r(KCt,"TFMPNetForMultipleChoice"),KCt.forEach(t),VMr=r(aBe," (MPNet model)"),aBe.forEach(t),XMr=i(be),fE=n(be,"LI",{});var nBe=s(fE);C5e=n(nBe,"STRONG",{});var ZCt=s(C5e);zMr=r(ZCt,"rembert"),ZCt.forEach(t),WMr=r(nBe," \u2014 "),MU=n(nBe,"A",{href:!0});var e3t=s(MU);QMr=r(e3t,"TFRemBertForMultipleChoice"),e3t.forEach(t),HMr=r(nBe," (RemBERT model)"),nBe.forEach(t),UMr=i(be),mE=n(be,"LI",{});var sBe=s(mE);w5e=n(sBe,"STRONG",{});var o3t=s(w5e);JMr=r(o3t,"roberta"),o3t.forEach(t),YMr=r(sBe," \u2014 "),EU=n(sBe,"A",{href:!0});var r3t=s(EU);KMr=r(r3t,"TFRobertaForMultipleChoice"),r3t.forEach(t),ZMr=r(sBe," (RoBERTa model)"),sBe.forEach(t),eEr=i(be),gE=n(be,"LI",{});var lBe=s(gE);A5e=n(lBe,"STRONG",{});var t3t=s(A5e);oEr=r(t3t,"roformer"),t3t.forEach(t),rEr=r(lBe," \u2014 "),CU=n(lBe,"A",{href:!0});var a3t=s(CU);tEr=r(a3t,"TFRoFormerForMultipleChoice"),a3t.forEach(t),aEr=r(lBe," (RoFormer model)"),lBe.forEach(t),nEr=i(be),hE=n(be,"LI",{});var iBe=s(hE);y5e=n(iBe,"STRONG",{});var n3t=s(y5e);sEr=r(n3t,"xlm"),n3t.forEach(t),lEr=r(iBe," \u2014 "),wU=n(iBe,"A",{href:!0});var s3t=s(wU);iEr=r(s3t,"TFXLMForMultipleChoice"),s3t.forEach(t),dEr=r(iBe," (XLM model)"),iBe.forEach(t),cEr=i(be),pE=n(be,"LI",{});var dBe=s(pE);L5e=n(dBe,"STRONG",{});var l3t=s(L5e);fEr=r(l3t,"xlm-roberta"),l3t.forEach(t),mEr=r(dBe," \u2014 "),AU=n(dBe,"A",{href:!0});var i3t=s(AU);gEr=r(i3t,"TFXLMRobertaForMultipleChoice"),i3t.forEach(t),hEr=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),pEr=i(be),uE=n(be,"LI",{});var cBe=s(uE);x5e=n(cBe,"STRONG",{});var d3t=s(x5e);uEr=r(d3t,"xlnet"),d3t.forEach(t),_Er=r(cBe," \u2014 "),yU=n(cBe,"A",{href:!0});var c3t=s(yU);bEr=r(c3t,"TFXLNetForMultipleChoice"),c3t.forEach(t),vEr=r(cBe," (XLNet model)"),cBe.forEach(t),be.forEach(t),FEr=i(xl),T(_E.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Fje=i(f),mc=n(f,"H2",{class:!0});var AGe=s(mc);bE=n(AGe,"A",{id:!0,class:!0,href:!0});var f3t=s(bE);$5e=n(f3t,"SPAN",{});var m3t=s($5e);T(H8.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),TEr=i(AGe),k5e=n(AGe,"SPAN",{});var g3t=s(k5e);MEr=r(g3t,"TFAutoModelForNextSentencePrediction"),g3t.forEach(t),AGe.forEach(t),Tje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(U8.$$.fragment,$l),EEr=i($l),gc=n($l,"P",{});var Aee=s(gc);CEr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),LU=n(Aee,"A",{href:!0});var h3t=s(LU);wEr=r(h3t,"from_pretrained()"),h3t.forEach(t),AEr=r(Aee," class method or the "),xU=n(Aee,"A",{href:!0});var p3t=s(xU);yEr=r(p3t,"from_config()"),p3t.forEach(t),LEr=r(Aee,` class
method.`),Aee.forEach(t),xEr=i($l),J8=n($l,"P",{});var yGe=s(J8);$Er=r(yGe,"This class cannot be instantiated directly using "),S5e=n(yGe,"CODE",{});var u3t=s(S5e);kEr=r(u3t,"__init__()"),u3t.forEach(t),SEr=r(yGe," (throws an error)."),yGe.forEach(t),REr=i($l),Bt=n($l,"DIV",{class:!0});var G6=s(Bt);T(Y8.$$.fragment,G6),PEr=i(G6),R5e=n(G6,"P",{});var _3t=s(R5e);BEr=r(_3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_3t.forEach(t),IEr=i(G6),hc=n(G6,"P",{});var yee=s(hc);qEr=r(yee,`Note:
Loading a model from its configuration file does `),P5e=n(yee,"STRONG",{});var b3t=s(P5e);NEr=r(b3t,"not"),b3t.forEach(t),jEr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(yee,"A",{href:!0});var v3t=s($U);DEr=r(v3t,"from_pretrained()"),v3t.forEach(t),GEr=r(yee," to load the model weights."),yee.forEach(t),OEr=i(G6),T(vE.$$.fragment,G6),G6.forEach(t),VEr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(K8.$$.fragment,kl),XEr=i(kl),B5e=n(kl,"P",{});var F3t=s(B5e);zEr=r(F3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F3t.forEach(t),WEr=i(kl),ln=n(kl,"P",{});var O6=s(ln);QEr=r(O6,"The model class to instantiate is selected based on the "),I5e=n(O6,"CODE",{});var T3t=s(I5e);HEr=r(T3t,"model_type"),T3t.forEach(t),UEr=r(O6,` property of the config object (either
passed as an argument or loaded from `),q5e=n(O6,"CODE",{});var M3t=s(q5e);JEr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),YEr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(O6,"CODE",{});var E3t=s(N5e);KEr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),ZEr=r(O6,":"),O6.forEach(t),eCr=i(kl),Z8=n(kl,"UL",{});var LGe=s(Z8);FE=n(LGe,"LI",{});var fBe=s(FE);j5e=n(fBe,"STRONG",{});var C3t=s(j5e);oCr=r(C3t,"bert"),C3t.forEach(t),rCr=r(fBe," \u2014 "),kU=n(fBe,"A",{href:!0});var w3t=s(kU);tCr=r(w3t,"TFBertForNextSentencePrediction"),w3t.forEach(t),aCr=r(fBe," (BERT model)"),fBe.forEach(t),nCr=i(LGe),TE=n(LGe,"LI",{});var mBe=s(TE);D5e=n(mBe,"STRONG",{});var A3t=s(D5e);sCr=r(A3t,"mobilebert"),A3t.forEach(t),lCr=r(mBe," \u2014 "),SU=n(mBe,"A",{href:!0});var y3t=s(SU);iCr=r(y3t,"TFMobileBertForNextSentencePrediction"),y3t.forEach(t),dCr=r(mBe," (MobileBERT model)"),mBe.forEach(t),LGe.forEach(t),cCr=i(kl),T(ME.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Mje=i(f),pc=n(f,"H2",{class:!0});var xGe=s(pc);EE=n(xGe,"A",{id:!0,class:!0,href:!0});var L3t=s(EE);G5e=n(L3t,"SPAN",{});var x3t=s(G5e);T(e9.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),fCr=i(xGe),O5e=n(xGe,"SPAN",{});var $3t=s(O5e);mCr=r($3t,"TFAutoModelForTableQuestionAnswering"),$3t.forEach(t),xGe.forEach(t),Eje=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(o9.$$.fragment,Sl),gCr=i(Sl),uc=n(Sl,"P",{});var Lee=s(uc);hCr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RU=n(Lee,"A",{href:!0});var k3t=s(RU);pCr=r(k3t,"from_pretrained()"),k3t.forEach(t),uCr=r(Lee," class method or the "),PU=n(Lee,"A",{href:!0});var S3t=s(PU);_Cr=r(S3t,"from_config()"),S3t.forEach(t),bCr=r(Lee,` class
method.`),Lee.forEach(t),vCr=i(Sl),r9=n(Sl,"P",{});var $Ge=s(r9);FCr=r($Ge,"This class cannot be instantiated directly using "),V5e=n($Ge,"CODE",{});var R3t=s(V5e);TCr=r(R3t,"__init__()"),R3t.forEach(t),MCr=r($Ge," (throws an error)."),$Ge.forEach(t),ECr=i(Sl),It=n(Sl,"DIV",{class:!0});var V6=s(It);T(t9.$$.fragment,V6),CCr=i(V6),X5e=n(V6,"P",{});var P3t=s(X5e);wCr=r(P3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P3t.forEach(t),ACr=i(V6),_c=n(V6,"P",{});var xee=s(_c);yCr=r(xee,`Note:
Loading a model from its configuration file does `),z5e=n(xee,"STRONG",{});var B3t=s(z5e);LCr=r(B3t,"not"),B3t.forEach(t),xCr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(xee,"A",{href:!0});var I3t=s(BU);$Cr=r(I3t,"from_pretrained()"),I3t.forEach(t),kCr=r(xee," to load the model weights."),xee.forEach(t),SCr=i(V6),T(CE.$$.fragment,V6),V6.forEach(t),RCr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(a9.$$.fragment,Rl),PCr=i(Rl),W5e=n(Rl,"P",{});var q3t=s(W5e);BCr=r(q3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q3t.forEach(t),ICr=i(Rl),dn=n(Rl,"P",{});var X6=s(dn);qCr=r(X6,"The model class to instantiate is selected based on the "),Q5e=n(X6,"CODE",{});var N3t=s(Q5e);NCr=r(N3t,"model_type"),N3t.forEach(t),jCr=r(X6,` property of the config object (either
passed as an argument or loaded from `),H5e=n(X6,"CODE",{});var j3t=s(H5e);DCr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),GCr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(X6,"CODE",{});var D3t=s(U5e);OCr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),VCr=r(X6,":"),X6.forEach(t),XCr=i(Rl),J5e=n(Rl,"UL",{});var G3t=s(J5e);wE=n(G3t,"LI",{});var gBe=s(wE);Y5e=n(gBe,"STRONG",{});var O3t=s(Y5e);zCr=r(O3t,"tapas"),O3t.forEach(t),WCr=r(gBe," \u2014 "),IU=n(gBe,"A",{href:!0});var V3t=s(IU);QCr=r(V3t,"TFTapasForQuestionAnswering"),V3t.forEach(t),HCr=r(gBe," (TAPAS model)"),gBe.forEach(t),G3t.forEach(t),UCr=i(Rl),T(AE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Cje=i(f),bc=n(f,"H2",{class:!0});var kGe=s(bc);yE=n(kGe,"A",{id:!0,class:!0,href:!0});var X3t=s(yE);K5e=n(X3t,"SPAN",{});var z3t=s(K5e);T(n9.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),JCr=i(kGe),Z5e=n(kGe,"SPAN",{});var W3t=s(Z5e);YCr=r(W3t,"TFAutoModelForTokenClassification"),W3t.forEach(t),kGe.forEach(t),wje=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(s9.$$.fragment,Pl),KCr=i(Pl),vc=n(Pl,"P",{});var $ee=s(vc);ZCr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),qU=n($ee,"A",{href:!0});var Q3t=s(qU);e3r=r(Q3t,"from_pretrained()"),Q3t.forEach(t),o3r=r($ee," class method or the "),NU=n($ee,"A",{href:!0});var H3t=s(NU);r3r=r(H3t,"from_config()"),H3t.forEach(t),t3r=r($ee,` class
method.`),$ee.forEach(t),a3r=i(Pl),l9=n(Pl,"P",{});var SGe=s(l9);n3r=r(SGe,"This class cannot be instantiated directly using "),eFe=n(SGe,"CODE",{});var U3t=s(eFe);s3r=r(U3t,"__init__()"),U3t.forEach(t),l3r=r(SGe," (throws an error)."),SGe.forEach(t),i3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var z6=s(qt);T(i9.$$.fragment,z6),d3r=i(z6),oFe=n(z6,"P",{});var J3t=s(oFe);c3r=r(J3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J3t.forEach(t),f3r=i(z6),Fc=n(z6,"P",{});var kee=s(Fc);m3r=r(kee,`Note:
Loading a model from its configuration file does `),rFe=n(kee,"STRONG",{});var Y3t=s(rFe);g3r=r(Y3t,"not"),Y3t.forEach(t),h3r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(kee,"A",{href:!0});var K3t=s(jU);p3r=r(K3t,"from_pretrained()"),K3t.forEach(t),u3r=r(kee," to load the model weights."),kee.forEach(t),_3r=i(z6),T(LE.$$.fragment,z6),z6.forEach(t),b3r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(d9.$$.fragment,Bl),v3r=i(Bl),tFe=n(Bl,"P",{});var Z3t=s(tFe);F3r=r(Z3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z3t.forEach(t),T3r=i(Bl),cn=n(Bl,"P",{});var W6=s(cn);M3r=r(W6,"The model class to instantiate is selected based on the "),aFe=n(W6,"CODE",{});var ewt=s(aFe);E3r=r(ewt,"model_type"),ewt.forEach(t),C3r=r(W6,` property of the config object (either
passed as an argument or loaded from `),nFe=n(W6,"CODE",{});var owt=s(nFe);w3r=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),A3r=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(W6,"CODE",{});var rwt=s(sFe);y3r=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),L3r=r(W6,":"),W6.forEach(t),x3r=i(Bl),de=n(Bl,"UL",{});var me=s(de);xE=n(me,"LI",{});var hBe=s(xE);lFe=n(hBe,"STRONG",{});var twt=s(lFe);$3r=r(twt,"albert"),twt.forEach(t),k3r=r(hBe," \u2014 "),DU=n(hBe,"A",{href:!0});var awt=s(DU);S3r=r(awt,"TFAlbertForTokenClassification"),awt.forEach(t),R3r=r(hBe," (ALBERT model)"),hBe.forEach(t),P3r=i(me),$E=n(me,"LI",{});var pBe=s($E);iFe=n(pBe,"STRONG",{});var nwt=s(iFe);B3r=r(nwt,"bert"),nwt.forEach(t),I3r=r(pBe," \u2014 "),GU=n(pBe,"A",{href:!0});var swt=s(GU);q3r=r(swt,"TFBertForTokenClassification"),swt.forEach(t),N3r=r(pBe," (BERT model)"),pBe.forEach(t),j3r=i(me),kE=n(me,"LI",{});var uBe=s(kE);dFe=n(uBe,"STRONG",{});var lwt=s(dFe);D3r=r(lwt,"camembert"),lwt.forEach(t),G3r=r(uBe," \u2014 "),OU=n(uBe,"A",{href:!0});var iwt=s(OU);O3r=r(iwt,"TFCamembertForTokenClassification"),iwt.forEach(t),V3r=r(uBe," (CamemBERT model)"),uBe.forEach(t),X3r=i(me),SE=n(me,"LI",{});var _Be=s(SE);cFe=n(_Be,"STRONG",{});var dwt=s(cFe);z3r=r(dwt,"convbert"),dwt.forEach(t),W3r=r(_Be," \u2014 "),VU=n(_Be,"A",{href:!0});var cwt=s(VU);Q3r=r(cwt,"TFConvBertForTokenClassification"),cwt.forEach(t),H3r=r(_Be," (ConvBERT model)"),_Be.forEach(t),U3r=i(me),RE=n(me,"LI",{});var bBe=s(RE);fFe=n(bBe,"STRONG",{});var fwt=s(fFe);J3r=r(fwt,"deberta"),fwt.forEach(t),Y3r=r(bBe," \u2014 "),XU=n(bBe,"A",{href:!0});var mwt=s(XU);K3r=r(mwt,"TFDebertaForTokenClassification"),mwt.forEach(t),Z3r=r(bBe," (DeBERTa model)"),bBe.forEach(t),ewr=i(me),PE=n(me,"LI",{});var vBe=s(PE);mFe=n(vBe,"STRONG",{});var gwt=s(mFe);owr=r(gwt,"deberta-v2"),gwt.forEach(t),rwr=r(vBe," \u2014 "),zU=n(vBe,"A",{href:!0});var hwt=s(zU);twr=r(hwt,"TFDebertaV2ForTokenClassification"),hwt.forEach(t),awr=r(vBe," (DeBERTa-v2 model)"),vBe.forEach(t),nwr=i(me),BE=n(me,"LI",{});var FBe=s(BE);gFe=n(FBe,"STRONG",{});var pwt=s(gFe);swr=r(pwt,"distilbert"),pwt.forEach(t),lwr=r(FBe," \u2014 "),WU=n(FBe,"A",{href:!0});var uwt=s(WU);iwr=r(uwt,"TFDistilBertForTokenClassification"),uwt.forEach(t),dwr=r(FBe," (DistilBERT model)"),FBe.forEach(t),cwr=i(me),IE=n(me,"LI",{});var TBe=s(IE);hFe=n(TBe,"STRONG",{});var _wt=s(hFe);fwr=r(_wt,"electra"),_wt.forEach(t),mwr=r(TBe," \u2014 "),QU=n(TBe,"A",{href:!0});var bwt=s(QU);gwr=r(bwt,"TFElectraForTokenClassification"),bwt.forEach(t),hwr=r(TBe," (ELECTRA model)"),TBe.forEach(t),pwr=i(me),qE=n(me,"LI",{});var MBe=s(qE);pFe=n(MBe,"STRONG",{});var vwt=s(pFe);uwr=r(vwt,"flaubert"),vwt.forEach(t),_wr=r(MBe," \u2014 "),HU=n(MBe,"A",{href:!0});var Fwt=s(HU);bwr=r(Fwt,"TFFlaubertForTokenClassification"),Fwt.forEach(t),vwr=r(MBe," (FlauBERT model)"),MBe.forEach(t),Fwr=i(me),NE=n(me,"LI",{});var EBe=s(NE);uFe=n(EBe,"STRONG",{});var Twt=s(uFe);Twr=r(Twt,"funnel"),Twt.forEach(t),Mwr=r(EBe," \u2014 "),UU=n(EBe,"A",{href:!0});var Mwt=s(UU);Ewr=r(Mwt,"TFFunnelForTokenClassification"),Mwt.forEach(t),Cwr=r(EBe," (Funnel Transformer model)"),EBe.forEach(t),wwr=i(me),jE=n(me,"LI",{});var CBe=s(jE);_Fe=n(CBe,"STRONG",{});var Ewt=s(_Fe);Awr=r(Ewt,"layoutlm"),Ewt.forEach(t),ywr=r(CBe," \u2014 "),JU=n(CBe,"A",{href:!0});var Cwt=s(JU);Lwr=r(Cwt,"TFLayoutLMForTokenClassification"),Cwt.forEach(t),xwr=r(CBe," (LayoutLM model)"),CBe.forEach(t),$wr=i(me),DE=n(me,"LI",{});var wBe=s(DE);bFe=n(wBe,"STRONG",{});var wwt=s(bFe);kwr=r(wwt,"longformer"),wwt.forEach(t),Swr=r(wBe," \u2014 "),YU=n(wBe,"A",{href:!0});var Awt=s(YU);Rwr=r(Awt,"TFLongformerForTokenClassification"),Awt.forEach(t),Pwr=r(wBe," (Longformer model)"),wBe.forEach(t),Bwr=i(me),GE=n(me,"LI",{});var ABe=s(GE);vFe=n(ABe,"STRONG",{});var ywt=s(vFe);Iwr=r(ywt,"mobilebert"),ywt.forEach(t),qwr=r(ABe," \u2014 "),KU=n(ABe,"A",{href:!0});var Lwt=s(KU);Nwr=r(Lwt,"TFMobileBertForTokenClassification"),Lwt.forEach(t),jwr=r(ABe," (MobileBERT model)"),ABe.forEach(t),Dwr=i(me),OE=n(me,"LI",{});var yBe=s(OE);FFe=n(yBe,"STRONG",{});var xwt=s(FFe);Gwr=r(xwt,"mpnet"),xwt.forEach(t),Owr=r(yBe," \u2014 "),ZU=n(yBe,"A",{href:!0});var $wt=s(ZU);Vwr=r($wt,"TFMPNetForTokenClassification"),$wt.forEach(t),Xwr=r(yBe," (MPNet model)"),yBe.forEach(t),zwr=i(me),VE=n(me,"LI",{});var LBe=s(VE);TFe=n(LBe,"STRONG",{});var kwt=s(TFe);Wwr=r(kwt,"rembert"),kwt.forEach(t),Qwr=r(LBe," \u2014 "),eJ=n(LBe,"A",{href:!0});var Swt=s(eJ);Hwr=r(Swt,"TFRemBertForTokenClassification"),Swt.forEach(t),Uwr=r(LBe," (RemBERT model)"),LBe.forEach(t),Jwr=i(me),XE=n(me,"LI",{});var xBe=s(XE);MFe=n(xBe,"STRONG",{});var Rwt=s(MFe);Ywr=r(Rwt,"roberta"),Rwt.forEach(t),Kwr=r(xBe," \u2014 "),oJ=n(xBe,"A",{href:!0});var Pwt=s(oJ);Zwr=r(Pwt,"TFRobertaForTokenClassification"),Pwt.forEach(t),e0r=r(xBe," (RoBERTa model)"),xBe.forEach(t),o0r=i(me),zE=n(me,"LI",{});var $Be=s(zE);EFe=n($Be,"STRONG",{});var Bwt=s(EFe);r0r=r(Bwt,"roformer"),Bwt.forEach(t),t0r=r($Be," \u2014 "),rJ=n($Be,"A",{href:!0});var Iwt=s(rJ);a0r=r(Iwt,"TFRoFormerForTokenClassification"),Iwt.forEach(t),n0r=r($Be," (RoFormer model)"),$Be.forEach(t),s0r=i(me),WE=n(me,"LI",{});var kBe=s(WE);CFe=n(kBe,"STRONG",{});var qwt=s(CFe);l0r=r(qwt,"xlm"),qwt.forEach(t),i0r=r(kBe," \u2014 "),tJ=n(kBe,"A",{href:!0});var Nwt=s(tJ);d0r=r(Nwt,"TFXLMForTokenClassification"),Nwt.forEach(t),c0r=r(kBe," (XLM model)"),kBe.forEach(t),f0r=i(me),QE=n(me,"LI",{});var SBe=s(QE);wFe=n(SBe,"STRONG",{});var jwt=s(wFe);m0r=r(jwt,"xlm-roberta"),jwt.forEach(t),g0r=r(SBe," \u2014 "),aJ=n(SBe,"A",{href:!0});var Dwt=s(aJ);h0r=r(Dwt,"TFXLMRobertaForTokenClassification"),Dwt.forEach(t),p0r=r(SBe," (XLM-RoBERTa model)"),SBe.forEach(t),u0r=i(me),HE=n(me,"LI",{});var RBe=s(HE);AFe=n(RBe,"STRONG",{});var Gwt=s(AFe);_0r=r(Gwt,"xlnet"),Gwt.forEach(t),b0r=r(RBe," \u2014 "),nJ=n(RBe,"A",{href:!0});var Owt=s(nJ);v0r=r(Owt,"TFXLNetForTokenClassification"),Owt.forEach(t),F0r=r(RBe," (XLNet model)"),RBe.forEach(t),me.forEach(t),T0r=i(Bl),T(UE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Aje=i(f),Tc=n(f,"H2",{class:!0});var RGe=s(Tc);JE=n(RGe,"A",{id:!0,class:!0,href:!0});var Vwt=s(JE);yFe=n(Vwt,"SPAN",{});var Xwt=s(yFe);T(c9.$$.fragment,Xwt),Xwt.forEach(t),Vwt.forEach(t),M0r=i(RGe),LFe=n(RGe,"SPAN",{});var zwt=s(LFe);E0r=r(zwt,"TFAutoModelForQuestionAnswering"),zwt.forEach(t),RGe.forEach(t),yje=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(f9.$$.fragment,Il),C0r=i(Il),Mc=n(Il,"P",{});var See=s(Mc);w0r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=n(See,"A",{href:!0});var Wwt=s(sJ);A0r=r(Wwt,"from_pretrained()"),Wwt.forEach(t),y0r=r(See," class method or the "),lJ=n(See,"A",{href:!0});var Qwt=s(lJ);L0r=r(Qwt,"from_config()"),Qwt.forEach(t),x0r=r(See,` class
method.`),See.forEach(t),$0r=i(Il),m9=n(Il,"P",{});var PGe=s(m9);k0r=r(PGe,"This class cannot be instantiated directly using "),xFe=n(PGe,"CODE",{});var Hwt=s(xFe);S0r=r(Hwt,"__init__()"),Hwt.forEach(t),R0r=r(PGe," (throws an error)."),PGe.forEach(t),P0r=i(Il),Nt=n(Il,"DIV",{class:!0});var Q6=s(Nt);T(g9.$$.fragment,Q6),B0r=i(Q6),$Fe=n(Q6,"P",{});var Uwt=s($Fe);I0r=r(Uwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Uwt.forEach(t),q0r=i(Q6),Ec=n(Q6,"P",{});var Ree=s(Ec);N0r=r(Ree,`Note:
Loading a model from its configuration file does `),kFe=n(Ree,"STRONG",{});var Jwt=s(kFe);j0r=r(Jwt,"not"),Jwt.forEach(t),D0r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(Ree,"A",{href:!0});var Ywt=s(iJ);G0r=r(Ywt,"from_pretrained()"),Ywt.forEach(t),O0r=r(Ree," to load the model weights."),Ree.forEach(t),V0r=i(Q6),T(YE.$$.fragment,Q6),Q6.forEach(t),X0r=i(Il),Ir=n(Il,"DIV",{class:!0});var ql=s(Ir);T(h9.$$.fragment,ql),z0r=i(ql),SFe=n(ql,"P",{});var Kwt=s(SFe);W0r=r(Kwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kwt.forEach(t),Q0r=i(ql),fn=n(ql,"P",{});var H6=s(fn);H0r=r(H6,"The model class to instantiate is selected based on the "),RFe=n(H6,"CODE",{});var Zwt=s(RFe);U0r=r(Zwt,"model_type"),Zwt.forEach(t),J0r=r(H6,` property of the config object (either
passed as an argument or loaded from `),PFe=n(H6,"CODE",{});var e0t=s(PFe);Y0r=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),K0r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(H6,"CODE",{});var o0t=s(BFe);Z0r=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),e6r=r(H6,":"),H6.forEach(t),o6r=i(ql),ce=n(ql,"UL",{});var ge=s(ce);KE=n(ge,"LI",{});var PBe=s(KE);IFe=n(PBe,"STRONG",{});var r0t=s(IFe);r6r=r(r0t,"albert"),r0t.forEach(t),t6r=r(PBe," \u2014 "),dJ=n(PBe,"A",{href:!0});var t0t=s(dJ);a6r=r(t0t,"TFAlbertForQuestionAnswering"),t0t.forEach(t),n6r=r(PBe," (ALBERT model)"),PBe.forEach(t),s6r=i(ge),ZE=n(ge,"LI",{});var BBe=s(ZE);qFe=n(BBe,"STRONG",{});var a0t=s(qFe);l6r=r(a0t,"bert"),a0t.forEach(t),i6r=r(BBe," \u2014 "),cJ=n(BBe,"A",{href:!0});var n0t=s(cJ);d6r=r(n0t,"TFBertForQuestionAnswering"),n0t.forEach(t),c6r=r(BBe," (BERT model)"),BBe.forEach(t),f6r=i(ge),eC=n(ge,"LI",{});var IBe=s(eC);NFe=n(IBe,"STRONG",{});var s0t=s(NFe);m6r=r(s0t,"camembert"),s0t.forEach(t),g6r=r(IBe," \u2014 "),fJ=n(IBe,"A",{href:!0});var l0t=s(fJ);h6r=r(l0t,"TFCamembertForQuestionAnswering"),l0t.forEach(t),p6r=r(IBe," (CamemBERT model)"),IBe.forEach(t),u6r=i(ge),oC=n(ge,"LI",{});var qBe=s(oC);jFe=n(qBe,"STRONG",{});var i0t=s(jFe);_6r=r(i0t,"convbert"),i0t.forEach(t),b6r=r(qBe," \u2014 "),mJ=n(qBe,"A",{href:!0});var d0t=s(mJ);v6r=r(d0t,"TFConvBertForQuestionAnswering"),d0t.forEach(t),F6r=r(qBe," (ConvBERT model)"),qBe.forEach(t),T6r=i(ge),rC=n(ge,"LI",{});var NBe=s(rC);DFe=n(NBe,"STRONG",{});var c0t=s(DFe);M6r=r(c0t,"deberta"),c0t.forEach(t),E6r=r(NBe," \u2014 "),gJ=n(NBe,"A",{href:!0});var f0t=s(gJ);C6r=r(f0t,"TFDebertaForQuestionAnswering"),f0t.forEach(t),w6r=r(NBe," (DeBERTa model)"),NBe.forEach(t),A6r=i(ge),tC=n(ge,"LI",{});var jBe=s(tC);GFe=n(jBe,"STRONG",{});var m0t=s(GFe);y6r=r(m0t,"deberta-v2"),m0t.forEach(t),L6r=r(jBe," \u2014 "),hJ=n(jBe,"A",{href:!0});var g0t=s(hJ);x6r=r(g0t,"TFDebertaV2ForQuestionAnswering"),g0t.forEach(t),$6r=r(jBe," (DeBERTa-v2 model)"),jBe.forEach(t),k6r=i(ge),aC=n(ge,"LI",{});var DBe=s(aC);OFe=n(DBe,"STRONG",{});var h0t=s(OFe);S6r=r(h0t,"distilbert"),h0t.forEach(t),R6r=r(DBe," \u2014 "),pJ=n(DBe,"A",{href:!0});var p0t=s(pJ);P6r=r(p0t,"TFDistilBertForQuestionAnswering"),p0t.forEach(t),B6r=r(DBe," (DistilBERT model)"),DBe.forEach(t),I6r=i(ge),nC=n(ge,"LI",{});var GBe=s(nC);VFe=n(GBe,"STRONG",{});var u0t=s(VFe);q6r=r(u0t,"electra"),u0t.forEach(t),N6r=r(GBe," \u2014 "),uJ=n(GBe,"A",{href:!0});var _0t=s(uJ);j6r=r(_0t,"TFElectraForQuestionAnswering"),_0t.forEach(t),D6r=r(GBe," (ELECTRA model)"),GBe.forEach(t),G6r=i(ge),sC=n(ge,"LI",{});var OBe=s(sC);XFe=n(OBe,"STRONG",{});var b0t=s(XFe);O6r=r(b0t,"flaubert"),b0t.forEach(t),V6r=r(OBe," \u2014 "),_J=n(OBe,"A",{href:!0});var v0t=s(_J);X6r=r(v0t,"TFFlaubertForQuestionAnsweringSimple"),v0t.forEach(t),z6r=r(OBe," (FlauBERT model)"),OBe.forEach(t),W6r=i(ge),lC=n(ge,"LI",{});var VBe=s(lC);zFe=n(VBe,"STRONG",{});var F0t=s(zFe);Q6r=r(F0t,"funnel"),F0t.forEach(t),H6r=r(VBe," \u2014 "),bJ=n(VBe,"A",{href:!0});var T0t=s(bJ);U6r=r(T0t,"TFFunnelForQuestionAnswering"),T0t.forEach(t),J6r=r(VBe," (Funnel Transformer model)"),VBe.forEach(t),Y6r=i(ge),iC=n(ge,"LI",{});var XBe=s(iC);WFe=n(XBe,"STRONG",{});var M0t=s(WFe);K6r=r(M0t,"gptj"),M0t.forEach(t),Z6r=r(XBe," \u2014 "),vJ=n(XBe,"A",{href:!0});var E0t=s(vJ);eAr=r(E0t,"TFGPTJForQuestionAnswering"),E0t.forEach(t),oAr=r(XBe," (GPT-J model)"),XBe.forEach(t),rAr=i(ge),dC=n(ge,"LI",{});var zBe=s(dC);QFe=n(zBe,"STRONG",{});var C0t=s(QFe);tAr=r(C0t,"longformer"),C0t.forEach(t),aAr=r(zBe," \u2014 "),FJ=n(zBe,"A",{href:!0});var w0t=s(FJ);nAr=r(w0t,"TFLongformerForQuestionAnswering"),w0t.forEach(t),sAr=r(zBe," (Longformer model)"),zBe.forEach(t),lAr=i(ge),cC=n(ge,"LI",{});var WBe=s(cC);HFe=n(WBe,"STRONG",{});var A0t=s(HFe);iAr=r(A0t,"mobilebert"),A0t.forEach(t),dAr=r(WBe," \u2014 "),TJ=n(WBe,"A",{href:!0});var y0t=s(TJ);cAr=r(y0t,"TFMobileBertForQuestionAnswering"),y0t.forEach(t),fAr=r(WBe," (MobileBERT model)"),WBe.forEach(t),mAr=i(ge),fC=n(ge,"LI",{});var QBe=s(fC);UFe=n(QBe,"STRONG",{});var L0t=s(UFe);gAr=r(L0t,"mpnet"),L0t.forEach(t),hAr=r(QBe," \u2014 "),MJ=n(QBe,"A",{href:!0});var x0t=s(MJ);pAr=r(x0t,"TFMPNetForQuestionAnswering"),x0t.forEach(t),uAr=r(QBe," (MPNet model)"),QBe.forEach(t),_Ar=i(ge),mC=n(ge,"LI",{});var HBe=s(mC);JFe=n(HBe,"STRONG",{});var $0t=s(JFe);bAr=r($0t,"rembert"),$0t.forEach(t),vAr=r(HBe," \u2014 "),EJ=n(HBe,"A",{href:!0});var k0t=s(EJ);FAr=r(k0t,"TFRemBertForQuestionAnswering"),k0t.forEach(t),TAr=r(HBe," (RemBERT model)"),HBe.forEach(t),MAr=i(ge),gC=n(ge,"LI",{});var UBe=s(gC);YFe=n(UBe,"STRONG",{});var S0t=s(YFe);EAr=r(S0t,"roberta"),S0t.forEach(t),CAr=r(UBe," \u2014 "),CJ=n(UBe,"A",{href:!0});var R0t=s(CJ);wAr=r(R0t,"TFRobertaForQuestionAnswering"),R0t.forEach(t),AAr=r(UBe," (RoBERTa model)"),UBe.forEach(t),yAr=i(ge),hC=n(ge,"LI",{});var JBe=s(hC);KFe=n(JBe,"STRONG",{});var P0t=s(KFe);LAr=r(P0t,"roformer"),P0t.forEach(t),xAr=r(JBe," \u2014 "),wJ=n(JBe,"A",{href:!0});var B0t=s(wJ);$Ar=r(B0t,"TFRoFormerForQuestionAnswering"),B0t.forEach(t),kAr=r(JBe," (RoFormer model)"),JBe.forEach(t),SAr=i(ge),pC=n(ge,"LI",{});var YBe=s(pC);ZFe=n(YBe,"STRONG",{});var I0t=s(ZFe);RAr=r(I0t,"xlm"),I0t.forEach(t),PAr=r(YBe," \u2014 "),AJ=n(YBe,"A",{href:!0});var q0t=s(AJ);BAr=r(q0t,"TFXLMForQuestionAnsweringSimple"),q0t.forEach(t),IAr=r(YBe," (XLM model)"),YBe.forEach(t),qAr=i(ge),uC=n(ge,"LI",{});var KBe=s(uC);eTe=n(KBe,"STRONG",{});var N0t=s(eTe);NAr=r(N0t,"xlm-roberta"),N0t.forEach(t),jAr=r(KBe," \u2014 "),yJ=n(KBe,"A",{href:!0});var j0t=s(yJ);DAr=r(j0t,"TFXLMRobertaForQuestionAnswering"),j0t.forEach(t),GAr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),OAr=i(ge),_C=n(ge,"LI",{});var ZBe=s(_C);oTe=n(ZBe,"STRONG",{});var D0t=s(oTe);VAr=r(D0t,"xlnet"),D0t.forEach(t),XAr=r(ZBe," \u2014 "),LJ=n(ZBe,"A",{href:!0});var G0t=s(LJ);zAr=r(G0t,"TFXLNetForQuestionAnsweringSimple"),G0t.forEach(t),WAr=r(ZBe," (XLNet model)"),ZBe.forEach(t),ge.forEach(t),QAr=i(ql),T(bC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),Lje=i(f),Cc=n(f,"H2",{class:!0});var BGe=s(Cc);vC=n(BGe,"A",{id:!0,class:!0,href:!0});var O0t=s(vC);rTe=n(O0t,"SPAN",{});var V0t=s(rTe);T(p9.$$.fragment,V0t),V0t.forEach(t),O0t.forEach(t),HAr=i(BGe),tTe=n(BGe,"SPAN",{});var X0t=s(tTe);UAr=r(X0t,"TFAutoModelForVision2Seq"),X0t.forEach(t),BGe.forEach(t),xje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(u9.$$.fragment,Nl),JAr=i(Nl),wc=n(Nl,"P",{});var Pee=s(wc);YAr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xJ=n(Pee,"A",{href:!0});var z0t=s(xJ);KAr=r(z0t,"from_pretrained()"),z0t.forEach(t),ZAr=r(Pee," class method or the "),$J=n(Pee,"A",{href:!0});var W0t=s($J);eyr=r(W0t,"from_config()"),W0t.forEach(t),oyr=r(Pee,` class
method.`),Pee.forEach(t),ryr=i(Nl),_9=n(Nl,"P",{});var IGe=s(_9);tyr=r(IGe,"This class cannot be instantiated directly using "),aTe=n(IGe,"CODE",{});var Q0t=s(aTe);ayr=r(Q0t,"__init__()"),Q0t.forEach(t),nyr=r(IGe," (throws an error)."),IGe.forEach(t),syr=i(Nl),jt=n(Nl,"DIV",{class:!0});var U6=s(jt);T(b9.$$.fragment,U6),lyr=i(U6),nTe=n(U6,"P",{});var H0t=s(nTe);iyr=r(H0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),H0t.forEach(t),dyr=i(U6),Ac=n(U6,"P",{});var Bee=s(Ac);cyr=r(Bee,`Note:
Loading a model from its configuration file does `),sTe=n(Bee,"STRONG",{});var U0t=s(sTe);fyr=r(U0t,"not"),U0t.forEach(t),myr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(Bee,"A",{href:!0});var J0t=s(kJ);gyr=r(J0t,"from_pretrained()"),J0t.forEach(t),hyr=r(Bee," to load the model weights."),Bee.forEach(t),pyr=i(U6),T(FC.$$.fragment,U6),U6.forEach(t),uyr=i(Nl),qr=n(Nl,"DIV",{class:!0});var jl=s(qr);T(v9.$$.fragment,jl),_yr=i(jl),lTe=n(jl,"P",{});var Y0t=s(lTe);byr=r(Y0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Y0t.forEach(t),vyr=i(jl),mn=n(jl,"P",{});var J6=s(mn);Fyr=r(J6,"The model class to instantiate is selected based on the "),iTe=n(J6,"CODE",{});var K0t=s(iTe);Tyr=r(K0t,"model_type"),K0t.forEach(t),Myr=r(J6,` property of the config object (either
passed as an argument or loaded from `),dTe=n(J6,"CODE",{});var Z0t=s(dTe);Eyr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Cyr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(J6,"CODE",{});var e6t=s(cTe);wyr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),Ayr=r(J6,":"),J6.forEach(t),yyr=i(jl),fTe=n(jl,"UL",{});var o6t=s(fTe);TC=n(o6t,"LI",{});var eIe=s(TC);mTe=n(eIe,"STRONG",{});var r6t=s(mTe);Lyr=r(r6t,"vision-encoder-decoder"),r6t.forEach(t),xyr=r(eIe," \u2014 "),SJ=n(eIe,"A",{href:!0});var t6t=s(SJ);$yr=r(t6t,"TFVisionEncoderDecoderModel"),t6t.forEach(t),kyr=r(eIe," (Vision Encoder decoder model)"),eIe.forEach(t),o6t.forEach(t),Syr=i(jl),T(MC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),$je=i(f),yc=n(f,"H2",{class:!0});var qGe=s(yc);EC=n(qGe,"A",{id:!0,class:!0,href:!0});var a6t=s(EC);gTe=n(a6t,"SPAN",{});var n6t=s(gTe);T(F9.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),Ryr=i(qGe),hTe=n(qGe,"SPAN",{});var s6t=s(hTe);Pyr=r(s6t,"TFAutoModelForSpeechSeq2Seq"),s6t.forEach(t),qGe.forEach(t),kje=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(T9.$$.fragment,Dl),Byr=i(Dl),Lc=n(Dl,"P",{});var Iee=s(Lc);Iyr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RJ=n(Iee,"A",{href:!0});var l6t=s(RJ);qyr=r(l6t,"from_pretrained()"),l6t.forEach(t),Nyr=r(Iee," class method or the "),PJ=n(Iee,"A",{href:!0});var i6t=s(PJ);jyr=r(i6t,"from_config()"),i6t.forEach(t),Dyr=r(Iee,` class
method.`),Iee.forEach(t),Gyr=i(Dl),M9=n(Dl,"P",{});var NGe=s(M9);Oyr=r(NGe,"This class cannot be instantiated directly using "),pTe=n(NGe,"CODE",{});var d6t=s(pTe);Vyr=r(d6t,"__init__()"),d6t.forEach(t),Xyr=r(NGe," (throws an error)."),NGe.forEach(t),zyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var Y6=s(Dt);T(E9.$$.fragment,Y6),Wyr=i(Y6),uTe=n(Y6,"P",{});var c6t=s(uTe);Qyr=r(c6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c6t.forEach(t),Hyr=i(Y6),xc=n(Y6,"P",{});var qee=s(xc);Uyr=r(qee,`Note:
Loading a model from its configuration file does `),_Te=n(qee,"STRONG",{});var f6t=s(_Te);Jyr=r(f6t,"not"),f6t.forEach(t),Yyr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(qee,"A",{href:!0});var m6t=s(BJ);Kyr=r(m6t,"from_pretrained()"),m6t.forEach(t),Zyr=r(qee," to load the model weights."),qee.forEach(t),eLr=i(Y6),T(CC.$$.fragment,Y6),Y6.forEach(t),oLr=i(Dl),Nr=n(Dl,"DIV",{class:!0});var Gl=s(Nr);T(C9.$$.fragment,Gl),rLr=i(Gl),bTe=n(Gl,"P",{});var g6t=s(bTe);tLr=r(g6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),g6t.forEach(t),aLr=i(Gl),gn=n(Gl,"P",{});var K6=s(gn);nLr=r(K6,"The model class to instantiate is selected based on the "),vTe=n(K6,"CODE",{});var h6t=s(vTe);sLr=r(h6t,"model_type"),h6t.forEach(t),lLr=r(K6,` property of the config object (either
passed as an argument or loaded from `),FTe=n(K6,"CODE",{});var p6t=s(FTe);iLr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),dLr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(K6,"CODE",{});var u6t=s(TTe);cLr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),fLr=r(K6,":"),K6.forEach(t),mLr=i(Gl),MTe=n(Gl,"UL",{});var _6t=s(MTe);wC=n(_6t,"LI",{});var oIe=s(wC);ETe=n(oIe,"STRONG",{});var b6t=s(ETe);gLr=r(b6t,"speech_to_text"),b6t.forEach(t),hLr=r(oIe," \u2014 "),IJ=n(oIe,"A",{href:!0});var v6t=s(IJ);pLr=r(v6t,"TFSpeech2TextForConditionalGeneration"),v6t.forEach(t),uLr=r(oIe," (Speech2Text model)"),oIe.forEach(t),_6t.forEach(t),_Lr=i(Gl),T(AC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Sje=i(f),$c=n(f,"H2",{class:!0});var jGe=s($c);yC=n(jGe,"A",{id:!0,class:!0,href:!0});var F6t=s(yC);CTe=n(F6t,"SPAN",{});var T6t=s(CTe);T(w9.$$.fragment,T6t),T6t.forEach(t),F6t.forEach(t),bLr=i(jGe),wTe=n(jGe,"SPAN",{});var M6t=s(wTe);vLr=r(M6t,"FlaxAutoModel"),M6t.forEach(t),jGe.forEach(t),Rje=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(A9.$$.fragment,Ol),FLr=i(Ol),kc=n(Ol,"P",{});var Nee=s(kc);TLr=r(Nee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qJ=n(Nee,"A",{href:!0});var E6t=s(qJ);MLr=r(E6t,"from_pretrained()"),E6t.forEach(t),ELr=r(Nee," class method or the "),NJ=n(Nee,"A",{href:!0});var C6t=s(NJ);CLr=r(C6t,"from_config()"),C6t.forEach(t),wLr=r(Nee,` class
method.`),Nee.forEach(t),ALr=i(Ol),y9=n(Ol,"P",{});var DGe=s(y9);yLr=r(DGe,"This class cannot be instantiated directly using "),ATe=n(DGe,"CODE",{});var w6t=s(ATe);LLr=r(w6t,"__init__()"),w6t.forEach(t),xLr=r(DGe," (throws an error)."),DGe.forEach(t),$Lr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var Z6=s(Gt);T(L9.$$.fragment,Z6),kLr=i(Z6),yTe=n(Z6,"P",{});var A6t=s(yTe);SLr=r(A6t,"Instantiates one of the base model classes of the library from a configuration."),A6t.forEach(t),RLr=i(Z6),Sc=n(Z6,"P",{});var jee=s(Sc);PLr=r(jee,`Note:
Loading a model from its configuration file does `),LTe=n(jee,"STRONG",{});var y6t=s(LTe);BLr=r(y6t,"not"),y6t.forEach(t),ILr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(jee,"A",{href:!0});var L6t=s(jJ);qLr=r(L6t,"from_pretrained()"),L6t.forEach(t),NLr=r(jee," to load the model weights."),jee.forEach(t),jLr=i(Z6),T(LC.$$.fragment,Z6),Z6.forEach(t),DLr=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(x9.$$.fragment,Vl),GLr=i(Vl),xTe=n(Vl,"P",{});var x6t=s(xTe);OLr=r(x6t,"Instantiate one of the base model classes of the library from a pretrained model."),x6t.forEach(t),VLr=i(Vl),hn=n(Vl,"P",{});var eA=s(hn);XLr=r(eA,"The model class to instantiate is selected based on the "),$Te=n(eA,"CODE",{});var $6t=s($Te);zLr=r($6t,"model_type"),$6t.forEach(t),WLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),kTe=n(eA,"CODE",{});var k6t=s(kTe);QLr=r(k6t,"pretrained_model_name_or_path"),k6t.forEach(t),HLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(eA,"CODE",{});var S6t=s(STe);ULr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),JLr=r(eA,":"),eA.forEach(t),YLr=i(Vl),te=n(Vl,"UL",{});var ne=s(te);xC=n(ne,"LI",{});var rIe=s(xC);RTe=n(rIe,"STRONG",{});var R6t=s(RTe);KLr=r(R6t,"albert"),R6t.forEach(t),ZLr=r(rIe," \u2014 "),DJ=n(rIe,"A",{href:!0});var P6t=s(DJ);e8r=r(P6t,"FlaxAlbertModel"),P6t.forEach(t),o8r=r(rIe," (ALBERT model)"),rIe.forEach(t),r8r=i(ne),$C=n(ne,"LI",{});var tIe=s($C);PTe=n(tIe,"STRONG",{});var B6t=s(PTe);t8r=r(B6t,"bart"),B6t.forEach(t),a8r=r(tIe," \u2014 "),GJ=n(tIe,"A",{href:!0});var I6t=s(GJ);n8r=r(I6t,"FlaxBartModel"),I6t.forEach(t),s8r=r(tIe," (BART model)"),tIe.forEach(t),l8r=i(ne),kC=n(ne,"LI",{});var aIe=s(kC);BTe=n(aIe,"STRONG",{});var q6t=s(BTe);i8r=r(q6t,"beit"),q6t.forEach(t),d8r=r(aIe," \u2014 "),OJ=n(aIe,"A",{href:!0});var N6t=s(OJ);c8r=r(N6t,"FlaxBeitModel"),N6t.forEach(t),f8r=r(aIe," (BEiT model)"),aIe.forEach(t),m8r=i(ne),SC=n(ne,"LI",{});var nIe=s(SC);ITe=n(nIe,"STRONG",{});var j6t=s(ITe);g8r=r(j6t,"bert"),j6t.forEach(t),h8r=r(nIe," \u2014 "),VJ=n(nIe,"A",{href:!0});var D6t=s(VJ);p8r=r(D6t,"FlaxBertModel"),D6t.forEach(t),u8r=r(nIe," (BERT model)"),nIe.forEach(t),_8r=i(ne),RC=n(ne,"LI",{});var sIe=s(RC);qTe=n(sIe,"STRONG",{});var G6t=s(qTe);b8r=r(G6t,"big_bird"),G6t.forEach(t),v8r=r(sIe," \u2014 "),XJ=n(sIe,"A",{href:!0});var O6t=s(XJ);F8r=r(O6t,"FlaxBigBirdModel"),O6t.forEach(t),T8r=r(sIe," (BigBird model)"),sIe.forEach(t),M8r=i(ne),PC=n(ne,"LI",{});var lIe=s(PC);NTe=n(lIe,"STRONG",{});var V6t=s(NTe);E8r=r(V6t,"blenderbot"),V6t.forEach(t),C8r=r(lIe," \u2014 "),zJ=n(lIe,"A",{href:!0});var X6t=s(zJ);w8r=r(X6t,"FlaxBlenderbotModel"),X6t.forEach(t),A8r=r(lIe," (Blenderbot model)"),lIe.forEach(t),y8r=i(ne),BC=n(ne,"LI",{});var iIe=s(BC);jTe=n(iIe,"STRONG",{});var z6t=s(jTe);L8r=r(z6t,"blenderbot-small"),z6t.forEach(t),x8r=r(iIe," \u2014 "),WJ=n(iIe,"A",{href:!0});var W6t=s(WJ);$8r=r(W6t,"FlaxBlenderbotSmallModel"),W6t.forEach(t),k8r=r(iIe," (BlenderbotSmall model)"),iIe.forEach(t),S8r=i(ne),IC=n(ne,"LI",{});var dIe=s(IC);DTe=n(dIe,"STRONG",{});var Q6t=s(DTe);R8r=r(Q6t,"clip"),Q6t.forEach(t),P8r=r(dIe," \u2014 "),QJ=n(dIe,"A",{href:!0});var H6t=s(QJ);B8r=r(H6t,"FlaxCLIPModel"),H6t.forEach(t),I8r=r(dIe," (CLIP model)"),dIe.forEach(t),q8r=i(ne),qC=n(ne,"LI",{});var cIe=s(qC);GTe=n(cIe,"STRONG",{});var U6t=s(GTe);N8r=r(U6t,"distilbert"),U6t.forEach(t),j8r=r(cIe," \u2014 "),HJ=n(cIe,"A",{href:!0});var J6t=s(HJ);D8r=r(J6t,"FlaxDistilBertModel"),J6t.forEach(t),G8r=r(cIe," (DistilBERT model)"),cIe.forEach(t),O8r=i(ne),NC=n(ne,"LI",{});var fIe=s(NC);OTe=n(fIe,"STRONG",{});var Y6t=s(OTe);V8r=r(Y6t,"electra"),Y6t.forEach(t),X8r=r(fIe," \u2014 "),UJ=n(fIe,"A",{href:!0});var K6t=s(UJ);z8r=r(K6t,"FlaxElectraModel"),K6t.forEach(t),W8r=r(fIe," (ELECTRA model)"),fIe.forEach(t),Q8r=i(ne),jC=n(ne,"LI",{});var mIe=s(jC);VTe=n(mIe,"STRONG",{});var Z6t=s(VTe);H8r=r(Z6t,"gpt2"),Z6t.forEach(t),U8r=r(mIe," \u2014 "),JJ=n(mIe,"A",{href:!0});var eAt=s(JJ);J8r=r(eAt,"FlaxGPT2Model"),eAt.forEach(t),Y8r=r(mIe," (OpenAI GPT-2 model)"),mIe.forEach(t),K8r=i(ne),DC=n(ne,"LI",{});var gIe=s(DC);XTe=n(gIe,"STRONG",{});var oAt=s(XTe);Z8r=r(oAt,"gpt_neo"),oAt.forEach(t),e9r=r(gIe," \u2014 "),YJ=n(gIe,"A",{href:!0});var rAt=s(YJ);o9r=r(rAt,"FlaxGPTNeoModel"),rAt.forEach(t),r9r=r(gIe," (GPT Neo model)"),gIe.forEach(t),t9r=i(ne),GC=n(ne,"LI",{});var hIe=s(GC);zTe=n(hIe,"STRONG",{});var tAt=s(zTe);a9r=r(tAt,"gptj"),tAt.forEach(t),n9r=r(hIe," \u2014 "),KJ=n(hIe,"A",{href:!0});var aAt=s(KJ);s9r=r(aAt,"FlaxGPTJModel"),aAt.forEach(t),l9r=r(hIe," (GPT-J model)"),hIe.forEach(t),i9r=i(ne),OC=n(ne,"LI",{});var pIe=s(OC);WTe=n(pIe,"STRONG",{});var nAt=s(WTe);d9r=r(nAt,"marian"),nAt.forEach(t),c9r=r(pIe," \u2014 "),ZJ=n(pIe,"A",{href:!0});var sAt=s(ZJ);f9r=r(sAt,"FlaxMarianModel"),sAt.forEach(t),m9r=r(pIe," (Marian model)"),pIe.forEach(t),g9r=i(ne),VC=n(ne,"LI",{});var uIe=s(VC);QTe=n(uIe,"STRONG",{});var lAt=s(QTe);h9r=r(lAt,"mbart"),lAt.forEach(t),p9r=r(uIe," \u2014 "),eY=n(uIe,"A",{href:!0});var iAt=s(eY);u9r=r(iAt,"FlaxMBartModel"),iAt.forEach(t),_9r=r(uIe," (mBART model)"),uIe.forEach(t),b9r=i(ne),XC=n(ne,"LI",{});var _Ie=s(XC);HTe=n(_Ie,"STRONG",{});var dAt=s(HTe);v9r=r(dAt,"mt5"),dAt.forEach(t),F9r=r(_Ie," \u2014 "),oY=n(_Ie,"A",{href:!0});var cAt=s(oY);T9r=r(cAt,"FlaxMT5Model"),cAt.forEach(t),M9r=r(_Ie," (mT5 model)"),_Ie.forEach(t),E9r=i(ne),zC=n(ne,"LI",{});var bIe=s(zC);UTe=n(bIe,"STRONG",{});var fAt=s(UTe);C9r=r(fAt,"pegasus"),fAt.forEach(t),w9r=r(bIe," \u2014 "),rY=n(bIe,"A",{href:!0});var mAt=s(rY);A9r=r(mAt,"FlaxPegasusModel"),mAt.forEach(t),y9r=r(bIe," (Pegasus model)"),bIe.forEach(t),L9r=i(ne),WC=n(ne,"LI",{});var vIe=s(WC);JTe=n(vIe,"STRONG",{});var gAt=s(JTe);x9r=r(gAt,"roberta"),gAt.forEach(t),$9r=r(vIe," \u2014 "),tY=n(vIe,"A",{href:!0});var hAt=s(tY);k9r=r(hAt,"FlaxRobertaModel"),hAt.forEach(t),S9r=r(vIe," (RoBERTa model)"),vIe.forEach(t),R9r=i(ne),QC=n(ne,"LI",{});var FIe=s(QC);YTe=n(FIe,"STRONG",{});var pAt=s(YTe);P9r=r(pAt,"roformer"),pAt.forEach(t),B9r=r(FIe," \u2014 "),aY=n(FIe,"A",{href:!0});var uAt=s(aY);I9r=r(uAt,"FlaxRoFormerModel"),uAt.forEach(t),q9r=r(FIe," (RoFormer model)"),FIe.forEach(t),N9r=i(ne),HC=n(ne,"LI",{});var TIe=s(HC);KTe=n(TIe,"STRONG",{});var _At=s(KTe);j9r=r(_At,"t5"),_At.forEach(t),D9r=r(TIe," \u2014 "),nY=n(TIe,"A",{href:!0});var bAt=s(nY);G9r=r(bAt,"FlaxT5Model"),bAt.forEach(t),O9r=r(TIe," (T5 model)"),TIe.forEach(t),V9r=i(ne),UC=n(ne,"LI",{});var MIe=s(UC);ZTe=n(MIe,"STRONG",{});var vAt=s(ZTe);X9r=r(vAt,"vision-text-dual-encoder"),vAt.forEach(t),z9r=r(MIe," \u2014 "),sY=n(MIe,"A",{href:!0});var FAt=s(sY);W9r=r(FAt,"FlaxVisionTextDualEncoderModel"),FAt.forEach(t),Q9r=r(MIe," (VisionTextDualEncoder model)"),MIe.forEach(t),H9r=i(ne),JC=n(ne,"LI",{});var EIe=s(JC);e7e=n(EIe,"STRONG",{});var TAt=s(e7e);U9r=r(TAt,"vit"),TAt.forEach(t),J9r=r(EIe," \u2014 "),lY=n(EIe,"A",{href:!0});var MAt=s(lY);Y9r=r(MAt,"FlaxViTModel"),MAt.forEach(t),K9r=r(EIe," (ViT model)"),EIe.forEach(t),Z9r=i(ne),YC=n(ne,"LI",{});var CIe=s(YC);o7e=n(CIe,"STRONG",{});var EAt=s(o7e);exr=r(EAt,"wav2vec2"),EAt.forEach(t),oxr=r(CIe," \u2014 "),iY=n(CIe,"A",{href:!0});var CAt=s(iY);rxr=r(CAt,"FlaxWav2Vec2Model"),CAt.forEach(t),txr=r(CIe," (Wav2Vec2 model)"),CIe.forEach(t),axr=i(ne),KC=n(ne,"LI",{});var wIe=s(KC);r7e=n(wIe,"STRONG",{});var wAt=s(r7e);nxr=r(wAt,"xglm"),wAt.forEach(t),sxr=r(wIe," \u2014 "),dY=n(wIe,"A",{href:!0});var AAt=s(dY);lxr=r(AAt,"FlaxXGLMModel"),AAt.forEach(t),ixr=r(wIe," (XGLM model)"),wIe.forEach(t),dxr=i(ne),ZC=n(ne,"LI",{});var AIe=s(ZC);t7e=n(AIe,"STRONG",{});var yAt=s(t7e);cxr=r(yAt,"xlm-roberta"),yAt.forEach(t),fxr=r(AIe," \u2014 "),cY=n(AIe,"A",{href:!0});var LAt=s(cY);mxr=r(LAt,"FlaxXLMRobertaModel"),LAt.forEach(t),gxr=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),ne.forEach(t),hxr=i(Vl),T(e3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Pje=i(f),Rc=n(f,"H2",{class:!0});var GGe=s(Rc);o3=n(GGe,"A",{id:!0,class:!0,href:!0});var xAt=s(o3);a7e=n(xAt,"SPAN",{});var $At=s(a7e);T($9.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),pxr=i(GGe),n7e=n(GGe,"SPAN",{});var kAt=s(n7e);uxr=r(kAt,"FlaxAutoModelForCausalLM"),kAt.forEach(t),GGe.forEach(t),Bje=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(k9.$$.fragment,Xl),_xr=i(Xl),Pc=n(Xl,"P",{});var Dee=s(Pc);bxr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fY=n(Dee,"A",{href:!0});var SAt=s(fY);vxr=r(SAt,"from_pretrained()"),SAt.forEach(t),Fxr=r(Dee," class method or the "),mY=n(Dee,"A",{href:!0});var RAt=s(mY);Txr=r(RAt,"from_config()"),RAt.forEach(t),Mxr=r(Dee,` class
method.`),Dee.forEach(t),Exr=i(Xl),S9=n(Xl,"P",{});var OGe=s(S9);Cxr=r(OGe,"This class cannot be instantiated directly using "),s7e=n(OGe,"CODE",{});var PAt=s(s7e);wxr=r(PAt,"__init__()"),PAt.forEach(t),Axr=r(OGe," (throws an error)."),OGe.forEach(t),yxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var oA=s(Ot);T(R9.$$.fragment,oA),Lxr=i(oA),l7e=n(oA,"P",{});var BAt=s(l7e);xxr=r(BAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),BAt.forEach(t),$xr=i(oA),Bc=n(oA,"P",{});var Gee=s(Bc);kxr=r(Gee,`Note:
Loading a model from its configuration file does `),i7e=n(Gee,"STRONG",{});var IAt=s(i7e);Sxr=r(IAt,"not"),IAt.forEach(t),Rxr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Gee,"A",{href:!0});var qAt=s(gY);Pxr=r(qAt,"from_pretrained()"),qAt.forEach(t),Bxr=r(Gee," to load the model weights."),Gee.forEach(t),Ixr=i(oA),T(r3.$$.fragment,oA),oA.forEach(t),qxr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(P9.$$.fragment,zl),Nxr=i(zl),d7e=n(zl,"P",{});var NAt=s(d7e);jxr=r(NAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NAt.forEach(t),Dxr=i(zl),pn=n(zl,"P",{});var rA=s(pn);Gxr=r(rA,"The model class to instantiate is selected based on the "),c7e=n(rA,"CODE",{});var jAt=s(c7e);Oxr=r(jAt,"model_type"),jAt.forEach(t),Vxr=r(rA,` property of the config object (either
passed as an argument or loaded from `),f7e=n(rA,"CODE",{});var DAt=s(f7e);Xxr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),zxr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(rA,"CODE",{});var GAt=s(m7e);Wxr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),Qxr=r(rA,":"),rA.forEach(t),Hxr=i(zl),Re=n(zl,"UL",{});var Xe=s(Re);t3=n(Xe,"LI",{});var yIe=s(t3);g7e=n(yIe,"STRONG",{});var OAt=s(g7e);Uxr=r(OAt,"bart"),OAt.forEach(t),Jxr=r(yIe," \u2014 "),hY=n(yIe,"A",{href:!0});var VAt=s(hY);Yxr=r(VAt,"FlaxBartForCausalLM"),VAt.forEach(t),Kxr=r(yIe," (BART model)"),yIe.forEach(t),Zxr=i(Xe),a3=n(Xe,"LI",{});var LIe=s(a3);h7e=n(LIe,"STRONG",{});var XAt=s(h7e);e$r=r(XAt,"bert"),XAt.forEach(t),o$r=r(LIe," \u2014 "),pY=n(LIe,"A",{href:!0});var zAt=s(pY);r$r=r(zAt,"FlaxBertForCausalLM"),zAt.forEach(t),t$r=r(LIe," (BERT model)"),LIe.forEach(t),a$r=i(Xe),n3=n(Xe,"LI",{});var xIe=s(n3);p7e=n(xIe,"STRONG",{});var WAt=s(p7e);n$r=r(WAt,"big_bird"),WAt.forEach(t),s$r=r(xIe," \u2014 "),uY=n(xIe,"A",{href:!0});var QAt=s(uY);l$r=r(QAt,"FlaxBigBirdForCausalLM"),QAt.forEach(t),i$r=r(xIe," (BigBird model)"),xIe.forEach(t),d$r=i(Xe),s3=n(Xe,"LI",{});var $Ie=s(s3);u7e=n($Ie,"STRONG",{});var HAt=s(u7e);c$r=r(HAt,"electra"),HAt.forEach(t),f$r=r($Ie," \u2014 "),_Y=n($Ie,"A",{href:!0});var UAt=s(_Y);m$r=r(UAt,"FlaxElectraForCausalLM"),UAt.forEach(t),g$r=r($Ie," (ELECTRA model)"),$Ie.forEach(t),h$r=i(Xe),l3=n(Xe,"LI",{});var kIe=s(l3);_7e=n(kIe,"STRONG",{});var JAt=s(_7e);p$r=r(JAt,"gpt2"),JAt.forEach(t),u$r=r(kIe," \u2014 "),bY=n(kIe,"A",{href:!0});var YAt=s(bY);_$r=r(YAt,"FlaxGPT2LMHeadModel"),YAt.forEach(t),b$r=r(kIe," (OpenAI GPT-2 model)"),kIe.forEach(t),v$r=i(Xe),i3=n(Xe,"LI",{});var SIe=s(i3);b7e=n(SIe,"STRONG",{});var KAt=s(b7e);F$r=r(KAt,"gpt_neo"),KAt.forEach(t),T$r=r(SIe," \u2014 "),vY=n(SIe,"A",{href:!0});var ZAt=s(vY);M$r=r(ZAt,"FlaxGPTNeoForCausalLM"),ZAt.forEach(t),E$r=r(SIe," (GPT Neo model)"),SIe.forEach(t),C$r=i(Xe),d3=n(Xe,"LI",{});var RIe=s(d3);v7e=n(RIe,"STRONG",{});var eyt=s(v7e);w$r=r(eyt,"gptj"),eyt.forEach(t),A$r=r(RIe," \u2014 "),FY=n(RIe,"A",{href:!0});var oyt=s(FY);y$r=r(oyt,"FlaxGPTJForCausalLM"),oyt.forEach(t),L$r=r(RIe," (GPT-J model)"),RIe.forEach(t),x$r=i(Xe),c3=n(Xe,"LI",{});var PIe=s(c3);F7e=n(PIe,"STRONG",{});var ryt=s(F7e);$$r=r(ryt,"roberta"),ryt.forEach(t),k$r=r(PIe," \u2014 "),TY=n(PIe,"A",{href:!0});var tyt=s(TY);S$r=r(tyt,"FlaxRobertaForCausalLM"),tyt.forEach(t),R$r=r(PIe," (RoBERTa model)"),PIe.forEach(t),P$r=i(Xe),f3=n(Xe,"LI",{});var BIe=s(f3);T7e=n(BIe,"STRONG",{});var ayt=s(T7e);B$r=r(ayt,"xglm"),ayt.forEach(t),I$r=r(BIe," \u2014 "),MY=n(BIe,"A",{href:!0});var nyt=s(MY);q$r=r(nyt,"FlaxXGLMForCausalLM"),nyt.forEach(t),N$r=r(BIe," (XGLM model)"),BIe.forEach(t),Xe.forEach(t),j$r=i(zl),T(m3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Ije=i(f),Ic=n(f,"H2",{class:!0});var VGe=s(Ic);g3=n(VGe,"A",{id:!0,class:!0,href:!0});var syt=s(g3);M7e=n(syt,"SPAN",{});var lyt=s(M7e);T(B9.$$.fragment,lyt),lyt.forEach(t),syt.forEach(t),D$r=i(VGe),E7e=n(VGe,"SPAN",{});var iyt=s(E7e);G$r=r(iyt,"FlaxAutoModelForPreTraining"),iyt.forEach(t),VGe.forEach(t),qje=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(I9.$$.fragment,Wl),O$r=i(Wl),qc=n(Wl,"P",{});var Oee=s(qc);V$r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EY=n(Oee,"A",{href:!0});var dyt=s(EY);X$r=r(dyt,"from_pretrained()"),dyt.forEach(t),z$r=r(Oee," class method or the "),CY=n(Oee,"A",{href:!0});var cyt=s(CY);W$r=r(cyt,"from_config()"),cyt.forEach(t),Q$r=r(Oee,` class
method.`),Oee.forEach(t),H$r=i(Wl),q9=n(Wl,"P",{});var XGe=s(q9);U$r=r(XGe,"This class cannot be instantiated directly using "),C7e=n(XGe,"CODE",{});var fyt=s(C7e);J$r=r(fyt,"__init__()"),fyt.forEach(t),Y$r=r(XGe," (throws an error)."),XGe.forEach(t),K$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var tA=s(Vt);T(N9.$$.fragment,tA),Z$r=i(tA),w7e=n(tA,"P",{});var myt=s(w7e);ekr=r(myt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),myt.forEach(t),okr=i(tA),Nc=n(tA,"P",{});var Vee=s(Nc);rkr=r(Vee,`Note:
Loading a model from its configuration file does `),A7e=n(Vee,"STRONG",{});var gyt=s(A7e);tkr=r(gyt,"not"),gyt.forEach(t),akr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(Vee,"A",{href:!0});var hyt=s(wY);nkr=r(hyt,"from_pretrained()"),hyt.forEach(t),skr=r(Vee," to load the model weights."),Vee.forEach(t),lkr=i(tA),T(h3.$$.fragment,tA),tA.forEach(t),ikr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(j9.$$.fragment,Ql),dkr=i(Ql),y7e=n(Ql,"P",{});var pyt=s(y7e);ckr=r(pyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pyt.forEach(t),fkr=i(Ql),un=n(Ql,"P",{});var aA=s(un);mkr=r(aA,"The model class to instantiate is selected based on the "),L7e=n(aA,"CODE",{});var uyt=s(L7e);gkr=r(uyt,"model_type"),uyt.forEach(t),hkr=r(aA,` property of the config object (either
passed as an argument or loaded from `),x7e=n(aA,"CODE",{});var _yt=s(x7e);pkr=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),ukr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(aA,"CODE",{});var byt=s($7e);_kr=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),bkr=r(aA,":"),aA.forEach(t),vkr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);p3=n(we,"LI",{});var IIe=s(p3);k7e=n(IIe,"STRONG",{});var vyt=s(k7e);Fkr=r(vyt,"albert"),vyt.forEach(t),Tkr=r(IIe," \u2014 "),AY=n(IIe,"A",{href:!0});var Fyt=s(AY);Mkr=r(Fyt,"FlaxAlbertForPreTraining"),Fyt.forEach(t),Ekr=r(IIe," (ALBERT model)"),IIe.forEach(t),Ckr=i(we),u3=n(we,"LI",{});var qIe=s(u3);S7e=n(qIe,"STRONG",{});var Tyt=s(S7e);wkr=r(Tyt,"bart"),Tyt.forEach(t),Akr=r(qIe," \u2014 "),yY=n(qIe,"A",{href:!0});var Myt=s(yY);ykr=r(Myt,"FlaxBartForConditionalGeneration"),Myt.forEach(t),Lkr=r(qIe," (BART model)"),qIe.forEach(t),xkr=i(we),_3=n(we,"LI",{});var NIe=s(_3);R7e=n(NIe,"STRONG",{});var Eyt=s(R7e);$kr=r(Eyt,"bert"),Eyt.forEach(t),kkr=r(NIe," \u2014 "),LY=n(NIe,"A",{href:!0});var Cyt=s(LY);Skr=r(Cyt,"FlaxBertForPreTraining"),Cyt.forEach(t),Rkr=r(NIe," (BERT model)"),NIe.forEach(t),Pkr=i(we),b3=n(we,"LI",{});var jIe=s(b3);P7e=n(jIe,"STRONG",{});var wyt=s(P7e);Bkr=r(wyt,"big_bird"),wyt.forEach(t),Ikr=r(jIe," \u2014 "),xY=n(jIe,"A",{href:!0});var Ayt=s(xY);qkr=r(Ayt,"FlaxBigBirdForPreTraining"),Ayt.forEach(t),Nkr=r(jIe," (BigBird model)"),jIe.forEach(t),jkr=i(we),v3=n(we,"LI",{});var DIe=s(v3);B7e=n(DIe,"STRONG",{});var yyt=s(B7e);Dkr=r(yyt,"electra"),yyt.forEach(t),Gkr=r(DIe," \u2014 "),$Y=n(DIe,"A",{href:!0});var Lyt=s($Y);Okr=r(Lyt,"FlaxElectraForPreTraining"),Lyt.forEach(t),Vkr=r(DIe," (ELECTRA model)"),DIe.forEach(t),Xkr=i(we),F3=n(we,"LI",{});var GIe=s(F3);I7e=n(GIe,"STRONG",{});var xyt=s(I7e);zkr=r(xyt,"mbart"),xyt.forEach(t),Wkr=r(GIe," \u2014 "),kY=n(GIe,"A",{href:!0});var $yt=s(kY);Qkr=r($yt,"FlaxMBartForConditionalGeneration"),$yt.forEach(t),Hkr=r(GIe," (mBART model)"),GIe.forEach(t),Ukr=i(we),T3=n(we,"LI",{});var OIe=s(T3);q7e=n(OIe,"STRONG",{});var kyt=s(q7e);Jkr=r(kyt,"mt5"),kyt.forEach(t),Ykr=r(OIe," \u2014 "),SY=n(OIe,"A",{href:!0});var Syt=s(SY);Kkr=r(Syt,"FlaxMT5ForConditionalGeneration"),Syt.forEach(t),Zkr=r(OIe," (mT5 model)"),OIe.forEach(t),eSr=i(we),M3=n(we,"LI",{});var VIe=s(M3);N7e=n(VIe,"STRONG",{});var Ryt=s(N7e);oSr=r(Ryt,"roberta"),Ryt.forEach(t),rSr=r(VIe," \u2014 "),RY=n(VIe,"A",{href:!0});var Pyt=s(RY);tSr=r(Pyt,"FlaxRobertaForMaskedLM"),Pyt.forEach(t),aSr=r(VIe," (RoBERTa model)"),VIe.forEach(t),nSr=i(we),E3=n(we,"LI",{});var XIe=s(E3);j7e=n(XIe,"STRONG",{});var Byt=s(j7e);sSr=r(Byt,"roformer"),Byt.forEach(t),lSr=r(XIe," \u2014 "),PY=n(XIe,"A",{href:!0});var Iyt=s(PY);iSr=r(Iyt,"FlaxRoFormerForMaskedLM"),Iyt.forEach(t),dSr=r(XIe," (RoFormer model)"),XIe.forEach(t),cSr=i(we),C3=n(we,"LI",{});var zIe=s(C3);D7e=n(zIe,"STRONG",{});var qyt=s(D7e);fSr=r(qyt,"t5"),qyt.forEach(t),mSr=r(zIe," \u2014 "),BY=n(zIe,"A",{href:!0});var Nyt=s(BY);gSr=r(Nyt,"FlaxT5ForConditionalGeneration"),Nyt.forEach(t),hSr=r(zIe," (T5 model)"),zIe.forEach(t),pSr=i(we),w3=n(we,"LI",{});var WIe=s(w3);G7e=n(WIe,"STRONG",{});var jyt=s(G7e);uSr=r(jyt,"wav2vec2"),jyt.forEach(t),_Sr=r(WIe," \u2014 "),IY=n(WIe,"A",{href:!0});var Dyt=s(IY);bSr=r(Dyt,"FlaxWav2Vec2ForPreTraining"),Dyt.forEach(t),vSr=r(WIe," (Wav2Vec2 model)"),WIe.forEach(t),FSr=i(we),A3=n(we,"LI",{});var QIe=s(A3);O7e=n(QIe,"STRONG",{});var Gyt=s(O7e);TSr=r(Gyt,"xlm-roberta"),Gyt.forEach(t),MSr=r(QIe," \u2014 "),qY=n(QIe,"A",{href:!0});var Oyt=s(qY);ESr=r(Oyt,"FlaxXLMRobertaForMaskedLM"),Oyt.forEach(t),CSr=r(QIe," (XLM-RoBERTa model)"),QIe.forEach(t),we.forEach(t),wSr=i(Ql),T(y3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),Nje=i(f),jc=n(f,"H2",{class:!0});var zGe=s(jc);L3=n(zGe,"A",{id:!0,class:!0,href:!0});var Vyt=s(L3);V7e=n(Vyt,"SPAN",{});var Xyt=s(V7e);T(D9.$$.fragment,Xyt),Xyt.forEach(t),Vyt.forEach(t),ASr=i(zGe),X7e=n(zGe,"SPAN",{});var zyt=s(X7e);ySr=r(zyt,"FlaxAutoModelForMaskedLM"),zyt.forEach(t),zGe.forEach(t),jje=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(G9.$$.fragment,Hl),LSr=i(Hl),Dc=n(Hl,"P",{});var Xee=s(Dc);xSr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NY=n(Xee,"A",{href:!0});var Wyt=s(NY);$Sr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),kSr=r(Xee," class method or the "),jY=n(Xee,"A",{href:!0});var Qyt=s(jY);SSr=r(Qyt,"from_config()"),Qyt.forEach(t),RSr=r(Xee,` class
method.`),Xee.forEach(t),PSr=i(Hl),O9=n(Hl,"P",{});var WGe=s(O9);BSr=r(WGe,"This class cannot be instantiated directly using "),z7e=n(WGe,"CODE",{});var Hyt=s(z7e);ISr=r(Hyt,"__init__()"),Hyt.forEach(t),qSr=r(WGe," (throws an error)."),WGe.forEach(t),NSr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var nA=s(Xt);T(V9.$$.fragment,nA),jSr=i(nA),W7e=n(nA,"P",{});var Uyt=s(W7e);DSr=r(Uyt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Uyt.forEach(t),GSr=i(nA),Gc=n(nA,"P",{});var zee=s(Gc);OSr=r(zee,`Note:
Loading a model from its configuration file does `),Q7e=n(zee,"STRONG",{});var Jyt=s(Q7e);VSr=r(Jyt,"not"),Jyt.forEach(t),XSr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(zee,"A",{href:!0});var Yyt=s(DY);zSr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),WSr=r(zee," to load the model weights."),zee.forEach(t),QSr=i(nA),T(x3.$$.fragment,nA),nA.forEach(t),HSr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(X9.$$.fragment,Ul),USr=i(Ul),H7e=n(Ul,"P",{});var Kyt=s(H7e);JSr=r(Kyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kyt.forEach(t),YSr=i(Ul),_n=n(Ul,"P",{});var sA=s(_n);KSr=r(sA,"The model class to instantiate is selected based on the "),U7e=n(sA,"CODE",{});var Zyt=s(U7e);ZSr=r(Zyt,"model_type"),Zyt.forEach(t),eRr=r(sA,` property of the config object (either
passed as an argument or loaded from `),J7e=n(sA,"CODE",{});var eLt=s(J7e);oRr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),rRr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(sA,"CODE",{});var oLt=s(Y7e);tRr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),aRr=r(sA,":"),sA.forEach(t),nRr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);$3=n(Ie,"LI",{});var HIe=s($3);K7e=n(HIe,"STRONG",{});var rLt=s(K7e);sRr=r(rLt,"albert"),rLt.forEach(t),lRr=r(HIe," \u2014 "),GY=n(HIe,"A",{href:!0});var tLt=s(GY);iRr=r(tLt,"FlaxAlbertForMaskedLM"),tLt.forEach(t),dRr=r(HIe," (ALBERT model)"),HIe.forEach(t),cRr=i(Ie),k3=n(Ie,"LI",{});var UIe=s(k3);Z7e=n(UIe,"STRONG",{});var aLt=s(Z7e);fRr=r(aLt,"bart"),aLt.forEach(t),mRr=r(UIe," \u2014 "),OY=n(UIe,"A",{href:!0});var nLt=s(OY);gRr=r(nLt,"FlaxBartForConditionalGeneration"),nLt.forEach(t),hRr=r(UIe," (BART model)"),UIe.forEach(t),pRr=i(Ie),S3=n(Ie,"LI",{});var JIe=s(S3);eMe=n(JIe,"STRONG",{});var sLt=s(eMe);uRr=r(sLt,"bert"),sLt.forEach(t),_Rr=r(JIe," \u2014 "),VY=n(JIe,"A",{href:!0});var lLt=s(VY);bRr=r(lLt,"FlaxBertForMaskedLM"),lLt.forEach(t),vRr=r(JIe," (BERT model)"),JIe.forEach(t),FRr=i(Ie),R3=n(Ie,"LI",{});var YIe=s(R3);oMe=n(YIe,"STRONG",{});var iLt=s(oMe);TRr=r(iLt,"big_bird"),iLt.forEach(t),MRr=r(YIe," \u2014 "),XY=n(YIe,"A",{href:!0});var dLt=s(XY);ERr=r(dLt,"FlaxBigBirdForMaskedLM"),dLt.forEach(t),CRr=r(YIe," (BigBird model)"),YIe.forEach(t),wRr=i(Ie),P3=n(Ie,"LI",{});var KIe=s(P3);rMe=n(KIe,"STRONG",{});var cLt=s(rMe);ARr=r(cLt,"distilbert"),cLt.forEach(t),yRr=r(KIe," \u2014 "),zY=n(KIe,"A",{href:!0});var fLt=s(zY);LRr=r(fLt,"FlaxDistilBertForMaskedLM"),fLt.forEach(t),xRr=r(KIe," (DistilBERT model)"),KIe.forEach(t),$Rr=i(Ie),B3=n(Ie,"LI",{});var ZIe=s(B3);tMe=n(ZIe,"STRONG",{});var mLt=s(tMe);kRr=r(mLt,"electra"),mLt.forEach(t),SRr=r(ZIe," \u2014 "),WY=n(ZIe,"A",{href:!0});var gLt=s(WY);RRr=r(gLt,"FlaxElectraForMaskedLM"),gLt.forEach(t),PRr=r(ZIe," (ELECTRA model)"),ZIe.forEach(t),BRr=i(Ie),I3=n(Ie,"LI",{});var eqe=s(I3);aMe=n(eqe,"STRONG",{});var hLt=s(aMe);IRr=r(hLt,"mbart"),hLt.forEach(t),qRr=r(eqe," \u2014 "),QY=n(eqe,"A",{href:!0});var pLt=s(QY);NRr=r(pLt,"FlaxMBartForConditionalGeneration"),pLt.forEach(t),jRr=r(eqe," (mBART model)"),eqe.forEach(t),DRr=i(Ie),q3=n(Ie,"LI",{});var oqe=s(q3);nMe=n(oqe,"STRONG",{});var uLt=s(nMe);GRr=r(uLt,"roberta"),uLt.forEach(t),ORr=r(oqe," \u2014 "),HY=n(oqe,"A",{href:!0});var _Lt=s(HY);VRr=r(_Lt,"FlaxRobertaForMaskedLM"),_Lt.forEach(t),XRr=r(oqe," (RoBERTa model)"),oqe.forEach(t),zRr=i(Ie),N3=n(Ie,"LI",{});var rqe=s(N3);sMe=n(rqe,"STRONG",{});var bLt=s(sMe);WRr=r(bLt,"roformer"),bLt.forEach(t),QRr=r(rqe," \u2014 "),UY=n(rqe,"A",{href:!0});var vLt=s(UY);HRr=r(vLt,"FlaxRoFormerForMaskedLM"),vLt.forEach(t),URr=r(rqe," (RoFormer model)"),rqe.forEach(t),JRr=i(Ie),j3=n(Ie,"LI",{});var tqe=s(j3);lMe=n(tqe,"STRONG",{});var FLt=s(lMe);YRr=r(FLt,"xlm-roberta"),FLt.forEach(t),KRr=r(tqe," \u2014 "),JY=n(tqe,"A",{href:!0});var TLt=s(JY);ZRr=r(TLt,"FlaxXLMRobertaForMaskedLM"),TLt.forEach(t),ePr=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),Ie.forEach(t),oPr=i(Ul),T(D3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Dje=i(f),Oc=n(f,"H2",{class:!0});var QGe=s(Oc);G3=n(QGe,"A",{id:!0,class:!0,href:!0});var MLt=s(G3);iMe=n(MLt,"SPAN",{});var ELt=s(iMe);T(z9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),rPr=i(QGe),dMe=n(QGe,"SPAN",{});var CLt=s(dMe);tPr=r(CLt,"FlaxAutoModelForSeq2SeqLM"),CLt.forEach(t),QGe.forEach(t),Gje=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(W9.$$.fragment,Jl),aPr=i(Jl),Vc=n(Jl,"P",{});var Wee=s(Vc);nPr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YY=n(Wee,"A",{href:!0});var wLt=s(YY);sPr=r(wLt,"from_pretrained()"),wLt.forEach(t),lPr=r(Wee," class method or the "),KY=n(Wee,"A",{href:!0});var ALt=s(KY);iPr=r(ALt,"from_config()"),ALt.forEach(t),dPr=r(Wee,` class
method.`),Wee.forEach(t),cPr=i(Jl),Q9=n(Jl,"P",{});var HGe=s(Q9);fPr=r(HGe,"This class cannot be instantiated directly using "),cMe=n(HGe,"CODE",{});var yLt=s(cMe);mPr=r(yLt,"__init__()"),yLt.forEach(t),gPr=r(HGe," (throws an error)."),HGe.forEach(t),hPr=i(Jl),zt=n(Jl,"DIV",{class:!0});var lA=s(zt);T(H9.$$.fragment,lA),pPr=i(lA),fMe=n(lA,"P",{});var LLt=s(fMe);uPr=r(LLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LLt.forEach(t),_Pr=i(lA),Xc=n(lA,"P",{});var Qee=s(Xc);bPr=r(Qee,`Note:
Loading a model from its configuration file does `),mMe=n(Qee,"STRONG",{});var xLt=s(mMe);vPr=r(xLt,"not"),xLt.forEach(t),FPr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(Qee,"A",{href:!0});var $Lt=s(ZY);TPr=r($Lt,"from_pretrained()"),$Lt.forEach(t),MPr=r(Qee," to load the model weights."),Qee.forEach(t),EPr=i(lA),T(O3.$$.fragment,lA),lA.forEach(t),CPr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(U9.$$.fragment,Yl),wPr=i(Yl),gMe=n(Yl,"P",{});var kLt=s(gMe);APr=r(kLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kLt.forEach(t),yPr=i(Yl),bn=n(Yl,"P",{});var iA=s(bn);LPr=r(iA,"The model class to instantiate is selected based on the "),hMe=n(iA,"CODE",{});var SLt=s(hMe);xPr=r(SLt,"model_type"),SLt.forEach(t),$Pr=r(iA,` property of the config object (either
passed as an argument or loaded from `),pMe=n(iA,"CODE",{});var RLt=s(pMe);kPr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),SPr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(iA,"CODE",{});var PLt=s(uMe);RPr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),PPr=r(iA,":"),iA.forEach(t),BPr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);V3=n(ze,"LI",{});var aqe=s(V3);_Me=n(aqe,"STRONG",{});var BLt=s(_Me);IPr=r(BLt,"bart"),BLt.forEach(t),qPr=r(aqe," \u2014 "),eK=n(aqe,"A",{href:!0});var ILt=s(eK);NPr=r(ILt,"FlaxBartForConditionalGeneration"),ILt.forEach(t),jPr=r(aqe," (BART model)"),aqe.forEach(t),DPr=i(ze),X3=n(ze,"LI",{});var nqe=s(X3);bMe=n(nqe,"STRONG",{});var qLt=s(bMe);GPr=r(qLt,"blenderbot"),qLt.forEach(t),OPr=r(nqe," \u2014 "),oK=n(nqe,"A",{href:!0});var NLt=s(oK);VPr=r(NLt,"FlaxBlenderbotForConditionalGeneration"),NLt.forEach(t),XPr=r(nqe," (Blenderbot model)"),nqe.forEach(t),zPr=i(ze),z3=n(ze,"LI",{});var sqe=s(z3);vMe=n(sqe,"STRONG",{});var jLt=s(vMe);WPr=r(jLt,"blenderbot-small"),jLt.forEach(t),QPr=r(sqe," \u2014 "),rK=n(sqe,"A",{href:!0});var DLt=s(rK);HPr=r(DLt,"FlaxBlenderbotSmallForConditionalGeneration"),DLt.forEach(t),UPr=r(sqe," (BlenderbotSmall model)"),sqe.forEach(t),JPr=i(ze),W3=n(ze,"LI",{});var lqe=s(W3);FMe=n(lqe,"STRONG",{});var GLt=s(FMe);YPr=r(GLt,"encoder-decoder"),GLt.forEach(t),KPr=r(lqe," \u2014 "),tK=n(lqe,"A",{href:!0});var OLt=s(tK);ZPr=r(OLt,"FlaxEncoderDecoderModel"),OLt.forEach(t),eBr=r(lqe," (Encoder decoder model)"),lqe.forEach(t),oBr=i(ze),Q3=n(ze,"LI",{});var iqe=s(Q3);TMe=n(iqe,"STRONG",{});var VLt=s(TMe);rBr=r(VLt,"marian"),VLt.forEach(t),tBr=r(iqe," \u2014 "),aK=n(iqe,"A",{href:!0});var XLt=s(aK);aBr=r(XLt,"FlaxMarianMTModel"),XLt.forEach(t),nBr=r(iqe," (Marian model)"),iqe.forEach(t),sBr=i(ze),H3=n(ze,"LI",{});var dqe=s(H3);MMe=n(dqe,"STRONG",{});var zLt=s(MMe);lBr=r(zLt,"mbart"),zLt.forEach(t),iBr=r(dqe," \u2014 "),nK=n(dqe,"A",{href:!0});var WLt=s(nK);dBr=r(WLt,"FlaxMBartForConditionalGeneration"),WLt.forEach(t),cBr=r(dqe," (mBART model)"),dqe.forEach(t),fBr=i(ze),U3=n(ze,"LI",{});var cqe=s(U3);EMe=n(cqe,"STRONG",{});var QLt=s(EMe);mBr=r(QLt,"mt5"),QLt.forEach(t),gBr=r(cqe," \u2014 "),sK=n(cqe,"A",{href:!0});var HLt=s(sK);hBr=r(HLt,"FlaxMT5ForConditionalGeneration"),HLt.forEach(t),pBr=r(cqe," (mT5 model)"),cqe.forEach(t),uBr=i(ze),J3=n(ze,"LI",{});var fqe=s(J3);CMe=n(fqe,"STRONG",{});var ULt=s(CMe);_Br=r(ULt,"pegasus"),ULt.forEach(t),bBr=r(fqe," \u2014 "),lK=n(fqe,"A",{href:!0});var JLt=s(lK);vBr=r(JLt,"FlaxPegasusForConditionalGeneration"),JLt.forEach(t),FBr=r(fqe," (Pegasus model)"),fqe.forEach(t),TBr=i(ze),Y3=n(ze,"LI",{});var mqe=s(Y3);wMe=n(mqe,"STRONG",{});var YLt=s(wMe);MBr=r(YLt,"t5"),YLt.forEach(t),EBr=r(mqe," \u2014 "),iK=n(mqe,"A",{href:!0});var KLt=s(iK);CBr=r(KLt,"FlaxT5ForConditionalGeneration"),KLt.forEach(t),wBr=r(mqe," (T5 model)"),mqe.forEach(t),ze.forEach(t),ABr=i(Yl),T(K3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Oje=i(f),zc=n(f,"H2",{class:!0});var UGe=s(zc);Z3=n(UGe,"A",{id:!0,class:!0,href:!0});var ZLt=s(Z3);AMe=n(ZLt,"SPAN",{});var e8t=s(AMe);T(J9.$$.fragment,e8t),e8t.forEach(t),ZLt.forEach(t),yBr=i(UGe),yMe=n(UGe,"SPAN",{});var o8t=s(yMe);LBr=r(o8t,"FlaxAutoModelForSequenceClassification"),o8t.forEach(t),UGe.forEach(t),Vje=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(Y9.$$.fragment,Kl),xBr=i(Kl),Wc=n(Kl,"P",{});var Hee=s(Wc);$Br=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dK=n(Hee,"A",{href:!0});var r8t=s(dK);kBr=r(r8t,"from_pretrained()"),r8t.forEach(t),SBr=r(Hee," class method or the "),cK=n(Hee,"A",{href:!0});var t8t=s(cK);RBr=r(t8t,"from_config()"),t8t.forEach(t),PBr=r(Hee,` class
method.`),Hee.forEach(t),BBr=i(Kl),K9=n(Kl,"P",{});var JGe=s(K9);IBr=r(JGe,"This class cannot be instantiated directly using "),LMe=n(JGe,"CODE",{});var a8t=s(LMe);qBr=r(a8t,"__init__()"),a8t.forEach(t),NBr=r(JGe," (throws an error)."),JGe.forEach(t),jBr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var dA=s(Wt);T(Z9.$$.fragment,dA),DBr=i(dA),xMe=n(dA,"P",{});var n8t=s(xMe);GBr=r(n8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n8t.forEach(t),OBr=i(dA),Qc=n(dA,"P",{});var Uee=s(Qc);VBr=r(Uee,`Note:
Loading a model from its configuration file does `),$Me=n(Uee,"STRONG",{});var s8t=s($Me);XBr=r(s8t,"not"),s8t.forEach(t),zBr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(Uee,"A",{href:!0});var l8t=s(fK);WBr=r(l8t,"from_pretrained()"),l8t.forEach(t),QBr=r(Uee," to load the model weights."),Uee.forEach(t),HBr=i(dA),T(ew.$$.fragment,dA),dA.forEach(t),UBr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(ex.$$.fragment,Zl),JBr=i(Zl),kMe=n(Zl,"P",{});var i8t=s(kMe);YBr=r(i8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i8t.forEach(t),KBr=i(Zl),vn=n(Zl,"P",{});var cA=s(vn);ZBr=r(cA,"The model class to instantiate is selected based on the "),SMe=n(cA,"CODE",{});var d8t=s(SMe);eIr=r(d8t,"model_type"),d8t.forEach(t),oIr=r(cA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(cA,"CODE",{});var c8t=s(RMe);rIr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),tIr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(cA,"CODE",{});var f8t=s(PMe);aIr=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),nIr=r(cA,":"),cA.forEach(t),sIr=i(Zl),xe=n(Zl,"UL",{});var qe=s(xe);ow=n(qe,"LI",{});var gqe=s(ow);BMe=n(gqe,"STRONG",{});var m8t=s(BMe);lIr=r(m8t,"albert"),m8t.forEach(t),iIr=r(gqe," \u2014 "),mK=n(gqe,"A",{href:!0});var g8t=s(mK);dIr=r(g8t,"FlaxAlbertForSequenceClassification"),g8t.forEach(t),cIr=r(gqe," (ALBERT model)"),gqe.forEach(t),fIr=i(qe),rw=n(qe,"LI",{});var hqe=s(rw);IMe=n(hqe,"STRONG",{});var h8t=s(IMe);mIr=r(h8t,"bart"),h8t.forEach(t),gIr=r(hqe," \u2014 "),gK=n(hqe,"A",{href:!0});var p8t=s(gK);hIr=r(p8t,"FlaxBartForSequenceClassification"),p8t.forEach(t),pIr=r(hqe," (BART model)"),hqe.forEach(t),uIr=i(qe),tw=n(qe,"LI",{});var pqe=s(tw);qMe=n(pqe,"STRONG",{});var u8t=s(qMe);_Ir=r(u8t,"bert"),u8t.forEach(t),bIr=r(pqe," \u2014 "),hK=n(pqe,"A",{href:!0});var _8t=s(hK);vIr=r(_8t,"FlaxBertForSequenceClassification"),_8t.forEach(t),FIr=r(pqe," (BERT model)"),pqe.forEach(t),TIr=i(qe),aw=n(qe,"LI",{});var uqe=s(aw);NMe=n(uqe,"STRONG",{});var b8t=s(NMe);MIr=r(b8t,"big_bird"),b8t.forEach(t),EIr=r(uqe," \u2014 "),pK=n(uqe,"A",{href:!0});var v8t=s(pK);CIr=r(v8t,"FlaxBigBirdForSequenceClassification"),v8t.forEach(t),wIr=r(uqe," (BigBird model)"),uqe.forEach(t),AIr=i(qe),nw=n(qe,"LI",{});var _qe=s(nw);jMe=n(_qe,"STRONG",{});var F8t=s(jMe);yIr=r(F8t,"distilbert"),F8t.forEach(t),LIr=r(_qe," \u2014 "),uK=n(_qe,"A",{href:!0});var T8t=s(uK);xIr=r(T8t,"FlaxDistilBertForSequenceClassification"),T8t.forEach(t),$Ir=r(_qe," (DistilBERT model)"),_qe.forEach(t),kIr=i(qe),sw=n(qe,"LI",{});var bqe=s(sw);DMe=n(bqe,"STRONG",{});var M8t=s(DMe);SIr=r(M8t,"electra"),M8t.forEach(t),RIr=r(bqe," \u2014 "),_K=n(bqe,"A",{href:!0});var E8t=s(_K);PIr=r(E8t,"FlaxElectraForSequenceClassification"),E8t.forEach(t),BIr=r(bqe," (ELECTRA model)"),bqe.forEach(t),IIr=i(qe),lw=n(qe,"LI",{});var vqe=s(lw);GMe=n(vqe,"STRONG",{});var C8t=s(GMe);qIr=r(C8t,"mbart"),C8t.forEach(t),NIr=r(vqe," \u2014 "),bK=n(vqe,"A",{href:!0});var w8t=s(bK);jIr=r(w8t,"FlaxMBartForSequenceClassification"),w8t.forEach(t),DIr=r(vqe," (mBART model)"),vqe.forEach(t),GIr=i(qe),iw=n(qe,"LI",{});var Fqe=s(iw);OMe=n(Fqe,"STRONG",{});var A8t=s(OMe);OIr=r(A8t,"roberta"),A8t.forEach(t),VIr=r(Fqe," \u2014 "),vK=n(Fqe,"A",{href:!0});var y8t=s(vK);XIr=r(y8t,"FlaxRobertaForSequenceClassification"),y8t.forEach(t),zIr=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),WIr=i(qe),dw=n(qe,"LI",{});var Tqe=s(dw);VMe=n(Tqe,"STRONG",{});var L8t=s(VMe);QIr=r(L8t,"roformer"),L8t.forEach(t),HIr=r(Tqe," \u2014 "),FK=n(Tqe,"A",{href:!0});var x8t=s(FK);UIr=r(x8t,"FlaxRoFormerForSequenceClassification"),x8t.forEach(t),JIr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),YIr=i(qe),cw=n(qe,"LI",{});var Mqe=s(cw);XMe=n(Mqe,"STRONG",{});var $8t=s(XMe);KIr=r($8t,"xlm-roberta"),$8t.forEach(t),ZIr=r(Mqe," \u2014 "),TK=n(Mqe,"A",{href:!0});var k8t=s(TK);eqr=r(k8t,"FlaxXLMRobertaForSequenceClassification"),k8t.forEach(t),oqr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),qe.forEach(t),rqr=i(Zl),T(fw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Xje=i(f),Hc=n(f,"H2",{class:!0});var YGe=s(Hc);mw=n(YGe,"A",{id:!0,class:!0,href:!0});var S8t=s(mw);zMe=n(S8t,"SPAN",{});var R8t=s(zMe);T(ox.$$.fragment,R8t),R8t.forEach(t),S8t.forEach(t),tqr=i(YGe),WMe=n(YGe,"SPAN",{});var P8t=s(WMe);aqr=r(P8t,"FlaxAutoModelForQuestionAnswering"),P8t.forEach(t),YGe.forEach(t),zje=i(f),_r=n(f,"DIV",{class:!0});var ei=s(_r);T(rx.$$.fragment,ei),nqr=i(ei),Uc=n(ei,"P",{});var Jee=s(Uc);sqr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MK=n(Jee,"A",{href:!0});var B8t=s(MK);lqr=r(B8t,"from_pretrained()"),B8t.forEach(t),iqr=r(Jee," class method or the "),EK=n(Jee,"A",{href:!0});var I8t=s(EK);dqr=r(I8t,"from_config()"),I8t.forEach(t),cqr=r(Jee,` class
method.`),Jee.forEach(t),fqr=i(ei),tx=n(ei,"P",{});var KGe=s(tx);mqr=r(KGe,"This class cannot be instantiated directly using "),QMe=n(KGe,"CODE",{});var q8t=s(QMe);gqr=r(q8t,"__init__()"),q8t.forEach(t),hqr=r(KGe," (throws an error)."),KGe.forEach(t),pqr=i(ei),Qt=n(ei,"DIV",{class:!0});var fA=s(Qt);T(ax.$$.fragment,fA),uqr=i(fA),HMe=n(fA,"P",{});var N8t=s(HMe);_qr=r(N8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N8t.forEach(t),bqr=i(fA),Jc=n(fA,"P",{});var Yee=s(Jc);vqr=r(Yee,`Note:
Loading a model from its configuration file does `),UMe=n(Yee,"STRONG",{});var j8t=s(UMe);Fqr=r(j8t,"not"),j8t.forEach(t),Tqr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(Yee,"A",{href:!0});var D8t=s(CK);Mqr=r(D8t,"from_pretrained()"),D8t.forEach(t),Eqr=r(Yee," to load the model weights."),Yee.forEach(t),Cqr=i(fA),T(gw.$$.fragment,fA),fA.forEach(t),wqr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(nx.$$.fragment,oi),Aqr=i(oi),JMe=n(oi,"P",{});var G8t=s(JMe);yqr=r(G8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G8t.forEach(t),Lqr=i(oi),Fn=n(oi,"P",{});var mA=s(Fn);xqr=r(mA,"The model class to instantiate is selected based on the "),YMe=n(mA,"CODE",{});var O8t=s(YMe);$qr=r(O8t,"model_type"),O8t.forEach(t),kqr=r(mA,` property of the config object (either
passed as an argument or loaded from `),KMe=n(mA,"CODE",{});var V8t=s(KMe);Sqr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),Rqr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(mA,"CODE",{});var X8t=s(ZMe);Pqr=r(X8t,"pretrained_model_name_or_path"),X8t.forEach(t),Bqr=r(mA,":"),mA.forEach(t),Iqr=i(oi),$e=n(oi,"UL",{});var Ne=s($e);hw=n(Ne,"LI",{});var Eqe=s(hw);eEe=n(Eqe,"STRONG",{});var z8t=s(eEe);qqr=r(z8t,"albert"),z8t.forEach(t),Nqr=r(Eqe," \u2014 "),wK=n(Eqe,"A",{href:!0});var W8t=s(wK);jqr=r(W8t,"FlaxAlbertForQuestionAnswering"),W8t.forEach(t),Dqr=r(Eqe," (ALBERT model)"),Eqe.forEach(t),Gqr=i(Ne),pw=n(Ne,"LI",{});var Cqe=s(pw);oEe=n(Cqe,"STRONG",{});var Q8t=s(oEe);Oqr=r(Q8t,"bart"),Q8t.forEach(t),Vqr=r(Cqe," \u2014 "),AK=n(Cqe,"A",{href:!0});var H8t=s(AK);Xqr=r(H8t,"FlaxBartForQuestionAnswering"),H8t.forEach(t),zqr=r(Cqe," (BART model)"),Cqe.forEach(t),Wqr=i(Ne),uw=n(Ne,"LI",{});var wqe=s(uw);rEe=n(wqe,"STRONG",{});var U8t=s(rEe);Qqr=r(U8t,"bert"),U8t.forEach(t),Hqr=r(wqe," \u2014 "),yK=n(wqe,"A",{href:!0});var J8t=s(yK);Uqr=r(J8t,"FlaxBertForQuestionAnswering"),J8t.forEach(t),Jqr=r(wqe," (BERT model)"),wqe.forEach(t),Yqr=i(Ne),_w=n(Ne,"LI",{});var Aqe=s(_w);tEe=n(Aqe,"STRONG",{});var Y8t=s(tEe);Kqr=r(Y8t,"big_bird"),Y8t.forEach(t),Zqr=r(Aqe," \u2014 "),LK=n(Aqe,"A",{href:!0});var K8t=s(LK);eNr=r(K8t,"FlaxBigBirdForQuestionAnswering"),K8t.forEach(t),oNr=r(Aqe," (BigBird model)"),Aqe.forEach(t),rNr=i(Ne),bw=n(Ne,"LI",{});var yqe=s(bw);aEe=n(yqe,"STRONG",{});var Z8t=s(aEe);tNr=r(Z8t,"distilbert"),Z8t.forEach(t),aNr=r(yqe," \u2014 "),xK=n(yqe,"A",{href:!0});var e9t=s(xK);nNr=r(e9t,"FlaxDistilBertForQuestionAnswering"),e9t.forEach(t),sNr=r(yqe," (DistilBERT model)"),yqe.forEach(t),lNr=i(Ne),vw=n(Ne,"LI",{});var Lqe=s(vw);nEe=n(Lqe,"STRONG",{});var o9t=s(nEe);iNr=r(o9t,"electra"),o9t.forEach(t),dNr=r(Lqe," \u2014 "),$K=n(Lqe,"A",{href:!0});var r9t=s($K);cNr=r(r9t,"FlaxElectraForQuestionAnswering"),r9t.forEach(t),fNr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),mNr=i(Ne),Fw=n(Ne,"LI",{});var xqe=s(Fw);sEe=n(xqe,"STRONG",{});var t9t=s(sEe);gNr=r(t9t,"mbart"),t9t.forEach(t),hNr=r(xqe," \u2014 "),kK=n(xqe,"A",{href:!0});var a9t=s(kK);pNr=r(a9t,"FlaxMBartForQuestionAnswering"),a9t.forEach(t),uNr=r(xqe," (mBART model)"),xqe.forEach(t),_Nr=i(Ne),Tw=n(Ne,"LI",{});var $qe=s(Tw);lEe=n($qe,"STRONG",{});var n9t=s(lEe);bNr=r(n9t,"roberta"),n9t.forEach(t),vNr=r($qe," \u2014 "),SK=n($qe,"A",{href:!0});var s9t=s(SK);FNr=r(s9t,"FlaxRobertaForQuestionAnswering"),s9t.forEach(t),TNr=r($qe," (RoBERTa model)"),$qe.forEach(t),MNr=i(Ne),Mw=n(Ne,"LI",{});var kqe=s(Mw);iEe=n(kqe,"STRONG",{});var l9t=s(iEe);ENr=r(l9t,"roformer"),l9t.forEach(t),CNr=r(kqe," \u2014 "),RK=n(kqe,"A",{href:!0});var i9t=s(RK);wNr=r(i9t,"FlaxRoFormerForQuestionAnswering"),i9t.forEach(t),ANr=r(kqe," (RoFormer model)"),kqe.forEach(t),yNr=i(Ne),Ew=n(Ne,"LI",{});var Sqe=s(Ew);dEe=n(Sqe,"STRONG",{});var d9t=s(dEe);LNr=r(d9t,"xlm-roberta"),d9t.forEach(t),xNr=r(Sqe," \u2014 "),PK=n(Sqe,"A",{href:!0});var c9t=s(PK);$Nr=r(c9t,"FlaxXLMRobertaForQuestionAnswering"),c9t.forEach(t),kNr=r(Sqe," (XLM-RoBERTa model)"),Sqe.forEach(t),Ne.forEach(t),SNr=i(oi),T(Cw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Wje=i(f),Yc=n(f,"H2",{class:!0});var ZGe=s(Yc);ww=n(ZGe,"A",{id:!0,class:!0,href:!0});var f9t=s(ww);cEe=n(f9t,"SPAN",{});var m9t=s(cEe);T(sx.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),RNr=i(ZGe),fEe=n(ZGe,"SPAN",{});var g9t=s(fEe);PNr=r(g9t,"FlaxAutoModelForTokenClassification"),g9t.forEach(t),ZGe.forEach(t),Qje=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(lx.$$.fragment,ri),BNr=i(ri),Kc=n(ri,"P",{});var Kee=s(Kc);INr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BK=n(Kee,"A",{href:!0});var h9t=s(BK);qNr=r(h9t,"from_pretrained()"),h9t.forEach(t),NNr=r(Kee," class method or the "),IK=n(Kee,"A",{href:!0});var p9t=s(IK);jNr=r(p9t,"from_config()"),p9t.forEach(t),DNr=r(Kee,` class
method.`),Kee.forEach(t),GNr=i(ri),ix=n(ri,"P",{});var eOe=s(ix);ONr=r(eOe,"This class cannot be instantiated directly using "),mEe=n(eOe,"CODE",{});var u9t=s(mEe);VNr=r(u9t,"__init__()"),u9t.forEach(t),XNr=r(eOe," (throws an error)."),eOe.forEach(t),zNr=i(ri),Ht=n(ri,"DIV",{class:!0});var gA=s(Ht);T(dx.$$.fragment,gA),WNr=i(gA),gEe=n(gA,"P",{});var _9t=s(gEe);QNr=r(_9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_9t.forEach(t),HNr=i(gA),Zc=n(gA,"P",{});var Zee=s(Zc);UNr=r(Zee,`Note:
Loading a model from its configuration file does `),hEe=n(Zee,"STRONG",{});var b9t=s(hEe);JNr=r(b9t,"not"),b9t.forEach(t),YNr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Zee,"A",{href:!0});var v9t=s(qK);KNr=r(v9t,"from_pretrained()"),v9t.forEach(t),ZNr=r(Zee," to load the model weights."),Zee.forEach(t),ejr=i(gA),T(Aw.$$.fragment,gA),gA.forEach(t),ojr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(cx.$$.fragment,ti),rjr=i(ti),pEe=n(ti,"P",{});var F9t=s(pEe);tjr=r(F9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),F9t.forEach(t),ajr=i(ti),Tn=n(ti,"P",{});var hA=s(Tn);njr=r(hA,"The model class to instantiate is selected based on the "),uEe=n(hA,"CODE",{});var T9t=s(uEe);sjr=r(T9t,"model_type"),T9t.forEach(t),ljr=r(hA,` property of the config object (either
passed as an argument or loaded from `),_Ee=n(hA,"CODE",{});var M9t=s(_Ee);ijr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),djr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=n(hA,"CODE",{});var E9t=s(bEe);cjr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),fjr=r(hA,":"),hA.forEach(t),mjr=i(ti),De=n(ti,"UL",{});var Fo=s(De);yw=n(Fo,"LI",{});var Rqe=s(yw);vEe=n(Rqe,"STRONG",{});var C9t=s(vEe);gjr=r(C9t,"albert"),C9t.forEach(t),hjr=r(Rqe," \u2014 "),NK=n(Rqe,"A",{href:!0});var w9t=s(NK);pjr=r(w9t,"FlaxAlbertForTokenClassification"),w9t.forEach(t),ujr=r(Rqe," (ALBERT model)"),Rqe.forEach(t),_jr=i(Fo),Lw=n(Fo,"LI",{});var Pqe=s(Lw);FEe=n(Pqe,"STRONG",{});var A9t=s(FEe);bjr=r(A9t,"bert"),A9t.forEach(t),vjr=r(Pqe," \u2014 "),jK=n(Pqe,"A",{href:!0});var y9t=s(jK);Fjr=r(y9t,"FlaxBertForTokenClassification"),y9t.forEach(t),Tjr=r(Pqe," (BERT model)"),Pqe.forEach(t),Mjr=i(Fo),xw=n(Fo,"LI",{});var Bqe=s(xw);TEe=n(Bqe,"STRONG",{});var L9t=s(TEe);Ejr=r(L9t,"big_bird"),L9t.forEach(t),Cjr=r(Bqe," \u2014 "),DK=n(Bqe,"A",{href:!0});var x9t=s(DK);wjr=r(x9t,"FlaxBigBirdForTokenClassification"),x9t.forEach(t),Ajr=r(Bqe," (BigBird model)"),Bqe.forEach(t),yjr=i(Fo),$w=n(Fo,"LI",{});var Iqe=s($w);MEe=n(Iqe,"STRONG",{});var $9t=s(MEe);Ljr=r($9t,"distilbert"),$9t.forEach(t),xjr=r(Iqe," \u2014 "),GK=n(Iqe,"A",{href:!0});var k9t=s(GK);$jr=r(k9t,"FlaxDistilBertForTokenClassification"),k9t.forEach(t),kjr=r(Iqe," (DistilBERT model)"),Iqe.forEach(t),Sjr=i(Fo),kw=n(Fo,"LI",{});var qqe=s(kw);EEe=n(qqe,"STRONG",{});var S9t=s(EEe);Rjr=r(S9t,"electra"),S9t.forEach(t),Pjr=r(qqe," \u2014 "),OK=n(qqe,"A",{href:!0});var R9t=s(OK);Bjr=r(R9t,"FlaxElectraForTokenClassification"),R9t.forEach(t),Ijr=r(qqe," (ELECTRA model)"),qqe.forEach(t),qjr=i(Fo),Sw=n(Fo,"LI",{});var Nqe=s(Sw);CEe=n(Nqe,"STRONG",{});var P9t=s(CEe);Njr=r(P9t,"roberta"),P9t.forEach(t),jjr=r(Nqe," \u2014 "),VK=n(Nqe,"A",{href:!0});var B9t=s(VK);Djr=r(B9t,"FlaxRobertaForTokenClassification"),B9t.forEach(t),Gjr=r(Nqe," (RoBERTa model)"),Nqe.forEach(t),Ojr=i(Fo),Rw=n(Fo,"LI",{});var jqe=s(Rw);wEe=n(jqe,"STRONG",{});var I9t=s(wEe);Vjr=r(I9t,"roformer"),I9t.forEach(t),Xjr=r(jqe," \u2014 "),XK=n(jqe,"A",{href:!0});var q9t=s(XK);zjr=r(q9t,"FlaxRoFormerForTokenClassification"),q9t.forEach(t),Wjr=r(jqe," (RoFormer model)"),jqe.forEach(t),Qjr=i(Fo),Pw=n(Fo,"LI",{});var Dqe=s(Pw);AEe=n(Dqe,"STRONG",{});var N9t=s(AEe);Hjr=r(N9t,"xlm-roberta"),N9t.forEach(t),Ujr=r(Dqe," \u2014 "),zK=n(Dqe,"A",{href:!0});var j9t=s(zK);Jjr=r(j9t,"FlaxXLMRobertaForTokenClassification"),j9t.forEach(t),Yjr=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),Fo.forEach(t),Kjr=i(ti),T(Bw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Hje=i(f),ef=n(f,"H2",{class:!0});var oOe=s(ef);Iw=n(oOe,"A",{id:!0,class:!0,href:!0});var D9t=s(Iw);yEe=n(D9t,"SPAN",{});var G9t=s(yEe);T(fx.$$.fragment,G9t),G9t.forEach(t),D9t.forEach(t),Zjr=i(oOe),LEe=n(oOe,"SPAN",{});var O9t=s(LEe);eDr=r(O9t,"FlaxAutoModelForMultipleChoice"),O9t.forEach(t),oOe.forEach(t),Uje=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(mx.$$.fragment,ai),oDr=i(ai),of=n(ai,"P",{});var eoe=s(of);rDr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WK=n(eoe,"A",{href:!0});var V9t=s(WK);tDr=r(V9t,"from_pretrained()"),V9t.forEach(t),aDr=r(eoe," class method or the "),QK=n(eoe,"A",{href:!0});var X9t=s(QK);nDr=r(X9t,"from_config()"),X9t.forEach(t),sDr=r(eoe,` class
method.`),eoe.forEach(t),lDr=i(ai),gx=n(ai,"P",{});var rOe=s(gx);iDr=r(rOe,"This class cannot be instantiated directly using "),xEe=n(rOe,"CODE",{});var z9t=s(xEe);dDr=r(z9t,"__init__()"),z9t.forEach(t),cDr=r(rOe," (throws an error)."),rOe.forEach(t),fDr=i(ai),Ut=n(ai,"DIV",{class:!0});var pA=s(Ut);T(hx.$$.fragment,pA),mDr=i(pA),$Ee=n(pA,"P",{});var W9t=s($Ee);gDr=r(W9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W9t.forEach(t),hDr=i(pA),rf=n(pA,"P",{});var ooe=s(rf);pDr=r(ooe,`Note:
Loading a model from its configuration file does `),kEe=n(ooe,"STRONG",{});var Q9t=s(kEe);uDr=r(Q9t,"not"),Q9t.forEach(t),_Dr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(ooe,"A",{href:!0});var H9t=s(HK);bDr=r(H9t,"from_pretrained()"),H9t.forEach(t),vDr=r(ooe," to load the model weights."),ooe.forEach(t),FDr=i(pA),T(qw.$$.fragment,pA),pA.forEach(t),TDr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(px.$$.fragment,ni),MDr=i(ni),SEe=n(ni,"P",{});var U9t=s(SEe);EDr=r(U9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U9t.forEach(t),CDr=i(ni),Mn=n(ni,"P",{});var uA=s(Mn);wDr=r(uA,"The model class to instantiate is selected based on the "),REe=n(uA,"CODE",{});var J9t=s(REe);ADr=r(J9t,"model_type"),J9t.forEach(t),yDr=r(uA,` property of the config object (either
passed as an argument or loaded from `),PEe=n(uA,"CODE",{});var Y9t=s(PEe);LDr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),xDr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BEe=n(uA,"CODE",{});var K9t=s(BEe);$Dr=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),kDr=r(uA,":"),uA.forEach(t),SDr=i(ni),Ge=n(ni,"UL",{});var To=s(Ge);Nw=n(To,"LI",{});var Gqe=s(Nw);IEe=n(Gqe,"STRONG",{});var Z9t=s(IEe);RDr=r(Z9t,"albert"),Z9t.forEach(t),PDr=r(Gqe," \u2014 "),UK=n(Gqe,"A",{href:!0});var ext=s(UK);BDr=r(ext,"FlaxAlbertForMultipleChoice"),ext.forEach(t),IDr=r(Gqe," (ALBERT model)"),Gqe.forEach(t),qDr=i(To),jw=n(To,"LI",{});var Oqe=s(jw);qEe=n(Oqe,"STRONG",{});var oxt=s(qEe);NDr=r(oxt,"bert"),oxt.forEach(t),jDr=r(Oqe," \u2014 "),JK=n(Oqe,"A",{href:!0});var rxt=s(JK);DDr=r(rxt,"FlaxBertForMultipleChoice"),rxt.forEach(t),GDr=r(Oqe," (BERT model)"),Oqe.forEach(t),ODr=i(To),Dw=n(To,"LI",{});var Vqe=s(Dw);NEe=n(Vqe,"STRONG",{});var txt=s(NEe);VDr=r(txt,"big_bird"),txt.forEach(t),XDr=r(Vqe," \u2014 "),YK=n(Vqe,"A",{href:!0});var axt=s(YK);zDr=r(axt,"FlaxBigBirdForMultipleChoice"),axt.forEach(t),WDr=r(Vqe," (BigBird model)"),Vqe.forEach(t),QDr=i(To),Gw=n(To,"LI",{});var Xqe=s(Gw);jEe=n(Xqe,"STRONG",{});var nxt=s(jEe);HDr=r(nxt,"distilbert"),nxt.forEach(t),UDr=r(Xqe," \u2014 "),KK=n(Xqe,"A",{href:!0});var sxt=s(KK);JDr=r(sxt,"FlaxDistilBertForMultipleChoice"),sxt.forEach(t),YDr=r(Xqe," (DistilBERT model)"),Xqe.forEach(t),KDr=i(To),Ow=n(To,"LI",{});var zqe=s(Ow);DEe=n(zqe,"STRONG",{});var lxt=s(DEe);ZDr=r(lxt,"electra"),lxt.forEach(t),eGr=r(zqe," \u2014 "),ZK=n(zqe,"A",{href:!0});var ixt=s(ZK);oGr=r(ixt,"FlaxElectraForMultipleChoice"),ixt.forEach(t),rGr=r(zqe," (ELECTRA model)"),zqe.forEach(t),tGr=i(To),Vw=n(To,"LI",{});var Wqe=s(Vw);GEe=n(Wqe,"STRONG",{});var dxt=s(GEe);aGr=r(dxt,"roberta"),dxt.forEach(t),nGr=r(Wqe," \u2014 "),eZ=n(Wqe,"A",{href:!0});var cxt=s(eZ);sGr=r(cxt,"FlaxRobertaForMultipleChoice"),cxt.forEach(t),lGr=r(Wqe," (RoBERTa model)"),Wqe.forEach(t),iGr=i(To),Xw=n(To,"LI",{});var Qqe=s(Xw);OEe=n(Qqe,"STRONG",{});var fxt=s(OEe);dGr=r(fxt,"roformer"),fxt.forEach(t),cGr=r(Qqe," \u2014 "),oZ=n(Qqe,"A",{href:!0});var mxt=s(oZ);fGr=r(mxt,"FlaxRoFormerForMultipleChoice"),mxt.forEach(t),mGr=r(Qqe," (RoFormer model)"),Qqe.forEach(t),gGr=i(To),zw=n(To,"LI",{});var Hqe=s(zw);VEe=n(Hqe,"STRONG",{});var gxt=s(VEe);hGr=r(gxt,"xlm-roberta"),gxt.forEach(t),pGr=r(Hqe," \u2014 "),rZ=n(Hqe,"A",{href:!0});var hxt=s(rZ);uGr=r(hxt,"FlaxXLMRobertaForMultipleChoice"),hxt.forEach(t),_Gr=r(Hqe," (XLM-RoBERTa model)"),Hqe.forEach(t),To.forEach(t),bGr=i(ni),T(Ww.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Jje=i(f),tf=n(f,"H2",{class:!0});var tOe=s(tf);Qw=n(tOe,"A",{id:!0,class:!0,href:!0});var pxt=s(Qw);XEe=n(pxt,"SPAN",{});var uxt=s(XEe);T(ux.$$.fragment,uxt),uxt.forEach(t),pxt.forEach(t),vGr=i(tOe),zEe=n(tOe,"SPAN",{});var _xt=s(zEe);FGr=r(_xt,"FlaxAutoModelForNextSentencePrediction"),_xt.forEach(t),tOe.forEach(t),Yje=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(_x.$$.fragment,si),TGr=i(si),af=n(si,"P",{});var roe=s(af);MGr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tZ=n(roe,"A",{href:!0});var bxt=s(tZ);EGr=r(bxt,"from_pretrained()"),bxt.forEach(t),CGr=r(roe," class method or the "),aZ=n(roe,"A",{href:!0});var vxt=s(aZ);wGr=r(vxt,"from_config()"),vxt.forEach(t),AGr=r(roe,` class
method.`),roe.forEach(t),yGr=i(si),bx=n(si,"P",{});var aOe=s(bx);LGr=r(aOe,"This class cannot be instantiated directly using "),WEe=n(aOe,"CODE",{});var Fxt=s(WEe);xGr=r(Fxt,"__init__()"),Fxt.forEach(t),$Gr=r(aOe," (throws an error)."),aOe.forEach(t),kGr=i(si),Jt=n(si,"DIV",{class:!0});var _A=s(Jt);T(vx.$$.fragment,_A),SGr=i(_A),QEe=n(_A,"P",{});var Txt=s(QEe);RGr=r(Txt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Txt.forEach(t),PGr=i(_A),nf=n(_A,"P",{});var toe=s(nf);BGr=r(toe,`Note:
Loading a model from its configuration file does `),HEe=n(toe,"STRONG",{});var Mxt=s(HEe);IGr=r(Mxt,"not"),Mxt.forEach(t),qGr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(toe,"A",{href:!0});var Ext=s(nZ);NGr=r(Ext,"from_pretrained()"),Ext.forEach(t),jGr=r(toe," to load the model weights."),toe.forEach(t),DGr=i(_A),T(Hw.$$.fragment,_A),_A.forEach(t),GGr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Fx.$$.fragment,li),OGr=i(li),UEe=n(li,"P",{});var Cxt=s(UEe);VGr=r(Cxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cxt.forEach(t),XGr=i(li),En=n(li,"P",{});var bA=s(En);zGr=r(bA,"The model class to instantiate is selected based on the "),JEe=n(bA,"CODE",{});var wxt=s(JEe);WGr=r(wxt,"model_type"),wxt.forEach(t),QGr=r(bA,` property of the config object (either
passed as an argument or loaded from `),YEe=n(bA,"CODE",{});var Axt=s(YEe);HGr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),UGr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(bA,"CODE",{});var yxt=s(KEe);JGr=r(yxt,"pretrained_model_name_or_path"),yxt.forEach(t),YGr=r(bA,":"),bA.forEach(t),KGr=i(li),ZEe=n(li,"UL",{});var Lxt=s(ZEe);Uw=n(Lxt,"LI",{});var Uqe=s(Uw);eCe=n(Uqe,"STRONG",{});var xxt=s(eCe);ZGr=r(xxt,"bert"),xxt.forEach(t),eOr=r(Uqe," \u2014 "),sZ=n(Uqe,"A",{href:!0});var $xt=s(sZ);oOr=r($xt,"FlaxBertForNextSentencePrediction"),$xt.forEach(t),rOr=r(Uqe," (BERT model)"),Uqe.forEach(t),Lxt.forEach(t),tOr=i(li),T(Jw.$$.fragment,li),li.forEach(t),si.forEach(t),Kje=i(f),sf=n(f,"H2",{class:!0});var nOe=s(sf);Yw=n(nOe,"A",{id:!0,class:!0,href:!0});var kxt=s(Yw);oCe=n(kxt,"SPAN",{});var Sxt=s(oCe);T(Tx.$$.fragment,Sxt),Sxt.forEach(t),kxt.forEach(t),aOr=i(nOe),rCe=n(nOe,"SPAN",{});var Rxt=s(rCe);nOr=r(Rxt,"FlaxAutoModelForImageClassification"),Rxt.forEach(t),nOe.forEach(t),Zje=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Mx.$$.fragment,ii),sOr=i(ii),lf=n(ii,"P",{});var aoe=s(lf);lOr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lZ=n(aoe,"A",{href:!0});var Pxt=s(lZ);iOr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),dOr=r(aoe," class method or the "),iZ=n(aoe,"A",{href:!0});var Bxt=s(iZ);cOr=r(Bxt,"from_config()"),Bxt.forEach(t),fOr=r(aoe,` class
method.`),aoe.forEach(t),mOr=i(ii),Ex=n(ii,"P",{});var sOe=s(Ex);gOr=r(sOe,"This class cannot be instantiated directly using "),tCe=n(sOe,"CODE",{});var Ixt=s(tCe);hOr=r(Ixt,"__init__()"),Ixt.forEach(t),pOr=r(sOe," (throws an error)."),sOe.forEach(t),uOr=i(ii),Yt=n(ii,"DIV",{class:!0});var vA=s(Yt);T(Cx.$$.fragment,vA),_Or=i(vA),aCe=n(vA,"P",{});var qxt=s(aCe);bOr=r(qxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qxt.forEach(t),vOr=i(vA),df=n(vA,"P",{});var noe=s(df);FOr=r(noe,`Note:
Loading a model from its configuration file does `),nCe=n(noe,"STRONG",{});var Nxt=s(nCe);TOr=r(Nxt,"not"),Nxt.forEach(t),MOr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(noe,"A",{href:!0});var jxt=s(dZ);EOr=r(jxt,"from_pretrained()"),jxt.forEach(t),COr=r(noe," to load the model weights."),noe.forEach(t),wOr=i(vA),T(Kw.$$.fragment,vA),vA.forEach(t),AOr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(wx.$$.fragment,di),yOr=i(di),sCe=n(di,"P",{});var Dxt=s(sCe);LOr=r(Dxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dxt.forEach(t),xOr=i(di),Cn=n(di,"P",{});var FA=s(Cn);$Or=r(FA,"The model class to instantiate is selected based on the "),lCe=n(FA,"CODE",{});var Gxt=s(lCe);kOr=r(Gxt,"model_type"),Gxt.forEach(t),SOr=r(FA,` property of the config object (either
passed as an argument or loaded from `),iCe=n(FA,"CODE",{});var Oxt=s(iCe);ROr=r(Oxt,"pretrained_model_name_or_path"),Oxt.forEach(t),POr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(FA,"CODE",{});var Vxt=s(dCe);BOr=r(Vxt,"pretrained_model_name_or_path"),Vxt.forEach(t),IOr=r(FA,":"),FA.forEach(t),qOr=i(di),Ax=n(di,"UL",{});var lOe=s(Ax);Zw=n(lOe,"LI",{});var Jqe=s(Zw);cCe=n(Jqe,"STRONG",{});var Xxt=s(cCe);NOr=r(Xxt,"beit"),Xxt.forEach(t),jOr=r(Jqe," \u2014 "),cZ=n(Jqe,"A",{href:!0});var zxt=s(cZ);DOr=r(zxt,"FlaxBeitForImageClassification"),zxt.forEach(t),GOr=r(Jqe," (BEiT model)"),Jqe.forEach(t),OOr=i(lOe),e0=n(lOe,"LI",{});var Yqe=s(e0);fCe=n(Yqe,"STRONG",{});var Wxt=s(fCe);VOr=r(Wxt,"vit"),Wxt.forEach(t),XOr=r(Yqe," \u2014 "),fZ=n(Yqe,"A",{href:!0});var Qxt=s(fZ);zOr=r(Qxt,"FlaxViTForImageClassification"),Qxt.forEach(t),WOr=r(Yqe," (ViT model)"),Yqe.forEach(t),lOe.forEach(t),QOr=i(di),T(o0.$$.fragment,di),di.forEach(t),ii.forEach(t),eDe=i(f),cf=n(f,"H2",{class:!0});var iOe=s(cf);r0=n(iOe,"A",{id:!0,class:!0,href:!0});var Hxt=s(r0);mCe=n(Hxt,"SPAN",{});var Uxt=s(mCe);T(yx.$$.fragment,Uxt),Uxt.forEach(t),Hxt.forEach(t),HOr=i(iOe),gCe=n(iOe,"SPAN",{});var Jxt=s(gCe);UOr=r(Jxt,"FlaxAutoModelForVision2Seq"),Jxt.forEach(t),iOe.forEach(t),oDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Lx.$$.fragment,ci),JOr=i(ci),ff=n(ci,"P",{});var soe=s(ff);YOr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mZ=n(soe,"A",{href:!0});var Yxt=s(mZ);KOr=r(Yxt,"from_pretrained()"),Yxt.forEach(t),ZOr=r(soe," class method or the "),gZ=n(soe,"A",{href:!0});var Kxt=s(gZ);eVr=r(Kxt,"from_config()"),Kxt.forEach(t),oVr=r(soe,` class
method.`),soe.forEach(t),rVr=i(ci),xx=n(ci,"P",{});var dOe=s(xx);tVr=r(dOe,"This class cannot be instantiated directly using "),hCe=n(dOe,"CODE",{});var Zxt=s(hCe);aVr=r(Zxt,"__init__()"),Zxt.forEach(t),nVr=r(dOe," (throws an error)."),dOe.forEach(t),sVr=i(ci),Kt=n(ci,"DIV",{class:!0});var TA=s(Kt);T($x.$$.fragment,TA),lVr=i(TA),pCe=n(TA,"P",{});var e$t=s(pCe);iVr=r(e$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),e$t.forEach(t),dVr=i(TA),mf=n(TA,"P",{});var loe=s(mf);cVr=r(loe,`Note:
Loading a model from its configuration file does `),uCe=n(loe,"STRONG",{});var o$t=s(uCe);fVr=r(o$t,"not"),o$t.forEach(t),mVr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=n(loe,"A",{href:!0});var r$t=s(hZ);gVr=r(r$t,"from_pretrained()"),r$t.forEach(t),hVr=r(loe," to load the model weights."),loe.forEach(t),pVr=i(TA),T(t0.$$.fragment,TA),TA.forEach(t),uVr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(kx.$$.fragment,fi),_Vr=i(fi),_Ce=n(fi,"P",{});var t$t=s(_Ce);bVr=r(t$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),t$t.forEach(t),vVr=i(fi),wn=n(fi,"P",{});var MA=s(wn);FVr=r(MA,"The model class to instantiate is selected based on the "),bCe=n(MA,"CODE",{});var a$t=s(bCe);TVr=r(a$t,"model_type"),a$t.forEach(t),MVr=r(MA,` property of the config object (either
passed as an argument or loaded from `),vCe=n(MA,"CODE",{});var n$t=s(vCe);EVr=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),CVr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FCe=n(MA,"CODE",{});var s$t=s(FCe);wVr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),AVr=r(MA,":"),MA.forEach(t),yVr=i(fi),TCe=n(fi,"UL",{});var l$t=s(TCe);a0=n(l$t,"LI",{});var Kqe=s(a0);MCe=n(Kqe,"STRONG",{});var i$t=s(MCe);LVr=r(i$t,"vision-encoder-decoder"),i$t.forEach(t),xVr=r(Kqe," \u2014 "),pZ=n(Kqe,"A",{href:!0});var d$t=s(pZ);$Vr=r(d$t,"FlaxVisionEncoderDecoderModel"),d$t.forEach(t),kVr=r(Kqe," (Vision Encoder decoder model)"),Kqe.forEach(t),l$t.forEach(t),SVr=i(fi),T(n0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(gSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(K$,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Z$,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig"),c(ek,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(ok,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig"),c(rk,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig"),c(tk,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ak,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig"),c(nk,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(sk,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(lk,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ik,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig"),c(dk,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig"),c(ck,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig"),c(fk,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig"),c(mk,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig"),c(gk,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig"),c(hk,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig"),c(pk,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uk,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(_k,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(bk,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig"),c(vk,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Fk,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Tk,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig"),c(Mk,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig"),c(Ek,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ck,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig"),c(wk,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig"),c(Ak,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig"),c(yk,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Lk,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig"),c(xk,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig"),c($k,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig"),c(kk,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig"),c(Sk,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig"),c(Rk,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig"),c(Pk,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config"),c(Bk,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Ik,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qk,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig"),c(Nk,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig"),c(jk,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig"),c(Dk,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Gk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ok,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Vk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Xk,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig"),c(zk,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig"),c(Wk,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig"),c(Qk,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig"),c(Hk,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config"),c(Uk,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig"),c(Jk,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Yk,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig"),c(Kk,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Zk,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eS,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig"),c(oS,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config"),c(rS,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(tS,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(aS,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig"),c(nS,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig"),c(sS,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig"),c(lS,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig"),c(iS,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(dS,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(cS,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fS,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagConfig"),c(mS,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmConfig"),c(gS,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig"),c(hS,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig"),c(pS,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig"),c(uS,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig"),c(_S,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig"),c(bS,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig"),c(vS,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig"),c(FS,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig"),c(TS,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig"),c(MS,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig"),c(ES,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(CS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(wS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(AS,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig"),c(yS,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(LS,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig"),c(xS,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config"),c($S,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig"),c(kS,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(SS,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(RS,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig"),c(PS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(BS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(IS,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig"),c(qS,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig"),c(NS,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(jS,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(DS,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(GS,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig"),c(OS,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(VS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(XS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(zS,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig"),c(WS,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig"),c(QS,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig"),c(HS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(US,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(JS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(YS,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig"),c(KS,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig"),c(ZS,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(eR,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(oR,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(rR,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tR,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizer"),c(aR,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizerFast"),c(nR,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizer"),c(sR,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(lR,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(iR,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizerFast"),c(dR,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(cR,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(mR,"href","/docs/transformers/pr_17254/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(gR,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(hR,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(pR,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(uR,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_R,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(vR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(FR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(TR,"href","/docs/transformers/pr_17254/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MR,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ER,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineTokenizer"),c(wR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(AR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(yR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(LR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizer"),c($R,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(kR,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(SR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizer"),c(BR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(jR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(GR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(OR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizer"),c(VR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(XR,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(zR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizer"),c(WR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(QR,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(HR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizer"),c(UR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(JR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eP,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(oP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizer"),c(aP,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(nP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(dP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(cP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(fP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(mP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(gP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(hP,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pP,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(uP,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizer"),c(_P,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizerFast"),c(bP,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vP,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FP,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeTokenizer"),c(TP,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(MP,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(CP,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianTokenizer"),c(wP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizer"),c(AP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(LP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(xP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c($P,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17254/en/model_doc/mluke#transformers.MLukeTokenizer"),c(SP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(RP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(BP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(IP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(qP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(NP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(jP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(GP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(OP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zP,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(WP,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizer"),c(QP,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartTokenizer"),c(HP,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(UP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagTokenizer"),c(KP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizer"),c(ZP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizerFast"),c(eB,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizer"),c(oB,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(rB,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizer"),c(tB,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(nB,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(dB,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(cB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(fB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(mB,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizer"),c(gB,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(hB,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(pB,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(_B,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(bB,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasTokenizer"),c(vB,"href","/docs/transformers/pr_17254/en/model_doc/tapex#transformers.TapexTokenizer"),c(FB,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(TB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(MB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(AB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizer"),c(yB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LB,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMTokenizer"),c(xB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c($B,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(BB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(qB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(NB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(jB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(eI,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(hI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(pI,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(uI,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(_I,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(bI,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(vI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TI,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(MI,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(EI,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRProcessor"),c(CI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltProcessor"),c(yI,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(kI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PI,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel"),c(BI,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel"),c(II,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel"),c(qI,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(NI,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jI,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel"),c(DI,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VI,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel"),c(XI,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel"),c(zI,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel"),c(WI,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel"),c(QI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel"),c(HI,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel"),c(UI,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel"),c(JI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(YI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(KI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(ZI,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel"),c(eq,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(oq,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(rq,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel"),c(tq,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel"),c(aq,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel"),c(nq,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(sq,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel"),c(lq,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel"),c(iq,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel"),c(dq,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel"),c(cq,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel"),c(fq,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel"),c(mq,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel"),c(gq,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hq,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel"),c(pq,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model"),c(uq,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(_q,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(bq,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel"),c(vq,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel"),c(Fq,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel"),c(Tq,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Mq,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Eq,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Cq,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(wq,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel"),c(Aq,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel"),c(yq,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel"),c(Lq,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel"),c(xq,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c($q,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel"),c(kq,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Sq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel"),c(Rq,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Pq,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Bq,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel"),c(Iq,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model"),c(qq,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Nq,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jq,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel"),c(Dq,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel"),c(Gq,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel"),c(Oq,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel"),c(Vq,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Xq,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zq,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Wq,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel"),c(Qq,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel"),c(Hq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel"),c(Uq,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel"),c(Jq,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(Yq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel"),c(Kq,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel"),c(Zq,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel"),c(eN,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel"),c(oN,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel"),c(rN,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tN,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel"),c(aN,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nN,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel"),c(sN,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model"),c(lN,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel"),c(iN,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(dN,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel"),c(fN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mN,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel"),c(gN,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel"),c(hN,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(pN,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel"),c(uN,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel"),c(_N,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(FN,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel"),c(TN,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel"),c(MN,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel"),c(EN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(CN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(wN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(AN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel"),c(yN,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel"),c(LN,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(xN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($N,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SN,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining"),c(RN,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PN,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining"),c(BN,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(IN,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(NN,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jN,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(DN,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(GN,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ON,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining"),c(VN,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XN,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining"),c(zN,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining"),c(WN,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(HN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(UN,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(YN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(KN,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(ZN,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ej,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(oj,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(rj,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tj,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(aj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nj,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(sj,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dj,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cj,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fj,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mj,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gj,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hj,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pj,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(uj,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_j,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Fj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ej,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM"),c(Cj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel"),c(wj,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Aj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yj,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Lj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($j,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(kj,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Rj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Pj,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bj,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Ij,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(qj,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Nj,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM"),c(jj,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Dj,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Gj,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oj,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM"),c(Vj,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Xj,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zj,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Wj,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Hj,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Uj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Jj,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Yj,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Kj,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(eD,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oD,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nD,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForMaskedLM"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(sD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gD,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uD,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_D,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bD,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FD,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TD,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MD,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ED,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wD,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AD,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($D,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(kD,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SD,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(PD,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ID,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(qD,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jD,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OD,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForSeq2SeqLM"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(VD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(YD,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel"),c(oG,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForSequenceClassification"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(iG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($G,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForMultipleChoice"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(aO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.AutoModelForNextSentencePrediction"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(IO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForTokenClassification"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(XO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eV,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rV,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aV,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sV,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lV,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iV,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mV,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gV,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(uV,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(_V,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(FV,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(TV,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(EV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(CV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(wV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForQuestionAnswering"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(yV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(XV,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mX,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.AutoModelForTableQuestionAnswering"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(uX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.AutoModelForImageClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification"),c(CX,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wX,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xX,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($X,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RX,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PX,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BX,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IX,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(qX,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification"),c(NX,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification"),c(jX,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.AutoModelForVision2Seq"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(DX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.AutoModelForAudioClassification"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.AutoModelForAudioFrameClassification"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.AutoModelForCTC"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(cz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hz,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC"),c(pz,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC"),c(uz,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_z,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bz,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Fz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Tz,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Az,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioXVector"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(yz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kz,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Sz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Rz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Pz,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForMaskedImageModeling"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jz,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Dz,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForObjectDetection"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection"),c(zz,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForImageSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForSemanticSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(oW,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForInstanceSegmentation"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModel"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(lW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel"),c(fW,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel"),c(mW,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel"),c(gW,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hW,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(pW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel"),c(uW,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel"),c(_W,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel"),c(bW,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel"),c(vW,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FW,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TW,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel"),c(MW,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(CW,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(wW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel"),c(AW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel"),c(LW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(xW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model"),c($W,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel"),c(kW,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel"),c(SW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(RW,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel"),c(PW,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel"),c(BW,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel"),c(IW,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel"),c(qW,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel"),c(NW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(jW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel"),c(DW,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model"),c(GW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(OW,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel"),c(XW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel"),c(zW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel"),c(WW,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(QW,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel"),c(HW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model"),c(UW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel"),c(JW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YW,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel"),c(KW,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZW,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel"),c(oQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QT,"id","transformers.TFAutoModelForPreTraining"),c(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lQ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vQ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.TFAutoModelForCausalLM"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(PQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IQ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qQ,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(jQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(DQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(GQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.TFAutoModelForImageClassification"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(HQ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(UQ,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(JQ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.TFAutoModelForMaskedLM"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(YQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(oH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(rH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(nH,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(sH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(lH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(iH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(dH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(cH,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(fH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(mH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(hH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(uH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(_H,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(bH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(wH,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(yH,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel"),c(xH,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kH,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForSequenceClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(RH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForMultipleChoice"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(mU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(SU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(RU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IU,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForTokenClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(qU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(GU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(OU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(XU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(zU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(HU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(JU,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(YU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(KU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForQuestionAnswering"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(bJ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForVision2Seq"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModel"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel"),c(GJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel"),c(OJ,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel"),c(VJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel"),c(XJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(zJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(WJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(QJ,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel"),c(HJ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(UJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel"),c(JJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(YJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(KJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ZJ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel"),c(eY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel"),c(oY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model"),c(rY,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(tY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(aY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(nY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model"),c(sY,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(lY,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel"),c(iY,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(dY,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(cY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModelForCausalLM"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(pY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(uY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(_Y,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(bY,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(vY,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(FY,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(TY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(MY,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.FlaxAutoModelForPreTraining"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(EY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(yY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(xY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c($Y,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(kY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(qY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForMaskedLM"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(NY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(OY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(zY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(WY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(QY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(aK,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(nK,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(dK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(MK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForTokenClassification"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(BK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(jK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(DK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(GK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(VK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(XK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(zK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(WK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModelForImageClassification"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(lZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(fZ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForVision2Seq"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(mZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,uf,_),b(f,rt,_),e(rt,gi),e(rt,hi),e(hi,EA),e(rt,_f),b(f,je,_),b(f,We,_),e(We,pi),e(We,yn),e(yn,CA),e(We,Ln),e(We,xn),e(xn,wA),e(We,ui),e(We,$n),e($n,AA),e(We,_i),b(f,bf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,W$),e(Ae,bi),e(bi,Q$),e(Ae,H$),b(f,Eo,_),b(f,wa,_),e(wa,U$),e(wa,vf),e(vf,J$),e(wa,cOe),b(f,Zqe,_),b(f,vi,_),e(vi,Ff),e(Ff,ioe),M(yA,ioe,null),e(vi,fOe),e(vi,doe),e(doe,mOe),b(f,eNe,_),b(f,kn,_),e(kn,gOe),e(kn,coe),e(coe,hOe),e(kn,pOe),e(kn,foe),e(foe,uOe),e(kn,_Oe),b(f,oNe,_),M(LA,f,_),b(f,rNe,_),b(f,Y$,_),e(Y$,bOe),b(f,tNe,_),M(Tf,f,_),b(f,aNe,_),b(f,Fi,_),e(Fi,Mf),e(Mf,moe),M(xA,moe,null),e(Fi,vOe),e(Fi,goe),e(goe,FOe),b(f,nNe,_),b(f,Co,_),M($A,Co,null),e(Co,TOe),e(Co,kA),e(kA,MOe),e(kA,K$),e(K$,EOe),e(kA,COe),e(Co,wOe),e(Co,SA),e(SA,AOe),e(SA,hoe),e(hoe,yOe),e(SA,LOe),e(Co,xOe),e(Co,Er),M(RA,Er,null),e(Er,$Oe),e(Er,poe),e(poe,kOe),e(Er,SOe),e(Er,Ti),e(Ti,ROe),e(Ti,uoe),e(uoe,POe),e(Ti,BOe),e(Ti,_oe),e(_oe,IOe),e(Ti,qOe),e(Er,NOe),e(Er,A),e(A,Ef),e(Ef,boe),e(boe,jOe),e(Ef,DOe),e(Ef,Z$),e(Z$,GOe),e(Ef,OOe),e(A,VOe),e(A,Cf),e(Cf,voe),e(voe,XOe),e(Cf,zOe),e(Cf,ek),e(ek,WOe),e(Cf,QOe),e(A,HOe),e(A,wf),e(wf,Foe),e(Foe,UOe),e(wf,JOe),e(wf,ok),e(ok,YOe),e(wf,KOe),e(A,ZOe),e(A,Af),e(Af,Toe),e(Toe,eVe),e(Af,oVe),e(Af,rk),e(rk,rVe),e(Af,tVe),e(A,aVe),e(A,yf),e(yf,Moe),e(Moe,nVe),e(yf,sVe),e(yf,tk),e(tk,lVe),e(yf,iVe),e(A,dVe),e(A,Lf),e(Lf,Eoe),e(Eoe,cVe),e(Lf,fVe),e(Lf,ak),e(ak,mVe),e(Lf,gVe),e(A,hVe),e(A,xf),e(xf,Coe),e(Coe,pVe),e(xf,uVe),e(xf,nk),e(nk,_Ve),e(xf,bVe),e(A,vVe),e(A,$f),e($f,woe),e(woe,FVe),e($f,TVe),e($f,sk),e(sk,MVe),e($f,EVe),e(A,CVe),e(A,kf),e(kf,Aoe),e(Aoe,wVe),e(kf,AVe),e(kf,lk),e(lk,yVe),e(kf,LVe),e(A,xVe),e(A,Sf),e(Sf,yoe),e(yoe,$Ve),e(Sf,kVe),e(Sf,ik),e(ik,SVe),e(Sf,RVe),e(A,PVe),e(A,Rf),e(Rf,Loe),e(Loe,BVe),e(Rf,IVe),e(Rf,dk),e(dk,qVe),e(Rf,NVe),e(A,jVe),e(A,Pf),e(Pf,xoe),e(xoe,DVe),e(Pf,GVe),e(Pf,ck),e(ck,OVe),e(Pf,VVe),e(A,XVe),e(A,Bf),e(Bf,$oe),e($oe,zVe),e(Bf,WVe),e(Bf,fk),e(fk,QVe),e(Bf,HVe),e(A,UVe),e(A,If),e(If,koe),e(koe,JVe),e(If,YVe),e(If,mk),e(mk,KVe),e(If,ZVe),e(A,eXe),e(A,qf),e(qf,Soe),e(Soe,oXe),e(qf,rXe),e(qf,gk),e(gk,tXe),e(qf,aXe),e(A,nXe),e(A,Nf),e(Nf,Roe),e(Roe,sXe),e(Nf,lXe),e(Nf,hk),e(hk,iXe),e(Nf,dXe),e(A,cXe),e(A,jf),e(jf,Poe),e(Poe,fXe),e(jf,mXe),e(jf,pk),e(pk,gXe),e(jf,hXe),e(A,pXe),e(A,Df),e(Df,Boe),e(Boe,uXe),e(Df,_Xe),e(Df,uk),e(uk,bXe),e(Df,vXe),e(A,FXe),e(A,Gf),e(Gf,Ioe),e(Ioe,TXe),e(Gf,MXe),e(Gf,_k),e(_k,EXe),e(Gf,CXe),e(A,wXe),e(A,Of),e(Of,qoe),e(qoe,AXe),e(Of,yXe),e(Of,bk),e(bk,LXe),e(Of,xXe),e(A,$Xe),e(A,Vf),e(Vf,Noe),e(Noe,kXe),e(Vf,SXe),e(Vf,vk),e(vk,RXe),e(Vf,PXe),e(A,BXe),e(A,Xf),e(Xf,joe),e(joe,IXe),e(Xf,qXe),e(Xf,Fk),e(Fk,NXe),e(Xf,jXe),e(A,DXe),e(A,zf),e(zf,Doe),e(Doe,GXe),e(zf,OXe),e(zf,Tk),e(Tk,VXe),e(zf,XXe),e(A,zXe),e(A,Wf),e(Wf,Goe),e(Goe,WXe),e(Wf,QXe),e(Wf,Mk),e(Mk,HXe),e(Wf,UXe),e(A,JXe),e(A,Qf),e(Qf,Ooe),e(Ooe,YXe),e(Qf,KXe),e(Qf,Ek),e(Ek,ZXe),e(Qf,eze),e(A,oze),e(A,Hf),e(Hf,Voe),e(Voe,rze),e(Hf,tze),e(Hf,Ck),e(Ck,aze),e(Hf,nze),e(A,sze),e(A,Uf),e(Uf,Xoe),e(Xoe,lze),e(Uf,ize),e(Uf,wk),e(wk,dze),e(Uf,cze),e(A,fze),e(A,Jf),e(Jf,zoe),e(zoe,mze),e(Jf,gze),e(Jf,Ak),e(Ak,hze),e(Jf,pze),e(A,uze),e(A,Yf),e(Yf,Woe),e(Woe,_ze),e(Yf,bze),e(Yf,yk),e(yk,vze),e(Yf,Fze),e(A,Tze),e(A,Kf),e(Kf,Qoe),e(Qoe,Mze),e(Kf,Eze),e(Kf,Lk),e(Lk,Cze),e(Kf,wze),e(A,Aze),e(A,Zf),e(Zf,Hoe),e(Hoe,yze),e(Zf,Lze),e(Zf,xk),e(xk,xze),e(Zf,$ze),e(A,kze),e(A,em),e(em,Uoe),e(Uoe,Sze),e(em,Rze),e(em,$k),e($k,Pze),e(em,Bze),e(A,Ize),e(A,om),e(om,Joe),e(Joe,qze),e(om,Nze),e(om,kk),e(kk,jze),e(om,Dze),e(A,Gze),e(A,rm),e(rm,Yoe),e(Yoe,Oze),e(rm,Vze),e(rm,Sk),e(Sk,Xze),e(rm,zze),e(A,Wze),e(A,tm),e(tm,Koe),e(Koe,Qze),e(tm,Hze),e(tm,Rk),e(Rk,Uze),e(tm,Jze),e(A,Yze),e(A,am),e(am,Zoe),e(Zoe,Kze),e(am,Zze),e(am,Pk),e(Pk,eWe),e(am,oWe),e(A,rWe),e(A,nm),e(nm,ere),e(ere,tWe),e(nm,aWe),e(nm,Bk),e(Bk,nWe),e(nm,sWe),e(A,lWe),e(A,sm),e(sm,ore),e(ore,iWe),e(sm,dWe),e(sm,Ik),e(Ik,cWe),e(sm,fWe),e(A,mWe),e(A,lm),e(lm,rre),e(rre,gWe),e(lm,hWe),e(lm,qk),e(qk,pWe),e(lm,uWe),e(A,_We),e(A,im),e(im,tre),e(tre,bWe),e(im,vWe),e(im,Nk),e(Nk,FWe),e(im,TWe),e(A,MWe),e(A,dm),e(dm,are),e(are,EWe),e(dm,CWe),e(dm,jk),e(jk,wWe),e(dm,AWe),e(A,yWe),e(A,cm),e(cm,nre),e(nre,LWe),e(cm,xWe),e(cm,Dk),e(Dk,$We),e(cm,kWe),e(A,SWe),e(A,fm),e(fm,sre),e(sre,RWe),e(fm,PWe),e(fm,Gk),e(Gk,BWe),e(fm,IWe),e(A,qWe),e(A,mm),e(mm,lre),e(lre,NWe),e(mm,jWe),e(mm,Ok),e(Ok,DWe),e(mm,GWe),e(A,OWe),e(A,gm),e(gm,ire),e(ire,VWe),e(gm,XWe),e(gm,Vk),e(Vk,zWe),e(gm,WWe),e(A,QWe),e(A,hm),e(hm,dre),e(dre,HWe),e(hm,UWe),e(hm,Xk),e(Xk,JWe),e(hm,YWe),e(A,KWe),e(A,pm),e(pm,cre),e(cre,ZWe),e(pm,eQe),e(pm,zk),e(zk,oQe),e(pm,rQe),e(A,tQe),e(A,um),e(um,fre),e(fre,aQe),e(um,nQe),e(um,Wk),e(Wk,sQe),e(um,lQe),e(A,iQe),e(A,_m),e(_m,mre),e(mre,dQe),e(_m,cQe),e(_m,Qk),e(Qk,fQe),e(_m,mQe),e(A,gQe),e(A,bm),e(bm,gre),e(gre,hQe),e(bm,pQe),e(bm,Hk),e(Hk,uQe),e(bm,_Qe),e(A,bQe),e(A,vm),e(vm,hre),e(hre,vQe),e(vm,FQe),e(vm,Uk),e(Uk,TQe),e(vm,MQe),e(A,EQe),e(A,Fm),e(Fm,pre),e(pre,CQe),e(Fm,wQe),e(Fm,Jk),e(Jk,AQe),e(Fm,yQe),e(A,LQe),e(A,Tm),e(Tm,ure),e(ure,xQe),e(Tm,$Qe),e(Tm,Yk),e(Yk,kQe),e(Tm,SQe),e(A,RQe),e(A,Mm),e(Mm,_re),e(_re,PQe),e(Mm,BQe),e(Mm,Kk),e(Kk,IQe),e(Mm,qQe),e(A,NQe),e(A,Em),e(Em,bre),e(bre,jQe),e(Em,DQe),e(Em,Zk),e(Zk,GQe),e(Em,OQe),e(A,VQe),e(A,Cm),e(Cm,vre),e(vre,XQe),e(Cm,zQe),e(Cm,eS),e(eS,WQe),e(Cm,QQe),e(A,HQe),e(A,wm),e(wm,Fre),e(Fre,UQe),e(wm,JQe),e(wm,oS),e(oS,YQe),e(wm,KQe),e(A,ZQe),e(A,Am),e(Am,Tre),e(Tre,eHe),e(Am,oHe),e(Am,rS),e(rS,rHe),e(Am,tHe),e(A,aHe),e(A,ym),e(ym,Mre),e(Mre,nHe),e(ym,sHe),e(ym,tS),e(tS,lHe),e(ym,iHe),e(A,dHe),e(A,Lm),e(Lm,Ere),e(Ere,cHe),e(Lm,fHe),e(Lm,aS),e(aS,mHe),e(Lm,gHe),e(A,hHe),e(A,xm),e(xm,Cre),e(Cre,pHe),e(xm,uHe),e(xm,nS),e(nS,_He),e(xm,bHe),e(A,vHe),e(A,$m),e($m,wre),e(wre,FHe),e($m,THe),e($m,sS),e(sS,MHe),e($m,EHe),e(A,CHe),e(A,km),e(km,Are),e(Are,wHe),e(km,AHe),e(km,lS),e(lS,yHe),e(km,LHe),e(A,xHe),e(A,Sm),e(Sm,yre),e(yre,$He),e(Sm,kHe),e(Sm,iS),e(iS,SHe),e(Sm,RHe),e(A,PHe),e(A,Rm),e(Rm,Lre),e(Lre,BHe),e(Rm,IHe),e(Rm,dS),e(dS,qHe),e(Rm,NHe),e(A,jHe),e(A,Pm),e(Pm,xre),e(xre,DHe),e(Pm,GHe),e(Pm,cS),e(cS,OHe),e(Pm,VHe),e(A,XHe),e(A,Bm),e(Bm,$re),e($re,zHe),e(Bm,WHe),e(Bm,fS),e(fS,QHe),e(Bm,HHe),e(A,UHe),e(A,Im),e(Im,kre),e(kre,JHe),e(Im,YHe),e(Im,mS),e(mS,KHe),e(Im,ZHe),e(A,eUe),e(A,qm),e(qm,Sre),e(Sre,oUe),e(qm,rUe),e(qm,gS),e(gS,tUe),e(qm,aUe),e(A,nUe),e(A,Nm),e(Nm,Rre),e(Rre,sUe),e(Nm,lUe),e(Nm,hS),e(hS,iUe),e(Nm,dUe),e(A,cUe),e(A,jm),e(jm,Pre),e(Pre,fUe),e(jm,mUe),e(jm,pS),e(pS,gUe),e(jm,hUe),e(A,pUe),e(A,Dm),e(Dm,Bre),e(Bre,uUe),e(Dm,_Ue),e(Dm,uS),e(uS,bUe),e(Dm,vUe),e(A,FUe),e(A,Gm),e(Gm,Ire),e(Ire,TUe),e(Gm,MUe),e(Gm,_S),e(_S,EUe),e(Gm,CUe),e(A,wUe),e(A,Om),e(Om,qre),e(qre,AUe),e(Om,yUe),e(Om,bS),e(bS,LUe),e(Om,xUe),e(A,$Ue),e(A,Vm),e(Vm,Nre),e(Nre,kUe),e(Vm,SUe),e(Vm,vS),e(vS,RUe),e(Vm,PUe),e(A,BUe),e(A,Xm),e(Xm,jre),e(jre,IUe),e(Xm,qUe),e(Xm,FS),e(FS,NUe),e(Xm,jUe),e(A,DUe),e(A,zm),e(zm,Dre),e(Dre,GUe),e(zm,OUe),e(zm,TS),e(TS,VUe),e(zm,XUe),e(A,zUe),e(A,Wm),e(Wm,Gre),e(Gre,WUe),e(Wm,QUe),e(Wm,MS),e(MS,HUe),e(Wm,UUe),e(A,JUe),e(A,Qm),e(Qm,Ore),e(Ore,YUe),e(Qm,KUe),e(Qm,ES),e(ES,ZUe),e(Qm,eJe),e(A,oJe),e(A,Hm),e(Hm,Vre),e(Vre,rJe),e(Hm,tJe),e(Hm,CS),e(CS,aJe),e(Hm,nJe),e(A,sJe),e(A,Um),e(Um,Xre),e(Xre,lJe),e(Um,iJe),e(Um,wS),e(wS,dJe),e(Um,cJe),e(A,fJe),e(A,Jm),e(Jm,zre),e(zre,mJe),e(Jm,gJe),e(Jm,AS),e(AS,hJe),e(Jm,pJe),e(A,uJe),e(A,Ym),e(Ym,Wre),e(Wre,_Je),e(Ym,bJe),e(Ym,yS),e(yS,vJe),e(Ym,FJe),e(A,TJe),e(A,Km),e(Km,Qre),e(Qre,MJe),e(Km,EJe),e(Km,LS),e(LS,CJe),e(Km,wJe),e(A,AJe),e(A,Zm),e(Zm,Hre),e(Hre,yJe),e(Zm,LJe),e(Zm,xS),e(xS,xJe),e(Zm,$Je),e(A,kJe),e(A,eg),e(eg,Ure),e(Ure,SJe),e(eg,RJe),e(eg,$S),e($S,PJe),e(eg,BJe),e(A,IJe),e(A,og),e(og,Jre),e(Jre,qJe),e(og,NJe),e(og,kS),e(kS,jJe),e(og,DJe),e(A,GJe),e(A,rg),e(rg,Yre),e(Yre,OJe),e(rg,VJe),e(rg,SS),e(SS,XJe),e(rg,zJe),e(A,WJe),e(A,tg),e(tg,Kre),e(Kre,QJe),e(tg,HJe),e(tg,RS),e(RS,UJe),e(tg,JJe),e(A,YJe),e(A,ag),e(ag,Zre),e(Zre,KJe),e(ag,ZJe),e(ag,PS),e(PS,eYe),e(ag,oYe),e(A,rYe),e(A,ng),e(ng,ete),e(ete,tYe),e(ng,aYe),e(ng,BS),e(BS,nYe),e(ng,sYe),e(A,lYe),e(A,sg),e(sg,ote),e(ote,iYe),e(sg,dYe),e(sg,IS),e(IS,cYe),e(sg,fYe),e(A,mYe),e(A,lg),e(lg,rte),e(rte,gYe),e(lg,hYe),e(lg,qS),e(qS,pYe),e(lg,uYe),e(A,_Ye),e(A,ig),e(ig,tte),e(tte,bYe),e(ig,vYe),e(ig,NS),e(NS,FYe),e(ig,TYe),e(A,MYe),e(A,dg),e(dg,ate),e(ate,EYe),e(dg,CYe),e(dg,jS),e(jS,wYe),e(dg,AYe),e(A,yYe),e(A,cg),e(cg,nte),e(nte,LYe),e(cg,xYe),e(cg,DS),e(DS,$Ye),e(cg,kYe),e(A,SYe),e(A,fg),e(fg,ste),e(ste,RYe),e(fg,PYe),e(fg,GS),e(GS,BYe),e(fg,IYe),e(A,qYe),e(A,mg),e(mg,lte),e(lte,NYe),e(mg,jYe),e(mg,OS),e(OS,DYe),e(mg,GYe),e(A,OYe),e(A,gg),e(gg,ite),e(ite,VYe),e(gg,XYe),e(gg,VS),e(VS,zYe),e(gg,WYe),e(A,QYe),e(A,hg),e(hg,dte),e(dte,HYe),e(hg,UYe),e(hg,XS),e(XS,JYe),e(hg,YYe),e(A,KYe),e(A,pg),e(pg,cte),e(cte,ZYe),e(pg,eKe),e(pg,zS),e(zS,oKe),e(pg,rKe),e(A,tKe),e(A,ug),e(ug,fte),e(fte,aKe),e(ug,nKe),e(ug,WS),e(WS,sKe),e(ug,lKe),e(A,iKe),e(A,_g),e(_g,mte),e(mte,dKe),e(_g,cKe),e(_g,QS),e(QS,fKe),e(_g,mKe),e(A,gKe),e(A,bg),e(bg,gte),e(gte,hKe),e(bg,pKe),e(bg,HS),e(HS,uKe),e(bg,_Ke),e(A,bKe),e(A,vg),e(vg,hte),e(hte,vKe),e(vg,FKe),e(vg,US),e(US,TKe),e(vg,MKe),e(A,EKe),e(A,Fg),e(Fg,pte),e(pte,CKe),e(Fg,wKe),e(Fg,JS),e(JS,AKe),e(Fg,yKe),e(A,LKe),e(A,Tg),e(Tg,ute),e(ute,xKe),e(Tg,$Ke),e(Tg,YS),e(YS,kKe),e(Tg,SKe),e(A,RKe),e(A,Mg),e(Mg,_te),e(_te,PKe),e(Mg,BKe),e(Mg,KS),e(KS,IKe),e(Mg,qKe),e(A,NKe),e(A,Eg),e(Eg,bte),e(bte,jKe),e(Eg,DKe),e(Eg,ZS),e(ZS,GKe),e(Eg,OKe),e(Er,VKe),M(Cg,Er,null),e(Co,XKe),e(Co,wg),M(PA,wg,null),e(wg,zKe),e(wg,vte),e(vte,WKe),b(f,sNe,_),b(f,Mi,_),e(Mi,Ag),e(Ag,Fte),M(BA,Fte,null),e(Mi,QKe),e(Mi,Tte),e(Tte,HKe),b(f,lNe,_),b(f,wo,_),M(IA,wo,null),e(wo,UKe),e(wo,qA),e(qA,JKe),e(qA,eR),e(eR,YKe),e(qA,KKe),e(wo,ZKe),e(wo,NA),e(NA,eZe),e(NA,Mte),e(Mte,oZe),e(NA,rZe),e(wo,tZe),e(wo,Cr),M(jA,Cr,null),e(Cr,aZe),e(Cr,Ete),e(Ete,nZe),e(Cr,sZe),e(Cr,Aa),e(Aa,lZe),e(Aa,Cte),e(Cte,iZe),e(Aa,dZe),e(Aa,wte),e(wte,cZe),e(Aa,fZe),e(Aa,Ate),e(Ate,mZe),e(Aa,gZe),e(Cr,hZe),e(Cr,k),e(k,Sn),e(Sn,yte),e(yte,pZe),e(Sn,uZe),e(Sn,oR),e(oR,_Ze),e(Sn,bZe),e(Sn,rR),e(rR,vZe),e(Sn,FZe),e(k,TZe),e(k,Rn),e(Rn,Lte),e(Lte,MZe),e(Rn,EZe),e(Rn,tR),e(tR,CZe),e(Rn,wZe),e(Rn,aR),e(aR,AZe),e(Rn,yZe),e(k,LZe),e(k,Pn),e(Pn,xte),e(xte,xZe),e(Pn,$Ze),e(Pn,nR),e(nR,kZe),e(Pn,SZe),e(Pn,sR),e(sR,RZe),e(Pn,PZe),e(k,BZe),e(k,Bn),e(Bn,$te),e($te,IZe),e(Bn,qZe),e(Bn,lR),e(lR,NZe),e(Bn,jZe),e(Bn,iR),e(iR,DZe),e(Bn,GZe),e(k,OZe),e(k,In),e(In,kte),e(kte,VZe),e(In,XZe),e(In,dR),e(dR,zZe),e(In,WZe),e(In,cR),e(cR,QZe),e(In,HZe),e(k,UZe),e(k,yg),e(yg,Ste),e(Ste,JZe),e(yg,YZe),e(yg,fR),e(fR,KZe),e(yg,ZZe),e(k,eeo),e(k,Lg),e(Lg,Rte),e(Rte,oeo),e(Lg,reo),e(Lg,mR),e(mR,teo),e(Lg,aeo),e(k,neo),e(k,xg),e(xg,Pte),e(Pte,seo),e(xg,leo),e(xg,gR),e(gR,ieo),e(xg,deo),e(k,ceo),e(k,qn),e(qn,Bte),e(Bte,feo),e(qn,meo),e(qn,hR),e(hR,geo),e(qn,heo),e(qn,pR),e(pR,peo),e(qn,ueo),e(k,_eo),e(k,Nn),e(Nn,Ite),e(Ite,beo),e(Nn,veo),e(Nn,uR),e(uR,Feo),e(Nn,Teo),e(Nn,_R),e(_R,Meo),e(Nn,Eeo),e(k,Ceo),e(k,jn),e(jn,qte),e(qte,weo),e(jn,Aeo),e(jn,bR),e(bR,yeo),e(jn,Leo),e(jn,vR),e(vR,xeo),e(jn,$eo),e(k,keo),e(k,$g),e($g,Nte),e(Nte,Seo),e($g,Reo),e($g,FR),e(FR,Peo),e($g,Beo),e(k,Ieo),e(k,kg),e(kg,jte),e(jte,qeo),e(kg,Neo),e(kg,TR),e(TR,jeo),e(kg,Deo),e(k,Geo),e(k,Dn),e(Dn,Dte),e(Dte,Oeo),e(Dn,Veo),e(Dn,MR),e(MR,Xeo),e(Dn,zeo),e(Dn,ER),e(ER,Weo),e(Dn,Qeo),e(k,Heo),e(k,Sg),e(Sg,Gte),e(Gte,Ueo),e(Sg,Jeo),e(Sg,CR),e(CR,Yeo),e(Sg,Keo),e(k,Zeo),e(k,Gn),e(Gn,Ote),e(Ote,eoo),e(Gn,ooo),e(Gn,wR),e(wR,roo),e(Gn,too),e(Gn,AR),e(AR,aoo),e(Gn,noo),e(k,soo),e(k,On),e(On,Vte),e(Vte,loo),e(On,ioo),e(On,yR),e(yR,doo),e(On,coo),e(On,LR),e(LR,foo),e(On,moo),e(k,goo),e(k,Vn),e(Vn,Xte),e(Xte,hoo),e(Vn,poo),e(Vn,xR),e(xR,uoo),e(Vn,_oo),e(Vn,$R),e($R,boo),e(Vn,voo),e(k,Foo),e(k,Rg),e(Rg,zte),e(zte,Too),e(Rg,Moo),e(Rg,kR),e(kR,Eoo),e(Rg,Coo),e(k,woo),e(k,Xn),e(Xn,Wte),e(Wte,Aoo),e(Xn,yoo),e(Xn,SR),e(SR,Loo),e(Xn,xoo),e(Xn,RR),e(RR,$oo),e(Xn,koo),e(k,Soo),e(k,zn),e(zn,Qte),e(Qte,Roo),e(zn,Poo),e(zn,PR),e(PR,Boo),e(zn,Ioo),e(zn,BR),e(BR,qoo),e(zn,Noo),e(k,joo),e(k,Wn),e(Wn,Hte),e(Hte,Doo),e(Wn,Goo),e(Wn,IR),e(IR,Ooo),e(Wn,Voo),e(Wn,qR),e(qR,Xoo),e(Wn,zoo),e(k,Woo),e(k,Qn),e(Qn,Ute),e(Ute,Qoo),e(Qn,Hoo),e(Qn,NR),e(NR,Uoo),e(Qn,Joo),e(Qn,jR),e(jR,Yoo),e(Qn,Koo),e(k,Zoo),e(k,Hn),e(Hn,Jte),e(Jte,ero),e(Hn,oro),e(Hn,DR),e(DR,rro),e(Hn,tro),e(Hn,GR),e(GR,aro),e(Hn,nro),e(k,sro),e(k,Un),e(Un,Yte),e(Yte,lro),e(Un,iro),e(Un,OR),e(OR,dro),e(Un,cro),e(Un,VR),e(VR,fro),e(Un,mro),e(k,gro),e(k,Pg),e(Pg,Kte),e(Kte,hro),e(Pg,pro),e(Pg,XR),e(XR,uro),e(Pg,_ro),e(k,bro),e(k,Jn),e(Jn,Zte),e(Zte,vro),e(Jn,Fro),e(Jn,zR),e(zR,Tro),e(Jn,Mro),e(Jn,WR),e(WR,Ero),e(Jn,Cro),e(k,wro),e(k,Bg),e(Bg,eae),e(eae,Aro),e(Bg,yro),e(Bg,QR),e(QR,Lro),e(Bg,xro),e(k,$ro),e(k,Yn),e(Yn,oae),e(oae,kro),e(Yn,Sro),e(Yn,HR),e(HR,Rro),e(Yn,Pro),e(Yn,UR),e(UR,Bro),e(Yn,Iro),e(k,qro),e(k,Kn),e(Kn,rae),e(rae,Nro),e(Kn,jro),e(Kn,JR),e(JR,Dro),e(Kn,Gro),e(Kn,YR),e(YR,Oro),e(Kn,Vro),e(k,Xro),e(k,Zn),e(Zn,tae),e(tae,zro),e(Zn,Wro),e(Zn,KR),e(KR,Qro),e(Zn,Hro),e(Zn,ZR),e(ZR,Uro),e(Zn,Jro),e(k,Yro),e(k,Ig),e(Ig,aae),e(aae,Kro),e(Ig,Zro),e(Ig,eP),e(eP,eto),e(Ig,oto),e(k,rto),e(k,es),e(es,nae),e(nae,tto),e(es,ato),e(es,oP),e(oP,nto),e(es,sto),e(es,rP),e(rP,lto),e(es,ito),e(k,dto),e(k,os),e(os,sae),e(sae,cto),e(os,fto),e(os,tP),e(tP,mto),e(os,gto),e(os,aP),e(aP,hto),e(os,pto),e(k,uto),e(k,qg),e(qg,lae),e(lae,_to),e(qg,bto),e(qg,nP),e(nP,vto),e(qg,Fto),e(k,Tto),e(k,rs),e(rs,iae),e(iae,Mto),e(rs,Eto),e(rs,sP),e(sP,Cto),e(rs,wto),e(rs,lP),e(lP,Ato),e(rs,yto),e(k,Lto),e(k,ts),e(ts,dae),e(dae,xto),e(ts,$to),e(ts,iP),e(iP,kto),e(ts,Sto),e(ts,dP),e(dP,Rto),e(ts,Pto),e(k,Bto),e(k,as),e(as,cae),e(cae,Ito),e(as,qto),e(as,cP),e(cP,Nto),e(as,jto),e(as,fP),e(fP,Dto),e(as,Gto),e(k,Oto),e(k,ns),e(ns,fae),e(fae,Vto),e(ns,Xto),e(ns,mP),e(mP,zto),e(ns,Wto),e(ns,gP),e(gP,Qto),e(ns,Hto),e(k,Uto),e(k,ss),e(ss,mae),e(mae,Jto),e(ss,Yto),e(ss,hP),e(hP,Kto),e(ss,Zto),e(ss,pP),e(pP,eao),e(ss,oao),e(k,rao),e(k,ls),e(ls,gae),e(gae,tao),e(ls,aao),e(ls,uP),e(uP,nao),e(ls,sao),e(ls,_P),e(_P,lao),e(ls,iao),e(k,dao),e(k,is),e(is,hae),e(hae,cao),e(is,fao),e(is,bP),e(bP,mao),e(is,gao),e(is,vP),e(vP,hao),e(is,pao),e(k,uao),e(k,Ng),e(Ng,pae),e(pae,_ao),e(Ng,bao),e(Ng,FP),e(FP,vao),e(Ng,Fao),e(k,Tao),e(k,ds),e(ds,uae),e(uae,Mao),e(ds,Eao),e(ds,TP),e(TP,Cao),e(ds,wao),e(ds,MP),e(MP,Aao),e(ds,yao),e(k,Lao),e(k,jg),e(jg,_ae),e(_ae,xao),e(jg,$ao),e(jg,EP),e(EP,kao),e(jg,Sao),e(k,Rao),e(k,Dg),e(Dg,bae),e(bae,Pao),e(Dg,Bao),e(Dg,CP),e(CP,Iao),e(Dg,qao),e(k,Nao),e(k,cs),e(cs,vae),e(vae,jao),e(cs,Dao),e(cs,wP),e(wP,Gao),e(cs,Oao),e(cs,AP),e(AP,Vao),e(cs,Xao),e(k,zao),e(k,fs),e(fs,Fae),e(Fae,Wao),e(fs,Qao),e(fs,yP),e(yP,Hao),e(fs,Uao),e(fs,LP),e(LP,Jao),e(fs,Yao),e(k,Kao),e(k,ms),e(ms,Tae),e(Tae,Zao),e(ms,eno),e(ms,xP),e(xP,ono),e(ms,rno),e(ms,$P),e($P,tno),e(ms,ano),e(k,nno),e(k,Gg),e(Gg,Mae),e(Mae,sno),e(Gg,lno),e(Gg,kP),e(kP,ino),e(Gg,dno),e(k,cno),e(k,gs),e(gs,Eae),e(Eae,fno),e(gs,mno),e(gs,SP),e(SP,gno),e(gs,hno),e(gs,RP),e(RP,pno),e(gs,uno),e(k,_no),e(k,hs),e(hs,Cae),e(Cae,bno),e(hs,vno),e(hs,PP),e(PP,Fno),e(hs,Tno),e(hs,BP),e(BP,Mno),e(hs,Eno),e(k,Cno),e(k,ps),e(ps,wae),e(wae,wno),e(ps,Ano),e(ps,IP),e(IP,yno),e(ps,Lno),e(ps,qP),e(qP,xno),e(ps,$no),e(k,kno),e(k,us),e(us,Aae),e(Aae,Sno),e(us,Rno),e(us,NP),e(NP,Pno),e(us,Bno),e(us,jP),e(jP,Ino),e(us,qno),e(k,Nno),e(k,_s),e(_s,yae),e(yae,jno),e(_s,Dno),e(_s,DP),e(DP,Gno),e(_s,Ono),e(_s,GP),e(GP,Vno),e(_s,Xno),e(k,zno),e(k,Og),e(Og,Lae),e(Lae,Wno),e(Og,Qno),e(Og,OP),e(OP,Hno),e(Og,Uno),e(k,Jno),e(k,bs),e(bs,xae),e(xae,Yno),e(bs,Kno),e(bs,VP),e(VP,Zno),e(bs,eso),e(bs,XP),e(XP,oso),e(bs,rso),e(k,tso),e(k,Vg),e(Vg,$ae),e($ae,aso),e(Vg,nso),e(Vg,zP),e(zP,sso),e(Vg,lso),e(k,iso),e(k,Xg),e(Xg,kae),e(kae,dso),e(Xg,cso),e(Xg,WP),e(WP,fso),e(Xg,mso),e(k,gso),e(k,zg),e(zg,Sae),e(Sae,hso),e(zg,pso),e(zg,QP),e(QP,uso),e(zg,_so),e(k,bso),e(k,Wg),e(Wg,Rae),e(Rae,vso),e(Wg,Fso),e(Wg,HP),e(HP,Tso),e(Wg,Mso),e(k,Eso),e(k,vs),e(vs,Pae),e(Pae,Cso),e(vs,wso),e(vs,UP),e(UP,Aso),e(vs,yso),e(vs,JP),e(JP,Lso),e(vs,xso),e(k,$so),e(k,Qg),e(Qg,Bae),e(Bae,kso),e(Qg,Sso),e(Qg,YP),e(YP,Rso),e(Qg,Pso),e(k,Bso),e(k,Fs),e(Fs,Iae),e(Iae,Iso),e(Fs,qso),e(Fs,KP),e(KP,Nso),e(Fs,jso),e(Fs,ZP),e(ZP,Dso),e(Fs,Gso),e(k,Oso),e(k,Ts),e(Ts,qae),e(qae,Vso),e(Ts,Xso),e(Ts,eB),e(eB,zso),e(Ts,Wso),e(Ts,oB),e(oB,Qso),e(Ts,Hso),e(k,Uso),e(k,Ms),e(Ms,Nae),e(Nae,Jso),e(Ms,Yso),e(Ms,rB),e(rB,Kso),e(Ms,Zso),e(Ms,tB),e(tB,elo),e(Ms,olo),e(k,rlo),e(k,Es),e(Es,jae),e(jae,tlo),e(Es,alo),e(Es,aB),e(aB,nlo),e(Es,slo),e(Es,nB),e(nB,llo),e(Es,ilo),e(k,dlo),e(k,Cs),e(Cs,Dae),e(Dae,clo),e(Cs,flo),e(Cs,sB),e(sB,mlo),e(Cs,glo),e(Cs,lB),e(lB,hlo),e(Cs,plo),e(k,ulo),e(k,ws),e(ws,Gae),e(Gae,_lo),e(ws,blo),e(ws,iB),e(iB,vlo),e(ws,Flo),e(ws,dB),e(dB,Tlo),e(ws,Mlo),e(k,Elo),e(k,Hg),e(Hg,Oae),e(Oae,Clo),e(Hg,wlo),e(Hg,cB),e(cB,Alo),e(Hg,ylo),e(k,Llo),e(k,Ug),e(Ug,Vae),e(Vae,xlo),e(Ug,$lo),e(Ug,fB),e(fB,klo),e(Ug,Slo),e(k,Rlo),e(k,As),e(As,Xae),e(Xae,Plo),e(As,Blo),e(As,mB),e(mB,Ilo),e(As,qlo),e(As,gB),e(gB,Nlo),e(As,jlo),e(k,Dlo),e(k,ys),e(ys,zae),e(zae,Glo),e(ys,Olo),e(ys,hB),e(hB,Vlo),e(ys,Xlo),e(ys,pB),e(pB,zlo),e(ys,Wlo),e(k,Qlo),e(k,Ls),e(Ls,Wae),e(Wae,Hlo),e(Ls,Ulo),e(Ls,uB),e(uB,Jlo),e(Ls,Ylo),e(Ls,_B),e(_B,Klo),e(Ls,Zlo),e(k,eio),e(k,Jg),e(Jg,Qae),e(Qae,oio),e(Jg,rio),e(Jg,bB),e(bB,tio),e(Jg,aio),e(k,nio),e(k,Yg),e(Yg,Hae),e(Hae,sio),e(Yg,lio),e(Yg,vB),e(vB,iio),e(Yg,dio),e(k,cio),e(k,Kg),e(Kg,Uae),e(Uae,fio),e(Kg,mio),e(Kg,FB),e(FB,gio),e(Kg,hio),e(k,pio),e(k,xs),e(xs,Jae),e(Jae,uio),e(xs,_io),e(xs,TB),e(TB,bio),e(xs,vio),e(xs,MB),e(MB,Fio),e(xs,Tio),e(k,Mio),e(k,Zg),e(Zg,Yae),e(Yae,Eio),e(Zg,Cio),e(Zg,EB),e(EB,wio),e(Zg,Aio),e(k,yio),e(k,eh),e(eh,Kae),e(Kae,Lio),e(eh,xio),e(eh,CB),e(CB,$io),e(eh,kio),e(k,Sio),e(k,oh),e(oh,Zae),e(Zae,Rio),e(oh,Pio),e(oh,wB),e(wB,Bio),e(oh,Iio),e(k,qio),e(k,$s),e($s,ene),e(ene,Nio),e($s,jio),e($s,AB),e(AB,Dio),e($s,Gio),e($s,yB),e(yB,Oio),e($s,Vio),e(k,Xio),e(k,rh),e(rh,one),e(one,zio),e(rh,Wio),e(rh,LB),e(LB,Qio),e(rh,Hio),e(k,Uio),e(k,th),e(th,rne),e(rne,Jio),e(th,Yio),e(th,xB),e(xB,Kio),e(th,Zio),e(k,edo),e(k,ks),e(ks,tne),e(tne,odo),e(ks,rdo),e(ks,$B),e($B,tdo),e(ks,ado),e(ks,kB),e(kB,ndo),e(ks,sdo),e(k,ldo),e(k,Ss),e(Ss,ane),e(ane,ido),e(Ss,ddo),e(Ss,SB),e(SB,cdo),e(Ss,fdo),e(Ss,RB),e(RB,mdo),e(Ss,gdo),e(k,hdo),e(k,Rs),e(Rs,nne),e(nne,pdo),e(Rs,udo),e(Rs,PB),e(PB,_do),e(Rs,bdo),e(Rs,BB),e(BB,vdo),e(Rs,Fdo),e(k,Tdo),e(k,Ps),e(Ps,sne),e(sne,Mdo),e(Ps,Edo),e(Ps,IB),e(IB,Cdo),e(Ps,wdo),e(Ps,qB),e(qB,Ado),e(Ps,ydo),e(Cr,Ldo),M(ah,Cr,null),e(wo,xdo),e(wo,nh),M(DA,nh,null),e(nh,$do),e(nh,lne),e(lne,kdo),b(f,iNe,_),b(f,Ei,_),e(Ei,sh),e(sh,ine),M(GA,ine,null),e(Ei,Sdo),e(Ei,dne),e(dne,Rdo),b(f,dNe,_),b(f,Ao,_),M(OA,Ao,null),e(Ao,Pdo),e(Ao,VA),e(VA,Bdo),e(VA,NB),e(NB,Ido),e(VA,qdo),e(Ao,Ndo),e(Ao,XA),e(XA,jdo),e(XA,cne),e(cne,Ddo),e(XA,Gdo),e(Ao,Odo),e(Ao,He),M(zA,He,null),e(He,Vdo),e(He,fne),e(fne,Xdo),e(He,zdo),e(He,ya),e(ya,Wdo),e(ya,mne),e(mne,Qdo),e(ya,Hdo),e(ya,gne),e(gne,Udo),e(ya,Jdo),e(ya,hne),e(hne,Ydo),e(ya,Kdo),e(He,Zdo),e(He,Y),e(Y,lh),e(lh,pne),e(pne,eco),e(lh,oco),e(lh,jB),e(jB,rco),e(lh,tco),e(Y,aco),e(Y,ih),e(ih,une),e(une,nco),e(ih,sco),e(ih,DB),e(DB,lco),e(ih,ico),e(Y,dco),e(Y,dh),e(dh,_ne),e(_ne,cco),e(dh,fco),e(dh,GB),e(GB,mco),e(dh,gco),e(Y,hco),e(Y,ch),e(ch,bne),e(bne,pco),e(ch,uco),e(ch,OB),e(OB,_co),e(ch,bco),e(Y,vco),e(Y,fh),e(fh,vne),e(vne,Fco),e(fh,Tco),e(fh,VB),e(VB,Mco),e(fh,Eco),e(Y,Cco),e(Y,mh),e(mh,Fne),e(Fne,wco),e(mh,Aco),e(mh,XB),e(XB,yco),e(mh,Lco),e(Y,xco),e(Y,gh),e(gh,Tne),e(Tne,$co),e(gh,kco),e(gh,zB),e(zB,Sco),e(gh,Rco),e(Y,Pco),e(Y,hh),e(hh,Mne),e(Mne,Bco),e(hh,Ico),e(hh,WB),e(WB,qco),e(hh,Nco),e(Y,jco),e(Y,ph),e(ph,Ene),e(Ene,Dco),e(ph,Gco),e(ph,QB),e(QB,Oco),e(ph,Vco),e(Y,Xco),e(Y,uh),e(uh,Cne),e(Cne,zco),e(uh,Wco),e(uh,HB),e(HB,Qco),e(uh,Hco),e(Y,Uco),e(Y,_h),e(_h,wne),e(wne,Jco),e(_h,Yco),e(_h,UB),e(UB,Kco),e(_h,Zco),e(Y,efo),e(Y,bh),e(bh,Ane),e(Ane,ofo),e(bh,rfo),e(bh,JB),e(JB,tfo),e(bh,afo),e(Y,nfo),e(Y,vh),e(vh,yne),e(yne,sfo),e(vh,lfo),e(vh,YB),e(YB,ifo),e(vh,dfo),e(Y,cfo),e(Y,Fh),e(Fh,Lne),e(Lne,ffo),e(Fh,mfo),e(Fh,KB),e(KB,gfo),e(Fh,hfo),e(Y,pfo),e(Y,Th),e(Th,xne),e(xne,ufo),e(Th,_fo),e(Th,ZB),e(ZB,bfo),e(Th,vfo),e(Y,Ffo),e(Y,Mh),e(Mh,$ne),e($ne,Tfo),e(Mh,Mfo),e(Mh,eI),e(eI,Efo),e(Mh,Cfo),e(Y,wfo),e(Y,Eh),e(Eh,kne),e(kne,Afo),e(Eh,yfo),e(Eh,oI),e(oI,Lfo),e(Eh,xfo),e(Y,$fo),e(Y,Ch),e(Ch,Sne),e(Sne,kfo),e(Ch,Sfo),e(Ch,rI),e(rI,Rfo),e(Ch,Pfo),e(Y,Bfo),e(Y,wh),e(wh,Rne),e(Rne,Ifo),e(wh,qfo),e(wh,tI),e(tI,Nfo),e(wh,jfo),e(Y,Dfo),e(Y,Ah),e(Ah,Pne),e(Pne,Gfo),e(Ah,Ofo),e(Ah,aI),e(aI,Vfo),e(Ah,Xfo),e(Y,zfo),e(Y,yh),e(yh,Bne),e(Bne,Wfo),e(yh,Qfo),e(yh,nI),e(nI,Hfo),e(yh,Ufo),e(Y,Jfo),e(Y,Lh),e(Lh,Ine),e(Ine,Yfo),e(Lh,Kfo),e(Lh,sI),e(sI,Zfo),e(Lh,emo),e(Y,omo),e(Y,xh),e(xh,qne),e(qne,rmo),e(xh,tmo),e(xh,lI),e(lI,amo),e(xh,nmo),e(Y,smo),e(Y,$h),e($h,Nne),e(Nne,lmo),e($h,imo),e($h,iI),e(iI,dmo),e($h,cmo),e(Y,fmo),e(Y,kh),e(kh,jne),e(jne,mmo),e(kh,gmo),e(kh,dI),e(dI,hmo),e(kh,pmo),e(Y,umo),e(Y,Sh),e(Sh,Dne),e(Dne,_mo),e(Sh,bmo),e(Sh,cI),e(cI,vmo),e(Sh,Fmo),e(Y,Tmo),e(Y,Rh),e(Rh,Gne),e(Gne,Mmo),e(Rh,Emo),e(Rh,fI),e(fI,Cmo),e(Rh,wmo),e(Y,Amo),e(Y,Ph),e(Ph,One),e(One,ymo),e(Ph,Lmo),e(Ph,mI),e(mI,xmo),e(Ph,$mo),e(Y,kmo),e(Y,Bh),e(Bh,Vne),e(Vne,Smo),e(Bh,Rmo),e(Bh,gI),e(gI,Pmo),e(Bh,Bmo),e(He,Imo),M(Ih,He,null),e(He,qmo),M(qh,He,null),e(Ao,Nmo),e(Ao,Nh),M(WA,Nh,null),e(Nh,jmo),e(Nh,Xne),e(Xne,Dmo),b(f,cNe,_),b(f,Ci,_),e(Ci,jh),e(jh,zne),M(QA,zne,null),e(Ci,Gmo),e(Ci,Wne),e(Wne,Omo),b(f,fNe,_),b(f,yo,_),M(HA,yo,null),e(yo,Vmo),e(yo,UA),e(UA,Xmo),e(UA,hI),e(hI,zmo),e(UA,Wmo),e(yo,Qmo),e(yo,JA),e(JA,Hmo),e(JA,Qne),e(Qne,Umo),e(JA,Jmo),e(yo,Ymo),e(yo,Ue),M(YA,Ue,null),e(Ue,Kmo),e(Ue,Hne),e(Hne,Zmo),e(Ue,ego),e(Ue,wi),e(wi,ogo),e(wi,Une),e(Une,rgo),e(wi,tgo),e(wi,Jne),e(Jne,ago),e(wi,ngo),e(Ue,sgo),e(Ue,he),e(he,Dh),e(Dh,Yne),e(Yne,lgo),e(Dh,igo),e(Dh,pI),e(pI,dgo),e(Dh,cgo),e(he,fgo),e(he,Gh),e(Gh,Kne),e(Kne,mgo),e(Gh,ggo),e(Gh,Zne),e(Zne,hgo),e(Gh,pgo),e(he,ugo),e(he,Oh),e(Oh,ese),e(ese,_go),e(Oh,bgo),e(Oh,uI),e(uI,vgo),e(Oh,Fgo),e(he,Tgo),e(he,Vh),e(Vh,ose),e(ose,Mgo),e(Vh,Ego),e(Vh,_I),e(_I,Cgo),e(Vh,wgo),e(he,Ago),e(he,Xh),e(Xh,rse),e(rse,ygo),e(Xh,Lgo),e(Xh,bI),e(bI,xgo),e(Xh,$go),e(he,kgo),e(he,zh),e(zh,tse),e(tse,Sgo),e(zh,Rgo),e(zh,vI),e(vI,Pgo),e(zh,Bgo),e(he,Igo),e(he,Wh),e(Wh,ase),e(ase,qgo),e(Wh,Ngo),e(Wh,FI),e(FI,jgo),e(Wh,Dgo),e(he,Ggo),e(he,Qh),e(Qh,nse),e(nse,Ogo),e(Qh,Vgo),e(Qh,TI),e(TI,Xgo),e(Qh,zgo),e(he,Wgo),e(he,Hh),e(Hh,sse),e(sse,Qgo),e(Hh,Hgo),e(Hh,MI),e(MI,Ugo),e(Hh,Jgo),e(he,Ygo),e(he,Uh),e(Uh,lse),e(lse,Kgo),e(Uh,Zgo),e(Uh,EI),e(EI,eho),e(Uh,oho),e(he,rho),e(he,Jh),e(Jh,ise),e(ise,tho),e(Jh,aho),e(Jh,CI),e(CI,nho),e(Jh,sho),e(he,lho),e(he,Yh),e(Yh,dse),e(dse,iho),e(Yh,dho),e(Yh,wI),e(wI,cho),e(Yh,fho),e(he,mho),e(he,Kh),e(Kh,cse),e(cse,gho),e(Kh,hho),e(Kh,AI),e(AI,pho),e(Kh,uho),e(he,_ho),e(he,Zh),e(Zh,fse),e(fse,bho),e(Zh,vho),e(Zh,yI),e(yI,Fho),e(Zh,Tho),e(he,Mho),e(he,ep),e(ep,mse),e(mse,Eho),e(ep,Cho),e(ep,LI),e(LI,who),e(ep,Aho),e(he,yho),e(he,op),e(op,gse),e(gse,Lho),e(op,xho),e(op,xI),e(xI,$ho),e(op,kho),e(he,Sho),e(he,rp),e(rp,hse),e(hse,Rho),e(rp,Pho),e(rp,$I),e($I,Bho),e(rp,Iho),e(Ue,qho),M(tp,Ue,null),e(Ue,Nho),M(ap,Ue,null),e(yo,jho),e(yo,np),M(KA,np,null),e(np,Dho),e(np,pse),e(pse,Gho),b(f,mNe,_),b(f,Ai,_),e(Ai,sp),e(sp,use),M(ZA,use,null),e(Ai,Oho),e(Ai,_se),e(_se,Vho),b(f,gNe,_),b(f,Lo,_),M(ey,Lo,null),e(Lo,Xho),e(Lo,yi),e(yi,zho),e(yi,kI),e(kI,Who),e(yi,Qho),e(yi,SI),e(SI,Hho),e(yi,Uho),e(Lo,Jho),e(Lo,oy),e(oy,Yho),e(oy,bse),e(bse,Kho),e(oy,Zho),e(Lo,epo),e(Lo,tt),M(ry,tt,null),e(tt,opo),e(tt,vse),e(vse,rpo),e(tt,tpo),e(tt,Li),e(Li,apo),e(Li,Fse),e(Fse,npo),e(Li,spo),e(Li,RI),e(RI,lpo),e(Li,ipo),e(tt,dpo),M(lp,tt,null),e(Lo,cpo),e(Lo,Je),M(ty,Je,null),e(Je,fpo),e(Je,Tse),e(Tse,mpo),e(Je,gpo),e(Je,La),e(La,hpo),e(La,Mse),e(Mse,ppo),e(La,upo),e(La,Ese),e(Ese,_po),e(La,bpo),e(La,Cse),e(Cse,vpo),e(La,Fpo),e(Je,Tpo),e(Je,x),e(x,ip),e(ip,wse),e(wse,Mpo),e(ip,Epo),e(ip,PI),e(PI,Cpo),e(ip,wpo),e(x,Apo),e(x,dp),e(dp,Ase),e(Ase,ypo),e(dp,Lpo),e(dp,BI),e(BI,xpo),e(dp,$po),e(x,kpo),e(x,cp),e(cp,yse),e(yse,Spo),e(cp,Rpo),e(cp,II),e(II,Ppo),e(cp,Bpo),e(x,Ipo),e(x,fp),e(fp,Lse),e(Lse,qpo),e(fp,Npo),e(fp,qI),e(qI,jpo),e(fp,Dpo),e(x,Gpo),e(x,mp),e(mp,xse),e(xse,Opo),e(mp,Vpo),e(mp,NI),e(NI,Xpo),e(mp,zpo),e(x,Wpo),e(x,gp),e(gp,$se),e($se,Qpo),e(gp,Hpo),e(gp,jI),e(jI,Upo),e(gp,Jpo),e(x,Ypo),e(x,hp),e(hp,kse),e(kse,Kpo),e(hp,Zpo),e(hp,DI),e(DI,euo),e(hp,ouo),e(x,ruo),e(x,pp),e(pp,Sse),e(Sse,tuo),e(pp,auo),e(pp,GI),e(GI,nuo),e(pp,suo),e(x,luo),e(x,up),e(up,Rse),e(Rse,iuo),e(up,duo),e(up,OI),e(OI,cuo),e(up,fuo),e(x,muo),e(x,_p),e(_p,Pse),e(Pse,guo),e(_p,huo),e(_p,VI),e(VI,puo),e(_p,uuo),e(x,_uo),e(x,bp),e(bp,Bse),e(Bse,buo),e(bp,vuo),e(bp,XI),e(XI,Fuo),e(bp,Tuo),e(x,Muo),e(x,vp),e(vp,Ise),e(Ise,Euo),e(vp,Cuo),e(vp,zI),e(zI,wuo),e(vp,Auo),e(x,yuo),e(x,Fp),e(Fp,qse),e(qse,Luo),e(Fp,xuo),e(Fp,WI),e(WI,$uo),e(Fp,kuo),e(x,Suo),e(x,Tp),e(Tp,Nse),e(Nse,Ruo),e(Tp,Puo),e(Tp,QI),e(QI,Buo),e(Tp,Iuo),e(x,quo),e(x,Mp),e(Mp,jse),e(jse,Nuo),e(Mp,juo),e(Mp,HI),e(HI,Duo),e(Mp,Guo),e(x,Ouo),e(x,Ep),e(Ep,Dse),e(Dse,Vuo),e(Ep,Xuo),e(Ep,UI),e(UI,zuo),e(Ep,Wuo),e(x,Quo),e(x,Cp),e(Cp,Gse),e(Gse,Huo),e(Cp,Uuo),e(Cp,JI),e(JI,Juo),e(Cp,Yuo),e(x,Kuo),e(x,wp),e(wp,Ose),e(Ose,Zuo),e(wp,e_o),e(wp,YI),e(YI,o_o),e(wp,r_o),e(x,t_o),e(x,Ap),e(Ap,Vse),e(Vse,a_o),e(Ap,n_o),e(Ap,KI),e(KI,s_o),e(Ap,l_o),e(x,i_o),e(x,yp),e(yp,Xse),e(Xse,d_o),e(yp,c_o),e(yp,ZI),e(ZI,f_o),e(yp,m_o),e(x,g_o),e(x,Lp),e(Lp,zse),e(zse,h_o),e(Lp,p_o),e(Lp,eq),e(eq,u_o),e(Lp,__o),e(x,b_o),e(x,xp),e(xp,Wse),e(Wse,v_o),e(xp,F_o),e(xp,oq),e(oq,T_o),e(xp,M_o),e(x,E_o),e(x,$p),e($p,Qse),e(Qse,C_o),e($p,w_o),e($p,rq),e(rq,A_o),e($p,y_o),e(x,L_o),e(x,kp),e(kp,Hse),e(Hse,x_o),e(kp,$_o),e(kp,tq),e(tq,k_o),e(kp,S_o),e(x,R_o),e(x,Sp),e(Sp,Use),e(Use,P_o),e(Sp,B_o),e(Sp,aq),e(aq,I_o),e(Sp,q_o),e(x,N_o),e(x,Rp),e(Rp,Jse),e(Jse,j_o),e(Rp,D_o),e(Rp,nq),e(nq,G_o),e(Rp,O_o),e(x,V_o),e(x,Pp),e(Pp,Yse),e(Yse,X_o),e(Pp,z_o),e(Pp,sq),e(sq,W_o),e(Pp,Q_o),e(x,H_o),e(x,Bp),e(Bp,Kse),e(Kse,U_o),e(Bp,J_o),e(Bp,lq),e(lq,Y_o),e(Bp,K_o),e(x,Z_o),e(x,Ip),e(Ip,Zse),e(Zse,e2o),e(Ip,o2o),e(Ip,iq),e(iq,r2o),e(Ip,t2o),e(x,a2o),e(x,qp),e(qp,ele),e(ele,n2o),e(qp,s2o),e(qp,dq),e(dq,l2o),e(qp,i2o),e(x,d2o),e(x,Np),e(Np,ole),e(ole,c2o),e(Np,f2o),e(Np,cq),e(cq,m2o),e(Np,g2o),e(x,h2o),e(x,jp),e(jp,rle),e(rle,p2o),e(jp,u2o),e(jp,fq),e(fq,_2o),e(jp,b2o),e(x,v2o),e(x,Bs),e(Bs,tle),e(tle,F2o),e(Bs,T2o),e(Bs,mq),e(mq,M2o),e(Bs,E2o),e(Bs,gq),e(gq,C2o),e(Bs,w2o),e(x,A2o),e(x,Dp),e(Dp,ale),e(ale,y2o),e(Dp,L2o),e(Dp,hq),e(hq,x2o),e(Dp,$2o),e(x,k2o),e(x,Gp),e(Gp,nle),e(nle,S2o),e(Gp,R2o),e(Gp,pq),e(pq,P2o),e(Gp,B2o),e(x,I2o),e(x,Op),e(Op,sle),e(sle,q2o),e(Op,N2o),e(Op,uq),e(uq,j2o),e(Op,D2o),e(x,G2o),e(x,Vp),e(Vp,lle),e(lle,O2o),e(Vp,V2o),e(Vp,_q),e(_q,X2o),e(Vp,z2o),e(x,W2o),e(x,Xp),e(Xp,ile),e(ile,Q2o),e(Xp,H2o),e(Xp,bq),e(bq,U2o),e(Xp,J2o),e(x,Y2o),e(x,zp),e(zp,dle),e(dle,K2o),e(zp,Z2o),e(zp,vq),e(vq,e1o),e(zp,o1o),e(x,r1o),e(x,Wp),e(Wp,cle),e(cle,t1o),e(Wp,a1o),e(Wp,Fq),e(Fq,n1o),e(Wp,s1o),e(x,l1o),e(x,Qp),e(Qp,fle),e(fle,i1o),e(Qp,d1o),e(Qp,Tq),e(Tq,c1o),e(Qp,f1o),e(x,m1o),e(x,Hp),e(Hp,mle),e(mle,g1o),e(Hp,h1o),e(Hp,Mq),e(Mq,p1o),e(Hp,u1o),e(x,_1o),e(x,Up),e(Up,gle),e(gle,b1o),e(Up,v1o),e(Up,Eq),e(Eq,F1o),e(Up,T1o),e(x,M1o),e(x,Jp),e(Jp,hle),e(hle,E1o),e(Jp,C1o),e(Jp,Cq),e(Cq,w1o),e(Jp,A1o),e(x,y1o),e(x,Yp),e(Yp,ple),e(ple,L1o),e(Yp,x1o),e(Yp,wq),e(wq,$1o),e(Yp,k1o),e(x,S1o),e(x,Kp),e(Kp,ule),e(ule,R1o),e(Kp,P1o),e(Kp,Aq),e(Aq,B1o),e(Kp,I1o),e(x,q1o),e(x,Zp),e(Zp,_le),e(_le,N1o),e(Zp,j1o),e(Zp,yq),e(yq,D1o),e(Zp,G1o),e(x,O1o),e(x,eu),e(eu,ble),e(ble,V1o),e(eu,X1o),e(eu,Lq),e(Lq,z1o),e(eu,W1o),e(x,Q1o),e(x,ou),e(ou,vle),e(vle,H1o),e(ou,U1o),e(ou,xq),e(xq,J1o),e(ou,Y1o),e(x,K1o),e(x,ru),e(ru,Fle),e(Fle,Z1o),e(ru,ebo),e(ru,$q),e($q,obo),e(ru,rbo),e(x,tbo),e(x,tu),e(tu,Tle),e(Tle,abo),e(tu,nbo),e(tu,kq),e(kq,sbo),e(tu,lbo),e(x,ibo),e(x,au),e(au,Mle),e(Mle,dbo),e(au,cbo),e(au,Sq),e(Sq,fbo),e(au,mbo),e(x,gbo),e(x,nu),e(nu,Ele),e(Ele,hbo),e(nu,pbo),e(nu,Rq),e(Rq,ubo),e(nu,_bo),e(x,bbo),e(x,su),e(su,Cle),e(Cle,vbo),e(su,Fbo),e(su,Pq),e(Pq,Tbo),e(su,Mbo),e(x,Ebo),e(x,lu),e(lu,wle),e(wle,Cbo),e(lu,wbo),e(lu,Bq),e(Bq,Abo),e(lu,ybo),e(x,Lbo),e(x,iu),e(iu,Ale),e(Ale,xbo),e(iu,$bo),e(iu,Iq),e(Iq,kbo),e(iu,Sbo),e(x,Rbo),e(x,du),e(du,yle),e(yle,Pbo),e(du,Bbo),e(du,qq),e(qq,Ibo),e(du,qbo),e(x,Nbo),e(x,cu),e(cu,Lle),e(Lle,jbo),e(cu,Dbo),e(cu,Nq),e(Nq,Gbo),e(cu,Obo),e(x,Vbo),e(x,fu),e(fu,xle),e(xle,Xbo),e(fu,zbo),e(fu,jq),e(jq,Wbo),e(fu,Qbo),e(x,Hbo),e(x,mu),e(mu,$le),e($le,Ubo),e(mu,Jbo),e(mu,Dq),e(Dq,Ybo),e(mu,Kbo),e(x,Zbo),e(x,gu),e(gu,kle),e(kle,e4o),e(gu,o4o),e(gu,Gq),e(Gq,r4o),e(gu,t4o),e(x,a4o),e(x,hu),e(hu,Sle),e(Sle,n4o),e(hu,s4o),e(hu,Oq),e(Oq,l4o),e(hu,i4o),e(x,d4o),e(x,pu),e(pu,Rle),e(Rle,c4o),e(pu,f4o),e(pu,Vq),e(Vq,m4o),e(pu,g4o),e(x,h4o),e(x,uu),e(uu,Ple),e(Ple,p4o),e(uu,u4o),e(uu,Xq),e(Xq,_4o),e(uu,b4o),e(x,v4o),e(x,_u),e(_u,Ble),e(Ble,F4o),e(_u,T4o),e(_u,zq),e(zq,M4o),e(_u,E4o),e(x,C4o),e(x,bu),e(bu,Ile),e(Ile,w4o),e(bu,A4o),e(bu,Wq),e(Wq,y4o),e(bu,L4o),e(x,x4o),e(x,vu),e(vu,qle),e(qle,$4o),e(vu,k4o),e(vu,Qq),e(Qq,S4o),e(vu,R4o),e(x,P4o),e(x,Fu),e(Fu,Nle),e(Nle,B4o),e(Fu,I4o),e(Fu,Hq),e(Hq,q4o),e(Fu,N4o),e(x,j4o),e(x,Tu),e(Tu,jle),e(jle,D4o),e(Tu,G4o),e(Tu,Uq),e(Uq,O4o),e(Tu,V4o),e(x,X4o),e(x,Mu),e(Mu,Dle),e(Dle,z4o),e(Mu,W4o),e(Mu,Jq),e(Jq,Q4o),e(Mu,H4o),e(x,U4o),e(x,Eu),e(Eu,Gle),e(Gle,J4o),e(Eu,Y4o),e(Eu,Yq),e(Yq,K4o),e(Eu,Z4o),e(x,evo),e(x,Cu),e(Cu,Ole),e(Ole,ovo),e(Cu,rvo),e(Cu,Kq),e(Kq,tvo),e(Cu,avo),e(x,nvo),e(x,wu),e(wu,Vle),e(Vle,svo),e(wu,lvo),e(wu,Zq),e(Zq,ivo),e(wu,dvo),e(x,cvo),e(x,Au),e(Au,Xle),e(Xle,fvo),e(Au,mvo),e(Au,eN),e(eN,gvo),e(Au,hvo),e(x,pvo),e(x,yu),e(yu,zle),e(zle,uvo),e(yu,_vo),e(yu,oN),e(oN,bvo),e(yu,vvo),e(x,Fvo),e(x,Lu),e(Lu,Wle),e(Wle,Tvo),e(Lu,Mvo),e(Lu,rN),e(rN,Evo),e(Lu,Cvo),e(x,wvo),e(x,xu),e(xu,Qle),e(Qle,Avo),e(xu,yvo),e(xu,tN),e(tN,Lvo),e(xu,xvo),e(x,$vo),e(x,$u),e($u,Hle),e(Hle,kvo),e($u,Svo),e($u,aN),e(aN,Rvo),e($u,Pvo),e(x,Bvo),e(x,ku),e(ku,Ule),e(Ule,Ivo),e(ku,qvo),e(ku,nN),e(nN,Nvo),e(ku,jvo),e(x,Dvo),e(x,Su),e(Su,Jle),e(Jle,Gvo),e(Su,Ovo),e(Su,sN),e(sN,Vvo),e(Su,Xvo),e(x,zvo),e(x,Ru),e(Ru,Yle),e(Yle,Wvo),e(Ru,Qvo),e(Ru,lN),e(lN,Hvo),e(Ru,Uvo),e(x,Jvo),e(x,Pu),e(Pu,Kle),e(Kle,Yvo),e(Pu,Kvo),e(Pu,iN),e(iN,Zvo),e(Pu,e5o),e(x,o5o),e(x,Bu),e(Bu,Zle),e(Zle,r5o),e(Bu,t5o),e(Bu,dN),e(dN,a5o),e(Bu,n5o),e(x,s5o),e(x,Iu),e(Iu,eie),e(eie,l5o),e(Iu,i5o),e(Iu,cN),e(cN,d5o),e(Iu,c5o),e(x,f5o),e(x,qu),e(qu,oie),e(oie,m5o),e(qu,g5o),e(qu,fN),e(fN,h5o),e(qu,p5o),e(x,u5o),e(x,Nu),e(Nu,rie),e(rie,_5o),e(Nu,b5o),e(Nu,mN),e(mN,v5o),e(Nu,F5o),e(x,T5o),e(x,ju),e(ju,tie),e(tie,M5o),e(ju,E5o),e(ju,gN),e(gN,C5o),e(ju,w5o),e(x,A5o),e(x,Du),e(Du,aie),e(aie,y5o),e(Du,L5o),e(Du,hN),e(hN,x5o),e(Du,$5o),e(x,k5o),e(x,Gu),e(Gu,nie),e(nie,S5o),e(Gu,R5o),e(Gu,pN),e(pN,P5o),e(Gu,B5o),e(x,I5o),e(x,Ou),e(Ou,sie),e(sie,q5o),e(Ou,N5o),e(Ou,uN),e(uN,j5o),e(Ou,D5o),e(x,G5o),e(x,Vu),e(Vu,lie),e(lie,O5o),e(Vu,V5o),e(Vu,_N),e(_N,X5o),e(Vu,z5o),e(x,W5o),e(x,Xu),e(Xu,iie),e(iie,Q5o),e(Xu,H5o),e(Xu,bN),e(bN,U5o),e(Xu,J5o),e(x,Y5o),e(x,zu),e(zu,die),e(die,K5o),e(zu,Z5o),e(zu,vN),e(vN,eFo),e(zu,oFo),e(x,rFo),e(x,Wu),e(Wu,cie),e(cie,tFo),e(Wu,aFo),e(Wu,FN),e(FN,nFo),e(Wu,sFo),e(x,lFo),e(x,Qu),e(Qu,fie),e(fie,iFo),e(Qu,dFo),e(Qu,TN),e(TN,cFo),e(Qu,fFo),e(x,mFo),e(x,Hu),e(Hu,mie),e(mie,gFo),e(Hu,hFo),e(Hu,MN),e(MN,pFo),e(Hu,uFo),e(x,_Fo),e(x,Uu),e(Uu,gie),e(gie,bFo),e(Uu,vFo),e(Uu,EN),e(EN,FFo),e(Uu,TFo),e(x,MFo),e(x,Ju),e(Ju,hie),e(hie,EFo),e(Ju,CFo),e(Ju,CN),e(CN,wFo),e(Ju,AFo),e(x,yFo),e(x,Yu),e(Yu,pie),e(pie,LFo),e(Yu,xFo),e(Yu,wN),e(wN,$Fo),e(Yu,kFo),e(x,SFo),e(x,Ku),e(Ku,uie),e(uie,RFo),e(Ku,PFo),e(Ku,AN),e(AN,BFo),e(Ku,IFo),e(x,qFo),e(x,Zu),e(Zu,_ie),e(_ie,NFo),e(Zu,jFo),e(Zu,yN),e(yN,DFo),e(Zu,GFo),e(x,OFo),e(x,e_),e(e_,bie),e(bie,VFo),e(e_,XFo),e(e_,LN),e(LN,zFo),e(e_,WFo),e(Je,QFo),e(Je,o_),e(o_,HFo),e(o_,vie),e(vie,UFo),e(o_,JFo),e(o_,Fie),e(Fie,YFo),e(Je,KFo),M(r_,Je,null),b(f,hNe,_),b(f,xi,_),e(xi,t_),e(t_,Tie),M(ay,Tie,null),e(xi,ZFo),e(xi,Mie),e(Mie,eTo),b(f,pNe,_),b(f,xo,_),M(ny,xo,null),e(xo,oTo),e(xo,$i),e($i,rTo),e($i,xN),e(xN,tTo),e($i,aTo),e($i,$N),e($N,nTo),e($i,sTo),e(xo,lTo),e(xo,sy),e(sy,iTo),e(sy,Eie),e(Eie,dTo),e(sy,cTo),e(xo,fTo),e(xo,at),M(ly,at,null),e(at,mTo),e(at,Cie),e(Cie,gTo),e(at,hTo),e(at,ki),e(ki,pTo),e(ki,wie),e(wie,uTo),e(ki,_To),e(ki,kN),e(kN,bTo),e(ki,vTo),e(at,FTo),M(a_,at,null),e(xo,TTo),e(xo,Ye),M(iy,Ye,null),e(Ye,MTo),e(Ye,Aie),e(Aie,ETo),e(Ye,CTo),e(Ye,xa),e(xa,wTo),e(xa,yie),e(yie,ATo),e(xa,yTo),e(xa,Lie),e(Lie,LTo),e(xa,xTo),e(xa,xie),e(xie,$To),e(xa,kTo),e(Ye,STo),e(Ye,G),e(G,n_),e(n_,$ie),e($ie,RTo),e(n_,PTo),e(n_,SN),e(SN,BTo),e(n_,ITo),e(G,qTo),e(G,s_),e(s_,kie),e(kie,NTo),e(s_,jTo),e(s_,RN),e(RN,DTo),e(s_,GTo),e(G,OTo),e(G,l_),e(l_,Sie),e(Sie,VTo),e(l_,XTo),e(l_,PN),e(PN,zTo),e(l_,WTo),e(G,QTo),e(G,i_),e(i_,Rie),e(Rie,HTo),e(i_,UTo),e(i_,BN),e(BN,JTo),e(i_,YTo),e(G,KTo),e(G,d_),e(d_,Pie),e(Pie,ZTo),e(d_,e7o),e(d_,IN),e(IN,o7o),e(d_,r7o),e(G,t7o),e(G,c_),e(c_,Bie),e(Bie,a7o),e(c_,n7o),e(c_,qN),e(qN,s7o),e(c_,l7o),e(G,i7o),e(G,f_),e(f_,Iie),e(Iie,d7o),e(f_,c7o),e(f_,NN),e(NN,f7o),e(f_,m7o),e(G,g7o),e(G,m_),e(m_,qie),e(qie,h7o),e(m_,p7o),e(m_,jN),e(jN,u7o),e(m_,_7o),e(G,b7o),e(G,g_),e(g_,Nie),e(Nie,v7o),e(g_,F7o),e(g_,DN),e(DN,T7o),e(g_,M7o),e(G,E7o),e(G,h_),e(h_,jie),e(jie,C7o),e(h_,w7o),e(h_,GN),e(GN,A7o),e(h_,y7o),e(G,L7o),e(G,p_),e(p_,Die),e(Die,x7o),e(p_,$7o),e(p_,ON),e(ON,k7o),e(p_,S7o),e(G,R7o),e(G,u_),e(u_,Gie),e(Gie,P7o),e(u_,B7o),e(u_,VN),e(VN,I7o),e(u_,q7o),e(G,N7o),e(G,__),e(__,Oie),e(Oie,j7o),e(__,D7o),e(__,XN),e(XN,G7o),e(__,O7o),e(G,V7o),e(G,b_),e(b_,Vie),e(Vie,X7o),e(b_,z7o),e(b_,zN),e(zN,W7o),e(b_,Q7o),e(G,H7o),e(G,v_),e(v_,Xie),e(Xie,U7o),e(v_,J7o),e(v_,WN),e(WN,Y7o),e(v_,K7o),e(G,Z7o),e(G,F_),e(F_,zie),e(zie,eMo),e(F_,oMo),e(F_,QN),e(QN,rMo),e(F_,tMo),e(G,aMo),e(G,T_),e(T_,Wie),e(Wie,nMo),e(T_,sMo),e(T_,HN),e(HN,lMo),e(T_,iMo),e(G,dMo),e(G,M_),e(M_,Qie),e(Qie,cMo),e(M_,fMo),e(M_,UN),e(UN,mMo),e(M_,gMo),e(G,hMo),e(G,E_),e(E_,Hie),e(Hie,pMo),e(E_,uMo),e(E_,JN),e(JN,_Mo),e(E_,bMo),e(G,vMo),e(G,C_),e(C_,Uie),e(Uie,FMo),e(C_,TMo),e(C_,YN),e(YN,MMo),e(C_,EMo),e(G,CMo),e(G,w_),e(w_,Jie),e(Jie,wMo),e(w_,AMo),e(w_,KN),e(KN,yMo),e(w_,LMo),e(G,xMo),e(G,A_),e(A_,Yie),e(Yie,$Mo),e(A_,kMo),e(A_,ZN),e(ZN,SMo),e(A_,RMo),e(G,PMo),e(G,y_),e(y_,Kie),e(Kie,BMo),e(y_,IMo),e(y_,ej),e(ej,qMo),e(y_,NMo),e(G,jMo),e(G,L_),e(L_,Zie),e(Zie,DMo),e(L_,GMo),e(L_,oj),e(oj,OMo),e(L_,VMo),e(G,XMo),e(G,x_),e(x_,ede),e(ede,zMo),e(x_,WMo),e(x_,rj),e(rj,QMo),e(x_,HMo),e(G,UMo),e(G,$_),e($_,ode),e(ode,JMo),e($_,YMo),e($_,tj),e(tj,KMo),e($_,ZMo),e(G,eEo),e(G,k_),e(k_,rde),e(rde,oEo),e(k_,rEo),e(k_,aj),e(aj,tEo),e(k_,aEo),e(G,nEo),e(G,S_),e(S_,tde),e(tde,sEo),e(S_,lEo),e(S_,nj),e(nj,iEo),e(S_,dEo),e(G,cEo),e(G,R_),e(R_,ade),e(ade,fEo),e(R_,mEo),e(R_,sj),e(sj,gEo),e(R_,hEo),e(G,pEo),e(G,P_),e(P_,nde),e(nde,uEo),e(P_,_Eo),e(P_,lj),e(lj,bEo),e(P_,vEo),e(G,FEo),e(G,B_),e(B_,sde),e(sde,TEo),e(B_,MEo),e(B_,ij),e(ij,EEo),e(B_,CEo),e(G,wEo),e(G,I_),e(I_,lde),e(lde,AEo),e(I_,yEo),e(I_,dj),e(dj,LEo),e(I_,xEo),e(G,$Eo),e(G,q_),e(q_,ide),e(ide,kEo),e(q_,SEo),e(q_,cj),e(cj,REo),e(q_,PEo),e(G,BEo),e(G,N_),e(N_,dde),e(dde,IEo),e(N_,qEo),e(N_,fj),e(fj,NEo),e(N_,jEo),e(G,DEo),e(G,j_),e(j_,cde),e(cde,GEo),e(j_,OEo),e(j_,mj),e(mj,VEo),e(j_,XEo),e(G,zEo),e(G,D_),e(D_,fde),e(fde,WEo),e(D_,QEo),e(D_,gj),e(gj,HEo),e(D_,UEo),e(G,JEo),e(G,G_),e(G_,mde),e(mde,YEo),e(G_,KEo),e(G_,hj),e(hj,ZEo),e(G_,eCo),e(G,oCo),e(G,O_),e(O_,gde),e(gde,rCo),e(O_,tCo),e(O_,pj),e(pj,aCo),e(O_,nCo),e(G,sCo),e(G,V_),e(V_,hde),e(hde,lCo),e(V_,iCo),e(V_,uj),e(uj,dCo),e(V_,cCo),e(G,fCo),e(G,X_),e(X_,pde),e(pde,mCo),e(X_,gCo),e(X_,_j),e(_j,hCo),e(X_,pCo),e(G,uCo),e(G,z_),e(z_,ude),e(ude,_Co),e(z_,bCo),e(z_,bj),e(bj,vCo),e(z_,FCo),e(G,TCo),e(G,W_),e(W_,_de),e(_de,MCo),e(W_,ECo),e(W_,vj),e(vj,CCo),e(W_,wCo),e(Ye,ACo),e(Ye,Q_),e(Q_,yCo),e(Q_,bde),e(bde,LCo),e(Q_,xCo),e(Q_,vde),e(vde,$Co),e(Ye,kCo),M(H_,Ye,null),b(f,uNe,_),b(f,Si,_),e(Si,U_),e(U_,Fde),M(dy,Fde,null),e(Si,SCo),e(Si,Tde),e(Tde,RCo),b(f,_Ne,_),b(f,$o,_),M(cy,$o,null),e($o,PCo),e($o,Ri),e(Ri,BCo),e(Ri,Fj),e(Fj,ICo),e(Ri,qCo),e(Ri,Tj),e(Tj,NCo),e(Ri,jCo),e($o,DCo),e($o,fy),e(fy,GCo),e(fy,Mde),e(Mde,OCo),e(fy,VCo),e($o,XCo),e($o,nt),M(my,nt,null),e(nt,zCo),e(nt,Ede),e(Ede,WCo),e(nt,QCo),e(nt,Pi),e(Pi,HCo),e(Pi,Cde),e(Cde,UCo),e(Pi,JCo),e(Pi,Mj),e(Mj,YCo),e(Pi,KCo),e(nt,ZCo),M(J_,nt,null),e($o,e3o),e($o,Ke),M(gy,Ke,null),e(Ke,o3o),e(Ke,wde),e(wde,r3o),e(Ke,t3o),e(Ke,$a),e($a,a3o),e($a,Ade),e(Ade,n3o),e($a,s3o),e($a,yde),e(yde,l3o),e($a,i3o),e($a,Lde),e(Lde,d3o),e($a,c3o),e(Ke,f3o),e(Ke,z),e(z,Y_),e(Y_,xde),e(xde,m3o),e(Y_,g3o),e(Y_,Ej),e(Ej,h3o),e(Y_,p3o),e(z,u3o),e(z,K_),e(K_,$de),e($de,_3o),e(K_,b3o),e(K_,Cj),e(Cj,v3o),e(K_,F3o),e(z,T3o),e(z,Z_),e(Z_,kde),e(kde,M3o),e(Z_,E3o),e(Z_,wj),e(wj,C3o),e(Z_,w3o),e(z,A3o),e(z,e2),e(e2,Sde),e(Sde,y3o),e(e2,L3o),e(e2,Aj),e(Aj,x3o),e(e2,$3o),e(z,k3o),e(z,o2),e(o2,Rde),e(Rde,S3o),e(o2,R3o),e(o2,yj),e(yj,P3o),e(o2,B3o),e(z,I3o),e(z,r2),e(r2,Pde),e(Pde,q3o),e(r2,N3o),e(r2,Lj),e(Lj,j3o),e(r2,D3o),e(z,G3o),e(z,t2),e(t2,Bde),e(Bde,O3o),e(t2,V3o),e(t2,xj),e(xj,X3o),e(t2,z3o),e(z,W3o),e(z,a2),e(a2,Ide),e(Ide,Q3o),e(a2,H3o),e(a2,$j),e($j,U3o),e(a2,J3o),e(z,Y3o),e(z,n2),e(n2,qde),e(qde,K3o),e(n2,Z3o),e(n2,kj),e(kj,ewo),e(n2,owo),e(z,rwo),e(z,s2),e(s2,Nde),e(Nde,two),e(s2,awo),e(s2,Sj),e(Sj,nwo),e(s2,swo),e(z,lwo),e(z,l2),e(l2,jde),e(jde,iwo),e(l2,dwo),e(l2,Rj),e(Rj,cwo),e(l2,fwo),e(z,mwo),e(z,i2),e(i2,Dde),e(Dde,gwo),e(i2,hwo),e(i2,Pj),e(Pj,pwo),e(i2,uwo),e(z,_wo),e(z,d2),e(d2,Gde),e(Gde,bwo),e(d2,vwo),e(d2,Bj),e(Bj,Fwo),e(d2,Two),e(z,Mwo),e(z,c2),e(c2,Ode),e(Ode,Ewo),e(c2,Cwo),e(c2,Ij),e(Ij,wwo),e(c2,Awo),e(z,ywo),e(z,f2),e(f2,Vde),e(Vde,Lwo),e(f2,xwo),e(f2,qj),e(qj,$wo),e(f2,kwo),e(z,Swo),e(z,m2),e(m2,Xde),e(Xde,Rwo),e(m2,Pwo),e(m2,Nj),e(Nj,Bwo),e(m2,Iwo),e(z,qwo),e(z,g2),e(g2,zde),e(zde,Nwo),e(g2,jwo),e(g2,jj),e(jj,Dwo),e(g2,Gwo),e(z,Owo),e(z,h2),e(h2,Wde),e(Wde,Vwo),e(h2,Xwo),e(h2,Dj),e(Dj,zwo),e(h2,Wwo),e(z,Qwo),e(z,p2),e(p2,Qde),e(Qde,Hwo),e(p2,Uwo),e(p2,Gj),e(Gj,Jwo),e(p2,Ywo),e(z,Kwo),e(z,u2),e(u2,Hde),e(Hde,Zwo),e(u2,e0o),e(u2,Oj),e(Oj,o0o),e(u2,r0o),e(z,t0o),e(z,_2),e(_2,Ude),e(Ude,a0o),e(_2,n0o),e(_2,Vj),e(Vj,s0o),e(_2,l0o),e(z,i0o),e(z,b2),e(b2,Jde),e(Jde,d0o),e(b2,c0o),e(b2,Xj),e(Xj,f0o),e(b2,m0o),e(z,g0o),e(z,v2),e(v2,Yde),e(Yde,h0o),e(v2,p0o),e(v2,zj),e(zj,u0o),e(v2,_0o),e(z,b0o),e(z,F2),e(F2,Kde),e(Kde,v0o),e(F2,F0o),e(F2,Wj),e(Wj,T0o),e(F2,M0o),e(z,E0o),e(z,T2),e(T2,Zde),e(Zde,C0o),e(T2,w0o),e(T2,Qj),e(Qj,A0o),e(T2,y0o),e(z,L0o),e(z,M2),e(M2,ece),e(ece,x0o),e(M2,$0o),e(M2,Hj),e(Hj,k0o),e(M2,S0o),e(z,R0o),e(z,E2),e(E2,oce),e(oce,P0o),e(E2,B0o),e(E2,Uj),e(Uj,I0o),e(E2,q0o),e(z,N0o),e(z,C2),e(C2,rce),e(rce,j0o),e(C2,D0o),e(C2,Jj),e(Jj,G0o),e(C2,O0o),e(z,V0o),e(z,w2),e(w2,tce),e(tce,X0o),e(w2,z0o),e(w2,Yj),e(Yj,W0o),e(w2,Q0o),e(z,H0o),e(z,A2),e(A2,ace),e(ace,U0o),e(A2,J0o),e(A2,Kj),e(Kj,Y0o),e(A2,K0o),e(z,Z0o),e(z,y2),e(y2,nce),e(nce,e6o),e(y2,o6o),e(y2,Zj),e(Zj,r6o),e(y2,t6o),e(z,a6o),e(z,L2),e(L2,sce),e(sce,n6o),e(L2,s6o),e(L2,eD),e(eD,l6o),e(L2,i6o),e(z,d6o),e(z,x2),e(x2,lce),e(lce,c6o),e(x2,f6o),e(x2,oD),e(oD,m6o),e(x2,g6o),e(z,h6o),e(z,$2),e($2,ice),e(ice,p6o),e($2,u6o),e($2,rD),e(rD,_6o),e($2,b6o),e(z,v6o),e(z,k2),e(k2,dce),e(dce,F6o),e(k2,T6o),e(k2,tD),e(tD,M6o),e(k2,E6o),e(z,C6o),e(z,S2),e(S2,cce),e(cce,w6o),e(S2,A6o),e(S2,aD),e(aD,y6o),e(S2,L6o),e(z,x6o),e(z,R2),e(R2,fce),e(fce,$6o),e(R2,k6o),e(R2,nD),e(nD,S6o),e(R2,R6o),e(Ke,P6o),e(Ke,P2),e(P2,B6o),e(P2,mce),e(mce,I6o),e(P2,q6o),e(P2,gce),e(gce,N6o),e(Ke,j6o),M(B2,Ke,null),b(f,bNe,_),b(f,Bi,_),e(Bi,I2),e(I2,hce),M(hy,hce,null),e(Bi,D6o),e(Bi,pce),e(pce,G6o),b(f,vNe,_),b(f,ko,_),M(py,ko,null),e(ko,O6o),e(ko,Ii),e(Ii,V6o),e(Ii,sD),e(sD,X6o),e(Ii,z6o),e(Ii,lD),e(lD,W6o),e(Ii,Q6o),e(ko,H6o),e(ko,uy),e(uy,U6o),e(uy,uce),e(uce,J6o),e(uy,Y6o),e(ko,K6o),e(ko,st),M(_y,st,null),e(st,Z6o),e(st,_ce),e(_ce,eAo),e(st,oAo),e(st,qi),e(qi,rAo),e(qi,bce),e(bce,tAo),e(qi,aAo),e(qi,iD),e(iD,nAo),e(qi,sAo),e(st,lAo),M(q2,st,null),e(ko,iAo),e(ko,Ze),M(by,Ze,null),e(Ze,dAo),e(Ze,vce),e(vce,cAo),e(Ze,fAo),e(Ze,ka),e(ka,mAo),e(ka,Fce),e(Fce,gAo),e(ka,hAo),e(ka,Tce),e(Tce,pAo),e(ka,uAo),e(ka,Mce),e(Mce,_Ao),e(ka,bAo),e(Ze,vAo),e(Ze,Q),e(Q,N2),e(N2,Ece),e(Ece,FAo),e(N2,TAo),e(N2,dD),e(dD,MAo),e(N2,EAo),e(Q,CAo),e(Q,j2),e(j2,Cce),e(Cce,wAo),e(j2,AAo),e(j2,cD),e(cD,yAo),e(j2,LAo),e(Q,xAo),e(Q,D2),e(D2,wce),e(wce,$Ao),e(D2,kAo),e(D2,fD),e(fD,SAo),e(D2,RAo),e(Q,PAo),e(Q,G2),e(G2,Ace),e(Ace,BAo),e(G2,IAo),e(G2,mD),e(mD,qAo),e(G2,NAo),e(Q,jAo),e(Q,O2),e(O2,yce),e(yce,DAo),e(O2,GAo),e(O2,gD),e(gD,OAo),e(O2,VAo),e(Q,XAo),e(Q,V2),e(V2,Lce),e(Lce,zAo),e(V2,WAo),e(V2,hD),e(hD,QAo),e(V2,HAo),e(Q,UAo),e(Q,X2),e(X2,xce),e(xce,JAo),e(X2,YAo),e(X2,pD),e(pD,KAo),e(X2,ZAo),e(Q,eyo),e(Q,z2),e(z2,$ce),e($ce,oyo),e(z2,ryo),e(z2,uD),e(uD,tyo),e(z2,ayo),e(Q,nyo),e(Q,W2),e(W2,kce),e(kce,syo),e(W2,lyo),e(W2,_D),e(_D,iyo),e(W2,dyo),e(Q,cyo),e(Q,Q2),e(Q2,Sce),e(Sce,fyo),e(Q2,myo),e(Q2,bD),e(bD,gyo),e(Q2,hyo),e(Q,pyo),e(Q,H2),e(H2,Rce),e(Rce,uyo),e(H2,_yo),e(H2,vD),e(vD,byo),e(H2,vyo),e(Q,Fyo),e(Q,U2),e(U2,Pce),e(Pce,Tyo),e(U2,Myo),e(U2,FD),e(FD,Eyo),e(U2,Cyo),e(Q,wyo),e(Q,J2),e(J2,Bce),e(Bce,Ayo),e(J2,yyo),e(J2,TD),e(TD,Lyo),e(J2,xyo),e(Q,$yo),e(Q,Y2),e(Y2,Ice),e(Ice,kyo),e(Y2,Syo),e(Y2,MD),e(MD,Ryo),e(Y2,Pyo),e(Q,Byo),e(Q,K2),e(K2,qce),e(qce,Iyo),e(K2,qyo),e(K2,ED),e(ED,Nyo),e(K2,jyo),e(Q,Dyo),e(Q,Z2),e(Z2,Nce),e(Nce,Gyo),e(Z2,Oyo),e(Z2,CD),e(CD,Vyo),e(Z2,Xyo),e(Q,zyo),e(Q,e1),e(e1,jce),e(jce,Wyo),e(e1,Qyo),e(e1,wD),e(wD,Hyo),e(e1,Uyo),e(Q,Jyo),e(Q,o1),e(o1,Dce),e(Dce,Yyo),e(o1,Kyo),e(o1,AD),e(AD,Zyo),e(o1,eLo),e(Q,oLo),e(Q,r1),e(r1,Gce),e(Gce,rLo),e(r1,tLo),e(r1,yD),e(yD,aLo),e(r1,nLo),e(Q,sLo),e(Q,t1),e(t1,Oce),e(Oce,lLo),e(t1,iLo),e(t1,LD),e(LD,dLo),e(t1,cLo),e(Q,fLo),e(Q,a1),e(a1,Vce),e(Vce,mLo),e(a1,gLo),e(a1,xD),e(xD,hLo),e(a1,pLo),e(Q,uLo),e(Q,n1),e(n1,Xce),e(Xce,_Lo),e(n1,bLo),e(n1,$D),e($D,vLo),e(n1,FLo),e(Q,TLo),e(Q,s1),e(s1,zce),e(zce,MLo),e(s1,ELo),e(s1,kD),e(kD,CLo),e(s1,wLo),e(Q,ALo),e(Q,l1),e(l1,Wce),e(Wce,yLo),e(l1,LLo),e(l1,SD),e(SD,xLo),e(l1,$Lo),e(Q,kLo),e(Q,i1),e(i1,Qce),e(Qce,SLo),e(i1,RLo),e(i1,RD),e(RD,PLo),e(i1,BLo),e(Q,ILo),e(Q,d1),e(d1,Hce),e(Hce,qLo),e(d1,NLo),e(d1,PD),e(PD,jLo),e(d1,DLo),e(Q,GLo),e(Q,c1),e(c1,Uce),e(Uce,OLo),e(c1,VLo),e(c1,BD),e(BD,XLo),e(c1,zLo),e(Q,WLo),e(Q,f1),e(f1,Jce),e(Jce,QLo),e(f1,HLo),e(f1,ID),e(ID,ULo),e(f1,JLo),e(Q,YLo),e(Q,m1),e(m1,Yce),e(Yce,KLo),e(m1,ZLo),e(m1,qD),e(qD,e8o),e(m1,o8o),e(Q,r8o),e(Q,g1),e(g1,Kce),e(Kce,t8o),e(g1,a8o),e(g1,ND),e(ND,n8o),e(g1,s8o),e(Q,l8o),e(Q,h1),e(h1,Zce),e(Zce,i8o),e(h1,d8o),e(h1,efe),e(efe,c8o),e(h1,f8o),e(Q,m8o),e(Q,p1),e(p1,ofe),e(ofe,g8o),e(p1,h8o),e(p1,jD),e(jD,p8o),e(p1,u8o),e(Q,_8o),e(Q,u1),e(u1,rfe),e(rfe,b8o),e(u1,v8o),e(u1,DD),e(DD,F8o),e(u1,T8o),e(Q,M8o),e(Q,_1),e(_1,tfe),e(tfe,E8o),e(_1,C8o),e(_1,GD),e(GD,w8o),e(_1,A8o),e(Q,y8o),e(Q,b1),e(b1,afe),e(afe,L8o),e(b1,x8o),e(b1,OD),e(OD,$8o),e(b1,k8o),e(Ze,S8o),e(Ze,v1),e(v1,R8o),e(v1,nfe),e(nfe,P8o),e(v1,B8o),e(v1,sfe),e(sfe,I8o),e(Ze,q8o),M(F1,Ze,null),b(f,FNe,_),b(f,Ni,_),e(Ni,T1),e(T1,lfe),M(vy,lfe,null),e(Ni,N8o),e(Ni,ife),e(ife,j8o),b(f,TNe,_),b(f,So,_),M(Fy,So,null),e(So,D8o),e(So,ji),e(ji,G8o),e(ji,VD),e(VD,O8o),e(ji,V8o),e(ji,XD),e(XD,X8o),e(ji,z8o),e(So,W8o),e(So,Ty),e(Ty,Q8o),e(Ty,dfe),e(dfe,H8o),e(Ty,U8o),e(So,J8o),e(So,lt),M(My,lt,null),e(lt,Y8o),e(lt,cfe),e(cfe,K8o),e(lt,Z8o),e(lt,Di),e(Di,e9o),e(Di,ffe),e(ffe,o9o),e(Di,r9o),e(Di,zD),e(zD,t9o),e(Di,a9o),e(lt,n9o),M(M1,lt,null),e(So,s9o),e(So,eo),M(Ey,eo,null),e(eo,l9o),e(eo,mfe),e(mfe,i9o),e(eo,d9o),e(eo,Sa),e(Sa,c9o),e(Sa,gfe),e(gfe,f9o),e(Sa,m9o),e(Sa,hfe),e(hfe,g9o),e(Sa,h9o),e(Sa,pfe),e(pfe,p9o),e(Sa,u9o),e(eo,_9o),e(eo,ue),e(ue,E1),e(E1,ufe),e(ufe,b9o),e(E1,v9o),e(E1,WD),e(WD,F9o),e(E1,T9o),e(ue,M9o),e(ue,C1),e(C1,_fe),e(_fe,E9o),e(C1,C9o),e(C1,QD),e(QD,w9o),e(C1,A9o),e(ue,y9o),e(ue,w1),e(w1,bfe),e(bfe,L9o),e(w1,x9o),e(w1,HD),e(HD,$9o),e(w1,k9o),e(ue,S9o),e(ue,A1),e(A1,vfe),e(vfe,R9o),e(A1,P9o),e(A1,UD),e(UD,B9o),e(A1,I9o),e(ue,q9o),e(ue,y1),e(y1,Ffe),e(Ffe,N9o),e(y1,j9o),e(y1,JD),e(JD,D9o),e(y1,G9o),e(ue,O9o),e(ue,L1),e(L1,Tfe),e(Tfe,V9o),e(L1,X9o),e(L1,YD),e(YD,z9o),e(L1,W9o),e(ue,Q9o),e(ue,x1),e(x1,Mfe),e(Mfe,H9o),e(x1,U9o),e(x1,KD),e(KD,J9o),e(x1,Y9o),e(ue,K9o),e(ue,$1),e($1,Efe),e(Efe,Z9o),e($1,exo),e($1,ZD),e(ZD,oxo),e($1,rxo),e(ue,txo),e(ue,k1),e(k1,Cfe),e(Cfe,axo),e(k1,nxo),e(k1,eG),e(eG,sxo),e(k1,lxo),e(ue,ixo),e(ue,S1),e(S1,wfe),e(wfe,dxo),e(S1,cxo),e(S1,oG),e(oG,fxo),e(S1,mxo),e(ue,gxo),e(ue,R1),e(R1,Afe),e(Afe,hxo),e(R1,pxo),e(R1,rG),e(rG,uxo),e(R1,_xo),e(ue,bxo),e(ue,P1),e(P1,yfe),e(yfe,vxo),e(P1,Fxo),e(P1,tG),e(tG,Txo),e(P1,Mxo),e(ue,Exo),e(ue,B1),e(B1,Lfe),e(Lfe,Cxo),e(B1,wxo),e(B1,aG),e(aG,Axo),e(B1,yxo),e(ue,Lxo),e(ue,I1),e(I1,xfe),e(xfe,xxo),e(I1,$xo),e(I1,nG),e(nG,kxo),e(I1,Sxo),e(ue,Rxo),e(ue,q1),e(q1,$fe),e($fe,Pxo),e(q1,Bxo),e(q1,sG),e(sG,Ixo),e(q1,qxo),e(ue,Nxo),e(ue,N1),e(N1,kfe),e(kfe,jxo),e(N1,Dxo),e(N1,lG),e(lG,Gxo),e(N1,Oxo),e(eo,Vxo),e(eo,j1),e(j1,Xxo),e(j1,Sfe),e(Sfe,zxo),e(j1,Wxo),e(j1,Rfe),e(Rfe,Qxo),e(eo,Hxo),M(D1,eo,null),b(f,MNe,_),b(f,Gi,_),e(Gi,G1),e(G1,Pfe),M(Cy,Pfe,null),e(Gi,Uxo),e(Gi,Bfe),e(Bfe,Jxo),b(f,ENe,_),b(f,Ro,_),M(wy,Ro,null),e(Ro,Yxo),e(Ro,Oi),e(Oi,Kxo),e(Oi,iG),e(iG,Zxo),e(Oi,e$o),e(Oi,dG),e(dG,o$o),e(Oi,r$o),e(Ro,t$o),e(Ro,Ay),e(Ay,a$o),e(Ay,Ife),e(Ife,n$o),e(Ay,s$o),e(Ro,l$o),e(Ro,it),M(yy,it,null),e(it,i$o),e(it,qfe),e(qfe,d$o),e(it,c$o),e(it,Vi),e(Vi,f$o),e(Vi,Nfe),e(Nfe,m$o),e(Vi,g$o),e(Vi,cG),e(cG,h$o),e(Vi,p$o),e(it,u$o),M(O1,it,null),e(Ro,_$o),e(Ro,oo),M(Ly,oo,null),e(oo,b$o),e(oo,jfe),e(jfe,v$o),e(oo,F$o),e(oo,Ra),e(Ra,T$o),e(Ra,Dfe),e(Dfe,M$o),e(Ra,E$o),e(Ra,Gfe),e(Gfe,C$o),e(Ra,w$o),e(Ra,Ofe),e(Ofe,A$o),e(Ra,y$o),e(oo,L$o),e(oo,q),e(q,V1),e(V1,Vfe),e(Vfe,x$o),e(V1,$$o),e(V1,fG),e(fG,k$o),e(V1,S$o),e(q,R$o),e(q,X1),e(X1,Xfe),e(Xfe,P$o),e(X1,B$o),e(X1,mG),e(mG,I$o),e(X1,q$o),e(q,N$o),e(q,z1),e(z1,zfe),e(zfe,j$o),e(z1,D$o),e(z1,gG),e(gG,G$o),e(z1,O$o),e(q,V$o),e(q,W1),e(W1,Wfe),e(Wfe,X$o),e(W1,z$o),e(W1,hG),e(hG,W$o),e(W1,Q$o),e(q,H$o),e(q,Q1),e(Q1,Qfe),e(Qfe,U$o),e(Q1,J$o),e(Q1,pG),e(pG,Y$o),e(Q1,K$o),e(q,Z$o),e(q,H1),e(H1,Hfe),e(Hfe,eko),e(H1,oko),e(H1,uG),e(uG,rko),e(H1,tko),e(q,ako),e(q,U1),e(U1,Ufe),e(Ufe,nko),e(U1,sko),e(U1,_G),e(_G,lko),e(U1,iko),e(q,dko),e(q,J1),e(J1,Jfe),e(Jfe,cko),e(J1,fko),e(J1,bG),e(bG,mko),e(J1,gko),e(q,hko),e(q,Y1),e(Y1,Yfe),e(Yfe,pko),e(Y1,uko),e(Y1,vG),e(vG,_ko),e(Y1,bko),e(q,vko),e(q,K1),e(K1,Kfe),e(Kfe,Fko),e(K1,Tko),e(K1,FG),e(FG,Mko),e(K1,Eko),e(q,Cko),e(q,Z1),e(Z1,Zfe),e(Zfe,wko),e(Z1,Ako),e(Z1,TG),e(TG,yko),e(Z1,Lko),e(q,xko),e(q,eb),e(eb,eme),e(eme,$ko),e(eb,kko),e(eb,MG),e(MG,Sko),e(eb,Rko),e(q,Pko),e(q,ob),e(ob,ome),e(ome,Bko),e(ob,Iko),e(ob,EG),e(EG,qko),e(ob,Nko),e(q,jko),e(q,rb),e(rb,rme),e(rme,Dko),e(rb,Gko),e(rb,CG),e(CG,Oko),e(rb,Vko),e(q,Xko),e(q,tb),e(tb,tme),e(tme,zko),e(tb,Wko),e(tb,wG),e(wG,Qko),e(tb,Hko),e(q,Uko),e(q,ab),e(ab,ame),e(ame,Jko),e(ab,Yko),e(ab,AG),e(AG,Kko),e(ab,Zko),e(q,eSo),e(q,nb),e(nb,nme),e(nme,oSo),e(nb,rSo),e(nb,yG),e(yG,tSo),e(nb,aSo),e(q,nSo),e(q,sb),e(sb,sme),e(sme,sSo),e(sb,lSo),e(sb,LG),e(LG,iSo),e(sb,dSo),e(q,cSo),e(q,lb),e(lb,lme),e(lme,fSo),e(lb,mSo),e(lb,xG),e(xG,gSo),e(lb,hSo),e(q,pSo),e(q,ib),e(ib,ime),e(ime,uSo),e(ib,_So),e(ib,$G),e($G,bSo),e(ib,vSo),e(q,FSo),e(q,db),e(db,dme),e(dme,TSo),e(db,MSo),e(db,kG),e(kG,ESo),e(db,CSo),e(q,wSo),e(q,cb),e(cb,cme),e(cme,ASo),e(cb,ySo),e(cb,SG),e(SG,LSo),e(cb,xSo),e(q,$So),e(q,fb),e(fb,fme),e(fme,kSo),e(fb,SSo),e(fb,RG),e(RG,RSo),e(fb,PSo),e(q,BSo),e(q,mb),e(mb,mme),e(mme,ISo),e(mb,qSo),e(mb,PG),e(PG,NSo),e(mb,jSo),e(q,DSo),e(q,gb),e(gb,gme),e(gme,GSo),e(gb,OSo),e(gb,BG),e(BG,VSo),e(gb,XSo),e(q,zSo),e(q,hb),e(hb,hme),e(hme,WSo),e(hb,QSo),e(hb,IG),e(IG,HSo),e(hb,USo),e(q,JSo),e(q,pb),e(pb,pme),e(pme,YSo),e(pb,KSo),e(pb,qG),e(qG,ZSo),e(pb,eRo),e(q,oRo),e(q,ub),e(ub,ume),e(ume,rRo),e(ub,tRo),e(ub,NG),e(NG,aRo),e(ub,nRo),e(q,sRo),e(q,_b),e(_b,_me),e(_me,lRo),e(_b,iRo),e(_b,jG),e(jG,dRo),e(_b,cRo),e(q,fRo),e(q,bb),e(bb,bme),e(bme,mRo),e(bb,gRo),e(bb,DG),e(DG,hRo),e(bb,pRo),e(q,uRo),e(q,vb),e(vb,vme),e(vme,_Ro),e(vb,bRo),e(vb,GG),e(GG,vRo),e(vb,FRo),e(q,TRo),e(q,Fb),e(Fb,Fme),e(Fme,MRo),e(Fb,ERo),e(Fb,OG),e(OG,CRo),e(Fb,wRo),e(q,ARo),e(q,Tb),e(Tb,Tme),e(Tme,yRo),e(Tb,LRo),e(Tb,VG),e(VG,xRo),e(Tb,$Ro),e(q,kRo),e(q,Mb),e(Mb,Mme),e(Mme,SRo),e(Mb,RRo),e(Mb,XG),e(XG,PRo),e(Mb,BRo),e(q,IRo),e(q,Eb),e(Eb,Eme),e(Eme,qRo),e(Eb,NRo),e(Eb,zG),e(zG,jRo),e(Eb,DRo),e(q,GRo),e(q,Cb),e(Cb,Cme),e(Cme,ORo),e(Cb,VRo),e(Cb,WG),e(WG,XRo),e(Cb,zRo),e(q,WRo),e(q,wb),e(wb,wme),e(wme,QRo),e(wb,HRo),e(wb,QG),e(QG,URo),e(wb,JRo),e(q,YRo),e(q,Ab),e(Ab,Ame),e(Ame,KRo),e(Ab,ZRo),e(Ab,HG),e(HG,ePo),e(Ab,oPo),e(q,rPo),e(q,yb),e(yb,yme),e(yme,tPo),e(yb,aPo),e(yb,UG),e(UG,nPo),e(yb,sPo),e(q,lPo),e(q,Lb),e(Lb,Lme),e(Lme,iPo),e(Lb,dPo),e(Lb,JG),e(JG,cPo),e(Lb,fPo),e(q,mPo),e(q,xb),e(xb,xme),e(xme,gPo),e(xb,hPo),e(xb,YG),e(YG,pPo),e(xb,uPo),e(q,_Po),e(q,$b),e($b,$me),e($me,bPo),e($b,vPo),e($b,KG),e(KG,FPo),e($b,TPo),e(q,MPo),e(q,kb),e(kb,kme),e(kme,EPo),e(kb,CPo),e(kb,ZG),e(ZG,wPo),e(kb,APo),e(q,yPo),e(q,Sb),e(Sb,Sme),e(Sme,LPo),e(Sb,xPo),e(Sb,eO),e(eO,$Po),e(Sb,kPo),e(q,SPo),e(q,Rb),e(Rb,Rme),e(Rme,RPo),e(Rb,PPo),e(Rb,oO),e(oO,BPo),e(Rb,IPo),e(q,qPo),e(q,Pb),e(Pb,Pme),e(Pme,NPo),e(Pb,jPo),e(Pb,rO),e(rO,DPo),e(Pb,GPo),e(q,OPo),e(q,Bb),e(Bb,Bme),e(Bme,VPo),e(Bb,XPo),e(Bb,tO),e(tO,zPo),e(Bb,WPo),e(oo,QPo),e(oo,Ib),e(Ib,HPo),e(Ib,Ime),e(Ime,UPo),e(Ib,JPo),e(Ib,qme),e(qme,YPo),e(oo,KPo),M(qb,oo,null),b(f,CNe,_),b(f,Xi,_),e(Xi,Nb),e(Nb,Nme),M(xy,Nme,null),e(Xi,ZPo),e(Xi,jme),e(jme,eBo),b(f,wNe,_),b(f,Po,_),M($y,Po,null),e(Po,oBo),e(Po,zi),e(zi,rBo),e(zi,aO),e(aO,tBo),e(zi,aBo),e(zi,nO),e(nO,nBo),e(zi,sBo),e(Po,lBo),e(Po,ky),e(ky,iBo),e(ky,Dme),e(Dme,dBo),e(ky,cBo),e(Po,fBo),e(Po,dt),M(Sy,dt,null),e(dt,mBo),e(dt,Gme),e(Gme,gBo),e(dt,hBo),e(dt,Wi),e(Wi,pBo),e(Wi,Ome),e(Ome,uBo),e(Wi,_Bo),e(Wi,sO),e(sO,bBo),e(Wi,vBo),e(dt,FBo),M(jb,dt,null),e(Po,TBo),e(Po,ro),M(Ry,ro,null),e(ro,MBo),e(ro,Vme),e(Vme,EBo),e(ro,CBo),e(ro,Pa),e(Pa,wBo),e(Pa,Xme),e(Xme,ABo),e(Pa,yBo),e(Pa,zme),e(zme,LBo),e(Pa,xBo),e(Pa,Wme),e(Wme,$Bo),e(Pa,kBo),e(ro,SBo),e(ro,K),e(K,Db),e(Db,Qme),e(Qme,RBo),e(Db,PBo),e(Db,lO),e(lO,BBo),e(Db,IBo),e(K,qBo),e(K,Gb),e(Gb,Hme),e(Hme,NBo),e(Gb,jBo),e(Gb,iO),e(iO,DBo),e(Gb,GBo),e(K,OBo),e(K,Ob),e(Ob,Ume),e(Ume,VBo),e(Ob,XBo),e(Ob,dO),e(dO,zBo),e(Ob,WBo),e(K,QBo),e(K,Vb),e(Vb,Jme),e(Jme,HBo),e(Vb,UBo),e(Vb,cO),e(cO,JBo),e(Vb,YBo),e(K,KBo),e(K,Xb),e(Xb,Yme),e(Yme,ZBo),e(Xb,eIo),e(Xb,fO),e(fO,oIo),e(Xb,rIo),e(K,tIo),e(K,zb),e(zb,Kme),e(Kme,aIo),e(zb,nIo),e(zb,mO),e(mO,sIo),e(zb,lIo),e(K,iIo),e(K,Wb),e(Wb,Zme),e(Zme,dIo),e(Wb,cIo),e(Wb,gO),e(gO,fIo),e(Wb,mIo),e(K,gIo),e(K,Qb),e(Qb,ege),e(ege,hIo),e(Qb,pIo),e(Qb,hO),e(hO,uIo),e(Qb,_Io),e(K,bIo),e(K,Hb),e(Hb,oge),e(oge,vIo),e(Hb,FIo),e(Hb,pO),e(pO,TIo),e(Hb,MIo),e(K,EIo),e(K,Ub),e(Ub,rge),e(rge,CIo),e(Ub,wIo),e(Ub,uO),e(uO,AIo),e(Ub,yIo),e(K,LIo),e(K,Jb),e(Jb,tge),e(tge,xIo),e(Jb,$Io),e(Jb,_O),e(_O,kIo),e(Jb,SIo),e(K,RIo),e(K,Yb),e(Yb,age),e(age,PIo),e(Yb,BIo),e(Yb,bO),e(bO,IIo),e(Yb,qIo),e(K,NIo),e(K,Kb),e(Kb,nge),e(nge,jIo),e(Kb,DIo),e(Kb,vO),e(vO,GIo),e(Kb,OIo),e(K,VIo),e(K,Zb),e(Zb,sge),e(sge,XIo),e(Zb,zIo),e(Zb,FO),e(FO,WIo),e(Zb,QIo),e(K,HIo),e(K,e4),e(e4,lge),e(lge,UIo),e(e4,JIo),e(e4,TO),e(TO,YIo),e(e4,KIo),e(K,ZIo),e(K,o4),e(o4,ige),e(ige,eqo),e(o4,oqo),e(o4,MO),e(MO,rqo),e(o4,tqo),e(K,aqo),e(K,r4),e(r4,dge),e(dge,nqo),e(r4,sqo),e(r4,EO),e(EO,lqo),e(r4,iqo),e(K,dqo),e(K,t4),e(t4,cge),e(cge,cqo),e(t4,fqo),e(t4,CO),e(CO,mqo),e(t4,gqo),e(K,hqo),e(K,a4),e(a4,fge),e(fge,pqo),e(a4,uqo),e(a4,wO),e(wO,_qo),e(a4,bqo),e(K,vqo),e(K,n4),e(n4,mge),e(mge,Fqo),e(n4,Tqo),e(n4,AO),e(AO,Mqo),e(n4,Eqo),e(K,Cqo),e(K,s4),e(s4,gge),e(gge,wqo),e(s4,Aqo),e(s4,yO),e(yO,yqo),e(s4,Lqo),e(K,xqo),e(K,l4),e(l4,hge),e(hge,$qo),e(l4,kqo),e(l4,LO),e(LO,Sqo),e(l4,Rqo),e(K,Pqo),e(K,i4),e(i4,pge),e(pge,Bqo),e(i4,Iqo),e(i4,xO),e(xO,qqo),e(i4,Nqo),e(K,jqo),e(K,d4),e(d4,uge),e(uge,Dqo),e(d4,Gqo),e(d4,$O),e($O,Oqo),e(d4,Vqo),e(K,Xqo),e(K,c4),e(c4,_ge),e(_ge,zqo),e(c4,Wqo),e(c4,kO),e(kO,Qqo),e(c4,Hqo),e(K,Uqo),e(K,f4),e(f4,bge),e(bge,Jqo),e(f4,Yqo),e(f4,SO),e(SO,Kqo),e(f4,Zqo),e(K,eNo),e(K,m4),e(m4,vge),e(vge,oNo),e(m4,rNo),e(m4,RO),e(RO,tNo),e(m4,aNo),e(K,nNo),e(K,g4),e(g4,Fge),e(Fge,sNo),e(g4,lNo),e(g4,PO),e(PO,iNo),e(g4,dNo),e(K,cNo),e(K,h4),e(h4,Tge),e(Tge,fNo),e(h4,mNo),e(h4,BO),e(BO,gNo),e(h4,hNo),e(ro,pNo),e(ro,p4),e(p4,uNo),e(p4,Mge),e(Mge,_No),e(p4,bNo),e(p4,Ege),e(Ege,vNo),e(ro,FNo),M(u4,ro,null),b(f,ANe,_),b(f,Qi,_),e(Qi,_4),e(_4,Cge),M(Py,Cge,null),e(Qi,TNo),e(Qi,wge),e(wge,MNo),b(f,yNe,_),b(f,Bo,_),M(By,Bo,null),e(Bo,ENo),e(Bo,Hi),e(Hi,CNo),e(Hi,IO),e(IO,wNo),e(Hi,ANo),e(Hi,qO),e(qO,yNo),e(Hi,LNo),e(Bo,xNo),e(Bo,Iy),e(Iy,$No),e(Iy,Age),e(Age,kNo),e(Iy,SNo),e(Bo,RNo),e(Bo,ct),M(qy,ct,null),e(ct,PNo),e(ct,yge),e(yge,BNo),e(ct,INo),e(ct,Ui),e(Ui,qNo),e(Ui,Lge),e(Lge,NNo),e(Ui,jNo),e(Ui,NO),e(NO,DNo),e(Ui,GNo),e(ct,ONo),M(b4,ct,null),e(Bo,VNo),e(Bo,to),M(Ny,to,null),e(to,XNo),e(to,xge),e(xge,zNo),e(to,WNo),e(to,Ba),e(Ba,QNo),e(Ba,$ge),e($ge,HNo),e(Ba,UNo),e(Ba,kge),e(kge,JNo),e(Ba,YNo),e(Ba,Sge),e(Sge,KNo),e(Ba,ZNo),e(to,ejo),e(to,Yr),e(Yr,v4),e(v4,Rge),e(Rge,ojo),e(v4,rjo),e(v4,jO),e(jO,tjo),e(v4,ajo),e(Yr,njo),e(Yr,F4),e(F4,Pge),e(Pge,sjo),e(F4,ljo),e(F4,DO),e(DO,ijo),e(F4,djo),e(Yr,cjo),e(Yr,T4),e(T4,Bge),e(Bge,fjo),e(T4,mjo),e(T4,GO),e(GO,gjo),e(T4,hjo),e(Yr,pjo),e(Yr,M4),e(M4,Ige),e(Ige,ujo),e(M4,_jo),e(M4,OO),e(OO,bjo),e(M4,vjo),e(Yr,Fjo),e(Yr,E4),e(E4,qge),e(qge,Tjo),e(E4,Mjo),e(E4,VO),e(VO,Ejo),e(E4,Cjo),e(to,wjo),e(to,C4),e(C4,Ajo),e(C4,Nge),e(Nge,yjo),e(C4,Ljo),e(C4,jge),e(jge,xjo),e(to,$jo),M(w4,to,null),b(f,LNe,_),b(f,Ji,_),e(Ji,A4),e(A4,Dge),M(jy,Dge,null),e(Ji,kjo),e(Ji,Gge),e(Gge,Sjo),b(f,xNe,_),b(f,Io,_),M(Dy,Io,null),e(Io,Rjo),e(Io,Yi),e(Yi,Pjo),e(Yi,XO),e(XO,Bjo),e(Yi,Ijo),e(Yi,zO),e(zO,qjo),e(Yi,Njo),e(Io,jjo),e(Io,Gy),e(Gy,Djo),e(Gy,Oge),e(Oge,Gjo),e(Gy,Ojo),e(Io,Vjo),e(Io,ft),M(Oy,ft,null),e(ft,Xjo),e(ft,Vge),e(Vge,zjo),e(ft,Wjo),e(ft,Ki),e(Ki,Qjo),e(Ki,Xge),e(Xge,Hjo),e(Ki,Ujo),e(Ki,WO),e(WO,Jjo),e(Ki,Yjo),e(ft,Kjo),M(y4,ft,null),e(Io,Zjo),e(Io,ao),M(Vy,ao,null),e(ao,eDo),e(ao,zge),e(zge,oDo),e(ao,rDo),e(ao,Ia),e(Ia,tDo),e(Ia,Wge),e(Wge,aDo),e(Ia,nDo),e(Ia,Qge),e(Qge,sDo),e(Ia,lDo),e(Ia,Hge),e(Hge,iDo),e(Ia,dDo),e(ao,cDo),e(ao,H),e(H,L4),e(L4,Uge),e(Uge,fDo),e(L4,mDo),e(L4,QO),e(QO,gDo),e(L4,hDo),e(H,pDo),e(H,x4),e(x4,Jge),e(Jge,uDo),e(x4,_Do),e(x4,HO),e(HO,bDo),e(x4,vDo),e(H,FDo),e(H,$4),e($4,Yge),e(Yge,TDo),e($4,MDo),e($4,UO),e(UO,EDo),e($4,CDo),e(H,wDo),e(H,k4),e(k4,Kge),e(Kge,ADo),e(k4,yDo),e(k4,JO),e(JO,LDo),e(k4,xDo),e(H,$Do),e(H,S4),e(S4,Zge),e(Zge,kDo),e(S4,SDo),e(S4,YO),e(YO,RDo),e(S4,PDo),e(H,BDo),e(H,R4),e(R4,ehe),e(ehe,IDo),e(R4,qDo),e(R4,KO),e(KO,NDo),e(R4,jDo),e(H,DDo),e(H,P4),e(P4,ohe),e(ohe,GDo),e(P4,ODo),e(P4,ZO),e(ZO,VDo),e(P4,XDo),e(H,zDo),e(H,B4),e(B4,rhe),e(rhe,WDo),e(B4,QDo),e(B4,eV),e(eV,HDo),e(B4,UDo),e(H,JDo),e(H,I4),e(I4,the),e(the,YDo),e(I4,KDo),e(I4,oV),e(oV,ZDo),e(I4,eGo),e(H,oGo),e(H,q4),e(q4,ahe),e(ahe,rGo),e(q4,tGo),e(q4,rV),e(rV,aGo),e(q4,nGo),e(H,sGo),e(H,N4),e(N4,nhe),e(nhe,lGo),e(N4,iGo),e(N4,tV),e(tV,dGo),e(N4,cGo),e(H,fGo),e(H,j4),e(j4,she),e(she,mGo),e(j4,gGo),e(j4,aV),e(aV,hGo),e(j4,pGo),e(H,uGo),e(H,D4),e(D4,lhe),e(lhe,_Go),e(D4,bGo),e(D4,nV),e(nV,vGo),e(D4,FGo),e(H,TGo),e(H,G4),e(G4,ihe),e(ihe,MGo),e(G4,EGo),e(G4,sV),e(sV,CGo),e(G4,wGo),e(H,AGo),e(H,O4),e(O4,dhe),e(dhe,yGo),e(O4,LGo),e(O4,lV),e(lV,xGo),e(O4,$Go),e(H,kGo),e(H,V4),e(V4,che),e(che,SGo),e(V4,RGo),e(V4,iV),e(iV,PGo),e(V4,BGo),e(H,IGo),e(H,X4),e(X4,fhe),e(fhe,qGo),e(X4,NGo),e(X4,dV),e(dV,jGo),e(X4,DGo),e(H,GGo),e(H,z4),e(z4,mhe),e(mhe,OGo),e(z4,VGo),e(z4,cV),e(cV,XGo),e(z4,zGo),e(H,WGo),e(H,W4),e(W4,ghe),e(ghe,QGo),e(W4,HGo),e(W4,fV),e(fV,UGo),e(W4,JGo),e(H,YGo),e(H,Q4),e(Q4,hhe),e(hhe,KGo),e(Q4,ZGo),e(Q4,mV),e(mV,eOo),e(Q4,oOo),e(H,rOo),e(H,H4),e(H4,phe),e(phe,tOo),e(H4,aOo),e(H4,gV),e(gV,nOo),e(H4,sOo),e(H,lOo),e(H,U4),e(U4,uhe),e(uhe,iOo),e(U4,dOo),e(U4,hV),e(hV,cOo),e(U4,fOo),e(H,mOo),e(H,J4),e(J4,_he),e(_he,gOo),e(J4,hOo),e(J4,pV),e(pV,pOo),e(J4,uOo),e(H,_Oo),e(H,Y4),e(Y4,bhe),e(bhe,bOo),e(Y4,vOo),e(Y4,uV),e(uV,FOo),e(Y4,TOo),e(H,MOo),e(H,K4),e(K4,vhe),e(vhe,EOo),e(K4,COo),e(K4,_V),e(_V,wOo),e(K4,AOo),e(H,yOo),e(H,Z4),e(Z4,Fhe),e(Fhe,LOo),e(Z4,xOo),e(Z4,bV),e(bV,$Oo),e(Z4,kOo),e(H,SOo),e(H,ev),e(ev,The),e(The,ROo),e(ev,POo),e(ev,vV),e(vV,BOo),e(ev,IOo),e(H,qOo),e(H,ov),e(ov,Mhe),e(Mhe,NOo),e(ov,jOo),e(ov,FV),e(FV,DOo),e(ov,GOo),e(H,OOo),e(H,rv),e(rv,Ehe),e(Ehe,VOo),e(rv,XOo),e(rv,TV),e(TV,zOo),e(rv,WOo),e(H,QOo),e(H,tv),e(tv,Che),e(Che,HOo),e(tv,UOo),e(tv,MV),e(MV,JOo),e(tv,YOo),e(H,KOo),e(H,av),e(av,whe),e(whe,ZOo),e(av,eVo),e(av,EV),e(EV,oVo),e(av,rVo),e(H,tVo),e(H,nv),e(nv,Ahe),e(Ahe,aVo),e(nv,nVo),e(nv,CV),e(CV,sVo),e(nv,lVo),e(H,iVo),e(H,sv),e(sv,yhe),e(yhe,dVo),e(sv,cVo),e(sv,wV),e(wV,fVo),e(sv,mVo),e(H,gVo),e(H,lv),e(lv,Lhe),e(Lhe,hVo),e(lv,pVo),e(lv,AV),e(AV,uVo),e(lv,_Vo),e(ao,bVo),e(ao,iv),e(iv,vVo),e(iv,xhe),e(xhe,FVo),e(iv,TVo),e(iv,$he),e($he,MVo),e(ao,EVo),M(dv,ao,null),b(f,$Ne,_),b(f,Zi,_),e(Zi,cv),e(cv,khe),M(Xy,khe,null),e(Zi,CVo),e(Zi,She),e(She,wVo),b(f,kNe,_),b(f,qo,_),M(zy,qo,null),e(qo,AVo),e(qo,ed),e(ed,yVo),e(ed,yV),e(yV,LVo),e(ed,xVo),e(ed,LV),e(LV,$Vo),e(ed,kVo),e(qo,SVo),e(qo,Wy),e(Wy,RVo),e(Wy,Rhe),e(Rhe,PVo),e(Wy,BVo),e(qo,IVo),e(qo,mt),M(Qy,mt,null),e(mt,qVo),e(mt,Phe),e(Phe,NVo),e(mt,jVo),e(mt,od),e(od,DVo),e(od,Bhe),e(Bhe,GVo),e(od,OVo),e(od,xV),e(xV,VVo),e(od,XVo),e(mt,zVo),M(fv,mt,null),e(qo,WVo),e(qo,no),M(Hy,no,null),e(no,QVo),e(no,Ihe),e(Ihe,HVo),e(no,UVo),e(no,qa),e(qa,JVo),e(qa,qhe),e(qhe,YVo),e(qa,KVo),e(qa,Nhe),e(Nhe,ZVo),e(qa,eXo),e(qa,jhe),e(jhe,oXo),e(qa,rXo),e(no,tXo),e(no,V),e(V,mv),e(mv,Dhe),e(Dhe,aXo),e(mv,nXo),e(mv,$V),e($V,sXo),e(mv,lXo),e(V,iXo),e(V,gv),e(gv,Ghe),e(Ghe,dXo),e(gv,cXo),e(gv,kV),e(kV,fXo),e(gv,mXo),e(V,gXo),e(V,hv),e(hv,Ohe),e(Ohe,hXo),e(hv,pXo),e(hv,SV),e(SV,uXo),e(hv,_Xo),e(V,bXo),e(V,pv),e(pv,Vhe),e(Vhe,vXo),e(pv,FXo),e(pv,RV),e(RV,TXo),e(pv,MXo),e(V,EXo),e(V,uv),e(uv,Xhe),e(Xhe,CXo),e(uv,wXo),e(uv,PV),e(PV,AXo),e(uv,yXo),e(V,LXo),e(V,_v),e(_v,zhe),e(zhe,xXo),e(_v,$Xo),e(_v,BV),e(BV,kXo),e(_v,SXo),e(V,RXo),e(V,bv),e(bv,Whe),e(Whe,PXo),e(bv,BXo),e(bv,IV),e(IV,IXo),e(bv,qXo),e(V,NXo),e(V,vv),e(vv,Qhe),e(Qhe,jXo),e(vv,DXo),e(vv,qV),e(qV,GXo),e(vv,OXo),e(V,VXo),e(V,Fv),e(Fv,Hhe),e(Hhe,XXo),e(Fv,zXo),e(Fv,NV),e(NV,WXo),e(Fv,QXo),e(V,HXo),e(V,Tv),e(Tv,Uhe),e(Uhe,UXo),e(Tv,JXo),e(Tv,jV),e(jV,YXo),e(Tv,KXo),e(V,ZXo),e(V,Mv),e(Mv,Jhe),e(Jhe,ezo),e(Mv,ozo),e(Mv,DV),e(DV,rzo),e(Mv,tzo),e(V,azo),e(V,Ev),e(Ev,Yhe),e(Yhe,nzo),e(Ev,szo),e(Ev,GV),e(GV,lzo),e(Ev,izo),e(V,dzo),e(V,Cv),e(Cv,Khe),e(Khe,czo),e(Cv,fzo),e(Cv,OV),e(OV,mzo),e(Cv,gzo),e(V,hzo),e(V,wv),e(wv,Zhe),e(Zhe,pzo),e(wv,uzo),e(wv,VV),e(VV,_zo),e(wv,bzo),e(V,vzo),e(V,Av),e(Av,epe),e(epe,Fzo),e(Av,Tzo),e(Av,XV),e(XV,Mzo),e(Av,Ezo),e(V,Czo),e(V,yv),e(yv,ope),e(ope,wzo),e(yv,Azo),e(yv,zV),e(zV,yzo),e(yv,Lzo),e(V,xzo),e(V,Lv),e(Lv,rpe),e(rpe,$zo),e(Lv,kzo),e(Lv,WV),e(WV,Szo),e(Lv,Rzo),e(V,Pzo),e(V,xv),e(xv,tpe),e(tpe,Bzo),e(xv,Izo),e(xv,QV),e(QV,qzo),e(xv,Nzo),e(V,jzo),e(V,$v),e($v,ape),e(ape,Dzo),e($v,Gzo),e($v,HV),e(HV,Ozo),e($v,Vzo),e(V,Xzo),e(V,kv),e(kv,npe),e(npe,zzo),e(kv,Wzo),e(kv,UV),e(UV,Qzo),e(kv,Hzo),e(V,Uzo),e(V,Sv),e(Sv,spe),e(spe,Jzo),e(Sv,Yzo),e(Sv,JV),e(JV,Kzo),e(Sv,Zzo),e(V,eWo),e(V,Rv),e(Rv,lpe),e(lpe,oWo),e(Rv,rWo),e(Rv,YV),e(YV,tWo),e(Rv,aWo),e(V,nWo),e(V,Pv),e(Pv,ipe),e(ipe,sWo),e(Pv,lWo),e(Pv,KV),e(KV,iWo),e(Pv,dWo),e(V,cWo),e(V,Bv),e(Bv,dpe),e(dpe,fWo),e(Bv,mWo),e(Bv,ZV),e(ZV,gWo),e(Bv,hWo),e(V,pWo),e(V,Iv),e(Iv,cpe),e(cpe,uWo),e(Iv,_Wo),e(Iv,eX),e(eX,bWo),e(Iv,vWo),e(V,FWo),e(V,qv),e(qv,fpe),e(fpe,TWo),e(qv,MWo),e(qv,oX),e(oX,EWo),e(qv,CWo),e(V,wWo),e(V,Nv),e(Nv,mpe),e(mpe,AWo),e(Nv,yWo),e(Nv,rX),e(rX,LWo),e(Nv,xWo),e(V,$Wo),e(V,jv),e(jv,gpe),e(gpe,kWo),e(jv,SWo),e(jv,tX),e(tX,RWo),e(jv,PWo),e(V,BWo),e(V,Dv),e(Dv,hpe),e(hpe,IWo),e(Dv,qWo),e(Dv,aX),e(aX,NWo),e(Dv,jWo),e(V,DWo),e(V,Gv),e(Gv,ppe),e(ppe,GWo),e(Gv,OWo),e(Gv,nX),e(nX,VWo),e(Gv,XWo),e(V,zWo),e(V,Ov),e(Ov,upe),e(upe,WWo),e(Ov,QWo),e(Ov,sX),e(sX,HWo),e(Ov,UWo),e(V,JWo),e(V,Vv),e(Vv,_pe),e(_pe,YWo),e(Vv,KWo),e(Vv,lX),e(lX,ZWo),e(Vv,eQo),e(V,oQo),e(V,Xv),e(Xv,bpe),e(bpe,rQo),e(Xv,tQo),e(Xv,iX),e(iX,aQo),e(Xv,nQo),e(V,sQo),e(V,zv),e(zv,vpe),e(vpe,lQo),e(zv,iQo),e(zv,dX),e(dX,dQo),e(zv,cQo),e(V,fQo),e(V,Wv),e(Wv,Fpe),e(Fpe,mQo),e(Wv,gQo),e(Wv,cX),e(cX,hQo),e(Wv,pQo),e(V,uQo),e(V,Qv),e(Qv,Tpe),e(Tpe,_Qo),e(Qv,bQo),e(Qv,fX),e(fX,vQo),e(Qv,FQo),e(V,TQo),e(V,Hv),e(Hv,Mpe),e(Mpe,MQo),e(Hv,EQo),e(Hv,mX),e(mX,CQo),e(Hv,wQo),e(V,AQo),e(V,Uv),e(Uv,Epe),e(Epe,yQo),e(Uv,LQo),e(Uv,gX),e(gX,xQo),e(Uv,$Qo),e(V,kQo),e(V,Jv),e(Jv,Cpe),e(Cpe,SQo),e(Jv,RQo),e(Jv,hX),e(hX,PQo),e(Jv,BQo),e(V,IQo),e(V,Yv),e(Yv,wpe),e(wpe,qQo),e(Yv,NQo),e(Yv,pX),e(pX,jQo),e(Yv,DQo),e(no,GQo),e(no,Kv),e(Kv,OQo),e(Kv,Ape),e(Ape,VQo),e(Kv,XQo),e(Kv,ype),e(ype,zQo),e(no,WQo),M(Zv,no,null),b(f,SNe,_),b(f,rd,_),e(rd,e5),e(e5,Lpe),M(Uy,Lpe,null),e(rd,QQo),e(rd,xpe),e(xpe,HQo),b(f,RNe,_),b(f,No,_),M(Jy,No,null),e(No,UQo),e(No,td),e(td,JQo),e(td,uX),e(uX,YQo),e(td,KQo),e(td,_X),e(_X,ZQo),e(td,eHo),e(No,oHo),e(No,Yy),e(Yy,rHo),e(Yy,$pe),e($pe,tHo),e(Yy,aHo),e(No,nHo),e(No,gt),M(Ky,gt,null),e(gt,sHo),e(gt,kpe),e(kpe,lHo),e(gt,iHo),e(gt,ad),e(ad,dHo),e(ad,Spe),e(Spe,cHo),e(ad,fHo),e(ad,bX),e(bX,mHo),e(ad,gHo),e(gt,hHo),M(o5,gt,null),e(No,pHo),e(No,so),M(Zy,so,null),e(so,uHo),e(so,Rpe),e(Rpe,_Ho),e(so,bHo),e(so,Na),e(Na,vHo),e(Na,Ppe),e(Ppe,FHo),e(Na,THo),e(Na,Bpe),e(Bpe,MHo),e(Na,EHo),e(Na,Ipe),e(Ipe,CHo),e(Na,wHo),e(so,AHo),e(so,qpe),e(qpe,r5),e(r5,Npe),e(Npe,yHo),e(r5,LHo),e(r5,vX),e(vX,xHo),e(r5,$Ho),e(so,kHo),e(so,t5),e(t5,SHo),e(t5,jpe),e(jpe,RHo),e(t5,PHo),e(t5,Dpe),e(Dpe,BHo),e(so,IHo),M(a5,so,null),b(f,PNe,_),b(f,nd,_),e(nd,n5),e(n5,Gpe),M(eL,Gpe,null),e(nd,qHo),e(nd,Ope),e(Ope,NHo),b(f,BNe,_),b(f,jo,_),M(oL,jo,null),e(jo,jHo),e(jo,sd),e(sd,DHo),e(sd,FX),e(FX,GHo),e(sd,OHo),e(sd,TX),e(TX,VHo),e(sd,XHo),e(jo,zHo),e(jo,rL),e(rL,WHo),e(rL,Vpe),e(Vpe,QHo),e(rL,HHo),e(jo,UHo),e(jo,ht),M(tL,ht,null),e(ht,JHo),e(ht,Xpe),e(Xpe,YHo),e(ht,KHo),e(ht,ld),e(ld,ZHo),e(ld,zpe),e(zpe,eUo),e(ld,oUo),e(ld,MX),e(MX,rUo),e(ld,tUo),e(ht,aUo),M(s5,ht,null),e(jo,nUo),e(jo,lo),M(aL,lo,null),e(lo,sUo),e(lo,Wpe),e(Wpe,lUo),e(lo,iUo),e(lo,ja),e(ja,dUo),e(ja,Qpe),e(Qpe,cUo),e(ja,fUo),e(ja,Hpe),e(Hpe,mUo),e(ja,gUo),e(ja,Upe),e(Upe,hUo),e(ja,pUo),e(lo,uUo),e(lo,Fe),e(Fe,l5),e(l5,Jpe),e(Jpe,_Uo),e(l5,bUo),e(l5,EX),e(EX,vUo),e(l5,FUo),e(Fe,TUo),e(Fe,i5),e(i5,Ype),e(Ype,MUo),e(i5,EUo),e(i5,CX),e(CX,CUo),e(i5,wUo),e(Fe,AUo),e(Fe,d5),e(d5,Kpe),e(Kpe,yUo),e(d5,LUo),e(d5,wX),e(wX,xUo),e(d5,$Uo),e(Fe,kUo),e(Fe,c5),e(c5,Zpe),e(Zpe,SUo),e(c5,RUo),e(c5,AX),e(AX,PUo),e(c5,BUo),e(Fe,IUo),e(Fe,Is),e(Is,eue),e(eue,qUo),e(Is,NUo),e(Is,yX),e(yX,jUo),e(Is,DUo),e(Is,LX),e(LX,GUo),e(Is,OUo),e(Fe,VUo),e(Fe,f5),e(f5,oue),e(oue,XUo),e(f5,zUo),e(f5,xX),e(xX,WUo),e(f5,QUo),e(Fe,HUo),e(Fe,pt),e(pt,rue),e(rue,UUo),e(pt,JUo),e(pt,$X),e($X,YUo),e(pt,KUo),e(pt,kX),e(kX,ZUo),e(pt,eJo),e(pt,SX),e(SX,oJo),e(pt,rJo),e(Fe,tJo),e(Fe,m5),e(m5,tue),e(tue,aJo),e(m5,nJo),e(m5,RX),e(RX,sJo),e(m5,lJo),e(Fe,iJo),e(Fe,g5),e(g5,aue),e(aue,dJo),e(g5,cJo),e(g5,PX),e(PX,fJo),e(g5,mJo),e(Fe,gJo),e(Fe,h5),e(h5,nue),e(nue,hJo),e(h5,pJo),e(h5,BX),e(BX,uJo),e(h5,_Jo),e(Fe,bJo),e(Fe,p5),e(p5,sue),e(sue,vJo),e(p5,FJo),e(p5,IX),e(IX,TJo),e(p5,MJo),e(Fe,EJo),e(Fe,u5),e(u5,lue),e(lue,CJo),e(u5,wJo),e(u5,qX),e(qX,AJo),e(u5,yJo),e(Fe,LJo),e(Fe,_5),e(_5,iue),e(iue,xJo),e(_5,$Jo),e(_5,NX),e(NX,kJo),e(_5,SJo),e(Fe,RJo),e(Fe,b5),e(b5,due),e(due,PJo),e(b5,BJo),e(b5,jX),e(jX,IJo),e(b5,qJo),e(lo,NJo),e(lo,v5),e(v5,jJo),e(v5,cue),e(cue,DJo),e(v5,GJo),e(v5,fue),e(fue,OJo),e(lo,VJo),M(F5,lo,null),b(f,INe,_),b(f,id,_),e(id,T5),e(T5,mue),M(nL,mue,null),e(id,XJo),e(id,gue),e(gue,zJo),b(f,qNe,_),b(f,Do,_),M(sL,Do,null),e(Do,WJo),e(Do,dd),e(dd,QJo),e(dd,DX),e(DX,HJo),e(dd,UJo),e(dd,GX),e(GX,JJo),e(dd,YJo),e(Do,KJo),e(Do,lL),e(lL,ZJo),e(lL,hue),e(hue,eYo),e(lL,oYo),e(Do,rYo),e(Do,ut),M(iL,ut,null),e(ut,tYo),e(ut,pue),e(pue,aYo),e(ut,nYo),e(ut,cd),e(cd,sYo),e(cd,uue),e(uue,lYo),e(cd,iYo),e(cd,OX),e(OX,dYo),e(cd,cYo),e(ut,fYo),M(M5,ut,null),e(Do,mYo),e(Do,io),M(dL,io,null),e(io,gYo),e(io,_ue),e(_ue,hYo),e(io,pYo),e(io,Da),e(Da,uYo),e(Da,bue),e(bue,_Yo),e(Da,bYo),e(Da,vue),e(vue,vYo),e(Da,FYo),e(Da,Fue),e(Fue,TYo),e(Da,MYo),e(io,EYo),e(io,Tue),e(Tue,E5),e(E5,Mue),e(Mue,CYo),e(E5,wYo),e(E5,VX),e(VX,AYo),e(E5,yYo),e(io,LYo),e(io,C5),e(C5,xYo),e(C5,Eue),e(Eue,$Yo),e(C5,kYo),e(C5,Cue),e(Cue,SYo),e(io,RYo),M(w5,io,null),b(f,NNe,_),b(f,fd,_),e(fd,A5),e(A5,wue),M(cL,wue,null),e(fd,PYo),e(fd,Aue),e(Aue,BYo),b(f,jNe,_),b(f,Go,_),M(fL,Go,null),e(Go,IYo),e(Go,md),e(md,qYo),e(md,XX),e(XX,NYo),e(md,jYo),e(md,zX),e(zX,DYo),e(md,GYo),e(Go,OYo),e(Go,mL),e(mL,VYo),e(mL,yue),e(yue,XYo),e(mL,zYo),e(Go,WYo),e(Go,_t),M(gL,_t,null),e(_t,QYo),e(_t,Lue),e(Lue,HYo),e(_t,UYo),e(_t,gd),e(gd,JYo),e(gd,xue),e(xue,YYo),e(gd,KYo),e(gd,WX),e(WX,ZYo),e(gd,eKo),e(_t,oKo),M(y5,_t,null),e(Go,rKo),e(Go,co),M(hL,co,null),e(co,tKo),e(co,$ue),e($ue,aKo),e(co,nKo),e(co,Ga),e(Ga,sKo),e(Ga,kue),e(kue,lKo),e(Ga,iKo),e(Ga,Sue),e(Sue,dKo),e(Ga,cKo),e(Ga,Rue),e(Rue,fKo),e(Ga,mKo),e(co,gKo),e(co,ke),e(ke,L5),e(L5,Pue),e(Pue,hKo),e(L5,pKo),e(L5,QX),e(QX,uKo),e(L5,_Ko),e(ke,bKo),e(ke,x5),e(x5,Bue),e(Bue,vKo),e(x5,FKo),e(x5,HX),e(HX,TKo),e(x5,MKo),e(ke,EKo),e(ke,$5),e($5,Iue),e(Iue,CKo),e($5,wKo),e($5,UX),e(UX,AKo),e($5,yKo),e(ke,LKo),e(ke,k5),e(k5,que),e(que,xKo),e(k5,$Ko),e(k5,JX),e(JX,kKo),e(k5,SKo),e(ke,RKo),e(ke,S5),e(S5,Nue),e(Nue,PKo),e(S5,BKo),e(S5,YX),e(YX,IKo),e(S5,qKo),e(ke,NKo),e(ke,R5),e(R5,jue),e(jue,jKo),e(R5,DKo),e(R5,KX),e(KX,GKo),e(R5,OKo),e(ke,VKo),e(ke,P5),e(P5,Due),e(Due,XKo),e(P5,zKo),e(P5,ZX),e(ZX,WKo),e(P5,QKo),e(ke,HKo),e(ke,B5),e(B5,Gue),e(Gue,UKo),e(B5,JKo),e(B5,ez),e(ez,YKo),e(B5,KKo),e(ke,ZKo),e(ke,I5),e(I5,Oue),e(Oue,eZo),e(I5,oZo),e(I5,oz),e(oz,rZo),e(I5,tZo),e(co,aZo),e(co,q5),e(q5,nZo),e(q5,Vue),e(Vue,sZo),e(q5,lZo),e(q5,Xue),e(Xue,iZo),e(co,dZo),M(N5,co,null),b(f,DNe,_),b(f,hd,_),e(hd,j5),e(j5,zue),M(pL,zue,null),e(hd,cZo),e(hd,Wue),e(Wue,fZo),b(f,GNe,_),b(f,Oo,_),M(uL,Oo,null),e(Oo,mZo),e(Oo,pd),e(pd,gZo),e(pd,rz),e(rz,hZo),e(pd,pZo),e(pd,tz),e(tz,uZo),e(pd,_Zo),e(Oo,bZo),e(Oo,_L),e(_L,vZo),e(_L,Que),e(Que,FZo),e(_L,TZo),e(Oo,MZo),e(Oo,bt),M(bL,bt,null),e(bt,EZo),e(bt,Hue),e(Hue,CZo),e(bt,wZo),e(bt,ud),e(ud,AZo),e(ud,Uue),e(Uue,yZo),e(ud,LZo),e(ud,az),e(az,xZo),e(ud,$Zo),e(bt,kZo),M(D5,bt,null),e(Oo,SZo),e(Oo,fo),M(vL,fo,null),e(fo,RZo),e(fo,Jue),e(Jue,PZo),e(fo,BZo),e(fo,Oa),e(Oa,IZo),e(Oa,Yue),e(Yue,qZo),e(Oa,NZo),e(Oa,Kue),e(Kue,jZo),e(Oa,DZo),e(Oa,Zue),e(Zue,GZo),e(Oa,OZo),e(fo,VZo),e(fo,Kr),e(Kr,G5),e(G5,e_e),e(e_e,XZo),e(G5,zZo),e(G5,nz),e(nz,WZo),e(G5,QZo),e(Kr,HZo),e(Kr,O5),e(O5,o_e),e(o_e,UZo),e(O5,JZo),e(O5,sz),e(sz,YZo),e(O5,KZo),e(Kr,ZZo),e(Kr,V5),e(V5,r_e),e(r_e,eer),e(V5,oer),e(V5,lz),e(lz,rer),e(V5,ter),e(Kr,aer),e(Kr,X5),e(X5,t_e),e(t_e,ner),e(X5,ser),e(X5,iz),e(iz,ler),e(X5,ier),e(Kr,der),e(Kr,z5),e(z5,a_e),e(a_e,cer),e(z5,fer),e(z5,dz),e(dz,mer),e(z5,ger),e(fo,her),e(fo,W5),e(W5,per),e(W5,n_e),e(n_e,uer),e(W5,_er),e(W5,s_e),e(s_e,ber),e(fo,ver),M(Q5,fo,null),b(f,ONe,_),b(f,_d,_),e(_d,H5),e(H5,l_e),M(FL,l_e,null),e(_d,Fer),e(_d,i_e),e(i_e,Ter),b(f,VNe,_),b(f,Vo,_),M(TL,Vo,null),e(Vo,Mer),e(Vo,bd),e(bd,Eer),e(bd,cz),e(cz,Cer),e(bd,wer),e(bd,fz),e(fz,Aer),e(bd,yer),e(Vo,Ler),e(Vo,ML),e(ML,xer),e(ML,d_e),e(d_e,$er),e(ML,ker),e(Vo,Ser),e(Vo,vt),M(EL,vt,null),e(vt,Rer),e(vt,c_e),e(c_e,Per),e(vt,Ber),e(vt,vd),e(vd,Ier),e(vd,f_e),e(f_e,qer),e(vd,Ner),e(vd,mz),e(mz,jer),e(vd,Der),e(vt,Ger),M(U5,vt,null),e(Vo,Oer),e(Vo,mo),M(CL,mo,null),e(mo,Ver),e(mo,m_e),e(m_e,Xer),e(mo,zer),e(mo,Va),e(Va,Wer),e(Va,g_e),e(g_e,Qer),e(Va,Her),e(Va,h_e),e(h_e,Uer),e(Va,Jer),e(Va,p_e),e(p_e,Yer),e(Va,Ker),e(mo,Zer),e(mo,Se),e(Se,J5),e(J5,u_e),e(u_e,eor),e(J5,oor),e(J5,gz),e(gz,ror),e(J5,tor),e(Se,aor),e(Se,Y5),e(Y5,__e),e(__e,nor),e(Y5,sor),e(Y5,hz),e(hz,lor),e(Y5,ior),e(Se,dor),e(Se,K5),e(K5,b_e),e(b_e,cor),e(K5,mor),e(K5,pz),e(pz,gor),e(K5,hor),e(Se,por),e(Se,Z5),e(Z5,v_e),e(v_e,uor),e(Z5,_or),e(Z5,uz),e(uz,bor),e(Z5,vor),e(Se,For),e(Se,eF),e(eF,F_e),e(F_e,Tor),e(eF,Mor),e(eF,_z),e(_z,Eor),e(eF,Cor),e(Se,wor),e(Se,oF),e(oF,T_e),e(T_e,Aor),e(oF,yor),e(oF,bz),e(bz,Lor),e(oF,xor),e(Se,$or),e(Se,rF),e(rF,M_e),e(M_e,kor),e(rF,Sor),e(rF,vz),e(vz,Ror),e(rF,Por),e(Se,Bor),e(Se,tF),e(tF,E_e),e(E_e,Ior),e(tF,qor),e(tF,Fz),e(Fz,Nor),e(tF,jor),e(Se,Dor),e(Se,aF),e(aF,C_e),e(C_e,Gor),e(aF,Oor),e(aF,Tz),e(Tz,Vor),e(aF,Xor),e(mo,zor),e(mo,nF),e(nF,Wor),e(nF,w_e),e(w_e,Qor),e(nF,Hor),e(nF,A_e),e(A_e,Uor),e(mo,Jor),M(sF,mo,null),b(f,XNe,_),b(f,Fd,_),e(Fd,lF),e(lF,y_e),M(wL,y_e,null),e(Fd,Yor),e(Fd,L_e),e(L_e,Kor),b(f,zNe,_),b(f,Xo,_),M(AL,Xo,null),e(Xo,Zor),e(Xo,Td),e(Td,err),e(Td,Mz),e(Mz,orr),e(Td,rrr),e(Td,Ez),e(Ez,trr),e(Td,arr),e(Xo,nrr),e(Xo,yL),e(yL,srr),e(yL,x_e),e(x_e,lrr),e(yL,irr),e(Xo,drr),e(Xo,Ft),M(LL,Ft,null),e(Ft,crr),e(Ft,$_e),e($_e,frr),e(Ft,mrr),e(Ft,Md),e(Md,grr),e(Md,k_e),e(k_e,hrr),e(Md,prr),e(Md,Cz),e(Cz,urr),e(Md,_rr),e(Ft,brr),M(iF,Ft,null),e(Xo,vrr),e(Xo,go),M(xL,go,null),e(go,Frr),e(go,S_e),e(S_e,Trr),e(go,Mrr),e(go,Xa),e(Xa,Err),e(Xa,R_e),e(R_e,Crr),e(Xa,wrr),e(Xa,P_e),e(P_e,Arr),e(Xa,yrr),e(Xa,B_e),e(B_e,Lrr),e(Xa,xrr),e(go,$rr),e(go,$L),e($L,dF),e(dF,I_e),e(I_e,krr),e(dF,Srr),e(dF,wz),e(wz,Rrr),e(dF,Prr),e($L,Brr),e($L,cF),e(cF,q_e),e(q_e,Irr),e(cF,qrr),e(cF,Az),e(Az,Nrr),e(cF,jrr),e(go,Drr),e(go,fF),e(fF,Grr),e(fF,N_e),e(N_e,Orr),e(fF,Vrr),e(fF,j_e),e(j_e,Xrr),e(go,zrr),M(mF,go,null),b(f,WNe,_),b(f,Ed,_),e(Ed,gF),e(gF,D_e),M(kL,D_e,null),e(Ed,Wrr),e(Ed,G_e),e(G_e,Qrr),b(f,QNe,_),b(f,zo,_),M(SL,zo,null),e(zo,Hrr),e(zo,Cd),e(Cd,Urr),e(Cd,yz),e(yz,Jrr),e(Cd,Yrr),e(Cd,Lz),e(Lz,Krr),e(Cd,Zrr),e(zo,etr),e(zo,RL),e(RL,otr),e(RL,O_e),e(O_e,rtr),e(RL,ttr),e(zo,atr),e(zo,Tt),M(PL,Tt,null),e(Tt,ntr),e(Tt,V_e),e(V_e,str),e(Tt,ltr),e(Tt,wd),e(wd,itr),e(wd,X_e),e(X_e,dtr),e(wd,ctr),e(wd,xz),e(xz,ftr),e(wd,mtr),e(Tt,gtr),M(hF,Tt,null),e(zo,htr),e(zo,ho),M(BL,ho,null),e(ho,ptr),e(ho,z_e),e(z_e,utr),e(ho,_tr),e(ho,za),e(za,btr),e(za,W_e),e(W_e,vtr),e(za,Ftr),e(za,Q_e),e(Q_e,Ttr),e(za,Mtr),e(za,H_e),e(H_e,Etr),e(za,Ctr),e(ho,wtr),e(ho,Zr),e(Zr,pF),e(pF,U_e),e(U_e,Atr),e(pF,ytr),e(pF,$z),e($z,Ltr),e(pF,xtr),e(Zr,$tr),e(Zr,uF),e(uF,J_e),e(J_e,ktr),e(uF,Str),e(uF,kz),e(kz,Rtr),e(uF,Ptr),e(Zr,Btr),e(Zr,_F),e(_F,Y_e),e(Y_e,Itr),e(_F,qtr),e(_F,Sz),e(Sz,Ntr),e(_F,jtr),e(Zr,Dtr),e(Zr,bF),e(bF,K_e),e(K_e,Gtr),e(bF,Otr),e(bF,Rz),e(Rz,Vtr),e(bF,Xtr),e(Zr,ztr),e(Zr,vF),e(vF,Z_e),e(Z_e,Wtr),e(vF,Qtr),e(vF,Pz),e(Pz,Htr),e(vF,Utr),e(ho,Jtr),e(ho,FF),e(FF,Ytr),e(FF,e2e),e(e2e,Ktr),e(FF,Ztr),e(FF,o2e),e(o2e,ear),e(ho,oar),M(TF,ho,null),b(f,HNe,_),b(f,Ad,_),e(Ad,MF),e(MF,r2e),M(IL,r2e,null),e(Ad,rar),e(Ad,t2e),e(t2e,tar),b(f,UNe,_),b(f,Wo,_),M(qL,Wo,null),e(Wo,aar),e(Wo,yd),e(yd,nar),e(yd,Bz),e(Bz,sar),e(yd,lar),e(yd,Iz),e(Iz,iar),e(yd,dar),e(Wo,car),e(Wo,NL),e(NL,far),e(NL,a2e),e(a2e,mar),e(NL,gar),e(Wo,har),e(Wo,Mt),M(jL,Mt,null),e(Mt,par),e(Mt,n2e),e(n2e,uar),e(Mt,_ar),e(Mt,Ld),e(Ld,bar),e(Ld,s2e),e(s2e,Far),e(Ld,Tar),e(Ld,qz),e(qz,Mar),e(Ld,Ear),e(Mt,Car),M(EF,Mt,null),e(Wo,war),e(Wo,po),M(DL,po,null),e(po,Aar),e(po,l2e),e(l2e,yar),e(po,Lar),e(po,Wa),e(Wa,xar),e(Wa,i2e),e(i2e,$ar),e(Wa,kar),e(Wa,d2e),e(d2e,Sar),e(Wa,Rar),e(Wa,c2e),e(c2e,Par),e(Wa,Bar),e(po,Iar),e(po,xd),e(xd,CF),e(CF,f2e),e(f2e,qar),e(CF,Nar),e(CF,Nz),e(Nz,jar),e(CF,Dar),e(xd,Gar),e(xd,wF),e(wF,m2e),e(m2e,Oar),e(wF,Var),e(wF,jz),e(jz,Xar),e(wF,zar),e(xd,War),e(xd,AF),e(AF,g2e),e(g2e,Qar),e(AF,Har),e(AF,Dz),e(Dz,Uar),e(AF,Jar),e(po,Yar),e(po,yF),e(yF,Kar),e(yF,h2e),e(h2e,Zar),e(yF,enr),e(yF,p2e),e(p2e,onr),e(po,rnr),M(LF,po,null),b(f,JNe,_),b(f,$d,_),e($d,xF),e(xF,u2e),M(GL,u2e,null),e($d,tnr),e($d,_2e),e(_2e,anr),b(f,YNe,_),b(f,Qo,_),M(OL,Qo,null),e(Qo,nnr),e(Qo,kd),e(kd,snr),e(kd,Gz),e(Gz,lnr),e(kd,inr),e(kd,Oz),e(Oz,dnr),e(kd,cnr),e(Qo,fnr),e(Qo,VL),e(VL,mnr),e(VL,b2e),e(b2e,gnr),e(VL,hnr),e(Qo,pnr),e(Qo,Et),M(XL,Et,null),e(Et,unr),e(Et,v2e),e(v2e,_nr),e(Et,bnr),e(Et,Sd),e(Sd,vnr),e(Sd,F2e),e(F2e,Fnr),e(Sd,Tnr),e(Sd,Vz),e(Vz,Mnr),e(Sd,Enr),e(Et,Cnr),M($F,Et,null),e(Qo,wnr),e(Qo,uo),M(zL,uo,null),e(uo,Anr),e(uo,T2e),e(T2e,ynr),e(uo,Lnr),e(uo,Qa),e(Qa,xnr),e(Qa,M2e),e(M2e,$nr),e(Qa,knr),e(Qa,E2e),e(E2e,Snr),e(Qa,Rnr),e(Qa,C2e),e(C2e,Pnr),e(Qa,Bnr),e(uo,Inr),e(uo,WL),e(WL,kF),e(kF,w2e),e(w2e,qnr),e(kF,Nnr),e(kF,Xz),e(Xz,jnr),e(kF,Dnr),e(WL,Gnr),e(WL,SF),e(SF,A2e),e(A2e,Onr),e(SF,Vnr),e(SF,zz),e(zz,Xnr),e(SF,znr),e(uo,Wnr),e(uo,RF),e(RF,Qnr),e(RF,y2e),e(y2e,Hnr),e(RF,Unr),e(RF,L2e),e(L2e,Jnr),e(uo,Ynr),M(PF,uo,null),b(f,KNe,_),b(f,Rd,_),e(Rd,BF),e(BF,x2e),M(QL,x2e,null),e(Rd,Knr),e(Rd,$2e),e($2e,Znr),b(f,ZNe,_),b(f,Ho,_),M(HL,Ho,null),e(Ho,esr),e(Ho,Pd),e(Pd,osr),e(Pd,Wz),e(Wz,rsr),e(Pd,tsr),e(Pd,Qz),e(Qz,asr),e(Pd,nsr),e(Ho,ssr),e(Ho,UL),e(UL,lsr),e(UL,k2e),e(k2e,isr),e(UL,dsr),e(Ho,csr),e(Ho,Ct),M(JL,Ct,null),e(Ct,fsr),e(Ct,S2e),e(S2e,msr),e(Ct,gsr),e(Ct,Bd),e(Bd,hsr),e(Bd,R2e),e(R2e,psr),e(Bd,usr),e(Bd,Hz),e(Hz,_sr),e(Bd,bsr),e(Ct,vsr),M(IF,Ct,null),e(Ho,Fsr),e(Ho,_o),M(YL,_o,null),e(_o,Tsr),e(_o,P2e),e(P2e,Msr),e(_o,Esr),e(_o,Ha),e(Ha,Csr),e(Ha,B2e),e(B2e,wsr),e(Ha,Asr),e(Ha,I2e),e(I2e,ysr),e(Ha,Lsr),e(Ha,q2e),e(q2e,xsr),e(Ha,$sr),e(_o,ksr),e(_o,N2e),e(N2e,qF),e(qF,j2e),e(j2e,Ssr),e(qF,Rsr),e(qF,Uz),e(Uz,Psr),e(qF,Bsr),e(_o,Isr),e(_o,NF),e(NF,qsr),e(NF,D2e),e(D2e,Nsr),e(NF,jsr),e(NF,G2e),e(G2e,Dsr),e(_o,Gsr),M(jF,_o,null),b(f,eje,_),b(f,Id,_),e(Id,DF),e(DF,O2e),M(KL,O2e,null),e(Id,Osr),e(Id,V2e),e(V2e,Vsr),b(f,oje,_),b(f,Uo,_),M(ZL,Uo,null),e(Uo,Xsr),e(Uo,qd),e(qd,zsr),e(qd,Jz),e(Jz,Wsr),e(qd,Qsr),e(qd,Yz),e(Yz,Hsr),e(qd,Usr),e(Uo,Jsr),e(Uo,e8),e(e8,Ysr),e(e8,X2e),e(X2e,Ksr),e(e8,Zsr),e(Uo,elr),e(Uo,wt),M(o8,wt,null),e(wt,olr),e(wt,z2e),e(z2e,rlr),e(wt,tlr),e(wt,Nd),e(Nd,alr),e(Nd,W2e),e(W2e,nlr),e(Nd,slr),e(Nd,Kz),e(Kz,llr),e(Nd,ilr),e(wt,dlr),M(GF,wt,null),e(Uo,clr),e(Uo,bo),M(r8,bo,null),e(bo,flr),e(bo,Q2e),e(Q2e,mlr),e(bo,glr),e(bo,Ua),e(Ua,hlr),e(Ua,H2e),e(H2e,plr),e(Ua,ulr),e(Ua,U2e),e(U2e,_lr),e(Ua,blr),e(Ua,J2e),e(J2e,vlr),e(Ua,Flr),e(bo,Tlr),e(bo,Ja),e(Ja,OF),e(OF,Y2e),e(Y2e,Mlr),e(OF,Elr),e(OF,Zz),e(Zz,Clr),e(OF,wlr),e(Ja,Alr),e(Ja,VF),e(VF,K2e),e(K2e,ylr),e(VF,Llr),e(VF,eW),e(eW,xlr),e(VF,$lr),e(Ja,klr),e(Ja,XF),e(XF,Z2e),e(Z2e,Slr),e(XF,Rlr),e(XF,oW),e(oW,Plr),e(XF,Blr),e(Ja,Ilr),e(Ja,zF),e(zF,e1e),e(e1e,qlr),e(zF,Nlr),e(zF,rW),e(rW,jlr),e(zF,Dlr),e(bo,Glr),e(bo,WF),e(WF,Olr),e(WF,o1e),e(o1e,Vlr),e(WF,Xlr),e(WF,r1e),e(r1e,zlr),e(bo,Wlr),M(QF,bo,null),b(f,rje,_),b(f,jd,_),e(jd,HF),e(HF,t1e),M(t8,t1e,null),e(jd,Qlr),e(jd,a1e),e(a1e,Hlr),b(f,tje,_),b(f,Jo,_),M(a8,Jo,null),e(Jo,Ulr),e(Jo,Dd),e(Dd,Jlr),e(Dd,tW),e(tW,Ylr),e(Dd,Klr),e(Dd,aW),e(aW,Zlr),e(Dd,eir),e(Jo,oir),e(Jo,n8),e(n8,rir),e(n8,n1e),e(n1e,tir),e(n8,air),e(Jo,nir),e(Jo,At),M(s8,At,null),e(At,sir),e(At,s1e),e(s1e,lir),e(At,iir),e(At,Gd),e(Gd,dir),e(Gd,l1e),e(l1e,cir),e(Gd,fir),e(Gd,nW),e(nW,mir),e(Gd,gir),e(At,hir),M(UF,At,null),e(Jo,pir),e(Jo,vo),M(l8,vo,null),e(vo,uir),e(vo,i1e),e(i1e,_ir),e(vo,bir),e(vo,Ya),e(Ya,vir),e(Ya,d1e),e(d1e,Fir),e(Ya,Tir),e(Ya,c1e),e(c1e,Mir),e(Ya,Eir),e(Ya,f1e),e(f1e,Cir),e(Ya,wir),e(vo,Air),e(vo,m1e),e(m1e,JF),e(JF,g1e),e(g1e,yir),e(JF,Lir),e(JF,sW),e(sW,xir),e(JF,$ir),e(vo,kir),e(vo,YF),e(YF,Sir),e(YF,h1e),e(h1e,Rir),e(YF,Pir),e(YF,p1e),e(p1e,Bir),e(vo,Iir),M(KF,vo,null),b(f,aje,_),b(f,Od,_),e(Od,ZF),e(ZF,u1e),M(i8,u1e,null),e(Od,qir),e(Od,_1e),e(_1e,Nir),b(f,nje,_),b(f,Yo,_),M(d8,Yo,null),e(Yo,jir),e(Yo,Vd),e(Vd,Dir),e(Vd,lW),e(lW,Gir),e(Vd,Oir),e(Vd,iW),e(iW,Vir),e(Vd,Xir),e(Yo,zir),e(Yo,c8),e(c8,Wir),e(c8,b1e),e(b1e,Qir),e(c8,Hir),e(Yo,Uir),e(Yo,yt),M(f8,yt,null),e(yt,Jir),e(yt,v1e),e(v1e,Yir),e(yt,Kir),e(yt,Xd),e(Xd,Zir),e(Xd,F1e),e(F1e,edr),e(Xd,odr),e(Xd,dW),e(dW,rdr),e(Xd,tdr),e(yt,adr),M(eT,yt,null),e(Yo,ndr),e(Yo,wr),M(m8,wr,null),e(wr,sdr),e(wr,T1e),e(T1e,ldr),e(wr,idr),e(wr,Ka),e(Ka,ddr),e(Ka,M1e),e(M1e,cdr),e(Ka,fdr),e(Ka,E1e),e(E1e,mdr),e(Ka,gdr),e(Ka,C1e),e(C1e,hdr),e(Ka,pdr),e(wr,udr),e(wr,N),e(N,oT),e(oT,w1e),e(w1e,_dr),e(oT,bdr),e(oT,cW),e(cW,vdr),e(oT,Fdr),e(N,Tdr),e(N,rT),e(rT,A1e),e(A1e,Mdr),e(rT,Edr),e(rT,fW),e(fW,Cdr),e(rT,wdr),e(N,Adr),e(N,tT),e(tT,y1e),e(y1e,ydr),e(tT,Ldr),e(tT,mW),e(mW,xdr),e(tT,$dr),e(N,kdr),e(N,aT),e(aT,L1e),e(L1e,Sdr),e(aT,Rdr),e(aT,gW),e(gW,Pdr),e(aT,Bdr),e(N,Idr),e(N,nT),e(nT,x1e),e(x1e,qdr),e(nT,Ndr),e(nT,hW),e(hW,jdr),e(nT,Ddr),e(N,Gdr),e(N,sT),e(sT,$1e),e($1e,Odr),e(sT,Vdr),e(sT,pW),e(pW,Xdr),e(sT,zdr),e(N,Wdr),e(N,lT),e(lT,k1e),e(k1e,Qdr),e(lT,Hdr),e(lT,uW),e(uW,Udr),e(lT,Jdr),e(N,Ydr),e(N,iT),e(iT,S1e),e(S1e,Kdr),e(iT,Zdr),e(iT,_W),e(_W,ecr),e(iT,ocr),e(N,rcr),e(N,dT),e(dT,R1e),e(R1e,tcr),e(dT,acr),e(dT,bW),e(bW,ncr),e(dT,scr),e(N,lcr),e(N,cT),e(cT,P1e),e(P1e,icr),e(cT,dcr),e(cT,vW),e(vW,ccr),e(cT,fcr),e(N,mcr),e(N,fT),e(fT,B1e),e(B1e,gcr),e(fT,hcr),e(fT,FW),e(FW,pcr),e(fT,ucr),e(N,_cr),e(N,mT),e(mT,I1e),e(I1e,bcr),e(mT,vcr),e(mT,TW),e(TW,Fcr),e(mT,Tcr),e(N,Mcr),e(N,gT),e(gT,q1e),e(q1e,Ecr),e(gT,Ccr),e(gT,MW),e(MW,wcr),e(gT,Acr),e(N,ycr),e(N,hT),e(hT,N1e),e(N1e,Lcr),e(hT,xcr),e(hT,EW),e(EW,$cr),e(hT,kcr),e(N,Scr),e(N,pT),e(pT,j1e),e(j1e,Rcr),e(pT,Pcr),e(pT,CW),e(CW,Bcr),e(pT,Icr),e(N,qcr),e(N,uT),e(uT,D1e),e(D1e,Ncr),e(uT,jcr),e(uT,wW),e(wW,Dcr),e(uT,Gcr),e(N,Ocr),e(N,_T),e(_T,G1e),e(G1e,Vcr),e(_T,Xcr),e(_T,AW),e(AW,zcr),e(_T,Wcr),e(N,Qcr),e(N,qs),e(qs,O1e),e(O1e,Hcr),e(qs,Ucr),e(qs,yW),e(yW,Jcr),e(qs,Ycr),e(qs,LW),e(LW,Kcr),e(qs,Zcr),e(N,efr),e(N,bT),e(bT,V1e),e(V1e,ofr),e(bT,rfr),e(bT,xW),e(xW,tfr),e(bT,afr),e(N,nfr),e(N,vT),e(vT,X1e),e(X1e,sfr),e(vT,lfr),e(vT,$W),e($W,ifr),e(vT,dfr),e(N,cfr),e(N,FT),e(FT,z1e),e(z1e,ffr),e(FT,mfr),e(FT,kW),e(kW,gfr),e(FT,hfr),e(N,pfr),e(N,TT),e(TT,W1e),e(W1e,ufr),e(TT,_fr),e(TT,SW),e(SW,bfr),e(TT,vfr),e(N,Ffr),e(N,MT),e(MT,Q1e),e(Q1e,Tfr),e(MT,Mfr),e(MT,RW),e(RW,Efr),e(MT,Cfr),e(N,wfr),e(N,ET),e(ET,H1e),e(H1e,Afr),e(ET,yfr),e(ET,PW),e(PW,Lfr),e(ET,xfr),e(N,$fr),e(N,CT),e(CT,U1e),e(U1e,kfr),e(CT,Sfr),e(CT,BW),e(BW,Rfr),e(CT,Pfr),e(N,Bfr),e(N,wT),e(wT,J1e),e(J1e,Ifr),e(wT,qfr),e(wT,IW),e(IW,Nfr),e(wT,jfr),e(N,Dfr),e(N,AT),e(AT,Y1e),e(Y1e,Gfr),e(AT,Ofr),e(AT,qW),e(qW,Vfr),e(AT,Xfr),e(N,zfr),e(N,yT),e(yT,K1e),e(K1e,Wfr),e(yT,Qfr),e(yT,NW),e(NW,Hfr),e(yT,Ufr),e(N,Jfr),e(N,LT),e(LT,Z1e),e(Z1e,Yfr),e(LT,Kfr),e(LT,jW),e(jW,Zfr),e(LT,emr),e(N,omr),e(N,xT),e(xT,ebe),e(ebe,rmr),e(xT,tmr),e(xT,DW),e(DW,amr),e(xT,nmr),e(N,smr),e(N,$T),e($T,obe),e(obe,lmr),e($T,imr),e($T,GW),e(GW,dmr),e($T,cmr),e(N,fmr),e(N,kT),e(kT,rbe),e(rbe,mmr),e(kT,gmr),e(kT,OW),e(OW,hmr),e(kT,pmr),e(N,umr),e(N,ST),e(ST,tbe),e(tbe,_mr),e(ST,bmr),e(ST,VW),e(VW,vmr),e(ST,Fmr),e(N,Tmr),e(N,RT),e(RT,abe),e(abe,Mmr),e(RT,Emr),e(RT,XW),e(XW,Cmr),e(RT,wmr),e(N,Amr),e(N,PT),e(PT,nbe),e(nbe,ymr),e(PT,Lmr),e(PT,zW),e(zW,xmr),e(PT,$mr),e(N,kmr),e(N,BT),e(BT,sbe),e(sbe,Smr),e(BT,Rmr),e(BT,WW),e(WW,Pmr),e(BT,Bmr),e(N,Imr),e(N,IT),e(IT,lbe),e(lbe,qmr),e(IT,Nmr),e(IT,QW),e(QW,jmr),e(IT,Dmr),e(N,Gmr),e(N,qT),e(qT,ibe),e(ibe,Omr),e(qT,Vmr),e(qT,HW),e(HW,Xmr),e(qT,zmr),e(N,Wmr),e(N,NT),e(NT,dbe),e(dbe,Qmr),e(NT,Hmr),e(NT,UW),e(UW,Umr),e(NT,Jmr),e(N,Ymr),e(N,jT),e(jT,cbe),e(cbe,Kmr),e(jT,Zmr),e(jT,JW),e(JW,egr),e(jT,ogr),e(N,rgr),e(N,DT),e(DT,fbe),e(fbe,tgr),e(DT,agr),e(DT,YW),e(YW,ngr),e(DT,sgr),e(N,lgr),e(N,GT),e(GT,mbe),e(mbe,igr),e(GT,dgr),e(GT,KW),e(KW,cgr),e(GT,fgr),e(N,mgr),e(N,OT),e(OT,gbe),e(gbe,ggr),e(OT,hgr),e(OT,ZW),e(ZW,pgr),e(OT,ugr),e(N,_gr),e(N,VT),e(VT,hbe),e(hbe,bgr),e(VT,vgr),e(VT,eQ),e(eQ,Fgr),e(VT,Tgr),e(N,Mgr),e(N,XT),e(XT,pbe),e(pbe,Egr),e(XT,Cgr),e(XT,oQ),e(oQ,wgr),e(XT,Agr),e(N,ygr),e(N,zT),e(zT,ube),e(ube,Lgr),e(zT,xgr),e(zT,rQ),e(rQ,$gr),e(zT,kgr),e(wr,Sgr),M(WT,wr,null),b(f,sje,_),b(f,zd,_),e(zd,QT),e(QT,_be),M(g8,_be,null),e(zd,Rgr),e(zd,bbe),e(bbe,Pgr),b(f,lje,_),b(f,Ko,_),M(h8,Ko,null),e(Ko,Bgr),e(Ko,Wd),e(Wd,Igr),e(Wd,tQ),e(tQ,qgr),e(Wd,Ngr),e(Wd,aQ),e(aQ,jgr),e(Wd,Dgr),e(Ko,Ggr),e(Ko,p8),e(p8,Ogr),e(p8,vbe),e(vbe,Vgr),e(p8,Xgr),e(Ko,zgr),e(Ko,Lt),M(u8,Lt,null),e(Lt,Wgr),e(Lt,Fbe),e(Fbe,Qgr),e(Lt,Hgr),e(Lt,Qd),e(Qd,Ugr),e(Qd,Tbe),e(Tbe,Jgr),e(Qd,Ygr),e(Qd,nQ),e(nQ,Kgr),e(Qd,Zgr),e(Lt,ehr),M(HT,Lt,null),e(Ko,ohr),e(Ko,Ar),M(_8,Ar,null),e(Ar,rhr),e(Ar,Mbe),e(Mbe,thr),e(Ar,ahr),e(Ar,Za),e(Za,nhr),e(Za,Ebe),e(Ebe,shr),e(Za,lhr),e(Za,Cbe),e(Cbe,ihr),e(Za,dhr),e(Za,wbe),e(wbe,chr),e(Za,fhr),e(Ar,mhr),e(Ar,se),e(se,UT),e(UT,Abe),e(Abe,ghr),e(UT,hhr),e(UT,sQ),e(sQ,phr),e(UT,uhr),e(se,_hr),e(se,JT),e(JT,ybe),e(ybe,bhr),e(JT,vhr),e(JT,lQ),e(lQ,Fhr),e(JT,Thr),e(se,Mhr),e(se,YT),e(YT,Lbe),e(Lbe,Ehr),e(YT,Chr),e(YT,iQ),e(iQ,whr),e(YT,Ahr),e(se,yhr),e(se,KT),e(KT,xbe),e(xbe,Lhr),e(KT,xhr),e(KT,dQ),e(dQ,$hr),e(KT,khr),e(se,Shr),e(se,ZT),e(ZT,$be),e($be,Rhr),e(ZT,Phr),e(ZT,cQ),e(cQ,Bhr),e(ZT,Ihr),e(se,qhr),e(se,e7),e(e7,kbe),e(kbe,Nhr),e(e7,jhr),e(e7,fQ),e(fQ,Dhr),e(e7,Ghr),e(se,Ohr),e(se,o7),e(o7,Sbe),e(Sbe,Vhr),e(o7,Xhr),e(o7,mQ),e(mQ,zhr),e(o7,Whr),e(se,Qhr),e(se,r7),e(r7,Rbe),e(Rbe,Hhr),e(r7,Uhr),e(r7,gQ),e(gQ,Jhr),e(r7,Yhr),e(se,Khr),e(se,t7),e(t7,Pbe),e(Pbe,Zhr),e(t7,epr),e(t7,hQ),e(hQ,opr),e(t7,rpr),e(se,tpr),e(se,a7),e(a7,Bbe),e(Bbe,apr),e(a7,npr),e(a7,pQ),e(pQ,spr),e(a7,lpr),e(se,ipr),e(se,n7),e(n7,Ibe),e(Ibe,dpr),e(n7,cpr),e(n7,uQ),e(uQ,fpr),e(n7,mpr),e(se,gpr),e(se,s7),e(s7,qbe),e(qbe,hpr),e(s7,ppr),e(s7,_Q),e(_Q,upr),e(s7,_pr),e(se,bpr),e(se,l7),e(l7,Nbe),e(Nbe,vpr),e(l7,Fpr),e(l7,bQ),e(bQ,Tpr),e(l7,Mpr),e(se,Epr),e(se,i7),e(i7,jbe),e(jbe,Cpr),e(i7,wpr),e(i7,vQ),e(vQ,Apr),e(i7,ypr),e(se,Lpr),e(se,d7),e(d7,Dbe),e(Dbe,xpr),e(d7,$pr),e(d7,FQ),e(FQ,kpr),e(d7,Spr),e(se,Rpr),e(se,c7),e(c7,Gbe),e(Gbe,Ppr),e(c7,Bpr),e(c7,TQ),e(TQ,Ipr),e(c7,qpr),e(se,Npr),e(se,f7),e(f7,Obe),e(Obe,jpr),e(f7,Dpr),e(f7,MQ),e(MQ,Gpr),e(f7,Opr),e(se,Vpr),e(se,m7),e(m7,Vbe),e(Vbe,Xpr),e(m7,zpr),e(m7,EQ),e(EQ,Wpr),e(m7,Qpr),e(se,Hpr),e(se,g7),e(g7,Xbe),e(Xbe,Upr),e(g7,Jpr),e(g7,CQ),e(CQ,Ypr),e(g7,Kpr),e(se,Zpr),e(se,h7),e(h7,zbe),e(zbe,eur),e(h7,our),e(h7,wQ),e(wQ,rur),e(h7,tur),e(se,aur),e(se,p7),e(p7,Wbe),e(Wbe,nur),e(p7,sur),e(p7,AQ),e(AQ,lur),e(p7,iur),e(se,dur),e(se,u7),e(u7,Qbe),e(Qbe,cur),e(u7,fur),e(u7,yQ),e(yQ,mur),e(u7,gur),e(se,hur),e(se,_7),e(_7,Hbe),e(Hbe,pur),e(_7,uur),e(_7,LQ),e(LQ,_ur),e(_7,bur),e(Ar,vur),M(b7,Ar,null),b(f,ije,_),b(f,Hd,_),e(Hd,v7),e(v7,Ube),M(b8,Ube,null),e(Hd,Fur),e(Hd,Jbe),e(Jbe,Tur),b(f,dje,_),b(f,Zo,_),M(v8,Zo,null),e(Zo,Mur),e(Zo,Ud),e(Ud,Eur),e(Ud,xQ),e(xQ,Cur),e(Ud,wur),e(Ud,$Q),e($Q,Aur),e(Ud,yur),e(Zo,Lur),e(Zo,F8),e(F8,xur),e(F8,Ybe),e(Ybe,$ur),e(F8,kur),e(Zo,Sur),e(Zo,xt),M(T8,xt,null),e(xt,Rur),e(xt,Kbe),e(Kbe,Pur),e(xt,Bur),e(xt,Jd),e(Jd,Iur),e(Jd,Zbe),e(Zbe,qur),e(Jd,Nur),e(Jd,kQ),e(kQ,jur),e(Jd,Dur),e(xt,Gur),M(F7,xt,null),e(Zo,Our),e(Zo,yr),M(M8,yr,null),e(yr,Vur),e(yr,e4e),e(e4e,Xur),e(yr,zur),e(yr,en),e(en,Wur),e(en,o4e),e(o4e,Qur),e(en,Hur),e(en,r4e),e(r4e,Uur),e(en,Jur),e(en,t4e),e(t4e,Yur),e(en,Kur),e(yr,Zur),e(yr,Me),e(Me,T7),e(T7,a4e),e(a4e,e_r),e(T7,o_r),e(T7,SQ),e(SQ,r_r),e(T7,t_r),e(Me,a_r),e(Me,M7),e(M7,n4e),e(n4e,n_r),e(M7,s_r),e(M7,RQ),e(RQ,l_r),e(M7,i_r),e(Me,d_r),e(Me,E7),e(E7,s4e),e(s4e,c_r),e(E7,f_r),e(E7,PQ),e(PQ,m_r),e(E7,g_r),e(Me,h_r),e(Me,C7),e(C7,l4e),e(l4e,p_r),e(C7,u_r),e(C7,BQ),e(BQ,__r),e(C7,b_r),e(Me,v_r),e(Me,w7),e(w7,i4e),e(i4e,F_r),e(w7,T_r),e(w7,IQ),e(IQ,M_r),e(w7,E_r),e(Me,C_r),e(Me,A7),e(A7,d4e),e(d4e,w_r),e(A7,A_r),e(A7,qQ),e(qQ,y_r),e(A7,L_r),e(Me,x_r),e(Me,y7),e(y7,c4e),e(c4e,$_r),e(y7,k_r),e(y7,NQ),e(NQ,S_r),e(y7,R_r),e(Me,P_r),e(Me,L7),e(L7,f4e),e(f4e,B_r),e(L7,I_r),e(L7,jQ),e(jQ,q_r),e(L7,N_r),e(Me,j_r),e(Me,x7),e(x7,m4e),e(m4e,D_r),e(x7,G_r),e(x7,DQ),e(DQ,O_r),e(x7,V_r),e(Me,X_r),e(Me,$7),e($7,g4e),e(g4e,z_r),e($7,W_r),e($7,GQ),e(GQ,Q_r),e($7,H_r),e(Me,U_r),e(Me,k7),e(k7,h4e),e(h4e,J_r),e(k7,Y_r),e(k7,OQ),e(OQ,K_r),e(k7,Z_r),e(Me,e2r),e(Me,S7),e(S7,p4e),e(p4e,o2r),e(S7,r2r),e(S7,VQ),e(VQ,t2r),e(S7,a2r),e(yr,n2r),M(R7,yr,null),b(f,cje,_),b(f,Yd,_),e(Yd,P7),e(P7,u4e),M(E8,u4e,null),e(Yd,s2r),e(Yd,_4e),e(_4e,l2r),b(f,fje,_),b(f,er,_),M(C8,er,null),e(er,i2r),e(er,Kd),e(Kd,d2r),e(Kd,XQ),e(XQ,c2r),e(Kd,f2r),e(Kd,zQ),e(zQ,m2r),e(Kd,g2r),e(er,h2r),e(er,w8),e(w8,p2r),e(w8,b4e),e(b4e,u2r),e(w8,_2r),e(er,b2r),e(er,$t),M(A8,$t,null),e($t,v2r),e($t,v4e),e(v4e,F2r),e($t,T2r),e($t,Zd),e(Zd,M2r),e(Zd,F4e),e(F4e,E2r),e(Zd,C2r),e(Zd,WQ),e(WQ,w2r),e(Zd,A2r),e($t,y2r),M(B7,$t,null),e(er,L2r),e(er,Lr),M(y8,Lr,null),e(Lr,x2r),e(Lr,T4e),e(T4e,$2r),e(Lr,k2r),e(Lr,on),e(on,S2r),e(on,M4e),e(M4e,R2r),e(on,P2r),e(on,E4e),e(E4e,B2r),e(on,I2r),e(on,C4e),e(C4e,q2r),e(on,N2r),e(Lr,j2r),e(Lr,rn),e(rn,I7),e(I7,w4e),e(w4e,D2r),e(I7,G2r),e(I7,QQ),e(QQ,O2r),e(I7,V2r),e(rn,X2r),e(rn,q7),e(q7,A4e),e(A4e,z2r),e(q7,W2r),e(q7,HQ),e(HQ,Q2r),e(q7,H2r),e(rn,U2r),e(rn,N7),e(N7,y4e),e(y4e,J2r),e(N7,Y2r),e(N7,UQ),e(UQ,K2r),e(N7,Z2r),e(rn,e1r),e(rn,j7),e(j7,L4e),e(L4e,o1r),e(j7,r1r),e(j7,JQ),e(JQ,t1r),e(j7,a1r),e(Lr,n1r),M(D7,Lr,null),b(f,mje,_),b(f,ec,_),e(ec,G7),e(G7,x4e),M(L8,x4e,null),e(ec,s1r),e(ec,$4e),e($4e,l1r),b(f,gje,_),b(f,or,_),M(x8,or,null),e(or,i1r),e(or,oc),e(oc,d1r),e(oc,YQ),e(YQ,c1r),e(oc,f1r),e(oc,KQ),e(KQ,m1r),e(oc,g1r),e(or,h1r),e(or,$8),e($8,p1r),e($8,k4e),e(k4e,u1r),e($8,_1r),e(or,b1r),e(or,kt),M(k8,kt,null),e(kt,v1r),e(kt,S4e),e(S4e,F1r),e(kt,T1r),e(kt,rc),e(rc,M1r),e(rc,R4e),e(R4e,E1r),e(rc,C1r),e(rc,ZQ),e(ZQ,w1r),e(rc,A1r),e(kt,y1r),M(O7,kt,null),e(or,L1r),e(or,xr),M(S8,xr,null),e(xr,x1r),e(xr,P4e),e(P4e,$1r),e(xr,k1r),e(xr,tn),e(tn,S1r),e(tn,B4e),e(B4e,R1r),e(tn,P1r),e(tn,I4e),e(I4e,B1r),e(tn,I1r),e(tn,q4e),e(q4e,q1r),e(tn,N1r),e(xr,j1r),e(xr,ie),e(ie,V7),e(V7,N4e),e(N4e,D1r),e(V7,G1r),e(V7,eH),e(eH,O1r),e(V7,V1r),e(ie,X1r),e(ie,X7),e(X7,j4e),e(j4e,z1r),e(X7,W1r),e(X7,oH),e(oH,Q1r),e(X7,H1r),e(ie,U1r),e(ie,z7),e(z7,D4e),e(D4e,J1r),e(z7,Y1r),e(z7,rH),e(rH,K1r),e(z7,Z1r),e(ie,ebr),e(ie,W7),e(W7,G4e),e(G4e,obr),e(W7,rbr),e(W7,tH),e(tH,tbr),e(W7,abr),e(ie,nbr),e(ie,Q7),e(Q7,O4e),e(O4e,sbr),e(Q7,lbr),e(Q7,aH),e(aH,ibr),e(Q7,dbr),e(ie,cbr),e(ie,H7),e(H7,V4e),e(V4e,fbr),e(H7,mbr),e(H7,nH),e(nH,gbr),e(H7,hbr),e(ie,pbr),e(ie,U7),e(U7,X4e),e(X4e,ubr),e(U7,_br),e(U7,sH),e(sH,bbr),e(U7,vbr),e(ie,Fbr),e(ie,J7),e(J7,z4e),e(z4e,Tbr),e(J7,Mbr),e(J7,lH),e(lH,Ebr),e(J7,Cbr),e(ie,wbr),e(ie,Y7),e(Y7,W4e),e(W4e,Abr),e(Y7,ybr),e(Y7,iH),e(iH,Lbr),e(Y7,xbr),e(ie,$br),e(ie,K7),e(K7,Q4e),e(Q4e,kbr),e(K7,Sbr),e(K7,dH),e(dH,Rbr),e(K7,Pbr),e(ie,Bbr),e(ie,Z7),e(Z7,H4e),e(H4e,Ibr),e(Z7,qbr),e(Z7,cH),e(cH,Nbr),e(Z7,jbr),e(ie,Dbr),e(ie,eM),e(eM,U4e),e(U4e,Gbr),e(eM,Obr),e(eM,fH),e(fH,Vbr),e(eM,Xbr),e(ie,zbr),e(ie,oM),e(oM,J4e),e(J4e,Wbr),e(oM,Qbr),e(oM,mH),e(mH,Hbr),e(oM,Ubr),e(ie,Jbr),e(ie,rM),e(rM,Y4e),e(Y4e,Ybr),e(rM,Kbr),e(rM,gH),e(gH,Zbr),e(rM,e4r),e(ie,o4r),e(ie,tM),e(tM,K4e),e(K4e,r4r),e(tM,t4r),e(tM,hH),e(hH,a4r),e(tM,n4r),e(ie,s4r),e(ie,aM),e(aM,Z4e),e(Z4e,l4r),e(aM,i4r),e(aM,pH),e(pH,d4r),e(aM,c4r),e(ie,f4r),e(ie,nM),e(nM,eve),e(eve,m4r),e(nM,g4r),e(nM,uH),e(uH,h4r),e(nM,p4r),e(ie,u4r),e(ie,sM),e(sM,ove),e(ove,_4r),e(sM,b4r),e(sM,_H),e(_H,v4r),e(sM,F4r),e(ie,T4r),e(ie,lM),e(lM,rve),e(rve,M4r),e(lM,E4r),e(lM,bH),e(bH,C4r),e(lM,w4r),e(ie,A4r),e(ie,iM),e(iM,tve),e(tve,y4r),e(iM,L4r),e(iM,vH),e(vH,x4r),e(iM,$4r),e(xr,k4r),M(dM,xr,null),b(f,hje,_),b(f,tc,_),e(tc,cM),e(cM,ave),M(R8,ave,null),e(tc,S4r),e(tc,nve),e(nve,R4r),b(f,pje,_),b(f,rr,_),M(P8,rr,null),e(rr,P4r),e(rr,ac),e(ac,B4r),e(ac,FH),e(FH,I4r),e(ac,q4r),e(ac,TH),e(TH,N4r),e(ac,j4r),e(rr,D4r),e(rr,B8),e(B8,G4r),e(B8,sve),e(sve,O4r),e(B8,V4r),e(rr,X4r),e(rr,St),M(I8,St,null),e(St,z4r),e(St,lve),e(lve,W4r),e(St,Q4r),e(St,nc),e(nc,H4r),e(nc,ive),e(ive,U4r),e(nc,J4r),e(nc,MH),e(MH,Y4r),e(nc,K4r),e(St,Z4r),M(fM,St,null),e(rr,evr),e(rr,$r),M(q8,$r,null),e($r,ovr),e($r,dve),e(dve,rvr),e($r,tvr),e($r,an),e(an,avr),e(an,cve),e(cve,nvr),e(an,svr),e(an,fve),e(fve,lvr),e(an,ivr),e(an,mve),e(mve,dvr),e(an,cvr),e($r,fvr),e($r,ye),e(ye,mM),e(mM,gve),e(gve,mvr),e(mM,gvr),e(mM,EH),e(EH,hvr),e(mM,pvr),e(ye,uvr),e(ye,gM),e(gM,hve),e(hve,_vr),e(gM,bvr),e(gM,CH),e(CH,vvr),e(gM,Fvr),e(ye,Tvr),e(ye,hM),e(hM,pve),e(pve,Mvr),e(hM,Evr),e(hM,wH),e(wH,Cvr),e(hM,wvr),e(ye,Avr),e(ye,pM),e(pM,uve),e(uve,yvr),e(pM,Lvr),e(pM,AH),e(AH,xvr),e(pM,$vr),e(ye,kvr),e(ye,uM),e(uM,_ve),e(_ve,Svr),e(uM,Rvr),e(uM,yH),e(yH,Pvr),e(uM,Bvr),e(ye,Ivr),e(ye,_M),e(_M,bve),e(bve,qvr),e(_M,Nvr),e(_M,LH),e(LH,jvr),e(_M,Dvr),e(ye,Gvr),e(ye,bM),e(bM,vve),e(vve,Ovr),e(bM,Vvr),e(bM,xH),e(xH,Xvr),e(bM,zvr),e(ye,Wvr),e(ye,vM),e(vM,Fve),e(Fve,Qvr),e(vM,Hvr),e(vM,$H),e($H,Uvr),e(vM,Jvr),e(ye,Yvr),e(ye,FM),e(FM,Tve),e(Tve,Kvr),e(FM,Zvr),e(FM,kH),e(kH,e5r),e(FM,o5r),e(ye,r5r),e(ye,TM),e(TM,Mve),e(Mve,t5r),e(TM,a5r),e(TM,SH),e(SH,n5r),e(TM,s5r),e($r,l5r),M(MM,$r,null),b(f,uje,_),b(f,sc,_),e(sc,EM),e(EM,Eve),M(N8,Eve,null),e(sc,i5r),e(sc,Cve),e(Cve,d5r),b(f,_je,_),b(f,tr,_),M(j8,tr,null),e(tr,c5r),e(tr,lc),e(lc,f5r),e(lc,RH),e(RH,m5r),e(lc,g5r),e(lc,PH),e(PH,h5r),e(lc,p5r),e(tr,u5r),e(tr,D8),e(D8,_5r),e(D8,wve),e(wve,b5r),e(D8,v5r),e(tr,F5r),e(tr,Rt),M(G8,Rt,null),e(Rt,T5r),e(Rt,Ave),e(Ave,M5r),e(Rt,E5r),e(Rt,ic),e(ic,C5r),e(ic,yve),e(yve,w5r),e(ic,A5r),e(ic,BH),e(BH,y5r),e(ic,L5r),e(Rt,x5r),M(CM,Rt,null),e(tr,$5r),e(tr,kr),M(O8,kr,null),e(kr,k5r),e(kr,Lve),e(Lve,S5r),e(kr,R5r),e(kr,nn),e(nn,P5r),e(nn,xve),e(xve,B5r),e(nn,I5r),e(nn,$ve),e($ve,q5r),e(nn,N5r),e(nn,kve),e(kve,j5r),e(nn,D5r),e(kr,G5r),e(kr,oe),e(oe,wM),e(wM,Sve),e(Sve,O5r),e(wM,V5r),e(wM,IH),e(IH,X5r),e(wM,z5r),e(oe,W5r),e(oe,AM),e(AM,Rve),e(Rve,Q5r),e(AM,H5r),e(AM,qH),e(qH,U5r),e(AM,J5r),e(oe,Y5r),e(oe,yM),e(yM,Pve),e(Pve,K5r),e(yM,Z5r),e(yM,NH),e(NH,eFr),e(yM,oFr),e(oe,rFr),e(oe,LM),e(LM,Bve),e(Bve,tFr),e(LM,aFr),e(LM,jH),e(jH,nFr),e(LM,sFr),e(oe,lFr),e(oe,xM),e(xM,Ive),e(Ive,iFr),e(xM,dFr),e(xM,DH),e(DH,cFr),e(xM,fFr),e(oe,mFr),e(oe,$M),e($M,qve),e(qve,gFr),e($M,hFr),e($M,GH),e(GH,pFr),e($M,uFr),e(oe,_Fr),e(oe,kM),e(kM,Nve),e(Nve,bFr),e(kM,vFr),e(kM,OH),e(OH,FFr),e(kM,TFr),e(oe,MFr),e(oe,SM),e(SM,jve),e(jve,EFr),e(SM,CFr),e(SM,VH),e(VH,wFr),e(SM,AFr),e(oe,yFr),e(oe,RM),e(RM,Dve),e(Dve,LFr),e(RM,xFr),e(RM,XH),e(XH,$Fr),e(RM,kFr),e(oe,SFr),e(oe,PM),e(PM,Gve),e(Gve,RFr),e(PM,PFr),e(PM,zH),e(zH,BFr),e(PM,IFr),e(oe,qFr),e(oe,BM),e(BM,Ove),e(Ove,NFr),e(BM,jFr),e(BM,WH),e(WH,DFr),e(BM,GFr),e(oe,OFr),e(oe,IM),e(IM,Vve),e(Vve,VFr),e(IM,XFr),e(IM,QH),e(QH,zFr),e(IM,WFr),e(oe,QFr),e(oe,qM),e(qM,Xve),e(Xve,HFr),e(qM,UFr),e(qM,HH),e(HH,JFr),e(qM,YFr),e(oe,KFr),e(oe,NM),e(NM,zve),e(zve,ZFr),e(NM,eTr),e(NM,UH),e(UH,oTr),e(NM,rTr),e(oe,tTr),e(oe,jM),e(jM,Wve),e(Wve,aTr),e(jM,nTr),e(jM,JH),e(JH,sTr),e(jM,lTr),e(oe,iTr),e(oe,DM),e(DM,Qve),e(Qve,dTr),e(DM,cTr),e(DM,YH),e(YH,fTr),e(DM,mTr),e(oe,gTr),e(oe,GM),e(GM,Hve),e(Hve,hTr),e(GM,pTr),e(GM,KH),e(KH,uTr),e(GM,_Tr),e(oe,bTr),e(oe,OM),e(OM,Uve),e(Uve,vTr),e(OM,FTr),e(OM,ZH),e(ZH,TTr),e(OM,MTr),e(oe,ETr),e(oe,VM),e(VM,Jve),e(Jve,CTr),e(VM,wTr),e(VM,eU),e(eU,ATr),e(VM,yTr),e(oe,LTr),e(oe,XM),e(XM,Yve),e(Yve,xTr),e(XM,$Tr),e(XM,oU),e(oU,kTr),e(XM,STr),e(oe,RTr),e(oe,zM),e(zM,Kve),e(Kve,PTr),e(zM,BTr),e(zM,rU),e(rU,ITr),e(zM,qTr),e(oe,NTr),e(oe,WM),e(WM,Zve),e(Zve,jTr),e(WM,DTr),e(WM,tU),e(tU,GTr),e(WM,OTr),e(oe,VTr),e(oe,QM),e(QM,e5e),e(e5e,XTr),e(QM,zTr),e(QM,aU),e(aU,WTr),e(QM,QTr),e(oe,HTr),e(oe,HM),e(HM,o5e),e(o5e,UTr),e(HM,JTr),e(HM,nU),e(nU,YTr),e(HM,KTr),e(oe,ZTr),e(oe,UM),e(UM,r5e),e(r5e,e7r),e(UM,o7r),e(UM,sU),e(sU,r7r),e(UM,t7r),e(oe,a7r),e(oe,JM),e(JM,t5e),e(t5e,n7r),e(JM,s7r),e(JM,lU),e(lU,l7r),e(JM,i7r),e(kr,d7r),M(YM,kr,null),b(f,bje,_),b(f,dc,_),e(dc,KM),e(KM,a5e),M(V8,a5e,null),e(dc,c7r),e(dc,n5e),e(n5e,f7r),b(f,vje,_),b(f,ar,_),M(X8,ar,null),e(ar,m7r),e(ar,cc),e(cc,g7r),e(cc,iU),e(iU,h7r),e(cc,p7r),e(cc,dU),e(dU,u7r),e(cc,_7r),e(ar,b7r),e(ar,z8),e(z8,v7r),e(z8,s5e),e(s5e,F7r),e(z8,T7r),e(ar,M7r),e(ar,Pt),M(W8,Pt,null),e(Pt,E7r),e(Pt,l5e),e(l5e,C7r),e(Pt,w7r),e(Pt,fc),e(fc,A7r),e(fc,i5e),e(i5e,y7r),e(fc,L7r),e(fc,cU),e(cU,x7r),e(fc,$7r),e(Pt,k7r),M(ZM,Pt,null),e(ar,S7r),e(ar,Sr),M(Q8,Sr,null),e(Sr,R7r),e(Sr,d5e),e(d5e,P7r),e(Sr,B7r),e(Sr,sn),e(sn,I7r),e(sn,c5e),e(c5e,q7r),e(sn,N7r),e(sn,f5e),e(f5e,j7r),e(sn,D7r),e(sn,m5e),e(m5e,G7r),e(sn,O7r),e(Sr,V7r),e(Sr,pe),e(pe,eE),e(eE,g5e),e(g5e,X7r),e(eE,z7r),e(eE,fU),e(fU,W7r),e(eE,Q7r),e(pe,H7r),e(pe,oE),e(oE,h5e),e(h5e,U7r),e(oE,J7r),e(oE,mU),e(mU,Y7r),e(oE,K7r),e(pe,Z7r),e(pe,rE),e(rE,p5e),e(p5e,eMr),e(rE,oMr),e(rE,gU),e(gU,rMr),e(rE,tMr),e(pe,aMr),e(pe,tE),e(tE,u5e),e(u5e,nMr),e(tE,sMr),e(tE,hU),e(hU,lMr),e(tE,iMr),e(pe,dMr),e(pe,aE),e(aE,_5e),e(_5e,cMr),e(aE,fMr),e(aE,pU),e(pU,mMr),e(aE,gMr),e(pe,hMr),e(pe,nE),e(nE,b5e),e(b5e,pMr),e(nE,uMr),e(nE,uU),e(uU,_Mr),e(nE,bMr),e(pe,vMr),e(pe,sE),e(sE,v5e),e(v5e,FMr),e(sE,TMr),e(sE,_U),e(_U,MMr),e(sE,EMr),e(pe,CMr),e(pe,lE),e(lE,F5e),e(F5e,wMr),e(lE,AMr),e(lE,bU),e(bU,yMr),e(lE,LMr),e(pe,xMr),e(pe,iE),e(iE,T5e),e(T5e,$Mr),e(iE,kMr),e(iE,vU),e(vU,SMr),e(iE,RMr),e(pe,PMr),e(pe,dE),e(dE,M5e),e(M5e,BMr),e(dE,IMr),e(dE,FU),e(FU,qMr),e(dE,NMr),e(pe,jMr),e(pe,cE),e(cE,E5e),e(E5e,DMr),e(cE,GMr),e(cE,TU),e(TU,OMr),e(cE,VMr),e(pe,XMr),e(pe,fE),e(fE,C5e),e(C5e,zMr),e(fE,WMr),e(fE,MU),e(MU,QMr),e(fE,HMr),e(pe,UMr),e(pe,mE),e(mE,w5e),e(w5e,JMr),e(mE,YMr),e(mE,EU),e(EU,KMr),e(mE,ZMr),e(pe,eEr),e(pe,gE),e(gE,A5e),e(A5e,oEr),e(gE,rEr),e(gE,CU),e(CU,tEr),e(gE,aEr),e(pe,nEr),e(pe,hE),e(hE,y5e),e(y5e,sEr),e(hE,lEr),e(hE,wU),e(wU,iEr),e(hE,dEr),e(pe,cEr),e(pe,pE),e(pE,L5e),e(L5e,fEr),e(pE,mEr),e(pE,AU),e(AU,gEr),e(pE,hEr),e(pe,pEr),e(pe,uE),e(uE,x5e),e(x5e,uEr),e(uE,_Er),e(uE,yU),e(yU,bEr),e(uE,vEr),e(Sr,FEr),M(_E,Sr,null),b(f,Fje,_),b(f,mc,_),e(mc,bE),e(bE,$5e),M(H8,$5e,null),e(mc,TEr),e(mc,k5e),e(k5e,MEr),b(f,Tje,_),b(f,nr,_),M(U8,nr,null),e(nr,EEr),e(nr,gc),e(gc,CEr),e(gc,LU),e(LU,wEr),e(gc,AEr),e(gc,xU),e(xU,yEr),e(gc,LEr),e(nr,xEr),e(nr,J8),e(J8,$Er),e(J8,S5e),e(S5e,kEr),e(J8,SEr),e(nr,REr),e(nr,Bt),M(Y8,Bt,null),e(Bt,PEr),e(Bt,R5e),e(R5e,BEr),e(Bt,IEr),e(Bt,hc),e(hc,qEr),e(hc,P5e),e(P5e,NEr),e(hc,jEr),e(hc,$U),e($U,DEr),e(hc,GEr),e(Bt,OEr),M(vE,Bt,null),e(nr,VEr),e(nr,Rr),M(K8,Rr,null),e(Rr,XEr),e(Rr,B5e),e(B5e,zEr),e(Rr,WEr),e(Rr,ln),e(ln,QEr),e(ln,I5e),e(I5e,HEr),e(ln,UEr),e(ln,q5e),e(q5e,JEr),e(ln,YEr),e(ln,N5e),e(N5e,KEr),e(ln,ZEr),e(Rr,eCr),e(Rr,Z8),e(Z8,FE),e(FE,j5e),e(j5e,oCr),e(FE,rCr),e(FE,kU),e(kU,tCr),e(FE,aCr),e(Z8,nCr),e(Z8,TE),e(TE,D5e),e(D5e,sCr),e(TE,lCr),e(TE,SU),e(SU,iCr),e(TE,dCr),e(Rr,cCr),M(ME,Rr,null),b(f,Mje,_),b(f,pc,_),e(pc,EE),e(EE,G5e),M(e9,G5e,null),e(pc,fCr),e(pc,O5e),e(O5e,mCr),b(f,Eje,_),b(f,sr,_),M(o9,sr,null),e(sr,gCr),e(sr,uc),e(uc,hCr),e(uc,RU),e(RU,pCr),e(uc,uCr),e(uc,PU),e(PU,_Cr),e(uc,bCr),e(sr,vCr),e(sr,r9),e(r9,FCr),e(r9,V5e),e(V5e,TCr),e(r9,MCr),e(sr,ECr),e(sr,It),M(t9,It,null),e(It,CCr),e(It,X5e),e(X5e,wCr),e(It,ACr),e(It,_c),e(_c,yCr),e(_c,z5e),e(z5e,LCr),e(_c,xCr),e(_c,BU),e(BU,$Cr),e(_c,kCr),e(It,SCr),M(CE,It,null),e(sr,RCr),e(sr,Pr),M(a9,Pr,null),e(Pr,PCr),e(Pr,W5e),e(W5e,BCr),e(Pr,ICr),e(Pr,dn),e(dn,qCr),e(dn,Q5e),e(Q5e,NCr),e(dn,jCr),e(dn,H5e),e(H5e,DCr),e(dn,GCr),e(dn,U5e),e(U5e,OCr),e(dn,VCr),e(Pr,XCr),e(Pr,J5e),e(J5e,wE),e(wE,Y5e),e(Y5e,zCr),e(wE,WCr),e(wE,IU),e(IU,QCr),e(wE,HCr),e(Pr,UCr),M(AE,Pr,null),b(f,Cje,_),b(f,bc,_),e(bc,yE),e(yE,K5e),M(n9,K5e,null),e(bc,JCr),e(bc,Z5e),e(Z5e,YCr),b(f,wje,_),b(f,lr,_),M(s9,lr,null),e(lr,KCr),e(lr,vc),e(vc,ZCr),e(vc,qU),e(qU,e3r),e(vc,o3r),e(vc,NU),e(NU,r3r),e(vc,t3r),e(lr,a3r),e(lr,l9),e(l9,n3r),e(l9,eFe),e(eFe,s3r),e(l9,l3r),e(lr,i3r),e(lr,qt),M(i9,qt,null),e(qt,d3r),e(qt,oFe),e(oFe,c3r),e(qt,f3r),e(qt,Fc),e(Fc,m3r),e(Fc,rFe),e(rFe,g3r),e(Fc,h3r),e(Fc,jU),e(jU,p3r),e(Fc,u3r),e(qt,_3r),M(LE,qt,null),e(lr,b3r),e(lr,Br),M(d9,Br,null),e(Br,v3r),e(Br,tFe),e(tFe,F3r),e(Br,T3r),e(Br,cn),e(cn,M3r),e(cn,aFe),e(aFe,E3r),e(cn,C3r),e(cn,nFe),e(nFe,w3r),e(cn,A3r),e(cn,sFe),e(sFe,y3r),e(cn,L3r),e(Br,x3r),e(Br,de),e(de,xE),e(xE,lFe),e(lFe,$3r),e(xE,k3r),e(xE,DU),e(DU,S3r),e(xE,R3r),e(de,P3r),e(de,$E),e($E,iFe),e(iFe,B3r),e($E,I3r),e($E,GU),e(GU,q3r),e($E,N3r),e(de,j3r),e(de,kE),e(kE,dFe),e(dFe,D3r),e(kE,G3r),e(kE,OU),e(OU,O3r),e(kE,V3r),e(de,X3r),e(de,SE),e(SE,cFe),e(cFe,z3r),e(SE,W3r),e(SE,VU),e(VU,Q3r),e(SE,H3r),e(de,U3r),e(de,RE),e(RE,fFe),e(fFe,J3r),e(RE,Y3r),e(RE,XU),e(XU,K3r),e(RE,Z3r),e(de,ewr),e(de,PE),e(PE,mFe),e(mFe,owr),e(PE,rwr),e(PE,zU),e(zU,twr),e(PE,awr),e(de,nwr),e(de,BE),e(BE,gFe),e(gFe,swr),e(BE,lwr),e(BE,WU),e(WU,iwr),e(BE,dwr),e(de,cwr),e(de,IE),e(IE,hFe),e(hFe,fwr),e(IE,mwr),e(IE,QU),e(QU,gwr),e(IE,hwr),e(de,pwr),e(de,qE),e(qE,pFe),e(pFe,uwr),e(qE,_wr),e(qE,HU),e(HU,bwr),e(qE,vwr),e(de,Fwr),e(de,NE),e(NE,uFe),e(uFe,Twr),e(NE,Mwr),e(NE,UU),e(UU,Ewr),e(NE,Cwr),e(de,wwr),e(de,jE),e(jE,_Fe),e(_Fe,Awr),e(jE,ywr),e(jE,JU),e(JU,Lwr),e(jE,xwr),e(de,$wr),e(de,DE),e(DE,bFe),e(bFe,kwr),e(DE,Swr),e(DE,YU),e(YU,Rwr),e(DE,Pwr),e(de,Bwr),e(de,GE),e(GE,vFe),e(vFe,Iwr),e(GE,qwr),e(GE,KU),e(KU,Nwr),e(GE,jwr),e(de,Dwr),e(de,OE),e(OE,FFe),e(FFe,Gwr),e(OE,Owr),e(OE,ZU),e(ZU,Vwr),e(OE,Xwr),e(de,zwr),e(de,VE),e(VE,TFe),e(TFe,Wwr),e(VE,Qwr),e(VE,eJ),e(eJ,Hwr),e(VE,Uwr),e(de,Jwr),e(de,XE),e(XE,MFe),e(MFe,Ywr),e(XE,Kwr),e(XE,oJ),e(oJ,Zwr),e(XE,e0r),e(de,o0r),e(de,zE),e(zE,EFe),e(EFe,r0r),e(zE,t0r),e(zE,rJ),e(rJ,a0r),e(zE,n0r),e(de,s0r),e(de,WE),e(WE,CFe),e(CFe,l0r),e(WE,i0r),e(WE,tJ),e(tJ,d0r),e(WE,c0r),e(de,f0r),e(de,QE),e(QE,wFe),e(wFe,m0r),e(QE,g0r),e(QE,aJ),e(aJ,h0r),e(QE,p0r),e(de,u0r),e(de,HE),e(HE,AFe),e(AFe,_0r),e(HE,b0r),e(HE,nJ),e(nJ,v0r),e(HE,F0r),e(Br,T0r),M(UE,Br,null),b(f,Aje,_),b(f,Tc,_),e(Tc,JE),e(JE,yFe),M(c9,yFe,null),e(Tc,M0r),e(Tc,LFe),e(LFe,E0r),b(f,yje,_),b(f,ir,_),M(f9,ir,null),e(ir,C0r),e(ir,Mc),e(Mc,w0r),e(Mc,sJ),e(sJ,A0r),e(Mc,y0r),e(Mc,lJ),e(lJ,L0r),e(Mc,x0r),e(ir,$0r),e(ir,m9),e(m9,k0r),e(m9,xFe),e(xFe,S0r),e(m9,R0r),e(ir,P0r),e(ir,Nt),M(g9,Nt,null),e(Nt,B0r),e(Nt,$Fe),e($Fe,I0r),e(Nt,q0r),e(Nt,Ec),e(Ec,N0r),e(Ec,kFe),e(kFe,j0r),e(Ec,D0r),e(Ec,iJ),e(iJ,G0r),e(Ec,O0r),e(Nt,V0r),M(YE,Nt,null),e(ir,X0r),e(ir,Ir),M(h9,Ir,null),e(Ir,z0r),e(Ir,SFe),e(SFe,W0r),e(Ir,Q0r),e(Ir,fn),e(fn,H0r),e(fn,RFe),e(RFe,U0r),e(fn,J0r),e(fn,PFe),e(PFe,Y0r),e(fn,K0r),e(fn,BFe),e(BFe,Z0r),e(fn,e6r),e(Ir,o6r),e(Ir,ce),e(ce,KE),e(KE,IFe),e(IFe,r6r),e(KE,t6r),e(KE,dJ),e(dJ,a6r),e(KE,n6r),e(ce,s6r),e(ce,ZE),e(ZE,qFe),e(qFe,l6r),e(ZE,i6r),e(ZE,cJ),e(cJ,d6r),e(ZE,c6r),e(ce,f6r),e(ce,eC),e(eC,NFe),e(NFe,m6r),e(eC,g6r),e(eC,fJ),e(fJ,h6r),e(eC,p6r),e(ce,u6r),e(ce,oC),e(oC,jFe),e(jFe,_6r),e(oC,b6r),e(oC,mJ),e(mJ,v6r),e(oC,F6r),e(ce,T6r),e(ce,rC),e(rC,DFe),e(DFe,M6r),e(rC,E6r),e(rC,gJ),e(gJ,C6r),e(rC,w6r),e(ce,A6r),e(ce,tC),e(tC,GFe),e(GFe,y6r),e(tC,L6r),e(tC,hJ),e(hJ,x6r),e(tC,$6r),e(ce,k6r),e(ce,aC),e(aC,OFe),e(OFe,S6r),e(aC,R6r),e(aC,pJ),e(pJ,P6r),e(aC,B6r),e(ce,I6r),e(ce,nC),e(nC,VFe),e(VFe,q6r),e(nC,N6r),e(nC,uJ),e(uJ,j6r),e(nC,D6r),e(ce,G6r),e(ce,sC),e(sC,XFe),e(XFe,O6r),e(sC,V6r),e(sC,_J),e(_J,X6r),e(sC,z6r),e(ce,W6r),e(ce,lC),e(lC,zFe),e(zFe,Q6r),e(lC,H6r),e(lC,bJ),e(bJ,U6r),e(lC,J6r),e(ce,Y6r),e(ce,iC),e(iC,WFe),e(WFe,K6r),e(iC,Z6r),e(iC,vJ),e(vJ,eAr),e(iC,oAr),e(ce,rAr),e(ce,dC),e(dC,QFe),e(QFe,tAr),e(dC,aAr),e(dC,FJ),e(FJ,nAr),e(dC,sAr),e(ce,lAr),e(ce,cC),e(cC,HFe),e(HFe,iAr),e(cC,dAr),e(cC,TJ),e(TJ,cAr),e(cC,fAr),e(ce,mAr),e(ce,fC),e(fC,UFe),e(UFe,gAr),e(fC,hAr),e(fC,MJ),e(MJ,pAr),e(fC,uAr),e(ce,_Ar),e(ce,mC),e(mC,JFe),e(JFe,bAr),e(mC,vAr),e(mC,EJ),e(EJ,FAr),e(mC,TAr),e(ce,MAr),e(ce,gC),e(gC,YFe),e(YFe,EAr),e(gC,CAr),e(gC,CJ),e(CJ,wAr),e(gC,AAr),e(ce,yAr),e(ce,hC),e(hC,KFe),e(KFe,LAr),e(hC,xAr),e(hC,wJ),e(wJ,$Ar),e(hC,kAr),e(ce,SAr),e(ce,pC),e(pC,ZFe),e(ZFe,RAr),e(pC,PAr),e(pC,AJ),e(AJ,BAr),e(pC,IAr),e(ce,qAr),e(ce,uC),e(uC,eTe),e(eTe,NAr),e(uC,jAr),e(uC,yJ),e(yJ,DAr),e(uC,GAr),e(ce,OAr),e(ce,_C),e(_C,oTe),e(oTe,VAr),e(_C,XAr),e(_C,LJ),e(LJ,zAr),e(_C,WAr),e(Ir,QAr),M(bC,Ir,null),b(f,Lje,_),b(f,Cc,_),e(Cc,vC),e(vC,rTe),M(p9,rTe,null),e(Cc,HAr),e(Cc,tTe),e(tTe,UAr),b(f,xje,_),b(f,dr,_),M(u9,dr,null),e(dr,JAr),e(dr,wc),e(wc,YAr),e(wc,xJ),e(xJ,KAr),e(wc,ZAr),e(wc,$J),e($J,eyr),e(wc,oyr),e(dr,ryr),e(dr,_9),e(_9,tyr),e(_9,aTe),e(aTe,ayr),e(_9,nyr),e(dr,syr),e(dr,jt),M(b9,jt,null),e(jt,lyr),e(jt,nTe),e(nTe,iyr),e(jt,dyr),e(jt,Ac),e(Ac,cyr),e(Ac,sTe),e(sTe,fyr),e(Ac,myr),e(Ac,kJ),e(kJ,gyr),e(Ac,hyr),e(jt,pyr),M(FC,jt,null),e(dr,uyr),e(dr,qr),M(v9,qr,null),e(qr,_yr),e(qr,lTe),e(lTe,byr),e(qr,vyr),e(qr,mn),e(mn,Fyr),e(mn,iTe),e(iTe,Tyr),e(mn,Myr),e(mn,dTe),e(dTe,Eyr),e(mn,Cyr),e(mn,cTe),e(cTe,wyr),e(mn,Ayr),e(qr,yyr),e(qr,fTe),e(fTe,TC),e(TC,mTe),e(mTe,Lyr),e(TC,xyr),e(TC,SJ),e(SJ,$yr),e(TC,kyr),e(qr,Syr),M(MC,qr,null),b(f,$je,_),b(f,yc,_),e(yc,EC),e(EC,gTe),M(F9,gTe,null),e(yc,Ryr),e(yc,hTe),e(hTe,Pyr),b(f,kje,_),b(f,cr,_),M(T9,cr,null),e(cr,Byr),e(cr,Lc),e(Lc,Iyr),e(Lc,RJ),e(RJ,qyr),e(Lc,Nyr),e(Lc,PJ),e(PJ,jyr),e(Lc,Dyr),e(cr,Gyr),e(cr,M9),e(M9,Oyr),e(M9,pTe),e(pTe,Vyr),e(M9,Xyr),e(cr,zyr),e(cr,Dt),M(E9,Dt,null),e(Dt,Wyr),e(Dt,uTe),e(uTe,Qyr),e(Dt,Hyr),e(Dt,xc),e(xc,Uyr),e(xc,_Te),e(_Te,Jyr),e(xc,Yyr),e(xc,BJ),e(BJ,Kyr),e(xc,Zyr),e(Dt,eLr),M(CC,Dt,null),e(cr,oLr),e(cr,Nr),M(C9,Nr,null),e(Nr,rLr),e(Nr,bTe),e(bTe,tLr),e(Nr,aLr),e(Nr,gn),e(gn,nLr),e(gn,vTe),e(vTe,sLr),e(gn,lLr),e(gn,FTe),e(FTe,iLr),e(gn,dLr),e(gn,TTe),e(TTe,cLr),e(gn,fLr),e(Nr,mLr),e(Nr,MTe),e(MTe,wC),e(wC,ETe),e(ETe,gLr),e(wC,hLr),e(wC,IJ),e(IJ,pLr),e(wC,uLr),e(Nr,_Lr),M(AC,Nr,null),b(f,Sje,_),b(f,$c,_),e($c,yC),e(yC,CTe),M(w9,CTe,null),e($c,bLr),e($c,wTe),e(wTe,vLr),b(f,Rje,_),b(f,fr,_),M(A9,fr,null),e(fr,FLr),e(fr,kc),e(kc,TLr),e(kc,qJ),e(qJ,MLr),e(kc,ELr),e(kc,NJ),e(NJ,CLr),e(kc,wLr),e(fr,ALr),e(fr,y9),e(y9,yLr),e(y9,ATe),e(ATe,LLr),e(y9,xLr),e(fr,$Lr),e(fr,Gt),M(L9,Gt,null),e(Gt,kLr),e(Gt,yTe),e(yTe,SLr),e(Gt,RLr),e(Gt,Sc),e(Sc,PLr),e(Sc,LTe),e(LTe,BLr),e(Sc,ILr),e(Sc,jJ),e(jJ,qLr),e(Sc,NLr),e(Gt,jLr),M(LC,Gt,null),e(fr,DLr),e(fr,jr),M(x9,jr,null),e(jr,GLr),e(jr,xTe),e(xTe,OLr),e(jr,VLr),e(jr,hn),e(hn,XLr),e(hn,$Te),e($Te,zLr),e(hn,WLr),e(hn,kTe),e(kTe,QLr),e(hn,HLr),e(hn,STe),e(STe,ULr),e(hn,JLr),e(jr,YLr),e(jr,te),e(te,xC),e(xC,RTe),e(RTe,KLr),e(xC,ZLr),e(xC,DJ),e(DJ,e8r),e(xC,o8r),e(te,r8r),e(te,$C),e($C,PTe),e(PTe,t8r),e($C,a8r),e($C,GJ),e(GJ,n8r),e($C,s8r),e(te,l8r),e(te,kC),e(kC,BTe),e(BTe,i8r),e(kC,d8r),e(kC,OJ),e(OJ,c8r),e(kC,f8r),e(te,m8r),e(te,SC),e(SC,ITe),e(ITe,g8r),e(SC,h8r),e(SC,VJ),e(VJ,p8r),e(SC,u8r),e(te,_8r),e(te,RC),e(RC,qTe),e(qTe,b8r),e(RC,v8r),e(RC,XJ),e(XJ,F8r),e(RC,T8r),e(te,M8r),e(te,PC),e(PC,NTe),e(NTe,E8r),e(PC,C8r),e(PC,zJ),e(zJ,w8r),e(PC,A8r),e(te,y8r),e(te,BC),e(BC,jTe),e(jTe,L8r),e(BC,x8r),e(BC,WJ),e(WJ,$8r),e(BC,k8r),e(te,S8r),e(te,IC),e(IC,DTe),e(DTe,R8r),e(IC,P8r),e(IC,QJ),e(QJ,B8r),e(IC,I8r),e(te,q8r),e(te,qC),e(qC,GTe),e(GTe,N8r),e(qC,j8r),e(qC,HJ),e(HJ,D8r),e(qC,G8r),e(te,O8r),e(te,NC),e(NC,OTe),e(OTe,V8r),e(NC,X8r),e(NC,UJ),e(UJ,z8r),e(NC,W8r),e(te,Q8r),e(te,jC),e(jC,VTe),e(VTe,H8r),e(jC,U8r),e(jC,JJ),e(JJ,J8r),e(jC,Y8r),e(te,K8r),e(te,DC),e(DC,XTe),e(XTe,Z8r),e(DC,e9r),e(DC,YJ),e(YJ,o9r),e(DC,r9r),e(te,t9r),e(te,GC),e(GC,zTe),e(zTe,a9r),e(GC,n9r),e(GC,KJ),e(KJ,s9r),e(GC,l9r),e(te,i9r),e(te,OC),e(OC,WTe),e(WTe,d9r),e(OC,c9r),e(OC,ZJ),e(ZJ,f9r),e(OC,m9r),e(te,g9r),e(te,VC),e(VC,QTe),e(QTe,h9r),e(VC,p9r),e(VC,eY),e(eY,u9r),e(VC,_9r),e(te,b9r),e(te,XC),e(XC,HTe),e(HTe,v9r),e(XC,F9r),e(XC,oY),e(oY,T9r),e(XC,M9r),e(te,E9r),e(te,zC),e(zC,UTe),e(UTe,C9r),e(zC,w9r),e(zC,rY),e(rY,A9r),e(zC,y9r),e(te,L9r),e(te,WC),e(WC,JTe),e(JTe,x9r),e(WC,$9r),e(WC,tY),e(tY,k9r),e(WC,S9r),e(te,R9r),e(te,QC),e(QC,YTe),e(YTe,P9r),e(QC,B9r),e(QC,aY),e(aY,I9r),e(QC,q9r),e(te,N9r),e(te,HC),e(HC,KTe),e(KTe,j9r),e(HC,D9r),e(HC,nY),e(nY,G9r),e(HC,O9r),e(te,V9r),e(te,UC),e(UC,ZTe),e(ZTe,X9r),e(UC,z9r),e(UC,sY),e(sY,W9r),e(UC,Q9r),e(te,H9r),e(te,JC),e(JC,e7e),e(e7e,U9r),e(JC,J9r),e(JC,lY),e(lY,Y9r),e(JC,K9r),e(te,Z9r),e(te,YC),e(YC,o7e),e(o7e,exr),e(YC,oxr),e(YC,iY),e(iY,rxr),e(YC,txr),e(te,axr),e(te,KC),e(KC,r7e),e(r7e,nxr),e(KC,sxr),e(KC,dY),e(dY,lxr),e(KC,ixr),e(te,dxr),e(te,ZC),e(ZC,t7e),e(t7e,cxr),e(ZC,fxr),e(ZC,cY),e(cY,mxr),e(ZC,gxr),e(jr,hxr),M(e3,jr,null),b(f,Pje,_),b(f,Rc,_),e(Rc,o3),e(o3,a7e),M($9,a7e,null),e(Rc,pxr),e(Rc,n7e),e(n7e,uxr),b(f,Bje,_),b(f,mr,_),M(k9,mr,null),e(mr,_xr),e(mr,Pc),e(Pc,bxr),e(Pc,fY),e(fY,vxr),e(Pc,Fxr),e(Pc,mY),e(mY,Txr),e(Pc,Mxr),e(mr,Exr),e(mr,S9),e(S9,Cxr),e(S9,s7e),e(s7e,wxr),e(S9,Axr),e(mr,yxr),e(mr,Ot),M(R9,Ot,null),e(Ot,Lxr),e(Ot,l7e),e(l7e,xxr),e(Ot,$xr),e(Ot,Bc),e(Bc,kxr),e(Bc,i7e),e(i7e,Sxr),e(Bc,Rxr),e(Bc,gY),e(gY,Pxr),e(Bc,Bxr),e(Ot,Ixr),M(r3,Ot,null),e(mr,qxr),e(mr,Dr),M(P9,Dr,null),e(Dr,Nxr),e(Dr,d7e),e(d7e,jxr),e(Dr,Dxr),e(Dr,pn),e(pn,Gxr),e(pn,c7e),e(c7e,Oxr),e(pn,Vxr),e(pn,f7e),e(f7e,Xxr),e(pn,zxr),e(pn,m7e),e(m7e,Wxr),e(pn,Qxr),e(Dr,Hxr),e(Dr,Re),e(Re,t3),e(t3,g7e),e(g7e,Uxr),e(t3,Jxr),e(t3,hY),e(hY,Yxr),e(t3,Kxr),e(Re,Zxr),e(Re,a3),e(a3,h7e),e(h7e,e$r),e(a3,o$r),e(a3,pY),e(pY,r$r),e(a3,t$r),e(Re,a$r),e(Re,n3),e(n3,p7e),e(p7e,n$r),e(n3,s$r),e(n3,uY),e(uY,l$r),e(n3,i$r),e(Re,d$r),e(Re,s3),e(s3,u7e),e(u7e,c$r),e(s3,f$r),e(s3,_Y),e(_Y,m$r),e(s3,g$r),e(Re,h$r),e(Re,l3),e(l3,_7e),e(_7e,p$r),e(l3,u$r),e(l3,bY),e(bY,_$r),e(l3,b$r),e(Re,v$r),e(Re,i3),e(i3,b7e),e(b7e,F$r),e(i3,T$r),e(i3,vY),e(vY,M$r),e(i3,E$r),e(Re,C$r),e(Re,d3),e(d3,v7e),e(v7e,w$r),e(d3,A$r),e(d3,FY),e(FY,y$r),e(d3,L$r),e(Re,x$r),e(Re,c3),e(c3,F7e),e(F7e,$$r),e(c3,k$r),e(c3,TY),e(TY,S$r),e(c3,R$r),e(Re,P$r),e(Re,f3),e(f3,T7e),e(T7e,B$r),e(f3,I$r),e(f3,MY),e(MY,q$r),e(f3,N$r),e(Dr,j$r),M(m3,Dr,null),b(f,Ije,_),b(f,Ic,_),e(Ic,g3),e(g3,M7e),M(B9,M7e,null),e(Ic,D$r),e(Ic,E7e),e(E7e,G$r),b(f,qje,_),b(f,gr,_),M(I9,gr,null),e(gr,O$r),e(gr,qc),e(qc,V$r),e(qc,EY),e(EY,X$r),e(qc,z$r),e(qc,CY),e(CY,W$r),e(qc,Q$r),e(gr,H$r),e(gr,q9),e(q9,U$r),e(q9,C7e),e(C7e,J$r),e(q9,Y$r),e(gr,K$r),e(gr,Vt),M(N9,Vt,null),e(Vt,Z$r),e(Vt,w7e),e(w7e,ekr),e(Vt,okr),e(Vt,Nc),e(Nc,rkr),e(Nc,A7e),e(A7e,tkr),e(Nc,akr),e(Nc,wY),e(wY,nkr),e(Nc,skr),e(Vt,lkr),M(h3,Vt,null),e(gr,ikr),e(gr,Gr),M(j9,Gr,null),e(Gr,dkr),e(Gr,y7e),e(y7e,ckr),e(Gr,fkr),e(Gr,un),e(un,mkr),e(un,L7e),e(L7e,gkr),e(un,hkr),e(un,x7e),e(x7e,pkr),e(un,ukr),e(un,$7e),e($7e,_kr),e(un,bkr),e(Gr,vkr),e(Gr,Ee),e(Ee,p3),e(p3,k7e),e(k7e,Fkr),e(p3,Tkr),e(p3,AY),e(AY,Mkr),e(p3,Ekr),e(Ee,Ckr),e(Ee,u3),e(u3,S7e),e(S7e,wkr),e(u3,Akr),e(u3,yY),e(yY,ykr),e(u3,Lkr),e(Ee,xkr),e(Ee,_3),e(_3,R7e),e(R7e,$kr),e(_3,kkr),e(_3,LY),e(LY,Skr),e(_3,Rkr),e(Ee,Pkr),e(Ee,b3),e(b3,P7e),e(P7e,Bkr),e(b3,Ikr),e(b3,xY),e(xY,qkr),e(b3,Nkr),e(Ee,jkr),e(Ee,v3),e(v3,B7e),e(B7e,Dkr),e(v3,Gkr),e(v3,$Y),e($Y,Okr),e(v3,Vkr),e(Ee,Xkr),e(Ee,F3),e(F3,I7e),e(I7e,zkr),e(F3,Wkr),e(F3,kY),e(kY,Qkr),e(F3,Hkr),e(Ee,Ukr),e(Ee,T3),e(T3,q7e),e(q7e,Jkr),e(T3,Ykr),e(T3,SY),e(SY,Kkr),e(T3,Zkr),e(Ee,eSr),e(Ee,M3),e(M3,N7e),e(N7e,oSr),e(M3,rSr),e(M3,RY),e(RY,tSr),e(M3,aSr),e(Ee,nSr),e(Ee,E3),e(E3,j7e),e(j7e,sSr),e(E3,lSr),e(E3,PY),e(PY,iSr),e(E3,dSr),e(Ee,cSr),e(Ee,C3),e(C3,D7e),e(D7e,fSr),e(C3,mSr),e(C3,BY),e(BY,gSr),e(C3,hSr),e(Ee,pSr),e(Ee,w3),e(w3,G7e),e(G7e,uSr),e(w3,_Sr),e(w3,IY),e(IY,bSr),e(w3,vSr),e(Ee,FSr),e(Ee,A3),e(A3,O7e),e(O7e,TSr),e(A3,MSr),e(A3,qY),e(qY,ESr),e(A3,CSr),e(Gr,wSr),M(y3,Gr,null),b(f,Nje,_),b(f,jc,_),e(jc,L3),e(L3,V7e),M(D9,V7e,null),e(jc,ASr),e(jc,X7e),e(X7e,ySr),b(f,jje,_),b(f,hr,_),M(G9,hr,null),e(hr,LSr),e(hr,Dc),e(Dc,xSr),e(Dc,NY),e(NY,$Sr),e(Dc,kSr),e(Dc,jY),e(jY,SSr),e(Dc,RSr),e(hr,PSr),e(hr,O9),e(O9,BSr),e(O9,z7e),e(z7e,ISr),e(O9,qSr),e(hr,NSr),e(hr,Xt),M(V9,Xt,null),e(Xt,jSr),e(Xt,W7e),e(W7e,DSr),e(Xt,GSr),e(Xt,Gc),e(Gc,OSr),e(Gc,Q7e),e(Q7e,VSr),e(Gc,XSr),e(Gc,DY),e(DY,zSr),e(Gc,WSr),e(Xt,QSr),M(x3,Xt,null),e(hr,HSr),e(hr,Or),M(X9,Or,null),e(Or,USr),e(Or,H7e),e(H7e,JSr),e(Or,YSr),e(Or,_n),e(_n,KSr),e(_n,U7e),e(U7e,ZSr),e(_n,eRr),e(_n,J7e),e(J7e,oRr),e(_n,rRr),e(_n,Y7e),e(Y7e,tRr),e(_n,aRr),e(Or,nRr),e(Or,Le),e(Le,$3),e($3,K7e),e(K7e,sRr),e($3,lRr),e($3,GY),e(GY,iRr),e($3,dRr),e(Le,cRr),e(Le,k3),e(k3,Z7e),e(Z7e,fRr),e(k3,mRr),e(k3,OY),e(OY,gRr),e(k3,hRr),e(Le,pRr),e(Le,S3),e(S3,eMe),e(eMe,uRr),e(S3,_Rr),e(S3,VY),e(VY,bRr),e(S3,vRr),e(Le,FRr),e(Le,R3),e(R3,oMe),e(oMe,TRr),e(R3,MRr),e(R3,XY),e(XY,ERr),e(R3,CRr),e(Le,wRr),e(Le,P3),e(P3,rMe),e(rMe,ARr),e(P3,yRr),e(P3,zY),e(zY,LRr),e(P3,xRr),e(Le,$Rr),e(Le,B3),e(B3,tMe),e(tMe,kRr),e(B3,SRr),e(B3,WY),e(WY,RRr),e(B3,PRr),e(Le,BRr),e(Le,I3),e(I3,aMe),e(aMe,IRr),e(I3,qRr),e(I3,QY),e(QY,NRr),e(I3,jRr),e(Le,DRr),e(Le,q3),e(q3,nMe),e(nMe,GRr),e(q3,ORr),e(q3,HY),e(HY,VRr),e(q3,XRr),e(Le,zRr),e(Le,N3),e(N3,sMe),e(sMe,WRr),e(N3,QRr),e(N3,UY),e(UY,HRr),e(N3,URr),e(Le,JRr),e(Le,j3),e(j3,lMe),e(lMe,YRr),e(j3,KRr),e(j3,JY),e(JY,ZRr),e(j3,ePr),e(Or,oPr),M(D3,Or,null),b(f,Dje,_),b(f,Oc,_),e(Oc,G3),e(G3,iMe),M(z9,iMe,null),e(Oc,rPr),e(Oc,dMe),e(dMe,tPr),b(f,Gje,_),b(f,pr,_),M(W9,pr,null),e(pr,aPr),e(pr,Vc),e(Vc,nPr),e(Vc,YY),e(YY,sPr),e(Vc,lPr),e(Vc,KY),e(KY,iPr),e(Vc,dPr),e(pr,cPr),e(pr,Q9),e(Q9,fPr),e(Q9,cMe),e(cMe,mPr),e(Q9,gPr),e(pr,hPr),e(pr,zt),M(H9,zt,null),e(zt,pPr),e(zt,fMe),e(fMe,uPr),e(zt,_Pr),e(zt,Xc),e(Xc,bPr),e(Xc,mMe),e(mMe,vPr),e(Xc,FPr),e(Xc,ZY),e(ZY,TPr),e(Xc,MPr),e(zt,EPr),M(O3,zt,null),e(pr,CPr),e(pr,Vr),M(U9,Vr,null),e(Vr,wPr),e(Vr,gMe),e(gMe,APr),e(Vr,yPr),e(Vr,bn),e(bn,LPr),e(bn,hMe),e(hMe,xPr),e(bn,$Pr),e(bn,pMe),e(pMe,kPr),e(bn,SPr),e(bn,uMe),e(uMe,RPr),e(bn,PPr),e(Vr,BPr),e(Vr,Pe),e(Pe,V3),e(V3,_Me),e(_Me,IPr),e(V3,qPr),e(V3,eK),e(eK,NPr),e(V3,jPr),e(Pe,DPr),e(Pe,X3),e(X3,bMe),e(bMe,GPr),e(X3,OPr),e(X3,oK),e(oK,VPr),e(X3,XPr),e(Pe,zPr),e(Pe,z3),e(z3,vMe),e(vMe,WPr),e(z3,QPr),e(z3,rK),e(rK,HPr),e(z3,UPr),e(Pe,JPr),e(Pe,W3),e(W3,FMe),e(FMe,YPr),e(W3,KPr),e(W3,tK),e(tK,ZPr),e(W3,eBr),e(Pe,oBr),e(Pe,Q3),e(Q3,TMe),e(TMe,rBr),e(Q3,tBr),e(Q3,aK),e(aK,aBr),e(Q3,nBr),e(Pe,sBr),e(Pe,H3),e(H3,MMe),e(MMe,lBr),e(H3,iBr),e(H3,nK),e(nK,dBr),e(H3,cBr),e(Pe,fBr),e(Pe,U3),e(U3,EMe),e(EMe,mBr),e(U3,gBr),e(U3,sK),e(sK,hBr),e(U3,pBr),e(Pe,uBr),e(Pe,J3),e(J3,CMe),e(CMe,_Br),e(J3,bBr),e(J3,lK),e(lK,vBr),e(J3,FBr),e(Pe,TBr),e(Pe,Y3),e(Y3,wMe),e(wMe,MBr),e(Y3,EBr),e(Y3,iK),e(iK,CBr),e(Y3,wBr),e(Vr,ABr),M(K3,Vr,null),b(f,Oje,_),b(f,zc,_),e(zc,Z3),e(Z3,AMe),M(J9,AMe,null),e(zc,yBr),e(zc,yMe),e(yMe,LBr),b(f,Vje,_),b(f,ur,_),M(Y9,ur,null),e(ur,xBr),e(ur,Wc),e(Wc,$Br),e(Wc,dK),e(dK,kBr),e(Wc,SBr),e(Wc,cK),e(cK,RBr),e(Wc,PBr),e(ur,BBr),e(ur,K9),e(K9,IBr),e(K9,LMe),e(LMe,qBr),e(K9,NBr),e(ur,jBr),e(ur,Wt),M(Z9,Wt,null),e(Wt,DBr),e(Wt,xMe),e(xMe,GBr),e(Wt,OBr),e(Wt,Qc),e(Qc,VBr),e(Qc,$Me),e($Me,XBr),e(Qc,zBr),e(Qc,fK),e(fK,WBr),e(Qc,QBr),e(Wt,HBr),M(ew,Wt,null),e(ur,UBr),e(ur,Xr),M(ex,Xr,null),e(Xr,JBr),e(Xr,kMe),e(kMe,YBr),e(Xr,KBr),e(Xr,vn),e(vn,ZBr),e(vn,SMe),e(SMe,eIr),e(vn,oIr),e(vn,RMe),e(RMe,rIr),e(vn,tIr),e(vn,PMe),e(PMe,aIr),e(vn,nIr),e(Xr,sIr),e(Xr,xe),e(xe,ow),e(ow,BMe),e(BMe,lIr),e(ow,iIr),e(ow,mK),e(mK,dIr),e(ow,cIr),e(xe,fIr),e(xe,rw),e(rw,IMe),e(IMe,mIr),e(rw,gIr),e(rw,gK),e(gK,hIr),e(rw,pIr),e(xe,uIr),e(xe,tw),e(tw,qMe),e(qMe,_Ir),e(tw,bIr),e(tw,hK),e(hK,vIr),e(tw,FIr),e(xe,TIr),e(xe,aw),e(aw,NMe),e(NMe,MIr),e(aw,EIr),e(aw,pK),e(pK,CIr),e(aw,wIr),e(xe,AIr),e(xe,nw),e(nw,jMe),e(jMe,yIr),e(nw,LIr),e(nw,uK),e(uK,xIr),e(nw,$Ir),e(xe,kIr),e(xe,sw),e(sw,DMe),e(DMe,SIr),e(sw,RIr),e(sw,_K),e(_K,PIr),e(sw,BIr),e(xe,IIr),e(xe,lw),e(lw,GMe),e(GMe,qIr),e(lw,NIr),e(lw,bK),e(bK,jIr),e(lw,DIr),e(xe,GIr),e(xe,iw),e(iw,OMe),e(OMe,OIr),e(iw,VIr),e(iw,vK),e(vK,XIr),e(iw,zIr),e(xe,WIr),e(xe,dw),e(dw,VMe),e(VMe,QIr),e(dw,HIr),e(dw,FK),e(FK,UIr),e(dw,JIr),e(xe,YIr),e(xe,cw),e(cw,XMe),e(XMe,KIr),e(cw,ZIr),e(cw,TK),e(TK,eqr),e(cw,oqr),e(Xr,rqr),M(fw,Xr,null),b(f,Xje,_),b(f,Hc,_),e(Hc,mw),e(mw,zMe),M(ox,zMe,null),e(Hc,tqr),e(Hc,WMe),e(WMe,aqr),b(f,zje,_),b(f,_r,_),M(rx,_r,null),e(_r,nqr),e(_r,Uc),e(Uc,sqr),e(Uc,MK),e(MK,lqr),e(Uc,iqr),e(Uc,EK),e(EK,dqr),e(Uc,cqr),e(_r,fqr),e(_r,tx),e(tx,mqr),e(tx,QMe),e(QMe,gqr),e(tx,hqr),e(_r,pqr),e(_r,Qt),M(ax,Qt,null),e(Qt,uqr),e(Qt,HMe),e(HMe,_qr),e(Qt,bqr),e(Qt,Jc),e(Jc,vqr),e(Jc,UMe),e(UMe,Fqr),e(Jc,Tqr),e(Jc,CK),e(CK,Mqr),e(Jc,Eqr),e(Qt,Cqr),M(gw,Qt,null),e(_r,wqr),e(_r,zr),M(nx,zr,null),e(zr,Aqr),e(zr,JMe),e(JMe,yqr),e(zr,Lqr),e(zr,Fn),e(Fn,xqr),e(Fn,YMe),e(YMe,$qr),e(Fn,kqr),e(Fn,KMe),e(KMe,Sqr),e(Fn,Rqr),e(Fn,ZMe),e(ZMe,Pqr),e(Fn,Bqr),e(zr,Iqr),e(zr,$e),e($e,hw),e(hw,eEe),e(eEe,qqr),e(hw,Nqr),e(hw,wK),e(wK,jqr),e(hw,Dqr),e($e,Gqr),e($e,pw),e(pw,oEe),e(oEe,Oqr),e(pw,Vqr),e(pw,AK),e(AK,Xqr),e(pw,zqr),e($e,Wqr),e($e,uw),e(uw,rEe),e(rEe,Qqr),e(uw,Hqr),e(uw,yK),e(yK,Uqr),e(uw,Jqr),e($e,Yqr),e($e,_w),e(_w,tEe),e(tEe,Kqr),e(_w,Zqr),e(_w,LK),e(LK,eNr),e(_w,oNr),e($e,rNr),e($e,bw),e(bw,aEe),e(aEe,tNr),e(bw,aNr),e(bw,xK),e(xK,nNr),e(bw,sNr),e($e,lNr),e($e,vw),e(vw,nEe),e(nEe,iNr),e(vw,dNr),e(vw,$K),e($K,cNr),e(vw,fNr),e($e,mNr),e($e,Fw),e(Fw,sEe),e(sEe,gNr),e(Fw,hNr),e(Fw,kK),e(kK,pNr),e(Fw,uNr),e($e,_Nr),e($e,Tw),e(Tw,lEe),e(lEe,bNr),e(Tw,vNr),e(Tw,SK),e(SK,FNr),e(Tw,TNr),e($e,MNr),e($e,Mw),e(Mw,iEe),e(iEe,ENr),e(Mw,CNr),e(Mw,RK),e(RK,wNr),e(Mw,ANr),e($e,yNr),e($e,Ew),e(Ew,dEe),e(dEe,LNr),e(Ew,xNr),e(Ew,PK),e(PK,$Nr),e(Ew,kNr),e(zr,SNr),M(Cw,zr,null),b(f,Wje,_),b(f,Yc,_),e(Yc,ww),e(ww,cEe),M(sx,cEe,null),e(Yc,RNr),e(Yc,fEe),e(fEe,PNr),b(f,Qje,_),b(f,br,_),M(lx,br,null),e(br,BNr),e(br,Kc),e(Kc,INr),e(Kc,BK),e(BK,qNr),e(Kc,NNr),e(Kc,IK),e(IK,jNr),e(Kc,DNr),e(br,GNr),e(br,ix),e(ix,ONr),e(ix,mEe),e(mEe,VNr),e(ix,XNr),e(br,zNr),e(br,Ht),M(dx,Ht,null),e(Ht,WNr),e(Ht,gEe),e(gEe,QNr),e(Ht,HNr),e(Ht,Zc),e(Zc,UNr),e(Zc,hEe),e(hEe,JNr),e(Zc,YNr),e(Zc,qK),e(qK,KNr),e(Zc,ZNr),e(Ht,ejr),M(Aw,Ht,null),e(br,ojr),e(br,Wr),M(cx,Wr,null),e(Wr,rjr),e(Wr,pEe),e(pEe,tjr),e(Wr,ajr),e(Wr,Tn),e(Tn,njr),e(Tn,uEe),e(uEe,sjr),e(Tn,ljr),e(Tn,_Ee),e(_Ee,ijr),e(Tn,djr),e(Tn,bEe),e(bEe,cjr),e(Tn,fjr),e(Wr,mjr),e(Wr,De),e(De,yw),e(yw,vEe),e(vEe,gjr),e(yw,hjr),e(yw,NK),e(NK,pjr),e(yw,ujr),e(De,_jr),e(De,Lw),e(Lw,FEe),e(FEe,bjr),e(Lw,vjr),e(Lw,jK),e(jK,Fjr),e(Lw,Tjr),e(De,Mjr),e(De,xw),e(xw,TEe),e(TEe,Ejr),e(xw,Cjr),e(xw,DK),e(DK,wjr),e(xw,Ajr),e(De,yjr),e(De,$w),e($w,MEe),e(MEe,Ljr),e($w,xjr),e($w,GK),e(GK,$jr),e($w,kjr),e(De,Sjr),e(De,kw),e(kw,EEe),e(EEe,Rjr),e(kw,Pjr),e(kw,OK),e(OK,Bjr),e(kw,Ijr),e(De,qjr),e(De,Sw),e(Sw,CEe),e(CEe,Njr),e(Sw,jjr),e(Sw,VK),e(VK,Djr),e(Sw,Gjr),e(De,Ojr),e(De,Rw),e(Rw,wEe),e(wEe,Vjr),e(Rw,Xjr),e(Rw,XK),e(XK,zjr),e(Rw,Wjr),e(De,Qjr),e(De,Pw),e(Pw,AEe),e(AEe,Hjr),e(Pw,Ujr),e(Pw,zK),e(zK,Jjr),e(Pw,Yjr),e(Wr,Kjr),M(Bw,Wr,null),b(f,Hje,_),b(f,ef,_),e(ef,Iw),e(Iw,yEe),M(fx,yEe,null),e(ef,Zjr),e(ef,LEe),e(LEe,eDr),b(f,Uje,_),b(f,vr,_),M(mx,vr,null),e(vr,oDr),e(vr,of),e(of,rDr),e(of,WK),e(WK,tDr),e(of,aDr),e(of,QK),e(QK,nDr),e(of,sDr),e(vr,lDr),e(vr,gx),e(gx,iDr),e(gx,xEe),e(xEe,dDr),e(gx,cDr),e(vr,fDr),e(vr,Ut),M(hx,Ut,null),e(Ut,mDr),e(Ut,$Ee),e($Ee,gDr),e(Ut,hDr),e(Ut,rf),e(rf,pDr),e(rf,kEe),e(kEe,uDr),e(rf,_Dr),e(rf,HK),e(HK,bDr),e(rf,vDr),e(Ut,FDr),M(qw,Ut,null),e(vr,TDr),e(vr,Qr),M(px,Qr,null),e(Qr,MDr),e(Qr,SEe),e(SEe,EDr),e(Qr,CDr),e(Qr,Mn),e(Mn,wDr),e(Mn,REe),e(REe,ADr),e(Mn,yDr),e(Mn,PEe),e(PEe,LDr),e(Mn,xDr),e(Mn,BEe),e(BEe,$Dr),e(Mn,kDr),e(Qr,SDr),e(Qr,Ge),e(Ge,Nw),e(Nw,IEe),e(IEe,RDr),e(Nw,PDr),e(Nw,UK),e(UK,BDr),e(Nw,IDr),e(Ge,qDr),e(Ge,jw),e(jw,qEe),e(qEe,NDr),e(jw,jDr),e(jw,JK),e(JK,DDr),e(jw,GDr),e(Ge,ODr),e(Ge,Dw),e(Dw,NEe),e(NEe,VDr),e(Dw,XDr),e(Dw,YK),e(YK,zDr),e(Dw,WDr),e(Ge,QDr),e(Ge,Gw),e(Gw,jEe),e(jEe,HDr),e(Gw,UDr),e(Gw,KK),e(KK,JDr),e(Gw,YDr),e(Ge,KDr),e(Ge,Ow),e(Ow,DEe),e(DEe,ZDr),e(Ow,eGr),e(Ow,ZK),e(ZK,oGr),e(Ow,rGr),e(Ge,tGr),e(Ge,Vw),e(Vw,GEe),e(GEe,aGr),e(Vw,nGr),e(Vw,eZ),e(eZ,sGr),e(Vw,lGr),e(Ge,iGr),e(Ge,Xw),e(Xw,OEe),e(OEe,dGr),e(Xw,cGr),e(Xw,oZ),e(oZ,fGr),e(Xw,mGr),e(Ge,gGr),e(Ge,zw),e(zw,VEe),e(VEe,hGr),e(zw,pGr),e(zw,rZ),e(rZ,uGr),e(zw,_Gr),e(Qr,bGr),M(Ww,Qr,null),b(f,Jje,_),b(f,tf,_),e(tf,Qw),e(Qw,XEe),M(ux,XEe,null),e(tf,vGr),e(tf,zEe),e(zEe,FGr),b(f,Yje,_),b(f,Fr,_),M(_x,Fr,null),e(Fr,TGr),e(Fr,af),e(af,MGr),e(af,tZ),e(tZ,EGr),e(af,CGr),e(af,aZ),e(aZ,wGr),e(af,AGr),e(Fr,yGr),e(Fr,bx),e(bx,LGr),e(bx,WEe),e(WEe,xGr),e(bx,$Gr),e(Fr,kGr),e(Fr,Jt),M(vx,Jt,null),e(Jt,SGr),e(Jt,QEe),e(QEe,RGr),e(Jt,PGr),e(Jt,nf),e(nf,BGr),e(nf,HEe),e(HEe,IGr),e(nf,qGr),e(nf,nZ),e(nZ,NGr),e(nf,jGr),e(Jt,DGr),M(Hw,Jt,null),e(Fr,GGr),e(Fr,Hr),M(Fx,Hr,null),e(Hr,OGr),e(Hr,UEe),e(UEe,VGr),e(Hr,XGr),e(Hr,En),e(En,zGr),e(En,JEe),e(JEe,WGr),e(En,QGr),e(En,YEe),e(YEe,HGr),e(En,UGr),e(En,KEe),e(KEe,JGr),e(En,YGr),e(Hr,KGr),e(Hr,ZEe),e(ZEe,Uw),e(Uw,eCe),e(eCe,ZGr),e(Uw,eOr),e(Uw,sZ),e(sZ,oOr),e(Uw,rOr),e(Hr,tOr),M(Jw,Hr,null),b(f,Kje,_),b(f,sf,_),e(sf,Yw),e(Yw,oCe),M(Tx,oCe,null),e(sf,aOr),e(sf,rCe),e(rCe,nOr),b(f,Zje,_),b(f,Tr,_),M(Mx,Tr,null),e(Tr,sOr),e(Tr,lf),e(lf,lOr),e(lf,lZ),e(lZ,iOr),e(lf,dOr),e(lf,iZ),e(iZ,cOr),e(lf,fOr),e(Tr,mOr),e(Tr,Ex),e(Ex,gOr),e(Ex,tCe),e(tCe,hOr),e(Ex,pOr),e(Tr,uOr),e(Tr,Yt),M(Cx,Yt,null),e(Yt,_Or),e(Yt,aCe),e(aCe,bOr),e(Yt,vOr),e(Yt,df),e(df,FOr),e(df,nCe),e(nCe,TOr),e(df,MOr),e(df,dZ),e(dZ,EOr),e(df,COr),e(Yt,wOr),M(Kw,Yt,null),e(Tr,AOr),e(Tr,Ur),M(wx,Ur,null),e(Ur,yOr),e(Ur,sCe),e(sCe,LOr),e(Ur,xOr),e(Ur,Cn),e(Cn,$Or),e(Cn,lCe),e(lCe,kOr),e(Cn,SOr),e(Cn,iCe),e(iCe,ROr),e(Cn,POr),e(Cn,dCe),e(dCe,BOr),e(Cn,IOr),e(Ur,qOr),e(Ur,Ax),e(Ax,Zw),e(Zw,cCe),e(cCe,NOr),e(Zw,jOr),e(Zw,cZ),e(cZ,DOr),e(Zw,GOr),e(Ax,OOr),e(Ax,e0),e(e0,fCe),e(fCe,VOr),e(e0,XOr),e(e0,fZ),e(fZ,zOr),e(e0,WOr),e(Ur,QOr),M(o0,Ur,null),b(f,eDe,_),b(f,cf,_),e(cf,r0),e(r0,mCe),M(yx,mCe,null),e(cf,HOr),e(cf,gCe),e(gCe,UOr),b(f,oDe,_),b(f,Mr,_),M(Lx,Mr,null),e(Mr,JOr),e(Mr,ff),e(ff,YOr),e(ff,mZ),e(mZ,KOr),e(ff,ZOr),e(ff,gZ),e(gZ,eVr),e(ff,oVr),e(Mr,rVr),e(Mr,xx),e(xx,tVr),e(xx,hCe),e(hCe,aVr),e(xx,nVr),e(Mr,sVr),e(Mr,Kt),M($x,Kt,null),e(Kt,lVr),e(Kt,pCe),e(pCe,iVr),e(Kt,dVr),e(Kt,mf),e(mf,cVr),e(mf,uCe),e(uCe,fVr),e(mf,mVr),e(mf,hZ),e(hZ,gVr),e(mf,hVr),e(Kt,pVr),M(t0,Kt,null),e(Mr,uVr),e(Mr,Jr),M(kx,Jr,null),e(Jr,_Vr),e(Jr,_Ce),e(_Ce,bVr),e(Jr,vVr),e(Jr,wn),e(wn,FVr),e(wn,bCe),e(bCe,TVr),e(wn,MVr),e(wn,vCe),e(vCe,EVr),e(wn,CVr),e(wn,FCe),e(FCe,wVr),e(wn,AVr),e(Jr,yVr),e(Jr,TCe),e(TCe,a0),e(a0,MCe),e(MCe,LVr),e(a0,xVr),e(a0,pZ),e(pZ,$Vr),e(a0,kVr),e(Jr,SVr),M(n0,Jr,null),rDe=!0},p(f,[_]){const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),Tf.$set(Sx);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),Cg.$set(ECe);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),ah.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),Ih.$set(wCe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),qh.$set(Rx);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),tp.$set(ACe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),ap.$set(An);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),lp.$set(yCe);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),r_.$set(LCe);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),a_.$set(xCe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),H_.$set(Px);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),J_.$set($Ce);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),B2.$set(Bx);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),q2.$set(kCe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),F1.$set(Ix);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),M1.$set(SCe);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),D1.$set(RCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),O1.$set(PCe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),qb.$set(gf);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),jb.$set(BCe);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),u4.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),b4.$set(qCe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),w4.$set(qx);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),y4.$set(NCe);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),dv.$set(jCe);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),fv.$set(DCe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Zv.$set(et);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),o5.$set(Nx);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),a5.$set(GCe);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),s5.$set(jx);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),F5.$set(OCe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),M5.$set(ot);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),w5.$set(VCe);const hf={};_&2&&(hf.$$scope={dirty:_,ctx:f}),y5.$set(hf);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),N5.$set(XCe);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),D5.$set(zCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Q5.$set(y);const s0={};_&2&&(s0.$$scope={dirty:_,ctx:f}),U5.$set(s0);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),sF.$set(WCe);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),iF.$set(QCe);const l0={};_&2&&(l0.$$scope={dirty:_,ctx:f}),mF.$set(l0);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),hF.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),TF.$set(UCe);const i0={};_&2&&(i0.$$scope={dirty:_,ctx:f}),EF.$set(i0);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),LF.$set(JCe);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),$F.$set(YCe);const d0={};_&2&&(d0.$$scope={dirty:_,ctx:f}),PF.$set(d0);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),IF.$set(KCe);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),jF.$set(ZCe);const c0={};_&2&&(c0.$$scope={dirty:_,ctx:f}),GF.$set(c0);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:f}),QF.$set(e3e);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:f}),UF.$set(o3e);const f0={};_&2&&(f0.$$scope={dirty:_,ctx:f}),KF.$set(f0);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:f}),eT.$set(r3e);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:f}),WT.$set(t3e);const m0={};_&2&&(m0.$$scope={dirty:_,ctx:f}),HT.$set(m0);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:f}),b7.$set(a3e);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:f}),F7.$set(n3e);const g0={};_&2&&(g0.$$scope={dirty:_,ctx:f}),R7.$set(g0);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:f}),B7.$set(s3e);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:f}),D7.$set(l3e);const h0={};_&2&&(h0.$$scope={dirty:_,ctx:f}),O7.$set(h0);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:f}),dM.$set(i3e);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:f}),fM.$set(d3e);const p0={};_&2&&(p0.$$scope={dirty:_,ctx:f}),MM.$set(p0);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:f}),CM.$set(c3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:f}),YM.$set(f3e);const u0={};_&2&&(u0.$$scope={dirty:_,ctx:f}),ZM.$set(u0);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:f}),_E.$set(m3e);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:f}),vE.$set(g3e);const _0={};_&2&&(_0.$$scope={dirty:_,ctx:f}),ME.$set(_0);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:f}),CE.$set(h3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:f}),AE.$set(p3e);const b0={};_&2&&(b0.$$scope={dirty:_,ctx:f}),LE.$set(b0);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:f}),UE.$set(u3e);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:f}),YE.$set(_3e);const v0={};_&2&&(v0.$$scope={dirty:_,ctx:f}),bC.$set(v0);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:f}),FC.$set(b3e);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:f}),MC.$set(v3e);const F0={};_&2&&(F0.$$scope={dirty:_,ctx:f}),CC.$set(F0);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:f}),AC.$set(F3e);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:f}),LC.$set(T3e);const T0={};_&2&&(T0.$$scope={dirty:_,ctx:f}),e3.$set(T0);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:f}),r3.$set(M3e);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:f}),m3.$set(E3e);const M0={};_&2&&(M0.$$scope={dirty:_,ctx:f}),h3.$set(M0);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:f}),y3.$set(C3e);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:f}),x3.$set(w3e);const E0={};_&2&&(E0.$$scope={dirty:_,ctx:f}),D3.$set(E0);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:f}),O3.$set(A3e);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:f}),K3.$set(y3e);const C0={};_&2&&(C0.$$scope={dirty:_,ctx:f}),ew.$set(C0);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:f}),fw.$set(L3e);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:f}),gw.$set(x3e);const w0={};_&2&&(w0.$$scope={dirty:_,ctx:f}),Cw.$set(w0);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:f}),Aw.$set($3e);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:f}),Bw.$set(k3e);const A0={};_&2&&(A0.$$scope={dirty:_,ctx:f}),qw.$set(A0);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:f}),Ww.$set(S3e);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:f}),Hw.$set(R3e);const y0={};_&2&&(y0.$$scope={dirty:_,ctx:f}),Jw.$set(y0);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:f}),Kw.$set(P3e);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:f}),o0.$set(B3e);const L0={};_&2&&(L0.$$scope={dirty:_,ctx:f}),t0.$set(L0);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:f}),n0.$set(I3e)},i(f){rDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(Tf.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E(Cg.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(ah.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(zA.$$.fragment,f),E(Ih.$$.fragment,f),E(qh.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(YA.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(lp.$$.fragment,f),E(ty.$$.fragment,f),E(r_.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(a_.$$.fragment,f),E(iy.$$.fragment,f),E(H_.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(J_.$$.fragment,f),E(gy.$$.fragment,f),E(B2.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(q2.$$.fragment,f),E(by.$$.fragment,f),E(F1.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(M1.$$.fragment,f),E(Ey.$$.fragment,f),E(D1.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(O1.$$.fragment,f),E(Ly.$$.fragment,f),E(qb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(jb.$$.fragment,f),E(Ry.$$.fragment,f),E(u4.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(b4.$$.fragment,f),E(Ny.$$.fragment,f),E(w4.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(y4.$$.fragment,f),E(Vy.$$.fragment,f),E(dv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(fv.$$.fragment,f),E(Hy.$$.fragment,f),E(Zv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(o5.$$.fragment,f),E(Zy.$$.fragment,f),E(a5.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(s5.$$.fragment,f),E(aL.$$.fragment,f),E(F5.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(M5.$$.fragment,f),E(dL.$$.fragment,f),E(w5.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(y5.$$.fragment,f),E(hL.$$.fragment,f),E(N5.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(D5.$$.fragment,f),E(vL.$$.fragment,f),E(Q5.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(U5.$$.fragment,f),E(CL.$$.fragment,f),E(sF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(iF.$$.fragment,f),E(xL.$$.fragment,f),E(mF.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(hF.$$.fragment,f),E(BL.$$.fragment,f),E(TF.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(EF.$$.fragment,f),E(DL.$$.fragment,f),E(LF.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E($F.$$.fragment,f),E(zL.$$.fragment,f),E(PF.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(IF.$$.fragment,f),E(YL.$$.fragment,f),E(jF.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(GF.$$.fragment,f),E(r8.$$.fragment,f),E(QF.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(UF.$$.fragment,f),E(l8.$$.fragment,f),E(KF.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(eT.$$.fragment,f),E(m8.$$.fragment,f),E(WT.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(HT.$$.fragment,f),E(_8.$$.fragment,f),E(b7.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(F7.$$.fragment,f),E(M8.$$.fragment,f),E(R7.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(B7.$$.fragment,f),E(y8.$$.fragment,f),E(D7.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(O7.$$.fragment,f),E(S8.$$.fragment,f),E(dM.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(fM.$$.fragment,f),E(q8.$$.fragment,f),E(MM.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(CM.$$.fragment,f),E(O8.$$.fragment,f),E(YM.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(ZM.$$.fragment,f),E(Q8.$$.fragment,f),E(_E.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(vE.$$.fragment,f),E(K8.$$.fragment,f),E(ME.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(CE.$$.fragment,f),E(a9.$$.fragment,f),E(AE.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(LE.$$.fragment,f),E(d9.$$.fragment,f),E(UE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(YE.$$.fragment,f),E(h9.$$.fragment,f),E(bC.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(FC.$$.fragment,f),E(v9.$$.fragment,f),E(MC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(CC.$$.fragment,f),E(C9.$$.fragment,f),E(AC.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(LC.$$.fragment,f),E(x9.$$.fragment,f),E(e3.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(r3.$$.fragment,f),E(P9.$$.fragment,f),E(m3.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(h3.$$.fragment,f),E(j9.$$.fragment,f),E(y3.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(x3.$$.fragment,f),E(X9.$$.fragment,f),E(D3.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(O3.$$.fragment,f),E(U9.$$.fragment,f),E(K3.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(ew.$$.fragment,f),E(ex.$$.fragment,f),E(fw.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(gw.$$.fragment,f),E(nx.$$.fragment,f),E(Cw.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(Aw.$$.fragment,f),E(cx.$$.fragment,f),E(Bw.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(qw.$$.fragment,f),E(px.$$.fragment,f),E(Ww.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(Hw.$$.fragment,f),E(Fx.$$.fragment,f),E(Jw.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(Kw.$$.fragment,f),E(wx.$$.fragment,f),E(o0.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(t0.$$.fragment,f),E(kx.$$.fragment,f),E(n0.$$.fragment,f),rDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(Tf.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C(Cg.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(ah.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(zA.$$.fragment,f),C(Ih.$$.fragment,f),C(qh.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(YA.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(lp.$$.fragment,f),C(ty.$$.fragment,f),C(r_.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(a_.$$.fragment,f),C(iy.$$.fragment,f),C(H_.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(J_.$$.fragment,f),C(gy.$$.fragment,f),C(B2.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(q2.$$.fragment,f),C(by.$$.fragment,f),C(F1.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(M1.$$.fragment,f),C(Ey.$$.fragment,f),C(D1.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(O1.$$.fragment,f),C(Ly.$$.fragment,f),C(qb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(jb.$$.fragment,f),C(Ry.$$.fragment,f),C(u4.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(b4.$$.fragment,f),C(Ny.$$.fragment,f),C(w4.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(y4.$$.fragment,f),C(Vy.$$.fragment,f),C(dv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(fv.$$.fragment,f),C(Hy.$$.fragment,f),C(Zv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(o5.$$.fragment,f),C(Zy.$$.fragment,f),C(a5.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(s5.$$.fragment,f),C(aL.$$.fragment,f),C(F5.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(M5.$$.fragment,f),C(dL.$$.fragment,f),C(w5.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(y5.$$.fragment,f),C(hL.$$.fragment,f),C(N5.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(D5.$$.fragment,f),C(vL.$$.fragment,f),C(Q5.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(U5.$$.fragment,f),C(CL.$$.fragment,f),C(sF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(iF.$$.fragment,f),C(xL.$$.fragment,f),C(mF.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(hF.$$.fragment,f),C(BL.$$.fragment,f),C(TF.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(EF.$$.fragment,f),C(DL.$$.fragment,f),C(LF.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C($F.$$.fragment,f),C(zL.$$.fragment,f),C(PF.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(IF.$$.fragment,f),C(YL.$$.fragment,f),C(jF.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(GF.$$.fragment,f),C(r8.$$.fragment,f),C(QF.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(UF.$$.fragment,f),C(l8.$$.fragment,f),C(KF.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(eT.$$.fragment,f),C(m8.$$.fragment,f),C(WT.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(HT.$$.fragment,f),C(_8.$$.fragment,f),C(b7.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(F7.$$.fragment,f),C(M8.$$.fragment,f),C(R7.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(B7.$$.fragment,f),C(y8.$$.fragment,f),C(D7.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(O7.$$.fragment,f),C(S8.$$.fragment,f),C(dM.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(fM.$$.fragment,f),C(q8.$$.fragment,f),C(MM.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(CM.$$.fragment,f),C(O8.$$.fragment,f),C(YM.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(ZM.$$.fragment,f),C(Q8.$$.fragment,f),C(_E.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(vE.$$.fragment,f),C(K8.$$.fragment,f),C(ME.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(CE.$$.fragment,f),C(a9.$$.fragment,f),C(AE.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(LE.$$.fragment,f),C(d9.$$.fragment,f),C(UE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(YE.$$.fragment,f),C(h9.$$.fragment,f),C(bC.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(FC.$$.fragment,f),C(v9.$$.fragment,f),C(MC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(CC.$$.fragment,f),C(C9.$$.fragment,f),C(AC.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(LC.$$.fragment,f),C(x9.$$.fragment,f),C(e3.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(r3.$$.fragment,f),C(P9.$$.fragment,f),C(m3.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(h3.$$.fragment,f),C(j9.$$.fragment,f),C(y3.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(x3.$$.fragment,f),C(X9.$$.fragment,f),C(D3.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(O3.$$.fragment,f),C(U9.$$.fragment,f),C(K3.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(ew.$$.fragment,f),C(ex.$$.fragment,f),C(fw.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(gw.$$.fragment,f),C(nx.$$.fragment,f),C(Cw.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(Aw.$$.fragment,f),C(cx.$$.fragment,f),C(Bw.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(qw.$$.fragment,f),C(px.$$.fragment,f),C(Ww.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(Hw.$$.fragment,f),C(Fx.$$.fragment,f),C(Jw.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(Kw.$$.fragment,f),C(wx.$$.fragment,f),C(o0.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(t0.$$.fragment,f),C(kx.$$.fragment,f),C(n0.$$.fragment,f),rDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(je),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Zqe),f&&t(vi),w(yA),f&&t(eNe),f&&t(kn),f&&t(oNe),w(LA,f),f&&t(rNe),f&&t(Y$),f&&t(tNe),w(Tf,f),f&&t(aNe),f&&t(Fi),w(xA),f&&t(nNe),f&&t(Co),w($A),w(RA),w(Cg),w(PA),f&&t(sNe),f&&t(Mi),w(BA),f&&t(lNe),f&&t(wo),w(IA),w(jA),w(ah),w(DA),f&&t(iNe),f&&t(Ei),w(GA),f&&t(dNe),f&&t(Ao),w(OA),w(zA),w(Ih),w(qh),w(WA),f&&t(cNe),f&&t(Ci),w(QA),f&&t(fNe),f&&t(yo),w(HA),w(YA),w(tp),w(ap),w(KA),f&&t(mNe),f&&t(Ai),w(ZA),f&&t(gNe),f&&t(Lo),w(ey),w(ry),w(lp),w(ty),w(r_),f&&t(hNe),f&&t(xi),w(ay),f&&t(pNe),f&&t(xo),w(ny),w(ly),w(a_),w(iy),w(H_),f&&t(uNe),f&&t(Si),w(dy),f&&t(_Ne),f&&t($o),w(cy),w(my),w(J_),w(gy),w(B2),f&&t(bNe),f&&t(Bi),w(hy),f&&t(vNe),f&&t(ko),w(py),w(_y),w(q2),w(by),w(F1),f&&t(FNe),f&&t(Ni),w(vy),f&&t(TNe),f&&t(So),w(Fy),w(My),w(M1),w(Ey),w(D1),f&&t(MNe),f&&t(Gi),w(Cy),f&&t(ENe),f&&t(Ro),w(wy),w(yy),w(O1),w(Ly),w(qb),f&&t(CNe),f&&t(Xi),w(xy),f&&t(wNe),f&&t(Po),w($y),w(Sy),w(jb),w(Ry),w(u4),f&&t(ANe),f&&t(Qi),w(Py),f&&t(yNe),f&&t(Bo),w(By),w(qy),w(b4),w(Ny),w(w4),f&&t(LNe),f&&t(Ji),w(jy),f&&t(xNe),f&&t(Io),w(Dy),w(Oy),w(y4),w(Vy),w(dv),f&&t($Ne),f&&t(Zi),w(Xy),f&&t(kNe),f&&t(qo),w(zy),w(Qy),w(fv),w(Hy),w(Zv),f&&t(SNe),f&&t(rd),w(Uy),f&&t(RNe),f&&t(No),w(Jy),w(Ky),w(o5),w(Zy),w(a5),f&&t(PNe),f&&t(nd),w(eL),f&&t(BNe),f&&t(jo),w(oL),w(tL),w(s5),w(aL),w(F5),f&&t(INe),f&&t(id),w(nL),f&&t(qNe),f&&t(Do),w(sL),w(iL),w(M5),w(dL),w(w5),f&&t(NNe),f&&t(fd),w(cL),f&&t(jNe),f&&t(Go),w(fL),w(gL),w(y5),w(hL),w(N5),f&&t(DNe),f&&t(hd),w(pL),f&&t(GNe),f&&t(Oo),w(uL),w(bL),w(D5),w(vL),w(Q5),f&&t(ONe),f&&t(_d),w(FL),f&&t(VNe),f&&t(Vo),w(TL),w(EL),w(U5),w(CL),w(sF),f&&t(XNe),f&&t(Fd),w(wL),f&&t(zNe),f&&t(Xo),w(AL),w(LL),w(iF),w(xL),w(mF),f&&t(WNe),f&&t(Ed),w(kL),f&&t(QNe),f&&t(zo),w(SL),w(PL),w(hF),w(BL),w(TF),f&&t(HNe),f&&t(Ad),w(IL),f&&t(UNe),f&&t(Wo),w(qL),w(jL),w(EF),w(DL),w(LF),f&&t(JNe),f&&t($d),w(GL),f&&t(YNe),f&&t(Qo),w(OL),w(XL),w($F),w(zL),w(PF),f&&t(KNe),f&&t(Rd),w(QL),f&&t(ZNe),f&&t(Ho),w(HL),w(JL),w(IF),w(YL),w(jF),f&&t(eje),f&&t(Id),w(KL),f&&t(oje),f&&t(Uo),w(ZL),w(o8),w(GF),w(r8),w(QF),f&&t(rje),f&&t(jd),w(t8),f&&t(tje),f&&t(Jo),w(a8),w(s8),w(UF),w(l8),w(KF),f&&t(aje),f&&t(Od),w(i8),f&&t(nje),f&&t(Yo),w(d8),w(f8),w(eT),w(m8),w(WT),f&&t(sje),f&&t(zd),w(g8),f&&t(lje),f&&t(Ko),w(h8),w(u8),w(HT),w(_8),w(b7),f&&t(ije),f&&t(Hd),w(b8),f&&t(dje),f&&t(Zo),w(v8),w(T8),w(F7),w(M8),w(R7),f&&t(cje),f&&t(Yd),w(E8),f&&t(fje),f&&t(er),w(C8),w(A8),w(B7),w(y8),w(D7),f&&t(mje),f&&t(ec),w(L8),f&&t(gje),f&&t(or),w(x8),w(k8),w(O7),w(S8),w(dM),f&&t(hje),f&&t(tc),w(R8),f&&t(pje),f&&t(rr),w(P8),w(I8),w(fM),w(q8),w(MM),f&&t(uje),f&&t(sc),w(N8),f&&t(_je),f&&t(tr),w(j8),w(G8),w(CM),w(O8),w(YM),f&&t(bje),f&&t(dc),w(V8),f&&t(vje),f&&t(ar),w(X8),w(W8),w(ZM),w(Q8),w(_E),f&&t(Fje),f&&t(mc),w(H8),f&&t(Tje),f&&t(nr),w(U8),w(Y8),w(vE),w(K8),w(ME),f&&t(Mje),f&&t(pc),w(e9),f&&t(Eje),f&&t(sr),w(o9),w(t9),w(CE),w(a9),w(AE),f&&t(Cje),f&&t(bc),w(n9),f&&t(wje),f&&t(lr),w(s9),w(i9),w(LE),w(d9),w(UE),f&&t(Aje),f&&t(Tc),w(c9),f&&t(yje),f&&t(ir),w(f9),w(g9),w(YE),w(h9),w(bC),f&&t(Lje),f&&t(Cc),w(p9),f&&t(xje),f&&t(dr),w(u9),w(b9),w(FC),w(v9),w(MC),f&&t($je),f&&t(yc),w(F9),f&&t(kje),f&&t(cr),w(T9),w(E9),w(CC),w(C9),w(AC),f&&t(Sje),f&&t($c),w(w9),f&&t(Rje),f&&t(fr),w(A9),w(L9),w(LC),w(x9),w(e3),f&&t(Pje),f&&t(Rc),w($9),f&&t(Bje),f&&t(mr),w(k9),w(R9),w(r3),w(P9),w(m3),f&&t(Ije),f&&t(Ic),w(B9),f&&t(qje),f&&t(gr),w(I9),w(N9),w(h3),w(j9),w(y3),f&&t(Nje),f&&t(jc),w(D9),f&&t(jje),f&&t(hr),w(G9),w(V9),w(x3),w(X9),w(D3),f&&t(Dje),f&&t(Oc),w(z9),f&&t(Gje),f&&t(pr),w(W9),w(H9),w(O3),w(U9),w(K3),f&&t(Oje),f&&t(zc),w(J9),f&&t(Vje),f&&t(ur),w(Y9),w(Z9),w(ew),w(ex),w(fw),f&&t(Xje),f&&t(Hc),w(ox),f&&t(zje),f&&t(_r),w(rx),w(ax),w(gw),w(nx),w(Cw),f&&t(Wje),f&&t(Yc),w(sx),f&&t(Qje),f&&t(br),w(lx),w(dx),w(Aw),w(cx),w(Bw),f&&t(Hje),f&&t(ef),w(fx),f&&t(Uje),f&&t(vr),w(mx),w(hx),w(qw),w(px),w(Ww),f&&t(Jje),f&&t(tf),w(ux),f&&t(Yje),f&&t(Fr),w(_x),w(vx),w(Hw),w(Fx),w(Jw),f&&t(Kje),f&&t(sf),w(Tx),f&&t(Zje),f&&t(Tr),w(Mx),w(Cx),w(Kw),w(wx),w(o0),f&&t(eDe),f&&t(cf),w(yx),f&&t(oDe),f&&t(Mr),w(Lx),w($x),w(t0),w(kx),w(n0)}}}const gSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hSt(L){return h$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class TSt extends c$t{constructor(g){super();f$t(this,g,hSt,mSt,m$t,{})}}export{TSt as default,gSt as metadata};
