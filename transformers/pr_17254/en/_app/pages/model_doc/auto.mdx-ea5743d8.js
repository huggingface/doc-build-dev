import{S as f0t,i as m0t,s as g0t,e as a,k as l,w as F,t as o,M as h0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as p0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as jNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function u0t(L){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,W6,hf,qe,Xe,fi,An,H6,yn,Ln,U6,mi,xn,J6,gi,pf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),gf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),W6=o(")."),hf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),An=o("NewModel"),H6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),U6=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),J6=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),pf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var p$=s(p);m=r(p$,"NewModelConfig"),p$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var u$=s(ii);gf=r(u$,"model_type"),u$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var _$=s(di);ci=r(_$,'"new-model"'),_$.forEach(t),W6=r(Ae,")."),Ae.forEach(t),hf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);An=r(Ea,"NewModel"),Ea.forEach(t),H6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var b$=s(yn);Ln=r(b$,"PreTrainedModel"),b$.forEach(t),U6=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var uf=s(mi);xn=r(uf,"config_class"),uf.forEach(t),J6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var v$=s(gi);pf=r(v$,"NewModelConfig"),v$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,gf),e(g,et),e(g,di),e(di,ci),e(g,W6),b(ze,hf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,An),e(qe,H6),e(qe,yn),e(yn,Ln),e(qe,U6),e(qe,mi),e(mi,xn),e(qe,J6),e(qe,gi),e(gi,pf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(hf),ze&&t(qe)}}}function _0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function F0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function M0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u,d,h,Mo,ii,gf,et,di,ci,W6,hf,qe,Xe,fi,An,H6,yn,Ln,U6,mi,xn,J6,gi,pf,Ma,ze,Ae,p$,hi,u$,_$,Eo,Ea,b$,uf,v$,oDe,XPe,pi,_f,ree,Y6,rDe,tee,tDe,zPe,$n,aDe,aee,nDe,sDe,nee,lDe,iDe,QPe,K6,WPe,F$,dDe,HPe,bf,UPe,ui,vf,see,Z6,cDe,lee,fDe,JPe,Co,e0,mDe,o0,gDe,T$,hDe,pDe,uDe,r0,_De,iee,bDe,vDe,FDe,Er,t0,TDe,dee,MDe,EDe,_i,CDe,cee,wDe,ADe,fee,yDe,LDe,xDe,A,Ff,mee,$De,kDe,M$,SDe,RDe,BDe,Tf,gee,PDe,IDe,E$,qDe,NDe,jDe,Mf,hee,DDe,GDe,C$,ODe,VDe,XDe,Ef,pee,zDe,QDe,w$,WDe,HDe,UDe,Cf,uee,JDe,YDe,A$,KDe,ZDe,eGe,wf,_ee,oGe,rGe,y$,tGe,aGe,nGe,Af,bee,sGe,lGe,L$,iGe,dGe,cGe,yf,vee,fGe,mGe,x$,gGe,hGe,pGe,Lf,Fee,uGe,_Ge,$$,bGe,vGe,FGe,xf,Tee,TGe,MGe,k$,EGe,CGe,wGe,$f,Mee,AGe,yGe,S$,LGe,xGe,$Ge,kf,Eee,kGe,SGe,R$,RGe,BGe,PGe,Sf,Cee,IGe,qGe,B$,NGe,jGe,DGe,Rf,wee,GGe,OGe,P$,VGe,XGe,zGe,Bf,Aee,QGe,WGe,I$,HGe,UGe,JGe,Pf,yee,YGe,KGe,q$,ZGe,eOe,oOe,If,Lee,rOe,tOe,N$,aOe,nOe,sOe,qf,xee,lOe,iOe,j$,dOe,cOe,fOe,Nf,$ee,mOe,gOe,D$,hOe,pOe,uOe,jf,kee,_Oe,bOe,G$,vOe,FOe,TOe,Df,See,MOe,EOe,O$,COe,wOe,AOe,Gf,Ree,yOe,LOe,V$,xOe,$Oe,kOe,Of,Bee,SOe,ROe,X$,BOe,POe,IOe,Vf,Pee,qOe,NOe,z$,jOe,DOe,GOe,Xf,Iee,OOe,VOe,Q$,XOe,zOe,QOe,zf,qee,WOe,HOe,W$,UOe,JOe,YOe,Qf,Nee,KOe,ZOe,H$,eVe,oVe,rVe,Wf,jee,tVe,aVe,U$,nVe,sVe,lVe,Hf,Dee,iVe,dVe,J$,cVe,fVe,mVe,Uf,Gee,gVe,hVe,Y$,pVe,uVe,_Ve,Jf,Oee,bVe,vVe,K$,FVe,TVe,MVe,Yf,Vee,EVe,CVe,Z$,wVe,AVe,yVe,Kf,Xee,LVe,xVe,ek,$Ve,kVe,SVe,Zf,zee,RVe,BVe,ok,PVe,IVe,qVe,em,Qee,NVe,jVe,rk,DVe,GVe,OVe,om,Wee,VVe,XVe,tk,zVe,QVe,WVe,rm,Hee,HVe,UVe,ak,JVe,YVe,KVe,tm,Uee,ZVe,eXe,nk,oXe,rXe,tXe,am,Jee,aXe,nXe,sk,sXe,lXe,iXe,nm,Yee,dXe,cXe,lk,fXe,mXe,gXe,sm,Kee,hXe,pXe,ik,uXe,_Xe,bXe,lm,Zee,vXe,FXe,dk,TXe,MXe,EXe,im,eoe,CXe,wXe,ck,AXe,yXe,LXe,dm,ooe,xXe,$Xe,fk,kXe,SXe,RXe,cm,roe,BXe,PXe,mk,IXe,qXe,NXe,fm,toe,jXe,DXe,gk,GXe,OXe,VXe,mm,aoe,XXe,zXe,hk,QXe,WXe,HXe,gm,noe,UXe,JXe,pk,YXe,KXe,ZXe,hm,soe,eze,oze,uk,rze,tze,aze,pm,loe,nze,sze,_k,lze,ize,dze,um,ioe,cze,fze,bk,mze,gze,hze,_m,doe,pze,uze,vk,_ze,bze,vze,bm,coe,Fze,Tze,Fk,Mze,Eze,Cze,vm,foe,wze,Aze,Tk,yze,Lze,xze,Fm,moe,$ze,kze,Mk,Sze,Rze,Bze,Tm,goe,Pze,Ize,Ek,qze,Nze,jze,Mm,hoe,Dze,Gze,Ck,Oze,Vze,Xze,Em,poe,zze,Qze,wk,Wze,Hze,Uze,Cm,uoe,Jze,Yze,Ak,Kze,Zze,eQe,wm,_oe,oQe,rQe,yk,tQe,aQe,nQe,Am,boe,sQe,lQe,Lk,iQe,dQe,cQe,ym,voe,fQe,mQe,xk,gQe,hQe,pQe,Lm,Foe,uQe,_Qe,$k,bQe,vQe,FQe,xm,Toe,TQe,MQe,kk,EQe,CQe,wQe,$m,Moe,AQe,yQe,Sk,LQe,xQe,$Qe,km,Eoe,kQe,SQe,Rk,RQe,BQe,PQe,Sm,Coe,IQe,qQe,Bk,NQe,jQe,DQe,Rm,woe,GQe,OQe,Pk,VQe,XQe,zQe,Bm,Aoe,QQe,WQe,Ik,HQe,UQe,JQe,Pm,yoe,YQe,KQe,qk,ZQe,eWe,oWe,Im,Loe,rWe,tWe,Nk,aWe,nWe,sWe,qm,xoe,lWe,iWe,jk,dWe,cWe,fWe,Nm,$oe,mWe,gWe,Dk,hWe,pWe,uWe,jm,koe,_We,bWe,Gk,vWe,FWe,TWe,Dm,Soe,MWe,EWe,Ok,CWe,wWe,AWe,Gm,Roe,yWe,LWe,Vk,xWe,$We,kWe,Om,Boe,SWe,RWe,Xk,BWe,PWe,IWe,Vm,Poe,qWe,NWe,zk,jWe,DWe,GWe,Xm,Ioe,OWe,VWe,Qk,XWe,zWe,QWe,zm,qoe,WWe,HWe,Wk,UWe,JWe,YWe,Qm,Noe,KWe,ZWe,Hk,eHe,oHe,rHe,Wm,joe,tHe,aHe,Uk,nHe,sHe,lHe,Hm,Doe,iHe,dHe,Jk,cHe,fHe,mHe,Um,Goe,gHe,hHe,Yk,pHe,uHe,_He,Jm,Ooe,bHe,vHe,Kk,FHe,THe,MHe,Ym,Voe,EHe,CHe,Zk,wHe,AHe,yHe,Km,Xoe,LHe,xHe,eS,$He,kHe,SHe,Zm,zoe,RHe,BHe,oS,PHe,IHe,qHe,eg,Qoe,NHe,jHe,rS,DHe,GHe,OHe,og,Woe,VHe,XHe,tS,zHe,QHe,WHe,rg,Hoe,HHe,UHe,aS,JHe,YHe,KHe,tg,Uoe,ZHe,eUe,nS,oUe,rUe,tUe,ag,Joe,aUe,nUe,sS,sUe,lUe,iUe,ng,Yoe,dUe,cUe,lS,fUe,mUe,gUe,sg,Koe,hUe,pUe,iS,uUe,_Ue,bUe,lg,Zoe,vUe,FUe,dS,TUe,MUe,EUe,ig,ere,CUe,wUe,cS,AUe,yUe,LUe,dg,ore,xUe,$Ue,fS,kUe,SUe,RUe,cg,rre,BUe,PUe,mS,IUe,qUe,NUe,fg,tre,jUe,DUe,gS,GUe,OUe,VUe,mg,are,XUe,zUe,hS,QUe,WUe,HUe,gg,nre,UUe,JUe,pS,YUe,KUe,ZUe,hg,sre,eJe,oJe,uS,rJe,tJe,aJe,pg,lre,nJe,sJe,_S,lJe,iJe,dJe,ug,ire,cJe,fJe,bS,mJe,gJe,hJe,_g,pJe,bg,a0,uJe,dre,_Je,YPe,bi,vg,cre,n0,bJe,fre,vJe,KPe,wo,s0,FJe,l0,TJe,vS,MJe,EJe,CJe,i0,wJe,mre,AJe,yJe,LJe,Cr,d0,xJe,gre,$Je,kJe,Ca,SJe,hre,RJe,BJe,pre,PJe,IJe,ure,qJe,NJe,jJe,k,kn,_re,DJe,GJe,FS,OJe,VJe,TS,XJe,zJe,QJe,Sn,bre,WJe,HJe,MS,UJe,JJe,ES,YJe,KJe,ZJe,Rn,vre,eYe,oYe,CS,rYe,tYe,wS,aYe,nYe,sYe,Bn,Fre,lYe,iYe,AS,dYe,cYe,yS,fYe,mYe,gYe,Pn,Tre,hYe,pYe,LS,uYe,_Ye,xS,bYe,vYe,FYe,Fg,Mre,TYe,MYe,$S,EYe,CYe,wYe,Tg,Ere,AYe,yYe,kS,LYe,xYe,$Ye,Mg,Cre,kYe,SYe,SS,RYe,BYe,PYe,In,wre,IYe,qYe,RS,NYe,jYe,BS,DYe,GYe,OYe,qn,Are,VYe,XYe,PS,zYe,QYe,IS,WYe,HYe,UYe,Nn,yre,JYe,YYe,qS,KYe,ZYe,NS,eKe,oKe,rKe,Eg,Lre,tKe,aKe,jS,nKe,sKe,lKe,Cg,xre,iKe,dKe,DS,cKe,fKe,mKe,jn,$re,gKe,hKe,GS,pKe,uKe,OS,_Ke,bKe,vKe,wg,kre,FKe,TKe,VS,MKe,EKe,CKe,Dn,Sre,wKe,AKe,XS,yKe,LKe,zS,xKe,$Ke,kKe,Gn,Rre,SKe,RKe,QS,BKe,PKe,WS,IKe,qKe,NKe,On,Bre,jKe,DKe,HS,GKe,OKe,US,VKe,XKe,zKe,Ag,Pre,QKe,WKe,JS,HKe,UKe,JKe,Vn,Ire,YKe,KKe,YS,ZKe,eZe,KS,oZe,rZe,tZe,Xn,qre,aZe,nZe,ZS,sZe,lZe,eR,iZe,dZe,cZe,zn,Nre,fZe,mZe,oR,gZe,hZe,rR,pZe,uZe,_Ze,Qn,jre,bZe,vZe,tR,FZe,TZe,aR,MZe,EZe,CZe,Wn,Dre,wZe,AZe,nR,yZe,LZe,sR,xZe,$Ze,kZe,Hn,Gre,SZe,RZe,lR,BZe,PZe,iR,IZe,qZe,NZe,yg,Ore,jZe,DZe,dR,GZe,OZe,VZe,Un,Vre,XZe,zZe,cR,QZe,WZe,fR,HZe,UZe,JZe,Lg,Xre,YZe,KZe,mR,ZZe,eeo,oeo,Jn,zre,reo,teo,gR,aeo,neo,hR,seo,leo,ieo,Yn,Qre,deo,ceo,pR,feo,meo,uR,geo,heo,peo,Kn,Wre,ueo,_eo,_R,beo,veo,bR,Feo,Teo,Meo,Zn,Hre,Eeo,Ceo,vR,weo,Aeo,FR,yeo,Leo,xeo,es,Ure,$eo,keo,TR,Seo,Reo,MR,Beo,Peo,Ieo,xg,Jre,qeo,Neo,ER,jeo,Deo,Geo,os,Yre,Oeo,Veo,CR,Xeo,zeo,wR,Qeo,Weo,Heo,rs,Kre,Ueo,Jeo,AR,Yeo,Keo,yR,Zeo,eoo,ooo,ts,Zre,roo,too,LR,aoo,noo,xR,soo,loo,ioo,as,ete,doo,coo,$R,foo,moo,kR,goo,hoo,poo,ns,ote,uoo,_oo,SR,boo,voo,RR,Foo,Too,Moo,ss,rte,Eoo,Coo,BR,woo,Aoo,PR,yoo,Loo,xoo,$g,tte,$oo,koo,IR,Soo,Roo,Boo,ls,ate,Poo,Ioo,qR,qoo,Noo,NR,joo,Doo,Goo,kg,nte,Ooo,Voo,jR,Xoo,zoo,Qoo,Sg,ste,Woo,Hoo,DR,Uoo,Joo,Yoo,is,lte,Koo,Zoo,GR,ero,oro,OR,rro,tro,aro,ds,ite,nro,sro,VR,lro,iro,XR,dro,cro,fro,cs,dte,mro,gro,zR,hro,pro,QR,uro,_ro,bro,Rg,cte,vro,Fro,WR,Tro,Mro,Ero,fs,fte,Cro,wro,HR,Aro,yro,UR,Lro,xro,$ro,ms,mte,kro,Sro,JR,Rro,Bro,YR,Pro,Iro,qro,gs,gte,Nro,jro,KR,Dro,Gro,ZR,Oro,Vro,Xro,hs,hte,zro,Qro,eB,Wro,Hro,oB,Uro,Jro,Yro,ps,pte,Kro,Zro,rB,eto,oto,tB,rto,tto,ato,Bg,ute,nto,sto,aB,lto,ito,dto,us,_te,cto,fto,nB,mto,gto,sB,hto,pto,uto,Pg,bte,_to,bto,lB,vto,Fto,Tto,Ig,vte,Mto,Eto,iB,Cto,wto,Ato,qg,Fte,yto,Lto,dB,xto,$to,kto,Ng,Tte,Sto,Rto,cB,Bto,Pto,Ito,_s,Mte,qto,Nto,fB,jto,Dto,mB,Gto,Oto,Vto,jg,Ete,Xto,zto,gB,Qto,Wto,Hto,bs,Cte,Uto,Jto,hB,Yto,Kto,pB,Zto,eao,oao,vs,wte,rao,tao,uB,aao,nao,_B,sao,lao,iao,Fs,Ate,dao,cao,bB,fao,mao,vB,gao,hao,pao,Ts,yte,uao,_ao,FB,bao,vao,TB,Fao,Tao,Mao,Ms,Lte,Eao,Cao,MB,wao,Aao,EB,yao,Lao,xao,Es,xte,$ao,kao,CB,Sao,Rao,wB,Bao,Pao,Iao,Dg,$te,qao,Nao,AB,jao,Dao,Gao,Gg,kte,Oao,Vao,yB,Xao,zao,Qao,Cs,Ste,Wao,Hao,LB,Uao,Jao,xB,Yao,Kao,Zao,ws,Rte,eno,ono,$B,rno,tno,kB,ano,nno,sno,As,Bte,lno,ino,SB,dno,cno,RB,fno,mno,gno,Og,Pte,hno,pno,BB,uno,_no,bno,Vg,Ite,vno,Fno,PB,Tno,Mno,Eno,Xg,qte,Cno,wno,IB,Ano,yno,Lno,ys,Nte,xno,$no,qB,kno,Sno,NB,Rno,Bno,Pno,zg,jte,Ino,qno,jB,Nno,jno,Dno,Qg,Dte,Gno,Ono,DB,Vno,Xno,zno,Ls,Gte,Qno,Wno,GB,Hno,Uno,OB,Jno,Yno,Kno,Wg,Ote,Zno,eso,VB,oso,rso,tso,Hg,Vte,aso,nso,XB,sso,lso,iso,xs,Xte,dso,cso,zB,fso,mso,QB,gso,hso,pso,$s,zte,uso,_so,WB,bso,vso,HB,Fso,Tso,Mso,ks,Qte,Eso,Cso,UB,wso,Aso,JB,yso,Lso,xso,Ss,Wte,$so,kso,YB,Sso,Rso,KB,Bso,Pso,Iso,Ug,qso,Jg,c0,Nso,Hte,jso,ZPe,vi,Yg,Ute,f0,Dso,Jte,Gso,eIe,Ao,m0,Oso,g0,Vso,ZB,Xso,zso,Qso,h0,Wso,Yte,Hso,Uso,Jso,Qe,p0,Yso,Kte,Kso,Zso,wa,elo,Zte,olo,rlo,eae,tlo,alo,oae,nlo,slo,llo,oe,Kg,rae,ilo,dlo,eP,clo,flo,mlo,Zg,tae,glo,hlo,oP,plo,ulo,_lo,eh,aae,blo,vlo,rP,Flo,Tlo,Mlo,oh,nae,Elo,Clo,tP,wlo,Alo,ylo,rh,sae,Llo,xlo,aP,$lo,klo,Slo,th,lae,Rlo,Blo,nP,Plo,Ilo,qlo,ah,iae,Nlo,jlo,sP,Dlo,Glo,Olo,nh,dae,Vlo,Xlo,lP,zlo,Qlo,Wlo,sh,cae,Hlo,Ulo,iP,Jlo,Ylo,Klo,lh,fae,Zlo,eio,dP,oio,rio,tio,ih,mae,aio,nio,cP,sio,lio,iio,dh,gae,dio,cio,fP,fio,mio,gio,ch,hae,hio,pio,mP,uio,_io,bio,fh,pae,vio,Fio,gP,Tio,Mio,Eio,mh,uae,Cio,wio,hP,Aio,yio,Lio,gh,_ae,xio,$io,pP,kio,Sio,Rio,hh,bae,Bio,Pio,uP,Iio,qio,Nio,ph,vae,jio,Dio,_P,Gio,Oio,Vio,uh,Fae,Xio,zio,bP,Qio,Wio,Hio,_h,Tae,Uio,Jio,vP,Yio,Kio,Zio,bh,Mae,edo,odo,FP,rdo,tdo,ado,vh,Eae,ndo,sdo,TP,ldo,ido,ddo,Fh,Cae,cdo,fdo,MP,mdo,gdo,hdo,Th,wae,pdo,udo,EP,_do,bdo,vdo,Mh,Aae,Fdo,Tdo,CP,Mdo,Edo,Cdo,Eh,wdo,Ch,Ado,wh,u0,ydo,yae,Ldo,oIe,Fi,Ah,Lae,_0,xdo,xae,$do,rIe,yo,b0,kdo,v0,Sdo,wP,Rdo,Bdo,Pdo,F0,Ido,$ae,qdo,Ndo,jdo,We,T0,Ddo,kae,Gdo,Odo,Ti,Vdo,Sae,Xdo,zdo,Rae,Qdo,Wdo,Hdo,be,yh,Bae,Udo,Jdo,AP,Ydo,Kdo,Zdo,Lh,Pae,eco,oco,Iae,rco,tco,aco,xh,qae,nco,sco,yP,lco,ico,dco,$h,Nae,cco,fco,LP,mco,gco,hco,kh,jae,pco,uco,xP,_co,bco,vco,Sh,Dae,Fco,Tco,$P,Mco,Eco,Cco,Rh,Gae,wco,Aco,kP,yco,Lco,xco,Bh,Oae,$co,kco,SP,Sco,Rco,Bco,Ph,Vae,Pco,Ico,RP,qco,Nco,jco,Ih,Xae,Dco,Gco,BP,Oco,Vco,Xco,qh,zae,zco,Qco,PP,Wco,Hco,Uco,Nh,Qae,Jco,Yco,IP,Kco,Zco,efo,jh,Wae,ofo,rfo,qP,tfo,afo,nfo,Dh,Hae,sfo,lfo,NP,ifo,dfo,cfo,Gh,Uae,ffo,mfo,jP,gfo,hfo,pfo,Oh,ufo,Vh,_fo,Xh,M0,bfo,Jae,vfo,tIe,Mi,zh,Yae,E0,Ffo,Kae,Tfo,aIe,Lo,C0,Mfo,Ei,Efo,DP,Cfo,wfo,GP,Afo,yfo,Lfo,w0,xfo,Zae,$fo,kfo,Sfo,ot,A0,Rfo,ene,Bfo,Pfo,Ci,Ifo,one,qfo,Nfo,OP,jfo,Dfo,Gfo,Qh,Ofo,He,y0,Vfo,rne,Xfo,zfo,Aa,Qfo,tne,Wfo,Hfo,ane,Ufo,Jfo,nne,Yfo,Kfo,Zfo,x,Wh,sne,emo,omo,VP,rmo,tmo,amo,Hh,lne,nmo,smo,XP,lmo,imo,dmo,Uh,ine,cmo,fmo,zP,mmo,gmo,hmo,Jh,dne,pmo,umo,QP,_mo,bmo,vmo,Yh,cne,Fmo,Tmo,WP,Mmo,Emo,Cmo,Kh,fne,wmo,Amo,HP,ymo,Lmo,xmo,Zh,mne,$mo,kmo,UP,Smo,Rmo,Bmo,ep,gne,Pmo,Imo,JP,qmo,Nmo,jmo,op,hne,Dmo,Gmo,YP,Omo,Vmo,Xmo,rp,pne,zmo,Qmo,KP,Wmo,Hmo,Umo,tp,une,Jmo,Ymo,ZP,Kmo,Zmo,ego,ap,_ne,ogo,rgo,eI,tgo,ago,ngo,np,bne,sgo,lgo,oI,igo,dgo,cgo,sp,vne,fgo,mgo,rI,ggo,hgo,pgo,lp,Fne,ugo,_go,tI,bgo,vgo,Fgo,ip,Tne,Tgo,Mgo,aI,Ego,Cgo,wgo,dp,Mne,Ago,ygo,nI,Lgo,xgo,$go,cp,Ene,kgo,Sgo,sI,Rgo,Bgo,Pgo,fp,Cne,Igo,qgo,lI,Ngo,jgo,Dgo,mp,wne,Ggo,Ogo,iI,Vgo,Xgo,zgo,gp,Ane,Qgo,Wgo,dI,Hgo,Ugo,Jgo,hp,yne,Ygo,Kgo,cI,Zgo,eho,oho,pp,Lne,rho,tho,fI,aho,nho,sho,up,xne,lho,iho,mI,dho,cho,fho,_p,$ne,mho,gho,gI,hho,pho,uho,bp,kne,_ho,bho,hI,vho,Fho,Tho,vp,Sne,Mho,Eho,pI,Cho,who,Aho,Fp,Rne,yho,Lho,uI,xho,$ho,kho,Tp,Bne,Sho,Rho,_I,Bho,Pho,Iho,Mp,Pne,qho,Nho,bI,jho,Dho,Gho,Ep,Ine,Oho,Vho,vI,Xho,zho,Qho,Rs,qne,Who,Hho,FI,Uho,Jho,TI,Yho,Kho,Zho,Cp,Nne,epo,opo,MI,rpo,tpo,apo,wp,jne,npo,spo,EI,lpo,ipo,dpo,Ap,Dne,cpo,fpo,CI,mpo,gpo,hpo,yp,Gne,ppo,upo,wI,_po,bpo,vpo,Lp,One,Fpo,Tpo,AI,Mpo,Epo,Cpo,xp,Vne,wpo,Apo,yI,ypo,Lpo,xpo,$p,Xne,$po,kpo,LI,Spo,Rpo,Bpo,kp,zne,Ppo,Ipo,xI,qpo,Npo,jpo,Sp,Qne,Dpo,Gpo,$I,Opo,Vpo,Xpo,Rp,Wne,zpo,Qpo,kI,Wpo,Hpo,Upo,Bp,Hne,Jpo,Ypo,SI,Kpo,Zpo,euo,Pp,Une,ouo,ruo,RI,tuo,auo,nuo,Ip,Jne,suo,luo,BI,iuo,duo,cuo,qp,Yne,fuo,muo,PI,guo,huo,puo,Np,Kne,uuo,_uo,II,buo,vuo,Fuo,jp,Zne,Tuo,Muo,qI,Euo,Cuo,wuo,Dp,ese,Auo,yuo,NI,Luo,xuo,$uo,Gp,ose,kuo,Suo,jI,Ruo,Buo,Puo,Op,rse,Iuo,quo,DI,Nuo,juo,Duo,Vp,tse,Guo,Ouo,GI,Vuo,Xuo,zuo,Xp,ase,Quo,Wuo,OI,Huo,Uuo,Juo,zp,nse,Yuo,Kuo,VI,Zuo,e_o,o_o,Qp,sse,r_o,t_o,XI,a_o,n_o,s_o,Wp,lse,l_o,i_o,zI,d_o,c_o,f_o,Hp,ise,m_o,g_o,QI,h_o,p_o,u_o,Up,dse,__o,b_o,WI,v_o,F_o,T_o,Jp,cse,M_o,E_o,HI,C_o,w_o,A_o,Yp,fse,y_o,L_o,UI,x_o,$_o,k_o,Kp,mse,S_o,R_o,JI,B_o,P_o,I_o,Zp,gse,q_o,N_o,YI,j_o,D_o,G_o,eu,hse,O_o,V_o,KI,X_o,z_o,Q_o,ou,pse,W_o,H_o,ZI,U_o,J_o,Y_o,ru,use,K_o,Z_o,eq,e2o,o2o,r2o,tu,_se,t2o,a2o,oq,n2o,s2o,l2o,au,bse,i2o,d2o,rq,c2o,f2o,m2o,nu,vse,g2o,h2o,tq,p2o,u2o,_2o,su,Fse,b2o,v2o,aq,F2o,T2o,M2o,lu,Tse,E2o,C2o,nq,w2o,A2o,y2o,iu,Mse,L2o,x2o,sq,$2o,k2o,S2o,du,Ese,R2o,B2o,lq,P2o,I2o,q2o,cu,Cse,N2o,j2o,iq,D2o,G2o,O2o,fu,wse,V2o,X2o,dq,z2o,Q2o,W2o,mu,Ase,H2o,U2o,cq,J2o,Y2o,K2o,gu,yse,Z2o,e1o,fq,o1o,r1o,t1o,hu,Lse,a1o,n1o,mq,s1o,l1o,i1o,pu,xse,d1o,c1o,gq,f1o,m1o,g1o,uu,$se,h1o,p1o,hq,u1o,_1o,b1o,_u,kse,v1o,F1o,pq,T1o,M1o,E1o,bu,Sse,C1o,w1o,uq,A1o,y1o,L1o,vu,Rse,x1o,$1o,_q,k1o,S1o,R1o,Fu,Bse,B1o,P1o,bq,I1o,q1o,N1o,Tu,Pse,j1o,D1o,vq,G1o,O1o,V1o,Mu,Ise,X1o,z1o,Fq,Q1o,W1o,H1o,Eu,qse,U1o,J1o,Tq,Y1o,K1o,Z1o,Cu,Nse,ebo,obo,Mq,rbo,tbo,abo,wu,jse,nbo,sbo,Eq,lbo,ibo,dbo,Au,Dse,cbo,fbo,Cq,mbo,gbo,hbo,yu,Gse,pbo,ubo,wq,_bo,bbo,vbo,Lu,Ose,Fbo,Tbo,Aq,Mbo,Ebo,Cbo,xu,Vse,wbo,Abo,yq,ybo,Lbo,xbo,$u,Xse,$bo,kbo,Lq,Sbo,Rbo,Bbo,ku,zse,Pbo,Ibo,xq,qbo,Nbo,jbo,Su,Qse,Dbo,Gbo,$q,Obo,Vbo,Xbo,Ru,Wse,zbo,Qbo,kq,Wbo,Hbo,Ubo,Bu,Hse,Jbo,Ybo,Sq,Kbo,Zbo,e4o,Pu,o4o,Use,r4o,t4o,Jse,a4o,n4o,Iu,nIe,wi,qu,Yse,L0,s4o,Kse,l4o,sIe,xo,x0,i4o,Ai,d4o,Rq,c4o,f4o,Bq,m4o,g4o,h4o,$0,p4o,Zse,u4o,_4o,b4o,rt,k0,v4o,ele,F4o,T4o,yi,M4o,ole,E4o,C4o,Pq,w4o,A4o,y4o,Nu,L4o,Ue,S0,x4o,rle,$4o,k4o,ya,S4o,tle,R4o,B4o,ale,P4o,I4o,nle,q4o,N4o,j4o,G,ju,sle,D4o,G4o,Iq,O4o,V4o,X4o,Du,lle,z4o,Q4o,qq,W4o,H4o,U4o,Gu,ile,J4o,Y4o,Nq,K4o,Z4o,e5o,Ou,dle,o5o,r5o,jq,t5o,a5o,n5o,Vu,cle,s5o,l5o,Dq,i5o,d5o,c5o,Xu,fle,f5o,m5o,Gq,g5o,h5o,p5o,zu,mle,u5o,_5o,Oq,b5o,v5o,F5o,Qu,gle,T5o,M5o,Vq,E5o,C5o,w5o,Wu,hle,A5o,y5o,Xq,L5o,x5o,$5o,Hu,ple,k5o,S5o,zq,R5o,B5o,P5o,Uu,ule,I5o,q5o,Qq,N5o,j5o,D5o,Ju,_le,G5o,O5o,Wq,V5o,X5o,z5o,Yu,ble,Q5o,W5o,Hq,H5o,U5o,J5o,Ku,vle,Y5o,K5o,Uq,Z5o,evo,ovo,Zu,Fle,rvo,tvo,Jq,avo,nvo,svo,e_,Tle,lvo,ivo,Yq,dvo,cvo,fvo,o_,Mle,mvo,gvo,Kq,hvo,pvo,uvo,r_,Ele,_vo,bvo,Zq,vvo,Fvo,Tvo,t_,Cle,Mvo,Evo,eN,Cvo,wvo,Avo,a_,wle,yvo,Lvo,oN,xvo,$vo,kvo,n_,Ale,Svo,Rvo,rN,Bvo,Pvo,Ivo,s_,yle,qvo,Nvo,tN,jvo,Dvo,Gvo,l_,Lle,Ovo,Vvo,aN,Xvo,zvo,Qvo,i_,xle,Wvo,Hvo,nN,Uvo,Jvo,Yvo,d_,$le,Kvo,Zvo,sN,eFo,oFo,rFo,c_,kle,tFo,aFo,lN,nFo,sFo,lFo,f_,Sle,iFo,dFo,iN,cFo,fFo,mFo,m_,Rle,gFo,hFo,dN,pFo,uFo,_Fo,g_,Ble,bFo,vFo,cN,FFo,TFo,MFo,h_,Ple,EFo,CFo,fN,wFo,AFo,yFo,p_,Ile,LFo,xFo,mN,$Fo,kFo,SFo,u_,qle,RFo,BFo,gN,PFo,IFo,qFo,__,Nle,NFo,jFo,hN,DFo,GFo,OFo,b_,jle,VFo,XFo,pN,zFo,QFo,WFo,v_,Dle,HFo,UFo,uN,JFo,YFo,KFo,F_,Gle,ZFo,eTo,_N,oTo,rTo,tTo,T_,Ole,aTo,nTo,bN,sTo,lTo,iTo,M_,Vle,dTo,cTo,vN,fTo,mTo,gTo,E_,Xle,hTo,pTo,FN,uTo,_To,bTo,C_,zle,vTo,FTo,TN,TTo,MTo,ETo,w_,CTo,Qle,wTo,ATo,Wle,yTo,LTo,A_,lIe,Li,y_,Hle,R0,xTo,Ule,$To,iIe,$o,B0,kTo,xi,STo,MN,RTo,BTo,EN,PTo,ITo,qTo,P0,NTo,Jle,jTo,DTo,GTo,tt,I0,OTo,Yle,VTo,XTo,$i,zTo,Kle,QTo,WTo,CN,HTo,UTo,JTo,L_,YTo,Je,q0,KTo,Zle,ZTo,e7o,La,o7o,eie,r7o,t7o,oie,a7o,n7o,rie,s7o,l7o,i7o,z,x_,tie,d7o,c7o,wN,f7o,m7o,g7o,$_,aie,h7o,p7o,AN,u7o,_7o,b7o,k_,nie,v7o,F7o,yN,T7o,M7o,E7o,S_,sie,C7o,w7o,LN,A7o,y7o,L7o,R_,lie,x7o,$7o,xN,k7o,S7o,R7o,B_,iie,B7o,P7o,$N,I7o,q7o,N7o,P_,die,j7o,D7o,kN,G7o,O7o,V7o,I_,cie,X7o,z7o,SN,Q7o,W7o,H7o,q_,fie,U7o,J7o,RN,Y7o,K7o,Z7o,N_,mie,eMo,oMo,BN,rMo,tMo,aMo,j_,gie,nMo,sMo,PN,lMo,iMo,dMo,D_,hie,cMo,fMo,IN,mMo,gMo,hMo,G_,pie,pMo,uMo,qN,_Mo,bMo,vMo,O_,uie,FMo,TMo,NN,MMo,EMo,CMo,V_,_ie,wMo,AMo,jN,yMo,LMo,xMo,X_,bie,$Mo,kMo,DN,SMo,RMo,BMo,z_,vie,PMo,IMo,GN,qMo,NMo,jMo,Q_,Fie,DMo,GMo,ON,OMo,VMo,XMo,W_,Tie,zMo,QMo,VN,WMo,HMo,UMo,H_,Mie,JMo,YMo,XN,KMo,ZMo,eEo,U_,Eie,oEo,rEo,zN,tEo,aEo,nEo,J_,Cie,sEo,lEo,QN,iEo,dEo,cEo,Y_,wie,fEo,mEo,WN,gEo,hEo,pEo,K_,Aie,uEo,_Eo,HN,bEo,vEo,FEo,Z_,yie,TEo,MEo,UN,EEo,CEo,wEo,e2,Lie,AEo,yEo,JN,LEo,xEo,$Eo,o2,xie,kEo,SEo,YN,REo,BEo,PEo,r2,$ie,IEo,qEo,KN,NEo,jEo,DEo,t2,kie,GEo,OEo,ZN,VEo,XEo,zEo,a2,Sie,QEo,WEo,ej,HEo,UEo,JEo,n2,Rie,YEo,KEo,oj,ZEo,eCo,oCo,s2,Bie,rCo,tCo,rj,aCo,nCo,sCo,l2,Pie,lCo,iCo,tj,dCo,cCo,fCo,i2,Iie,mCo,gCo,aj,hCo,pCo,uCo,d2,qie,_Co,bCo,nj,vCo,FCo,TCo,c2,Nie,MCo,ECo,sj,CCo,wCo,ACo,f2,yCo,jie,LCo,xCo,Die,$Co,kCo,m2,dIe,ki,g2,Gie,N0,SCo,Oie,RCo,cIe,ko,j0,BCo,Si,PCo,lj,ICo,qCo,ij,NCo,jCo,DCo,D0,GCo,Vie,OCo,VCo,XCo,at,G0,zCo,Xie,QCo,WCo,Ri,HCo,zie,UCo,JCo,dj,YCo,KCo,ZCo,h2,e3o,Ye,O0,o3o,Qie,r3o,t3o,xa,a3o,Wie,n3o,s3o,Hie,l3o,i3o,Uie,d3o,c3o,f3o,Q,p2,Jie,m3o,g3o,cj,h3o,p3o,u3o,u2,Yie,_3o,b3o,fj,v3o,F3o,T3o,_2,Kie,M3o,E3o,mj,C3o,w3o,A3o,b2,Zie,y3o,L3o,gj,x3o,$3o,k3o,v2,ede,S3o,R3o,hj,B3o,P3o,I3o,F2,ode,q3o,N3o,pj,j3o,D3o,G3o,T2,rde,O3o,V3o,uj,X3o,z3o,Q3o,M2,tde,W3o,H3o,_j,U3o,J3o,Y3o,E2,ade,K3o,Z3o,bj,ewo,owo,rwo,C2,nde,two,awo,vj,nwo,swo,lwo,w2,sde,iwo,dwo,Fj,cwo,fwo,mwo,A2,lde,gwo,hwo,Tj,pwo,uwo,_wo,y2,ide,bwo,vwo,Mj,Fwo,Two,Mwo,L2,dde,Ewo,Cwo,Ej,wwo,Awo,ywo,x2,cde,Lwo,xwo,Cj,$wo,kwo,Swo,$2,fde,Rwo,Bwo,wj,Pwo,Iwo,qwo,k2,mde,Nwo,jwo,Aj,Dwo,Gwo,Owo,S2,gde,Vwo,Xwo,yj,zwo,Qwo,Wwo,R2,hde,Hwo,Uwo,Lj,Jwo,Ywo,Kwo,B2,pde,Zwo,eAo,xj,oAo,rAo,tAo,P2,ude,aAo,nAo,$j,sAo,lAo,iAo,I2,_de,dAo,cAo,kj,fAo,mAo,gAo,q2,bde,hAo,pAo,Sj,uAo,_Ao,bAo,N2,vde,vAo,FAo,Rj,TAo,MAo,EAo,j2,Fde,CAo,wAo,Bj,AAo,yAo,LAo,D2,Tde,xAo,$Ao,Pj,kAo,SAo,RAo,G2,Mde,BAo,PAo,Ij,IAo,qAo,NAo,O2,Ede,jAo,DAo,qj,GAo,OAo,VAo,V2,Cde,XAo,zAo,Nj,QAo,WAo,HAo,X2,wde,UAo,JAo,jj,YAo,KAo,ZAo,z2,Ade,e6o,o6o,yde,r6o,t6o,a6o,Q2,Lde,n6o,s6o,Dj,l6o,i6o,d6o,W2,xde,c6o,f6o,Gj,m6o,g6o,h6o,H2,$de,p6o,u6o,Oj,_6o,b6o,v6o,U2,kde,F6o,T6o,Vj,M6o,E6o,C6o,J2,w6o,Sde,A6o,y6o,Rde,L6o,x6o,Y2,fIe,Bi,K2,Bde,V0,$6o,Pde,k6o,mIe,So,X0,S6o,Pi,R6o,Xj,B6o,P6o,zj,I6o,q6o,N6o,z0,j6o,Ide,D6o,G6o,O6o,nt,Q0,V6o,qde,X6o,z6o,Ii,Q6o,Nde,W6o,H6o,Qj,U6o,J6o,Y6o,Z2,K6o,Ke,W0,Z6o,jde,e0o,o0o,$a,r0o,Dde,t0o,a0o,Gde,n0o,s0o,Ode,l0o,i0o,d0o,he,e1,Vde,c0o,f0o,Wj,m0o,g0o,h0o,o1,Xde,p0o,u0o,Hj,_0o,b0o,v0o,r1,zde,F0o,T0o,Uj,M0o,E0o,C0o,t1,Qde,w0o,A0o,Jj,y0o,L0o,x0o,a1,Wde,$0o,k0o,Yj,S0o,R0o,B0o,n1,Hde,P0o,I0o,Kj,q0o,N0o,j0o,s1,Ude,D0o,G0o,Zj,O0o,V0o,X0o,l1,Jde,z0o,Q0o,eD,W0o,H0o,U0o,i1,Yde,J0o,Y0o,oD,K0o,Z0o,eyo,d1,Kde,oyo,ryo,rD,tyo,ayo,nyo,c1,Zde,syo,lyo,tD,iyo,dyo,cyo,f1,ece,fyo,myo,aD,gyo,hyo,pyo,m1,oce,uyo,_yo,nD,byo,vyo,Fyo,g1,rce,Tyo,Myo,sD,Eyo,Cyo,wyo,h1,tce,Ayo,yyo,lD,Lyo,xyo,$yo,p1,ace,kyo,Syo,iD,Ryo,Byo,Pyo,u1,nce,Iyo,qyo,dD,Nyo,jyo,Dyo,_1,Gyo,sce,Oyo,Vyo,lce,Xyo,zyo,b1,gIe,qi,v1,ice,H0,Qyo,dce,Wyo,hIe,Ro,U0,Hyo,Ni,Uyo,cD,Jyo,Yyo,fD,Kyo,Zyo,eLo,J0,oLo,cce,rLo,tLo,aLo,st,Y0,nLo,fce,sLo,lLo,ji,iLo,mce,dLo,cLo,mD,fLo,mLo,gLo,F1,hLo,Ze,K0,pLo,gce,uLo,_Lo,ka,bLo,hce,vLo,FLo,pce,TLo,MLo,uce,ELo,CLo,wLo,q,T1,_ce,ALo,yLo,gD,LLo,xLo,$Lo,M1,bce,kLo,SLo,hD,RLo,BLo,PLo,E1,vce,ILo,qLo,pD,NLo,jLo,DLo,C1,Fce,GLo,OLo,uD,VLo,XLo,zLo,w1,Tce,QLo,WLo,_D,HLo,ULo,JLo,A1,Mce,YLo,KLo,bD,ZLo,e8o,o8o,y1,Ece,r8o,t8o,vD,a8o,n8o,s8o,L1,Cce,l8o,i8o,FD,d8o,c8o,f8o,x1,wce,m8o,g8o,TD,h8o,p8o,u8o,$1,Ace,_8o,b8o,MD,v8o,F8o,T8o,k1,yce,M8o,E8o,ED,C8o,w8o,A8o,S1,Lce,y8o,L8o,CD,x8o,$8o,k8o,R1,xce,S8o,R8o,wD,B8o,P8o,I8o,B1,$ce,q8o,N8o,AD,j8o,D8o,G8o,P1,kce,O8o,V8o,yD,X8o,z8o,Q8o,I1,Sce,W8o,H8o,LD,U8o,J8o,Y8o,q1,Rce,K8o,Z8o,xD,exo,oxo,rxo,N1,Bce,txo,axo,$D,nxo,sxo,lxo,j1,Pce,ixo,dxo,kD,cxo,fxo,mxo,D1,Ice,gxo,hxo,SD,pxo,uxo,_xo,G1,qce,bxo,vxo,RD,Fxo,Txo,Mxo,O1,Nce,Exo,Cxo,BD,wxo,Axo,yxo,V1,jce,Lxo,xxo,PD,$xo,kxo,Sxo,X1,Dce,Rxo,Bxo,ID,Pxo,Ixo,qxo,z1,Gce,Nxo,jxo,qD,Dxo,Gxo,Oxo,Q1,Oce,Vxo,Xxo,ND,zxo,Qxo,Wxo,W1,Vce,Hxo,Uxo,jD,Jxo,Yxo,Kxo,H1,Xce,Zxo,e9o,DD,o9o,r9o,t9o,U1,zce,a9o,n9o,GD,s9o,l9o,i9o,J1,Qce,d9o,c9o,OD,f9o,m9o,g9o,Y1,Wce,h9o,p9o,VD,u9o,_9o,b9o,K1,Hce,v9o,F9o,XD,T9o,M9o,E9o,Z1,Uce,C9o,w9o,zD,A9o,y9o,L9o,eb,Jce,x9o,$9o,QD,k9o,S9o,R9o,ob,Yce,B9o,P9o,WD,I9o,q9o,N9o,rb,Kce,j9o,D9o,HD,G9o,O9o,V9o,tb,Zce,X9o,z9o,UD,Q9o,W9o,H9o,ab,efe,U9o,J9o,JD,Y9o,K9o,Z9o,nb,ofe,e$o,o$o,YD,r$o,t$o,a$o,sb,rfe,n$o,s$o,KD,l$o,i$o,d$o,lb,tfe,c$o,f$o,ZD,m$o,g$o,h$o,ib,afe,p$o,u$o,eG,_$o,b$o,v$o,db,nfe,F$o,T$o,oG,M$o,E$o,C$o,cb,sfe,w$o,A$o,rG,y$o,L$o,x$o,fb,lfe,$$o,k$o,tG,S$o,R$o,B$o,mb,ife,P$o,I$o,aG,q$o,N$o,j$o,gb,dfe,D$o,G$o,nG,O$o,V$o,X$o,hb,z$o,cfe,Q$o,W$o,ffe,H$o,U$o,pb,pIe,Di,ub,mfe,Z0,J$o,gfe,Y$o,uIe,Bo,ey,K$o,Gi,Z$o,sG,eko,oko,lG,rko,tko,ako,oy,nko,hfe,sko,lko,iko,lt,ry,dko,pfe,cko,fko,Oi,mko,ufe,gko,hko,iG,pko,uko,_ko,_b,bko,eo,ty,vko,_fe,Fko,Tko,Sa,Mko,bfe,Eko,Cko,vfe,wko,Ako,Ffe,yko,Lko,xko,Y,bb,Tfe,$ko,kko,dG,Sko,Rko,Bko,vb,Mfe,Pko,Iko,cG,qko,Nko,jko,Fb,Efe,Dko,Gko,fG,Oko,Vko,Xko,Tb,Cfe,zko,Qko,mG,Wko,Hko,Uko,Mb,wfe,Jko,Yko,gG,Kko,Zko,eSo,Eb,Afe,oSo,rSo,hG,tSo,aSo,nSo,Cb,yfe,sSo,lSo,pG,iSo,dSo,cSo,wb,Lfe,fSo,mSo,uG,gSo,hSo,pSo,Ab,xfe,uSo,_So,_G,bSo,vSo,FSo,yb,$fe,TSo,MSo,bG,ESo,CSo,wSo,Lb,kfe,ASo,ySo,vG,LSo,xSo,$So,xb,Sfe,kSo,SSo,FG,RSo,BSo,PSo,$b,Rfe,ISo,qSo,TG,NSo,jSo,DSo,kb,Bfe,GSo,OSo,MG,VSo,XSo,zSo,Sb,Pfe,QSo,WSo,EG,HSo,USo,JSo,Rb,Ife,YSo,KSo,CG,ZSo,eRo,oRo,Bb,qfe,rRo,tRo,wG,aRo,nRo,sRo,Pb,Nfe,lRo,iRo,AG,dRo,cRo,fRo,Ib,jfe,mRo,gRo,yG,hRo,pRo,uRo,qb,Dfe,_Ro,bRo,LG,vRo,FRo,TRo,Nb,Gfe,MRo,ERo,xG,CRo,wRo,ARo,jb,Ofe,yRo,LRo,$G,xRo,$Ro,kRo,Db,Vfe,SRo,RRo,kG,BRo,PRo,IRo,Gb,Xfe,qRo,NRo,SG,jRo,DRo,GRo,Ob,zfe,ORo,VRo,RG,XRo,zRo,QRo,Vb,Qfe,WRo,HRo,BG,URo,JRo,YRo,Xb,Wfe,KRo,ZRo,PG,eBo,oBo,rBo,zb,Hfe,tBo,aBo,IG,nBo,sBo,lBo,Qb,Ufe,iBo,dBo,qG,cBo,fBo,mBo,Wb,gBo,Jfe,hBo,pBo,Yfe,uBo,_Bo,Hb,_Ie,Vi,Ub,Kfe,ay,bBo,Zfe,vBo,bIe,Po,ny,FBo,Xi,TBo,NG,MBo,EBo,jG,CBo,wBo,ABo,sy,yBo,eme,LBo,xBo,$Bo,it,ly,kBo,ome,SBo,RBo,zi,BBo,rme,PBo,IBo,DG,qBo,NBo,jBo,Jb,DBo,oo,iy,GBo,tme,OBo,VBo,Ra,XBo,ame,zBo,QBo,nme,WBo,HBo,sme,UBo,JBo,YBo,Yr,Yb,lme,KBo,ZBo,GG,ePo,oPo,rPo,Kb,ime,tPo,aPo,OG,nPo,sPo,lPo,Zb,dme,iPo,dPo,VG,cPo,fPo,mPo,e4,cme,gPo,hPo,XG,pPo,uPo,_Po,o4,fme,bPo,vPo,zG,FPo,TPo,MPo,r4,EPo,mme,CPo,wPo,gme,APo,yPo,t4,vIe,Qi,a4,hme,dy,LPo,pme,xPo,FIe,Io,cy,$Po,Wi,kPo,QG,SPo,RPo,WG,BPo,PPo,IPo,fy,qPo,ume,NPo,jPo,DPo,dt,my,GPo,_me,OPo,VPo,Hi,XPo,bme,zPo,QPo,HG,WPo,HPo,UPo,n4,JPo,ro,gy,YPo,vme,KPo,ZPo,Ba,eIo,Fme,oIo,rIo,Tme,tIo,aIo,Mme,nIo,sIo,lIo,U,s4,Eme,iIo,dIo,UG,cIo,fIo,mIo,l4,Cme,gIo,hIo,JG,pIo,uIo,_Io,i4,wme,bIo,vIo,YG,FIo,TIo,MIo,d4,Ame,EIo,CIo,KG,wIo,AIo,yIo,c4,yme,LIo,xIo,ZG,$Io,kIo,SIo,f4,Lme,RIo,BIo,eO,PIo,IIo,qIo,m4,xme,NIo,jIo,oO,DIo,GIo,OIo,g4,$me,VIo,XIo,rO,zIo,QIo,WIo,h4,kme,HIo,UIo,tO,JIo,YIo,KIo,p4,Sme,ZIo,eqo,aO,oqo,rqo,tqo,u4,Rme,aqo,nqo,nO,sqo,lqo,iqo,_4,Bme,dqo,cqo,sO,fqo,mqo,gqo,b4,Pme,hqo,pqo,lO,uqo,_qo,bqo,v4,Ime,vqo,Fqo,iO,Tqo,Mqo,Eqo,F4,qme,Cqo,wqo,dO,Aqo,yqo,Lqo,T4,Nme,xqo,$qo,cO,kqo,Sqo,Rqo,M4,jme,Bqo,Pqo,fO,Iqo,qqo,Nqo,E4,Dme,jqo,Dqo,mO,Gqo,Oqo,Vqo,C4,Gme,Xqo,zqo,gO,Qqo,Wqo,Hqo,w4,Ome,Uqo,Jqo,hO,Yqo,Kqo,Zqo,A4,Vme,eNo,oNo,pO,rNo,tNo,aNo,y4,Xme,nNo,sNo,uO,lNo,iNo,dNo,L4,zme,cNo,fNo,_O,mNo,gNo,hNo,x4,Qme,pNo,uNo,bO,_No,bNo,vNo,$4,Wme,FNo,TNo,vO,MNo,ENo,CNo,k4,Hme,wNo,ANo,FO,yNo,LNo,xNo,S4,Ume,$No,kNo,TO,SNo,RNo,BNo,R4,Jme,PNo,INo,MO,qNo,NNo,jNo,B4,Yme,DNo,GNo,EO,ONo,VNo,XNo,P4,Kme,zNo,QNo,CO,WNo,HNo,UNo,I4,Zme,JNo,YNo,wO,KNo,ZNo,ejo,q4,ege,ojo,rjo,AO,tjo,ajo,njo,N4,oge,sjo,ljo,yO,ijo,djo,cjo,j4,fjo,rge,mjo,gjo,tge,hjo,pjo,D4,TIe,Ui,G4,age,hy,ujo,nge,_jo,MIe,qo,py,bjo,Ji,vjo,LO,Fjo,Tjo,xO,Mjo,Ejo,Cjo,uy,wjo,sge,Ajo,yjo,Ljo,ct,_y,xjo,lge,$jo,kjo,Yi,Sjo,ige,Rjo,Bjo,$O,Pjo,Ijo,qjo,O4,Njo,to,by,jjo,dge,Djo,Gjo,Pa,Ojo,cge,Vjo,Xjo,fge,zjo,Qjo,mge,Wjo,Hjo,Ujo,O,V4,gge,Jjo,Yjo,kO,Kjo,Zjo,eDo,X4,hge,oDo,rDo,SO,tDo,aDo,nDo,z4,pge,sDo,lDo,RO,iDo,dDo,cDo,Q4,uge,fDo,mDo,BO,gDo,hDo,pDo,W4,_ge,uDo,_Do,PO,bDo,vDo,FDo,H4,bge,TDo,MDo,IO,EDo,CDo,wDo,U4,vge,ADo,yDo,qO,LDo,xDo,$Do,J4,Fge,kDo,SDo,NO,RDo,BDo,PDo,Y4,Tge,IDo,qDo,jO,NDo,jDo,DDo,K4,Mge,GDo,ODo,DO,VDo,XDo,zDo,Z4,Ege,QDo,WDo,GO,HDo,UDo,JDo,e5,Cge,YDo,KDo,OO,ZDo,eGo,oGo,o5,wge,rGo,tGo,VO,aGo,nGo,sGo,r5,Age,lGo,iGo,XO,dGo,cGo,fGo,t5,yge,mGo,gGo,zO,hGo,pGo,uGo,a5,Lge,_Go,bGo,QO,vGo,FGo,TGo,n5,xge,MGo,EGo,WO,CGo,wGo,AGo,s5,$ge,yGo,LGo,HO,xGo,$Go,kGo,l5,kge,SGo,RGo,UO,BGo,PGo,IGo,i5,Sge,qGo,NGo,JO,jGo,DGo,GGo,d5,Rge,OGo,VGo,YO,XGo,zGo,QGo,c5,Bge,WGo,HGo,KO,UGo,JGo,YGo,f5,Pge,KGo,ZGo,ZO,eOo,oOo,rOo,m5,Ige,tOo,aOo,eV,nOo,sOo,lOo,g5,qge,iOo,dOo,oV,cOo,fOo,mOo,h5,Nge,gOo,hOo,rV,pOo,uOo,_Oo,p5,jge,bOo,vOo,tV,FOo,TOo,MOo,u5,Dge,EOo,COo,aV,wOo,AOo,yOo,_5,Gge,LOo,xOo,nV,$Oo,kOo,SOo,b5,Oge,ROo,BOo,sV,POo,IOo,qOo,v5,Vge,NOo,jOo,lV,DOo,GOo,OOo,F5,Xge,VOo,XOo,iV,zOo,QOo,WOo,T5,zge,HOo,UOo,dV,JOo,YOo,KOo,M5,Qge,ZOo,eVo,cV,oVo,rVo,tVo,E5,Wge,aVo,nVo,fV,sVo,lVo,iVo,C5,Hge,dVo,cVo,mV,fVo,mVo,gVo,w5,Uge,hVo,pVo,gV,uVo,_Vo,bVo,A5,Jge,vVo,FVo,hV,TVo,MVo,EVo,y5,Yge,CVo,wVo,pV,AVo,yVo,LVo,L5,xVo,Kge,$Vo,kVo,Zge,SVo,RVo,x5,EIe,Ki,$5,ehe,vy,BVo,ohe,PVo,CIe,No,Fy,IVo,Zi,qVo,uV,NVo,jVo,_V,DVo,GVo,OVo,Ty,VVo,rhe,XVo,zVo,QVo,ft,My,WVo,the,HVo,UVo,ed,JVo,ahe,YVo,KVo,bV,ZVo,eXo,oXo,k5,rXo,ao,Ey,tXo,nhe,aXo,nXo,Ia,sXo,she,lXo,iXo,lhe,dXo,cXo,ihe,fXo,mXo,gXo,dhe,S5,che,hXo,pXo,vV,uXo,_Xo,bXo,R5,vXo,fhe,FXo,TXo,mhe,MXo,EXo,B5,wIe,od,P5,ghe,Cy,CXo,hhe,wXo,AIe,jo,wy,AXo,rd,yXo,FV,LXo,xXo,TV,$Xo,kXo,SXo,Ay,RXo,phe,BXo,PXo,IXo,mt,yy,qXo,uhe,NXo,jXo,td,DXo,_he,GXo,OXo,MV,VXo,XXo,zXo,I5,QXo,no,Ly,WXo,bhe,HXo,UXo,qa,JXo,vhe,YXo,KXo,Fhe,ZXo,ezo,The,ozo,rzo,tzo,Fe,q5,Mhe,azo,nzo,EV,szo,lzo,izo,N5,Ehe,dzo,czo,CV,fzo,mzo,gzo,j5,Che,hzo,pzo,wV,uzo,_zo,bzo,Bs,whe,vzo,Fzo,AV,Tzo,Mzo,yV,Ezo,Czo,wzo,D5,Ahe,Azo,yzo,LV,Lzo,xzo,$zo,gt,yhe,kzo,Szo,xV,Rzo,Bzo,$V,Pzo,Izo,kV,qzo,Nzo,jzo,G5,Lhe,Dzo,Gzo,SV,Ozo,Vzo,Xzo,O5,xhe,zzo,Qzo,RV,Wzo,Hzo,Uzo,V5,$he,Jzo,Yzo,BV,Kzo,Zzo,eQo,X5,khe,oQo,rQo,PV,tQo,aQo,nQo,z5,She,sQo,lQo,IV,iQo,dQo,cQo,Q5,Rhe,fQo,mQo,qV,gQo,hQo,pQo,W5,Bhe,uQo,_Qo,NV,bQo,vQo,FQo,H5,TQo,Phe,MQo,EQo,Ihe,CQo,wQo,U5,yIe,ad,J5,qhe,xy,AQo,Nhe,yQo,LIe,Do,$y,LQo,nd,xQo,jV,$Qo,kQo,DV,SQo,RQo,BQo,ky,PQo,jhe,IQo,qQo,NQo,ht,Sy,jQo,Dhe,DQo,GQo,sd,OQo,Ghe,VQo,XQo,GV,zQo,QQo,WQo,Y5,HQo,so,Ry,UQo,Ohe,JQo,YQo,Na,KQo,Vhe,ZQo,eWo,Xhe,oWo,rWo,zhe,tWo,aWo,nWo,Qhe,K5,Whe,sWo,lWo,OV,iWo,dWo,cWo,Z5,fWo,Hhe,mWo,gWo,Uhe,hWo,pWo,ev,xIe,ld,ov,Jhe,By,uWo,Yhe,_Wo,$Ie,Go,Py,bWo,id,vWo,VV,FWo,TWo,XV,MWo,EWo,CWo,Iy,wWo,Khe,AWo,yWo,LWo,pt,qy,xWo,Zhe,$Wo,kWo,dd,SWo,epe,RWo,BWo,zV,PWo,IWo,qWo,rv,NWo,lo,Ny,jWo,ope,DWo,GWo,ja,OWo,rpe,VWo,XWo,tpe,zWo,QWo,ape,WWo,HWo,UWo,Ne,tv,npe,JWo,YWo,QV,KWo,ZWo,eHo,av,spe,oHo,rHo,WV,tHo,aHo,nHo,nv,lpe,sHo,lHo,HV,iHo,dHo,cHo,sv,ipe,fHo,mHo,UV,gHo,hHo,pHo,lv,dpe,uHo,_Ho,JV,bHo,vHo,FHo,iv,cpe,THo,MHo,YV,EHo,CHo,wHo,dv,fpe,AHo,yHo,KV,LHo,xHo,$Ho,cv,mpe,kHo,SHo,ZV,RHo,BHo,PHo,fv,IHo,gpe,qHo,NHo,hpe,jHo,DHo,mv,kIe,cd,gv,ppe,jy,GHo,upe,OHo,SIe,Oo,Dy,VHo,fd,XHo,eX,zHo,QHo,oX,WHo,HHo,UHo,Gy,JHo,_pe,YHo,KHo,ZHo,ut,Oy,eUo,bpe,oUo,rUo,md,tUo,vpe,aUo,nUo,rX,sUo,lUo,iUo,hv,dUo,io,Vy,cUo,Fpe,fUo,mUo,Da,gUo,Tpe,hUo,pUo,Mpe,uUo,_Uo,Epe,bUo,vUo,FUo,Ga,pv,Cpe,TUo,MUo,tX,EUo,CUo,wUo,uv,wpe,AUo,yUo,aX,LUo,xUo,$Uo,_v,Ape,kUo,SUo,nX,RUo,BUo,PUo,bv,ype,IUo,qUo,sX,NUo,jUo,DUo,vv,GUo,Lpe,OUo,VUo,xpe,XUo,zUo,Fv,RIe,gd,Tv,$pe,Xy,QUo,kpe,WUo,BIe,Vo,zy,HUo,hd,UUo,lX,JUo,YUo,iX,KUo,ZUo,eJo,Qy,oJo,Spe,rJo,tJo,aJo,_t,Wy,nJo,Rpe,sJo,lJo,pd,iJo,Bpe,dJo,cJo,dX,fJo,mJo,gJo,Mv,hJo,co,Hy,pJo,Ppe,uJo,_Jo,Oa,bJo,Ipe,vJo,FJo,qpe,TJo,MJo,Npe,EJo,CJo,wJo,je,Ev,jpe,AJo,yJo,cX,LJo,xJo,$Jo,Cv,Dpe,kJo,SJo,fX,RJo,BJo,PJo,wv,Gpe,IJo,qJo,mX,NJo,jJo,DJo,Av,Ope,GJo,OJo,gX,VJo,XJo,zJo,yv,Vpe,QJo,WJo,hX,HJo,UJo,JJo,Lv,Xpe,YJo,KJo,pX,ZJo,eYo,oYo,xv,zpe,rYo,tYo,uX,aYo,nYo,sYo,$v,Qpe,lYo,iYo,_X,dYo,cYo,fYo,kv,mYo,Wpe,gYo,hYo,Hpe,pYo,uYo,Sv,PIe,ud,Rv,Upe,Uy,_Yo,Jpe,bYo,IIe,Xo,Jy,vYo,_d,FYo,bX,TYo,MYo,vX,EYo,CYo,wYo,Yy,AYo,Ype,yYo,LYo,xYo,bt,Ky,$Yo,Kpe,kYo,SYo,bd,RYo,Zpe,BYo,PYo,FX,IYo,qYo,NYo,Bv,jYo,fo,Zy,DYo,eue,GYo,OYo,Va,VYo,oue,XYo,zYo,rue,QYo,WYo,tue,HYo,UYo,JYo,eL,Pv,aue,YYo,KYo,TX,ZYo,eKo,oKo,Iv,nue,rKo,tKo,MX,aKo,nKo,sKo,qv,lKo,sue,iKo,dKo,lue,cKo,fKo,Nv,qIe,vd,jv,iue,oL,mKo,due,gKo,NIe,zo,rL,hKo,Fd,pKo,EX,uKo,_Ko,CX,bKo,vKo,FKo,tL,TKo,cue,MKo,EKo,CKo,vt,aL,wKo,fue,AKo,yKo,Td,LKo,mue,xKo,$Ko,wX,kKo,SKo,RKo,Dv,BKo,mo,nL,PKo,gue,IKo,qKo,Xa,NKo,hue,jKo,DKo,pue,GKo,OKo,uue,VKo,XKo,zKo,za,Gv,_ue,QKo,WKo,AX,HKo,UKo,JKo,Ov,bue,YKo,KKo,yX,ZKo,eZo,oZo,Vv,vue,rZo,tZo,LX,aZo,nZo,sZo,Xv,Fue,lZo,iZo,xX,dZo,cZo,fZo,zv,mZo,Tue,gZo,hZo,Mue,pZo,uZo,Qv,jIe,Md,Wv,Eue,sL,_Zo,Cue,bZo,DIe,Qo,lL,vZo,Ed,FZo,$X,TZo,MZo,kX,EZo,CZo,wZo,iL,AZo,wue,yZo,LZo,xZo,Ft,dL,$Zo,Aue,kZo,SZo,Cd,RZo,yue,BZo,PZo,SX,IZo,qZo,NZo,Hv,jZo,go,cL,DZo,Lue,GZo,OZo,Qa,VZo,xue,XZo,zZo,$ue,QZo,WZo,kue,HZo,UZo,JZo,wd,Uv,Sue,YZo,KZo,RX,ZZo,eer,oer,Jv,Rue,rer,ter,BX,aer,ner,ser,Yv,Bue,ler,ier,PX,der,cer,fer,Kv,mer,Pue,ger,her,Iue,per,uer,Zv,GIe,Ad,eF,que,fL,_er,Nue,ber,OIe,Wo,mL,ver,yd,Fer,IX,Ter,Mer,qX,Eer,Cer,wer,gL,Aer,jue,yer,Ler,xer,Tt,hL,$er,Due,ker,Ser,Ld,Rer,Gue,Ber,Per,NX,Ier,qer,Ner,oF,jer,ho,pL,Der,Oue,Ger,Oer,Wa,Ver,Vue,Xer,zer,Xue,Qer,Wer,zue,Her,Uer,Jer,uL,rF,Que,Yer,Ker,jX,Zer,eor,oor,tF,Wue,ror,tor,DX,aor,nor,sor,aF,lor,Hue,ior,dor,Uue,cor,mor,nF,VIe,xd,sF,Jue,_L,gor,Yue,hor,XIe,Ho,bL,por,$d,uor,GX,_or,bor,OX,vor,For,Tor,vL,Mor,Kue,Eor,Cor,wor,Mt,FL,Aor,Zue,yor,Lor,kd,xor,e_e,$or,kor,VX,Sor,Ror,Bor,lF,Por,po,TL,Ior,o_e,qor,Nor,Ha,jor,r_e,Dor,Gor,t_e,Oor,Vor,a_e,Xor,zor,Qor,n_e,iF,s_e,Wor,Hor,XX,Uor,Jor,Yor,dF,Kor,l_e,Zor,err,i_e,orr,rrr,cF,zIe,Sd,fF,d_e,ML,trr,c_e,arr,QIe,Uo,EL,nrr,Rd,srr,zX,lrr,irr,QX,drr,crr,frr,CL,mrr,f_e,grr,hrr,prr,Et,wL,urr,m_e,_rr,brr,Bd,vrr,g_e,Frr,Trr,WX,Mrr,Err,Crr,mF,wrr,uo,AL,Arr,h_e,yrr,Lrr,Ua,xrr,p_e,$rr,krr,u_e,Srr,Rrr,__e,Brr,Prr,Irr,Ja,gF,b_e,qrr,Nrr,HX,jrr,Drr,Grr,hF,v_e,Orr,Vrr,UX,Xrr,zrr,Qrr,pF,F_e,Wrr,Hrr,JX,Urr,Jrr,Yrr,uF,T_e,Krr,Zrr,YX,etr,otr,rtr,_F,ttr,M_e,atr,ntr,E_e,str,ltr,bF,WIe,Pd,vF,C_e,yL,itr,w_e,dtr,HIe,Jo,LL,ctr,Id,ftr,KX,mtr,gtr,ZX,htr,ptr,utr,xL,_tr,A_e,btr,vtr,Ftr,Ct,$L,Ttr,y_e,Mtr,Etr,qd,Ctr,L_e,wtr,Atr,ez,ytr,Ltr,xtr,FF,$tr,_o,kL,ktr,x_e,Str,Rtr,Ya,Btr,$_e,Ptr,Itr,k_e,qtr,Ntr,S_e,jtr,Dtr,Gtr,R_e,TF,B_e,Otr,Vtr,oz,Xtr,ztr,Qtr,MF,Wtr,P_e,Htr,Utr,I_e,Jtr,Ytr,EF,UIe,Nd,CF,q_e,SL,Ktr,N_e,Ztr,JIe,Yo,RL,ear,jd,oar,rz,rar,tar,tz,aar,nar,sar,BL,lar,j_e,iar,dar,car,wt,PL,far,D_e,mar,gar,Dd,har,G_e,par,uar,az,_ar,bar,Far,wF,Tar,wr,IL,Mar,O_e,Ear,Car,Ka,war,V_e,Aar,yar,X_e,Lar,xar,z_e,$ar,kar,Sar,j,AF,Q_e,Rar,Bar,nz,Par,Iar,qar,yF,W_e,Nar,jar,sz,Dar,Gar,Oar,LF,H_e,Var,Xar,lz,zar,Qar,War,xF,U_e,Har,Uar,iz,Jar,Yar,Kar,$F,J_e,Zar,enr,dz,onr,rnr,tnr,kF,Y_e,anr,nnr,cz,snr,lnr,inr,SF,K_e,dnr,cnr,fz,fnr,mnr,gnr,RF,Z_e,hnr,pnr,mz,unr,_nr,bnr,BF,e2e,vnr,Fnr,gz,Tnr,Mnr,Enr,PF,o2e,Cnr,wnr,hz,Anr,ynr,Lnr,IF,r2e,xnr,$nr,pz,knr,Snr,Rnr,qF,t2e,Bnr,Pnr,uz,Inr,qnr,Nnr,NF,a2e,jnr,Dnr,_z,Gnr,Onr,Vnr,jF,n2e,Xnr,znr,bz,Qnr,Wnr,Hnr,DF,s2e,Unr,Jnr,vz,Ynr,Knr,Znr,GF,l2e,esr,osr,Fz,rsr,tsr,asr,OF,i2e,nsr,ssr,Tz,lsr,isr,dsr,Ps,d2e,csr,fsr,Mz,msr,gsr,Ez,hsr,psr,usr,VF,c2e,_sr,bsr,Cz,vsr,Fsr,Tsr,XF,f2e,Msr,Esr,wz,Csr,wsr,Asr,zF,m2e,ysr,Lsr,Az,xsr,$sr,ksr,QF,g2e,Ssr,Rsr,yz,Bsr,Psr,Isr,WF,h2e,qsr,Nsr,Lz,jsr,Dsr,Gsr,HF,p2e,Osr,Vsr,xz,Xsr,zsr,Qsr,UF,u2e,Wsr,Hsr,$z,Usr,Jsr,Ysr,JF,_2e,Ksr,Zsr,kz,elr,olr,rlr,YF,b2e,tlr,alr,Sz,nlr,slr,llr,KF,v2e,ilr,dlr,Rz,clr,flr,mlr,ZF,F2e,glr,hlr,Bz,plr,ulr,_lr,eT,T2e,blr,vlr,Pz,Flr,Tlr,Mlr,oT,M2e,Elr,Clr,Iz,wlr,Alr,ylr,rT,E2e,Llr,xlr,qz,$lr,klr,Slr,tT,C2e,Rlr,Blr,Nz,Plr,Ilr,qlr,aT,w2e,Nlr,jlr,jz,Dlr,Glr,Olr,nT,A2e,Vlr,Xlr,Dz,zlr,Qlr,Wlr,sT,y2e,Hlr,Ulr,Gz,Jlr,Ylr,Klr,lT,L2e,Zlr,eir,Oz,oir,rir,tir,iT,x2e,air,nir,Vz,sir,lir,iir,dT,$2e,dir,cir,Xz,fir,mir,gir,cT,k2e,hir,pir,zz,uir,_ir,bir,fT,S2e,vir,Fir,Qz,Tir,Mir,Eir,mT,R2e,Cir,wir,Wz,Air,yir,Lir,gT,B2e,xir,$ir,Hz,kir,Sir,Rir,hT,P2e,Bir,Pir,Uz,Iir,qir,Nir,pT,I2e,jir,Dir,Jz,Gir,Oir,Vir,uT,YIe,Gd,_T,q2e,qL,Xir,N2e,zir,KIe,Ko,NL,Qir,Od,Wir,Yz,Hir,Uir,Kz,Jir,Yir,Kir,jL,Zir,j2e,edr,odr,rdr,At,DL,tdr,D2e,adr,ndr,Vd,sdr,G2e,ldr,idr,Zz,ddr,cdr,fdr,bT,mdr,Ar,GL,gdr,O2e,hdr,pdr,Za,udr,V2e,_dr,bdr,X2e,vdr,Fdr,z2e,Tdr,Mdr,Edr,se,vT,Q2e,Cdr,wdr,eQ,Adr,ydr,Ldr,FT,W2e,xdr,$dr,oQ,kdr,Sdr,Rdr,TT,H2e,Bdr,Pdr,rQ,Idr,qdr,Ndr,MT,U2e,jdr,Ddr,tQ,Gdr,Odr,Vdr,ET,J2e,Xdr,zdr,aQ,Qdr,Wdr,Hdr,CT,Y2e,Udr,Jdr,nQ,Ydr,Kdr,Zdr,wT,K2e,ecr,ocr,sQ,rcr,tcr,acr,AT,Z2e,ncr,scr,lQ,lcr,icr,dcr,yT,e1e,ccr,fcr,iQ,mcr,gcr,hcr,LT,o1e,pcr,ucr,dQ,_cr,bcr,vcr,xT,r1e,Fcr,Tcr,cQ,Mcr,Ecr,Ccr,$T,t1e,wcr,Acr,fQ,ycr,Lcr,xcr,kT,a1e,$cr,kcr,mQ,Scr,Rcr,Bcr,ST,n1e,Pcr,Icr,gQ,qcr,Ncr,jcr,RT,s1e,Dcr,Gcr,hQ,Ocr,Vcr,Xcr,BT,l1e,zcr,Qcr,pQ,Wcr,Hcr,Ucr,PT,i1e,Jcr,Ycr,uQ,Kcr,Zcr,efr,IT,d1e,ofr,rfr,_Q,tfr,afr,nfr,qT,c1e,sfr,lfr,bQ,ifr,dfr,cfr,NT,f1e,ffr,mfr,vQ,gfr,hfr,pfr,jT,m1e,ufr,_fr,FQ,bfr,vfr,Ffr,DT,g1e,Tfr,Mfr,TQ,Efr,Cfr,wfr,GT,h1e,Afr,yfr,MQ,Lfr,xfr,$fr,OT,ZIe,Xd,VT,p1e,OL,kfr,u1e,Sfr,eqe,Zo,VL,Rfr,zd,Bfr,EQ,Pfr,Ifr,CQ,qfr,Nfr,jfr,XL,Dfr,_1e,Gfr,Ofr,Vfr,yt,zL,Xfr,b1e,zfr,Qfr,Qd,Wfr,v1e,Hfr,Ufr,wQ,Jfr,Yfr,Kfr,XT,Zfr,yr,QL,emr,F1e,omr,rmr,en,tmr,T1e,amr,nmr,M1e,smr,lmr,E1e,imr,dmr,cmr,Te,zT,C1e,fmr,mmr,AQ,gmr,hmr,pmr,QT,w1e,umr,_mr,yQ,bmr,vmr,Fmr,WT,A1e,Tmr,Mmr,LQ,Emr,Cmr,wmr,HT,y1e,Amr,ymr,xQ,Lmr,xmr,$mr,UT,L1e,kmr,Smr,$Q,Rmr,Bmr,Pmr,JT,x1e,Imr,qmr,kQ,Nmr,jmr,Dmr,YT,$1e,Gmr,Omr,SQ,Vmr,Xmr,zmr,KT,k1e,Qmr,Wmr,RQ,Hmr,Umr,Jmr,ZT,S1e,Ymr,Kmr,BQ,Zmr,egr,ogr,e7,R1e,rgr,tgr,PQ,agr,ngr,sgr,o7,B1e,lgr,igr,IQ,dgr,cgr,fgr,r7,P1e,mgr,ggr,qQ,hgr,pgr,ugr,t7,oqe,Wd,a7,I1e,WL,_gr,q1e,bgr,rqe,er,HL,vgr,Hd,Fgr,NQ,Tgr,Mgr,jQ,Egr,Cgr,wgr,UL,Agr,N1e,ygr,Lgr,xgr,Lt,JL,$gr,j1e,kgr,Sgr,Ud,Rgr,D1e,Bgr,Pgr,DQ,Igr,qgr,Ngr,n7,jgr,Lr,YL,Dgr,G1e,Ggr,Ogr,on,Vgr,O1e,Xgr,zgr,V1e,Qgr,Wgr,X1e,Hgr,Ugr,Jgr,Jd,s7,z1e,Ygr,Kgr,GQ,Zgr,ehr,ohr,l7,Q1e,rhr,thr,OQ,ahr,nhr,shr,i7,W1e,lhr,ihr,VQ,dhr,chr,fhr,d7,tqe,Yd,c7,H1e,KL,mhr,U1e,ghr,aqe,or,ZL,hhr,Kd,phr,XQ,uhr,_hr,zQ,bhr,vhr,Fhr,e8,Thr,J1e,Mhr,Ehr,Chr,xt,o8,whr,Y1e,Ahr,yhr,Zd,Lhr,K1e,xhr,$hr,QQ,khr,Shr,Rhr,f7,Bhr,xr,r8,Phr,Z1e,Ihr,qhr,rn,Nhr,ebe,jhr,Dhr,obe,Ghr,Ohr,rbe,Vhr,Xhr,zhr,ie,m7,tbe,Qhr,Whr,WQ,Hhr,Uhr,Jhr,g7,abe,Yhr,Khr,HQ,Zhr,epr,opr,h7,nbe,rpr,tpr,UQ,apr,npr,spr,p7,sbe,lpr,ipr,JQ,dpr,cpr,fpr,u7,lbe,mpr,gpr,YQ,hpr,ppr,upr,_7,ibe,_pr,bpr,KQ,vpr,Fpr,Tpr,b7,dbe,Mpr,Epr,ZQ,Cpr,wpr,Apr,v7,cbe,ypr,Lpr,eW,xpr,$pr,kpr,F7,fbe,Spr,Rpr,oW,Bpr,Ppr,Ipr,T7,mbe,qpr,Npr,rW,jpr,Dpr,Gpr,M7,gbe,Opr,Vpr,tW,Xpr,zpr,Qpr,E7,hbe,Wpr,Hpr,aW,Upr,Jpr,Ypr,C7,pbe,Kpr,Zpr,nW,eur,our,rur,w7,ube,tur,aur,sW,nur,sur,lur,A7,_be,iur,dur,lW,cur,fur,mur,y7,bbe,gur,hur,iW,pur,uur,_ur,L7,vbe,bur,vur,dW,Fur,Tur,Mur,x7,Fbe,Eur,Cur,cW,wur,Aur,yur,$7,Tbe,Lur,xur,fW,$ur,kur,Sur,k7,Mbe,Rur,Bur,mW,Pur,Iur,qur,S7,nqe,ec,R7,Ebe,t8,Nur,Cbe,jur,sqe,rr,a8,Dur,oc,Gur,gW,Our,Vur,hW,Xur,zur,Qur,n8,Wur,wbe,Hur,Uur,Jur,$t,s8,Yur,Abe,Kur,Zur,rc,e_r,ybe,o_r,r_r,pW,t_r,a_r,n_r,B7,s_r,$r,l8,l_r,Lbe,i_r,d_r,tn,c_r,xbe,f_r,m_r,$be,g_r,h_r,kbe,p_r,u_r,__r,ye,P7,Sbe,b_r,v_r,uW,F_r,T_r,M_r,I7,Rbe,E_r,C_r,_W,w_r,A_r,y_r,q7,Bbe,L_r,x_r,bW,$_r,k_r,S_r,N7,Pbe,R_r,B_r,vW,P_r,I_r,q_r,j7,Ibe,N_r,j_r,FW,D_r,G_r,O_r,D7,qbe,V_r,X_r,TW,z_r,Q_r,W_r,G7,Nbe,H_r,U_r,MW,J_r,Y_r,K_r,O7,jbe,Z_r,e2r,EW,o2r,r2r,t2r,V7,Dbe,a2r,n2r,CW,s2r,l2r,i2r,X7,Gbe,d2r,c2r,wW,f2r,m2r,g2r,z7,lqe,tc,Q7,Obe,i8,h2r,Vbe,p2r,iqe,tr,d8,u2r,ac,_2r,AW,b2r,v2r,yW,F2r,T2r,M2r,c8,E2r,Xbe,C2r,w2r,A2r,kt,f8,y2r,zbe,L2r,x2r,nc,$2r,Qbe,k2r,S2r,LW,R2r,B2r,P2r,W7,I2r,kr,m8,q2r,Wbe,N2r,j2r,an,D2r,Hbe,G2r,O2r,Ube,V2r,X2r,Jbe,z2r,Q2r,W2r,Z,H7,Ybe,H2r,U2r,xW,J2r,Y2r,K2r,U7,Kbe,Z2r,e1r,$W,o1r,r1r,t1r,J7,Zbe,a1r,n1r,kW,s1r,l1r,i1r,Y7,e4e,d1r,c1r,SW,f1r,m1r,g1r,K7,o4e,h1r,p1r,RW,u1r,_1r,b1r,Z7,r4e,v1r,F1r,BW,T1r,M1r,E1r,eM,t4e,C1r,w1r,PW,A1r,y1r,L1r,oM,a4e,x1r,$1r,IW,k1r,S1r,R1r,rM,n4e,B1r,P1r,qW,I1r,q1r,N1r,tM,s4e,j1r,D1r,NW,G1r,O1r,V1r,aM,l4e,X1r,z1r,jW,Q1r,W1r,H1r,nM,i4e,U1r,J1r,DW,Y1r,K1r,Z1r,sM,d4e,ebr,obr,GW,rbr,tbr,abr,lM,c4e,nbr,sbr,OW,lbr,ibr,dbr,iM,f4e,cbr,fbr,VW,mbr,gbr,hbr,dM,m4e,pbr,ubr,XW,_br,bbr,vbr,cM,g4e,Fbr,Tbr,zW,Mbr,Ebr,Cbr,fM,h4e,wbr,Abr,QW,ybr,Lbr,xbr,mM,p4e,$br,kbr,WW,Sbr,Rbr,Bbr,gM,u4e,Pbr,Ibr,HW,qbr,Nbr,jbr,hM,_4e,Dbr,Gbr,UW,Obr,Vbr,Xbr,pM,b4e,zbr,Qbr,JW,Wbr,Hbr,Ubr,uM,v4e,Jbr,Ybr,YW,Kbr,Zbr,e4r,_M,F4e,o4r,r4r,KW,t4r,a4r,n4r,bM,T4e,s4r,l4r,ZW,i4r,d4r,c4r,vM,M4e,f4r,m4r,eH,g4r,h4r,p4r,FM,dqe,sc,TM,E4e,g8,u4r,C4e,_4r,cqe,ar,h8,b4r,lc,v4r,oH,F4r,T4r,rH,M4r,E4r,C4r,p8,w4r,w4e,A4r,y4r,L4r,St,u8,x4r,A4e,$4r,k4r,ic,S4r,y4e,R4r,B4r,tH,P4r,I4r,q4r,MM,N4r,Sr,_8,j4r,L4e,D4r,G4r,nn,O4r,x4e,V4r,X4r,$4e,z4r,Q4r,k4e,W4r,H4r,U4r,pe,EM,S4e,J4r,Y4r,aH,K4r,Z4r,e5r,CM,R4e,o5r,r5r,nH,t5r,a5r,n5r,wM,B4e,s5r,l5r,sH,i5r,d5r,c5r,AM,P4e,f5r,m5r,lH,g5r,h5r,p5r,yM,I4e,u5r,_5r,iH,b5r,v5r,F5r,LM,q4e,T5r,M5r,dH,E5r,C5r,w5r,xM,N4e,A5r,y5r,cH,L5r,x5r,$5r,$M,j4e,k5r,S5r,fH,R5r,B5r,P5r,kM,D4e,I5r,q5r,mH,N5r,j5r,D5r,SM,G4e,G5r,O5r,gH,V5r,X5r,z5r,RM,O4e,Q5r,W5r,hH,H5r,U5r,J5r,BM,V4e,Y5r,K5r,pH,Z5r,evr,ovr,PM,X4e,rvr,tvr,uH,avr,nvr,svr,IM,z4e,lvr,ivr,_H,dvr,cvr,fvr,qM,Q4e,mvr,gvr,bH,hvr,pvr,uvr,NM,W4e,_vr,bvr,vH,vvr,Fvr,Tvr,jM,H4e,Mvr,Evr,FH,Cvr,wvr,Avr,DM,fqe,dc,GM,U4e,b8,yvr,J4e,Lvr,mqe,nr,v8,xvr,cc,$vr,TH,kvr,Svr,MH,Rvr,Bvr,Pvr,F8,Ivr,Y4e,qvr,Nvr,jvr,Rt,T8,Dvr,K4e,Gvr,Ovr,fc,Vvr,Z4e,Xvr,zvr,EH,Qvr,Wvr,Hvr,OM,Uvr,Rr,M8,Jvr,e5e,Yvr,Kvr,sn,Zvr,o5e,eFr,oFr,r5e,rFr,tFr,t5e,aFr,nFr,sFr,E8,VM,a5e,lFr,iFr,CH,dFr,cFr,fFr,XM,n5e,mFr,gFr,wH,hFr,pFr,uFr,zM,gqe,mc,QM,s5e,C8,_Fr,l5e,bFr,hqe,sr,w8,vFr,gc,FFr,AH,TFr,MFr,yH,EFr,CFr,wFr,A8,AFr,i5e,yFr,LFr,xFr,Bt,y8,$Fr,d5e,kFr,SFr,hc,RFr,c5e,BFr,PFr,LH,IFr,qFr,NFr,WM,jFr,Br,L8,DFr,f5e,GFr,OFr,ln,VFr,m5e,XFr,zFr,g5e,QFr,WFr,h5e,HFr,UFr,JFr,p5e,HM,u5e,YFr,KFr,xH,ZFr,eTr,oTr,UM,pqe,pc,JM,_5e,x8,rTr,b5e,tTr,uqe,lr,$8,aTr,uc,nTr,$H,sTr,lTr,kH,iTr,dTr,cTr,k8,fTr,v5e,mTr,gTr,hTr,Pt,S8,pTr,F5e,uTr,_Tr,_c,bTr,T5e,vTr,FTr,SH,TTr,MTr,ETr,YM,CTr,Pr,R8,wTr,M5e,ATr,yTr,dn,LTr,E5e,xTr,$Tr,C5e,kTr,STr,w5e,RTr,BTr,PTr,de,KM,A5e,ITr,qTr,RH,NTr,jTr,DTr,ZM,y5e,GTr,OTr,BH,VTr,XTr,zTr,eE,L5e,QTr,WTr,PH,HTr,UTr,JTr,oE,x5e,YTr,KTr,IH,ZTr,e7r,o7r,rE,$5e,r7r,t7r,qH,a7r,n7r,s7r,tE,k5e,l7r,i7r,NH,d7r,c7r,f7r,aE,S5e,m7r,g7r,jH,h7r,p7r,u7r,nE,R5e,_7r,b7r,DH,v7r,F7r,T7r,sE,B5e,M7r,E7r,GH,C7r,w7r,A7r,lE,P5e,y7r,L7r,OH,x7r,$7r,k7r,iE,I5e,S7r,R7r,VH,B7r,P7r,I7r,dE,q5e,q7r,N7r,XH,j7r,D7r,G7r,cE,N5e,O7r,V7r,zH,X7r,z7r,Q7r,fE,j5e,W7r,H7r,QH,U7r,J7r,Y7r,mE,D5e,K7r,Z7r,WH,eMr,oMr,rMr,gE,G5e,tMr,aMr,HH,nMr,sMr,lMr,hE,O5e,iMr,dMr,UH,cMr,fMr,mMr,pE,V5e,gMr,hMr,JH,pMr,uMr,_Mr,uE,X5e,bMr,vMr,YH,FMr,TMr,MMr,_E,z5e,EMr,CMr,KH,wMr,AMr,yMr,bE,_qe,bc,vE,Q5e,B8,LMr,W5e,xMr,bqe,ir,P8,$Mr,vc,kMr,ZH,SMr,RMr,eU,BMr,PMr,IMr,I8,qMr,H5e,NMr,jMr,DMr,It,q8,GMr,U5e,OMr,VMr,Fc,XMr,J5e,zMr,QMr,oU,WMr,HMr,UMr,FE,JMr,Ir,N8,YMr,Y5e,KMr,ZMr,cn,eEr,K5e,oEr,rEr,Z5e,tEr,aEr,eve,nEr,sEr,lEr,ce,TE,ove,iEr,dEr,rU,cEr,fEr,mEr,ME,rve,gEr,hEr,tU,pEr,uEr,_Er,EE,tve,bEr,vEr,aU,FEr,TEr,MEr,CE,ave,EEr,CEr,nU,wEr,AEr,yEr,wE,nve,LEr,xEr,sU,$Er,kEr,SEr,AE,sve,REr,BEr,lU,PEr,IEr,qEr,yE,lve,NEr,jEr,iU,DEr,GEr,OEr,LE,ive,VEr,XEr,dU,zEr,QEr,WEr,xE,dve,HEr,UEr,cU,JEr,YEr,KEr,$E,cve,ZEr,eCr,fU,oCr,rCr,tCr,kE,fve,aCr,nCr,mU,sCr,lCr,iCr,SE,mve,dCr,cCr,gU,fCr,mCr,gCr,RE,gve,hCr,pCr,hU,uCr,_Cr,bCr,BE,hve,vCr,FCr,pU,TCr,MCr,ECr,PE,pve,CCr,wCr,uU,ACr,yCr,LCr,IE,uve,xCr,$Cr,_U,kCr,SCr,RCr,qE,_ve,BCr,PCr,bU,ICr,qCr,NCr,NE,bve,jCr,DCr,vU,GCr,OCr,VCr,jE,vve,XCr,zCr,FU,QCr,WCr,HCr,DE,Fve,UCr,JCr,TU,YCr,KCr,ZCr,GE,vqe,Tc,OE,Tve,j8,e3r,Mve,o3r,Fqe,dr,D8,r3r,Mc,t3r,MU,a3r,n3r,EU,s3r,l3r,i3r,G8,d3r,Eve,c3r,f3r,m3r,qt,O8,g3r,Cve,h3r,p3r,Ec,u3r,wve,_3r,b3r,CU,v3r,F3r,T3r,VE,M3r,qr,V8,E3r,Ave,C3r,w3r,fn,A3r,yve,y3r,L3r,Lve,x3r,$3r,xve,k3r,S3r,R3r,$ve,XE,kve,B3r,P3r,wU,I3r,q3r,N3r,zE,Tqe,Cc,QE,Sve,X8,j3r,Rve,D3r,Mqe,cr,z8,G3r,wc,O3r,AU,V3r,X3r,yU,z3r,Q3r,W3r,Q8,H3r,Bve,U3r,J3r,Y3r,Nt,W8,K3r,Pve,Z3r,ewr,Ac,owr,Ive,rwr,twr,LU,awr,nwr,swr,WE,lwr,Nr,H8,iwr,qve,dwr,cwr,mn,fwr,Nve,mwr,gwr,jve,hwr,pwr,Dve,uwr,_wr,bwr,Gve,HE,Ove,vwr,Fwr,xU,Twr,Mwr,Ewr,UE,Eqe,yc,JE,Vve,U8,Cwr,Xve,wwr,Cqe,fr,J8,Awr,Lc,ywr,$U,Lwr,xwr,kU,$wr,kwr,Swr,Y8,Rwr,zve,Bwr,Pwr,Iwr,jt,K8,qwr,Qve,Nwr,jwr,xc,Dwr,Wve,Gwr,Owr,SU,Vwr,Xwr,zwr,YE,Qwr,jr,Z8,Wwr,Hve,Hwr,Uwr,gn,Jwr,Uve,Ywr,Kwr,Jve,Zwr,eAr,Yve,oAr,rAr,tAr,re,KE,Kve,aAr,nAr,RU,sAr,lAr,iAr,ZE,Zve,dAr,cAr,BU,fAr,mAr,gAr,eC,eFe,hAr,pAr,PU,uAr,_Ar,bAr,oC,oFe,vAr,FAr,IU,TAr,MAr,EAr,rC,rFe,CAr,wAr,qU,AAr,yAr,LAr,tC,tFe,xAr,$Ar,NU,kAr,SAr,RAr,aC,aFe,BAr,PAr,jU,IAr,qAr,NAr,nC,nFe,jAr,DAr,DU,GAr,OAr,VAr,sC,sFe,XAr,zAr,GU,QAr,WAr,HAr,lC,lFe,UAr,JAr,OU,YAr,KAr,ZAr,iC,iFe,e6r,o6r,VU,r6r,t6r,a6r,dC,dFe,n6r,s6r,XU,l6r,i6r,d6r,cC,cFe,c6r,f6r,zU,m6r,g6r,h6r,fC,fFe,p6r,u6r,QU,_6r,b6r,v6r,mC,mFe,F6r,T6r,WU,M6r,E6r,C6r,gC,gFe,w6r,A6r,HU,y6r,L6r,x6r,hC,hFe,$6r,k6r,UU,S6r,R6r,B6r,pC,pFe,P6r,I6r,JU,q6r,N6r,j6r,uC,uFe,D6r,G6r,YU,O6r,V6r,X6r,_C,_Fe,z6r,Q6r,KU,W6r,H6r,U6r,bC,bFe,J6r,Y6r,ZU,K6r,Z6r,e0r,vC,vFe,o0r,r0r,eJ,t0r,a0r,n0r,FC,FFe,s0r,l0r,oJ,i0r,d0r,c0r,TC,TFe,f0r,m0r,rJ,g0r,h0r,p0r,MC,MFe,u0r,_0r,tJ,b0r,v0r,F0r,EC,wqe,$c,CC,EFe,ex,T0r,CFe,M0r,Aqe,mr,ox,E0r,kc,C0r,aJ,w0r,A0r,nJ,y0r,L0r,x0r,rx,$0r,wFe,k0r,S0r,R0r,Dt,tx,B0r,AFe,P0r,I0r,Sc,q0r,yFe,N0r,j0r,sJ,D0r,G0r,O0r,wC,V0r,Dr,ax,X0r,LFe,z0r,Q0r,hn,W0r,xFe,H0r,U0r,$Fe,J0r,Y0r,kFe,K0r,Z0r,eyr,ke,AC,SFe,oyr,ryr,lJ,tyr,ayr,nyr,yC,RFe,syr,lyr,iJ,iyr,dyr,cyr,LC,BFe,fyr,myr,dJ,gyr,hyr,pyr,xC,PFe,uyr,_yr,cJ,byr,vyr,Fyr,$C,IFe,Tyr,Myr,fJ,Eyr,Cyr,wyr,kC,qFe,Ayr,yyr,mJ,Lyr,xyr,$yr,SC,NFe,kyr,Syr,gJ,Ryr,Byr,Pyr,RC,jFe,Iyr,qyr,hJ,Nyr,jyr,Dyr,BC,DFe,Gyr,Oyr,pJ,Vyr,Xyr,zyr,PC,yqe,Rc,IC,GFe,nx,Qyr,OFe,Wyr,Lqe,gr,sx,Hyr,Bc,Uyr,uJ,Jyr,Yyr,_J,Kyr,Zyr,eLr,lx,oLr,VFe,rLr,tLr,aLr,Gt,ix,nLr,XFe,sLr,lLr,Pc,iLr,zFe,dLr,cLr,bJ,fLr,mLr,gLr,qC,hLr,Gr,dx,pLr,QFe,uLr,_Lr,pn,bLr,WFe,vLr,FLr,HFe,TLr,MLr,UFe,ELr,CLr,wLr,Me,NC,JFe,ALr,yLr,vJ,LLr,xLr,$Lr,jC,YFe,kLr,SLr,FJ,RLr,BLr,PLr,DC,KFe,ILr,qLr,TJ,NLr,jLr,DLr,GC,ZFe,GLr,OLr,MJ,VLr,XLr,zLr,OC,eTe,QLr,WLr,EJ,HLr,ULr,JLr,VC,oTe,YLr,KLr,CJ,ZLr,e8r,o8r,XC,rTe,r8r,t8r,wJ,a8r,n8r,s8r,zC,tTe,l8r,i8r,AJ,d8r,c8r,f8r,QC,aTe,m8r,g8r,yJ,h8r,p8r,u8r,WC,nTe,_8r,b8r,LJ,v8r,F8r,T8r,HC,sTe,M8r,E8r,xJ,C8r,w8r,A8r,UC,lTe,y8r,L8r,$J,x8r,$8r,k8r,JC,xqe,Ic,YC,iTe,cx,S8r,dTe,R8r,$qe,hr,fx,B8r,qc,P8r,kJ,I8r,q8r,SJ,N8r,j8r,D8r,mx,G8r,cTe,O8r,V8r,X8r,Ot,gx,z8r,fTe,Q8r,W8r,Nc,H8r,mTe,U8r,J8r,RJ,Y8r,K8r,Z8r,KC,exr,Or,hx,oxr,gTe,rxr,txr,un,axr,hTe,nxr,sxr,pTe,lxr,ixr,uTe,dxr,cxr,fxr,Le,ZC,_Te,mxr,gxr,BJ,hxr,pxr,uxr,e3,bTe,_xr,bxr,PJ,vxr,Fxr,Txr,o3,vTe,Mxr,Exr,IJ,Cxr,wxr,Axr,r3,FTe,yxr,Lxr,qJ,xxr,$xr,kxr,t3,TTe,Sxr,Rxr,NJ,Bxr,Pxr,Ixr,a3,MTe,qxr,Nxr,jJ,jxr,Dxr,Gxr,n3,ETe,Oxr,Vxr,DJ,Xxr,zxr,Qxr,s3,CTe,Wxr,Hxr,GJ,Uxr,Jxr,Yxr,l3,wTe,Kxr,Zxr,OJ,e9r,o9r,r9r,i3,ATe,t9r,a9r,VJ,n9r,s9r,l9r,d3,kqe,jc,c3,yTe,px,i9r,LTe,d9r,Sqe,pr,ux,c9r,Dc,f9r,XJ,m9r,g9r,zJ,h9r,p9r,u9r,_x,_9r,xTe,b9r,v9r,F9r,Vt,bx,T9r,$Te,M9r,E9r,Gc,C9r,kTe,w9r,A9r,QJ,y9r,L9r,x9r,f3,$9r,Vr,vx,k9r,STe,S9r,R9r,_n,B9r,RTe,P9r,I9r,BTe,q9r,N9r,PTe,j9r,D9r,G9r,Se,m3,ITe,O9r,V9r,WJ,X9r,z9r,Q9r,g3,qTe,W9r,H9r,HJ,U9r,J9r,Y9r,h3,NTe,K9r,Z9r,UJ,e$r,o$r,r$r,p3,jTe,t$r,a$r,JJ,n$r,s$r,l$r,u3,DTe,i$r,d$r,YJ,c$r,f$r,m$r,_3,GTe,g$r,h$r,KJ,p$r,u$r,_$r,b3,OTe,b$r,v$r,ZJ,F$r,T$r,M$r,v3,VTe,E$r,C$r,eY,w$r,A$r,y$r,F3,XTe,L$r,x$r,oY,$$r,k$r,S$r,T3,Rqe,Oc,M3,zTe,Fx,R$r,QTe,B$r,Bqe,ur,Tx,P$r,Vc,I$r,rY,q$r,N$r,tY,j$r,D$r,G$r,Mx,O$r,WTe,V$r,X$r,z$r,Xt,Ex,Q$r,HTe,W$r,H$r,Xc,U$r,UTe,J$r,Y$r,aY,K$r,Z$r,ekr,E3,okr,Xr,Cx,rkr,JTe,tkr,akr,bn,nkr,YTe,skr,lkr,KTe,ikr,dkr,ZTe,ckr,fkr,mkr,xe,C3,e7e,gkr,hkr,nY,pkr,ukr,_kr,w3,o7e,bkr,vkr,sY,Fkr,Tkr,Mkr,A3,r7e,Ekr,Ckr,lY,wkr,Akr,ykr,y3,t7e,Lkr,xkr,iY,$kr,kkr,Skr,L3,a7e,Rkr,Bkr,dY,Pkr,Ikr,qkr,x3,n7e,Nkr,jkr,cY,Dkr,Gkr,Okr,$3,s7e,Vkr,Xkr,fY,zkr,Qkr,Wkr,k3,l7e,Hkr,Ukr,mY,Jkr,Ykr,Kkr,S3,i7e,Zkr,eSr,gY,oSr,rSr,tSr,R3,d7e,aSr,nSr,hY,sSr,lSr,iSr,B3,Pqe,zc,P3,c7e,wx,dSr,f7e,cSr,Iqe,_r,Ax,fSr,Qc,mSr,pY,gSr,hSr,uY,pSr,uSr,_Sr,yx,bSr,m7e,vSr,FSr,TSr,zt,Lx,MSr,g7e,ESr,CSr,Wc,wSr,h7e,ASr,ySr,_Y,LSr,xSr,$Sr,I3,kSr,zr,xx,SSr,p7e,RSr,BSr,vn,PSr,u7e,ISr,qSr,_7e,NSr,jSr,b7e,DSr,GSr,OSr,$e,q3,v7e,VSr,XSr,bY,zSr,QSr,WSr,N3,F7e,HSr,USr,vY,JSr,YSr,KSr,j3,T7e,ZSr,eRr,FY,oRr,rRr,tRr,D3,M7e,aRr,nRr,TY,sRr,lRr,iRr,G3,E7e,dRr,cRr,MY,fRr,mRr,gRr,O3,C7e,hRr,pRr,EY,uRr,_Rr,bRr,V3,w7e,vRr,FRr,CY,TRr,MRr,ERr,X3,A7e,CRr,wRr,wY,ARr,yRr,LRr,z3,y7e,xRr,$Rr,AY,kRr,SRr,RRr,Q3,L7e,BRr,PRr,yY,IRr,qRr,NRr,W3,qqe,Hc,H3,x7e,$x,jRr,$7e,DRr,Nqe,br,kx,GRr,Uc,ORr,LY,VRr,XRr,xY,zRr,QRr,WRr,Sx,HRr,k7e,URr,JRr,YRr,Qt,Rx,KRr,S7e,ZRr,eBr,Jc,oBr,R7e,rBr,tBr,$Y,aBr,nBr,sBr,U3,lBr,Qr,Bx,iBr,B7e,dBr,cBr,Fn,fBr,P7e,mBr,gBr,I7e,hBr,pBr,q7e,uBr,_Br,bBr,De,J3,N7e,vBr,FBr,kY,TBr,MBr,EBr,Y3,j7e,CBr,wBr,SY,ABr,yBr,LBr,K3,D7e,xBr,$Br,RY,kBr,SBr,RBr,Z3,G7e,BBr,PBr,BY,IBr,qBr,NBr,ew,O7e,jBr,DBr,PY,GBr,OBr,VBr,ow,V7e,XBr,zBr,IY,QBr,WBr,HBr,rw,X7e,UBr,JBr,qY,YBr,KBr,ZBr,tw,z7e,ePr,oPr,NY,rPr,tPr,aPr,aw,jqe,Yc,nw,Q7e,Px,nPr,W7e,sPr,Dqe,vr,Ix,lPr,Kc,iPr,jY,dPr,cPr,DY,fPr,mPr,gPr,qx,hPr,H7e,pPr,uPr,_Pr,Wt,Nx,bPr,U7e,vPr,FPr,Zc,TPr,J7e,MPr,EPr,GY,CPr,wPr,APr,sw,yPr,Wr,jx,LPr,Y7e,xPr,$Pr,Tn,kPr,K7e,SPr,RPr,Z7e,BPr,PPr,eMe,IPr,qPr,NPr,Ge,lw,oMe,jPr,DPr,OY,GPr,OPr,VPr,iw,rMe,XPr,zPr,VY,QPr,WPr,HPr,dw,tMe,UPr,JPr,XY,YPr,KPr,ZPr,cw,aMe,eIr,oIr,zY,rIr,tIr,aIr,fw,nMe,nIr,sIr,QY,lIr,iIr,dIr,mw,sMe,cIr,fIr,WY,mIr,gIr,hIr,gw,lMe,pIr,uIr,HY,_Ir,bIr,vIr,hw,iMe,FIr,TIr,UY,MIr,EIr,CIr,pw,Gqe,ef,uw,dMe,Dx,wIr,cMe,AIr,Oqe,Fr,Gx,yIr,of,LIr,JY,xIr,$Ir,YY,kIr,SIr,RIr,Ox,BIr,fMe,PIr,IIr,qIr,Ht,Vx,NIr,mMe,jIr,DIr,rf,GIr,gMe,OIr,VIr,KY,XIr,zIr,QIr,_w,WIr,Hr,Xx,HIr,hMe,UIr,JIr,Mn,YIr,pMe,KIr,ZIr,uMe,eqr,oqr,_Me,rqr,tqr,aqr,bMe,bw,vMe,nqr,sqr,ZY,lqr,iqr,dqr,vw,Vqe,tf,Fw,FMe,zx,cqr,TMe,fqr,Xqe,Tr,Qx,mqr,af,gqr,eK,hqr,pqr,oK,uqr,_qr,bqr,Wx,vqr,MMe,Fqr,Tqr,Mqr,Ut,Hx,Eqr,EMe,Cqr,wqr,nf,Aqr,CMe,yqr,Lqr,rK,xqr,$qr,kqr,Tw,Sqr,Ur,Ux,Rqr,wMe,Bqr,Pqr,En,Iqr,AMe,qqr,Nqr,yMe,jqr,Dqr,LMe,Gqr,Oqr,Vqr,Jx,Mw,xMe,Xqr,zqr,tK,Qqr,Wqr,Hqr,Ew,$Me,Uqr,Jqr,aK,Yqr,Kqr,Zqr,Cw,zqe,sf,ww,kMe,Yx,eNr,SMe,oNr,Qqe,Mr,Kx,rNr,lf,tNr,nK,aNr,nNr,sK,sNr,lNr,iNr,Zx,dNr,RMe,cNr,fNr,mNr,Jt,e9,gNr,BMe,hNr,pNr,df,uNr,PMe,_Nr,bNr,lK,vNr,FNr,TNr,Aw,MNr,Jr,o9,ENr,IMe,CNr,wNr,Cn,ANr,qMe,yNr,LNr,NMe,xNr,$Nr,jMe,kNr,SNr,RNr,DMe,yw,GMe,BNr,PNr,iK,INr,qNr,NNr,Lw,Wqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Y6=new ee({}),K6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bf=new jNr({props:{warning:!0,$$slots:{default:[u0t]},$$scope:{ctx:L}}}),Z6=new ee({}),e0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L571"}}),t0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L594"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[_0t]},$$scope:{ctx:L}}}),a0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L716"}}),n0=new ee({}),s0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L384"}}),d0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17254/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L398"}}),Ug=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[b0t]},$$scope:{ctx:L}}}),c0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L594"}}),f0=new ee({}),m0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),p0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Eh=new jNr({props:{$$slots:{default:[v0t]},$$scope:{ctx:L}}}),Ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[F0t]},$$scope:{ctx:L}}}),u0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),_0=new ee({}),b0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L77"}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L91"}}),Oh=new jNr({props:{$$slots:{default:[T0t]},$$scope:{ctx:L}}}),Vh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[M0t]},$$scope:{ctx:L}}}),M0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L244"}}),E0=new ee({}),C0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L721"}}),A0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Qh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[E0t]},$$scope:{ctx:L}}}),y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[C0t]},$$scope:{ctx:L}}}),L0=new ee({}),x0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L728"}}),k0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[w0t]},$$scope:{ctx:L}}}),S0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[A0t]},$$scope:{ctx:L}}}),R0=new ee({}),B0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L743"}}),I0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),L_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[y0t]},$$scope:{ctx:L}}}),q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),m2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[L0t]},$$scope:{ctx:L}}}),N0=new ee({}),j0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L750"}}),G0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),h2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[x0t]},$$scope:{ctx:L}}}),O0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$0t]},$$scope:{ctx:L}}}),V0=new ee({}),X0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L757"}}),Q0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[k0t]},$$scope:{ctx:L}}}),W0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),b1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[S0t]},$$scope:{ctx:L}}}),H0=new ee({}),U0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L766"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),F1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[R0t]},$$scope:{ctx:L}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),pb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[B0t]},$$scope:{ctx:L}}}),Z0=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L800"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[P0t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[I0t]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L807"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[q0t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),t4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[N0t]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L793"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),n4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[j0t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[D0t]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L775"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[G0t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[O0t]},$$scope:{ctx:L}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L782"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[V0t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[X0t]},$$scope:{ctx:L}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L816"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[z0t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Q0t]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L855"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[W0t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[H0t]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L862"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[U0t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[J0t]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L885"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Y0t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[K0t]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L869"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Z0t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Sv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L876"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L894"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L901"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L848"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L823"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L830"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L839"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),S7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),z7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),b8=new ee({}),v8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),zx=new ee({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),Yx=new ee({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),gf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),W6=o("from_pretrained()"),hf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),An=a("a"),H6=o("AutoConfig"),yn=o(", "),Ln=a("a"),U6=o("AutoModel"),mi=o(`, and
`),xn=a("a"),J6=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),pf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),p$=o("will create a model that is an instance of "),hi=a("a"),u$=o("BertModel"),_$=o("."),Eo=l(),Ea=a("p"),b$=o("There is one class of "),uf=a("code"),v$=o("AutoModel"),oDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),XPe=l(),pi=a("h2"),_f=a("a"),ree=a("span"),F(Y6.$$.fragment),rDe=l(),tee=a("span"),tDe=o("Extending the Auto Classes"),zPe=l(),$n=a("p"),aDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aee=a("code"),nDe=o("NewModel"),sDe=o(", make sure you have a "),nee=a("code"),lDe=o("NewModelConfig"),iDe=o(` then you can add those to the auto
classes like this:`),QPe=l(),F(K6.$$.fragment),WPe=l(),F$=a("p"),dDe=o("You will then be able to use the auto classes like you would usually do!"),HPe=l(),F(bf.$$.fragment),UPe=l(),ui=a("h2"),vf=a("a"),see=a("span"),F(Z6.$$.fragment),cDe=l(),lee=a("span"),fDe=o("AutoConfig"),JPe=l(),Co=a("div"),F(e0.$$.fragment),mDe=l(),o0=a("p"),gDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),T$=a("a"),hDe=o("from_pretrained()"),pDe=o(" class method."),uDe=l(),r0=a("p"),_De=o("This class cannot be instantiated directly using "),iee=a("code"),bDe=o("__init__()"),vDe=o(" (throws an error)."),FDe=l(),Er=a("div"),F(t0.$$.fragment),TDe=l(),dee=a("p"),MDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),EDe=l(),_i=a("p"),CDe=o("The configuration class to instantiate is selected based on the "),cee=a("code"),wDe=o("model_type"),ADe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),fee=a("code"),yDe=o("pretrained_model_name_or_path"),LDe=o(":"),xDe=l(),A=a("ul"),Ff=a("li"),mee=a("strong"),$De=o("albert"),kDe=o(" \u2014 "),M$=a("a"),SDe=o("AlbertConfig"),RDe=o(" (ALBERT model)"),BDe=l(),Tf=a("li"),gee=a("strong"),PDe=o("bart"),IDe=o(" \u2014 "),E$=a("a"),qDe=o("BartConfig"),NDe=o(" (BART model)"),jDe=l(),Mf=a("li"),hee=a("strong"),DDe=o("beit"),GDe=o(" \u2014 "),C$=a("a"),ODe=o("BeitConfig"),VDe=o(" (BEiT model)"),XDe=l(),Ef=a("li"),pee=a("strong"),zDe=o("bert"),QDe=o(" \u2014 "),w$=a("a"),WDe=o("BertConfig"),HDe=o(" (BERT model)"),UDe=l(),Cf=a("li"),uee=a("strong"),JDe=o("bert-generation"),YDe=o(" \u2014 "),A$=a("a"),KDe=o("BertGenerationConfig"),ZDe=o(" (Bert Generation model)"),eGe=l(),wf=a("li"),_ee=a("strong"),oGe=o("big_bird"),rGe=o(" \u2014 "),y$=a("a"),tGe=o("BigBirdConfig"),aGe=o(" (BigBird model)"),nGe=l(),Af=a("li"),bee=a("strong"),sGe=o("bigbird_pegasus"),lGe=o(" \u2014 "),L$=a("a"),iGe=o("BigBirdPegasusConfig"),dGe=o(" (BigBirdPegasus model)"),cGe=l(),yf=a("li"),vee=a("strong"),fGe=o("blenderbot"),mGe=o(" \u2014 "),x$=a("a"),gGe=o("BlenderbotConfig"),hGe=o(" (Blenderbot model)"),pGe=l(),Lf=a("li"),Fee=a("strong"),uGe=o("blenderbot-small"),_Ge=o(" \u2014 "),$$=a("a"),bGe=o("BlenderbotSmallConfig"),vGe=o(" (BlenderbotSmall model)"),FGe=l(),xf=a("li"),Tee=a("strong"),TGe=o("camembert"),MGe=o(" \u2014 "),k$=a("a"),EGe=o("CamembertConfig"),CGe=o(" (CamemBERT model)"),wGe=l(),$f=a("li"),Mee=a("strong"),AGe=o("canine"),yGe=o(" \u2014 "),S$=a("a"),LGe=o("CanineConfig"),xGe=o(" (Canine model)"),$Ge=l(),kf=a("li"),Eee=a("strong"),kGe=o("clip"),SGe=o(" \u2014 "),R$=a("a"),RGe=o("CLIPConfig"),BGe=o(" (CLIP model)"),PGe=l(),Sf=a("li"),Cee=a("strong"),IGe=o("convbert"),qGe=o(" \u2014 "),B$=a("a"),NGe=o("ConvBertConfig"),jGe=o(" (ConvBERT model)"),DGe=l(),Rf=a("li"),wee=a("strong"),GGe=o("convnext"),OGe=o(" \u2014 "),P$=a("a"),VGe=o("ConvNextConfig"),XGe=o(" (ConvNext model)"),zGe=l(),Bf=a("li"),Aee=a("strong"),QGe=o("ctrl"),WGe=o(" \u2014 "),I$=a("a"),HGe=o("CTRLConfig"),UGe=o(" (CTRL model)"),JGe=l(),Pf=a("li"),yee=a("strong"),YGe=o("data2vec-audio"),KGe=o(" \u2014 "),q$=a("a"),ZGe=o("Data2VecAudioConfig"),eOe=o(" (Data2VecAudio model)"),oOe=l(),If=a("li"),Lee=a("strong"),rOe=o("data2vec-text"),tOe=o(" \u2014 "),N$=a("a"),aOe=o("Data2VecTextConfig"),nOe=o(" (Data2VecText model)"),sOe=l(),qf=a("li"),xee=a("strong"),lOe=o("data2vec-vision"),iOe=o(" \u2014 "),j$=a("a"),dOe=o("Data2VecVisionConfig"),cOe=o(" (Data2VecVision model)"),fOe=l(),Nf=a("li"),$ee=a("strong"),mOe=o("deberta"),gOe=o(" \u2014 "),D$=a("a"),hOe=o("DebertaConfig"),pOe=o(" (DeBERTa model)"),uOe=l(),jf=a("li"),kee=a("strong"),_Oe=o("deberta-v2"),bOe=o(" \u2014 "),G$=a("a"),vOe=o("DebertaV2Config"),FOe=o(" (DeBERTa-v2 model)"),TOe=l(),Df=a("li"),See=a("strong"),MOe=o("decision_transformer"),EOe=o(" \u2014 "),O$=a("a"),COe=o("DecisionTransformerConfig"),wOe=o(" (Decision Transformer model)"),AOe=l(),Gf=a("li"),Ree=a("strong"),yOe=o("deit"),LOe=o(" \u2014 "),V$=a("a"),xOe=o("DeiTConfig"),$Oe=o(" (DeiT model)"),kOe=l(),Of=a("li"),Bee=a("strong"),SOe=o("detr"),ROe=o(" \u2014 "),X$=a("a"),BOe=o("DetrConfig"),POe=o(" (DETR model)"),IOe=l(),Vf=a("li"),Pee=a("strong"),qOe=o("distilbert"),NOe=o(" \u2014 "),z$=a("a"),jOe=o("DistilBertConfig"),DOe=o(" (DistilBERT model)"),GOe=l(),Xf=a("li"),Iee=a("strong"),OOe=o("dpr"),VOe=o(" \u2014 "),Q$=a("a"),XOe=o("DPRConfig"),zOe=o(" (DPR model)"),QOe=l(),zf=a("li"),qee=a("strong"),WOe=o("dpt"),HOe=o(" \u2014 "),W$=a("a"),UOe=o("DPTConfig"),JOe=o(" (DPT model)"),YOe=l(),Qf=a("li"),Nee=a("strong"),KOe=o("electra"),ZOe=o(" \u2014 "),H$=a("a"),eVe=o("ElectraConfig"),oVe=o(" (ELECTRA model)"),rVe=l(),Wf=a("li"),jee=a("strong"),tVe=o("encoder-decoder"),aVe=o(" \u2014 "),U$=a("a"),nVe=o("EncoderDecoderConfig"),sVe=o(" (Encoder decoder model)"),lVe=l(),Hf=a("li"),Dee=a("strong"),iVe=o("flaubert"),dVe=o(" \u2014 "),J$=a("a"),cVe=o("FlaubertConfig"),fVe=o(" (FlauBERT model)"),mVe=l(),Uf=a("li"),Gee=a("strong"),gVe=o("flava"),hVe=o(" \u2014 "),Y$=a("a"),pVe=o("FlavaConfig"),uVe=o(" (Flava model)"),_Ve=l(),Jf=a("li"),Oee=a("strong"),bVe=o("fnet"),vVe=o(" \u2014 "),K$=a("a"),FVe=o("FNetConfig"),TVe=o(" (FNet model)"),MVe=l(),Yf=a("li"),Vee=a("strong"),EVe=o("fsmt"),CVe=o(" \u2014 "),Z$=a("a"),wVe=o("FSMTConfig"),AVe=o(" (FairSeq Machine-Translation model)"),yVe=l(),Kf=a("li"),Xee=a("strong"),LVe=o("funnel"),xVe=o(" \u2014 "),ek=a("a"),$Ve=o("FunnelConfig"),kVe=o(" (Funnel Transformer model)"),SVe=l(),Zf=a("li"),zee=a("strong"),RVe=o("glpn"),BVe=o(" \u2014 "),ok=a("a"),PVe=o("GLPNConfig"),IVe=o(" (GLPN model)"),qVe=l(),em=a("li"),Qee=a("strong"),NVe=o("gpt2"),jVe=o(" \u2014 "),rk=a("a"),DVe=o("GPT2Config"),GVe=o(" (OpenAI GPT-2 model)"),OVe=l(),om=a("li"),Wee=a("strong"),VVe=o("gpt_neo"),XVe=o(" \u2014 "),tk=a("a"),zVe=o("GPTNeoConfig"),QVe=o(" (GPT Neo model)"),WVe=l(),rm=a("li"),Hee=a("strong"),HVe=o("gptj"),UVe=o(" \u2014 "),ak=a("a"),JVe=o("GPTJConfig"),YVe=o(" (GPT-J model)"),KVe=l(),tm=a("li"),Uee=a("strong"),ZVe=o("hubert"),eXe=o(" \u2014 "),nk=a("a"),oXe=o("HubertConfig"),rXe=o(" (Hubert model)"),tXe=l(),am=a("li"),Jee=a("strong"),aXe=o("ibert"),nXe=o(" \u2014 "),sk=a("a"),sXe=o("IBertConfig"),lXe=o(" (I-BERT model)"),iXe=l(),nm=a("li"),Yee=a("strong"),dXe=o("imagegpt"),cXe=o(" \u2014 "),lk=a("a"),fXe=o("ImageGPTConfig"),mXe=o(" (ImageGPT model)"),gXe=l(),sm=a("li"),Kee=a("strong"),hXe=o("layoutlm"),pXe=o(" \u2014 "),ik=a("a"),uXe=o("LayoutLMConfig"),_Xe=o(" (LayoutLM model)"),bXe=l(),lm=a("li"),Zee=a("strong"),vXe=o("layoutlmv2"),FXe=o(" \u2014 "),dk=a("a"),TXe=o("LayoutLMv2Config"),MXe=o(" (LayoutLMv2 model)"),EXe=l(),im=a("li"),eoe=a("strong"),CXe=o("led"),wXe=o(" \u2014 "),ck=a("a"),AXe=o("LEDConfig"),yXe=o(" (LED model)"),LXe=l(),dm=a("li"),ooe=a("strong"),xXe=o("longformer"),$Xe=o(" \u2014 "),fk=a("a"),kXe=o("LongformerConfig"),SXe=o(" (Longformer model)"),RXe=l(),cm=a("li"),roe=a("strong"),BXe=o("luke"),PXe=o(" \u2014 "),mk=a("a"),IXe=o("LukeConfig"),qXe=o(" (LUKE model)"),NXe=l(),fm=a("li"),toe=a("strong"),jXe=o("lxmert"),DXe=o(" \u2014 "),gk=a("a"),GXe=o("LxmertConfig"),OXe=o(" (LXMERT model)"),VXe=l(),mm=a("li"),aoe=a("strong"),XXe=o("m2m_100"),zXe=o(" \u2014 "),hk=a("a"),QXe=o("M2M100Config"),WXe=o(" (M2M100 model)"),HXe=l(),gm=a("li"),noe=a("strong"),UXe=o("marian"),JXe=o(" \u2014 "),pk=a("a"),YXe=o("MarianConfig"),KXe=o(" (Marian model)"),ZXe=l(),hm=a("li"),soe=a("strong"),eze=o("maskformer"),oze=o(" \u2014 "),uk=a("a"),rze=o("MaskFormerConfig"),tze=o(" (MaskFormer model)"),aze=l(),pm=a("li"),loe=a("strong"),nze=o("mbart"),sze=o(" \u2014 "),_k=a("a"),lze=o("MBartConfig"),ize=o(" (mBART model)"),dze=l(),um=a("li"),ioe=a("strong"),cze=o("megatron-bert"),fze=o(" \u2014 "),bk=a("a"),mze=o("MegatronBertConfig"),gze=o(" (MegatronBert model)"),hze=l(),_m=a("li"),doe=a("strong"),pze=o("mobilebert"),uze=o(" \u2014 "),vk=a("a"),_ze=o("MobileBertConfig"),bze=o(" (MobileBERT model)"),vze=l(),bm=a("li"),coe=a("strong"),Fze=o("mpnet"),Tze=o(" \u2014 "),Fk=a("a"),Mze=o("MPNetConfig"),Eze=o(" (MPNet model)"),Cze=l(),vm=a("li"),foe=a("strong"),wze=o("mt5"),Aze=o(" \u2014 "),Tk=a("a"),yze=o("MT5Config"),Lze=o(" (mT5 model)"),xze=l(),Fm=a("li"),moe=a("strong"),$ze=o("nystromformer"),kze=o(" \u2014 "),Mk=a("a"),Sze=o("NystromformerConfig"),Rze=o(" (Nystromformer model)"),Bze=l(),Tm=a("li"),goe=a("strong"),Pze=o("openai-gpt"),Ize=o(" \u2014 "),Ek=a("a"),qze=o("OpenAIGPTConfig"),Nze=o(" (OpenAI GPT model)"),jze=l(),Mm=a("li"),hoe=a("strong"),Dze=o("opt"),Gze=o(" \u2014 "),Ck=a("a"),Oze=o("OPTConfig"),Vze=o(" (OPT model)"),Xze=l(),Em=a("li"),poe=a("strong"),zze=o("pegasus"),Qze=o(" \u2014 "),wk=a("a"),Wze=o("PegasusConfig"),Hze=o(" (Pegasus model)"),Uze=l(),Cm=a("li"),uoe=a("strong"),Jze=o("perceiver"),Yze=o(" \u2014 "),Ak=a("a"),Kze=o("PerceiverConfig"),Zze=o(" (Perceiver model)"),eQe=l(),wm=a("li"),_oe=a("strong"),oQe=o("plbart"),rQe=o(" \u2014 "),yk=a("a"),tQe=o("PLBartConfig"),aQe=o(" (PLBart model)"),nQe=l(),Am=a("li"),boe=a("strong"),sQe=o("poolformer"),lQe=o(" \u2014 "),Lk=a("a"),iQe=o("PoolFormerConfig"),dQe=o(" (PoolFormer model)"),cQe=l(),ym=a("li"),voe=a("strong"),fQe=o("prophetnet"),mQe=o(" \u2014 "),xk=a("a"),gQe=o("ProphetNetConfig"),hQe=o(" (ProphetNet model)"),pQe=l(),Lm=a("li"),Foe=a("strong"),uQe=o("qdqbert"),_Qe=o(" \u2014 "),$k=a("a"),bQe=o("QDQBertConfig"),vQe=o(" (QDQBert model)"),FQe=l(),xm=a("li"),Toe=a("strong"),TQe=o("rag"),MQe=o(" \u2014 "),kk=a("a"),EQe=o("RagConfig"),CQe=o(" (RAG model)"),wQe=l(),$m=a("li"),Moe=a("strong"),AQe=o("realm"),yQe=o(" \u2014 "),Sk=a("a"),LQe=o("RealmConfig"),xQe=o(" (Realm model)"),$Qe=l(),km=a("li"),Eoe=a("strong"),kQe=o("reformer"),SQe=o(" \u2014 "),Rk=a("a"),RQe=o("ReformerConfig"),BQe=o(" (Reformer model)"),PQe=l(),Sm=a("li"),Coe=a("strong"),IQe=o("regnet"),qQe=o(" \u2014 "),Bk=a("a"),NQe=o("RegNetConfig"),jQe=o(" (RegNet model)"),DQe=l(),Rm=a("li"),woe=a("strong"),GQe=o("rembert"),OQe=o(" \u2014 "),Pk=a("a"),VQe=o("RemBertConfig"),XQe=o(" (RemBERT model)"),zQe=l(),Bm=a("li"),Aoe=a("strong"),QQe=o("resnet"),WQe=o(" \u2014 "),Ik=a("a"),HQe=o("ResNetConfig"),UQe=o(" (ResNet model)"),JQe=l(),Pm=a("li"),yoe=a("strong"),YQe=o("retribert"),KQe=o(" \u2014 "),qk=a("a"),ZQe=o("RetriBertConfig"),eWe=o(" (RetriBERT model)"),oWe=l(),Im=a("li"),Loe=a("strong"),rWe=o("roberta"),tWe=o(" \u2014 "),Nk=a("a"),aWe=o("RobertaConfig"),nWe=o(" (RoBERTa model)"),sWe=l(),qm=a("li"),xoe=a("strong"),lWe=o("roformer"),iWe=o(" \u2014 "),jk=a("a"),dWe=o("RoFormerConfig"),cWe=o(" (RoFormer model)"),fWe=l(),Nm=a("li"),$oe=a("strong"),mWe=o("segformer"),gWe=o(" \u2014 "),Dk=a("a"),hWe=o("SegformerConfig"),pWe=o(" (SegFormer model)"),uWe=l(),jm=a("li"),koe=a("strong"),_We=o("sew"),bWe=o(" \u2014 "),Gk=a("a"),vWe=o("SEWConfig"),FWe=o(" (SEW model)"),TWe=l(),Dm=a("li"),Soe=a("strong"),MWe=o("sew-d"),EWe=o(" \u2014 "),Ok=a("a"),CWe=o("SEWDConfig"),wWe=o(" (SEW-D model)"),AWe=l(),Gm=a("li"),Roe=a("strong"),yWe=o("speech-encoder-decoder"),LWe=o(" \u2014 "),Vk=a("a"),xWe=o("SpeechEncoderDecoderConfig"),$We=o(" (Speech Encoder decoder model)"),kWe=l(),Om=a("li"),Boe=a("strong"),SWe=o("speech_to_text"),RWe=o(" \u2014 "),Xk=a("a"),BWe=o("Speech2TextConfig"),PWe=o(" (Speech2Text model)"),IWe=l(),Vm=a("li"),Poe=a("strong"),qWe=o("speech_to_text_2"),NWe=o(" \u2014 "),zk=a("a"),jWe=o("Speech2Text2Config"),DWe=o(" (Speech2Text2 model)"),GWe=l(),Xm=a("li"),Ioe=a("strong"),OWe=o("splinter"),VWe=o(" \u2014 "),Qk=a("a"),XWe=o("SplinterConfig"),zWe=o(" (Splinter model)"),QWe=l(),zm=a("li"),qoe=a("strong"),WWe=o("squeezebert"),HWe=o(" \u2014 "),Wk=a("a"),UWe=o("SqueezeBertConfig"),JWe=o(" (SqueezeBERT model)"),YWe=l(),Qm=a("li"),Noe=a("strong"),KWe=o("swin"),ZWe=o(" \u2014 "),Hk=a("a"),eHe=o("SwinConfig"),oHe=o(" (Swin model)"),rHe=l(),Wm=a("li"),joe=a("strong"),tHe=o("t5"),aHe=o(" \u2014 "),Uk=a("a"),nHe=o("T5Config"),sHe=o(" (T5 model)"),lHe=l(),Hm=a("li"),Doe=a("strong"),iHe=o("tapas"),dHe=o(" \u2014 "),Jk=a("a"),cHe=o("TapasConfig"),fHe=o(" (TAPAS model)"),mHe=l(),Um=a("li"),Goe=a("strong"),gHe=o("tapex"),hHe=o(" \u2014 "),Yk=a("a"),pHe=o("BartConfig"),uHe=o(" (TAPEX model)"),_He=l(),Jm=a("li"),Ooe=a("strong"),bHe=o("transfo-xl"),vHe=o(" \u2014 "),Kk=a("a"),FHe=o("TransfoXLConfig"),THe=o(" (Transformer-XL model)"),MHe=l(),Ym=a("li"),Voe=a("strong"),EHe=o("trocr"),CHe=o(" \u2014 "),Zk=a("a"),wHe=o("TrOCRConfig"),AHe=o(" (TrOCR model)"),yHe=l(),Km=a("li"),Xoe=a("strong"),LHe=o("unispeech"),xHe=o(" \u2014 "),eS=a("a"),$He=o("UniSpeechConfig"),kHe=o(" (UniSpeech model)"),SHe=l(),Zm=a("li"),zoe=a("strong"),RHe=o("unispeech-sat"),BHe=o(" \u2014 "),oS=a("a"),PHe=o("UniSpeechSatConfig"),IHe=o(" (UniSpeechSat model)"),qHe=l(),eg=a("li"),Qoe=a("strong"),NHe=o("van"),jHe=o(" \u2014 "),rS=a("a"),DHe=o("VanConfig"),GHe=o(" (VAN model)"),OHe=l(),og=a("li"),Woe=a("strong"),VHe=o("vilt"),XHe=o(" \u2014 "),tS=a("a"),zHe=o("ViltConfig"),QHe=o(" (ViLT model)"),WHe=l(),rg=a("li"),Hoe=a("strong"),HHe=o("vision-encoder-decoder"),UHe=o(" \u2014 "),aS=a("a"),JHe=o("VisionEncoderDecoderConfig"),YHe=o(" (Vision Encoder decoder model)"),KHe=l(),tg=a("li"),Uoe=a("strong"),ZHe=o("vision-text-dual-encoder"),eUe=o(" \u2014 "),nS=a("a"),oUe=o("VisionTextDualEncoderConfig"),rUe=o(" (VisionTextDualEncoder model)"),tUe=l(),ag=a("li"),Joe=a("strong"),aUe=o("visual_bert"),nUe=o(" \u2014 "),sS=a("a"),sUe=o("VisualBertConfig"),lUe=o(" (VisualBert model)"),iUe=l(),ng=a("li"),Yoe=a("strong"),dUe=o("vit"),cUe=o(" \u2014 "),lS=a("a"),fUe=o("ViTConfig"),mUe=o(" (ViT model)"),gUe=l(),sg=a("li"),Koe=a("strong"),hUe=o("vit_mae"),pUe=o(" \u2014 "),iS=a("a"),uUe=o("ViTMAEConfig"),_Ue=o(" (ViTMAE model)"),bUe=l(),lg=a("li"),Zoe=a("strong"),vUe=o("wav2vec2"),FUe=o(" \u2014 "),dS=a("a"),TUe=o("Wav2Vec2Config"),MUe=o(" (Wav2Vec2 model)"),EUe=l(),ig=a("li"),ere=a("strong"),CUe=o("wavlm"),wUe=o(" \u2014 "),cS=a("a"),AUe=o("WavLMConfig"),yUe=o(" (WavLM model)"),LUe=l(),dg=a("li"),ore=a("strong"),xUe=o("xglm"),$Ue=o(" \u2014 "),fS=a("a"),kUe=o("XGLMConfig"),SUe=o(" (XGLM model)"),RUe=l(),cg=a("li"),rre=a("strong"),BUe=o("xlm"),PUe=o(" \u2014 "),mS=a("a"),IUe=o("XLMConfig"),qUe=o(" (XLM model)"),NUe=l(),fg=a("li"),tre=a("strong"),jUe=o("xlm-prophetnet"),DUe=o(" \u2014 "),gS=a("a"),GUe=o("XLMProphetNetConfig"),OUe=o(" (XLMProphetNet model)"),VUe=l(),mg=a("li"),are=a("strong"),XUe=o("xlm-roberta"),zUe=o(" \u2014 "),hS=a("a"),QUe=o("XLMRobertaConfig"),WUe=o(" (XLM-RoBERTa model)"),HUe=l(),gg=a("li"),nre=a("strong"),UUe=o("xlm-roberta-xl"),JUe=o(" \u2014 "),pS=a("a"),YUe=o("XLMRobertaXLConfig"),KUe=o(" (XLM-RoBERTa-XL model)"),ZUe=l(),hg=a("li"),sre=a("strong"),eJe=o("xlnet"),oJe=o(" \u2014 "),uS=a("a"),rJe=o("XLNetConfig"),tJe=o(" (XLNet model)"),aJe=l(),pg=a("li"),lre=a("strong"),nJe=o("yolos"),sJe=o(" \u2014 "),_S=a("a"),lJe=o("YolosConfig"),iJe=o(" (YOLOS model)"),dJe=l(),ug=a("li"),ire=a("strong"),cJe=o("yoso"),fJe=o(" \u2014 "),bS=a("a"),mJe=o("YosoConfig"),gJe=o(" (YOSO model)"),hJe=l(),F(_g.$$.fragment),pJe=l(),bg=a("div"),F(a0.$$.fragment),uJe=l(),dre=a("p"),_Je=o("Register a new configuration for this class."),YPe=l(),bi=a("h2"),vg=a("a"),cre=a("span"),F(n0.$$.fragment),bJe=l(),fre=a("span"),vJe=o("AutoTokenizer"),KPe=l(),wo=a("div"),F(s0.$$.fragment),FJe=l(),l0=a("p"),TJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vS=a("a"),MJe=o("AutoTokenizer.from_pretrained()"),EJe=o(" class method."),CJe=l(),i0=a("p"),wJe=o("This class cannot be instantiated directly using "),mre=a("code"),AJe=o("__init__()"),yJe=o(" (throws an error)."),LJe=l(),Cr=a("div"),F(d0.$$.fragment),xJe=l(),gre=a("p"),$Je=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),kJe=l(),Ca=a("p"),SJe=o("The tokenizer class to instantiate is selected based on the "),hre=a("code"),RJe=o("model_type"),BJe=o(` property of the config object (either
passed as an argument or loaded from `),pre=a("code"),PJe=o("pretrained_model_name_or_path"),IJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ure=a("code"),qJe=o("pretrained_model_name_or_path"),NJe=o(":"),jJe=l(),k=a("ul"),kn=a("li"),_re=a("strong"),DJe=o("albert"),GJe=o(" \u2014 "),FS=a("a"),OJe=o("AlbertTokenizer"),VJe=o(" or "),TS=a("a"),XJe=o("AlbertTokenizerFast"),zJe=o(" (ALBERT model)"),QJe=l(),Sn=a("li"),bre=a("strong"),WJe=o("bart"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("BartTokenizer"),JJe=o(" or "),ES=a("a"),YJe=o("BartTokenizerFast"),KJe=o(" (BART model)"),ZJe=l(),Rn=a("li"),vre=a("strong"),eYe=o("barthez"),oYe=o(" \u2014 "),CS=a("a"),rYe=o("BarthezTokenizer"),tYe=o(" or "),wS=a("a"),aYe=o("BarthezTokenizerFast"),nYe=o(" (BARThez model)"),sYe=l(),Bn=a("li"),Fre=a("strong"),lYe=o("bartpho"),iYe=o(" \u2014 "),AS=a("a"),dYe=o("BartphoTokenizer"),cYe=o(" or "),yS=a("a"),fYe=o("BartphoTokenizerFast"),mYe=o(" (BARTpho model)"),gYe=l(),Pn=a("li"),Tre=a("strong"),hYe=o("bert"),pYe=o(" \u2014 "),LS=a("a"),uYe=o("BertTokenizer"),_Ye=o(" or "),xS=a("a"),bYe=o("BertTokenizerFast"),vYe=o(" (BERT model)"),FYe=l(),Fg=a("li"),Mre=a("strong"),TYe=o("bert-generation"),MYe=o(" \u2014 "),$S=a("a"),EYe=o("BertGenerationTokenizer"),CYe=o(" (Bert Generation model)"),wYe=l(),Tg=a("li"),Ere=a("strong"),AYe=o("bert-japanese"),yYe=o(" \u2014 "),kS=a("a"),LYe=o("BertJapaneseTokenizer"),xYe=o(" (BertJapanese model)"),$Ye=l(),Mg=a("li"),Cre=a("strong"),kYe=o("bertweet"),SYe=o(" \u2014 "),SS=a("a"),RYe=o("BertweetTokenizer"),BYe=o(" (Bertweet model)"),PYe=l(),In=a("li"),wre=a("strong"),IYe=o("big_bird"),qYe=o(" \u2014 "),RS=a("a"),NYe=o("BigBirdTokenizer"),jYe=o(" or "),BS=a("a"),DYe=o("BigBirdTokenizerFast"),GYe=o(" (BigBird model)"),OYe=l(),qn=a("li"),Are=a("strong"),VYe=o("bigbird_pegasus"),XYe=o(" \u2014 "),PS=a("a"),zYe=o("PegasusTokenizer"),QYe=o(" or "),IS=a("a"),WYe=o("PegasusTokenizerFast"),HYe=o(" (BigBirdPegasus model)"),UYe=l(),Nn=a("li"),yre=a("strong"),JYe=o("blenderbot"),YYe=o(" \u2014 "),qS=a("a"),KYe=o("BlenderbotTokenizer"),ZYe=o(" or "),NS=a("a"),eKe=o("BlenderbotTokenizerFast"),oKe=o(" (Blenderbot model)"),rKe=l(),Eg=a("li"),Lre=a("strong"),tKe=o("blenderbot-small"),aKe=o(" \u2014 "),jS=a("a"),nKe=o("BlenderbotSmallTokenizer"),sKe=o(" (BlenderbotSmall model)"),lKe=l(),Cg=a("li"),xre=a("strong"),iKe=o("byt5"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("ByT5Tokenizer"),fKe=o(" (ByT5 model)"),mKe=l(),jn=a("li"),$re=a("strong"),gKe=o("camembert"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("CamembertTokenizer"),uKe=o(" or "),OS=a("a"),_Ke=o("CamembertTokenizerFast"),bKe=o(" (CamemBERT model)"),vKe=l(),wg=a("li"),kre=a("strong"),FKe=o("canine"),TKe=o(" \u2014 "),VS=a("a"),MKe=o("CanineTokenizer"),EKe=o(" (Canine model)"),CKe=l(),Dn=a("li"),Sre=a("strong"),wKe=o("clip"),AKe=o(" \u2014 "),XS=a("a"),yKe=o("CLIPTokenizer"),LKe=o(" or "),zS=a("a"),xKe=o("CLIPTokenizerFast"),$Ke=o(" (CLIP model)"),kKe=l(),Gn=a("li"),Rre=a("strong"),SKe=o("convbert"),RKe=o(" \u2014 "),QS=a("a"),BKe=o("ConvBertTokenizer"),PKe=o(" or "),WS=a("a"),IKe=o("ConvBertTokenizerFast"),qKe=o(" (ConvBERT model)"),NKe=l(),On=a("li"),Bre=a("strong"),jKe=o("cpm"),DKe=o(" \u2014 "),HS=a("a"),GKe=o("CpmTokenizer"),OKe=o(" or "),US=a("a"),VKe=o("CpmTokenizerFast"),XKe=o(" (CPM model)"),zKe=l(),Ag=a("li"),Pre=a("strong"),QKe=o("ctrl"),WKe=o(" \u2014 "),JS=a("a"),HKe=o("CTRLTokenizer"),UKe=o(" (CTRL model)"),JKe=l(),Vn=a("li"),Ire=a("strong"),YKe=o("data2vec-text"),KKe=o(" \u2014 "),YS=a("a"),ZKe=o("RobertaTokenizer"),eZe=o(" or "),KS=a("a"),oZe=o("RobertaTokenizerFast"),rZe=o(" (Data2VecText model)"),tZe=l(),Xn=a("li"),qre=a("strong"),aZe=o("deberta"),nZe=o(" \u2014 "),ZS=a("a"),sZe=o("DebertaTokenizer"),lZe=o(" or "),eR=a("a"),iZe=o("DebertaTokenizerFast"),dZe=o(" (DeBERTa model)"),cZe=l(),zn=a("li"),Nre=a("strong"),fZe=o("deberta-v2"),mZe=o(" \u2014 "),oR=a("a"),gZe=o("DebertaV2Tokenizer"),hZe=o(" or "),rR=a("a"),pZe=o("DebertaV2TokenizerFast"),uZe=o(" (DeBERTa-v2 model)"),_Ze=l(),Qn=a("li"),jre=a("strong"),bZe=o("distilbert"),vZe=o(" \u2014 "),tR=a("a"),FZe=o("DistilBertTokenizer"),TZe=o(" or "),aR=a("a"),MZe=o("DistilBertTokenizerFast"),EZe=o(" (DistilBERT model)"),CZe=l(),Wn=a("li"),Dre=a("strong"),wZe=o("dpr"),AZe=o(" \u2014 "),nR=a("a"),yZe=o("DPRQuestionEncoderTokenizer"),LZe=o(" or "),sR=a("a"),xZe=o("DPRQuestionEncoderTokenizerFast"),$Ze=o(" (DPR model)"),kZe=l(),Hn=a("li"),Gre=a("strong"),SZe=o("electra"),RZe=o(" \u2014 "),lR=a("a"),BZe=o("ElectraTokenizer"),PZe=o(" or "),iR=a("a"),IZe=o("ElectraTokenizerFast"),qZe=o(" (ELECTRA model)"),NZe=l(),yg=a("li"),Ore=a("strong"),jZe=o("flaubert"),DZe=o(" \u2014 "),dR=a("a"),GZe=o("FlaubertTokenizer"),OZe=o(" (FlauBERT model)"),VZe=l(),Un=a("li"),Vre=a("strong"),XZe=o("fnet"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("FNetTokenizer"),WZe=o(" or "),fR=a("a"),HZe=o("FNetTokenizerFast"),UZe=o(" (FNet model)"),JZe=l(),Lg=a("li"),Xre=a("strong"),YZe=o("fsmt"),KZe=o(" \u2014 "),mR=a("a"),ZZe=o("FSMTTokenizer"),eeo=o(" (FairSeq Machine-Translation model)"),oeo=l(),Jn=a("li"),zre=a("strong"),reo=o("funnel"),teo=o(" \u2014 "),gR=a("a"),aeo=o("FunnelTokenizer"),neo=o(" or "),hR=a("a"),seo=o("FunnelTokenizerFast"),leo=o(" (Funnel Transformer model)"),ieo=l(),Yn=a("li"),Qre=a("strong"),deo=o("gpt2"),ceo=o(" \u2014 "),pR=a("a"),feo=o("GPT2Tokenizer"),meo=o(" or "),uR=a("a"),geo=o("GPT2TokenizerFast"),heo=o(" (OpenAI GPT-2 model)"),peo=l(),Kn=a("li"),Wre=a("strong"),ueo=o("gpt_neo"),_eo=o(" \u2014 "),_R=a("a"),beo=o("GPT2Tokenizer"),veo=o(" or "),bR=a("a"),Feo=o("GPT2TokenizerFast"),Teo=o(" (GPT Neo model)"),Meo=l(),Zn=a("li"),Hre=a("strong"),Eeo=o("gptj"),Ceo=o(" \u2014 "),vR=a("a"),weo=o("GPT2Tokenizer"),Aeo=o(" or "),FR=a("a"),yeo=o("GPT2TokenizerFast"),Leo=o(" (GPT-J model)"),xeo=l(),es=a("li"),Ure=a("strong"),$eo=o("herbert"),keo=o(" \u2014 "),TR=a("a"),Seo=o("HerbertTokenizer"),Reo=o(" or "),MR=a("a"),Beo=o("HerbertTokenizerFast"),Peo=o(" (HerBERT model)"),Ieo=l(),xg=a("li"),Jre=a("strong"),qeo=o("hubert"),Neo=o(" \u2014 "),ER=a("a"),jeo=o("Wav2Vec2CTCTokenizer"),Deo=o(" (Hubert model)"),Geo=l(),os=a("li"),Yre=a("strong"),Oeo=o("ibert"),Veo=o(" \u2014 "),CR=a("a"),Xeo=o("RobertaTokenizer"),zeo=o(" or "),wR=a("a"),Qeo=o("RobertaTokenizerFast"),Weo=o(" (I-BERT model)"),Heo=l(),rs=a("li"),Kre=a("strong"),Ueo=o("layoutlm"),Jeo=o(" \u2014 "),AR=a("a"),Yeo=o("LayoutLMTokenizer"),Keo=o(" or "),yR=a("a"),Zeo=o("LayoutLMTokenizerFast"),eoo=o(" (LayoutLM model)"),ooo=l(),ts=a("li"),Zre=a("strong"),roo=o("layoutlmv2"),too=o(" \u2014 "),LR=a("a"),aoo=o("LayoutLMv2Tokenizer"),noo=o(" or "),xR=a("a"),soo=o("LayoutLMv2TokenizerFast"),loo=o(" (LayoutLMv2 model)"),ioo=l(),as=a("li"),ete=a("strong"),doo=o("layoutxlm"),coo=o(" \u2014 "),$R=a("a"),foo=o("LayoutXLMTokenizer"),moo=o(" or "),kR=a("a"),goo=o("LayoutXLMTokenizerFast"),hoo=o(" (LayoutXLM model)"),poo=l(),ns=a("li"),ote=a("strong"),uoo=o("led"),_oo=o(" \u2014 "),SR=a("a"),boo=o("LEDTokenizer"),voo=o(" or "),RR=a("a"),Foo=o("LEDTokenizerFast"),Too=o(" (LED model)"),Moo=l(),ss=a("li"),rte=a("strong"),Eoo=o("longformer"),Coo=o(" \u2014 "),BR=a("a"),woo=o("LongformerTokenizer"),Aoo=o(" or "),PR=a("a"),yoo=o("LongformerTokenizerFast"),Loo=o(" (Longformer model)"),xoo=l(),$g=a("li"),tte=a("strong"),$oo=o("luke"),koo=o(" \u2014 "),IR=a("a"),Soo=o("LukeTokenizer"),Roo=o(" (LUKE model)"),Boo=l(),ls=a("li"),ate=a("strong"),Poo=o("lxmert"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("LxmertTokenizer"),Noo=o(" or "),NR=a("a"),joo=o("LxmertTokenizerFast"),Doo=o(" (LXMERT model)"),Goo=l(),kg=a("li"),nte=a("strong"),Ooo=o("m2m_100"),Voo=o(" \u2014 "),jR=a("a"),Xoo=o("M2M100Tokenizer"),zoo=o(" (M2M100 model)"),Qoo=l(),Sg=a("li"),ste=a("strong"),Woo=o("marian"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("MarianTokenizer"),Joo=o(" (Marian model)"),Yoo=l(),is=a("li"),lte=a("strong"),Koo=o("mbart"),Zoo=o(" \u2014 "),GR=a("a"),ero=o("MBartTokenizer"),oro=o(" or "),OR=a("a"),rro=o("MBartTokenizerFast"),tro=o(" (mBART model)"),aro=l(),ds=a("li"),ite=a("strong"),nro=o("mbart50"),sro=o(" \u2014 "),VR=a("a"),lro=o("MBart50Tokenizer"),iro=o(" or "),XR=a("a"),dro=o("MBart50TokenizerFast"),cro=o(" (mBART-50 model)"),fro=l(),cs=a("li"),dte=a("strong"),mro=o("megatron-bert"),gro=o(" \u2014 "),zR=a("a"),hro=o("BertTokenizer"),pro=o(" or "),QR=a("a"),uro=o("BertTokenizerFast"),_ro=o(" (MegatronBert model)"),bro=l(),Rg=a("li"),cte=a("strong"),vro=o("mluke"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("MLukeTokenizer"),Mro=o(" (mLUKE model)"),Ero=l(),fs=a("li"),fte=a("strong"),Cro=o("mobilebert"),wro=o(" \u2014 "),HR=a("a"),Aro=o("MobileBertTokenizer"),yro=o(" or "),UR=a("a"),Lro=o("MobileBertTokenizerFast"),xro=o(" (MobileBERT model)"),$ro=l(),ms=a("li"),mte=a("strong"),kro=o("mpnet"),Sro=o(" \u2014 "),JR=a("a"),Rro=o("MPNetTokenizer"),Bro=o(" or "),YR=a("a"),Pro=o("MPNetTokenizerFast"),Iro=o(" (MPNet model)"),qro=l(),gs=a("li"),gte=a("strong"),Nro=o("mt5"),jro=o(" \u2014 "),KR=a("a"),Dro=o("MT5Tokenizer"),Gro=o(" or "),ZR=a("a"),Oro=o("MT5TokenizerFast"),Vro=o(" (mT5 model)"),Xro=l(),hs=a("li"),hte=a("strong"),zro=o("nystromformer"),Qro=o(" \u2014 "),eB=a("a"),Wro=o("AlbertTokenizer"),Hro=o(" or "),oB=a("a"),Uro=o("AlbertTokenizerFast"),Jro=o(" (Nystromformer model)"),Yro=l(),ps=a("li"),pte=a("strong"),Kro=o("openai-gpt"),Zro=o(" \u2014 "),rB=a("a"),eto=o("OpenAIGPTTokenizer"),oto=o(" or "),tB=a("a"),rto=o("OpenAIGPTTokenizerFast"),tto=o(" (OpenAI GPT model)"),ato=l(),Bg=a("li"),ute=a("strong"),nto=o("opt"),sto=o(" \u2014 "),aB=a("a"),lto=o("GPT2Tokenizer"),ito=o(" (OPT model)"),dto=l(),us=a("li"),_te=a("strong"),cto=o("pegasus"),fto=o(" \u2014 "),nB=a("a"),mto=o("PegasusTokenizer"),gto=o(" or "),sB=a("a"),hto=o("PegasusTokenizerFast"),pto=o(" (Pegasus model)"),uto=l(),Pg=a("li"),bte=a("strong"),_to=o("perceiver"),bto=o(" \u2014 "),lB=a("a"),vto=o("PerceiverTokenizer"),Fto=o(" (Perceiver model)"),Tto=l(),Ig=a("li"),vte=a("strong"),Mto=o("phobert"),Eto=o(" \u2014 "),iB=a("a"),Cto=o("PhobertTokenizer"),wto=o(" (PhoBERT model)"),Ato=l(),qg=a("li"),Fte=a("strong"),yto=o("plbart"),Lto=o(" \u2014 "),dB=a("a"),xto=o("PLBartTokenizer"),$to=o(" (PLBart model)"),kto=l(),Ng=a("li"),Tte=a("strong"),Sto=o("prophetnet"),Rto=o(" \u2014 "),cB=a("a"),Bto=o("ProphetNetTokenizer"),Pto=o(" (ProphetNet model)"),Ito=l(),_s=a("li"),Mte=a("strong"),qto=o("qdqbert"),Nto=o(" \u2014 "),fB=a("a"),jto=o("BertTokenizer"),Dto=o(" or "),mB=a("a"),Gto=o("BertTokenizerFast"),Oto=o(" (QDQBert model)"),Vto=l(),jg=a("li"),Ete=a("strong"),Xto=o("rag"),zto=o(" \u2014 "),gB=a("a"),Qto=o("RagTokenizer"),Wto=o(" (RAG model)"),Hto=l(),bs=a("li"),Cte=a("strong"),Uto=o("realm"),Jto=o(" \u2014 "),hB=a("a"),Yto=o("RealmTokenizer"),Kto=o(" or "),pB=a("a"),Zto=o("RealmTokenizerFast"),eao=o(" (Realm model)"),oao=l(),vs=a("li"),wte=a("strong"),rao=o("reformer"),tao=o(" \u2014 "),uB=a("a"),aao=o("ReformerTokenizer"),nao=o(" or "),_B=a("a"),sao=o("ReformerTokenizerFast"),lao=o(" (Reformer model)"),iao=l(),Fs=a("li"),Ate=a("strong"),dao=o("rembert"),cao=o(" \u2014 "),bB=a("a"),fao=o("RemBertTokenizer"),mao=o(" or "),vB=a("a"),gao=o("RemBertTokenizerFast"),hao=o(" (RemBERT model)"),pao=l(),Ts=a("li"),yte=a("strong"),uao=o("retribert"),_ao=o(" \u2014 "),FB=a("a"),bao=o("RetriBertTokenizer"),vao=o(" or "),TB=a("a"),Fao=o("RetriBertTokenizerFast"),Tao=o(" (RetriBERT model)"),Mao=l(),Ms=a("li"),Lte=a("strong"),Eao=o("roberta"),Cao=o(" \u2014 "),MB=a("a"),wao=o("RobertaTokenizer"),Aao=o(" or "),EB=a("a"),yao=o("RobertaTokenizerFast"),Lao=o(" (RoBERTa model)"),xao=l(),Es=a("li"),xte=a("strong"),$ao=o("roformer"),kao=o(" \u2014 "),CB=a("a"),Sao=o("RoFormerTokenizer"),Rao=o(" or "),wB=a("a"),Bao=o("RoFormerTokenizerFast"),Pao=o(" (RoFormer model)"),Iao=l(),Dg=a("li"),$te=a("strong"),qao=o("speech_to_text"),Nao=o(" \u2014 "),AB=a("a"),jao=o("Speech2TextTokenizer"),Dao=o(" (Speech2Text model)"),Gao=l(),Gg=a("li"),kte=a("strong"),Oao=o("speech_to_text_2"),Vao=o(" \u2014 "),yB=a("a"),Xao=o("Speech2Text2Tokenizer"),zao=o(" (Speech2Text2 model)"),Qao=l(),Cs=a("li"),Ste=a("strong"),Wao=o("splinter"),Hao=o(" \u2014 "),LB=a("a"),Uao=o("SplinterTokenizer"),Jao=o(" or "),xB=a("a"),Yao=o("SplinterTokenizerFast"),Kao=o(" (Splinter model)"),Zao=l(),ws=a("li"),Rte=a("strong"),eno=o("squeezebert"),ono=o(" \u2014 "),$B=a("a"),rno=o("SqueezeBertTokenizer"),tno=o(" or "),kB=a("a"),ano=o("SqueezeBertTokenizerFast"),nno=o(" (SqueezeBERT model)"),sno=l(),As=a("li"),Bte=a("strong"),lno=o("t5"),ino=o(" \u2014 "),SB=a("a"),dno=o("T5Tokenizer"),cno=o(" or "),RB=a("a"),fno=o("T5TokenizerFast"),mno=o(" (T5 model)"),gno=l(),Og=a("li"),Pte=a("strong"),hno=o("tapas"),pno=o(" \u2014 "),BB=a("a"),uno=o("TapasTokenizer"),_no=o(" (TAPAS model)"),bno=l(),Vg=a("li"),Ite=a("strong"),vno=o("tapex"),Fno=o(" \u2014 "),PB=a("a"),Tno=o("TapexTokenizer"),Mno=o(" (TAPEX model)"),Eno=l(),Xg=a("li"),qte=a("strong"),Cno=o("transfo-xl"),wno=o(" \u2014 "),IB=a("a"),Ano=o("TransfoXLTokenizer"),yno=o(" (Transformer-XL model)"),Lno=l(),ys=a("li"),Nte=a("strong"),xno=o("visual_bert"),$no=o(" \u2014 "),qB=a("a"),kno=o("BertTokenizer"),Sno=o(" or "),NB=a("a"),Rno=o("BertTokenizerFast"),Bno=o(" (VisualBert model)"),Pno=l(),zg=a("li"),jte=a("strong"),Ino=o("wav2vec2"),qno=o(" \u2014 "),jB=a("a"),Nno=o("Wav2Vec2CTCTokenizer"),jno=o(" (Wav2Vec2 model)"),Dno=l(),Qg=a("li"),Dte=a("strong"),Gno=o("wav2vec2_phoneme"),Ono=o(" \u2014 "),DB=a("a"),Vno=o("Wav2Vec2PhonemeCTCTokenizer"),Xno=o(" (Wav2Vec2Phoneme model)"),zno=l(),Ls=a("li"),Gte=a("strong"),Qno=o("xglm"),Wno=o(" \u2014 "),GB=a("a"),Hno=o("XGLMTokenizer"),Uno=o(" or "),OB=a("a"),Jno=o("XGLMTokenizerFast"),Yno=o(" (XGLM model)"),Kno=l(),Wg=a("li"),Ote=a("strong"),Zno=o("xlm"),eso=o(" \u2014 "),VB=a("a"),oso=o("XLMTokenizer"),rso=o(" (XLM model)"),tso=l(),Hg=a("li"),Vte=a("strong"),aso=o("xlm-prophetnet"),nso=o(" \u2014 "),XB=a("a"),sso=o("XLMProphetNetTokenizer"),lso=o(" (XLMProphetNet model)"),iso=l(),xs=a("li"),Xte=a("strong"),dso=o("xlm-roberta"),cso=o(" \u2014 "),zB=a("a"),fso=o("XLMRobertaTokenizer"),mso=o(" or "),QB=a("a"),gso=o("XLMRobertaTokenizerFast"),hso=o(" (XLM-RoBERTa model)"),pso=l(),$s=a("li"),zte=a("strong"),uso=o("xlm-roberta-xl"),_so=o(" \u2014 "),WB=a("a"),bso=o("RobertaTokenizer"),vso=o(" or "),HB=a("a"),Fso=o("RobertaTokenizerFast"),Tso=o(" (XLM-RoBERTa-XL model)"),Mso=l(),ks=a("li"),Qte=a("strong"),Eso=o("xlnet"),Cso=o(" \u2014 "),UB=a("a"),wso=o("XLNetTokenizer"),Aso=o(" or "),JB=a("a"),yso=o("XLNetTokenizerFast"),Lso=o(" (XLNet model)"),xso=l(),Ss=a("li"),Wte=a("strong"),$so=o("yoso"),kso=o(" \u2014 "),YB=a("a"),Sso=o("AlbertTokenizer"),Rso=o(" or "),KB=a("a"),Bso=o("AlbertTokenizerFast"),Pso=o(" (YOSO model)"),Iso=l(),F(Ug.$$.fragment),qso=l(),Jg=a("div"),F(c0.$$.fragment),Nso=l(),Hte=a("p"),jso=o("Register a new tokenizer in this mapping."),ZPe=l(),vi=a("h2"),Yg=a("a"),Ute=a("span"),F(f0.$$.fragment),Dso=l(),Jte=a("span"),Gso=o("AutoFeatureExtractor"),eIe=l(),Ao=a("div"),F(m0.$$.fragment),Oso=l(),g0=a("p"),Vso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZB=a("a"),Xso=o("AutoFeatureExtractor.from_pretrained()"),zso=o(" class method."),Qso=l(),h0=a("p"),Wso=o("This class cannot be instantiated directly using "),Yte=a("code"),Hso=o("__init__()"),Uso=o(" (throws an error)."),Jso=l(),Qe=a("div"),F(p0.$$.fragment),Yso=l(),Kte=a("p"),Kso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zso=l(),wa=a("p"),elo=o("The feature extractor class to instantiate is selected based on the "),Zte=a("code"),olo=o("model_type"),rlo=o(` property of the config object
(either passed as an argument or loaded from `),eae=a("code"),tlo=o("pretrained_model_name_or_path"),alo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oae=a("code"),nlo=o("pretrained_model_name_or_path"),slo=o(":"),llo=l(),oe=a("ul"),Kg=a("li"),rae=a("strong"),ilo=o("beit"),dlo=o(" \u2014 "),eP=a("a"),clo=o("BeitFeatureExtractor"),flo=o(" (BEiT model)"),mlo=l(),Zg=a("li"),tae=a("strong"),glo=o("clip"),hlo=o(" \u2014 "),oP=a("a"),plo=o("CLIPFeatureExtractor"),ulo=o(" (CLIP model)"),_lo=l(),eh=a("li"),aae=a("strong"),blo=o("convnext"),vlo=o(" \u2014 "),rP=a("a"),Flo=o("ConvNextFeatureExtractor"),Tlo=o(" (ConvNext model)"),Mlo=l(),oh=a("li"),nae=a("strong"),Elo=o("data2vec-audio"),Clo=o(" \u2014 "),tP=a("a"),wlo=o("Wav2Vec2FeatureExtractor"),Alo=o(" (Data2VecAudio model)"),ylo=l(),rh=a("li"),sae=a("strong"),Llo=o("data2vec-vision"),xlo=o(" \u2014 "),aP=a("a"),$lo=o("BeitFeatureExtractor"),klo=o(" (Data2VecVision model)"),Slo=l(),th=a("li"),lae=a("strong"),Rlo=o("deit"),Blo=o(" \u2014 "),nP=a("a"),Plo=o("DeiTFeatureExtractor"),Ilo=o(" (DeiT model)"),qlo=l(),ah=a("li"),iae=a("strong"),Nlo=o("detr"),jlo=o(" \u2014 "),sP=a("a"),Dlo=o("DetrFeatureExtractor"),Glo=o(" (DETR model)"),Olo=l(),nh=a("li"),dae=a("strong"),Vlo=o("dpt"),Xlo=o(" \u2014 "),lP=a("a"),zlo=o("DPTFeatureExtractor"),Qlo=o(" (DPT model)"),Wlo=l(),sh=a("li"),cae=a("strong"),Hlo=o("flava"),Ulo=o(" \u2014 "),iP=a("a"),Jlo=o("FlavaFeatureExtractor"),Ylo=o(" (Flava model)"),Klo=l(),lh=a("li"),fae=a("strong"),Zlo=o("glpn"),eio=o(" \u2014 "),dP=a("a"),oio=o("GLPNFeatureExtractor"),rio=o(" (GLPN model)"),tio=l(),ih=a("li"),mae=a("strong"),aio=o("hubert"),nio=o(" \u2014 "),cP=a("a"),sio=o("Wav2Vec2FeatureExtractor"),lio=o(" (Hubert model)"),iio=l(),dh=a("li"),gae=a("strong"),dio=o("layoutlmv2"),cio=o(" \u2014 "),fP=a("a"),fio=o("LayoutLMv2FeatureExtractor"),mio=o(" (LayoutLMv2 model)"),gio=l(),ch=a("li"),hae=a("strong"),hio=o("maskformer"),pio=o(" \u2014 "),mP=a("a"),uio=o("MaskFormerFeatureExtractor"),_io=o(" (MaskFormer model)"),bio=l(),fh=a("li"),pae=a("strong"),vio=o("perceiver"),Fio=o(" \u2014 "),gP=a("a"),Tio=o("PerceiverFeatureExtractor"),Mio=o(" (Perceiver model)"),Eio=l(),mh=a("li"),uae=a("strong"),Cio=o("poolformer"),wio=o(" \u2014 "),hP=a("a"),Aio=o("PoolFormerFeatureExtractor"),yio=o(" (PoolFormer model)"),Lio=l(),gh=a("li"),_ae=a("strong"),xio=o("regnet"),$io=o(" \u2014 "),pP=a("a"),kio=o("ConvNextFeatureExtractor"),Sio=o(" (RegNet model)"),Rio=l(),hh=a("li"),bae=a("strong"),Bio=o("resnet"),Pio=o(" \u2014 "),uP=a("a"),Iio=o("ConvNextFeatureExtractor"),qio=o(" (ResNet model)"),Nio=l(),ph=a("li"),vae=a("strong"),jio=o("segformer"),Dio=o(" \u2014 "),_P=a("a"),Gio=o("SegformerFeatureExtractor"),Oio=o(" (SegFormer model)"),Vio=l(),uh=a("li"),Fae=a("strong"),Xio=o("speech_to_text"),zio=o(" \u2014 "),bP=a("a"),Qio=o("Speech2TextFeatureExtractor"),Wio=o(" (Speech2Text model)"),Hio=l(),_h=a("li"),Tae=a("strong"),Uio=o("swin"),Jio=o(" \u2014 "),vP=a("a"),Yio=o("ViTFeatureExtractor"),Kio=o(" (Swin model)"),Zio=l(),bh=a("li"),Mae=a("strong"),edo=o("van"),odo=o(" \u2014 "),FP=a("a"),rdo=o("ConvNextFeatureExtractor"),tdo=o(" (VAN model)"),ado=l(),vh=a("li"),Eae=a("strong"),ndo=o("vit"),sdo=o(" \u2014 "),TP=a("a"),ldo=o("ViTFeatureExtractor"),ido=o(" (ViT model)"),ddo=l(),Fh=a("li"),Cae=a("strong"),cdo=o("vit_mae"),fdo=o(" \u2014 "),MP=a("a"),mdo=o("ViTFeatureExtractor"),gdo=o(" (ViTMAE model)"),hdo=l(),Th=a("li"),wae=a("strong"),pdo=o("wav2vec2"),udo=o(" \u2014 "),EP=a("a"),_do=o("Wav2Vec2FeatureExtractor"),bdo=o(" (Wav2Vec2 model)"),vdo=l(),Mh=a("li"),Aae=a("strong"),Fdo=o("yolos"),Tdo=o(" \u2014 "),CP=a("a"),Mdo=o("YolosFeatureExtractor"),Edo=o(" (YOLOS model)"),Cdo=l(),F(Eh.$$.fragment),wdo=l(),F(Ch.$$.fragment),Ado=l(),wh=a("div"),F(u0.$$.fragment),ydo=l(),yae=a("p"),Ldo=o("Register a new feature extractor for this class."),oIe=l(),Fi=a("h2"),Ah=a("a"),Lae=a("span"),F(_0.$$.fragment),xdo=l(),xae=a("span"),$do=o("AutoProcessor"),rIe=l(),yo=a("div"),F(b0.$$.fragment),kdo=l(),v0=a("p"),Sdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wP=a("a"),Rdo=o("AutoProcessor.from_pretrained()"),Bdo=o(" class method."),Pdo=l(),F0=a("p"),Ido=o("This class cannot be instantiated directly using "),$ae=a("code"),qdo=o("__init__()"),Ndo=o(" (throws an error)."),jdo=l(),We=a("div"),F(T0.$$.fragment),Ddo=l(),kae=a("p"),Gdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Odo=l(),Ti=a("p"),Vdo=o("The processor class to instantiate is selected based on the "),Sae=a("code"),Xdo=o("model_type"),zdo=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),Qdo=o("pretrained_model_name_or_path"),Wdo=o(" if possible):"),Hdo=l(),be=a("ul"),yh=a("li"),Bae=a("strong"),Udo=o("clip"),Jdo=o(" \u2014 "),AP=a("a"),Ydo=o("CLIPProcessor"),Kdo=o(" (CLIP model)"),Zdo=l(),Lh=a("li"),Pae=a("strong"),eco=o("flava"),oco=o(" \u2014 "),Iae=a("code"),rco=o("FLAVAProcessor"),tco=o(" (Flava model)"),aco=l(),xh=a("li"),qae=a("strong"),nco=o("layoutlmv2"),sco=o(" \u2014 "),yP=a("a"),lco=o("LayoutLMv2Processor"),ico=o(" (LayoutLMv2 model)"),dco=l(),$h=a("li"),Nae=a("strong"),cco=o("layoutxlm"),fco=o(" \u2014 "),LP=a("a"),mco=o("LayoutXLMProcessor"),gco=o(" (LayoutXLM model)"),hco=l(),kh=a("li"),jae=a("strong"),pco=o("sew"),uco=o(" \u2014 "),xP=a("a"),_co=o("Wav2Vec2Processor"),bco=o(" (SEW model)"),vco=l(),Sh=a("li"),Dae=a("strong"),Fco=o("sew-d"),Tco=o(" \u2014 "),$P=a("a"),Mco=o("Wav2Vec2Processor"),Eco=o(" (SEW-D model)"),Cco=l(),Rh=a("li"),Gae=a("strong"),wco=o("speech_to_text"),Aco=o(" \u2014 "),kP=a("a"),yco=o("Speech2TextProcessor"),Lco=o(" (Speech2Text model)"),xco=l(),Bh=a("li"),Oae=a("strong"),$co=o("speech_to_text_2"),kco=o(" \u2014 "),SP=a("a"),Sco=o("Speech2Text2Processor"),Rco=o(" (Speech2Text2 model)"),Bco=l(),Ph=a("li"),Vae=a("strong"),Pco=o("trocr"),Ico=o(" \u2014 "),RP=a("a"),qco=o("TrOCRProcessor"),Nco=o(" (TrOCR model)"),jco=l(),Ih=a("li"),Xae=a("strong"),Dco=o("unispeech"),Gco=o(" \u2014 "),BP=a("a"),Oco=o("Wav2Vec2Processor"),Vco=o(" (UniSpeech model)"),Xco=l(),qh=a("li"),zae=a("strong"),zco=o("unispeech-sat"),Qco=o(" \u2014 "),PP=a("a"),Wco=o("Wav2Vec2Processor"),Hco=o(" (UniSpeechSat model)"),Uco=l(),Nh=a("li"),Qae=a("strong"),Jco=o("vilt"),Yco=o(" \u2014 "),IP=a("a"),Kco=o("ViltProcessor"),Zco=o(" (ViLT model)"),efo=l(),jh=a("li"),Wae=a("strong"),ofo=o("vision-text-dual-encoder"),rfo=o(" \u2014 "),qP=a("a"),tfo=o("VisionTextDualEncoderProcessor"),afo=o(" (VisionTextDualEncoder model)"),nfo=l(),Dh=a("li"),Hae=a("strong"),sfo=o("wav2vec2"),lfo=o(" \u2014 "),NP=a("a"),ifo=o("Wav2Vec2Processor"),dfo=o(" (Wav2Vec2 model)"),cfo=l(),Gh=a("li"),Uae=a("strong"),ffo=o("wavlm"),mfo=o(" \u2014 "),jP=a("a"),gfo=o("Wav2Vec2Processor"),hfo=o(" (WavLM model)"),pfo=l(),F(Oh.$$.fragment),ufo=l(),F(Vh.$$.fragment),_fo=l(),Xh=a("div"),F(M0.$$.fragment),bfo=l(),Jae=a("p"),vfo=o("Register a new processor for this class."),tIe=l(),Mi=a("h2"),zh=a("a"),Yae=a("span"),F(E0.$$.fragment),Ffo=l(),Kae=a("span"),Tfo=o("AutoModel"),aIe=l(),Lo=a("div"),F(C0.$$.fragment),Mfo=l(),Ei=a("p"),Efo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DP=a("a"),Cfo=o("from_pretrained()"),wfo=o(" class method or the "),GP=a("a"),Afo=o("from_config()"),yfo=o(` class
method.`),Lfo=l(),w0=a("p"),xfo=o("This class cannot be instantiated directly using "),Zae=a("code"),$fo=o("__init__()"),kfo=o(" (throws an error)."),Sfo=l(),ot=a("div"),F(A0.$$.fragment),Rfo=l(),ene=a("p"),Bfo=o("Instantiates one of the base model classes of the library from a configuration."),Pfo=l(),Ci=a("p"),Ifo=o(`Note:
Loading a model from its configuration file does `),one=a("strong"),qfo=o("not"),Nfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OP=a("a"),jfo=o("from_pretrained()"),Dfo=o(" to load the model weights."),Gfo=l(),F(Qh.$$.fragment),Ofo=l(),He=a("div"),F(y0.$$.fragment),Vfo=l(),rne=a("p"),Xfo=o("Instantiate one of the base model classes of the library from a pretrained model."),zfo=l(),Aa=a("p"),Qfo=o("The model class to instantiate is selected based on the "),tne=a("code"),Wfo=o("model_type"),Hfo=o(` property of the config object (either
passed as an argument or loaded from `),ane=a("code"),Ufo=o("pretrained_model_name_or_path"),Jfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=a("code"),Yfo=o("pretrained_model_name_or_path"),Kfo=o(":"),Zfo=l(),x=a("ul"),Wh=a("li"),sne=a("strong"),emo=o("albert"),omo=o(" \u2014 "),VP=a("a"),rmo=o("AlbertModel"),tmo=o(" (ALBERT model)"),amo=l(),Hh=a("li"),lne=a("strong"),nmo=o("bart"),smo=o(" \u2014 "),XP=a("a"),lmo=o("BartModel"),imo=o(" (BART model)"),dmo=l(),Uh=a("li"),ine=a("strong"),cmo=o("beit"),fmo=o(" \u2014 "),zP=a("a"),mmo=o("BeitModel"),gmo=o(" (BEiT model)"),hmo=l(),Jh=a("li"),dne=a("strong"),pmo=o("bert"),umo=o(" \u2014 "),QP=a("a"),_mo=o("BertModel"),bmo=o(" (BERT model)"),vmo=l(),Yh=a("li"),cne=a("strong"),Fmo=o("bert-generation"),Tmo=o(" \u2014 "),WP=a("a"),Mmo=o("BertGenerationEncoder"),Emo=o(" (Bert Generation model)"),Cmo=l(),Kh=a("li"),fne=a("strong"),wmo=o("big_bird"),Amo=o(" \u2014 "),HP=a("a"),ymo=o("BigBirdModel"),Lmo=o(" (BigBird model)"),xmo=l(),Zh=a("li"),mne=a("strong"),$mo=o("bigbird_pegasus"),kmo=o(" \u2014 "),UP=a("a"),Smo=o("BigBirdPegasusModel"),Rmo=o(" (BigBirdPegasus model)"),Bmo=l(),ep=a("li"),gne=a("strong"),Pmo=o("blenderbot"),Imo=o(" \u2014 "),JP=a("a"),qmo=o("BlenderbotModel"),Nmo=o(" (Blenderbot model)"),jmo=l(),op=a("li"),hne=a("strong"),Dmo=o("blenderbot-small"),Gmo=o(" \u2014 "),YP=a("a"),Omo=o("BlenderbotSmallModel"),Vmo=o(" (BlenderbotSmall model)"),Xmo=l(),rp=a("li"),pne=a("strong"),zmo=o("camembert"),Qmo=o(" \u2014 "),KP=a("a"),Wmo=o("CamembertModel"),Hmo=o(" (CamemBERT model)"),Umo=l(),tp=a("li"),une=a("strong"),Jmo=o("canine"),Ymo=o(" \u2014 "),ZP=a("a"),Kmo=o("CanineModel"),Zmo=o(" (Canine model)"),ego=l(),ap=a("li"),_ne=a("strong"),ogo=o("clip"),rgo=o(" \u2014 "),eI=a("a"),tgo=o("CLIPModel"),ago=o(" (CLIP model)"),ngo=l(),np=a("li"),bne=a("strong"),sgo=o("convbert"),lgo=o(" \u2014 "),oI=a("a"),igo=o("ConvBertModel"),dgo=o(" (ConvBERT model)"),cgo=l(),sp=a("li"),vne=a("strong"),fgo=o("convnext"),mgo=o(" \u2014 "),rI=a("a"),ggo=o("ConvNextModel"),hgo=o(" (ConvNext model)"),pgo=l(),lp=a("li"),Fne=a("strong"),ugo=o("ctrl"),_go=o(" \u2014 "),tI=a("a"),bgo=o("CTRLModel"),vgo=o(" (CTRL model)"),Fgo=l(),ip=a("li"),Tne=a("strong"),Tgo=o("data2vec-audio"),Mgo=o(" \u2014 "),aI=a("a"),Ego=o("Data2VecAudioModel"),Cgo=o(" (Data2VecAudio model)"),wgo=l(),dp=a("li"),Mne=a("strong"),Ago=o("data2vec-text"),ygo=o(" \u2014 "),nI=a("a"),Lgo=o("Data2VecTextModel"),xgo=o(" (Data2VecText model)"),$go=l(),cp=a("li"),Ene=a("strong"),kgo=o("data2vec-vision"),Sgo=o(" \u2014 "),sI=a("a"),Rgo=o("Data2VecVisionModel"),Bgo=o(" (Data2VecVision model)"),Pgo=l(),fp=a("li"),Cne=a("strong"),Igo=o("deberta"),qgo=o(" \u2014 "),lI=a("a"),Ngo=o("DebertaModel"),jgo=o(" (DeBERTa model)"),Dgo=l(),mp=a("li"),wne=a("strong"),Ggo=o("deberta-v2"),Ogo=o(" \u2014 "),iI=a("a"),Vgo=o("DebertaV2Model"),Xgo=o(" (DeBERTa-v2 model)"),zgo=l(),gp=a("li"),Ane=a("strong"),Qgo=o("decision_transformer"),Wgo=o(" \u2014 "),dI=a("a"),Hgo=o("DecisionTransformerModel"),Ugo=o(" (Decision Transformer model)"),Jgo=l(),hp=a("li"),yne=a("strong"),Ygo=o("deit"),Kgo=o(" \u2014 "),cI=a("a"),Zgo=o("DeiTModel"),eho=o(" (DeiT model)"),oho=l(),pp=a("li"),Lne=a("strong"),rho=o("detr"),tho=o(" \u2014 "),fI=a("a"),aho=o("DetrModel"),nho=o(" (DETR model)"),sho=l(),up=a("li"),xne=a("strong"),lho=o("distilbert"),iho=o(" \u2014 "),mI=a("a"),dho=o("DistilBertModel"),cho=o(" (DistilBERT model)"),fho=l(),_p=a("li"),$ne=a("strong"),mho=o("dpr"),gho=o(" \u2014 "),gI=a("a"),hho=o("DPRQuestionEncoder"),pho=o(" (DPR model)"),uho=l(),bp=a("li"),kne=a("strong"),_ho=o("dpt"),bho=o(" \u2014 "),hI=a("a"),vho=o("DPTModel"),Fho=o(" (DPT model)"),Tho=l(),vp=a("li"),Sne=a("strong"),Mho=o("electra"),Eho=o(" \u2014 "),pI=a("a"),Cho=o("ElectraModel"),who=o(" (ELECTRA model)"),Aho=l(),Fp=a("li"),Rne=a("strong"),yho=o("flaubert"),Lho=o(" \u2014 "),uI=a("a"),xho=o("FlaubertModel"),$ho=o(" (FlauBERT model)"),kho=l(),Tp=a("li"),Bne=a("strong"),Sho=o("flava"),Rho=o(" \u2014 "),_I=a("a"),Bho=o("FlavaModel"),Pho=o(" (Flava model)"),Iho=l(),Mp=a("li"),Pne=a("strong"),qho=o("fnet"),Nho=o(" \u2014 "),bI=a("a"),jho=o("FNetModel"),Dho=o(" (FNet model)"),Gho=l(),Ep=a("li"),Ine=a("strong"),Oho=o("fsmt"),Vho=o(" \u2014 "),vI=a("a"),Xho=o("FSMTModel"),zho=o(" (FairSeq Machine-Translation model)"),Qho=l(),Rs=a("li"),qne=a("strong"),Who=o("funnel"),Hho=o(" \u2014 "),FI=a("a"),Uho=o("FunnelModel"),Jho=o(" or "),TI=a("a"),Yho=o("FunnelBaseModel"),Kho=o(" (Funnel Transformer model)"),Zho=l(),Cp=a("li"),Nne=a("strong"),epo=o("glpn"),opo=o(" \u2014 "),MI=a("a"),rpo=o("GLPNModel"),tpo=o(" (GLPN model)"),apo=l(),wp=a("li"),jne=a("strong"),npo=o("gpt2"),spo=o(" \u2014 "),EI=a("a"),lpo=o("GPT2Model"),ipo=o(" (OpenAI GPT-2 model)"),dpo=l(),Ap=a("li"),Dne=a("strong"),cpo=o("gpt_neo"),fpo=o(" \u2014 "),CI=a("a"),mpo=o("GPTNeoModel"),gpo=o(" (GPT Neo model)"),hpo=l(),yp=a("li"),Gne=a("strong"),ppo=o("gptj"),upo=o(" \u2014 "),wI=a("a"),_po=o("GPTJModel"),bpo=o(" (GPT-J model)"),vpo=l(),Lp=a("li"),One=a("strong"),Fpo=o("hubert"),Tpo=o(" \u2014 "),AI=a("a"),Mpo=o("HubertModel"),Epo=o(" (Hubert model)"),Cpo=l(),xp=a("li"),Vne=a("strong"),wpo=o("ibert"),Apo=o(" \u2014 "),yI=a("a"),ypo=o("IBertModel"),Lpo=o(" (I-BERT model)"),xpo=l(),$p=a("li"),Xne=a("strong"),$po=o("imagegpt"),kpo=o(" \u2014 "),LI=a("a"),Spo=o("ImageGPTModel"),Rpo=o(" (ImageGPT model)"),Bpo=l(),kp=a("li"),zne=a("strong"),Ppo=o("layoutlm"),Ipo=o(" \u2014 "),xI=a("a"),qpo=o("LayoutLMModel"),Npo=o(" (LayoutLM model)"),jpo=l(),Sp=a("li"),Qne=a("strong"),Dpo=o("layoutlmv2"),Gpo=o(" \u2014 "),$I=a("a"),Opo=o("LayoutLMv2Model"),Vpo=o(" (LayoutLMv2 model)"),Xpo=l(),Rp=a("li"),Wne=a("strong"),zpo=o("led"),Qpo=o(" \u2014 "),kI=a("a"),Wpo=o("LEDModel"),Hpo=o(" (LED model)"),Upo=l(),Bp=a("li"),Hne=a("strong"),Jpo=o("longformer"),Ypo=o(" \u2014 "),SI=a("a"),Kpo=o("LongformerModel"),Zpo=o(" (Longformer model)"),euo=l(),Pp=a("li"),Une=a("strong"),ouo=o("luke"),ruo=o(" \u2014 "),RI=a("a"),tuo=o("LukeModel"),auo=o(" (LUKE model)"),nuo=l(),Ip=a("li"),Jne=a("strong"),suo=o("lxmert"),luo=o(" \u2014 "),BI=a("a"),iuo=o("LxmertModel"),duo=o(" (LXMERT model)"),cuo=l(),qp=a("li"),Yne=a("strong"),fuo=o("m2m_100"),muo=o(" \u2014 "),PI=a("a"),guo=o("M2M100Model"),huo=o(" (M2M100 model)"),puo=l(),Np=a("li"),Kne=a("strong"),uuo=o("marian"),_uo=o(" \u2014 "),II=a("a"),buo=o("MarianModel"),vuo=o(" (Marian model)"),Fuo=l(),jp=a("li"),Zne=a("strong"),Tuo=o("maskformer"),Muo=o(" \u2014 "),qI=a("a"),Euo=o("MaskFormerModel"),Cuo=o(" (MaskFormer model)"),wuo=l(),Dp=a("li"),ese=a("strong"),Auo=o("mbart"),yuo=o(" \u2014 "),NI=a("a"),Luo=o("MBartModel"),xuo=o(" (mBART model)"),$uo=l(),Gp=a("li"),ose=a("strong"),kuo=o("megatron-bert"),Suo=o(" \u2014 "),jI=a("a"),Ruo=o("MegatronBertModel"),Buo=o(" (MegatronBert model)"),Puo=l(),Op=a("li"),rse=a("strong"),Iuo=o("mobilebert"),quo=o(" \u2014 "),DI=a("a"),Nuo=o("MobileBertModel"),juo=o(" (MobileBERT model)"),Duo=l(),Vp=a("li"),tse=a("strong"),Guo=o("mpnet"),Ouo=o(" \u2014 "),GI=a("a"),Vuo=o("MPNetModel"),Xuo=o(" (MPNet model)"),zuo=l(),Xp=a("li"),ase=a("strong"),Quo=o("mt5"),Wuo=o(" \u2014 "),OI=a("a"),Huo=o("MT5Model"),Uuo=o(" (mT5 model)"),Juo=l(),zp=a("li"),nse=a("strong"),Yuo=o("nystromformer"),Kuo=o(" \u2014 "),VI=a("a"),Zuo=o("NystromformerModel"),e_o=o(" (Nystromformer model)"),o_o=l(),Qp=a("li"),sse=a("strong"),r_o=o("openai-gpt"),t_o=o(" \u2014 "),XI=a("a"),a_o=o("OpenAIGPTModel"),n_o=o(" (OpenAI GPT model)"),s_o=l(),Wp=a("li"),lse=a("strong"),l_o=o("opt"),i_o=o(" \u2014 "),zI=a("a"),d_o=o("OPTModel"),c_o=o(" (OPT model)"),f_o=l(),Hp=a("li"),ise=a("strong"),m_o=o("pegasus"),g_o=o(" \u2014 "),QI=a("a"),h_o=o("PegasusModel"),p_o=o(" (Pegasus model)"),u_o=l(),Up=a("li"),dse=a("strong"),__o=o("perceiver"),b_o=o(" \u2014 "),WI=a("a"),v_o=o("PerceiverModel"),F_o=o(" (Perceiver model)"),T_o=l(),Jp=a("li"),cse=a("strong"),M_o=o("plbart"),E_o=o(" \u2014 "),HI=a("a"),C_o=o("PLBartModel"),w_o=o(" (PLBart model)"),A_o=l(),Yp=a("li"),fse=a("strong"),y_o=o("poolformer"),L_o=o(" \u2014 "),UI=a("a"),x_o=o("PoolFormerModel"),$_o=o(" (PoolFormer model)"),k_o=l(),Kp=a("li"),mse=a("strong"),S_o=o("prophetnet"),R_o=o(" \u2014 "),JI=a("a"),B_o=o("ProphetNetModel"),P_o=o(" (ProphetNet model)"),I_o=l(),Zp=a("li"),gse=a("strong"),q_o=o("qdqbert"),N_o=o(" \u2014 "),YI=a("a"),j_o=o("QDQBertModel"),D_o=o(" (QDQBert model)"),G_o=l(),eu=a("li"),hse=a("strong"),O_o=o("reformer"),V_o=o(" \u2014 "),KI=a("a"),X_o=o("ReformerModel"),z_o=o(" (Reformer model)"),Q_o=l(),ou=a("li"),pse=a("strong"),W_o=o("regnet"),H_o=o(" \u2014 "),ZI=a("a"),U_o=o("RegNetModel"),J_o=o(" (RegNet model)"),Y_o=l(),ru=a("li"),use=a("strong"),K_o=o("rembert"),Z_o=o(" \u2014 "),eq=a("a"),e2o=o("RemBertModel"),o2o=o(" (RemBERT model)"),r2o=l(),tu=a("li"),_se=a("strong"),t2o=o("resnet"),a2o=o(" \u2014 "),oq=a("a"),n2o=o("ResNetModel"),s2o=o(" (ResNet model)"),l2o=l(),au=a("li"),bse=a("strong"),i2o=o("retribert"),d2o=o(" \u2014 "),rq=a("a"),c2o=o("RetriBertModel"),f2o=o(" (RetriBERT model)"),m2o=l(),nu=a("li"),vse=a("strong"),g2o=o("roberta"),h2o=o(" \u2014 "),tq=a("a"),p2o=o("RobertaModel"),u2o=o(" (RoBERTa model)"),_2o=l(),su=a("li"),Fse=a("strong"),b2o=o("roformer"),v2o=o(" \u2014 "),aq=a("a"),F2o=o("RoFormerModel"),T2o=o(" (RoFormer model)"),M2o=l(),lu=a("li"),Tse=a("strong"),E2o=o("segformer"),C2o=o(" \u2014 "),nq=a("a"),w2o=o("SegformerModel"),A2o=o(" (SegFormer model)"),y2o=l(),iu=a("li"),Mse=a("strong"),L2o=o("sew"),x2o=o(" \u2014 "),sq=a("a"),$2o=o("SEWModel"),k2o=o(" (SEW model)"),S2o=l(),du=a("li"),Ese=a("strong"),R2o=o("sew-d"),B2o=o(" \u2014 "),lq=a("a"),P2o=o("SEWDModel"),I2o=o(" (SEW-D model)"),q2o=l(),cu=a("li"),Cse=a("strong"),N2o=o("speech_to_text"),j2o=o(" \u2014 "),iq=a("a"),D2o=o("Speech2TextModel"),G2o=o(" (Speech2Text model)"),O2o=l(),fu=a("li"),wse=a("strong"),V2o=o("splinter"),X2o=o(" \u2014 "),dq=a("a"),z2o=o("SplinterModel"),Q2o=o(" (Splinter model)"),W2o=l(),mu=a("li"),Ase=a("strong"),H2o=o("squeezebert"),U2o=o(" \u2014 "),cq=a("a"),J2o=o("SqueezeBertModel"),Y2o=o(" (SqueezeBERT model)"),K2o=l(),gu=a("li"),yse=a("strong"),Z2o=o("swin"),e1o=o(" \u2014 "),fq=a("a"),o1o=o("SwinModel"),r1o=o(" (Swin model)"),t1o=l(),hu=a("li"),Lse=a("strong"),a1o=o("t5"),n1o=o(" \u2014 "),mq=a("a"),s1o=o("T5Model"),l1o=o(" (T5 model)"),i1o=l(),pu=a("li"),xse=a("strong"),d1o=o("tapas"),c1o=o(" \u2014 "),gq=a("a"),f1o=o("TapasModel"),m1o=o(" (TAPAS model)"),g1o=l(),uu=a("li"),$se=a("strong"),h1o=o("transfo-xl"),p1o=o(" \u2014 "),hq=a("a"),u1o=o("TransfoXLModel"),_1o=o(" (Transformer-XL model)"),b1o=l(),_u=a("li"),kse=a("strong"),v1o=o("unispeech"),F1o=o(" \u2014 "),pq=a("a"),T1o=o("UniSpeechModel"),M1o=o(" (UniSpeech model)"),E1o=l(),bu=a("li"),Sse=a("strong"),C1o=o("unispeech-sat"),w1o=o(" \u2014 "),uq=a("a"),A1o=o("UniSpeechSatModel"),y1o=o(" (UniSpeechSat model)"),L1o=l(),vu=a("li"),Rse=a("strong"),x1o=o("van"),$1o=o(" \u2014 "),_q=a("a"),k1o=o("VanModel"),S1o=o(" (VAN model)"),R1o=l(),Fu=a("li"),Bse=a("strong"),B1o=o("vilt"),P1o=o(" \u2014 "),bq=a("a"),I1o=o("ViltModel"),q1o=o(" (ViLT model)"),N1o=l(),Tu=a("li"),Pse=a("strong"),j1o=o("vision-text-dual-encoder"),D1o=o(" \u2014 "),vq=a("a"),G1o=o("VisionTextDualEncoderModel"),O1o=o(" (VisionTextDualEncoder model)"),V1o=l(),Mu=a("li"),Ise=a("strong"),X1o=o("visual_bert"),z1o=o(" \u2014 "),Fq=a("a"),Q1o=o("VisualBertModel"),W1o=o(" (VisualBert model)"),H1o=l(),Eu=a("li"),qse=a("strong"),U1o=o("vit"),J1o=o(" \u2014 "),Tq=a("a"),Y1o=o("ViTModel"),K1o=o(" (ViT model)"),Z1o=l(),Cu=a("li"),Nse=a("strong"),ebo=o("vit_mae"),obo=o(" \u2014 "),Mq=a("a"),rbo=o("ViTMAEModel"),tbo=o(" (ViTMAE model)"),abo=l(),wu=a("li"),jse=a("strong"),nbo=o("wav2vec2"),sbo=o(" \u2014 "),Eq=a("a"),lbo=o("Wav2Vec2Model"),ibo=o(" (Wav2Vec2 model)"),dbo=l(),Au=a("li"),Dse=a("strong"),cbo=o("wavlm"),fbo=o(" \u2014 "),Cq=a("a"),mbo=o("WavLMModel"),gbo=o(" (WavLM model)"),hbo=l(),yu=a("li"),Gse=a("strong"),pbo=o("xglm"),ubo=o(" \u2014 "),wq=a("a"),_bo=o("XGLMModel"),bbo=o(" (XGLM model)"),vbo=l(),Lu=a("li"),Ose=a("strong"),Fbo=o("xlm"),Tbo=o(" \u2014 "),Aq=a("a"),Mbo=o("XLMModel"),Ebo=o(" (XLM model)"),Cbo=l(),xu=a("li"),Vse=a("strong"),wbo=o("xlm-prophetnet"),Abo=o(" \u2014 "),yq=a("a"),ybo=o("XLMProphetNetModel"),Lbo=o(" (XLMProphetNet model)"),xbo=l(),$u=a("li"),Xse=a("strong"),$bo=o("xlm-roberta"),kbo=o(" \u2014 "),Lq=a("a"),Sbo=o("XLMRobertaModel"),Rbo=o(" (XLM-RoBERTa model)"),Bbo=l(),ku=a("li"),zse=a("strong"),Pbo=o("xlm-roberta-xl"),Ibo=o(" \u2014 "),xq=a("a"),qbo=o("XLMRobertaXLModel"),Nbo=o(" (XLM-RoBERTa-XL model)"),jbo=l(),Su=a("li"),Qse=a("strong"),Dbo=o("xlnet"),Gbo=o(" \u2014 "),$q=a("a"),Obo=o("XLNetModel"),Vbo=o(" (XLNet model)"),Xbo=l(),Ru=a("li"),Wse=a("strong"),zbo=o("yolos"),Qbo=o(" \u2014 "),kq=a("a"),Wbo=o("YolosModel"),Hbo=o(" (YOLOS model)"),Ubo=l(),Bu=a("li"),Hse=a("strong"),Jbo=o("yoso"),Ybo=o(" \u2014 "),Sq=a("a"),Kbo=o("YosoModel"),Zbo=o(" (YOSO model)"),e4o=l(),Pu=a("p"),o4o=o("The model is set in evaluation mode by default using "),Use=a("code"),r4o=o("model.eval()"),t4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jse=a("code"),a4o=o("model.train()"),n4o=l(),F(Iu.$$.fragment),nIe=l(),wi=a("h2"),qu=a("a"),Yse=a("span"),F(L0.$$.fragment),s4o=l(),Kse=a("span"),l4o=o("AutoModelForPreTraining"),sIe=l(),xo=a("div"),F(x0.$$.fragment),i4o=l(),Ai=a("p"),d4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Rq=a("a"),c4o=o("from_pretrained()"),f4o=o(" class method or the "),Bq=a("a"),m4o=o("from_config()"),g4o=o(` class
method.`),h4o=l(),$0=a("p"),p4o=o("This class cannot be instantiated directly using "),Zse=a("code"),u4o=o("__init__()"),_4o=o(" (throws an error)."),b4o=l(),rt=a("div"),F(k0.$$.fragment),v4o=l(),ele=a("p"),F4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T4o=l(),yi=a("p"),M4o=o(`Note:
Loading a model from its configuration file does `),ole=a("strong"),E4o=o("not"),C4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=a("a"),w4o=o("from_pretrained()"),A4o=o(" to load the model weights."),y4o=l(),F(Nu.$$.fragment),L4o=l(),Ue=a("div"),F(S0.$$.fragment),x4o=l(),rle=a("p"),$4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),k4o=l(),ya=a("p"),S4o=o("The model class to instantiate is selected based on the "),tle=a("code"),R4o=o("model_type"),B4o=o(` property of the config object (either
passed as an argument or loaded from `),ale=a("code"),P4o=o("pretrained_model_name_or_path"),I4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=a("code"),q4o=o("pretrained_model_name_or_path"),N4o=o(":"),j4o=l(),G=a("ul"),ju=a("li"),sle=a("strong"),D4o=o("albert"),G4o=o(" \u2014 "),Iq=a("a"),O4o=o("AlbertForPreTraining"),V4o=o(" (ALBERT model)"),X4o=l(),Du=a("li"),lle=a("strong"),z4o=o("bart"),Q4o=o(" \u2014 "),qq=a("a"),W4o=o("BartForConditionalGeneration"),H4o=o(" (BART model)"),U4o=l(),Gu=a("li"),ile=a("strong"),J4o=o("bert"),Y4o=o(" \u2014 "),Nq=a("a"),K4o=o("BertForPreTraining"),Z4o=o(" (BERT model)"),e5o=l(),Ou=a("li"),dle=a("strong"),o5o=o("big_bird"),r5o=o(" \u2014 "),jq=a("a"),t5o=o("BigBirdForPreTraining"),a5o=o(" (BigBird model)"),n5o=l(),Vu=a("li"),cle=a("strong"),s5o=o("camembert"),l5o=o(" \u2014 "),Dq=a("a"),i5o=o("CamembertForMaskedLM"),d5o=o(" (CamemBERT model)"),c5o=l(),Xu=a("li"),fle=a("strong"),f5o=o("ctrl"),m5o=o(" \u2014 "),Gq=a("a"),g5o=o("CTRLLMHeadModel"),h5o=o(" (CTRL model)"),p5o=l(),zu=a("li"),mle=a("strong"),u5o=o("data2vec-text"),_5o=o(" \u2014 "),Oq=a("a"),b5o=o("Data2VecTextForMaskedLM"),v5o=o(" (Data2VecText model)"),F5o=l(),Qu=a("li"),gle=a("strong"),T5o=o("deberta"),M5o=o(" \u2014 "),Vq=a("a"),E5o=o("DebertaForMaskedLM"),C5o=o(" (DeBERTa model)"),w5o=l(),Wu=a("li"),hle=a("strong"),A5o=o("deberta-v2"),y5o=o(" \u2014 "),Xq=a("a"),L5o=o("DebertaV2ForMaskedLM"),x5o=o(" (DeBERTa-v2 model)"),$5o=l(),Hu=a("li"),ple=a("strong"),k5o=o("distilbert"),S5o=o(" \u2014 "),zq=a("a"),R5o=o("DistilBertForMaskedLM"),B5o=o(" (DistilBERT model)"),P5o=l(),Uu=a("li"),ule=a("strong"),I5o=o("electra"),q5o=o(" \u2014 "),Qq=a("a"),N5o=o("ElectraForPreTraining"),j5o=o(" (ELECTRA model)"),D5o=l(),Ju=a("li"),_le=a("strong"),G5o=o("flaubert"),O5o=o(" \u2014 "),Wq=a("a"),V5o=o("FlaubertWithLMHeadModel"),X5o=o(" (FlauBERT model)"),z5o=l(),Yu=a("li"),ble=a("strong"),Q5o=o("flava"),W5o=o(" \u2014 "),Hq=a("a"),H5o=o("FlavaForPreTraining"),U5o=o(" (Flava model)"),J5o=l(),Ku=a("li"),vle=a("strong"),Y5o=o("fnet"),K5o=o(" \u2014 "),Uq=a("a"),Z5o=o("FNetForPreTraining"),evo=o(" (FNet model)"),ovo=l(),Zu=a("li"),Fle=a("strong"),rvo=o("fsmt"),tvo=o(" \u2014 "),Jq=a("a"),avo=o("FSMTForConditionalGeneration"),nvo=o(" (FairSeq Machine-Translation model)"),svo=l(),e_=a("li"),Tle=a("strong"),lvo=o("funnel"),ivo=o(" \u2014 "),Yq=a("a"),dvo=o("FunnelForPreTraining"),cvo=o(" (Funnel Transformer model)"),fvo=l(),o_=a("li"),Mle=a("strong"),mvo=o("gpt2"),gvo=o(" \u2014 "),Kq=a("a"),hvo=o("GPT2LMHeadModel"),pvo=o(" (OpenAI GPT-2 model)"),uvo=l(),r_=a("li"),Ele=a("strong"),_vo=o("ibert"),bvo=o(" \u2014 "),Zq=a("a"),vvo=o("IBertForMaskedLM"),Fvo=o(" (I-BERT model)"),Tvo=l(),t_=a("li"),Cle=a("strong"),Mvo=o("layoutlm"),Evo=o(" \u2014 "),eN=a("a"),Cvo=o("LayoutLMForMaskedLM"),wvo=o(" (LayoutLM model)"),Avo=l(),a_=a("li"),wle=a("strong"),yvo=o("longformer"),Lvo=o(" \u2014 "),oN=a("a"),xvo=o("LongformerForMaskedLM"),$vo=o(" (Longformer model)"),kvo=l(),n_=a("li"),Ale=a("strong"),Svo=o("lxmert"),Rvo=o(" \u2014 "),rN=a("a"),Bvo=o("LxmertForPreTraining"),Pvo=o(" (LXMERT model)"),Ivo=l(),s_=a("li"),yle=a("strong"),qvo=o("megatron-bert"),Nvo=o(" \u2014 "),tN=a("a"),jvo=o("MegatronBertForPreTraining"),Dvo=o(" (MegatronBert model)"),Gvo=l(),l_=a("li"),Lle=a("strong"),Ovo=o("mobilebert"),Vvo=o(" \u2014 "),aN=a("a"),Xvo=o("MobileBertForPreTraining"),zvo=o(" (MobileBERT model)"),Qvo=l(),i_=a("li"),xle=a("strong"),Wvo=o("mpnet"),Hvo=o(" \u2014 "),nN=a("a"),Uvo=o("MPNetForMaskedLM"),Jvo=o(" (MPNet model)"),Yvo=l(),d_=a("li"),$le=a("strong"),Kvo=o("openai-gpt"),Zvo=o(" \u2014 "),sN=a("a"),eFo=o("OpenAIGPTLMHeadModel"),oFo=o(" (OpenAI GPT model)"),rFo=l(),c_=a("li"),kle=a("strong"),tFo=o("retribert"),aFo=o(" \u2014 "),lN=a("a"),nFo=o("RetriBertModel"),sFo=o(" (RetriBERT model)"),lFo=l(),f_=a("li"),Sle=a("strong"),iFo=o("roberta"),dFo=o(" \u2014 "),iN=a("a"),cFo=o("RobertaForMaskedLM"),fFo=o(" (RoBERTa model)"),mFo=l(),m_=a("li"),Rle=a("strong"),gFo=o("squeezebert"),hFo=o(" \u2014 "),dN=a("a"),pFo=o("SqueezeBertForMaskedLM"),uFo=o(" (SqueezeBERT model)"),_Fo=l(),g_=a("li"),Ble=a("strong"),bFo=o("t5"),vFo=o(" \u2014 "),cN=a("a"),FFo=o("T5ForConditionalGeneration"),TFo=o(" (T5 model)"),MFo=l(),h_=a("li"),Ple=a("strong"),EFo=o("tapas"),CFo=o(" \u2014 "),fN=a("a"),wFo=o("TapasForMaskedLM"),AFo=o(" (TAPAS model)"),yFo=l(),p_=a("li"),Ile=a("strong"),LFo=o("transfo-xl"),xFo=o(" \u2014 "),mN=a("a"),$Fo=o("TransfoXLLMHeadModel"),kFo=o(" (Transformer-XL model)"),SFo=l(),u_=a("li"),qle=a("strong"),RFo=o("unispeech"),BFo=o(" \u2014 "),gN=a("a"),PFo=o("UniSpeechForPreTraining"),IFo=o(" (UniSpeech model)"),qFo=l(),__=a("li"),Nle=a("strong"),NFo=o("unispeech-sat"),jFo=o(" \u2014 "),hN=a("a"),DFo=o("UniSpeechSatForPreTraining"),GFo=o(" (UniSpeechSat model)"),OFo=l(),b_=a("li"),jle=a("strong"),VFo=o("visual_bert"),XFo=o(" \u2014 "),pN=a("a"),zFo=o("VisualBertForPreTraining"),QFo=o(" (VisualBert model)"),WFo=l(),v_=a("li"),Dle=a("strong"),HFo=o("vit_mae"),UFo=o(" \u2014 "),uN=a("a"),JFo=o("ViTMAEForPreTraining"),YFo=o(" (ViTMAE model)"),KFo=l(),F_=a("li"),Gle=a("strong"),ZFo=o("wav2vec2"),eTo=o(" \u2014 "),_N=a("a"),oTo=o("Wav2Vec2ForPreTraining"),rTo=o(" (Wav2Vec2 model)"),tTo=l(),T_=a("li"),Ole=a("strong"),aTo=o("xlm"),nTo=o(" \u2014 "),bN=a("a"),sTo=o("XLMWithLMHeadModel"),lTo=o(" (XLM model)"),iTo=l(),M_=a("li"),Vle=a("strong"),dTo=o("xlm-roberta"),cTo=o(" \u2014 "),vN=a("a"),fTo=o("XLMRobertaForMaskedLM"),mTo=o(" (XLM-RoBERTa model)"),gTo=l(),E_=a("li"),Xle=a("strong"),hTo=o("xlm-roberta-xl"),pTo=o(" \u2014 "),FN=a("a"),uTo=o("XLMRobertaXLForMaskedLM"),_To=o(" (XLM-RoBERTa-XL model)"),bTo=l(),C_=a("li"),zle=a("strong"),vTo=o("xlnet"),FTo=o(" \u2014 "),TN=a("a"),TTo=o("XLNetLMHeadModel"),MTo=o(" (XLNet model)"),ETo=l(),w_=a("p"),CTo=o("The model is set in evaluation mode by default using "),Qle=a("code"),wTo=o("model.eval()"),ATo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wle=a("code"),yTo=o("model.train()"),LTo=l(),F(A_.$$.fragment),lIe=l(),Li=a("h2"),y_=a("a"),Hle=a("span"),F(R0.$$.fragment),xTo=l(),Ule=a("span"),$To=o("AutoModelForCausalLM"),iIe=l(),$o=a("div"),F(B0.$$.fragment),kTo=l(),xi=a("p"),STo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MN=a("a"),RTo=o("from_pretrained()"),BTo=o(" class method or the "),EN=a("a"),PTo=o("from_config()"),ITo=o(` class
method.`),qTo=l(),P0=a("p"),NTo=o("This class cannot be instantiated directly using "),Jle=a("code"),jTo=o("__init__()"),DTo=o(" (throws an error)."),GTo=l(),tt=a("div"),F(I0.$$.fragment),OTo=l(),Yle=a("p"),VTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XTo=l(),$i=a("p"),zTo=o(`Note:
Loading a model from its configuration file does `),Kle=a("strong"),QTo=o("not"),WTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=a("a"),HTo=o("from_pretrained()"),UTo=o(" to load the model weights."),JTo=l(),F(L_.$$.fragment),YTo=l(),Je=a("div"),F(q0.$$.fragment),KTo=l(),Zle=a("p"),ZTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e7o=l(),La=a("p"),o7o=o("The model class to instantiate is selected based on the "),eie=a("code"),r7o=o("model_type"),t7o=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),a7o=o("pretrained_model_name_or_path"),n7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),s7o=o("pretrained_model_name_or_path"),l7o=o(":"),i7o=l(),z=a("ul"),x_=a("li"),tie=a("strong"),d7o=o("bart"),c7o=o(" \u2014 "),wN=a("a"),f7o=o("BartForCausalLM"),m7o=o(" (BART model)"),g7o=l(),$_=a("li"),aie=a("strong"),h7o=o("bert"),p7o=o(" \u2014 "),AN=a("a"),u7o=o("BertLMHeadModel"),_7o=o(" (BERT model)"),b7o=l(),k_=a("li"),nie=a("strong"),v7o=o("bert-generation"),F7o=o(" \u2014 "),yN=a("a"),T7o=o("BertGenerationDecoder"),M7o=o(" (Bert Generation model)"),E7o=l(),S_=a("li"),sie=a("strong"),C7o=o("big_bird"),w7o=o(" \u2014 "),LN=a("a"),A7o=o("BigBirdForCausalLM"),y7o=o(" (BigBird model)"),L7o=l(),R_=a("li"),lie=a("strong"),x7o=o("bigbird_pegasus"),$7o=o(" \u2014 "),xN=a("a"),k7o=o("BigBirdPegasusForCausalLM"),S7o=o(" (BigBirdPegasus model)"),R7o=l(),B_=a("li"),iie=a("strong"),B7o=o("blenderbot"),P7o=o(" \u2014 "),$N=a("a"),I7o=o("BlenderbotForCausalLM"),q7o=o(" (Blenderbot model)"),N7o=l(),P_=a("li"),die=a("strong"),j7o=o("blenderbot-small"),D7o=o(" \u2014 "),kN=a("a"),G7o=o("BlenderbotSmallForCausalLM"),O7o=o(" (BlenderbotSmall model)"),V7o=l(),I_=a("li"),cie=a("strong"),X7o=o("camembert"),z7o=o(" \u2014 "),SN=a("a"),Q7o=o("CamembertForCausalLM"),W7o=o(" (CamemBERT model)"),H7o=l(),q_=a("li"),fie=a("strong"),U7o=o("ctrl"),J7o=o(" \u2014 "),RN=a("a"),Y7o=o("CTRLLMHeadModel"),K7o=o(" (CTRL model)"),Z7o=l(),N_=a("li"),mie=a("strong"),eMo=o("data2vec-text"),oMo=o(" \u2014 "),BN=a("a"),rMo=o("Data2VecTextForCausalLM"),tMo=o(" (Data2VecText model)"),aMo=l(),j_=a("li"),gie=a("strong"),nMo=o("electra"),sMo=o(" \u2014 "),PN=a("a"),lMo=o("ElectraForCausalLM"),iMo=o(" (ELECTRA model)"),dMo=l(),D_=a("li"),hie=a("strong"),cMo=o("gpt2"),fMo=o(" \u2014 "),IN=a("a"),mMo=o("GPT2LMHeadModel"),gMo=o(" (OpenAI GPT-2 model)"),hMo=l(),G_=a("li"),pie=a("strong"),pMo=o("gpt_neo"),uMo=o(" \u2014 "),qN=a("a"),_Mo=o("GPTNeoForCausalLM"),bMo=o(" (GPT Neo model)"),vMo=l(),O_=a("li"),uie=a("strong"),FMo=o("gptj"),TMo=o(" \u2014 "),NN=a("a"),MMo=o("GPTJForCausalLM"),EMo=o(" (GPT-J model)"),CMo=l(),V_=a("li"),_ie=a("strong"),wMo=o("marian"),AMo=o(" \u2014 "),jN=a("a"),yMo=o("MarianForCausalLM"),LMo=o(" (Marian model)"),xMo=l(),X_=a("li"),bie=a("strong"),$Mo=o("mbart"),kMo=o(" \u2014 "),DN=a("a"),SMo=o("MBartForCausalLM"),RMo=o(" (mBART model)"),BMo=l(),z_=a("li"),vie=a("strong"),PMo=o("megatron-bert"),IMo=o(" \u2014 "),GN=a("a"),qMo=o("MegatronBertForCausalLM"),NMo=o(" (MegatronBert model)"),jMo=l(),Q_=a("li"),Fie=a("strong"),DMo=o("openai-gpt"),GMo=o(" \u2014 "),ON=a("a"),OMo=o("OpenAIGPTLMHeadModel"),VMo=o(" (OpenAI GPT model)"),XMo=l(),W_=a("li"),Tie=a("strong"),zMo=o("opt"),QMo=o(" \u2014 "),VN=a("a"),WMo=o("OPTForCausalLM"),HMo=o(" (OPT model)"),UMo=l(),H_=a("li"),Mie=a("strong"),JMo=o("pegasus"),YMo=o(" \u2014 "),XN=a("a"),KMo=o("PegasusForCausalLM"),ZMo=o(" (Pegasus model)"),eEo=l(),U_=a("li"),Eie=a("strong"),oEo=o("plbart"),rEo=o(" \u2014 "),zN=a("a"),tEo=o("PLBartForCausalLM"),aEo=o(" (PLBart model)"),nEo=l(),J_=a("li"),Cie=a("strong"),sEo=o("prophetnet"),lEo=o(" \u2014 "),QN=a("a"),iEo=o("ProphetNetForCausalLM"),dEo=o(" (ProphetNet model)"),cEo=l(),Y_=a("li"),wie=a("strong"),fEo=o("qdqbert"),mEo=o(" \u2014 "),WN=a("a"),gEo=o("QDQBertLMHeadModel"),hEo=o(" (QDQBert model)"),pEo=l(),K_=a("li"),Aie=a("strong"),uEo=o("reformer"),_Eo=o(" \u2014 "),HN=a("a"),bEo=o("ReformerModelWithLMHead"),vEo=o(" (Reformer model)"),FEo=l(),Z_=a("li"),yie=a("strong"),TEo=o("rembert"),MEo=o(" \u2014 "),UN=a("a"),EEo=o("RemBertForCausalLM"),CEo=o(" (RemBERT model)"),wEo=l(),e2=a("li"),Lie=a("strong"),AEo=o("roberta"),yEo=o(" \u2014 "),JN=a("a"),LEo=o("RobertaForCausalLM"),xEo=o(" (RoBERTa model)"),$Eo=l(),o2=a("li"),xie=a("strong"),kEo=o("roformer"),SEo=o(" \u2014 "),YN=a("a"),REo=o("RoFormerForCausalLM"),BEo=o(" (RoFormer model)"),PEo=l(),r2=a("li"),$ie=a("strong"),IEo=o("speech_to_text_2"),qEo=o(" \u2014 "),KN=a("a"),NEo=o("Speech2Text2ForCausalLM"),jEo=o(" (Speech2Text2 model)"),DEo=l(),t2=a("li"),kie=a("strong"),GEo=o("transfo-xl"),OEo=o(" \u2014 "),ZN=a("a"),VEo=o("TransfoXLLMHeadModel"),XEo=o(" (Transformer-XL model)"),zEo=l(),a2=a("li"),Sie=a("strong"),QEo=o("trocr"),WEo=o(" \u2014 "),ej=a("a"),HEo=o("TrOCRForCausalLM"),UEo=o(" (TrOCR model)"),JEo=l(),n2=a("li"),Rie=a("strong"),YEo=o("xglm"),KEo=o(" \u2014 "),oj=a("a"),ZEo=o("XGLMForCausalLM"),eCo=o(" (XGLM model)"),oCo=l(),s2=a("li"),Bie=a("strong"),rCo=o("xlm"),tCo=o(" \u2014 "),rj=a("a"),aCo=o("XLMWithLMHeadModel"),nCo=o(" (XLM model)"),sCo=l(),l2=a("li"),Pie=a("strong"),lCo=o("xlm-prophetnet"),iCo=o(" \u2014 "),tj=a("a"),dCo=o("XLMProphetNetForCausalLM"),cCo=o(" (XLMProphetNet model)"),fCo=l(),i2=a("li"),Iie=a("strong"),mCo=o("xlm-roberta"),gCo=o(" \u2014 "),aj=a("a"),hCo=o("XLMRobertaForCausalLM"),pCo=o(" (XLM-RoBERTa model)"),uCo=l(),d2=a("li"),qie=a("strong"),_Co=o("xlm-roberta-xl"),bCo=o(" \u2014 "),nj=a("a"),vCo=o("XLMRobertaXLForCausalLM"),FCo=o(" (XLM-RoBERTa-XL model)"),TCo=l(),c2=a("li"),Nie=a("strong"),MCo=o("xlnet"),ECo=o(" \u2014 "),sj=a("a"),CCo=o("XLNetLMHeadModel"),wCo=o(" (XLNet model)"),ACo=l(),f2=a("p"),yCo=o("The model is set in evaluation mode by default using "),jie=a("code"),LCo=o("model.eval()"),xCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),$Co=o("model.train()"),kCo=l(),F(m2.$$.fragment),dIe=l(),ki=a("h2"),g2=a("a"),Gie=a("span"),F(N0.$$.fragment),SCo=l(),Oie=a("span"),RCo=o("AutoModelForMaskedLM"),cIe=l(),ko=a("div"),F(j0.$$.fragment),BCo=l(),Si=a("p"),PCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lj=a("a"),ICo=o("from_pretrained()"),qCo=o(" class method or the "),ij=a("a"),NCo=o("from_config()"),jCo=o(` class
method.`),DCo=l(),D0=a("p"),GCo=o("This class cannot be instantiated directly using "),Vie=a("code"),OCo=o("__init__()"),VCo=o(" (throws an error)."),XCo=l(),at=a("div"),F(G0.$$.fragment),zCo=l(),Xie=a("p"),QCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WCo=l(),Ri=a("p"),HCo=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),UCo=o("not"),JCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=a("a"),YCo=o("from_pretrained()"),KCo=o(" to load the model weights."),ZCo=l(),F(h2.$$.fragment),e3o=l(),Ye=a("div"),F(O0.$$.fragment),o3o=l(),Qie=a("p"),r3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),t3o=l(),xa=a("p"),a3o=o("The model class to instantiate is selected based on the "),Wie=a("code"),n3o=o("model_type"),s3o=o(` property of the config object (either
passed as an argument or loaded from `),Hie=a("code"),l3o=o("pretrained_model_name_or_path"),i3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=a("code"),d3o=o("pretrained_model_name_or_path"),c3o=o(":"),f3o=l(),Q=a("ul"),p2=a("li"),Jie=a("strong"),m3o=o("albert"),g3o=o(" \u2014 "),cj=a("a"),h3o=o("AlbertForMaskedLM"),p3o=o(" (ALBERT model)"),u3o=l(),u2=a("li"),Yie=a("strong"),_3o=o("bart"),b3o=o(" \u2014 "),fj=a("a"),v3o=o("BartForConditionalGeneration"),F3o=o(" (BART model)"),T3o=l(),_2=a("li"),Kie=a("strong"),M3o=o("bert"),E3o=o(" \u2014 "),mj=a("a"),C3o=o("BertForMaskedLM"),w3o=o(" (BERT model)"),A3o=l(),b2=a("li"),Zie=a("strong"),y3o=o("big_bird"),L3o=o(" \u2014 "),gj=a("a"),x3o=o("BigBirdForMaskedLM"),$3o=o(" (BigBird model)"),k3o=l(),v2=a("li"),ede=a("strong"),S3o=o("camembert"),R3o=o(" \u2014 "),hj=a("a"),B3o=o("CamembertForMaskedLM"),P3o=o(" (CamemBERT model)"),I3o=l(),F2=a("li"),ode=a("strong"),q3o=o("convbert"),N3o=o(" \u2014 "),pj=a("a"),j3o=o("ConvBertForMaskedLM"),D3o=o(" (ConvBERT model)"),G3o=l(),T2=a("li"),rde=a("strong"),O3o=o("data2vec-text"),V3o=o(" \u2014 "),uj=a("a"),X3o=o("Data2VecTextForMaskedLM"),z3o=o(" (Data2VecText model)"),Q3o=l(),M2=a("li"),tde=a("strong"),W3o=o("deberta"),H3o=o(" \u2014 "),_j=a("a"),U3o=o("DebertaForMaskedLM"),J3o=o(" (DeBERTa model)"),Y3o=l(),E2=a("li"),ade=a("strong"),K3o=o("deberta-v2"),Z3o=o(" \u2014 "),bj=a("a"),ewo=o("DebertaV2ForMaskedLM"),owo=o(" (DeBERTa-v2 model)"),rwo=l(),C2=a("li"),nde=a("strong"),two=o("distilbert"),awo=o(" \u2014 "),vj=a("a"),nwo=o("DistilBertForMaskedLM"),swo=o(" (DistilBERT model)"),lwo=l(),w2=a("li"),sde=a("strong"),iwo=o("electra"),dwo=o(" \u2014 "),Fj=a("a"),cwo=o("ElectraForMaskedLM"),fwo=o(" (ELECTRA model)"),mwo=l(),A2=a("li"),lde=a("strong"),gwo=o("flaubert"),hwo=o(" \u2014 "),Tj=a("a"),pwo=o("FlaubertWithLMHeadModel"),uwo=o(" (FlauBERT model)"),_wo=l(),y2=a("li"),ide=a("strong"),bwo=o("fnet"),vwo=o(" \u2014 "),Mj=a("a"),Fwo=o("FNetForMaskedLM"),Two=o(" (FNet model)"),Mwo=l(),L2=a("li"),dde=a("strong"),Ewo=o("funnel"),Cwo=o(" \u2014 "),Ej=a("a"),wwo=o("FunnelForMaskedLM"),Awo=o(" (Funnel Transformer model)"),ywo=l(),x2=a("li"),cde=a("strong"),Lwo=o("ibert"),xwo=o(" \u2014 "),Cj=a("a"),$wo=o("IBertForMaskedLM"),kwo=o(" (I-BERT model)"),Swo=l(),$2=a("li"),fde=a("strong"),Rwo=o("layoutlm"),Bwo=o(" \u2014 "),wj=a("a"),Pwo=o("LayoutLMForMaskedLM"),Iwo=o(" (LayoutLM model)"),qwo=l(),k2=a("li"),mde=a("strong"),Nwo=o("longformer"),jwo=o(" \u2014 "),Aj=a("a"),Dwo=o("LongformerForMaskedLM"),Gwo=o(" (Longformer model)"),Owo=l(),S2=a("li"),gde=a("strong"),Vwo=o("mbart"),Xwo=o(" \u2014 "),yj=a("a"),zwo=o("MBartForConditionalGeneration"),Qwo=o(" (mBART model)"),Wwo=l(),R2=a("li"),hde=a("strong"),Hwo=o("megatron-bert"),Uwo=o(" \u2014 "),Lj=a("a"),Jwo=o("MegatronBertForMaskedLM"),Ywo=o(" (MegatronBert model)"),Kwo=l(),B2=a("li"),pde=a("strong"),Zwo=o("mobilebert"),eAo=o(" \u2014 "),xj=a("a"),oAo=o("MobileBertForMaskedLM"),rAo=o(" (MobileBERT model)"),tAo=l(),P2=a("li"),ude=a("strong"),aAo=o("mpnet"),nAo=o(" \u2014 "),$j=a("a"),sAo=o("MPNetForMaskedLM"),lAo=o(" (MPNet model)"),iAo=l(),I2=a("li"),_de=a("strong"),dAo=o("nystromformer"),cAo=o(" \u2014 "),kj=a("a"),fAo=o("NystromformerForMaskedLM"),mAo=o(" (Nystromformer model)"),gAo=l(),q2=a("li"),bde=a("strong"),hAo=o("perceiver"),pAo=o(" \u2014 "),Sj=a("a"),uAo=o("PerceiverForMaskedLM"),_Ao=o(" (Perceiver model)"),bAo=l(),N2=a("li"),vde=a("strong"),vAo=o("qdqbert"),FAo=o(" \u2014 "),Rj=a("a"),TAo=o("QDQBertForMaskedLM"),MAo=o(" (QDQBert model)"),EAo=l(),j2=a("li"),Fde=a("strong"),CAo=o("reformer"),wAo=o(" \u2014 "),Bj=a("a"),AAo=o("ReformerForMaskedLM"),yAo=o(" (Reformer model)"),LAo=l(),D2=a("li"),Tde=a("strong"),xAo=o("rembert"),$Ao=o(" \u2014 "),Pj=a("a"),kAo=o("RemBertForMaskedLM"),SAo=o(" (RemBERT model)"),RAo=l(),G2=a("li"),Mde=a("strong"),BAo=o("roberta"),PAo=o(" \u2014 "),Ij=a("a"),IAo=o("RobertaForMaskedLM"),qAo=o(" (RoBERTa model)"),NAo=l(),O2=a("li"),Ede=a("strong"),jAo=o("roformer"),DAo=o(" \u2014 "),qj=a("a"),GAo=o("RoFormerForMaskedLM"),OAo=o(" (RoFormer model)"),VAo=l(),V2=a("li"),Cde=a("strong"),XAo=o("squeezebert"),zAo=o(" \u2014 "),Nj=a("a"),QAo=o("SqueezeBertForMaskedLM"),WAo=o(" (SqueezeBERT model)"),HAo=l(),X2=a("li"),wde=a("strong"),UAo=o("tapas"),JAo=o(" \u2014 "),jj=a("a"),YAo=o("TapasForMaskedLM"),KAo=o(" (TAPAS model)"),ZAo=l(),z2=a("li"),Ade=a("strong"),e6o=o("wav2vec2"),o6o=o(" \u2014 "),yde=a("code"),r6o=o("Wav2Vec2ForMaskedLM"),t6o=o(" (Wav2Vec2 model)"),a6o=l(),Q2=a("li"),Lde=a("strong"),n6o=o("xlm"),s6o=o(" \u2014 "),Dj=a("a"),l6o=o("XLMWithLMHeadModel"),i6o=o(" (XLM model)"),d6o=l(),W2=a("li"),xde=a("strong"),c6o=o("xlm-roberta"),f6o=o(" \u2014 "),Gj=a("a"),m6o=o("XLMRobertaForMaskedLM"),g6o=o(" (XLM-RoBERTa model)"),h6o=l(),H2=a("li"),$de=a("strong"),p6o=o("xlm-roberta-xl"),u6o=o(" \u2014 "),Oj=a("a"),_6o=o("XLMRobertaXLForMaskedLM"),b6o=o(" (XLM-RoBERTa-XL model)"),v6o=l(),U2=a("li"),kde=a("strong"),F6o=o("yoso"),T6o=o(" \u2014 "),Vj=a("a"),M6o=o("YosoForMaskedLM"),E6o=o(" (YOSO model)"),C6o=l(),J2=a("p"),w6o=o("The model is set in evaluation mode by default using "),Sde=a("code"),A6o=o("model.eval()"),y6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),L6o=o("model.train()"),x6o=l(),F(Y2.$$.fragment),fIe=l(),Bi=a("h2"),K2=a("a"),Bde=a("span"),F(V0.$$.fragment),$6o=l(),Pde=a("span"),k6o=o("AutoModelForSeq2SeqLM"),mIe=l(),So=a("div"),F(X0.$$.fragment),S6o=l(),Pi=a("p"),R6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xj=a("a"),B6o=o("from_pretrained()"),P6o=o(" class method or the "),zj=a("a"),I6o=o("from_config()"),q6o=o(` class
method.`),N6o=l(),z0=a("p"),j6o=o("This class cannot be instantiated directly using "),Ide=a("code"),D6o=o("__init__()"),G6o=o(" (throws an error)."),O6o=l(),nt=a("div"),F(Q0.$$.fragment),V6o=l(),qde=a("p"),X6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z6o=l(),Ii=a("p"),Q6o=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),W6o=o("not"),H6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=a("a"),U6o=o("from_pretrained()"),J6o=o(" to load the model weights."),Y6o=l(),F(Z2.$$.fragment),K6o=l(),Ke=a("div"),F(W0.$$.fragment),Z6o=l(),jde=a("p"),e0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o0o=l(),$a=a("p"),r0o=o("The model class to instantiate is selected based on the "),Dde=a("code"),t0o=o("model_type"),a0o=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),n0o=o("pretrained_model_name_or_path"),s0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),l0o=o("pretrained_model_name_or_path"),i0o=o(":"),d0o=l(),he=a("ul"),e1=a("li"),Vde=a("strong"),c0o=o("bart"),f0o=o(" \u2014 "),Wj=a("a"),m0o=o("BartForConditionalGeneration"),g0o=o(" (BART model)"),h0o=l(),o1=a("li"),Xde=a("strong"),p0o=o("bigbird_pegasus"),u0o=o(" \u2014 "),Hj=a("a"),_0o=o("BigBirdPegasusForConditionalGeneration"),b0o=o(" (BigBirdPegasus model)"),v0o=l(),r1=a("li"),zde=a("strong"),F0o=o("blenderbot"),T0o=o(" \u2014 "),Uj=a("a"),M0o=o("BlenderbotForConditionalGeneration"),E0o=o(" (Blenderbot model)"),C0o=l(),t1=a("li"),Qde=a("strong"),w0o=o("blenderbot-small"),A0o=o(" \u2014 "),Jj=a("a"),y0o=o("BlenderbotSmallForConditionalGeneration"),L0o=o(" (BlenderbotSmall model)"),x0o=l(),a1=a("li"),Wde=a("strong"),$0o=o("encoder-decoder"),k0o=o(" \u2014 "),Yj=a("a"),S0o=o("EncoderDecoderModel"),R0o=o(" (Encoder decoder model)"),B0o=l(),n1=a("li"),Hde=a("strong"),P0o=o("fsmt"),I0o=o(" \u2014 "),Kj=a("a"),q0o=o("FSMTForConditionalGeneration"),N0o=o(" (FairSeq Machine-Translation model)"),j0o=l(),s1=a("li"),Ude=a("strong"),D0o=o("led"),G0o=o(" \u2014 "),Zj=a("a"),O0o=o("LEDForConditionalGeneration"),V0o=o(" (LED model)"),X0o=l(),l1=a("li"),Jde=a("strong"),z0o=o("m2m_100"),Q0o=o(" \u2014 "),eD=a("a"),W0o=o("M2M100ForConditionalGeneration"),H0o=o(" (M2M100 model)"),U0o=l(),i1=a("li"),Yde=a("strong"),J0o=o("marian"),Y0o=o(" \u2014 "),oD=a("a"),K0o=o("MarianMTModel"),Z0o=o(" (Marian model)"),eyo=l(),d1=a("li"),Kde=a("strong"),oyo=o("mbart"),ryo=o(" \u2014 "),rD=a("a"),tyo=o("MBartForConditionalGeneration"),ayo=o(" (mBART model)"),nyo=l(),c1=a("li"),Zde=a("strong"),syo=o("mt5"),lyo=o(" \u2014 "),tD=a("a"),iyo=o("MT5ForConditionalGeneration"),dyo=o(" (mT5 model)"),cyo=l(),f1=a("li"),ece=a("strong"),fyo=o("pegasus"),myo=o(" \u2014 "),aD=a("a"),gyo=o("PegasusForConditionalGeneration"),hyo=o(" (Pegasus model)"),pyo=l(),m1=a("li"),oce=a("strong"),uyo=o("plbart"),_yo=o(" \u2014 "),nD=a("a"),byo=o("PLBartForConditionalGeneration"),vyo=o(" (PLBart model)"),Fyo=l(),g1=a("li"),rce=a("strong"),Tyo=o("prophetnet"),Myo=o(" \u2014 "),sD=a("a"),Eyo=o("ProphetNetForConditionalGeneration"),Cyo=o(" (ProphetNet model)"),wyo=l(),h1=a("li"),tce=a("strong"),Ayo=o("t5"),yyo=o(" \u2014 "),lD=a("a"),Lyo=o("T5ForConditionalGeneration"),xyo=o(" (T5 model)"),$yo=l(),p1=a("li"),ace=a("strong"),kyo=o("tapex"),Syo=o(" \u2014 "),iD=a("a"),Ryo=o("BartForConditionalGeneration"),Byo=o(" (TAPEX model)"),Pyo=l(),u1=a("li"),nce=a("strong"),Iyo=o("xlm-prophetnet"),qyo=o(" \u2014 "),dD=a("a"),Nyo=o("XLMProphetNetForConditionalGeneration"),jyo=o(" (XLMProphetNet model)"),Dyo=l(),_1=a("p"),Gyo=o("The model is set in evaluation mode by default using "),sce=a("code"),Oyo=o("model.eval()"),Vyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=a("code"),Xyo=o("model.train()"),zyo=l(),F(b1.$$.fragment),gIe=l(),qi=a("h2"),v1=a("a"),ice=a("span"),F(H0.$$.fragment),Qyo=l(),dce=a("span"),Wyo=o("AutoModelForSequenceClassification"),hIe=l(),Ro=a("div"),F(U0.$$.fragment),Hyo=l(),Ni=a("p"),Uyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cD=a("a"),Jyo=o("from_pretrained()"),Yyo=o(" class method or the "),fD=a("a"),Kyo=o("from_config()"),Zyo=o(` class
method.`),eLo=l(),J0=a("p"),oLo=o("This class cannot be instantiated directly using "),cce=a("code"),rLo=o("__init__()"),tLo=o(" (throws an error)."),aLo=l(),st=a("div"),F(Y0.$$.fragment),nLo=l(),fce=a("p"),sLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lLo=l(),ji=a("p"),iLo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),dLo=o("not"),cLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),fLo=o("from_pretrained()"),mLo=o(" to load the model weights."),gLo=l(),F(F1.$$.fragment),hLo=l(),Ze=a("div"),F(K0.$$.fragment),pLo=l(),gce=a("p"),uLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Lo=l(),ka=a("p"),bLo=o("The model class to instantiate is selected based on the "),hce=a("code"),vLo=o("model_type"),FLo=o(` property of the config object (either
passed as an argument or loaded from `),pce=a("code"),TLo=o("pretrained_model_name_or_path"),MLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),ELo=o("pretrained_model_name_or_path"),CLo=o(":"),wLo=l(),q=a("ul"),T1=a("li"),_ce=a("strong"),ALo=o("albert"),yLo=o(" \u2014 "),gD=a("a"),LLo=o("AlbertForSequenceClassification"),xLo=o(" (ALBERT model)"),$Lo=l(),M1=a("li"),bce=a("strong"),kLo=o("bart"),SLo=o(" \u2014 "),hD=a("a"),RLo=o("BartForSequenceClassification"),BLo=o(" (BART model)"),PLo=l(),E1=a("li"),vce=a("strong"),ILo=o("bert"),qLo=o(" \u2014 "),pD=a("a"),NLo=o("BertForSequenceClassification"),jLo=o(" (BERT model)"),DLo=l(),C1=a("li"),Fce=a("strong"),GLo=o("big_bird"),OLo=o(" \u2014 "),uD=a("a"),VLo=o("BigBirdForSequenceClassification"),XLo=o(" (BigBird model)"),zLo=l(),w1=a("li"),Tce=a("strong"),QLo=o("bigbird_pegasus"),WLo=o(" \u2014 "),_D=a("a"),HLo=o("BigBirdPegasusForSequenceClassification"),ULo=o(" (BigBirdPegasus model)"),JLo=l(),A1=a("li"),Mce=a("strong"),YLo=o("camembert"),KLo=o(" \u2014 "),bD=a("a"),ZLo=o("CamembertForSequenceClassification"),e8o=o(" (CamemBERT model)"),o8o=l(),y1=a("li"),Ece=a("strong"),r8o=o("canine"),t8o=o(" \u2014 "),vD=a("a"),a8o=o("CanineForSequenceClassification"),n8o=o(" (Canine model)"),s8o=l(),L1=a("li"),Cce=a("strong"),l8o=o("convbert"),i8o=o(" \u2014 "),FD=a("a"),d8o=o("ConvBertForSequenceClassification"),c8o=o(" (ConvBERT model)"),f8o=l(),x1=a("li"),wce=a("strong"),m8o=o("ctrl"),g8o=o(" \u2014 "),TD=a("a"),h8o=o("CTRLForSequenceClassification"),p8o=o(" (CTRL model)"),u8o=l(),$1=a("li"),Ace=a("strong"),_8o=o("data2vec-text"),b8o=o(" \u2014 "),MD=a("a"),v8o=o("Data2VecTextForSequenceClassification"),F8o=o(" (Data2VecText model)"),T8o=l(),k1=a("li"),yce=a("strong"),M8o=o("deberta"),E8o=o(" \u2014 "),ED=a("a"),C8o=o("DebertaForSequenceClassification"),w8o=o(" (DeBERTa model)"),A8o=l(),S1=a("li"),Lce=a("strong"),y8o=o("deberta-v2"),L8o=o(" \u2014 "),CD=a("a"),x8o=o("DebertaV2ForSequenceClassification"),$8o=o(" (DeBERTa-v2 model)"),k8o=l(),R1=a("li"),xce=a("strong"),S8o=o("distilbert"),R8o=o(" \u2014 "),wD=a("a"),B8o=o("DistilBertForSequenceClassification"),P8o=o(" (DistilBERT model)"),I8o=l(),B1=a("li"),$ce=a("strong"),q8o=o("electra"),N8o=o(" \u2014 "),AD=a("a"),j8o=o("ElectraForSequenceClassification"),D8o=o(" (ELECTRA model)"),G8o=l(),P1=a("li"),kce=a("strong"),O8o=o("flaubert"),V8o=o(" \u2014 "),yD=a("a"),X8o=o("FlaubertForSequenceClassification"),z8o=o(" (FlauBERT model)"),Q8o=l(),I1=a("li"),Sce=a("strong"),W8o=o("fnet"),H8o=o(" \u2014 "),LD=a("a"),U8o=o("FNetForSequenceClassification"),J8o=o(" (FNet model)"),Y8o=l(),q1=a("li"),Rce=a("strong"),K8o=o("funnel"),Z8o=o(" \u2014 "),xD=a("a"),exo=o("FunnelForSequenceClassification"),oxo=o(" (Funnel Transformer model)"),rxo=l(),N1=a("li"),Bce=a("strong"),txo=o("gpt2"),axo=o(" \u2014 "),$D=a("a"),nxo=o("GPT2ForSequenceClassification"),sxo=o(" (OpenAI GPT-2 model)"),lxo=l(),j1=a("li"),Pce=a("strong"),ixo=o("gpt_neo"),dxo=o(" \u2014 "),kD=a("a"),cxo=o("GPTNeoForSequenceClassification"),fxo=o(" (GPT Neo model)"),mxo=l(),D1=a("li"),Ice=a("strong"),gxo=o("gptj"),hxo=o(" \u2014 "),SD=a("a"),pxo=o("GPTJForSequenceClassification"),uxo=o(" (GPT-J model)"),_xo=l(),G1=a("li"),qce=a("strong"),bxo=o("ibert"),vxo=o(" \u2014 "),RD=a("a"),Fxo=o("IBertForSequenceClassification"),Txo=o(" (I-BERT model)"),Mxo=l(),O1=a("li"),Nce=a("strong"),Exo=o("layoutlm"),Cxo=o(" \u2014 "),BD=a("a"),wxo=o("LayoutLMForSequenceClassification"),Axo=o(" (LayoutLM model)"),yxo=l(),V1=a("li"),jce=a("strong"),Lxo=o("layoutlmv2"),xxo=o(" \u2014 "),PD=a("a"),$xo=o("LayoutLMv2ForSequenceClassification"),kxo=o(" (LayoutLMv2 model)"),Sxo=l(),X1=a("li"),Dce=a("strong"),Rxo=o("led"),Bxo=o(" \u2014 "),ID=a("a"),Pxo=o("LEDForSequenceClassification"),Ixo=o(" (LED model)"),qxo=l(),z1=a("li"),Gce=a("strong"),Nxo=o("longformer"),jxo=o(" \u2014 "),qD=a("a"),Dxo=o("LongformerForSequenceClassification"),Gxo=o(" (Longformer model)"),Oxo=l(),Q1=a("li"),Oce=a("strong"),Vxo=o("mbart"),Xxo=o(" \u2014 "),ND=a("a"),zxo=o("MBartForSequenceClassification"),Qxo=o(" (mBART model)"),Wxo=l(),W1=a("li"),Vce=a("strong"),Hxo=o("megatron-bert"),Uxo=o(" \u2014 "),jD=a("a"),Jxo=o("MegatronBertForSequenceClassification"),Yxo=o(" (MegatronBert model)"),Kxo=l(),H1=a("li"),Xce=a("strong"),Zxo=o("mobilebert"),e9o=o(" \u2014 "),DD=a("a"),o9o=o("MobileBertForSequenceClassification"),r9o=o(" (MobileBERT model)"),t9o=l(),U1=a("li"),zce=a("strong"),a9o=o("mpnet"),n9o=o(" \u2014 "),GD=a("a"),s9o=o("MPNetForSequenceClassification"),l9o=o(" (MPNet model)"),i9o=l(),J1=a("li"),Qce=a("strong"),d9o=o("nystromformer"),c9o=o(" \u2014 "),OD=a("a"),f9o=o("NystromformerForSequenceClassification"),m9o=o(" (Nystromformer model)"),g9o=l(),Y1=a("li"),Wce=a("strong"),h9o=o("openai-gpt"),p9o=o(" \u2014 "),VD=a("a"),u9o=o("OpenAIGPTForSequenceClassification"),_9o=o(" (OpenAI GPT model)"),b9o=l(),K1=a("li"),Hce=a("strong"),v9o=o("perceiver"),F9o=o(" \u2014 "),XD=a("a"),T9o=o("PerceiverForSequenceClassification"),M9o=o(" (Perceiver model)"),E9o=l(),Z1=a("li"),Uce=a("strong"),C9o=o("plbart"),w9o=o(" \u2014 "),zD=a("a"),A9o=o("PLBartForSequenceClassification"),y9o=o(" (PLBart model)"),L9o=l(),eb=a("li"),Jce=a("strong"),x9o=o("qdqbert"),$9o=o(" \u2014 "),QD=a("a"),k9o=o("QDQBertForSequenceClassification"),S9o=o(" (QDQBert model)"),R9o=l(),ob=a("li"),Yce=a("strong"),B9o=o("reformer"),P9o=o(" \u2014 "),WD=a("a"),I9o=o("ReformerForSequenceClassification"),q9o=o(" (Reformer model)"),N9o=l(),rb=a("li"),Kce=a("strong"),j9o=o("rembert"),D9o=o(" \u2014 "),HD=a("a"),G9o=o("RemBertForSequenceClassification"),O9o=o(" (RemBERT model)"),V9o=l(),tb=a("li"),Zce=a("strong"),X9o=o("roberta"),z9o=o(" \u2014 "),UD=a("a"),Q9o=o("RobertaForSequenceClassification"),W9o=o(" (RoBERTa model)"),H9o=l(),ab=a("li"),efe=a("strong"),U9o=o("roformer"),J9o=o(" \u2014 "),JD=a("a"),Y9o=o("RoFormerForSequenceClassification"),K9o=o(" (RoFormer model)"),Z9o=l(),nb=a("li"),ofe=a("strong"),e$o=o("squeezebert"),o$o=o(" \u2014 "),YD=a("a"),r$o=o("SqueezeBertForSequenceClassification"),t$o=o(" (SqueezeBERT model)"),a$o=l(),sb=a("li"),rfe=a("strong"),n$o=o("tapas"),s$o=o(" \u2014 "),KD=a("a"),l$o=o("TapasForSequenceClassification"),i$o=o(" (TAPAS model)"),d$o=l(),lb=a("li"),tfe=a("strong"),c$o=o("tapex"),f$o=o(" \u2014 "),ZD=a("a"),m$o=o("BartForSequenceClassification"),g$o=o(" (TAPEX model)"),h$o=l(),ib=a("li"),afe=a("strong"),p$o=o("transfo-xl"),u$o=o(" \u2014 "),eG=a("a"),_$o=o("TransfoXLForSequenceClassification"),b$o=o(" (Transformer-XL model)"),v$o=l(),db=a("li"),nfe=a("strong"),F$o=o("xlm"),T$o=o(" \u2014 "),oG=a("a"),M$o=o("XLMForSequenceClassification"),E$o=o(" (XLM model)"),C$o=l(),cb=a("li"),sfe=a("strong"),w$o=o("xlm-roberta"),A$o=o(" \u2014 "),rG=a("a"),y$o=o("XLMRobertaForSequenceClassification"),L$o=o(" (XLM-RoBERTa model)"),x$o=l(),fb=a("li"),lfe=a("strong"),$$o=o("xlm-roberta-xl"),k$o=o(" \u2014 "),tG=a("a"),S$o=o("XLMRobertaXLForSequenceClassification"),R$o=o(" (XLM-RoBERTa-XL model)"),B$o=l(),mb=a("li"),ife=a("strong"),P$o=o("xlnet"),I$o=o(" \u2014 "),aG=a("a"),q$o=o("XLNetForSequenceClassification"),N$o=o(" (XLNet model)"),j$o=l(),gb=a("li"),dfe=a("strong"),D$o=o("yoso"),G$o=o(" \u2014 "),nG=a("a"),O$o=o("YosoForSequenceClassification"),V$o=o(" (YOSO model)"),X$o=l(),hb=a("p"),z$o=o("The model is set in evaluation mode by default using "),cfe=a("code"),Q$o=o("model.eval()"),W$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=a("code"),H$o=o("model.train()"),U$o=l(),F(pb.$$.fragment),pIe=l(),Di=a("h2"),ub=a("a"),mfe=a("span"),F(Z0.$$.fragment),J$o=l(),gfe=a("span"),Y$o=o("AutoModelForMultipleChoice"),uIe=l(),Bo=a("div"),F(ey.$$.fragment),K$o=l(),Gi=a("p"),Z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sG=a("a"),eko=o("from_pretrained()"),oko=o(" class method or the "),lG=a("a"),rko=o("from_config()"),tko=o(` class
method.`),ako=l(),oy=a("p"),nko=o("This class cannot be instantiated directly using "),hfe=a("code"),sko=o("__init__()"),lko=o(" (throws an error)."),iko=l(),lt=a("div"),F(ry.$$.fragment),dko=l(),pfe=a("p"),cko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fko=l(),Oi=a("p"),mko=o(`Note:
Loading a model from its configuration file does `),ufe=a("strong"),gko=o("not"),hko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),pko=o("from_pretrained()"),uko=o(" to load the model weights."),_ko=l(),F(_b.$$.fragment),bko=l(),eo=a("div"),F(ty.$$.fragment),vko=l(),_fe=a("p"),Fko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tko=l(),Sa=a("p"),Mko=o("The model class to instantiate is selected based on the "),bfe=a("code"),Eko=o("model_type"),Cko=o(` property of the config object (either
passed as an argument or loaded from `),vfe=a("code"),wko=o("pretrained_model_name_or_path"),Ako=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),yko=o("pretrained_model_name_or_path"),Lko=o(":"),xko=l(),Y=a("ul"),bb=a("li"),Tfe=a("strong"),$ko=o("albert"),kko=o(" \u2014 "),dG=a("a"),Sko=o("AlbertForMultipleChoice"),Rko=o(" (ALBERT model)"),Bko=l(),vb=a("li"),Mfe=a("strong"),Pko=o("bert"),Iko=o(" \u2014 "),cG=a("a"),qko=o("BertForMultipleChoice"),Nko=o(" (BERT model)"),jko=l(),Fb=a("li"),Efe=a("strong"),Dko=o("big_bird"),Gko=o(" \u2014 "),fG=a("a"),Oko=o("BigBirdForMultipleChoice"),Vko=o(" (BigBird model)"),Xko=l(),Tb=a("li"),Cfe=a("strong"),zko=o("camembert"),Qko=o(" \u2014 "),mG=a("a"),Wko=o("CamembertForMultipleChoice"),Hko=o(" (CamemBERT model)"),Uko=l(),Mb=a("li"),wfe=a("strong"),Jko=o("canine"),Yko=o(" \u2014 "),gG=a("a"),Kko=o("CanineForMultipleChoice"),Zko=o(" (Canine model)"),eSo=l(),Eb=a("li"),Afe=a("strong"),oSo=o("convbert"),rSo=o(" \u2014 "),hG=a("a"),tSo=o("ConvBertForMultipleChoice"),aSo=o(" (ConvBERT model)"),nSo=l(),Cb=a("li"),yfe=a("strong"),sSo=o("data2vec-text"),lSo=o(" \u2014 "),pG=a("a"),iSo=o("Data2VecTextForMultipleChoice"),dSo=o(" (Data2VecText model)"),cSo=l(),wb=a("li"),Lfe=a("strong"),fSo=o("deberta-v2"),mSo=o(" \u2014 "),uG=a("a"),gSo=o("DebertaV2ForMultipleChoice"),hSo=o(" (DeBERTa-v2 model)"),pSo=l(),Ab=a("li"),xfe=a("strong"),uSo=o("distilbert"),_So=o(" \u2014 "),_G=a("a"),bSo=o("DistilBertForMultipleChoice"),vSo=o(" (DistilBERT model)"),FSo=l(),yb=a("li"),$fe=a("strong"),TSo=o("electra"),MSo=o(" \u2014 "),bG=a("a"),ESo=o("ElectraForMultipleChoice"),CSo=o(" (ELECTRA model)"),wSo=l(),Lb=a("li"),kfe=a("strong"),ASo=o("flaubert"),ySo=o(" \u2014 "),vG=a("a"),LSo=o("FlaubertForMultipleChoice"),xSo=o(" (FlauBERT model)"),$So=l(),xb=a("li"),Sfe=a("strong"),kSo=o("fnet"),SSo=o(" \u2014 "),FG=a("a"),RSo=o("FNetForMultipleChoice"),BSo=o(" (FNet model)"),PSo=l(),$b=a("li"),Rfe=a("strong"),ISo=o("funnel"),qSo=o(" \u2014 "),TG=a("a"),NSo=o("FunnelForMultipleChoice"),jSo=o(" (Funnel Transformer model)"),DSo=l(),kb=a("li"),Bfe=a("strong"),GSo=o("ibert"),OSo=o(" \u2014 "),MG=a("a"),VSo=o("IBertForMultipleChoice"),XSo=o(" (I-BERT model)"),zSo=l(),Sb=a("li"),Pfe=a("strong"),QSo=o("longformer"),WSo=o(" \u2014 "),EG=a("a"),HSo=o("LongformerForMultipleChoice"),USo=o(" (Longformer model)"),JSo=l(),Rb=a("li"),Ife=a("strong"),YSo=o("megatron-bert"),KSo=o(" \u2014 "),CG=a("a"),ZSo=o("MegatronBertForMultipleChoice"),eRo=o(" (MegatronBert model)"),oRo=l(),Bb=a("li"),qfe=a("strong"),rRo=o("mobilebert"),tRo=o(" \u2014 "),wG=a("a"),aRo=o("MobileBertForMultipleChoice"),nRo=o(" (MobileBERT model)"),sRo=l(),Pb=a("li"),Nfe=a("strong"),lRo=o("mpnet"),iRo=o(" \u2014 "),AG=a("a"),dRo=o("MPNetForMultipleChoice"),cRo=o(" (MPNet model)"),fRo=l(),Ib=a("li"),jfe=a("strong"),mRo=o("nystromformer"),gRo=o(" \u2014 "),yG=a("a"),hRo=o("NystromformerForMultipleChoice"),pRo=o(" (Nystromformer model)"),uRo=l(),qb=a("li"),Dfe=a("strong"),_Ro=o("qdqbert"),bRo=o(" \u2014 "),LG=a("a"),vRo=o("QDQBertForMultipleChoice"),FRo=o(" (QDQBert model)"),TRo=l(),Nb=a("li"),Gfe=a("strong"),MRo=o("rembert"),ERo=o(" \u2014 "),xG=a("a"),CRo=o("RemBertForMultipleChoice"),wRo=o(" (RemBERT model)"),ARo=l(),jb=a("li"),Ofe=a("strong"),yRo=o("roberta"),LRo=o(" \u2014 "),$G=a("a"),xRo=o("RobertaForMultipleChoice"),$Ro=o(" (RoBERTa model)"),kRo=l(),Db=a("li"),Vfe=a("strong"),SRo=o("roformer"),RRo=o(" \u2014 "),kG=a("a"),BRo=o("RoFormerForMultipleChoice"),PRo=o(" (RoFormer model)"),IRo=l(),Gb=a("li"),Xfe=a("strong"),qRo=o("squeezebert"),NRo=o(" \u2014 "),SG=a("a"),jRo=o("SqueezeBertForMultipleChoice"),DRo=o(" (SqueezeBERT model)"),GRo=l(),Ob=a("li"),zfe=a("strong"),ORo=o("xlm"),VRo=o(" \u2014 "),RG=a("a"),XRo=o("XLMForMultipleChoice"),zRo=o(" (XLM model)"),QRo=l(),Vb=a("li"),Qfe=a("strong"),WRo=o("xlm-roberta"),HRo=o(" \u2014 "),BG=a("a"),URo=o("XLMRobertaForMultipleChoice"),JRo=o(" (XLM-RoBERTa model)"),YRo=l(),Xb=a("li"),Wfe=a("strong"),KRo=o("xlm-roberta-xl"),ZRo=o(" \u2014 "),PG=a("a"),eBo=o("XLMRobertaXLForMultipleChoice"),oBo=o(" (XLM-RoBERTa-XL model)"),rBo=l(),zb=a("li"),Hfe=a("strong"),tBo=o("xlnet"),aBo=o(" \u2014 "),IG=a("a"),nBo=o("XLNetForMultipleChoice"),sBo=o(" (XLNet model)"),lBo=l(),Qb=a("li"),Ufe=a("strong"),iBo=o("yoso"),dBo=o(" \u2014 "),qG=a("a"),cBo=o("YosoForMultipleChoice"),fBo=o(" (YOSO model)"),mBo=l(),Wb=a("p"),gBo=o("The model is set in evaluation mode by default using "),Jfe=a("code"),hBo=o("model.eval()"),pBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=a("code"),uBo=o("model.train()"),_Bo=l(),F(Hb.$$.fragment),_Ie=l(),Vi=a("h2"),Ub=a("a"),Kfe=a("span"),F(ay.$$.fragment),bBo=l(),Zfe=a("span"),vBo=o("AutoModelForNextSentencePrediction"),bIe=l(),Po=a("div"),F(ny.$$.fragment),FBo=l(),Xi=a("p"),TBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NG=a("a"),MBo=o("from_pretrained()"),EBo=o(" class method or the "),jG=a("a"),CBo=o("from_config()"),wBo=o(` class
method.`),ABo=l(),sy=a("p"),yBo=o("This class cannot be instantiated directly using "),eme=a("code"),LBo=o("__init__()"),xBo=o(" (throws an error)."),$Bo=l(),it=a("div"),F(ly.$$.fragment),kBo=l(),ome=a("p"),SBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RBo=l(),zi=a("p"),BBo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),PBo=o("not"),IBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),qBo=o("from_pretrained()"),NBo=o(" to load the model weights."),jBo=l(),F(Jb.$$.fragment),DBo=l(),oo=a("div"),F(iy.$$.fragment),GBo=l(),tme=a("p"),OBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VBo=l(),Ra=a("p"),XBo=o("The model class to instantiate is selected based on the "),ame=a("code"),zBo=o("model_type"),QBo=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),WBo=o("pretrained_model_name_or_path"),HBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),UBo=o("pretrained_model_name_or_path"),JBo=o(":"),YBo=l(),Yr=a("ul"),Yb=a("li"),lme=a("strong"),KBo=o("bert"),ZBo=o(" \u2014 "),GG=a("a"),ePo=o("BertForNextSentencePrediction"),oPo=o(" (BERT model)"),rPo=l(),Kb=a("li"),ime=a("strong"),tPo=o("fnet"),aPo=o(" \u2014 "),OG=a("a"),nPo=o("FNetForNextSentencePrediction"),sPo=o(" (FNet model)"),lPo=l(),Zb=a("li"),dme=a("strong"),iPo=o("megatron-bert"),dPo=o(" \u2014 "),VG=a("a"),cPo=o("MegatronBertForNextSentencePrediction"),fPo=o(" (MegatronBert model)"),mPo=l(),e4=a("li"),cme=a("strong"),gPo=o("mobilebert"),hPo=o(" \u2014 "),XG=a("a"),pPo=o("MobileBertForNextSentencePrediction"),uPo=o(" (MobileBERT model)"),_Po=l(),o4=a("li"),fme=a("strong"),bPo=o("qdqbert"),vPo=o(" \u2014 "),zG=a("a"),FPo=o("QDQBertForNextSentencePrediction"),TPo=o(" (QDQBert model)"),MPo=l(),r4=a("p"),EPo=o("The model is set in evaluation mode by default using "),mme=a("code"),CPo=o("model.eval()"),wPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),APo=o("model.train()"),yPo=l(),F(t4.$$.fragment),vIe=l(),Qi=a("h2"),a4=a("a"),hme=a("span"),F(dy.$$.fragment),LPo=l(),pme=a("span"),xPo=o("AutoModelForTokenClassification"),FIe=l(),Io=a("div"),F(cy.$$.fragment),$Po=l(),Wi=a("p"),kPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QG=a("a"),SPo=o("from_pretrained()"),RPo=o(" class method or the "),WG=a("a"),BPo=o("from_config()"),PPo=o(` class
method.`),IPo=l(),fy=a("p"),qPo=o("This class cannot be instantiated directly using "),ume=a("code"),NPo=o("__init__()"),jPo=o(" (throws an error)."),DPo=l(),dt=a("div"),F(my.$$.fragment),GPo=l(),_me=a("p"),OPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VPo=l(),Hi=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),zPo=o("not"),QPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),WPo=o("from_pretrained()"),HPo=o(" to load the model weights."),UPo=l(),F(n4.$$.fragment),JPo=l(),ro=a("div"),F(gy.$$.fragment),YPo=l(),vme=a("p"),KPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZPo=l(),Ba=a("p"),eIo=o("The model class to instantiate is selected based on the "),Fme=a("code"),oIo=o("model_type"),rIo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),tIo=o("pretrained_model_name_or_path"),aIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),nIo=o("pretrained_model_name_or_path"),sIo=o(":"),lIo=l(),U=a("ul"),s4=a("li"),Eme=a("strong"),iIo=o("albert"),dIo=o(" \u2014 "),UG=a("a"),cIo=o("AlbertForTokenClassification"),fIo=o(" (ALBERT model)"),mIo=l(),l4=a("li"),Cme=a("strong"),gIo=o("bert"),hIo=o(" \u2014 "),JG=a("a"),pIo=o("BertForTokenClassification"),uIo=o(" (BERT model)"),_Io=l(),i4=a("li"),wme=a("strong"),bIo=o("big_bird"),vIo=o(" \u2014 "),YG=a("a"),FIo=o("BigBirdForTokenClassification"),TIo=o(" (BigBird model)"),MIo=l(),d4=a("li"),Ame=a("strong"),EIo=o("camembert"),CIo=o(" \u2014 "),KG=a("a"),wIo=o("CamembertForTokenClassification"),AIo=o(" (CamemBERT model)"),yIo=l(),c4=a("li"),yme=a("strong"),LIo=o("canine"),xIo=o(" \u2014 "),ZG=a("a"),$Io=o("CanineForTokenClassification"),kIo=o(" (Canine model)"),SIo=l(),f4=a("li"),Lme=a("strong"),RIo=o("convbert"),BIo=o(" \u2014 "),eO=a("a"),PIo=o("ConvBertForTokenClassification"),IIo=o(" (ConvBERT model)"),qIo=l(),m4=a("li"),xme=a("strong"),NIo=o("data2vec-text"),jIo=o(" \u2014 "),oO=a("a"),DIo=o("Data2VecTextForTokenClassification"),GIo=o(" (Data2VecText model)"),OIo=l(),g4=a("li"),$me=a("strong"),VIo=o("deberta"),XIo=o(" \u2014 "),rO=a("a"),zIo=o("DebertaForTokenClassification"),QIo=o(" (DeBERTa model)"),WIo=l(),h4=a("li"),kme=a("strong"),HIo=o("deberta-v2"),UIo=o(" \u2014 "),tO=a("a"),JIo=o("DebertaV2ForTokenClassification"),YIo=o(" (DeBERTa-v2 model)"),KIo=l(),p4=a("li"),Sme=a("strong"),ZIo=o("distilbert"),eqo=o(" \u2014 "),aO=a("a"),oqo=o("DistilBertForTokenClassification"),rqo=o(" (DistilBERT model)"),tqo=l(),u4=a("li"),Rme=a("strong"),aqo=o("electra"),nqo=o(" \u2014 "),nO=a("a"),sqo=o("ElectraForTokenClassification"),lqo=o(" (ELECTRA model)"),iqo=l(),_4=a("li"),Bme=a("strong"),dqo=o("flaubert"),cqo=o(" \u2014 "),sO=a("a"),fqo=o("FlaubertForTokenClassification"),mqo=o(" (FlauBERT model)"),gqo=l(),b4=a("li"),Pme=a("strong"),hqo=o("fnet"),pqo=o(" \u2014 "),lO=a("a"),uqo=o("FNetForTokenClassification"),_qo=o(" (FNet model)"),bqo=l(),v4=a("li"),Ime=a("strong"),vqo=o("funnel"),Fqo=o(" \u2014 "),iO=a("a"),Tqo=o("FunnelForTokenClassification"),Mqo=o(" (Funnel Transformer model)"),Eqo=l(),F4=a("li"),qme=a("strong"),Cqo=o("gpt2"),wqo=o(" \u2014 "),dO=a("a"),Aqo=o("GPT2ForTokenClassification"),yqo=o(" (OpenAI GPT-2 model)"),Lqo=l(),T4=a("li"),Nme=a("strong"),xqo=o("ibert"),$qo=o(" \u2014 "),cO=a("a"),kqo=o("IBertForTokenClassification"),Sqo=o(" (I-BERT model)"),Rqo=l(),M4=a("li"),jme=a("strong"),Bqo=o("layoutlm"),Pqo=o(" \u2014 "),fO=a("a"),Iqo=o("LayoutLMForTokenClassification"),qqo=o(" (LayoutLM model)"),Nqo=l(),E4=a("li"),Dme=a("strong"),jqo=o("layoutlmv2"),Dqo=o(" \u2014 "),mO=a("a"),Gqo=o("LayoutLMv2ForTokenClassification"),Oqo=o(" (LayoutLMv2 model)"),Vqo=l(),C4=a("li"),Gme=a("strong"),Xqo=o("longformer"),zqo=o(" \u2014 "),gO=a("a"),Qqo=o("LongformerForTokenClassification"),Wqo=o(" (Longformer model)"),Hqo=l(),w4=a("li"),Ome=a("strong"),Uqo=o("megatron-bert"),Jqo=o(" \u2014 "),hO=a("a"),Yqo=o("MegatronBertForTokenClassification"),Kqo=o(" (MegatronBert model)"),Zqo=l(),A4=a("li"),Vme=a("strong"),eNo=o("mobilebert"),oNo=o(" \u2014 "),pO=a("a"),rNo=o("MobileBertForTokenClassification"),tNo=o(" (MobileBERT model)"),aNo=l(),y4=a("li"),Xme=a("strong"),nNo=o("mpnet"),sNo=o(" \u2014 "),uO=a("a"),lNo=o("MPNetForTokenClassification"),iNo=o(" (MPNet model)"),dNo=l(),L4=a("li"),zme=a("strong"),cNo=o("nystromformer"),fNo=o(" \u2014 "),_O=a("a"),mNo=o("NystromformerForTokenClassification"),gNo=o(" (Nystromformer model)"),hNo=l(),x4=a("li"),Qme=a("strong"),pNo=o("qdqbert"),uNo=o(" \u2014 "),bO=a("a"),_No=o("QDQBertForTokenClassification"),bNo=o(" (QDQBert model)"),vNo=l(),$4=a("li"),Wme=a("strong"),FNo=o("rembert"),TNo=o(" \u2014 "),vO=a("a"),MNo=o("RemBertForTokenClassification"),ENo=o(" (RemBERT model)"),CNo=l(),k4=a("li"),Hme=a("strong"),wNo=o("roberta"),ANo=o(" \u2014 "),FO=a("a"),yNo=o("RobertaForTokenClassification"),LNo=o(" (RoBERTa model)"),xNo=l(),S4=a("li"),Ume=a("strong"),$No=o("roformer"),kNo=o(" \u2014 "),TO=a("a"),SNo=o("RoFormerForTokenClassification"),RNo=o(" (RoFormer model)"),BNo=l(),R4=a("li"),Jme=a("strong"),PNo=o("squeezebert"),INo=o(" \u2014 "),MO=a("a"),qNo=o("SqueezeBertForTokenClassification"),NNo=o(" (SqueezeBERT model)"),jNo=l(),B4=a("li"),Yme=a("strong"),DNo=o("xlm"),GNo=o(" \u2014 "),EO=a("a"),ONo=o("XLMForTokenClassification"),VNo=o(" (XLM model)"),XNo=l(),P4=a("li"),Kme=a("strong"),zNo=o("xlm-roberta"),QNo=o(" \u2014 "),CO=a("a"),WNo=o("XLMRobertaForTokenClassification"),HNo=o(" (XLM-RoBERTa model)"),UNo=l(),I4=a("li"),Zme=a("strong"),JNo=o("xlm-roberta-xl"),YNo=o(" \u2014 "),wO=a("a"),KNo=o("XLMRobertaXLForTokenClassification"),ZNo=o(" (XLM-RoBERTa-XL model)"),ejo=l(),q4=a("li"),ege=a("strong"),ojo=o("xlnet"),rjo=o(" \u2014 "),AO=a("a"),tjo=o("XLNetForTokenClassification"),ajo=o(" (XLNet model)"),njo=l(),N4=a("li"),oge=a("strong"),sjo=o("yoso"),ljo=o(" \u2014 "),yO=a("a"),ijo=o("YosoForTokenClassification"),djo=o(" (YOSO model)"),cjo=l(),j4=a("p"),fjo=o("The model is set in evaluation mode by default using "),rge=a("code"),mjo=o("model.eval()"),gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),hjo=o("model.train()"),pjo=l(),F(D4.$$.fragment),TIe=l(),Ui=a("h2"),G4=a("a"),age=a("span"),F(hy.$$.fragment),ujo=l(),nge=a("span"),_jo=o("AutoModelForQuestionAnswering"),MIe=l(),qo=a("div"),F(py.$$.fragment),bjo=l(),Ji=a("p"),vjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LO=a("a"),Fjo=o("from_pretrained()"),Tjo=o(" class method or the "),xO=a("a"),Mjo=o("from_config()"),Ejo=o(` class
method.`),Cjo=l(),uy=a("p"),wjo=o("This class cannot be instantiated directly using "),sge=a("code"),Ajo=o("__init__()"),yjo=o(" (throws an error)."),Ljo=l(),ct=a("div"),F(_y.$$.fragment),xjo=l(),lge=a("p"),$jo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kjo=l(),Yi=a("p"),Sjo=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),Rjo=o("not"),Bjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),Pjo=o("from_pretrained()"),Ijo=o(" to load the model weights."),qjo=l(),F(O4.$$.fragment),Njo=l(),to=a("div"),F(by.$$.fragment),jjo=l(),dge=a("p"),Djo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gjo=l(),Pa=a("p"),Ojo=o("The model class to instantiate is selected based on the "),cge=a("code"),Vjo=o("model_type"),Xjo=o(` property of the config object (either
passed as an argument or loaded from `),fge=a("code"),zjo=o("pretrained_model_name_or_path"),Qjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=a("code"),Wjo=o("pretrained_model_name_or_path"),Hjo=o(":"),Ujo=l(),O=a("ul"),V4=a("li"),gge=a("strong"),Jjo=o("albert"),Yjo=o(" \u2014 "),kO=a("a"),Kjo=o("AlbertForQuestionAnswering"),Zjo=o(" (ALBERT model)"),eDo=l(),X4=a("li"),hge=a("strong"),oDo=o("bart"),rDo=o(" \u2014 "),SO=a("a"),tDo=o("BartForQuestionAnswering"),aDo=o(" (BART model)"),nDo=l(),z4=a("li"),pge=a("strong"),sDo=o("bert"),lDo=o(" \u2014 "),RO=a("a"),iDo=o("BertForQuestionAnswering"),dDo=o(" (BERT model)"),cDo=l(),Q4=a("li"),uge=a("strong"),fDo=o("big_bird"),mDo=o(" \u2014 "),BO=a("a"),gDo=o("BigBirdForQuestionAnswering"),hDo=o(" (BigBird model)"),pDo=l(),W4=a("li"),_ge=a("strong"),uDo=o("bigbird_pegasus"),_Do=o(" \u2014 "),PO=a("a"),bDo=o("BigBirdPegasusForQuestionAnswering"),vDo=o(" (BigBirdPegasus model)"),FDo=l(),H4=a("li"),bge=a("strong"),TDo=o("camembert"),MDo=o(" \u2014 "),IO=a("a"),EDo=o("CamembertForQuestionAnswering"),CDo=o(" (CamemBERT model)"),wDo=l(),U4=a("li"),vge=a("strong"),ADo=o("canine"),yDo=o(" \u2014 "),qO=a("a"),LDo=o("CanineForQuestionAnswering"),xDo=o(" (Canine model)"),$Do=l(),J4=a("li"),Fge=a("strong"),kDo=o("convbert"),SDo=o(" \u2014 "),NO=a("a"),RDo=o("ConvBertForQuestionAnswering"),BDo=o(" (ConvBERT model)"),PDo=l(),Y4=a("li"),Tge=a("strong"),IDo=o("data2vec-text"),qDo=o(" \u2014 "),jO=a("a"),NDo=o("Data2VecTextForQuestionAnswering"),jDo=o(" (Data2VecText model)"),DDo=l(),K4=a("li"),Mge=a("strong"),GDo=o("deberta"),ODo=o(" \u2014 "),DO=a("a"),VDo=o("DebertaForQuestionAnswering"),XDo=o(" (DeBERTa model)"),zDo=l(),Z4=a("li"),Ege=a("strong"),QDo=o("deberta-v2"),WDo=o(" \u2014 "),GO=a("a"),HDo=o("DebertaV2ForQuestionAnswering"),UDo=o(" (DeBERTa-v2 model)"),JDo=l(),e5=a("li"),Cge=a("strong"),YDo=o("distilbert"),KDo=o(" \u2014 "),OO=a("a"),ZDo=o("DistilBertForQuestionAnswering"),eGo=o(" (DistilBERT model)"),oGo=l(),o5=a("li"),wge=a("strong"),rGo=o("electra"),tGo=o(" \u2014 "),VO=a("a"),aGo=o("ElectraForQuestionAnswering"),nGo=o(" (ELECTRA model)"),sGo=l(),r5=a("li"),Age=a("strong"),lGo=o("flaubert"),iGo=o(" \u2014 "),XO=a("a"),dGo=o("FlaubertForQuestionAnsweringSimple"),cGo=o(" (FlauBERT model)"),fGo=l(),t5=a("li"),yge=a("strong"),mGo=o("fnet"),gGo=o(" \u2014 "),zO=a("a"),hGo=o("FNetForQuestionAnswering"),pGo=o(" (FNet model)"),uGo=l(),a5=a("li"),Lge=a("strong"),_Go=o("funnel"),bGo=o(" \u2014 "),QO=a("a"),vGo=o("FunnelForQuestionAnswering"),FGo=o(" (Funnel Transformer model)"),TGo=l(),n5=a("li"),xge=a("strong"),MGo=o("gptj"),EGo=o(" \u2014 "),WO=a("a"),CGo=o("GPTJForQuestionAnswering"),wGo=o(" (GPT-J model)"),AGo=l(),s5=a("li"),$ge=a("strong"),yGo=o("ibert"),LGo=o(" \u2014 "),HO=a("a"),xGo=o("IBertForQuestionAnswering"),$Go=o(" (I-BERT model)"),kGo=l(),l5=a("li"),kge=a("strong"),SGo=o("layoutlmv2"),RGo=o(" \u2014 "),UO=a("a"),BGo=o("LayoutLMv2ForQuestionAnswering"),PGo=o(" (LayoutLMv2 model)"),IGo=l(),i5=a("li"),Sge=a("strong"),qGo=o("led"),NGo=o(" \u2014 "),JO=a("a"),jGo=o("LEDForQuestionAnswering"),DGo=o(" (LED model)"),GGo=l(),d5=a("li"),Rge=a("strong"),OGo=o("longformer"),VGo=o(" \u2014 "),YO=a("a"),XGo=o("LongformerForQuestionAnswering"),zGo=o(" (Longformer model)"),QGo=l(),c5=a("li"),Bge=a("strong"),WGo=o("lxmert"),HGo=o(" \u2014 "),KO=a("a"),UGo=o("LxmertForQuestionAnswering"),JGo=o(" (LXMERT model)"),YGo=l(),f5=a("li"),Pge=a("strong"),KGo=o("mbart"),ZGo=o(" \u2014 "),ZO=a("a"),eOo=o("MBartForQuestionAnswering"),oOo=o(" (mBART model)"),rOo=l(),m5=a("li"),Ige=a("strong"),tOo=o("megatron-bert"),aOo=o(" \u2014 "),eV=a("a"),nOo=o("MegatronBertForQuestionAnswering"),sOo=o(" (MegatronBert model)"),lOo=l(),g5=a("li"),qge=a("strong"),iOo=o("mobilebert"),dOo=o(" \u2014 "),oV=a("a"),cOo=o("MobileBertForQuestionAnswering"),fOo=o(" (MobileBERT model)"),mOo=l(),h5=a("li"),Nge=a("strong"),gOo=o("mpnet"),hOo=o(" \u2014 "),rV=a("a"),pOo=o("MPNetForQuestionAnswering"),uOo=o(" (MPNet model)"),_Oo=l(),p5=a("li"),jge=a("strong"),bOo=o("nystromformer"),vOo=o(" \u2014 "),tV=a("a"),FOo=o("NystromformerForQuestionAnswering"),TOo=o(" (Nystromformer model)"),MOo=l(),u5=a("li"),Dge=a("strong"),EOo=o("qdqbert"),COo=o(" \u2014 "),aV=a("a"),wOo=o("QDQBertForQuestionAnswering"),AOo=o(" (QDQBert model)"),yOo=l(),_5=a("li"),Gge=a("strong"),LOo=o("reformer"),xOo=o(" \u2014 "),nV=a("a"),$Oo=o("ReformerForQuestionAnswering"),kOo=o(" (Reformer model)"),SOo=l(),b5=a("li"),Oge=a("strong"),ROo=o("rembert"),BOo=o(" \u2014 "),sV=a("a"),POo=o("RemBertForQuestionAnswering"),IOo=o(" (RemBERT model)"),qOo=l(),v5=a("li"),Vge=a("strong"),NOo=o("roberta"),jOo=o(" \u2014 "),lV=a("a"),DOo=o("RobertaForQuestionAnswering"),GOo=o(" (RoBERTa model)"),OOo=l(),F5=a("li"),Xge=a("strong"),VOo=o("roformer"),XOo=o(" \u2014 "),iV=a("a"),zOo=o("RoFormerForQuestionAnswering"),QOo=o(" (RoFormer model)"),WOo=l(),T5=a("li"),zge=a("strong"),HOo=o("splinter"),UOo=o(" \u2014 "),dV=a("a"),JOo=o("SplinterForQuestionAnswering"),YOo=o(" (Splinter model)"),KOo=l(),M5=a("li"),Qge=a("strong"),ZOo=o("squeezebert"),eVo=o(" \u2014 "),cV=a("a"),oVo=o("SqueezeBertForQuestionAnswering"),rVo=o(" (SqueezeBERT model)"),tVo=l(),E5=a("li"),Wge=a("strong"),aVo=o("xlm"),nVo=o(" \u2014 "),fV=a("a"),sVo=o("XLMForQuestionAnsweringSimple"),lVo=o(" (XLM model)"),iVo=l(),C5=a("li"),Hge=a("strong"),dVo=o("xlm-roberta"),cVo=o(" \u2014 "),mV=a("a"),fVo=o("XLMRobertaForQuestionAnswering"),mVo=o(" (XLM-RoBERTa model)"),gVo=l(),w5=a("li"),Uge=a("strong"),hVo=o("xlm-roberta-xl"),pVo=o(" \u2014 "),gV=a("a"),uVo=o("XLMRobertaXLForQuestionAnswering"),_Vo=o(" (XLM-RoBERTa-XL model)"),bVo=l(),A5=a("li"),Jge=a("strong"),vVo=o("xlnet"),FVo=o(" \u2014 "),hV=a("a"),TVo=o("XLNetForQuestionAnsweringSimple"),MVo=o(" (XLNet model)"),EVo=l(),y5=a("li"),Yge=a("strong"),CVo=o("yoso"),wVo=o(" \u2014 "),pV=a("a"),AVo=o("YosoForQuestionAnswering"),yVo=o(" (YOSO model)"),LVo=l(),L5=a("p"),xVo=o("The model is set in evaluation mode by default using "),Kge=a("code"),$Vo=o("model.eval()"),kVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),SVo=o("model.train()"),RVo=l(),F(x5.$$.fragment),EIe=l(),Ki=a("h2"),$5=a("a"),ehe=a("span"),F(vy.$$.fragment),BVo=l(),ohe=a("span"),PVo=o("AutoModelForTableQuestionAnswering"),CIe=l(),No=a("div"),F(Fy.$$.fragment),IVo=l(),Zi=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uV=a("a"),NVo=o("from_pretrained()"),jVo=o(" class method or the "),_V=a("a"),DVo=o("from_config()"),GVo=o(` class
method.`),OVo=l(),Ty=a("p"),VVo=o("This class cannot be instantiated directly using "),rhe=a("code"),XVo=o("__init__()"),zVo=o(" (throws an error)."),QVo=l(),ft=a("div"),F(My.$$.fragment),WVo=l(),the=a("p"),HVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UVo=l(),ed=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=a("a"),ZVo=o("from_pretrained()"),eXo=o(" to load the model weights."),oXo=l(),F(k5.$$.fragment),rXo=l(),ao=a("div"),F(Ey.$$.fragment),tXo=l(),nhe=a("p"),aXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nXo=l(),Ia=a("p"),sXo=o("The model class to instantiate is selected based on the "),she=a("code"),lXo=o("model_type"),iXo=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),fXo=o("pretrained_model_name_or_path"),mXo=o(":"),gXo=l(),dhe=a("ul"),S5=a("li"),che=a("strong"),hXo=o("tapas"),pXo=o(" \u2014 "),vV=a("a"),uXo=o("TapasForQuestionAnswering"),_Xo=o(" (TAPAS model)"),bXo=l(),R5=a("p"),vXo=o("The model is set in evaluation mode by default using "),fhe=a("code"),FXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=a("code"),MXo=o("model.train()"),EXo=l(),F(B5.$$.fragment),wIe=l(),od=a("h2"),P5=a("a"),ghe=a("span"),F(Cy.$$.fragment),CXo=l(),hhe=a("span"),wXo=o("AutoModelForImageClassification"),AIe=l(),jo=a("div"),F(wy.$$.fragment),AXo=l(),rd=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FV=a("a"),LXo=o("from_pretrained()"),xXo=o(" class method or the "),TV=a("a"),$Xo=o("from_config()"),kXo=o(` class
method.`),SXo=l(),Ay=a("p"),RXo=o("This class cannot be instantiated directly using "),phe=a("code"),BXo=o("__init__()"),PXo=o(" (throws an error)."),IXo=l(),mt=a("div"),F(yy.$$.fragment),qXo=l(),uhe=a("p"),NXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jXo=l(),td=a("p"),DXo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),GXo=o("not"),OXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),VXo=o("from_pretrained()"),XXo=o(" to load the model weights."),zXo=l(),F(I5.$$.fragment),QXo=l(),no=a("div"),F(Ly.$$.fragment),WXo=l(),bhe=a("p"),HXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UXo=l(),qa=a("p"),JXo=o("The model class to instantiate is selected based on the "),vhe=a("code"),YXo=o("model_type"),KXo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(":"),tzo=l(),Fe=a("ul"),q5=a("li"),Mhe=a("strong"),azo=o("beit"),nzo=o(" \u2014 "),EV=a("a"),szo=o("BeitForImageClassification"),lzo=o(" (BEiT model)"),izo=l(),N5=a("li"),Ehe=a("strong"),dzo=o("convnext"),czo=o(" \u2014 "),CV=a("a"),fzo=o("ConvNextForImageClassification"),mzo=o(" (ConvNext model)"),gzo=l(),j5=a("li"),Che=a("strong"),hzo=o("data2vec-vision"),pzo=o(" \u2014 "),wV=a("a"),uzo=o("Data2VecVisionForImageClassification"),_zo=o(" (Data2VecVision model)"),bzo=l(),Bs=a("li"),whe=a("strong"),vzo=o("deit"),Fzo=o(" \u2014 "),AV=a("a"),Tzo=o("DeiTForImageClassification"),Mzo=o(" or "),yV=a("a"),Ezo=o("DeiTForImageClassificationWithTeacher"),Czo=o(" (DeiT model)"),wzo=l(),D5=a("li"),Ahe=a("strong"),Azo=o("imagegpt"),yzo=o(" \u2014 "),LV=a("a"),Lzo=o("ImageGPTForImageClassification"),xzo=o(" (ImageGPT model)"),$zo=l(),gt=a("li"),yhe=a("strong"),kzo=o("perceiver"),Szo=o(" \u2014 "),xV=a("a"),Rzo=o("PerceiverForImageClassificationLearned"),Bzo=o(" or "),$V=a("a"),Pzo=o("PerceiverForImageClassificationFourier"),Izo=o(" or "),kV=a("a"),qzo=o("PerceiverForImageClassificationConvProcessing"),Nzo=o(" (Perceiver model)"),jzo=l(),G5=a("li"),Lhe=a("strong"),Dzo=o("poolformer"),Gzo=o(" \u2014 "),SV=a("a"),Ozo=o("PoolFormerForImageClassification"),Vzo=o(" (PoolFormer model)"),Xzo=l(),O5=a("li"),xhe=a("strong"),zzo=o("regnet"),Qzo=o(" \u2014 "),RV=a("a"),Wzo=o("RegNetForImageClassification"),Hzo=o(" (RegNet model)"),Uzo=l(),V5=a("li"),$he=a("strong"),Jzo=o("resnet"),Yzo=o(" \u2014 "),BV=a("a"),Kzo=o("ResNetForImageClassification"),Zzo=o(" (ResNet model)"),eQo=l(),X5=a("li"),khe=a("strong"),oQo=o("segformer"),rQo=o(" \u2014 "),PV=a("a"),tQo=o("SegformerForImageClassification"),aQo=o(" (SegFormer model)"),nQo=l(),z5=a("li"),She=a("strong"),sQo=o("swin"),lQo=o(" \u2014 "),IV=a("a"),iQo=o("SwinForImageClassification"),dQo=o(" (Swin model)"),cQo=l(),Q5=a("li"),Rhe=a("strong"),fQo=o("van"),mQo=o(" \u2014 "),qV=a("a"),gQo=o("VanForImageClassification"),hQo=o(" (VAN model)"),pQo=l(),W5=a("li"),Bhe=a("strong"),uQo=o("vit"),_Qo=o(" \u2014 "),NV=a("a"),bQo=o("ViTForImageClassification"),vQo=o(" (ViT model)"),FQo=l(),H5=a("p"),TQo=o("The model is set in evaluation mode by default using "),Phe=a("code"),MQo=o("model.eval()"),EQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),CQo=o("model.train()"),wQo=l(),F(U5.$$.fragment),yIe=l(),ad=a("h2"),J5=a("a"),qhe=a("span"),F(xy.$$.fragment),AQo=l(),Nhe=a("span"),yQo=o("AutoModelForVision2Seq"),LIe=l(),Do=a("div"),F($y.$$.fragment),LQo=l(),nd=a("p"),xQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jV=a("a"),$Qo=o("from_pretrained()"),kQo=o(" class method or the "),DV=a("a"),SQo=o("from_config()"),RQo=o(` class
method.`),BQo=l(),ky=a("p"),PQo=o("This class cannot be instantiated directly using "),jhe=a("code"),IQo=o("__init__()"),qQo=o(" (throws an error)."),NQo=l(),ht=a("div"),F(Sy.$$.fragment),jQo=l(),Dhe=a("p"),DQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GQo=l(),sd=a("p"),OQo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),VQo=o("not"),XQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),zQo=o("from_pretrained()"),QQo=o(" to load the model weights."),WQo=l(),F(Y5.$$.fragment),HQo=l(),so=a("div"),F(Ry.$$.fragment),UQo=l(),Ohe=a("p"),JQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YQo=l(),Na=a("p"),KQo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),ZQo=o("model_type"),eWo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),oWo=o("pretrained_model_name_or_path"),rWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),tWo=o("pretrained_model_name_or_path"),aWo=o(":"),nWo=l(),Qhe=a("ul"),K5=a("li"),Whe=a("strong"),sWo=o("vision-encoder-decoder"),lWo=o(" \u2014 "),OV=a("a"),iWo=o("VisionEncoderDecoderModel"),dWo=o(" (Vision Encoder decoder model)"),cWo=l(),Z5=a("p"),fWo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),mWo=o("model.eval()"),gWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),hWo=o("model.train()"),pWo=l(),F(ev.$$.fragment),xIe=l(),ld=a("h2"),ov=a("a"),Jhe=a("span"),F(By.$$.fragment),uWo=l(),Yhe=a("span"),_Wo=o("AutoModelForAudioClassification"),$Ie=l(),Go=a("div"),F(Py.$$.fragment),bWo=l(),id=a("p"),vWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VV=a("a"),FWo=o("from_pretrained()"),TWo=o(" class method or the "),XV=a("a"),MWo=o("from_config()"),EWo=o(` class
method.`),CWo=l(),Iy=a("p"),wWo=o("This class cannot be instantiated directly using "),Khe=a("code"),AWo=o("__init__()"),yWo=o(" (throws an error)."),LWo=l(),pt=a("div"),F(qy.$$.fragment),xWo=l(),Zhe=a("p"),$Wo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),kWo=l(),dd=a("p"),SWo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),RWo=o("not"),BWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),PWo=o("from_pretrained()"),IWo=o(" to load the model weights."),qWo=l(),F(rv.$$.fragment),NWo=l(),lo=a("div"),F(Ny.$$.fragment),jWo=l(),ope=a("p"),DWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),GWo=l(),ja=a("p"),OWo=o("The model class to instantiate is selected based on the "),rpe=a("code"),VWo=o("model_type"),XWo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),zWo=o("pretrained_model_name_or_path"),QWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),WWo=o("pretrained_model_name_or_path"),HWo=o(":"),UWo=l(),Ne=a("ul"),tv=a("li"),npe=a("strong"),JWo=o("data2vec-audio"),YWo=o(" \u2014 "),QV=a("a"),KWo=o("Data2VecAudioForSequenceClassification"),ZWo=o(" (Data2VecAudio model)"),eHo=l(),av=a("li"),spe=a("strong"),oHo=o("hubert"),rHo=o(" \u2014 "),WV=a("a"),tHo=o("HubertForSequenceClassification"),aHo=o(" (Hubert model)"),nHo=l(),nv=a("li"),lpe=a("strong"),sHo=o("sew"),lHo=o(" \u2014 "),HV=a("a"),iHo=o("SEWForSequenceClassification"),dHo=o(" (SEW model)"),cHo=l(),sv=a("li"),ipe=a("strong"),fHo=o("sew-d"),mHo=o(" \u2014 "),UV=a("a"),gHo=o("SEWDForSequenceClassification"),hHo=o(" (SEW-D model)"),pHo=l(),lv=a("li"),dpe=a("strong"),uHo=o("unispeech"),_Ho=o(" \u2014 "),JV=a("a"),bHo=o("UniSpeechForSequenceClassification"),vHo=o(" (UniSpeech model)"),FHo=l(),iv=a("li"),cpe=a("strong"),THo=o("unispeech-sat"),MHo=o(" \u2014 "),YV=a("a"),EHo=o("UniSpeechSatForSequenceClassification"),CHo=o(" (UniSpeechSat model)"),wHo=l(),dv=a("li"),fpe=a("strong"),AHo=o("wav2vec2"),yHo=o(" \u2014 "),KV=a("a"),LHo=o("Wav2Vec2ForSequenceClassification"),xHo=o(" (Wav2Vec2 model)"),$Ho=l(),cv=a("li"),mpe=a("strong"),kHo=o("wavlm"),SHo=o(" \u2014 "),ZV=a("a"),RHo=o("WavLMForSequenceClassification"),BHo=o(" (WavLM model)"),PHo=l(),fv=a("p"),IHo=o("The model is set in evaluation mode by default using "),gpe=a("code"),qHo=o("model.eval()"),NHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),jHo=o("model.train()"),DHo=l(),F(mv.$$.fragment),kIe=l(),cd=a("h2"),gv=a("a"),ppe=a("span"),F(jy.$$.fragment),GHo=l(),upe=a("span"),OHo=o("AutoModelForAudioFrameClassification"),SIe=l(),Oo=a("div"),F(Dy.$$.fragment),VHo=l(),fd=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),eX=a("a"),zHo=o("from_pretrained()"),QHo=o(" class method or the "),oX=a("a"),WHo=o("from_config()"),HHo=o(` class
method.`),UHo=l(),Gy=a("p"),JHo=o("This class cannot be instantiated directly using "),_pe=a("code"),YHo=o("__init__()"),KHo=o(" (throws an error)."),ZHo=l(),ut=a("div"),F(Oy.$$.fragment),eUo=l(),bpe=a("p"),oUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rUo=l(),md=a("p"),tUo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),aUo=o("not"),nUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),sUo=o("from_pretrained()"),lUo=o(" to load the model weights."),iUo=l(),F(hv.$$.fragment),dUo=l(),io=a("div"),F(Vy.$$.fragment),cUo=l(),Fpe=a("p"),fUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mUo=l(),Da=a("p"),gUo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),hUo=o("model_type"),pUo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),uUo=o("pretrained_model_name_or_path"),_Uo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(":"),FUo=l(),Ga=a("ul"),pv=a("li"),Cpe=a("strong"),TUo=o("data2vec-audio"),MUo=o(" \u2014 "),tX=a("a"),EUo=o("Data2VecAudioForAudioFrameClassification"),CUo=o(" (Data2VecAudio model)"),wUo=l(),uv=a("li"),wpe=a("strong"),AUo=o("unispeech-sat"),yUo=o(" \u2014 "),aX=a("a"),LUo=o("UniSpeechSatForAudioFrameClassification"),xUo=o(" (UniSpeechSat model)"),$Uo=l(),_v=a("li"),Ape=a("strong"),kUo=o("wav2vec2"),SUo=o(" \u2014 "),nX=a("a"),RUo=o("Wav2Vec2ForAudioFrameClassification"),BUo=o(" (Wav2Vec2 model)"),PUo=l(),bv=a("li"),ype=a("strong"),IUo=o("wavlm"),qUo=o(" \u2014 "),sX=a("a"),NUo=o("WavLMForAudioFrameClassification"),jUo=o(" (WavLM model)"),DUo=l(),vv=a("p"),GUo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),OUo=o("model.eval()"),VUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),XUo=o("model.train()"),zUo=l(),F(Fv.$$.fragment),RIe=l(),gd=a("h2"),Tv=a("a"),$pe=a("span"),F(Xy.$$.fragment),QUo=l(),kpe=a("span"),WUo=o("AutoModelForCTC"),BIe=l(),Vo=a("div"),F(zy.$$.fragment),HUo=l(),hd=a("p"),UUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lX=a("a"),JUo=o("from_pretrained()"),YUo=o(" class method or the "),iX=a("a"),KUo=o("from_config()"),ZUo=o(` class
method.`),eJo=l(),Qy=a("p"),oJo=o("This class cannot be instantiated directly using "),Spe=a("code"),rJo=o("__init__()"),tJo=o(" (throws an error)."),aJo=l(),_t=a("div"),F(Wy.$$.fragment),nJo=l(),Rpe=a("p"),sJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lJo=l(),pd=a("p"),iJo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),dJo=o("not"),cJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),fJo=o("from_pretrained()"),mJo=o(" to load the model weights."),gJo=l(),F(Mv.$$.fragment),hJo=l(),co=a("div"),F(Hy.$$.fragment),pJo=l(),Ppe=a("p"),uJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_Jo=l(),Oa=a("p"),bJo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),vJo=o("model_type"),FJo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),EJo=o("pretrained_model_name_or_path"),CJo=o(":"),wJo=l(),je=a("ul"),Ev=a("li"),jpe=a("strong"),AJo=o("data2vec-audio"),yJo=o(" \u2014 "),cX=a("a"),LJo=o("Data2VecAudioForCTC"),xJo=o(" (Data2VecAudio model)"),$Jo=l(),Cv=a("li"),Dpe=a("strong"),kJo=o("hubert"),SJo=o(" \u2014 "),fX=a("a"),RJo=o("HubertForCTC"),BJo=o(" (Hubert model)"),PJo=l(),wv=a("li"),Gpe=a("strong"),IJo=o("sew"),qJo=o(" \u2014 "),mX=a("a"),NJo=o("SEWForCTC"),jJo=o(" (SEW model)"),DJo=l(),Av=a("li"),Ope=a("strong"),GJo=o("sew-d"),OJo=o(" \u2014 "),gX=a("a"),VJo=o("SEWDForCTC"),XJo=o(" (SEW-D model)"),zJo=l(),yv=a("li"),Vpe=a("strong"),QJo=o("unispeech"),WJo=o(" \u2014 "),hX=a("a"),HJo=o("UniSpeechForCTC"),UJo=o(" (UniSpeech model)"),JJo=l(),Lv=a("li"),Xpe=a("strong"),YJo=o("unispeech-sat"),KJo=o(" \u2014 "),pX=a("a"),ZJo=o("UniSpeechSatForCTC"),eYo=o(" (UniSpeechSat model)"),oYo=l(),xv=a("li"),zpe=a("strong"),rYo=o("wav2vec2"),tYo=o(" \u2014 "),uX=a("a"),aYo=o("Wav2Vec2ForCTC"),nYo=o(" (Wav2Vec2 model)"),sYo=l(),$v=a("li"),Qpe=a("strong"),lYo=o("wavlm"),iYo=o(" \u2014 "),_X=a("a"),dYo=o("WavLMForCTC"),cYo=o(" (WavLM model)"),fYo=l(),kv=a("p"),mYo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),gYo=o("model.eval()"),hYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),pYo=o("model.train()"),uYo=l(),F(Sv.$$.fragment),PIe=l(),ud=a("h2"),Rv=a("a"),Upe=a("span"),F(Uy.$$.fragment),_Yo=l(),Jpe=a("span"),bYo=o("AutoModelForSpeechSeq2Seq"),IIe=l(),Xo=a("div"),F(Jy.$$.fragment),vYo=l(),_d=a("p"),FYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bX=a("a"),TYo=o("from_pretrained()"),MYo=o(" class method or the "),vX=a("a"),EYo=o("from_config()"),CYo=o(` class
method.`),wYo=l(),Yy=a("p"),AYo=o("This class cannot be instantiated directly using "),Ype=a("code"),yYo=o("__init__()"),LYo=o(" (throws an error)."),xYo=l(),bt=a("div"),F(Ky.$$.fragment),$Yo=l(),Kpe=a("p"),kYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SYo=l(),bd=a("p"),RYo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),BYo=o("not"),PYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),IYo=o("from_pretrained()"),qYo=o(" to load the model weights."),NYo=l(),F(Bv.$$.fragment),jYo=l(),fo=a("div"),F(Zy.$$.fragment),DYo=l(),eue=a("p"),GYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OYo=l(),Va=a("p"),VYo=o("The model class to instantiate is selected based on the "),oue=a("code"),XYo=o("model_type"),zYo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),QYo=o("pretrained_model_name_or_path"),WYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),HYo=o("pretrained_model_name_or_path"),UYo=o(":"),JYo=l(),eL=a("ul"),Pv=a("li"),aue=a("strong"),YYo=o("speech-encoder-decoder"),KYo=o(" \u2014 "),TX=a("a"),ZYo=o("SpeechEncoderDecoderModel"),eKo=o(" (Speech Encoder decoder model)"),oKo=l(),Iv=a("li"),nue=a("strong"),rKo=o("speech_to_text"),tKo=o(" \u2014 "),MX=a("a"),aKo=o("Speech2TextForConditionalGeneration"),nKo=o(" (Speech2Text model)"),sKo=l(),qv=a("p"),lKo=o("The model is set in evaluation mode by default using "),sue=a("code"),iKo=o("model.eval()"),dKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),cKo=o("model.train()"),fKo=l(),F(Nv.$$.fragment),qIe=l(),vd=a("h2"),jv=a("a"),iue=a("span"),F(oL.$$.fragment),mKo=l(),due=a("span"),gKo=o("AutoModelForAudioXVector"),NIe=l(),zo=a("div"),F(rL.$$.fragment),hKo=l(),Fd=a("p"),pKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EX=a("a"),uKo=o("from_pretrained()"),_Ko=o(" class method or the "),CX=a("a"),bKo=o("from_config()"),vKo=o(` class
method.`),FKo=l(),tL=a("p"),TKo=o("This class cannot be instantiated directly using "),cue=a("code"),MKo=o("__init__()"),EKo=o(" (throws an error)."),CKo=l(),vt=a("div"),F(aL.$$.fragment),wKo=l(),fue=a("p"),AKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),yKo=l(),Td=a("p"),LKo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),xKo=o("not"),$Ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),kKo=o("from_pretrained()"),SKo=o(" to load the model weights."),RKo=l(),F(Dv.$$.fragment),BKo=l(),mo=a("div"),F(nL.$$.fragment),PKo=l(),gue=a("p"),IKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qKo=l(),Xa=a("p"),NKo=o("The model class to instantiate is selected based on the "),hue=a("code"),jKo=o("model_type"),DKo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),GKo=o("pretrained_model_name_or_path"),OKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),VKo=o("pretrained_model_name_or_path"),XKo=o(":"),zKo=l(),za=a("ul"),Gv=a("li"),_ue=a("strong"),QKo=o("data2vec-audio"),WKo=o(" \u2014 "),AX=a("a"),HKo=o("Data2VecAudioForXVector"),UKo=o(" (Data2VecAudio model)"),JKo=l(),Ov=a("li"),bue=a("strong"),YKo=o("unispeech-sat"),KKo=o(" \u2014 "),yX=a("a"),ZKo=o("UniSpeechSatForXVector"),eZo=o(" (UniSpeechSat model)"),oZo=l(),Vv=a("li"),vue=a("strong"),rZo=o("wav2vec2"),tZo=o(" \u2014 "),LX=a("a"),aZo=o("Wav2Vec2ForXVector"),nZo=o(" (Wav2Vec2 model)"),sZo=l(),Xv=a("li"),Fue=a("strong"),lZo=o("wavlm"),iZo=o(" \u2014 "),xX=a("a"),dZo=o("WavLMForXVector"),cZo=o(" (WavLM model)"),fZo=l(),zv=a("p"),mZo=o("The model is set in evaluation mode by default using "),Tue=a("code"),gZo=o("model.eval()"),hZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),pZo=o("model.train()"),uZo=l(),F(Qv.$$.fragment),jIe=l(),Md=a("h2"),Wv=a("a"),Eue=a("span"),F(sL.$$.fragment),_Zo=l(),Cue=a("span"),bZo=o("AutoModelForMaskedImageModeling"),DIe=l(),Qo=a("div"),F(lL.$$.fragment),vZo=l(),Ed=a("p"),FZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),$X=a("a"),TZo=o("from_pretrained()"),MZo=o(" class method or the "),kX=a("a"),EZo=o("from_config()"),CZo=o(` class
method.`),wZo=l(),iL=a("p"),AZo=o("This class cannot be instantiated directly using "),wue=a("code"),yZo=o("__init__()"),LZo=o(" (throws an error)."),xZo=l(),Ft=a("div"),F(dL.$$.fragment),$Zo=l(),Aue=a("p"),kZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),SZo=l(),Cd=a("p"),RZo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),BZo=o("not"),PZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),IZo=o("from_pretrained()"),qZo=o(" to load the model weights."),NZo=l(),F(Hv.$$.fragment),jZo=l(),go=a("div"),F(cL.$$.fragment),DZo=l(),Lue=a("p"),GZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),OZo=l(),Qa=a("p"),VZo=o("The model class to instantiate is selected based on the "),xue=a("code"),XZo=o("model_type"),zZo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),QZo=o("pretrained_model_name_or_path"),WZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(":"),JZo=l(),wd=a("ul"),Uv=a("li"),Sue=a("strong"),YZo=o("deit"),KZo=o(" \u2014 "),RX=a("a"),ZZo=o("DeiTForMaskedImageModeling"),eer=o(" (DeiT model)"),oer=l(),Jv=a("li"),Rue=a("strong"),rer=o("swin"),ter=o(" \u2014 "),BX=a("a"),aer=o("SwinForMaskedImageModeling"),ner=o(" (Swin model)"),ser=l(),Yv=a("li"),Bue=a("strong"),ler=o("vit"),ier=o(" \u2014 "),PX=a("a"),der=o("ViTForMaskedImageModeling"),cer=o(" (ViT model)"),fer=l(),Kv=a("p"),mer=o("The model is set in evaluation mode by default using "),Pue=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=a("code"),per=o("model.train()"),uer=l(),F(Zv.$$.fragment),GIe=l(),Ad=a("h2"),eF=a("a"),que=a("span"),F(fL.$$.fragment),_er=l(),Nue=a("span"),ber=o("AutoModelForObjectDetection"),OIe=l(),Wo=a("div"),F(mL.$$.fragment),ver=l(),yd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),IX=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),qX=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),gL=a("p"),Aer=o("This class cannot be instantiated directly using "),jue=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),Tt=a("div"),F(hL.$$.fragment),$er=l(),Due=a("p"),ker=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ser=l(),Ld=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),Ber=o("not"),Per=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),F(oF.$$.fragment),jer=l(),ho=a("div"),F(pL.$$.fragment),Der=l(),Oue=a("p"),Ger=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Oer=l(),Wa=a("p"),Ver=o("The model class to instantiate is selected based on the "),Vue=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),Qer=o("pretrained_model_name_or_path"),Wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),uL=a("ul"),rF=a("li"),Que=a("strong"),Yer=o("detr"),Ker=o(" \u2014 "),jX=a("a"),Zer=o("DetrForObjectDetection"),eor=o(" (DETR model)"),oor=l(),tF=a("li"),Wue=a("strong"),ror=o("yolos"),tor=o(" \u2014 "),DX=a("a"),aor=o("YolosForObjectDetection"),nor=o(" (YOLOS model)"),sor=l(),aF=a("p"),lor=o("The model is set in evaluation mode by default using "),Hue=a("code"),ior=o("model.eval()"),dor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),cor=o("model.train()"),mor=l(),F(nF.$$.fragment),VIe=l(),xd=a("h2"),sF=a("a"),Jue=a("span"),F(_L.$$.fragment),gor=l(),Yue=a("span"),hor=o("AutoModelForImageSegmentation"),XIe=l(),Ho=a("div"),F(bL.$$.fragment),por=l(),$d=a("p"),uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),GX=a("a"),_or=o("from_pretrained()"),bor=o(" class method or the "),OX=a("a"),vor=o("from_config()"),For=o(` class
method.`),Tor=l(),vL=a("p"),Mor=o("This class cannot be instantiated directly using "),Kue=a("code"),Eor=o("__init__()"),Cor=o(" (throws an error)."),wor=l(),Mt=a("div"),F(FL.$$.fragment),Aor=l(),Zue=a("p"),yor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lor=l(),kd=a("p"),xor=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),$or=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),Sor=o("from_pretrained()"),Ror=o(" to load the model weights."),Bor=l(),F(lF.$$.fragment),Por=l(),po=a("div"),F(TL.$$.fragment),Ior=l(),o_e=a("p"),qor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Nor=l(),Ha=a("p"),jor=o("The model class to instantiate is selected based on the "),r_e=a("code"),Dor=o("model_type"),Gor=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(":"),Qor=l(),n_e=a("ul"),iF=a("li"),s_e=a("strong"),Wor=o("detr"),Hor=o(" \u2014 "),XX=a("a"),Uor=o("DetrForSegmentation"),Jor=o(" (DETR model)"),Yor=l(),dF=a("p"),Kor=o("The model is set in evaluation mode by default using "),l_e=a("code"),Zor=o("model.eval()"),err=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),orr=o("model.train()"),rrr=l(),F(cF.$$.fragment),zIe=l(),Sd=a("h2"),fF=a("a"),d_e=a("span"),F(ML.$$.fragment),trr=l(),c_e=a("span"),arr=o("AutoModelForSemanticSegmentation"),QIe=l(),Uo=a("div"),F(EL.$$.fragment),nrr=l(),Rd=a("p"),srr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),zX=a("a"),lrr=o("from_pretrained()"),irr=o(" class method or the "),QX=a("a"),drr=o("from_config()"),crr=o(` class
method.`),frr=l(),CL=a("p"),mrr=o("This class cannot be instantiated directly using "),f_e=a("code"),grr=o("__init__()"),hrr=o(" (throws an error)."),prr=l(),Et=a("div"),F(wL.$$.fragment),urr=l(),m_e=a("p"),_rr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),brr=l(),Bd=a("p"),vrr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Frr=o("not"),Trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Mrr=o("from_pretrained()"),Err=o(" to load the model weights."),Crr=l(),F(mF.$$.fragment),wrr=l(),uo=a("div"),F(AL.$$.fragment),Arr=l(),h_e=a("p"),yrr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Lrr=l(),Ua=a("p"),xrr=o("The model class to instantiate is selected based on the "),p_e=a("code"),$rr=o("model_type"),krr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),Brr=o("pretrained_model_name_or_path"),Prr=o(":"),Irr=l(),Ja=a("ul"),gF=a("li"),b_e=a("strong"),qrr=o("beit"),Nrr=o(" \u2014 "),HX=a("a"),jrr=o("BeitForSemanticSegmentation"),Drr=o(" (BEiT model)"),Grr=l(),hF=a("li"),v_e=a("strong"),Orr=o("data2vec-vision"),Vrr=o(" \u2014 "),UX=a("a"),Xrr=o("Data2VecVisionForSemanticSegmentation"),zrr=o(" (Data2VecVision model)"),Qrr=l(),pF=a("li"),F_e=a("strong"),Wrr=o("dpt"),Hrr=o(" \u2014 "),JX=a("a"),Urr=o("DPTForSemanticSegmentation"),Jrr=o(" (DPT model)"),Yrr=l(),uF=a("li"),T_e=a("strong"),Krr=o("segformer"),Zrr=o(" \u2014 "),YX=a("a"),etr=o("SegformerForSemanticSegmentation"),otr=o(" (SegFormer model)"),rtr=l(),_F=a("p"),ttr=o("The model is set in evaluation mode by default using "),M_e=a("code"),atr=o("model.eval()"),ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),str=o("model.train()"),ltr=l(),F(bF.$$.fragment),WIe=l(),Pd=a("h2"),vF=a("a"),C_e=a("span"),F(yL.$$.fragment),itr=l(),w_e=a("span"),dtr=o("AutoModelForInstanceSegmentation"),HIe=l(),Jo=a("div"),F(LL.$$.fragment),ctr=l(),Id=a("p"),ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KX=a("a"),mtr=o("from_pretrained()"),gtr=o(" class method or the "),ZX=a("a"),htr=o("from_config()"),ptr=o(` class
method.`),utr=l(),xL=a("p"),_tr=o("This class cannot be instantiated directly using "),A_e=a("code"),btr=o("__init__()"),vtr=o(" (throws an error)."),Ftr=l(),Ct=a("div"),F($L.$$.fragment),Ttr=l(),y_e=a("p"),Mtr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Etr=l(),qd=a("p"),Ctr=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),wtr=o("not"),Atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),ytr=o("from_pretrained()"),Ltr=o(" to load the model weights."),xtr=l(),F(FF.$$.fragment),$tr=l(),_o=a("div"),F(kL.$$.fragment),ktr=l(),x_e=a("p"),Str=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rtr=l(),Ya=a("p"),Btr=o("The model class to instantiate is selected based on the "),$_e=a("code"),Ptr=o("model_type"),Itr=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),qtr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),jtr=o("pretrained_model_name_or_path"),Dtr=o(":"),Gtr=l(),R_e=a("ul"),TF=a("li"),B_e=a("strong"),Otr=o("maskformer"),Vtr=o(" \u2014 "),oz=a("a"),Xtr=o("MaskFormerForInstanceSegmentation"),ztr=o(" (MaskFormer model)"),Qtr=l(),MF=a("p"),Wtr=o("The model is set in evaluation mode by default using "),P_e=a("code"),Htr=o("model.eval()"),Utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),Jtr=o("model.train()"),Ytr=l(),F(EF.$$.fragment),UIe=l(),Nd=a("h2"),CF=a("a"),q_e=a("span"),F(SL.$$.fragment),Ktr=l(),N_e=a("span"),Ztr=o("TFAutoModel"),JIe=l(),Yo=a("div"),F(RL.$$.fragment),ear=l(),jd=a("p"),oar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rz=a("a"),rar=o("from_pretrained()"),tar=o(" class method or the "),tz=a("a"),aar=o("from_config()"),nar=o(` class
method.`),sar=l(),BL=a("p"),lar=o("This class cannot be instantiated directly using "),j_e=a("code"),iar=o("__init__()"),dar=o(" (throws an error)."),car=l(),wt=a("div"),F(PL.$$.fragment),far=l(),D_e=a("p"),mar=o("Instantiates one of the base model classes of the library from a configuration."),gar=l(),Dd=a("p"),har=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),par=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),_ar=o("from_pretrained()"),bar=o(" to load the model weights."),Far=l(),F(wF.$$.fragment),Tar=l(),wr=a("div"),F(IL.$$.fragment),Mar=l(),O_e=a("p"),Ear=o("Instantiate one of the base model classes of the library from a pretrained model."),Car=l(),Ka=a("p"),war=o("The model class to instantiate is selected based on the "),V_e=a("code"),Aar=o("model_type"),yar=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),$ar=o("pretrained_model_name_or_path"),kar=o(":"),Sar=l(),j=a("ul"),AF=a("li"),Q_e=a("strong"),Rar=o("albert"),Bar=o(" \u2014 "),nz=a("a"),Par=o("TFAlbertModel"),Iar=o(" (ALBERT model)"),qar=l(),yF=a("li"),W_e=a("strong"),Nar=o("bart"),jar=o(" \u2014 "),sz=a("a"),Dar=o("TFBartModel"),Gar=o(" (BART model)"),Oar=l(),LF=a("li"),H_e=a("strong"),Var=o("bert"),Xar=o(" \u2014 "),lz=a("a"),zar=o("TFBertModel"),Qar=o(" (BERT model)"),War=l(),xF=a("li"),U_e=a("strong"),Har=o("blenderbot"),Uar=o(" \u2014 "),iz=a("a"),Jar=o("TFBlenderbotModel"),Yar=o(" (Blenderbot model)"),Kar=l(),$F=a("li"),J_e=a("strong"),Zar=o("blenderbot-small"),enr=o(" \u2014 "),dz=a("a"),onr=o("TFBlenderbotSmallModel"),rnr=o(" (BlenderbotSmall model)"),tnr=l(),kF=a("li"),Y_e=a("strong"),anr=o("camembert"),nnr=o(" \u2014 "),cz=a("a"),snr=o("TFCamembertModel"),lnr=o(" (CamemBERT model)"),inr=l(),SF=a("li"),K_e=a("strong"),dnr=o("clip"),cnr=o(" \u2014 "),fz=a("a"),fnr=o("TFCLIPModel"),mnr=o(" (CLIP model)"),gnr=l(),RF=a("li"),Z_e=a("strong"),hnr=o("convbert"),pnr=o(" \u2014 "),mz=a("a"),unr=o("TFConvBertModel"),_nr=o(" (ConvBERT model)"),bnr=l(),BF=a("li"),e2e=a("strong"),vnr=o("convnext"),Fnr=o(" \u2014 "),gz=a("a"),Tnr=o("TFConvNextModel"),Mnr=o(" (ConvNext model)"),Enr=l(),PF=a("li"),o2e=a("strong"),Cnr=o("ctrl"),wnr=o(" \u2014 "),hz=a("a"),Anr=o("TFCTRLModel"),ynr=o(" (CTRL model)"),Lnr=l(),IF=a("li"),r2e=a("strong"),xnr=o("data2vec-vision"),$nr=o(" \u2014 "),pz=a("a"),knr=o("TFData2VecVisionModel"),Snr=o(" (Data2VecVision model)"),Rnr=l(),qF=a("li"),t2e=a("strong"),Bnr=o("deberta"),Pnr=o(" \u2014 "),uz=a("a"),Inr=o("TFDebertaModel"),qnr=o(" (DeBERTa model)"),Nnr=l(),NF=a("li"),a2e=a("strong"),jnr=o("deberta-v2"),Dnr=o(" \u2014 "),_z=a("a"),Gnr=o("TFDebertaV2Model"),Onr=o(" (DeBERTa-v2 model)"),Vnr=l(),jF=a("li"),n2e=a("strong"),Xnr=o("distilbert"),znr=o(" \u2014 "),bz=a("a"),Qnr=o("TFDistilBertModel"),Wnr=o(" (DistilBERT model)"),Hnr=l(),DF=a("li"),s2e=a("strong"),Unr=o("dpr"),Jnr=o(" \u2014 "),vz=a("a"),Ynr=o("TFDPRQuestionEncoder"),Knr=o(" (DPR model)"),Znr=l(),GF=a("li"),l2e=a("strong"),esr=o("electra"),osr=o(" \u2014 "),Fz=a("a"),rsr=o("TFElectraModel"),tsr=o(" (ELECTRA model)"),asr=l(),OF=a("li"),i2e=a("strong"),nsr=o("flaubert"),ssr=o(" \u2014 "),Tz=a("a"),lsr=o("TFFlaubertModel"),isr=o(" (FlauBERT model)"),dsr=l(),Ps=a("li"),d2e=a("strong"),csr=o("funnel"),fsr=o(" \u2014 "),Mz=a("a"),msr=o("TFFunnelModel"),gsr=o(" or "),Ez=a("a"),hsr=o("TFFunnelBaseModel"),psr=o(" (Funnel Transformer model)"),usr=l(),VF=a("li"),c2e=a("strong"),_sr=o("gpt2"),bsr=o(" \u2014 "),Cz=a("a"),vsr=o("TFGPT2Model"),Fsr=o(" (OpenAI GPT-2 model)"),Tsr=l(),XF=a("li"),f2e=a("strong"),Msr=o("gptj"),Esr=o(" \u2014 "),wz=a("a"),Csr=o("TFGPTJModel"),wsr=o(" (GPT-J model)"),Asr=l(),zF=a("li"),m2e=a("strong"),ysr=o("hubert"),Lsr=o(" \u2014 "),Az=a("a"),xsr=o("TFHubertModel"),$sr=o(" (Hubert model)"),ksr=l(),QF=a("li"),g2e=a("strong"),Ssr=o("layoutlm"),Rsr=o(" \u2014 "),yz=a("a"),Bsr=o("TFLayoutLMModel"),Psr=o(" (LayoutLM model)"),Isr=l(),WF=a("li"),h2e=a("strong"),qsr=o("led"),Nsr=o(" \u2014 "),Lz=a("a"),jsr=o("TFLEDModel"),Dsr=o(" (LED model)"),Gsr=l(),HF=a("li"),p2e=a("strong"),Osr=o("longformer"),Vsr=o(" \u2014 "),xz=a("a"),Xsr=o("TFLongformerModel"),zsr=o(" (Longformer model)"),Qsr=l(),UF=a("li"),u2e=a("strong"),Wsr=o("lxmert"),Hsr=o(" \u2014 "),$z=a("a"),Usr=o("TFLxmertModel"),Jsr=o(" (LXMERT model)"),Ysr=l(),JF=a("li"),_2e=a("strong"),Ksr=o("marian"),Zsr=o(" \u2014 "),kz=a("a"),elr=o("TFMarianModel"),olr=o(" (Marian model)"),rlr=l(),YF=a("li"),b2e=a("strong"),tlr=o("mbart"),alr=o(" \u2014 "),Sz=a("a"),nlr=o("TFMBartModel"),slr=o(" (mBART model)"),llr=l(),KF=a("li"),v2e=a("strong"),ilr=o("mobilebert"),dlr=o(" \u2014 "),Rz=a("a"),clr=o("TFMobileBertModel"),flr=o(" (MobileBERT model)"),mlr=l(),ZF=a("li"),F2e=a("strong"),glr=o("mpnet"),hlr=o(" \u2014 "),Bz=a("a"),plr=o("TFMPNetModel"),ulr=o(" (MPNet model)"),_lr=l(),eT=a("li"),T2e=a("strong"),blr=o("mt5"),vlr=o(" \u2014 "),Pz=a("a"),Flr=o("TFMT5Model"),Tlr=o(" (mT5 model)"),Mlr=l(),oT=a("li"),M2e=a("strong"),Elr=o("openai-gpt"),Clr=o(" \u2014 "),Iz=a("a"),wlr=o("TFOpenAIGPTModel"),Alr=o(" (OpenAI GPT model)"),ylr=l(),rT=a("li"),E2e=a("strong"),Llr=o("pegasus"),xlr=o(" \u2014 "),qz=a("a"),$lr=o("TFPegasusModel"),klr=o(" (Pegasus model)"),Slr=l(),tT=a("li"),C2e=a("strong"),Rlr=o("rembert"),Blr=o(" \u2014 "),Nz=a("a"),Plr=o("TFRemBertModel"),Ilr=o(" (RemBERT model)"),qlr=l(),aT=a("li"),w2e=a("strong"),Nlr=o("roberta"),jlr=o(" \u2014 "),jz=a("a"),Dlr=o("TFRobertaModel"),Glr=o(" (RoBERTa model)"),Olr=l(),nT=a("li"),A2e=a("strong"),Vlr=o("roformer"),Xlr=o(" \u2014 "),Dz=a("a"),zlr=o("TFRoFormerModel"),Qlr=o(" (RoFormer model)"),Wlr=l(),sT=a("li"),y2e=a("strong"),Hlr=o("speech_to_text"),Ulr=o(" \u2014 "),Gz=a("a"),Jlr=o("TFSpeech2TextModel"),Ylr=o(" (Speech2Text model)"),Klr=l(),lT=a("li"),L2e=a("strong"),Zlr=o("t5"),eir=o(" \u2014 "),Oz=a("a"),oir=o("TFT5Model"),rir=o(" (T5 model)"),tir=l(),iT=a("li"),x2e=a("strong"),air=o("tapas"),nir=o(" \u2014 "),Vz=a("a"),sir=o("TFTapasModel"),lir=o(" (TAPAS model)"),iir=l(),dT=a("li"),$2e=a("strong"),dir=o("transfo-xl"),cir=o(" \u2014 "),Xz=a("a"),fir=o("TFTransfoXLModel"),mir=o(" (Transformer-XL model)"),gir=l(),cT=a("li"),k2e=a("strong"),hir=o("vit"),pir=o(" \u2014 "),zz=a("a"),uir=o("TFViTModel"),_ir=o(" (ViT model)"),bir=l(),fT=a("li"),S2e=a("strong"),vir=o("vit_mae"),Fir=o(" \u2014 "),Qz=a("a"),Tir=o("TFViTMAEModel"),Mir=o(" (ViTMAE model)"),Eir=l(),mT=a("li"),R2e=a("strong"),Cir=o("wav2vec2"),wir=o(" \u2014 "),Wz=a("a"),Air=o("TFWav2Vec2Model"),yir=o(" (Wav2Vec2 model)"),Lir=l(),gT=a("li"),B2e=a("strong"),xir=o("xlm"),$ir=o(" \u2014 "),Hz=a("a"),kir=o("TFXLMModel"),Sir=o(" (XLM model)"),Rir=l(),hT=a("li"),P2e=a("strong"),Bir=o("xlm-roberta"),Pir=o(" \u2014 "),Uz=a("a"),Iir=o("TFXLMRobertaModel"),qir=o(" (XLM-RoBERTa model)"),Nir=l(),pT=a("li"),I2e=a("strong"),jir=o("xlnet"),Dir=o(" \u2014 "),Jz=a("a"),Gir=o("TFXLNetModel"),Oir=o(" (XLNet model)"),Vir=l(),F(uT.$$.fragment),YIe=l(),Gd=a("h2"),_T=a("a"),q2e=a("span"),F(qL.$$.fragment),Xir=l(),N2e=a("span"),zir=o("TFAutoModelForPreTraining"),KIe=l(),Ko=a("div"),F(NL.$$.fragment),Qir=l(),Od=a("p"),Wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Yz=a("a"),Hir=o("from_pretrained()"),Uir=o(" class method or the "),Kz=a("a"),Jir=o("from_config()"),Yir=o(` class
method.`),Kir=l(),jL=a("p"),Zir=o("This class cannot be instantiated directly using "),j2e=a("code"),edr=o("__init__()"),odr=o(" (throws an error)."),rdr=l(),At=a("div"),F(DL.$$.fragment),tdr=l(),D2e=a("p"),adr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ndr=l(),Vd=a("p"),sdr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),ldr=o("not"),idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),ddr=o("from_pretrained()"),cdr=o(" to load the model weights."),fdr=l(),F(bT.$$.fragment),mdr=l(),Ar=a("div"),F(GL.$$.fragment),gdr=l(),O2e=a("p"),hdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pdr=l(),Za=a("p"),udr=o("The model class to instantiate is selected based on the "),V2e=a("code"),_dr=o("model_type"),bdr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),vdr=o("pretrained_model_name_or_path"),Fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),Tdr=o("pretrained_model_name_or_path"),Mdr=o(":"),Edr=l(),se=a("ul"),vT=a("li"),Q2e=a("strong"),Cdr=o("albert"),wdr=o(" \u2014 "),eQ=a("a"),Adr=o("TFAlbertForPreTraining"),ydr=o(" (ALBERT model)"),Ldr=l(),FT=a("li"),W2e=a("strong"),xdr=o("bart"),$dr=o(" \u2014 "),oQ=a("a"),kdr=o("TFBartForConditionalGeneration"),Sdr=o(" (BART model)"),Rdr=l(),TT=a("li"),H2e=a("strong"),Bdr=o("bert"),Pdr=o(" \u2014 "),rQ=a("a"),Idr=o("TFBertForPreTraining"),qdr=o(" (BERT model)"),Ndr=l(),MT=a("li"),U2e=a("strong"),jdr=o("camembert"),Ddr=o(" \u2014 "),tQ=a("a"),Gdr=o("TFCamembertForMaskedLM"),Odr=o(" (CamemBERT model)"),Vdr=l(),ET=a("li"),J2e=a("strong"),Xdr=o("ctrl"),zdr=o(" \u2014 "),aQ=a("a"),Qdr=o("TFCTRLLMHeadModel"),Wdr=o(" (CTRL model)"),Hdr=l(),CT=a("li"),Y2e=a("strong"),Udr=o("distilbert"),Jdr=o(" \u2014 "),nQ=a("a"),Ydr=o("TFDistilBertForMaskedLM"),Kdr=o(" (DistilBERT model)"),Zdr=l(),wT=a("li"),K2e=a("strong"),ecr=o("electra"),ocr=o(" \u2014 "),sQ=a("a"),rcr=o("TFElectraForPreTraining"),tcr=o(" (ELECTRA model)"),acr=l(),AT=a("li"),Z2e=a("strong"),ncr=o("flaubert"),scr=o(" \u2014 "),lQ=a("a"),lcr=o("TFFlaubertWithLMHeadModel"),icr=o(" (FlauBERT model)"),dcr=l(),yT=a("li"),e1e=a("strong"),ccr=o("funnel"),fcr=o(" \u2014 "),iQ=a("a"),mcr=o("TFFunnelForPreTraining"),gcr=o(" (Funnel Transformer model)"),hcr=l(),LT=a("li"),o1e=a("strong"),pcr=o("gpt2"),ucr=o(" \u2014 "),dQ=a("a"),_cr=o("TFGPT2LMHeadModel"),bcr=o(" (OpenAI GPT-2 model)"),vcr=l(),xT=a("li"),r1e=a("strong"),Fcr=o("layoutlm"),Tcr=o(" \u2014 "),cQ=a("a"),Mcr=o("TFLayoutLMForMaskedLM"),Ecr=o(" (LayoutLM model)"),Ccr=l(),$T=a("li"),t1e=a("strong"),wcr=o("lxmert"),Acr=o(" \u2014 "),fQ=a("a"),ycr=o("TFLxmertForPreTraining"),Lcr=o(" (LXMERT model)"),xcr=l(),kT=a("li"),a1e=a("strong"),$cr=o("mobilebert"),kcr=o(" \u2014 "),mQ=a("a"),Scr=o("TFMobileBertForPreTraining"),Rcr=o(" (MobileBERT model)"),Bcr=l(),ST=a("li"),n1e=a("strong"),Pcr=o("mpnet"),Icr=o(" \u2014 "),gQ=a("a"),qcr=o("TFMPNetForMaskedLM"),Ncr=o(" (MPNet model)"),jcr=l(),RT=a("li"),s1e=a("strong"),Dcr=o("openai-gpt"),Gcr=o(" \u2014 "),hQ=a("a"),Ocr=o("TFOpenAIGPTLMHeadModel"),Vcr=o(" (OpenAI GPT model)"),Xcr=l(),BT=a("li"),l1e=a("strong"),zcr=o("roberta"),Qcr=o(" \u2014 "),pQ=a("a"),Wcr=o("TFRobertaForMaskedLM"),Hcr=o(" (RoBERTa model)"),Ucr=l(),PT=a("li"),i1e=a("strong"),Jcr=o("t5"),Ycr=o(" \u2014 "),uQ=a("a"),Kcr=o("TFT5ForConditionalGeneration"),Zcr=o(" (T5 model)"),efr=l(),IT=a("li"),d1e=a("strong"),ofr=o("tapas"),rfr=o(" \u2014 "),_Q=a("a"),tfr=o("TFTapasForMaskedLM"),afr=o(" (TAPAS model)"),nfr=l(),qT=a("li"),c1e=a("strong"),sfr=o("transfo-xl"),lfr=o(" \u2014 "),bQ=a("a"),ifr=o("TFTransfoXLLMHeadModel"),dfr=o(" (Transformer-XL model)"),cfr=l(),NT=a("li"),f1e=a("strong"),ffr=o("vit_mae"),mfr=o(" \u2014 "),vQ=a("a"),gfr=o("TFViTMAEForPreTraining"),hfr=o(" (ViTMAE model)"),pfr=l(),jT=a("li"),m1e=a("strong"),ufr=o("xlm"),_fr=o(" \u2014 "),FQ=a("a"),bfr=o("TFXLMWithLMHeadModel"),vfr=o(" (XLM model)"),Ffr=l(),DT=a("li"),g1e=a("strong"),Tfr=o("xlm-roberta"),Mfr=o(" \u2014 "),TQ=a("a"),Efr=o("TFXLMRobertaForMaskedLM"),Cfr=o(" (XLM-RoBERTa model)"),wfr=l(),GT=a("li"),h1e=a("strong"),Afr=o("xlnet"),yfr=o(" \u2014 "),MQ=a("a"),Lfr=o("TFXLNetLMHeadModel"),xfr=o(" (XLNet model)"),$fr=l(),F(OT.$$.fragment),ZIe=l(),Xd=a("h2"),VT=a("a"),p1e=a("span"),F(OL.$$.fragment),kfr=l(),u1e=a("span"),Sfr=o("TFAutoModelForCausalLM"),eqe=l(),Zo=a("div"),F(VL.$$.fragment),Rfr=l(),zd=a("p"),Bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EQ=a("a"),Pfr=o("from_pretrained()"),Ifr=o(" class method or the "),CQ=a("a"),qfr=o("from_config()"),Nfr=o(` class
method.`),jfr=l(),XL=a("p"),Dfr=o("This class cannot be instantiated directly using "),_1e=a("code"),Gfr=o("__init__()"),Ofr=o(" (throws an error)."),Vfr=l(),yt=a("div"),F(zL.$$.fragment),Xfr=l(),b1e=a("p"),zfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qfr=l(),Qd=a("p"),Wfr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),Hfr=o("not"),Ufr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Jfr=o("from_pretrained()"),Yfr=o(" to load the model weights."),Kfr=l(),F(XT.$$.fragment),Zfr=l(),yr=a("div"),F(QL.$$.fragment),emr=l(),F1e=a("p"),omr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rmr=l(),en=a("p"),tmr=o("The model class to instantiate is selected based on the "),T1e=a("code"),amr=o("model_type"),nmr=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(":"),cmr=l(),Te=a("ul"),zT=a("li"),C1e=a("strong"),fmr=o("bert"),mmr=o(" \u2014 "),AQ=a("a"),gmr=o("TFBertLMHeadModel"),hmr=o(" (BERT model)"),pmr=l(),QT=a("li"),w1e=a("strong"),umr=o("camembert"),_mr=o(" \u2014 "),yQ=a("a"),bmr=o("TFCamembertForCausalLM"),vmr=o(" (CamemBERT model)"),Fmr=l(),WT=a("li"),A1e=a("strong"),Tmr=o("ctrl"),Mmr=o(" \u2014 "),LQ=a("a"),Emr=o("TFCTRLLMHeadModel"),Cmr=o(" (CTRL model)"),wmr=l(),HT=a("li"),y1e=a("strong"),Amr=o("gpt2"),ymr=o(" \u2014 "),xQ=a("a"),Lmr=o("TFGPT2LMHeadModel"),xmr=o(" (OpenAI GPT-2 model)"),$mr=l(),UT=a("li"),L1e=a("strong"),kmr=o("gptj"),Smr=o(" \u2014 "),$Q=a("a"),Rmr=o("TFGPTJForCausalLM"),Bmr=o(" (GPT-J model)"),Pmr=l(),JT=a("li"),x1e=a("strong"),Imr=o("openai-gpt"),qmr=o(" \u2014 "),kQ=a("a"),Nmr=o("TFOpenAIGPTLMHeadModel"),jmr=o(" (OpenAI GPT model)"),Dmr=l(),YT=a("li"),$1e=a("strong"),Gmr=o("rembert"),Omr=o(" \u2014 "),SQ=a("a"),Vmr=o("TFRemBertForCausalLM"),Xmr=o(" (RemBERT model)"),zmr=l(),KT=a("li"),k1e=a("strong"),Qmr=o("roberta"),Wmr=o(" \u2014 "),RQ=a("a"),Hmr=o("TFRobertaForCausalLM"),Umr=o(" (RoBERTa model)"),Jmr=l(),ZT=a("li"),S1e=a("strong"),Ymr=o("roformer"),Kmr=o(" \u2014 "),BQ=a("a"),Zmr=o("TFRoFormerForCausalLM"),egr=o(" (RoFormer model)"),ogr=l(),e7=a("li"),R1e=a("strong"),rgr=o("transfo-xl"),tgr=o(" \u2014 "),PQ=a("a"),agr=o("TFTransfoXLLMHeadModel"),ngr=o(" (Transformer-XL model)"),sgr=l(),o7=a("li"),B1e=a("strong"),lgr=o("xlm"),igr=o(" \u2014 "),IQ=a("a"),dgr=o("TFXLMWithLMHeadModel"),cgr=o(" (XLM model)"),fgr=l(),r7=a("li"),P1e=a("strong"),mgr=o("xlnet"),ggr=o(" \u2014 "),qQ=a("a"),hgr=o("TFXLNetLMHeadModel"),pgr=o(" (XLNet model)"),ugr=l(),F(t7.$$.fragment),oqe=l(),Wd=a("h2"),a7=a("a"),I1e=a("span"),F(WL.$$.fragment),_gr=l(),q1e=a("span"),bgr=o("TFAutoModelForImageClassification"),rqe=l(),er=a("div"),F(HL.$$.fragment),vgr=l(),Hd=a("p"),Fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NQ=a("a"),Tgr=o("from_pretrained()"),Mgr=o(" class method or the "),jQ=a("a"),Egr=o("from_config()"),Cgr=o(` class
method.`),wgr=l(),UL=a("p"),Agr=o("This class cannot be instantiated directly using "),N1e=a("code"),ygr=o("__init__()"),Lgr=o(" (throws an error)."),xgr=l(),Lt=a("div"),F(JL.$$.fragment),$gr=l(),j1e=a("p"),kgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sgr=l(),Ud=a("p"),Rgr=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),Bgr=o("not"),Pgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),Igr=o("from_pretrained()"),qgr=o(" to load the model weights."),Ngr=l(),F(n7.$$.fragment),jgr=l(),Lr=a("div"),F(YL.$$.fragment),Dgr=l(),G1e=a("p"),Ggr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ogr=l(),on=a("p"),Vgr=o("The model class to instantiate is selected based on the "),O1e=a("code"),Xgr=o("model_type"),zgr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),Qgr=o("pretrained_model_name_or_path"),Wgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),Hgr=o("pretrained_model_name_or_path"),Ugr=o(":"),Jgr=l(),Jd=a("ul"),s7=a("li"),z1e=a("strong"),Ygr=o("convnext"),Kgr=o(" \u2014 "),GQ=a("a"),Zgr=o("TFConvNextForImageClassification"),ehr=o(" (ConvNext model)"),ohr=l(),l7=a("li"),Q1e=a("strong"),rhr=o("data2vec-vision"),thr=o(" \u2014 "),OQ=a("a"),ahr=o("TFData2VecVisionForImageClassification"),nhr=o(" (Data2VecVision model)"),shr=l(),i7=a("li"),W1e=a("strong"),lhr=o("vit"),ihr=o(" \u2014 "),VQ=a("a"),dhr=o("TFViTForImageClassification"),chr=o(" (ViT model)"),fhr=l(),F(d7.$$.fragment),tqe=l(),Yd=a("h2"),c7=a("a"),H1e=a("span"),F(KL.$$.fragment),mhr=l(),U1e=a("span"),ghr=o("TFAutoModelForMaskedLM"),aqe=l(),or=a("div"),F(ZL.$$.fragment),hhr=l(),Kd=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XQ=a("a"),uhr=o("from_pretrained()"),_hr=o(" class method or the "),zQ=a("a"),bhr=o("from_config()"),vhr=o(` class
method.`),Fhr=l(),e8=a("p"),Thr=o("This class cannot be instantiated directly using "),J1e=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),Chr=l(),xt=a("div"),F(o8.$$.fragment),whr=l(),Y1e=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yhr=l(),Zd=a("p"),Lhr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),xhr=o("not"),$hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),khr=o("from_pretrained()"),Shr=o(" to load the model weights."),Rhr=l(),F(f7.$$.fragment),Bhr=l(),xr=a("div"),F(r8.$$.fragment),Phr=l(),Z1e=a("p"),Ihr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qhr=l(),rn=a("p"),Nhr=o("The model class to instantiate is selected based on the "),ebe=a("code"),jhr=o("model_type"),Dhr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(":"),zhr=l(),ie=a("ul"),m7=a("li"),tbe=a("strong"),Qhr=o("albert"),Whr=o(" \u2014 "),WQ=a("a"),Hhr=o("TFAlbertForMaskedLM"),Uhr=o(" (ALBERT model)"),Jhr=l(),g7=a("li"),abe=a("strong"),Yhr=o("bert"),Khr=o(" \u2014 "),HQ=a("a"),Zhr=o("TFBertForMaskedLM"),epr=o(" (BERT model)"),opr=l(),h7=a("li"),nbe=a("strong"),rpr=o("camembert"),tpr=o(" \u2014 "),UQ=a("a"),apr=o("TFCamembertForMaskedLM"),npr=o(" (CamemBERT model)"),spr=l(),p7=a("li"),sbe=a("strong"),lpr=o("convbert"),ipr=o(" \u2014 "),JQ=a("a"),dpr=o("TFConvBertForMaskedLM"),cpr=o(" (ConvBERT model)"),fpr=l(),u7=a("li"),lbe=a("strong"),mpr=o("deberta"),gpr=o(" \u2014 "),YQ=a("a"),hpr=o("TFDebertaForMaskedLM"),ppr=o(" (DeBERTa model)"),upr=l(),_7=a("li"),ibe=a("strong"),_pr=o("deberta-v2"),bpr=o(" \u2014 "),KQ=a("a"),vpr=o("TFDebertaV2ForMaskedLM"),Fpr=o(" (DeBERTa-v2 model)"),Tpr=l(),b7=a("li"),dbe=a("strong"),Mpr=o("distilbert"),Epr=o(" \u2014 "),ZQ=a("a"),Cpr=o("TFDistilBertForMaskedLM"),wpr=o(" (DistilBERT model)"),Apr=l(),v7=a("li"),cbe=a("strong"),ypr=o("electra"),Lpr=o(" \u2014 "),eW=a("a"),xpr=o("TFElectraForMaskedLM"),$pr=o(" (ELECTRA model)"),kpr=l(),F7=a("li"),fbe=a("strong"),Spr=o("flaubert"),Rpr=o(" \u2014 "),oW=a("a"),Bpr=o("TFFlaubertWithLMHeadModel"),Ppr=o(" (FlauBERT model)"),Ipr=l(),T7=a("li"),mbe=a("strong"),qpr=o("funnel"),Npr=o(" \u2014 "),rW=a("a"),jpr=o("TFFunnelForMaskedLM"),Dpr=o(" (Funnel Transformer model)"),Gpr=l(),M7=a("li"),gbe=a("strong"),Opr=o("layoutlm"),Vpr=o(" \u2014 "),tW=a("a"),Xpr=o("TFLayoutLMForMaskedLM"),zpr=o(" (LayoutLM model)"),Qpr=l(),E7=a("li"),hbe=a("strong"),Wpr=o("longformer"),Hpr=o(" \u2014 "),aW=a("a"),Upr=o("TFLongformerForMaskedLM"),Jpr=o(" (Longformer model)"),Ypr=l(),C7=a("li"),pbe=a("strong"),Kpr=o("mobilebert"),Zpr=o(" \u2014 "),nW=a("a"),eur=o("TFMobileBertForMaskedLM"),our=o(" (MobileBERT model)"),rur=l(),w7=a("li"),ube=a("strong"),tur=o("mpnet"),aur=o(" \u2014 "),sW=a("a"),nur=o("TFMPNetForMaskedLM"),sur=o(" (MPNet model)"),lur=l(),A7=a("li"),_be=a("strong"),iur=o("rembert"),dur=o(" \u2014 "),lW=a("a"),cur=o("TFRemBertForMaskedLM"),fur=o(" (RemBERT model)"),mur=l(),y7=a("li"),bbe=a("strong"),gur=o("roberta"),hur=o(" \u2014 "),iW=a("a"),pur=o("TFRobertaForMaskedLM"),uur=o(" (RoBERTa model)"),_ur=l(),L7=a("li"),vbe=a("strong"),bur=o("roformer"),vur=o(" \u2014 "),dW=a("a"),Fur=o("TFRoFormerForMaskedLM"),Tur=o(" (RoFormer model)"),Mur=l(),x7=a("li"),Fbe=a("strong"),Eur=o("tapas"),Cur=o(" \u2014 "),cW=a("a"),wur=o("TFTapasForMaskedLM"),Aur=o(" (TAPAS model)"),yur=l(),$7=a("li"),Tbe=a("strong"),Lur=o("xlm"),xur=o(" \u2014 "),fW=a("a"),$ur=o("TFXLMWithLMHeadModel"),kur=o(" (XLM model)"),Sur=l(),k7=a("li"),Mbe=a("strong"),Rur=o("xlm-roberta"),Bur=o(" \u2014 "),mW=a("a"),Pur=o("TFXLMRobertaForMaskedLM"),Iur=o(" (XLM-RoBERTa model)"),qur=l(),F(S7.$$.fragment),nqe=l(),ec=a("h2"),R7=a("a"),Ebe=a("span"),F(t8.$$.fragment),Nur=l(),Cbe=a("span"),jur=o("TFAutoModelForSeq2SeqLM"),sqe=l(),rr=a("div"),F(a8.$$.fragment),Dur=l(),oc=a("p"),Gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gW=a("a"),Our=o("from_pretrained()"),Vur=o(" class method or the "),hW=a("a"),Xur=o("from_config()"),zur=o(` class
method.`),Qur=l(),n8=a("p"),Wur=o("This class cannot be instantiated directly using "),wbe=a("code"),Hur=o("__init__()"),Uur=o(" (throws an error)."),Jur=l(),$t=a("div"),F(s8.$$.fragment),Yur=l(),Abe=a("p"),Kur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zur=l(),rc=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(B7.$$.fragment),s_r=l(),$r=a("div"),F(l8.$$.fragment),l_r=l(),Lbe=a("p"),i_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d_r=l(),tn=a("p"),c_r=o("The model class to instantiate is selected based on the "),xbe=a("code"),f_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),p_r=o("pretrained_model_name_or_path"),u_r=o(":"),__r=l(),ye=a("ul"),P7=a("li"),Sbe=a("strong"),b_r=o("bart"),v_r=o(" \u2014 "),uW=a("a"),F_r=o("TFBartForConditionalGeneration"),T_r=o(" (BART model)"),M_r=l(),I7=a("li"),Rbe=a("strong"),E_r=o("blenderbot"),C_r=o(" \u2014 "),_W=a("a"),w_r=o("TFBlenderbotForConditionalGeneration"),A_r=o(" (Blenderbot model)"),y_r=l(),q7=a("li"),Bbe=a("strong"),L_r=o("blenderbot-small"),x_r=o(" \u2014 "),bW=a("a"),$_r=o("TFBlenderbotSmallForConditionalGeneration"),k_r=o(" (BlenderbotSmall model)"),S_r=l(),N7=a("li"),Pbe=a("strong"),R_r=o("encoder-decoder"),B_r=o(" \u2014 "),vW=a("a"),P_r=o("TFEncoderDecoderModel"),I_r=o(" (Encoder decoder model)"),q_r=l(),j7=a("li"),Ibe=a("strong"),N_r=o("led"),j_r=o(" \u2014 "),FW=a("a"),D_r=o("TFLEDForConditionalGeneration"),G_r=o(" (LED model)"),O_r=l(),D7=a("li"),qbe=a("strong"),V_r=o("marian"),X_r=o(" \u2014 "),TW=a("a"),z_r=o("TFMarianMTModel"),Q_r=o(" (Marian model)"),W_r=l(),G7=a("li"),Nbe=a("strong"),H_r=o("mbart"),U_r=o(" \u2014 "),MW=a("a"),J_r=o("TFMBartForConditionalGeneration"),Y_r=o(" (mBART model)"),K_r=l(),O7=a("li"),jbe=a("strong"),Z_r=o("mt5"),e2r=o(" \u2014 "),EW=a("a"),o2r=o("TFMT5ForConditionalGeneration"),r2r=o(" (mT5 model)"),t2r=l(),V7=a("li"),Dbe=a("strong"),a2r=o("pegasus"),n2r=o(" \u2014 "),CW=a("a"),s2r=o("TFPegasusForConditionalGeneration"),l2r=o(" (Pegasus model)"),i2r=l(),X7=a("li"),Gbe=a("strong"),d2r=o("t5"),c2r=o(" \u2014 "),wW=a("a"),f2r=o("TFT5ForConditionalGeneration"),m2r=o(" (T5 model)"),g2r=l(),F(z7.$$.fragment),lqe=l(),tc=a("h2"),Q7=a("a"),Obe=a("span"),F(i8.$$.fragment),h2r=l(),Vbe=a("span"),p2r=o("TFAutoModelForSequenceClassification"),iqe=l(),tr=a("div"),F(d8.$$.fragment),u2r=l(),ac=a("p"),_2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AW=a("a"),b2r=o("from_pretrained()"),v2r=o(" class method or the "),yW=a("a"),F2r=o("from_config()"),T2r=o(` class
method.`),M2r=l(),c8=a("p"),E2r=o("This class cannot be instantiated directly using "),Xbe=a("code"),C2r=o("__init__()"),w2r=o(" (throws an error)."),A2r=l(),kt=a("div"),F(f8.$$.fragment),y2r=l(),zbe=a("p"),L2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x2r=l(),nc=a("p"),$2r=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),k2r=o("not"),S2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),R2r=o("from_pretrained()"),B2r=o(" to load the model weights."),P2r=l(),F(W7.$$.fragment),I2r=l(),kr=a("div"),F(m8.$$.fragment),q2r=l(),Wbe=a("p"),N2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j2r=l(),an=a("p"),D2r=o("The model class to instantiate is selected based on the "),Hbe=a("code"),G2r=o("model_type"),O2r=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),V2r=o("pretrained_model_name_or_path"),X2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),z2r=o("pretrained_model_name_or_path"),Q2r=o(":"),W2r=l(),Z=a("ul"),H7=a("li"),Ybe=a("strong"),H2r=o("albert"),U2r=o(" \u2014 "),xW=a("a"),J2r=o("TFAlbertForSequenceClassification"),Y2r=o(" (ALBERT model)"),K2r=l(),U7=a("li"),Kbe=a("strong"),Z2r=o("bert"),e1r=o(" \u2014 "),$W=a("a"),o1r=o("TFBertForSequenceClassification"),r1r=o(" (BERT model)"),t1r=l(),J7=a("li"),Zbe=a("strong"),a1r=o("camembert"),n1r=o(" \u2014 "),kW=a("a"),s1r=o("TFCamembertForSequenceClassification"),l1r=o(" (CamemBERT model)"),i1r=l(),Y7=a("li"),e4e=a("strong"),d1r=o("convbert"),c1r=o(" \u2014 "),SW=a("a"),f1r=o("TFConvBertForSequenceClassification"),m1r=o(" (ConvBERT model)"),g1r=l(),K7=a("li"),o4e=a("strong"),h1r=o("ctrl"),p1r=o(" \u2014 "),RW=a("a"),u1r=o("TFCTRLForSequenceClassification"),_1r=o(" (CTRL model)"),b1r=l(),Z7=a("li"),r4e=a("strong"),v1r=o("deberta"),F1r=o(" \u2014 "),BW=a("a"),T1r=o("TFDebertaForSequenceClassification"),M1r=o(" (DeBERTa model)"),E1r=l(),eM=a("li"),t4e=a("strong"),C1r=o("deberta-v2"),w1r=o(" \u2014 "),PW=a("a"),A1r=o("TFDebertaV2ForSequenceClassification"),y1r=o(" (DeBERTa-v2 model)"),L1r=l(),oM=a("li"),a4e=a("strong"),x1r=o("distilbert"),$1r=o(" \u2014 "),IW=a("a"),k1r=o("TFDistilBertForSequenceClassification"),S1r=o(" (DistilBERT model)"),R1r=l(),rM=a("li"),n4e=a("strong"),B1r=o("electra"),P1r=o(" \u2014 "),qW=a("a"),I1r=o("TFElectraForSequenceClassification"),q1r=o(" (ELECTRA model)"),N1r=l(),tM=a("li"),s4e=a("strong"),j1r=o("flaubert"),D1r=o(" \u2014 "),NW=a("a"),G1r=o("TFFlaubertForSequenceClassification"),O1r=o(" (FlauBERT model)"),V1r=l(),aM=a("li"),l4e=a("strong"),X1r=o("funnel"),z1r=o(" \u2014 "),jW=a("a"),Q1r=o("TFFunnelForSequenceClassification"),W1r=o(" (Funnel Transformer model)"),H1r=l(),nM=a("li"),i4e=a("strong"),U1r=o("gpt2"),J1r=o(" \u2014 "),DW=a("a"),Y1r=o("TFGPT2ForSequenceClassification"),K1r=o(" (OpenAI GPT-2 model)"),Z1r=l(),sM=a("li"),d4e=a("strong"),ebr=o("gptj"),obr=o(" \u2014 "),GW=a("a"),rbr=o("TFGPTJForSequenceClassification"),tbr=o(" (GPT-J model)"),abr=l(),lM=a("li"),c4e=a("strong"),nbr=o("layoutlm"),sbr=o(" \u2014 "),OW=a("a"),lbr=o("TFLayoutLMForSequenceClassification"),ibr=o(" (LayoutLM model)"),dbr=l(),iM=a("li"),f4e=a("strong"),cbr=o("longformer"),fbr=o(" \u2014 "),VW=a("a"),mbr=o("TFLongformerForSequenceClassification"),gbr=o(" (Longformer model)"),hbr=l(),dM=a("li"),m4e=a("strong"),pbr=o("mobilebert"),ubr=o(" \u2014 "),XW=a("a"),_br=o("TFMobileBertForSequenceClassification"),bbr=o(" (MobileBERT model)"),vbr=l(),cM=a("li"),g4e=a("strong"),Fbr=o("mpnet"),Tbr=o(" \u2014 "),zW=a("a"),Mbr=o("TFMPNetForSequenceClassification"),Ebr=o(" (MPNet model)"),Cbr=l(),fM=a("li"),h4e=a("strong"),wbr=o("openai-gpt"),Abr=o(" \u2014 "),QW=a("a"),ybr=o("TFOpenAIGPTForSequenceClassification"),Lbr=o(" (OpenAI GPT model)"),xbr=l(),mM=a("li"),p4e=a("strong"),$br=o("rembert"),kbr=o(" \u2014 "),WW=a("a"),Sbr=o("TFRemBertForSequenceClassification"),Rbr=o(" (RemBERT model)"),Bbr=l(),gM=a("li"),u4e=a("strong"),Pbr=o("roberta"),Ibr=o(" \u2014 "),HW=a("a"),qbr=o("TFRobertaForSequenceClassification"),Nbr=o(" (RoBERTa model)"),jbr=l(),hM=a("li"),_4e=a("strong"),Dbr=o("roformer"),Gbr=o(" \u2014 "),UW=a("a"),Obr=o("TFRoFormerForSequenceClassification"),Vbr=o(" (RoFormer model)"),Xbr=l(),pM=a("li"),b4e=a("strong"),zbr=o("tapas"),Qbr=o(" \u2014 "),JW=a("a"),Wbr=o("TFTapasForSequenceClassification"),Hbr=o(" (TAPAS model)"),Ubr=l(),uM=a("li"),v4e=a("strong"),Jbr=o("transfo-xl"),Ybr=o(" \u2014 "),YW=a("a"),Kbr=o("TFTransfoXLForSequenceClassification"),Zbr=o(" (Transformer-XL model)"),e4r=l(),_M=a("li"),F4e=a("strong"),o4r=o("xlm"),r4r=o(" \u2014 "),KW=a("a"),t4r=o("TFXLMForSequenceClassification"),a4r=o(" (XLM model)"),n4r=l(),bM=a("li"),T4e=a("strong"),s4r=o("xlm-roberta"),l4r=o(" \u2014 "),ZW=a("a"),i4r=o("TFXLMRobertaForSequenceClassification"),d4r=o(" (XLM-RoBERTa model)"),c4r=l(),vM=a("li"),M4e=a("strong"),f4r=o("xlnet"),m4r=o(" \u2014 "),eH=a("a"),g4r=o("TFXLNetForSequenceClassification"),h4r=o(" (XLNet model)"),p4r=l(),F(FM.$$.fragment),dqe=l(),sc=a("h2"),TM=a("a"),E4e=a("span"),F(g8.$$.fragment),u4r=l(),C4e=a("span"),_4r=o("TFAutoModelForMultipleChoice"),cqe=l(),ar=a("div"),F(h8.$$.fragment),b4r=l(),lc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oH=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),rH=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),p8=a("p"),w4r=o("This class cannot be instantiated directly using "),w4e=a("code"),A4r=o("__init__()"),y4r=o(" (throws an error)."),L4r=l(),St=a("div"),F(u8.$$.fragment),x4r=l(),A4e=a("p"),$4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k4r=l(),ic=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),R4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),P4r=o("from_pretrained()"),I4r=o(" to load the model weights."),q4r=l(),F(MM.$$.fragment),N4r=l(),Sr=a("div"),F(_8.$$.fragment),j4r=l(),L4e=a("p"),D4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G4r=l(),nn=a("p"),O4r=o("The model class to instantiate is selected based on the "),x4e=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),pe=a("ul"),EM=a("li"),S4e=a("strong"),J4r=o("albert"),Y4r=o(" \u2014 "),aH=a("a"),K4r=o("TFAlbertForMultipleChoice"),Z4r=o(" (ALBERT model)"),e5r=l(),CM=a("li"),R4e=a("strong"),o5r=o("bert"),r5r=o(" \u2014 "),nH=a("a"),t5r=o("TFBertForMultipleChoice"),a5r=o(" (BERT model)"),n5r=l(),wM=a("li"),B4e=a("strong"),s5r=o("camembert"),l5r=o(" \u2014 "),sH=a("a"),i5r=o("TFCamembertForMultipleChoice"),d5r=o(" (CamemBERT model)"),c5r=l(),AM=a("li"),P4e=a("strong"),f5r=o("convbert"),m5r=o(" \u2014 "),lH=a("a"),g5r=o("TFConvBertForMultipleChoice"),h5r=o(" (ConvBERT model)"),p5r=l(),yM=a("li"),I4e=a("strong"),u5r=o("distilbert"),_5r=o(" \u2014 "),iH=a("a"),b5r=o("TFDistilBertForMultipleChoice"),v5r=o(" (DistilBERT model)"),F5r=l(),LM=a("li"),q4e=a("strong"),T5r=o("electra"),M5r=o(" \u2014 "),dH=a("a"),E5r=o("TFElectraForMultipleChoice"),C5r=o(" (ELECTRA model)"),w5r=l(),xM=a("li"),N4e=a("strong"),A5r=o("flaubert"),y5r=o(" \u2014 "),cH=a("a"),L5r=o("TFFlaubertForMultipleChoice"),x5r=o(" (FlauBERT model)"),$5r=l(),$M=a("li"),j4e=a("strong"),k5r=o("funnel"),S5r=o(" \u2014 "),fH=a("a"),R5r=o("TFFunnelForMultipleChoice"),B5r=o(" (Funnel Transformer model)"),P5r=l(),kM=a("li"),D4e=a("strong"),I5r=o("longformer"),q5r=o(" \u2014 "),mH=a("a"),N5r=o("TFLongformerForMultipleChoice"),j5r=o(" (Longformer model)"),D5r=l(),SM=a("li"),G4e=a("strong"),G5r=o("mobilebert"),O5r=o(" \u2014 "),gH=a("a"),V5r=o("TFMobileBertForMultipleChoice"),X5r=o(" (MobileBERT model)"),z5r=l(),RM=a("li"),O4e=a("strong"),Q5r=o("mpnet"),W5r=o(" \u2014 "),hH=a("a"),H5r=o("TFMPNetForMultipleChoice"),U5r=o(" (MPNet model)"),J5r=l(),BM=a("li"),V4e=a("strong"),Y5r=o("rembert"),K5r=o(" \u2014 "),pH=a("a"),Z5r=o("TFRemBertForMultipleChoice"),evr=o(" (RemBERT model)"),ovr=l(),PM=a("li"),X4e=a("strong"),rvr=o("roberta"),tvr=o(" \u2014 "),uH=a("a"),avr=o("TFRobertaForMultipleChoice"),nvr=o(" (RoBERTa model)"),svr=l(),IM=a("li"),z4e=a("strong"),lvr=o("roformer"),ivr=o(" \u2014 "),_H=a("a"),dvr=o("TFRoFormerForMultipleChoice"),cvr=o(" (RoFormer model)"),fvr=l(),qM=a("li"),Q4e=a("strong"),mvr=o("xlm"),gvr=o(" \u2014 "),bH=a("a"),hvr=o("TFXLMForMultipleChoice"),pvr=o(" (XLM model)"),uvr=l(),NM=a("li"),W4e=a("strong"),_vr=o("xlm-roberta"),bvr=o(" \u2014 "),vH=a("a"),vvr=o("TFXLMRobertaForMultipleChoice"),Fvr=o(" (XLM-RoBERTa model)"),Tvr=l(),jM=a("li"),H4e=a("strong"),Mvr=o("xlnet"),Evr=o(" \u2014 "),FH=a("a"),Cvr=o("TFXLNetForMultipleChoice"),wvr=o(" (XLNet model)"),Avr=l(),F(DM.$$.fragment),fqe=l(),dc=a("h2"),GM=a("a"),U4e=a("span"),F(b8.$$.fragment),yvr=l(),J4e=a("span"),Lvr=o("TFAutoModelForNextSentencePrediction"),mqe=l(),nr=a("div"),F(v8.$$.fragment),xvr=l(),cc=a("p"),$vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TH=a("a"),kvr=o("from_pretrained()"),Svr=o(" class method or the "),MH=a("a"),Rvr=o("from_config()"),Bvr=o(` class
method.`),Pvr=l(),F8=a("p"),Ivr=o("This class cannot be instantiated directly using "),Y4e=a("code"),qvr=o("__init__()"),Nvr=o(" (throws an error)."),jvr=l(),Rt=a("div"),F(T8.$$.fragment),Dvr=l(),K4e=a("p"),Gvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ovr=l(),fc=a("p"),Vvr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),Xvr=o("not"),zvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),Qvr=o("from_pretrained()"),Wvr=o(" to load the model weights."),Hvr=l(),F(OM.$$.fragment),Uvr=l(),Rr=a("div"),F(M8.$$.fragment),Jvr=l(),e5e=a("p"),Yvr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kvr=l(),sn=a("p"),Zvr=o("The model class to instantiate is selected based on the "),o5e=a("code"),eFr=o("model_type"),oFr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),aFr=o("pretrained_model_name_or_path"),nFr=o(":"),sFr=l(),E8=a("ul"),VM=a("li"),a5e=a("strong"),lFr=o("bert"),iFr=o(" \u2014 "),CH=a("a"),dFr=o("TFBertForNextSentencePrediction"),cFr=o(" (BERT model)"),fFr=l(),XM=a("li"),n5e=a("strong"),mFr=o("mobilebert"),gFr=o(" \u2014 "),wH=a("a"),hFr=o("TFMobileBertForNextSentencePrediction"),pFr=o(" (MobileBERT model)"),uFr=l(),F(zM.$$.fragment),gqe=l(),mc=a("h2"),QM=a("a"),s5e=a("span"),F(C8.$$.fragment),_Fr=l(),l5e=a("span"),bFr=o("TFAutoModelForTableQuestionAnswering"),hqe=l(),sr=a("div"),F(w8.$$.fragment),vFr=l(),gc=a("p"),FFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AH=a("a"),TFr=o("from_pretrained()"),MFr=o(" class method or the "),yH=a("a"),EFr=o("from_config()"),CFr=o(` class
method.`),wFr=l(),A8=a("p"),AFr=o("This class cannot be instantiated directly using "),i5e=a("code"),yFr=o("__init__()"),LFr=o(" (throws an error)."),xFr=l(),Bt=a("div"),F(y8.$$.fragment),$Fr=l(),d5e=a("p"),kFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SFr=l(),hc=a("p"),RFr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),BFr=o("not"),PFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),IFr=o("from_pretrained()"),qFr=o(" to load the model weights."),NFr=l(),F(WM.$$.fragment),jFr=l(),Br=a("div"),F(L8.$$.fragment),DFr=l(),f5e=a("p"),GFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OFr=l(),ln=a("p"),VFr=o("The model class to instantiate is selected based on the "),m5e=a("code"),XFr=o("model_type"),zFr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),QFr=o("pretrained_model_name_or_path"),WFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),HFr=o("pretrained_model_name_or_path"),UFr=o(":"),JFr=l(),p5e=a("ul"),HM=a("li"),u5e=a("strong"),YFr=o("tapas"),KFr=o(" \u2014 "),xH=a("a"),ZFr=o("TFTapasForQuestionAnswering"),eTr=o(" (TAPAS model)"),oTr=l(),F(UM.$$.fragment),pqe=l(),pc=a("h2"),JM=a("a"),_5e=a("span"),F(x8.$$.fragment),rTr=l(),b5e=a("span"),tTr=o("TFAutoModelForTokenClassification"),uqe=l(),lr=a("div"),F($8.$$.fragment),aTr=l(),uc=a("p"),nTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$H=a("a"),sTr=o("from_pretrained()"),lTr=o(" class method or the "),kH=a("a"),iTr=o("from_config()"),dTr=o(` class
method.`),cTr=l(),k8=a("p"),fTr=o("This class cannot be instantiated directly using "),v5e=a("code"),mTr=o("__init__()"),gTr=o(" (throws an error)."),hTr=l(),Pt=a("div"),F(S8.$$.fragment),pTr=l(),F5e=a("p"),uTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Tr=l(),_c=a("p"),bTr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),vTr=o("not"),FTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),TTr=o("from_pretrained()"),MTr=o(" to load the model weights."),ETr=l(),F(YM.$$.fragment),CTr=l(),Pr=a("div"),F(R8.$$.fragment),wTr=l(),M5e=a("p"),ATr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yTr=l(),dn=a("p"),LTr=o("The model class to instantiate is selected based on the "),E5e=a("code"),xTr=o("model_type"),$Tr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),RTr=o("pretrained_model_name_or_path"),BTr=o(":"),PTr=l(),de=a("ul"),KM=a("li"),A5e=a("strong"),ITr=o("albert"),qTr=o(" \u2014 "),RH=a("a"),NTr=o("TFAlbertForTokenClassification"),jTr=o(" (ALBERT model)"),DTr=l(),ZM=a("li"),y5e=a("strong"),GTr=o("bert"),OTr=o(" \u2014 "),BH=a("a"),VTr=o("TFBertForTokenClassification"),XTr=o(" (BERT model)"),zTr=l(),eE=a("li"),L5e=a("strong"),QTr=o("camembert"),WTr=o(" \u2014 "),PH=a("a"),HTr=o("TFCamembertForTokenClassification"),UTr=o(" (CamemBERT model)"),JTr=l(),oE=a("li"),x5e=a("strong"),YTr=o("convbert"),KTr=o(" \u2014 "),IH=a("a"),ZTr=o("TFConvBertForTokenClassification"),e7r=o(" (ConvBERT model)"),o7r=l(),rE=a("li"),$5e=a("strong"),r7r=o("deberta"),t7r=o(" \u2014 "),qH=a("a"),a7r=o("TFDebertaForTokenClassification"),n7r=o(" (DeBERTa model)"),s7r=l(),tE=a("li"),k5e=a("strong"),l7r=o("deberta-v2"),i7r=o(" \u2014 "),NH=a("a"),d7r=o("TFDebertaV2ForTokenClassification"),c7r=o(" (DeBERTa-v2 model)"),f7r=l(),aE=a("li"),S5e=a("strong"),m7r=o("distilbert"),g7r=o(" \u2014 "),jH=a("a"),h7r=o("TFDistilBertForTokenClassification"),p7r=o(" (DistilBERT model)"),u7r=l(),nE=a("li"),R5e=a("strong"),_7r=o("electra"),b7r=o(" \u2014 "),DH=a("a"),v7r=o("TFElectraForTokenClassification"),F7r=o(" (ELECTRA model)"),T7r=l(),sE=a("li"),B5e=a("strong"),M7r=o("flaubert"),E7r=o(" \u2014 "),GH=a("a"),C7r=o("TFFlaubertForTokenClassification"),w7r=o(" (FlauBERT model)"),A7r=l(),lE=a("li"),P5e=a("strong"),y7r=o("funnel"),L7r=o(" \u2014 "),OH=a("a"),x7r=o("TFFunnelForTokenClassification"),$7r=o(" (Funnel Transformer model)"),k7r=l(),iE=a("li"),I5e=a("strong"),S7r=o("layoutlm"),R7r=o(" \u2014 "),VH=a("a"),B7r=o("TFLayoutLMForTokenClassification"),P7r=o(" (LayoutLM model)"),I7r=l(),dE=a("li"),q5e=a("strong"),q7r=o("longformer"),N7r=o(" \u2014 "),XH=a("a"),j7r=o("TFLongformerForTokenClassification"),D7r=o(" (Longformer model)"),G7r=l(),cE=a("li"),N5e=a("strong"),O7r=o("mobilebert"),V7r=o(" \u2014 "),zH=a("a"),X7r=o("TFMobileBertForTokenClassification"),z7r=o(" (MobileBERT model)"),Q7r=l(),fE=a("li"),j5e=a("strong"),W7r=o("mpnet"),H7r=o(" \u2014 "),QH=a("a"),U7r=o("TFMPNetForTokenClassification"),J7r=o(" (MPNet model)"),Y7r=l(),mE=a("li"),D5e=a("strong"),K7r=o("rembert"),Z7r=o(" \u2014 "),WH=a("a"),eMr=o("TFRemBertForTokenClassification"),oMr=o(" (RemBERT model)"),rMr=l(),gE=a("li"),G5e=a("strong"),tMr=o("roberta"),aMr=o(" \u2014 "),HH=a("a"),nMr=o("TFRobertaForTokenClassification"),sMr=o(" (RoBERTa model)"),lMr=l(),hE=a("li"),O5e=a("strong"),iMr=o("roformer"),dMr=o(" \u2014 "),UH=a("a"),cMr=o("TFRoFormerForTokenClassification"),fMr=o(" (RoFormer model)"),mMr=l(),pE=a("li"),V5e=a("strong"),gMr=o("xlm"),hMr=o(" \u2014 "),JH=a("a"),pMr=o("TFXLMForTokenClassification"),uMr=o(" (XLM model)"),_Mr=l(),uE=a("li"),X5e=a("strong"),bMr=o("xlm-roberta"),vMr=o(" \u2014 "),YH=a("a"),FMr=o("TFXLMRobertaForTokenClassification"),TMr=o(" (XLM-RoBERTa model)"),MMr=l(),_E=a("li"),z5e=a("strong"),EMr=o("xlnet"),CMr=o(" \u2014 "),KH=a("a"),wMr=o("TFXLNetForTokenClassification"),AMr=o(" (XLNet model)"),yMr=l(),F(bE.$$.fragment),_qe=l(),bc=a("h2"),vE=a("a"),Q5e=a("span"),F(B8.$$.fragment),LMr=l(),W5e=a("span"),xMr=o("TFAutoModelForQuestionAnswering"),bqe=l(),ir=a("div"),F(P8.$$.fragment),$Mr=l(),vc=a("p"),kMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZH=a("a"),SMr=o("from_pretrained()"),RMr=o(" class method or the "),eU=a("a"),BMr=o("from_config()"),PMr=o(` class
method.`),IMr=l(),I8=a("p"),qMr=o("This class cannot be instantiated directly using "),H5e=a("code"),NMr=o("__init__()"),jMr=o(" (throws an error)."),DMr=l(),It=a("div"),F(q8.$$.fragment),GMr=l(),U5e=a("p"),OMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VMr=l(),Fc=a("p"),XMr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),zMr=o("not"),QMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),WMr=o("from_pretrained()"),HMr=o(" to load the model weights."),UMr=l(),F(FE.$$.fragment),JMr=l(),Ir=a("div"),F(N8.$$.fragment),YMr=l(),Y5e=a("p"),KMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZMr=l(),cn=a("p"),eEr=o("The model class to instantiate is selected based on the "),K5e=a("code"),oEr=o("model_type"),rEr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),tEr=o("pretrained_model_name_or_path"),aEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(":"),lEr=l(),ce=a("ul"),TE=a("li"),ove=a("strong"),iEr=o("albert"),dEr=o(" \u2014 "),rU=a("a"),cEr=o("TFAlbertForQuestionAnswering"),fEr=o(" (ALBERT model)"),mEr=l(),ME=a("li"),rve=a("strong"),gEr=o("bert"),hEr=o(" \u2014 "),tU=a("a"),pEr=o("TFBertForQuestionAnswering"),uEr=o(" (BERT model)"),_Er=l(),EE=a("li"),tve=a("strong"),bEr=o("camembert"),vEr=o(" \u2014 "),aU=a("a"),FEr=o("TFCamembertForQuestionAnswering"),TEr=o(" (CamemBERT model)"),MEr=l(),CE=a("li"),ave=a("strong"),EEr=o("convbert"),CEr=o(" \u2014 "),nU=a("a"),wEr=o("TFConvBertForQuestionAnswering"),AEr=o(" (ConvBERT model)"),yEr=l(),wE=a("li"),nve=a("strong"),LEr=o("deberta"),xEr=o(" \u2014 "),sU=a("a"),$Er=o("TFDebertaForQuestionAnswering"),kEr=o(" (DeBERTa model)"),SEr=l(),AE=a("li"),sve=a("strong"),REr=o("deberta-v2"),BEr=o(" \u2014 "),lU=a("a"),PEr=o("TFDebertaV2ForQuestionAnswering"),IEr=o(" (DeBERTa-v2 model)"),qEr=l(),yE=a("li"),lve=a("strong"),NEr=o("distilbert"),jEr=o(" \u2014 "),iU=a("a"),DEr=o("TFDistilBertForQuestionAnswering"),GEr=o(" (DistilBERT model)"),OEr=l(),LE=a("li"),ive=a("strong"),VEr=o("electra"),XEr=o(" \u2014 "),dU=a("a"),zEr=o("TFElectraForQuestionAnswering"),QEr=o(" (ELECTRA model)"),WEr=l(),xE=a("li"),dve=a("strong"),HEr=o("flaubert"),UEr=o(" \u2014 "),cU=a("a"),JEr=o("TFFlaubertForQuestionAnsweringSimple"),YEr=o(" (FlauBERT model)"),KEr=l(),$E=a("li"),cve=a("strong"),ZEr=o("funnel"),eCr=o(" \u2014 "),fU=a("a"),oCr=o("TFFunnelForQuestionAnswering"),rCr=o(" (Funnel Transformer model)"),tCr=l(),kE=a("li"),fve=a("strong"),aCr=o("gptj"),nCr=o(" \u2014 "),mU=a("a"),sCr=o("TFGPTJForQuestionAnswering"),lCr=o(" (GPT-J model)"),iCr=l(),SE=a("li"),mve=a("strong"),dCr=o("longformer"),cCr=o(" \u2014 "),gU=a("a"),fCr=o("TFLongformerForQuestionAnswering"),mCr=o(" (Longformer model)"),gCr=l(),RE=a("li"),gve=a("strong"),hCr=o("mobilebert"),pCr=o(" \u2014 "),hU=a("a"),uCr=o("TFMobileBertForQuestionAnswering"),_Cr=o(" (MobileBERT model)"),bCr=l(),BE=a("li"),hve=a("strong"),vCr=o("mpnet"),FCr=o(" \u2014 "),pU=a("a"),TCr=o("TFMPNetForQuestionAnswering"),MCr=o(" (MPNet model)"),ECr=l(),PE=a("li"),pve=a("strong"),CCr=o("rembert"),wCr=o(" \u2014 "),uU=a("a"),ACr=o("TFRemBertForQuestionAnswering"),yCr=o(" (RemBERT model)"),LCr=l(),IE=a("li"),uve=a("strong"),xCr=o("roberta"),$Cr=o(" \u2014 "),_U=a("a"),kCr=o("TFRobertaForQuestionAnswering"),SCr=o(" (RoBERTa model)"),RCr=l(),qE=a("li"),_ve=a("strong"),BCr=o("roformer"),PCr=o(" \u2014 "),bU=a("a"),ICr=o("TFRoFormerForQuestionAnswering"),qCr=o(" (RoFormer model)"),NCr=l(),NE=a("li"),bve=a("strong"),jCr=o("xlm"),DCr=o(" \u2014 "),vU=a("a"),GCr=o("TFXLMForQuestionAnsweringSimple"),OCr=o(" (XLM model)"),VCr=l(),jE=a("li"),vve=a("strong"),XCr=o("xlm-roberta"),zCr=o(" \u2014 "),FU=a("a"),QCr=o("TFXLMRobertaForQuestionAnswering"),WCr=o(" (XLM-RoBERTa model)"),HCr=l(),DE=a("li"),Fve=a("strong"),UCr=o("xlnet"),JCr=o(" \u2014 "),TU=a("a"),YCr=o("TFXLNetForQuestionAnsweringSimple"),KCr=o(" (XLNet model)"),ZCr=l(),F(GE.$$.fragment),vqe=l(),Tc=a("h2"),OE=a("a"),Tve=a("span"),F(j8.$$.fragment),e3r=l(),Mve=a("span"),o3r=o("TFAutoModelForVision2Seq"),Fqe=l(),dr=a("div"),F(D8.$$.fragment),r3r=l(),Mc=a("p"),t3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MU=a("a"),a3r=o("from_pretrained()"),n3r=o(" class method or the "),EU=a("a"),s3r=o("from_config()"),l3r=o(` class
method.`),i3r=l(),G8=a("p"),d3r=o("This class cannot be instantiated directly using "),Eve=a("code"),c3r=o("__init__()"),f3r=o(" (throws an error)."),m3r=l(),qt=a("div"),F(O8.$$.fragment),g3r=l(),Cve=a("p"),h3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p3r=l(),Ec=a("p"),u3r=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),_3r=o("not"),b3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),v3r=o("from_pretrained()"),F3r=o(" to load the model weights."),T3r=l(),F(VE.$$.fragment),M3r=l(),qr=a("div"),F(V8.$$.fragment),E3r=l(),Ave=a("p"),C3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),w3r=l(),fn=a("p"),A3r=o("The model class to instantiate is selected based on the "),yve=a("code"),y3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),k3r=o("pretrained_model_name_or_path"),S3r=o(":"),R3r=l(),$ve=a("ul"),XE=a("li"),kve=a("strong"),B3r=o("vision-encoder-decoder"),P3r=o(" \u2014 "),wU=a("a"),I3r=o("TFVisionEncoderDecoderModel"),q3r=o(" (Vision Encoder decoder model)"),N3r=l(),F(zE.$$.fragment),Tqe=l(),Cc=a("h2"),QE=a("a"),Sve=a("span"),F(X8.$$.fragment),j3r=l(),Rve=a("span"),D3r=o("TFAutoModelForSpeechSeq2Seq"),Mqe=l(),cr=a("div"),F(z8.$$.fragment),G3r=l(),wc=a("p"),O3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AU=a("a"),V3r=o("from_pretrained()"),X3r=o(" class method or the "),yU=a("a"),z3r=o("from_config()"),Q3r=o(` class
method.`),W3r=l(),Q8=a("p"),H3r=o("This class cannot be instantiated directly using "),Bve=a("code"),U3r=o("__init__()"),J3r=o(" (throws an error)."),Y3r=l(),Nt=a("div"),F(W8.$$.fragment),K3r=l(),Pve=a("p"),Z3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ewr=l(),Ac=a("p"),owr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),rwr=o("not"),twr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),awr=o("from_pretrained()"),nwr=o(" to load the model weights."),swr=l(),F(WE.$$.fragment),lwr=l(),Nr=a("div"),F(H8.$$.fragment),iwr=l(),qve=a("p"),dwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cwr=l(),mn=a("p"),fwr=o("The model class to instantiate is selected based on the "),Nve=a("code"),mwr=o("model_type"),gwr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),uwr=o("pretrained_model_name_or_path"),_wr=o(":"),bwr=l(),Gve=a("ul"),HE=a("li"),Ove=a("strong"),vwr=o("speech_to_text"),Fwr=o(" \u2014 "),xU=a("a"),Twr=o("TFSpeech2TextForConditionalGeneration"),Mwr=o(" (Speech2Text model)"),Ewr=l(),F(UE.$$.fragment),Eqe=l(),yc=a("h2"),JE=a("a"),Vve=a("span"),F(U8.$$.fragment),Cwr=l(),Xve=a("span"),wwr=o("FlaxAutoModel"),Cqe=l(),fr=a("div"),F(J8.$$.fragment),Awr=l(),Lc=a("p"),ywr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$U=a("a"),Lwr=o("from_pretrained()"),xwr=o(" class method or the "),kU=a("a"),$wr=o("from_config()"),kwr=o(` class
method.`),Swr=l(),Y8=a("p"),Rwr=o("This class cannot be instantiated directly using "),zve=a("code"),Bwr=o("__init__()"),Pwr=o(" (throws an error)."),Iwr=l(),jt=a("div"),F(K8.$$.fragment),qwr=l(),Qve=a("p"),Nwr=o("Instantiates one of the base model classes of the library from a configuration."),jwr=l(),xc=a("p"),Dwr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),Gwr=o("not"),Owr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),Vwr=o("from_pretrained()"),Xwr=o(" to load the model weights."),zwr=l(),F(YE.$$.fragment),Qwr=l(),jr=a("div"),F(Z8.$$.fragment),Wwr=l(),Hve=a("p"),Hwr=o("Instantiate one of the base model classes of the library from a pretrained model."),Uwr=l(),gn=a("p"),Jwr=o("The model class to instantiate is selected based on the "),Uve=a("code"),Ywr=o("model_type"),Kwr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Zwr=o("pretrained_model_name_or_path"),eAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(":"),tAr=l(),re=a("ul"),KE=a("li"),Kve=a("strong"),aAr=o("albert"),nAr=o(" \u2014 "),RU=a("a"),sAr=o("FlaxAlbertModel"),lAr=o(" (ALBERT model)"),iAr=l(),ZE=a("li"),Zve=a("strong"),dAr=o("bart"),cAr=o(" \u2014 "),BU=a("a"),fAr=o("FlaxBartModel"),mAr=o(" (BART model)"),gAr=l(),eC=a("li"),eFe=a("strong"),hAr=o("beit"),pAr=o(" \u2014 "),PU=a("a"),uAr=o("FlaxBeitModel"),_Ar=o(" (BEiT model)"),bAr=l(),oC=a("li"),oFe=a("strong"),vAr=o("bert"),FAr=o(" \u2014 "),IU=a("a"),TAr=o("FlaxBertModel"),MAr=o(" (BERT model)"),EAr=l(),rC=a("li"),rFe=a("strong"),CAr=o("big_bird"),wAr=o(" \u2014 "),qU=a("a"),AAr=o("FlaxBigBirdModel"),yAr=o(" (BigBird model)"),LAr=l(),tC=a("li"),tFe=a("strong"),xAr=o("blenderbot"),$Ar=o(" \u2014 "),NU=a("a"),kAr=o("FlaxBlenderbotModel"),SAr=o(" (Blenderbot model)"),RAr=l(),aC=a("li"),aFe=a("strong"),BAr=o("blenderbot-small"),PAr=o(" \u2014 "),jU=a("a"),IAr=o("FlaxBlenderbotSmallModel"),qAr=o(" (BlenderbotSmall model)"),NAr=l(),nC=a("li"),nFe=a("strong"),jAr=o("clip"),DAr=o(" \u2014 "),DU=a("a"),GAr=o("FlaxCLIPModel"),OAr=o(" (CLIP model)"),VAr=l(),sC=a("li"),sFe=a("strong"),XAr=o("distilbert"),zAr=o(" \u2014 "),GU=a("a"),QAr=o("FlaxDistilBertModel"),WAr=o(" (DistilBERT model)"),HAr=l(),lC=a("li"),lFe=a("strong"),UAr=o("electra"),JAr=o(" \u2014 "),OU=a("a"),YAr=o("FlaxElectraModel"),KAr=o(" (ELECTRA model)"),ZAr=l(),iC=a("li"),iFe=a("strong"),e6r=o("gpt2"),o6r=o(" \u2014 "),VU=a("a"),r6r=o("FlaxGPT2Model"),t6r=o(" (OpenAI GPT-2 model)"),a6r=l(),dC=a("li"),dFe=a("strong"),n6r=o("gpt_neo"),s6r=o(" \u2014 "),XU=a("a"),l6r=o("FlaxGPTNeoModel"),i6r=o(" (GPT Neo model)"),d6r=l(),cC=a("li"),cFe=a("strong"),c6r=o("gptj"),f6r=o(" \u2014 "),zU=a("a"),m6r=o("FlaxGPTJModel"),g6r=o(" (GPT-J model)"),h6r=l(),fC=a("li"),fFe=a("strong"),p6r=o("marian"),u6r=o(" \u2014 "),QU=a("a"),_6r=o("FlaxMarianModel"),b6r=o(" (Marian model)"),v6r=l(),mC=a("li"),mFe=a("strong"),F6r=o("mbart"),T6r=o(" \u2014 "),WU=a("a"),M6r=o("FlaxMBartModel"),E6r=o(" (mBART model)"),C6r=l(),gC=a("li"),gFe=a("strong"),w6r=o("mt5"),A6r=o(" \u2014 "),HU=a("a"),y6r=o("FlaxMT5Model"),L6r=o(" (mT5 model)"),x6r=l(),hC=a("li"),hFe=a("strong"),$6r=o("pegasus"),k6r=o(" \u2014 "),UU=a("a"),S6r=o("FlaxPegasusModel"),R6r=o(" (Pegasus model)"),B6r=l(),pC=a("li"),pFe=a("strong"),P6r=o("roberta"),I6r=o(" \u2014 "),JU=a("a"),q6r=o("FlaxRobertaModel"),N6r=o(" (RoBERTa model)"),j6r=l(),uC=a("li"),uFe=a("strong"),D6r=o("roformer"),G6r=o(" \u2014 "),YU=a("a"),O6r=o("FlaxRoFormerModel"),V6r=o(" (RoFormer model)"),X6r=l(),_C=a("li"),_Fe=a("strong"),z6r=o("t5"),Q6r=o(" \u2014 "),KU=a("a"),W6r=o("FlaxT5Model"),H6r=o(" (T5 model)"),U6r=l(),bC=a("li"),bFe=a("strong"),J6r=o("vision-text-dual-encoder"),Y6r=o(" \u2014 "),ZU=a("a"),K6r=o("FlaxVisionTextDualEncoderModel"),Z6r=o(" (VisionTextDualEncoder model)"),e0r=l(),vC=a("li"),vFe=a("strong"),o0r=o("vit"),r0r=o(" \u2014 "),eJ=a("a"),t0r=o("FlaxViTModel"),a0r=o(" (ViT model)"),n0r=l(),FC=a("li"),FFe=a("strong"),s0r=o("wav2vec2"),l0r=o(" \u2014 "),oJ=a("a"),i0r=o("FlaxWav2Vec2Model"),d0r=o(" (Wav2Vec2 model)"),c0r=l(),TC=a("li"),TFe=a("strong"),f0r=o("xglm"),m0r=o(" \u2014 "),rJ=a("a"),g0r=o("FlaxXGLMModel"),h0r=o(" (XGLM model)"),p0r=l(),MC=a("li"),MFe=a("strong"),u0r=o("xlm-roberta"),_0r=o(" \u2014 "),tJ=a("a"),b0r=o("FlaxXLMRobertaModel"),v0r=o(" (XLM-RoBERTa model)"),F0r=l(),F(EC.$$.fragment),wqe=l(),$c=a("h2"),CC=a("a"),EFe=a("span"),F(ex.$$.fragment),T0r=l(),CFe=a("span"),M0r=o("FlaxAutoModelForCausalLM"),Aqe=l(),mr=a("div"),F(ox.$$.fragment),E0r=l(),kc=a("p"),C0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aJ=a("a"),w0r=o("from_pretrained()"),A0r=o(" class method or the "),nJ=a("a"),y0r=o("from_config()"),L0r=o(` class
method.`),x0r=l(),rx=a("p"),$0r=o("This class cannot be instantiated directly using "),wFe=a("code"),k0r=o("__init__()"),S0r=o(" (throws an error)."),R0r=l(),Dt=a("div"),F(tx.$$.fragment),B0r=l(),AFe=a("p"),P0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I0r=l(),Sc=a("p"),q0r=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),N0r=o("not"),j0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),D0r=o("from_pretrained()"),G0r=o(" to load the model weights."),O0r=l(),F(wC.$$.fragment),V0r=l(),Dr=a("div"),F(ax.$$.fragment),X0r=l(),LFe=a("p"),z0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q0r=l(),hn=a("p"),W0r=o("The model class to instantiate is selected based on the "),xFe=a("code"),H0r=o("model_type"),U0r=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(":"),eyr=l(),ke=a("ul"),AC=a("li"),SFe=a("strong"),oyr=o("bart"),ryr=o(" \u2014 "),lJ=a("a"),tyr=o("FlaxBartForCausalLM"),ayr=o(" (BART model)"),nyr=l(),yC=a("li"),RFe=a("strong"),syr=o("bert"),lyr=o(" \u2014 "),iJ=a("a"),iyr=o("FlaxBertForCausalLM"),dyr=o(" (BERT model)"),cyr=l(),LC=a("li"),BFe=a("strong"),fyr=o("big_bird"),myr=o(" \u2014 "),dJ=a("a"),gyr=o("FlaxBigBirdForCausalLM"),hyr=o(" (BigBird model)"),pyr=l(),xC=a("li"),PFe=a("strong"),uyr=o("electra"),_yr=o(" \u2014 "),cJ=a("a"),byr=o("FlaxElectraForCausalLM"),vyr=o(" (ELECTRA model)"),Fyr=l(),$C=a("li"),IFe=a("strong"),Tyr=o("gpt2"),Myr=o(" \u2014 "),fJ=a("a"),Eyr=o("FlaxGPT2LMHeadModel"),Cyr=o(" (OpenAI GPT-2 model)"),wyr=l(),kC=a("li"),qFe=a("strong"),Ayr=o("gpt_neo"),yyr=o(" \u2014 "),mJ=a("a"),Lyr=o("FlaxGPTNeoForCausalLM"),xyr=o(" (GPT Neo model)"),$yr=l(),SC=a("li"),NFe=a("strong"),kyr=o("gptj"),Syr=o(" \u2014 "),gJ=a("a"),Ryr=o("FlaxGPTJForCausalLM"),Byr=o(" (GPT-J model)"),Pyr=l(),RC=a("li"),jFe=a("strong"),Iyr=o("roberta"),qyr=o(" \u2014 "),hJ=a("a"),Nyr=o("FlaxRobertaForCausalLM"),jyr=o(" (RoBERTa model)"),Dyr=l(),BC=a("li"),DFe=a("strong"),Gyr=o("xglm"),Oyr=o(" \u2014 "),pJ=a("a"),Vyr=o("FlaxXGLMForCausalLM"),Xyr=o(" (XGLM model)"),zyr=l(),F(PC.$$.fragment),yqe=l(),Rc=a("h2"),IC=a("a"),GFe=a("span"),F(nx.$$.fragment),Qyr=l(),OFe=a("span"),Wyr=o("FlaxAutoModelForPreTraining"),Lqe=l(),gr=a("div"),F(sx.$$.fragment),Hyr=l(),Bc=a("p"),Uyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=a("a"),Jyr=o("from_pretrained()"),Yyr=o(" class method or the "),_J=a("a"),Kyr=o("from_config()"),Zyr=o(` class
method.`),eLr=l(),lx=a("p"),oLr=o("This class cannot be instantiated directly using "),VFe=a("code"),rLr=o("__init__()"),tLr=o(" (throws an error)."),aLr=l(),Gt=a("div"),F(ix.$$.fragment),nLr=l(),XFe=a("p"),sLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lLr=l(),Pc=a("p"),iLr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),dLr=o("not"),cLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),fLr=o("from_pretrained()"),mLr=o(" to load the model weights."),gLr=l(),F(qC.$$.fragment),hLr=l(),Gr=a("div"),F(dx.$$.fragment),pLr=l(),QFe=a("p"),uLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Lr=l(),pn=a("p"),bLr=o("The model class to instantiate is selected based on the "),WFe=a("code"),vLr=o("model_type"),FLr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),TLr=o("pretrained_model_name_or_path"),MLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(":"),wLr=l(),Me=a("ul"),NC=a("li"),JFe=a("strong"),ALr=o("albert"),yLr=o(" \u2014 "),vJ=a("a"),LLr=o("FlaxAlbertForPreTraining"),xLr=o(" (ALBERT model)"),$Lr=l(),jC=a("li"),YFe=a("strong"),kLr=o("bart"),SLr=o(" \u2014 "),FJ=a("a"),RLr=o("FlaxBartForConditionalGeneration"),BLr=o(" (BART model)"),PLr=l(),DC=a("li"),KFe=a("strong"),ILr=o("bert"),qLr=o(" \u2014 "),TJ=a("a"),NLr=o("FlaxBertForPreTraining"),jLr=o(" (BERT model)"),DLr=l(),GC=a("li"),ZFe=a("strong"),GLr=o("big_bird"),OLr=o(" \u2014 "),MJ=a("a"),VLr=o("FlaxBigBirdForPreTraining"),XLr=o(" (BigBird model)"),zLr=l(),OC=a("li"),eTe=a("strong"),QLr=o("electra"),WLr=o(" \u2014 "),EJ=a("a"),HLr=o("FlaxElectraForPreTraining"),ULr=o(" (ELECTRA model)"),JLr=l(),VC=a("li"),oTe=a("strong"),YLr=o("mbart"),KLr=o(" \u2014 "),CJ=a("a"),ZLr=o("FlaxMBartForConditionalGeneration"),e8r=o(" (mBART model)"),o8r=l(),XC=a("li"),rTe=a("strong"),r8r=o("mt5"),t8r=o(" \u2014 "),wJ=a("a"),a8r=o("FlaxMT5ForConditionalGeneration"),n8r=o(" (mT5 model)"),s8r=l(),zC=a("li"),tTe=a("strong"),l8r=o("roberta"),i8r=o(" \u2014 "),AJ=a("a"),d8r=o("FlaxRobertaForMaskedLM"),c8r=o(" (RoBERTa model)"),f8r=l(),QC=a("li"),aTe=a("strong"),m8r=o("roformer"),g8r=o(" \u2014 "),yJ=a("a"),h8r=o("FlaxRoFormerForMaskedLM"),p8r=o(" (RoFormer model)"),u8r=l(),WC=a("li"),nTe=a("strong"),_8r=o("t5"),b8r=o(" \u2014 "),LJ=a("a"),v8r=o("FlaxT5ForConditionalGeneration"),F8r=o(" (T5 model)"),T8r=l(),HC=a("li"),sTe=a("strong"),M8r=o("wav2vec2"),E8r=o(" \u2014 "),xJ=a("a"),C8r=o("FlaxWav2Vec2ForPreTraining"),w8r=o(" (Wav2Vec2 model)"),A8r=l(),UC=a("li"),lTe=a("strong"),y8r=o("xlm-roberta"),L8r=o(" \u2014 "),$J=a("a"),x8r=o("FlaxXLMRobertaForMaskedLM"),$8r=o(" (XLM-RoBERTa model)"),k8r=l(),F(JC.$$.fragment),xqe=l(),Ic=a("h2"),YC=a("a"),iTe=a("span"),F(cx.$$.fragment),S8r=l(),dTe=a("span"),R8r=o("FlaxAutoModelForMaskedLM"),$qe=l(),hr=a("div"),F(fx.$$.fragment),B8r=l(),qc=a("p"),P8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kJ=a("a"),I8r=o("from_pretrained()"),q8r=o(" class method or the "),SJ=a("a"),N8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),mx=a("p"),G8r=o("This class cannot be instantiated directly using "),cTe=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Ot=a("div"),F(gx.$$.fragment),z8r=l(),fTe=a("p"),Q8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),W8r=l(),Nc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),Y8r=o("from_pretrained()"),K8r=o(" to load the model weights."),Z8r=l(),F(KC.$$.fragment),exr=l(),Or=a("div"),F(hx.$$.fragment),oxr=l(),gTe=a("p"),rxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),txr=l(),un=a("p"),axr=o("The model class to instantiate is selected based on the "),hTe=a("code"),nxr=o("model_type"),sxr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(":"),fxr=l(),Le=a("ul"),ZC=a("li"),_Te=a("strong"),mxr=o("albert"),gxr=o(" \u2014 "),BJ=a("a"),hxr=o("FlaxAlbertForMaskedLM"),pxr=o(" (ALBERT model)"),uxr=l(),e3=a("li"),bTe=a("strong"),_xr=o("bart"),bxr=o(" \u2014 "),PJ=a("a"),vxr=o("FlaxBartForConditionalGeneration"),Fxr=o(" (BART model)"),Txr=l(),o3=a("li"),vTe=a("strong"),Mxr=o("bert"),Exr=o(" \u2014 "),IJ=a("a"),Cxr=o("FlaxBertForMaskedLM"),wxr=o(" (BERT model)"),Axr=l(),r3=a("li"),FTe=a("strong"),yxr=o("big_bird"),Lxr=o(" \u2014 "),qJ=a("a"),xxr=o("FlaxBigBirdForMaskedLM"),$xr=o(" (BigBird model)"),kxr=l(),t3=a("li"),TTe=a("strong"),Sxr=o("distilbert"),Rxr=o(" \u2014 "),NJ=a("a"),Bxr=o("FlaxDistilBertForMaskedLM"),Pxr=o(" (DistilBERT model)"),Ixr=l(),a3=a("li"),MTe=a("strong"),qxr=o("electra"),Nxr=o(" \u2014 "),jJ=a("a"),jxr=o("FlaxElectraForMaskedLM"),Dxr=o(" (ELECTRA model)"),Gxr=l(),n3=a("li"),ETe=a("strong"),Oxr=o("mbart"),Vxr=o(" \u2014 "),DJ=a("a"),Xxr=o("FlaxMBartForConditionalGeneration"),zxr=o(" (mBART model)"),Qxr=l(),s3=a("li"),CTe=a("strong"),Wxr=o("roberta"),Hxr=o(" \u2014 "),GJ=a("a"),Uxr=o("FlaxRobertaForMaskedLM"),Jxr=o(" (RoBERTa model)"),Yxr=l(),l3=a("li"),wTe=a("strong"),Kxr=o("roformer"),Zxr=o(" \u2014 "),OJ=a("a"),e9r=o("FlaxRoFormerForMaskedLM"),o9r=o(" (RoFormer model)"),r9r=l(),i3=a("li"),ATe=a("strong"),t9r=o("xlm-roberta"),a9r=o(" \u2014 "),VJ=a("a"),n9r=o("FlaxXLMRobertaForMaskedLM"),s9r=o(" (XLM-RoBERTa model)"),l9r=l(),F(d3.$$.fragment),kqe=l(),jc=a("h2"),c3=a("a"),yTe=a("span"),F(px.$$.fragment),i9r=l(),LTe=a("span"),d9r=o("FlaxAutoModelForSeq2SeqLM"),Sqe=l(),pr=a("div"),F(ux.$$.fragment),c9r=l(),Dc=a("p"),f9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XJ=a("a"),m9r=o("from_pretrained()"),g9r=o(" class method or the "),zJ=a("a"),h9r=o("from_config()"),p9r=o(` class
method.`),u9r=l(),_x=a("p"),_9r=o("This class cannot be instantiated directly using "),xTe=a("code"),b9r=o("__init__()"),v9r=o(" (throws an error)."),F9r=l(),Vt=a("div"),F(bx.$$.fragment),T9r=l(),$Te=a("p"),M9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E9r=l(),Gc=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),y9r=o("from_pretrained()"),L9r=o(" to load the model weights."),x9r=l(),F(f3.$$.fragment),$9r=l(),Vr=a("div"),F(vx.$$.fragment),k9r=l(),STe=a("p"),S9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R9r=l(),_n=a("p"),B9r=o("The model class to instantiate is selected based on the "),RTe=a("code"),P9r=o("model_type"),I9r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),q9r=o("pretrained_model_name_or_path"),N9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(":"),G9r=l(),Se=a("ul"),m3=a("li"),ITe=a("strong"),O9r=o("bart"),V9r=o(" \u2014 "),WJ=a("a"),X9r=o("FlaxBartForConditionalGeneration"),z9r=o(" (BART model)"),Q9r=l(),g3=a("li"),qTe=a("strong"),W9r=o("blenderbot"),H9r=o(" \u2014 "),HJ=a("a"),U9r=o("FlaxBlenderbotForConditionalGeneration"),J9r=o(" (Blenderbot model)"),Y9r=l(),h3=a("li"),NTe=a("strong"),K9r=o("blenderbot-small"),Z9r=o(" \u2014 "),UJ=a("a"),e$r=o("FlaxBlenderbotSmallForConditionalGeneration"),o$r=o(" (BlenderbotSmall model)"),r$r=l(),p3=a("li"),jTe=a("strong"),t$r=o("encoder-decoder"),a$r=o(" \u2014 "),JJ=a("a"),n$r=o("FlaxEncoderDecoderModel"),s$r=o(" (Encoder decoder model)"),l$r=l(),u3=a("li"),DTe=a("strong"),i$r=o("marian"),d$r=o(" \u2014 "),YJ=a("a"),c$r=o("FlaxMarianMTModel"),f$r=o(" (Marian model)"),m$r=l(),_3=a("li"),GTe=a("strong"),g$r=o("mbart"),h$r=o(" \u2014 "),KJ=a("a"),p$r=o("FlaxMBartForConditionalGeneration"),u$r=o(" (mBART model)"),_$r=l(),b3=a("li"),OTe=a("strong"),b$r=o("mt5"),v$r=o(" \u2014 "),ZJ=a("a"),F$r=o("FlaxMT5ForConditionalGeneration"),T$r=o(" (mT5 model)"),M$r=l(),v3=a("li"),VTe=a("strong"),E$r=o("pegasus"),C$r=o(" \u2014 "),eY=a("a"),w$r=o("FlaxPegasusForConditionalGeneration"),A$r=o(" (Pegasus model)"),y$r=l(),F3=a("li"),XTe=a("strong"),L$r=o("t5"),x$r=o(" \u2014 "),oY=a("a"),$$r=o("FlaxT5ForConditionalGeneration"),k$r=o(" (T5 model)"),S$r=l(),F(T3.$$.fragment),Rqe=l(),Oc=a("h2"),M3=a("a"),zTe=a("span"),F(Fx.$$.fragment),R$r=l(),QTe=a("span"),B$r=o("FlaxAutoModelForSequenceClassification"),Bqe=l(),ur=a("div"),F(Tx.$$.fragment),P$r=l(),Vc=a("p"),I$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=a("a"),q$r=o("from_pretrained()"),N$r=o(" class method or the "),tY=a("a"),j$r=o("from_config()"),D$r=o(` class
method.`),G$r=l(),Mx=a("p"),O$r=o("This class cannot be instantiated directly using "),WTe=a("code"),V$r=o("__init__()"),X$r=o(" (throws an error)."),z$r=l(),Xt=a("div"),F(Ex.$$.fragment),Q$r=l(),HTe=a("p"),W$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),H$r=l(),Xc=a("p"),U$r=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),J$r=o("not"),Y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),K$r=o("from_pretrained()"),Z$r=o(" to load the model weights."),ekr=l(),F(E3.$$.fragment),okr=l(),Xr=a("div"),F(Cx.$$.fragment),rkr=l(),JTe=a("p"),tkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),akr=l(),bn=a("p"),nkr=o("The model class to instantiate is selected based on the "),YTe=a("code"),skr=o("model_type"),lkr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(":"),mkr=l(),xe=a("ul"),C3=a("li"),e7e=a("strong"),gkr=o("albert"),hkr=o(" \u2014 "),nY=a("a"),pkr=o("FlaxAlbertForSequenceClassification"),ukr=o(" (ALBERT model)"),_kr=l(),w3=a("li"),o7e=a("strong"),bkr=o("bart"),vkr=o(" \u2014 "),sY=a("a"),Fkr=o("FlaxBartForSequenceClassification"),Tkr=o(" (BART model)"),Mkr=l(),A3=a("li"),r7e=a("strong"),Ekr=o("bert"),Ckr=o(" \u2014 "),lY=a("a"),wkr=o("FlaxBertForSequenceClassification"),Akr=o(" (BERT model)"),ykr=l(),y3=a("li"),t7e=a("strong"),Lkr=o("big_bird"),xkr=o(" \u2014 "),iY=a("a"),$kr=o("FlaxBigBirdForSequenceClassification"),kkr=o(" (BigBird model)"),Skr=l(),L3=a("li"),a7e=a("strong"),Rkr=o("distilbert"),Bkr=o(" \u2014 "),dY=a("a"),Pkr=o("FlaxDistilBertForSequenceClassification"),Ikr=o(" (DistilBERT model)"),qkr=l(),x3=a("li"),n7e=a("strong"),Nkr=o("electra"),jkr=o(" \u2014 "),cY=a("a"),Dkr=o("FlaxElectraForSequenceClassification"),Gkr=o(" (ELECTRA model)"),Okr=l(),$3=a("li"),s7e=a("strong"),Vkr=o("mbart"),Xkr=o(" \u2014 "),fY=a("a"),zkr=o("FlaxMBartForSequenceClassification"),Qkr=o(" (mBART model)"),Wkr=l(),k3=a("li"),l7e=a("strong"),Hkr=o("roberta"),Ukr=o(" \u2014 "),mY=a("a"),Jkr=o("FlaxRobertaForSequenceClassification"),Ykr=o(" (RoBERTa model)"),Kkr=l(),S3=a("li"),i7e=a("strong"),Zkr=o("roformer"),eSr=o(" \u2014 "),gY=a("a"),oSr=o("FlaxRoFormerForSequenceClassification"),rSr=o(" (RoFormer model)"),tSr=l(),R3=a("li"),d7e=a("strong"),aSr=o("xlm-roberta"),nSr=o(" \u2014 "),hY=a("a"),sSr=o("FlaxXLMRobertaForSequenceClassification"),lSr=o(" (XLM-RoBERTa model)"),iSr=l(),F(B3.$$.fragment),Pqe=l(),zc=a("h2"),P3=a("a"),c7e=a("span"),F(wx.$$.fragment),dSr=l(),f7e=a("span"),cSr=o("FlaxAutoModelForQuestionAnswering"),Iqe=l(),_r=a("div"),F(Ax.$$.fragment),fSr=l(),Qc=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pY=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),uY=a("a"),pSr=o("from_config()"),uSr=o(` class
method.`),_Sr=l(),yx=a("p"),bSr=o("This class cannot be instantiated directly using "),m7e=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),zt=a("div"),F(Lx.$$.fragment),MSr=l(),g7e=a("p"),ESr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CSr=l(),Wc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),ASr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),LSr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),F(I3.$$.fragment),kSr=l(),zr=a("div"),F(xx.$$.fragment),SSr=l(),p7e=a("p"),RSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BSr=l(),vn=a("p"),PSr=o("The model class to instantiate is selected based on the "),u7e=a("code"),ISr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),NSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),$e=a("ul"),q3=a("li"),v7e=a("strong"),VSr=o("albert"),XSr=o(" \u2014 "),bY=a("a"),zSr=o("FlaxAlbertForQuestionAnswering"),QSr=o(" (ALBERT model)"),WSr=l(),N3=a("li"),F7e=a("strong"),HSr=o("bart"),USr=o(" \u2014 "),vY=a("a"),JSr=o("FlaxBartForQuestionAnswering"),YSr=o(" (BART model)"),KSr=l(),j3=a("li"),T7e=a("strong"),ZSr=o("bert"),eRr=o(" \u2014 "),FY=a("a"),oRr=o("FlaxBertForQuestionAnswering"),rRr=o(" (BERT model)"),tRr=l(),D3=a("li"),M7e=a("strong"),aRr=o("big_bird"),nRr=o(" \u2014 "),TY=a("a"),sRr=o("FlaxBigBirdForQuestionAnswering"),lRr=o(" (BigBird model)"),iRr=l(),G3=a("li"),E7e=a("strong"),dRr=o("distilbert"),cRr=o(" \u2014 "),MY=a("a"),fRr=o("FlaxDistilBertForQuestionAnswering"),mRr=o(" (DistilBERT model)"),gRr=l(),O3=a("li"),C7e=a("strong"),hRr=o("electra"),pRr=o(" \u2014 "),EY=a("a"),uRr=o("FlaxElectraForQuestionAnswering"),_Rr=o(" (ELECTRA model)"),bRr=l(),V3=a("li"),w7e=a("strong"),vRr=o("mbart"),FRr=o(" \u2014 "),CY=a("a"),TRr=o("FlaxMBartForQuestionAnswering"),MRr=o(" (mBART model)"),ERr=l(),X3=a("li"),A7e=a("strong"),CRr=o("roberta"),wRr=o(" \u2014 "),wY=a("a"),ARr=o("FlaxRobertaForQuestionAnswering"),yRr=o(" (RoBERTa model)"),LRr=l(),z3=a("li"),y7e=a("strong"),xRr=o("roformer"),$Rr=o(" \u2014 "),AY=a("a"),kRr=o("FlaxRoFormerForQuestionAnswering"),SRr=o(" (RoFormer model)"),RRr=l(),Q3=a("li"),L7e=a("strong"),BRr=o("xlm-roberta"),PRr=o(" \u2014 "),yY=a("a"),IRr=o("FlaxXLMRobertaForQuestionAnswering"),qRr=o(" (XLM-RoBERTa model)"),NRr=l(),F(W3.$$.fragment),qqe=l(),Hc=a("h2"),H3=a("a"),x7e=a("span"),F($x.$$.fragment),jRr=l(),$7e=a("span"),DRr=o("FlaxAutoModelForTokenClassification"),Nqe=l(),br=a("div"),F(kx.$$.fragment),GRr=l(),Uc=a("p"),ORr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LY=a("a"),VRr=o("from_pretrained()"),XRr=o(" class method or the "),xY=a("a"),zRr=o("from_config()"),QRr=o(` class
method.`),WRr=l(),Sx=a("p"),HRr=o("This class cannot be instantiated directly using "),k7e=a("code"),URr=o("__init__()"),JRr=o(" (throws an error)."),YRr=l(),Qt=a("div"),F(Rx.$$.fragment),KRr=l(),S7e=a("p"),ZRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eBr=l(),Jc=a("p"),oBr=o(`Note:
Loading a model from its configuration file does `),R7e=a("strong"),rBr=o("not"),tBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),aBr=o("from_pretrained()"),nBr=o(" to load the model weights."),sBr=l(),F(U3.$$.fragment),lBr=l(),Qr=a("div"),F(Bx.$$.fragment),iBr=l(),B7e=a("p"),dBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cBr=l(),Fn=a("p"),fBr=o("The model class to instantiate is selected based on the "),P7e=a("code"),mBr=o("model_type"),gBr=o(` property of the config object (either
passed as an argument or loaded from `),I7e=a("code"),hBr=o("pretrained_model_name_or_path"),pBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),uBr=o("pretrained_model_name_or_path"),_Br=o(":"),bBr=l(),De=a("ul"),J3=a("li"),N7e=a("strong"),vBr=o("albert"),FBr=o(" \u2014 "),kY=a("a"),TBr=o("FlaxAlbertForTokenClassification"),MBr=o(" (ALBERT model)"),EBr=l(),Y3=a("li"),j7e=a("strong"),CBr=o("bert"),wBr=o(" \u2014 "),SY=a("a"),ABr=o("FlaxBertForTokenClassification"),yBr=o(" (BERT model)"),LBr=l(),K3=a("li"),D7e=a("strong"),xBr=o("big_bird"),$Br=o(" \u2014 "),RY=a("a"),kBr=o("FlaxBigBirdForTokenClassification"),SBr=o(" (BigBird model)"),RBr=l(),Z3=a("li"),G7e=a("strong"),BBr=o("distilbert"),PBr=o(" \u2014 "),BY=a("a"),IBr=o("FlaxDistilBertForTokenClassification"),qBr=o(" (DistilBERT model)"),NBr=l(),ew=a("li"),O7e=a("strong"),jBr=o("electra"),DBr=o(" \u2014 "),PY=a("a"),GBr=o("FlaxElectraForTokenClassification"),OBr=o(" (ELECTRA model)"),VBr=l(),ow=a("li"),V7e=a("strong"),XBr=o("roberta"),zBr=o(" \u2014 "),IY=a("a"),QBr=o("FlaxRobertaForTokenClassification"),WBr=o(" (RoBERTa model)"),HBr=l(),rw=a("li"),X7e=a("strong"),UBr=o("roformer"),JBr=o(" \u2014 "),qY=a("a"),YBr=o("FlaxRoFormerForTokenClassification"),KBr=o(" (RoFormer model)"),ZBr=l(),tw=a("li"),z7e=a("strong"),ePr=o("xlm-roberta"),oPr=o(" \u2014 "),NY=a("a"),rPr=o("FlaxXLMRobertaForTokenClassification"),tPr=o(" (XLM-RoBERTa model)"),aPr=l(),F(aw.$$.fragment),jqe=l(),Yc=a("h2"),nw=a("a"),Q7e=a("span"),F(Px.$$.fragment),nPr=l(),W7e=a("span"),sPr=o("FlaxAutoModelForMultipleChoice"),Dqe=l(),vr=a("div"),F(Ix.$$.fragment),lPr=l(),Kc=a("p"),iPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jY=a("a"),dPr=o("from_pretrained()"),cPr=o(" class method or the "),DY=a("a"),fPr=o("from_config()"),mPr=o(` class
method.`),gPr=l(),qx=a("p"),hPr=o("This class cannot be instantiated directly using "),H7e=a("code"),pPr=o("__init__()"),uPr=o(" (throws an error)."),_Pr=l(),Wt=a("div"),F(Nx.$$.fragment),bPr=l(),U7e=a("p"),vPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FPr=l(),Zc=a("p"),TPr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),MPr=o("not"),EPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),CPr=o("from_pretrained()"),wPr=o(" to load the model weights."),APr=l(),F(sw.$$.fragment),yPr=l(),Wr=a("div"),F(jx.$$.fragment),LPr=l(),Y7e=a("p"),xPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Pr=l(),Tn=a("p"),kPr=o("The model class to instantiate is selected based on the "),K7e=a("code"),SPr=o("model_type"),RPr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),BPr=o("pretrained_model_name_or_path"),PPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),IPr=o("pretrained_model_name_or_path"),qPr=o(":"),NPr=l(),Ge=a("ul"),lw=a("li"),oMe=a("strong"),jPr=o("albert"),DPr=o(" \u2014 "),OY=a("a"),GPr=o("FlaxAlbertForMultipleChoice"),OPr=o(" (ALBERT model)"),VPr=l(),iw=a("li"),rMe=a("strong"),XPr=o("bert"),zPr=o(" \u2014 "),VY=a("a"),QPr=o("FlaxBertForMultipleChoice"),WPr=o(" (BERT model)"),HPr=l(),dw=a("li"),tMe=a("strong"),UPr=o("big_bird"),JPr=o(" \u2014 "),XY=a("a"),YPr=o("FlaxBigBirdForMultipleChoice"),KPr=o(" (BigBird model)"),ZPr=l(),cw=a("li"),aMe=a("strong"),eIr=o("distilbert"),oIr=o(" \u2014 "),zY=a("a"),rIr=o("FlaxDistilBertForMultipleChoice"),tIr=o(" (DistilBERT model)"),aIr=l(),fw=a("li"),nMe=a("strong"),nIr=o("electra"),sIr=o(" \u2014 "),QY=a("a"),lIr=o("FlaxElectraForMultipleChoice"),iIr=o(" (ELECTRA model)"),dIr=l(),mw=a("li"),sMe=a("strong"),cIr=o("roberta"),fIr=o(" \u2014 "),WY=a("a"),mIr=o("FlaxRobertaForMultipleChoice"),gIr=o(" (RoBERTa model)"),hIr=l(),gw=a("li"),lMe=a("strong"),pIr=o("roformer"),uIr=o(" \u2014 "),HY=a("a"),_Ir=o("FlaxRoFormerForMultipleChoice"),bIr=o(" (RoFormer model)"),vIr=l(),hw=a("li"),iMe=a("strong"),FIr=o("xlm-roberta"),TIr=o(" \u2014 "),UY=a("a"),MIr=o("FlaxXLMRobertaForMultipleChoice"),EIr=o(" (XLM-RoBERTa model)"),CIr=l(),F(pw.$$.fragment),Gqe=l(),ef=a("h2"),uw=a("a"),dMe=a("span"),F(Dx.$$.fragment),wIr=l(),cMe=a("span"),AIr=o("FlaxAutoModelForNextSentencePrediction"),Oqe=l(),Fr=a("div"),F(Gx.$$.fragment),yIr=l(),of=a("p"),LIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JY=a("a"),xIr=o("from_pretrained()"),$Ir=o(" class method or the "),YY=a("a"),kIr=o("from_config()"),SIr=o(` class
method.`),RIr=l(),Ox=a("p"),BIr=o("This class cannot be instantiated directly using "),fMe=a("code"),PIr=o("__init__()"),IIr=o(" (throws an error)."),qIr=l(),Ht=a("div"),F(Vx.$$.fragment),NIr=l(),mMe=a("p"),jIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DIr=l(),rf=a("p"),GIr=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),OIr=o("not"),VIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),XIr=o("from_pretrained()"),zIr=o(" to load the model weights."),QIr=l(),F(_w.$$.fragment),WIr=l(),Hr=a("div"),F(Xx.$$.fragment),HIr=l(),hMe=a("p"),UIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JIr=l(),Mn=a("p"),YIr=o("The model class to instantiate is selected based on the "),pMe=a("code"),KIr=o("model_type"),ZIr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),eqr=o("pretrained_model_name_or_path"),oqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),rqr=o("pretrained_model_name_or_path"),tqr=o(":"),aqr=l(),bMe=a("ul"),bw=a("li"),vMe=a("strong"),nqr=o("bert"),sqr=o(" \u2014 "),ZY=a("a"),lqr=o("FlaxBertForNextSentencePrediction"),iqr=o(" (BERT model)"),dqr=l(),F(vw.$$.fragment),Vqe=l(),tf=a("h2"),Fw=a("a"),FMe=a("span"),F(zx.$$.fragment),cqr=l(),TMe=a("span"),fqr=o("FlaxAutoModelForImageClassification"),Xqe=l(),Tr=a("div"),F(Qx.$$.fragment),mqr=l(),af=a("p"),gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eK=a("a"),hqr=o("from_pretrained()"),pqr=o(" class method or the "),oK=a("a"),uqr=o("from_config()"),_qr=o(` class
method.`),bqr=l(),Wx=a("p"),vqr=o("This class cannot be instantiated directly using "),MMe=a("code"),Fqr=o("__init__()"),Tqr=o(" (throws an error)."),Mqr=l(),Ut=a("div"),F(Hx.$$.fragment),Eqr=l(),EMe=a("p"),Cqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wqr=l(),nf=a("p"),Aqr=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),yqr=o("not"),Lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),xqr=o("from_pretrained()"),$qr=o(" to load the model weights."),kqr=l(),F(Tw.$$.fragment),Sqr=l(),Ur=a("div"),F(Ux.$$.fragment),Rqr=l(),wMe=a("p"),Bqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pqr=l(),En=a("p"),Iqr=o("The model class to instantiate is selected based on the "),AMe=a("code"),qqr=o("model_type"),Nqr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),jqr=o("pretrained_model_name_or_path"),Dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=a("code"),Gqr=o("pretrained_model_name_or_path"),Oqr=o(":"),Vqr=l(),Jx=a("ul"),Mw=a("li"),xMe=a("strong"),Xqr=o("beit"),zqr=o(" \u2014 "),tK=a("a"),Qqr=o("FlaxBeitForImageClassification"),Wqr=o(" (BEiT model)"),Hqr=l(),Ew=a("li"),$Me=a("strong"),Uqr=o("vit"),Jqr=o(" \u2014 "),aK=a("a"),Yqr=o("FlaxViTForImageClassification"),Kqr=o(" (ViT model)"),Zqr=l(),F(Cw.$$.fragment),zqe=l(),sf=a("h2"),ww=a("a"),kMe=a("span"),F(Yx.$$.fragment),eNr=l(),SMe=a("span"),oNr=o("FlaxAutoModelForVision2Seq"),Qqe=l(),Mr=a("div"),F(Kx.$$.fragment),rNr=l(),lf=a("p"),tNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nK=a("a"),aNr=o("from_pretrained()"),nNr=o(" class method or the "),sK=a("a"),sNr=o("from_config()"),lNr=o(` class
method.`),iNr=l(),Zx=a("p"),dNr=o("This class cannot be instantiated directly using "),RMe=a("code"),cNr=o("__init__()"),fNr=o(" (throws an error)."),mNr=l(),Jt=a("div"),F(e9.$$.fragment),gNr=l(),BMe=a("p"),hNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pNr=l(),df=a("p"),uNr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),_Nr=o("not"),bNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),vNr=o("from_pretrained()"),FNr=o(" to load the model weights."),TNr=l(),F(Aw.$$.fragment),MNr=l(),Jr=a("div"),F(o9.$$.fragment),ENr=l(),IMe=a("p"),CNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wNr=l(),Cn=a("p"),ANr=o("The model class to instantiate is selected based on the "),qMe=a("code"),yNr=o("model_type"),LNr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(":"),RNr=l(),DMe=a("ul"),yw=a("li"),GMe=a("strong"),BNr=o("vision-encoder-decoder"),PNr=o(" \u2014 "),iK=a("a"),INr=o("FlaxVisionEncoderDecoderModel"),qNr=o(" (Vision Encoder decoder model)"),NNr=l(),F(Lw.$$.fragment),this.h()},l(f){const _=h0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var r9=s(p);m=n(r9,"A",{id:!0,class:!0,href:!0});var OMe=s(m);u=n(OMe,"SPAN",{});var VMe=s(u);T(d.$$.fragment,VMe),VMe.forEach(t),OMe.forEach(t),h=i(r9),Mo=n(r9,"SPAN",{});var XMe=s(Mo);ii=r(XMe,"Auto Classes"),XMe.forEach(t),r9.forEach(t),gf=i(f),et=n(f,"P",{});var t9=s(et);di=r(t9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(t9,"CODE",{});var zMe=s(ci);W6=r(zMe,"from_pretrained()"),zMe.forEach(t),hf=r(t9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),t9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);fi=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var QMe=s(An);H6=r(QMe,"AutoConfig"),QMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var WMe=s(Ln);U6=r(WMe,"AutoModel"),WMe.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var HMe=s(xn);J6=r(HMe,"AutoTokenizer"),HMe.forEach(t),gi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),pf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var a9=s(Ae);p$=r(a9,"will create a model that is an instance of "),hi=n(a9,"A",{href:!0});var UMe=s(hi);u$=r(UMe,"BertModel"),UMe.forEach(t),_$=r(a9,"."),a9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var n9=s(Ea);b$=r(n9,"There is one class of "),uf=n(n9,"CODE",{});var JMe=s(uf);v$=r(JMe,"AutoModel"),JMe.forEach(t),oDe=r(n9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),n9.forEach(t),XPe=i(f),pi=n(f,"H2",{class:!0});var s9=s(pi);_f=n(s9,"A",{id:!0,class:!0,href:!0});var YMe=s(_f);ree=n(YMe,"SPAN",{});var KMe=s(ree);T(Y6.$$.fragment,KMe),KMe.forEach(t),YMe.forEach(t),rDe=i(s9),tee=n(s9,"SPAN",{});var ZMe=s(tee);tDe=r(ZMe,"Extending the Auto Classes"),ZMe.forEach(t),s9.forEach(t),zPe=i(f),$n=n(f,"P",{});var cf=s($n);aDe=r(cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aee=n(cf,"CODE",{});var eEe=s(aee);nDe=r(eEe,"NewModel"),eEe.forEach(t),sDe=r(cf,", make sure you have a "),nee=n(cf,"CODE",{});var oEe=s(nee);lDe=r(oEe,"NewModelConfig"),oEe.forEach(t),iDe=r(cf,` then you can add those to the auto
classes like this:`),cf.forEach(t),QPe=i(f),T(K6.$$.fragment,f),WPe=i(f),F$=n(f,"P",{});var rEe=s(F$);dDe=r(rEe,"You will then be able to use the auto classes like you would usually do!"),rEe.forEach(t),HPe=i(f),T(bf.$$.fragment,f),UPe=i(f),ui=n(f,"H2",{class:!0});var l9=s(ui);vf=n(l9,"A",{id:!0,class:!0,href:!0});var tEe=s(vf);see=n(tEe,"SPAN",{});var aEe=s(see);T(Z6.$$.fragment,aEe),aEe.forEach(t),tEe.forEach(t),cDe=i(l9),lee=n(l9,"SPAN",{});var nEe=s(lee);fDe=r(nEe,"AutoConfig"),nEe.forEach(t),l9.forEach(t),JPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(e0.$$.fragment,Kr),mDe=i(Kr),o0=n(Kr,"P",{});var i9=s(o0);gDe=r(i9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),T$=n(i9,"A",{href:!0});var sEe=s(T$);hDe=r(sEe,"from_pretrained()"),sEe.forEach(t),pDe=r(i9," class method."),i9.forEach(t),uDe=i(Kr),r0=n(Kr,"P",{});var d9=s(r0);_De=r(d9,"This class cannot be instantiated directly using "),iee=n(d9,"CODE",{});var lEe=s(iee);bDe=r(lEe,"__init__()"),lEe.forEach(t),vDe=r(d9," (throws an error)."),d9.forEach(t),FDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(t0.$$.fragment,Zr),TDe=i(Zr),dee=n(Zr,"P",{});var iEe=s(dee);MDe=r(iEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),iEe.forEach(t),EDe=i(Zr),_i=n(Zr,"P",{});var ff=s(_i);CDe=r(ff,"The configuration class to instantiate is selected based on the "),cee=n(ff,"CODE",{});var dEe=s(cee);wDe=r(dEe,"model_type"),dEe.forEach(t),ADe=r(ff,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),fee=n(ff,"CODE",{});var cEe=s(fee);yDe=r(cEe,"pretrained_model_name_or_path"),cEe.forEach(t),LDe=r(ff,":"),ff.forEach(t),xDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);Ff=n(y,"LI",{});var xw=s(Ff);mee=n(xw,"STRONG",{});var fEe=s(mee);$De=r(fEe,"albert"),fEe.forEach(t),kDe=r(xw," \u2014 "),M$=n(xw,"A",{href:!0});var mEe=s(M$);SDe=r(mEe,"AlbertConfig"),mEe.forEach(t),RDe=r(xw," (ALBERT model)"),xw.forEach(t),BDe=i(y),Tf=n(y,"LI",{});var $w=s(Tf);gee=n($w,"STRONG",{});var gEe=s(gee);PDe=r(gEe,"bart"),gEe.forEach(t),IDe=r($w," \u2014 "),E$=n($w,"A",{href:!0});var hEe=s(E$);qDe=r(hEe,"BartConfig"),hEe.forEach(t),NDe=r($w," (BART model)"),$w.forEach(t),jDe=i(y),Mf=n(y,"LI",{});var kw=s(Mf);hee=n(kw,"STRONG",{});var pEe=s(hee);DDe=r(pEe,"beit"),pEe.forEach(t),GDe=r(kw," \u2014 "),C$=n(kw,"A",{href:!0});var uEe=s(C$);ODe=r(uEe,"BeitConfig"),uEe.forEach(t),VDe=r(kw," (BEiT model)"),kw.forEach(t),XDe=i(y),Ef=n(y,"LI",{});var Sw=s(Ef);pee=n(Sw,"STRONG",{});var _Ee=s(pee);zDe=r(_Ee,"bert"),_Ee.forEach(t),QDe=r(Sw," \u2014 "),w$=n(Sw,"A",{href:!0});var bEe=s(w$);WDe=r(bEe,"BertConfig"),bEe.forEach(t),HDe=r(Sw," (BERT model)"),Sw.forEach(t),UDe=i(y),Cf=n(y,"LI",{});var Rw=s(Cf);uee=n(Rw,"STRONG",{});var vEe=s(uee);JDe=r(vEe,"bert-generation"),vEe.forEach(t),YDe=r(Rw," \u2014 "),A$=n(Rw,"A",{href:!0});var FEe=s(A$);KDe=r(FEe,"BertGenerationConfig"),FEe.forEach(t),ZDe=r(Rw," (Bert Generation model)"),Rw.forEach(t),eGe=i(y),wf=n(y,"LI",{});var Bw=s(wf);_ee=n(Bw,"STRONG",{});var TEe=s(_ee);oGe=r(TEe,"big_bird"),TEe.forEach(t),rGe=r(Bw," \u2014 "),y$=n(Bw,"A",{href:!0});var MEe=s(y$);tGe=r(MEe,"BigBirdConfig"),MEe.forEach(t),aGe=r(Bw," (BigBird model)"),Bw.forEach(t),nGe=i(y),Af=n(y,"LI",{});var Pw=s(Af);bee=n(Pw,"STRONG",{});var EEe=s(bee);sGe=r(EEe,"bigbird_pegasus"),EEe.forEach(t),lGe=r(Pw," \u2014 "),L$=n(Pw,"A",{href:!0});var CEe=s(L$);iGe=r(CEe,"BigBirdPegasusConfig"),CEe.forEach(t),dGe=r(Pw," (BigBirdPegasus model)"),Pw.forEach(t),cGe=i(y),yf=n(y,"LI",{});var Iw=s(yf);vee=n(Iw,"STRONG",{});var wEe=s(vee);fGe=r(wEe,"blenderbot"),wEe.forEach(t),mGe=r(Iw," \u2014 "),x$=n(Iw,"A",{href:!0});var AEe=s(x$);gGe=r(AEe,"BlenderbotConfig"),AEe.forEach(t),hGe=r(Iw," (Blenderbot model)"),Iw.forEach(t),pGe=i(y),Lf=n(y,"LI",{});var qw=s(Lf);Fee=n(qw,"STRONG",{});var yEe=s(Fee);uGe=r(yEe,"blenderbot-small"),yEe.forEach(t),_Ge=r(qw," \u2014 "),$$=n(qw,"A",{href:!0});var LEe=s($$);bGe=r(LEe,"BlenderbotSmallConfig"),LEe.forEach(t),vGe=r(qw," (BlenderbotSmall model)"),qw.forEach(t),FGe=i(y),xf=n(y,"LI",{});var Nw=s(xf);Tee=n(Nw,"STRONG",{});var xEe=s(Tee);TGe=r(xEe,"camembert"),xEe.forEach(t),MGe=r(Nw," \u2014 "),k$=n(Nw,"A",{href:!0});var $Ee=s(k$);EGe=r($Ee,"CamembertConfig"),$Ee.forEach(t),CGe=r(Nw," (CamemBERT model)"),Nw.forEach(t),wGe=i(y),$f=n(y,"LI",{});var jw=s($f);Mee=n(jw,"STRONG",{});var kEe=s(Mee);AGe=r(kEe,"canine"),kEe.forEach(t),yGe=r(jw," \u2014 "),S$=n(jw,"A",{href:!0});var SEe=s(S$);LGe=r(SEe,"CanineConfig"),SEe.forEach(t),xGe=r(jw," (Canine model)"),jw.forEach(t),$Ge=i(y),kf=n(y,"LI",{});var Dw=s(kf);Eee=n(Dw,"STRONG",{});var REe=s(Eee);kGe=r(REe,"clip"),REe.forEach(t),SGe=r(Dw," \u2014 "),R$=n(Dw,"A",{href:!0});var BEe=s(R$);RGe=r(BEe,"CLIPConfig"),BEe.forEach(t),BGe=r(Dw," (CLIP model)"),Dw.forEach(t),PGe=i(y),Sf=n(y,"LI",{});var Gw=s(Sf);Cee=n(Gw,"STRONG",{});var PEe=s(Cee);IGe=r(PEe,"convbert"),PEe.forEach(t),qGe=r(Gw," \u2014 "),B$=n(Gw,"A",{href:!0});var IEe=s(B$);NGe=r(IEe,"ConvBertConfig"),IEe.forEach(t),jGe=r(Gw," (ConvBERT model)"),Gw.forEach(t),DGe=i(y),Rf=n(y,"LI",{});var Ow=s(Rf);wee=n(Ow,"STRONG",{});var qEe=s(wee);GGe=r(qEe,"convnext"),qEe.forEach(t),OGe=r(Ow," \u2014 "),P$=n(Ow,"A",{href:!0});var NEe=s(P$);VGe=r(NEe,"ConvNextConfig"),NEe.forEach(t),XGe=r(Ow," (ConvNext model)"),Ow.forEach(t),zGe=i(y),Bf=n(y,"LI",{});var Vw=s(Bf);Aee=n(Vw,"STRONG",{});var jEe=s(Aee);QGe=r(jEe,"ctrl"),jEe.forEach(t),WGe=r(Vw," \u2014 "),I$=n(Vw,"A",{href:!0});var DEe=s(I$);HGe=r(DEe,"CTRLConfig"),DEe.forEach(t),UGe=r(Vw," (CTRL model)"),Vw.forEach(t),JGe=i(y),Pf=n(y,"LI",{});var Xw=s(Pf);yee=n(Xw,"STRONG",{});var GEe=s(yee);YGe=r(GEe,"data2vec-audio"),GEe.forEach(t),KGe=r(Xw," \u2014 "),q$=n(Xw,"A",{href:!0});var OEe=s(q$);ZGe=r(OEe,"Data2VecAudioConfig"),OEe.forEach(t),eOe=r(Xw," (Data2VecAudio model)"),Xw.forEach(t),oOe=i(y),If=n(y,"LI",{});var zw=s(If);Lee=n(zw,"STRONG",{});var VEe=s(Lee);rOe=r(VEe,"data2vec-text"),VEe.forEach(t),tOe=r(zw," \u2014 "),N$=n(zw,"A",{href:!0});var XEe=s(N$);aOe=r(XEe,"Data2VecTextConfig"),XEe.forEach(t),nOe=r(zw," (Data2VecText model)"),zw.forEach(t),sOe=i(y),qf=n(y,"LI",{});var Qw=s(qf);xee=n(Qw,"STRONG",{});var zEe=s(xee);lOe=r(zEe,"data2vec-vision"),zEe.forEach(t),iOe=r(Qw," \u2014 "),j$=n(Qw,"A",{href:!0});var QEe=s(j$);dOe=r(QEe,"Data2VecVisionConfig"),QEe.forEach(t),cOe=r(Qw," (Data2VecVision model)"),Qw.forEach(t),fOe=i(y),Nf=n(y,"LI",{});var Ww=s(Nf);$ee=n(Ww,"STRONG",{});var WEe=s($ee);mOe=r(WEe,"deberta"),WEe.forEach(t),gOe=r(Ww," \u2014 "),D$=n(Ww,"A",{href:!0});var HEe=s(D$);hOe=r(HEe,"DebertaConfig"),HEe.forEach(t),pOe=r(Ww," (DeBERTa model)"),Ww.forEach(t),uOe=i(y),jf=n(y,"LI",{});var Hw=s(jf);kee=n(Hw,"STRONG",{});var UEe=s(kee);_Oe=r(UEe,"deberta-v2"),UEe.forEach(t),bOe=r(Hw," \u2014 "),G$=n(Hw,"A",{href:!0});var JEe=s(G$);vOe=r(JEe,"DebertaV2Config"),JEe.forEach(t),FOe=r(Hw," (DeBERTa-v2 model)"),Hw.forEach(t),TOe=i(y),Df=n(y,"LI",{});var Uw=s(Df);See=n(Uw,"STRONG",{});var YEe=s(See);MOe=r(YEe,"decision_transformer"),YEe.forEach(t),EOe=r(Uw," \u2014 "),O$=n(Uw,"A",{href:!0});var KEe=s(O$);COe=r(KEe,"DecisionTransformerConfig"),KEe.forEach(t),wOe=r(Uw," (Decision Transformer model)"),Uw.forEach(t),AOe=i(y),Gf=n(y,"LI",{});var Jw=s(Gf);Ree=n(Jw,"STRONG",{});var ZEe=s(Ree);yOe=r(ZEe,"deit"),ZEe.forEach(t),LOe=r(Jw," \u2014 "),V$=n(Jw,"A",{href:!0});var eCe=s(V$);xOe=r(eCe,"DeiTConfig"),eCe.forEach(t),$Oe=r(Jw," (DeiT model)"),Jw.forEach(t),kOe=i(y),Of=n(y,"LI",{});var Yw=s(Of);Bee=n(Yw,"STRONG",{});var oCe=s(Bee);SOe=r(oCe,"detr"),oCe.forEach(t),ROe=r(Yw," \u2014 "),X$=n(Yw,"A",{href:!0});var DNr=s(X$);BOe=r(DNr,"DetrConfig"),DNr.forEach(t),POe=r(Yw," (DETR model)"),Yw.forEach(t),IOe=i(y),Vf=n(y,"LI",{});var rCe=s(Vf);Pee=n(rCe,"STRONG",{});var GNr=s(Pee);qOe=r(GNr,"distilbert"),GNr.forEach(t),NOe=r(rCe," \u2014 "),z$=n(rCe,"A",{href:!0});var ONr=s(z$);jOe=r(ONr,"DistilBertConfig"),ONr.forEach(t),DOe=r(rCe," (DistilBERT model)"),rCe.forEach(t),GOe=i(y),Xf=n(y,"LI",{});var tCe=s(Xf);Iee=n(tCe,"STRONG",{});var VNr=s(Iee);OOe=r(VNr,"dpr"),VNr.forEach(t),VOe=r(tCe," \u2014 "),Q$=n(tCe,"A",{href:!0});var XNr=s(Q$);XOe=r(XNr,"DPRConfig"),XNr.forEach(t),zOe=r(tCe," (DPR model)"),tCe.forEach(t),QOe=i(y),zf=n(y,"LI",{});var aCe=s(zf);qee=n(aCe,"STRONG",{});var zNr=s(qee);WOe=r(zNr,"dpt"),zNr.forEach(t),HOe=r(aCe," \u2014 "),W$=n(aCe,"A",{href:!0});var QNr=s(W$);UOe=r(QNr,"DPTConfig"),QNr.forEach(t),JOe=r(aCe," (DPT model)"),aCe.forEach(t),YOe=i(y),Qf=n(y,"LI",{});var nCe=s(Qf);Nee=n(nCe,"STRONG",{});var WNr=s(Nee);KOe=r(WNr,"electra"),WNr.forEach(t),ZOe=r(nCe," \u2014 "),H$=n(nCe,"A",{href:!0});var HNr=s(H$);eVe=r(HNr,"ElectraConfig"),HNr.forEach(t),oVe=r(nCe," (ELECTRA model)"),nCe.forEach(t),rVe=i(y),Wf=n(y,"LI",{});var sCe=s(Wf);jee=n(sCe,"STRONG",{});var UNr=s(jee);tVe=r(UNr,"encoder-decoder"),UNr.forEach(t),aVe=r(sCe," \u2014 "),U$=n(sCe,"A",{href:!0});var JNr=s(U$);nVe=r(JNr,"EncoderDecoderConfig"),JNr.forEach(t),sVe=r(sCe," (Encoder decoder model)"),sCe.forEach(t),lVe=i(y),Hf=n(y,"LI",{});var lCe=s(Hf);Dee=n(lCe,"STRONG",{});var YNr=s(Dee);iVe=r(YNr,"flaubert"),YNr.forEach(t),dVe=r(lCe," \u2014 "),J$=n(lCe,"A",{href:!0});var KNr=s(J$);cVe=r(KNr,"FlaubertConfig"),KNr.forEach(t),fVe=r(lCe," (FlauBERT model)"),lCe.forEach(t),mVe=i(y),Uf=n(y,"LI",{});var iCe=s(Uf);Gee=n(iCe,"STRONG",{});var ZNr=s(Gee);gVe=r(ZNr,"flava"),ZNr.forEach(t),hVe=r(iCe," \u2014 "),Y$=n(iCe,"A",{href:!0});var ejr=s(Y$);pVe=r(ejr,"FlavaConfig"),ejr.forEach(t),uVe=r(iCe," (Flava model)"),iCe.forEach(t),_Ve=i(y),Jf=n(y,"LI",{});var dCe=s(Jf);Oee=n(dCe,"STRONG",{});var ojr=s(Oee);bVe=r(ojr,"fnet"),ojr.forEach(t),vVe=r(dCe," \u2014 "),K$=n(dCe,"A",{href:!0});var rjr=s(K$);FVe=r(rjr,"FNetConfig"),rjr.forEach(t),TVe=r(dCe," (FNet model)"),dCe.forEach(t),MVe=i(y),Yf=n(y,"LI",{});var cCe=s(Yf);Vee=n(cCe,"STRONG",{});var tjr=s(Vee);EVe=r(tjr,"fsmt"),tjr.forEach(t),CVe=r(cCe," \u2014 "),Z$=n(cCe,"A",{href:!0});var ajr=s(Z$);wVe=r(ajr,"FSMTConfig"),ajr.forEach(t),AVe=r(cCe," (FairSeq Machine-Translation model)"),cCe.forEach(t),yVe=i(y),Kf=n(y,"LI",{});var fCe=s(Kf);Xee=n(fCe,"STRONG",{});var njr=s(Xee);LVe=r(njr,"funnel"),njr.forEach(t),xVe=r(fCe," \u2014 "),ek=n(fCe,"A",{href:!0});var sjr=s(ek);$Ve=r(sjr,"FunnelConfig"),sjr.forEach(t),kVe=r(fCe," (Funnel Transformer model)"),fCe.forEach(t),SVe=i(y),Zf=n(y,"LI",{});var mCe=s(Zf);zee=n(mCe,"STRONG",{});var ljr=s(zee);RVe=r(ljr,"glpn"),ljr.forEach(t),BVe=r(mCe," \u2014 "),ok=n(mCe,"A",{href:!0});var ijr=s(ok);PVe=r(ijr,"GLPNConfig"),ijr.forEach(t),IVe=r(mCe," (GLPN model)"),mCe.forEach(t),qVe=i(y),em=n(y,"LI",{});var gCe=s(em);Qee=n(gCe,"STRONG",{});var djr=s(Qee);NVe=r(djr,"gpt2"),djr.forEach(t),jVe=r(gCe," \u2014 "),rk=n(gCe,"A",{href:!0});var cjr=s(rk);DVe=r(cjr,"GPT2Config"),cjr.forEach(t),GVe=r(gCe," (OpenAI GPT-2 model)"),gCe.forEach(t),OVe=i(y),om=n(y,"LI",{});var hCe=s(om);Wee=n(hCe,"STRONG",{});var fjr=s(Wee);VVe=r(fjr,"gpt_neo"),fjr.forEach(t),XVe=r(hCe," \u2014 "),tk=n(hCe,"A",{href:!0});var mjr=s(tk);zVe=r(mjr,"GPTNeoConfig"),mjr.forEach(t),QVe=r(hCe," (GPT Neo model)"),hCe.forEach(t),WVe=i(y),rm=n(y,"LI",{});var pCe=s(rm);Hee=n(pCe,"STRONG",{});var gjr=s(Hee);HVe=r(gjr,"gptj"),gjr.forEach(t),UVe=r(pCe," \u2014 "),ak=n(pCe,"A",{href:!0});var hjr=s(ak);JVe=r(hjr,"GPTJConfig"),hjr.forEach(t),YVe=r(pCe," (GPT-J model)"),pCe.forEach(t),KVe=i(y),tm=n(y,"LI",{});var uCe=s(tm);Uee=n(uCe,"STRONG",{});var pjr=s(Uee);ZVe=r(pjr,"hubert"),pjr.forEach(t),eXe=r(uCe," \u2014 "),nk=n(uCe,"A",{href:!0});var ujr=s(nk);oXe=r(ujr,"HubertConfig"),ujr.forEach(t),rXe=r(uCe," (Hubert model)"),uCe.forEach(t),tXe=i(y),am=n(y,"LI",{});var _Ce=s(am);Jee=n(_Ce,"STRONG",{});var _jr=s(Jee);aXe=r(_jr,"ibert"),_jr.forEach(t),nXe=r(_Ce," \u2014 "),sk=n(_Ce,"A",{href:!0});var bjr=s(sk);sXe=r(bjr,"IBertConfig"),bjr.forEach(t),lXe=r(_Ce," (I-BERT model)"),_Ce.forEach(t),iXe=i(y),nm=n(y,"LI",{});var bCe=s(nm);Yee=n(bCe,"STRONG",{});var vjr=s(Yee);dXe=r(vjr,"imagegpt"),vjr.forEach(t),cXe=r(bCe," \u2014 "),lk=n(bCe,"A",{href:!0});var Fjr=s(lk);fXe=r(Fjr,"ImageGPTConfig"),Fjr.forEach(t),mXe=r(bCe," (ImageGPT model)"),bCe.forEach(t),gXe=i(y),sm=n(y,"LI",{});var vCe=s(sm);Kee=n(vCe,"STRONG",{});var Tjr=s(Kee);hXe=r(Tjr,"layoutlm"),Tjr.forEach(t),pXe=r(vCe," \u2014 "),ik=n(vCe,"A",{href:!0});var Mjr=s(ik);uXe=r(Mjr,"LayoutLMConfig"),Mjr.forEach(t),_Xe=r(vCe," (LayoutLM model)"),vCe.forEach(t),bXe=i(y),lm=n(y,"LI",{});var FCe=s(lm);Zee=n(FCe,"STRONG",{});var Ejr=s(Zee);vXe=r(Ejr,"layoutlmv2"),Ejr.forEach(t),FXe=r(FCe," \u2014 "),dk=n(FCe,"A",{href:!0});var Cjr=s(dk);TXe=r(Cjr,"LayoutLMv2Config"),Cjr.forEach(t),MXe=r(FCe," (LayoutLMv2 model)"),FCe.forEach(t),EXe=i(y),im=n(y,"LI",{});var TCe=s(im);eoe=n(TCe,"STRONG",{});var wjr=s(eoe);CXe=r(wjr,"led"),wjr.forEach(t),wXe=r(TCe," \u2014 "),ck=n(TCe,"A",{href:!0});var Ajr=s(ck);AXe=r(Ajr,"LEDConfig"),Ajr.forEach(t),yXe=r(TCe," (LED model)"),TCe.forEach(t),LXe=i(y),dm=n(y,"LI",{});var MCe=s(dm);ooe=n(MCe,"STRONG",{});var yjr=s(ooe);xXe=r(yjr,"longformer"),yjr.forEach(t),$Xe=r(MCe," \u2014 "),fk=n(MCe,"A",{href:!0});var Ljr=s(fk);kXe=r(Ljr,"LongformerConfig"),Ljr.forEach(t),SXe=r(MCe," (Longformer model)"),MCe.forEach(t),RXe=i(y),cm=n(y,"LI",{});var ECe=s(cm);roe=n(ECe,"STRONG",{});var xjr=s(roe);BXe=r(xjr,"luke"),xjr.forEach(t),PXe=r(ECe," \u2014 "),mk=n(ECe,"A",{href:!0});var $jr=s(mk);IXe=r($jr,"LukeConfig"),$jr.forEach(t),qXe=r(ECe," (LUKE model)"),ECe.forEach(t),NXe=i(y),fm=n(y,"LI",{});var CCe=s(fm);toe=n(CCe,"STRONG",{});var kjr=s(toe);jXe=r(kjr,"lxmert"),kjr.forEach(t),DXe=r(CCe," \u2014 "),gk=n(CCe,"A",{href:!0});var Sjr=s(gk);GXe=r(Sjr,"LxmertConfig"),Sjr.forEach(t),OXe=r(CCe," (LXMERT model)"),CCe.forEach(t),VXe=i(y),mm=n(y,"LI",{});var wCe=s(mm);aoe=n(wCe,"STRONG",{});var Rjr=s(aoe);XXe=r(Rjr,"m2m_100"),Rjr.forEach(t),zXe=r(wCe," \u2014 "),hk=n(wCe,"A",{href:!0});var Bjr=s(hk);QXe=r(Bjr,"M2M100Config"),Bjr.forEach(t),WXe=r(wCe," (M2M100 model)"),wCe.forEach(t),HXe=i(y),gm=n(y,"LI",{});var ACe=s(gm);noe=n(ACe,"STRONG",{});var Pjr=s(noe);UXe=r(Pjr,"marian"),Pjr.forEach(t),JXe=r(ACe," \u2014 "),pk=n(ACe,"A",{href:!0});var Ijr=s(pk);YXe=r(Ijr,"MarianConfig"),Ijr.forEach(t),KXe=r(ACe," (Marian model)"),ACe.forEach(t),ZXe=i(y),hm=n(y,"LI",{});var yCe=s(hm);soe=n(yCe,"STRONG",{});var qjr=s(soe);eze=r(qjr,"maskformer"),qjr.forEach(t),oze=r(yCe," \u2014 "),uk=n(yCe,"A",{href:!0});var Njr=s(uk);rze=r(Njr,"MaskFormerConfig"),Njr.forEach(t),tze=r(yCe," (MaskFormer model)"),yCe.forEach(t),aze=i(y),pm=n(y,"LI",{});var LCe=s(pm);loe=n(LCe,"STRONG",{});var jjr=s(loe);nze=r(jjr,"mbart"),jjr.forEach(t),sze=r(LCe," \u2014 "),_k=n(LCe,"A",{href:!0});var Djr=s(_k);lze=r(Djr,"MBartConfig"),Djr.forEach(t),ize=r(LCe," (mBART model)"),LCe.forEach(t),dze=i(y),um=n(y,"LI",{});var xCe=s(um);ioe=n(xCe,"STRONG",{});var Gjr=s(ioe);cze=r(Gjr,"megatron-bert"),Gjr.forEach(t),fze=r(xCe," \u2014 "),bk=n(xCe,"A",{href:!0});var Ojr=s(bk);mze=r(Ojr,"MegatronBertConfig"),Ojr.forEach(t),gze=r(xCe," (MegatronBert model)"),xCe.forEach(t),hze=i(y),_m=n(y,"LI",{});var $Ce=s(_m);doe=n($Ce,"STRONG",{});var Vjr=s(doe);pze=r(Vjr,"mobilebert"),Vjr.forEach(t),uze=r($Ce," \u2014 "),vk=n($Ce,"A",{href:!0});var Xjr=s(vk);_ze=r(Xjr,"MobileBertConfig"),Xjr.forEach(t),bze=r($Ce," (MobileBERT model)"),$Ce.forEach(t),vze=i(y),bm=n(y,"LI",{});var kCe=s(bm);coe=n(kCe,"STRONG",{});var zjr=s(coe);Fze=r(zjr,"mpnet"),zjr.forEach(t),Tze=r(kCe," \u2014 "),Fk=n(kCe,"A",{href:!0});var Qjr=s(Fk);Mze=r(Qjr,"MPNetConfig"),Qjr.forEach(t),Eze=r(kCe," (MPNet model)"),kCe.forEach(t),Cze=i(y),vm=n(y,"LI",{});var SCe=s(vm);foe=n(SCe,"STRONG",{});var Wjr=s(foe);wze=r(Wjr,"mt5"),Wjr.forEach(t),Aze=r(SCe," \u2014 "),Tk=n(SCe,"A",{href:!0});var Hjr=s(Tk);yze=r(Hjr,"MT5Config"),Hjr.forEach(t),Lze=r(SCe," (mT5 model)"),SCe.forEach(t),xze=i(y),Fm=n(y,"LI",{});var RCe=s(Fm);moe=n(RCe,"STRONG",{});var Ujr=s(moe);$ze=r(Ujr,"nystromformer"),Ujr.forEach(t),kze=r(RCe," \u2014 "),Mk=n(RCe,"A",{href:!0});var Jjr=s(Mk);Sze=r(Jjr,"NystromformerConfig"),Jjr.forEach(t),Rze=r(RCe," (Nystromformer model)"),RCe.forEach(t),Bze=i(y),Tm=n(y,"LI",{});var BCe=s(Tm);goe=n(BCe,"STRONG",{});var Yjr=s(goe);Pze=r(Yjr,"openai-gpt"),Yjr.forEach(t),Ize=r(BCe," \u2014 "),Ek=n(BCe,"A",{href:!0});var Kjr=s(Ek);qze=r(Kjr,"OpenAIGPTConfig"),Kjr.forEach(t),Nze=r(BCe," (OpenAI GPT model)"),BCe.forEach(t),jze=i(y),Mm=n(y,"LI",{});var PCe=s(Mm);hoe=n(PCe,"STRONG",{});var Zjr=s(hoe);Dze=r(Zjr,"opt"),Zjr.forEach(t),Gze=r(PCe," \u2014 "),Ck=n(PCe,"A",{href:!0});var eDr=s(Ck);Oze=r(eDr,"OPTConfig"),eDr.forEach(t),Vze=r(PCe," (OPT model)"),PCe.forEach(t),Xze=i(y),Em=n(y,"LI",{});var ICe=s(Em);poe=n(ICe,"STRONG",{});var oDr=s(poe);zze=r(oDr,"pegasus"),oDr.forEach(t),Qze=r(ICe," \u2014 "),wk=n(ICe,"A",{href:!0});var rDr=s(wk);Wze=r(rDr,"PegasusConfig"),rDr.forEach(t),Hze=r(ICe," (Pegasus model)"),ICe.forEach(t),Uze=i(y),Cm=n(y,"LI",{});var qCe=s(Cm);uoe=n(qCe,"STRONG",{});var tDr=s(uoe);Jze=r(tDr,"perceiver"),tDr.forEach(t),Yze=r(qCe," \u2014 "),Ak=n(qCe,"A",{href:!0});var aDr=s(Ak);Kze=r(aDr,"PerceiverConfig"),aDr.forEach(t),Zze=r(qCe," (Perceiver model)"),qCe.forEach(t),eQe=i(y),wm=n(y,"LI",{});var NCe=s(wm);_oe=n(NCe,"STRONG",{});var nDr=s(_oe);oQe=r(nDr,"plbart"),nDr.forEach(t),rQe=r(NCe," \u2014 "),yk=n(NCe,"A",{href:!0});var sDr=s(yk);tQe=r(sDr,"PLBartConfig"),sDr.forEach(t),aQe=r(NCe," (PLBart model)"),NCe.forEach(t),nQe=i(y),Am=n(y,"LI",{});var jCe=s(Am);boe=n(jCe,"STRONG",{});var lDr=s(boe);sQe=r(lDr,"poolformer"),lDr.forEach(t),lQe=r(jCe," \u2014 "),Lk=n(jCe,"A",{href:!0});var iDr=s(Lk);iQe=r(iDr,"PoolFormerConfig"),iDr.forEach(t),dQe=r(jCe," (PoolFormer model)"),jCe.forEach(t),cQe=i(y),ym=n(y,"LI",{});var DCe=s(ym);voe=n(DCe,"STRONG",{});var dDr=s(voe);fQe=r(dDr,"prophetnet"),dDr.forEach(t),mQe=r(DCe," \u2014 "),xk=n(DCe,"A",{href:!0});var cDr=s(xk);gQe=r(cDr,"ProphetNetConfig"),cDr.forEach(t),hQe=r(DCe," (ProphetNet model)"),DCe.forEach(t),pQe=i(y),Lm=n(y,"LI",{});var GCe=s(Lm);Foe=n(GCe,"STRONG",{});var fDr=s(Foe);uQe=r(fDr,"qdqbert"),fDr.forEach(t),_Qe=r(GCe," \u2014 "),$k=n(GCe,"A",{href:!0});var mDr=s($k);bQe=r(mDr,"QDQBertConfig"),mDr.forEach(t),vQe=r(GCe," (QDQBert model)"),GCe.forEach(t),FQe=i(y),xm=n(y,"LI",{});var OCe=s(xm);Toe=n(OCe,"STRONG",{});var gDr=s(Toe);TQe=r(gDr,"rag"),gDr.forEach(t),MQe=r(OCe," \u2014 "),kk=n(OCe,"A",{href:!0});var hDr=s(kk);EQe=r(hDr,"RagConfig"),hDr.forEach(t),CQe=r(OCe," (RAG model)"),OCe.forEach(t),wQe=i(y),$m=n(y,"LI",{});var VCe=s($m);Moe=n(VCe,"STRONG",{});var pDr=s(Moe);AQe=r(pDr,"realm"),pDr.forEach(t),yQe=r(VCe," \u2014 "),Sk=n(VCe,"A",{href:!0});var uDr=s(Sk);LQe=r(uDr,"RealmConfig"),uDr.forEach(t),xQe=r(VCe," (Realm model)"),VCe.forEach(t),$Qe=i(y),km=n(y,"LI",{});var XCe=s(km);Eoe=n(XCe,"STRONG",{});var _Dr=s(Eoe);kQe=r(_Dr,"reformer"),_Dr.forEach(t),SQe=r(XCe," \u2014 "),Rk=n(XCe,"A",{href:!0});var bDr=s(Rk);RQe=r(bDr,"ReformerConfig"),bDr.forEach(t),BQe=r(XCe," (Reformer model)"),XCe.forEach(t),PQe=i(y),Sm=n(y,"LI",{});var zCe=s(Sm);Coe=n(zCe,"STRONG",{});var vDr=s(Coe);IQe=r(vDr,"regnet"),vDr.forEach(t),qQe=r(zCe," \u2014 "),Bk=n(zCe,"A",{href:!0});var FDr=s(Bk);NQe=r(FDr,"RegNetConfig"),FDr.forEach(t),jQe=r(zCe," (RegNet model)"),zCe.forEach(t),DQe=i(y),Rm=n(y,"LI",{});var QCe=s(Rm);woe=n(QCe,"STRONG",{});var TDr=s(woe);GQe=r(TDr,"rembert"),TDr.forEach(t),OQe=r(QCe," \u2014 "),Pk=n(QCe,"A",{href:!0});var MDr=s(Pk);VQe=r(MDr,"RemBertConfig"),MDr.forEach(t),XQe=r(QCe," (RemBERT model)"),QCe.forEach(t),zQe=i(y),Bm=n(y,"LI",{});var WCe=s(Bm);Aoe=n(WCe,"STRONG",{});var EDr=s(Aoe);QQe=r(EDr,"resnet"),EDr.forEach(t),WQe=r(WCe," \u2014 "),Ik=n(WCe,"A",{href:!0});var CDr=s(Ik);HQe=r(CDr,"ResNetConfig"),CDr.forEach(t),UQe=r(WCe," (ResNet model)"),WCe.forEach(t),JQe=i(y),Pm=n(y,"LI",{});var HCe=s(Pm);yoe=n(HCe,"STRONG",{});var wDr=s(yoe);YQe=r(wDr,"retribert"),wDr.forEach(t),KQe=r(HCe," \u2014 "),qk=n(HCe,"A",{href:!0});var ADr=s(qk);ZQe=r(ADr,"RetriBertConfig"),ADr.forEach(t),eWe=r(HCe," (RetriBERT model)"),HCe.forEach(t),oWe=i(y),Im=n(y,"LI",{});var UCe=s(Im);Loe=n(UCe,"STRONG",{});var yDr=s(Loe);rWe=r(yDr,"roberta"),yDr.forEach(t),tWe=r(UCe," \u2014 "),Nk=n(UCe,"A",{href:!0});var LDr=s(Nk);aWe=r(LDr,"RobertaConfig"),LDr.forEach(t),nWe=r(UCe," (RoBERTa model)"),UCe.forEach(t),sWe=i(y),qm=n(y,"LI",{});var JCe=s(qm);xoe=n(JCe,"STRONG",{});var xDr=s(xoe);lWe=r(xDr,"roformer"),xDr.forEach(t),iWe=r(JCe," \u2014 "),jk=n(JCe,"A",{href:!0});var $Dr=s(jk);dWe=r($Dr,"RoFormerConfig"),$Dr.forEach(t),cWe=r(JCe," (RoFormer model)"),JCe.forEach(t),fWe=i(y),Nm=n(y,"LI",{});var YCe=s(Nm);$oe=n(YCe,"STRONG",{});var kDr=s($oe);mWe=r(kDr,"segformer"),kDr.forEach(t),gWe=r(YCe," \u2014 "),Dk=n(YCe,"A",{href:!0});var SDr=s(Dk);hWe=r(SDr,"SegformerConfig"),SDr.forEach(t),pWe=r(YCe," (SegFormer model)"),YCe.forEach(t),uWe=i(y),jm=n(y,"LI",{});var KCe=s(jm);koe=n(KCe,"STRONG",{});var RDr=s(koe);_We=r(RDr,"sew"),RDr.forEach(t),bWe=r(KCe," \u2014 "),Gk=n(KCe,"A",{href:!0});var BDr=s(Gk);vWe=r(BDr,"SEWConfig"),BDr.forEach(t),FWe=r(KCe," (SEW model)"),KCe.forEach(t),TWe=i(y),Dm=n(y,"LI",{});var ZCe=s(Dm);Soe=n(ZCe,"STRONG",{});var PDr=s(Soe);MWe=r(PDr,"sew-d"),PDr.forEach(t),EWe=r(ZCe," \u2014 "),Ok=n(ZCe,"A",{href:!0});var IDr=s(Ok);CWe=r(IDr,"SEWDConfig"),IDr.forEach(t),wWe=r(ZCe," (SEW-D model)"),ZCe.forEach(t),AWe=i(y),Gm=n(y,"LI",{});var e3e=s(Gm);Roe=n(e3e,"STRONG",{});var qDr=s(Roe);yWe=r(qDr,"speech-encoder-decoder"),qDr.forEach(t),LWe=r(e3e," \u2014 "),Vk=n(e3e,"A",{href:!0});var NDr=s(Vk);xWe=r(NDr,"SpeechEncoderDecoderConfig"),NDr.forEach(t),$We=r(e3e," (Speech Encoder decoder model)"),e3e.forEach(t),kWe=i(y),Om=n(y,"LI",{});var o3e=s(Om);Boe=n(o3e,"STRONG",{});var jDr=s(Boe);SWe=r(jDr,"speech_to_text"),jDr.forEach(t),RWe=r(o3e," \u2014 "),Xk=n(o3e,"A",{href:!0});var DDr=s(Xk);BWe=r(DDr,"Speech2TextConfig"),DDr.forEach(t),PWe=r(o3e," (Speech2Text model)"),o3e.forEach(t),IWe=i(y),Vm=n(y,"LI",{});var r3e=s(Vm);Poe=n(r3e,"STRONG",{});var GDr=s(Poe);qWe=r(GDr,"speech_to_text_2"),GDr.forEach(t),NWe=r(r3e," \u2014 "),zk=n(r3e,"A",{href:!0});var ODr=s(zk);jWe=r(ODr,"Speech2Text2Config"),ODr.forEach(t),DWe=r(r3e," (Speech2Text2 model)"),r3e.forEach(t),GWe=i(y),Xm=n(y,"LI",{});var t3e=s(Xm);Ioe=n(t3e,"STRONG",{});var VDr=s(Ioe);OWe=r(VDr,"splinter"),VDr.forEach(t),VWe=r(t3e," \u2014 "),Qk=n(t3e,"A",{href:!0});var XDr=s(Qk);XWe=r(XDr,"SplinterConfig"),XDr.forEach(t),zWe=r(t3e," (Splinter model)"),t3e.forEach(t),QWe=i(y),zm=n(y,"LI",{});var a3e=s(zm);qoe=n(a3e,"STRONG",{});var zDr=s(qoe);WWe=r(zDr,"squeezebert"),zDr.forEach(t),HWe=r(a3e," \u2014 "),Wk=n(a3e,"A",{href:!0});var QDr=s(Wk);UWe=r(QDr,"SqueezeBertConfig"),QDr.forEach(t),JWe=r(a3e," (SqueezeBERT model)"),a3e.forEach(t),YWe=i(y),Qm=n(y,"LI",{});var n3e=s(Qm);Noe=n(n3e,"STRONG",{});var WDr=s(Noe);KWe=r(WDr,"swin"),WDr.forEach(t),ZWe=r(n3e," \u2014 "),Hk=n(n3e,"A",{href:!0});var HDr=s(Hk);eHe=r(HDr,"SwinConfig"),HDr.forEach(t),oHe=r(n3e," (Swin model)"),n3e.forEach(t),rHe=i(y),Wm=n(y,"LI",{});var s3e=s(Wm);joe=n(s3e,"STRONG",{});var UDr=s(joe);tHe=r(UDr,"t5"),UDr.forEach(t),aHe=r(s3e," \u2014 "),Uk=n(s3e,"A",{href:!0});var JDr=s(Uk);nHe=r(JDr,"T5Config"),JDr.forEach(t),sHe=r(s3e," (T5 model)"),s3e.forEach(t),lHe=i(y),Hm=n(y,"LI",{});var l3e=s(Hm);Doe=n(l3e,"STRONG",{});var YDr=s(Doe);iHe=r(YDr,"tapas"),YDr.forEach(t),dHe=r(l3e," \u2014 "),Jk=n(l3e,"A",{href:!0});var KDr=s(Jk);cHe=r(KDr,"TapasConfig"),KDr.forEach(t),fHe=r(l3e," (TAPAS model)"),l3e.forEach(t),mHe=i(y),Um=n(y,"LI",{});var i3e=s(Um);Goe=n(i3e,"STRONG",{});var ZDr=s(Goe);gHe=r(ZDr,"tapex"),ZDr.forEach(t),hHe=r(i3e," \u2014 "),Yk=n(i3e,"A",{href:!0});var eGr=s(Yk);pHe=r(eGr,"BartConfig"),eGr.forEach(t),uHe=r(i3e," (TAPEX model)"),i3e.forEach(t),_He=i(y),Jm=n(y,"LI",{});var d3e=s(Jm);Ooe=n(d3e,"STRONG",{});var oGr=s(Ooe);bHe=r(oGr,"transfo-xl"),oGr.forEach(t),vHe=r(d3e," \u2014 "),Kk=n(d3e,"A",{href:!0});var rGr=s(Kk);FHe=r(rGr,"TransfoXLConfig"),rGr.forEach(t),THe=r(d3e," (Transformer-XL model)"),d3e.forEach(t),MHe=i(y),Ym=n(y,"LI",{});var c3e=s(Ym);Voe=n(c3e,"STRONG",{});var tGr=s(Voe);EHe=r(tGr,"trocr"),tGr.forEach(t),CHe=r(c3e," \u2014 "),Zk=n(c3e,"A",{href:!0});var aGr=s(Zk);wHe=r(aGr,"TrOCRConfig"),aGr.forEach(t),AHe=r(c3e," (TrOCR model)"),c3e.forEach(t),yHe=i(y),Km=n(y,"LI",{});var f3e=s(Km);Xoe=n(f3e,"STRONG",{});var nGr=s(Xoe);LHe=r(nGr,"unispeech"),nGr.forEach(t),xHe=r(f3e," \u2014 "),eS=n(f3e,"A",{href:!0});var sGr=s(eS);$He=r(sGr,"UniSpeechConfig"),sGr.forEach(t),kHe=r(f3e," (UniSpeech model)"),f3e.forEach(t),SHe=i(y),Zm=n(y,"LI",{});var m3e=s(Zm);zoe=n(m3e,"STRONG",{});var lGr=s(zoe);RHe=r(lGr,"unispeech-sat"),lGr.forEach(t),BHe=r(m3e," \u2014 "),oS=n(m3e,"A",{href:!0});var iGr=s(oS);PHe=r(iGr,"UniSpeechSatConfig"),iGr.forEach(t),IHe=r(m3e," (UniSpeechSat model)"),m3e.forEach(t),qHe=i(y),eg=n(y,"LI",{});var g3e=s(eg);Qoe=n(g3e,"STRONG",{});var dGr=s(Qoe);NHe=r(dGr,"van"),dGr.forEach(t),jHe=r(g3e," \u2014 "),rS=n(g3e,"A",{href:!0});var cGr=s(rS);DHe=r(cGr,"VanConfig"),cGr.forEach(t),GHe=r(g3e," (VAN model)"),g3e.forEach(t),OHe=i(y),og=n(y,"LI",{});var h3e=s(og);Woe=n(h3e,"STRONG",{});var fGr=s(Woe);VHe=r(fGr,"vilt"),fGr.forEach(t),XHe=r(h3e," \u2014 "),tS=n(h3e,"A",{href:!0});var mGr=s(tS);zHe=r(mGr,"ViltConfig"),mGr.forEach(t),QHe=r(h3e," (ViLT model)"),h3e.forEach(t),WHe=i(y),rg=n(y,"LI",{});var p3e=s(rg);Hoe=n(p3e,"STRONG",{});var gGr=s(Hoe);HHe=r(gGr,"vision-encoder-decoder"),gGr.forEach(t),UHe=r(p3e," \u2014 "),aS=n(p3e,"A",{href:!0});var hGr=s(aS);JHe=r(hGr,"VisionEncoderDecoderConfig"),hGr.forEach(t),YHe=r(p3e," (Vision Encoder decoder model)"),p3e.forEach(t),KHe=i(y),tg=n(y,"LI",{});var u3e=s(tg);Uoe=n(u3e,"STRONG",{});var pGr=s(Uoe);ZHe=r(pGr,"vision-text-dual-encoder"),pGr.forEach(t),eUe=r(u3e," \u2014 "),nS=n(u3e,"A",{href:!0});var uGr=s(nS);oUe=r(uGr,"VisionTextDualEncoderConfig"),uGr.forEach(t),rUe=r(u3e," (VisionTextDualEncoder model)"),u3e.forEach(t),tUe=i(y),ag=n(y,"LI",{});var _3e=s(ag);Joe=n(_3e,"STRONG",{});var _Gr=s(Joe);aUe=r(_Gr,"visual_bert"),_Gr.forEach(t),nUe=r(_3e," \u2014 "),sS=n(_3e,"A",{href:!0});var bGr=s(sS);sUe=r(bGr,"VisualBertConfig"),bGr.forEach(t),lUe=r(_3e," (VisualBert model)"),_3e.forEach(t),iUe=i(y),ng=n(y,"LI",{});var b3e=s(ng);Yoe=n(b3e,"STRONG",{});var vGr=s(Yoe);dUe=r(vGr,"vit"),vGr.forEach(t),cUe=r(b3e," \u2014 "),lS=n(b3e,"A",{href:!0});var FGr=s(lS);fUe=r(FGr,"ViTConfig"),FGr.forEach(t),mUe=r(b3e," (ViT model)"),b3e.forEach(t),gUe=i(y),sg=n(y,"LI",{});var v3e=s(sg);Koe=n(v3e,"STRONG",{});var TGr=s(Koe);hUe=r(TGr,"vit_mae"),TGr.forEach(t),pUe=r(v3e," \u2014 "),iS=n(v3e,"A",{href:!0});var MGr=s(iS);uUe=r(MGr,"ViTMAEConfig"),MGr.forEach(t),_Ue=r(v3e," (ViTMAE model)"),v3e.forEach(t),bUe=i(y),lg=n(y,"LI",{});var F3e=s(lg);Zoe=n(F3e,"STRONG",{});var EGr=s(Zoe);vUe=r(EGr,"wav2vec2"),EGr.forEach(t),FUe=r(F3e," \u2014 "),dS=n(F3e,"A",{href:!0});var CGr=s(dS);TUe=r(CGr,"Wav2Vec2Config"),CGr.forEach(t),MUe=r(F3e," (Wav2Vec2 model)"),F3e.forEach(t),EUe=i(y),ig=n(y,"LI",{});var T3e=s(ig);ere=n(T3e,"STRONG",{});var wGr=s(ere);CUe=r(wGr,"wavlm"),wGr.forEach(t),wUe=r(T3e," \u2014 "),cS=n(T3e,"A",{href:!0});var AGr=s(cS);AUe=r(AGr,"WavLMConfig"),AGr.forEach(t),yUe=r(T3e," (WavLM model)"),T3e.forEach(t),LUe=i(y),dg=n(y,"LI",{});var M3e=s(dg);ore=n(M3e,"STRONG",{});var yGr=s(ore);xUe=r(yGr,"xglm"),yGr.forEach(t),$Ue=r(M3e," \u2014 "),fS=n(M3e,"A",{href:!0});var LGr=s(fS);kUe=r(LGr,"XGLMConfig"),LGr.forEach(t),SUe=r(M3e," (XGLM model)"),M3e.forEach(t),RUe=i(y),cg=n(y,"LI",{});var E3e=s(cg);rre=n(E3e,"STRONG",{});var xGr=s(rre);BUe=r(xGr,"xlm"),xGr.forEach(t),PUe=r(E3e," \u2014 "),mS=n(E3e,"A",{href:!0});var $Gr=s(mS);IUe=r($Gr,"XLMConfig"),$Gr.forEach(t),qUe=r(E3e," (XLM model)"),E3e.forEach(t),NUe=i(y),fg=n(y,"LI",{});var C3e=s(fg);tre=n(C3e,"STRONG",{});var kGr=s(tre);jUe=r(kGr,"xlm-prophetnet"),kGr.forEach(t),DUe=r(C3e," \u2014 "),gS=n(C3e,"A",{href:!0});var SGr=s(gS);GUe=r(SGr,"XLMProphetNetConfig"),SGr.forEach(t),OUe=r(C3e," (XLMProphetNet model)"),C3e.forEach(t),VUe=i(y),mg=n(y,"LI",{});var w3e=s(mg);are=n(w3e,"STRONG",{});var RGr=s(are);XUe=r(RGr,"xlm-roberta"),RGr.forEach(t),zUe=r(w3e," \u2014 "),hS=n(w3e,"A",{href:!0});var BGr=s(hS);QUe=r(BGr,"XLMRobertaConfig"),BGr.forEach(t),WUe=r(w3e," (XLM-RoBERTa model)"),w3e.forEach(t),HUe=i(y),gg=n(y,"LI",{});var A3e=s(gg);nre=n(A3e,"STRONG",{});var PGr=s(nre);UUe=r(PGr,"xlm-roberta-xl"),PGr.forEach(t),JUe=r(A3e," \u2014 "),pS=n(A3e,"A",{href:!0});var IGr=s(pS);YUe=r(IGr,"XLMRobertaXLConfig"),IGr.forEach(t),KUe=r(A3e," (XLM-RoBERTa-XL model)"),A3e.forEach(t),ZUe=i(y),hg=n(y,"LI",{});var y3e=s(hg);sre=n(y3e,"STRONG",{});var qGr=s(sre);eJe=r(qGr,"xlnet"),qGr.forEach(t),oJe=r(y3e," \u2014 "),uS=n(y3e,"A",{href:!0});var NGr=s(uS);rJe=r(NGr,"XLNetConfig"),NGr.forEach(t),tJe=r(y3e," (XLNet model)"),y3e.forEach(t),aJe=i(y),pg=n(y,"LI",{});var L3e=s(pg);lre=n(L3e,"STRONG",{});var jGr=s(lre);nJe=r(jGr,"yolos"),jGr.forEach(t),sJe=r(L3e," \u2014 "),_S=n(L3e,"A",{href:!0});var DGr=s(_S);lJe=r(DGr,"YolosConfig"),DGr.forEach(t),iJe=r(L3e," (YOLOS model)"),L3e.forEach(t),dJe=i(y),ug=n(y,"LI",{});var x3e=s(ug);ire=n(x3e,"STRONG",{});var GGr=s(ire);cJe=r(GGr,"yoso"),GGr.forEach(t),fJe=r(x3e," \u2014 "),bS=n(x3e,"A",{href:!0});var OGr=s(bS);mJe=r(OGr,"YosoConfig"),OGr.forEach(t),gJe=r(x3e," (YOSO model)"),x3e.forEach(t),y.forEach(t),hJe=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),pJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var Hqe=s(bg);T(a0.$$.fragment,Hqe),uJe=i(Hqe),dre=n(Hqe,"P",{});var VGr=s(dre);_Je=r(VGr,"Register a new configuration for this class."),VGr.forEach(t),Hqe.forEach(t),Kr.forEach(t),YPe=i(f),bi=n(f,"H2",{class:!0});var Uqe=s(bi);vg=n(Uqe,"A",{id:!0,class:!0,href:!0});var XGr=s(vg);cre=n(XGr,"SPAN",{});var zGr=s(cre);T(n0.$$.fragment,zGr),zGr.forEach(t),XGr.forEach(t),bJe=i(Uqe),fre=n(Uqe,"SPAN",{});var QGr=s(fre);vJe=r(QGr,"AutoTokenizer"),QGr.forEach(t),Uqe.forEach(t),KPe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(s0.$$.fragment,Is),FJe=i(Is),l0=n(Is,"P",{});var Jqe=s(l0);TJe=r(Jqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vS=n(Jqe,"A",{href:!0});var WGr=s(vS);MJe=r(WGr,"AutoTokenizer.from_pretrained()"),WGr.forEach(t),EJe=r(Jqe," class method."),Jqe.forEach(t),CJe=i(Is),i0=n(Is,"P",{});var Yqe=s(i0);wJe=r(Yqe,"This class cannot be instantiated directly using "),mre=n(Yqe,"CODE",{});var HGr=s(mre);AJe=r(HGr,"__init__()"),HGr.forEach(t),yJe=r(Yqe," (throws an error)."),Yqe.forEach(t),LJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(d0.$$.fragment,qs),xJe=i(qs),gre=n(qs,"P",{});var UGr=s(gre);$Je=r(UGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),UGr.forEach(t),kJe=i(qs),Ca=n(qs,"P",{});var Kw=s(Ca);SJe=r(Kw,"The tokenizer class to instantiate is selected based on the "),hre=n(Kw,"CODE",{});var JGr=s(hre);RJe=r(JGr,"model_type"),JGr.forEach(t),BJe=r(Kw,` property of the config object (either
passed as an argument or loaded from `),pre=n(Kw,"CODE",{});var YGr=s(pre);PJe=r(YGr,"pretrained_model_name_or_path"),YGr.forEach(t),IJe=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ure=n(Kw,"CODE",{});var KGr=s(ure);qJe=r(KGr,"pretrained_model_name_or_path"),KGr.forEach(t),NJe=r(Kw,":"),Kw.forEach(t),jJe=i(qs),k=n(qs,"UL",{});var S=s(k);kn=n(S,"LI",{});var c9=s(kn);_re=n(c9,"STRONG",{});var ZGr=s(_re);DJe=r(ZGr,"albert"),ZGr.forEach(t),GJe=r(c9," \u2014 "),FS=n(c9,"A",{href:!0});var eOr=s(FS);OJe=r(eOr,"AlbertTokenizer"),eOr.forEach(t),VJe=r(c9," or "),TS=n(c9,"A",{href:!0});var oOr=s(TS);XJe=r(oOr,"AlbertTokenizerFast"),oOr.forEach(t),zJe=r(c9," (ALBERT model)"),c9.forEach(t),QJe=i(S),Sn=n(S,"LI",{});var f9=s(Sn);bre=n(f9,"STRONG",{});var rOr=s(bre);WJe=r(rOr,"bart"),rOr.forEach(t),HJe=r(f9," \u2014 "),MS=n(f9,"A",{href:!0});var tOr=s(MS);UJe=r(tOr,"BartTokenizer"),tOr.forEach(t),JJe=r(f9," or "),ES=n(f9,"A",{href:!0});var aOr=s(ES);YJe=r(aOr,"BartTokenizerFast"),aOr.forEach(t),KJe=r(f9," (BART model)"),f9.forEach(t),ZJe=i(S),Rn=n(S,"LI",{});var m9=s(Rn);vre=n(m9,"STRONG",{});var nOr=s(vre);eYe=r(nOr,"barthez"),nOr.forEach(t),oYe=r(m9," \u2014 "),CS=n(m9,"A",{href:!0});var sOr=s(CS);rYe=r(sOr,"BarthezTokenizer"),sOr.forEach(t),tYe=r(m9," or "),wS=n(m9,"A",{href:!0});var lOr=s(wS);aYe=r(lOr,"BarthezTokenizerFast"),lOr.forEach(t),nYe=r(m9," (BARThez model)"),m9.forEach(t),sYe=i(S),Bn=n(S,"LI",{});var g9=s(Bn);Fre=n(g9,"STRONG",{});var iOr=s(Fre);lYe=r(iOr,"bartpho"),iOr.forEach(t),iYe=r(g9," \u2014 "),AS=n(g9,"A",{href:!0});var dOr=s(AS);dYe=r(dOr,"BartphoTokenizer"),dOr.forEach(t),cYe=r(g9," or "),yS=n(g9,"A",{href:!0});var cOr=s(yS);fYe=r(cOr,"BartphoTokenizerFast"),cOr.forEach(t),mYe=r(g9," (BARTpho model)"),g9.forEach(t),gYe=i(S),Pn=n(S,"LI",{});var h9=s(Pn);Tre=n(h9,"STRONG",{});var fOr=s(Tre);hYe=r(fOr,"bert"),fOr.forEach(t),pYe=r(h9," \u2014 "),LS=n(h9,"A",{href:!0});var mOr=s(LS);uYe=r(mOr,"BertTokenizer"),mOr.forEach(t),_Ye=r(h9," or "),xS=n(h9,"A",{href:!0});var gOr=s(xS);bYe=r(gOr,"BertTokenizerFast"),gOr.forEach(t),vYe=r(h9," (BERT model)"),h9.forEach(t),FYe=i(S),Fg=n(S,"LI",{});var $3e=s(Fg);Mre=n($3e,"STRONG",{});var hOr=s(Mre);TYe=r(hOr,"bert-generation"),hOr.forEach(t),MYe=r($3e," \u2014 "),$S=n($3e,"A",{href:!0});var pOr=s($S);EYe=r(pOr,"BertGenerationTokenizer"),pOr.forEach(t),CYe=r($3e," (Bert Generation model)"),$3e.forEach(t),wYe=i(S),Tg=n(S,"LI",{});var k3e=s(Tg);Ere=n(k3e,"STRONG",{});var uOr=s(Ere);AYe=r(uOr,"bert-japanese"),uOr.forEach(t),yYe=r(k3e," \u2014 "),kS=n(k3e,"A",{href:!0});var _Or=s(kS);LYe=r(_Or,"BertJapaneseTokenizer"),_Or.forEach(t),xYe=r(k3e," (BertJapanese model)"),k3e.forEach(t),$Ye=i(S),Mg=n(S,"LI",{});var S3e=s(Mg);Cre=n(S3e,"STRONG",{});var bOr=s(Cre);kYe=r(bOr,"bertweet"),bOr.forEach(t),SYe=r(S3e," \u2014 "),SS=n(S3e,"A",{href:!0});var vOr=s(SS);RYe=r(vOr,"BertweetTokenizer"),vOr.forEach(t),BYe=r(S3e," (Bertweet model)"),S3e.forEach(t),PYe=i(S),In=n(S,"LI",{});var p9=s(In);wre=n(p9,"STRONG",{});var FOr=s(wre);IYe=r(FOr,"big_bird"),FOr.forEach(t),qYe=r(p9," \u2014 "),RS=n(p9,"A",{href:!0});var TOr=s(RS);NYe=r(TOr,"BigBirdTokenizer"),TOr.forEach(t),jYe=r(p9," or "),BS=n(p9,"A",{href:!0});var MOr=s(BS);DYe=r(MOr,"BigBirdTokenizerFast"),MOr.forEach(t),GYe=r(p9," (BigBird model)"),p9.forEach(t),OYe=i(S),qn=n(S,"LI",{});var u9=s(qn);Are=n(u9,"STRONG",{});var EOr=s(Are);VYe=r(EOr,"bigbird_pegasus"),EOr.forEach(t),XYe=r(u9," \u2014 "),PS=n(u9,"A",{href:!0});var COr=s(PS);zYe=r(COr,"PegasusTokenizer"),COr.forEach(t),QYe=r(u9," or "),IS=n(u9,"A",{href:!0});var wOr=s(IS);WYe=r(wOr,"PegasusTokenizerFast"),wOr.forEach(t),HYe=r(u9," (BigBirdPegasus model)"),u9.forEach(t),UYe=i(S),Nn=n(S,"LI",{});var _9=s(Nn);yre=n(_9,"STRONG",{});var AOr=s(yre);JYe=r(AOr,"blenderbot"),AOr.forEach(t),YYe=r(_9," \u2014 "),qS=n(_9,"A",{href:!0});var yOr=s(qS);KYe=r(yOr,"BlenderbotTokenizer"),yOr.forEach(t),ZYe=r(_9," or "),NS=n(_9,"A",{href:!0});var LOr=s(NS);eKe=r(LOr,"BlenderbotTokenizerFast"),LOr.forEach(t),oKe=r(_9," (Blenderbot model)"),_9.forEach(t),rKe=i(S),Eg=n(S,"LI",{});var R3e=s(Eg);Lre=n(R3e,"STRONG",{});var xOr=s(Lre);tKe=r(xOr,"blenderbot-small"),xOr.forEach(t),aKe=r(R3e," \u2014 "),jS=n(R3e,"A",{href:!0});var $Or=s(jS);nKe=r($Or,"BlenderbotSmallTokenizer"),$Or.forEach(t),sKe=r(R3e," (BlenderbotSmall model)"),R3e.forEach(t),lKe=i(S),Cg=n(S,"LI",{});var B3e=s(Cg);xre=n(B3e,"STRONG",{});var kOr=s(xre);iKe=r(kOr,"byt5"),kOr.forEach(t),dKe=r(B3e," \u2014 "),DS=n(B3e,"A",{href:!0});var SOr=s(DS);cKe=r(SOr,"ByT5Tokenizer"),SOr.forEach(t),fKe=r(B3e," (ByT5 model)"),B3e.forEach(t),mKe=i(S),jn=n(S,"LI",{});var b9=s(jn);$re=n(b9,"STRONG",{});var ROr=s($re);gKe=r(ROr,"camembert"),ROr.forEach(t),hKe=r(b9," \u2014 "),GS=n(b9,"A",{href:!0});var BOr=s(GS);pKe=r(BOr,"CamembertTokenizer"),BOr.forEach(t),uKe=r(b9," or "),OS=n(b9,"A",{href:!0});var POr=s(OS);_Ke=r(POr,"CamembertTokenizerFast"),POr.forEach(t),bKe=r(b9," (CamemBERT model)"),b9.forEach(t),vKe=i(S),wg=n(S,"LI",{});var P3e=s(wg);kre=n(P3e,"STRONG",{});var IOr=s(kre);FKe=r(IOr,"canine"),IOr.forEach(t),TKe=r(P3e," \u2014 "),VS=n(P3e,"A",{href:!0});var qOr=s(VS);MKe=r(qOr,"CanineTokenizer"),qOr.forEach(t),EKe=r(P3e," (Canine model)"),P3e.forEach(t),CKe=i(S),Dn=n(S,"LI",{});var v9=s(Dn);Sre=n(v9,"STRONG",{});var NOr=s(Sre);wKe=r(NOr,"clip"),NOr.forEach(t),AKe=r(v9," \u2014 "),XS=n(v9,"A",{href:!0});var jOr=s(XS);yKe=r(jOr,"CLIPTokenizer"),jOr.forEach(t),LKe=r(v9," or "),zS=n(v9,"A",{href:!0});var DOr=s(zS);xKe=r(DOr,"CLIPTokenizerFast"),DOr.forEach(t),$Ke=r(v9," (CLIP model)"),v9.forEach(t),kKe=i(S),Gn=n(S,"LI",{});var F9=s(Gn);Rre=n(F9,"STRONG",{});var GOr=s(Rre);SKe=r(GOr,"convbert"),GOr.forEach(t),RKe=r(F9," \u2014 "),QS=n(F9,"A",{href:!0});var OOr=s(QS);BKe=r(OOr,"ConvBertTokenizer"),OOr.forEach(t),PKe=r(F9," or "),WS=n(F9,"A",{href:!0});var VOr=s(WS);IKe=r(VOr,"ConvBertTokenizerFast"),VOr.forEach(t),qKe=r(F9," (ConvBERT model)"),F9.forEach(t),NKe=i(S),On=n(S,"LI",{});var T9=s(On);Bre=n(T9,"STRONG",{});var XOr=s(Bre);jKe=r(XOr,"cpm"),XOr.forEach(t),DKe=r(T9," \u2014 "),HS=n(T9,"A",{href:!0});var zOr=s(HS);GKe=r(zOr,"CpmTokenizer"),zOr.forEach(t),OKe=r(T9," or "),US=n(T9,"A",{href:!0});var QOr=s(US);VKe=r(QOr,"CpmTokenizerFast"),QOr.forEach(t),XKe=r(T9," (CPM model)"),T9.forEach(t),zKe=i(S),Ag=n(S,"LI",{});var I3e=s(Ag);Pre=n(I3e,"STRONG",{});var WOr=s(Pre);QKe=r(WOr,"ctrl"),WOr.forEach(t),WKe=r(I3e," \u2014 "),JS=n(I3e,"A",{href:!0});var HOr=s(JS);HKe=r(HOr,"CTRLTokenizer"),HOr.forEach(t),UKe=r(I3e," (CTRL model)"),I3e.forEach(t),JKe=i(S),Vn=n(S,"LI",{});var M9=s(Vn);Ire=n(M9,"STRONG",{});var UOr=s(Ire);YKe=r(UOr,"data2vec-text"),UOr.forEach(t),KKe=r(M9," \u2014 "),YS=n(M9,"A",{href:!0});var JOr=s(YS);ZKe=r(JOr,"RobertaTokenizer"),JOr.forEach(t),eZe=r(M9," or "),KS=n(M9,"A",{href:!0});var YOr=s(KS);oZe=r(YOr,"RobertaTokenizerFast"),YOr.forEach(t),rZe=r(M9," (Data2VecText model)"),M9.forEach(t),tZe=i(S),Xn=n(S,"LI",{});var E9=s(Xn);qre=n(E9,"STRONG",{});var KOr=s(qre);aZe=r(KOr,"deberta"),KOr.forEach(t),nZe=r(E9," \u2014 "),ZS=n(E9,"A",{href:!0});var ZOr=s(ZS);sZe=r(ZOr,"DebertaTokenizer"),ZOr.forEach(t),lZe=r(E9," or "),eR=n(E9,"A",{href:!0});var eVr=s(eR);iZe=r(eVr,"DebertaTokenizerFast"),eVr.forEach(t),dZe=r(E9," (DeBERTa model)"),E9.forEach(t),cZe=i(S),zn=n(S,"LI",{});var C9=s(zn);Nre=n(C9,"STRONG",{});var oVr=s(Nre);fZe=r(oVr,"deberta-v2"),oVr.forEach(t),mZe=r(C9," \u2014 "),oR=n(C9,"A",{href:!0});var rVr=s(oR);gZe=r(rVr,"DebertaV2Tokenizer"),rVr.forEach(t),hZe=r(C9," or "),rR=n(C9,"A",{href:!0});var tVr=s(rR);pZe=r(tVr,"DebertaV2TokenizerFast"),tVr.forEach(t),uZe=r(C9," (DeBERTa-v2 model)"),C9.forEach(t),_Ze=i(S),Qn=n(S,"LI",{});var w9=s(Qn);jre=n(w9,"STRONG",{});var aVr=s(jre);bZe=r(aVr,"distilbert"),aVr.forEach(t),vZe=r(w9," \u2014 "),tR=n(w9,"A",{href:!0});var nVr=s(tR);FZe=r(nVr,"DistilBertTokenizer"),nVr.forEach(t),TZe=r(w9," or "),aR=n(w9,"A",{href:!0});var sVr=s(aR);MZe=r(sVr,"DistilBertTokenizerFast"),sVr.forEach(t),EZe=r(w9," (DistilBERT model)"),w9.forEach(t),CZe=i(S),Wn=n(S,"LI",{});var A9=s(Wn);Dre=n(A9,"STRONG",{});var lVr=s(Dre);wZe=r(lVr,"dpr"),lVr.forEach(t),AZe=r(A9," \u2014 "),nR=n(A9,"A",{href:!0});var iVr=s(nR);yZe=r(iVr,"DPRQuestionEncoderTokenizer"),iVr.forEach(t),LZe=r(A9," or "),sR=n(A9,"A",{href:!0});var dVr=s(sR);xZe=r(dVr,"DPRQuestionEncoderTokenizerFast"),dVr.forEach(t),$Ze=r(A9," (DPR model)"),A9.forEach(t),kZe=i(S),Hn=n(S,"LI",{});var y9=s(Hn);Gre=n(y9,"STRONG",{});var cVr=s(Gre);SZe=r(cVr,"electra"),cVr.forEach(t),RZe=r(y9," \u2014 "),lR=n(y9,"A",{href:!0});var fVr=s(lR);BZe=r(fVr,"ElectraTokenizer"),fVr.forEach(t),PZe=r(y9," or "),iR=n(y9,"A",{href:!0});var mVr=s(iR);IZe=r(mVr,"ElectraTokenizerFast"),mVr.forEach(t),qZe=r(y9," (ELECTRA model)"),y9.forEach(t),NZe=i(S),yg=n(S,"LI",{});var q3e=s(yg);Ore=n(q3e,"STRONG",{});var gVr=s(Ore);jZe=r(gVr,"flaubert"),gVr.forEach(t),DZe=r(q3e," \u2014 "),dR=n(q3e,"A",{href:!0});var hVr=s(dR);GZe=r(hVr,"FlaubertTokenizer"),hVr.forEach(t),OZe=r(q3e," (FlauBERT model)"),q3e.forEach(t),VZe=i(S),Un=n(S,"LI",{});var L9=s(Un);Vre=n(L9,"STRONG",{});var pVr=s(Vre);XZe=r(pVr,"fnet"),pVr.forEach(t),zZe=r(L9," \u2014 "),cR=n(L9,"A",{href:!0});var uVr=s(cR);QZe=r(uVr,"FNetTokenizer"),uVr.forEach(t),WZe=r(L9," or "),fR=n(L9,"A",{href:!0});var _Vr=s(fR);HZe=r(_Vr,"FNetTokenizerFast"),_Vr.forEach(t),UZe=r(L9," (FNet model)"),L9.forEach(t),JZe=i(S),Lg=n(S,"LI",{});var N3e=s(Lg);Xre=n(N3e,"STRONG",{});var bVr=s(Xre);YZe=r(bVr,"fsmt"),bVr.forEach(t),KZe=r(N3e," \u2014 "),mR=n(N3e,"A",{href:!0});var vVr=s(mR);ZZe=r(vVr,"FSMTTokenizer"),vVr.forEach(t),eeo=r(N3e," (FairSeq Machine-Translation model)"),N3e.forEach(t),oeo=i(S),Jn=n(S,"LI",{});var x9=s(Jn);zre=n(x9,"STRONG",{});var FVr=s(zre);reo=r(FVr,"funnel"),FVr.forEach(t),teo=r(x9," \u2014 "),gR=n(x9,"A",{href:!0});var TVr=s(gR);aeo=r(TVr,"FunnelTokenizer"),TVr.forEach(t),neo=r(x9," or "),hR=n(x9,"A",{href:!0});var MVr=s(hR);seo=r(MVr,"FunnelTokenizerFast"),MVr.forEach(t),leo=r(x9," (Funnel Transformer model)"),x9.forEach(t),ieo=i(S),Yn=n(S,"LI",{});var $9=s(Yn);Qre=n($9,"STRONG",{});var EVr=s(Qre);deo=r(EVr,"gpt2"),EVr.forEach(t),ceo=r($9," \u2014 "),pR=n($9,"A",{href:!0});var CVr=s(pR);feo=r(CVr,"GPT2Tokenizer"),CVr.forEach(t),meo=r($9," or "),uR=n($9,"A",{href:!0});var wVr=s(uR);geo=r(wVr,"GPT2TokenizerFast"),wVr.forEach(t),heo=r($9," (OpenAI GPT-2 model)"),$9.forEach(t),peo=i(S),Kn=n(S,"LI",{});var k9=s(Kn);Wre=n(k9,"STRONG",{});var AVr=s(Wre);ueo=r(AVr,"gpt_neo"),AVr.forEach(t),_eo=r(k9," \u2014 "),_R=n(k9,"A",{href:!0});var yVr=s(_R);beo=r(yVr,"GPT2Tokenizer"),yVr.forEach(t),veo=r(k9," or "),bR=n(k9,"A",{href:!0});var LVr=s(bR);Feo=r(LVr,"GPT2TokenizerFast"),LVr.forEach(t),Teo=r(k9," (GPT Neo model)"),k9.forEach(t),Meo=i(S),Zn=n(S,"LI",{});var S9=s(Zn);Hre=n(S9,"STRONG",{});var xVr=s(Hre);Eeo=r(xVr,"gptj"),xVr.forEach(t),Ceo=r(S9," \u2014 "),vR=n(S9,"A",{href:!0});var $Vr=s(vR);weo=r($Vr,"GPT2Tokenizer"),$Vr.forEach(t),Aeo=r(S9," or "),FR=n(S9,"A",{href:!0});var kVr=s(FR);yeo=r(kVr,"GPT2TokenizerFast"),kVr.forEach(t),Leo=r(S9," (GPT-J model)"),S9.forEach(t),xeo=i(S),es=n(S,"LI",{});var R9=s(es);Ure=n(R9,"STRONG",{});var SVr=s(Ure);$eo=r(SVr,"herbert"),SVr.forEach(t),keo=r(R9," \u2014 "),TR=n(R9,"A",{href:!0});var RVr=s(TR);Seo=r(RVr,"HerbertTokenizer"),RVr.forEach(t),Reo=r(R9," or "),MR=n(R9,"A",{href:!0});var BVr=s(MR);Beo=r(BVr,"HerbertTokenizerFast"),BVr.forEach(t),Peo=r(R9," (HerBERT model)"),R9.forEach(t),Ieo=i(S),xg=n(S,"LI",{});var j3e=s(xg);Jre=n(j3e,"STRONG",{});var PVr=s(Jre);qeo=r(PVr,"hubert"),PVr.forEach(t),Neo=r(j3e," \u2014 "),ER=n(j3e,"A",{href:!0});var IVr=s(ER);jeo=r(IVr,"Wav2Vec2CTCTokenizer"),IVr.forEach(t),Deo=r(j3e," (Hubert model)"),j3e.forEach(t),Geo=i(S),os=n(S,"LI",{});var B9=s(os);Yre=n(B9,"STRONG",{});var qVr=s(Yre);Oeo=r(qVr,"ibert"),qVr.forEach(t),Veo=r(B9," \u2014 "),CR=n(B9,"A",{href:!0});var NVr=s(CR);Xeo=r(NVr,"RobertaTokenizer"),NVr.forEach(t),zeo=r(B9," or "),wR=n(B9,"A",{href:!0});var jVr=s(wR);Qeo=r(jVr,"RobertaTokenizerFast"),jVr.forEach(t),Weo=r(B9," (I-BERT model)"),B9.forEach(t),Heo=i(S),rs=n(S,"LI",{});var P9=s(rs);Kre=n(P9,"STRONG",{});var DVr=s(Kre);Ueo=r(DVr,"layoutlm"),DVr.forEach(t),Jeo=r(P9," \u2014 "),AR=n(P9,"A",{href:!0});var GVr=s(AR);Yeo=r(GVr,"LayoutLMTokenizer"),GVr.forEach(t),Keo=r(P9," or "),yR=n(P9,"A",{href:!0});var OVr=s(yR);Zeo=r(OVr,"LayoutLMTokenizerFast"),OVr.forEach(t),eoo=r(P9," (LayoutLM model)"),P9.forEach(t),ooo=i(S),ts=n(S,"LI",{});var I9=s(ts);Zre=n(I9,"STRONG",{});var VVr=s(Zre);roo=r(VVr,"layoutlmv2"),VVr.forEach(t),too=r(I9," \u2014 "),LR=n(I9,"A",{href:!0});var XVr=s(LR);aoo=r(XVr,"LayoutLMv2Tokenizer"),XVr.forEach(t),noo=r(I9," or "),xR=n(I9,"A",{href:!0});var zVr=s(xR);soo=r(zVr,"LayoutLMv2TokenizerFast"),zVr.forEach(t),loo=r(I9," (LayoutLMv2 model)"),I9.forEach(t),ioo=i(S),as=n(S,"LI",{});var q9=s(as);ete=n(q9,"STRONG",{});var QVr=s(ete);doo=r(QVr,"layoutxlm"),QVr.forEach(t),coo=r(q9," \u2014 "),$R=n(q9,"A",{href:!0});var WVr=s($R);foo=r(WVr,"LayoutXLMTokenizer"),WVr.forEach(t),moo=r(q9," or "),kR=n(q9,"A",{href:!0});var HVr=s(kR);goo=r(HVr,"LayoutXLMTokenizerFast"),HVr.forEach(t),hoo=r(q9," (LayoutXLM model)"),q9.forEach(t),poo=i(S),ns=n(S,"LI",{});var N9=s(ns);ote=n(N9,"STRONG",{});var UVr=s(ote);uoo=r(UVr,"led"),UVr.forEach(t),_oo=r(N9," \u2014 "),SR=n(N9,"A",{href:!0});var JVr=s(SR);boo=r(JVr,"LEDTokenizer"),JVr.forEach(t),voo=r(N9," or "),RR=n(N9,"A",{href:!0});var YVr=s(RR);Foo=r(YVr,"LEDTokenizerFast"),YVr.forEach(t),Too=r(N9," (LED model)"),N9.forEach(t),Moo=i(S),ss=n(S,"LI",{});var j9=s(ss);rte=n(j9,"STRONG",{});var KVr=s(rte);Eoo=r(KVr,"longformer"),KVr.forEach(t),Coo=r(j9," \u2014 "),BR=n(j9,"A",{href:!0});var ZVr=s(BR);woo=r(ZVr,"LongformerTokenizer"),ZVr.forEach(t),Aoo=r(j9," or "),PR=n(j9,"A",{href:!0});var eXr=s(PR);yoo=r(eXr,"LongformerTokenizerFast"),eXr.forEach(t),Loo=r(j9," (Longformer model)"),j9.forEach(t),xoo=i(S),$g=n(S,"LI",{});var D3e=s($g);tte=n(D3e,"STRONG",{});var oXr=s(tte);$oo=r(oXr,"luke"),oXr.forEach(t),koo=r(D3e," \u2014 "),IR=n(D3e,"A",{href:!0});var rXr=s(IR);Soo=r(rXr,"LukeTokenizer"),rXr.forEach(t),Roo=r(D3e," (LUKE model)"),D3e.forEach(t),Boo=i(S),ls=n(S,"LI",{});var D9=s(ls);ate=n(D9,"STRONG",{});var tXr=s(ate);Poo=r(tXr,"lxmert"),tXr.forEach(t),Ioo=r(D9," \u2014 "),qR=n(D9,"A",{href:!0});var aXr=s(qR);qoo=r(aXr,"LxmertTokenizer"),aXr.forEach(t),Noo=r(D9," or "),NR=n(D9,"A",{href:!0});var nXr=s(NR);joo=r(nXr,"LxmertTokenizerFast"),nXr.forEach(t),Doo=r(D9," (LXMERT model)"),D9.forEach(t),Goo=i(S),kg=n(S,"LI",{});var G3e=s(kg);nte=n(G3e,"STRONG",{});var sXr=s(nte);Ooo=r(sXr,"m2m_100"),sXr.forEach(t),Voo=r(G3e," \u2014 "),jR=n(G3e,"A",{href:!0});var lXr=s(jR);Xoo=r(lXr,"M2M100Tokenizer"),lXr.forEach(t),zoo=r(G3e," (M2M100 model)"),G3e.forEach(t),Qoo=i(S),Sg=n(S,"LI",{});var O3e=s(Sg);ste=n(O3e,"STRONG",{});var iXr=s(ste);Woo=r(iXr,"marian"),iXr.forEach(t),Hoo=r(O3e," \u2014 "),DR=n(O3e,"A",{href:!0});var dXr=s(DR);Uoo=r(dXr,"MarianTokenizer"),dXr.forEach(t),Joo=r(O3e," (Marian model)"),O3e.forEach(t),Yoo=i(S),is=n(S,"LI",{});var G9=s(is);lte=n(G9,"STRONG",{});var cXr=s(lte);Koo=r(cXr,"mbart"),cXr.forEach(t),Zoo=r(G9," \u2014 "),GR=n(G9,"A",{href:!0});var fXr=s(GR);ero=r(fXr,"MBartTokenizer"),fXr.forEach(t),oro=r(G9," or "),OR=n(G9,"A",{href:!0});var mXr=s(OR);rro=r(mXr,"MBartTokenizerFast"),mXr.forEach(t),tro=r(G9," (mBART model)"),G9.forEach(t),aro=i(S),ds=n(S,"LI",{});var O9=s(ds);ite=n(O9,"STRONG",{});var gXr=s(ite);nro=r(gXr,"mbart50"),gXr.forEach(t),sro=r(O9," \u2014 "),VR=n(O9,"A",{href:!0});var hXr=s(VR);lro=r(hXr,"MBart50Tokenizer"),hXr.forEach(t),iro=r(O9," or "),XR=n(O9,"A",{href:!0});var pXr=s(XR);dro=r(pXr,"MBart50TokenizerFast"),pXr.forEach(t),cro=r(O9," (mBART-50 model)"),O9.forEach(t),fro=i(S),cs=n(S,"LI",{});var V9=s(cs);dte=n(V9,"STRONG",{});var uXr=s(dte);mro=r(uXr,"megatron-bert"),uXr.forEach(t),gro=r(V9," \u2014 "),zR=n(V9,"A",{href:!0});var _Xr=s(zR);hro=r(_Xr,"BertTokenizer"),_Xr.forEach(t),pro=r(V9," or "),QR=n(V9,"A",{href:!0});var bXr=s(QR);uro=r(bXr,"BertTokenizerFast"),bXr.forEach(t),_ro=r(V9," (MegatronBert model)"),V9.forEach(t),bro=i(S),Rg=n(S,"LI",{});var V3e=s(Rg);cte=n(V3e,"STRONG",{});var vXr=s(cte);vro=r(vXr,"mluke"),vXr.forEach(t),Fro=r(V3e," \u2014 "),WR=n(V3e,"A",{href:!0});var FXr=s(WR);Tro=r(FXr,"MLukeTokenizer"),FXr.forEach(t),Mro=r(V3e," (mLUKE model)"),V3e.forEach(t),Ero=i(S),fs=n(S,"LI",{});var X9=s(fs);fte=n(X9,"STRONG",{});var TXr=s(fte);Cro=r(TXr,"mobilebert"),TXr.forEach(t),wro=r(X9," \u2014 "),HR=n(X9,"A",{href:!0});var MXr=s(HR);Aro=r(MXr,"MobileBertTokenizer"),MXr.forEach(t),yro=r(X9," or "),UR=n(X9,"A",{href:!0});var EXr=s(UR);Lro=r(EXr,"MobileBertTokenizerFast"),EXr.forEach(t),xro=r(X9," (MobileBERT model)"),X9.forEach(t),$ro=i(S),ms=n(S,"LI",{});var z9=s(ms);mte=n(z9,"STRONG",{});var CXr=s(mte);kro=r(CXr,"mpnet"),CXr.forEach(t),Sro=r(z9," \u2014 "),JR=n(z9,"A",{href:!0});var wXr=s(JR);Rro=r(wXr,"MPNetTokenizer"),wXr.forEach(t),Bro=r(z9," or "),YR=n(z9,"A",{href:!0});var AXr=s(YR);Pro=r(AXr,"MPNetTokenizerFast"),AXr.forEach(t),Iro=r(z9," (MPNet model)"),z9.forEach(t),qro=i(S),gs=n(S,"LI",{});var Q9=s(gs);gte=n(Q9,"STRONG",{});var yXr=s(gte);Nro=r(yXr,"mt5"),yXr.forEach(t),jro=r(Q9," \u2014 "),KR=n(Q9,"A",{href:!0});var LXr=s(KR);Dro=r(LXr,"MT5Tokenizer"),LXr.forEach(t),Gro=r(Q9," or "),ZR=n(Q9,"A",{href:!0});var xXr=s(ZR);Oro=r(xXr,"MT5TokenizerFast"),xXr.forEach(t),Vro=r(Q9," (mT5 model)"),Q9.forEach(t),Xro=i(S),hs=n(S,"LI",{});var W9=s(hs);hte=n(W9,"STRONG",{});var $Xr=s(hte);zro=r($Xr,"nystromformer"),$Xr.forEach(t),Qro=r(W9," \u2014 "),eB=n(W9,"A",{href:!0});var kXr=s(eB);Wro=r(kXr,"AlbertTokenizer"),kXr.forEach(t),Hro=r(W9," or "),oB=n(W9,"A",{href:!0});var SXr=s(oB);Uro=r(SXr,"AlbertTokenizerFast"),SXr.forEach(t),Jro=r(W9," (Nystromformer model)"),W9.forEach(t),Yro=i(S),ps=n(S,"LI",{});var H9=s(ps);pte=n(H9,"STRONG",{});var RXr=s(pte);Kro=r(RXr,"openai-gpt"),RXr.forEach(t),Zro=r(H9," \u2014 "),rB=n(H9,"A",{href:!0});var BXr=s(rB);eto=r(BXr,"OpenAIGPTTokenizer"),BXr.forEach(t),oto=r(H9," or "),tB=n(H9,"A",{href:!0});var PXr=s(tB);rto=r(PXr,"OpenAIGPTTokenizerFast"),PXr.forEach(t),tto=r(H9," (OpenAI GPT model)"),H9.forEach(t),ato=i(S),Bg=n(S,"LI",{});var X3e=s(Bg);ute=n(X3e,"STRONG",{});var IXr=s(ute);nto=r(IXr,"opt"),IXr.forEach(t),sto=r(X3e," \u2014 "),aB=n(X3e,"A",{href:!0});var qXr=s(aB);lto=r(qXr,"GPT2Tokenizer"),qXr.forEach(t),ito=r(X3e," (OPT model)"),X3e.forEach(t),dto=i(S),us=n(S,"LI",{});var U9=s(us);_te=n(U9,"STRONG",{});var NXr=s(_te);cto=r(NXr,"pegasus"),NXr.forEach(t),fto=r(U9," \u2014 "),nB=n(U9,"A",{href:!0});var jXr=s(nB);mto=r(jXr,"PegasusTokenizer"),jXr.forEach(t),gto=r(U9," or "),sB=n(U9,"A",{href:!0});var DXr=s(sB);hto=r(DXr,"PegasusTokenizerFast"),DXr.forEach(t),pto=r(U9," (Pegasus model)"),U9.forEach(t),uto=i(S),Pg=n(S,"LI",{});var z3e=s(Pg);bte=n(z3e,"STRONG",{});var GXr=s(bte);_to=r(GXr,"perceiver"),GXr.forEach(t),bto=r(z3e," \u2014 "),lB=n(z3e,"A",{href:!0});var OXr=s(lB);vto=r(OXr,"PerceiverTokenizer"),OXr.forEach(t),Fto=r(z3e," (Perceiver model)"),z3e.forEach(t),Tto=i(S),Ig=n(S,"LI",{});var Q3e=s(Ig);vte=n(Q3e,"STRONG",{});var VXr=s(vte);Mto=r(VXr,"phobert"),VXr.forEach(t),Eto=r(Q3e," \u2014 "),iB=n(Q3e,"A",{href:!0});var XXr=s(iB);Cto=r(XXr,"PhobertTokenizer"),XXr.forEach(t),wto=r(Q3e," (PhoBERT model)"),Q3e.forEach(t),Ato=i(S),qg=n(S,"LI",{});var W3e=s(qg);Fte=n(W3e,"STRONG",{});var zXr=s(Fte);yto=r(zXr,"plbart"),zXr.forEach(t),Lto=r(W3e," \u2014 "),dB=n(W3e,"A",{href:!0});var QXr=s(dB);xto=r(QXr,"PLBartTokenizer"),QXr.forEach(t),$to=r(W3e," (PLBart model)"),W3e.forEach(t),kto=i(S),Ng=n(S,"LI",{});var H3e=s(Ng);Tte=n(H3e,"STRONG",{});var WXr=s(Tte);Sto=r(WXr,"prophetnet"),WXr.forEach(t),Rto=r(H3e," \u2014 "),cB=n(H3e,"A",{href:!0});var HXr=s(cB);Bto=r(HXr,"ProphetNetTokenizer"),HXr.forEach(t),Pto=r(H3e," (ProphetNet model)"),H3e.forEach(t),Ito=i(S),_s=n(S,"LI",{});var J9=s(_s);Mte=n(J9,"STRONG",{});var UXr=s(Mte);qto=r(UXr,"qdqbert"),UXr.forEach(t),Nto=r(J9," \u2014 "),fB=n(J9,"A",{href:!0});var JXr=s(fB);jto=r(JXr,"BertTokenizer"),JXr.forEach(t),Dto=r(J9," or "),mB=n(J9,"A",{href:!0});var YXr=s(mB);Gto=r(YXr,"BertTokenizerFast"),YXr.forEach(t),Oto=r(J9," (QDQBert model)"),J9.forEach(t),Vto=i(S),jg=n(S,"LI",{});var U3e=s(jg);Ete=n(U3e,"STRONG",{});var KXr=s(Ete);Xto=r(KXr,"rag"),KXr.forEach(t),zto=r(U3e," \u2014 "),gB=n(U3e,"A",{href:!0});var ZXr=s(gB);Qto=r(ZXr,"RagTokenizer"),ZXr.forEach(t),Wto=r(U3e," (RAG model)"),U3e.forEach(t),Hto=i(S),bs=n(S,"LI",{});var Y9=s(bs);Cte=n(Y9,"STRONG",{});var ezr=s(Cte);Uto=r(ezr,"realm"),ezr.forEach(t),Jto=r(Y9," \u2014 "),hB=n(Y9,"A",{href:!0});var ozr=s(hB);Yto=r(ozr,"RealmTokenizer"),ozr.forEach(t),Kto=r(Y9," or "),pB=n(Y9,"A",{href:!0});var rzr=s(pB);Zto=r(rzr,"RealmTokenizerFast"),rzr.forEach(t),eao=r(Y9," (Realm model)"),Y9.forEach(t),oao=i(S),vs=n(S,"LI",{});var K9=s(vs);wte=n(K9,"STRONG",{});var tzr=s(wte);rao=r(tzr,"reformer"),tzr.forEach(t),tao=r(K9," \u2014 "),uB=n(K9,"A",{href:!0});var azr=s(uB);aao=r(azr,"ReformerTokenizer"),azr.forEach(t),nao=r(K9," or "),_B=n(K9,"A",{href:!0});var nzr=s(_B);sao=r(nzr,"ReformerTokenizerFast"),nzr.forEach(t),lao=r(K9," (Reformer model)"),K9.forEach(t),iao=i(S),Fs=n(S,"LI",{});var Z9=s(Fs);Ate=n(Z9,"STRONG",{});var szr=s(Ate);dao=r(szr,"rembert"),szr.forEach(t),cao=r(Z9," \u2014 "),bB=n(Z9,"A",{href:!0});var lzr=s(bB);fao=r(lzr,"RemBertTokenizer"),lzr.forEach(t),mao=r(Z9," or "),vB=n(Z9,"A",{href:!0});var izr=s(vB);gao=r(izr,"RemBertTokenizerFast"),izr.forEach(t),hao=r(Z9," (RemBERT model)"),Z9.forEach(t),pao=i(S),Ts=n(S,"LI",{});var e$=s(Ts);yte=n(e$,"STRONG",{});var dzr=s(yte);uao=r(dzr,"retribert"),dzr.forEach(t),_ao=r(e$," \u2014 "),FB=n(e$,"A",{href:!0});var czr=s(FB);bao=r(czr,"RetriBertTokenizer"),czr.forEach(t),vao=r(e$," or "),TB=n(e$,"A",{href:!0});var fzr=s(TB);Fao=r(fzr,"RetriBertTokenizerFast"),fzr.forEach(t),Tao=r(e$," (RetriBERT model)"),e$.forEach(t),Mao=i(S),Ms=n(S,"LI",{});var o$=s(Ms);Lte=n(o$,"STRONG",{});var mzr=s(Lte);Eao=r(mzr,"roberta"),mzr.forEach(t),Cao=r(o$," \u2014 "),MB=n(o$,"A",{href:!0});var gzr=s(MB);wao=r(gzr,"RobertaTokenizer"),gzr.forEach(t),Aao=r(o$," or "),EB=n(o$,"A",{href:!0});var hzr=s(EB);yao=r(hzr,"RobertaTokenizerFast"),hzr.forEach(t),Lao=r(o$," (RoBERTa model)"),o$.forEach(t),xao=i(S),Es=n(S,"LI",{});var r$=s(Es);xte=n(r$,"STRONG",{});var pzr=s(xte);$ao=r(pzr,"roformer"),pzr.forEach(t),kao=r(r$," \u2014 "),CB=n(r$,"A",{href:!0});var uzr=s(CB);Sao=r(uzr,"RoFormerTokenizer"),uzr.forEach(t),Rao=r(r$," or "),wB=n(r$,"A",{href:!0});var _zr=s(wB);Bao=r(_zr,"RoFormerTokenizerFast"),_zr.forEach(t),Pao=r(r$," (RoFormer model)"),r$.forEach(t),Iao=i(S),Dg=n(S,"LI",{});var J3e=s(Dg);$te=n(J3e,"STRONG",{});var bzr=s($te);qao=r(bzr,"speech_to_text"),bzr.forEach(t),Nao=r(J3e," \u2014 "),AB=n(J3e,"A",{href:!0});var vzr=s(AB);jao=r(vzr,"Speech2TextTokenizer"),vzr.forEach(t),Dao=r(J3e," (Speech2Text model)"),J3e.forEach(t),Gao=i(S),Gg=n(S,"LI",{});var Y3e=s(Gg);kte=n(Y3e,"STRONG",{});var Fzr=s(kte);Oao=r(Fzr,"speech_to_text_2"),Fzr.forEach(t),Vao=r(Y3e," \u2014 "),yB=n(Y3e,"A",{href:!0});var Tzr=s(yB);Xao=r(Tzr,"Speech2Text2Tokenizer"),Tzr.forEach(t),zao=r(Y3e," (Speech2Text2 model)"),Y3e.forEach(t),Qao=i(S),Cs=n(S,"LI",{});var t$=s(Cs);Ste=n(t$,"STRONG",{});var Mzr=s(Ste);Wao=r(Mzr,"splinter"),Mzr.forEach(t),Hao=r(t$," \u2014 "),LB=n(t$,"A",{href:!0});var Ezr=s(LB);Uao=r(Ezr,"SplinterTokenizer"),Ezr.forEach(t),Jao=r(t$," or "),xB=n(t$,"A",{href:!0});var Czr=s(xB);Yao=r(Czr,"SplinterTokenizerFast"),Czr.forEach(t),Kao=r(t$," (Splinter model)"),t$.forEach(t),Zao=i(S),ws=n(S,"LI",{});var a$=s(ws);Rte=n(a$,"STRONG",{});var wzr=s(Rte);eno=r(wzr,"squeezebert"),wzr.forEach(t),ono=r(a$," \u2014 "),$B=n(a$,"A",{href:!0});var Azr=s($B);rno=r(Azr,"SqueezeBertTokenizer"),Azr.forEach(t),tno=r(a$," or "),kB=n(a$,"A",{href:!0});var yzr=s(kB);ano=r(yzr,"SqueezeBertTokenizerFast"),yzr.forEach(t),nno=r(a$," (SqueezeBERT model)"),a$.forEach(t),sno=i(S),As=n(S,"LI",{});var n$=s(As);Bte=n(n$,"STRONG",{});var Lzr=s(Bte);lno=r(Lzr,"t5"),Lzr.forEach(t),ino=r(n$," \u2014 "),SB=n(n$,"A",{href:!0});var xzr=s(SB);dno=r(xzr,"T5Tokenizer"),xzr.forEach(t),cno=r(n$," or "),RB=n(n$,"A",{href:!0});var $zr=s(RB);fno=r($zr,"T5TokenizerFast"),$zr.forEach(t),mno=r(n$," (T5 model)"),n$.forEach(t),gno=i(S),Og=n(S,"LI",{});var K3e=s(Og);Pte=n(K3e,"STRONG",{});var kzr=s(Pte);hno=r(kzr,"tapas"),kzr.forEach(t),pno=r(K3e," \u2014 "),BB=n(K3e,"A",{href:!0});var Szr=s(BB);uno=r(Szr,"TapasTokenizer"),Szr.forEach(t),_no=r(K3e," (TAPAS model)"),K3e.forEach(t),bno=i(S),Vg=n(S,"LI",{});var Z3e=s(Vg);Ite=n(Z3e,"STRONG",{});var Rzr=s(Ite);vno=r(Rzr,"tapex"),Rzr.forEach(t),Fno=r(Z3e," \u2014 "),PB=n(Z3e,"A",{href:!0});var Bzr=s(PB);Tno=r(Bzr,"TapexTokenizer"),Bzr.forEach(t),Mno=r(Z3e," (TAPEX model)"),Z3e.forEach(t),Eno=i(S),Xg=n(S,"LI",{});var ewe=s(Xg);qte=n(ewe,"STRONG",{});var Pzr=s(qte);Cno=r(Pzr,"transfo-xl"),Pzr.forEach(t),wno=r(ewe," \u2014 "),IB=n(ewe,"A",{href:!0});var Izr=s(IB);Ano=r(Izr,"TransfoXLTokenizer"),Izr.forEach(t),yno=r(ewe," (Transformer-XL model)"),ewe.forEach(t),Lno=i(S),ys=n(S,"LI",{});var s$=s(ys);Nte=n(s$,"STRONG",{});var qzr=s(Nte);xno=r(qzr,"visual_bert"),qzr.forEach(t),$no=r(s$," \u2014 "),qB=n(s$,"A",{href:!0});var Nzr=s(qB);kno=r(Nzr,"BertTokenizer"),Nzr.forEach(t),Sno=r(s$," or "),NB=n(s$,"A",{href:!0});var jzr=s(NB);Rno=r(jzr,"BertTokenizerFast"),jzr.forEach(t),Bno=r(s$," (VisualBert model)"),s$.forEach(t),Pno=i(S),zg=n(S,"LI",{});var owe=s(zg);jte=n(owe,"STRONG",{});var Dzr=s(jte);Ino=r(Dzr,"wav2vec2"),Dzr.forEach(t),qno=r(owe," \u2014 "),jB=n(owe,"A",{href:!0});var Gzr=s(jB);Nno=r(Gzr,"Wav2Vec2CTCTokenizer"),Gzr.forEach(t),jno=r(owe," (Wav2Vec2 model)"),owe.forEach(t),Dno=i(S),Qg=n(S,"LI",{});var rwe=s(Qg);Dte=n(rwe,"STRONG",{});var Ozr=s(Dte);Gno=r(Ozr,"wav2vec2_phoneme"),Ozr.forEach(t),Ono=r(rwe," \u2014 "),DB=n(rwe,"A",{href:!0});var Vzr=s(DB);Vno=r(Vzr,"Wav2Vec2PhonemeCTCTokenizer"),Vzr.forEach(t),Xno=r(rwe," (Wav2Vec2Phoneme model)"),rwe.forEach(t),zno=i(S),Ls=n(S,"LI",{});var l$=s(Ls);Gte=n(l$,"STRONG",{});var Xzr=s(Gte);Qno=r(Xzr,"xglm"),Xzr.forEach(t),Wno=r(l$," \u2014 "),GB=n(l$,"A",{href:!0});var zzr=s(GB);Hno=r(zzr,"XGLMTokenizer"),zzr.forEach(t),Uno=r(l$," or "),OB=n(l$,"A",{href:!0});var Qzr=s(OB);Jno=r(Qzr,"XGLMTokenizerFast"),Qzr.forEach(t),Yno=r(l$," (XGLM model)"),l$.forEach(t),Kno=i(S),Wg=n(S,"LI",{});var twe=s(Wg);Ote=n(twe,"STRONG",{});var Wzr=s(Ote);Zno=r(Wzr,"xlm"),Wzr.forEach(t),eso=r(twe," \u2014 "),VB=n(twe,"A",{href:!0});var Hzr=s(VB);oso=r(Hzr,"XLMTokenizer"),Hzr.forEach(t),rso=r(twe," (XLM model)"),twe.forEach(t),tso=i(S),Hg=n(S,"LI",{});var awe=s(Hg);Vte=n(awe,"STRONG",{});var Uzr=s(Vte);aso=r(Uzr,"xlm-prophetnet"),Uzr.forEach(t),nso=r(awe," \u2014 "),XB=n(awe,"A",{href:!0});var Jzr=s(XB);sso=r(Jzr,"XLMProphetNetTokenizer"),Jzr.forEach(t),lso=r(awe," (XLMProphetNet model)"),awe.forEach(t),iso=i(S),xs=n(S,"LI",{});var i$=s(xs);Xte=n(i$,"STRONG",{});var Yzr=s(Xte);dso=r(Yzr,"xlm-roberta"),Yzr.forEach(t),cso=r(i$," \u2014 "),zB=n(i$,"A",{href:!0});var Kzr=s(zB);fso=r(Kzr,"XLMRobertaTokenizer"),Kzr.forEach(t),mso=r(i$," or "),QB=n(i$,"A",{href:!0});var Zzr=s(QB);gso=r(Zzr,"XLMRobertaTokenizerFast"),Zzr.forEach(t),hso=r(i$," (XLM-RoBERTa model)"),i$.forEach(t),pso=i(S),$s=n(S,"LI",{});var d$=s($s);zte=n(d$,"STRONG",{});var eQr=s(zte);uso=r(eQr,"xlm-roberta-xl"),eQr.forEach(t),_so=r(d$," \u2014 "),WB=n(d$,"A",{href:!0});var oQr=s(WB);bso=r(oQr,"RobertaTokenizer"),oQr.forEach(t),vso=r(d$," or "),HB=n(d$,"A",{href:!0});var rQr=s(HB);Fso=r(rQr,"RobertaTokenizerFast"),rQr.forEach(t),Tso=r(d$," (XLM-RoBERTa-XL model)"),d$.forEach(t),Mso=i(S),ks=n(S,"LI",{});var c$=s(ks);Qte=n(c$,"STRONG",{});var tQr=s(Qte);Eso=r(tQr,"xlnet"),tQr.forEach(t),Cso=r(c$," \u2014 "),UB=n(c$,"A",{href:!0});var aQr=s(UB);wso=r(aQr,"XLNetTokenizer"),aQr.forEach(t),Aso=r(c$," or "),JB=n(c$,"A",{href:!0});var nQr=s(JB);yso=r(nQr,"XLNetTokenizerFast"),nQr.forEach(t),Lso=r(c$," (XLNet model)"),c$.forEach(t),xso=i(S),Ss=n(S,"LI",{});var f$=s(Ss);Wte=n(f$,"STRONG",{});var sQr=s(Wte);$so=r(sQr,"yoso"),sQr.forEach(t),kso=r(f$," \u2014 "),YB=n(f$,"A",{href:!0});var lQr=s(YB);Sso=r(lQr,"AlbertTokenizer"),lQr.forEach(t),Rso=r(f$," or "),KB=n(f$,"A",{href:!0});var iQr=s(KB);Bso=r(iQr,"AlbertTokenizerFast"),iQr.forEach(t),Pso=r(f$," (YOSO model)"),f$.forEach(t),S.forEach(t),Iso=i(qs),T(Ug.$$.fragment,qs),qs.forEach(t),qso=i(Is),Jg=n(Is,"DIV",{class:!0});var Kqe=s(Jg);T(c0.$$.fragment,Kqe),Nso=i(Kqe),Hte=n(Kqe,"P",{});var dQr=s(Hte);jso=r(dQr,"Register a new tokenizer in this mapping."),dQr.forEach(t),Kqe.forEach(t),Is.forEach(t),ZPe=i(f),vi=n(f,"H2",{class:!0});var Zqe=s(vi);Yg=n(Zqe,"A",{id:!0,class:!0,href:!0});var cQr=s(Yg);Ute=n(cQr,"SPAN",{});var fQr=s(Ute);T(f0.$$.fragment,fQr),fQr.forEach(t),cQr.forEach(t),Dso=i(Zqe),Jte=n(Zqe,"SPAN",{});var mQr=s(Jte);Gso=r(mQr,"AutoFeatureExtractor"),mQr.forEach(t),Zqe.forEach(t),eIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(m0.$$.fragment,Ns),Oso=i(Ns),g0=n(Ns,"P",{});var eNe=s(g0);Vso=r(eNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZB=n(eNe,"A",{href:!0});var gQr=s(ZB);Xso=r(gQr,"AutoFeatureExtractor.from_pretrained()"),gQr.forEach(t),zso=r(eNe," class method."),eNe.forEach(t),Qso=i(Ns),h0=n(Ns,"P",{});var oNe=s(h0);Wso=r(oNe,"This class cannot be instantiated directly using "),Yte=n(oNe,"CODE",{});var hQr=s(Yte);Hso=r(hQr,"__init__()"),hQr.forEach(t),Uso=r(oNe," (throws an error)."),oNe.forEach(t),Jso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(p0.$$.fragment,Yt),Yso=i(Yt),Kte=n(Yt,"P",{});var pQr=s(Kte);Kso=r(pQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pQr.forEach(t),Zso=i(Yt),wa=n(Yt,"P",{});var Zw=s(wa);elo=r(Zw,"The feature extractor class to instantiate is selected based on the "),Zte=n(Zw,"CODE",{});var uQr=s(Zte);olo=r(uQr,"model_type"),uQr.forEach(t),rlo=r(Zw,` property of the config object
(either passed as an argument or loaded from `),eae=n(Zw,"CODE",{});var _Qr=s(eae);tlo=r(_Qr,"pretrained_model_name_or_path"),_Qr.forEach(t),alo=r(Zw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oae=n(Zw,"CODE",{});var bQr=s(oae);nlo=r(bQr,"pretrained_model_name_or_path"),bQr.forEach(t),slo=r(Zw,":"),Zw.forEach(t),llo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Kg=n(ae,"LI",{});var nwe=s(Kg);rae=n(nwe,"STRONG",{});var vQr=s(rae);ilo=r(vQr,"beit"),vQr.forEach(t),dlo=r(nwe," \u2014 "),eP=n(nwe,"A",{href:!0});var FQr=s(eP);clo=r(FQr,"BeitFeatureExtractor"),FQr.forEach(t),flo=r(nwe," (BEiT model)"),nwe.forEach(t),mlo=i(ae),Zg=n(ae,"LI",{});var swe=s(Zg);tae=n(swe,"STRONG",{});var TQr=s(tae);glo=r(TQr,"clip"),TQr.forEach(t),hlo=r(swe," \u2014 "),oP=n(swe,"A",{href:!0});var MQr=s(oP);plo=r(MQr,"CLIPFeatureExtractor"),MQr.forEach(t),ulo=r(swe," (CLIP model)"),swe.forEach(t),_lo=i(ae),eh=n(ae,"LI",{});var lwe=s(eh);aae=n(lwe,"STRONG",{});var EQr=s(aae);blo=r(EQr,"convnext"),EQr.forEach(t),vlo=r(lwe," \u2014 "),rP=n(lwe,"A",{href:!0});var CQr=s(rP);Flo=r(CQr,"ConvNextFeatureExtractor"),CQr.forEach(t),Tlo=r(lwe," (ConvNext model)"),lwe.forEach(t),Mlo=i(ae),oh=n(ae,"LI",{});var iwe=s(oh);nae=n(iwe,"STRONG",{});var wQr=s(nae);Elo=r(wQr,"data2vec-audio"),wQr.forEach(t),Clo=r(iwe," \u2014 "),tP=n(iwe,"A",{href:!0});var AQr=s(tP);wlo=r(AQr,"Wav2Vec2FeatureExtractor"),AQr.forEach(t),Alo=r(iwe," (Data2VecAudio model)"),iwe.forEach(t),ylo=i(ae),rh=n(ae,"LI",{});var dwe=s(rh);sae=n(dwe,"STRONG",{});var yQr=s(sae);Llo=r(yQr,"data2vec-vision"),yQr.forEach(t),xlo=r(dwe," \u2014 "),aP=n(dwe,"A",{href:!0});var LQr=s(aP);$lo=r(LQr,"BeitFeatureExtractor"),LQr.forEach(t),klo=r(dwe," (Data2VecVision model)"),dwe.forEach(t),Slo=i(ae),th=n(ae,"LI",{});var cwe=s(th);lae=n(cwe,"STRONG",{});var xQr=s(lae);Rlo=r(xQr,"deit"),xQr.forEach(t),Blo=r(cwe," \u2014 "),nP=n(cwe,"A",{href:!0});var $Qr=s(nP);Plo=r($Qr,"DeiTFeatureExtractor"),$Qr.forEach(t),Ilo=r(cwe," (DeiT model)"),cwe.forEach(t),qlo=i(ae),ah=n(ae,"LI",{});var fwe=s(ah);iae=n(fwe,"STRONG",{});var kQr=s(iae);Nlo=r(kQr,"detr"),kQr.forEach(t),jlo=r(fwe," \u2014 "),sP=n(fwe,"A",{href:!0});var SQr=s(sP);Dlo=r(SQr,"DetrFeatureExtractor"),SQr.forEach(t),Glo=r(fwe," (DETR model)"),fwe.forEach(t),Olo=i(ae),nh=n(ae,"LI",{});var mwe=s(nh);dae=n(mwe,"STRONG",{});var RQr=s(dae);Vlo=r(RQr,"dpt"),RQr.forEach(t),Xlo=r(mwe," \u2014 "),lP=n(mwe,"A",{href:!0});var BQr=s(lP);zlo=r(BQr,"DPTFeatureExtractor"),BQr.forEach(t),Qlo=r(mwe," (DPT model)"),mwe.forEach(t),Wlo=i(ae),sh=n(ae,"LI",{});var gwe=s(sh);cae=n(gwe,"STRONG",{});var PQr=s(cae);Hlo=r(PQr,"flava"),PQr.forEach(t),Ulo=r(gwe," \u2014 "),iP=n(gwe,"A",{href:!0});var IQr=s(iP);Jlo=r(IQr,"FlavaFeatureExtractor"),IQr.forEach(t),Ylo=r(gwe," (Flava model)"),gwe.forEach(t),Klo=i(ae),lh=n(ae,"LI",{});var hwe=s(lh);fae=n(hwe,"STRONG",{});var qQr=s(fae);Zlo=r(qQr,"glpn"),qQr.forEach(t),eio=r(hwe," \u2014 "),dP=n(hwe,"A",{href:!0});var NQr=s(dP);oio=r(NQr,"GLPNFeatureExtractor"),NQr.forEach(t),rio=r(hwe," (GLPN model)"),hwe.forEach(t),tio=i(ae),ih=n(ae,"LI",{});var pwe=s(ih);mae=n(pwe,"STRONG",{});var jQr=s(mae);aio=r(jQr,"hubert"),jQr.forEach(t),nio=r(pwe," \u2014 "),cP=n(pwe,"A",{href:!0});var DQr=s(cP);sio=r(DQr,"Wav2Vec2FeatureExtractor"),DQr.forEach(t),lio=r(pwe," (Hubert model)"),pwe.forEach(t),iio=i(ae),dh=n(ae,"LI",{});var uwe=s(dh);gae=n(uwe,"STRONG",{});var GQr=s(gae);dio=r(GQr,"layoutlmv2"),GQr.forEach(t),cio=r(uwe," \u2014 "),fP=n(uwe,"A",{href:!0});var OQr=s(fP);fio=r(OQr,"LayoutLMv2FeatureExtractor"),OQr.forEach(t),mio=r(uwe," (LayoutLMv2 model)"),uwe.forEach(t),gio=i(ae),ch=n(ae,"LI",{});var _we=s(ch);hae=n(_we,"STRONG",{});var VQr=s(hae);hio=r(VQr,"maskformer"),VQr.forEach(t),pio=r(_we," \u2014 "),mP=n(_we,"A",{href:!0});var XQr=s(mP);uio=r(XQr,"MaskFormerFeatureExtractor"),XQr.forEach(t),_io=r(_we," (MaskFormer model)"),_we.forEach(t),bio=i(ae),fh=n(ae,"LI",{});var bwe=s(fh);pae=n(bwe,"STRONG",{});var zQr=s(pae);vio=r(zQr,"perceiver"),zQr.forEach(t),Fio=r(bwe," \u2014 "),gP=n(bwe,"A",{href:!0});var QQr=s(gP);Tio=r(QQr,"PerceiverFeatureExtractor"),QQr.forEach(t),Mio=r(bwe," (Perceiver model)"),bwe.forEach(t),Eio=i(ae),mh=n(ae,"LI",{});var vwe=s(mh);uae=n(vwe,"STRONG",{});var WQr=s(uae);Cio=r(WQr,"poolformer"),WQr.forEach(t),wio=r(vwe," \u2014 "),hP=n(vwe,"A",{href:!0});var HQr=s(hP);Aio=r(HQr,"PoolFormerFeatureExtractor"),HQr.forEach(t),yio=r(vwe," (PoolFormer model)"),vwe.forEach(t),Lio=i(ae),gh=n(ae,"LI",{});var Fwe=s(gh);_ae=n(Fwe,"STRONG",{});var UQr=s(_ae);xio=r(UQr,"regnet"),UQr.forEach(t),$io=r(Fwe," \u2014 "),pP=n(Fwe,"A",{href:!0});var JQr=s(pP);kio=r(JQr,"ConvNextFeatureExtractor"),JQr.forEach(t),Sio=r(Fwe," (RegNet model)"),Fwe.forEach(t),Rio=i(ae),hh=n(ae,"LI",{});var Twe=s(hh);bae=n(Twe,"STRONG",{});var YQr=s(bae);Bio=r(YQr,"resnet"),YQr.forEach(t),Pio=r(Twe," \u2014 "),uP=n(Twe,"A",{href:!0});var KQr=s(uP);Iio=r(KQr,"ConvNextFeatureExtractor"),KQr.forEach(t),qio=r(Twe," (ResNet model)"),Twe.forEach(t),Nio=i(ae),ph=n(ae,"LI",{});var Mwe=s(ph);vae=n(Mwe,"STRONG",{});var ZQr=s(vae);jio=r(ZQr,"segformer"),ZQr.forEach(t),Dio=r(Mwe," \u2014 "),_P=n(Mwe,"A",{href:!0});var eWr=s(_P);Gio=r(eWr,"SegformerFeatureExtractor"),eWr.forEach(t),Oio=r(Mwe," (SegFormer model)"),Mwe.forEach(t),Vio=i(ae),uh=n(ae,"LI",{});var Ewe=s(uh);Fae=n(Ewe,"STRONG",{});var oWr=s(Fae);Xio=r(oWr,"speech_to_text"),oWr.forEach(t),zio=r(Ewe," \u2014 "),bP=n(Ewe,"A",{href:!0});var rWr=s(bP);Qio=r(rWr,"Speech2TextFeatureExtractor"),rWr.forEach(t),Wio=r(Ewe," (Speech2Text model)"),Ewe.forEach(t),Hio=i(ae),_h=n(ae,"LI",{});var Cwe=s(_h);Tae=n(Cwe,"STRONG",{});var tWr=s(Tae);Uio=r(tWr,"swin"),tWr.forEach(t),Jio=r(Cwe," \u2014 "),vP=n(Cwe,"A",{href:!0});var aWr=s(vP);Yio=r(aWr,"ViTFeatureExtractor"),aWr.forEach(t),Kio=r(Cwe," (Swin model)"),Cwe.forEach(t),Zio=i(ae),bh=n(ae,"LI",{});var wwe=s(bh);Mae=n(wwe,"STRONG",{});var nWr=s(Mae);edo=r(nWr,"van"),nWr.forEach(t),odo=r(wwe," \u2014 "),FP=n(wwe,"A",{href:!0});var sWr=s(FP);rdo=r(sWr,"ConvNextFeatureExtractor"),sWr.forEach(t),tdo=r(wwe," (VAN model)"),wwe.forEach(t),ado=i(ae),vh=n(ae,"LI",{});var Awe=s(vh);Eae=n(Awe,"STRONG",{});var lWr=s(Eae);ndo=r(lWr,"vit"),lWr.forEach(t),sdo=r(Awe," \u2014 "),TP=n(Awe,"A",{href:!0});var iWr=s(TP);ldo=r(iWr,"ViTFeatureExtractor"),iWr.forEach(t),ido=r(Awe," (ViT model)"),Awe.forEach(t),ddo=i(ae),Fh=n(ae,"LI",{});var ywe=s(Fh);Cae=n(ywe,"STRONG",{});var dWr=s(Cae);cdo=r(dWr,"vit_mae"),dWr.forEach(t),fdo=r(ywe," \u2014 "),MP=n(ywe,"A",{href:!0});var cWr=s(MP);mdo=r(cWr,"ViTFeatureExtractor"),cWr.forEach(t),gdo=r(ywe," (ViTMAE model)"),ywe.forEach(t),hdo=i(ae),Th=n(ae,"LI",{});var Lwe=s(Th);wae=n(Lwe,"STRONG",{});var fWr=s(wae);pdo=r(fWr,"wav2vec2"),fWr.forEach(t),udo=r(Lwe," \u2014 "),EP=n(Lwe,"A",{href:!0});var mWr=s(EP);_do=r(mWr,"Wav2Vec2FeatureExtractor"),mWr.forEach(t),bdo=r(Lwe," (Wav2Vec2 model)"),Lwe.forEach(t),vdo=i(ae),Mh=n(ae,"LI",{});var xwe=s(Mh);Aae=n(xwe,"STRONG",{});var gWr=s(Aae);Fdo=r(gWr,"yolos"),gWr.forEach(t),Tdo=r(xwe," \u2014 "),CP=n(xwe,"A",{href:!0});var hWr=s(CP);Mdo=r(hWr,"YolosFeatureExtractor"),hWr.forEach(t),Edo=r(xwe," (YOLOS model)"),xwe.forEach(t),ae.forEach(t),Cdo=i(Yt),T(Eh.$$.fragment,Yt),wdo=i(Yt),T(Ch.$$.fragment,Yt),Yt.forEach(t),Ado=i(Ns),wh=n(Ns,"DIV",{class:!0});var rNe=s(wh);T(u0.$$.fragment,rNe),ydo=i(rNe),yae=n(rNe,"P",{});var pWr=s(yae);Ldo=r(pWr,"Register a new feature extractor for this class."),pWr.forEach(t),rNe.forEach(t),Ns.forEach(t),oIe=i(f),Fi=n(f,"H2",{class:!0});var tNe=s(Fi);Ah=n(tNe,"A",{id:!0,class:!0,href:!0});var uWr=s(Ah);Lae=n(uWr,"SPAN",{});var _Wr=s(Lae);T(_0.$$.fragment,_Wr),_Wr.forEach(t),uWr.forEach(t),xdo=i(tNe),xae=n(tNe,"SPAN",{});var bWr=s(xae);$do=r(bWr,"AutoProcessor"),bWr.forEach(t),tNe.forEach(t),rIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(b0.$$.fragment,js),kdo=i(js),v0=n(js,"P",{});var aNe=s(v0);Sdo=r(aNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wP=n(aNe,"A",{href:!0});var vWr=s(wP);Rdo=r(vWr,"AutoProcessor.from_pretrained()"),vWr.forEach(t),Bdo=r(aNe," class method."),aNe.forEach(t),Pdo=i(js),F0=n(js,"P",{});var nNe=s(F0);Ido=r(nNe,"This class cannot be instantiated directly using "),$ae=n(nNe,"CODE",{});var FWr=s($ae);qdo=r(FWr,"__init__()"),FWr.forEach(t),Ndo=r(nNe," (throws an error)."),nNe.forEach(t),jdo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(T0.$$.fragment,Kt),Ddo=i(Kt),kae=n(Kt,"P",{});var TWr=s(kae);Gdo=r(TWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),TWr.forEach(t),Odo=i(Kt),Ti=n(Kt,"P",{});var dK=s(Ti);Vdo=r(dK,"The processor class to instantiate is selected based on the "),Sae=n(dK,"CODE",{});var MWr=s(Sae);Xdo=r(MWr,"model_type"),MWr.forEach(t),zdo=r(dK,` property of the config object (either
passed as an argument or loaded from `),Rae=n(dK,"CODE",{});var EWr=s(Rae);Qdo=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),Wdo=r(dK," if possible):"),dK.forEach(t),Hdo=i(Kt),be=n(Kt,"UL",{});var ve=s(be);yh=n(ve,"LI",{});var $we=s(yh);Bae=n($we,"STRONG",{});var CWr=s(Bae);Udo=r(CWr,"clip"),CWr.forEach(t),Jdo=r($we," \u2014 "),AP=n($we,"A",{href:!0});var wWr=s(AP);Ydo=r(wWr,"CLIPProcessor"),wWr.forEach(t),Kdo=r($we," (CLIP model)"),$we.forEach(t),Zdo=i(ve),Lh=n(ve,"LI",{});var kwe=s(Lh);Pae=n(kwe,"STRONG",{});var AWr=s(Pae);eco=r(AWr,"flava"),AWr.forEach(t),oco=r(kwe," \u2014 "),Iae=n(kwe,"CODE",{});var yWr=s(Iae);rco=r(yWr,"FLAVAProcessor"),yWr.forEach(t),tco=r(kwe," (Flava model)"),kwe.forEach(t),aco=i(ve),xh=n(ve,"LI",{});var Swe=s(xh);qae=n(Swe,"STRONG",{});var LWr=s(qae);nco=r(LWr,"layoutlmv2"),LWr.forEach(t),sco=r(Swe," \u2014 "),yP=n(Swe,"A",{href:!0});var xWr=s(yP);lco=r(xWr,"LayoutLMv2Processor"),xWr.forEach(t),ico=r(Swe," (LayoutLMv2 model)"),Swe.forEach(t),dco=i(ve),$h=n(ve,"LI",{});var Rwe=s($h);Nae=n(Rwe,"STRONG",{});var $Wr=s(Nae);cco=r($Wr,"layoutxlm"),$Wr.forEach(t),fco=r(Rwe," \u2014 "),LP=n(Rwe,"A",{href:!0});var kWr=s(LP);mco=r(kWr,"LayoutXLMProcessor"),kWr.forEach(t),gco=r(Rwe," (LayoutXLM model)"),Rwe.forEach(t),hco=i(ve),kh=n(ve,"LI",{});var Bwe=s(kh);jae=n(Bwe,"STRONG",{});var SWr=s(jae);pco=r(SWr,"sew"),SWr.forEach(t),uco=r(Bwe," \u2014 "),xP=n(Bwe,"A",{href:!0});var RWr=s(xP);_co=r(RWr,"Wav2Vec2Processor"),RWr.forEach(t),bco=r(Bwe," (SEW model)"),Bwe.forEach(t),vco=i(ve),Sh=n(ve,"LI",{});var Pwe=s(Sh);Dae=n(Pwe,"STRONG",{});var BWr=s(Dae);Fco=r(BWr,"sew-d"),BWr.forEach(t),Tco=r(Pwe," \u2014 "),$P=n(Pwe,"A",{href:!0});var PWr=s($P);Mco=r(PWr,"Wav2Vec2Processor"),PWr.forEach(t),Eco=r(Pwe," (SEW-D model)"),Pwe.forEach(t),Cco=i(ve),Rh=n(ve,"LI",{});var Iwe=s(Rh);Gae=n(Iwe,"STRONG",{});var IWr=s(Gae);wco=r(IWr,"speech_to_text"),IWr.forEach(t),Aco=r(Iwe," \u2014 "),kP=n(Iwe,"A",{href:!0});var qWr=s(kP);yco=r(qWr,"Speech2TextProcessor"),qWr.forEach(t),Lco=r(Iwe," (Speech2Text model)"),Iwe.forEach(t),xco=i(ve),Bh=n(ve,"LI",{});var qwe=s(Bh);Oae=n(qwe,"STRONG",{});var NWr=s(Oae);$co=r(NWr,"speech_to_text_2"),NWr.forEach(t),kco=r(qwe," \u2014 "),SP=n(qwe,"A",{href:!0});var jWr=s(SP);Sco=r(jWr,"Speech2Text2Processor"),jWr.forEach(t),Rco=r(qwe," (Speech2Text2 model)"),qwe.forEach(t),Bco=i(ve),Ph=n(ve,"LI",{});var Nwe=s(Ph);Vae=n(Nwe,"STRONG",{});var DWr=s(Vae);Pco=r(DWr,"trocr"),DWr.forEach(t),Ico=r(Nwe," \u2014 "),RP=n(Nwe,"A",{href:!0});var GWr=s(RP);qco=r(GWr,"TrOCRProcessor"),GWr.forEach(t),Nco=r(Nwe," (TrOCR model)"),Nwe.forEach(t),jco=i(ve),Ih=n(ve,"LI",{});var jwe=s(Ih);Xae=n(jwe,"STRONG",{});var OWr=s(Xae);Dco=r(OWr,"unispeech"),OWr.forEach(t),Gco=r(jwe," \u2014 "),BP=n(jwe,"A",{href:!0});var VWr=s(BP);Oco=r(VWr,"Wav2Vec2Processor"),VWr.forEach(t),Vco=r(jwe," (UniSpeech model)"),jwe.forEach(t),Xco=i(ve),qh=n(ve,"LI",{});var Dwe=s(qh);zae=n(Dwe,"STRONG",{});var XWr=s(zae);zco=r(XWr,"unispeech-sat"),XWr.forEach(t),Qco=r(Dwe," \u2014 "),PP=n(Dwe,"A",{href:!0});var zWr=s(PP);Wco=r(zWr,"Wav2Vec2Processor"),zWr.forEach(t),Hco=r(Dwe," (UniSpeechSat model)"),Dwe.forEach(t),Uco=i(ve),Nh=n(ve,"LI",{});var Gwe=s(Nh);Qae=n(Gwe,"STRONG",{});var QWr=s(Qae);Jco=r(QWr,"vilt"),QWr.forEach(t),Yco=r(Gwe," \u2014 "),IP=n(Gwe,"A",{href:!0});var WWr=s(IP);Kco=r(WWr,"ViltProcessor"),WWr.forEach(t),Zco=r(Gwe," (ViLT model)"),Gwe.forEach(t),efo=i(ve),jh=n(ve,"LI",{});var Owe=s(jh);Wae=n(Owe,"STRONG",{});var HWr=s(Wae);ofo=r(HWr,"vision-text-dual-encoder"),HWr.forEach(t),rfo=r(Owe," \u2014 "),qP=n(Owe,"A",{href:!0});var UWr=s(qP);tfo=r(UWr,"VisionTextDualEncoderProcessor"),UWr.forEach(t),afo=r(Owe," (VisionTextDualEncoder model)"),Owe.forEach(t),nfo=i(ve),Dh=n(ve,"LI",{});var Vwe=s(Dh);Hae=n(Vwe,"STRONG",{});var JWr=s(Hae);sfo=r(JWr,"wav2vec2"),JWr.forEach(t),lfo=r(Vwe," \u2014 "),NP=n(Vwe,"A",{href:!0});var YWr=s(NP);ifo=r(YWr,"Wav2Vec2Processor"),YWr.forEach(t),dfo=r(Vwe," (Wav2Vec2 model)"),Vwe.forEach(t),cfo=i(ve),Gh=n(ve,"LI",{});var Xwe=s(Gh);Uae=n(Xwe,"STRONG",{});var KWr=s(Uae);ffo=r(KWr,"wavlm"),KWr.forEach(t),mfo=r(Xwe," \u2014 "),jP=n(Xwe,"A",{href:!0});var ZWr=s(jP);gfo=r(ZWr,"Wav2Vec2Processor"),ZWr.forEach(t),hfo=r(Xwe," (WavLM model)"),Xwe.forEach(t),ve.forEach(t),pfo=i(Kt),T(Oh.$$.fragment,Kt),ufo=i(Kt),T(Vh.$$.fragment,Kt),Kt.forEach(t),_fo=i(js),Xh=n(js,"DIV",{class:!0});var sNe=s(Xh);T(M0.$$.fragment,sNe),bfo=i(sNe),Jae=n(sNe,"P",{});var eHr=s(Jae);vfo=r(eHr,"Register a new processor for this class."),eHr.forEach(t),sNe.forEach(t),js.forEach(t),tIe=i(f),Mi=n(f,"H2",{class:!0});var lNe=s(Mi);zh=n(lNe,"A",{id:!0,class:!0,href:!0});var oHr=s(zh);Yae=n(oHr,"SPAN",{});var rHr=s(Yae);T(E0.$$.fragment,rHr),rHr.forEach(t),oHr.forEach(t),Ffo=i(lNe),Kae=n(lNe,"SPAN",{});var tHr=s(Kae);Tfo=r(tHr,"AutoModel"),tHr.forEach(t),lNe.forEach(t),aIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(C0.$$.fragment,Ds),Mfo=i(Ds),Ei=n(Ds,"P",{});var cK=s(Ei);Efo=r(cK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DP=n(cK,"A",{href:!0});var aHr=s(DP);Cfo=r(aHr,"from_pretrained()"),aHr.forEach(t),wfo=r(cK," class method or the "),GP=n(cK,"A",{href:!0});var nHr=s(GP);Afo=r(nHr,"from_config()"),nHr.forEach(t),yfo=r(cK,` class
method.`),cK.forEach(t),Lfo=i(Ds),w0=n(Ds,"P",{});var iNe=s(w0);xfo=r(iNe,"This class cannot be instantiated directly using "),Zae=n(iNe,"CODE",{});var sHr=s(Zae);$fo=r(sHr,"__init__()"),sHr.forEach(t),kfo=r(iNe," (throws an error)."),iNe.forEach(t),Sfo=i(Ds),ot=n(Ds,"DIV",{class:!0});var eA=s(ot);T(A0.$$.fragment,eA),Rfo=i(eA),ene=n(eA,"P",{});var lHr=s(ene);Bfo=r(lHr,"Instantiates one of the base model classes of the library from a configuration."),lHr.forEach(t),Pfo=i(eA),Ci=n(eA,"P",{});var fK=s(Ci);Ifo=r(fK,`Note:
Loading a model from its configuration file does `),one=n(fK,"STRONG",{});var iHr=s(one);qfo=r(iHr,"not"),iHr.forEach(t),Nfo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OP=n(fK,"A",{href:!0});var dHr=s(OP);jfo=r(dHr,"from_pretrained()"),dHr.forEach(t),Dfo=r(fK," to load the model weights."),fK.forEach(t),Gfo=i(eA),T(Qh.$$.fragment,eA),eA.forEach(t),Ofo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(y0.$$.fragment,Zt),Vfo=i(Zt),rne=n(Zt,"P",{});var cHr=s(rne);Xfo=r(cHr,"Instantiate one of the base model classes of the library from a pretrained model."),cHr.forEach(t),zfo=i(Zt),Aa=n(Zt,"P",{});var oA=s(Aa);Qfo=r(oA,"The model class to instantiate is selected based on the "),tne=n(oA,"CODE",{});var fHr=s(tne);Wfo=r(fHr,"model_type"),fHr.forEach(t),Hfo=r(oA,` property of the config object (either
passed as an argument or loaded from `),ane=n(oA,"CODE",{});var mHr=s(ane);Ufo=r(mHr,"pretrained_model_name_or_path"),mHr.forEach(t),Jfo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=n(oA,"CODE",{});var gHr=s(nne);Yfo=r(gHr,"pretrained_model_name_or_path"),gHr.forEach(t),Kfo=r(oA,":"),oA.forEach(t),Zfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Wh=n($,"LI",{});var zwe=s(Wh);sne=n(zwe,"STRONG",{});var hHr=s(sne);emo=r(hHr,"albert"),hHr.forEach(t),omo=r(zwe," \u2014 "),VP=n(zwe,"A",{href:!0});var pHr=s(VP);rmo=r(pHr,"AlbertModel"),pHr.forEach(t),tmo=r(zwe," (ALBERT model)"),zwe.forEach(t),amo=i($),Hh=n($,"LI",{});var Qwe=s(Hh);lne=n(Qwe,"STRONG",{});var uHr=s(lne);nmo=r(uHr,"bart"),uHr.forEach(t),smo=r(Qwe," \u2014 "),XP=n(Qwe,"A",{href:!0});var _Hr=s(XP);lmo=r(_Hr,"BartModel"),_Hr.forEach(t),imo=r(Qwe," (BART model)"),Qwe.forEach(t),dmo=i($),Uh=n($,"LI",{});var Wwe=s(Uh);ine=n(Wwe,"STRONG",{});var bHr=s(ine);cmo=r(bHr,"beit"),bHr.forEach(t),fmo=r(Wwe," \u2014 "),zP=n(Wwe,"A",{href:!0});var vHr=s(zP);mmo=r(vHr,"BeitModel"),vHr.forEach(t),gmo=r(Wwe," (BEiT model)"),Wwe.forEach(t),hmo=i($),Jh=n($,"LI",{});var Hwe=s(Jh);dne=n(Hwe,"STRONG",{});var FHr=s(dne);pmo=r(FHr,"bert"),FHr.forEach(t),umo=r(Hwe," \u2014 "),QP=n(Hwe,"A",{href:!0});var THr=s(QP);_mo=r(THr,"BertModel"),THr.forEach(t),bmo=r(Hwe," (BERT model)"),Hwe.forEach(t),vmo=i($),Yh=n($,"LI",{});var Uwe=s(Yh);cne=n(Uwe,"STRONG",{});var MHr=s(cne);Fmo=r(MHr,"bert-generation"),MHr.forEach(t),Tmo=r(Uwe," \u2014 "),WP=n(Uwe,"A",{href:!0});var EHr=s(WP);Mmo=r(EHr,"BertGenerationEncoder"),EHr.forEach(t),Emo=r(Uwe," (Bert Generation model)"),Uwe.forEach(t),Cmo=i($),Kh=n($,"LI",{});var Jwe=s(Kh);fne=n(Jwe,"STRONG",{});var CHr=s(fne);wmo=r(CHr,"big_bird"),CHr.forEach(t),Amo=r(Jwe," \u2014 "),HP=n(Jwe,"A",{href:!0});var wHr=s(HP);ymo=r(wHr,"BigBirdModel"),wHr.forEach(t),Lmo=r(Jwe," (BigBird model)"),Jwe.forEach(t),xmo=i($),Zh=n($,"LI",{});var Ywe=s(Zh);mne=n(Ywe,"STRONG",{});var AHr=s(mne);$mo=r(AHr,"bigbird_pegasus"),AHr.forEach(t),kmo=r(Ywe," \u2014 "),UP=n(Ywe,"A",{href:!0});var yHr=s(UP);Smo=r(yHr,"BigBirdPegasusModel"),yHr.forEach(t),Rmo=r(Ywe," (BigBirdPegasus model)"),Ywe.forEach(t),Bmo=i($),ep=n($,"LI",{});var Kwe=s(ep);gne=n(Kwe,"STRONG",{});var LHr=s(gne);Pmo=r(LHr,"blenderbot"),LHr.forEach(t),Imo=r(Kwe," \u2014 "),JP=n(Kwe,"A",{href:!0});var xHr=s(JP);qmo=r(xHr,"BlenderbotModel"),xHr.forEach(t),Nmo=r(Kwe," (Blenderbot model)"),Kwe.forEach(t),jmo=i($),op=n($,"LI",{});var Zwe=s(op);hne=n(Zwe,"STRONG",{});var $Hr=s(hne);Dmo=r($Hr,"blenderbot-small"),$Hr.forEach(t),Gmo=r(Zwe," \u2014 "),YP=n(Zwe,"A",{href:!0});var kHr=s(YP);Omo=r(kHr,"BlenderbotSmallModel"),kHr.forEach(t),Vmo=r(Zwe," (BlenderbotSmall model)"),Zwe.forEach(t),Xmo=i($),rp=n($,"LI",{});var eAe=s(rp);pne=n(eAe,"STRONG",{});var SHr=s(pne);zmo=r(SHr,"camembert"),SHr.forEach(t),Qmo=r(eAe," \u2014 "),KP=n(eAe,"A",{href:!0});var RHr=s(KP);Wmo=r(RHr,"CamembertModel"),RHr.forEach(t),Hmo=r(eAe," (CamemBERT model)"),eAe.forEach(t),Umo=i($),tp=n($,"LI",{});var oAe=s(tp);une=n(oAe,"STRONG",{});var BHr=s(une);Jmo=r(BHr,"canine"),BHr.forEach(t),Ymo=r(oAe," \u2014 "),ZP=n(oAe,"A",{href:!0});var PHr=s(ZP);Kmo=r(PHr,"CanineModel"),PHr.forEach(t),Zmo=r(oAe," (Canine model)"),oAe.forEach(t),ego=i($),ap=n($,"LI",{});var rAe=s(ap);_ne=n(rAe,"STRONG",{});var IHr=s(_ne);ogo=r(IHr,"clip"),IHr.forEach(t),rgo=r(rAe," \u2014 "),eI=n(rAe,"A",{href:!0});var qHr=s(eI);tgo=r(qHr,"CLIPModel"),qHr.forEach(t),ago=r(rAe," (CLIP model)"),rAe.forEach(t),ngo=i($),np=n($,"LI",{});var tAe=s(np);bne=n(tAe,"STRONG",{});var NHr=s(bne);sgo=r(NHr,"convbert"),NHr.forEach(t),lgo=r(tAe," \u2014 "),oI=n(tAe,"A",{href:!0});var jHr=s(oI);igo=r(jHr,"ConvBertModel"),jHr.forEach(t),dgo=r(tAe," (ConvBERT model)"),tAe.forEach(t),cgo=i($),sp=n($,"LI",{});var aAe=s(sp);vne=n(aAe,"STRONG",{});var DHr=s(vne);fgo=r(DHr,"convnext"),DHr.forEach(t),mgo=r(aAe," \u2014 "),rI=n(aAe,"A",{href:!0});var GHr=s(rI);ggo=r(GHr,"ConvNextModel"),GHr.forEach(t),hgo=r(aAe," (ConvNext model)"),aAe.forEach(t),pgo=i($),lp=n($,"LI",{});var nAe=s(lp);Fne=n(nAe,"STRONG",{});var OHr=s(Fne);ugo=r(OHr,"ctrl"),OHr.forEach(t),_go=r(nAe," \u2014 "),tI=n(nAe,"A",{href:!0});var VHr=s(tI);bgo=r(VHr,"CTRLModel"),VHr.forEach(t),vgo=r(nAe," (CTRL model)"),nAe.forEach(t),Fgo=i($),ip=n($,"LI",{});var sAe=s(ip);Tne=n(sAe,"STRONG",{});var XHr=s(Tne);Tgo=r(XHr,"data2vec-audio"),XHr.forEach(t),Mgo=r(sAe," \u2014 "),aI=n(sAe,"A",{href:!0});var zHr=s(aI);Ego=r(zHr,"Data2VecAudioModel"),zHr.forEach(t),Cgo=r(sAe," (Data2VecAudio model)"),sAe.forEach(t),wgo=i($),dp=n($,"LI",{});var lAe=s(dp);Mne=n(lAe,"STRONG",{});var QHr=s(Mne);Ago=r(QHr,"data2vec-text"),QHr.forEach(t),ygo=r(lAe," \u2014 "),nI=n(lAe,"A",{href:!0});var WHr=s(nI);Lgo=r(WHr,"Data2VecTextModel"),WHr.forEach(t),xgo=r(lAe," (Data2VecText model)"),lAe.forEach(t),$go=i($),cp=n($,"LI",{});var iAe=s(cp);Ene=n(iAe,"STRONG",{});var HHr=s(Ene);kgo=r(HHr,"data2vec-vision"),HHr.forEach(t),Sgo=r(iAe," \u2014 "),sI=n(iAe,"A",{href:!0});var UHr=s(sI);Rgo=r(UHr,"Data2VecVisionModel"),UHr.forEach(t),Bgo=r(iAe," (Data2VecVision model)"),iAe.forEach(t),Pgo=i($),fp=n($,"LI",{});var dAe=s(fp);Cne=n(dAe,"STRONG",{});var JHr=s(Cne);Igo=r(JHr,"deberta"),JHr.forEach(t),qgo=r(dAe," \u2014 "),lI=n(dAe,"A",{href:!0});var YHr=s(lI);Ngo=r(YHr,"DebertaModel"),YHr.forEach(t),jgo=r(dAe," (DeBERTa model)"),dAe.forEach(t),Dgo=i($),mp=n($,"LI",{});var cAe=s(mp);wne=n(cAe,"STRONG",{});var KHr=s(wne);Ggo=r(KHr,"deberta-v2"),KHr.forEach(t),Ogo=r(cAe," \u2014 "),iI=n(cAe,"A",{href:!0});var ZHr=s(iI);Vgo=r(ZHr,"DebertaV2Model"),ZHr.forEach(t),Xgo=r(cAe," (DeBERTa-v2 model)"),cAe.forEach(t),zgo=i($),gp=n($,"LI",{});var fAe=s(gp);Ane=n(fAe,"STRONG",{});var eUr=s(Ane);Qgo=r(eUr,"decision_transformer"),eUr.forEach(t),Wgo=r(fAe," \u2014 "),dI=n(fAe,"A",{href:!0});var oUr=s(dI);Hgo=r(oUr,"DecisionTransformerModel"),oUr.forEach(t),Ugo=r(fAe," (Decision Transformer model)"),fAe.forEach(t),Jgo=i($),hp=n($,"LI",{});var mAe=s(hp);yne=n(mAe,"STRONG",{});var rUr=s(yne);Ygo=r(rUr,"deit"),rUr.forEach(t),Kgo=r(mAe," \u2014 "),cI=n(mAe,"A",{href:!0});var tUr=s(cI);Zgo=r(tUr,"DeiTModel"),tUr.forEach(t),eho=r(mAe," (DeiT model)"),mAe.forEach(t),oho=i($),pp=n($,"LI",{});var gAe=s(pp);Lne=n(gAe,"STRONG",{});var aUr=s(Lne);rho=r(aUr,"detr"),aUr.forEach(t),tho=r(gAe," \u2014 "),fI=n(gAe,"A",{href:!0});var nUr=s(fI);aho=r(nUr,"DetrModel"),nUr.forEach(t),nho=r(gAe," (DETR model)"),gAe.forEach(t),sho=i($),up=n($,"LI",{});var hAe=s(up);xne=n(hAe,"STRONG",{});var sUr=s(xne);lho=r(sUr,"distilbert"),sUr.forEach(t),iho=r(hAe," \u2014 "),mI=n(hAe,"A",{href:!0});var lUr=s(mI);dho=r(lUr,"DistilBertModel"),lUr.forEach(t),cho=r(hAe," (DistilBERT model)"),hAe.forEach(t),fho=i($),_p=n($,"LI",{});var pAe=s(_p);$ne=n(pAe,"STRONG",{});var iUr=s($ne);mho=r(iUr,"dpr"),iUr.forEach(t),gho=r(pAe," \u2014 "),gI=n(pAe,"A",{href:!0});var dUr=s(gI);hho=r(dUr,"DPRQuestionEncoder"),dUr.forEach(t),pho=r(pAe," (DPR model)"),pAe.forEach(t),uho=i($),bp=n($,"LI",{});var uAe=s(bp);kne=n(uAe,"STRONG",{});var cUr=s(kne);_ho=r(cUr,"dpt"),cUr.forEach(t),bho=r(uAe," \u2014 "),hI=n(uAe,"A",{href:!0});var fUr=s(hI);vho=r(fUr,"DPTModel"),fUr.forEach(t),Fho=r(uAe," (DPT model)"),uAe.forEach(t),Tho=i($),vp=n($,"LI",{});var _Ae=s(vp);Sne=n(_Ae,"STRONG",{});var mUr=s(Sne);Mho=r(mUr,"electra"),mUr.forEach(t),Eho=r(_Ae," \u2014 "),pI=n(_Ae,"A",{href:!0});var gUr=s(pI);Cho=r(gUr,"ElectraModel"),gUr.forEach(t),who=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),Aho=i($),Fp=n($,"LI",{});var bAe=s(Fp);Rne=n(bAe,"STRONG",{});var hUr=s(Rne);yho=r(hUr,"flaubert"),hUr.forEach(t),Lho=r(bAe," \u2014 "),uI=n(bAe,"A",{href:!0});var pUr=s(uI);xho=r(pUr,"FlaubertModel"),pUr.forEach(t),$ho=r(bAe," (FlauBERT model)"),bAe.forEach(t),kho=i($),Tp=n($,"LI",{});var vAe=s(Tp);Bne=n(vAe,"STRONG",{});var uUr=s(Bne);Sho=r(uUr,"flava"),uUr.forEach(t),Rho=r(vAe," \u2014 "),_I=n(vAe,"A",{href:!0});var _Ur=s(_I);Bho=r(_Ur,"FlavaModel"),_Ur.forEach(t),Pho=r(vAe," (Flava model)"),vAe.forEach(t),Iho=i($),Mp=n($,"LI",{});var FAe=s(Mp);Pne=n(FAe,"STRONG",{});var bUr=s(Pne);qho=r(bUr,"fnet"),bUr.forEach(t),Nho=r(FAe," \u2014 "),bI=n(FAe,"A",{href:!0});var vUr=s(bI);jho=r(vUr,"FNetModel"),vUr.forEach(t),Dho=r(FAe," (FNet model)"),FAe.forEach(t),Gho=i($),Ep=n($,"LI",{});var TAe=s(Ep);Ine=n(TAe,"STRONG",{});var FUr=s(Ine);Oho=r(FUr,"fsmt"),FUr.forEach(t),Vho=r(TAe," \u2014 "),vI=n(TAe,"A",{href:!0});var TUr=s(vI);Xho=r(TUr,"FSMTModel"),TUr.forEach(t),zho=r(TAe," (FairSeq Machine-Translation model)"),TAe.forEach(t),Qho=i($),Rs=n($,"LI",{});var m$=s(Rs);qne=n(m$,"STRONG",{});var MUr=s(qne);Who=r(MUr,"funnel"),MUr.forEach(t),Hho=r(m$," \u2014 "),FI=n(m$,"A",{href:!0});var EUr=s(FI);Uho=r(EUr,"FunnelModel"),EUr.forEach(t),Jho=r(m$," or "),TI=n(m$,"A",{href:!0});var CUr=s(TI);Yho=r(CUr,"FunnelBaseModel"),CUr.forEach(t),Kho=r(m$," (Funnel Transformer model)"),m$.forEach(t),Zho=i($),Cp=n($,"LI",{});var MAe=s(Cp);Nne=n(MAe,"STRONG",{});var wUr=s(Nne);epo=r(wUr,"glpn"),wUr.forEach(t),opo=r(MAe," \u2014 "),MI=n(MAe,"A",{href:!0});var AUr=s(MI);rpo=r(AUr,"GLPNModel"),AUr.forEach(t),tpo=r(MAe," (GLPN model)"),MAe.forEach(t),apo=i($),wp=n($,"LI",{});var EAe=s(wp);jne=n(EAe,"STRONG",{});var yUr=s(jne);npo=r(yUr,"gpt2"),yUr.forEach(t),spo=r(EAe," \u2014 "),EI=n(EAe,"A",{href:!0});var LUr=s(EI);lpo=r(LUr,"GPT2Model"),LUr.forEach(t),ipo=r(EAe," (OpenAI GPT-2 model)"),EAe.forEach(t),dpo=i($),Ap=n($,"LI",{});var CAe=s(Ap);Dne=n(CAe,"STRONG",{});var xUr=s(Dne);cpo=r(xUr,"gpt_neo"),xUr.forEach(t),fpo=r(CAe," \u2014 "),CI=n(CAe,"A",{href:!0});var $Ur=s(CI);mpo=r($Ur,"GPTNeoModel"),$Ur.forEach(t),gpo=r(CAe," (GPT Neo model)"),CAe.forEach(t),hpo=i($),yp=n($,"LI",{});var wAe=s(yp);Gne=n(wAe,"STRONG",{});var kUr=s(Gne);ppo=r(kUr,"gptj"),kUr.forEach(t),upo=r(wAe," \u2014 "),wI=n(wAe,"A",{href:!0});var SUr=s(wI);_po=r(SUr,"GPTJModel"),SUr.forEach(t),bpo=r(wAe," (GPT-J model)"),wAe.forEach(t),vpo=i($),Lp=n($,"LI",{});var AAe=s(Lp);One=n(AAe,"STRONG",{});var RUr=s(One);Fpo=r(RUr,"hubert"),RUr.forEach(t),Tpo=r(AAe," \u2014 "),AI=n(AAe,"A",{href:!0});var BUr=s(AI);Mpo=r(BUr,"HubertModel"),BUr.forEach(t),Epo=r(AAe," (Hubert model)"),AAe.forEach(t),Cpo=i($),xp=n($,"LI",{});var yAe=s(xp);Vne=n(yAe,"STRONG",{});var PUr=s(Vne);wpo=r(PUr,"ibert"),PUr.forEach(t),Apo=r(yAe," \u2014 "),yI=n(yAe,"A",{href:!0});var IUr=s(yI);ypo=r(IUr,"IBertModel"),IUr.forEach(t),Lpo=r(yAe," (I-BERT model)"),yAe.forEach(t),xpo=i($),$p=n($,"LI",{});var LAe=s($p);Xne=n(LAe,"STRONG",{});var qUr=s(Xne);$po=r(qUr,"imagegpt"),qUr.forEach(t),kpo=r(LAe," \u2014 "),LI=n(LAe,"A",{href:!0});var NUr=s(LI);Spo=r(NUr,"ImageGPTModel"),NUr.forEach(t),Rpo=r(LAe," (ImageGPT model)"),LAe.forEach(t),Bpo=i($),kp=n($,"LI",{});var xAe=s(kp);zne=n(xAe,"STRONG",{});var jUr=s(zne);Ppo=r(jUr,"layoutlm"),jUr.forEach(t),Ipo=r(xAe," \u2014 "),xI=n(xAe,"A",{href:!0});var DUr=s(xI);qpo=r(DUr,"LayoutLMModel"),DUr.forEach(t),Npo=r(xAe," (LayoutLM model)"),xAe.forEach(t),jpo=i($),Sp=n($,"LI",{});var $Ae=s(Sp);Qne=n($Ae,"STRONG",{});var GUr=s(Qne);Dpo=r(GUr,"layoutlmv2"),GUr.forEach(t),Gpo=r($Ae," \u2014 "),$I=n($Ae,"A",{href:!0});var OUr=s($I);Opo=r(OUr,"LayoutLMv2Model"),OUr.forEach(t),Vpo=r($Ae," (LayoutLMv2 model)"),$Ae.forEach(t),Xpo=i($),Rp=n($,"LI",{});var kAe=s(Rp);Wne=n(kAe,"STRONG",{});var VUr=s(Wne);zpo=r(VUr,"led"),VUr.forEach(t),Qpo=r(kAe," \u2014 "),kI=n(kAe,"A",{href:!0});var XUr=s(kI);Wpo=r(XUr,"LEDModel"),XUr.forEach(t),Hpo=r(kAe," (LED model)"),kAe.forEach(t),Upo=i($),Bp=n($,"LI",{});var SAe=s(Bp);Hne=n(SAe,"STRONG",{});var zUr=s(Hne);Jpo=r(zUr,"longformer"),zUr.forEach(t),Ypo=r(SAe," \u2014 "),SI=n(SAe,"A",{href:!0});var QUr=s(SI);Kpo=r(QUr,"LongformerModel"),QUr.forEach(t),Zpo=r(SAe," (Longformer model)"),SAe.forEach(t),euo=i($),Pp=n($,"LI",{});var RAe=s(Pp);Une=n(RAe,"STRONG",{});var WUr=s(Une);ouo=r(WUr,"luke"),WUr.forEach(t),ruo=r(RAe," \u2014 "),RI=n(RAe,"A",{href:!0});var HUr=s(RI);tuo=r(HUr,"LukeModel"),HUr.forEach(t),auo=r(RAe," (LUKE model)"),RAe.forEach(t),nuo=i($),Ip=n($,"LI",{});var BAe=s(Ip);Jne=n(BAe,"STRONG",{});var UUr=s(Jne);suo=r(UUr,"lxmert"),UUr.forEach(t),luo=r(BAe," \u2014 "),BI=n(BAe,"A",{href:!0});var JUr=s(BI);iuo=r(JUr,"LxmertModel"),JUr.forEach(t),duo=r(BAe," (LXMERT model)"),BAe.forEach(t),cuo=i($),qp=n($,"LI",{});var PAe=s(qp);Yne=n(PAe,"STRONG",{});var YUr=s(Yne);fuo=r(YUr,"m2m_100"),YUr.forEach(t),muo=r(PAe," \u2014 "),PI=n(PAe,"A",{href:!0});var KUr=s(PI);guo=r(KUr,"M2M100Model"),KUr.forEach(t),huo=r(PAe," (M2M100 model)"),PAe.forEach(t),puo=i($),Np=n($,"LI",{});var IAe=s(Np);Kne=n(IAe,"STRONG",{});var ZUr=s(Kne);uuo=r(ZUr,"marian"),ZUr.forEach(t),_uo=r(IAe," \u2014 "),II=n(IAe,"A",{href:!0});var eJr=s(II);buo=r(eJr,"MarianModel"),eJr.forEach(t),vuo=r(IAe," (Marian model)"),IAe.forEach(t),Fuo=i($),jp=n($,"LI",{});var qAe=s(jp);Zne=n(qAe,"STRONG",{});var oJr=s(Zne);Tuo=r(oJr,"maskformer"),oJr.forEach(t),Muo=r(qAe," \u2014 "),qI=n(qAe,"A",{href:!0});var rJr=s(qI);Euo=r(rJr,"MaskFormerModel"),rJr.forEach(t),Cuo=r(qAe," (MaskFormer model)"),qAe.forEach(t),wuo=i($),Dp=n($,"LI",{});var NAe=s(Dp);ese=n(NAe,"STRONG",{});var tJr=s(ese);Auo=r(tJr,"mbart"),tJr.forEach(t),yuo=r(NAe," \u2014 "),NI=n(NAe,"A",{href:!0});var aJr=s(NI);Luo=r(aJr,"MBartModel"),aJr.forEach(t),xuo=r(NAe," (mBART model)"),NAe.forEach(t),$uo=i($),Gp=n($,"LI",{});var jAe=s(Gp);ose=n(jAe,"STRONG",{});var nJr=s(ose);kuo=r(nJr,"megatron-bert"),nJr.forEach(t),Suo=r(jAe," \u2014 "),jI=n(jAe,"A",{href:!0});var sJr=s(jI);Ruo=r(sJr,"MegatronBertModel"),sJr.forEach(t),Buo=r(jAe," (MegatronBert model)"),jAe.forEach(t),Puo=i($),Op=n($,"LI",{});var DAe=s(Op);rse=n(DAe,"STRONG",{});var lJr=s(rse);Iuo=r(lJr,"mobilebert"),lJr.forEach(t),quo=r(DAe," \u2014 "),DI=n(DAe,"A",{href:!0});var iJr=s(DI);Nuo=r(iJr,"MobileBertModel"),iJr.forEach(t),juo=r(DAe," (MobileBERT model)"),DAe.forEach(t),Duo=i($),Vp=n($,"LI",{});var GAe=s(Vp);tse=n(GAe,"STRONG",{});var dJr=s(tse);Guo=r(dJr,"mpnet"),dJr.forEach(t),Ouo=r(GAe," \u2014 "),GI=n(GAe,"A",{href:!0});var cJr=s(GI);Vuo=r(cJr,"MPNetModel"),cJr.forEach(t),Xuo=r(GAe," (MPNet model)"),GAe.forEach(t),zuo=i($),Xp=n($,"LI",{});var OAe=s(Xp);ase=n(OAe,"STRONG",{});var fJr=s(ase);Quo=r(fJr,"mt5"),fJr.forEach(t),Wuo=r(OAe," \u2014 "),OI=n(OAe,"A",{href:!0});var mJr=s(OI);Huo=r(mJr,"MT5Model"),mJr.forEach(t),Uuo=r(OAe," (mT5 model)"),OAe.forEach(t),Juo=i($),zp=n($,"LI",{});var VAe=s(zp);nse=n(VAe,"STRONG",{});var gJr=s(nse);Yuo=r(gJr,"nystromformer"),gJr.forEach(t),Kuo=r(VAe," \u2014 "),VI=n(VAe,"A",{href:!0});var hJr=s(VI);Zuo=r(hJr,"NystromformerModel"),hJr.forEach(t),e_o=r(VAe," (Nystromformer model)"),VAe.forEach(t),o_o=i($),Qp=n($,"LI",{});var XAe=s(Qp);sse=n(XAe,"STRONG",{});var pJr=s(sse);r_o=r(pJr,"openai-gpt"),pJr.forEach(t),t_o=r(XAe," \u2014 "),XI=n(XAe,"A",{href:!0});var uJr=s(XI);a_o=r(uJr,"OpenAIGPTModel"),uJr.forEach(t),n_o=r(XAe," (OpenAI GPT model)"),XAe.forEach(t),s_o=i($),Wp=n($,"LI",{});var zAe=s(Wp);lse=n(zAe,"STRONG",{});var _Jr=s(lse);l_o=r(_Jr,"opt"),_Jr.forEach(t),i_o=r(zAe," \u2014 "),zI=n(zAe,"A",{href:!0});var bJr=s(zI);d_o=r(bJr,"OPTModel"),bJr.forEach(t),c_o=r(zAe," (OPT model)"),zAe.forEach(t),f_o=i($),Hp=n($,"LI",{});var QAe=s(Hp);ise=n(QAe,"STRONG",{});var vJr=s(ise);m_o=r(vJr,"pegasus"),vJr.forEach(t),g_o=r(QAe," \u2014 "),QI=n(QAe,"A",{href:!0});var FJr=s(QI);h_o=r(FJr,"PegasusModel"),FJr.forEach(t),p_o=r(QAe," (Pegasus model)"),QAe.forEach(t),u_o=i($),Up=n($,"LI",{});var WAe=s(Up);dse=n(WAe,"STRONG",{});var TJr=s(dse);__o=r(TJr,"perceiver"),TJr.forEach(t),b_o=r(WAe," \u2014 "),WI=n(WAe,"A",{href:!0});var MJr=s(WI);v_o=r(MJr,"PerceiverModel"),MJr.forEach(t),F_o=r(WAe," (Perceiver model)"),WAe.forEach(t),T_o=i($),Jp=n($,"LI",{});var HAe=s(Jp);cse=n(HAe,"STRONG",{});var EJr=s(cse);M_o=r(EJr,"plbart"),EJr.forEach(t),E_o=r(HAe," \u2014 "),HI=n(HAe,"A",{href:!0});var CJr=s(HI);C_o=r(CJr,"PLBartModel"),CJr.forEach(t),w_o=r(HAe," (PLBart model)"),HAe.forEach(t),A_o=i($),Yp=n($,"LI",{});var UAe=s(Yp);fse=n(UAe,"STRONG",{});var wJr=s(fse);y_o=r(wJr,"poolformer"),wJr.forEach(t),L_o=r(UAe," \u2014 "),UI=n(UAe,"A",{href:!0});var AJr=s(UI);x_o=r(AJr,"PoolFormerModel"),AJr.forEach(t),$_o=r(UAe," (PoolFormer model)"),UAe.forEach(t),k_o=i($),Kp=n($,"LI",{});var JAe=s(Kp);mse=n(JAe,"STRONG",{});var yJr=s(mse);S_o=r(yJr,"prophetnet"),yJr.forEach(t),R_o=r(JAe," \u2014 "),JI=n(JAe,"A",{href:!0});var LJr=s(JI);B_o=r(LJr,"ProphetNetModel"),LJr.forEach(t),P_o=r(JAe," (ProphetNet model)"),JAe.forEach(t),I_o=i($),Zp=n($,"LI",{});var YAe=s(Zp);gse=n(YAe,"STRONG",{});var xJr=s(gse);q_o=r(xJr,"qdqbert"),xJr.forEach(t),N_o=r(YAe," \u2014 "),YI=n(YAe,"A",{href:!0});var $Jr=s(YI);j_o=r($Jr,"QDQBertModel"),$Jr.forEach(t),D_o=r(YAe," (QDQBert model)"),YAe.forEach(t),G_o=i($),eu=n($,"LI",{});var KAe=s(eu);hse=n(KAe,"STRONG",{});var kJr=s(hse);O_o=r(kJr,"reformer"),kJr.forEach(t),V_o=r(KAe," \u2014 "),KI=n(KAe,"A",{href:!0});var SJr=s(KI);X_o=r(SJr,"ReformerModel"),SJr.forEach(t),z_o=r(KAe," (Reformer model)"),KAe.forEach(t),Q_o=i($),ou=n($,"LI",{});var ZAe=s(ou);pse=n(ZAe,"STRONG",{});var RJr=s(pse);W_o=r(RJr,"regnet"),RJr.forEach(t),H_o=r(ZAe," \u2014 "),ZI=n(ZAe,"A",{href:!0});var BJr=s(ZI);U_o=r(BJr,"RegNetModel"),BJr.forEach(t),J_o=r(ZAe," (RegNet model)"),ZAe.forEach(t),Y_o=i($),ru=n($,"LI",{});var e6e=s(ru);use=n(e6e,"STRONG",{});var PJr=s(use);K_o=r(PJr,"rembert"),PJr.forEach(t),Z_o=r(e6e," \u2014 "),eq=n(e6e,"A",{href:!0});var IJr=s(eq);e2o=r(IJr,"RemBertModel"),IJr.forEach(t),o2o=r(e6e," (RemBERT model)"),e6e.forEach(t),r2o=i($),tu=n($,"LI",{});var o6e=s(tu);_se=n(o6e,"STRONG",{});var qJr=s(_se);t2o=r(qJr,"resnet"),qJr.forEach(t),a2o=r(o6e," \u2014 "),oq=n(o6e,"A",{href:!0});var NJr=s(oq);n2o=r(NJr,"ResNetModel"),NJr.forEach(t),s2o=r(o6e," (ResNet model)"),o6e.forEach(t),l2o=i($),au=n($,"LI",{});var r6e=s(au);bse=n(r6e,"STRONG",{});var jJr=s(bse);i2o=r(jJr,"retribert"),jJr.forEach(t),d2o=r(r6e," \u2014 "),rq=n(r6e,"A",{href:!0});var DJr=s(rq);c2o=r(DJr,"RetriBertModel"),DJr.forEach(t),f2o=r(r6e," (RetriBERT model)"),r6e.forEach(t),m2o=i($),nu=n($,"LI",{});var t6e=s(nu);vse=n(t6e,"STRONG",{});var GJr=s(vse);g2o=r(GJr,"roberta"),GJr.forEach(t),h2o=r(t6e," \u2014 "),tq=n(t6e,"A",{href:!0});var OJr=s(tq);p2o=r(OJr,"RobertaModel"),OJr.forEach(t),u2o=r(t6e," (RoBERTa model)"),t6e.forEach(t),_2o=i($),su=n($,"LI",{});var a6e=s(su);Fse=n(a6e,"STRONG",{});var VJr=s(Fse);b2o=r(VJr,"roformer"),VJr.forEach(t),v2o=r(a6e," \u2014 "),aq=n(a6e,"A",{href:!0});var XJr=s(aq);F2o=r(XJr,"RoFormerModel"),XJr.forEach(t),T2o=r(a6e," (RoFormer model)"),a6e.forEach(t),M2o=i($),lu=n($,"LI",{});var n6e=s(lu);Tse=n(n6e,"STRONG",{});var zJr=s(Tse);E2o=r(zJr,"segformer"),zJr.forEach(t),C2o=r(n6e," \u2014 "),nq=n(n6e,"A",{href:!0});var QJr=s(nq);w2o=r(QJr,"SegformerModel"),QJr.forEach(t),A2o=r(n6e," (SegFormer model)"),n6e.forEach(t),y2o=i($),iu=n($,"LI",{});var s6e=s(iu);Mse=n(s6e,"STRONG",{});var WJr=s(Mse);L2o=r(WJr,"sew"),WJr.forEach(t),x2o=r(s6e," \u2014 "),sq=n(s6e,"A",{href:!0});var HJr=s(sq);$2o=r(HJr,"SEWModel"),HJr.forEach(t),k2o=r(s6e," (SEW model)"),s6e.forEach(t),S2o=i($),du=n($,"LI",{});var l6e=s(du);Ese=n(l6e,"STRONG",{});var UJr=s(Ese);R2o=r(UJr,"sew-d"),UJr.forEach(t),B2o=r(l6e," \u2014 "),lq=n(l6e,"A",{href:!0});var JJr=s(lq);P2o=r(JJr,"SEWDModel"),JJr.forEach(t),I2o=r(l6e," (SEW-D model)"),l6e.forEach(t),q2o=i($),cu=n($,"LI",{});var i6e=s(cu);Cse=n(i6e,"STRONG",{});var YJr=s(Cse);N2o=r(YJr,"speech_to_text"),YJr.forEach(t),j2o=r(i6e," \u2014 "),iq=n(i6e,"A",{href:!0});var KJr=s(iq);D2o=r(KJr,"Speech2TextModel"),KJr.forEach(t),G2o=r(i6e," (Speech2Text model)"),i6e.forEach(t),O2o=i($),fu=n($,"LI",{});var d6e=s(fu);wse=n(d6e,"STRONG",{});var ZJr=s(wse);V2o=r(ZJr,"splinter"),ZJr.forEach(t),X2o=r(d6e," \u2014 "),dq=n(d6e,"A",{href:!0});var eYr=s(dq);z2o=r(eYr,"SplinterModel"),eYr.forEach(t),Q2o=r(d6e," (Splinter model)"),d6e.forEach(t),W2o=i($),mu=n($,"LI",{});var c6e=s(mu);Ase=n(c6e,"STRONG",{});var oYr=s(Ase);H2o=r(oYr,"squeezebert"),oYr.forEach(t),U2o=r(c6e," \u2014 "),cq=n(c6e,"A",{href:!0});var rYr=s(cq);J2o=r(rYr,"SqueezeBertModel"),rYr.forEach(t),Y2o=r(c6e," (SqueezeBERT model)"),c6e.forEach(t),K2o=i($),gu=n($,"LI",{});var f6e=s(gu);yse=n(f6e,"STRONG",{});var tYr=s(yse);Z2o=r(tYr,"swin"),tYr.forEach(t),e1o=r(f6e," \u2014 "),fq=n(f6e,"A",{href:!0});var aYr=s(fq);o1o=r(aYr,"SwinModel"),aYr.forEach(t),r1o=r(f6e," (Swin model)"),f6e.forEach(t),t1o=i($),hu=n($,"LI",{});var m6e=s(hu);Lse=n(m6e,"STRONG",{});var nYr=s(Lse);a1o=r(nYr,"t5"),nYr.forEach(t),n1o=r(m6e," \u2014 "),mq=n(m6e,"A",{href:!0});var sYr=s(mq);s1o=r(sYr,"T5Model"),sYr.forEach(t),l1o=r(m6e," (T5 model)"),m6e.forEach(t),i1o=i($),pu=n($,"LI",{});var g6e=s(pu);xse=n(g6e,"STRONG",{});var lYr=s(xse);d1o=r(lYr,"tapas"),lYr.forEach(t),c1o=r(g6e," \u2014 "),gq=n(g6e,"A",{href:!0});var iYr=s(gq);f1o=r(iYr,"TapasModel"),iYr.forEach(t),m1o=r(g6e," (TAPAS model)"),g6e.forEach(t),g1o=i($),uu=n($,"LI",{});var h6e=s(uu);$se=n(h6e,"STRONG",{});var dYr=s($se);h1o=r(dYr,"transfo-xl"),dYr.forEach(t),p1o=r(h6e," \u2014 "),hq=n(h6e,"A",{href:!0});var cYr=s(hq);u1o=r(cYr,"TransfoXLModel"),cYr.forEach(t),_1o=r(h6e," (Transformer-XL model)"),h6e.forEach(t),b1o=i($),_u=n($,"LI",{});var p6e=s(_u);kse=n(p6e,"STRONG",{});var fYr=s(kse);v1o=r(fYr,"unispeech"),fYr.forEach(t),F1o=r(p6e," \u2014 "),pq=n(p6e,"A",{href:!0});var mYr=s(pq);T1o=r(mYr,"UniSpeechModel"),mYr.forEach(t),M1o=r(p6e," (UniSpeech model)"),p6e.forEach(t),E1o=i($),bu=n($,"LI",{});var u6e=s(bu);Sse=n(u6e,"STRONG",{});var gYr=s(Sse);C1o=r(gYr,"unispeech-sat"),gYr.forEach(t),w1o=r(u6e," \u2014 "),uq=n(u6e,"A",{href:!0});var hYr=s(uq);A1o=r(hYr,"UniSpeechSatModel"),hYr.forEach(t),y1o=r(u6e," (UniSpeechSat model)"),u6e.forEach(t),L1o=i($),vu=n($,"LI",{});var _6e=s(vu);Rse=n(_6e,"STRONG",{});var pYr=s(Rse);x1o=r(pYr,"van"),pYr.forEach(t),$1o=r(_6e," \u2014 "),_q=n(_6e,"A",{href:!0});var uYr=s(_q);k1o=r(uYr,"VanModel"),uYr.forEach(t),S1o=r(_6e," (VAN model)"),_6e.forEach(t),R1o=i($),Fu=n($,"LI",{});var b6e=s(Fu);Bse=n(b6e,"STRONG",{});var _Yr=s(Bse);B1o=r(_Yr,"vilt"),_Yr.forEach(t),P1o=r(b6e," \u2014 "),bq=n(b6e,"A",{href:!0});var bYr=s(bq);I1o=r(bYr,"ViltModel"),bYr.forEach(t),q1o=r(b6e," (ViLT model)"),b6e.forEach(t),N1o=i($),Tu=n($,"LI",{});var v6e=s(Tu);Pse=n(v6e,"STRONG",{});var vYr=s(Pse);j1o=r(vYr,"vision-text-dual-encoder"),vYr.forEach(t),D1o=r(v6e," \u2014 "),vq=n(v6e,"A",{href:!0});var FYr=s(vq);G1o=r(FYr,"VisionTextDualEncoderModel"),FYr.forEach(t),O1o=r(v6e," (VisionTextDualEncoder model)"),v6e.forEach(t),V1o=i($),Mu=n($,"LI",{});var F6e=s(Mu);Ise=n(F6e,"STRONG",{});var TYr=s(Ise);X1o=r(TYr,"visual_bert"),TYr.forEach(t),z1o=r(F6e," \u2014 "),Fq=n(F6e,"A",{href:!0});var MYr=s(Fq);Q1o=r(MYr,"VisualBertModel"),MYr.forEach(t),W1o=r(F6e," (VisualBert model)"),F6e.forEach(t),H1o=i($),Eu=n($,"LI",{});var T6e=s(Eu);qse=n(T6e,"STRONG",{});var EYr=s(qse);U1o=r(EYr,"vit"),EYr.forEach(t),J1o=r(T6e," \u2014 "),Tq=n(T6e,"A",{href:!0});var CYr=s(Tq);Y1o=r(CYr,"ViTModel"),CYr.forEach(t),K1o=r(T6e," (ViT model)"),T6e.forEach(t),Z1o=i($),Cu=n($,"LI",{});var M6e=s(Cu);Nse=n(M6e,"STRONG",{});var wYr=s(Nse);ebo=r(wYr,"vit_mae"),wYr.forEach(t),obo=r(M6e," \u2014 "),Mq=n(M6e,"A",{href:!0});var AYr=s(Mq);rbo=r(AYr,"ViTMAEModel"),AYr.forEach(t),tbo=r(M6e," (ViTMAE model)"),M6e.forEach(t),abo=i($),wu=n($,"LI",{});var E6e=s(wu);jse=n(E6e,"STRONG",{});var yYr=s(jse);nbo=r(yYr,"wav2vec2"),yYr.forEach(t),sbo=r(E6e," \u2014 "),Eq=n(E6e,"A",{href:!0});var LYr=s(Eq);lbo=r(LYr,"Wav2Vec2Model"),LYr.forEach(t),ibo=r(E6e," (Wav2Vec2 model)"),E6e.forEach(t),dbo=i($),Au=n($,"LI",{});var C6e=s(Au);Dse=n(C6e,"STRONG",{});var xYr=s(Dse);cbo=r(xYr,"wavlm"),xYr.forEach(t),fbo=r(C6e," \u2014 "),Cq=n(C6e,"A",{href:!0});var $Yr=s(Cq);mbo=r($Yr,"WavLMModel"),$Yr.forEach(t),gbo=r(C6e," (WavLM model)"),C6e.forEach(t),hbo=i($),yu=n($,"LI",{});var w6e=s(yu);Gse=n(w6e,"STRONG",{});var kYr=s(Gse);pbo=r(kYr,"xglm"),kYr.forEach(t),ubo=r(w6e," \u2014 "),wq=n(w6e,"A",{href:!0});var SYr=s(wq);_bo=r(SYr,"XGLMModel"),SYr.forEach(t),bbo=r(w6e," (XGLM model)"),w6e.forEach(t),vbo=i($),Lu=n($,"LI",{});var A6e=s(Lu);Ose=n(A6e,"STRONG",{});var RYr=s(Ose);Fbo=r(RYr,"xlm"),RYr.forEach(t),Tbo=r(A6e," \u2014 "),Aq=n(A6e,"A",{href:!0});var BYr=s(Aq);Mbo=r(BYr,"XLMModel"),BYr.forEach(t),Ebo=r(A6e," (XLM model)"),A6e.forEach(t),Cbo=i($),xu=n($,"LI",{});var y6e=s(xu);Vse=n(y6e,"STRONG",{});var PYr=s(Vse);wbo=r(PYr,"xlm-prophetnet"),PYr.forEach(t),Abo=r(y6e," \u2014 "),yq=n(y6e,"A",{href:!0});var IYr=s(yq);ybo=r(IYr,"XLMProphetNetModel"),IYr.forEach(t),Lbo=r(y6e," (XLMProphetNet model)"),y6e.forEach(t),xbo=i($),$u=n($,"LI",{});var L6e=s($u);Xse=n(L6e,"STRONG",{});var qYr=s(Xse);$bo=r(qYr,"xlm-roberta"),qYr.forEach(t),kbo=r(L6e," \u2014 "),Lq=n(L6e,"A",{href:!0});var NYr=s(Lq);Sbo=r(NYr,"XLMRobertaModel"),NYr.forEach(t),Rbo=r(L6e," (XLM-RoBERTa model)"),L6e.forEach(t),Bbo=i($),ku=n($,"LI",{});var x6e=s(ku);zse=n(x6e,"STRONG",{});var jYr=s(zse);Pbo=r(jYr,"xlm-roberta-xl"),jYr.forEach(t),Ibo=r(x6e," \u2014 "),xq=n(x6e,"A",{href:!0});var DYr=s(xq);qbo=r(DYr,"XLMRobertaXLModel"),DYr.forEach(t),Nbo=r(x6e," (XLM-RoBERTa-XL model)"),x6e.forEach(t),jbo=i($),Su=n($,"LI",{});var $6e=s(Su);Qse=n($6e,"STRONG",{});var GYr=s(Qse);Dbo=r(GYr,"xlnet"),GYr.forEach(t),Gbo=r($6e," \u2014 "),$q=n($6e,"A",{href:!0});var OYr=s($q);Obo=r(OYr,"XLNetModel"),OYr.forEach(t),Vbo=r($6e," (XLNet model)"),$6e.forEach(t),Xbo=i($),Ru=n($,"LI",{});var k6e=s(Ru);Wse=n(k6e,"STRONG",{});var VYr=s(Wse);zbo=r(VYr,"yolos"),VYr.forEach(t),Qbo=r(k6e," \u2014 "),kq=n(k6e,"A",{href:!0});var XYr=s(kq);Wbo=r(XYr,"YolosModel"),XYr.forEach(t),Hbo=r(k6e," (YOLOS model)"),k6e.forEach(t),Ubo=i($),Bu=n($,"LI",{});var S6e=s(Bu);Hse=n(S6e,"STRONG",{});var zYr=s(Hse);Jbo=r(zYr,"yoso"),zYr.forEach(t),Ybo=r(S6e," \u2014 "),Sq=n(S6e,"A",{href:!0});var QYr=s(Sq);Kbo=r(QYr,"YosoModel"),QYr.forEach(t),Zbo=r(S6e," (YOSO model)"),S6e.forEach(t),$.forEach(t),e4o=i(Zt),Pu=n(Zt,"P",{});var R6e=s(Pu);o4o=r(R6e,"The model is set in evaluation mode by default using "),Use=n(R6e,"CODE",{});var WYr=s(Use);r4o=r(WYr,"model.eval()"),WYr.forEach(t),t4o=r(R6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jse=n(R6e,"CODE",{});var HYr=s(Jse);a4o=r(HYr,"model.train()"),HYr.forEach(t),R6e.forEach(t),n4o=i(Zt),T(Iu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),nIe=i(f),wi=n(f,"H2",{class:!0});var dNe=s(wi);qu=n(dNe,"A",{id:!0,class:!0,href:!0});var UYr=s(qu);Yse=n(UYr,"SPAN",{});var JYr=s(Yse);T(L0.$$.fragment,JYr),JYr.forEach(t),UYr.forEach(t),s4o=i(dNe),Kse=n(dNe,"SPAN",{});var YYr=s(Kse);l4o=r(YYr,"AutoModelForPreTraining"),YYr.forEach(t),dNe.forEach(t),sIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(x0.$$.fragment,Gs),i4o=i(Gs),Ai=n(Gs,"P",{});var mK=s(Ai);d4o=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Rq=n(mK,"A",{href:!0});var KYr=s(Rq);c4o=r(KYr,"from_pretrained()"),KYr.forEach(t),f4o=r(mK," class method or the "),Bq=n(mK,"A",{href:!0});var ZYr=s(Bq);m4o=r(ZYr,"from_config()"),ZYr.forEach(t),g4o=r(mK,` class
method.`),mK.forEach(t),h4o=i(Gs),$0=n(Gs,"P",{});var cNe=s($0);p4o=r(cNe,"This class cannot be instantiated directly using "),Zse=n(cNe,"CODE",{});var eKr=s(Zse);u4o=r(eKr,"__init__()"),eKr.forEach(t),_4o=r(cNe," (throws an error)."),cNe.forEach(t),b4o=i(Gs),rt=n(Gs,"DIV",{class:!0});var rA=s(rt);T(k0.$$.fragment,rA),v4o=i(rA),ele=n(rA,"P",{});var oKr=s(ele);F4o=r(oKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oKr.forEach(t),T4o=i(rA),yi=n(rA,"P",{});var gK=s(yi);M4o=r(gK,`Note:
Loading a model from its configuration file does `),ole=n(gK,"STRONG",{});var rKr=s(ole);E4o=r(rKr,"not"),rKr.forEach(t),C4o=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=n(gK,"A",{href:!0});var tKr=s(Pq);w4o=r(tKr,"from_pretrained()"),tKr.forEach(t),A4o=r(gK," to load the model weights."),gK.forEach(t),y4o=i(rA),T(Nu.$$.fragment,rA),rA.forEach(t),L4o=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(S0.$$.fragment,ea),x4o=i(ea),rle=n(ea,"P",{});var aKr=s(rle);$4o=r(aKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aKr.forEach(t),k4o=i(ea),ya=n(ea,"P",{});var tA=s(ya);S4o=r(tA,"The model class to instantiate is selected based on the "),tle=n(tA,"CODE",{});var nKr=s(tle);R4o=r(nKr,"model_type"),nKr.forEach(t),B4o=r(tA,` property of the config object (either
passed as an argument or loaded from `),ale=n(tA,"CODE",{});var sKr=s(ale);P4o=r(sKr,"pretrained_model_name_or_path"),sKr.forEach(t),I4o=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nle=n(tA,"CODE",{});var lKr=s(nle);q4o=r(lKr,"pretrained_model_name_or_path"),lKr.forEach(t),N4o=r(tA,":"),tA.forEach(t),j4o=i(ea),G=n(ea,"UL",{});var V=s(G);ju=n(V,"LI",{});var B6e=s(ju);sle=n(B6e,"STRONG",{});var iKr=s(sle);D4o=r(iKr,"albert"),iKr.forEach(t),G4o=r(B6e," \u2014 "),Iq=n(B6e,"A",{href:!0});var dKr=s(Iq);O4o=r(dKr,"AlbertForPreTraining"),dKr.forEach(t),V4o=r(B6e," (ALBERT model)"),B6e.forEach(t),X4o=i(V),Du=n(V,"LI",{});var P6e=s(Du);lle=n(P6e,"STRONG",{});var cKr=s(lle);z4o=r(cKr,"bart"),cKr.forEach(t),Q4o=r(P6e," \u2014 "),qq=n(P6e,"A",{href:!0});var fKr=s(qq);W4o=r(fKr,"BartForConditionalGeneration"),fKr.forEach(t),H4o=r(P6e," (BART model)"),P6e.forEach(t),U4o=i(V),Gu=n(V,"LI",{});var I6e=s(Gu);ile=n(I6e,"STRONG",{});var mKr=s(ile);J4o=r(mKr,"bert"),mKr.forEach(t),Y4o=r(I6e," \u2014 "),Nq=n(I6e,"A",{href:!0});var gKr=s(Nq);K4o=r(gKr,"BertForPreTraining"),gKr.forEach(t),Z4o=r(I6e," (BERT model)"),I6e.forEach(t),e5o=i(V),Ou=n(V,"LI",{});var q6e=s(Ou);dle=n(q6e,"STRONG",{});var hKr=s(dle);o5o=r(hKr,"big_bird"),hKr.forEach(t),r5o=r(q6e," \u2014 "),jq=n(q6e,"A",{href:!0});var pKr=s(jq);t5o=r(pKr,"BigBirdForPreTraining"),pKr.forEach(t),a5o=r(q6e," (BigBird model)"),q6e.forEach(t),n5o=i(V),Vu=n(V,"LI",{});var N6e=s(Vu);cle=n(N6e,"STRONG",{});var uKr=s(cle);s5o=r(uKr,"camembert"),uKr.forEach(t),l5o=r(N6e," \u2014 "),Dq=n(N6e,"A",{href:!0});var _Kr=s(Dq);i5o=r(_Kr,"CamembertForMaskedLM"),_Kr.forEach(t),d5o=r(N6e," (CamemBERT model)"),N6e.forEach(t),c5o=i(V),Xu=n(V,"LI",{});var j6e=s(Xu);fle=n(j6e,"STRONG",{});var bKr=s(fle);f5o=r(bKr,"ctrl"),bKr.forEach(t),m5o=r(j6e," \u2014 "),Gq=n(j6e,"A",{href:!0});var vKr=s(Gq);g5o=r(vKr,"CTRLLMHeadModel"),vKr.forEach(t),h5o=r(j6e," (CTRL model)"),j6e.forEach(t),p5o=i(V),zu=n(V,"LI",{});var D6e=s(zu);mle=n(D6e,"STRONG",{});var FKr=s(mle);u5o=r(FKr,"data2vec-text"),FKr.forEach(t),_5o=r(D6e," \u2014 "),Oq=n(D6e,"A",{href:!0});var TKr=s(Oq);b5o=r(TKr,"Data2VecTextForMaskedLM"),TKr.forEach(t),v5o=r(D6e," (Data2VecText model)"),D6e.forEach(t),F5o=i(V),Qu=n(V,"LI",{});var G6e=s(Qu);gle=n(G6e,"STRONG",{});var MKr=s(gle);T5o=r(MKr,"deberta"),MKr.forEach(t),M5o=r(G6e," \u2014 "),Vq=n(G6e,"A",{href:!0});var EKr=s(Vq);E5o=r(EKr,"DebertaForMaskedLM"),EKr.forEach(t),C5o=r(G6e," (DeBERTa model)"),G6e.forEach(t),w5o=i(V),Wu=n(V,"LI",{});var O6e=s(Wu);hle=n(O6e,"STRONG",{});var CKr=s(hle);A5o=r(CKr,"deberta-v2"),CKr.forEach(t),y5o=r(O6e," \u2014 "),Xq=n(O6e,"A",{href:!0});var wKr=s(Xq);L5o=r(wKr,"DebertaV2ForMaskedLM"),wKr.forEach(t),x5o=r(O6e," (DeBERTa-v2 model)"),O6e.forEach(t),$5o=i(V),Hu=n(V,"LI",{});var V6e=s(Hu);ple=n(V6e,"STRONG",{});var AKr=s(ple);k5o=r(AKr,"distilbert"),AKr.forEach(t),S5o=r(V6e," \u2014 "),zq=n(V6e,"A",{href:!0});var yKr=s(zq);R5o=r(yKr,"DistilBertForMaskedLM"),yKr.forEach(t),B5o=r(V6e," (DistilBERT model)"),V6e.forEach(t),P5o=i(V),Uu=n(V,"LI",{});var X6e=s(Uu);ule=n(X6e,"STRONG",{});var LKr=s(ule);I5o=r(LKr,"electra"),LKr.forEach(t),q5o=r(X6e," \u2014 "),Qq=n(X6e,"A",{href:!0});var xKr=s(Qq);N5o=r(xKr,"ElectraForPreTraining"),xKr.forEach(t),j5o=r(X6e," (ELECTRA model)"),X6e.forEach(t),D5o=i(V),Ju=n(V,"LI",{});var z6e=s(Ju);_le=n(z6e,"STRONG",{});var $Kr=s(_le);G5o=r($Kr,"flaubert"),$Kr.forEach(t),O5o=r(z6e," \u2014 "),Wq=n(z6e,"A",{href:!0});var kKr=s(Wq);V5o=r(kKr,"FlaubertWithLMHeadModel"),kKr.forEach(t),X5o=r(z6e," (FlauBERT model)"),z6e.forEach(t),z5o=i(V),Yu=n(V,"LI",{});var Q6e=s(Yu);ble=n(Q6e,"STRONG",{});var SKr=s(ble);Q5o=r(SKr,"flava"),SKr.forEach(t),W5o=r(Q6e," \u2014 "),Hq=n(Q6e,"A",{href:!0});var RKr=s(Hq);H5o=r(RKr,"FlavaForPreTraining"),RKr.forEach(t),U5o=r(Q6e," (Flava model)"),Q6e.forEach(t),J5o=i(V),Ku=n(V,"LI",{});var W6e=s(Ku);vle=n(W6e,"STRONG",{});var BKr=s(vle);Y5o=r(BKr,"fnet"),BKr.forEach(t),K5o=r(W6e," \u2014 "),Uq=n(W6e,"A",{href:!0});var PKr=s(Uq);Z5o=r(PKr,"FNetForPreTraining"),PKr.forEach(t),evo=r(W6e," (FNet model)"),W6e.forEach(t),ovo=i(V),Zu=n(V,"LI",{});var H6e=s(Zu);Fle=n(H6e,"STRONG",{});var IKr=s(Fle);rvo=r(IKr,"fsmt"),IKr.forEach(t),tvo=r(H6e," \u2014 "),Jq=n(H6e,"A",{href:!0});var qKr=s(Jq);avo=r(qKr,"FSMTForConditionalGeneration"),qKr.forEach(t),nvo=r(H6e," (FairSeq Machine-Translation model)"),H6e.forEach(t),svo=i(V),e_=n(V,"LI",{});var U6e=s(e_);Tle=n(U6e,"STRONG",{});var NKr=s(Tle);lvo=r(NKr,"funnel"),NKr.forEach(t),ivo=r(U6e," \u2014 "),Yq=n(U6e,"A",{href:!0});var jKr=s(Yq);dvo=r(jKr,"FunnelForPreTraining"),jKr.forEach(t),cvo=r(U6e," (Funnel Transformer model)"),U6e.forEach(t),fvo=i(V),o_=n(V,"LI",{});var J6e=s(o_);Mle=n(J6e,"STRONG",{});var DKr=s(Mle);mvo=r(DKr,"gpt2"),DKr.forEach(t),gvo=r(J6e," \u2014 "),Kq=n(J6e,"A",{href:!0});var GKr=s(Kq);hvo=r(GKr,"GPT2LMHeadModel"),GKr.forEach(t),pvo=r(J6e," (OpenAI GPT-2 model)"),J6e.forEach(t),uvo=i(V),r_=n(V,"LI",{});var Y6e=s(r_);Ele=n(Y6e,"STRONG",{});var OKr=s(Ele);_vo=r(OKr,"ibert"),OKr.forEach(t),bvo=r(Y6e," \u2014 "),Zq=n(Y6e,"A",{href:!0});var VKr=s(Zq);vvo=r(VKr,"IBertForMaskedLM"),VKr.forEach(t),Fvo=r(Y6e," (I-BERT model)"),Y6e.forEach(t),Tvo=i(V),t_=n(V,"LI",{});var K6e=s(t_);Cle=n(K6e,"STRONG",{});var XKr=s(Cle);Mvo=r(XKr,"layoutlm"),XKr.forEach(t),Evo=r(K6e," \u2014 "),eN=n(K6e,"A",{href:!0});var zKr=s(eN);Cvo=r(zKr,"LayoutLMForMaskedLM"),zKr.forEach(t),wvo=r(K6e," (LayoutLM model)"),K6e.forEach(t),Avo=i(V),a_=n(V,"LI",{});var Z6e=s(a_);wle=n(Z6e,"STRONG",{});var QKr=s(wle);yvo=r(QKr,"longformer"),QKr.forEach(t),Lvo=r(Z6e," \u2014 "),oN=n(Z6e,"A",{href:!0});var WKr=s(oN);xvo=r(WKr,"LongformerForMaskedLM"),WKr.forEach(t),$vo=r(Z6e," (Longformer model)"),Z6e.forEach(t),kvo=i(V),n_=n(V,"LI",{});var e0e=s(n_);Ale=n(e0e,"STRONG",{});var HKr=s(Ale);Svo=r(HKr,"lxmert"),HKr.forEach(t),Rvo=r(e0e," \u2014 "),rN=n(e0e,"A",{href:!0});var UKr=s(rN);Bvo=r(UKr,"LxmertForPreTraining"),UKr.forEach(t),Pvo=r(e0e," (LXMERT model)"),e0e.forEach(t),Ivo=i(V),s_=n(V,"LI",{});var o0e=s(s_);yle=n(o0e,"STRONG",{});var JKr=s(yle);qvo=r(JKr,"megatron-bert"),JKr.forEach(t),Nvo=r(o0e," \u2014 "),tN=n(o0e,"A",{href:!0});var YKr=s(tN);jvo=r(YKr,"MegatronBertForPreTraining"),YKr.forEach(t),Dvo=r(o0e," (MegatronBert model)"),o0e.forEach(t),Gvo=i(V),l_=n(V,"LI",{});var r0e=s(l_);Lle=n(r0e,"STRONG",{});var KKr=s(Lle);Ovo=r(KKr,"mobilebert"),KKr.forEach(t),Vvo=r(r0e," \u2014 "),aN=n(r0e,"A",{href:!0});var ZKr=s(aN);Xvo=r(ZKr,"MobileBertForPreTraining"),ZKr.forEach(t),zvo=r(r0e," (MobileBERT model)"),r0e.forEach(t),Qvo=i(V),i_=n(V,"LI",{});var t0e=s(i_);xle=n(t0e,"STRONG",{});var eZr=s(xle);Wvo=r(eZr,"mpnet"),eZr.forEach(t),Hvo=r(t0e," \u2014 "),nN=n(t0e,"A",{href:!0});var oZr=s(nN);Uvo=r(oZr,"MPNetForMaskedLM"),oZr.forEach(t),Jvo=r(t0e," (MPNet model)"),t0e.forEach(t),Yvo=i(V),d_=n(V,"LI",{});var a0e=s(d_);$le=n(a0e,"STRONG",{});var rZr=s($le);Kvo=r(rZr,"openai-gpt"),rZr.forEach(t),Zvo=r(a0e," \u2014 "),sN=n(a0e,"A",{href:!0});var tZr=s(sN);eFo=r(tZr,"OpenAIGPTLMHeadModel"),tZr.forEach(t),oFo=r(a0e," (OpenAI GPT model)"),a0e.forEach(t),rFo=i(V),c_=n(V,"LI",{});var n0e=s(c_);kle=n(n0e,"STRONG",{});var aZr=s(kle);tFo=r(aZr,"retribert"),aZr.forEach(t),aFo=r(n0e," \u2014 "),lN=n(n0e,"A",{href:!0});var nZr=s(lN);nFo=r(nZr,"RetriBertModel"),nZr.forEach(t),sFo=r(n0e," (RetriBERT model)"),n0e.forEach(t),lFo=i(V),f_=n(V,"LI",{});var s0e=s(f_);Sle=n(s0e,"STRONG",{});var sZr=s(Sle);iFo=r(sZr,"roberta"),sZr.forEach(t),dFo=r(s0e," \u2014 "),iN=n(s0e,"A",{href:!0});var lZr=s(iN);cFo=r(lZr,"RobertaForMaskedLM"),lZr.forEach(t),fFo=r(s0e," (RoBERTa model)"),s0e.forEach(t),mFo=i(V),m_=n(V,"LI",{});var l0e=s(m_);Rle=n(l0e,"STRONG",{});var iZr=s(Rle);gFo=r(iZr,"squeezebert"),iZr.forEach(t),hFo=r(l0e," \u2014 "),dN=n(l0e,"A",{href:!0});var dZr=s(dN);pFo=r(dZr,"SqueezeBertForMaskedLM"),dZr.forEach(t),uFo=r(l0e," (SqueezeBERT model)"),l0e.forEach(t),_Fo=i(V),g_=n(V,"LI",{});var i0e=s(g_);Ble=n(i0e,"STRONG",{});var cZr=s(Ble);bFo=r(cZr,"t5"),cZr.forEach(t),vFo=r(i0e," \u2014 "),cN=n(i0e,"A",{href:!0});var fZr=s(cN);FFo=r(fZr,"T5ForConditionalGeneration"),fZr.forEach(t),TFo=r(i0e," (T5 model)"),i0e.forEach(t),MFo=i(V),h_=n(V,"LI",{});var d0e=s(h_);Ple=n(d0e,"STRONG",{});var mZr=s(Ple);EFo=r(mZr,"tapas"),mZr.forEach(t),CFo=r(d0e," \u2014 "),fN=n(d0e,"A",{href:!0});var gZr=s(fN);wFo=r(gZr,"TapasForMaskedLM"),gZr.forEach(t),AFo=r(d0e," (TAPAS model)"),d0e.forEach(t),yFo=i(V),p_=n(V,"LI",{});var c0e=s(p_);Ile=n(c0e,"STRONG",{});var hZr=s(Ile);LFo=r(hZr,"transfo-xl"),hZr.forEach(t),xFo=r(c0e," \u2014 "),mN=n(c0e,"A",{href:!0});var pZr=s(mN);$Fo=r(pZr,"TransfoXLLMHeadModel"),pZr.forEach(t),kFo=r(c0e," (Transformer-XL model)"),c0e.forEach(t),SFo=i(V),u_=n(V,"LI",{});var f0e=s(u_);qle=n(f0e,"STRONG",{});var uZr=s(qle);RFo=r(uZr,"unispeech"),uZr.forEach(t),BFo=r(f0e," \u2014 "),gN=n(f0e,"A",{href:!0});var _Zr=s(gN);PFo=r(_Zr,"UniSpeechForPreTraining"),_Zr.forEach(t),IFo=r(f0e," (UniSpeech model)"),f0e.forEach(t),qFo=i(V),__=n(V,"LI",{});var m0e=s(__);Nle=n(m0e,"STRONG",{});var bZr=s(Nle);NFo=r(bZr,"unispeech-sat"),bZr.forEach(t),jFo=r(m0e," \u2014 "),hN=n(m0e,"A",{href:!0});var vZr=s(hN);DFo=r(vZr,"UniSpeechSatForPreTraining"),vZr.forEach(t),GFo=r(m0e," (UniSpeechSat model)"),m0e.forEach(t),OFo=i(V),b_=n(V,"LI",{});var g0e=s(b_);jle=n(g0e,"STRONG",{});var FZr=s(jle);VFo=r(FZr,"visual_bert"),FZr.forEach(t),XFo=r(g0e," \u2014 "),pN=n(g0e,"A",{href:!0});var TZr=s(pN);zFo=r(TZr,"VisualBertForPreTraining"),TZr.forEach(t),QFo=r(g0e," (VisualBert model)"),g0e.forEach(t),WFo=i(V),v_=n(V,"LI",{});var h0e=s(v_);Dle=n(h0e,"STRONG",{});var MZr=s(Dle);HFo=r(MZr,"vit_mae"),MZr.forEach(t),UFo=r(h0e," \u2014 "),uN=n(h0e,"A",{href:!0});var EZr=s(uN);JFo=r(EZr,"ViTMAEForPreTraining"),EZr.forEach(t),YFo=r(h0e," (ViTMAE model)"),h0e.forEach(t),KFo=i(V),F_=n(V,"LI",{});var p0e=s(F_);Gle=n(p0e,"STRONG",{});var CZr=s(Gle);ZFo=r(CZr,"wav2vec2"),CZr.forEach(t),eTo=r(p0e," \u2014 "),_N=n(p0e,"A",{href:!0});var wZr=s(_N);oTo=r(wZr,"Wav2Vec2ForPreTraining"),wZr.forEach(t),rTo=r(p0e," (Wav2Vec2 model)"),p0e.forEach(t),tTo=i(V),T_=n(V,"LI",{});var u0e=s(T_);Ole=n(u0e,"STRONG",{});var AZr=s(Ole);aTo=r(AZr,"xlm"),AZr.forEach(t),nTo=r(u0e," \u2014 "),bN=n(u0e,"A",{href:!0});var yZr=s(bN);sTo=r(yZr,"XLMWithLMHeadModel"),yZr.forEach(t),lTo=r(u0e," (XLM model)"),u0e.forEach(t),iTo=i(V),M_=n(V,"LI",{});var _0e=s(M_);Vle=n(_0e,"STRONG",{});var LZr=s(Vle);dTo=r(LZr,"xlm-roberta"),LZr.forEach(t),cTo=r(_0e," \u2014 "),vN=n(_0e,"A",{href:!0});var xZr=s(vN);fTo=r(xZr,"XLMRobertaForMaskedLM"),xZr.forEach(t),mTo=r(_0e," (XLM-RoBERTa model)"),_0e.forEach(t),gTo=i(V),E_=n(V,"LI",{});var b0e=s(E_);Xle=n(b0e,"STRONG",{});var $Zr=s(Xle);hTo=r($Zr,"xlm-roberta-xl"),$Zr.forEach(t),pTo=r(b0e," \u2014 "),FN=n(b0e,"A",{href:!0});var kZr=s(FN);uTo=r(kZr,"XLMRobertaXLForMaskedLM"),kZr.forEach(t),_To=r(b0e," (XLM-RoBERTa-XL model)"),b0e.forEach(t),bTo=i(V),C_=n(V,"LI",{});var v0e=s(C_);zle=n(v0e,"STRONG",{});var SZr=s(zle);vTo=r(SZr,"xlnet"),SZr.forEach(t),FTo=r(v0e," \u2014 "),TN=n(v0e,"A",{href:!0});var RZr=s(TN);TTo=r(RZr,"XLNetLMHeadModel"),RZr.forEach(t),MTo=r(v0e," (XLNet model)"),v0e.forEach(t),V.forEach(t),ETo=i(ea),w_=n(ea,"P",{});var F0e=s(w_);CTo=r(F0e,"The model is set in evaluation mode by default using "),Qle=n(F0e,"CODE",{});var BZr=s(Qle);wTo=r(BZr,"model.eval()"),BZr.forEach(t),ATo=r(F0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wle=n(F0e,"CODE",{});var PZr=s(Wle);yTo=r(PZr,"model.train()"),PZr.forEach(t),F0e.forEach(t),LTo=i(ea),T(A_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),lIe=i(f),Li=n(f,"H2",{class:!0});var fNe=s(Li);y_=n(fNe,"A",{id:!0,class:!0,href:!0});var IZr=s(y_);Hle=n(IZr,"SPAN",{});var qZr=s(Hle);T(R0.$$.fragment,qZr),qZr.forEach(t),IZr.forEach(t),xTo=i(fNe),Ule=n(fNe,"SPAN",{});var NZr=s(Ule);$To=r(NZr,"AutoModelForCausalLM"),NZr.forEach(t),fNe.forEach(t),iIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(B0.$$.fragment,Os),kTo=i(Os),xi=n(Os,"P",{});var hK=s(xi);STo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MN=n(hK,"A",{href:!0});var jZr=s(MN);RTo=r(jZr,"from_pretrained()"),jZr.forEach(t),BTo=r(hK," class method or the "),EN=n(hK,"A",{href:!0});var DZr=s(EN);PTo=r(DZr,"from_config()"),DZr.forEach(t),ITo=r(hK,` class
method.`),hK.forEach(t),qTo=i(Os),P0=n(Os,"P",{});var mNe=s(P0);NTo=r(mNe,"This class cannot be instantiated directly using "),Jle=n(mNe,"CODE",{});var GZr=s(Jle);jTo=r(GZr,"__init__()"),GZr.forEach(t),DTo=r(mNe," (throws an error)."),mNe.forEach(t),GTo=i(Os),tt=n(Os,"DIV",{class:!0});var aA=s(tt);T(I0.$$.fragment,aA),OTo=i(aA),Yle=n(aA,"P",{});var OZr=s(Yle);VTo=r(OZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),OZr.forEach(t),XTo=i(aA),$i=n(aA,"P",{});var pK=s($i);zTo=r(pK,`Note:
Loading a model from its configuration file does `),Kle=n(pK,"STRONG",{});var VZr=s(Kle);QTo=r(VZr,"not"),VZr.forEach(t),WTo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=n(pK,"A",{href:!0});var XZr=s(CN);HTo=r(XZr,"from_pretrained()"),XZr.forEach(t),UTo=r(pK," to load the model weights."),pK.forEach(t),JTo=i(aA),T(L_.$$.fragment,aA),aA.forEach(t),YTo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(q0.$$.fragment,oa),KTo=i(oa),Zle=n(oa,"P",{});var zZr=s(Zle);ZTo=r(zZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zZr.forEach(t),e7o=i(oa),La=n(oa,"P",{});var nA=s(La);o7o=r(nA,"The model class to instantiate is selected based on the "),eie=n(nA,"CODE",{});var QZr=s(eie);r7o=r(QZr,"model_type"),QZr.forEach(t),t7o=r(nA,` property of the config object (either
passed as an argument or loaded from `),oie=n(nA,"CODE",{});var WZr=s(oie);a7o=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),n7o=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=n(nA,"CODE",{});var HZr=s(rie);s7o=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),l7o=r(nA,":"),nA.forEach(t),i7o=i(oa),z=n(oa,"UL",{});var W=s(z);x_=n(W,"LI",{});var T0e=s(x_);tie=n(T0e,"STRONG",{});var UZr=s(tie);d7o=r(UZr,"bart"),UZr.forEach(t),c7o=r(T0e," \u2014 "),wN=n(T0e,"A",{href:!0});var JZr=s(wN);f7o=r(JZr,"BartForCausalLM"),JZr.forEach(t),m7o=r(T0e," (BART model)"),T0e.forEach(t),g7o=i(W),$_=n(W,"LI",{});var M0e=s($_);aie=n(M0e,"STRONG",{});var YZr=s(aie);h7o=r(YZr,"bert"),YZr.forEach(t),p7o=r(M0e," \u2014 "),AN=n(M0e,"A",{href:!0});var KZr=s(AN);u7o=r(KZr,"BertLMHeadModel"),KZr.forEach(t),_7o=r(M0e," (BERT model)"),M0e.forEach(t),b7o=i(W),k_=n(W,"LI",{});var E0e=s(k_);nie=n(E0e,"STRONG",{});var ZZr=s(nie);v7o=r(ZZr,"bert-generation"),ZZr.forEach(t),F7o=r(E0e," \u2014 "),yN=n(E0e,"A",{href:!0});var eet=s(yN);T7o=r(eet,"BertGenerationDecoder"),eet.forEach(t),M7o=r(E0e," (Bert Generation model)"),E0e.forEach(t),E7o=i(W),S_=n(W,"LI",{});var C0e=s(S_);sie=n(C0e,"STRONG",{});var oet=s(sie);C7o=r(oet,"big_bird"),oet.forEach(t),w7o=r(C0e," \u2014 "),LN=n(C0e,"A",{href:!0});var ret=s(LN);A7o=r(ret,"BigBirdForCausalLM"),ret.forEach(t),y7o=r(C0e," (BigBird model)"),C0e.forEach(t),L7o=i(W),R_=n(W,"LI",{});var w0e=s(R_);lie=n(w0e,"STRONG",{});var tet=s(lie);x7o=r(tet,"bigbird_pegasus"),tet.forEach(t),$7o=r(w0e," \u2014 "),xN=n(w0e,"A",{href:!0});var aet=s(xN);k7o=r(aet,"BigBirdPegasusForCausalLM"),aet.forEach(t),S7o=r(w0e," (BigBirdPegasus model)"),w0e.forEach(t),R7o=i(W),B_=n(W,"LI",{});var A0e=s(B_);iie=n(A0e,"STRONG",{});var net=s(iie);B7o=r(net,"blenderbot"),net.forEach(t),P7o=r(A0e," \u2014 "),$N=n(A0e,"A",{href:!0});var set=s($N);I7o=r(set,"BlenderbotForCausalLM"),set.forEach(t),q7o=r(A0e," (Blenderbot model)"),A0e.forEach(t),N7o=i(W),P_=n(W,"LI",{});var y0e=s(P_);die=n(y0e,"STRONG",{});var iet=s(die);j7o=r(iet,"blenderbot-small"),iet.forEach(t),D7o=r(y0e," \u2014 "),kN=n(y0e,"A",{href:!0});var det=s(kN);G7o=r(det,"BlenderbotSmallForCausalLM"),det.forEach(t),O7o=r(y0e," (BlenderbotSmall model)"),y0e.forEach(t),V7o=i(W),I_=n(W,"LI",{});var L0e=s(I_);cie=n(L0e,"STRONG",{});var cet=s(cie);X7o=r(cet,"camembert"),cet.forEach(t),z7o=r(L0e," \u2014 "),SN=n(L0e,"A",{href:!0});var fet=s(SN);Q7o=r(fet,"CamembertForCausalLM"),fet.forEach(t),W7o=r(L0e," (CamemBERT model)"),L0e.forEach(t),H7o=i(W),q_=n(W,"LI",{});var x0e=s(q_);fie=n(x0e,"STRONG",{});var met=s(fie);U7o=r(met,"ctrl"),met.forEach(t),J7o=r(x0e," \u2014 "),RN=n(x0e,"A",{href:!0});var get=s(RN);Y7o=r(get,"CTRLLMHeadModel"),get.forEach(t),K7o=r(x0e," (CTRL model)"),x0e.forEach(t),Z7o=i(W),N_=n(W,"LI",{});var $0e=s(N_);mie=n($0e,"STRONG",{});var het=s(mie);eMo=r(het,"data2vec-text"),het.forEach(t),oMo=r($0e," \u2014 "),BN=n($0e,"A",{href:!0});var pet=s(BN);rMo=r(pet,"Data2VecTextForCausalLM"),pet.forEach(t),tMo=r($0e," (Data2VecText model)"),$0e.forEach(t),aMo=i(W),j_=n(W,"LI",{});var k0e=s(j_);gie=n(k0e,"STRONG",{});var uet=s(gie);nMo=r(uet,"electra"),uet.forEach(t),sMo=r(k0e," \u2014 "),PN=n(k0e,"A",{href:!0});var _et=s(PN);lMo=r(_et,"ElectraForCausalLM"),_et.forEach(t),iMo=r(k0e," (ELECTRA model)"),k0e.forEach(t),dMo=i(W),D_=n(W,"LI",{});var S0e=s(D_);hie=n(S0e,"STRONG",{});var bet=s(hie);cMo=r(bet,"gpt2"),bet.forEach(t),fMo=r(S0e," \u2014 "),IN=n(S0e,"A",{href:!0});var vet=s(IN);mMo=r(vet,"GPT2LMHeadModel"),vet.forEach(t),gMo=r(S0e," (OpenAI GPT-2 model)"),S0e.forEach(t),hMo=i(W),G_=n(W,"LI",{});var R0e=s(G_);pie=n(R0e,"STRONG",{});var Fet=s(pie);pMo=r(Fet,"gpt_neo"),Fet.forEach(t),uMo=r(R0e," \u2014 "),qN=n(R0e,"A",{href:!0});var Tet=s(qN);_Mo=r(Tet,"GPTNeoForCausalLM"),Tet.forEach(t),bMo=r(R0e," (GPT Neo model)"),R0e.forEach(t),vMo=i(W),O_=n(W,"LI",{});var B0e=s(O_);uie=n(B0e,"STRONG",{});var Met=s(uie);FMo=r(Met,"gptj"),Met.forEach(t),TMo=r(B0e," \u2014 "),NN=n(B0e,"A",{href:!0});var Eet=s(NN);MMo=r(Eet,"GPTJForCausalLM"),Eet.forEach(t),EMo=r(B0e," (GPT-J model)"),B0e.forEach(t),CMo=i(W),V_=n(W,"LI",{});var P0e=s(V_);_ie=n(P0e,"STRONG",{});var Cet=s(_ie);wMo=r(Cet,"marian"),Cet.forEach(t),AMo=r(P0e," \u2014 "),jN=n(P0e,"A",{href:!0});var wet=s(jN);yMo=r(wet,"MarianForCausalLM"),wet.forEach(t),LMo=r(P0e," (Marian model)"),P0e.forEach(t),xMo=i(W),X_=n(W,"LI",{});var I0e=s(X_);bie=n(I0e,"STRONG",{});var Aet=s(bie);$Mo=r(Aet,"mbart"),Aet.forEach(t),kMo=r(I0e," \u2014 "),DN=n(I0e,"A",{href:!0});var yet=s(DN);SMo=r(yet,"MBartForCausalLM"),yet.forEach(t),RMo=r(I0e," (mBART model)"),I0e.forEach(t),BMo=i(W),z_=n(W,"LI",{});var q0e=s(z_);vie=n(q0e,"STRONG",{});var Let=s(vie);PMo=r(Let,"megatron-bert"),Let.forEach(t),IMo=r(q0e," \u2014 "),GN=n(q0e,"A",{href:!0});var xet=s(GN);qMo=r(xet,"MegatronBertForCausalLM"),xet.forEach(t),NMo=r(q0e," (MegatronBert model)"),q0e.forEach(t),jMo=i(W),Q_=n(W,"LI",{});var N0e=s(Q_);Fie=n(N0e,"STRONG",{});var $et=s(Fie);DMo=r($et,"openai-gpt"),$et.forEach(t),GMo=r(N0e," \u2014 "),ON=n(N0e,"A",{href:!0});var ket=s(ON);OMo=r(ket,"OpenAIGPTLMHeadModel"),ket.forEach(t),VMo=r(N0e," (OpenAI GPT model)"),N0e.forEach(t),XMo=i(W),W_=n(W,"LI",{});var j0e=s(W_);Tie=n(j0e,"STRONG",{});var Set=s(Tie);zMo=r(Set,"opt"),Set.forEach(t),QMo=r(j0e," \u2014 "),VN=n(j0e,"A",{href:!0});var Ret=s(VN);WMo=r(Ret,"OPTForCausalLM"),Ret.forEach(t),HMo=r(j0e," (OPT model)"),j0e.forEach(t),UMo=i(W),H_=n(W,"LI",{});var D0e=s(H_);Mie=n(D0e,"STRONG",{});var Bet=s(Mie);JMo=r(Bet,"pegasus"),Bet.forEach(t),YMo=r(D0e," \u2014 "),XN=n(D0e,"A",{href:!0});var Pet=s(XN);KMo=r(Pet,"PegasusForCausalLM"),Pet.forEach(t),ZMo=r(D0e," (Pegasus model)"),D0e.forEach(t),eEo=i(W),U_=n(W,"LI",{});var G0e=s(U_);Eie=n(G0e,"STRONG",{});var Iet=s(Eie);oEo=r(Iet,"plbart"),Iet.forEach(t),rEo=r(G0e," \u2014 "),zN=n(G0e,"A",{href:!0});var qet=s(zN);tEo=r(qet,"PLBartForCausalLM"),qet.forEach(t),aEo=r(G0e," (PLBart model)"),G0e.forEach(t),nEo=i(W),J_=n(W,"LI",{});var O0e=s(J_);Cie=n(O0e,"STRONG",{});var Net=s(Cie);sEo=r(Net,"prophetnet"),Net.forEach(t),lEo=r(O0e," \u2014 "),QN=n(O0e,"A",{href:!0});var jet=s(QN);iEo=r(jet,"ProphetNetForCausalLM"),jet.forEach(t),dEo=r(O0e," (ProphetNet model)"),O0e.forEach(t),cEo=i(W),Y_=n(W,"LI",{});var V0e=s(Y_);wie=n(V0e,"STRONG",{});var Det=s(wie);fEo=r(Det,"qdqbert"),Det.forEach(t),mEo=r(V0e," \u2014 "),WN=n(V0e,"A",{href:!0});var Get=s(WN);gEo=r(Get,"QDQBertLMHeadModel"),Get.forEach(t),hEo=r(V0e," (QDQBert model)"),V0e.forEach(t),pEo=i(W),K_=n(W,"LI",{});var X0e=s(K_);Aie=n(X0e,"STRONG",{});var Oet=s(Aie);uEo=r(Oet,"reformer"),Oet.forEach(t),_Eo=r(X0e," \u2014 "),HN=n(X0e,"A",{href:!0});var Vet=s(HN);bEo=r(Vet,"ReformerModelWithLMHead"),Vet.forEach(t),vEo=r(X0e," (Reformer model)"),X0e.forEach(t),FEo=i(W),Z_=n(W,"LI",{});var z0e=s(Z_);yie=n(z0e,"STRONG",{});var Xet=s(yie);TEo=r(Xet,"rembert"),Xet.forEach(t),MEo=r(z0e," \u2014 "),UN=n(z0e,"A",{href:!0});var zet=s(UN);EEo=r(zet,"RemBertForCausalLM"),zet.forEach(t),CEo=r(z0e," (RemBERT model)"),z0e.forEach(t),wEo=i(W),e2=n(W,"LI",{});var Q0e=s(e2);Lie=n(Q0e,"STRONG",{});var Qet=s(Lie);AEo=r(Qet,"roberta"),Qet.forEach(t),yEo=r(Q0e," \u2014 "),JN=n(Q0e,"A",{href:!0});var Wet=s(JN);LEo=r(Wet,"RobertaForCausalLM"),Wet.forEach(t),xEo=r(Q0e," (RoBERTa model)"),Q0e.forEach(t),$Eo=i(W),o2=n(W,"LI",{});var W0e=s(o2);xie=n(W0e,"STRONG",{});var Het=s(xie);kEo=r(Het,"roformer"),Het.forEach(t),SEo=r(W0e," \u2014 "),YN=n(W0e,"A",{href:!0});var Uet=s(YN);REo=r(Uet,"RoFormerForCausalLM"),Uet.forEach(t),BEo=r(W0e," (RoFormer model)"),W0e.forEach(t),PEo=i(W),r2=n(W,"LI",{});var H0e=s(r2);$ie=n(H0e,"STRONG",{});var Jet=s($ie);IEo=r(Jet,"speech_to_text_2"),Jet.forEach(t),qEo=r(H0e," \u2014 "),KN=n(H0e,"A",{href:!0});var Yet=s(KN);NEo=r(Yet,"Speech2Text2ForCausalLM"),Yet.forEach(t),jEo=r(H0e," (Speech2Text2 model)"),H0e.forEach(t),DEo=i(W),t2=n(W,"LI",{});var U0e=s(t2);kie=n(U0e,"STRONG",{});var Ket=s(kie);GEo=r(Ket,"transfo-xl"),Ket.forEach(t),OEo=r(U0e," \u2014 "),ZN=n(U0e,"A",{href:!0});var Zet=s(ZN);VEo=r(Zet,"TransfoXLLMHeadModel"),Zet.forEach(t),XEo=r(U0e," (Transformer-XL model)"),U0e.forEach(t),zEo=i(W),a2=n(W,"LI",{});var J0e=s(a2);Sie=n(J0e,"STRONG",{});var eot=s(Sie);QEo=r(eot,"trocr"),eot.forEach(t),WEo=r(J0e," \u2014 "),ej=n(J0e,"A",{href:!0});var oot=s(ej);HEo=r(oot,"TrOCRForCausalLM"),oot.forEach(t),UEo=r(J0e," (TrOCR model)"),J0e.forEach(t),JEo=i(W),n2=n(W,"LI",{});var Y0e=s(n2);Rie=n(Y0e,"STRONG",{});var rot=s(Rie);YEo=r(rot,"xglm"),rot.forEach(t),KEo=r(Y0e," \u2014 "),oj=n(Y0e,"A",{href:!0});var tot=s(oj);ZEo=r(tot,"XGLMForCausalLM"),tot.forEach(t),eCo=r(Y0e," (XGLM model)"),Y0e.forEach(t),oCo=i(W),s2=n(W,"LI",{});var K0e=s(s2);Bie=n(K0e,"STRONG",{});var aot=s(Bie);rCo=r(aot,"xlm"),aot.forEach(t),tCo=r(K0e," \u2014 "),rj=n(K0e,"A",{href:!0});var not=s(rj);aCo=r(not,"XLMWithLMHeadModel"),not.forEach(t),nCo=r(K0e," (XLM model)"),K0e.forEach(t),sCo=i(W),l2=n(W,"LI",{});var Z0e=s(l2);Pie=n(Z0e,"STRONG",{});var sot=s(Pie);lCo=r(sot,"xlm-prophetnet"),sot.forEach(t),iCo=r(Z0e," \u2014 "),tj=n(Z0e,"A",{href:!0});var lot=s(tj);dCo=r(lot,"XLMProphetNetForCausalLM"),lot.forEach(t),cCo=r(Z0e," (XLMProphetNet model)"),Z0e.forEach(t),fCo=i(W),i2=n(W,"LI",{});var eye=s(i2);Iie=n(eye,"STRONG",{});var iot=s(Iie);mCo=r(iot,"xlm-roberta"),iot.forEach(t),gCo=r(eye," \u2014 "),aj=n(eye,"A",{href:!0});var dot=s(aj);hCo=r(dot,"XLMRobertaForCausalLM"),dot.forEach(t),pCo=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),uCo=i(W),d2=n(W,"LI",{});var oye=s(d2);qie=n(oye,"STRONG",{});var cot=s(qie);_Co=r(cot,"xlm-roberta-xl"),cot.forEach(t),bCo=r(oye," \u2014 "),nj=n(oye,"A",{href:!0});var fot=s(nj);vCo=r(fot,"XLMRobertaXLForCausalLM"),fot.forEach(t),FCo=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),TCo=i(W),c2=n(W,"LI",{});var rye=s(c2);Nie=n(rye,"STRONG",{});var mot=s(Nie);MCo=r(mot,"xlnet"),mot.forEach(t),ECo=r(rye," \u2014 "),sj=n(rye,"A",{href:!0});var got=s(sj);CCo=r(got,"XLNetLMHeadModel"),got.forEach(t),wCo=r(rye," (XLNet model)"),rye.forEach(t),W.forEach(t),ACo=i(oa),f2=n(oa,"P",{});var tye=s(f2);yCo=r(tye,"The model is set in evaluation mode by default using "),jie=n(tye,"CODE",{});var hot=s(jie);LCo=r(hot,"model.eval()"),hot.forEach(t),xCo=r(tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(tye,"CODE",{});var pot=s(Die);$Co=r(pot,"model.train()"),pot.forEach(t),tye.forEach(t),kCo=i(oa),T(m2.$$.fragment,oa),oa.forEach(t),Os.forEach(t),dIe=i(f),ki=n(f,"H2",{class:!0});var gNe=s(ki);g2=n(gNe,"A",{id:!0,class:!0,href:!0});var uot=s(g2);Gie=n(uot,"SPAN",{});var _ot=s(Gie);T(N0.$$.fragment,_ot),_ot.forEach(t),uot.forEach(t),SCo=i(gNe),Oie=n(gNe,"SPAN",{});var bot=s(Oie);RCo=r(bot,"AutoModelForMaskedLM"),bot.forEach(t),gNe.forEach(t),cIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(j0.$$.fragment,Vs),BCo=i(Vs),Si=n(Vs,"P",{});var uK=s(Si);PCo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lj=n(uK,"A",{href:!0});var vot=s(lj);ICo=r(vot,"from_pretrained()"),vot.forEach(t),qCo=r(uK," class method or the "),ij=n(uK,"A",{href:!0});var Fot=s(ij);NCo=r(Fot,"from_config()"),Fot.forEach(t),jCo=r(uK,` class
method.`),uK.forEach(t),DCo=i(Vs),D0=n(Vs,"P",{});var hNe=s(D0);GCo=r(hNe,"This class cannot be instantiated directly using "),Vie=n(hNe,"CODE",{});var Tot=s(Vie);OCo=r(Tot,"__init__()"),Tot.forEach(t),VCo=r(hNe," (throws an error)."),hNe.forEach(t),XCo=i(Vs),at=n(Vs,"DIV",{class:!0});var sA=s(at);T(G0.$$.fragment,sA),zCo=i(sA),Xie=n(sA,"P",{});var Mot=s(Xie);QCo=r(Mot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Mot.forEach(t),WCo=i(sA),Ri=n(sA,"P",{});var _K=s(Ri);HCo=r(_K,`Note:
Loading a model from its configuration file does `),zie=n(_K,"STRONG",{});var Eot=s(zie);UCo=r(Eot,"not"),Eot.forEach(t),JCo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=n(_K,"A",{href:!0});var Cot=s(dj);YCo=r(Cot,"from_pretrained()"),Cot.forEach(t),KCo=r(_K," to load the model weights."),_K.forEach(t),ZCo=i(sA),T(h2.$$.fragment,sA),sA.forEach(t),e3o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(O0.$$.fragment,ra),o3o=i(ra),Qie=n(ra,"P",{});var wot=s(Qie);r3o=r(wot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wot.forEach(t),t3o=i(ra),xa=n(ra,"P",{});var lA=s(xa);a3o=r(lA,"The model class to instantiate is selected based on the "),Wie=n(lA,"CODE",{});var Aot=s(Wie);n3o=r(Aot,"model_type"),Aot.forEach(t),s3o=r(lA,` property of the config object (either
passed as an argument or loaded from `),Hie=n(lA,"CODE",{});var yot=s(Hie);l3o=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),i3o=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=n(lA,"CODE",{});var Lot=s(Uie);d3o=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),c3o=r(lA,":"),lA.forEach(t),f3o=i(ra),Q=n(ra,"UL",{});var H=s(Q);p2=n(H,"LI",{});var aye=s(p2);Jie=n(aye,"STRONG",{});var xot=s(Jie);m3o=r(xot,"albert"),xot.forEach(t),g3o=r(aye," \u2014 "),cj=n(aye,"A",{href:!0});var $ot=s(cj);h3o=r($ot,"AlbertForMaskedLM"),$ot.forEach(t),p3o=r(aye," (ALBERT model)"),aye.forEach(t),u3o=i(H),u2=n(H,"LI",{});var nye=s(u2);Yie=n(nye,"STRONG",{});var kot=s(Yie);_3o=r(kot,"bart"),kot.forEach(t),b3o=r(nye," \u2014 "),fj=n(nye,"A",{href:!0});var Sot=s(fj);v3o=r(Sot,"BartForConditionalGeneration"),Sot.forEach(t),F3o=r(nye," (BART model)"),nye.forEach(t),T3o=i(H),_2=n(H,"LI",{});var sye=s(_2);Kie=n(sye,"STRONG",{});var Rot=s(Kie);M3o=r(Rot,"bert"),Rot.forEach(t),E3o=r(sye," \u2014 "),mj=n(sye,"A",{href:!0});var Bot=s(mj);C3o=r(Bot,"BertForMaskedLM"),Bot.forEach(t),w3o=r(sye," (BERT model)"),sye.forEach(t),A3o=i(H),b2=n(H,"LI",{});var lye=s(b2);Zie=n(lye,"STRONG",{});var Pot=s(Zie);y3o=r(Pot,"big_bird"),Pot.forEach(t),L3o=r(lye," \u2014 "),gj=n(lye,"A",{href:!0});var Iot=s(gj);x3o=r(Iot,"BigBirdForMaskedLM"),Iot.forEach(t),$3o=r(lye," (BigBird model)"),lye.forEach(t),k3o=i(H),v2=n(H,"LI",{});var iye=s(v2);ede=n(iye,"STRONG",{});var qot=s(ede);S3o=r(qot,"camembert"),qot.forEach(t),R3o=r(iye," \u2014 "),hj=n(iye,"A",{href:!0});var Not=s(hj);B3o=r(Not,"CamembertForMaskedLM"),Not.forEach(t),P3o=r(iye," (CamemBERT model)"),iye.forEach(t),I3o=i(H),F2=n(H,"LI",{});var dye=s(F2);ode=n(dye,"STRONG",{});var jot=s(ode);q3o=r(jot,"convbert"),jot.forEach(t),N3o=r(dye," \u2014 "),pj=n(dye,"A",{href:!0});var Dot=s(pj);j3o=r(Dot,"ConvBertForMaskedLM"),Dot.forEach(t),D3o=r(dye," (ConvBERT model)"),dye.forEach(t),G3o=i(H),T2=n(H,"LI",{});var cye=s(T2);rde=n(cye,"STRONG",{});var Got=s(rde);O3o=r(Got,"data2vec-text"),Got.forEach(t),V3o=r(cye," \u2014 "),uj=n(cye,"A",{href:!0});var Oot=s(uj);X3o=r(Oot,"Data2VecTextForMaskedLM"),Oot.forEach(t),z3o=r(cye," (Data2VecText model)"),cye.forEach(t),Q3o=i(H),M2=n(H,"LI",{});var fye=s(M2);tde=n(fye,"STRONG",{});var Vot=s(tde);W3o=r(Vot,"deberta"),Vot.forEach(t),H3o=r(fye," \u2014 "),_j=n(fye,"A",{href:!0});var Xot=s(_j);U3o=r(Xot,"DebertaForMaskedLM"),Xot.forEach(t),J3o=r(fye," (DeBERTa model)"),fye.forEach(t),Y3o=i(H),E2=n(H,"LI",{});var mye=s(E2);ade=n(mye,"STRONG",{});var zot=s(ade);K3o=r(zot,"deberta-v2"),zot.forEach(t),Z3o=r(mye," \u2014 "),bj=n(mye,"A",{href:!0});var Qot=s(bj);ewo=r(Qot,"DebertaV2ForMaskedLM"),Qot.forEach(t),owo=r(mye," (DeBERTa-v2 model)"),mye.forEach(t),rwo=i(H),C2=n(H,"LI",{});var gye=s(C2);nde=n(gye,"STRONG",{});var Wot=s(nde);two=r(Wot,"distilbert"),Wot.forEach(t),awo=r(gye," \u2014 "),vj=n(gye,"A",{href:!0});var Hot=s(vj);nwo=r(Hot,"DistilBertForMaskedLM"),Hot.forEach(t),swo=r(gye," (DistilBERT model)"),gye.forEach(t),lwo=i(H),w2=n(H,"LI",{});var hye=s(w2);sde=n(hye,"STRONG",{});var Uot=s(sde);iwo=r(Uot,"electra"),Uot.forEach(t),dwo=r(hye," \u2014 "),Fj=n(hye,"A",{href:!0});var Jot=s(Fj);cwo=r(Jot,"ElectraForMaskedLM"),Jot.forEach(t),fwo=r(hye," (ELECTRA model)"),hye.forEach(t),mwo=i(H),A2=n(H,"LI",{});var pye=s(A2);lde=n(pye,"STRONG",{});var Yot=s(lde);gwo=r(Yot,"flaubert"),Yot.forEach(t),hwo=r(pye," \u2014 "),Tj=n(pye,"A",{href:!0});var Kot=s(Tj);pwo=r(Kot,"FlaubertWithLMHeadModel"),Kot.forEach(t),uwo=r(pye," (FlauBERT model)"),pye.forEach(t),_wo=i(H),y2=n(H,"LI",{});var uye=s(y2);ide=n(uye,"STRONG",{});var Zot=s(ide);bwo=r(Zot,"fnet"),Zot.forEach(t),vwo=r(uye," \u2014 "),Mj=n(uye,"A",{href:!0});var ert=s(Mj);Fwo=r(ert,"FNetForMaskedLM"),ert.forEach(t),Two=r(uye," (FNet model)"),uye.forEach(t),Mwo=i(H),L2=n(H,"LI",{});var _ye=s(L2);dde=n(_ye,"STRONG",{});var ort=s(dde);Ewo=r(ort,"funnel"),ort.forEach(t),Cwo=r(_ye," \u2014 "),Ej=n(_ye,"A",{href:!0});var rrt=s(Ej);wwo=r(rrt,"FunnelForMaskedLM"),rrt.forEach(t),Awo=r(_ye," (Funnel Transformer model)"),_ye.forEach(t),ywo=i(H),x2=n(H,"LI",{});var bye=s(x2);cde=n(bye,"STRONG",{});var trt=s(cde);Lwo=r(trt,"ibert"),trt.forEach(t),xwo=r(bye," \u2014 "),Cj=n(bye,"A",{href:!0});var art=s(Cj);$wo=r(art,"IBertForMaskedLM"),art.forEach(t),kwo=r(bye," (I-BERT model)"),bye.forEach(t),Swo=i(H),$2=n(H,"LI",{});var vye=s($2);fde=n(vye,"STRONG",{});var nrt=s(fde);Rwo=r(nrt,"layoutlm"),nrt.forEach(t),Bwo=r(vye," \u2014 "),wj=n(vye,"A",{href:!0});var srt=s(wj);Pwo=r(srt,"LayoutLMForMaskedLM"),srt.forEach(t),Iwo=r(vye," (LayoutLM model)"),vye.forEach(t),qwo=i(H),k2=n(H,"LI",{});var Fye=s(k2);mde=n(Fye,"STRONG",{});var lrt=s(mde);Nwo=r(lrt,"longformer"),lrt.forEach(t),jwo=r(Fye," \u2014 "),Aj=n(Fye,"A",{href:!0});var irt=s(Aj);Dwo=r(irt,"LongformerForMaskedLM"),irt.forEach(t),Gwo=r(Fye," (Longformer model)"),Fye.forEach(t),Owo=i(H),S2=n(H,"LI",{});var Tye=s(S2);gde=n(Tye,"STRONG",{});var drt=s(gde);Vwo=r(drt,"mbart"),drt.forEach(t),Xwo=r(Tye," \u2014 "),yj=n(Tye,"A",{href:!0});var crt=s(yj);zwo=r(crt,"MBartForConditionalGeneration"),crt.forEach(t),Qwo=r(Tye," (mBART model)"),Tye.forEach(t),Wwo=i(H),R2=n(H,"LI",{});var Mye=s(R2);hde=n(Mye,"STRONG",{});var frt=s(hde);Hwo=r(frt,"megatron-bert"),frt.forEach(t),Uwo=r(Mye," \u2014 "),Lj=n(Mye,"A",{href:!0});var mrt=s(Lj);Jwo=r(mrt,"MegatronBertForMaskedLM"),mrt.forEach(t),Ywo=r(Mye," (MegatronBert model)"),Mye.forEach(t),Kwo=i(H),B2=n(H,"LI",{});var Eye=s(B2);pde=n(Eye,"STRONG",{});var grt=s(pde);Zwo=r(grt,"mobilebert"),grt.forEach(t),eAo=r(Eye," \u2014 "),xj=n(Eye,"A",{href:!0});var hrt=s(xj);oAo=r(hrt,"MobileBertForMaskedLM"),hrt.forEach(t),rAo=r(Eye," (MobileBERT model)"),Eye.forEach(t),tAo=i(H),P2=n(H,"LI",{});var Cye=s(P2);ude=n(Cye,"STRONG",{});var prt=s(ude);aAo=r(prt,"mpnet"),prt.forEach(t),nAo=r(Cye," \u2014 "),$j=n(Cye,"A",{href:!0});var urt=s($j);sAo=r(urt,"MPNetForMaskedLM"),urt.forEach(t),lAo=r(Cye," (MPNet model)"),Cye.forEach(t),iAo=i(H),I2=n(H,"LI",{});var wye=s(I2);_de=n(wye,"STRONG",{});var _rt=s(_de);dAo=r(_rt,"nystromformer"),_rt.forEach(t),cAo=r(wye," \u2014 "),kj=n(wye,"A",{href:!0});var brt=s(kj);fAo=r(brt,"NystromformerForMaskedLM"),brt.forEach(t),mAo=r(wye," (Nystromformer model)"),wye.forEach(t),gAo=i(H),q2=n(H,"LI",{});var Aye=s(q2);bde=n(Aye,"STRONG",{});var vrt=s(bde);hAo=r(vrt,"perceiver"),vrt.forEach(t),pAo=r(Aye," \u2014 "),Sj=n(Aye,"A",{href:!0});var Frt=s(Sj);uAo=r(Frt,"PerceiverForMaskedLM"),Frt.forEach(t),_Ao=r(Aye," (Perceiver model)"),Aye.forEach(t),bAo=i(H),N2=n(H,"LI",{});var yye=s(N2);vde=n(yye,"STRONG",{});var Trt=s(vde);vAo=r(Trt,"qdqbert"),Trt.forEach(t),FAo=r(yye," \u2014 "),Rj=n(yye,"A",{href:!0});var Mrt=s(Rj);TAo=r(Mrt,"QDQBertForMaskedLM"),Mrt.forEach(t),MAo=r(yye," (QDQBert model)"),yye.forEach(t),EAo=i(H),j2=n(H,"LI",{});var Lye=s(j2);Fde=n(Lye,"STRONG",{});var Ert=s(Fde);CAo=r(Ert,"reformer"),Ert.forEach(t),wAo=r(Lye," \u2014 "),Bj=n(Lye,"A",{href:!0});var Crt=s(Bj);AAo=r(Crt,"ReformerForMaskedLM"),Crt.forEach(t),yAo=r(Lye," (Reformer model)"),Lye.forEach(t),LAo=i(H),D2=n(H,"LI",{});var xye=s(D2);Tde=n(xye,"STRONG",{});var wrt=s(Tde);xAo=r(wrt,"rembert"),wrt.forEach(t),$Ao=r(xye," \u2014 "),Pj=n(xye,"A",{href:!0});var Art=s(Pj);kAo=r(Art,"RemBertForMaskedLM"),Art.forEach(t),SAo=r(xye," (RemBERT model)"),xye.forEach(t),RAo=i(H),G2=n(H,"LI",{});var $ye=s(G2);Mde=n($ye,"STRONG",{});var yrt=s(Mde);BAo=r(yrt,"roberta"),yrt.forEach(t),PAo=r($ye," \u2014 "),Ij=n($ye,"A",{href:!0});var Lrt=s(Ij);IAo=r(Lrt,"RobertaForMaskedLM"),Lrt.forEach(t),qAo=r($ye," (RoBERTa model)"),$ye.forEach(t),NAo=i(H),O2=n(H,"LI",{});var kye=s(O2);Ede=n(kye,"STRONG",{});var xrt=s(Ede);jAo=r(xrt,"roformer"),xrt.forEach(t),DAo=r(kye," \u2014 "),qj=n(kye,"A",{href:!0});var $rt=s(qj);GAo=r($rt,"RoFormerForMaskedLM"),$rt.forEach(t),OAo=r(kye," (RoFormer model)"),kye.forEach(t),VAo=i(H),V2=n(H,"LI",{});var Sye=s(V2);Cde=n(Sye,"STRONG",{});var krt=s(Cde);XAo=r(krt,"squeezebert"),krt.forEach(t),zAo=r(Sye," \u2014 "),Nj=n(Sye,"A",{href:!0});var Srt=s(Nj);QAo=r(Srt,"SqueezeBertForMaskedLM"),Srt.forEach(t),WAo=r(Sye," (SqueezeBERT model)"),Sye.forEach(t),HAo=i(H),X2=n(H,"LI",{});var Rye=s(X2);wde=n(Rye,"STRONG",{});var Rrt=s(wde);UAo=r(Rrt,"tapas"),Rrt.forEach(t),JAo=r(Rye," \u2014 "),jj=n(Rye,"A",{href:!0});var Brt=s(jj);YAo=r(Brt,"TapasForMaskedLM"),Brt.forEach(t),KAo=r(Rye," (TAPAS model)"),Rye.forEach(t),ZAo=i(H),z2=n(H,"LI",{});var Bye=s(z2);Ade=n(Bye,"STRONG",{});var Prt=s(Ade);e6o=r(Prt,"wav2vec2"),Prt.forEach(t),o6o=r(Bye," \u2014 "),yde=n(Bye,"CODE",{});var Irt=s(yde);r6o=r(Irt,"Wav2Vec2ForMaskedLM"),Irt.forEach(t),t6o=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),a6o=i(H),Q2=n(H,"LI",{});var Pye=s(Q2);Lde=n(Pye,"STRONG",{});var qrt=s(Lde);n6o=r(qrt,"xlm"),qrt.forEach(t),s6o=r(Pye," \u2014 "),Dj=n(Pye,"A",{href:!0});var Nrt=s(Dj);l6o=r(Nrt,"XLMWithLMHeadModel"),Nrt.forEach(t),i6o=r(Pye," (XLM model)"),Pye.forEach(t),d6o=i(H),W2=n(H,"LI",{});var Iye=s(W2);xde=n(Iye,"STRONG",{});var jrt=s(xde);c6o=r(jrt,"xlm-roberta"),jrt.forEach(t),f6o=r(Iye," \u2014 "),Gj=n(Iye,"A",{href:!0});var Drt=s(Gj);m6o=r(Drt,"XLMRobertaForMaskedLM"),Drt.forEach(t),g6o=r(Iye," (XLM-RoBERTa model)"),Iye.forEach(t),h6o=i(H),H2=n(H,"LI",{});var qye=s(H2);$de=n(qye,"STRONG",{});var Grt=s($de);p6o=r(Grt,"xlm-roberta-xl"),Grt.forEach(t),u6o=r(qye," \u2014 "),Oj=n(qye,"A",{href:!0});var Ort=s(Oj);_6o=r(Ort,"XLMRobertaXLForMaskedLM"),Ort.forEach(t),b6o=r(qye," (XLM-RoBERTa-XL model)"),qye.forEach(t),v6o=i(H),U2=n(H,"LI",{});var Nye=s(U2);kde=n(Nye,"STRONG",{});var Vrt=s(kde);F6o=r(Vrt,"yoso"),Vrt.forEach(t),T6o=r(Nye," \u2014 "),Vj=n(Nye,"A",{href:!0});var Xrt=s(Vj);M6o=r(Xrt,"YosoForMaskedLM"),Xrt.forEach(t),E6o=r(Nye," (YOSO model)"),Nye.forEach(t),H.forEach(t),C6o=i(ra),J2=n(ra,"P",{});var jye=s(J2);w6o=r(jye,"The model is set in evaluation mode by default using "),Sde=n(jye,"CODE",{});var zrt=s(Sde);A6o=r(zrt,"model.eval()"),zrt.forEach(t),y6o=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=n(jye,"CODE",{});var Qrt=s(Rde);L6o=r(Qrt,"model.train()"),Qrt.forEach(t),jye.forEach(t),x6o=i(ra),T(Y2.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),fIe=i(f),Bi=n(f,"H2",{class:!0});var pNe=s(Bi);K2=n(pNe,"A",{id:!0,class:!0,href:!0});var Wrt=s(K2);Bde=n(Wrt,"SPAN",{});var Hrt=s(Bde);T(V0.$$.fragment,Hrt),Hrt.forEach(t),Wrt.forEach(t),$6o=i(pNe),Pde=n(pNe,"SPAN",{});var Urt=s(Pde);k6o=r(Urt,"AutoModelForSeq2SeqLM"),Urt.forEach(t),pNe.forEach(t),mIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(X0.$$.fragment,Xs),S6o=i(Xs),Pi=n(Xs,"P",{});var bK=s(Pi);R6o=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xj=n(bK,"A",{href:!0});var Jrt=s(Xj);B6o=r(Jrt,"from_pretrained()"),Jrt.forEach(t),P6o=r(bK," class method or the "),zj=n(bK,"A",{href:!0});var Yrt=s(zj);I6o=r(Yrt,"from_config()"),Yrt.forEach(t),q6o=r(bK,` class
method.`),bK.forEach(t),N6o=i(Xs),z0=n(Xs,"P",{});var uNe=s(z0);j6o=r(uNe,"This class cannot be instantiated directly using "),Ide=n(uNe,"CODE",{});var Krt=s(Ide);D6o=r(Krt,"__init__()"),Krt.forEach(t),G6o=r(uNe," (throws an error)."),uNe.forEach(t),O6o=i(Xs),nt=n(Xs,"DIV",{class:!0});var iA=s(nt);T(Q0.$$.fragment,iA),V6o=i(iA),qde=n(iA,"P",{});var Zrt=s(qde);X6o=r(Zrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zrt.forEach(t),z6o=i(iA),Ii=n(iA,"P",{});var vK=s(Ii);Q6o=r(vK,`Note:
Loading a model from its configuration file does `),Nde=n(vK,"STRONG",{});var ett=s(Nde);W6o=r(ett,"not"),ett.forEach(t),H6o=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=n(vK,"A",{href:!0});var ott=s(Qj);U6o=r(ott,"from_pretrained()"),ott.forEach(t),J6o=r(vK," to load the model weights."),vK.forEach(t),Y6o=i(iA),T(Z2.$$.fragment,iA),iA.forEach(t),K6o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(W0.$$.fragment,ta),Z6o=i(ta),jde=n(ta,"P",{});var rtt=s(jde);e0o=r(rtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rtt.forEach(t),o0o=i(ta),$a=n(ta,"P",{});var dA=s($a);r0o=r(dA,"The model class to instantiate is selected based on the "),Dde=n(dA,"CODE",{});var ttt=s(Dde);t0o=r(ttt,"model_type"),ttt.forEach(t),a0o=r(dA,` property of the config object (either
passed as an argument or loaded from `),Gde=n(dA,"CODE",{});var att=s(Gde);n0o=r(att,"pretrained_model_name_or_path"),att.forEach(t),s0o=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(dA,"CODE",{});var ntt=s(Ode);l0o=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),i0o=r(dA,":"),dA.forEach(t),d0o=i(ta),he=n(ta,"UL",{});var ue=s(he);e1=n(ue,"LI",{});var Dye=s(e1);Vde=n(Dye,"STRONG",{});var stt=s(Vde);c0o=r(stt,"bart"),stt.forEach(t),f0o=r(Dye," \u2014 "),Wj=n(Dye,"A",{href:!0});var ltt=s(Wj);m0o=r(ltt,"BartForConditionalGeneration"),ltt.forEach(t),g0o=r(Dye," (BART model)"),Dye.forEach(t),h0o=i(ue),o1=n(ue,"LI",{});var Gye=s(o1);Xde=n(Gye,"STRONG",{});var itt=s(Xde);p0o=r(itt,"bigbird_pegasus"),itt.forEach(t),u0o=r(Gye," \u2014 "),Hj=n(Gye,"A",{href:!0});var dtt=s(Hj);_0o=r(dtt,"BigBirdPegasusForConditionalGeneration"),dtt.forEach(t),b0o=r(Gye," (BigBirdPegasus model)"),Gye.forEach(t),v0o=i(ue),r1=n(ue,"LI",{});var Oye=s(r1);zde=n(Oye,"STRONG",{});var ctt=s(zde);F0o=r(ctt,"blenderbot"),ctt.forEach(t),T0o=r(Oye," \u2014 "),Uj=n(Oye,"A",{href:!0});var ftt=s(Uj);M0o=r(ftt,"BlenderbotForConditionalGeneration"),ftt.forEach(t),E0o=r(Oye," (Blenderbot model)"),Oye.forEach(t),C0o=i(ue),t1=n(ue,"LI",{});var Vye=s(t1);Qde=n(Vye,"STRONG",{});var mtt=s(Qde);w0o=r(mtt,"blenderbot-small"),mtt.forEach(t),A0o=r(Vye," \u2014 "),Jj=n(Vye,"A",{href:!0});var gtt=s(Jj);y0o=r(gtt,"BlenderbotSmallForConditionalGeneration"),gtt.forEach(t),L0o=r(Vye," (BlenderbotSmall model)"),Vye.forEach(t),x0o=i(ue),a1=n(ue,"LI",{});var Xye=s(a1);Wde=n(Xye,"STRONG",{});var htt=s(Wde);$0o=r(htt,"encoder-decoder"),htt.forEach(t),k0o=r(Xye," \u2014 "),Yj=n(Xye,"A",{href:!0});var ptt=s(Yj);S0o=r(ptt,"EncoderDecoderModel"),ptt.forEach(t),R0o=r(Xye," (Encoder decoder model)"),Xye.forEach(t),B0o=i(ue),n1=n(ue,"LI",{});var zye=s(n1);Hde=n(zye,"STRONG",{});var utt=s(Hde);P0o=r(utt,"fsmt"),utt.forEach(t),I0o=r(zye," \u2014 "),Kj=n(zye,"A",{href:!0});var _tt=s(Kj);q0o=r(_tt,"FSMTForConditionalGeneration"),_tt.forEach(t),N0o=r(zye," (FairSeq Machine-Translation model)"),zye.forEach(t),j0o=i(ue),s1=n(ue,"LI",{});var Qye=s(s1);Ude=n(Qye,"STRONG",{});var btt=s(Ude);D0o=r(btt,"led"),btt.forEach(t),G0o=r(Qye," \u2014 "),Zj=n(Qye,"A",{href:!0});var vtt=s(Zj);O0o=r(vtt,"LEDForConditionalGeneration"),vtt.forEach(t),V0o=r(Qye," (LED model)"),Qye.forEach(t),X0o=i(ue),l1=n(ue,"LI",{});var Wye=s(l1);Jde=n(Wye,"STRONG",{});var Ftt=s(Jde);z0o=r(Ftt,"m2m_100"),Ftt.forEach(t),Q0o=r(Wye," \u2014 "),eD=n(Wye,"A",{href:!0});var Ttt=s(eD);W0o=r(Ttt,"M2M100ForConditionalGeneration"),Ttt.forEach(t),H0o=r(Wye," (M2M100 model)"),Wye.forEach(t),U0o=i(ue),i1=n(ue,"LI",{});var Hye=s(i1);Yde=n(Hye,"STRONG",{});var Mtt=s(Yde);J0o=r(Mtt,"marian"),Mtt.forEach(t),Y0o=r(Hye," \u2014 "),oD=n(Hye,"A",{href:!0});var Ett=s(oD);K0o=r(Ett,"MarianMTModel"),Ett.forEach(t),Z0o=r(Hye," (Marian model)"),Hye.forEach(t),eyo=i(ue),d1=n(ue,"LI",{});var Uye=s(d1);Kde=n(Uye,"STRONG",{});var Ctt=s(Kde);oyo=r(Ctt,"mbart"),Ctt.forEach(t),ryo=r(Uye," \u2014 "),rD=n(Uye,"A",{href:!0});var wtt=s(rD);tyo=r(wtt,"MBartForConditionalGeneration"),wtt.forEach(t),ayo=r(Uye," (mBART model)"),Uye.forEach(t),nyo=i(ue),c1=n(ue,"LI",{});var Jye=s(c1);Zde=n(Jye,"STRONG",{});var Att=s(Zde);syo=r(Att,"mt5"),Att.forEach(t),lyo=r(Jye," \u2014 "),tD=n(Jye,"A",{href:!0});var ytt=s(tD);iyo=r(ytt,"MT5ForConditionalGeneration"),ytt.forEach(t),dyo=r(Jye," (mT5 model)"),Jye.forEach(t),cyo=i(ue),f1=n(ue,"LI",{});var Yye=s(f1);ece=n(Yye,"STRONG",{});var Ltt=s(ece);fyo=r(Ltt,"pegasus"),Ltt.forEach(t),myo=r(Yye," \u2014 "),aD=n(Yye,"A",{href:!0});var xtt=s(aD);gyo=r(xtt,"PegasusForConditionalGeneration"),xtt.forEach(t),hyo=r(Yye," (Pegasus model)"),Yye.forEach(t),pyo=i(ue),m1=n(ue,"LI",{});var Kye=s(m1);oce=n(Kye,"STRONG",{});var $tt=s(oce);uyo=r($tt,"plbart"),$tt.forEach(t),_yo=r(Kye," \u2014 "),nD=n(Kye,"A",{href:!0});var ktt=s(nD);byo=r(ktt,"PLBartForConditionalGeneration"),ktt.forEach(t),vyo=r(Kye," (PLBart model)"),Kye.forEach(t),Fyo=i(ue),g1=n(ue,"LI",{});var Zye=s(g1);rce=n(Zye,"STRONG",{});var Stt=s(rce);Tyo=r(Stt,"prophetnet"),Stt.forEach(t),Myo=r(Zye," \u2014 "),sD=n(Zye,"A",{href:!0});var Rtt=s(sD);Eyo=r(Rtt,"ProphetNetForConditionalGeneration"),Rtt.forEach(t),Cyo=r(Zye," (ProphetNet model)"),Zye.forEach(t),wyo=i(ue),h1=n(ue,"LI",{});var eLe=s(h1);tce=n(eLe,"STRONG",{});var Btt=s(tce);Ayo=r(Btt,"t5"),Btt.forEach(t),yyo=r(eLe," \u2014 "),lD=n(eLe,"A",{href:!0});var Ptt=s(lD);Lyo=r(Ptt,"T5ForConditionalGeneration"),Ptt.forEach(t),xyo=r(eLe," (T5 model)"),eLe.forEach(t),$yo=i(ue),p1=n(ue,"LI",{});var oLe=s(p1);ace=n(oLe,"STRONG",{});var Itt=s(ace);kyo=r(Itt,"tapex"),Itt.forEach(t),Syo=r(oLe," \u2014 "),iD=n(oLe,"A",{href:!0});var qtt=s(iD);Ryo=r(qtt,"BartForConditionalGeneration"),qtt.forEach(t),Byo=r(oLe," (TAPEX model)"),oLe.forEach(t),Pyo=i(ue),u1=n(ue,"LI",{});var rLe=s(u1);nce=n(rLe,"STRONG",{});var Ntt=s(nce);Iyo=r(Ntt,"xlm-prophetnet"),Ntt.forEach(t),qyo=r(rLe," \u2014 "),dD=n(rLe,"A",{href:!0});var jtt=s(dD);Nyo=r(jtt,"XLMProphetNetForConditionalGeneration"),jtt.forEach(t),jyo=r(rLe," (XLMProphetNet model)"),rLe.forEach(t),ue.forEach(t),Dyo=i(ta),_1=n(ta,"P",{});var tLe=s(_1);Gyo=r(tLe,"The model is set in evaluation mode by default using "),sce=n(tLe,"CODE",{});var Dtt=s(sce);Oyo=r(Dtt,"model.eval()"),Dtt.forEach(t),Vyo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=n(tLe,"CODE",{});var Gtt=s(lce);Xyo=r(Gtt,"model.train()"),Gtt.forEach(t),tLe.forEach(t),zyo=i(ta),T(b1.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),gIe=i(f),qi=n(f,"H2",{class:!0});var _Ne=s(qi);v1=n(_Ne,"A",{id:!0,class:!0,href:!0});var Ott=s(v1);ice=n(Ott,"SPAN",{});var Vtt=s(ice);T(H0.$$.fragment,Vtt),Vtt.forEach(t),Ott.forEach(t),Qyo=i(_Ne),dce=n(_Ne,"SPAN",{});var Xtt=s(dce);Wyo=r(Xtt,"AutoModelForSequenceClassification"),Xtt.forEach(t),_Ne.forEach(t),hIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(U0.$$.fragment,zs),Hyo=i(zs),Ni=n(zs,"P",{});var FK=s(Ni);Uyo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cD=n(FK,"A",{href:!0});var ztt=s(cD);Jyo=r(ztt,"from_pretrained()"),ztt.forEach(t),Yyo=r(FK," class method or the "),fD=n(FK,"A",{href:!0});var Qtt=s(fD);Kyo=r(Qtt,"from_config()"),Qtt.forEach(t),Zyo=r(FK,` class
method.`),FK.forEach(t),eLo=i(zs),J0=n(zs,"P",{});var bNe=s(J0);oLo=r(bNe,"This class cannot be instantiated directly using "),cce=n(bNe,"CODE",{});var Wtt=s(cce);rLo=r(Wtt,"__init__()"),Wtt.forEach(t),tLo=r(bNe," (throws an error)."),bNe.forEach(t),aLo=i(zs),st=n(zs,"DIV",{class:!0});var cA=s(st);T(Y0.$$.fragment,cA),nLo=i(cA),fce=n(cA,"P",{});var Htt=s(fce);sLo=r(Htt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Htt.forEach(t),lLo=i(cA),ji=n(cA,"P",{});var TK=s(ji);iLo=r(TK,`Note:
Loading a model from its configuration file does `),mce=n(TK,"STRONG",{});var Utt=s(mce);dLo=r(Utt,"not"),Utt.forEach(t),cLo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(TK,"A",{href:!0});var Jtt=s(mD);fLo=r(Jtt,"from_pretrained()"),Jtt.forEach(t),mLo=r(TK," to load the model weights."),TK.forEach(t),gLo=i(cA),T(F1.$$.fragment,cA),cA.forEach(t),hLo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(K0.$$.fragment,aa),pLo=i(aa),gce=n(aa,"P",{});var Ytt=s(gce);uLo=r(Ytt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ytt.forEach(t),_Lo=i(aa),ka=n(aa,"P",{});var fA=s(ka);bLo=r(fA,"The model class to instantiate is selected based on the "),hce=n(fA,"CODE",{});var Ktt=s(hce);vLo=r(Ktt,"model_type"),Ktt.forEach(t),FLo=r(fA,` property of the config object (either
passed as an argument or loaded from `),pce=n(fA,"CODE",{});var Ztt=s(pce);TLo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),MLo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(fA,"CODE",{});var eat=s(uce);ELo=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),CLo=r(fA,":"),fA.forEach(t),wLo=i(aa),q=n(aa,"UL",{});var N=s(q);T1=n(N,"LI",{});var aLe=s(T1);_ce=n(aLe,"STRONG",{});var oat=s(_ce);ALo=r(oat,"albert"),oat.forEach(t),yLo=r(aLe," \u2014 "),gD=n(aLe,"A",{href:!0});var rat=s(gD);LLo=r(rat,"AlbertForSequenceClassification"),rat.forEach(t),xLo=r(aLe," (ALBERT model)"),aLe.forEach(t),$Lo=i(N),M1=n(N,"LI",{});var nLe=s(M1);bce=n(nLe,"STRONG",{});var tat=s(bce);kLo=r(tat,"bart"),tat.forEach(t),SLo=r(nLe," \u2014 "),hD=n(nLe,"A",{href:!0});var aat=s(hD);RLo=r(aat,"BartForSequenceClassification"),aat.forEach(t),BLo=r(nLe," (BART model)"),nLe.forEach(t),PLo=i(N),E1=n(N,"LI",{});var sLe=s(E1);vce=n(sLe,"STRONG",{});var nat=s(vce);ILo=r(nat,"bert"),nat.forEach(t),qLo=r(sLe," \u2014 "),pD=n(sLe,"A",{href:!0});var sat=s(pD);NLo=r(sat,"BertForSequenceClassification"),sat.forEach(t),jLo=r(sLe," (BERT model)"),sLe.forEach(t),DLo=i(N),C1=n(N,"LI",{});var lLe=s(C1);Fce=n(lLe,"STRONG",{});var lat=s(Fce);GLo=r(lat,"big_bird"),lat.forEach(t),OLo=r(lLe," \u2014 "),uD=n(lLe,"A",{href:!0});var iat=s(uD);VLo=r(iat,"BigBirdForSequenceClassification"),iat.forEach(t),XLo=r(lLe," (BigBird model)"),lLe.forEach(t),zLo=i(N),w1=n(N,"LI",{});var iLe=s(w1);Tce=n(iLe,"STRONG",{});var dat=s(Tce);QLo=r(dat,"bigbird_pegasus"),dat.forEach(t),WLo=r(iLe," \u2014 "),_D=n(iLe,"A",{href:!0});var cat=s(_D);HLo=r(cat,"BigBirdPegasusForSequenceClassification"),cat.forEach(t),ULo=r(iLe," (BigBirdPegasus model)"),iLe.forEach(t),JLo=i(N),A1=n(N,"LI",{});var dLe=s(A1);Mce=n(dLe,"STRONG",{});var fat=s(Mce);YLo=r(fat,"camembert"),fat.forEach(t),KLo=r(dLe," \u2014 "),bD=n(dLe,"A",{href:!0});var mat=s(bD);ZLo=r(mat,"CamembertForSequenceClassification"),mat.forEach(t),e8o=r(dLe," (CamemBERT model)"),dLe.forEach(t),o8o=i(N),y1=n(N,"LI",{});var cLe=s(y1);Ece=n(cLe,"STRONG",{});var gat=s(Ece);r8o=r(gat,"canine"),gat.forEach(t),t8o=r(cLe," \u2014 "),vD=n(cLe,"A",{href:!0});var hat=s(vD);a8o=r(hat,"CanineForSequenceClassification"),hat.forEach(t),n8o=r(cLe," (Canine model)"),cLe.forEach(t),s8o=i(N),L1=n(N,"LI",{});var fLe=s(L1);Cce=n(fLe,"STRONG",{});var pat=s(Cce);l8o=r(pat,"convbert"),pat.forEach(t),i8o=r(fLe," \u2014 "),FD=n(fLe,"A",{href:!0});var uat=s(FD);d8o=r(uat,"ConvBertForSequenceClassification"),uat.forEach(t),c8o=r(fLe," (ConvBERT model)"),fLe.forEach(t),f8o=i(N),x1=n(N,"LI",{});var mLe=s(x1);wce=n(mLe,"STRONG",{});var _at=s(wce);m8o=r(_at,"ctrl"),_at.forEach(t),g8o=r(mLe," \u2014 "),TD=n(mLe,"A",{href:!0});var bat=s(TD);h8o=r(bat,"CTRLForSequenceClassification"),bat.forEach(t),p8o=r(mLe," (CTRL model)"),mLe.forEach(t),u8o=i(N),$1=n(N,"LI",{});var gLe=s($1);Ace=n(gLe,"STRONG",{});var vat=s(Ace);_8o=r(vat,"data2vec-text"),vat.forEach(t),b8o=r(gLe," \u2014 "),MD=n(gLe,"A",{href:!0});var Fat=s(MD);v8o=r(Fat,"Data2VecTextForSequenceClassification"),Fat.forEach(t),F8o=r(gLe," (Data2VecText model)"),gLe.forEach(t),T8o=i(N),k1=n(N,"LI",{});var hLe=s(k1);yce=n(hLe,"STRONG",{});var Tat=s(yce);M8o=r(Tat,"deberta"),Tat.forEach(t),E8o=r(hLe," \u2014 "),ED=n(hLe,"A",{href:!0});var Mat=s(ED);C8o=r(Mat,"DebertaForSequenceClassification"),Mat.forEach(t),w8o=r(hLe," (DeBERTa model)"),hLe.forEach(t),A8o=i(N),S1=n(N,"LI",{});var pLe=s(S1);Lce=n(pLe,"STRONG",{});var Eat=s(Lce);y8o=r(Eat,"deberta-v2"),Eat.forEach(t),L8o=r(pLe," \u2014 "),CD=n(pLe,"A",{href:!0});var Cat=s(CD);x8o=r(Cat,"DebertaV2ForSequenceClassification"),Cat.forEach(t),$8o=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),k8o=i(N),R1=n(N,"LI",{});var uLe=s(R1);xce=n(uLe,"STRONG",{});var wat=s(xce);S8o=r(wat,"distilbert"),wat.forEach(t),R8o=r(uLe," \u2014 "),wD=n(uLe,"A",{href:!0});var Aat=s(wD);B8o=r(Aat,"DistilBertForSequenceClassification"),Aat.forEach(t),P8o=r(uLe," (DistilBERT model)"),uLe.forEach(t),I8o=i(N),B1=n(N,"LI",{});var _Le=s(B1);$ce=n(_Le,"STRONG",{});var yat=s($ce);q8o=r(yat,"electra"),yat.forEach(t),N8o=r(_Le," \u2014 "),AD=n(_Le,"A",{href:!0});var Lat=s(AD);j8o=r(Lat,"ElectraForSequenceClassification"),Lat.forEach(t),D8o=r(_Le," (ELECTRA model)"),_Le.forEach(t),G8o=i(N),P1=n(N,"LI",{});var bLe=s(P1);kce=n(bLe,"STRONG",{});var xat=s(kce);O8o=r(xat,"flaubert"),xat.forEach(t),V8o=r(bLe," \u2014 "),yD=n(bLe,"A",{href:!0});var $at=s(yD);X8o=r($at,"FlaubertForSequenceClassification"),$at.forEach(t),z8o=r(bLe," (FlauBERT model)"),bLe.forEach(t),Q8o=i(N),I1=n(N,"LI",{});var vLe=s(I1);Sce=n(vLe,"STRONG",{});var kat=s(Sce);W8o=r(kat,"fnet"),kat.forEach(t),H8o=r(vLe," \u2014 "),LD=n(vLe,"A",{href:!0});var Sat=s(LD);U8o=r(Sat,"FNetForSequenceClassification"),Sat.forEach(t),J8o=r(vLe," (FNet model)"),vLe.forEach(t),Y8o=i(N),q1=n(N,"LI",{});var FLe=s(q1);Rce=n(FLe,"STRONG",{});var Rat=s(Rce);K8o=r(Rat,"funnel"),Rat.forEach(t),Z8o=r(FLe," \u2014 "),xD=n(FLe,"A",{href:!0});var Bat=s(xD);exo=r(Bat,"FunnelForSequenceClassification"),Bat.forEach(t),oxo=r(FLe," (Funnel Transformer model)"),FLe.forEach(t),rxo=i(N),N1=n(N,"LI",{});var TLe=s(N1);Bce=n(TLe,"STRONG",{});var Pat=s(Bce);txo=r(Pat,"gpt2"),Pat.forEach(t),axo=r(TLe," \u2014 "),$D=n(TLe,"A",{href:!0});var Iat=s($D);nxo=r(Iat,"GPT2ForSequenceClassification"),Iat.forEach(t),sxo=r(TLe," (OpenAI GPT-2 model)"),TLe.forEach(t),lxo=i(N),j1=n(N,"LI",{});var MLe=s(j1);Pce=n(MLe,"STRONG",{});var qat=s(Pce);ixo=r(qat,"gpt_neo"),qat.forEach(t),dxo=r(MLe," \u2014 "),kD=n(MLe,"A",{href:!0});var Nat=s(kD);cxo=r(Nat,"GPTNeoForSequenceClassification"),Nat.forEach(t),fxo=r(MLe," (GPT Neo model)"),MLe.forEach(t),mxo=i(N),D1=n(N,"LI",{});var ELe=s(D1);Ice=n(ELe,"STRONG",{});var jat=s(Ice);gxo=r(jat,"gptj"),jat.forEach(t),hxo=r(ELe," \u2014 "),SD=n(ELe,"A",{href:!0});var Dat=s(SD);pxo=r(Dat,"GPTJForSequenceClassification"),Dat.forEach(t),uxo=r(ELe," (GPT-J model)"),ELe.forEach(t),_xo=i(N),G1=n(N,"LI",{});var CLe=s(G1);qce=n(CLe,"STRONG",{});var Gat=s(qce);bxo=r(Gat,"ibert"),Gat.forEach(t),vxo=r(CLe," \u2014 "),RD=n(CLe,"A",{href:!0});var Oat=s(RD);Fxo=r(Oat,"IBertForSequenceClassification"),Oat.forEach(t),Txo=r(CLe," (I-BERT model)"),CLe.forEach(t),Mxo=i(N),O1=n(N,"LI",{});var wLe=s(O1);Nce=n(wLe,"STRONG",{});var Vat=s(Nce);Exo=r(Vat,"layoutlm"),Vat.forEach(t),Cxo=r(wLe," \u2014 "),BD=n(wLe,"A",{href:!0});var Xat=s(BD);wxo=r(Xat,"LayoutLMForSequenceClassification"),Xat.forEach(t),Axo=r(wLe," (LayoutLM model)"),wLe.forEach(t),yxo=i(N),V1=n(N,"LI",{});var ALe=s(V1);jce=n(ALe,"STRONG",{});var zat=s(jce);Lxo=r(zat,"layoutlmv2"),zat.forEach(t),xxo=r(ALe," \u2014 "),PD=n(ALe,"A",{href:!0});var Qat=s(PD);$xo=r(Qat,"LayoutLMv2ForSequenceClassification"),Qat.forEach(t),kxo=r(ALe," (LayoutLMv2 model)"),ALe.forEach(t),Sxo=i(N),X1=n(N,"LI",{});var yLe=s(X1);Dce=n(yLe,"STRONG",{});var Wat=s(Dce);Rxo=r(Wat,"led"),Wat.forEach(t),Bxo=r(yLe," \u2014 "),ID=n(yLe,"A",{href:!0});var Hat=s(ID);Pxo=r(Hat,"LEDForSequenceClassification"),Hat.forEach(t),Ixo=r(yLe," (LED model)"),yLe.forEach(t),qxo=i(N),z1=n(N,"LI",{});var LLe=s(z1);Gce=n(LLe,"STRONG",{});var Uat=s(Gce);Nxo=r(Uat,"longformer"),Uat.forEach(t),jxo=r(LLe," \u2014 "),qD=n(LLe,"A",{href:!0});var Jat=s(qD);Dxo=r(Jat,"LongformerForSequenceClassification"),Jat.forEach(t),Gxo=r(LLe," (Longformer model)"),LLe.forEach(t),Oxo=i(N),Q1=n(N,"LI",{});var xLe=s(Q1);Oce=n(xLe,"STRONG",{});var Yat=s(Oce);Vxo=r(Yat,"mbart"),Yat.forEach(t),Xxo=r(xLe," \u2014 "),ND=n(xLe,"A",{href:!0});var Kat=s(ND);zxo=r(Kat,"MBartForSequenceClassification"),Kat.forEach(t),Qxo=r(xLe," (mBART model)"),xLe.forEach(t),Wxo=i(N),W1=n(N,"LI",{});var $Le=s(W1);Vce=n($Le,"STRONG",{});var Zat=s(Vce);Hxo=r(Zat,"megatron-bert"),Zat.forEach(t),Uxo=r($Le," \u2014 "),jD=n($Le,"A",{href:!0});var ent=s(jD);Jxo=r(ent,"MegatronBertForSequenceClassification"),ent.forEach(t),Yxo=r($Le," (MegatronBert model)"),$Le.forEach(t),Kxo=i(N),H1=n(N,"LI",{});var kLe=s(H1);Xce=n(kLe,"STRONG",{});var ont=s(Xce);Zxo=r(ont,"mobilebert"),ont.forEach(t),e9o=r(kLe," \u2014 "),DD=n(kLe,"A",{href:!0});var rnt=s(DD);o9o=r(rnt,"MobileBertForSequenceClassification"),rnt.forEach(t),r9o=r(kLe," (MobileBERT model)"),kLe.forEach(t),t9o=i(N),U1=n(N,"LI",{});var SLe=s(U1);zce=n(SLe,"STRONG",{});var tnt=s(zce);a9o=r(tnt,"mpnet"),tnt.forEach(t),n9o=r(SLe," \u2014 "),GD=n(SLe,"A",{href:!0});var ant=s(GD);s9o=r(ant,"MPNetForSequenceClassification"),ant.forEach(t),l9o=r(SLe," (MPNet model)"),SLe.forEach(t),i9o=i(N),J1=n(N,"LI",{});var RLe=s(J1);Qce=n(RLe,"STRONG",{});var nnt=s(Qce);d9o=r(nnt,"nystromformer"),nnt.forEach(t),c9o=r(RLe," \u2014 "),OD=n(RLe,"A",{href:!0});var snt=s(OD);f9o=r(snt,"NystromformerForSequenceClassification"),snt.forEach(t),m9o=r(RLe," (Nystromformer model)"),RLe.forEach(t),g9o=i(N),Y1=n(N,"LI",{});var BLe=s(Y1);Wce=n(BLe,"STRONG",{});var lnt=s(Wce);h9o=r(lnt,"openai-gpt"),lnt.forEach(t),p9o=r(BLe," \u2014 "),VD=n(BLe,"A",{href:!0});var int=s(VD);u9o=r(int,"OpenAIGPTForSequenceClassification"),int.forEach(t),_9o=r(BLe," (OpenAI GPT model)"),BLe.forEach(t),b9o=i(N),K1=n(N,"LI",{});var PLe=s(K1);Hce=n(PLe,"STRONG",{});var dnt=s(Hce);v9o=r(dnt,"perceiver"),dnt.forEach(t),F9o=r(PLe," \u2014 "),XD=n(PLe,"A",{href:!0});var cnt=s(XD);T9o=r(cnt,"PerceiverForSequenceClassification"),cnt.forEach(t),M9o=r(PLe," (Perceiver model)"),PLe.forEach(t),E9o=i(N),Z1=n(N,"LI",{});var ILe=s(Z1);Uce=n(ILe,"STRONG",{});var fnt=s(Uce);C9o=r(fnt,"plbart"),fnt.forEach(t),w9o=r(ILe," \u2014 "),zD=n(ILe,"A",{href:!0});var mnt=s(zD);A9o=r(mnt,"PLBartForSequenceClassification"),mnt.forEach(t),y9o=r(ILe," (PLBart model)"),ILe.forEach(t),L9o=i(N),eb=n(N,"LI",{});var qLe=s(eb);Jce=n(qLe,"STRONG",{});var gnt=s(Jce);x9o=r(gnt,"qdqbert"),gnt.forEach(t),$9o=r(qLe," \u2014 "),QD=n(qLe,"A",{href:!0});var hnt=s(QD);k9o=r(hnt,"QDQBertForSequenceClassification"),hnt.forEach(t),S9o=r(qLe," (QDQBert model)"),qLe.forEach(t),R9o=i(N),ob=n(N,"LI",{});var NLe=s(ob);Yce=n(NLe,"STRONG",{});var pnt=s(Yce);B9o=r(pnt,"reformer"),pnt.forEach(t),P9o=r(NLe," \u2014 "),WD=n(NLe,"A",{href:!0});var unt=s(WD);I9o=r(unt,"ReformerForSequenceClassification"),unt.forEach(t),q9o=r(NLe," (Reformer model)"),NLe.forEach(t),N9o=i(N),rb=n(N,"LI",{});var jLe=s(rb);Kce=n(jLe,"STRONG",{});var _nt=s(Kce);j9o=r(_nt,"rembert"),_nt.forEach(t),D9o=r(jLe," \u2014 "),HD=n(jLe,"A",{href:!0});var bnt=s(HD);G9o=r(bnt,"RemBertForSequenceClassification"),bnt.forEach(t),O9o=r(jLe," (RemBERT model)"),jLe.forEach(t),V9o=i(N),tb=n(N,"LI",{});var DLe=s(tb);Zce=n(DLe,"STRONG",{});var vnt=s(Zce);X9o=r(vnt,"roberta"),vnt.forEach(t),z9o=r(DLe," \u2014 "),UD=n(DLe,"A",{href:!0});var Fnt=s(UD);Q9o=r(Fnt,"RobertaForSequenceClassification"),Fnt.forEach(t),W9o=r(DLe," (RoBERTa model)"),DLe.forEach(t),H9o=i(N),ab=n(N,"LI",{});var GLe=s(ab);efe=n(GLe,"STRONG",{});var Tnt=s(efe);U9o=r(Tnt,"roformer"),Tnt.forEach(t),J9o=r(GLe," \u2014 "),JD=n(GLe,"A",{href:!0});var Mnt=s(JD);Y9o=r(Mnt,"RoFormerForSequenceClassification"),Mnt.forEach(t),K9o=r(GLe," (RoFormer model)"),GLe.forEach(t),Z9o=i(N),nb=n(N,"LI",{});var OLe=s(nb);ofe=n(OLe,"STRONG",{});var Ent=s(ofe);e$o=r(Ent,"squeezebert"),Ent.forEach(t),o$o=r(OLe," \u2014 "),YD=n(OLe,"A",{href:!0});var Cnt=s(YD);r$o=r(Cnt,"SqueezeBertForSequenceClassification"),Cnt.forEach(t),t$o=r(OLe," (SqueezeBERT model)"),OLe.forEach(t),a$o=i(N),sb=n(N,"LI",{});var VLe=s(sb);rfe=n(VLe,"STRONG",{});var wnt=s(rfe);n$o=r(wnt,"tapas"),wnt.forEach(t),s$o=r(VLe," \u2014 "),KD=n(VLe,"A",{href:!0});var Ant=s(KD);l$o=r(Ant,"TapasForSequenceClassification"),Ant.forEach(t),i$o=r(VLe," (TAPAS model)"),VLe.forEach(t),d$o=i(N),lb=n(N,"LI",{});var XLe=s(lb);tfe=n(XLe,"STRONG",{});var ynt=s(tfe);c$o=r(ynt,"tapex"),ynt.forEach(t),f$o=r(XLe," \u2014 "),ZD=n(XLe,"A",{href:!0});var Lnt=s(ZD);m$o=r(Lnt,"BartForSequenceClassification"),Lnt.forEach(t),g$o=r(XLe," (TAPEX model)"),XLe.forEach(t),h$o=i(N),ib=n(N,"LI",{});var zLe=s(ib);afe=n(zLe,"STRONG",{});var xnt=s(afe);p$o=r(xnt,"transfo-xl"),xnt.forEach(t),u$o=r(zLe," \u2014 "),eG=n(zLe,"A",{href:!0});var $nt=s(eG);_$o=r($nt,"TransfoXLForSequenceClassification"),$nt.forEach(t),b$o=r(zLe," (Transformer-XL model)"),zLe.forEach(t),v$o=i(N),db=n(N,"LI",{});var QLe=s(db);nfe=n(QLe,"STRONG",{});var knt=s(nfe);F$o=r(knt,"xlm"),knt.forEach(t),T$o=r(QLe," \u2014 "),oG=n(QLe,"A",{href:!0});var Snt=s(oG);M$o=r(Snt,"XLMForSequenceClassification"),Snt.forEach(t),E$o=r(QLe," (XLM model)"),QLe.forEach(t),C$o=i(N),cb=n(N,"LI",{});var WLe=s(cb);sfe=n(WLe,"STRONG",{});var Rnt=s(sfe);w$o=r(Rnt,"xlm-roberta"),Rnt.forEach(t),A$o=r(WLe," \u2014 "),rG=n(WLe,"A",{href:!0});var Bnt=s(rG);y$o=r(Bnt,"XLMRobertaForSequenceClassification"),Bnt.forEach(t),L$o=r(WLe," (XLM-RoBERTa model)"),WLe.forEach(t),x$o=i(N),fb=n(N,"LI",{});var HLe=s(fb);lfe=n(HLe,"STRONG",{});var Pnt=s(lfe);$$o=r(Pnt,"xlm-roberta-xl"),Pnt.forEach(t),k$o=r(HLe," \u2014 "),tG=n(HLe,"A",{href:!0});var Int=s(tG);S$o=r(Int,"XLMRobertaXLForSequenceClassification"),Int.forEach(t),R$o=r(HLe," (XLM-RoBERTa-XL model)"),HLe.forEach(t),B$o=i(N),mb=n(N,"LI",{});var ULe=s(mb);ife=n(ULe,"STRONG",{});var qnt=s(ife);P$o=r(qnt,"xlnet"),qnt.forEach(t),I$o=r(ULe," \u2014 "),aG=n(ULe,"A",{href:!0});var Nnt=s(aG);q$o=r(Nnt,"XLNetForSequenceClassification"),Nnt.forEach(t),N$o=r(ULe," (XLNet model)"),ULe.forEach(t),j$o=i(N),gb=n(N,"LI",{});var JLe=s(gb);dfe=n(JLe,"STRONG",{});var jnt=s(dfe);D$o=r(jnt,"yoso"),jnt.forEach(t),G$o=r(JLe," \u2014 "),nG=n(JLe,"A",{href:!0});var Dnt=s(nG);O$o=r(Dnt,"YosoForSequenceClassification"),Dnt.forEach(t),V$o=r(JLe," (YOSO model)"),JLe.forEach(t),N.forEach(t),X$o=i(aa),hb=n(aa,"P",{});var YLe=s(hb);z$o=r(YLe,"The model is set in evaluation mode by default using "),cfe=n(YLe,"CODE",{});var Gnt=s(cfe);Q$o=r(Gnt,"model.eval()"),Gnt.forEach(t),W$o=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=n(YLe,"CODE",{});var Ont=s(ffe);H$o=r(Ont,"model.train()"),Ont.forEach(t),YLe.forEach(t),U$o=i(aa),T(pb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),pIe=i(f),Di=n(f,"H2",{class:!0});var vNe=s(Di);ub=n(vNe,"A",{id:!0,class:!0,href:!0});var Vnt=s(ub);mfe=n(Vnt,"SPAN",{});var Xnt=s(mfe);T(Z0.$$.fragment,Xnt),Xnt.forEach(t),Vnt.forEach(t),J$o=i(vNe),gfe=n(vNe,"SPAN",{});var znt=s(gfe);Y$o=r(znt,"AutoModelForMultipleChoice"),znt.forEach(t),vNe.forEach(t),uIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(ey.$$.fragment,Qs),K$o=i(Qs),Gi=n(Qs,"P",{});var MK=s(Gi);Z$o=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sG=n(MK,"A",{href:!0});var Qnt=s(sG);eko=r(Qnt,"from_pretrained()"),Qnt.forEach(t),oko=r(MK," class method or the "),lG=n(MK,"A",{href:!0});var Wnt=s(lG);rko=r(Wnt,"from_config()"),Wnt.forEach(t),tko=r(MK,` class
method.`),MK.forEach(t),ako=i(Qs),oy=n(Qs,"P",{});var FNe=s(oy);nko=r(FNe,"This class cannot be instantiated directly using "),hfe=n(FNe,"CODE",{});var Hnt=s(hfe);sko=r(Hnt,"__init__()"),Hnt.forEach(t),lko=r(FNe," (throws an error)."),FNe.forEach(t),iko=i(Qs),lt=n(Qs,"DIV",{class:!0});var mA=s(lt);T(ry.$$.fragment,mA),dko=i(mA),pfe=n(mA,"P",{});var Unt=s(pfe);cko=r(Unt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Unt.forEach(t),fko=i(mA),Oi=n(mA,"P",{});var EK=s(Oi);mko=r(EK,`Note:
Loading a model from its configuration file does `),ufe=n(EK,"STRONG",{});var Jnt=s(ufe);gko=r(Jnt,"not"),Jnt.forEach(t),hko=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(EK,"A",{href:!0});var Ynt=s(iG);pko=r(Ynt,"from_pretrained()"),Ynt.forEach(t),uko=r(EK," to load the model weights."),EK.forEach(t),_ko=i(mA),T(_b.$$.fragment,mA),mA.forEach(t),bko=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(ty.$$.fragment,na),vko=i(na),_fe=n(na,"P",{});var Knt=s(_fe);Fko=r(Knt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Knt.forEach(t),Tko=i(na),Sa=n(na,"P",{});var gA=s(Sa);Mko=r(gA,"The model class to instantiate is selected based on the "),bfe=n(gA,"CODE",{});var Znt=s(bfe);Eko=r(Znt,"model_type"),Znt.forEach(t),Cko=r(gA,` property of the config object (either
passed as an argument or loaded from `),vfe=n(gA,"CODE",{});var est=s(vfe);wko=r(est,"pretrained_model_name_or_path"),est.forEach(t),Ako=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(gA,"CODE",{});var ost=s(Ffe);yko=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),Lko=r(gA,":"),gA.forEach(t),xko=i(na),Y=n(na,"UL",{});var K=s(Y);bb=n(K,"LI",{});var KLe=s(bb);Tfe=n(KLe,"STRONG",{});var rst=s(Tfe);$ko=r(rst,"albert"),rst.forEach(t),kko=r(KLe," \u2014 "),dG=n(KLe,"A",{href:!0});var tst=s(dG);Sko=r(tst,"AlbertForMultipleChoice"),tst.forEach(t),Rko=r(KLe," (ALBERT model)"),KLe.forEach(t),Bko=i(K),vb=n(K,"LI",{});var ZLe=s(vb);Mfe=n(ZLe,"STRONG",{});var ast=s(Mfe);Pko=r(ast,"bert"),ast.forEach(t),Iko=r(ZLe," \u2014 "),cG=n(ZLe,"A",{href:!0});var nst=s(cG);qko=r(nst,"BertForMultipleChoice"),nst.forEach(t),Nko=r(ZLe," (BERT model)"),ZLe.forEach(t),jko=i(K),Fb=n(K,"LI",{});var e8e=s(Fb);Efe=n(e8e,"STRONG",{});var sst=s(Efe);Dko=r(sst,"big_bird"),sst.forEach(t),Gko=r(e8e," \u2014 "),fG=n(e8e,"A",{href:!0});var lst=s(fG);Oko=r(lst,"BigBirdForMultipleChoice"),lst.forEach(t),Vko=r(e8e," (BigBird model)"),e8e.forEach(t),Xko=i(K),Tb=n(K,"LI",{});var o8e=s(Tb);Cfe=n(o8e,"STRONG",{});var ist=s(Cfe);zko=r(ist,"camembert"),ist.forEach(t),Qko=r(o8e," \u2014 "),mG=n(o8e,"A",{href:!0});var dst=s(mG);Wko=r(dst,"CamembertForMultipleChoice"),dst.forEach(t),Hko=r(o8e," (CamemBERT model)"),o8e.forEach(t),Uko=i(K),Mb=n(K,"LI",{});var r8e=s(Mb);wfe=n(r8e,"STRONG",{});var cst=s(wfe);Jko=r(cst,"canine"),cst.forEach(t),Yko=r(r8e," \u2014 "),gG=n(r8e,"A",{href:!0});var fst=s(gG);Kko=r(fst,"CanineForMultipleChoice"),fst.forEach(t),Zko=r(r8e," (Canine model)"),r8e.forEach(t),eSo=i(K),Eb=n(K,"LI",{});var t8e=s(Eb);Afe=n(t8e,"STRONG",{});var mst=s(Afe);oSo=r(mst,"convbert"),mst.forEach(t),rSo=r(t8e," \u2014 "),hG=n(t8e,"A",{href:!0});var gst=s(hG);tSo=r(gst,"ConvBertForMultipleChoice"),gst.forEach(t),aSo=r(t8e," (ConvBERT model)"),t8e.forEach(t),nSo=i(K),Cb=n(K,"LI",{});var a8e=s(Cb);yfe=n(a8e,"STRONG",{});var hst=s(yfe);sSo=r(hst,"data2vec-text"),hst.forEach(t),lSo=r(a8e," \u2014 "),pG=n(a8e,"A",{href:!0});var pst=s(pG);iSo=r(pst,"Data2VecTextForMultipleChoice"),pst.forEach(t),dSo=r(a8e," (Data2VecText model)"),a8e.forEach(t),cSo=i(K),wb=n(K,"LI",{});var n8e=s(wb);Lfe=n(n8e,"STRONG",{});var ust=s(Lfe);fSo=r(ust,"deberta-v2"),ust.forEach(t),mSo=r(n8e," \u2014 "),uG=n(n8e,"A",{href:!0});var _st=s(uG);gSo=r(_st,"DebertaV2ForMultipleChoice"),_st.forEach(t),hSo=r(n8e," (DeBERTa-v2 model)"),n8e.forEach(t),pSo=i(K),Ab=n(K,"LI",{});var s8e=s(Ab);xfe=n(s8e,"STRONG",{});var bst=s(xfe);uSo=r(bst,"distilbert"),bst.forEach(t),_So=r(s8e," \u2014 "),_G=n(s8e,"A",{href:!0});var vst=s(_G);bSo=r(vst,"DistilBertForMultipleChoice"),vst.forEach(t),vSo=r(s8e," (DistilBERT model)"),s8e.forEach(t),FSo=i(K),yb=n(K,"LI",{});var l8e=s(yb);$fe=n(l8e,"STRONG",{});var Fst=s($fe);TSo=r(Fst,"electra"),Fst.forEach(t),MSo=r(l8e," \u2014 "),bG=n(l8e,"A",{href:!0});var Tst=s(bG);ESo=r(Tst,"ElectraForMultipleChoice"),Tst.forEach(t),CSo=r(l8e," (ELECTRA model)"),l8e.forEach(t),wSo=i(K),Lb=n(K,"LI",{});var i8e=s(Lb);kfe=n(i8e,"STRONG",{});var Mst=s(kfe);ASo=r(Mst,"flaubert"),Mst.forEach(t),ySo=r(i8e," \u2014 "),vG=n(i8e,"A",{href:!0});var Est=s(vG);LSo=r(Est,"FlaubertForMultipleChoice"),Est.forEach(t),xSo=r(i8e," (FlauBERT model)"),i8e.forEach(t),$So=i(K),xb=n(K,"LI",{});var d8e=s(xb);Sfe=n(d8e,"STRONG",{});var Cst=s(Sfe);kSo=r(Cst,"fnet"),Cst.forEach(t),SSo=r(d8e," \u2014 "),FG=n(d8e,"A",{href:!0});var wst=s(FG);RSo=r(wst,"FNetForMultipleChoice"),wst.forEach(t),BSo=r(d8e," (FNet model)"),d8e.forEach(t),PSo=i(K),$b=n(K,"LI",{});var c8e=s($b);Rfe=n(c8e,"STRONG",{});var Ast=s(Rfe);ISo=r(Ast,"funnel"),Ast.forEach(t),qSo=r(c8e," \u2014 "),TG=n(c8e,"A",{href:!0});var yst=s(TG);NSo=r(yst,"FunnelForMultipleChoice"),yst.forEach(t),jSo=r(c8e," (Funnel Transformer model)"),c8e.forEach(t),DSo=i(K),kb=n(K,"LI",{});var f8e=s(kb);Bfe=n(f8e,"STRONG",{});var Lst=s(Bfe);GSo=r(Lst,"ibert"),Lst.forEach(t),OSo=r(f8e," \u2014 "),MG=n(f8e,"A",{href:!0});var xst=s(MG);VSo=r(xst,"IBertForMultipleChoice"),xst.forEach(t),XSo=r(f8e," (I-BERT model)"),f8e.forEach(t),zSo=i(K),Sb=n(K,"LI",{});var m8e=s(Sb);Pfe=n(m8e,"STRONG",{});var $st=s(Pfe);QSo=r($st,"longformer"),$st.forEach(t),WSo=r(m8e," \u2014 "),EG=n(m8e,"A",{href:!0});var kst=s(EG);HSo=r(kst,"LongformerForMultipleChoice"),kst.forEach(t),USo=r(m8e," (Longformer model)"),m8e.forEach(t),JSo=i(K),Rb=n(K,"LI",{});var g8e=s(Rb);Ife=n(g8e,"STRONG",{});var Sst=s(Ife);YSo=r(Sst,"megatron-bert"),Sst.forEach(t),KSo=r(g8e," \u2014 "),CG=n(g8e,"A",{href:!0});var Rst=s(CG);ZSo=r(Rst,"MegatronBertForMultipleChoice"),Rst.forEach(t),eRo=r(g8e," (MegatronBert model)"),g8e.forEach(t),oRo=i(K),Bb=n(K,"LI",{});var h8e=s(Bb);qfe=n(h8e,"STRONG",{});var Bst=s(qfe);rRo=r(Bst,"mobilebert"),Bst.forEach(t),tRo=r(h8e," \u2014 "),wG=n(h8e,"A",{href:!0});var Pst=s(wG);aRo=r(Pst,"MobileBertForMultipleChoice"),Pst.forEach(t),nRo=r(h8e," (MobileBERT model)"),h8e.forEach(t),sRo=i(K),Pb=n(K,"LI",{});var p8e=s(Pb);Nfe=n(p8e,"STRONG",{});var Ist=s(Nfe);lRo=r(Ist,"mpnet"),Ist.forEach(t),iRo=r(p8e," \u2014 "),AG=n(p8e,"A",{href:!0});var qst=s(AG);dRo=r(qst,"MPNetForMultipleChoice"),qst.forEach(t),cRo=r(p8e," (MPNet model)"),p8e.forEach(t),fRo=i(K),Ib=n(K,"LI",{});var u8e=s(Ib);jfe=n(u8e,"STRONG",{});var Nst=s(jfe);mRo=r(Nst,"nystromformer"),Nst.forEach(t),gRo=r(u8e," \u2014 "),yG=n(u8e,"A",{href:!0});var jst=s(yG);hRo=r(jst,"NystromformerForMultipleChoice"),jst.forEach(t),pRo=r(u8e," (Nystromformer model)"),u8e.forEach(t),uRo=i(K),qb=n(K,"LI",{});var _8e=s(qb);Dfe=n(_8e,"STRONG",{});var Dst=s(Dfe);_Ro=r(Dst,"qdqbert"),Dst.forEach(t),bRo=r(_8e," \u2014 "),LG=n(_8e,"A",{href:!0});var Gst=s(LG);vRo=r(Gst,"QDQBertForMultipleChoice"),Gst.forEach(t),FRo=r(_8e," (QDQBert model)"),_8e.forEach(t),TRo=i(K),Nb=n(K,"LI",{});var b8e=s(Nb);Gfe=n(b8e,"STRONG",{});var Ost=s(Gfe);MRo=r(Ost,"rembert"),Ost.forEach(t),ERo=r(b8e," \u2014 "),xG=n(b8e,"A",{href:!0});var Vst=s(xG);CRo=r(Vst,"RemBertForMultipleChoice"),Vst.forEach(t),wRo=r(b8e," (RemBERT model)"),b8e.forEach(t),ARo=i(K),jb=n(K,"LI",{});var v8e=s(jb);Ofe=n(v8e,"STRONG",{});var Xst=s(Ofe);yRo=r(Xst,"roberta"),Xst.forEach(t),LRo=r(v8e," \u2014 "),$G=n(v8e,"A",{href:!0});var zst=s($G);xRo=r(zst,"RobertaForMultipleChoice"),zst.forEach(t),$Ro=r(v8e," (RoBERTa model)"),v8e.forEach(t),kRo=i(K),Db=n(K,"LI",{});var F8e=s(Db);Vfe=n(F8e,"STRONG",{});var Qst=s(Vfe);SRo=r(Qst,"roformer"),Qst.forEach(t),RRo=r(F8e," \u2014 "),kG=n(F8e,"A",{href:!0});var Wst=s(kG);BRo=r(Wst,"RoFormerForMultipleChoice"),Wst.forEach(t),PRo=r(F8e," (RoFormer model)"),F8e.forEach(t),IRo=i(K),Gb=n(K,"LI",{});var T8e=s(Gb);Xfe=n(T8e,"STRONG",{});var Hst=s(Xfe);qRo=r(Hst,"squeezebert"),Hst.forEach(t),NRo=r(T8e," \u2014 "),SG=n(T8e,"A",{href:!0});var Ust=s(SG);jRo=r(Ust,"SqueezeBertForMultipleChoice"),Ust.forEach(t),DRo=r(T8e," (SqueezeBERT model)"),T8e.forEach(t),GRo=i(K),Ob=n(K,"LI",{});var M8e=s(Ob);zfe=n(M8e,"STRONG",{});var Jst=s(zfe);ORo=r(Jst,"xlm"),Jst.forEach(t),VRo=r(M8e," \u2014 "),RG=n(M8e,"A",{href:!0});var Yst=s(RG);XRo=r(Yst,"XLMForMultipleChoice"),Yst.forEach(t),zRo=r(M8e," (XLM model)"),M8e.forEach(t),QRo=i(K),Vb=n(K,"LI",{});var E8e=s(Vb);Qfe=n(E8e,"STRONG",{});var Kst=s(Qfe);WRo=r(Kst,"xlm-roberta"),Kst.forEach(t),HRo=r(E8e," \u2014 "),BG=n(E8e,"A",{href:!0});var Zst=s(BG);URo=r(Zst,"XLMRobertaForMultipleChoice"),Zst.forEach(t),JRo=r(E8e," (XLM-RoBERTa model)"),E8e.forEach(t),YRo=i(K),Xb=n(K,"LI",{});var C8e=s(Xb);Wfe=n(C8e,"STRONG",{});var elt=s(Wfe);KRo=r(elt,"xlm-roberta-xl"),elt.forEach(t),ZRo=r(C8e," \u2014 "),PG=n(C8e,"A",{href:!0});var olt=s(PG);eBo=r(olt,"XLMRobertaXLForMultipleChoice"),olt.forEach(t),oBo=r(C8e," (XLM-RoBERTa-XL model)"),C8e.forEach(t),rBo=i(K),zb=n(K,"LI",{});var w8e=s(zb);Hfe=n(w8e,"STRONG",{});var rlt=s(Hfe);tBo=r(rlt,"xlnet"),rlt.forEach(t),aBo=r(w8e," \u2014 "),IG=n(w8e,"A",{href:!0});var tlt=s(IG);nBo=r(tlt,"XLNetForMultipleChoice"),tlt.forEach(t),sBo=r(w8e," (XLNet model)"),w8e.forEach(t),lBo=i(K),Qb=n(K,"LI",{});var A8e=s(Qb);Ufe=n(A8e,"STRONG",{});var alt=s(Ufe);iBo=r(alt,"yoso"),alt.forEach(t),dBo=r(A8e," \u2014 "),qG=n(A8e,"A",{href:!0});var nlt=s(qG);cBo=r(nlt,"YosoForMultipleChoice"),nlt.forEach(t),fBo=r(A8e," (YOSO model)"),A8e.forEach(t),K.forEach(t),mBo=i(na),Wb=n(na,"P",{});var y8e=s(Wb);gBo=r(y8e,"The model is set in evaluation mode by default using "),Jfe=n(y8e,"CODE",{});var slt=s(Jfe);hBo=r(slt,"model.eval()"),slt.forEach(t),pBo=r(y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yfe=n(y8e,"CODE",{});var llt=s(Yfe);uBo=r(llt,"model.train()"),llt.forEach(t),y8e.forEach(t),_Bo=i(na),T(Hb.$$.fragment,na),na.forEach(t),Qs.forEach(t),_Ie=i(f),Vi=n(f,"H2",{class:!0});var TNe=s(Vi);Ub=n(TNe,"A",{id:!0,class:!0,href:!0});var ilt=s(Ub);Kfe=n(ilt,"SPAN",{});var dlt=s(Kfe);T(ay.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),bBo=i(TNe),Zfe=n(TNe,"SPAN",{});var clt=s(Zfe);vBo=r(clt,"AutoModelForNextSentencePrediction"),clt.forEach(t),TNe.forEach(t),bIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(ny.$$.fragment,Ws),FBo=i(Ws),Xi=n(Ws,"P",{});var CK=s(Xi);TBo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NG=n(CK,"A",{href:!0});var flt=s(NG);MBo=r(flt,"from_pretrained()"),flt.forEach(t),EBo=r(CK," class method or the "),jG=n(CK,"A",{href:!0});var mlt=s(jG);CBo=r(mlt,"from_config()"),mlt.forEach(t),wBo=r(CK,` class
method.`),CK.forEach(t),ABo=i(Ws),sy=n(Ws,"P",{});var MNe=s(sy);yBo=r(MNe,"This class cannot be instantiated directly using "),eme=n(MNe,"CODE",{});var glt=s(eme);LBo=r(glt,"__init__()"),glt.forEach(t),xBo=r(MNe," (throws an error)."),MNe.forEach(t),$Bo=i(Ws),it=n(Ws,"DIV",{class:!0});var hA=s(it);T(ly.$$.fragment,hA),kBo=i(hA),ome=n(hA,"P",{});var hlt=s(ome);SBo=r(hlt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hlt.forEach(t),RBo=i(hA),zi=n(hA,"P",{});var wK=s(zi);BBo=r(wK,`Note:
Loading a model from its configuration file does `),rme=n(wK,"STRONG",{});var plt=s(rme);PBo=r(plt,"not"),plt.forEach(t),IBo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(wK,"A",{href:!0});var ult=s(DG);qBo=r(ult,"from_pretrained()"),ult.forEach(t),NBo=r(wK," to load the model weights."),wK.forEach(t),jBo=i(hA),T(Jb.$$.fragment,hA),hA.forEach(t),DBo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(iy.$$.fragment,sa),GBo=i(sa),tme=n(sa,"P",{});var _lt=s(tme);OBo=r(_lt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_lt.forEach(t),VBo=i(sa),Ra=n(sa,"P",{});var pA=s(Ra);XBo=r(pA,"The model class to instantiate is selected based on the "),ame=n(pA,"CODE",{});var blt=s(ame);zBo=r(blt,"model_type"),blt.forEach(t),QBo=r(pA,` property of the config object (either
passed as an argument or loaded from `),nme=n(pA,"CODE",{});var vlt=s(nme);WBo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),HBo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n(pA,"CODE",{});var Flt=s(sme);UBo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),JBo=r(pA,":"),pA.forEach(t),YBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Yb=n(Hs,"LI",{});var L8e=s(Yb);lme=n(L8e,"STRONG",{});var Tlt=s(lme);KBo=r(Tlt,"bert"),Tlt.forEach(t),ZBo=r(L8e," \u2014 "),GG=n(L8e,"A",{href:!0});var Mlt=s(GG);ePo=r(Mlt,"BertForNextSentencePrediction"),Mlt.forEach(t),oPo=r(L8e," (BERT model)"),L8e.forEach(t),rPo=i(Hs),Kb=n(Hs,"LI",{});var x8e=s(Kb);ime=n(x8e,"STRONG",{});var Elt=s(ime);tPo=r(Elt,"fnet"),Elt.forEach(t),aPo=r(x8e," \u2014 "),OG=n(x8e,"A",{href:!0});var Clt=s(OG);nPo=r(Clt,"FNetForNextSentencePrediction"),Clt.forEach(t),sPo=r(x8e," (FNet model)"),x8e.forEach(t),lPo=i(Hs),Zb=n(Hs,"LI",{});var $8e=s(Zb);dme=n($8e,"STRONG",{});var wlt=s(dme);iPo=r(wlt,"megatron-bert"),wlt.forEach(t),dPo=r($8e," \u2014 "),VG=n($8e,"A",{href:!0});var Alt=s(VG);cPo=r(Alt,"MegatronBertForNextSentencePrediction"),Alt.forEach(t),fPo=r($8e," (MegatronBert model)"),$8e.forEach(t),mPo=i(Hs),e4=n(Hs,"LI",{});var k8e=s(e4);cme=n(k8e,"STRONG",{});var ylt=s(cme);gPo=r(ylt,"mobilebert"),ylt.forEach(t),hPo=r(k8e," \u2014 "),XG=n(k8e,"A",{href:!0});var Llt=s(XG);pPo=r(Llt,"MobileBertForNextSentencePrediction"),Llt.forEach(t),uPo=r(k8e," (MobileBERT model)"),k8e.forEach(t),_Po=i(Hs),o4=n(Hs,"LI",{});var S8e=s(o4);fme=n(S8e,"STRONG",{});var xlt=s(fme);bPo=r(xlt,"qdqbert"),xlt.forEach(t),vPo=r(S8e," \u2014 "),zG=n(S8e,"A",{href:!0});var $lt=s(zG);FPo=r($lt,"QDQBertForNextSentencePrediction"),$lt.forEach(t),TPo=r(S8e," (QDQBert model)"),S8e.forEach(t),Hs.forEach(t),MPo=i(sa),r4=n(sa,"P",{});var R8e=s(r4);EPo=r(R8e,"The model is set in evaluation mode by default using "),mme=n(R8e,"CODE",{});var klt=s(mme);CPo=r(klt,"model.eval()"),klt.forEach(t),wPo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(R8e,"CODE",{});var Slt=s(gme);APo=r(Slt,"model.train()"),Slt.forEach(t),R8e.forEach(t),yPo=i(sa),T(t4.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),vIe=i(f),Qi=n(f,"H2",{class:!0});var ENe=s(Qi);a4=n(ENe,"A",{id:!0,class:!0,href:!0});var Rlt=s(a4);hme=n(Rlt,"SPAN",{});var Blt=s(hme);T(dy.$$.fragment,Blt),Blt.forEach(t),Rlt.forEach(t),LPo=i(ENe),pme=n(ENe,"SPAN",{});var Plt=s(pme);xPo=r(Plt,"AutoModelForTokenClassification"),Plt.forEach(t),ENe.forEach(t),FIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(cy.$$.fragment,Us),$Po=i(Us),Wi=n(Us,"P",{});var AK=s(Wi);kPo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QG=n(AK,"A",{href:!0});var Ilt=s(QG);SPo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),RPo=r(AK," class method or the "),WG=n(AK,"A",{href:!0});var qlt=s(WG);BPo=r(qlt,"from_config()"),qlt.forEach(t),PPo=r(AK,` class
method.`),AK.forEach(t),IPo=i(Us),fy=n(Us,"P",{});var CNe=s(fy);qPo=r(CNe,"This class cannot be instantiated directly using "),ume=n(CNe,"CODE",{});var Nlt=s(ume);NPo=r(Nlt,"__init__()"),Nlt.forEach(t),jPo=r(CNe," (throws an error)."),CNe.forEach(t),DPo=i(Us),dt=n(Us,"DIV",{class:!0});var uA=s(dt);T(my.$$.fragment,uA),GPo=i(uA),_me=n(uA,"P",{});var jlt=s(_me);OPo=r(jlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jlt.forEach(t),VPo=i(uA),Hi=n(uA,"P",{});var yK=s(Hi);XPo=r(yK,`Note:
Loading a model from its configuration file does `),bme=n(yK,"STRONG",{});var Dlt=s(bme);zPo=r(Dlt,"not"),Dlt.forEach(t),QPo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(yK,"A",{href:!0});var Glt=s(HG);WPo=r(Glt,"from_pretrained()"),Glt.forEach(t),HPo=r(yK," to load the model weights."),yK.forEach(t),UPo=i(uA),T(n4.$$.fragment,uA),uA.forEach(t),JPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(gy.$$.fragment,la),YPo=i(la),vme=n(la,"P",{});var Olt=s(vme);KPo=r(Olt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Olt.forEach(t),ZPo=i(la),Ba=n(la,"P",{});var _A=s(Ba);eIo=r(_A,"The model class to instantiate is selected based on the "),Fme=n(_A,"CODE",{});var Vlt=s(Fme);oIo=r(Vlt,"model_type"),Vlt.forEach(t),rIo=r(_A,` property of the config object (either
passed as an argument or loaded from `),Tme=n(_A,"CODE",{});var Xlt=s(Tme);tIo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),aIo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(_A,"CODE",{});var zlt=s(Mme);nIo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),sIo=r(_A,":"),_A.forEach(t),lIo=i(la),U=n(la,"UL",{});var J=s(U);s4=n(J,"LI",{});var B8e=s(s4);Eme=n(B8e,"STRONG",{});var Qlt=s(Eme);iIo=r(Qlt,"albert"),Qlt.forEach(t),dIo=r(B8e," \u2014 "),UG=n(B8e,"A",{href:!0});var Wlt=s(UG);cIo=r(Wlt,"AlbertForTokenClassification"),Wlt.forEach(t),fIo=r(B8e," (ALBERT model)"),B8e.forEach(t),mIo=i(J),l4=n(J,"LI",{});var P8e=s(l4);Cme=n(P8e,"STRONG",{});var Hlt=s(Cme);gIo=r(Hlt,"bert"),Hlt.forEach(t),hIo=r(P8e," \u2014 "),JG=n(P8e,"A",{href:!0});var Ult=s(JG);pIo=r(Ult,"BertForTokenClassification"),Ult.forEach(t),uIo=r(P8e," (BERT model)"),P8e.forEach(t),_Io=i(J),i4=n(J,"LI",{});var I8e=s(i4);wme=n(I8e,"STRONG",{});var Jlt=s(wme);bIo=r(Jlt,"big_bird"),Jlt.forEach(t),vIo=r(I8e," \u2014 "),YG=n(I8e,"A",{href:!0});var Ylt=s(YG);FIo=r(Ylt,"BigBirdForTokenClassification"),Ylt.forEach(t),TIo=r(I8e," (BigBird model)"),I8e.forEach(t),MIo=i(J),d4=n(J,"LI",{});var q8e=s(d4);Ame=n(q8e,"STRONG",{});var Klt=s(Ame);EIo=r(Klt,"camembert"),Klt.forEach(t),CIo=r(q8e," \u2014 "),KG=n(q8e,"A",{href:!0});var Zlt=s(KG);wIo=r(Zlt,"CamembertForTokenClassification"),Zlt.forEach(t),AIo=r(q8e," (CamemBERT model)"),q8e.forEach(t),yIo=i(J),c4=n(J,"LI",{});var N8e=s(c4);yme=n(N8e,"STRONG",{});var eit=s(yme);LIo=r(eit,"canine"),eit.forEach(t),xIo=r(N8e," \u2014 "),ZG=n(N8e,"A",{href:!0});var oit=s(ZG);$Io=r(oit,"CanineForTokenClassification"),oit.forEach(t),kIo=r(N8e," (Canine model)"),N8e.forEach(t),SIo=i(J),f4=n(J,"LI",{});var j8e=s(f4);Lme=n(j8e,"STRONG",{});var rit=s(Lme);RIo=r(rit,"convbert"),rit.forEach(t),BIo=r(j8e," \u2014 "),eO=n(j8e,"A",{href:!0});var tit=s(eO);PIo=r(tit,"ConvBertForTokenClassification"),tit.forEach(t),IIo=r(j8e," (ConvBERT model)"),j8e.forEach(t),qIo=i(J),m4=n(J,"LI",{});var D8e=s(m4);xme=n(D8e,"STRONG",{});var ait=s(xme);NIo=r(ait,"data2vec-text"),ait.forEach(t),jIo=r(D8e," \u2014 "),oO=n(D8e,"A",{href:!0});var nit=s(oO);DIo=r(nit,"Data2VecTextForTokenClassification"),nit.forEach(t),GIo=r(D8e," (Data2VecText model)"),D8e.forEach(t),OIo=i(J),g4=n(J,"LI",{});var G8e=s(g4);$me=n(G8e,"STRONG",{});var sit=s($me);VIo=r(sit,"deberta"),sit.forEach(t),XIo=r(G8e," \u2014 "),rO=n(G8e,"A",{href:!0});var lit=s(rO);zIo=r(lit,"DebertaForTokenClassification"),lit.forEach(t),QIo=r(G8e," (DeBERTa model)"),G8e.forEach(t),WIo=i(J),h4=n(J,"LI",{});var O8e=s(h4);kme=n(O8e,"STRONG",{});var iit=s(kme);HIo=r(iit,"deberta-v2"),iit.forEach(t),UIo=r(O8e," \u2014 "),tO=n(O8e,"A",{href:!0});var dit=s(tO);JIo=r(dit,"DebertaV2ForTokenClassification"),dit.forEach(t),YIo=r(O8e," (DeBERTa-v2 model)"),O8e.forEach(t),KIo=i(J),p4=n(J,"LI",{});var V8e=s(p4);Sme=n(V8e,"STRONG",{});var cit=s(Sme);ZIo=r(cit,"distilbert"),cit.forEach(t),eqo=r(V8e," \u2014 "),aO=n(V8e,"A",{href:!0});var fit=s(aO);oqo=r(fit,"DistilBertForTokenClassification"),fit.forEach(t),rqo=r(V8e," (DistilBERT model)"),V8e.forEach(t),tqo=i(J),u4=n(J,"LI",{});var X8e=s(u4);Rme=n(X8e,"STRONG",{});var mit=s(Rme);aqo=r(mit,"electra"),mit.forEach(t),nqo=r(X8e," \u2014 "),nO=n(X8e,"A",{href:!0});var git=s(nO);sqo=r(git,"ElectraForTokenClassification"),git.forEach(t),lqo=r(X8e," (ELECTRA model)"),X8e.forEach(t),iqo=i(J),_4=n(J,"LI",{});var z8e=s(_4);Bme=n(z8e,"STRONG",{});var hit=s(Bme);dqo=r(hit,"flaubert"),hit.forEach(t),cqo=r(z8e," \u2014 "),sO=n(z8e,"A",{href:!0});var pit=s(sO);fqo=r(pit,"FlaubertForTokenClassification"),pit.forEach(t),mqo=r(z8e," (FlauBERT model)"),z8e.forEach(t),gqo=i(J),b4=n(J,"LI",{});var Q8e=s(b4);Pme=n(Q8e,"STRONG",{});var uit=s(Pme);hqo=r(uit,"fnet"),uit.forEach(t),pqo=r(Q8e," \u2014 "),lO=n(Q8e,"A",{href:!0});var _it=s(lO);uqo=r(_it,"FNetForTokenClassification"),_it.forEach(t),_qo=r(Q8e," (FNet model)"),Q8e.forEach(t),bqo=i(J),v4=n(J,"LI",{});var W8e=s(v4);Ime=n(W8e,"STRONG",{});var bit=s(Ime);vqo=r(bit,"funnel"),bit.forEach(t),Fqo=r(W8e," \u2014 "),iO=n(W8e,"A",{href:!0});var vit=s(iO);Tqo=r(vit,"FunnelForTokenClassification"),vit.forEach(t),Mqo=r(W8e," (Funnel Transformer model)"),W8e.forEach(t),Eqo=i(J),F4=n(J,"LI",{});var H8e=s(F4);qme=n(H8e,"STRONG",{});var Fit=s(qme);Cqo=r(Fit,"gpt2"),Fit.forEach(t),wqo=r(H8e," \u2014 "),dO=n(H8e,"A",{href:!0});var Tit=s(dO);Aqo=r(Tit,"GPT2ForTokenClassification"),Tit.forEach(t),yqo=r(H8e," (OpenAI GPT-2 model)"),H8e.forEach(t),Lqo=i(J),T4=n(J,"LI",{});var U8e=s(T4);Nme=n(U8e,"STRONG",{});var Mit=s(Nme);xqo=r(Mit,"ibert"),Mit.forEach(t),$qo=r(U8e," \u2014 "),cO=n(U8e,"A",{href:!0});var Eit=s(cO);kqo=r(Eit,"IBertForTokenClassification"),Eit.forEach(t),Sqo=r(U8e," (I-BERT model)"),U8e.forEach(t),Rqo=i(J),M4=n(J,"LI",{});var J8e=s(M4);jme=n(J8e,"STRONG",{});var Cit=s(jme);Bqo=r(Cit,"layoutlm"),Cit.forEach(t),Pqo=r(J8e," \u2014 "),fO=n(J8e,"A",{href:!0});var wit=s(fO);Iqo=r(wit,"LayoutLMForTokenClassification"),wit.forEach(t),qqo=r(J8e," (LayoutLM model)"),J8e.forEach(t),Nqo=i(J),E4=n(J,"LI",{});var Y8e=s(E4);Dme=n(Y8e,"STRONG",{});var Ait=s(Dme);jqo=r(Ait,"layoutlmv2"),Ait.forEach(t),Dqo=r(Y8e," \u2014 "),mO=n(Y8e,"A",{href:!0});var yit=s(mO);Gqo=r(yit,"LayoutLMv2ForTokenClassification"),yit.forEach(t),Oqo=r(Y8e," (LayoutLMv2 model)"),Y8e.forEach(t),Vqo=i(J),C4=n(J,"LI",{});var K8e=s(C4);Gme=n(K8e,"STRONG",{});var Lit=s(Gme);Xqo=r(Lit,"longformer"),Lit.forEach(t),zqo=r(K8e," \u2014 "),gO=n(K8e,"A",{href:!0});var xit=s(gO);Qqo=r(xit,"LongformerForTokenClassification"),xit.forEach(t),Wqo=r(K8e," (Longformer model)"),K8e.forEach(t),Hqo=i(J),w4=n(J,"LI",{});var Z8e=s(w4);Ome=n(Z8e,"STRONG",{});var $it=s(Ome);Uqo=r($it,"megatron-bert"),$it.forEach(t),Jqo=r(Z8e," \u2014 "),hO=n(Z8e,"A",{href:!0});var kit=s(hO);Yqo=r(kit,"MegatronBertForTokenClassification"),kit.forEach(t),Kqo=r(Z8e," (MegatronBert model)"),Z8e.forEach(t),Zqo=i(J),A4=n(J,"LI",{});var exe=s(A4);Vme=n(exe,"STRONG",{});var Sit=s(Vme);eNo=r(Sit,"mobilebert"),Sit.forEach(t),oNo=r(exe," \u2014 "),pO=n(exe,"A",{href:!0});var Rit=s(pO);rNo=r(Rit,"MobileBertForTokenClassification"),Rit.forEach(t),tNo=r(exe," (MobileBERT model)"),exe.forEach(t),aNo=i(J),y4=n(J,"LI",{});var oxe=s(y4);Xme=n(oxe,"STRONG",{});var Bit=s(Xme);nNo=r(Bit,"mpnet"),Bit.forEach(t),sNo=r(oxe," \u2014 "),uO=n(oxe,"A",{href:!0});var Pit=s(uO);lNo=r(Pit,"MPNetForTokenClassification"),Pit.forEach(t),iNo=r(oxe," (MPNet model)"),oxe.forEach(t),dNo=i(J),L4=n(J,"LI",{});var rxe=s(L4);zme=n(rxe,"STRONG",{});var Iit=s(zme);cNo=r(Iit,"nystromformer"),Iit.forEach(t),fNo=r(rxe," \u2014 "),_O=n(rxe,"A",{href:!0});var qit=s(_O);mNo=r(qit,"NystromformerForTokenClassification"),qit.forEach(t),gNo=r(rxe," (Nystromformer model)"),rxe.forEach(t),hNo=i(J),x4=n(J,"LI",{});var txe=s(x4);Qme=n(txe,"STRONG",{});var Nit=s(Qme);pNo=r(Nit,"qdqbert"),Nit.forEach(t),uNo=r(txe," \u2014 "),bO=n(txe,"A",{href:!0});var jit=s(bO);_No=r(jit,"QDQBertForTokenClassification"),jit.forEach(t),bNo=r(txe," (QDQBert model)"),txe.forEach(t),vNo=i(J),$4=n(J,"LI",{});var axe=s($4);Wme=n(axe,"STRONG",{});var Dit=s(Wme);FNo=r(Dit,"rembert"),Dit.forEach(t),TNo=r(axe," \u2014 "),vO=n(axe,"A",{href:!0});var Git=s(vO);MNo=r(Git,"RemBertForTokenClassification"),Git.forEach(t),ENo=r(axe," (RemBERT model)"),axe.forEach(t),CNo=i(J),k4=n(J,"LI",{});var nxe=s(k4);Hme=n(nxe,"STRONG",{});var Oit=s(Hme);wNo=r(Oit,"roberta"),Oit.forEach(t),ANo=r(nxe," \u2014 "),FO=n(nxe,"A",{href:!0});var Vit=s(FO);yNo=r(Vit,"RobertaForTokenClassification"),Vit.forEach(t),LNo=r(nxe," (RoBERTa model)"),nxe.forEach(t),xNo=i(J),S4=n(J,"LI",{});var sxe=s(S4);Ume=n(sxe,"STRONG",{});var Xit=s(Ume);$No=r(Xit,"roformer"),Xit.forEach(t),kNo=r(sxe," \u2014 "),TO=n(sxe,"A",{href:!0});var zit=s(TO);SNo=r(zit,"RoFormerForTokenClassification"),zit.forEach(t),RNo=r(sxe," (RoFormer model)"),sxe.forEach(t),BNo=i(J),R4=n(J,"LI",{});var lxe=s(R4);Jme=n(lxe,"STRONG",{});var Qit=s(Jme);PNo=r(Qit,"squeezebert"),Qit.forEach(t),INo=r(lxe," \u2014 "),MO=n(lxe,"A",{href:!0});var Wit=s(MO);qNo=r(Wit,"SqueezeBertForTokenClassification"),Wit.forEach(t),NNo=r(lxe," (SqueezeBERT model)"),lxe.forEach(t),jNo=i(J),B4=n(J,"LI",{});var ixe=s(B4);Yme=n(ixe,"STRONG",{});var Hit=s(Yme);DNo=r(Hit,"xlm"),Hit.forEach(t),GNo=r(ixe," \u2014 "),EO=n(ixe,"A",{href:!0});var Uit=s(EO);ONo=r(Uit,"XLMForTokenClassification"),Uit.forEach(t),VNo=r(ixe," (XLM model)"),ixe.forEach(t),XNo=i(J),P4=n(J,"LI",{});var dxe=s(P4);Kme=n(dxe,"STRONG",{});var Jit=s(Kme);zNo=r(Jit,"xlm-roberta"),Jit.forEach(t),QNo=r(dxe," \u2014 "),CO=n(dxe,"A",{href:!0});var Yit=s(CO);WNo=r(Yit,"XLMRobertaForTokenClassification"),Yit.forEach(t),HNo=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),UNo=i(J),I4=n(J,"LI",{});var cxe=s(I4);Zme=n(cxe,"STRONG",{});var Kit=s(Zme);JNo=r(Kit,"xlm-roberta-xl"),Kit.forEach(t),YNo=r(cxe," \u2014 "),wO=n(cxe,"A",{href:!0});var Zit=s(wO);KNo=r(Zit,"XLMRobertaXLForTokenClassification"),Zit.forEach(t),ZNo=r(cxe," (XLM-RoBERTa-XL model)"),cxe.forEach(t),ejo=i(J),q4=n(J,"LI",{});var fxe=s(q4);ege=n(fxe,"STRONG",{});var edt=s(ege);ojo=r(edt,"xlnet"),edt.forEach(t),rjo=r(fxe," \u2014 "),AO=n(fxe,"A",{href:!0});var odt=s(AO);tjo=r(odt,"XLNetForTokenClassification"),odt.forEach(t),ajo=r(fxe," (XLNet model)"),fxe.forEach(t),njo=i(J),N4=n(J,"LI",{});var mxe=s(N4);oge=n(mxe,"STRONG",{});var rdt=s(oge);sjo=r(rdt,"yoso"),rdt.forEach(t),ljo=r(mxe," \u2014 "),yO=n(mxe,"A",{href:!0});var tdt=s(yO);ijo=r(tdt,"YosoForTokenClassification"),tdt.forEach(t),djo=r(mxe," (YOSO model)"),mxe.forEach(t),J.forEach(t),cjo=i(la),j4=n(la,"P",{});var gxe=s(j4);fjo=r(gxe,"The model is set in evaluation mode by default using "),rge=n(gxe,"CODE",{});var adt=s(rge);mjo=r(adt,"model.eval()"),adt.forEach(t),gjo=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(gxe,"CODE",{});var ndt=s(tge);hjo=r(ndt,"model.train()"),ndt.forEach(t),gxe.forEach(t),pjo=i(la),T(D4.$$.fragment,la),la.forEach(t),Us.forEach(t),TIe=i(f),Ui=n(f,"H2",{class:!0});var wNe=s(Ui);G4=n(wNe,"A",{id:!0,class:!0,href:!0});var sdt=s(G4);age=n(sdt,"SPAN",{});var ldt=s(age);T(hy.$$.fragment,ldt),ldt.forEach(t),sdt.forEach(t),ujo=i(wNe),nge=n(wNe,"SPAN",{});var idt=s(nge);_jo=r(idt,"AutoModelForQuestionAnswering"),idt.forEach(t),wNe.forEach(t),MIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(py.$$.fragment,Js),bjo=i(Js),Ji=n(Js,"P",{});var LK=s(Ji);vjo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LO=n(LK,"A",{href:!0});var ddt=s(LO);Fjo=r(ddt,"from_pretrained()"),ddt.forEach(t),Tjo=r(LK," class method or the "),xO=n(LK,"A",{href:!0});var cdt=s(xO);Mjo=r(cdt,"from_config()"),cdt.forEach(t),Ejo=r(LK,` class
method.`),LK.forEach(t),Cjo=i(Js),uy=n(Js,"P",{});var ANe=s(uy);wjo=r(ANe,"This class cannot be instantiated directly using "),sge=n(ANe,"CODE",{});var fdt=s(sge);Ajo=r(fdt,"__init__()"),fdt.forEach(t),yjo=r(ANe," (throws an error)."),ANe.forEach(t),Ljo=i(Js),ct=n(Js,"DIV",{class:!0});var bA=s(ct);T(_y.$$.fragment,bA),xjo=i(bA),lge=n(bA,"P",{});var mdt=s(lge);$jo=r(mdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mdt.forEach(t),kjo=i(bA),Yi=n(bA,"P",{});var xK=s(Yi);Sjo=r(xK,`Note:
Loading a model from its configuration file does `),ige=n(xK,"STRONG",{});var gdt=s(ige);Rjo=r(gdt,"not"),gdt.forEach(t),Bjo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(xK,"A",{href:!0});var hdt=s($O);Pjo=r(hdt,"from_pretrained()"),hdt.forEach(t),Ijo=r(xK," to load the model weights."),xK.forEach(t),qjo=i(bA),T(O4.$$.fragment,bA),bA.forEach(t),Njo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(by.$$.fragment,ia),jjo=i(ia),dge=n(ia,"P",{});var pdt=s(dge);Djo=r(pdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pdt.forEach(t),Gjo=i(ia),Pa=n(ia,"P",{});var vA=s(Pa);Ojo=r(vA,"The model class to instantiate is selected based on the "),cge=n(vA,"CODE",{});var udt=s(cge);Vjo=r(udt,"model_type"),udt.forEach(t),Xjo=r(vA,` property of the config object (either
passed as an argument or loaded from `),fge=n(vA,"CODE",{});var _dt=s(fge);zjo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),Qjo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=n(vA,"CODE",{});var bdt=s(mge);Wjo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),Hjo=r(vA,":"),vA.forEach(t),Ujo=i(ia),O=n(ia,"UL",{});var X=s(O);V4=n(X,"LI",{});var hxe=s(V4);gge=n(hxe,"STRONG",{});var vdt=s(gge);Jjo=r(vdt,"albert"),vdt.forEach(t),Yjo=r(hxe," \u2014 "),kO=n(hxe,"A",{href:!0});var Fdt=s(kO);Kjo=r(Fdt,"AlbertForQuestionAnswering"),Fdt.forEach(t),Zjo=r(hxe," (ALBERT model)"),hxe.forEach(t),eDo=i(X),X4=n(X,"LI",{});var pxe=s(X4);hge=n(pxe,"STRONG",{});var Tdt=s(hge);oDo=r(Tdt,"bart"),Tdt.forEach(t),rDo=r(pxe," \u2014 "),SO=n(pxe,"A",{href:!0});var Mdt=s(SO);tDo=r(Mdt,"BartForQuestionAnswering"),Mdt.forEach(t),aDo=r(pxe," (BART model)"),pxe.forEach(t),nDo=i(X),z4=n(X,"LI",{});var uxe=s(z4);pge=n(uxe,"STRONG",{});var Edt=s(pge);sDo=r(Edt,"bert"),Edt.forEach(t),lDo=r(uxe," \u2014 "),RO=n(uxe,"A",{href:!0});var Cdt=s(RO);iDo=r(Cdt,"BertForQuestionAnswering"),Cdt.forEach(t),dDo=r(uxe," (BERT model)"),uxe.forEach(t),cDo=i(X),Q4=n(X,"LI",{});var _xe=s(Q4);uge=n(_xe,"STRONG",{});var wdt=s(uge);fDo=r(wdt,"big_bird"),wdt.forEach(t),mDo=r(_xe," \u2014 "),BO=n(_xe,"A",{href:!0});var Adt=s(BO);gDo=r(Adt,"BigBirdForQuestionAnswering"),Adt.forEach(t),hDo=r(_xe," (BigBird model)"),_xe.forEach(t),pDo=i(X),W4=n(X,"LI",{});var bxe=s(W4);_ge=n(bxe,"STRONG",{});var ydt=s(_ge);uDo=r(ydt,"bigbird_pegasus"),ydt.forEach(t),_Do=r(bxe," \u2014 "),PO=n(bxe,"A",{href:!0});var Ldt=s(PO);bDo=r(Ldt,"BigBirdPegasusForQuestionAnswering"),Ldt.forEach(t),vDo=r(bxe," (BigBirdPegasus model)"),bxe.forEach(t),FDo=i(X),H4=n(X,"LI",{});var vxe=s(H4);bge=n(vxe,"STRONG",{});var xdt=s(bge);TDo=r(xdt,"camembert"),xdt.forEach(t),MDo=r(vxe," \u2014 "),IO=n(vxe,"A",{href:!0});var $dt=s(IO);EDo=r($dt,"CamembertForQuestionAnswering"),$dt.forEach(t),CDo=r(vxe," (CamemBERT model)"),vxe.forEach(t),wDo=i(X),U4=n(X,"LI",{});var Fxe=s(U4);vge=n(Fxe,"STRONG",{});var kdt=s(vge);ADo=r(kdt,"canine"),kdt.forEach(t),yDo=r(Fxe," \u2014 "),qO=n(Fxe,"A",{href:!0});var Sdt=s(qO);LDo=r(Sdt,"CanineForQuestionAnswering"),Sdt.forEach(t),xDo=r(Fxe," (Canine model)"),Fxe.forEach(t),$Do=i(X),J4=n(X,"LI",{});var Txe=s(J4);Fge=n(Txe,"STRONG",{});var Rdt=s(Fge);kDo=r(Rdt,"convbert"),Rdt.forEach(t),SDo=r(Txe," \u2014 "),NO=n(Txe,"A",{href:!0});var Bdt=s(NO);RDo=r(Bdt,"ConvBertForQuestionAnswering"),Bdt.forEach(t),BDo=r(Txe," (ConvBERT model)"),Txe.forEach(t),PDo=i(X),Y4=n(X,"LI",{});var Mxe=s(Y4);Tge=n(Mxe,"STRONG",{});var Pdt=s(Tge);IDo=r(Pdt,"data2vec-text"),Pdt.forEach(t),qDo=r(Mxe," \u2014 "),jO=n(Mxe,"A",{href:!0});var Idt=s(jO);NDo=r(Idt,"Data2VecTextForQuestionAnswering"),Idt.forEach(t),jDo=r(Mxe," (Data2VecText model)"),Mxe.forEach(t),DDo=i(X),K4=n(X,"LI",{});var Exe=s(K4);Mge=n(Exe,"STRONG",{});var qdt=s(Mge);GDo=r(qdt,"deberta"),qdt.forEach(t),ODo=r(Exe," \u2014 "),DO=n(Exe,"A",{href:!0});var Ndt=s(DO);VDo=r(Ndt,"DebertaForQuestionAnswering"),Ndt.forEach(t),XDo=r(Exe," (DeBERTa model)"),Exe.forEach(t),zDo=i(X),Z4=n(X,"LI",{});var Cxe=s(Z4);Ege=n(Cxe,"STRONG",{});var jdt=s(Ege);QDo=r(jdt,"deberta-v2"),jdt.forEach(t),WDo=r(Cxe," \u2014 "),GO=n(Cxe,"A",{href:!0});var Ddt=s(GO);HDo=r(Ddt,"DebertaV2ForQuestionAnswering"),Ddt.forEach(t),UDo=r(Cxe," (DeBERTa-v2 model)"),Cxe.forEach(t),JDo=i(X),e5=n(X,"LI",{});var wxe=s(e5);Cge=n(wxe,"STRONG",{});var Gdt=s(Cge);YDo=r(Gdt,"distilbert"),Gdt.forEach(t),KDo=r(wxe," \u2014 "),OO=n(wxe,"A",{href:!0});var Odt=s(OO);ZDo=r(Odt,"DistilBertForQuestionAnswering"),Odt.forEach(t),eGo=r(wxe," (DistilBERT model)"),wxe.forEach(t),oGo=i(X),o5=n(X,"LI",{});var Axe=s(o5);wge=n(Axe,"STRONG",{});var Vdt=s(wge);rGo=r(Vdt,"electra"),Vdt.forEach(t),tGo=r(Axe," \u2014 "),VO=n(Axe,"A",{href:!0});var Xdt=s(VO);aGo=r(Xdt,"ElectraForQuestionAnswering"),Xdt.forEach(t),nGo=r(Axe," (ELECTRA model)"),Axe.forEach(t),sGo=i(X),r5=n(X,"LI",{});var yxe=s(r5);Age=n(yxe,"STRONG",{});var zdt=s(Age);lGo=r(zdt,"flaubert"),zdt.forEach(t),iGo=r(yxe," \u2014 "),XO=n(yxe,"A",{href:!0});var Qdt=s(XO);dGo=r(Qdt,"FlaubertForQuestionAnsweringSimple"),Qdt.forEach(t),cGo=r(yxe," (FlauBERT model)"),yxe.forEach(t),fGo=i(X),t5=n(X,"LI",{});var Lxe=s(t5);yge=n(Lxe,"STRONG",{});var Wdt=s(yge);mGo=r(Wdt,"fnet"),Wdt.forEach(t),gGo=r(Lxe," \u2014 "),zO=n(Lxe,"A",{href:!0});var Hdt=s(zO);hGo=r(Hdt,"FNetForQuestionAnswering"),Hdt.forEach(t),pGo=r(Lxe," (FNet model)"),Lxe.forEach(t),uGo=i(X),a5=n(X,"LI",{});var xxe=s(a5);Lge=n(xxe,"STRONG",{});var Udt=s(Lge);_Go=r(Udt,"funnel"),Udt.forEach(t),bGo=r(xxe," \u2014 "),QO=n(xxe,"A",{href:!0});var Jdt=s(QO);vGo=r(Jdt,"FunnelForQuestionAnswering"),Jdt.forEach(t),FGo=r(xxe," (Funnel Transformer model)"),xxe.forEach(t),TGo=i(X),n5=n(X,"LI",{});var $xe=s(n5);xge=n($xe,"STRONG",{});var Ydt=s(xge);MGo=r(Ydt,"gptj"),Ydt.forEach(t),EGo=r($xe," \u2014 "),WO=n($xe,"A",{href:!0});var Kdt=s(WO);CGo=r(Kdt,"GPTJForQuestionAnswering"),Kdt.forEach(t),wGo=r($xe," (GPT-J model)"),$xe.forEach(t),AGo=i(X),s5=n(X,"LI",{});var kxe=s(s5);$ge=n(kxe,"STRONG",{});var Zdt=s($ge);yGo=r(Zdt,"ibert"),Zdt.forEach(t),LGo=r(kxe," \u2014 "),HO=n(kxe,"A",{href:!0});var ect=s(HO);xGo=r(ect,"IBertForQuestionAnswering"),ect.forEach(t),$Go=r(kxe," (I-BERT model)"),kxe.forEach(t),kGo=i(X),l5=n(X,"LI",{});var Sxe=s(l5);kge=n(Sxe,"STRONG",{});var oct=s(kge);SGo=r(oct,"layoutlmv2"),oct.forEach(t),RGo=r(Sxe," \u2014 "),UO=n(Sxe,"A",{href:!0});var rct=s(UO);BGo=r(rct,"LayoutLMv2ForQuestionAnswering"),rct.forEach(t),PGo=r(Sxe," (LayoutLMv2 model)"),Sxe.forEach(t),IGo=i(X),i5=n(X,"LI",{});var Rxe=s(i5);Sge=n(Rxe,"STRONG",{});var tct=s(Sge);qGo=r(tct,"led"),tct.forEach(t),NGo=r(Rxe," \u2014 "),JO=n(Rxe,"A",{href:!0});var act=s(JO);jGo=r(act,"LEDForQuestionAnswering"),act.forEach(t),DGo=r(Rxe," (LED model)"),Rxe.forEach(t),GGo=i(X),d5=n(X,"LI",{});var Bxe=s(d5);Rge=n(Bxe,"STRONG",{});var nct=s(Rge);OGo=r(nct,"longformer"),nct.forEach(t),VGo=r(Bxe," \u2014 "),YO=n(Bxe,"A",{href:!0});var sct=s(YO);XGo=r(sct,"LongformerForQuestionAnswering"),sct.forEach(t),zGo=r(Bxe," (Longformer model)"),Bxe.forEach(t),QGo=i(X),c5=n(X,"LI",{});var Pxe=s(c5);Bge=n(Pxe,"STRONG",{});var lct=s(Bge);WGo=r(lct,"lxmert"),lct.forEach(t),HGo=r(Pxe," \u2014 "),KO=n(Pxe,"A",{href:!0});var ict=s(KO);UGo=r(ict,"LxmertForQuestionAnswering"),ict.forEach(t),JGo=r(Pxe," (LXMERT model)"),Pxe.forEach(t),YGo=i(X),f5=n(X,"LI",{});var Ixe=s(f5);Pge=n(Ixe,"STRONG",{});var dct=s(Pge);KGo=r(dct,"mbart"),dct.forEach(t),ZGo=r(Ixe," \u2014 "),ZO=n(Ixe,"A",{href:!0});var cct=s(ZO);eOo=r(cct,"MBartForQuestionAnswering"),cct.forEach(t),oOo=r(Ixe," (mBART model)"),Ixe.forEach(t),rOo=i(X),m5=n(X,"LI",{});var qxe=s(m5);Ige=n(qxe,"STRONG",{});var fct=s(Ige);tOo=r(fct,"megatron-bert"),fct.forEach(t),aOo=r(qxe," \u2014 "),eV=n(qxe,"A",{href:!0});var mct=s(eV);nOo=r(mct,"MegatronBertForQuestionAnswering"),mct.forEach(t),sOo=r(qxe," (MegatronBert model)"),qxe.forEach(t),lOo=i(X),g5=n(X,"LI",{});var Nxe=s(g5);qge=n(Nxe,"STRONG",{});var gct=s(qge);iOo=r(gct,"mobilebert"),gct.forEach(t),dOo=r(Nxe," \u2014 "),oV=n(Nxe,"A",{href:!0});var hct=s(oV);cOo=r(hct,"MobileBertForQuestionAnswering"),hct.forEach(t),fOo=r(Nxe," (MobileBERT model)"),Nxe.forEach(t),mOo=i(X),h5=n(X,"LI",{});var jxe=s(h5);Nge=n(jxe,"STRONG",{});var pct=s(Nge);gOo=r(pct,"mpnet"),pct.forEach(t),hOo=r(jxe," \u2014 "),rV=n(jxe,"A",{href:!0});var uct=s(rV);pOo=r(uct,"MPNetForQuestionAnswering"),uct.forEach(t),uOo=r(jxe," (MPNet model)"),jxe.forEach(t),_Oo=i(X),p5=n(X,"LI",{});var Dxe=s(p5);jge=n(Dxe,"STRONG",{});var _ct=s(jge);bOo=r(_ct,"nystromformer"),_ct.forEach(t),vOo=r(Dxe," \u2014 "),tV=n(Dxe,"A",{href:!0});var bct=s(tV);FOo=r(bct,"NystromformerForQuestionAnswering"),bct.forEach(t),TOo=r(Dxe," (Nystromformer model)"),Dxe.forEach(t),MOo=i(X),u5=n(X,"LI",{});var Gxe=s(u5);Dge=n(Gxe,"STRONG",{});var vct=s(Dge);EOo=r(vct,"qdqbert"),vct.forEach(t),COo=r(Gxe," \u2014 "),aV=n(Gxe,"A",{href:!0});var Fct=s(aV);wOo=r(Fct,"QDQBertForQuestionAnswering"),Fct.forEach(t),AOo=r(Gxe," (QDQBert model)"),Gxe.forEach(t),yOo=i(X),_5=n(X,"LI",{});var Oxe=s(_5);Gge=n(Oxe,"STRONG",{});var Tct=s(Gge);LOo=r(Tct,"reformer"),Tct.forEach(t),xOo=r(Oxe," \u2014 "),nV=n(Oxe,"A",{href:!0});var Mct=s(nV);$Oo=r(Mct,"ReformerForQuestionAnswering"),Mct.forEach(t),kOo=r(Oxe," (Reformer model)"),Oxe.forEach(t),SOo=i(X),b5=n(X,"LI",{});var Vxe=s(b5);Oge=n(Vxe,"STRONG",{});var Ect=s(Oge);ROo=r(Ect,"rembert"),Ect.forEach(t),BOo=r(Vxe," \u2014 "),sV=n(Vxe,"A",{href:!0});var Cct=s(sV);POo=r(Cct,"RemBertForQuestionAnswering"),Cct.forEach(t),IOo=r(Vxe," (RemBERT model)"),Vxe.forEach(t),qOo=i(X),v5=n(X,"LI",{});var Xxe=s(v5);Vge=n(Xxe,"STRONG",{});var wct=s(Vge);NOo=r(wct,"roberta"),wct.forEach(t),jOo=r(Xxe," \u2014 "),lV=n(Xxe,"A",{href:!0});var Act=s(lV);DOo=r(Act,"RobertaForQuestionAnswering"),Act.forEach(t),GOo=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),OOo=i(X),F5=n(X,"LI",{});var zxe=s(F5);Xge=n(zxe,"STRONG",{});var yct=s(Xge);VOo=r(yct,"roformer"),yct.forEach(t),XOo=r(zxe," \u2014 "),iV=n(zxe,"A",{href:!0});var Lct=s(iV);zOo=r(Lct,"RoFormerForQuestionAnswering"),Lct.forEach(t),QOo=r(zxe," (RoFormer model)"),zxe.forEach(t),WOo=i(X),T5=n(X,"LI",{});var Qxe=s(T5);zge=n(Qxe,"STRONG",{});var xct=s(zge);HOo=r(xct,"splinter"),xct.forEach(t),UOo=r(Qxe," \u2014 "),dV=n(Qxe,"A",{href:!0});var $ct=s(dV);JOo=r($ct,"SplinterForQuestionAnswering"),$ct.forEach(t),YOo=r(Qxe," (Splinter model)"),Qxe.forEach(t),KOo=i(X),M5=n(X,"LI",{});var Wxe=s(M5);Qge=n(Wxe,"STRONG",{});var kct=s(Qge);ZOo=r(kct,"squeezebert"),kct.forEach(t),eVo=r(Wxe," \u2014 "),cV=n(Wxe,"A",{href:!0});var Sct=s(cV);oVo=r(Sct,"SqueezeBertForQuestionAnswering"),Sct.forEach(t),rVo=r(Wxe," (SqueezeBERT model)"),Wxe.forEach(t),tVo=i(X),E5=n(X,"LI",{});var Hxe=s(E5);Wge=n(Hxe,"STRONG",{});var Rct=s(Wge);aVo=r(Rct,"xlm"),Rct.forEach(t),nVo=r(Hxe," \u2014 "),fV=n(Hxe,"A",{href:!0});var Bct=s(fV);sVo=r(Bct,"XLMForQuestionAnsweringSimple"),Bct.forEach(t),lVo=r(Hxe," (XLM model)"),Hxe.forEach(t),iVo=i(X),C5=n(X,"LI",{});var Uxe=s(C5);Hge=n(Uxe,"STRONG",{});var Pct=s(Hge);dVo=r(Pct,"xlm-roberta"),Pct.forEach(t),cVo=r(Uxe," \u2014 "),mV=n(Uxe,"A",{href:!0});var Ict=s(mV);fVo=r(Ict,"XLMRobertaForQuestionAnswering"),Ict.forEach(t),mVo=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),gVo=i(X),w5=n(X,"LI",{});var Jxe=s(w5);Uge=n(Jxe,"STRONG",{});var qct=s(Uge);hVo=r(qct,"xlm-roberta-xl"),qct.forEach(t),pVo=r(Jxe," \u2014 "),gV=n(Jxe,"A",{href:!0});var Nct=s(gV);uVo=r(Nct,"XLMRobertaXLForQuestionAnswering"),Nct.forEach(t),_Vo=r(Jxe," (XLM-RoBERTa-XL model)"),Jxe.forEach(t),bVo=i(X),A5=n(X,"LI",{});var Yxe=s(A5);Jge=n(Yxe,"STRONG",{});var jct=s(Jge);vVo=r(jct,"xlnet"),jct.forEach(t),FVo=r(Yxe," \u2014 "),hV=n(Yxe,"A",{href:!0});var Dct=s(hV);TVo=r(Dct,"XLNetForQuestionAnsweringSimple"),Dct.forEach(t),MVo=r(Yxe," (XLNet model)"),Yxe.forEach(t),EVo=i(X),y5=n(X,"LI",{});var Kxe=s(y5);Yge=n(Kxe,"STRONG",{});var Gct=s(Yge);CVo=r(Gct,"yoso"),Gct.forEach(t),wVo=r(Kxe," \u2014 "),pV=n(Kxe,"A",{href:!0});var Oct=s(pV);AVo=r(Oct,"YosoForQuestionAnswering"),Oct.forEach(t),yVo=r(Kxe," (YOSO model)"),Kxe.forEach(t),X.forEach(t),LVo=i(ia),L5=n(ia,"P",{});var Zxe=s(L5);xVo=r(Zxe,"The model is set in evaluation mode by default using "),Kge=n(Zxe,"CODE",{});var Vct=s(Kge);$Vo=r(Vct,"model.eval()"),Vct.forEach(t),kVo=r(Zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(Zxe,"CODE",{});var Xct=s(Zge);SVo=r(Xct,"model.train()"),Xct.forEach(t),Zxe.forEach(t),RVo=i(ia),T(x5.$$.fragment,ia),ia.forEach(t),Js.forEach(t),EIe=i(f),Ki=n(f,"H2",{class:!0});var yNe=s(Ki);$5=n(yNe,"A",{id:!0,class:!0,href:!0});var zct=s($5);ehe=n(zct,"SPAN",{});var Qct=s(ehe);T(vy.$$.fragment,Qct),Qct.forEach(t),zct.forEach(t),BVo=i(yNe),ohe=n(yNe,"SPAN",{});var Wct=s(ohe);PVo=r(Wct,"AutoModelForTableQuestionAnswering"),Wct.forEach(t),yNe.forEach(t),CIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Fy.$$.fragment,Ys),IVo=i(Ys),Zi=n(Ys,"P",{});var $K=s(Zi);qVo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uV=n($K,"A",{href:!0});var Hct=s(uV);NVo=r(Hct,"from_pretrained()"),Hct.forEach(t),jVo=r($K," class method or the "),_V=n($K,"A",{href:!0});var Uct=s(_V);DVo=r(Uct,"from_config()"),Uct.forEach(t),GVo=r($K,` class
method.`),$K.forEach(t),OVo=i(Ys),Ty=n(Ys,"P",{});var LNe=s(Ty);VVo=r(LNe,"This class cannot be instantiated directly using "),rhe=n(LNe,"CODE",{});var Jct=s(rhe);XVo=r(Jct,"__init__()"),Jct.forEach(t),zVo=r(LNe," (throws an error)."),LNe.forEach(t),QVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var FA=s(ft);T(My.$$.fragment,FA),WVo=i(FA),the=n(FA,"P",{});var Yct=s(the);HVo=r(Yct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Yct.forEach(t),UVo=i(FA),ed=n(FA,"P",{});var kK=s(ed);JVo=r(kK,`Note:
Loading a model from its configuration file does `),ahe=n(kK,"STRONG",{});var Kct=s(ahe);YVo=r(Kct,"not"),Kct.forEach(t),KVo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=n(kK,"A",{href:!0});var Zct=s(bV);ZVo=r(Zct,"from_pretrained()"),Zct.forEach(t),eXo=r(kK," to load the model weights."),kK.forEach(t),oXo=i(FA),T(k5.$$.fragment,FA),FA.forEach(t),rXo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(Ey.$$.fragment,da),tXo=i(da),nhe=n(da,"P",{});var eft=s(nhe);aXo=r(eft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eft.forEach(t),nXo=i(da),Ia=n(da,"P",{});var TA=s(Ia);sXo=r(TA,"The model class to instantiate is selected based on the "),she=n(TA,"CODE",{});var oft=s(she);lXo=r(oft,"model_type"),oft.forEach(t),iXo=r(TA,` property of the config object (either
passed as an argument or loaded from `),lhe=n(TA,"CODE",{});var rft=s(lhe);dXo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),cXo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(TA,"CODE",{});var tft=s(ihe);fXo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),mXo=r(TA,":"),TA.forEach(t),gXo=i(da),dhe=n(da,"UL",{});var aft=s(dhe);S5=n(aft,"LI",{});var e9e=s(S5);che=n(e9e,"STRONG",{});var nft=s(che);hXo=r(nft,"tapas"),nft.forEach(t),pXo=r(e9e," \u2014 "),vV=n(e9e,"A",{href:!0});var sft=s(vV);uXo=r(sft,"TapasForQuestionAnswering"),sft.forEach(t),_Xo=r(e9e," (TAPAS model)"),e9e.forEach(t),aft.forEach(t),bXo=i(da),R5=n(da,"P",{});var o9e=s(R5);vXo=r(o9e,"The model is set in evaluation mode by default using "),fhe=n(o9e,"CODE",{});var lft=s(fhe);FXo=r(lft,"model.eval()"),lft.forEach(t),TXo=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=n(o9e,"CODE",{});var ift=s(mhe);MXo=r(ift,"model.train()"),ift.forEach(t),o9e.forEach(t),EXo=i(da),T(B5.$$.fragment,da),da.forEach(t),Ys.forEach(t),wIe=i(f),od=n(f,"H2",{class:!0});var xNe=s(od);P5=n(xNe,"A",{id:!0,class:!0,href:!0});var dft=s(P5);ghe=n(dft,"SPAN",{});var cft=s(ghe);T(Cy.$$.fragment,cft),cft.forEach(t),dft.forEach(t),CXo=i(xNe),hhe=n(xNe,"SPAN",{});var fft=s(hhe);wXo=r(fft,"AutoModelForImageClassification"),fft.forEach(t),xNe.forEach(t),AIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(wy.$$.fragment,Ks),AXo=i(Ks),rd=n(Ks,"P",{});var SK=s(rd);yXo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FV=n(SK,"A",{href:!0});var mft=s(FV);LXo=r(mft,"from_pretrained()"),mft.forEach(t),xXo=r(SK," class method or the "),TV=n(SK,"A",{href:!0});var gft=s(TV);$Xo=r(gft,"from_config()"),gft.forEach(t),kXo=r(SK,` class
method.`),SK.forEach(t),SXo=i(Ks),Ay=n(Ks,"P",{});var $Ne=s(Ay);RXo=r($Ne,"This class cannot be instantiated directly using "),phe=n($Ne,"CODE",{});var hft=s(phe);BXo=r(hft,"__init__()"),hft.forEach(t),PXo=r($Ne," (throws an error)."),$Ne.forEach(t),IXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var MA=s(mt);T(yy.$$.fragment,MA),qXo=i(MA),uhe=n(MA,"P",{});var pft=s(uhe);NXo=r(pft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pft.forEach(t),jXo=i(MA),td=n(MA,"P",{});var RK=s(td);DXo=r(RK,`Note:
Loading a model from its configuration file does `),_he=n(RK,"STRONG",{});var uft=s(_he);GXo=r(uft,"not"),uft.forEach(t),OXo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(RK,"A",{href:!0});var _ft=s(MV);VXo=r(_ft,"from_pretrained()"),_ft.forEach(t),XXo=r(RK," to load the model weights."),RK.forEach(t),zXo=i(MA),T(I5.$$.fragment,MA),MA.forEach(t),QXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(Ly.$$.fragment,ca),WXo=i(ca),bhe=n(ca,"P",{});var bft=s(bhe);HXo=r(bft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bft.forEach(t),UXo=i(ca),qa=n(ca,"P",{});var EA=s(qa);JXo=r(EA,"The model class to instantiate is selected based on the "),vhe=n(EA,"CODE",{});var vft=s(vhe);YXo=r(vft,"model_type"),vft.forEach(t),KXo=r(EA,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(EA,"CODE",{});var Fft=s(Fhe);ZXo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),ezo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(EA,"CODE",{});var Tft=s(The);ozo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),rzo=r(EA,":"),EA.forEach(t),tzo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);q5=n(Ee,"LI",{});var r9e=s(q5);Mhe=n(r9e,"STRONG",{});var Mft=s(Mhe);azo=r(Mft,"beit"),Mft.forEach(t),nzo=r(r9e," \u2014 "),EV=n(r9e,"A",{href:!0});var Eft=s(EV);szo=r(Eft,"BeitForImageClassification"),Eft.forEach(t),lzo=r(r9e," (BEiT model)"),r9e.forEach(t),izo=i(Ee),N5=n(Ee,"LI",{});var t9e=s(N5);Ehe=n(t9e,"STRONG",{});var Cft=s(Ehe);dzo=r(Cft,"convnext"),Cft.forEach(t),czo=r(t9e," \u2014 "),CV=n(t9e,"A",{href:!0});var wft=s(CV);fzo=r(wft,"ConvNextForImageClassification"),wft.forEach(t),mzo=r(t9e," (ConvNext model)"),t9e.forEach(t),gzo=i(Ee),j5=n(Ee,"LI",{});var a9e=s(j5);Che=n(a9e,"STRONG",{});var Aft=s(Che);hzo=r(Aft,"data2vec-vision"),Aft.forEach(t),pzo=r(a9e," \u2014 "),wV=n(a9e,"A",{href:!0});var yft=s(wV);uzo=r(yft,"Data2VecVisionForImageClassification"),yft.forEach(t),_zo=r(a9e," (Data2VecVision model)"),a9e.forEach(t),bzo=i(Ee),Bs=n(Ee,"LI",{});var g$=s(Bs);whe=n(g$,"STRONG",{});var Lft=s(whe);vzo=r(Lft,"deit"),Lft.forEach(t),Fzo=r(g$," \u2014 "),AV=n(g$,"A",{href:!0});var xft=s(AV);Tzo=r(xft,"DeiTForImageClassification"),xft.forEach(t),Mzo=r(g$," or "),yV=n(g$,"A",{href:!0});var $ft=s(yV);Ezo=r($ft,"DeiTForImageClassificationWithTeacher"),$ft.forEach(t),Czo=r(g$," (DeiT model)"),g$.forEach(t),wzo=i(Ee),D5=n(Ee,"LI",{});var n9e=s(D5);Ahe=n(n9e,"STRONG",{});var kft=s(Ahe);Azo=r(kft,"imagegpt"),kft.forEach(t),yzo=r(n9e," \u2014 "),LV=n(n9e,"A",{href:!0});var Sft=s(LV);Lzo=r(Sft,"ImageGPTForImageClassification"),Sft.forEach(t),xzo=r(n9e," (ImageGPT model)"),n9e.forEach(t),$zo=i(Ee),gt=n(Ee,"LI",{});var mf=s(gt);yhe=n(mf,"STRONG",{});var Rft=s(yhe);kzo=r(Rft,"perceiver"),Rft.forEach(t),Szo=r(mf," \u2014 "),xV=n(mf,"A",{href:!0});var Bft=s(xV);Rzo=r(Bft,"PerceiverForImageClassificationLearned"),Bft.forEach(t),Bzo=r(mf," or "),$V=n(mf,"A",{href:!0});var Pft=s($V);Pzo=r(Pft,"PerceiverForImageClassificationFourier"),Pft.forEach(t),Izo=r(mf," or "),kV=n(mf,"A",{href:!0});var Ift=s(kV);qzo=r(Ift,"PerceiverForImageClassificationConvProcessing"),Ift.forEach(t),Nzo=r(mf," (Perceiver model)"),mf.forEach(t),jzo=i(Ee),G5=n(Ee,"LI",{});var s9e=s(G5);Lhe=n(s9e,"STRONG",{});var qft=s(Lhe);Dzo=r(qft,"poolformer"),qft.forEach(t),Gzo=r(s9e," \u2014 "),SV=n(s9e,"A",{href:!0});var Nft=s(SV);Ozo=r(Nft,"PoolFormerForImageClassification"),Nft.forEach(t),Vzo=r(s9e," (PoolFormer model)"),s9e.forEach(t),Xzo=i(Ee),O5=n(Ee,"LI",{});var l9e=s(O5);xhe=n(l9e,"STRONG",{});var jft=s(xhe);zzo=r(jft,"regnet"),jft.forEach(t),Qzo=r(l9e," \u2014 "),RV=n(l9e,"A",{href:!0});var Dft=s(RV);Wzo=r(Dft,"RegNetForImageClassification"),Dft.forEach(t),Hzo=r(l9e," (RegNet model)"),l9e.forEach(t),Uzo=i(Ee),V5=n(Ee,"LI",{});var i9e=s(V5);$he=n(i9e,"STRONG",{});var Gft=s($he);Jzo=r(Gft,"resnet"),Gft.forEach(t),Yzo=r(i9e," \u2014 "),BV=n(i9e,"A",{href:!0});var Oft=s(BV);Kzo=r(Oft,"ResNetForImageClassification"),Oft.forEach(t),Zzo=r(i9e," (ResNet model)"),i9e.forEach(t),eQo=i(Ee),X5=n(Ee,"LI",{});var d9e=s(X5);khe=n(d9e,"STRONG",{});var Vft=s(khe);oQo=r(Vft,"segformer"),Vft.forEach(t),rQo=r(d9e," \u2014 "),PV=n(d9e,"A",{href:!0});var Xft=s(PV);tQo=r(Xft,"SegformerForImageClassification"),Xft.forEach(t),aQo=r(d9e," (SegFormer model)"),d9e.forEach(t),nQo=i(Ee),z5=n(Ee,"LI",{});var c9e=s(z5);She=n(c9e,"STRONG",{});var zft=s(She);sQo=r(zft,"swin"),zft.forEach(t),lQo=r(c9e," \u2014 "),IV=n(c9e,"A",{href:!0});var Qft=s(IV);iQo=r(Qft,"SwinForImageClassification"),Qft.forEach(t),dQo=r(c9e," (Swin model)"),c9e.forEach(t),cQo=i(Ee),Q5=n(Ee,"LI",{});var f9e=s(Q5);Rhe=n(f9e,"STRONG",{});var Wft=s(Rhe);fQo=r(Wft,"van"),Wft.forEach(t),mQo=r(f9e," \u2014 "),qV=n(f9e,"A",{href:!0});var Hft=s(qV);gQo=r(Hft,"VanForImageClassification"),Hft.forEach(t),hQo=r(f9e," (VAN model)"),f9e.forEach(t),pQo=i(Ee),W5=n(Ee,"LI",{});var m9e=s(W5);Bhe=n(m9e,"STRONG",{});var Uft=s(Bhe);uQo=r(Uft,"vit"),Uft.forEach(t),_Qo=r(m9e," \u2014 "),NV=n(m9e,"A",{href:!0});var Jft=s(NV);bQo=r(Jft,"ViTForImageClassification"),Jft.forEach(t),vQo=r(m9e," (ViT model)"),m9e.forEach(t),Ee.forEach(t),FQo=i(ca),H5=n(ca,"P",{});var g9e=s(H5);TQo=r(g9e,"The model is set in evaluation mode by default using "),Phe=n(g9e,"CODE",{});var Yft=s(Phe);MQo=r(Yft,"model.eval()"),Yft.forEach(t),EQo=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(g9e,"CODE",{});var Kft=s(Ihe);CQo=r(Kft,"model.train()"),Kft.forEach(t),g9e.forEach(t),wQo=i(ca),T(U5.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),yIe=i(f),ad=n(f,"H2",{class:!0});var kNe=s(ad);J5=n(kNe,"A",{id:!0,class:!0,href:!0});var Zft=s(J5);qhe=n(Zft,"SPAN",{});var emt=s(qhe);T(xy.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),AQo=i(kNe),Nhe=n(kNe,"SPAN",{});var omt=s(Nhe);yQo=r(omt,"AutoModelForVision2Seq"),omt.forEach(t),kNe.forEach(t),LIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T($y.$$.fragment,Zs),LQo=i(Zs),nd=n(Zs,"P",{});var BK=s(nd);xQo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),jV=n(BK,"A",{href:!0});var rmt=s(jV);$Qo=r(rmt,"from_pretrained()"),rmt.forEach(t),kQo=r(BK," class method or the "),DV=n(BK,"A",{href:!0});var tmt=s(DV);SQo=r(tmt,"from_config()"),tmt.forEach(t),RQo=r(BK,` class
method.`),BK.forEach(t),BQo=i(Zs),ky=n(Zs,"P",{});var SNe=s(ky);PQo=r(SNe,"This class cannot be instantiated directly using "),jhe=n(SNe,"CODE",{});var amt=s(jhe);IQo=r(amt,"__init__()"),amt.forEach(t),qQo=r(SNe," (throws an error)."),SNe.forEach(t),NQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var CA=s(ht);T(Sy.$$.fragment,CA),jQo=i(CA),Dhe=n(CA,"P",{});var nmt=s(Dhe);DQo=r(nmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nmt.forEach(t),GQo=i(CA),sd=n(CA,"P",{});var PK=s(sd);OQo=r(PK,`Note:
Loading a model from its configuration file does `),Ghe=n(PK,"STRONG",{});var smt=s(Ghe);VQo=r(smt,"not"),smt.forEach(t),XQo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(PK,"A",{href:!0});var lmt=s(GV);zQo=r(lmt,"from_pretrained()"),lmt.forEach(t),QQo=r(PK," to load the model weights."),PK.forEach(t),WQo=i(CA),T(Y5.$$.fragment,CA),CA.forEach(t),HQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(Ry.$$.fragment,fa),UQo=i(fa),Ohe=n(fa,"P",{});var imt=s(Ohe);JQo=r(imt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),imt.forEach(t),YQo=i(fa),Na=n(fa,"P",{});var wA=s(Na);KQo=r(wA,"The model class to instantiate is selected based on the "),Vhe=n(wA,"CODE",{});var dmt=s(Vhe);ZQo=r(dmt,"model_type"),dmt.forEach(t),eWo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(wA,"CODE",{});var cmt=s(Xhe);oWo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),rWo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(wA,"CODE",{});var fmt=s(zhe);tWo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),aWo=r(wA,":"),wA.forEach(t),nWo=i(fa),Qhe=n(fa,"UL",{});var mmt=s(Qhe);K5=n(mmt,"LI",{});var h9e=s(K5);Whe=n(h9e,"STRONG",{});var gmt=s(Whe);sWo=r(gmt,"vision-encoder-decoder"),gmt.forEach(t),lWo=r(h9e," \u2014 "),OV=n(h9e,"A",{href:!0});var hmt=s(OV);iWo=r(hmt,"VisionEncoderDecoderModel"),hmt.forEach(t),dWo=r(h9e," (Vision Encoder decoder model)"),h9e.forEach(t),mmt.forEach(t),cWo=i(fa),Z5=n(fa,"P",{});var p9e=s(Z5);fWo=r(p9e,"The model is set in evaluation mode by default using "),Hhe=n(p9e,"CODE",{});var pmt=s(Hhe);mWo=r(pmt,"model.eval()"),pmt.forEach(t),gWo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(p9e,"CODE",{});var umt=s(Uhe);hWo=r(umt,"model.train()"),umt.forEach(t),p9e.forEach(t),pWo=i(fa),T(ev.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),xIe=i(f),ld=n(f,"H2",{class:!0});var RNe=s(ld);ov=n(RNe,"A",{id:!0,class:!0,href:!0});var _mt=s(ov);Jhe=n(_mt,"SPAN",{});var bmt=s(Jhe);T(By.$$.fragment,bmt),bmt.forEach(t),_mt.forEach(t),uWo=i(RNe),Yhe=n(RNe,"SPAN",{});var vmt=s(Yhe);_Wo=r(vmt,"AutoModelForAudioClassification"),vmt.forEach(t),RNe.forEach(t),$Ie=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Py.$$.fragment,el),bWo=i(el),id=n(el,"P",{});var IK=s(id);vWo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VV=n(IK,"A",{href:!0});var Fmt=s(VV);FWo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),TWo=r(IK," class method or the "),XV=n(IK,"A",{href:!0});var Tmt=s(XV);MWo=r(Tmt,"from_config()"),Tmt.forEach(t),EWo=r(IK,` class
method.`),IK.forEach(t),CWo=i(el),Iy=n(el,"P",{});var BNe=s(Iy);wWo=r(BNe,"This class cannot be instantiated directly using "),Khe=n(BNe,"CODE",{});var Mmt=s(Khe);AWo=r(Mmt,"__init__()"),Mmt.forEach(t),yWo=r(BNe," (throws an error)."),BNe.forEach(t),LWo=i(el),pt=n(el,"DIV",{class:!0});var AA=s(pt);T(qy.$$.fragment,AA),xWo=i(AA),Zhe=n(AA,"P",{});var Emt=s(Zhe);$Wo=r(Emt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Emt.forEach(t),kWo=i(AA),dd=n(AA,"P",{});var qK=s(dd);SWo=r(qK,`Note:
Loading a model from its configuration file does `),epe=n(qK,"STRONG",{});var Cmt=s(epe);RWo=r(Cmt,"not"),Cmt.forEach(t),BWo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(qK,"A",{href:!0});var wmt=s(zV);PWo=r(wmt,"from_pretrained()"),wmt.forEach(t),IWo=r(qK," to load the model weights."),qK.forEach(t),qWo=i(AA),T(rv.$$.fragment,AA),AA.forEach(t),NWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(Ny.$$.fragment,ma),jWo=i(ma),ope=n(ma,"P",{});var Amt=s(ope);DWo=r(Amt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Amt.forEach(t),GWo=i(ma),ja=n(ma,"P",{});var yA=s(ja);OWo=r(yA,"The model class to instantiate is selected based on the "),rpe=n(yA,"CODE",{});var ymt=s(rpe);VWo=r(ymt,"model_type"),ymt.forEach(t),XWo=r(yA,` property of the config object (either
passed as an argument or loaded from `),tpe=n(yA,"CODE",{});var Lmt=s(tpe);zWo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),QWo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(yA,"CODE",{});var xmt=s(ape);WWo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),HWo=r(yA,":"),yA.forEach(t),UWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);tv=n(bo,"LI",{});var u9e=s(tv);npe=n(u9e,"STRONG",{});var $mt=s(npe);JWo=r($mt,"data2vec-audio"),$mt.forEach(t),YWo=r(u9e," \u2014 "),QV=n(u9e,"A",{href:!0});var kmt=s(QV);KWo=r(kmt,"Data2VecAudioForSequenceClassification"),kmt.forEach(t),ZWo=r(u9e," (Data2VecAudio model)"),u9e.forEach(t),eHo=i(bo),av=n(bo,"LI",{});var _9e=s(av);spe=n(_9e,"STRONG",{});var Smt=s(spe);oHo=r(Smt,"hubert"),Smt.forEach(t),rHo=r(_9e," \u2014 "),WV=n(_9e,"A",{href:!0});var Rmt=s(WV);tHo=r(Rmt,"HubertForSequenceClassification"),Rmt.forEach(t),aHo=r(_9e," (Hubert model)"),_9e.forEach(t),nHo=i(bo),nv=n(bo,"LI",{});var b9e=s(nv);lpe=n(b9e,"STRONG",{});var Bmt=s(lpe);sHo=r(Bmt,"sew"),Bmt.forEach(t),lHo=r(b9e," \u2014 "),HV=n(b9e,"A",{href:!0});var Pmt=s(HV);iHo=r(Pmt,"SEWForSequenceClassification"),Pmt.forEach(t),dHo=r(b9e," (SEW model)"),b9e.forEach(t),cHo=i(bo),sv=n(bo,"LI",{});var v9e=s(sv);ipe=n(v9e,"STRONG",{});var Imt=s(ipe);fHo=r(Imt,"sew-d"),Imt.forEach(t),mHo=r(v9e," \u2014 "),UV=n(v9e,"A",{href:!0});var qmt=s(UV);gHo=r(qmt,"SEWDForSequenceClassification"),qmt.forEach(t),hHo=r(v9e," (SEW-D model)"),v9e.forEach(t),pHo=i(bo),lv=n(bo,"LI",{});var F9e=s(lv);dpe=n(F9e,"STRONG",{});var Nmt=s(dpe);uHo=r(Nmt,"unispeech"),Nmt.forEach(t),_Ho=r(F9e," \u2014 "),JV=n(F9e,"A",{href:!0});var jmt=s(JV);bHo=r(jmt,"UniSpeechForSequenceClassification"),jmt.forEach(t),vHo=r(F9e," (UniSpeech model)"),F9e.forEach(t),FHo=i(bo),iv=n(bo,"LI",{});var T9e=s(iv);cpe=n(T9e,"STRONG",{});var Dmt=s(cpe);THo=r(Dmt,"unispeech-sat"),Dmt.forEach(t),MHo=r(T9e," \u2014 "),YV=n(T9e,"A",{href:!0});var Gmt=s(YV);EHo=r(Gmt,"UniSpeechSatForSequenceClassification"),Gmt.forEach(t),CHo=r(T9e," (UniSpeechSat model)"),T9e.forEach(t),wHo=i(bo),dv=n(bo,"LI",{});var M9e=s(dv);fpe=n(M9e,"STRONG",{});var Omt=s(fpe);AHo=r(Omt,"wav2vec2"),Omt.forEach(t),yHo=r(M9e," \u2014 "),KV=n(M9e,"A",{href:!0});var Vmt=s(KV);LHo=r(Vmt,"Wav2Vec2ForSequenceClassification"),Vmt.forEach(t),xHo=r(M9e," (Wav2Vec2 model)"),M9e.forEach(t),$Ho=i(bo),cv=n(bo,"LI",{});var E9e=s(cv);mpe=n(E9e,"STRONG",{});var Xmt=s(mpe);kHo=r(Xmt,"wavlm"),Xmt.forEach(t),SHo=r(E9e," \u2014 "),ZV=n(E9e,"A",{href:!0});var zmt=s(ZV);RHo=r(zmt,"WavLMForSequenceClassification"),zmt.forEach(t),BHo=r(E9e," (WavLM model)"),E9e.forEach(t),bo.forEach(t),PHo=i(ma),fv=n(ma,"P",{});var C9e=s(fv);IHo=r(C9e,"The model is set in evaluation mode by default using "),gpe=n(C9e,"CODE",{});var Qmt=s(gpe);qHo=r(Qmt,"model.eval()"),Qmt.forEach(t),NHo=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(C9e,"CODE",{});var Wmt=s(hpe);jHo=r(Wmt,"model.train()"),Wmt.forEach(t),C9e.forEach(t),DHo=i(ma),T(mv.$$.fragment,ma),ma.forEach(t),el.forEach(t),kIe=i(f),cd=n(f,"H2",{class:!0});var PNe=s(cd);gv=n(PNe,"A",{id:!0,class:!0,href:!0});var Hmt=s(gv);ppe=n(Hmt,"SPAN",{});var Umt=s(ppe);T(jy.$$.fragment,Umt),Umt.forEach(t),Hmt.forEach(t),GHo=i(PNe),upe=n(PNe,"SPAN",{});var Jmt=s(upe);OHo=r(Jmt,"AutoModelForAudioFrameClassification"),Jmt.forEach(t),PNe.forEach(t),SIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(Dy.$$.fragment,ol),VHo=i(ol),fd=n(ol,"P",{});var NK=s(fd);XHo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),eX=n(NK,"A",{href:!0});var Ymt=s(eX);zHo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),QHo=r(NK," class method or the "),oX=n(NK,"A",{href:!0});var Kmt=s(oX);WHo=r(Kmt,"from_config()"),Kmt.forEach(t),HHo=r(NK,` class
method.`),NK.forEach(t),UHo=i(ol),Gy=n(ol,"P",{});var INe=s(Gy);JHo=r(INe,"This class cannot be instantiated directly using "),_pe=n(INe,"CODE",{});var Zmt=s(_pe);YHo=r(Zmt,"__init__()"),Zmt.forEach(t),KHo=r(INe," (throws an error)."),INe.forEach(t),ZHo=i(ol),ut=n(ol,"DIV",{class:!0});var LA=s(ut);T(Oy.$$.fragment,LA),eUo=i(LA),bpe=n(LA,"P",{});var egt=s(bpe);oUo=r(egt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),egt.forEach(t),rUo=i(LA),md=n(LA,"P",{});var jK=s(md);tUo=r(jK,`Note:
Loading a model from its configuration file does `),vpe=n(jK,"STRONG",{});var ogt=s(vpe);aUo=r(ogt,"not"),ogt.forEach(t),nUo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(jK,"A",{href:!0});var rgt=s(rX);sUo=r(rgt,"from_pretrained()"),rgt.forEach(t),lUo=r(jK," to load the model weights."),jK.forEach(t),iUo=i(LA),T(hv.$$.fragment,LA),LA.forEach(t),dUo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Vy.$$.fragment,ga),cUo=i(ga),Fpe=n(ga,"P",{});var tgt=s(Fpe);fUo=r(tgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tgt.forEach(t),mUo=i(ga),Da=n(ga,"P",{});var xA=s(Da);gUo=r(xA,"The model class to instantiate is selected based on the "),Tpe=n(xA,"CODE",{});var agt=s(Tpe);hUo=r(agt,"model_type"),agt.forEach(t),pUo=r(xA,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(xA,"CODE",{});var ngt=s(Mpe);uUo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),_Uo=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(xA,"CODE",{});var sgt=s(Epe);bUo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),vUo=r(xA,":"),xA.forEach(t),FUo=i(ga),Ga=n(ga,"UL",{});var $A=s(Ga);pv=n($A,"LI",{});var w9e=s(pv);Cpe=n(w9e,"STRONG",{});var lgt=s(Cpe);TUo=r(lgt,"data2vec-audio"),lgt.forEach(t),MUo=r(w9e," \u2014 "),tX=n(w9e,"A",{href:!0});var igt=s(tX);EUo=r(igt,"Data2VecAudioForAudioFrameClassification"),igt.forEach(t),CUo=r(w9e," (Data2VecAudio model)"),w9e.forEach(t),wUo=i($A),uv=n($A,"LI",{});var A9e=s(uv);wpe=n(A9e,"STRONG",{});var dgt=s(wpe);AUo=r(dgt,"unispeech-sat"),dgt.forEach(t),yUo=r(A9e," \u2014 "),aX=n(A9e,"A",{href:!0});var cgt=s(aX);LUo=r(cgt,"UniSpeechSatForAudioFrameClassification"),cgt.forEach(t),xUo=r(A9e," (UniSpeechSat model)"),A9e.forEach(t),$Uo=i($A),_v=n($A,"LI",{});var y9e=s(_v);Ape=n(y9e,"STRONG",{});var fgt=s(Ape);kUo=r(fgt,"wav2vec2"),fgt.forEach(t),SUo=r(y9e," \u2014 "),nX=n(y9e,"A",{href:!0});var mgt=s(nX);RUo=r(mgt,"Wav2Vec2ForAudioFrameClassification"),mgt.forEach(t),BUo=r(y9e," (Wav2Vec2 model)"),y9e.forEach(t),PUo=i($A),bv=n($A,"LI",{});var L9e=s(bv);ype=n(L9e,"STRONG",{});var ggt=s(ype);IUo=r(ggt,"wavlm"),ggt.forEach(t),qUo=r(L9e," \u2014 "),sX=n(L9e,"A",{href:!0});var hgt=s(sX);NUo=r(hgt,"WavLMForAudioFrameClassification"),hgt.forEach(t),jUo=r(L9e," (WavLM model)"),L9e.forEach(t),$A.forEach(t),DUo=i(ga),vv=n(ga,"P",{});var x9e=s(vv);GUo=r(x9e,"The model is set in evaluation mode by default using "),Lpe=n(x9e,"CODE",{});var pgt=s(Lpe);OUo=r(pgt,"model.eval()"),pgt.forEach(t),VUo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(x9e,"CODE",{});var ugt=s(xpe);XUo=r(ugt,"model.train()"),ugt.forEach(t),x9e.forEach(t),zUo=i(ga),T(Fv.$$.fragment,ga),ga.forEach(t),ol.forEach(t),RIe=i(f),gd=n(f,"H2",{class:!0});var qNe=s(gd);Tv=n(qNe,"A",{id:!0,class:!0,href:!0});var _gt=s(Tv);$pe=n(_gt,"SPAN",{});var bgt=s($pe);T(Xy.$$.fragment,bgt),bgt.forEach(t),_gt.forEach(t),QUo=i(qNe),kpe=n(qNe,"SPAN",{});var vgt=s(kpe);WUo=r(vgt,"AutoModelForCTC"),vgt.forEach(t),qNe.forEach(t),BIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(zy.$$.fragment,rl),HUo=i(rl),hd=n(rl,"P",{});var DK=s(hd);UUo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lX=n(DK,"A",{href:!0});var Fgt=s(lX);JUo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),YUo=r(DK," class method or the "),iX=n(DK,"A",{href:!0});var Tgt=s(iX);KUo=r(Tgt,"from_config()"),Tgt.forEach(t),ZUo=r(DK,` class
method.`),DK.forEach(t),eJo=i(rl),Qy=n(rl,"P",{});var NNe=s(Qy);oJo=r(NNe,"This class cannot be instantiated directly using "),Spe=n(NNe,"CODE",{});var Mgt=s(Spe);rJo=r(Mgt,"__init__()"),Mgt.forEach(t),tJo=r(NNe," (throws an error)."),NNe.forEach(t),aJo=i(rl),_t=n(rl,"DIV",{class:!0});var kA=s(_t);T(Wy.$$.fragment,kA),nJo=i(kA),Rpe=n(kA,"P",{});var Egt=s(Rpe);sJo=r(Egt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Egt.forEach(t),lJo=i(kA),pd=n(kA,"P",{});var GK=s(pd);iJo=r(GK,`Note:
Loading a model from its configuration file does `),Bpe=n(GK,"STRONG",{});var Cgt=s(Bpe);dJo=r(Cgt,"not"),Cgt.forEach(t),cJo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(GK,"A",{href:!0});var wgt=s(dX);fJo=r(wgt,"from_pretrained()"),wgt.forEach(t),mJo=r(GK," to load the model weights."),GK.forEach(t),gJo=i(kA),T(Mv.$$.fragment,kA),kA.forEach(t),hJo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Hy.$$.fragment,ha),pJo=i(ha),Ppe=n(ha,"P",{});var Agt=s(Ppe);uJo=r(Agt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Agt.forEach(t),_Jo=i(ha),Oa=n(ha,"P",{});var SA=s(Oa);bJo=r(SA,"The model class to instantiate is selected based on the "),Ipe=n(SA,"CODE",{});var ygt=s(Ipe);vJo=r(ygt,"model_type"),ygt.forEach(t),FJo=r(SA,` property of the config object (either
passed as an argument or loaded from `),qpe=n(SA,"CODE",{});var Lgt=s(qpe);TJo=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),MJo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(SA,"CODE",{});var xgt=s(Npe);EJo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),CJo=r(SA,":"),SA.forEach(t),wJo=i(ha),je=n(ha,"UL",{});var vo=s(je);Ev=n(vo,"LI",{});var $9e=s(Ev);jpe=n($9e,"STRONG",{});var $gt=s(jpe);AJo=r($gt,"data2vec-audio"),$gt.forEach(t),yJo=r($9e," \u2014 "),cX=n($9e,"A",{href:!0});var kgt=s(cX);LJo=r(kgt,"Data2VecAudioForCTC"),kgt.forEach(t),xJo=r($9e," (Data2VecAudio model)"),$9e.forEach(t),$Jo=i(vo),Cv=n(vo,"LI",{});var k9e=s(Cv);Dpe=n(k9e,"STRONG",{});var Sgt=s(Dpe);kJo=r(Sgt,"hubert"),Sgt.forEach(t),SJo=r(k9e," \u2014 "),fX=n(k9e,"A",{href:!0});var Rgt=s(fX);RJo=r(Rgt,"HubertForCTC"),Rgt.forEach(t),BJo=r(k9e," (Hubert model)"),k9e.forEach(t),PJo=i(vo),wv=n(vo,"LI",{});var S9e=s(wv);Gpe=n(S9e,"STRONG",{});var Bgt=s(Gpe);IJo=r(Bgt,"sew"),Bgt.forEach(t),qJo=r(S9e," \u2014 "),mX=n(S9e,"A",{href:!0});var Pgt=s(mX);NJo=r(Pgt,"SEWForCTC"),Pgt.forEach(t),jJo=r(S9e," (SEW model)"),S9e.forEach(t),DJo=i(vo),Av=n(vo,"LI",{});var R9e=s(Av);Ope=n(R9e,"STRONG",{});var Igt=s(Ope);GJo=r(Igt,"sew-d"),Igt.forEach(t),OJo=r(R9e," \u2014 "),gX=n(R9e,"A",{href:!0});var qgt=s(gX);VJo=r(qgt,"SEWDForCTC"),qgt.forEach(t),XJo=r(R9e," (SEW-D model)"),R9e.forEach(t),zJo=i(vo),yv=n(vo,"LI",{});var B9e=s(yv);Vpe=n(B9e,"STRONG",{});var Ngt=s(Vpe);QJo=r(Ngt,"unispeech"),Ngt.forEach(t),WJo=r(B9e," \u2014 "),hX=n(B9e,"A",{href:!0});var jgt=s(hX);HJo=r(jgt,"UniSpeechForCTC"),jgt.forEach(t),UJo=r(B9e," (UniSpeech model)"),B9e.forEach(t),JJo=i(vo),Lv=n(vo,"LI",{});var P9e=s(Lv);Xpe=n(P9e,"STRONG",{});var Dgt=s(Xpe);YJo=r(Dgt,"unispeech-sat"),Dgt.forEach(t),KJo=r(P9e," \u2014 "),pX=n(P9e,"A",{href:!0});var Ggt=s(pX);ZJo=r(Ggt,"UniSpeechSatForCTC"),Ggt.forEach(t),eYo=r(P9e," (UniSpeechSat model)"),P9e.forEach(t),oYo=i(vo),xv=n(vo,"LI",{});var I9e=s(xv);zpe=n(I9e,"STRONG",{});var Ogt=s(zpe);rYo=r(Ogt,"wav2vec2"),Ogt.forEach(t),tYo=r(I9e," \u2014 "),uX=n(I9e,"A",{href:!0});var Vgt=s(uX);aYo=r(Vgt,"Wav2Vec2ForCTC"),Vgt.forEach(t),nYo=r(I9e," (Wav2Vec2 model)"),I9e.forEach(t),sYo=i(vo),$v=n(vo,"LI",{});var q9e=s($v);Qpe=n(q9e,"STRONG",{});var Xgt=s(Qpe);lYo=r(Xgt,"wavlm"),Xgt.forEach(t),iYo=r(q9e," \u2014 "),_X=n(q9e,"A",{href:!0});var zgt=s(_X);dYo=r(zgt,"WavLMForCTC"),zgt.forEach(t),cYo=r(q9e," (WavLM model)"),q9e.forEach(t),vo.forEach(t),fYo=i(ha),kv=n(ha,"P",{});var N9e=s(kv);mYo=r(N9e,"The model is set in evaluation mode by default using "),Wpe=n(N9e,"CODE",{});var Qgt=s(Wpe);gYo=r(Qgt,"model.eval()"),Qgt.forEach(t),hYo=r(N9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(N9e,"CODE",{});var Wgt=s(Hpe);pYo=r(Wgt,"model.train()"),Wgt.forEach(t),N9e.forEach(t),uYo=i(ha),T(Sv.$$.fragment,ha),ha.forEach(t),rl.forEach(t),PIe=i(f),ud=n(f,"H2",{class:!0});var jNe=s(ud);Rv=n(jNe,"A",{id:!0,class:!0,href:!0});var Hgt=s(Rv);Upe=n(Hgt,"SPAN",{});var Ugt=s(Upe);T(Uy.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),_Yo=i(jNe),Jpe=n(jNe,"SPAN",{});var Jgt=s(Jpe);bYo=r(Jgt,"AutoModelForSpeechSeq2Seq"),Jgt.forEach(t),jNe.forEach(t),IIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(Jy.$$.fragment,tl),vYo=i(tl),_d=n(tl,"P",{});var OK=s(_d);FYo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bX=n(OK,"A",{href:!0});var Ygt=s(bX);TYo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),MYo=r(OK," class method or the "),vX=n(OK,"A",{href:!0});var Kgt=s(vX);EYo=r(Kgt,"from_config()"),Kgt.forEach(t),CYo=r(OK,` class
method.`),OK.forEach(t),wYo=i(tl),Yy=n(tl,"P",{});var DNe=s(Yy);AYo=r(DNe,"This class cannot be instantiated directly using "),Ype=n(DNe,"CODE",{});var Zgt=s(Ype);yYo=r(Zgt,"__init__()"),Zgt.forEach(t),LYo=r(DNe," (throws an error)."),DNe.forEach(t),xYo=i(tl),bt=n(tl,"DIV",{class:!0});var RA=s(bt);T(Ky.$$.fragment,RA),$Yo=i(RA),Kpe=n(RA,"P",{});var eht=s(Kpe);kYo=r(eht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eht.forEach(t),SYo=i(RA),bd=n(RA,"P",{});var VK=s(bd);RYo=r(VK,`Note:
Loading a model from its configuration file does `),Zpe=n(VK,"STRONG",{});var oht=s(Zpe);BYo=r(oht,"not"),oht.forEach(t),PYo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(VK,"A",{href:!0});var rht=s(FX);IYo=r(rht,"from_pretrained()"),rht.forEach(t),qYo=r(VK," to load the model weights."),VK.forEach(t),NYo=i(RA),T(Bv.$$.fragment,RA),RA.forEach(t),jYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Zy.$$.fragment,pa),DYo=i(pa),eue=n(pa,"P",{});var tht=s(eue);GYo=r(tht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tht.forEach(t),OYo=i(pa),Va=n(pa,"P",{});var BA=s(Va);VYo=r(BA,"The model class to instantiate is selected based on the "),oue=n(BA,"CODE",{});var aht=s(oue);XYo=r(aht,"model_type"),aht.forEach(t),zYo=r(BA,` property of the config object (either
passed as an argument or loaded from `),rue=n(BA,"CODE",{});var nht=s(rue);QYo=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),WYo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(BA,"CODE",{});var sht=s(tue);HYo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),UYo=r(BA,":"),BA.forEach(t),JYo=i(pa),eL=n(pa,"UL",{});var GNe=s(eL);Pv=n(GNe,"LI",{});var j9e=s(Pv);aue=n(j9e,"STRONG",{});var lht=s(aue);YYo=r(lht,"speech-encoder-decoder"),lht.forEach(t),KYo=r(j9e," \u2014 "),TX=n(j9e,"A",{href:!0});var iht=s(TX);ZYo=r(iht,"SpeechEncoderDecoderModel"),iht.forEach(t),eKo=r(j9e," (Speech Encoder decoder model)"),j9e.forEach(t),oKo=i(GNe),Iv=n(GNe,"LI",{});var D9e=s(Iv);nue=n(D9e,"STRONG",{});var dht=s(nue);rKo=r(dht,"speech_to_text"),dht.forEach(t),tKo=r(D9e," \u2014 "),MX=n(D9e,"A",{href:!0});var cht=s(MX);aKo=r(cht,"Speech2TextForConditionalGeneration"),cht.forEach(t),nKo=r(D9e," (Speech2Text model)"),D9e.forEach(t),GNe.forEach(t),sKo=i(pa),qv=n(pa,"P",{});var G9e=s(qv);lKo=r(G9e,"The model is set in evaluation mode by default using "),sue=n(G9e,"CODE",{});var fht=s(sue);iKo=r(fht,"model.eval()"),fht.forEach(t),dKo=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(G9e,"CODE",{});var mht=s(lue);cKo=r(mht,"model.train()"),mht.forEach(t),G9e.forEach(t),fKo=i(pa),T(Nv.$$.fragment,pa),pa.forEach(t),tl.forEach(t),qIe=i(f),vd=n(f,"H2",{class:!0});var ONe=s(vd);jv=n(ONe,"A",{id:!0,class:!0,href:!0});var ght=s(jv);iue=n(ght,"SPAN",{});var hht=s(iue);T(oL.$$.fragment,hht),hht.forEach(t),ght.forEach(t),mKo=i(ONe),due=n(ONe,"SPAN",{});var pht=s(due);gKo=r(pht,"AutoModelForAudioXVector"),pht.forEach(t),ONe.forEach(t),NIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(rL.$$.fragment,al),hKo=i(al),Fd=n(al,"P",{});var XK=s(Fd);pKo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EX=n(XK,"A",{href:!0});var uht=s(EX);uKo=r(uht,"from_pretrained()"),uht.forEach(t),_Ko=r(XK," class method or the "),CX=n(XK,"A",{href:!0});var _ht=s(CX);bKo=r(_ht,"from_config()"),_ht.forEach(t),vKo=r(XK,` class
method.`),XK.forEach(t),FKo=i(al),tL=n(al,"P",{});var VNe=s(tL);TKo=r(VNe,"This class cannot be instantiated directly using "),cue=n(VNe,"CODE",{});var bht=s(cue);MKo=r(bht,"__init__()"),bht.forEach(t),EKo=r(VNe," (throws an error)."),VNe.forEach(t),CKo=i(al),vt=n(al,"DIV",{class:!0});var PA=s(vt);T(aL.$$.fragment,PA),wKo=i(PA),fue=n(PA,"P",{});var vht=s(fue);AKo=r(vht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vht.forEach(t),yKo=i(PA),Td=n(PA,"P",{});var zK=s(Td);LKo=r(zK,`Note:
Loading a model from its configuration file does `),mue=n(zK,"STRONG",{});var Fht=s(mue);xKo=r(Fht,"not"),Fht.forEach(t),$Ko=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(zK,"A",{href:!0});var Tht=s(wX);kKo=r(Tht,"from_pretrained()"),Tht.forEach(t),SKo=r(zK," to load the model weights."),zK.forEach(t),RKo=i(PA),T(Dv.$$.fragment,PA),PA.forEach(t),BKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(nL.$$.fragment,ua),PKo=i(ua),gue=n(ua,"P",{});var Mht=s(gue);IKo=r(Mht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mht.forEach(t),qKo=i(ua),Xa=n(ua,"P",{});var IA=s(Xa);NKo=r(IA,"The model class to instantiate is selected based on the "),hue=n(IA,"CODE",{});var Eht=s(hue);jKo=r(Eht,"model_type"),Eht.forEach(t),DKo=r(IA,` property of the config object (either
passed as an argument or loaded from `),pue=n(IA,"CODE",{});var Cht=s(pue);GKo=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),OKo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(IA,"CODE",{});var wht=s(uue);VKo=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),XKo=r(IA,":"),IA.forEach(t),zKo=i(ua),za=n(ua,"UL",{});var qA=s(za);Gv=n(qA,"LI",{});var O9e=s(Gv);_ue=n(O9e,"STRONG",{});var Aht=s(_ue);QKo=r(Aht,"data2vec-audio"),Aht.forEach(t),WKo=r(O9e," \u2014 "),AX=n(O9e,"A",{href:!0});var yht=s(AX);HKo=r(yht,"Data2VecAudioForXVector"),yht.forEach(t),UKo=r(O9e," (Data2VecAudio model)"),O9e.forEach(t),JKo=i(qA),Ov=n(qA,"LI",{});var V9e=s(Ov);bue=n(V9e,"STRONG",{});var Lht=s(bue);YKo=r(Lht,"unispeech-sat"),Lht.forEach(t),KKo=r(V9e," \u2014 "),yX=n(V9e,"A",{href:!0});var xht=s(yX);ZKo=r(xht,"UniSpeechSatForXVector"),xht.forEach(t),eZo=r(V9e," (UniSpeechSat model)"),V9e.forEach(t),oZo=i(qA),Vv=n(qA,"LI",{});var X9e=s(Vv);vue=n(X9e,"STRONG",{});var $ht=s(vue);rZo=r($ht,"wav2vec2"),$ht.forEach(t),tZo=r(X9e," \u2014 "),LX=n(X9e,"A",{href:!0});var kht=s(LX);aZo=r(kht,"Wav2Vec2ForXVector"),kht.forEach(t),nZo=r(X9e," (Wav2Vec2 model)"),X9e.forEach(t),sZo=i(qA),Xv=n(qA,"LI",{});var z9e=s(Xv);Fue=n(z9e,"STRONG",{});var Sht=s(Fue);lZo=r(Sht,"wavlm"),Sht.forEach(t),iZo=r(z9e," \u2014 "),xX=n(z9e,"A",{href:!0});var Rht=s(xX);dZo=r(Rht,"WavLMForXVector"),Rht.forEach(t),cZo=r(z9e," (WavLM model)"),z9e.forEach(t),qA.forEach(t),fZo=i(ua),zv=n(ua,"P",{});var Q9e=s(zv);mZo=r(Q9e,"The model is set in evaluation mode by default using "),Tue=n(Q9e,"CODE",{});var Bht=s(Tue);gZo=r(Bht,"model.eval()"),Bht.forEach(t),hZo=r(Q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(Q9e,"CODE",{});var Pht=s(Mue);pZo=r(Pht,"model.train()"),Pht.forEach(t),Q9e.forEach(t),uZo=i(ua),T(Qv.$$.fragment,ua),ua.forEach(t),al.forEach(t),jIe=i(f),Md=n(f,"H2",{class:!0});var XNe=s(Md);Wv=n(XNe,"A",{id:!0,class:!0,href:!0});var Iht=s(Wv);Eue=n(Iht,"SPAN",{});var qht=s(Eue);T(sL.$$.fragment,qht),qht.forEach(t),Iht.forEach(t),_Zo=i(XNe),Cue=n(XNe,"SPAN",{});var Nht=s(Cue);bZo=r(Nht,"AutoModelForMaskedImageModeling"),Nht.forEach(t),XNe.forEach(t),DIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(lL.$$.fragment,nl),vZo=i(nl),Ed=n(nl,"P",{});var QK=s(Ed);FZo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),$X=n(QK,"A",{href:!0});var jht=s($X);TZo=r(jht,"from_pretrained()"),jht.forEach(t),MZo=r(QK," class method or the "),kX=n(QK,"A",{href:!0});var Dht=s(kX);EZo=r(Dht,"from_config()"),Dht.forEach(t),CZo=r(QK,` class
method.`),QK.forEach(t),wZo=i(nl),iL=n(nl,"P",{});var zNe=s(iL);AZo=r(zNe,"This class cannot be instantiated directly using "),wue=n(zNe,"CODE",{});var Ght=s(wue);yZo=r(Ght,"__init__()"),Ght.forEach(t),LZo=r(zNe," (throws an error)."),zNe.forEach(t),xZo=i(nl),Ft=n(nl,"DIV",{class:!0});var NA=s(Ft);T(dL.$$.fragment,NA),$Zo=i(NA),Aue=n(NA,"P",{});var Oht=s(Aue);kZo=r(Oht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Oht.forEach(t),SZo=i(NA),Cd=n(NA,"P",{});var WK=s(Cd);RZo=r(WK,`Note:
Loading a model from its configuration file does `),yue=n(WK,"STRONG",{});var Vht=s(yue);BZo=r(Vht,"not"),Vht.forEach(t),PZo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(WK,"A",{href:!0});var Xht=s(SX);IZo=r(Xht,"from_pretrained()"),Xht.forEach(t),qZo=r(WK," to load the model weights."),WK.forEach(t),NZo=i(NA),T(Hv.$$.fragment,NA),NA.forEach(t),jZo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(cL.$$.fragment,_a),DZo=i(_a),Lue=n(_a,"P",{});var zht=s(Lue);GZo=r(zht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),zht.forEach(t),OZo=i(_a),Qa=n(_a,"P",{});var jA=s(Qa);VZo=r(jA,"The model class to instantiate is selected based on the "),xue=n(jA,"CODE",{});var Qht=s(xue);XZo=r(Qht,"model_type"),Qht.forEach(t),zZo=r(jA,` property of the config object (either
passed as an argument or loaded from `),$ue=n(jA,"CODE",{});var Wht=s($ue);QZo=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),WZo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(jA,"CODE",{});var Hht=s(kue);HZo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),UZo=r(jA,":"),jA.forEach(t),JZo=i(_a),wd=n(_a,"UL",{});var HK=s(wd);Uv=n(HK,"LI",{});var W9e=s(Uv);Sue=n(W9e,"STRONG",{});var Uht=s(Sue);YZo=r(Uht,"deit"),Uht.forEach(t),KZo=r(W9e," \u2014 "),RX=n(W9e,"A",{href:!0});var Jht=s(RX);ZZo=r(Jht,"DeiTForMaskedImageModeling"),Jht.forEach(t),eer=r(W9e," (DeiT model)"),W9e.forEach(t),oer=i(HK),Jv=n(HK,"LI",{});var H9e=s(Jv);Rue=n(H9e,"STRONG",{});var Yht=s(Rue);rer=r(Yht,"swin"),Yht.forEach(t),ter=r(H9e," \u2014 "),BX=n(H9e,"A",{href:!0});var Kht=s(BX);aer=r(Kht,"SwinForMaskedImageModeling"),Kht.forEach(t),ner=r(H9e," (Swin model)"),H9e.forEach(t),ser=i(HK),Yv=n(HK,"LI",{});var U9e=s(Yv);Bue=n(U9e,"STRONG",{});var Zht=s(Bue);ler=r(Zht,"vit"),Zht.forEach(t),ier=r(U9e," \u2014 "),PX=n(U9e,"A",{href:!0});var ept=s(PX);der=r(ept,"ViTForMaskedImageModeling"),ept.forEach(t),cer=r(U9e," (ViT model)"),U9e.forEach(t),HK.forEach(t),fer=i(_a),Kv=n(_a,"P",{});var J9e=s(Kv);mer=r(J9e,"The model is set in evaluation mode by default using "),Pue=n(J9e,"CODE",{});var opt=s(Pue);ger=r(opt,"model.eval()"),opt.forEach(t),her=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=n(J9e,"CODE",{});var rpt=s(Iue);per=r(rpt,"model.train()"),rpt.forEach(t),J9e.forEach(t),uer=i(_a),T(Zv.$$.fragment,_a),_a.forEach(t),nl.forEach(t),GIe=i(f),Ad=n(f,"H2",{class:!0});var QNe=s(Ad);eF=n(QNe,"A",{id:!0,class:!0,href:!0});var tpt=s(eF);que=n(tpt,"SPAN",{});var apt=s(que);T(fL.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),_er=i(QNe),Nue=n(QNe,"SPAN",{});var npt=s(Nue);ber=r(npt,"AutoModelForObjectDetection"),npt.forEach(t),QNe.forEach(t),OIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(mL.$$.fragment,sl),ver=i(sl),yd=n(sl,"P",{});var UK=s(yd);Fer=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),IX=n(UK,"A",{href:!0});var spt=s(IX);Ter=r(spt,"from_pretrained()"),spt.forEach(t),Mer=r(UK," class method or the "),qX=n(UK,"A",{href:!0});var lpt=s(qX);Eer=r(lpt,"from_config()"),lpt.forEach(t),Cer=r(UK,` class
method.`),UK.forEach(t),wer=i(sl),gL=n(sl,"P",{});var WNe=s(gL);Aer=r(WNe,"This class cannot be instantiated directly using "),jue=n(WNe,"CODE",{});var ipt=s(jue);yer=r(ipt,"__init__()"),ipt.forEach(t),Ler=r(WNe," (throws an error)."),WNe.forEach(t),xer=i(sl),Tt=n(sl,"DIV",{class:!0});var DA=s(Tt);T(hL.$$.fragment,DA),$er=i(DA),Due=n(DA,"P",{});var dpt=s(Due);ker=r(dpt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dpt.forEach(t),Ser=i(DA),Ld=n(DA,"P",{});var JK=s(Ld);Rer=r(JK,`Note:
Loading a model from its configuration file does `),Gue=n(JK,"STRONG",{});var cpt=s(Gue);Ber=r(cpt,"not"),cpt.forEach(t),Per=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(JK,"A",{href:!0});var fpt=s(NX);Ier=r(fpt,"from_pretrained()"),fpt.forEach(t),qer=r(JK," to load the model weights."),JK.forEach(t),Ner=i(DA),T(oF.$$.fragment,DA),DA.forEach(t),jer=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(pL.$$.fragment,ba),Der=i(ba),Oue=n(ba,"P",{});var mpt=s(Oue);Ger=r(mpt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mpt.forEach(t),Oer=i(ba),Wa=n(ba,"P",{});var GA=s(Wa);Ver=r(GA,"The model class to instantiate is selected based on the "),Vue=n(GA,"CODE",{});var gpt=s(Vue);Xer=r(gpt,"model_type"),gpt.forEach(t),zer=r(GA,` property of the config object (either
passed as an argument or loaded from `),Xue=n(GA,"CODE",{});var hpt=s(Xue);Qer=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Wer=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(GA,"CODE",{});var ppt=s(zue);Her=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Uer=r(GA,":"),GA.forEach(t),Jer=i(ba),uL=n(ba,"UL",{});var HNe=s(uL);rF=n(HNe,"LI",{});var Y9e=s(rF);Que=n(Y9e,"STRONG",{});var upt=s(Que);Yer=r(upt,"detr"),upt.forEach(t),Ker=r(Y9e," \u2014 "),jX=n(Y9e,"A",{href:!0});var _pt=s(jX);Zer=r(_pt,"DetrForObjectDetection"),_pt.forEach(t),eor=r(Y9e," (DETR model)"),Y9e.forEach(t),oor=i(HNe),tF=n(HNe,"LI",{});var K9e=s(tF);Wue=n(K9e,"STRONG",{});var bpt=s(Wue);ror=r(bpt,"yolos"),bpt.forEach(t),tor=r(K9e," \u2014 "),DX=n(K9e,"A",{href:!0});var vpt=s(DX);aor=r(vpt,"YolosForObjectDetection"),vpt.forEach(t),nor=r(K9e," (YOLOS model)"),K9e.forEach(t),HNe.forEach(t),sor=i(ba),aF=n(ba,"P",{});var Z9e=s(aF);lor=r(Z9e,"The model is set in evaluation mode by default using "),Hue=n(Z9e,"CODE",{});var Fpt=s(Hue);ior=r(Fpt,"model.eval()"),Fpt.forEach(t),dor=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(Z9e,"CODE",{});var Tpt=s(Uue);cor=r(Tpt,"model.train()"),Tpt.forEach(t),Z9e.forEach(t),mor=i(ba),T(nF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),VIe=i(f),xd=n(f,"H2",{class:!0});var UNe=s(xd);sF=n(UNe,"A",{id:!0,class:!0,href:!0});var Mpt=s(sF);Jue=n(Mpt,"SPAN",{});var Ept=s(Jue);T(_L.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),gor=i(UNe),Yue=n(UNe,"SPAN",{});var Cpt=s(Yue);hor=r(Cpt,"AutoModelForImageSegmentation"),Cpt.forEach(t),UNe.forEach(t),XIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(bL.$$.fragment,ll),por=i(ll),$d=n(ll,"P",{});var YK=s($d);uor=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),GX=n(YK,"A",{href:!0});var wpt=s(GX);_or=r(wpt,"from_pretrained()"),wpt.forEach(t),bor=r(YK," class method or the "),OX=n(YK,"A",{href:!0});var Apt=s(OX);vor=r(Apt,"from_config()"),Apt.forEach(t),For=r(YK,` class
method.`),YK.forEach(t),Tor=i(ll),vL=n(ll,"P",{});var JNe=s(vL);Mor=r(JNe,"This class cannot be instantiated directly using "),Kue=n(JNe,"CODE",{});var ypt=s(Kue);Eor=r(ypt,"__init__()"),ypt.forEach(t),Cor=r(JNe," (throws an error)."),JNe.forEach(t),wor=i(ll),Mt=n(ll,"DIV",{class:!0});var OA=s(Mt);T(FL.$$.fragment,OA),Aor=i(OA),Zue=n(OA,"P",{});var Lpt=s(Zue);yor=r(Lpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lpt.forEach(t),Lor=i(OA),kd=n(OA,"P",{});var KK=s(kd);xor=r(KK,`Note:
Loading a model from its configuration file does `),e_e=n(KK,"STRONG",{});var xpt=s(e_e);$or=r(xpt,"not"),xpt.forEach(t),kor=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(KK,"A",{href:!0});var $pt=s(VX);Sor=r($pt,"from_pretrained()"),$pt.forEach(t),Ror=r(KK," to load the model weights."),KK.forEach(t),Bor=i(OA),T(lF.$$.fragment,OA),OA.forEach(t),Por=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(TL.$$.fragment,va),Ior=i(va),o_e=n(va,"P",{});var kpt=s(o_e);qor=r(kpt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),kpt.forEach(t),Nor=i(va),Ha=n(va,"P",{});var VA=s(Ha);jor=r(VA,"The model class to instantiate is selected based on the "),r_e=n(VA,"CODE",{});var Spt=s(r_e);Dor=r(Spt,"model_type"),Spt.forEach(t),Gor=r(VA,` property of the config object (either
passed as an argument or loaded from `),t_e=n(VA,"CODE",{});var Rpt=s(t_e);Oor=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),Vor=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(VA,"CODE",{});var Bpt=s(a_e);Xor=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),zor=r(VA,":"),VA.forEach(t),Qor=i(va),n_e=n(va,"UL",{});var Ppt=s(n_e);iF=n(Ppt,"LI",{});var e$e=s(iF);s_e=n(e$e,"STRONG",{});var Ipt=s(s_e);Wor=r(Ipt,"detr"),Ipt.forEach(t),Hor=r(e$e," \u2014 "),XX=n(e$e,"A",{href:!0});var qpt=s(XX);Uor=r(qpt,"DetrForSegmentation"),qpt.forEach(t),Jor=r(e$e," (DETR model)"),e$e.forEach(t),Ppt.forEach(t),Yor=i(va),dF=n(va,"P",{});var o$e=s(dF);Kor=r(o$e,"The model is set in evaluation mode by default using "),l_e=n(o$e,"CODE",{});var Npt=s(l_e);Zor=r(Npt,"model.eval()"),Npt.forEach(t),err=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(o$e,"CODE",{});var jpt=s(i_e);orr=r(jpt,"model.train()"),jpt.forEach(t),o$e.forEach(t),rrr=i(va),T(cF.$$.fragment,va),va.forEach(t),ll.forEach(t),zIe=i(f),Sd=n(f,"H2",{class:!0});var YNe=s(Sd);fF=n(YNe,"A",{id:!0,class:!0,href:!0});var Dpt=s(fF);d_e=n(Dpt,"SPAN",{});var Gpt=s(d_e);T(ML.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),trr=i(YNe),c_e=n(YNe,"SPAN",{});var Opt=s(c_e);arr=r(Opt,"AutoModelForSemanticSegmentation"),Opt.forEach(t),YNe.forEach(t),QIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(EL.$$.fragment,il),nrr=i(il),Rd=n(il,"P",{});var ZK=s(Rd);srr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),zX=n(ZK,"A",{href:!0});var Vpt=s(zX);lrr=r(Vpt,"from_pretrained()"),Vpt.forEach(t),irr=r(ZK," class method or the "),QX=n(ZK,"A",{href:!0});var Xpt=s(QX);drr=r(Xpt,"from_config()"),Xpt.forEach(t),crr=r(ZK,` class
method.`),ZK.forEach(t),frr=i(il),CL=n(il,"P",{});var KNe=s(CL);mrr=r(KNe,"This class cannot be instantiated directly using "),f_e=n(KNe,"CODE",{});var zpt=s(f_e);grr=r(zpt,"__init__()"),zpt.forEach(t),hrr=r(KNe," (throws an error)."),KNe.forEach(t),prr=i(il),Et=n(il,"DIV",{class:!0});var XA=s(Et);T(wL.$$.fragment,XA),urr=i(XA),m_e=n(XA,"P",{});var Qpt=s(m_e);_rr=r(Qpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qpt.forEach(t),brr=i(XA),Bd=n(XA,"P",{});var eZ=s(Bd);vrr=r(eZ,`Note:
Loading a model from its configuration file does `),g_e=n(eZ,"STRONG",{});var Wpt=s(g_e);Frr=r(Wpt,"not"),Wpt.forEach(t),Trr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(eZ,"A",{href:!0});var Hpt=s(WX);Mrr=r(Hpt,"from_pretrained()"),Hpt.forEach(t),Err=r(eZ," to load the model weights."),eZ.forEach(t),Crr=i(XA),T(mF.$$.fragment,XA),XA.forEach(t),wrr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(AL.$$.fragment,Fa),Arr=i(Fa),h_e=n(Fa,"P",{});var Upt=s(h_e);yrr=r(Upt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Upt.forEach(t),Lrr=i(Fa),Ua=n(Fa,"P",{});var zA=s(Ua);xrr=r(zA,"The model class to instantiate is selected based on the "),p_e=n(zA,"CODE",{});var Jpt=s(p_e);$rr=r(Jpt,"model_type"),Jpt.forEach(t),krr=r(zA,` property of the config object (either
passed as an argument or loaded from `),u_e=n(zA,"CODE",{});var Ypt=s(u_e);Srr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),Rrr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(zA,"CODE",{});var Kpt=s(__e);Brr=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),Prr=r(zA,":"),zA.forEach(t),Irr=i(Fa),Ja=n(Fa,"UL",{});var QA=s(Ja);gF=n(QA,"LI",{});var r$e=s(gF);b_e=n(r$e,"STRONG",{});var Zpt=s(b_e);qrr=r(Zpt,"beit"),Zpt.forEach(t),Nrr=r(r$e," \u2014 "),HX=n(r$e,"A",{href:!0});var eut=s(HX);jrr=r(eut,"BeitForSemanticSegmentation"),eut.forEach(t),Drr=r(r$e," (BEiT model)"),r$e.forEach(t),Grr=i(QA),hF=n(QA,"LI",{});var t$e=s(hF);v_e=n(t$e,"STRONG",{});var out=s(v_e);Orr=r(out,"data2vec-vision"),out.forEach(t),Vrr=r(t$e," \u2014 "),UX=n(t$e,"A",{href:!0});var rut=s(UX);Xrr=r(rut,"Data2VecVisionForSemanticSegmentation"),rut.forEach(t),zrr=r(t$e," (Data2VecVision model)"),t$e.forEach(t),Qrr=i(QA),pF=n(QA,"LI",{});var a$e=s(pF);F_e=n(a$e,"STRONG",{});var tut=s(F_e);Wrr=r(tut,"dpt"),tut.forEach(t),Hrr=r(a$e," \u2014 "),JX=n(a$e,"A",{href:!0});var aut=s(JX);Urr=r(aut,"DPTForSemanticSegmentation"),aut.forEach(t),Jrr=r(a$e," (DPT model)"),a$e.forEach(t),Yrr=i(QA),uF=n(QA,"LI",{});var n$e=s(uF);T_e=n(n$e,"STRONG",{});var nut=s(T_e);Krr=r(nut,"segformer"),nut.forEach(t),Zrr=r(n$e," \u2014 "),YX=n(n$e,"A",{href:!0});var sut=s(YX);etr=r(sut,"SegformerForSemanticSegmentation"),sut.forEach(t),otr=r(n$e," (SegFormer model)"),n$e.forEach(t),QA.forEach(t),rtr=i(Fa),_F=n(Fa,"P",{});var s$e=s(_F);ttr=r(s$e,"The model is set in evaluation mode by default using "),M_e=n(s$e,"CODE",{});var lut=s(M_e);atr=r(lut,"model.eval()"),lut.forEach(t),ntr=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(s$e,"CODE",{});var iut=s(E_e);str=r(iut,"model.train()"),iut.forEach(t),s$e.forEach(t),ltr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),WIe=i(f),Pd=n(f,"H2",{class:!0});var ZNe=s(Pd);vF=n(ZNe,"A",{id:!0,class:!0,href:!0});var dut=s(vF);C_e=n(dut,"SPAN",{});var cut=s(C_e);T(yL.$$.fragment,cut),cut.forEach(t),dut.forEach(t),itr=i(ZNe),w_e=n(ZNe,"SPAN",{});var fut=s(w_e);dtr=r(fut,"AutoModelForInstanceSegmentation"),fut.forEach(t),ZNe.forEach(t),HIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(LL.$$.fragment,dl),ctr=i(dl),Id=n(dl,"P",{});var oZ=s(Id);ftr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KX=n(oZ,"A",{href:!0});var mut=s(KX);mtr=r(mut,"from_pretrained()"),mut.forEach(t),gtr=r(oZ," class method or the "),ZX=n(oZ,"A",{href:!0});var gut=s(ZX);htr=r(gut,"from_config()"),gut.forEach(t),ptr=r(oZ,` class
method.`),oZ.forEach(t),utr=i(dl),xL=n(dl,"P",{});var eje=s(xL);_tr=r(eje,"This class cannot be instantiated directly using "),A_e=n(eje,"CODE",{});var hut=s(A_e);btr=r(hut,"__init__()"),hut.forEach(t),vtr=r(eje," (throws an error)."),eje.forEach(t),Ftr=i(dl),Ct=n(dl,"DIV",{class:!0});var WA=s(Ct);T($L.$$.fragment,WA),Ttr=i(WA),y_e=n(WA,"P",{});var put=s(y_e);Mtr=r(put,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),put.forEach(t),Etr=i(WA),qd=n(WA,"P",{});var rZ=s(qd);Ctr=r(rZ,`Note:
Loading a model from its configuration file does `),L_e=n(rZ,"STRONG",{});var uut=s(L_e);wtr=r(uut,"not"),uut.forEach(t),Atr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(rZ,"A",{href:!0});var _ut=s(ez);ytr=r(_ut,"from_pretrained()"),_ut.forEach(t),Ltr=r(rZ," to load the model weights."),rZ.forEach(t),xtr=i(WA),T(FF.$$.fragment,WA),WA.forEach(t),$tr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(kL.$$.fragment,Ta),ktr=i(Ta),x_e=n(Ta,"P",{});var but=s(x_e);Str=r(but,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),but.forEach(t),Rtr=i(Ta),Ya=n(Ta,"P",{});var HA=s(Ya);Btr=r(HA,"The model class to instantiate is selected based on the "),$_e=n(HA,"CODE",{});var vut=s($_e);Ptr=r(vut,"model_type"),vut.forEach(t),Itr=r(HA,` property of the config object (either
passed as an argument or loaded from `),k_e=n(HA,"CODE",{});var Fut=s(k_e);qtr=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Ntr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(HA,"CODE",{});var Tut=s(S_e);jtr=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Dtr=r(HA,":"),HA.forEach(t),Gtr=i(Ta),R_e=n(Ta,"UL",{});var Mut=s(R_e);TF=n(Mut,"LI",{});var l$e=s(TF);B_e=n(l$e,"STRONG",{});var Eut=s(B_e);Otr=r(Eut,"maskformer"),Eut.forEach(t),Vtr=r(l$e," \u2014 "),oz=n(l$e,"A",{href:!0});var Cut=s(oz);Xtr=r(Cut,"MaskFormerForInstanceSegmentation"),Cut.forEach(t),ztr=r(l$e," (MaskFormer model)"),l$e.forEach(t),Mut.forEach(t),Qtr=i(Ta),MF=n(Ta,"P",{});var i$e=s(MF);Wtr=r(i$e,"The model is set in evaluation mode by default using "),P_e=n(i$e,"CODE",{});var wut=s(P_e);Htr=r(wut,"model.eval()"),wut.forEach(t),Utr=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(i$e,"CODE",{});var Aut=s(I_e);Jtr=r(Aut,"model.train()"),Aut.forEach(t),i$e.forEach(t),Ytr=i(Ta),T(EF.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),UIe=i(f),Nd=n(f,"H2",{class:!0});var oje=s(Nd);CF=n(oje,"A",{id:!0,class:!0,href:!0});var yut=s(CF);q_e=n(yut,"SPAN",{});var Lut=s(q_e);T(SL.$$.fragment,Lut),Lut.forEach(t),yut.forEach(t),Ktr=i(oje),N_e=n(oje,"SPAN",{});var xut=s(N_e);Ztr=r(xut,"TFAutoModel"),xut.forEach(t),oje.forEach(t),JIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(RL.$$.fragment,cl),ear=i(cl),jd=n(cl,"P",{});var tZ=s(jd);oar=r(tZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rz=n(tZ,"A",{href:!0});var $ut=s(rz);rar=r($ut,"from_pretrained()"),$ut.forEach(t),tar=r(tZ," class method or the "),tz=n(tZ,"A",{href:!0});var kut=s(tz);aar=r(kut,"from_config()"),kut.forEach(t),nar=r(tZ,` class
method.`),tZ.forEach(t),sar=i(cl),BL=n(cl,"P",{});var rje=s(BL);lar=r(rje,"This class cannot be instantiated directly using "),j_e=n(rje,"CODE",{});var Sut=s(j_e);iar=r(Sut,"__init__()"),Sut.forEach(t),dar=r(rje," (throws an error)."),rje.forEach(t),car=i(cl),wt=n(cl,"DIV",{class:!0});var UA=s(wt);T(PL.$$.fragment,UA),far=i(UA),D_e=n(UA,"P",{});var Rut=s(D_e);mar=r(Rut,"Instantiates one of the base model classes of the library from a configuration."),Rut.forEach(t),gar=i(UA),Dd=n(UA,"P",{});var aZ=s(Dd);har=r(aZ,`Note:
Loading a model from its configuration file does `),G_e=n(aZ,"STRONG",{});var But=s(G_e);par=r(But,"not"),But.forEach(t),uar=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(aZ,"A",{href:!0});var Put=s(az);_ar=r(Put,"from_pretrained()"),Put.forEach(t),bar=r(aZ," to load the model weights."),aZ.forEach(t),Far=i(UA),T(wF.$$.fragment,UA),UA.forEach(t),Tar=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(IL.$$.fragment,fl),Mar=i(fl),O_e=n(fl,"P",{});var Iut=s(O_e);Ear=r(Iut,"Instantiate one of the base model classes of the library from a pretrained model."),Iut.forEach(t),Car=i(fl),Ka=n(fl,"P",{});var JA=s(Ka);war=r(JA,"The model class to instantiate is selected based on the "),V_e=n(JA,"CODE",{});var qut=s(V_e);Aar=r(qut,"model_type"),qut.forEach(t),yar=r(JA,` property of the config object (either
passed as an argument or loaded from `),X_e=n(JA,"CODE",{});var Nut=s(X_e);Lar=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),xar=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(JA,"CODE",{});var jut=s(z_e);$ar=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),kar=r(JA,":"),JA.forEach(t),Sar=i(fl),j=n(fl,"UL",{});var D=s(j);AF=n(D,"LI",{});var d$e=s(AF);Q_e=n(d$e,"STRONG",{});var Dut=s(Q_e);Rar=r(Dut,"albert"),Dut.forEach(t),Bar=r(d$e," \u2014 "),nz=n(d$e,"A",{href:!0});var Gut=s(nz);Par=r(Gut,"TFAlbertModel"),Gut.forEach(t),Iar=r(d$e," (ALBERT model)"),d$e.forEach(t),qar=i(D),yF=n(D,"LI",{});var c$e=s(yF);W_e=n(c$e,"STRONG",{});var Out=s(W_e);Nar=r(Out,"bart"),Out.forEach(t),jar=r(c$e," \u2014 "),sz=n(c$e,"A",{href:!0});var Vut=s(sz);Dar=r(Vut,"TFBartModel"),Vut.forEach(t),Gar=r(c$e," (BART model)"),c$e.forEach(t),Oar=i(D),LF=n(D,"LI",{});var f$e=s(LF);H_e=n(f$e,"STRONG",{});var Xut=s(H_e);Var=r(Xut,"bert"),Xut.forEach(t),Xar=r(f$e," \u2014 "),lz=n(f$e,"A",{href:!0});var zut=s(lz);zar=r(zut,"TFBertModel"),zut.forEach(t),Qar=r(f$e," (BERT model)"),f$e.forEach(t),War=i(D),xF=n(D,"LI",{});var m$e=s(xF);U_e=n(m$e,"STRONG",{});var Qut=s(U_e);Har=r(Qut,"blenderbot"),Qut.forEach(t),Uar=r(m$e," \u2014 "),iz=n(m$e,"A",{href:!0});var Wut=s(iz);Jar=r(Wut,"TFBlenderbotModel"),Wut.forEach(t),Yar=r(m$e," (Blenderbot model)"),m$e.forEach(t),Kar=i(D),$F=n(D,"LI",{});var g$e=s($F);J_e=n(g$e,"STRONG",{});var Hut=s(J_e);Zar=r(Hut,"blenderbot-small"),Hut.forEach(t),enr=r(g$e," \u2014 "),dz=n(g$e,"A",{href:!0});var Uut=s(dz);onr=r(Uut,"TFBlenderbotSmallModel"),Uut.forEach(t),rnr=r(g$e," (BlenderbotSmall model)"),g$e.forEach(t),tnr=i(D),kF=n(D,"LI",{});var h$e=s(kF);Y_e=n(h$e,"STRONG",{});var Jut=s(Y_e);anr=r(Jut,"camembert"),Jut.forEach(t),nnr=r(h$e," \u2014 "),cz=n(h$e,"A",{href:!0});var Yut=s(cz);snr=r(Yut,"TFCamembertModel"),Yut.forEach(t),lnr=r(h$e," (CamemBERT model)"),h$e.forEach(t),inr=i(D),SF=n(D,"LI",{});var p$e=s(SF);K_e=n(p$e,"STRONG",{});var Kut=s(K_e);dnr=r(Kut,"clip"),Kut.forEach(t),cnr=r(p$e," \u2014 "),fz=n(p$e,"A",{href:!0});var Zut=s(fz);fnr=r(Zut,"TFCLIPModel"),Zut.forEach(t),mnr=r(p$e," (CLIP model)"),p$e.forEach(t),gnr=i(D),RF=n(D,"LI",{});var u$e=s(RF);Z_e=n(u$e,"STRONG",{});var e_t=s(Z_e);hnr=r(e_t,"convbert"),e_t.forEach(t),pnr=r(u$e," \u2014 "),mz=n(u$e,"A",{href:!0});var o_t=s(mz);unr=r(o_t,"TFConvBertModel"),o_t.forEach(t),_nr=r(u$e," (ConvBERT model)"),u$e.forEach(t),bnr=i(D),BF=n(D,"LI",{});var _$e=s(BF);e2e=n(_$e,"STRONG",{});var r_t=s(e2e);vnr=r(r_t,"convnext"),r_t.forEach(t),Fnr=r(_$e," \u2014 "),gz=n(_$e,"A",{href:!0});var t_t=s(gz);Tnr=r(t_t,"TFConvNextModel"),t_t.forEach(t),Mnr=r(_$e," (ConvNext model)"),_$e.forEach(t),Enr=i(D),PF=n(D,"LI",{});var b$e=s(PF);o2e=n(b$e,"STRONG",{});var a_t=s(o2e);Cnr=r(a_t,"ctrl"),a_t.forEach(t),wnr=r(b$e," \u2014 "),hz=n(b$e,"A",{href:!0});var n_t=s(hz);Anr=r(n_t,"TFCTRLModel"),n_t.forEach(t),ynr=r(b$e," (CTRL model)"),b$e.forEach(t),Lnr=i(D),IF=n(D,"LI",{});var v$e=s(IF);r2e=n(v$e,"STRONG",{});var s_t=s(r2e);xnr=r(s_t,"data2vec-vision"),s_t.forEach(t),$nr=r(v$e," \u2014 "),pz=n(v$e,"A",{href:!0});var l_t=s(pz);knr=r(l_t,"TFData2VecVisionModel"),l_t.forEach(t),Snr=r(v$e," (Data2VecVision model)"),v$e.forEach(t),Rnr=i(D),qF=n(D,"LI",{});var F$e=s(qF);t2e=n(F$e,"STRONG",{});var i_t=s(t2e);Bnr=r(i_t,"deberta"),i_t.forEach(t),Pnr=r(F$e," \u2014 "),uz=n(F$e,"A",{href:!0});var d_t=s(uz);Inr=r(d_t,"TFDebertaModel"),d_t.forEach(t),qnr=r(F$e," (DeBERTa model)"),F$e.forEach(t),Nnr=i(D),NF=n(D,"LI",{});var T$e=s(NF);a2e=n(T$e,"STRONG",{});var c_t=s(a2e);jnr=r(c_t,"deberta-v2"),c_t.forEach(t),Dnr=r(T$e," \u2014 "),_z=n(T$e,"A",{href:!0});var f_t=s(_z);Gnr=r(f_t,"TFDebertaV2Model"),f_t.forEach(t),Onr=r(T$e," (DeBERTa-v2 model)"),T$e.forEach(t),Vnr=i(D),jF=n(D,"LI",{});var M$e=s(jF);n2e=n(M$e,"STRONG",{});var m_t=s(n2e);Xnr=r(m_t,"distilbert"),m_t.forEach(t),znr=r(M$e," \u2014 "),bz=n(M$e,"A",{href:!0});var g_t=s(bz);Qnr=r(g_t,"TFDistilBertModel"),g_t.forEach(t),Wnr=r(M$e," (DistilBERT model)"),M$e.forEach(t),Hnr=i(D),DF=n(D,"LI",{});var E$e=s(DF);s2e=n(E$e,"STRONG",{});var h_t=s(s2e);Unr=r(h_t,"dpr"),h_t.forEach(t),Jnr=r(E$e," \u2014 "),vz=n(E$e,"A",{href:!0});var p_t=s(vz);Ynr=r(p_t,"TFDPRQuestionEncoder"),p_t.forEach(t),Knr=r(E$e," (DPR model)"),E$e.forEach(t),Znr=i(D),GF=n(D,"LI",{});var C$e=s(GF);l2e=n(C$e,"STRONG",{});var u_t=s(l2e);esr=r(u_t,"electra"),u_t.forEach(t),osr=r(C$e," \u2014 "),Fz=n(C$e,"A",{href:!0});var __t=s(Fz);rsr=r(__t,"TFElectraModel"),__t.forEach(t),tsr=r(C$e," (ELECTRA model)"),C$e.forEach(t),asr=i(D),OF=n(D,"LI",{});var w$e=s(OF);i2e=n(w$e,"STRONG",{});var b_t=s(i2e);nsr=r(b_t,"flaubert"),b_t.forEach(t),ssr=r(w$e," \u2014 "),Tz=n(w$e,"A",{href:!0});var v_t=s(Tz);lsr=r(v_t,"TFFlaubertModel"),v_t.forEach(t),isr=r(w$e," (FlauBERT model)"),w$e.forEach(t),dsr=i(D),Ps=n(D,"LI",{});var h$=s(Ps);d2e=n(h$,"STRONG",{});var F_t=s(d2e);csr=r(F_t,"funnel"),F_t.forEach(t),fsr=r(h$," \u2014 "),Mz=n(h$,"A",{href:!0});var T_t=s(Mz);msr=r(T_t,"TFFunnelModel"),T_t.forEach(t),gsr=r(h$," or "),Ez=n(h$,"A",{href:!0});var M_t=s(Ez);hsr=r(M_t,"TFFunnelBaseModel"),M_t.forEach(t),psr=r(h$," (Funnel Transformer model)"),h$.forEach(t),usr=i(D),VF=n(D,"LI",{});var A$e=s(VF);c2e=n(A$e,"STRONG",{});var E_t=s(c2e);_sr=r(E_t,"gpt2"),E_t.forEach(t),bsr=r(A$e," \u2014 "),Cz=n(A$e,"A",{href:!0});var C_t=s(Cz);vsr=r(C_t,"TFGPT2Model"),C_t.forEach(t),Fsr=r(A$e," (OpenAI GPT-2 model)"),A$e.forEach(t),Tsr=i(D),XF=n(D,"LI",{});var y$e=s(XF);f2e=n(y$e,"STRONG",{});var w_t=s(f2e);Msr=r(w_t,"gptj"),w_t.forEach(t),Esr=r(y$e," \u2014 "),wz=n(y$e,"A",{href:!0});var A_t=s(wz);Csr=r(A_t,"TFGPTJModel"),A_t.forEach(t),wsr=r(y$e," (GPT-J model)"),y$e.forEach(t),Asr=i(D),zF=n(D,"LI",{});var L$e=s(zF);m2e=n(L$e,"STRONG",{});var y_t=s(m2e);ysr=r(y_t,"hubert"),y_t.forEach(t),Lsr=r(L$e," \u2014 "),Az=n(L$e,"A",{href:!0});var L_t=s(Az);xsr=r(L_t,"TFHubertModel"),L_t.forEach(t),$sr=r(L$e," (Hubert model)"),L$e.forEach(t),ksr=i(D),QF=n(D,"LI",{});var x$e=s(QF);g2e=n(x$e,"STRONG",{});var x_t=s(g2e);Ssr=r(x_t,"layoutlm"),x_t.forEach(t),Rsr=r(x$e," \u2014 "),yz=n(x$e,"A",{href:!0});var $_t=s(yz);Bsr=r($_t,"TFLayoutLMModel"),$_t.forEach(t),Psr=r(x$e," (LayoutLM model)"),x$e.forEach(t),Isr=i(D),WF=n(D,"LI",{});var $$e=s(WF);h2e=n($$e,"STRONG",{});var k_t=s(h2e);qsr=r(k_t,"led"),k_t.forEach(t),Nsr=r($$e," \u2014 "),Lz=n($$e,"A",{href:!0});var S_t=s(Lz);jsr=r(S_t,"TFLEDModel"),S_t.forEach(t),Dsr=r($$e," (LED model)"),$$e.forEach(t),Gsr=i(D),HF=n(D,"LI",{});var k$e=s(HF);p2e=n(k$e,"STRONG",{});var R_t=s(p2e);Osr=r(R_t,"longformer"),R_t.forEach(t),Vsr=r(k$e," \u2014 "),xz=n(k$e,"A",{href:!0});var B_t=s(xz);Xsr=r(B_t,"TFLongformerModel"),B_t.forEach(t),zsr=r(k$e," (Longformer model)"),k$e.forEach(t),Qsr=i(D),UF=n(D,"LI",{});var S$e=s(UF);u2e=n(S$e,"STRONG",{});var P_t=s(u2e);Wsr=r(P_t,"lxmert"),P_t.forEach(t),Hsr=r(S$e," \u2014 "),$z=n(S$e,"A",{href:!0});var I_t=s($z);Usr=r(I_t,"TFLxmertModel"),I_t.forEach(t),Jsr=r(S$e," (LXMERT model)"),S$e.forEach(t),Ysr=i(D),JF=n(D,"LI",{});var R$e=s(JF);_2e=n(R$e,"STRONG",{});var q_t=s(_2e);Ksr=r(q_t,"marian"),q_t.forEach(t),Zsr=r(R$e," \u2014 "),kz=n(R$e,"A",{href:!0});var N_t=s(kz);elr=r(N_t,"TFMarianModel"),N_t.forEach(t),olr=r(R$e," (Marian model)"),R$e.forEach(t),rlr=i(D),YF=n(D,"LI",{});var B$e=s(YF);b2e=n(B$e,"STRONG",{});var j_t=s(b2e);tlr=r(j_t,"mbart"),j_t.forEach(t),alr=r(B$e," \u2014 "),Sz=n(B$e,"A",{href:!0});var D_t=s(Sz);nlr=r(D_t,"TFMBartModel"),D_t.forEach(t),slr=r(B$e," (mBART model)"),B$e.forEach(t),llr=i(D),KF=n(D,"LI",{});var P$e=s(KF);v2e=n(P$e,"STRONG",{});var G_t=s(v2e);ilr=r(G_t,"mobilebert"),G_t.forEach(t),dlr=r(P$e," \u2014 "),Rz=n(P$e,"A",{href:!0});var O_t=s(Rz);clr=r(O_t,"TFMobileBertModel"),O_t.forEach(t),flr=r(P$e," (MobileBERT model)"),P$e.forEach(t),mlr=i(D),ZF=n(D,"LI",{});var I$e=s(ZF);F2e=n(I$e,"STRONG",{});var V_t=s(F2e);glr=r(V_t,"mpnet"),V_t.forEach(t),hlr=r(I$e," \u2014 "),Bz=n(I$e,"A",{href:!0});var X_t=s(Bz);plr=r(X_t,"TFMPNetModel"),X_t.forEach(t),ulr=r(I$e," (MPNet model)"),I$e.forEach(t),_lr=i(D),eT=n(D,"LI",{});var q$e=s(eT);T2e=n(q$e,"STRONG",{});var z_t=s(T2e);blr=r(z_t,"mt5"),z_t.forEach(t),vlr=r(q$e," \u2014 "),Pz=n(q$e,"A",{href:!0});var Q_t=s(Pz);Flr=r(Q_t,"TFMT5Model"),Q_t.forEach(t),Tlr=r(q$e," (mT5 model)"),q$e.forEach(t),Mlr=i(D),oT=n(D,"LI",{});var N$e=s(oT);M2e=n(N$e,"STRONG",{});var W_t=s(M2e);Elr=r(W_t,"openai-gpt"),W_t.forEach(t),Clr=r(N$e," \u2014 "),Iz=n(N$e,"A",{href:!0});var H_t=s(Iz);wlr=r(H_t,"TFOpenAIGPTModel"),H_t.forEach(t),Alr=r(N$e," (OpenAI GPT model)"),N$e.forEach(t),ylr=i(D),rT=n(D,"LI",{});var j$e=s(rT);E2e=n(j$e,"STRONG",{});var U_t=s(E2e);Llr=r(U_t,"pegasus"),U_t.forEach(t),xlr=r(j$e," \u2014 "),qz=n(j$e,"A",{href:!0});var J_t=s(qz);$lr=r(J_t,"TFPegasusModel"),J_t.forEach(t),klr=r(j$e," (Pegasus model)"),j$e.forEach(t),Slr=i(D),tT=n(D,"LI",{});var D$e=s(tT);C2e=n(D$e,"STRONG",{});var Y_t=s(C2e);Rlr=r(Y_t,"rembert"),Y_t.forEach(t),Blr=r(D$e," \u2014 "),Nz=n(D$e,"A",{href:!0});var K_t=s(Nz);Plr=r(K_t,"TFRemBertModel"),K_t.forEach(t),Ilr=r(D$e," (RemBERT model)"),D$e.forEach(t),qlr=i(D),aT=n(D,"LI",{});var G$e=s(aT);w2e=n(G$e,"STRONG",{});var Z_t=s(w2e);Nlr=r(Z_t,"roberta"),Z_t.forEach(t),jlr=r(G$e," \u2014 "),jz=n(G$e,"A",{href:!0});var e2t=s(jz);Dlr=r(e2t,"TFRobertaModel"),e2t.forEach(t),Glr=r(G$e," (RoBERTa model)"),G$e.forEach(t),Olr=i(D),nT=n(D,"LI",{});var O$e=s(nT);A2e=n(O$e,"STRONG",{});var o2t=s(A2e);Vlr=r(o2t,"roformer"),o2t.forEach(t),Xlr=r(O$e," \u2014 "),Dz=n(O$e,"A",{href:!0});var r2t=s(Dz);zlr=r(r2t,"TFRoFormerModel"),r2t.forEach(t),Qlr=r(O$e," (RoFormer model)"),O$e.forEach(t),Wlr=i(D),sT=n(D,"LI",{});var V$e=s(sT);y2e=n(V$e,"STRONG",{});var t2t=s(y2e);Hlr=r(t2t,"speech_to_text"),t2t.forEach(t),Ulr=r(V$e," \u2014 "),Gz=n(V$e,"A",{href:!0});var a2t=s(Gz);Jlr=r(a2t,"TFSpeech2TextModel"),a2t.forEach(t),Ylr=r(V$e," (Speech2Text model)"),V$e.forEach(t),Klr=i(D),lT=n(D,"LI",{});var X$e=s(lT);L2e=n(X$e,"STRONG",{});var n2t=s(L2e);Zlr=r(n2t,"t5"),n2t.forEach(t),eir=r(X$e," \u2014 "),Oz=n(X$e,"A",{href:!0});var s2t=s(Oz);oir=r(s2t,"TFT5Model"),s2t.forEach(t),rir=r(X$e," (T5 model)"),X$e.forEach(t),tir=i(D),iT=n(D,"LI",{});var z$e=s(iT);x2e=n(z$e,"STRONG",{});var l2t=s(x2e);air=r(l2t,"tapas"),l2t.forEach(t),nir=r(z$e," \u2014 "),Vz=n(z$e,"A",{href:!0});var i2t=s(Vz);sir=r(i2t,"TFTapasModel"),i2t.forEach(t),lir=r(z$e," (TAPAS model)"),z$e.forEach(t),iir=i(D),dT=n(D,"LI",{});var Q$e=s(dT);$2e=n(Q$e,"STRONG",{});var d2t=s($2e);dir=r(d2t,"transfo-xl"),d2t.forEach(t),cir=r(Q$e," \u2014 "),Xz=n(Q$e,"A",{href:!0});var c2t=s(Xz);fir=r(c2t,"TFTransfoXLModel"),c2t.forEach(t),mir=r(Q$e," (Transformer-XL model)"),Q$e.forEach(t),gir=i(D),cT=n(D,"LI",{});var W$e=s(cT);k2e=n(W$e,"STRONG",{});var f2t=s(k2e);hir=r(f2t,"vit"),f2t.forEach(t),pir=r(W$e," \u2014 "),zz=n(W$e,"A",{href:!0});var m2t=s(zz);uir=r(m2t,"TFViTModel"),m2t.forEach(t),_ir=r(W$e," (ViT model)"),W$e.forEach(t),bir=i(D),fT=n(D,"LI",{});var H$e=s(fT);S2e=n(H$e,"STRONG",{});var g2t=s(S2e);vir=r(g2t,"vit_mae"),g2t.forEach(t),Fir=r(H$e," \u2014 "),Qz=n(H$e,"A",{href:!0});var h2t=s(Qz);Tir=r(h2t,"TFViTMAEModel"),h2t.forEach(t),Mir=r(H$e," (ViTMAE model)"),H$e.forEach(t),Eir=i(D),mT=n(D,"LI",{});var U$e=s(mT);R2e=n(U$e,"STRONG",{});var p2t=s(R2e);Cir=r(p2t,"wav2vec2"),p2t.forEach(t),wir=r(U$e," \u2014 "),Wz=n(U$e,"A",{href:!0});var u2t=s(Wz);Air=r(u2t,"TFWav2Vec2Model"),u2t.forEach(t),yir=r(U$e," (Wav2Vec2 model)"),U$e.forEach(t),Lir=i(D),gT=n(D,"LI",{});var J$e=s(gT);B2e=n(J$e,"STRONG",{});var _2t=s(B2e);xir=r(_2t,"xlm"),_2t.forEach(t),$ir=r(J$e," \u2014 "),Hz=n(J$e,"A",{href:!0});var b2t=s(Hz);kir=r(b2t,"TFXLMModel"),b2t.forEach(t),Sir=r(J$e," (XLM model)"),J$e.forEach(t),Rir=i(D),hT=n(D,"LI",{});var Y$e=s(hT);P2e=n(Y$e,"STRONG",{});var v2t=s(P2e);Bir=r(v2t,"xlm-roberta"),v2t.forEach(t),Pir=r(Y$e," \u2014 "),Uz=n(Y$e,"A",{href:!0});var F2t=s(Uz);Iir=r(F2t,"TFXLMRobertaModel"),F2t.forEach(t),qir=r(Y$e," (XLM-RoBERTa model)"),Y$e.forEach(t),Nir=i(D),pT=n(D,"LI",{});var K$e=s(pT);I2e=n(K$e,"STRONG",{});var T2t=s(I2e);jir=r(T2t,"xlnet"),T2t.forEach(t),Dir=r(K$e," \u2014 "),Jz=n(K$e,"A",{href:!0});var M2t=s(Jz);Gir=r(M2t,"TFXLNetModel"),M2t.forEach(t),Oir=r(K$e," (XLNet model)"),K$e.forEach(t),D.forEach(t),Vir=i(fl),T(uT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),YIe=i(f),Gd=n(f,"H2",{class:!0});var tje=s(Gd);_T=n(tje,"A",{id:!0,class:!0,href:!0});var E2t=s(_T);q2e=n(E2t,"SPAN",{});var C2t=s(q2e);T(qL.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),Xir=i(tje),N2e=n(tje,"SPAN",{});var w2t=s(N2e);zir=r(w2t,"TFAutoModelForPreTraining"),w2t.forEach(t),tje.forEach(t),KIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(NL.$$.fragment,ml),Qir=i(ml),Od=n(ml,"P",{});var nZ=s(Od);Wir=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Yz=n(nZ,"A",{href:!0});var A2t=s(Yz);Hir=r(A2t,"from_pretrained()"),A2t.forEach(t),Uir=r(nZ," class method or the "),Kz=n(nZ,"A",{href:!0});var y2t=s(Kz);Jir=r(y2t,"from_config()"),y2t.forEach(t),Yir=r(nZ,` class
method.`),nZ.forEach(t),Kir=i(ml),jL=n(ml,"P",{});var aje=s(jL);Zir=r(aje,"This class cannot be instantiated directly using "),j2e=n(aje,"CODE",{});var L2t=s(j2e);edr=r(L2t,"__init__()"),L2t.forEach(t),odr=r(aje," (throws an error)."),aje.forEach(t),rdr=i(ml),At=n(ml,"DIV",{class:!0});var YA=s(At);T(DL.$$.fragment,YA),tdr=i(YA),D2e=n(YA,"P",{});var x2t=s(D2e);adr=r(x2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),x2t.forEach(t),ndr=i(YA),Vd=n(YA,"P",{});var sZ=s(Vd);sdr=r(sZ,`Note:
Loading a model from its configuration file does `),G2e=n(sZ,"STRONG",{});var $2t=s(G2e);ldr=r($2t,"not"),$2t.forEach(t),idr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(sZ,"A",{href:!0});var k2t=s(Zz);ddr=r(k2t,"from_pretrained()"),k2t.forEach(t),cdr=r(sZ," to load the model weights."),sZ.forEach(t),fdr=i(YA),T(bT.$$.fragment,YA),YA.forEach(t),mdr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(GL.$$.fragment,gl),gdr=i(gl),O2e=n(gl,"P",{});var S2t=s(O2e);hdr=r(S2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S2t.forEach(t),pdr=i(gl),Za=n(gl,"P",{});var KA=s(Za);udr=r(KA,"The model class to instantiate is selected based on the "),V2e=n(KA,"CODE",{});var R2t=s(V2e);_dr=r(R2t,"model_type"),R2t.forEach(t),bdr=r(KA,` property of the config object (either
passed as an argument or loaded from `),X2e=n(KA,"CODE",{});var B2t=s(X2e);vdr=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),Fdr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(KA,"CODE",{});var P2t=s(z2e);Tdr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),Mdr=r(KA,":"),KA.forEach(t),Edr=i(gl),se=n(gl,"UL",{});var le=s(se);vT=n(le,"LI",{});var Z$e=s(vT);Q2e=n(Z$e,"STRONG",{});var I2t=s(Q2e);Cdr=r(I2t,"albert"),I2t.forEach(t),wdr=r(Z$e," \u2014 "),eQ=n(Z$e,"A",{href:!0});var q2t=s(eQ);Adr=r(q2t,"TFAlbertForPreTraining"),q2t.forEach(t),ydr=r(Z$e," (ALBERT model)"),Z$e.forEach(t),Ldr=i(le),FT=n(le,"LI",{});var eke=s(FT);W2e=n(eke,"STRONG",{});var N2t=s(W2e);xdr=r(N2t,"bart"),N2t.forEach(t),$dr=r(eke," \u2014 "),oQ=n(eke,"A",{href:!0});var j2t=s(oQ);kdr=r(j2t,"TFBartForConditionalGeneration"),j2t.forEach(t),Sdr=r(eke," (BART model)"),eke.forEach(t),Rdr=i(le),TT=n(le,"LI",{});var oke=s(TT);H2e=n(oke,"STRONG",{});var D2t=s(H2e);Bdr=r(D2t,"bert"),D2t.forEach(t),Pdr=r(oke," \u2014 "),rQ=n(oke,"A",{href:!0});var G2t=s(rQ);Idr=r(G2t,"TFBertForPreTraining"),G2t.forEach(t),qdr=r(oke," (BERT model)"),oke.forEach(t),Ndr=i(le),MT=n(le,"LI",{});var rke=s(MT);U2e=n(rke,"STRONG",{});var O2t=s(U2e);jdr=r(O2t,"camembert"),O2t.forEach(t),Ddr=r(rke," \u2014 "),tQ=n(rke,"A",{href:!0});var V2t=s(tQ);Gdr=r(V2t,"TFCamembertForMaskedLM"),V2t.forEach(t),Odr=r(rke," (CamemBERT model)"),rke.forEach(t),Vdr=i(le),ET=n(le,"LI",{});var tke=s(ET);J2e=n(tke,"STRONG",{});var X2t=s(J2e);Xdr=r(X2t,"ctrl"),X2t.forEach(t),zdr=r(tke," \u2014 "),aQ=n(tke,"A",{href:!0});var z2t=s(aQ);Qdr=r(z2t,"TFCTRLLMHeadModel"),z2t.forEach(t),Wdr=r(tke," (CTRL model)"),tke.forEach(t),Hdr=i(le),CT=n(le,"LI",{});var ake=s(CT);Y2e=n(ake,"STRONG",{});var Q2t=s(Y2e);Udr=r(Q2t,"distilbert"),Q2t.forEach(t),Jdr=r(ake," \u2014 "),nQ=n(ake,"A",{href:!0});var W2t=s(nQ);Ydr=r(W2t,"TFDistilBertForMaskedLM"),W2t.forEach(t),Kdr=r(ake," (DistilBERT model)"),ake.forEach(t),Zdr=i(le),wT=n(le,"LI",{});var nke=s(wT);K2e=n(nke,"STRONG",{});var H2t=s(K2e);ecr=r(H2t,"electra"),H2t.forEach(t),ocr=r(nke," \u2014 "),sQ=n(nke,"A",{href:!0});var U2t=s(sQ);rcr=r(U2t,"TFElectraForPreTraining"),U2t.forEach(t),tcr=r(nke," (ELECTRA model)"),nke.forEach(t),acr=i(le),AT=n(le,"LI",{});var ske=s(AT);Z2e=n(ske,"STRONG",{});var J2t=s(Z2e);ncr=r(J2t,"flaubert"),J2t.forEach(t),scr=r(ske," \u2014 "),lQ=n(ske,"A",{href:!0});var Y2t=s(lQ);lcr=r(Y2t,"TFFlaubertWithLMHeadModel"),Y2t.forEach(t),icr=r(ske," (FlauBERT model)"),ske.forEach(t),dcr=i(le),yT=n(le,"LI",{});var lke=s(yT);e1e=n(lke,"STRONG",{});var K2t=s(e1e);ccr=r(K2t,"funnel"),K2t.forEach(t),fcr=r(lke," \u2014 "),iQ=n(lke,"A",{href:!0});var Z2t=s(iQ);mcr=r(Z2t,"TFFunnelForPreTraining"),Z2t.forEach(t),gcr=r(lke," (Funnel Transformer model)"),lke.forEach(t),hcr=i(le),LT=n(le,"LI",{});var ike=s(LT);o1e=n(ike,"STRONG",{});var e1t=s(o1e);pcr=r(e1t,"gpt2"),e1t.forEach(t),ucr=r(ike," \u2014 "),dQ=n(ike,"A",{href:!0});var o1t=s(dQ);_cr=r(o1t,"TFGPT2LMHeadModel"),o1t.forEach(t),bcr=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),vcr=i(le),xT=n(le,"LI",{});var dke=s(xT);r1e=n(dke,"STRONG",{});var r1t=s(r1e);Fcr=r(r1t,"layoutlm"),r1t.forEach(t),Tcr=r(dke," \u2014 "),cQ=n(dke,"A",{href:!0});var t1t=s(cQ);Mcr=r(t1t,"TFLayoutLMForMaskedLM"),t1t.forEach(t),Ecr=r(dke," (LayoutLM model)"),dke.forEach(t),Ccr=i(le),$T=n(le,"LI",{});var cke=s($T);t1e=n(cke,"STRONG",{});var a1t=s(t1e);wcr=r(a1t,"lxmert"),a1t.forEach(t),Acr=r(cke," \u2014 "),fQ=n(cke,"A",{href:!0});var n1t=s(fQ);ycr=r(n1t,"TFLxmertForPreTraining"),n1t.forEach(t),Lcr=r(cke," (LXMERT model)"),cke.forEach(t),xcr=i(le),kT=n(le,"LI",{});var fke=s(kT);a1e=n(fke,"STRONG",{});var s1t=s(a1e);$cr=r(s1t,"mobilebert"),s1t.forEach(t),kcr=r(fke," \u2014 "),mQ=n(fke,"A",{href:!0});var l1t=s(mQ);Scr=r(l1t,"TFMobileBertForPreTraining"),l1t.forEach(t),Rcr=r(fke," (MobileBERT model)"),fke.forEach(t),Bcr=i(le),ST=n(le,"LI",{});var mke=s(ST);n1e=n(mke,"STRONG",{});var i1t=s(n1e);Pcr=r(i1t,"mpnet"),i1t.forEach(t),Icr=r(mke," \u2014 "),gQ=n(mke,"A",{href:!0});var d1t=s(gQ);qcr=r(d1t,"TFMPNetForMaskedLM"),d1t.forEach(t),Ncr=r(mke," (MPNet model)"),mke.forEach(t),jcr=i(le),RT=n(le,"LI",{});var gke=s(RT);s1e=n(gke,"STRONG",{});var c1t=s(s1e);Dcr=r(c1t,"openai-gpt"),c1t.forEach(t),Gcr=r(gke," \u2014 "),hQ=n(gke,"A",{href:!0});var f1t=s(hQ);Ocr=r(f1t,"TFOpenAIGPTLMHeadModel"),f1t.forEach(t),Vcr=r(gke," (OpenAI GPT model)"),gke.forEach(t),Xcr=i(le),BT=n(le,"LI",{});var hke=s(BT);l1e=n(hke,"STRONG",{});var m1t=s(l1e);zcr=r(m1t,"roberta"),m1t.forEach(t),Qcr=r(hke," \u2014 "),pQ=n(hke,"A",{href:!0});var g1t=s(pQ);Wcr=r(g1t,"TFRobertaForMaskedLM"),g1t.forEach(t),Hcr=r(hke," (RoBERTa model)"),hke.forEach(t),Ucr=i(le),PT=n(le,"LI",{});var pke=s(PT);i1e=n(pke,"STRONG",{});var h1t=s(i1e);Jcr=r(h1t,"t5"),h1t.forEach(t),Ycr=r(pke," \u2014 "),uQ=n(pke,"A",{href:!0});var p1t=s(uQ);Kcr=r(p1t,"TFT5ForConditionalGeneration"),p1t.forEach(t),Zcr=r(pke," (T5 model)"),pke.forEach(t),efr=i(le),IT=n(le,"LI",{});var uke=s(IT);d1e=n(uke,"STRONG",{});var u1t=s(d1e);ofr=r(u1t,"tapas"),u1t.forEach(t),rfr=r(uke," \u2014 "),_Q=n(uke,"A",{href:!0});var _1t=s(_Q);tfr=r(_1t,"TFTapasForMaskedLM"),_1t.forEach(t),afr=r(uke," (TAPAS model)"),uke.forEach(t),nfr=i(le),qT=n(le,"LI",{});var _ke=s(qT);c1e=n(_ke,"STRONG",{});var b1t=s(c1e);sfr=r(b1t,"transfo-xl"),b1t.forEach(t),lfr=r(_ke," \u2014 "),bQ=n(_ke,"A",{href:!0});var v1t=s(bQ);ifr=r(v1t,"TFTransfoXLLMHeadModel"),v1t.forEach(t),dfr=r(_ke," (Transformer-XL model)"),_ke.forEach(t),cfr=i(le),NT=n(le,"LI",{});var bke=s(NT);f1e=n(bke,"STRONG",{});var F1t=s(f1e);ffr=r(F1t,"vit_mae"),F1t.forEach(t),mfr=r(bke," \u2014 "),vQ=n(bke,"A",{href:!0});var T1t=s(vQ);gfr=r(T1t,"TFViTMAEForPreTraining"),T1t.forEach(t),hfr=r(bke," (ViTMAE model)"),bke.forEach(t),pfr=i(le),jT=n(le,"LI",{});var vke=s(jT);m1e=n(vke,"STRONG",{});var M1t=s(m1e);ufr=r(M1t,"xlm"),M1t.forEach(t),_fr=r(vke," \u2014 "),FQ=n(vke,"A",{href:!0});var E1t=s(FQ);bfr=r(E1t,"TFXLMWithLMHeadModel"),E1t.forEach(t),vfr=r(vke," (XLM model)"),vke.forEach(t),Ffr=i(le),DT=n(le,"LI",{});var Fke=s(DT);g1e=n(Fke,"STRONG",{});var C1t=s(g1e);Tfr=r(C1t,"xlm-roberta"),C1t.forEach(t),Mfr=r(Fke," \u2014 "),TQ=n(Fke,"A",{href:!0});var w1t=s(TQ);Efr=r(w1t,"TFXLMRobertaForMaskedLM"),w1t.forEach(t),Cfr=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),wfr=i(le),GT=n(le,"LI",{});var Tke=s(GT);h1e=n(Tke,"STRONG",{});var A1t=s(h1e);Afr=r(A1t,"xlnet"),A1t.forEach(t),yfr=r(Tke," \u2014 "),MQ=n(Tke,"A",{href:!0});var y1t=s(MQ);Lfr=r(y1t,"TFXLNetLMHeadModel"),y1t.forEach(t),xfr=r(Tke," (XLNet model)"),Tke.forEach(t),le.forEach(t),$fr=i(gl),T(OT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),ZIe=i(f),Xd=n(f,"H2",{class:!0});var nje=s(Xd);VT=n(nje,"A",{id:!0,class:!0,href:!0});var L1t=s(VT);p1e=n(L1t,"SPAN",{});var x1t=s(p1e);T(OL.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),kfr=i(nje),u1e=n(nje,"SPAN",{});var $1t=s(u1e);Sfr=r($1t,"TFAutoModelForCausalLM"),$1t.forEach(t),nje.forEach(t),eqe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(VL.$$.fragment,hl),Rfr=i(hl),zd=n(hl,"P",{});var lZ=s(zd);Bfr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EQ=n(lZ,"A",{href:!0});var k1t=s(EQ);Pfr=r(k1t,"from_pretrained()"),k1t.forEach(t),Ifr=r(lZ," class method or the "),CQ=n(lZ,"A",{href:!0});var S1t=s(CQ);qfr=r(S1t,"from_config()"),S1t.forEach(t),Nfr=r(lZ,` class
method.`),lZ.forEach(t),jfr=i(hl),XL=n(hl,"P",{});var sje=s(XL);Dfr=r(sje,"This class cannot be instantiated directly using "),_1e=n(sje,"CODE",{});var R1t=s(_1e);Gfr=r(R1t,"__init__()"),R1t.forEach(t),Ofr=r(sje," (throws an error)."),sje.forEach(t),Vfr=i(hl),yt=n(hl,"DIV",{class:!0});var ZA=s(yt);T(zL.$$.fragment,ZA),Xfr=i(ZA),b1e=n(ZA,"P",{});var B1t=s(b1e);zfr=r(B1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),B1t.forEach(t),Qfr=i(ZA),Qd=n(ZA,"P",{});var iZ=s(Qd);Wfr=r(iZ,`Note:
Loading a model from its configuration file does `),v1e=n(iZ,"STRONG",{});var P1t=s(v1e);Hfr=r(P1t,"not"),P1t.forEach(t),Ufr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(iZ,"A",{href:!0});var I1t=s(wQ);Jfr=r(I1t,"from_pretrained()"),I1t.forEach(t),Yfr=r(iZ," to load the model weights."),iZ.forEach(t),Kfr=i(ZA),T(XT.$$.fragment,ZA),ZA.forEach(t),Zfr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(QL.$$.fragment,pl),emr=i(pl),F1e=n(pl,"P",{});var q1t=s(F1e);omr=r(q1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q1t.forEach(t),rmr=i(pl),en=n(pl,"P",{});var e6=s(en);tmr=r(e6,"The model class to instantiate is selected based on the "),T1e=n(e6,"CODE",{});var N1t=s(T1e);amr=r(N1t,"model_type"),N1t.forEach(t),nmr=r(e6,` property of the config object (either
passed as an argument or loaded from `),M1e=n(e6,"CODE",{});var j1t=s(M1e);smr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),lmr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(e6,"CODE",{});var D1t=s(E1e);imr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),dmr=r(e6,":"),e6.forEach(t),cmr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);zT=n(Ce,"LI",{});var Mke=s(zT);C1e=n(Mke,"STRONG",{});var G1t=s(C1e);fmr=r(G1t,"bert"),G1t.forEach(t),mmr=r(Mke," \u2014 "),AQ=n(Mke,"A",{href:!0});var O1t=s(AQ);gmr=r(O1t,"TFBertLMHeadModel"),O1t.forEach(t),hmr=r(Mke," (BERT model)"),Mke.forEach(t),pmr=i(Ce),QT=n(Ce,"LI",{});var Eke=s(QT);w1e=n(Eke,"STRONG",{});var V1t=s(w1e);umr=r(V1t,"camembert"),V1t.forEach(t),_mr=r(Eke," \u2014 "),yQ=n(Eke,"A",{href:!0});var X1t=s(yQ);bmr=r(X1t,"TFCamembertForCausalLM"),X1t.forEach(t),vmr=r(Eke," (CamemBERT model)"),Eke.forEach(t),Fmr=i(Ce),WT=n(Ce,"LI",{});var Cke=s(WT);A1e=n(Cke,"STRONG",{});var z1t=s(A1e);Tmr=r(z1t,"ctrl"),z1t.forEach(t),Mmr=r(Cke," \u2014 "),LQ=n(Cke,"A",{href:!0});var Q1t=s(LQ);Emr=r(Q1t,"TFCTRLLMHeadModel"),Q1t.forEach(t),Cmr=r(Cke," (CTRL model)"),Cke.forEach(t),wmr=i(Ce),HT=n(Ce,"LI",{});var wke=s(HT);y1e=n(wke,"STRONG",{});var W1t=s(y1e);Amr=r(W1t,"gpt2"),W1t.forEach(t),ymr=r(wke," \u2014 "),xQ=n(wke,"A",{href:!0});var H1t=s(xQ);Lmr=r(H1t,"TFGPT2LMHeadModel"),H1t.forEach(t),xmr=r(wke," (OpenAI GPT-2 model)"),wke.forEach(t),$mr=i(Ce),UT=n(Ce,"LI",{});var Ake=s(UT);L1e=n(Ake,"STRONG",{});var U1t=s(L1e);kmr=r(U1t,"gptj"),U1t.forEach(t),Smr=r(Ake," \u2014 "),$Q=n(Ake,"A",{href:!0});var J1t=s($Q);Rmr=r(J1t,"TFGPTJForCausalLM"),J1t.forEach(t),Bmr=r(Ake," (GPT-J model)"),Ake.forEach(t),Pmr=i(Ce),JT=n(Ce,"LI",{});var yke=s(JT);x1e=n(yke,"STRONG",{});var Y1t=s(x1e);Imr=r(Y1t,"openai-gpt"),Y1t.forEach(t),qmr=r(yke," \u2014 "),kQ=n(yke,"A",{href:!0});var K1t=s(kQ);Nmr=r(K1t,"TFOpenAIGPTLMHeadModel"),K1t.forEach(t),jmr=r(yke," (OpenAI GPT model)"),yke.forEach(t),Dmr=i(Ce),YT=n(Ce,"LI",{});var Lke=s(YT);$1e=n(Lke,"STRONG",{});var Z1t=s($1e);Gmr=r(Z1t,"rembert"),Z1t.forEach(t),Omr=r(Lke," \u2014 "),SQ=n(Lke,"A",{href:!0});var ebt=s(SQ);Vmr=r(ebt,"TFRemBertForCausalLM"),ebt.forEach(t),Xmr=r(Lke," (RemBERT model)"),Lke.forEach(t),zmr=i(Ce),KT=n(Ce,"LI",{});var xke=s(KT);k1e=n(xke,"STRONG",{});var obt=s(k1e);Qmr=r(obt,"roberta"),obt.forEach(t),Wmr=r(xke," \u2014 "),RQ=n(xke,"A",{href:!0});var rbt=s(RQ);Hmr=r(rbt,"TFRobertaForCausalLM"),rbt.forEach(t),Umr=r(xke," (RoBERTa model)"),xke.forEach(t),Jmr=i(Ce),ZT=n(Ce,"LI",{});var $ke=s(ZT);S1e=n($ke,"STRONG",{});var tbt=s(S1e);Ymr=r(tbt,"roformer"),tbt.forEach(t),Kmr=r($ke," \u2014 "),BQ=n($ke,"A",{href:!0});var abt=s(BQ);Zmr=r(abt,"TFRoFormerForCausalLM"),abt.forEach(t),egr=r($ke," (RoFormer model)"),$ke.forEach(t),ogr=i(Ce),e7=n(Ce,"LI",{});var kke=s(e7);R1e=n(kke,"STRONG",{});var nbt=s(R1e);rgr=r(nbt,"transfo-xl"),nbt.forEach(t),tgr=r(kke," \u2014 "),PQ=n(kke,"A",{href:!0});var sbt=s(PQ);agr=r(sbt,"TFTransfoXLLMHeadModel"),sbt.forEach(t),ngr=r(kke," (Transformer-XL model)"),kke.forEach(t),sgr=i(Ce),o7=n(Ce,"LI",{});var Ske=s(o7);B1e=n(Ske,"STRONG",{});var lbt=s(B1e);lgr=r(lbt,"xlm"),lbt.forEach(t),igr=r(Ske," \u2014 "),IQ=n(Ske,"A",{href:!0});var ibt=s(IQ);dgr=r(ibt,"TFXLMWithLMHeadModel"),ibt.forEach(t),cgr=r(Ske," (XLM model)"),Ske.forEach(t),fgr=i(Ce),r7=n(Ce,"LI",{});var Rke=s(r7);P1e=n(Rke,"STRONG",{});var dbt=s(P1e);mgr=r(dbt,"xlnet"),dbt.forEach(t),ggr=r(Rke," \u2014 "),qQ=n(Rke,"A",{href:!0});var cbt=s(qQ);hgr=r(cbt,"TFXLNetLMHeadModel"),cbt.forEach(t),pgr=r(Rke," (XLNet model)"),Rke.forEach(t),Ce.forEach(t),ugr=i(pl),T(t7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),oqe=i(f),Wd=n(f,"H2",{class:!0});var lje=s(Wd);a7=n(lje,"A",{id:!0,class:!0,href:!0});var fbt=s(a7);I1e=n(fbt,"SPAN",{});var mbt=s(I1e);T(WL.$$.fragment,mbt),mbt.forEach(t),fbt.forEach(t),_gr=i(lje),q1e=n(lje,"SPAN",{});var gbt=s(q1e);bgr=r(gbt,"TFAutoModelForImageClassification"),gbt.forEach(t),lje.forEach(t),rqe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(HL.$$.fragment,ul),vgr=i(ul),Hd=n(ul,"P",{});var dZ=s(Hd);Fgr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NQ=n(dZ,"A",{href:!0});var hbt=s(NQ);Tgr=r(hbt,"from_pretrained()"),hbt.forEach(t),Mgr=r(dZ," class method or the "),jQ=n(dZ,"A",{href:!0});var pbt=s(jQ);Egr=r(pbt,"from_config()"),pbt.forEach(t),Cgr=r(dZ,` class
method.`),dZ.forEach(t),wgr=i(ul),UL=n(ul,"P",{});var ije=s(UL);Agr=r(ije,"This class cannot be instantiated directly using "),N1e=n(ije,"CODE",{});var ubt=s(N1e);ygr=r(ubt,"__init__()"),ubt.forEach(t),Lgr=r(ije," (throws an error)."),ije.forEach(t),xgr=i(ul),Lt=n(ul,"DIV",{class:!0});var o6=s(Lt);T(JL.$$.fragment,o6),$gr=i(o6),j1e=n(o6,"P",{});var _bt=s(j1e);kgr=r(_bt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_bt.forEach(t),Sgr=i(o6),Ud=n(o6,"P",{});var cZ=s(Ud);Rgr=r(cZ,`Note:
Loading a model from its configuration file does `),D1e=n(cZ,"STRONG",{});var bbt=s(D1e);Bgr=r(bbt,"not"),bbt.forEach(t),Pgr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(cZ,"A",{href:!0});var vbt=s(DQ);Igr=r(vbt,"from_pretrained()"),vbt.forEach(t),qgr=r(cZ," to load the model weights."),cZ.forEach(t),Ngr=i(o6),T(n7.$$.fragment,o6),o6.forEach(t),jgr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(YL.$$.fragment,_l),Dgr=i(_l),G1e=n(_l,"P",{});var Fbt=s(G1e);Ggr=r(Fbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fbt.forEach(t),Ogr=i(_l),on=n(_l,"P",{});var r6=s(on);Vgr=r(r6,"The model class to instantiate is selected based on the "),O1e=n(r6,"CODE",{});var Tbt=s(O1e);Xgr=r(Tbt,"model_type"),Tbt.forEach(t),zgr=r(r6,` property of the config object (either
passed as an argument or loaded from `),V1e=n(r6,"CODE",{});var Mbt=s(V1e);Qgr=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),Wgr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(r6,"CODE",{});var Ebt=s(X1e);Hgr=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),Ugr=r(r6,":"),r6.forEach(t),Jgr=i(_l),Jd=n(_l,"UL",{});var fZ=s(Jd);s7=n(fZ,"LI",{});var Bke=s(s7);z1e=n(Bke,"STRONG",{});var Cbt=s(z1e);Ygr=r(Cbt,"convnext"),Cbt.forEach(t),Kgr=r(Bke," \u2014 "),GQ=n(Bke,"A",{href:!0});var wbt=s(GQ);Zgr=r(wbt,"TFConvNextForImageClassification"),wbt.forEach(t),ehr=r(Bke," (ConvNext model)"),Bke.forEach(t),ohr=i(fZ),l7=n(fZ,"LI",{});var Pke=s(l7);Q1e=n(Pke,"STRONG",{});var Abt=s(Q1e);rhr=r(Abt,"data2vec-vision"),Abt.forEach(t),thr=r(Pke," \u2014 "),OQ=n(Pke,"A",{href:!0});var ybt=s(OQ);ahr=r(ybt,"TFData2VecVisionForImageClassification"),ybt.forEach(t),nhr=r(Pke," (Data2VecVision model)"),Pke.forEach(t),shr=i(fZ),i7=n(fZ,"LI",{});var Ike=s(i7);W1e=n(Ike,"STRONG",{});var Lbt=s(W1e);lhr=r(Lbt,"vit"),Lbt.forEach(t),ihr=r(Ike," \u2014 "),VQ=n(Ike,"A",{href:!0});var xbt=s(VQ);dhr=r(xbt,"TFViTForImageClassification"),xbt.forEach(t),chr=r(Ike," (ViT model)"),Ike.forEach(t),fZ.forEach(t),fhr=i(_l),T(d7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),tqe=i(f),Yd=n(f,"H2",{class:!0});var dje=s(Yd);c7=n(dje,"A",{id:!0,class:!0,href:!0});var $bt=s(c7);H1e=n($bt,"SPAN",{});var kbt=s(H1e);T(KL.$$.fragment,kbt),kbt.forEach(t),$bt.forEach(t),mhr=i(dje),U1e=n(dje,"SPAN",{});var Sbt=s(U1e);ghr=r(Sbt,"TFAutoModelForMaskedLM"),Sbt.forEach(t),dje.forEach(t),aqe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(ZL.$$.fragment,bl),hhr=i(bl),Kd=n(bl,"P",{});var mZ=s(Kd);phr=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XQ=n(mZ,"A",{href:!0});var Rbt=s(XQ);uhr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),_hr=r(mZ," class method or the "),zQ=n(mZ,"A",{href:!0});var Bbt=s(zQ);bhr=r(Bbt,"from_config()"),Bbt.forEach(t),vhr=r(mZ,` class
method.`),mZ.forEach(t),Fhr=i(bl),e8=n(bl,"P",{});var cje=s(e8);Thr=r(cje,"This class cannot be instantiated directly using "),J1e=n(cje,"CODE",{});var Pbt=s(J1e);Mhr=r(Pbt,"__init__()"),Pbt.forEach(t),Ehr=r(cje," (throws an error)."),cje.forEach(t),Chr=i(bl),xt=n(bl,"DIV",{class:!0});var t6=s(xt);T(o8.$$.fragment,t6),whr=i(t6),Y1e=n(t6,"P",{});var Ibt=s(Y1e);Ahr=r(Ibt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ibt.forEach(t),yhr=i(t6),Zd=n(t6,"P",{});var gZ=s(Zd);Lhr=r(gZ,`Note:
Loading a model from its configuration file does `),K1e=n(gZ,"STRONG",{});var qbt=s(K1e);xhr=r(qbt,"not"),qbt.forEach(t),$hr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(gZ,"A",{href:!0});var Nbt=s(QQ);khr=r(Nbt,"from_pretrained()"),Nbt.forEach(t),Shr=r(gZ," to load the model weights."),gZ.forEach(t),Rhr=i(t6),T(f7.$$.fragment,t6),t6.forEach(t),Bhr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(r8.$$.fragment,vl),Phr=i(vl),Z1e=n(vl,"P",{});var jbt=s(Z1e);Ihr=r(jbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jbt.forEach(t),qhr=i(vl),rn=n(vl,"P",{});var a6=s(rn);Nhr=r(a6,"The model class to instantiate is selected based on the "),ebe=n(a6,"CODE",{});var Dbt=s(ebe);jhr=r(Dbt,"model_type"),Dbt.forEach(t),Dhr=r(a6,` property of the config object (either
passed as an argument or loaded from `),obe=n(a6,"CODE",{});var Gbt=s(obe);Ghr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),Ohr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(a6,"CODE",{});var Obt=s(rbe);Vhr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),Xhr=r(a6,":"),a6.forEach(t),zhr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);m7=n(fe,"LI",{});var qke=s(m7);tbe=n(qke,"STRONG",{});var Vbt=s(tbe);Qhr=r(Vbt,"albert"),Vbt.forEach(t),Whr=r(qke," \u2014 "),WQ=n(qke,"A",{href:!0});var Xbt=s(WQ);Hhr=r(Xbt,"TFAlbertForMaskedLM"),Xbt.forEach(t),Uhr=r(qke," (ALBERT model)"),qke.forEach(t),Jhr=i(fe),g7=n(fe,"LI",{});var Nke=s(g7);abe=n(Nke,"STRONG",{});var zbt=s(abe);Yhr=r(zbt,"bert"),zbt.forEach(t),Khr=r(Nke," \u2014 "),HQ=n(Nke,"A",{href:!0});var Qbt=s(HQ);Zhr=r(Qbt,"TFBertForMaskedLM"),Qbt.forEach(t),epr=r(Nke," (BERT model)"),Nke.forEach(t),opr=i(fe),h7=n(fe,"LI",{});var jke=s(h7);nbe=n(jke,"STRONG",{});var Wbt=s(nbe);rpr=r(Wbt,"camembert"),Wbt.forEach(t),tpr=r(jke," \u2014 "),UQ=n(jke,"A",{href:!0});var Hbt=s(UQ);apr=r(Hbt,"TFCamembertForMaskedLM"),Hbt.forEach(t),npr=r(jke," (CamemBERT model)"),jke.forEach(t),spr=i(fe),p7=n(fe,"LI",{});var Dke=s(p7);sbe=n(Dke,"STRONG",{});var Ubt=s(sbe);lpr=r(Ubt,"convbert"),Ubt.forEach(t),ipr=r(Dke," \u2014 "),JQ=n(Dke,"A",{href:!0});var Jbt=s(JQ);dpr=r(Jbt,"TFConvBertForMaskedLM"),Jbt.forEach(t),cpr=r(Dke," (ConvBERT model)"),Dke.forEach(t),fpr=i(fe),u7=n(fe,"LI",{});var Gke=s(u7);lbe=n(Gke,"STRONG",{});var Ybt=s(lbe);mpr=r(Ybt,"deberta"),Ybt.forEach(t),gpr=r(Gke," \u2014 "),YQ=n(Gke,"A",{href:!0});var Kbt=s(YQ);hpr=r(Kbt,"TFDebertaForMaskedLM"),Kbt.forEach(t),ppr=r(Gke," (DeBERTa model)"),Gke.forEach(t),upr=i(fe),_7=n(fe,"LI",{});var Oke=s(_7);ibe=n(Oke,"STRONG",{});var Zbt=s(ibe);_pr=r(Zbt,"deberta-v2"),Zbt.forEach(t),bpr=r(Oke," \u2014 "),KQ=n(Oke,"A",{href:!0});var e4t=s(KQ);vpr=r(e4t,"TFDebertaV2ForMaskedLM"),e4t.forEach(t),Fpr=r(Oke," (DeBERTa-v2 model)"),Oke.forEach(t),Tpr=i(fe),b7=n(fe,"LI",{});var Vke=s(b7);dbe=n(Vke,"STRONG",{});var o4t=s(dbe);Mpr=r(o4t,"distilbert"),o4t.forEach(t),Epr=r(Vke," \u2014 "),ZQ=n(Vke,"A",{href:!0});var r4t=s(ZQ);Cpr=r(r4t,"TFDistilBertForMaskedLM"),r4t.forEach(t),wpr=r(Vke," (DistilBERT model)"),Vke.forEach(t),Apr=i(fe),v7=n(fe,"LI",{});var Xke=s(v7);cbe=n(Xke,"STRONG",{});var t4t=s(cbe);ypr=r(t4t,"electra"),t4t.forEach(t),Lpr=r(Xke," \u2014 "),eW=n(Xke,"A",{href:!0});var a4t=s(eW);xpr=r(a4t,"TFElectraForMaskedLM"),a4t.forEach(t),$pr=r(Xke," (ELECTRA model)"),Xke.forEach(t),kpr=i(fe),F7=n(fe,"LI",{});var zke=s(F7);fbe=n(zke,"STRONG",{});var n4t=s(fbe);Spr=r(n4t,"flaubert"),n4t.forEach(t),Rpr=r(zke," \u2014 "),oW=n(zke,"A",{href:!0});var s4t=s(oW);Bpr=r(s4t,"TFFlaubertWithLMHeadModel"),s4t.forEach(t),Ppr=r(zke," (FlauBERT model)"),zke.forEach(t),Ipr=i(fe),T7=n(fe,"LI",{});var Qke=s(T7);mbe=n(Qke,"STRONG",{});var l4t=s(mbe);qpr=r(l4t,"funnel"),l4t.forEach(t),Npr=r(Qke," \u2014 "),rW=n(Qke,"A",{href:!0});var i4t=s(rW);jpr=r(i4t,"TFFunnelForMaskedLM"),i4t.forEach(t),Dpr=r(Qke," (Funnel Transformer model)"),Qke.forEach(t),Gpr=i(fe),M7=n(fe,"LI",{});var Wke=s(M7);gbe=n(Wke,"STRONG",{});var d4t=s(gbe);Opr=r(d4t,"layoutlm"),d4t.forEach(t),Vpr=r(Wke," \u2014 "),tW=n(Wke,"A",{href:!0});var c4t=s(tW);Xpr=r(c4t,"TFLayoutLMForMaskedLM"),c4t.forEach(t),zpr=r(Wke," (LayoutLM model)"),Wke.forEach(t),Qpr=i(fe),E7=n(fe,"LI",{});var Hke=s(E7);hbe=n(Hke,"STRONG",{});var f4t=s(hbe);Wpr=r(f4t,"longformer"),f4t.forEach(t),Hpr=r(Hke," \u2014 "),aW=n(Hke,"A",{href:!0});var m4t=s(aW);Upr=r(m4t,"TFLongformerForMaskedLM"),m4t.forEach(t),Jpr=r(Hke," (Longformer model)"),Hke.forEach(t),Ypr=i(fe),C7=n(fe,"LI",{});var Uke=s(C7);pbe=n(Uke,"STRONG",{});var g4t=s(pbe);Kpr=r(g4t,"mobilebert"),g4t.forEach(t),Zpr=r(Uke," \u2014 "),nW=n(Uke,"A",{href:!0});var h4t=s(nW);eur=r(h4t,"TFMobileBertForMaskedLM"),h4t.forEach(t),our=r(Uke," (MobileBERT model)"),Uke.forEach(t),rur=i(fe),w7=n(fe,"LI",{});var Jke=s(w7);ube=n(Jke,"STRONG",{});var p4t=s(ube);tur=r(p4t,"mpnet"),p4t.forEach(t),aur=r(Jke," \u2014 "),sW=n(Jke,"A",{href:!0});var u4t=s(sW);nur=r(u4t,"TFMPNetForMaskedLM"),u4t.forEach(t),sur=r(Jke," (MPNet model)"),Jke.forEach(t),lur=i(fe),A7=n(fe,"LI",{});var Yke=s(A7);_be=n(Yke,"STRONG",{});var _4t=s(_be);iur=r(_4t,"rembert"),_4t.forEach(t),dur=r(Yke," \u2014 "),lW=n(Yke,"A",{href:!0});var b4t=s(lW);cur=r(b4t,"TFRemBertForMaskedLM"),b4t.forEach(t),fur=r(Yke," (RemBERT model)"),Yke.forEach(t),mur=i(fe),y7=n(fe,"LI",{});var Kke=s(y7);bbe=n(Kke,"STRONG",{});var v4t=s(bbe);gur=r(v4t,"roberta"),v4t.forEach(t),hur=r(Kke," \u2014 "),iW=n(Kke,"A",{href:!0});var F4t=s(iW);pur=r(F4t,"TFRobertaForMaskedLM"),F4t.forEach(t),uur=r(Kke," (RoBERTa model)"),Kke.forEach(t),_ur=i(fe),L7=n(fe,"LI",{});var Zke=s(L7);vbe=n(Zke,"STRONG",{});var T4t=s(vbe);bur=r(T4t,"roformer"),T4t.forEach(t),vur=r(Zke," \u2014 "),dW=n(Zke,"A",{href:!0});var M4t=s(dW);Fur=r(M4t,"TFRoFormerForMaskedLM"),M4t.forEach(t),Tur=r(Zke," (RoFormer model)"),Zke.forEach(t),Mur=i(fe),x7=n(fe,"LI",{});var eSe=s(x7);Fbe=n(eSe,"STRONG",{});var E4t=s(Fbe);Eur=r(E4t,"tapas"),E4t.forEach(t),Cur=r(eSe," \u2014 "),cW=n(eSe,"A",{href:!0});var C4t=s(cW);wur=r(C4t,"TFTapasForMaskedLM"),C4t.forEach(t),Aur=r(eSe," (TAPAS model)"),eSe.forEach(t),yur=i(fe),$7=n(fe,"LI",{});var oSe=s($7);Tbe=n(oSe,"STRONG",{});var w4t=s(Tbe);Lur=r(w4t,"xlm"),w4t.forEach(t),xur=r(oSe," \u2014 "),fW=n(oSe,"A",{href:!0});var A4t=s(fW);$ur=r(A4t,"TFXLMWithLMHeadModel"),A4t.forEach(t),kur=r(oSe," (XLM model)"),oSe.forEach(t),Sur=i(fe),k7=n(fe,"LI",{});var rSe=s(k7);Mbe=n(rSe,"STRONG",{});var y4t=s(Mbe);Rur=r(y4t,"xlm-roberta"),y4t.forEach(t),Bur=r(rSe," \u2014 "),mW=n(rSe,"A",{href:!0});var L4t=s(mW);Pur=r(L4t,"TFXLMRobertaForMaskedLM"),L4t.forEach(t),Iur=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),fe.forEach(t),qur=i(vl),T(S7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),nqe=i(f),ec=n(f,"H2",{class:!0});var fje=s(ec);R7=n(fje,"A",{id:!0,class:!0,href:!0});var x4t=s(R7);Ebe=n(x4t,"SPAN",{});var $4t=s(Ebe);T(t8.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),Nur=i(fje),Cbe=n(fje,"SPAN",{});var k4t=s(Cbe);jur=r(k4t,"TFAutoModelForSeq2SeqLM"),k4t.forEach(t),fje.forEach(t),sqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(a8.$$.fragment,Fl),Dur=i(Fl),oc=n(Fl,"P",{});var hZ=s(oc);Gur=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gW=n(hZ,"A",{href:!0});var S4t=s(gW);Our=r(S4t,"from_pretrained()"),S4t.forEach(t),Vur=r(hZ," class method or the "),hW=n(hZ,"A",{href:!0});var R4t=s(hW);Xur=r(R4t,"from_config()"),R4t.forEach(t),zur=r(hZ,` class
method.`),hZ.forEach(t),Qur=i(Fl),n8=n(Fl,"P",{});var mje=s(n8);Wur=r(mje,"This class cannot be instantiated directly using "),wbe=n(mje,"CODE",{});var B4t=s(wbe);Hur=r(B4t,"__init__()"),B4t.forEach(t),Uur=r(mje," (throws an error)."),mje.forEach(t),Jur=i(Fl),$t=n(Fl,"DIV",{class:!0});var n6=s($t);T(s8.$$.fragment,n6),Yur=i(n6),Abe=n(n6,"P",{});var P4t=s(Abe);Kur=r(P4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P4t.forEach(t),Zur=i(n6),rc=n(n6,"P",{});var pZ=s(rc);e_r=r(pZ,`Note:
Loading a model from its configuration file does `),ybe=n(pZ,"STRONG",{});var I4t=s(ybe);o_r=r(I4t,"not"),I4t.forEach(t),r_r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(pZ,"A",{href:!0});var q4t=s(pW);t_r=r(q4t,"from_pretrained()"),q4t.forEach(t),a_r=r(pZ," to load the model weights."),pZ.forEach(t),n_r=i(n6),T(B7.$$.fragment,n6),n6.forEach(t),s_r=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(l8.$$.fragment,Tl),l_r=i(Tl),Lbe=n(Tl,"P",{});var N4t=s(Lbe);i_r=r(N4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),N4t.forEach(t),d_r=i(Tl),tn=n(Tl,"P",{});var s6=s(tn);c_r=r(s6,"The model class to instantiate is selected based on the "),xbe=n(s6,"CODE",{});var j4t=s(xbe);f_r=r(j4t,"model_type"),j4t.forEach(t),m_r=r(s6,` property of the config object (either
passed as an argument or loaded from `),$be=n(s6,"CODE",{});var D4t=s($be);g_r=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),h_r=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(s6,"CODE",{});var G4t=s(kbe);p_r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),u_r=r(s6,":"),s6.forEach(t),__r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);P7=n(Re,"LI",{});var tSe=s(P7);Sbe=n(tSe,"STRONG",{});var O4t=s(Sbe);b_r=r(O4t,"bart"),O4t.forEach(t),v_r=r(tSe," \u2014 "),uW=n(tSe,"A",{href:!0});var V4t=s(uW);F_r=r(V4t,"TFBartForConditionalGeneration"),V4t.forEach(t),T_r=r(tSe," (BART model)"),tSe.forEach(t),M_r=i(Re),I7=n(Re,"LI",{});var aSe=s(I7);Rbe=n(aSe,"STRONG",{});var X4t=s(Rbe);E_r=r(X4t,"blenderbot"),X4t.forEach(t),C_r=r(aSe," \u2014 "),_W=n(aSe,"A",{href:!0});var z4t=s(_W);w_r=r(z4t,"TFBlenderbotForConditionalGeneration"),z4t.forEach(t),A_r=r(aSe," (Blenderbot model)"),aSe.forEach(t),y_r=i(Re),q7=n(Re,"LI",{});var nSe=s(q7);Bbe=n(nSe,"STRONG",{});var Q4t=s(Bbe);L_r=r(Q4t,"blenderbot-small"),Q4t.forEach(t),x_r=r(nSe," \u2014 "),bW=n(nSe,"A",{href:!0});var W4t=s(bW);$_r=r(W4t,"TFBlenderbotSmallForConditionalGeneration"),W4t.forEach(t),k_r=r(nSe," (BlenderbotSmall model)"),nSe.forEach(t),S_r=i(Re),N7=n(Re,"LI",{});var sSe=s(N7);Pbe=n(sSe,"STRONG",{});var H4t=s(Pbe);R_r=r(H4t,"encoder-decoder"),H4t.forEach(t),B_r=r(sSe," \u2014 "),vW=n(sSe,"A",{href:!0});var U4t=s(vW);P_r=r(U4t,"TFEncoderDecoderModel"),U4t.forEach(t),I_r=r(sSe," (Encoder decoder model)"),sSe.forEach(t),q_r=i(Re),j7=n(Re,"LI",{});var lSe=s(j7);Ibe=n(lSe,"STRONG",{});var J4t=s(Ibe);N_r=r(J4t,"led"),J4t.forEach(t),j_r=r(lSe," \u2014 "),FW=n(lSe,"A",{href:!0});var Y4t=s(FW);D_r=r(Y4t,"TFLEDForConditionalGeneration"),Y4t.forEach(t),G_r=r(lSe," (LED model)"),lSe.forEach(t),O_r=i(Re),D7=n(Re,"LI",{});var iSe=s(D7);qbe=n(iSe,"STRONG",{});var K4t=s(qbe);V_r=r(K4t,"marian"),K4t.forEach(t),X_r=r(iSe," \u2014 "),TW=n(iSe,"A",{href:!0});var Z4t=s(TW);z_r=r(Z4t,"TFMarianMTModel"),Z4t.forEach(t),Q_r=r(iSe," (Marian model)"),iSe.forEach(t),W_r=i(Re),G7=n(Re,"LI",{});var dSe=s(G7);Nbe=n(dSe,"STRONG",{});var e5t=s(Nbe);H_r=r(e5t,"mbart"),e5t.forEach(t),U_r=r(dSe," \u2014 "),MW=n(dSe,"A",{href:!0});var o5t=s(MW);J_r=r(o5t,"TFMBartForConditionalGeneration"),o5t.forEach(t),Y_r=r(dSe," (mBART model)"),dSe.forEach(t),K_r=i(Re),O7=n(Re,"LI",{});var cSe=s(O7);jbe=n(cSe,"STRONG",{});var r5t=s(jbe);Z_r=r(r5t,"mt5"),r5t.forEach(t),e2r=r(cSe," \u2014 "),EW=n(cSe,"A",{href:!0});var t5t=s(EW);o2r=r(t5t,"TFMT5ForConditionalGeneration"),t5t.forEach(t),r2r=r(cSe," (mT5 model)"),cSe.forEach(t),t2r=i(Re),V7=n(Re,"LI",{});var fSe=s(V7);Dbe=n(fSe,"STRONG",{});var a5t=s(Dbe);a2r=r(a5t,"pegasus"),a5t.forEach(t),n2r=r(fSe," \u2014 "),CW=n(fSe,"A",{href:!0});var n5t=s(CW);s2r=r(n5t,"TFPegasusForConditionalGeneration"),n5t.forEach(t),l2r=r(fSe," (Pegasus model)"),fSe.forEach(t),i2r=i(Re),X7=n(Re,"LI",{});var mSe=s(X7);Gbe=n(mSe,"STRONG",{});var s5t=s(Gbe);d2r=r(s5t,"t5"),s5t.forEach(t),c2r=r(mSe," \u2014 "),wW=n(mSe,"A",{href:!0});var l5t=s(wW);f2r=r(l5t,"TFT5ForConditionalGeneration"),l5t.forEach(t),m2r=r(mSe," (T5 model)"),mSe.forEach(t),Re.forEach(t),g2r=i(Tl),T(z7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),lqe=i(f),tc=n(f,"H2",{class:!0});var gje=s(tc);Q7=n(gje,"A",{id:!0,class:!0,href:!0});var i5t=s(Q7);Obe=n(i5t,"SPAN",{});var d5t=s(Obe);T(i8.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),h2r=i(gje),Vbe=n(gje,"SPAN",{});var c5t=s(Vbe);p2r=r(c5t,"TFAutoModelForSequenceClassification"),c5t.forEach(t),gje.forEach(t),iqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(d8.$$.fragment,Ml),u2r=i(Ml),ac=n(Ml,"P",{});var uZ=s(ac);_2r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AW=n(uZ,"A",{href:!0});var f5t=s(AW);b2r=r(f5t,"from_pretrained()"),f5t.forEach(t),v2r=r(uZ," class method or the "),yW=n(uZ,"A",{href:!0});var m5t=s(yW);F2r=r(m5t,"from_config()"),m5t.forEach(t),T2r=r(uZ,` class
method.`),uZ.forEach(t),M2r=i(Ml),c8=n(Ml,"P",{});var hje=s(c8);E2r=r(hje,"This class cannot be instantiated directly using "),Xbe=n(hje,"CODE",{});var g5t=s(Xbe);C2r=r(g5t,"__init__()"),g5t.forEach(t),w2r=r(hje," (throws an error)."),hje.forEach(t),A2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var l6=s(kt);T(f8.$$.fragment,l6),y2r=i(l6),zbe=n(l6,"P",{});var h5t=s(zbe);L2r=r(h5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h5t.forEach(t),x2r=i(l6),nc=n(l6,"P",{});var _Z=s(nc);$2r=r(_Z,`Note:
Loading a model from its configuration file does `),Qbe=n(_Z,"STRONG",{});var p5t=s(Qbe);k2r=r(p5t,"not"),p5t.forEach(t),S2r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(_Z,"A",{href:!0});var u5t=s(LW);R2r=r(u5t,"from_pretrained()"),u5t.forEach(t),B2r=r(_Z," to load the model weights."),_Z.forEach(t),P2r=i(l6),T(W7.$$.fragment,l6),l6.forEach(t),I2r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(m8.$$.fragment,El),q2r=i(El),Wbe=n(El,"P",{});var _5t=s(Wbe);N2r=r(_5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_5t.forEach(t),j2r=i(El),an=n(El,"P",{});var i6=s(an);D2r=r(i6,"The model class to instantiate is selected based on the "),Hbe=n(i6,"CODE",{});var b5t=s(Hbe);G2r=r(b5t,"model_type"),b5t.forEach(t),O2r=r(i6,` property of the config object (either
passed as an argument or loaded from `),Ube=n(i6,"CODE",{});var v5t=s(Ube);V2r=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),X2r=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(i6,"CODE",{});var F5t=s(Jbe);z2r=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),Q2r=r(i6,":"),i6.forEach(t),W2r=i(El),Z=n(El,"UL",{});var te=s(Z);H7=n(te,"LI",{});var gSe=s(H7);Ybe=n(gSe,"STRONG",{});var T5t=s(Ybe);H2r=r(T5t,"albert"),T5t.forEach(t),U2r=r(gSe," \u2014 "),xW=n(gSe,"A",{href:!0});var M5t=s(xW);J2r=r(M5t,"TFAlbertForSequenceClassification"),M5t.forEach(t),Y2r=r(gSe," (ALBERT model)"),gSe.forEach(t),K2r=i(te),U7=n(te,"LI",{});var hSe=s(U7);Kbe=n(hSe,"STRONG",{});var E5t=s(Kbe);Z2r=r(E5t,"bert"),E5t.forEach(t),e1r=r(hSe," \u2014 "),$W=n(hSe,"A",{href:!0});var C5t=s($W);o1r=r(C5t,"TFBertForSequenceClassification"),C5t.forEach(t),r1r=r(hSe," (BERT model)"),hSe.forEach(t),t1r=i(te),J7=n(te,"LI",{});var pSe=s(J7);Zbe=n(pSe,"STRONG",{});var w5t=s(Zbe);a1r=r(w5t,"camembert"),w5t.forEach(t),n1r=r(pSe," \u2014 "),kW=n(pSe,"A",{href:!0});var A5t=s(kW);s1r=r(A5t,"TFCamembertForSequenceClassification"),A5t.forEach(t),l1r=r(pSe," (CamemBERT model)"),pSe.forEach(t),i1r=i(te),Y7=n(te,"LI",{});var uSe=s(Y7);e4e=n(uSe,"STRONG",{});var y5t=s(e4e);d1r=r(y5t,"convbert"),y5t.forEach(t),c1r=r(uSe," \u2014 "),SW=n(uSe,"A",{href:!0});var L5t=s(SW);f1r=r(L5t,"TFConvBertForSequenceClassification"),L5t.forEach(t),m1r=r(uSe," (ConvBERT model)"),uSe.forEach(t),g1r=i(te),K7=n(te,"LI",{});var _Se=s(K7);o4e=n(_Se,"STRONG",{});var x5t=s(o4e);h1r=r(x5t,"ctrl"),x5t.forEach(t),p1r=r(_Se," \u2014 "),RW=n(_Se,"A",{href:!0});var $5t=s(RW);u1r=r($5t,"TFCTRLForSequenceClassification"),$5t.forEach(t),_1r=r(_Se," (CTRL model)"),_Se.forEach(t),b1r=i(te),Z7=n(te,"LI",{});var bSe=s(Z7);r4e=n(bSe,"STRONG",{});var k5t=s(r4e);v1r=r(k5t,"deberta"),k5t.forEach(t),F1r=r(bSe," \u2014 "),BW=n(bSe,"A",{href:!0});var S5t=s(BW);T1r=r(S5t,"TFDebertaForSequenceClassification"),S5t.forEach(t),M1r=r(bSe," (DeBERTa model)"),bSe.forEach(t),E1r=i(te),eM=n(te,"LI",{});var vSe=s(eM);t4e=n(vSe,"STRONG",{});var R5t=s(t4e);C1r=r(R5t,"deberta-v2"),R5t.forEach(t),w1r=r(vSe," \u2014 "),PW=n(vSe,"A",{href:!0});var B5t=s(PW);A1r=r(B5t,"TFDebertaV2ForSequenceClassification"),B5t.forEach(t),y1r=r(vSe," (DeBERTa-v2 model)"),vSe.forEach(t),L1r=i(te),oM=n(te,"LI",{});var FSe=s(oM);a4e=n(FSe,"STRONG",{});var P5t=s(a4e);x1r=r(P5t,"distilbert"),P5t.forEach(t),$1r=r(FSe," \u2014 "),IW=n(FSe,"A",{href:!0});var I5t=s(IW);k1r=r(I5t,"TFDistilBertForSequenceClassification"),I5t.forEach(t),S1r=r(FSe," (DistilBERT model)"),FSe.forEach(t),R1r=i(te),rM=n(te,"LI",{});var TSe=s(rM);n4e=n(TSe,"STRONG",{});var q5t=s(n4e);B1r=r(q5t,"electra"),q5t.forEach(t),P1r=r(TSe," \u2014 "),qW=n(TSe,"A",{href:!0});var N5t=s(qW);I1r=r(N5t,"TFElectraForSequenceClassification"),N5t.forEach(t),q1r=r(TSe," (ELECTRA model)"),TSe.forEach(t),N1r=i(te),tM=n(te,"LI",{});var MSe=s(tM);s4e=n(MSe,"STRONG",{});var j5t=s(s4e);j1r=r(j5t,"flaubert"),j5t.forEach(t),D1r=r(MSe," \u2014 "),NW=n(MSe,"A",{href:!0});var D5t=s(NW);G1r=r(D5t,"TFFlaubertForSequenceClassification"),D5t.forEach(t),O1r=r(MSe," (FlauBERT model)"),MSe.forEach(t),V1r=i(te),aM=n(te,"LI",{});var ESe=s(aM);l4e=n(ESe,"STRONG",{});var G5t=s(l4e);X1r=r(G5t,"funnel"),G5t.forEach(t),z1r=r(ESe," \u2014 "),jW=n(ESe,"A",{href:!0});var O5t=s(jW);Q1r=r(O5t,"TFFunnelForSequenceClassification"),O5t.forEach(t),W1r=r(ESe," (Funnel Transformer model)"),ESe.forEach(t),H1r=i(te),nM=n(te,"LI",{});var CSe=s(nM);i4e=n(CSe,"STRONG",{});var V5t=s(i4e);U1r=r(V5t,"gpt2"),V5t.forEach(t),J1r=r(CSe," \u2014 "),DW=n(CSe,"A",{href:!0});var X5t=s(DW);Y1r=r(X5t,"TFGPT2ForSequenceClassification"),X5t.forEach(t),K1r=r(CSe," (OpenAI GPT-2 model)"),CSe.forEach(t),Z1r=i(te),sM=n(te,"LI",{});var wSe=s(sM);d4e=n(wSe,"STRONG",{});var z5t=s(d4e);ebr=r(z5t,"gptj"),z5t.forEach(t),obr=r(wSe," \u2014 "),GW=n(wSe,"A",{href:!0});var Q5t=s(GW);rbr=r(Q5t,"TFGPTJForSequenceClassification"),Q5t.forEach(t),tbr=r(wSe," (GPT-J model)"),wSe.forEach(t),abr=i(te),lM=n(te,"LI",{});var ASe=s(lM);c4e=n(ASe,"STRONG",{});var W5t=s(c4e);nbr=r(W5t,"layoutlm"),W5t.forEach(t),sbr=r(ASe," \u2014 "),OW=n(ASe,"A",{href:!0});var H5t=s(OW);lbr=r(H5t,"TFLayoutLMForSequenceClassification"),H5t.forEach(t),ibr=r(ASe," (LayoutLM model)"),ASe.forEach(t),dbr=i(te),iM=n(te,"LI",{});var ySe=s(iM);f4e=n(ySe,"STRONG",{});var U5t=s(f4e);cbr=r(U5t,"longformer"),U5t.forEach(t),fbr=r(ySe," \u2014 "),VW=n(ySe,"A",{href:!0});var J5t=s(VW);mbr=r(J5t,"TFLongformerForSequenceClassification"),J5t.forEach(t),gbr=r(ySe," (Longformer model)"),ySe.forEach(t),hbr=i(te),dM=n(te,"LI",{});var LSe=s(dM);m4e=n(LSe,"STRONG",{});var Y5t=s(m4e);pbr=r(Y5t,"mobilebert"),Y5t.forEach(t),ubr=r(LSe," \u2014 "),XW=n(LSe,"A",{href:!0});var K5t=s(XW);_br=r(K5t,"TFMobileBertForSequenceClassification"),K5t.forEach(t),bbr=r(LSe," (MobileBERT model)"),LSe.forEach(t),vbr=i(te),cM=n(te,"LI",{});var xSe=s(cM);g4e=n(xSe,"STRONG",{});var Z5t=s(g4e);Fbr=r(Z5t,"mpnet"),Z5t.forEach(t),Tbr=r(xSe," \u2014 "),zW=n(xSe,"A",{href:!0});var evt=s(zW);Mbr=r(evt,"TFMPNetForSequenceClassification"),evt.forEach(t),Ebr=r(xSe," (MPNet model)"),xSe.forEach(t),Cbr=i(te),fM=n(te,"LI",{});var $Se=s(fM);h4e=n($Se,"STRONG",{});var ovt=s(h4e);wbr=r(ovt,"openai-gpt"),ovt.forEach(t),Abr=r($Se," \u2014 "),QW=n($Se,"A",{href:!0});var rvt=s(QW);ybr=r(rvt,"TFOpenAIGPTForSequenceClassification"),rvt.forEach(t),Lbr=r($Se," (OpenAI GPT model)"),$Se.forEach(t),xbr=i(te),mM=n(te,"LI",{});var kSe=s(mM);p4e=n(kSe,"STRONG",{});var tvt=s(p4e);$br=r(tvt,"rembert"),tvt.forEach(t),kbr=r(kSe," \u2014 "),WW=n(kSe,"A",{href:!0});var avt=s(WW);Sbr=r(avt,"TFRemBertForSequenceClassification"),avt.forEach(t),Rbr=r(kSe," (RemBERT model)"),kSe.forEach(t),Bbr=i(te),gM=n(te,"LI",{});var SSe=s(gM);u4e=n(SSe,"STRONG",{});var nvt=s(u4e);Pbr=r(nvt,"roberta"),nvt.forEach(t),Ibr=r(SSe," \u2014 "),HW=n(SSe,"A",{href:!0});var svt=s(HW);qbr=r(svt,"TFRobertaForSequenceClassification"),svt.forEach(t),Nbr=r(SSe," (RoBERTa model)"),SSe.forEach(t),jbr=i(te),hM=n(te,"LI",{});var RSe=s(hM);_4e=n(RSe,"STRONG",{});var lvt=s(_4e);Dbr=r(lvt,"roformer"),lvt.forEach(t),Gbr=r(RSe," \u2014 "),UW=n(RSe,"A",{href:!0});var ivt=s(UW);Obr=r(ivt,"TFRoFormerForSequenceClassification"),ivt.forEach(t),Vbr=r(RSe," (RoFormer model)"),RSe.forEach(t),Xbr=i(te),pM=n(te,"LI",{});var BSe=s(pM);b4e=n(BSe,"STRONG",{});var dvt=s(b4e);zbr=r(dvt,"tapas"),dvt.forEach(t),Qbr=r(BSe," \u2014 "),JW=n(BSe,"A",{href:!0});var cvt=s(JW);Wbr=r(cvt,"TFTapasForSequenceClassification"),cvt.forEach(t),Hbr=r(BSe," (TAPAS model)"),BSe.forEach(t),Ubr=i(te),uM=n(te,"LI",{});var PSe=s(uM);v4e=n(PSe,"STRONG",{});var fvt=s(v4e);Jbr=r(fvt,"transfo-xl"),fvt.forEach(t),Ybr=r(PSe," \u2014 "),YW=n(PSe,"A",{href:!0});var mvt=s(YW);Kbr=r(mvt,"TFTransfoXLForSequenceClassification"),mvt.forEach(t),Zbr=r(PSe," (Transformer-XL model)"),PSe.forEach(t),e4r=i(te),_M=n(te,"LI",{});var ISe=s(_M);F4e=n(ISe,"STRONG",{});var gvt=s(F4e);o4r=r(gvt,"xlm"),gvt.forEach(t),r4r=r(ISe," \u2014 "),KW=n(ISe,"A",{href:!0});var hvt=s(KW);t4r=r(hvt,"TFXLMForSequenceClassification"),hvt.forEach(t),a4r=r(ISe," (XLM model)"),ISe.forEach(t),n4r=i(te),bM=n(te,"LI",{});var qSe=s(bM);T4e=n(qSe,"STRONG",{});var pvt=s(T4e);s4r=r(pvt,"xlm-roberta"),pvt.forEach(t),l4r=r(qSe," \u2014 "),ZW=n(qSe,"A",{href:!0});var uvt=s(ZW);i4r=r(uvt,"TFXLMRobertaForSequenceClassification"),uvt.forEach(t),d4r=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),c4r=i(te),vM=n(te,"LI",{});var NSe=s(vM);M4e=n(NSe,"STRONG",{});var _vt=s(M4e);f4r=r(_vt,"xlnet"),_vt.forEach(t),m4r=r(NSe," \u2014 "),eH=n(NSe,"A",{href:!0});var bvt=s(eH);g4r=r(bvt,"TFXLNetForSequenceClassification"),bvt.forEach(t),h4r=r(NSe," (XLNet model)"),NSe.forEach(t),te.forEach(t),p4r=i(El),T(FM.$$.fragment,El),El.forEach(t),Ml.forEach(t),dqe=i(f),sc=n(f,"H2",{class:!0});var pje=s(sc);TM=n(pje,"A",{id:!0,class:!0,href:!0});var vvt=s(TM);E4e=n(vvt,"SPAN",{});var Fvt=s(E4e);T(g8.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),u4r=i(pje),C4e=n(pje,"SPAN",{});var Tvt=s(C4e);_4r=r(Tvt,"TFAutoModelForMultipleChoice"),Tvt.forEach(t),pje.forEach(t),cqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(h8.$$.fragment,Cl),b4r=i(Cl),lc=n(Cl,"P",{});var bZ=s(lc);v4r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oH=n(bZ,"A",{href:!0});var Mvt=s(oH);F4r=r(Mvt,"from_pretrained()"),Mvt.forEach(t),T4r=r(bZ," class method or the "),rH=n(bZ,"A",{href:!0});var Evt=s(rH);M4r=r(Evt,"from_config()"),Evt.forEach(t),E4r=r(bZ,` class
method.`),bZ.forEach(t),C4r=i(Cl),p8=n(Cl,"P",{});var uje=s(p8);w4r=r(uje,"This class cannot be instantiated directly using "),w4e=n(uje,"CODE",{});var Cvt=s(w4e);A4r=r(Cvt,"__init__()"),Cvt.forEach(t),y4r=r(uje," (throws an error)."),uje.forEach(t),L4r=i(Cl),St=n(Cl,"DIV",{class:!0});var d6=s(St);T(u8.$$.fragment,d6),x4r=i(d6),A4e=n(d6,"P",{});var wvt=s(A4e);$4r=r(wvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wvt.forEach(t),k4r=i(d6),ic=n(d6,"P",{});var vZ=s(ic);S4r=r(vZ,`Note:
Loading a model from its configuration file does `),y4e=n(vZ,"STRONG",{});var Avt=s(y4e);R4r=r(Avt,"not"),Avt.forEach(t),B4r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(vZ,"A",{href:!0});var yvt=s(tH);P4r=r(yvt,"from_pretrained()"),yvt.forEach(t),I4r=r(vZ," to load the model weights."),vZ.forEach(t),q4r=i(d6),T(MM.$$.fragment,d6),d6.forEach(t),N4r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(_8.$$.fragment,wl),j4r=i(wl),L4e=n(wl,"P",{});var Lvt=s(L4e);D4r=r(Lvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lvt.forEach(t),G4r=i(wl),nn=n(wl,"P",{});var c6=s(nn);O4r=r(c6,"The model class to instantiate is selected based on the "),x4e=n(c6,"CODE",{});var xvt=s(x4e);V4r=r(xvt,"model_type"),xvt.forEach(t),X4r=r(c6,` property of the config object (either
passed as an argument or loaded from `),$4e=n(c6,"CODE",{});var $vt=s($4e);z4r=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),Q4r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(c6,"CODE",{});var kvt=s(k4e);W4r=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),H4r=r(c6,":"),c6.forEach(t),U4r=i(wl),pe=n(wl,"UL",{});var _e=s(pe);EM=n(_e,"LI",{});var jSe=s(EM);S4e=n(jSe,"STRONG",{});var Svt=s(S4e);J4r=r(Svt,"albert"),Svt.forEach(t),Y4r=r(jSe," \u2014 "),aH=n(jSe,"A",{href:!0});var Rvt=s(aH);K4r=r(Rvt,"TFAlbertForMultipleChoice"),Rvt.forEach(t),Z4r=r(jSe," (ALBERT model)"),jSe.forEach(t),e5r=i(_e),CM=n(_e,"LI",{});var DSe=s(CM);R4e=n(DSe,"STRONG",{});var Bvt=s(R4e);o5r=r(Bvt,"bert"),Bvt.forEach(t),r5r=r(DSe," \u2014 "),nH=n(DSe,"A",{href:!0});var Pvt=s(nH);t5r=r(Pvt,"TFBertForMultipleChoice"),Pvt.forEach(t),a5r=r(DSe," (BERT model)"),DSe.forEach(t),n5r=i(_e),wM=n(_e,"LI",{});var GSe=s(wM);B4e=n(GSe,"STRONG",{});var Ivt=s(B4e);s5r=r(Ivt,"camembert"),Ivt.forEach(t),l5r=r(GSe," \u2014 "),sH=n(GSe,"A",{href:!0});var qvt=s(sH);i5r=r(qvt,"TFCamembertForMultipleChoice"),qvt.forEach(t),d5r=r(GSe," (CamemBERT model)"),GSe.forEach(t),c5r=i(_e),AM=n(_e,"LI",{});var OSe=s(AM);P4e=n(OSe,"STRONG",{});var Nvt=s(P4e);f5r=r(Nvt,"convbert"),Nvt.forEach(t),m5r=r(OSe," \u2014 "),lH=n(OSe,"A",{href:!0});var jvt=s(lH);g5r=r(jvt,"TFConvBertForMultipleChoice"),jvt.forEach(t),h5r=r(OSe," (ConvBERT model)"),OSe.forEach(t),p5r=i(_e),yM=n(_e,"LI",{});var VSe=s(yM);I4e=n(VSe,"STRONG",{});var Dvt=s(I4e);u5r=r(Dvt,"distilbert"),Dvt.forEach(t),_5r=r(VSe," \u2014 "),iH=n(VSe,"A",{href:!0});var Gvt=s(iH);b5r=r(Gvt,"TFDistilBertForMultipleChoice"),Gvt.forEach(t),v5r=r(VSe," (DistilBERT model)"),VSe.forEach(t),F5r=i(_e),LM=n(_e,"LI",{});var XSe=s(LM);q4e=n(XSe,"STRONG",{});var Ovt=s(q4e);T5r=r(Ovt,"electra"),Ovt.forEach(t),M5r=r(XSe," \u2014 "),dH=n(XSe,"A",{href:!0});var Vvt=s(dH);E5r=r(Vvt,"TFElectraForMultipleChoice"),Vvt.forEach(t),C5r=r(XSe," (ELECTRA model)"),XSe.forEach(t),w5r=i(_e),xM=n(_e,"LI",{});var zSe=s(xM);N4e=n(zSe,"STRONG",{});var Xvt=s(N4e);A5r=r(Xvt,"flaubert"),Xvt.forEach(t),y5r=r(zSe," \u2014 "),cH=n(zSe,"A",{href:!0});var zvt=s(cH);L5r=r(zvt,"TFFlaubertForMultipleChoice"),zvt.forEach(t),x5r=r(zSe," (FlauBERT model)"),zSe.forEach(t),$5r=i(_e),$M=n(_e,"LI",{});var QSe=s($M);j4e=n(QSe,"STRONG",{});var Qvt=s(j4e);k5r=r(Qvt,"funnel"),Qvt.forEach(t),S5r=r(QSe," \u2014 "),fH=n(QSe,"A",{href:!0});var Wvt=s(fH);R5r=r(Wvt,"TFFunnelForMultipleChoice"),Wvt.forEach(t),B5r=r(QSe," (Funnel Transformer model)"),QSe.forEach(t),P5r=i(_e),kM=n(_e,"LI",{});var WSe=s(kM);D4e=n(WSe,"STRONG",{});var Hvt=s(D4e);I5r=r(Hvt,"longformer"),Hvt.forEach(t),q5r=r(WSe," \u2014 "),mH=n(WSe,"A",{href:!0});var Uvt=s(mH);N5r=r(Uvt,"TFLongformerForMultipleChoice"),Uvt.forEach(t),j5r=r(WSe," (Longformer model)"),WSe.forEach(t),D5r=i(_e),SM=n(_e,"LI",{});var HSe=s(SM);G4e=n(HSe,"STRONG",{});var Jvt=s(G4e);G5r=r(Jvt,"mobilebert"),Jvt.forEach(t),O5r=r(HSe," \u2014 "),gH=n(HSe,"A",{href:!0});var Yvt=s(gH);V5r=r(Yvt,"TFMobileBertForMultipleChoice"),Yvt.forEach(t),X5r=r(HSe," (MobileBERT model)"),HSe.forEach(t),z5r=i(_e),RM=n(_e,"LI",{});var USe=s(RM);O4e=n(USe,"STRONG",{});var Kvt=s(O4e);Q5r=r(Kvt,"mpnet"),Kvt.forEach(t),W5r=r(USe," \u2014 "),hH=n(USe,"A",{href:!0});var Zvt=s(hH);H5r=r(Zvt,"TFMPNetForMultipleChoice"),Zvt.forEach(t),U5r=r(USe," (MPNet model)"),USe.forEach(t),J5r=i(_e),BM=n(_e,"LI",{});var JSe=s(BM);V4e=n(JSe,"STRONG",{});var eFt=s(V4e);Y5r=r(eFt,"rembert"),eFt.forEach(t),K5r=r(JSe," \u2014 "),pH=n(JSe,"A",{href:!0});var oFt=s(pH);Z5r=r(oFt,"TFRemBertForMultipleChoice"),oFt.forEach(t),evr=r(JSe," (RemBERT model)"),JSe.forEach(t),ovr=i(_e),PM=n(_e,"LI",{});var YSe=s(PM);X4e=n(YSe,"STRONG",{});var rFt=s(X4e);rvr=r(rFt,"roberta"),rFt.forEach(t),tvr=r(YSe," \u2014 "),uH=n(YSe,"A",{href:!0});var tFt=s(uH);avr=r(tFt,"TFRobertaForMultipleChoice"),tFt.forEach(t),nvr=r(YSe," (RoBERTa model)"),YSe.forEach(t),svr=i(_e),IM=n(_e,"LI",{});var KSe=s(IM);z4e=n(KSe,"STRONG",{});var aFt=s(z4e);lvr=r(aFt,"roformer"),aFt.forEach(t),ivr=r(KSe," \u2014 "),_H=n(KSe,"A",{href:!0});var nFt=s(_H);dvr=r(nFt,"TFRoFormerForMultipleChoice"),nFt.forEach(t),cvr=r(KSe," (RoFormer model)"),KSe.forEach(t),fvr=i(_e),qM=n(_e,"LI",{});var ZSe=s(qM);Q4e=n(ZSe,"STRONG",{});var sFt=s(Q4e);mvr=r(sFt,"xlm"),sFt.forEach(t),gvr=r(ZSe," \u2014 "),bH=n(ZSe,"A",{href:!0});var lFt=s(bH);hvr=r(lFt,"TFXLMForMultipleChoice"),lFt.forEach(t),pvr=r(ZSe," (XLM model)"),ZSe.forEach(t),uvr=i(_e),NM=n(_e,"LI",{});var eRe=s(NM);W4e=n(eRe,"STRONG",{});var iFt=s(W4e);_vr=r(iFt,"xlm-roberta"),iFt.forEach(t),bvr=r(eRe," \u2014 "),vH=n(eRe,"A",{href:!0});var dFt=s(vH);vvr=r(dFt,"TFXLMRobertaForMultipleChoice"),dFt.forEach(t),Fvr=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),Tvr=i(_e),jM=n(_e,"LI",{});var oRe=s(jM);H4e=n(oRe,"STRONG",{});var cFt=s(H4e);Mvr=r(cFt,"xlnet"),cFt.forEach(t),Evr=r(oRe," \u2014 "),FH=n(oRe,"A",{href:!0});var fFt=s(FH);Cvr=r(fFt,"TFXLNetForMultipleChoice"),fFt.forEach(t),wvr=r(oRe," (XLNet model)"),oRe.forEach(t),_e.forEach(t),Avr=i(wl),T(DM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),fqe=i(f),dc=n(f,"H2",{class:!0});var _je=s(dc);GM=n(_je,"A",{id:!0,class:!0,href:!0});var mFt=s(GM);U4e=n(mFt,"SPAN",{});var gFt=s(U4e);T(b8.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),yvr=i(_je),J4e=n(_je,"SPAN",{});var hFt=s(J4e);Lvr=r(hFt,"TFAutoModelForNextSentencePrediction"),hFt.forEach(t),_je.forEach(t),mqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(v8.$$.fragment,Al),xvr=i(Al),cc=n(Al,"P",{});var FZ=s(cc);$vr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TH=n(FZ,"A",{href:!0});var pFt=s(TH);kvr=r(pFt,"from_pretrained()"),pFt.forEach(t),Svr=r(FZ," class method or the "),MH=n(FZ,"A",{href:!0});var uFt=s(MH);Rvr=r(uFt,"from_config()"),uFt.forEach(t),Bvr=r(FZ,` class
method.`),FZ.forEach(t),Pvr=i(Al),F8=n(Al,"P",{});var bje=s(F8);Ivr=r(bje,"This class cannot be instantiated directly using "),Y4e=n(bje,"CODE",{});var _Ft=s(Y4e);qvr=r(_Ft,"__init__()"),_Ft.forEach(t),Nvr=r(bje," (throws an error)."),bje.forEach(t),jvr=i(Al),Rt=n(Al,"DIV",{class:!0});var f6=s(Rt);T(T8.$$.fragment,f6),Dvr=i(f6),K4e=n(f6,"P",{});var bFt=s(K4e);Gvr=r(bFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bFt.forEach(t),Ovr=i(f6),fc=n(f6,"P",{});var TZ=s(fc);Vvr=r(TZ,`Note:
Loading a model from its configuration file does `),Z4e=n(TZ,"STRONG",{});var vFt=s(Z4e);Xvr=r(vFt,"not"),vFt.forEach(t),zvr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(TZ,"A",{href:!0});var FFt=s(EH);Qvr=r(FFt,"from_pretrained()"),FFt.forEach(t),Wvr=r(TZ," to load the model weights."),TZ.forEach(t),Hvr=i(f6),T(OM.$$.fragment,f6),f6.forEach(t),Uvr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(M8.$$.fragment,yl),Jvr=i(yl),e5e=n(yl,"P",{});var TFt=s(e5e);Yvr=r(TFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TFt.forEach(t),Kvr=i(yl),sn=n(yl,"P",{});var m6=s(sn);Zvr=r(m6,"The model class to instantiate is selected based on the "),o5e=n(m6,"CODE",{});var MFt=s(o5e);eFr=r(MFt,"model_type"),MFt.forEach(t),oFr=r(m6,` property of the config object (either
passed as an argument or loaded from `),r5e=n(m6,"CODE",{});var EFt=s(r5e);rFr=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),tFr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(m6,"CODE",{});var CFt=s(t5e);aFr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),nFr=r(m6,":"),m6.forEach(t),sFr=i(yl),E8=n(yl,"UL",{});var vje=s(E8);VM=n(vje,"LI",{});var rRe=s(VM);a5e=n(rRe,"STRONG",{});var wFt=s(a5e);lFr=r(wFt,"bert"),wFt.forEach(t),iFr=r(rRe," \u2014 "),CH=n(rRe,"A",{href:!0});var AFt=s(CH);dFr=r(AFt,"TFBertForNextSentencePrediction"),AFt.forEach(t),cFr=r(rRe," (BERT model)"),rRe.forEach(t),fFr=i(vje),XM=n(vje,"LI",{});var tRe=s(XM);n5e=n(tRe,"STRONG",{});var yFt=s(n5e);mFr=r(yFt,"mobilebert"),yFt.forEach(t),gFr=r(tRe," \u2014 "),wH=n(tRe,"A",{href:!0});var LFt=s(wH);hFr=r(LFt,"TFMobileBertForNextSentencePrediction"),LFt.forEach(t),pFr=r(tRe," (MobileBERT model)"),tRe.forEach(t),vje.forEach(t),uFr=i(yl),T(zM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),gqe=i(f),mc=n(f,"H2",{class:!0});var Fje=s(mc);QM=n(Fje,"A",{id:!0,class:!0,href:!0});var xFt=s(QM);s5e=n(xFt,"SPAN",{});var $Ft=s(s5e);T(C8.$$.fragment,$Ft),$Ft.forEach(t),xFt.forEach(t),_Fr=i(Fje),l5e=n(Fje,"SPAN",{});var kFt=s(l5e);bFr=r(kFt,"TFAutoModelForTableQuestionAnswering"),kFt.forEach(t),Fje.forEach(t),hqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(w8.$$.fragment,Ll),vFr=i(Ll),gc=n(Ll,"P",{});var MZ=s(gc);FFr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AH=n(MZ,"A",{href:!0});var SFt=s(AH);TFr=r(SFt,"from_pretrained()"),SFt.forEach(t),MFr=r(MZ," class method or the "),yH=n(MZ,"A",{href:!0});var RFt=s(yH);EFr=r(RFt,"from_config()"),RFt.forEach(t),CFr=r(MZ,` class
method.`),MZ.forEach(t),wFr=i(Ll),A8=n(Ll,"P",{});var Tje=s(A8);AFr=r(Tje,"This class cannot be instantiated directly using "),i5e=n(Tje,"CODE",{});var BFt=s(i5e);yFr=r(BFt,"__init__()"),BFt.forEach(t),LFr=r(Tje," (throws an error)."),Tje.forEach(t),xFr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var g6=s(Bt);T(y8.$$.fragment,g6),$Fr=i(g6),d5e=n(g6,"P",{});var PFt=s(d5e);kFr=r(PFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),PFt.forEach(t),SFr=i(g6),hc=n(g6,"P",{});var EZ=s(hc);RFr=r(EZ,`Note:
Loading a model from its configuration file does `),c5e=n(EZ,"STRONG",{});var IFt=s(c5e);BFr=r(IFt,"not"),IFt.forEach(t),PFr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(EZ,"A",{href:!0});var qFt=s(LH);IFr=r(qFt,"from_pretrained()"),qFt.forEach(t),qFr=r(EZ," to load the model weights."),EZ.forEach(t),NFr=i(g6),T(WM.$$.fragment,g6),g6.forEach(t),jFr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(L8.$$.fragment,xl),DFr=i(xl),f5e=n(xl,"P",{});var NFt=s(f5e);GFr=r(NFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NFt.forEach(t),OFr=i(xl),ln=n(xl,"P",{});var h6=s(ln);VFr=r(h6,"The model class to instantiate is selected based on the "),m5e=n(h6,"CODE",{});var jFt=s(m5e);XFr=r(jFt,"model_type"),jFt.forEach(t),zFr=r(h6,` property of the config object (either
passed as an argument or loaded from `),g5e=n(h6,"CODE",{});var DFt=s(g5e);QFr=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),WFr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(h6,"CODE",{});var GFt=s(h5e);HFr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),UFr=r(h6,":"),h6.forEach(t),JFr=i(xl),p5e=n(xl,"UL",{});var OFt=s(p5e);HM=n(OFt,"LI",{});var aRe=s(HM);u5e=n(aRe,"STRONG",{});var VFt=s(u5e);YFr=r(VFt,"tapas"),VFt.forEach(t),KFr=r(aRe," \u2014 "),xH=n(aRe,"A",{href:!0});var XFt=s(xH);ZFr=r(XFt,"TFTapasForQuestionAnswering"),XFt.forEach(t),eTr=r(aRe," (TAPAS model)"),aRe.forEach(t),OFt.forEach(t),oTr=i(xl),T(UM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),pqe=i(f),pc=n(f,"H2",{class:!0});var Mje=s(pc);JM=n(Mje,"A",{id:!0,class:!0,href:!0});var zFt=s(JM);_5e=n(zFt,"SPAN",{});var QFt=s(_5e);T(x8.$$.fragment,QFt),QFt.forEach(t),zFt.forEach(t),rTr=i(Mje),b5e=n(Mje,"SPAN",{});var WFt=s(b5e);tTr=r(WFt,"TFAutoModelForTokenClassification"),WFt.forEach(t),Mje.forEach(t),uqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T($8.$$.fragment,$l),aTr=i($l),uc=n($l,"P",{});var CZ=s(uc);nTr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$H=n(CZ,"A",{href:!0});var HFt=s($H);sTr=r(HFt,"from_pretrained()"),HFt.forEach(t),lTr=r(CZ," class method or the "),kH=n(CZ,"A",{href:!0});var UFt=s(kH);iTr=r(UFt,"from_config()"),UFt.forEach(t),dTr=r(CZ,` class
method.`),CZ.forEach(t),cTr=i($l),k8=n($l,"P",{});var Eje=s(k8);fTr=r(Eje,"This class cannot be instantiated directly using "),v5e=n(Eje,"CODE",{});var JFt=s(v5e);mTr=r(JFt,"__init__()"),JFt.forEach(t),gTr=r(Eje," (throws an error)."),Eje.forEach(t),hTr=i($l),Pt=n($l,"DIV",{class:!0});var p6=s(Pt);T(S8.$$.fragment,p6),pTr=i(p6),F5e=n(p6,"P",{});var YFt=s(F5e);uTr=r(YFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YFt.forEach(t),_Tr=i(p6),_c=n(p6,"P",{});var wZ=s(_c);bTr=r(wZ,`Note:
Loading a model from its configuration file does `),T5e=n(wZ,"STRONG",{});var KFt=s(T5e);vTr=r(KFt,"not"),KFt.forEach(t),FTr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(wZ,"A",{href:!0});var ZFt=s(SH);TTr=r(ZFt,"from_pretrained()"),ZFt.forEach(t),MTr=r(wZ," to load the model weights."),wZ.forEach(t),ETr=i(p6),T(YM.$$.fragment,p6),p6.forEach(t),CTr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(R8.$$.fragment,kl),wTr=i(kl),M5e=n(kl,"P",{});var eTt=s(M5e);ATr=r(eTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eTt.forEach(t),yTr=i(kl),dn=n(kl,"P",{});var u6=s(dn);LTr=r(u6,"The model class to instantiate is selected based on the "),E5e=n(u6,"CODE",{});var oTt=s(E5e);xTr=r(oTt,"model_type"),oTt.forEach(t),$Tr=r(u6,` property of the config object (either
passed as an argument or loaded from `),C5e=n(u6,"CODE",{});var rTt=s(C5e);kTr=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),STr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(u6,"CODE",{});var tTt=s(w5e);RTr=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),BTr=r(u6,":"),u6.forEach(t),PTr=i(kl),de=n(kl,"UL",{});var me=s(de);KM=n(me,"LI",{});var nRe=s(KM);A5e=n(nRe,"STRONG",{});var aTt=s(A5e);ITr=r(aTt,"albert"),aTt.forEach(t),qTr=r(nRe," \u2014 "),RH=n(nRe,"A",{href:!0});var nTt=s(RH);NTr=r(nTt,"TFAlbertForTokenClassification"),nTt.forEach(t),jTr=r(nRe," (ALBERT model)"),nRe.forEach(t),DTr=i(me),ZM=n(me,"LI",{});var sRe=s(ZM);y5e=n(sRe,"STRONG",{});var sTt=s(y5e);GTr=r(sTt,"bert"),sTt.forEach(t),OTr=r(sRe," \u2014 "),BH=n(sRe,"A",{href:!0});var lTt=s(BH);VTr=r(lTt,"TFBertForTokenClassification"),lTt.forEach(t),XTr=r(sRe," (BERT model)"),sRe.forEach(t),zTr=i(me),eE=n(me,"LI",{});var lRe=s(eE);L5e=n(lRe,"STRONG",{});var iTt=s(L5e);QTr=r(iTt,"camembert"),iTt.forEach(t),WTr=r(lRe," \u2014 "),PH=n(lRe,"A",{href:!0});var dTt=s(PH);HTr=r(dTt,"TFCamembertForTokenClassification"),dTt.forEach(t),UTr=r(lRe," (CamemBERT model)"),lRe.forEach(t),JTr=i(me),oE=n(me,"LI",{});var iRe=s(oE);x5e=n(iRe,"STRONG",{});var cTt=s(x5e);YTr=r(cTt,"convbert"),cTt.forEach(t),KTr=r(iRe," \u2014 "),IH=n(iRe,"A",{href:!0});var fTt=s(IH);ZTr=r(fTt,"TFConvBertForTokenClassification"),fTt.forEach(t),e7r=r(iRe," (ConvBERT model)"),iRe.forEach(t),o7r=i(me),rE=n(me,"LI",{});var dRe=s(rE);$5e=n(dRe,"STRONG",{});var mTt=s($5e);r7r=r(mTt,"deberta"),mTt.forEach(t),t7r=r(dRe," \u2014 "),qH=n(dRe,"A",{href:!0});var gTt=s(qH);a7r=r(gTt,"TFDebertaForTokenClassification"),gTt.forEach(t),n7r=r(dRe," (DeBERTa model)"),dRe.forEach(t),s7r=i(me),tE=n(me,"LI",{});var cRe=s(tE);k5e=n(cRe,"STRONG",{});var hTt=s(k5e);l7r=r(hTt,"deberta-v2"),hTt.forEach(t),i7r=r(cRe," \u2014 "),NH=n(cRe,"A",{href:!0});var pTt=s(NH);d7r=r(pTt,"TFDebertaV2ForTokenClassification"),pTt.forEach(t),c7r=r(cRe," (DeBERTa-v2 model)"),cRe.forEach(t),f7r=i(me),aE=n(me,"LI",{});var fRe=s(aE);S5e=n(fRe,"STRONG",{});var uTt=s(S5e);m7r=r(uTt,"distilbert"),uTt.forEach(t),g7r=r(fRe," \u2014 "),jH=n(fRe,"A",{href:!0});var _Tt=s(jH);h7r=r(_Tt,"TFDistilBertForTokenClassification"),_Tt.forEach(t),p7r=r(fRe," (DistilBERT model)"),fRe.forEach(t),u7r=i(me),nE=n(me,"LI",{});var mRe=s(nE);R5e=n(mRe,"STRONG",{});var bTt=s(R5e);_7r=r(bTt,"electra"),bTt.forEach(t),b7r=r(mRe," \u2014 "),DH=n(mRe,"A",{href:!0});var vTt=s(DH);v7r=r(vTt,"TFElectraForTokenClassification"),vTt.forEach(t),F7r=r(mRe," (ELECTRA model)"),mRe.forEach(t),T7r=i(me),sE=n(me,"LI",{});var gRe=s(sE);B5e=n(gRe,"STRONG",{});var FTt=s(B5e);M7r=r(FTt,"flaubert"),FTt.forEach(t),E7r=r(gRe," \u2014 "),GH=n(gRe,"A",{href:!0});var TTt=s(GH);C7r=r(TTt,"TFFlaubertForTokenClassification"),TTt.forEach(t),w7r=r(gRe," (FlauBERT model)"),gRe.forEach(t),A7r=i(me),lE=n(me,"LI",{});var hRe=s(lE);P5e=n(hRe,"STRONG",{});var MTt=s(P5e);y7r=r(MTt,"funnel"),MTt.forEach(t),L7r=r(hRe," \u2014 "),OH=n(hRe,"A",{href:!0});var ETt=s(OH);x7r=r(ETt,"TFFunnelForTokenClassification"),ETt.forEach(t),$7r=r(hRe," (Funnel Transformer model)"),hRe.forEach(t),k7r=i(me),iE=n(me,"LI",{});var pRe=s(iE);I5e=n(pRe,"STRONG",{});var CTt=s(I5e);S7r=r(CTt,"layoutlm"),CTt.forEach(t),R7r=r(pRe," \u2014 "),VH=n(pRe,"A",{href:!0});var wTt=s(VH);B7r=r(wTt,"TFLayoutLMForTokenClassification"),wTt.forEach(t),P7r=r(pRe," (LayoutLM model)"),pRe.forEach(t),I7r=i(me),dE=n(me,"LI",{});var uRe=s(dE);q5e=n(uRe,"STRONG",{});var ATt=s(q5e);q7r=r(ATt,"longformer"),ATt.forEach(t),N7r=r(uRe," \u2014 "),XH=n(uRe,"A",{href:!0});var yTt=s(XH);j7r=r(yTt,"TFLongformerForTokenClassification"),yTt.forEach(t),D7r=r(uRe," (Longformer model)"),uRe.forEach(t),G7r=i(me),cE=n(me,"LI",{});var _Re=s(cE);N5e=n(_Re,"STRONG",{});var LTt=s(N5e);O7r=r(LTt,"mobilebert"),LTt.forEach(t),V7r=r(_Re," \u2014 "),zH=n(_Re,"A",{href:!0});var xTt=s(zH);X7r=r(xTt,"TFMobileBertForTokenClassification"),xTt.forEach(t),z7r=r(_Re," (MobileBERT model)"),_Re.forEach(t),Q7r=i(me),fE=n(me,"LI",{});var bRe=s(fE);j5e=n(bRe,"STRONG",{});var $Tt=s(j5e);W7r=r($Tt,"mpnet"),$Tt.forEach(t),H7r=r(bRe," \u2014 "),QH=n(bRe,"A",{href:!0});var kTt=s(QH);U7r=r(kTt,"TFMPNetForTokenClassification"),kTt.forEach(t),J7r=r(bRe," (MPNet model)"),bRe.forEach(t),Y7r=i(me),mE=n(me,"LI",{});var vRe=s(mE);D5e=n(vRe,"STRONG",{});var STt=s(D5e);K7r=r(STt,"rembert"),STt.forEach(t),Z7r=r(vRe," \u2014 "),WH=n(vRe,"A",{href:!0});var RTt=s(WH);eMr=r(RTt,"TFRemBertForTokenClassification"),RTt.forEach(t),oMr=r(vRe," (RemBERT model)"),vRe.forEach(t),rMr=i(me),gE=n(me,"LI",{});var FRe=s(gE);G5e=n(FRe,"STRONG",{});var BTt=s(G5e);tMr=r(BTt,"roberta"),BTt.forEach(t),aMr=r(FRe," \u2014 "),HH=n(FRe,"A",{href:!0});var PTt=s(HH);nMr=r(PTt,"TFRobertaForTokenClassification"),PTt.forEach(t),sMr=r(FRe," (RoBERTa model)"),FRe.forEach(t),lMr=i(me),hE=n(me,"LI",{});var TRe=s(hE);O5e=n(TRe,"STRONG",{});var ITt=s(O5e);iMr=r(ITt,"roformer"),ITt.forEach(t),dMr=r(TRe," \u2014 "),UH=n(TRe,"A",{href:!0});var qTt=s(UH);cMr=r(qTt,"TFRoFormerForTokenClassification"),qTt.forEach(t),fMr=r(TRe," (RoFormer model)"),TRe.forEach(t),mMr=i(me),pE=n(me,"LI",{});var MRe=s(pE);V5e=n(MRe,"STRONG",{});var NTt=s(V5e);gMr=r(NTt,"xlm"),NTt.forEach(t),hMr=r(MRe," \u2014 "),JH=n(MRe,"A",{href:!0});var jTt=s(JH);pMr=r(jTt,"TFXLMForTokenClassification"),jTt.forEach(t),uMr=r(MRe," (XLM model)"),MRe.forEach(t),_Mr=i(me),uE=n(me,"LI",{});var ERe=s(uE);X5e=n(ERe,"STRONG",{});var DTt=s(X5e);bMr=r(DTt,"xlm-roberta"),DTt.forEach(t),vMr=r(ERe," \u2014 "),YH=n(ERe,"A",{href:!0});var GTt=s(YH);FMr=r(GTt,"TFXLMRobertaForTokenClassification"),GTt.forEach(t),TMr=r(ERe," (XLM-RoBERTa model)"),ERe.forEach(t),MMr=i(me),_E=n(me,"LI",{});var CRe=s(_E);z5e=n(CRe,"STRONG",{});var OTt=s(z5e);EMr=r(OTt,"xlnet"),OTt.forEach(t),CMr=r(CRe," \u2014 "),KH=n(CRe,"A",{href:!0});var VTt=s(KH);wMr=r(VTt,"TFXLNetForTokenClassification"),VTt.forEach(t),AMr=r(CRe," (XLNet model)"),CRe.forEach(t),me.forEach(t),yMr=i(kl),T(bE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),_qe=i(f),bc=n(f,"H2",{class:!0});var Cje=s(bc);vE=n(Cje,"A",{id:!0,class:!0,href:!0});var XTt=s(vE);Q5e=n(XTt,"SPAN",{});var zTt=s(Q5e);T(B8.$$.fragment,zTt),zTt.forEach(t),XTt.forEach(t),LMr=i(Cje),W5e=n(Cje,"SPAN",{});var QTt=s(W5e);xMr=r(QTt,"TFAutoModelForQuestionAnswering"),QTt.forEach(t),Cje.forEach(t),bqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(P8.$$.fragment,Sl),$Mr=i(Sl),vc=n(Sl,"P",{});var AZ=s(vc);kMr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZH=n(AZ,"A",{href:!0});var WTt=s(ZH);SMr=r(WTt,"from_pretrained()"),WTt.forEach(t),RMr=r(AZ," class method or the "),eU=n(AZ,"A",{href:!0});var HTt=s(eU);BMr=r(HTt,"from_config()"),HTt.forEach(t),PMr=r(AZ,` class
method.`),AZ.forEach(t),IMr=i(Sl),I8=n(Sl,"P",{});var wje=s(I8);qMr=r(wje,"This class cannot be instantiated directly using "),H5e=n(wje,"CODE",{});var UTt=s(H5e);NMr=r(UTt,"__init__()"),UTt.forEach(t),jMr=r(wje," (throws an error)."),wje.forEach(t),DMr=i(Sl),It=n(Sl,"DIV",{class:!0});var _6=s(It);T(q8.$$.fragment,_6),GMr=i(_6),U5e=n(_6,"P",{});var JTt=s(U5e);OMr=r(JTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JTt.forEach(t),VMr=i(_6),Fc=n(_6,"P",{});var yZ=s(Fc);XMr=r(yZ,`Note:
Loading a model from its configuration file does `),J5e=n(yZ,"STRONG",{});var YTt=s(J5e);zMr=r(YTt,"not"),YTt.forEach(t),QMr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(yZ,"A",{href:!0});var KTt=s(oU);WMr=r(KTt,"from_pretrained()"),KTt.forEach(t),HMr=r(yZ," to load the model weights."),yZ.forEach(t),UMr=i(_6),T(FE.$$.fragment,_6),_6.forEach(t),JMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(N8.$$.fragment,Rl),YMr=i(Rl),Y5e=n(Rl,"P",{});var ZTt=s(Y5e);KMr=r(ZTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZTt.forEach(t),ZMr=i(Rl),cn=n(Rl,"P",{});var b6=s(cn);eEr=r(b6,"The model class to instantiate is selected based on the "),K5e=n(b6,"CODE",{});var e7t=s(K5e);oEr=r(e7t,"model_type"),e7t.forEach(t),rEr=r(b6,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(b6,"CODE",{});var o7t=s(Z5e);tEr=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),aEr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(b6,"CODE",{});var r7t=s(eve);nEr=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),sEr=r(b6,":"),b6.forEach(t),lEr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);TE=n(ge,"LI",{});var wRe=s(TE);ove=n(wRe,"STRONG",{});var t7t=s(ove);iEr=r(t7t,"albert"),t7t.forEach(t),dEr=r(wRe," \u2014 "),rU=n(wRe,"A",{href:!0});var a7t=s(rU);cEr=r(a7t,"TFAlbertForQuestionAnswering"),a7t.forEach(t),fEr=r(wRe," (ALBERT model)"),wRe.forEach(t),mEr=i(ge),ME=n(ge,"LI",{});var ARe=s(ME);rve=n(ARe,"STRONG",{});var n7t=s(rve);gEr=r(n7t,"bert"),n7t.forEach(t),hEr=r(ARe," \u2014 "),tU=n(ARe,"A",{href:!0});var s7t=s(tU);pEr=r(s7t,"TFBertForQuestionAnswering"),s7t.forEach(t),uEr=r(ARe," (BERT model)"),ARe.forEach(t),_Er=i(ge),EE=n(ge,"LI",{});var yRe=s(EE);tve=n(yRe,"STRONG",{});var l7t=s(tve);bEr=r(l7t,"camembert"),l7t.forEach(t),vEr=r(yRe," \u2014 "),aU=n(yRe,"A",{href:!0});var i7t=s(aU);FEr=r(i7t,"TFCamembertForQuestionAnswering"),i7t.forEach(t),TEr=r(yRe," (CamemBERT model)"),yRe.forEach(t),MEr=i(ge),CE=n(ge,"LI",{});var LRe=s(CE);ave=n(LRe,"STRONG",{});var d7t=s(ave);EEr=r(d7t,"convbert"),d7t.forEach(t),CEr=r(LRe," \u2014 "),nU=n(LRe,"A",{href:!0});var c7t=s(nU);wEr=r(c7t,"TFConvBertForQuestionAnswering"),c7t.forEach(t),AEr=r(LRe," (ConvBERT model)"),LRe.forEach(t),yEr=i(ge),wE=n(ge,"LI",{});var xRe=s(wE);nve=n(xRe,"STRONG",{});var f7t=s(nve);LEr=r(f7t,"deberta"),f7t.forEach(t),xEr=r(xRe," \u2014 "),sU=n(xRe,"A",{href:!0});var m7t=s(sU);$Er=r(m7t,"TFDebertaForQuestionAnswering"),m7t.forEach(t),kEr=r(xRe," (DeBERTa model)"),xRe.forEach(t),SEr=i(ge),AE=n(ge,"LI",{});var $Re=s(AE);sve=n($Re,"STRONG",{});var g7t=s(sve);REr=r(g7t,"deberta-v2"),g7t.forEach(t),BEr=r($Re," \u2014 "),lU=n($Re,"A",{href:!0});var h7t=s(lU);PEr=r(h7t,"TFDebertaV2ForQuestionAnswering"),h7t.forEach(t),IEr=r($Re," (DeBERTa-v2 model)"),$Re.forEach(t),qEr=i(ge),yE=n(ge,"LI",{});var kRe=s(yE);lve=n(kRe,"STRONG",{});var p7t=s(lve);NEr=r(p7t,"distilbert"),p7t.forEach(t),jEr=r(kRe," \u2014 "),iU=n(kRe,"A",{href:!0});var u7t=s(iU);DEr=r(u7t,"TFDistilBertForQuestionAnswering"),u7t.forEach(t),GEr=r(kRe," (DistilBERT model)"),kRe.forEach(t),OEr=i(ge),LE=n(ge,"LI",{});var SRe=s(LE);ive=n(SRe,"STRONG",{});var _7t=s(ive);VEr=r(_7t,"electra"),_7t.forEach(t),XEr=r(SRe," \u2014 "),dU=n(SRe,"A",{href:!0});var b7t=s(dU);zEr=r(b7t,"TFElectraForQuestionAnswering"),b7t.forEach(t),QEr=r(SRe," (ELECTRA model)"),SRe.forEach(t),WEr=i(ge),xE=n(ge,"LI",{});var RRe=s(xE);dve=n(RRe,"STRONG",{});var v7t=s(dve);HEr=r(v7t,"flaubert"),v7t.forEach(t),UEr=r(RRe," \u2014 "),cU=n(RRe,"A",{href:!0});var F7t=s(cU);JEr=r(F7t,"TFFlaubertForQuestionAnsweringSimple"),F7t.forEach(t),YEr=r(RRe," (FlauBERT model)"),RRe.forEach(t),KEr=i(ge),$E=n(ge,"LI",{});var BRe=s($E);cve=n(BRe,"STRONG",{});var T7t=s(cve);ZEr=r(T7t,"funnel"),T7t.forEach(t),eCr=r(BRe," \u2014 "),fU=n(BRe,"A",{href:!0});var M7t=s(fU);oCr=r(M7t,"TFFunnelForQuestionAnswering"),M7t.forEach(t),rCr=r(BRe," (Funnel Transformer model)"),BRe.forEach(t),tCr=i(ge),kE=n(ge,"LI",{});var PRe=s(kE);fve=n(PRe,"STRONG",{});var E7t=s(fve);aCr=r(E7t,"gptj"),E7t.forEach(t),nCr=r(PRe," \u2014 "),mU=n(PRe,"A",{href:!0});var C7t=s(mU);sCr=r(C7t,"TFGPTJForQuestionAnswering"),C7t.forEach(t),lCr=r(PRe," (GPT-J model)"),PRe.forEach(t),iCr=i(ge),SE=n(ge,"LI",{});var IRe=s(SE);mve=n(IRe,"STRONG",{});var w7t=s(mve);dCr=r(w7t,"longformer"),w7t.forEach(t),cCr=r(IRe," \u2014 "),gU=n(IRe,"A",{href:!0});var A7t=s(gU);fCr=r(A7t,"TFLongformerForQuestionAnswering"),A7t.forEach(t),mCr=r(IRe," (Longformer model)"),IRe.forEach(t),gCr=i(ge),RE=n(ge,"LI",{});var qRe=s(RE);gve=n(qRe,"STRONG",{});var y7t=s(gve);hCr=r(y7t,"mobilebert"),y7t.forEach(t),pCr=r(qRe," \u2014 "),hU=n(qRe,"A",{href:!0});var L7t=s(hU);uCr=r(L7t,"TFMobileBertForQuestionAnswering"),L7t.forEach(t),_Cr=r(qRe," (MobileBERT model)"),qRe.forEach(t),bCr=i(ge),BE=n(ge,"LI",{});var NRe=s(BE);hve=n(NRe,"STRONG",{});var x7t=s(hve);vCr=r(x7t,"mpnet"),x7t.forEach(t),FCr=r(NRe," \u2014 "),pU=n(NRe,"A",{href:!0});var $7t=s(pU);TCr=r($7t,"TFMPNetForQuestionAnswering"),$7t.forEach(t),MCr=r(NRe," (MPNet model)"),NRe.forEach(t),ECr=i(ge),PE=n(ge,"LI",{});var jRe=s(PE);pve=n(jRe,"STRONG",{});var k7t=s(pve);CCr=r(k7t,"rembert"),k7t.forEach(t),wCr=r(jRe," \u2014 "),uU=n(jRe,"A",{href:!0});var S7t=s(uU);ACr=r(S7t,"TFRemBertForQuestionAnswering"),S7t.forEach(t),yCr=r(jRe," (RemBERT model)"),jRe.forEach(t),LCr=i(ge),IE=n(ge,"LI",{});var DRe=s(IE);uve=n(DRe,"STRONG",{});var R7t=s(uve);xCr=r(R7t,"roberta"),R7t.forEach(t),$Cr=r(DRe," \u2014 "),_U=n(DRe,"A",{href:!0});var B7t=s(_U);kCr=r(B7t,"TFRobertaForQuestionAnswering"),B7t.forEach(t),SCr=r(DRe," (RoBERTa model)"),DRe.forEach(t),RCr=i(ge),qE=n(ge,"LI",{});var GRe=s(qE);_ve=n(GRe,"STRONG",{});var P7t=s(_ve);BCr=r(P7t,"roformer"),P7t.forEach(t),PCr=r(GRe," \u2014 "),bU=n(GRe,"A",{href:!0});var I7t=s(bU);ICr=r(I7t,"TFRoFormerForQuestionAnswering"),I7t.forEach(t),qCr=r(GRe," (RoFormer model)"),GRe.forEach(t),NCr=i(ge),NE=n(ge,"LI",{});var ORe=s(NE);bve=n(ORe,"STRONG",{});var q7t=s(bve);jCr=r(q7t,"xlm"),q7t.forEach(t),DCr=r(ORe," \u2014 "),vU=n(ORe,"A",{href:!0});var N7t=s(vU);GCr=r(N7t,"TFXLMForQuestionAnsweringSimple"),N7t.forEach(t),OCr=r(ORe," (XLM model)"),ORe.forEach(t),VCr=i(ge),jE=n(ge,"LI",{});var VRe=s(jE);vve=n(VRe,"STRONG",{});var j7t=s(vve);XCr=r(j7t,"xlm-roberta"),j7t.forEach(t),zCr=r(VRe," \u2014 "),FU=n(VRe,"A",{href:!0});var D7t=s(FU);QCr=r(D7t,"TFXLMRobertaForQuestionAnswering"),D7t.forEach(t),WCr=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),HCr=i(ge),DE=n(ge,"LI",{});var XRe=s(DE);Fve=n(XRe,"STRONG",{});var G7t=s(Fve);UCr=r(G7t,"xlnet"),G7t.forEach(t),JCr=r(XRe," \u2014 "),TU=n(XRe,"A",{href:!0});var O7t=s(TU);YCr=r(O7t,"TFXLNetForQuestionAnsweringSimple"),O7t.forEach(t),KCr=r(XRe," (XLNet model)"),XRe.forEach(t),ge.forEach(t),ZCr=i(Rl),T(GE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),vqe=i(f),Tc=n(f,"H2",{class:!0});var Aje=s(Tc);OE=n(Aje,"A",{id:!0,class:!0,href:!0});var V7t=s(OE);Tve=n(V7t,"SPAN",{});var X7t=s(Tve);T(j8.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),e3r=i(Aje),Mve=n(Aje,"SPAN",{});var z7t=s(Mve);o3r=r(z7t,"TFAutoModelForVision2Seq"),z7t.forEach(t),Aje.forEach(t),Fqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(D8.$$.fragment,Bl),r3r=i(Bl),Mc=n(Bl,"P",{});var LZ=s(Mc);t3r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MU=n(LZ,"A",{href:!0});var Q7t=s(MU);a3r=r(Q7t,"from_pretrained()"),Q7t.forEach(t),n3r=r(LZ," class method or the "),EU=n(LZ,"A",{href:!0});var W7t=s(EU);s3r=r(W7t,"from_config()"),W7t.forEach(t),l3r=r(LZ,` class
method.`),LZ.forEach(t),i3r=i(Bl),G8=n(Bl,"P",{});var yje=s(G8);d3r=r(yje,"This class cannot be instantiated directly using "),Eve=n(yje,"CODE",{});var H7t=s(Eve);c3r=r(H7t,"__init__()"),H7t.forEach(t),f3r=r(yje," (throws an error)."),yje.forEach(t),m3r=i(Bl),qt=n(Bl,"DIV",{class:!0});var v6=s(qt);T(O8.$$.fragment,v6),g3r=i(v6),Cve=n(v6,"P",{});var U7t=s(Cve);h3r=r(U7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U7t.forEach(t),p3r=i(v6),Ec=n(v6,"P",{});var xZ=s(Ec);u3r=r(xZ,`Note:
Loading a model from its configuration file does `),wve=n(xZ,"STRONG",{});var J7t=s(wve);_3r=r(J7t,"not"),J7t.forEach(t),b3r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(xZ,"A",{href:!0});var Y7t=s(CU);v3r=r(Y7t,"from_pretrained()"),Y7t.forEach(t),F3r=r(xZ," to load the model weights."),xZ.forEach(t),T3r=i(v6),T(VE.$$.fragment,v6),v6.forEach(t),M3r=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(V8.$$.fragment,Pl),E3r=i(Pl),Ave=n(Pl,"P",{});var K7t=s(Ave);C3r=r(K7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K7t.forEach(t),w3r=i(Pl),fn=n(Pl,"P",{});var F6=s(fn);A3r=r(F6,"The model class to instantiate is selected based on the "),yve=n(F6,"CODE",{});var Z7t=s(yve);y3r=r(Z7t,"model_type"),Z7t.forEach(t),L3r=r(F6,` property of the config object (either
passed as an argument or loaded from `),Lve=n(F6,"CODE",{});var eMt=s(Lve);x3r=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),$3r=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(F6,"CODE",{});var oMt=s(xve);k3r=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),S3r=r(F6,":"),F6.forEach(t),R3r=i(Pl),$ve=n(Pl,"UL",{});var rMt=s($ve);XE=n(rMt,"LI",{});var zRe=s(XE);kve=n(zRe,"STRONG",{});var tMt=s(kve);B3r=r(tMt,"vision-encoder-decoder"),tMt.forEach(t),P3r=r(zRe," \u2014 "),wU=n(zRe,"A",{href:!0});var aMt=s(wU);I3r=r(aMt,"TFVisionEncoderDecoderModel"),aMt.forEach(t),q3r=r(zRe," (Vision Encoder decoder model)"),zRe.forEach(t),rMt.forEach(t),N3r=i(Pl),T(zE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),Tqe=i(f),Cc=n(f,"H2",{class:!0});var Lje=s(Cc);QE=n(Lje,"A",{id:!0,class:!0,href:!0});var nMt=s(QE);Sve=n(nMt,"SPAN",{});var sMt=s(Sve);T(X8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),j3r=i(Lje),Rve=n(Lje,"SPAN",{});var lMt=s(Rve);D3r=r(lMt,"TFAutoModelForSpeechSeq2Seq"),lMt.forEach(t),Lje.forEach(t),Mqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(z8.$$.fragment,Il),G3r=i(Il),wc=n(Il,"P",{});var $Z=s(wc);O3r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AU=n($Z,"A",{href:!0});var iMt=s(AU);V3r=r(iMt,"from_pretrained()"),iMt.forEach(t),X3r=r($Z," class method or the "),yU=n($Z,"A",{href:!0});var dMt=s(yU);z3r=r(dMt,"from_config()"),dMt.forEach(t),Q3r=r($Z,` class
method.`),$Z.forEach(t),W3r=i(Il),Q8=n(Il,"P",{});var xje=s(Q8);H3r=r(xje,"This class cannot be instantiated directly using "),Bve=n(xje,"CODE",{});var cMt=s(Bve);U3r=r(cMt,"__init__()"),cMt.forEach(t),J3r=r(xje," (throws an error)."),xje.forEach(t),Y3r=i(Il),Nt=n(Il,"DIV",{class:!0});var T6=s(Nt);T(W8.$$.fragment,T6),K3r=i(T6),Pve=n(T6,"P",{});var fMt=s(Pve);Z3r=r(fMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fMt.forEach(t),ewr=i(T6),Ac=n(T6,"P",{});var kZ=s(Ac);owr=r(kZ,`Note:
Loading a model from its configuration file does `),Ive=n(kZ,"STRONG",{});var mMt=s(Ive);rwr=r(mMt,"not"),mMt.forEach(t),twr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(kZ,"A",{href:!0});var gMt=s(LU);awr=r(gMt,"from_pretrained()"),gMt.forEach(t),nwr=r(kZ," to load the model weights."),kZ.forEach(t),swr=i(T6),T(WE.$$.fragment,T6),T6.forEach(t),lwr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(H8.$$.fragment,ql),iwr=i(ql),qve=n(ql,"P",{});var hMt=s(qve);dwr=r(hMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hMt.forEach(t),cwr=i(ql),mn=n(ql,"P",{});var M6=s(mn);fwr=r(M6,"The model class to instantiate is selected based on the "),Nve=n(M6,"CODE",{});var pMt=s(Nve);mwr=r(pMt,"model_type"),pMt.forEach(t),gwr=r(M6,` property of the config object (either
passed as an argument or loaded from `),jve=n(M6,"CODE",{});var uMt=s(jve);hwr=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),pwr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(M6,"CODE",{});var _Mt=s(Dve);uwr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),_wr=r(M6,":"),M6.forEach(t),bwr=i(ql),Gve=n(ql,"UL",{});var bMt=s(Gve);HE=n(bMt,"LI",{});var QRe=s(HE);Ove=n(QRe,"STRONG",{});var vMt=s(Ove);vwr=r(vMt,"speech_to_text"),vMt.forEach(t),Fwr=r(QRe," \u2014 "),xU=n(QRe,"A",{href:!0});var FMt=s(xU);Twr=r(FMt,"TFSpeech2TextForConditionalGeneration"),FMt.forEach(t),Mwr=r(QRe," (Speech2Text model)"),QRe.forEach(t),bMt.forEach(t),Ewr=i(ql),T(UE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),Eqe=i(f),yc=n(f,"H2",{class:!0});var $je=s(yc);JE=n($je,"A",{id:!0,class:!0,href:!0});var TMt=s(JE);Vve=n(TMt,"SPAN",{});var MMt=s(Vve);T(U8.$$.fragment,MMt),MMt.forEach(t),TMt.forEach(t),Cwr=i($je),Xve=n($je,"SPAN",{});var EMt=s(Xve);wwr=r(EMt,"FlaxAutoModel"),EMt.forEach(t),$je.forEach(t),Cqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(J8.$$.fragment,Nl),Awr=i(Nl),Lc=n(Nl,"P",{});var SZ=s(Lc);ywr=r(SZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$U=n(SZ,"A",{href:!0});var CMt=s($U);Lwr=r(CMt,"from_pretrained()"),CMt.forEach(t),xwr=r(SZ," class method or the "),kU=n(SZ,"A",{href:!0});var wMt=s(kU);$wr=r(wMt,"from_config()"),wMt.forEach(t),kwr=r(SZ,` class
method.`),SZ.forEach(t),Swr=i(Nl),Y8=n(Nl,"P",{});var kje=s(Y8);Rwr=r(kje,"This class cannot be instantiated directly using "),zve=n(kje,"CODE",{});var AMt=s(zve);Bwr=r(AMt,"__init__()"),AMt.forEach(t),Pwr=r(kje," (throws an error)."),kje.forEach(t),Iwr=i(Nl),jt=n(Nl,"DIV",{class:!0});var E6=s(jt);T(K8.$$.fragment,E6),qwr=i(E6),Qve=n(E6,"P",{});var yMt=s(Qve);Nwr=r(yMt,"Instantiates one of the base model classes of the library from a configuration."),yMt.forEach(t),jwr=i(E6),xc=n(E6,"P",{});var RZ=s(xc);Dwr=r(RZ,`Note:
Loading a model from its configuration file does `),Wve=n(RZ,"STRONG",{});var LMt=s(Wve);Gwr=r(LMt,"not"),LMt.forEach(t),Owr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(RZ,"A",{href:!0});var xMt=s(SU);Vwr=r(xMt,"from_pretrained()"),xMt.forEach(t),Xwr=r(RZ," to load the model weights."),RZ.forEach(t),zwr=i(E6),T(YE.$$.fragment,E6),E6.forEach(t),Qwr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(Z8.$$.fragment,jl),Wwr=i(jl),Hve=n(jl,"P",{});var $Mt=s(Hve);Hwr=r($Mt,"Instantiate one of the base model classes of the library from a pretrained model."),$Mt.forEach(t),Uwr=i(jl),gn=n(jl,"P",{});var C6=s(gn);Jwr=r(C6,"The model class to instantiate is selected based on the "),Uve=n(C6,"CODE",{});var kMt=s(Uve);Ywr=r(kMt,"model_type"),kMt.forEach(t),Kwr=r(C6,` property of the config object (either
passed as an argument or loaded from `),Jve=n(C6,"CODE",{});var SMt=s(Jve);Zwr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),eAr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(C6,"CODE",{});var RMt=s(Yve);oAr=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),rAr=r(C6,":"),C6.forEach(t),tAr=i(jl),re=n(jl,"UL",{});var ne=s(re);KE=n(ne,"LI",{});var WRe=s(KE);Kve=n(WRe,"STRONG",{});var BMt=s(Kve);aAr=r(BMt,"albert"),BMt.forEach(t),nAr=r(WRe," \u2014 "),RU=n(WRe,"A",{href:!0});var PMt=s(RU);sAr=r(PMt,"FlaxAlbertModel"),PMt.forEach(t),lAr=r(WRe," (ALBERT model)"),WRe.forEach(t),iAr=i(ne),ZE=n(ne,"LI",{});var HRe=s(ZE);Zve=n(HRe,"STRONG",{});var IMt=s(Zve);dAr=r(IMt,"bart"),IMt.forEach(t),cAr=r(HRe," \u2014 "),BU=n(HRe,"A",{href:!0});var qMt=s(BU);fAr=r(qMt,"FlaxBartModel"),qMt.forEach(t),mAr=r(HRe," (BART model)"),HRe.forEach(t),gAr=i(ne),eC=n(ne,"LI",{});var URe=s(eC);eFe=n(URe,"STRONG",{});var NMt=s(eFe);hAr=r(NMt,"beit"),NMt.forEach(t),pAr=r(URe," \u2014 "),PU=n(URe,"A",{href:!0});var jMt=s(PU);uAr=r(jMt,"FlaxBeitModel"),jMt.forEach(t),_Ar=r(URe," (BEiT model)"),URe.forEach(t),bAr=i(ne),oC=n(ne,"LI",{});var JRe=s(oC);oFe=n(JRe,"STRONG",{});var DMt=s(oFe);vAr=r(DMt,"bert"),DMt.forEach(t),FAr=r(JRe," \u2014 "),IU=n(JRe,"A",{href:!0});var GMt=s(IU);TAr=r(GMt,"FlaxBertModel"),GMt.forEach(t),MAr=r(JRe," (BERT model)"),JRe.forEach(t),EAr=i(ne),rC=n(ne,"LI",{});var YRe=s(rC);rFe=n(YRe,"STRONG",{});var OMt=s(rFe);CAr=r(OMt,"big_bird"),OMt.forEach(t),wAr=r(YRe," \u2014 "),qU=n(YRe,"A",{href:!0});var VMt=s(qU);AAr=r(VMt,"FlaxBigBirdModel"),VMt.forEach(t),yAr=r(YRe," (BigBird model)"),YRe.forEach(t),LAr=i(ne),tC=n(ne,"LI",{});var KRe=s(tC);tFe=n(KRe,"STRONG",{});var XMt=s(tFe);xAr=r(XMt,"blenderbot"),XMt.forEach(t),$Ar=r(KRe," \u2014 "),NU=n(KRe,"A",{href:!0});var zMt=s(NU);kAr=r(zMt,"FlaxBlenderbotModel"),zMt.forEach(t),SAr=r(KRe," (Blenderbot model)"),KRe.forEach(t),RAr=i(ne),aC=n(ne,"LI",{});var ZRe=s(aC);aFe=n(ZRe,"STRONG",{});var QMt=s(aFe);BAr=r(QMt,"blenderbot-small"),QMt.forEach(t),PAr=r(ZRe," \u2014 "),jU=n(ZRe,"A",{href:!0});var WMt=s(jU);IAr=r(WMt,"FlaxBlenderbotSmallModel"),WMt.forEach(t),qAr=r(ZRe," (BlenderbotSmall model)"),ZRe.forEach(t),NAr=i(ne),nC=n(ne,"LI",{});var eBe=s(nC);nFe=n(eBe,"STRONG",{});var HMt=s(nFe);jAr=r(HMt,"clip"),HMt.forEach(t),DAr=r(eBe," \u2014 "),DU=n(eBe,"A",{href:!0});var UMt=s(DU);GAr=r(UMt,"FlaxCLIPModel"),UMt.forEach(t),OAr=r(eBe," (CLIP model)"),eBe.forEach(t),VAr=i(ne),sC=n(ne,"LI",{});var oBe=s(sC);sFe=n(oBe,"STRONG",{});var JMt=s(sFe);XAr=r(JMt,"distilbert"),JMt.forEach(t),zAr=r(oBe," \u2014 "),GU=n(oBe,"A",{href:!0});var YMt=s(GU);QAr=r(YMt,"FlaxDistilBertModel"),YMt.forEach(t),WAr=r(oBe," (DistilBERT model)"),oBe.forEach(t),HAr=i(ne),lC=n(ne,"LI",{});var rBe=s(lC);lFe=n(rBe,"STRONG",{});var KMt=s(lFe);UAr=r(KMt,"electra"),KMt.forEach(t),JAr=r(rBe," \u2014 "),OU=n(rBe,"A",{href:!0});var ZMt=s(OU);YAr=r(ZMt,"FlaxElectraModel"),ZMt.forEach(t),KAr=r(rBe," (ELECTRA model)"),rBe.forEach(t),ZAr=i(ne),iC=n(ne,"LI",{});var tBe=s(iC);iFe=n(tBe,"STRONG",{});var eEt=s(iFe);e6r=r(eEt,"gpt2"),eEt.forEach(t),o6r=r(tBe," \u2014 "),VU=n(tBe,"A",{href:!0});var oEt=s(VU);r6r=r(oEt,"FlaxGPT2Model"),oEt.forEach(t),t6r=r(tBe," (OpenAI GPT-2 model)"),tBe.forEach(t),a6r=i(ne),dC=n(ne,"LI",{});var aBe=s(dC);dFe=n(aBe,"STRONG",{});var rEt=s(dFe);n6r=r(rEt,"gpt_neo"),rEt.forEach(t),s6r=r(aBe," \u2014 "),XU=n(aBe,"A",{href:!0});var tEt=s(XU);l6r=r(tEt,"FlaxGPTNeoModel"),tEt.forEach(t),i6r=r(aBe," (GPT Neo model)"),aBe.forEach(t),d6r=i(ne),cC=n(ne,"LI",{});var nBe=s(cC);cFe=n(nBe,"STRONG",{});var aEt=s(cFe);c6r=r(aEt,"gptj"),aEt.forEach(t),f6r=r(nBe," \u2014 "),zU=n(nBe,"A",{href:!0});var nEt=s(zU);m6r=r(nEt,"FlaxGPTJModel"),nEt.forEach(t),g6r=r(nBe," (GPT-J model)"),nBe.forEach(t),h6r=i(ne),fC=n(ne,"LI",{});var sBe=s(fC);fFe=n(sBe,"STRONG",{});var sEt=s(fFe);p6r=r(sEt,"marian"),sEt.forEach(t),u6r=r(sBe," \u2014 "),QU=n(sBe,"A",{href:!0});var lEt=s(QU);_6r=r(lEt,"FlaxMarianModel"),lEt.forEach(t),b6r=r(sBe," (Marian model)"),sBe.forEach(t),v6r=i(ne),mC=n(ne,"LI",{});var lBe=s(mC);mFe=n(lBe,"STRONG",{});var iEt=s(mFe);F6r=r(iEt,"mbart"),iEt.forEach(t),T6r=r(lBe," \u2014 "),WU=n(lBe,"A",{href:!0});var dEt=s(WU);M6r=r(dEt,"FlaxMBartModel"),dEt.forEach(t),E6r=r(lBe," (mBART model)"),lBe.forEach(t),C6r=i(ne),gC=n(ne,"LI",{});var iBe=s(gC);gFe=n(iBe,"STRONG",{});var cEt=s(gFe);w6r=r(cEt,"mt5"),cEt.forEach(t),A6r=r(iBe," \u2014 "),HU=n(iBe,"A",{href:!0});var fEt=s(HU);y6r=r(fEt,"FlaxMT5Model"),fEt.forEach(t),L6r=r(iBe," (mT5 model)"),iBe.forEach(t),x6r=i(ne),hC=n(ne,"LI",{});var dBe=s(hC);hFe=n(dBe,"STRONG",{});var mEt=s(hFe);$6r=r(mEt,"pegasus"),mEt.forEach(t),k6r=r(dBe," \u2014 "),UU=n(dBe,"A",{href:!0});var gEt=s(UU);S6r=r(gEt,"FlaxPegasusModel"),gEt.forEach(t),R6r=r(dBe," (Pegasus model)"),dBe.forEach(t),B6r=i(ne),pC=n(ne,"LI",{});var cBe=s(pC);pFe=n(cBe,"STRONG",{});var hEt=s(pFe);P6r=r(hEt,"roberta"),hEt.forEach(t),I6r=r(cBe," \u2014 "),JU=n(cBe,"A",{href:!0});var pEt=s(JU);q6r=r(pEt,"FlaxRobertaModel"),pEt.forEach(t),N6r=r(cBe," (RoBERTa model)"),cBe.forEach(t),j6r=i(ne),uC=n(ne,"LI",{});var fBe=s(uC);uFe=n(fBe,"STRONG",{});var uEt=s(uFe);D6r=r(uEt,"roformer"),uEt.forEach(t),G6r=r(fBe," \u2014 "),YU=n(fBe,"A",{href:!0});var _Et=s(YU);O6r=r(_Et,"FlaxRoFormerModel"),_Et.forEach(t),V6r=r(fBe," (RoFormer model)"),fBe.forEach(t),X6r=i(ne),_C=n(ne,"LI",{});var mBe=s(_C);_Fe=n(mBe,"STRONG",{});var bEt=s(_Fe);z6r=r(bEt,"t5"),bEt.forEach(t),Q6r=r(mBe," \u2014 "),KU=n(mBe,"A",{href:!0});var vEt=s(KU);W6r=r(vEt,"FlaxT5Model"),vEt.forEach(t),H6r=r(mBe," (T5 model)"),mBe.forEach(t),U6r=i(ne),bC=n(ne,"LI",{});var gBe=s(bC);bFe=n(gBe,"STRONG",{});var FEt=s(bFe);J6r=r(FEt,"vision-text-dual-encoder"),FEt.forEach(t),Y6r=r(gBe," \u2014 "),ZU=n(gBe,"A",{href:!0});var TEt=s(ZU);K6r=r(TEt,"FlaxVisionTextDualEncoderModel"),TEt.forEach(t),Z6r=r(gBe," (VisionTextDualEncoder model)"),gBe.forEach(t),e0r=i(ne),vC=n(ne,"LI",{});var hBe=s(vC);vFe=n(hBe,"STRONG",{});var MEt=s(vFe);o0r=r(MEt,"vit"),MEt.forEach(t),r0r=r(hBe," \u2014 "),eJ=n(hBe,"A",{href:!0});var EEt=s(eJ);t0r=r(EEt,"FlaxViTModel"),EEt.forEach(t),a0r=r(hBe," (ViT model)"),hBe.forEach(t),n0r=i(ne),FC=n(ne,"LI",{});var pBe=s(FC);FFe=n(pBe,"STRONG",{});var CEt=s(FFe);s0r=r(CEt,"wav2vec2"),CEt.forEach(t),l0r=r(pBe," \u2014 "),oJ=n(pBe,"A",{href:!0});var wEt=s(oJ);i0r=r(wEt,"FlaxWav2Vec2Model"),wEt.forEach(t),d0r=r(pBe," (Wav2Vec2 model)"),pBe.forEach(t),c0r=i(ne),TC=n(ne,"LI",{});var uBe=s(TC);TFe=n(uBe,"STRONG",{});var AEt=s(TFe);f0r=r(AEt,"xglm"),AEt.forEach(t),m0r=r(uBe," \u2014 "),rJ=n(uBe,"A",{href:!0});var yEt=s(rJ);g0r=r(yEt,"FlaxXGLMModel"),yEt.forEach(t),h0r=r(uBe," (XGLM model)"),uBe.forEach(t),p0r=i(ne),MC=n(ne,"LI",{});var _Be=s(MC);MFe=n(_Be,"STRONG",{});var LEt=s(MFe);u0r=r(LEt,"xlm-roberta"),LEt.forEach(t),_0r=r(_Be," \u2014 "),tJ=n(_Be,"A",{href:!0});var xEt=s(tJ);b0r=r(xEt,"FlaxXLMRobertaModel"),xEt.forEach(t),v0r=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),ne.forEach(t),F0r=i(jl),T(EC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),wqe=i(f),$c=n(f,"H2",{class:!0});var Sje=s($c);CC=n(Sje,"A",{id:!0,class:!0,href:!0});var $Et=s(CC);EFe=n($Et,"SPAN",{});var kEt=s(EFe);T(ex.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),T0r=i(Sje),CFe=n(Sje,"SPAN",{});var SEt=s(CFe);M0r=r(SEt,"FlaxAutoModelForCausalLM"),SEt.forEach(t),Sje.forEach(t),Aqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(ox.$$.fragment,Dl),E0r=i(Dl),kc=n(Dl,"P",{});var BZ=s(kc);C0r=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aJ=n(BZ,"A",{href:!0});var REt=s(aJ);w0r=r(REt,"from_pretrained()"),REt.forEach(t),A0r=r(BZ," class method or the "),nJ=n(BZ,"A",{href:!0});var BEt=s(nJ);y0r=r(BEt,"from_config()"),BEt.forEach(t),L0r=r(BZ,` class
method.`),BZ.forEach(t),x0r=i(Dl),rx=n(Dl,"P",{});var Rje=s(rx);$0r=r(Rje,"This class cannot be instantiated directly using "),wFe=n(Rje,"CODE",{});var PEt=s(wFe);k0r=r(PEt,"__init__()"),PEt.forEach(t),S0r=r(Rje," (throws an error)."),Rje.forEach(t),R0r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var w6=s(Dt);T(tx.$$.fragment,w6),B0r=i(w6),AFe=n(w6,"P",{});var IEt=s(AFe);P0r=r(IEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IEt.forEach(t),I0r=i(w6),Sc=n(w6,"P",{});var PZ=s(Sc);q0r=r(PZ,`Note:
Loading a model from its configuration file does `),yFe=n(PZ,"STRONG",{});var qEt=s(yFe);N0r=r(qEt,"not"),qEt.forEach(t),j0r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(PZ,"A",{href:!0});var NEt=s(sJ);D0r=r(NEt,"from_pretrained()"),NEt.forEach(t),G0r=r(PZ," to load the model weights."),PZ.forEach(t),O0r=i(w6),T(wC.$$.fragment,w6),w6.forEach(t),V0r=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(ax.$$.fragment,Gl),X0r=i(Gl),LFe=n(Gl,"P",{});var jEt=s(LFe);z0r=r(jEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jEt.forEach(t),Q0r=i(Gl),hn=n(Gl,"P",{});var A6=s(hn);W0r=r(A6,"The model class to instantiate is selected based on the "),xFe=n(A6,"CODE",{});var DEt=s(xFe);H0r=r(DEt,"model_type"),DEt.forEach(t),U0r=r(A6,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(A6,"CODE",{});var GEt=s($Fe);J0r=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),Y0r=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(A6,"CODE",{});var OEt=s(kFe);K0r=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),Z0r=r(A6,":"),A6.forEach(t),eyr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);AC=n(Oe,"LI",{});var bBe=s(AC);SFe=n(bBe,"STRONG",{});var VEt=s(SFe);oyr=r(VEt,"bart"),VEt.forEach(t),ryr=r(bBe," \u2014 "),lJ=n(bBe,"A",{href:!0});var XEt=s(lJ);tyr=r(XEt,"FlaxBartForCausalLM"),XEt.forEach(t),ayr=r(bBe," (BART model)"),bBe.forEach(t),nyr=i(Oe),yC=n(Oe,"LI",{});var vBe=s(yC);RFe=n(vBe,"STRONG",{});var zEt=s(RFe);syr=r(zEt,"bert"),zEt.forEach(t),lyr=r(vBe," \u2014 "),iJ=n(vBe,"A",{href:!0});var QEt=s(iJ);iyr=r(QEt,"FlaxBertForCausalLM"),QEt.forEach(t),dyr=r(vBe," (BERT model)"),vBe.forEach(t),cyr=i(Oe),LC=n(Oe,"LI",{});var FBe=s(LC);BFe=n(FBe,"STRONG",{});var WEt=s(BFe);fyr=r(WEt,"big_bird"),WEt.forEach(t),myr=r(FBe," \u2014 "),dJ=n(FBe,"A",{href:!0});var HEt=s(dJ);gyr=r(HEt,"FlaxBigBirdForCausalLM"),HEt.forEach(t),hyr=r(FBe," (BigBird model)"),FBe.forEach(t),pyr=i(Oe),xC=n(Oe,"LI",{});var TBe=s(xC);PFe=n(TBe,"STRONG",{});var UEt=s(PFe);uyr=r(UEt,"electra"),UEt.forEach(t),_yr=r(TBe," \u2014 "),cJ=n(TBe,"A",{href:!0});var JEt=s(cJ);byr=r(JEt,"FlaxElectraForCausalLM"),JEt.forEach(t),vyr=r(TBe," (ELECTRA model)"),TBe.forEach(t),Fyr=i(Oe),$C=n(Oe,"LI",{});var MBe=s($C);IFe=n(MBe,"STRONG",{});var YEt=s(IFe);Tyr=r(YEt,"gpt2"),YEt.forEach(t),Myr=r(MBe," \u2014 "),fJ=n(MBe,"A",{href:!0});var KEt=s(fJ);Eyr=r(KEt,"FlaxGPT2LMHeadModel"),KEt.forEach(t),Cyr=r(MBe," (OpenAI GPT-2 model)"),MBe.forEach(t),wyr=i(Oe),kC=n(Oe,"LI",{});var EBe=s(kC);qFe=n(EBe,"STRONG",{});var ZEt=s(qFe);Ayr=r(ZEt,"gpt_neo"),ZEt.forEach(t),yyr=r(EBe," \u2014 "),mJ=n(EBe,"A",{href:!0});var eCt=s(mJ);Lyr=r(eCt,"FlaxGPTNeoForCausalLM"),eCt.forEach(t),xyr=r(EBe," (GPT Neo model)"),EBe.forEach(t),$yr=i(Oe),SC=n(Oe,"LI",{});var CBe=s(SC);NFe=n(CBe,"STRONG",{});var oCt=s(NFe);kyr=r(oCt,"gptj"),oCt.forEach(t),Syr=r(CBe," \u2014 "),gJ=n(CBe,"A",{href:!0});var rCt=s(gJ);Ryr=r(rCt,"FlaxGPTJForCausalLM"),rCt.forEach(t),Byr=r(CBe," (GPT-J model)"),CBe.forEach(t),Pyr=i(Oe),RC=n(Oe,"LI",{});var wBe=s(RC);jFe=n(wBe,"STRONG",{});var tCt=s(jFe);Iyr=r(tCt,"roberta"),tCt.forEach(t),qyr=r(wBe," \u2014 "),hJ=n(wBe,"A",{href:!0});var aCt=s(hJ);Nyr=r(aCt,"FlaxRobertaForCausalLM"),aCt.forEach(t),jyr=r(wBe," (RoBERTa model)"),wBe.forEach(t),Dyr=i(Oe),BC=n(Oe,"LI",{});var ABe=s(BC);DFe=n(ABe,"STRONG",{});var nCt=s(DFe);Gyr=r(nCt,"xglm"),nCt.forEach(t),Oyr=r(ABe," \u2014 "),pJ=n(ABe,"A",{href:!0});var sCt=s(pJ);Vyr=r(sCt,"FlaxXGLMForCausalLM"),sCt.forEach(t),Xyr=r(ABe," (XGLM model)"),ABe.forEach(t),Oe.forEach(t),zyr=i(Gl),T(PC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),yqe=i(f),Rc=n(f,"H2",{class:!0});var Bje=s(Rc);IC=n(Bje,"A",{id:!0,class:!0,href:!0});var lCt=s(IC);GFe=n(lCt,"SPAN",{});var iCt=s(GFe);T(nx.$$.fragment,iCt),iCt.forEach(t),lCt.forEach(t),Qyr=i(Bje),OFe=n(Bje,"SPAN",{});var dCt=s(OFe);Wyr=r(dCt,"FlaxAutoModelForPreTraining"),dCt.forEach(t),Bje.forEach(t),Lqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(sx.$$.fragment,Ol),Hyr=i(Ol),Bc=n(Ol,"P",{});var IZ=s(Bc);Uyr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=n(IZ,"A",{href:!0});var cCt=s(uJ);Jyr=r(cCt,"from_pretrained()"),cCt.forEach(t),Yyr=r(IZ," class method or the "),_J=n(IZ,"A",{href:!0});var fCt=s(_J);Kyr=r(fCt,"from_config()"),fCt.forEach(t),Zyr=r(IZ,` class
method.`),IZ.forEach(t),eLr=i(Ol),lx=n(Ol,"P",{});var Pje=s(lx);oLr=r(Pje,"This class cannot be instantiated directly using "),VFe=n(Pje,"CODE",{});var mCt=s(VFe);rLr=r(mCt,"__init__()"),mCt.forEach(t),tLr=r(Pje," (throws an error)."),Pje.forEach(t),aLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var y6=s(Gt);T(ix.$$.fragment,y6),nLr=i(y6),XFe=n(y6,"P",{});var gCt=s(XFe);sLr=r(gCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gCt.forEach(t),lLr=i(y6),Pc=n(y6,"P",{});var qZ=s(Pc);iLr=r(qZ,`Note:
Loading a model from its configuration file does `),zFe=n(qZ,"STRONG",{});var hCt=s(zFe);dLr=r(hCt,"not"),hCt.forEach(t),cLr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(qZ,"A",{href:!0});var pCt=s(bJ);fLr=r(pCt,"from_pretrained()"),pCt.forEach(t),mLr=r(qZ," to load the model weights."),qZ.forEach(t),gLr=i(y6),T(qC.$$.fragment,y6),y6.forEach(t),hLr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(dx.$$.fragment,Vl),pLr=i(Vl),QFe=n(Vl,"P",{});var uCt=s(QFe);uLr=r(uCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uCt.forEach(t),_Lr=i(Vl),pn=n(Vl,"P",{});var L6=s(pn);bLr=r(L6,"The model class to instantiate is selected based on the "),WFe=n(L6,"CODE",{});var _Ct=s(WFe);vLr=r(_Ct,"model_type"),_Ct.forEach(t),FLr=r(L6,` property of the config object (either
passed as an argument or loaded from `),HFe=n(L6,"CODE",{});var bCt=s(HFe);TLr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),MLr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(L6,"CODE",{});var vCt=s(UFe);ELr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),CLr=r(L6,":"),L6.forEach(t),wLr=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);NC=n(we,"LI",{});var yBe=s(NC);JFe=n(yBe,"STRONG",{});var FCt=s(JFe);ALr=r(FCt,"albert"),FCt.forEach(t),yLr=r(yBe," \u2014 "),vJ=n(yBe,"A",{href:!0});var TCt=s(vJ);LLr=r(TCt,"FlaxAlbertForPreTraining"),TCt.forEach(t),xLr=r(yBe," (ALBERT model)"),yBe.forEach(t),$Lr=i(we),jC=n(we,"LI",{});var LBe=s(jC);YFe=n(LBe,"STRONG",{});var MCt=s(YFe);kLr=r(MCt,"bart"),MCt.forEach(t),SLr=r(LBe," \u2014 "),FJ=n(LBe,"A",{href:!0});var ECt=s(FJ);RLr=r(ECt,"FlaxBartForConditionalGeneration"),ECt.forEach(t),BLr=r(LBe," (BART model)"),LBe.forEach(t),PLr=i(we),DC=n(we,"LI",{});var xBe=s(DC);KFe=n(xBe,"STRONG",{});var CCt=s(KFe);ILr=r(CCt,"bert"),CCt.forEach(t),qLr=r(xBe," \u2014 "),TJ=n(xBe,"A",{href:!0});var wCt=s(TJ);NLr=r(wCt,"FlaxBertForPreTraining"),wCt.forEach(t),jLr=r(xBe," (BERT model)"),xBe.forEach(t),DLr=i(we),GC=n(we,"LI",{});var $Be=s(GC);ZFe=n($Be,"STRONG",{});var ACt=s(ZFe);GLr=r(ACt,"big_bird"),ACt.forEach(t),OLr=r($Be," \u2014 "),MJ=n($Be,"A",{href:!0});var yCt=s(MJ);VLr=r(yCt,"FlaxBigBirdForPreTraining"),yCt.forEach(t),XLr=r($Be," (BigBird model)"),$Be.forEach(t),zLr=i(we),OC=n(we,"LI",{});var kBe=s(OC);eTe=n(kBe,"STRONG",{});var LCt=s(eTe);QLr=r(LCt,"electra"),LCt.forEach(t),WLr=r(kBe," \u2014 "),EJ=n(kBe,"A",{href:!0});var xCt=s(EJ);HLr=r(xCt,"FlaxElectraForPreTraining"),xCt.forEach(t),ULr=r(kBe," (ELECTRA model)"),kBe.forEach(t),JLr=i(we),VC=n(we,"LI",{});var SBe=s(VC);oTe=n(SBe,"STRONG",{});var $Ct=s(oTe);YLr=r($Ct,"mbart"),$Ct.forEach(t),KLr=r(SBe," \u2014 "),CJ=n(SBe,"A",{href:!0});var kCt=s(CJ);ZLr=r(kCt,"FlaxMBartForConditionalGeneration"),kCt.forEach(t),e8r=r(SBe," (mBART model)"),SBe.forEach(t),o8r=i(we),XC=n(we,"LI",{});var RBe=s(XC);rTe=n(RBe,"STRONG",{});var SCt=s(rTe);r8r=r(SCt,"mt5"),SCt.forEach(t),t8r=r(RBe," \u2014 "),wJ=n(RBe,"A",{href:!0});var RCt=s(wJ);a8r=r(RCt,"FlaxMT5ForConditionalGeneration"),RCt.forEach(t),n8r=r(RBe," (mT5 model)"),RBe.forEach(t),s8r=i(we),zC=n(we,"LI",{});var BBe=s(zC);tTe=n(BBe,"STRONG",{});var BCt=s(tTe);l8r=r(BCt,"roberta"),BCt.forEach(t),i8r=r(BBe," \u2014 "),AJ=n(BBe,"A",{href:!0});var PCt=s(AJ);d8r=r(PCt,"FlaxRobertaForMaskedLM"),PCt.forEach(t),c8r=r(BBe," (RoBERTa model)"),BBe.forEach(t),f8r=i(we),QC=n(we,"LI",{});var PBe=s(QC);aTe=n(PBe,"STRONG",{});var ICt=s(aTe);m8r=r(ICt,"roformer"),ICt.forEach(t),g8r=r(PBe," \u2014 "),yJ=n(PBe,"A",{href:!0});var qCt=s(yJ);h8r=r(qCt,"FlaxRoFormerForMaskedLM"),qCt.forEach(t),p8r=r(PBe," (RoFormer model)"),PBe.forEach(t),u8r=i(we),WC=n(we,"LI",{});var IBe=s(WC);nTe=n(IBe,"STRONG",{});var NCt=s(nTe);_8r=r(NCt,"t5"),NCt.forEach(t),b8r=r(IBe," \u2014 "),LJ=n(IBe,"A",{href:!0});var jCt=s(LJ);v8r=r(jCt,"FlaxT5ForConditionalGeneration"),jCt.forEach(t),F8r=r(IBe," (T5 model)"),IBe.forEach(t),T8r=i(we),HC=n(we,"LI",{});var qBe=s(HC);sTe=n(qBe,"STRONG",{});var DCt=s(sTe);M8r=r(DCt,"wav2vec2"),DCt.forEach(t),E8r=r(qBe," \u2014 "),xJ=n(qBe,"A",{href:!0});var GCt=s(xJ);C8r=r(GCt,"FlaxWav2Vec2ForPreTraining"),GCt.forEach(t),w8r=r(qBe," (Wav2Vec2 model)"),qBe.forEach(t),A8r=i(we),UC=n(we,"LI",{});var NBe=s(UC);lTe=n(NBe,"STRONG",{});var OCt=s(lTe);y8r=r(OCt,"xlm-roberta"),OCt.forEach(t),L8r=r(NBe," \u2014 "),$J=n(NBe,"A",{href:!0});var VCt=s($J);x8r=r(VCt,"FlaxXLMRobertaForMaskedLM"),VCt.forEach(t),$8r=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),we.forEach(t),k8r=i(Vl),T(JC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),xqe=i(f),Ic=n(f,"H2",{class:!0});var Ije=s(Ic);YC=n(Ije,"A",{id:!0,class:!0,href:!0});var XCt=s(YC);iTe=n(XCt,"SPAN",{});var zCt=s(iTe);T(cx.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),S8r=i(Ije),dTe=n(Ije,"SPAN",{});var QCt=s(dTe);R8r=r(QCt,"FlaxAutoModelForMaskedLM"),QCt.forEach(t),Ije.forEach(t),$qe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(fx.$$.fragment,Xl),B8r=i(Xl),qc=n(Xl,"P",{});var NZ=s(qc);P8r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kJ=n(NZ,"A",{href:!0});var WCt=s(kJ);I8r=r(WCt,"from_pretrained()"),WCt.forEach(t),q8r=r(NZ," class method or the "),SJ=n(NZ,"A",{href:!0});var HCt=s(SJ);N8r=r(HCt,"from_config()"),HCt.forEach(t),j8r=r(NZ,` class
method.`),NZ.forEach(t),D8r=i(Xl),mx=n(Xl,"P",{});var qje=s(mx);G8r=r(qje,"This class cannot be instantiated directly using "),cTe=n(qje,"CODE",{});var UCt=s(cTe);O8r=r(UCt,"__init__()"),UCt.forEach(t),V8r=r(qje," (throws an error)."),qje.forEach(t),X8r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var x6=s(Ot);T(gx.$$.fragment,x6),z8r=i(x6),fTe=n(x6,"P",{});var JCt=s(fTe);Q8r=r(JCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JCt.forEach(t),W8r=i(x6),Nc=n(x6,"P",{});var jZ=s(Nc);H8r=r(jZ,`Note:
Loading a model from its configuration file does `),mTe=n(jZ,"STRONG",{});var YCt=s(mTe);U8r=r(YCt,"not"),YCt.forEach(t),J8r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(jZ,"A",{href:!0});var KCt=s(RJ);Y8r=r(KCt,"from_pretrained()"),KCt.forEach(t),K8r=r(jZ," to load the model weights."),jZ.forEach(t),Z8r=i(x6),T(KC.$$.fragment,x6),x6.forEach(t),exr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(hx.$$.fragment,zl),oxr=i(zl),gTe=n(zl,"P",{});var ZCt=s(gTe);rxr=r(ZCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZCt.forEach(t),txr=i(zl),un=n(zl,"P",{});var $6=s(un);axr=r($6,"The model class to instantiate is selected based on the "),hTe=n($6,"CODE",{});var e3t=s(hTe);nxr=r(e3t,"model_type"),e3t.forEach(t),sxr=r($6,` property of the config object (either
passed as an argument or loaded from `),pTe=n($6,"CODE",{});var o3t=s(pTe);lxr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),ixr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n($6,"CODE",{});var r3t=s(uTe);dxr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),cxr=r($6,":"),$6.forEach(t),fxr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);ZC=n(Be,"LI",{});var jBe=s(ZC);_Te=n(jBe,"STRONG",{});var t3t=s(_Te);mxr=r(t3t,"albert"),t3t.forEach(t),gxr=r(jBe," \u2014 "),BJ=n(jBe,"A",{href:!0});var a3t=s(BJ);hxr=r(a3t,"FlaxAlbertForMaskedLM"),a3t.forEach(t),pxr=r(jBe," (ALBERT model)"),jBe.forEach(t),uxr=i(Be),e3=n(Be,"LI",{});var DBe=s(e3);bTe=n(DBe,"STRONG",{});var n3t=s(bTe);_xr=r(n3t,"bart"),n3t.forEach(t),bxr=r(DBe," \u2014 "),PJ=n(DBe,"A",{href:!0});var s3t=s(PJ);vxr=r(s3t,"FlaxBartForConditionalGeneration"),s3t.forEach(t),Fxr=r(DBe," (BART model)"),DBe.forEach(t),Txr=i(Be),o3=n(Be,"LI",{});var GBe=s(o3);vTe=n(GBe,"STRONG",{});var l3t=s(vTe);Mxr=r(l3t,"bert"),l3t.forEach(t),Exr=r(GBe," \u2014 "),IJ=n(GBe,"A",{href:!0});var i3t=s(IJ);Cxr=r(i3t,"FlaxBertForMaskedLM"),i3t.forEach(t),wxr=r(GBe," (BERT model)"),GBe.forEach(t),Axr=i(Be),r3=n(Be,"LI",{});var OBe=s(r3);FTe=n(OBe,"STRONG",{});var d3t=s(FTe);yxr=r(d3t,"big_bird"),d3t.forEach(t),Lxr=r(OBe," \u2014 "),qJ=n(OBe,"A",{href:!0});var c3t=s(qJ);xxr=r(c3t,"FlaxBigBirdForMaskedLM"),c3t.forEach(t),$xr=r(OBe," (BigBird model)"),OBe.forEach(t),kxr=i(Be),t3=n(Be,"LI",{});var VBe=s(t3);TTe=n(VBe,"STRONG",{});var f3t=s(TTe);Sxr=r(f3t,"distilbert"),f3t.forEach(t),Rxr=r(VBe," \u2014 "),NJ=n(VBe,"A",{href:!0});var m3t=s(NJ);Bxr=r(m3t,"FlaxDistilBertForMaskedLM"),m3t.forEach(t),Pxr=r(VBe," (DistilBERT model)"),VBe.forEach(t),Ixr=i(Be),a3=n(Be,"LI",{});var XBe=s(a3);MTe=n(XBe,"STRONG",{});var g3t=s(MTe);qxr=r(g3t,"electra"),g3t.forEach(t),Nxr=r(XBe," \u2014 "),jJ=n(XBe,"A",{href:!0});var h3t=s(jJ);jxr=r(h3t,"FlaxElectraForMaskedLM"),h3t.forEach(t),Dxr=r(XBe," (ELECTRA model)"),XBe.forEach(t),Gxr=i(Be),n3=n(Be,"LI",{});var zBe=s(n3);ETe=n(zBe,"STRONG",{});var p3t=s(ETe);Oxr=r(p3t,"mbart"),p3t.forEach(t),Vxr=r(zBe," \u2014 "),DJ=n(zBe,"A",{href:!0});var u3t=s(DJ);Xxr=r(u3t,"FlaxMBartForConditionalGeneration"),u3t.forEach(t),zxr=r(zBe," (mBART model)"),zBe.forEach(t),Qxr=i(Be),s3=n(Be,"LI",{});var QBe=s(s3);CTe=n(QBe,"STRONG",{});var _3t=s(CTe);Wxr=r(_3t,"roberta"),_3t.forEach(t),Hxr=r(QBe," \u2014 "),GJ=n(QBe,"A",{href:!0});var b3t=s(GJ);Uxr=r(b3t,"FlaxRobertaForMaskedLM"),b3t.forEach(t),Jxr=r(QBe," (RoBERTa model)"),QBe.forEach(t),Yxr=i(Be),l3=n(Be,"LI",{});var WBe=s(l3);wTe=n(WBe,"STRONG",{});var v3t=s(wTe);Kxr=r(v3t,"roformer"),v3t.forEach(t),Zxr=r(WBe," \u2014 "),OJ=n(WBe,"A",{href:!0});var F3t=s(OJ);e9r=r(F3t,"FlaxRoFormerForMaskedLM"),F3t.forEach(t),o9r=r(WBe," (RoFormer model)"),WBe.forEach(t),r9r=i(Be),i3=n(Be,"LI",{});var HBe=s(i3);ATe=n(HBe,"STRONG",{});var T3t=s(ATe);t9r=r(T3t,"xlm-roberta"),T3t.forEach(t),a9r=r(HBe," \u2014 "),VJ=n(HBe,"A",{href:!0});var M3t=s(VJ);n9r=r(M3t,"FlaxXLMRobertaForMaskedLM"),M3t.forEach(t),s9r=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Be.forEach(t),l9r=i(zl),T(d3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),kqe=i(f),jc=n(f,"H2",{class:!0});var Nje=s(jc);c3=n(Nje,"A",{id:!0,class:!0,href:!0});var E3t=s(c3);yTe=n(E3t,"SPAN",{});var C3t=s(yTe);T(px.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),i9r=i(Nje),LTe=n(Nje,"SPAN",{});var w3t=s(LTe);d9r=r(w3t,"FlaxAutoModelForSeq2SeqLM"),w3t.forEach(t),Nje.forEach(t),Sqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(ux.$$.fragment,Ql),c9r=i(Ql),Dc=n(Ql,"P",{});var DZ=s(Dc);f9r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XJ=n(DZ,"A",{href:!0});var A3t=s(XJ);m9r=r(A3t,"from_pretrained()"),A3t.forEach(t),g9r=r(DZ," class method or the "),zJ=n(DZ,"A",{href:!0});var y3t=s(zJ);h9r=r(y3t,"from_config()"),y3t.forEach(t),p9r=r(DZ,` class
method.`),DZ.forEach(t),u9r=i(Ql),_x=n(Ql,"P",{});var jje=s(_x);_9r=r(jje,"This class cannot be instantiated directly using "),xTe=n(jje,"CODE",{});var L3t=s(xTe);b9r=r(L3t,"__init__()"),L3t.forEach(t),v9r=r(jje," (throws an error)."),jje.forEach(t),F9r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var k6=s(Vt);T(bx.$$.fragment,k6),T9r=i(k6),$Te=n(k6,"P",{});var x3t=s($Te);M9r=r(x3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x3t.forEach(t),E9r=i(k6),Gc=n(k6,"P",{});var GZ=s(Gc);C9r=r(GZ,`Note:
Loading a model from its configuration file does `),kTe=n(GZ,"STRONG",{});var $3t=s(kTe);w9r=r($3t,"not"),$3t.forEach(t),A9r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(GZ,"A",{href:!0});var k3t=s(QJ);y9r=r(k3t,"from_pretrained()"),k3t.forEach(t),L9r=r(GZ," to load the model weights."),GZ.forEach(t),x9r=i(k6),T(f3.$$.fragment,k6),k6.forEach(t),$9r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(vx.$$.fragment,Wl),k9r=i(Wl),STe=n(Wl,"P",{});var S3t=s(STe);S9r=r(S3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S3t.forEach(t),R9r=i(Wl),_n=n(Wl,"P",{});var S6=s(_n);B9r=r(S6,"The model class to instantiate is selected based on the "),RTe=n(S6,"CODE",{});var R3t=s(RTe);P9r=r(R3t,"model_type"),R3t.forEach(t),I9r=r(S6,` property of the config object (either
passed as an argument or loaded from `),BTe=n(S6,"CODE",{});var B3t=s(BTe);q9r=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),N9r=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(S6,"CODE",{});var P3t=s(PTe);j9r=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),D9r=r(S6,":"),S6.forEach(t),G9r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);m3=n(Ve,"LI",{});var UBe=s(m3);ITe=n(UBe,"STRONG",{});var I3t=s(ITe);O9r=r(I3t,"bart"),I3t.forEach(t),V9r=r(UBe," \u2014 "),WJ=n(UBe,"A",{href:!0});var q3t=s(WJ);X9r=r(q3t,"FlaxBartForConditionalGeneration"),q3t.forEach(t),z9r=r(UBe," (BART model)"),UBe.forEach(t),Q9r=i(Ve),g3=n(Ve,"LI",{});var JBe=s(g3);qTe=n(JBe,"STRONG",{});var N3t=s(qTe);W9r=r(N3t,"blenderbot"),N3t.forEach(t),H9r=r(JBe," \u2014 "),HJ=n(JBe,"A",{href:!0});var j3t=s(HJ);U9r=r(j3t,"FlaxBlenderbotForConditionalGeneration"),j3t.forEach(t),J9r=r(JBe," (Blenderbot model)"),JBe.forEach(t),Y9r=i(Ve),h3=n(Ve,"LI",{});var YBe=s(h3);NTe=n(YBe,"STRONG",{});var D3t=s(NTe);K9r=r(D3t,"blenderbot-small"),D3t.forEach(t),Z9r=r(YBe," \u2014 "),UJ=n(YBe,"A",{href:!0});var G3t=s(UJ);e$r=r(G3t,"FlaxBlenderbotSmallForConditionalGeneration"),G3t.forEach(t),o$r=r(YBe," (BlenderbotSmall model)"),YBe.forEach(t),r$r=i(Ve),p3=n(Ve,"LI",{});var KBe=s(p3);jTe=n(KBe,"STRONG",{});var O3t=s(jTe);t$r=r(O3t,"encoder-decoder"),O3t.forEach(t),a$r=r(KBe," \u2014 "),JJ=n(KBe,"A",{href:!0});var V3t=s(JJ);n$r=r(V3t,"FlaxEncoderDecoderModel"),V3t.forEach(t),s$r=r(KBe," (Encoder decoder model)"),KBe.forEach(t),l$r=i(Ve),u3=n(Ve,"LI",{});var ZBe=s(u3);DTe=n(ZBe,"STRONG",{});var X3t=s(DTe);i$r=r(X3t,"marian"),X3t.forEach(t),d$r=r(ZBe," \u2014 "),YJ=n(ZBe,"A",{href:!0});var z3t=s(YJ);c$r=r(z3t,"FlaxMarianMTModel"),z3t.forEach(t),f$r=r(ZBe," (Marian model)"),ZBe.forEach(t),m$r=i(Ve),_3=n(Ve,"LI",{});var ePe=s(_3);GTe=n(ePe,"STRONG",{});var Q3t=s(GTe);g$r=r(Q3t,"mbart"),Q3t.forEach(t),h$r=r(ePe," \u2014 "),KJ=n(ePe,"A",{href:!0});var W3t=s(KJ);p$r=r(W3t,"FlaxMBartForConditionalGeneration"),W3t.forEach(t),u$r=r(ePe," (mBART model)"),ePe.forEach(t),_$r=i(Ve),b3=n(Ve,"LI",{});var oPe=s(b3);OTe=n(oPe,"STRONG",{});var H3t=s(OTe);b$r=r(H3t,"mt5"),H3t.forEach(t),v$r=r(oPe," \u2014 "),ZJ=n(oPe,"A",{href:!0});var U3t=s(ZJ);F$r=r(U3t,"FlaxMT5ForConditionalGeneration"),U3t.forEach(t),T$r=r(oPe," (mT5 model)"),oPe.forEach(t),M$r=i(Ve),v3=n(Ve,"LI",{});var rPe=s(v3);VTe=n(rPe,"STRONG",{});var J3t=s(VTe);E$r=r(J3t,"pegasus"),J3t.forEach(t),C$r=r(rPe," \u2014 "),eY=n(rPe,"A",{href:!0});var Y3t=s(eY);w$r=r(Y3t,"FlaxPegasusForConditionalGeneration"),Y3t.forEach(t),A$r=r(rPe," (Pegasus model)"),rPe.forEach(t),y$r=i(Ve),F3=n(Ve,"LI",{});var tPe=s(F3);XTe=n(tPe,"STRONG",{});var K3t=s(XTe);L$r=r(K3t,"t5"),K3t.forEach(t),x$r=r(tPe," \u2014 "),oY=n(tPe,"A",{href:!0});var Z3t=s(oY);$$r=r(Z3t,"FlaxT5ForConditionalGeneration"),Z3t.forEach(t),k$r=r(tPe," (T5 model)"),tPe.forEach(t),Ve.forEach(t),S$r=i(Wl),T(T3.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Rqe=i(f),Oc=n(f,"H2",{class:!0});var Dje=s(Oc);M3=n(Dje,"A",{id:!0,class:!0,href:!0});var ewt=s(M3);zTe=n(ewt,"SPAN",{});var owt=s(zTe);T(Fx.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),R$r=i(Dje),QTe=n(Dje,"SPAN",{});var rwt=s(QTe);B$r=r(rwt,"FlaxAutoModelForSequenceClassification"),rwt.forEach(t),Dje.forEach(t),Bqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(Tx.$$.fragment,Hl),P$r=i(Hl),Vc=n(Hl,"P",{});var OZ=s(Vc);I$r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=n(OZ,"A",{href:!0});var twt=s(rY);q$r=r(twt,"from_pretrained()"),twt.forEach(t),N$r=r(OZ," class method or the "),tY=n(OZ,"A",{href:!0});var awt=s(tY);j$r=r(awt,"from_config()"),awt.forEach(t),D$r=r(OZ,` class
method.`),OZ.forEach(t),G$r=i(Hl),Mx=n(Hl,"P",{});var Gje=s(Mx);O$r=r(Gje,"This class cannot be instantiated directly using "),WTe=n(Gje,"CODE",{});var nwt=s(WTe);V$r=r(nwt,"__init__()"),nwt.forEach(t),X$r=r(Gje," (throws an error)."),Gje.forEach(t),z$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var R6=s(Xt);T(Ex.$$.fragment,R6),Q$r=i(R6),HTe=n(R6,"P",{});var swt=s(HTe);W$r=r(swt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),swt.forEach(t),H$r=i(R6),Xc=n(R6,"P",{});var VZ=s(Xc);U$r=r(VZ,`Note:
Loading a model from its configuration file does `),UTe=n(VZ,"STRONG",{});var lwt=s(UTe);J$r=r(lwt,"not"),lwt.forEach(t),Y$r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(VZ,"A",{href:!0});var iwt=s(aY);K$r=r(iwt,"from_pretrained()"),iwt.forEach(t),Z$r=r(VZ," to load the model weights."),VZ.forEach(t),ekr=i(R6),T(E3.$$.fragment,R6),R6.forEach(t),okr=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(Cx.$$.fragment,Ul),rkr=i(Ul),JTe=n(Ul,"P",{});var dwt=s(JTe);tkr=r(dwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dwt.forEach(t),akr=i(Ul),bn=n(Ul,"P",{});var B6=s(bn);nkr=r(B6,"The model class to instantiate is selected based on the "),YTe=n(B6,"CODE",{});var cwt=s(YTe);skr=r(cwt,"model_type"),cwt.forEach(t),lkr=r(B6,` property of the config object (either
passed as an argument or loaded from `),KTe=n(B6,"CODE",{});var fwt=s(KTe);ikr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),dkr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(B6,"CODE",{});var mwt=s(ZTe);ckr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),fkr=r(B6,":"),B6.forEach(t),mkr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);C3=n(Pe,"LI",{});var aPe=s(C3);e7e=n(aPe,"STRONG",{});var gwt=s(e7e);gkr=r(gwt,"albert"),gwt.forEach(t),hkr=r(aPe," \u2014 "),nY=n(aPe,"A",{href:!0});var hwt=s(nY);pkr=r(hwt,"FlaxAlbertForSequenceClassification"),hwt.forEach(t),ukr=r(aPe," (ALBERT model)"),aPe.forEach(t),_kr=i(Pe),w3=n(Pe,"LI",{});var nPe=s(w3);o7e=n(nPe,"STRONG",{});var pwt=s(o7e);bkr=r(pwt,"bart"),pwt.forEach(t),vkr=r(nPe," \u2014 "),sY=n(nPe,"A",{href:!0});var uwt=s(sY);Fkr=r(uwt,"FlaxBartForSequenceClassification"),uwt.forEach(t),Tkr=r(nPe," (BART model)"),nPe.forEach(t),Mkr=i(Pe),A3=n(Pe,"LI",{});var sPe=s(A3);r7e=n(sPe,"STRONG",{});var _wt=s(r7e);Ekr=r(_wt,"bert"),_wt.forEach(t),Ckr=r(sPe," \u2014 "),lY=n(sPe,"A",{href:!0});var bwt=s(lY);wkr=r(bwt,"FlaxBertForSequenceClassification"),bwt.forEach(t),Akr=r(sPe," (BERT model)"),sPe.forEach(t),ykr=i(Pe),y3=n(Pe,"LI",{});var lPe=s(y3);t7e=n(lPe,"STRONG",{});var vwt=s(t7e);Lkr=r(vwt,"big_bird"),vwt.forEach(t),xkr=r(lPe," \u2014 "),iY=n(lPe,"A",{href:!0});var Fwt=s(iY);$kr=r(Fwt,"FlaxBigBirdForSequenceClassification"),Fwt.forEach(t),kkr=r(lPe," (BigBird model)"),lPe.forEach(t),Skr=i(Pe),L3=n(Pe,"LI",{});var iPe=s(L3);a7e=n(iPe,"STRONG",{});var Twt=s(a7e);Rkr=r(Twt,"distilbert"),Twt.forEach(t),Bkr=r(iPe," \u2014 "),dY=n(iPe,"A",{href:!0});var Mwt=s(dY);Pkr=r(Mwt,"FlaxDistilBertForSequenceClassification"),Mwt.forEach(t),Ikr=r(iPe," (DistilBERT model)"),iPe.forEach(t),qkr=i(Pe),x3=n(Pe,"LI",{});var dPe=s(x3);n7e=n(dPe,"STRONG",{});var Ewt=s(n7e);Nkr=r(Ewt,"electra"),Ewt.forEach(t),jkr=r(dPe," \u2014 "),cY=n(dPe,"A",{href:!0});var Cwt=s(cY);Dkr=r(Cwt,"FlaxElectraForSequenceClassification"),Cwt.forEach(t),Gkr=r(dPe," (ELECTRA model)"),dPe.forEach(t),Okr=i(Pe),$3=n(Pe,"LI",{});var cPe=s($3);s7e=n(cPe,"STRONG",{});var wwt=s(s7e);Vkr=r(wwt,"mbart"),wwt.forEach(t),Xkr=r(cPe," \u2014 "),fY=n(cPe,"A",{href:!0});var Awt=s(fY);zkr=r(Awt,"FlaxMBartForSequenceClassification"),Awt.forEach(t),Qkr=r(cPe," (mBART model)"),cPe.forEach(t),Wkr=i(Pe),k3=n(Pe,"LI",{});var fPe=s(k3);l7e=n(fPe,"STRONG",{});var ywt=s(l7e);Hkr=r(ywt,"roberta"),ywt.forEach(t),Ukr=r(fPe," \u2014 "),mY=n(fPe,"A",{href:!0});var Lwt=s(mY);Jkr=r(Lwt,"FlaxRobertaForSequenceClassification"),Lwt.forEach(t),Ykr=r(fPe," (RoBERTa model)"),fPe.forEach(t),Kkr=i(Pe),S3=n(Pe,"LI",{});var mPe=s(S3);i7e=n(mPe,"STRONG",{});var xwt=s(i7e);Zkr=r(xwt,"roformer"),xwt.forEach(t),eSr=r(mPe," \u2014 "),gY=n(mPe,"A",{href:!0});var $wt=s(gY);oSr=r($wt,"FlaxRoFormerForSequenceClassification"),$wt.forEach(t),rSr=r(mPe," (RoFormer model)"),mPe.forEach(t),tSr=i(Pe),R3=n(Pe,"LI",{});var gPe=s(R3);d7e=n(gPe,"STRONG",{});var kwt=s(d7e);aSr=r(kwt,"xlm-roberta"),kwt.forEach(t),nSr=r(gPe," \u2014 "),hY=n(gPe,"A",{href:!0});var Swt=s(hY);sSr=r(Swt,"FlaxXLMRobertaForSequenceClassification"),Swt.forEach(t),lSr=r(gPe," (XLM-RoBERTa model)"),gPe.forEach(t),Pe.forEach(t),iSr=i(Ul),T(B3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Pqe=i(f),zc=n(f,"H2",{class:!0});var Oje=s(zc);P3=n(Oje,"A",{id:!0,class:!0,href:!0});var Rwt=s(P3);c7e=n(Rwt,"SPAN",{});var Bwt=s(c7e);T(wx.$$.fragment,Bwt),Bwt.forEach(t),Rwt.forEach(t),dSr=i(Oje),f7e=n(Oje,"SPAN",{});var Pwt=s(f7e);cSr=r(Pwt,"FlaxAutoModelForQuestionAnswering"),Pwt.forEach(t),Oje.forEach(t),Iqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Ax.$$.fragment,Jl),fSr=i(Jl),Qc=n(Jl,"P",{});var XZ=s(Qc);mSr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pY=n(XZ,"A",{href:!0});var Iwt=s(pY);gSr=r(Iwt,"from_pretrained()"),Iwt.forEach(t),hSr=r(XZ," class method or the "),uY=n(XZ,"A",{href:!0});var qwt=s(uY);pSr=r(qwt,"from_config()"),qwt.forEach(t),uSr=r(XZ,` class
method.`),XZ.forEach(t),_Sr=i(Jl),yx=n(Jl,"P",{});var Vje=s(yx);bSr=r(Vje,"This class cannot be instantiated directly using "),m7e=n(Vje,"CODE",{});var Nwt=s(m7e);vSr=r(Nwt,"__init__()"),Nwt.forEach(t),FSr=r(Vje," (throws an error)."),Vje.forEach(t),TSr=i(Jl),zt=n(Jl,"DIV",{class:!0});var P6=s(zt);T(Lx.$$.fragment,P6),MSr=i(P6),g7e=n(P6,"P",{});var jwt=s(g7e);ESr=r(jwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jwt.forEach(t),CSr=i(P6),Wc=n(P6,"P",{});var zZ=s(Wc);wSr=r(zZ,`Note:
Loading a model from its configuration file does `),h7e=n(zZ,"STRONG",{});var Dwt=s(h7e);ASr=r(Dwt,"not"),Dwt.forEach(t),ySr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(zZ,"A",{href:!0});var Gwt=s(_Y);LSr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),xSr=r(zZ," to load the model weights."),zZ.forEach(t),$Sr=i(P6),T(I3.$$.fragment,P6),P6.forEach(t),kSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(xx.$$.fragment,Yl),SSr=i(Yl),p7e=n(Yl,"P",{});var Owt=s(p7e);RSr=r(Owt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Owt.forEach(t),BSr=i(Yl),vn=n(Yl,"P",{});var I6=s(vn);PSr=r(I6,"The model class to instantiate is selected based on the "),u7e=n(I6,"CODE",{});var Vwt=s(u7e);ISr=r(Vwt,"model_type"),Vwt.forEach(t),qSr=r(I6,` property of the config object (either
passed as an argument or loaded from `),_7e=n(I6,"CODE",{});var Xwt=s(_7e);NSr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),jSr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(I6,"CODE",{});var zwt=s(b7e);DSr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),GSr=r(I6,":"),I6.forEach(t),OSr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);q3=n(Ie,"LI",{});var hPe=s(q3);v7e=n(hPe,"STRONG",{});var Qwt=s(v7e);VSr=r(Qwt,"albert"),Qwt.forEach(t),XSr=r(hPe," \u2014 "),bY=n(hPe,"A",{href:!0});var Wwt=s(bY);zSr=r(Wwt,"FlaxAlbertForQuestionAnswering"),Wwt.forEach(t),QSr=r(hPe," (ALBERT model)"),hPe.forEach(t),WSr=i(Ie),N3=n(Ie,"LI",{});var pPe=s(N3);F7e=n(pPe,"STRONG",{});var Hwt=s(F7e);HSr=r(Hwt,"bart"),Hwt.forEach(t),USr=r(pPe," \u2014 "),vY=n(pPe,"A",{href:!0});var Uwt=s(vY);JSr=r(Uwt,"FlaxBartForQuestionAnswering"),Uwt.forEach(t),YSr=r(pPe," (BART model)"),pPe.forEach(t),KSr=i(Ie),j3=n(Ie,"LI",{});var uPe=s(j3);T7e=n(uPe,"STRONG",{});var Jwt=s(T7e);ZSr=r(Jwt,"bert"),Jwt.forEach(t),eRr=r(uPe," \u2014 "),FY=n(uPe,"A",{href:!0});var Ywt=s(FY);oRr=r(Ywt,"FlaxBertForQuestionAnswering"),Ywt.forEach(t),rRr=r(uPe," (BERT model)"),uPe.forEach(t),tRr=i(Ie),D3=n(Ie,"LI",{});var _Pe=s(D3);M7e=n(_Pe,"STRONG",{});var Kwt=s(M7e);aRr=r(Kwt,"big_bird"),Kwt.forEach(t),nRr=r(_Pe," \u2014 "),TY=n(_Pe,"A",{href:!0});var Zwt=s(TY);sRr=r(Zwt,"FlaxBigBirdForQuestionAnswering"),Zwt.forEach(t),lRr=r(_Pe," (BigBird model)"),_Pe.forEach(t),iRr=i(Ie),G3=n(Ie,"LI",{});var bPe=s(G3);E7e=n(bPe,"STRONG",{});var eAt=s(E7e);dRr=r(eAt,"distilbert"),eAt.forEach(t),cRr=r(bPe," \u2014 "),MY=n(bPe,"A",{href:!0});var oAt=s(MY);fRr=r(oAt,"FlaxDistilBertForQuestionAnswering"),oAt.forEach(t),mRr=r(bPe," (DistilBERT model)"),bPe.forEach(t),gRr=i(Ie),O3=n(Ie,"LI",{});var vPe=s(O3);C7e=n(vPe,"STRONG",{});var rAt=s(C7e);hRr=r(rAt,"electra"),rAt.forEach(t),pRr=r(vPe," \u2014 "),EY=n(vPe,"A",{href:!0});var tAt=s(EY);uRr=r(tAt,"FlaxElectraForQuestionAnswering"),tAt.forEach(t),_Rr=r(vPe," (ELECTRA model)"),vPe.forEach(t),bRr=i(Ie),V3=n(Ie,"LI",{});var FPe=s(V3);w7e=n(FPe,"STRONG",{});var aAt=s(w7e);vRr=r(aAt,"mbart"),aAt.forEach(t),FRr=r(FPe," \u2014 "),CY=n(FPe,"A",{href:!0});var nAt=s(CY);TRr=r(nAt,"FlaxMBartForQuestionAnswering"),nAt.forEach(t),MRr=r(FPe," (mBART model)"),FPe.forEach(t),ERr=i(Ie),X3=n(Ie,"LI",{});var TPe=s(X3);A7e=n(TPe,"STRONG",{});var sAt=s(A7e);CRr=r(sAt,"roberta"),sAt.forEach(t),wRr=r(TPe," \u2014 "),wY=n(TPe,"A",{href:!0});var lAt=s(wY);ARr=r(lAt,"FlaxRobertaForQuestionAnswering"),lAt.forEach(t),yRr=r(TPe," (RoBERTa model)"),TPe.forEach(t),LRr=i(Ie),z3=n(Ie,"LI",{});var MPe=s(z3);y7e=n(MPe,"STRONG",{});var iAt=s(y7e);xRr=r(iAt,"roformer"),iAt.forEach(t),$Rr=r(MPe," \u2014 "),AY=n(MPe,"A",{href:!0});var dAt=s(AY);kRr=r(dAt,"FlaxRoFormerForQuestionAnswering"),dAt.forEach(t),SRr=r(MPe," (RoFormer model)"),MPe.forEach(t),RRr=i(Ie),Q3=n(Ie,"LI",{});var EPe=s(Q3);L7e=n(EPe,"STRONG",{});var cAt=s(L7e);BRr=r(cAt,"xlm-roberta"),cAt.forEach(t),PRr=r(EPe," \u2014 "),yY=n(EPe,"A",{href:!0});var fAt=s(yY);IRr=r(fAt,"FlaxXLMRobertaForQuestionAnswering"),fAt.forEach(t),qRr=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),Ie.forEach(t),NRr=i(Yl),T(W3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),qqe=i(f),Hc=n(f,"H2",{class:!0});var Xje=s(Hc);H3=n(Xje,"A",{id:!0,class:!0,href:!0});var mAt=s(H3);x7e=n(mAt,"SPAN",{});var gAt=s(x7e);T($x.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),jRr=i(Xje),$7e=n(Xje,"SPAN",{});var hAt=s($7e);DRr=r(hAt,"FlaxAutoModelForTokenClassification"),hAt.forEach(t),Xje.forEach(t),Nqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(kx.$$.fragment,Kl),GRr=i(Kl),Uc=n(Kl,"P",{});var QZ=s(Uc);ORr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LY=n(QZ,"A",{href:!0});var pAt=s(LY);VRr=r(pAt,"from_pretrained()"),pAt.forEach(t),XRr=r(QZ," class method or the "),xY=n(QZ,"A",{href:!0});var uAt=s(xY);zRr=r(uAt,"from_config()"),uAt.forEach(t),QRr=r(QZ,` class
method.`),QZ.forEach(t),WRr=i(Kl),Sx=n(Kl,"P",{});var zje=s(Sx);HRr=r(zje,"This class cannot be instantiated directly using "),k7e=n(zje,"CODE",{});var _At=s(k7e);URr=r(_At,"__init__()"),_At.forEach(t),JRr=r(zje," (throws an error)."),zje.forEach(t),YRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var q6=s(Qt);T(Rx.$$.fragment,q6),KRr=i(q6),S7e=n(q6,"P",{});var bAt=s(S7e);ZRr=r(bAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bAt.forEach(t),eBr=i(q6),Jc=n(q6,"P",{});var WZ=s(Jc);oBr=r(WZ,`Note:
Loading a model from its configuration file does `),R7e=n(WZ,"STRONG",{});var vAt=s(R7e);rBr=r(vAt,"not"),vAt.forEach(t),tBr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(WZ,"A",{href:!0});var FAt=s($Y);aBr=r(FAt,"from_pretrained()"),FAt.forEach(t),nBr=r(WZ," to load the model weights."),WZ.forEach(t),sBr=i(q6),T(U3.$$.fragment,q6),q6.forEach(t),lBr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(Bx.$$.fragment,Zl),iBr=i(Zl),B7e=n(Zl,"P",{});var TAt=s(B7e);dBr=r(TAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TAt.forEach(t),cBr=i(Zl),Fn=n(Zl,"P",{});var N6=s(Fn);fBr=r(N6,"The model class to instantiate is selected based on the "),P7e=n(N6,"CODE",{});var MAt=s(P7e);mBr=r(MAt,"model_type"),MAt.forEach(t),gBr=r(N6,` property of the config object (either
passed as an argument or loaded from `),I7e=n(N6,"CODE",{});var EAt=s(I7e);hBr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),pBr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(N6,"CODE",{});var CAt=s(q7e);uBr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),_Br=r(N6,":"),N6.forEach(t),bBr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);J3=n(Fo,"LI",{});var CPe=s(J3);N7e=n(CPe,"STRONG",{});var wAt=s(N7e);vBr=r(wAt,"albert"),wAt.forEach(t),FBr=r(CPe," \u2014 "),kY=n(CPe,"A",{href:!0});var AAt=s(kY);TBr=r(AAt,"FlaxAlbertForTokenClassification"),AAt.forEach(t),MBr=r(CPe," (ALBERT model)"),CPe.forEach(t),EBr=i(Fo),Y3=n(Fo,"LI",{});var wPe=s(Y3);j7e=n(wPe,"STRONG",{});var yAt=s(j7e);CBr=r(yAt,"bert"),yAt.forEach(t),wBr=r(wPe," \u2014 "),SY=n(wPe,"A",{href:!0});var LAt=s(SY);ABr=r(LAt,"FlaxBertForTokenClassification"),LAt.forEach(t),yBr=r(wPe," (BERT model)"),wPe.forEach(t),LBr=i(Fo),K3=n(Fo,"LI",{});var APe=s(K3);D7e=n(APe,"STRONG",{});var xAt=s(D7e);xBr=r(xAt,"big_bird"),xAt.forEach(t),$Br=r(APe," \u2014 "),RY=n(APe,"A",{href:!0});var $At=s(RY);kBr=r($At,"FlaxBigBirdForTokenClassification"),$At.forEach(t),SBr=r(APe," (BigBird model)"),APe.forEach(t),RBr=i(Fo),Z3=n(Fo,"LI",{});var yPe=s(Z3);G7e=n(yPe,"STRONG",{});var kAt=s(G7e);BBr=r(kAt,"distilbert"),kAt.forEach(t),PBr=r(yPe," \u2014 "),BY=n(yPe,"A",{href:!0});var SAt=s(BY);IBr=r(SAt,"FlaxDistilBertForTokenClassification"),SAt.forEach(t),qBr=r(yPe," (DistilBERT model)"),yPe.forEach(t),NBr=i(Fo),ew=n(Fo,"LI",{});var LPe=s(ew);O7e=n(LPe,"STRONG",{});var RAt=s(O7e);jBr=r(RAt,"electra"),RAt.forEach(t),DBr=r(LPe," \u2014 "),PY=n(LPe,"A",{href:!0});var BAt=s(PY);GBr=r(BAt,"FlaxElectraForTokenClassification"),BAt.forEach(t),OBr=r(LPe," (ELECTRA model)"),LPe.forEach(t),VBr=i(Fo),ow=n(Fo,"LI",{});var xPe=s(ow);V7e=n(xPe,"STRONG",{});var PAt=s(V7e);XBr=r(PAt,"roberta"),PAt.forEach(t),zBr=r(xPe," \u2014 "),IY=n(xPe,"A",{href:!0});var IAt=s(IY);QBr=r(IAt,"FlaxRobertaForTokenClassification"),IAt.forEach(t),WBr=r(xPe," (RoBERTa model)"),xPe.forEach(t),HBr=i(Fo),rw=n(Fo,"LI",{});var $Pe=s(rw);X7e=n($Pe,"STRONG",{});var qAt=s(X7e);UBr=r(qAt,"roformer"),qAt.forEach(t),JBr=r($Pe," \u2014 "),qY=n($Pe,"A",{href:!0});var NAt=s(qY);YBr=r(NAt,"FlaxRoFormerForTokenClassification"),NAt.forEach(t),KBr=r($Pe," (RoFormer model)"),$Pe.forEach(t),ZBr=i(Fo),tw=n(Fo,"LI",{});var kPe=s(tw);z7e=n(kPe,"STRONG",{});var jAt=s(z7e);ePr=r(jAt,"xlm-roberta"),jAt.forEach(t),oPr=r(kPe," \u2014 "),NY=n(kPe,"A",{href:!0});var DAt=s(NY);rPr=r(DAt,"FlaxXLMRobertaForTokenClassification"),DAt.forEach(t),tPr=r(kPe," (XLM-RoBERTa model)"),kPe.forEach(t),Fo.forEach(t),aPr=i(Zl),T(aw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),jqe=i(f),Yc=n(f,"H2",{class:!0});var Qje=s(Yc);nw=n(Qje,"A",{id:!0,class:!0,href:!0});var GAt=s(nw);Q7e=n(GAt,"SPAN",{});var OAt=s(Q7e);T(Px.$$.fragment,OAt),OAt.forEach(t),GAt.forEach(t),nPr=i(Qje),W7e=n(Qje,"SPAN",{});var VAt=s(W7e);sPr=r(VAt,"FlaxAutoModelForMultipleChoice"),VAt.forEach(t),Qje.forEach(t),Dqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(Ix.$$.fragment,ei),lPr=i(ei),Kc=n(ei,"P",{});var HZ=s(Kc);iPr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jY=n(HZ,"A",{href:!0});var XAt=s(jY);dPr=r(XAt,"from_pretrained()"),XAt.forEach(t),cPr=r(HZ," class method or the "),DY=n(HZ,"A",{href:!0});var zAt=s(DY);fPr=r(zAt,"from_config()"),zAt.forEach(t),mPr=r(HZ,` class
method.`),HZ.forEach(t),gPr=i(ei),qx=n(ei,"P",{});var Wje=s(qx);hPr=r(Wje,"This class cannot be instantiated directly using "),H7e=n(Wje,"CODE",{});var QAt=s(H7e);pPr=r(QAt,"__init__()"),QAt.forEach(t),uPr=r(Wje," (throws an error)."),Wje.forEach(t),_Pr=i(ei),Wt=n(ei,"DIV",{class:!0});var j6=s(Wt);T(Nx.$$.fragment,j6),bPr=i(j6),U7e=n(j6,"P",{});var WAt=s(U7e);vPr=r(WAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WAt.forEach(t),FPr=i(j6),Zc=n(j6,"P",{});var UZ=s(Zc);TPr=r(UZ,`Note:
Loading a model from its configuration file does `),J7e=n(UZ,"STRONG",{});var HAt=s(J7e);MPr=r(HAt,"not"),HAt.forEach(t),EPr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(UZ,"A",{href:!0});var UAt=s(GY);CPr=r(UAt,"from_pretrained()"),UAt.forEach(t),wPr=r(UZ," to load the model weights."),UZ.forEach(t),APr=i(j6),T(sw.$$.fragment,j6),j6.forEach(t),yPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(jx.$$.fragment,oi),LPr=i(oi),Y7e=n(oi,"P",{});var JAt=s(Y7e);xPr=r(JAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JAt.forEach(t),$Pr=i(oi),Tn=n(oi,"P",{});var D6=s(Tn);kPr=r(D6,"The model class to instantiate is selected based on the "),K7e=n(D6,"CODE",{});var YAt=s(K7e);SPr=r(YAt,"model_type"),YAt.forEach(t),RPr=r(D6,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(D6,"CODE",{});var KAt=s(Z7e);BPr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),PPr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(D6,"CODE",{});var ZAt=s(eMe);IPr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),qPr=r(D6,":"),D6.forEach(t),NPr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);lw=n(To,"LI",{});var SPe=s(lw);oMe=n(SPe,"STRONG",{});var e6t=s(oMe);jPr=r(e6t,"albert"),e6t.forEach(t),DPr=r(SPe," \u2014 "),OY=n(SPe,"A",{href:!0});var o6t=s(OY);GPr=r(o6t,"FlaxAlbertForMultipleChoice"),o6t.forEach(t),OPr=r(SPe," (ALBERT model)"),SPe.forEach(t),VPr=i(To),iw=n(To,"LI",{});var RPe=s(iw);rMe=n(RPe,"STRONG",{});var r6t=s(rMe);XPr=r(r6t,"bert"),r6t.forEach(t),zPr=r(RPe," \u2014 "),VY=n(RPe,"A",{href:!0});var t6t=s(VY);QPr=r(t6t,"FlaxBertForMultipleChoice"),t6t.forEach(t),WPr=r(RPe," (BERT model)"),RPe.forEach(t),HPr=i(To),dw=n(To,"LI",{});var BPe=s(dw);tMe=n(BPe,"STRONG",{});var a6t=s(tMe);UPr=r(a6t,"big_bird"),a6t.forEach(t),JPr=r(BPe," \u2014 "),XY=n(BPe,"A",{href:!0});var n6t=s(XY);YPr=r(n6t,"FlaxBigBirdForMultipleChoice"),n6t.forEach(t),KPr=r(BPe," (BigBird model)"),BPe.forEach(t),ZPr=i(To),cw=n(To,"LI",{});var PPe=s(cw);aMe=n(PPe,"STRONG",{});var s6t=s(aMe);eIr=r(s6t,"distilbert"),s6t.forEach(t),oIr=r(PPe," \u2014 "),zY=n(PPe,"A",{href:!0});var l6t=s(zY);rIr=r(l6t,"FlaxDistilBertForMultipleChoice"),l6t.forEach(t),tIr=r(PPe," (DistilBERT model)"),PPe.forEach(t),aIr=i(To),fw=n(To,"LI",{});var IPe=s(fw);nMe=n(IPe,"STRONG",{});var i6t=s(nMe);nIr=r(i6t,"electra"),i6t.forEach(t),sIr=r(IPe," \u2014 "),QY=n(IPe,"A",{href:!0});var d6t=s(QY);lIr=r(d6t,"FlaxElectraForMultipleChoice"),d6t.forEach(t),iIr=r(IPe," (ELECTRA model)"),IPe.forEach(t),dIr=i(To),mw=n(To,"LI",{});var qPe=s(mw);sMe=n(qPe,"STRONG",{});var c6t=s(sMe);cIr=r(c6t,"roberta"),c6t.forEach(t),fIr=r(qPe," \u2014 "),WY=n(qPe,"A",{href:!0});var f6t=s(WY);mIr=r(f6t,"FlaxRobertaForMultipleChoice"),f6t.forEach(t),gIr=r(qPe," (RoBERTa model)"),qPe.forEach(t),hIr=i(To),gw=n(To,"LI",{});var NPe=s(gw);lMe=n(NPe,"STRONG",{});var m6t=s(lMe);pIr=r(m6t,"roformer"),m6t.forEach(t),uIr=r(NPe," \u2014 "),HY=n(NPe,"A",{href:!0});var g6t=s(HY);_Ir=r(g6t,"FlaxRoFormerForMultipleChoice"),g6t.forEach(t),bIr=r(NPe," (RoFormer model)"),NPe.forEach(t),vIr=i(To),hw=n(To,"LI",{});var jPe=s(hw);iMe=n(jPe,"STRONG",{});var h6t=s(iMe);FIr=r(h6t,"xlm-roberta"),h6t.forEach(t),TIr=r(jPe," \u2014 "),UY=n(jPe,"A",{href:!0});var p6t=s(UY);MIr=r(p6t,"FlaxXLMRobertaForMultipleChoice"),p6t.forEach(t),EIr=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),To.forEach(t),CIr=i(oi),T(pw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Gqe=i(f),ef=n(f,"H2",{class:!0});var Hje=s(ef);uw=n(Hje,"A",{id:!0,class:!0,href:!0});var u6t=s(uw);dMe=n(u6t,"SPAN",{});var _6t=s(dMe);T(Dx.$$.fragment,_6t),_6t.forEach(t),u6t.forEach(t),wIr=i(Hje),cMe=n(Hje,"SPAN",{});var b6t=s(cMe);AIr=r(b6t,"FlaxAutoModelForNextSentencePrediction"),b6t.forEach(t),Hje.forEach(t),Oqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Gx.$$.fragment,ri),yIr=i(ri),of=n(ri,"P",{});var JZ=s(of);LIr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JY=n(JZ,"A",{href:!0});var v6t=s(JY);xIr=r(v6t,"from_pretrained()"),v6t.forEach(t),$Ir=r(JZ," class method or the "),YY=n(JZ,"A",{href:!0});var F6t=s(YY);kIr=r(F6t,"from_config()"),F6t.forEach(t),SIr=r(JZ,` class
method.`),JZ.forEach(t),RIr=i(ri),Ox=n(ri,"P",{});var Uje=s(Ox);BIr=r(Uje,"This class cannot be instantiated directly using "),fMe=n(Uje,"CODE",{});var T6t=s(fMe);PIr=r(T6t,"__init__()"),T6t.forEach(t),IIr=r(Uje," (throws an error)."),Uje.forEach(t),qIr=i(ri),Ht=n(ri,"DIV",{class:!0});var G6=s(Ht);T(Vx.$$.fragment,G6),NIr=i(G6),mMe=n(G6,"P",{});var M6t=s(mMe);jIr=r(M6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M6t.forEach(t),DIr=i(G6),rf=n(G6,"P",{});var YZ=s(rf);GIr=r(YZ,`Note:
Loading a model from its configuration file does `),gMe=n(YZ,"STRONG",{});var E6t=s(gMe);OIr=r(E6t,"not"),E6t.forEach(t),VIr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(YZ,"A",{href:!0});var C6t=s(KY);XIr=r(C6t,"from_pretrained()"),C6t.forEach(t),zIr=r(YZ," to load the model weights."),YZ.forEach(t),QIr=i(G6),T(_w.$$.fragment,G6),G6.forEach(t),WIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Xx.$$.fragment,ti),HIr=i(ti),hMe=n(ti,"P",{});var w6t=s(hMe);UIr=r(w6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w6t.forEach(t),JIr=i(ti),Mn=n(ti,"P",{});var O6=s(Mn);YIr=r(O6,"The model class to instantiate is selected based on the "),pMe=n(O6,"CODE",{});var A6t=s(pMe);KIr=r(A6t,"model_type"),A6t.forEach(t),ZIr=r(O6,` property of the config object (either
passed as an argument or loaded from `),uMe=n(O6,"CODE",{});var y6t=s(uMe);eqr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),oqr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(O6,"CODE",{});var L6t=s(_Me);rqr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),tqr=r(O6,":"),O6.forEach(t),aqr=i(ti),bMe=n(ti,"UL",{});var x6t=s(bMe);bw=n(x6t,"LI",{});var DPe=s(bw);vMe=n(DPe,"STRONG",{});var $6t=s(vMe);nqr=r($6t,"bert"),$6t.forEach(t),sqr=r(DPe," \u2014 "),ZY=n(DPe,"A",{href:!0});var k6t=s(ZY);lqr=r(k6t,"FlaxBertForNextSentencePrediction"),k6t.forEach(t),iqr=r(DPe," (BERT model)"),DPe.forEach(t),x6t.forEach(t),dqr=i(ti),T(vw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Vqe=i(f),tf=n(f,"H2",{class:!0});var Jje=s(tf);Fw=n(Jje,"A",{id:!0,class:!0,href:!0});var S6t=s(Fw);FMe=n(S6t,"SPAN",{});var R6t=s(FMe);T(zx.$$.fragment,R6t),R6t.forEach(t),S6t.forEach(t),cqr=i(Jje),TMe=n(Jje,"SPAN",{});var B6t=s(TMe);fqr=r(B6t,"FlaxAutoModelForImageClassification"),B6t.forEach(t),Jje.forEach(t),Xqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Qx.$$.fragment,ai),mqr=i(ai),af=n(ai,"P",{});var KZ=s(af);gqr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eK=n(KZ,"A",{href:!0});var P6t=s(eK);hqr=r(P6t,"from_pretrained()"),P6t.forEach(t),pqr=r(KZ," class method or the "),oK=n(KZ,"A",{href:!0});var I6t=s(oK);uqr=r(I6t,"from_config()"),I6t.forEach(t),_qr=r(KZ,` class
method.`),KZ.forEach(t),bqr=i(ai),Wx=n(ai,"P",{});var Yje=s(Wx);vqr=r(Yje,"This class cannot be instantiated directly using "),MMe=n(Yje,"CODE",{});var q6t=s(MMe);Fqr=r(q6t,"__init__()"),q6t.forEach(t),Tqr=r(Yje," (throws an error)."),Yje.forEach(t),Mqr=i(ai),Ut=n(ai,"DIV",{class:!0});var V6=s(Ut);T(Hx.$$.fragment,V6),Eqr=i(V6),EMe=n(V6,"P",{});var N6t=s(EMe);Cqr=r(N6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N6t.forEach(t),wqr=i(V6),nf=n(V6,"P",{});var ZZ=s(nf);Aqr=r(ZZ,`Note:
Loading a model from its configuration file does `),CMe=n(ZZ,"STRONG",{});var j6t=s(CMe);yqr=r(j6t,"not"),j6t.forEach(t),Lqr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(ZZ,"A",{href:!0});var D6t=s(rK);xqr=r(D6t,"from_pretrained()"),D6t.forEach(t),$qr=r(ZZ," to load the model weights."),ZZ.forEach(t),kqr=i(V6),T(Tw.$$.fragment,V6),V6.forEach(t),Sqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Ux.$$.fragment,ni),Rqr=i(ni),wMe=n(ni,"P",{});var G6t=s(wMe);Bqr=r(G6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G6t.forEach(t),Pqr=i(ni),En=n(ni,"P",{});var X6=s(En);Iqr=r(X6,"The model class to instantiate is selected based on the "),AMe=n(X6,"CODE",{});var O6t=s(AMe);qqr=r(O6t,"model_type"),O6t.forEach(t),Nqr=r(X6,` property of the config object (either
passed as an argument or loaded from `),yMe=n(X6,"CODE",{});var V6t=s(yMe);jqr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),Dqr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LMe=n(X6,"CODE",{});var X6t=s(LMe);Gqr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),Oqr=r(X6,":"),X6.forEach(t),Vqr=i(ni),Jx=n(ni,"UL",{});var Kje=s(Jx);Mw=n(Kje,"LI",{});var GPe=s(Mw);xMe=n(GPe,"STRONG",{});var z6t=s(xMe);Xqr=r(z6t,"beit"),z6t.forEach(t),zqr=r(GPe," \u2014 "),tK=n(GPe,"A",{href:!0});var Q6t=s(tK);Qqr=r(Q6t,"FlaxBeitForImageClassification"),Q6t.forEach(t),Wqr=r(GPe," (BEiT model)"),GPe.forEach(t),Hqr=i(Kje),Ew=n(Kje,"LI",{});var OPe=s(Ew);$Me=n(OPe,"STRONG",{});var W6t=s($Me);Uqr=r(W6t,"vit"),W6t.forEach(t),Jqr=r(OPe," \u2014 "),aK=n(OPe,"A",{href:!0});var H6t=s(aK);Yqr=r(H6t,"FlaxViTForImageClassification"),H6t.forEach(t),Kqr=r(OPe," (ViT model)"),OPe.forEach(t),Kje.forEach(t),Zqr=i(ni),T(Cw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),zqe=i(f),sf=n(f,"H2",{class:!0});var Zje=s(sf);ww=n(Zje,"A",{id:!0,class:!0,href:!0});var U6t=s(ww);kMe=n(U6t,"SPAN",{});var J6t=s(kMe);T(Yx.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),eNr=i(Zje),SMe=n(Zje,"SPAN",{});var Y6t=s(SMe);oNr=r(Y6t,"FlaxAutoModelForVision2Seq"),Y6t.forEach(t),Zje.forEach(t),Qqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(Kx.$$.fragment,si),rNr=i(si),lf=n(si,"P",{});var eee=s(lf);tNr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nK=n(eee,"A",{href:!0});var K6t=s(nK);aNr=r(K6t,"from_pretrained()"),K6t.forEach(t),nNr=r(eee," class method or the "),sK=n(eee,"A",{href:!0});var Z6t=s(sK);sNr=r(Z6t,"from_config()"),Z6t.forEach(t),lNr=r(eee,` class
method.`),eee.forEach(t),iNr=i(si),Zx=n(si,"P",{});var eDe=s(Zx);dNr=r(eDe,"This class cannot be instantiated directly using "),RMe=n(eDe,"CODE",{});var e0t=s(RMe);cNr=r(e0t,"__init__()"),e0t.forEach(t),fNr=r(eDe," (throws an error)."),eDe.forEach(t),mNr=i(si),Jt=n(si,"DIV",{class:!0});var z6=s(Jt);T(e9.$$.fragment,z6),gNr=i(z6),BMe=n(z6,"P",{});var o0t=s(BMe);hNr=r(o0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o0t.forEach(t),pNr=i(z6),df=n(z6,"P",{});var oee=s(df);uNr=r(oee,`Note:
Loading a model from its configuration file does `),PMe=n(oee,"STRONG",{});var r0t=s(PMe);_Nr=r(r0t,"not"),r0t.forEach(t),bNr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(oee,"A",{href:!0});var t0t=s(lK);vNr=r(t0t,"from_pretrained()"),t0t.forEach(t),FNr=r(oee," to load the model weights."),oee.forEach(t),TNr=i(z6),T(Aw.$$.fragment,z6),z6.forEach(t),MNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(o9.$$.fragment,li),ENr=i(li),IMe=n(li,"P",{});var a0t=s(IMe);CNr=r(a0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a0t.forEach(t),wNr=i(li),Cn=n(li,"P",{});var Q6=s(Cn);ANr=r(Q6,"The model class to instantiate is selected based on the "),qMe=n(Q6,"CODE",{});var n0t=s(qMe);yNr=r(n0t,"model_type"),n0t.forEach(t),LNr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),NMe=n(Q6,"CODE",{});var s0t=s(NMe);xNr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),$Nr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(Q6,"CODE",{});var l0t=s(jMe);kNr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),SNr=r(Q6,":"),Q6.forEach(t),RNr=i(li),DMe=n(li,"UL",{});var i0t=s(DMe);yw=n(i0t,"LI",{});var VPe=s(yw);GMe=n(VPe,"STRONG",{});var d0t=s(GMe);BNr=r(d0t,"vision-encoder-decoder"),d0t.forEach(t),PNr=r(VPe," \u2014 "),iK=n(VPe,"A",{href:!0});var c0t=s(iK);INr=r(c0t,"FlaxVisionEncoderDecoderModel"),c0t.forEach(t),qNr=r(VPe," (Vision Encoder decoder model)"),VPe.forEach(t),i0t.forEach(t),NNr=i(li),T(Lw.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(hLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(_f,"id","extending-the-auto-classes"),c(_f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_f,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(vf,"id","transformers.AutoConfig"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(T$,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(M$,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig"),c(E$,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(C$,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig"),c(w$,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig"),c(A$,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(y$,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig"),c(L$,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(x$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c($$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(k$,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig"),c(S$,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig"),c(R$,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig"),c(B$,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig"),c(P$,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig"),c(I$,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig"),c(q$,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(N$,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(j$,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(D$,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig"),c(G$,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(O$,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(V$,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig"),c(X$,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig"),c(z$,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Q$,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig"),c(W$,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig"),c(H$,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig"),c(U$,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(J$,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Y$,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig"),c(K$,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig"),c(Z$,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig"),c(ek,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig"),c(ok,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig"),c(rk,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config"),c(tk,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ak,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig"),c(nk,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig"),c(sk,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig"),c(lk,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ik,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ck,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig"),c(fk,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig"),c(mk,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig"),c(gk,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig"),c(hk,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config"),c(pk,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig"),c(uk,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_k,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig"),c(bk,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(vk,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Fk,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig"),c(Tk,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config"),c(Mk,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Ek,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ck,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig"),c(wk,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ak,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig"),c(yk,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig"),c(Lk,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(xk,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c($k,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(kk,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagConfig"),c(Sk,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmConfig"),c(Rk,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig"),c(Bk,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig"),c(Pk,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig"),c(Ik,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig"),c(qk,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig"),c(Nk,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig"),c(jk,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig"),c(Dk,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig"),c(Gk,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig"),c(Ok,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig"),c(Vk,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Xk,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(zk,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Qk,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig"),c(Wk,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Hk,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig"),c(Uk,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config"),c(Jk,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig"),c(Yk,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(Kk,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Zk,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig"),c(eS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(oS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(rS,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig"),c(tS,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig"),c(aS,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(nS,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(sS,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(lS,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig"),c(iS,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(dS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(cS,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig"),c(fS,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig"),c(mS,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig"),c(gS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(hS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(pS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(uS,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig"),c(_S,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig"),c(bS,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(vS,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(FS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(TS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizer"),c(ES,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizerFast"),c(CS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizer"),c(wS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(AS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(yS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizerFast"),c(LS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(xS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c($S,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(kS,"href","/docs/transformers/pr_17254/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(SS,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(RS,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(BS,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(PS,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(IS,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qS,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(NS,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(jS,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(DS,"href","/docs/transformers/pr_17254/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(GS,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizer"),c(OS,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineTokenizer"),c(XS,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(zS,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(QS,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(WS,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(HS,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizer"),c(US,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(JS,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(YS,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KS,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizer"),c(eR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(oR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(rR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(tR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(aR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(nR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(sR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(lR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizer"),c(iR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(dR,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(cR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizer"),c(fR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(mR,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(gR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizer"),c(hR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(pR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(uR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_R,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizer"),c(MR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(ER,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(yR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(LR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(xR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c($R,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(kR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(SR,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizer"),c(RR,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizerFast"),c(BR,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizer"),c(PR,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(IR,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeTokenizer"),c(qR,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(NR,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jR,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(DR,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianTokenizer"),c(GR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizer"),c(OR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(VR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(XR,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(zR,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(QR,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17254/en/model_doc/mluke#transformers.MLukeTokenizer"),c(HR,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(UR,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(JR,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(YR,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(KR,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5Tokenizer"),c(ZR,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5TokenizerFast"),c(eB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(oB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(tB,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(aB,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(sB,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(lB,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(iB,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizer"),c(dB,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartTokenizer"),c(cB,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(mB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagTokenizer"),c(hB,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizer"),c(pB,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizerFast"),c(uB,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_B,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(bB,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizer"),c(vB,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(TB,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(EB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CB,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(wB,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(AB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(yB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(LB,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizer"),c(xB,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c($B,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(kB,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5Tokenizer"),c(RB,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.T5TokenizerFast"),c(BB,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasTokenizer"),c(PB,"href","/docs/transformers/pr_17254/en/model_doc/tapex#transformers.TapexTokenizer"),c(IB,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(qB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(NB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(GB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizer"),c(OB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(VB,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMTokenizer"),c(XB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(zB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(QB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(WB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(UB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(JB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(YB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(KB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"id","transformers.AutoFeatureExtractor"),c(Yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(ZB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(eP,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aP,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(mP,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CP,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"id","transformers.AutoProcessor"),c(Ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ah,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(wP,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(AP,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(yP,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(LP,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RP,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRProcessor"),c(BP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltProcessor"),c(qP,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(NP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jP,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"id","transformers.AutoModel"),c(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(DP,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GP,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OP,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel"),c(XP,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel"),c(zP,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel"),c(QP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(WP,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(HP,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel"),c(UP,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(JP,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(YP,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(KP,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel"),c(ZP,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel"),c(eI,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel"),c(oI,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel"),c(rI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel"),c(tI,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel"),c(aI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(nI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(sI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(lI,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel"),c(iI,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(dI,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(cI,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel"),c(fI,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel"),c(mI,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel"),c(gI,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(hI,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel"),c(pI,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel"),c(uI,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel"),c(_I,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel"),c(bI,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel"),c(vI,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel"),c(FI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel"),c(TI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel"),c(MI,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel"),c(EI,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model"),c(CI,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(wI,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel"),c(AI,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel"),c(yI,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel"),c(LI,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(xI,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel"),c($I,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(kI,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel"),c(SI,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel"),c(RI,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel"),c(BI,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel"),c(PI,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c(II,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel"),c(qI,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel"),c(NI,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel"),c(jI,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(DI,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel"),c(GI,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel"),c(OI,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model"),c(VI,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel"),c(XI,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(zI,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel"),c(QI,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel"),c(WI,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel"),c(HI,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel"),c(UI,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel"),c(JI,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(YI,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel"),c(KI,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel"),c(ZI,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel"),c(eq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel"),c(oq,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel"),c(rq,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(tq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel"),c(aq,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel"),c(nq,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel"),c(sq,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel"),c(lq,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel"),c(iq,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(dq,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel"),c(cq,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(fq,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel"),c(mq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model"),c(gq,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel"),c(hq,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(pq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(_q,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel"),c(bq,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel"),c(vq,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Fq,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Tq,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel"),c(Mq,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Eq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Cq,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel"),c(wq,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel"),c(Aq,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel"),c(yq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Lq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(xq,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c($q,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel"),c(kq,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel"),c(Sq,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForPreTraining"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(Rq,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bq,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pq,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iq,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining"),c(qq,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining"),c(jq,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Dq,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Oq,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zq,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Wq,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Hq,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Uq,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Jq,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Yq,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Kq,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Zq,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rN,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(tN,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(aN,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(nN,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(sN,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(lN,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(iN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dN,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cN,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fN,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mN,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(hN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(pN,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(uN,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(_N,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(bN,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(FN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(TN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y_,"id","transformers.AutoModelForCausalLM"),c(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(MN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wN,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM"),c(AN,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel"),c(yN,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(LN,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(xN,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($N,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(kN,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(SN,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(RN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(BN,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(PN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM"),c(IN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qN,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(NN,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(jN,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM"),c(DN,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM"),c(GN,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ON,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VN,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM"),c(XN,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(zN,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(QN,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(WN,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(HN,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(UN,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(JN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(YN,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(KN,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(ZN,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ej,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(oj,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(rj,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(aj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(nj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(sj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g2,"id","transformers.AutoModelForMaskedLM"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(lj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ij,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cj,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(hj,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_j,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vj,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Mj,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yj,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c($j,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kj,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qj,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K2,"id","transformers.AutoModelForSeq2SeqLM"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Xj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Kj,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel"),c(rD,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v1,"id","transformers.AutoModelForSequenceClassification"),c(v1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v1,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(cD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gD,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c($D,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ub,"id","transformers.AutoModelForMultipleChoice"),c(ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ub,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(sG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForNextSentencePrediction"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(NG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(OG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a4,"id","transformers.AutoModelForTokenClassification"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(QG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KG,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification"),c(eO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(rO,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(tO,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(aO,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(sO,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(iO,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(dO,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(cO,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(mO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(gO,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(hO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_O,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(bO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(TO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(MO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(CO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(wO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(AO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(yO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.AutoModelForQuestionAnswering"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(LO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(zO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pV,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.AutoModelForTableQuestionAnswering"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(uV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_V,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vV,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.AutoModelForImageClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(FV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification"),c(CV,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(AV,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification"),c(yV,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(LV,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xV,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c($V,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(kV,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(SV,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(RV,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BV,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PV,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(IV,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification"),c(qV,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification"),c(NV,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.AutoModelForVision2Seq"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(jV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForAudioClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(VV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForAudioFrameClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(aX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForCTC"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(lX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC"),c(mX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC"),c(gX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC"),c(hX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(pX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(_X,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(bX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MX,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioXVector"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(EX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(yX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(LX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(xX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForMaskedImageModeling"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c($X,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(BX,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(PX,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForObjectDetection"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(IX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection"),c(DX,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForImageSegmentation"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(GX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForSemanticSegmentation"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(zX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(UX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(JX,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(YX,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForInstanceSegmentation"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(KX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.TFAutoModel"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel"),c(sz,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel"),c(lz,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel"),c(iz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(dz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(cz,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel"),c(fz,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel"),c(mz,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel"),c(gz,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel"),c(hz,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel"),c(pz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(uz,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel"),c(_z,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(bz,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(vz,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Fz,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel"),c(Tz,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Mz,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel"),c(Ez,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Cz,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model"),c(wz,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel"),c(Az,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel"),c(yz,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Lz,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel"),c(xz,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel"),c($z,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel"),c(kz,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel"),c(Sz,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel"),c(Rz,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Bz,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Pz,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model"),c(Iz,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(qz,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Nz,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel"),c(jz,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel"),c(Dz,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Gz,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Oz,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model"),c(Vz,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel"),c(Xz,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(zz,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel"),c(Qz,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Wz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Hz,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel"),c(Uz,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Jz,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.TFAutoModelForPreTraining"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(oQ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(rQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining"),c(tQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(lQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(dQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(cQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(mQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(gQ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(FQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.TFAutoModelForCausalLM"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(LQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($Q,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(kQ,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(RQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(BQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(PQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.TFAutoModelForImageClassification"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(OQ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(VQ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.TFAutoModelForMaskedLM"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModelForMaskedLM"),c(Yd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aW,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(sW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ec,"class","relative group"),c(gW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_W,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(FW,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel"),c(MW,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(EW,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForSequenceClassification"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForSequenceClassification"),c(tc,"class","relative group"),c(AW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForMultipleChoice"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForMultipleChoice"),c(sc,"class","relative group"),c(oH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(dc,"class","relative group"),c(TH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(wH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(AH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForTokenClassification"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c($H,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(PH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(IH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(qH,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(NH,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(jH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(DH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(GH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(VH,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(XH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(zH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(QH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(WH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(HH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(UH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(JH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(YH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(KH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForQuestionAnswering"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(bc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(fU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(FU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForVision2Seq"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForVision2Seq"),c(Tc,"class","relative group"),c(MU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Cc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModel"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModel"),c(yc,"class","relative group"),c($U,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel"),c(BU,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel"),c(PU,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel"),c(IU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel"),c(qU,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(NU,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(jU,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(DU,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel"),c(GU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(OU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel"),c(VU,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(XU,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(zU,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(QU,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel"),c(WU,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel"),c(HU,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model"),c(UU,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(JU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(YU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(KU,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model"),c(ZU,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(eJ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel"),c(oJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(rJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(tJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.FlaxAutoModelForCausalLM"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForCausalLM"),c($c,"class","relative group"),c(aJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(iJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(dJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(cJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(fJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(mJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(gJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(hJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(pJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForPreTraining"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Rc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(FJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(MJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(EJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(CJ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c($J,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForMaskedLM"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ic,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(jc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(YJ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(KJ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Oc,"class","relative group"),c(rY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(zc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForTokenClassification"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Hc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(RY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(BY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(IY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(qY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(NY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Yc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ef,"class","relative group"),c(JY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForImageClassification"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForImageClassification"),c(tf,"class","relative group"),c(eK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(aK,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForVision2Seq"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForVision2Seq"),c(sf,"class","relative group"),c(nK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,gf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,W6),e(et,hf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,An),e(An,H6),e(Xe,yn),e(Xe,Ln),e(Ln,U6),e(Xe,mi),e(Xe,xn),e(xn,J6),e(Xe,gi),b(f,pf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,p$),e(Ae,hi),e(hi,u$),e(Ae,_$),b(f,Eo,_),b(f,Ea,_),e(Ea,b$),e(Ea,uf),e(uf,v$),e(Ea,oDe),b(f,XPe,_),b(f,pi,_),e(pi,_f),e(_f,ree),M(Y6,ree,null),e(pi,rDe),e(pi,tee),e(tee,tDe),b(f,zPe,_),b(f,$n,_),e($n,aDe),e($n,aee),e(aee,nDe),e($n,sDe),e($n,nee),e(nee,lDe),e($n,iDe),b(f,QPe,_),M(K6,f,_),b(f,WPe,_),b(f,F$,_),e(F$,dDe),b(f,HPe,_),M(bf,f,_),b(f,UPe,_),b(f,ui,_),e(ui,vf),e(vf,see),M(Z6,see,null),e(ui,cDe),e(ui,lee),e(lee,fDe),b(f,JPe,_),b(f,Co,_),M(e0,Co,null),e(Co,mDe),e(Co,o0),e(o0,gDe),e(o0,T$),e(T$,hDe),e(o0,pDe),e(Co,uDe),e(Co,r0),e(r0,_De),e(r0,iee),e(iee,bDe),e(r0,vDe),e(Co,FDe),e(Co,Er),M(t0,Er,null),e(Er,TDe),e(Er,dee),e(dee,MDe),e(Er,EDe),e(Er,_i),e(_i,CDe),e(_i,cee),e(cee,wDe),e(_i,ADe),e(_i,fee),e(fee,yDe),e(_i,LDe),e(Er,xDe),e(Er,A),e(A,Ff),e(Ff,mee),e(mee,$De),e(Ff,kDe),e(Ff,M$),e(M$,SDe),e(Ff,RDe),e(A,BDe),e(A,Tf),e(Tf,gee),e(gee,PDe),e(Tf,IDe),e(Tf,E$),e(E$,qDe),e(Tf,NDe),e(A,jDe),e(A,Mf),e(Mf,hee),e(hee,DDe),e(Mf,GDe),e(Mf,C$),e(C$,ODe),e(Mf,VDe),e(A,XDe),e(A,Ef),e(Ef,pee),e(pee,zDe),e(Ef,QDe),e(Ef,w$),e(w$,WDe),e(Ef,HDe),e(A,UDe),e(A,Cf),e(Cf,uee),e(uee,JDe),e(Cf,YDe),e(Cf,A$),e(A$,KDe),e(Cf,ZDe),e(A,eGe),e(A,wf),e(wf,_ee),e(_ee,oGe),e(wf,rGe),e(wf,y$),e(y$,tGe),e(wf,aGe),e(A,nGe),e(A,Af),e(Af,bee),e(bee,sGe),e(Af,lGe),e(Af,L$),e(L$,iGe),e(Af,dGe),e(A,cGe),e(A,yf),e(yf,vee),e(vee,fGe),e(yf,mGe),e(yf,x$),e(x$,gGe),e(yf,hGe),e(A,pGe),e(A,Lf),e(Lf,Fee),e(Fee,uGe),e(Lf,_Ge),e(Lf,$$),e($$,bGe),e(Lf,vGe),e(A,FGe),e(A,xf),e(xf,Tee),e(Tee,TGe),e(xf,MGe),e(xf,k$),e(k$,EGe),e(xf,CGe),e(A,wGe),e(A,$f),e($f,Mee),e(Mee,AGe),e($f,yGe),e($f,S$),e(S$,LGe),e($f,xGe),e(A,$Ge),e(A,kf),e(kf,Eee),e(Eee,kGe),e(kf,SGe),e(kf,R$),e(R$,RGe),e(kf,BGe),e(A,PGe),e(A,Sf),e(Sf,Cee),e(Cee,IGe),e(Sf,qGe),e(Sf,B$),e(B$,NGe),e(Sf,jGe),e(A,DGe),e(A,Rf),e(Rf,wee),e(wee,GGe),e(Rf,OGe),e(Rf,P$),e(P$,VGe),e(Rf,XGe),e(A,zGe),e(A,Bf),e(Bf,Aee),e(Aee,QGe),e(Bf,WGe),e(Bf,I$),e(I$,HGe),e(Bf,UGe),e(A,JGe),e(A,Pf),e(Pf,yee),e(yee,YGe),e(Pf,KGe),e(Pf,q$),e(q$,ZGe),e(Pf,eOe),e(A,oOe),e(A,If),e(If,Lee),e(Lee,rOe),e(If,tOe),e(If,N$),e(N$,aOe),e(If,nOe),e(A,sOe),e(A,qf),e(qf,xee),e(xee,lOe),e(qf,iOe),e(qf,j$),e(j$,dOe),e(qf,cOe),e(A,fOe),e(A,Nf),e(Nf,$ee),e($ee,mOe),e(Nf,gOe),e(Nf,D$),e(D$,hOe),e(Nf,pOe),e(A,uOe),e(A,jf),e(jf,kee),e(kee,_Oe),e(jf,bOe),e(jf,G$),e(G$,vOe),e(jf,FOe),e(A,TOe),e(A,Df),e(Df,See),e(See,MOe),e(Df,EOe),e(Df,O$),e(O$,COe),e(Df,wOe),e(A,AOe),e(A,Gf),e(Gf,Ree),e(Ree,yOe),e(Gf,LOe),e(Gf,V$),e(V$,xOe),e(Gf,$Oe),e(A,kOe),e(A,Of),e(Of,Bee),e(Bee,SOe),e(Of,ROe),e(Of,X$),e(X$,BOe),e(Of,POe),e(A,IOe),e(A,Vf),e(Vf,Pee),e(Pee,qOe),e(Vf,NOe),e(Vf,z$),e(z$,jOe),e(Vf,DOe),e(A,GOe),e(A,Xf),e(Xf,Iee),e(Iee,OOe),e(Xf,VOe),e(Xf,Q$),e(Q$,XOe),e(Xf,zOe),e(A,QOe),e(A,zf),e(zf,qee),e(qee,WOe),e(zf,HOe),e(zf,W$),e(W$,UOe),e(zf,JOe),e(A,YOe),e(A,Qf),e(Qf,Nee),e(Nee,KOe),e(Qf,ZOe),e(Qf,H$),e(H$,eVe),e(Qf,oVe),e(A,rVe),e(A,Wf),e(Wf,jee),e(jee,tVe),e(Wf,aVe),e(Wf,U$),e(U$,nVe),e(Wf,sVe),e(A,lVe),e(A,Hf),e(Hf,Dee),e(Dee,iVe),e(Hf,dVe),e(Hf,J$),e(J$,cVe),e(Hf,fVe),e(A,mVe),e(A,Uf),e(Uf,Gee),e(Gee,gVe),e(Uf,hVe),e(Uf,Y$),e(Y$,pVe),e(Uf,uVe),e(A,_Ve),e(A,Jf),e(Jf,Oee),e(Oee,bVe),e(Jf,vVe),e(Jf,K$),e(K$,FVe),e(Jf,TVe),e(A,MVe),e(A,Yf),e(Yf,Vee),e(Vee,EVe),e(Yf,CVe),e(Yf,Z$),e(Z$,wVe),e(Yf,AVe),e(A,yVe),e(A,Kf),e(Kf,Xee),e(Xee,LVe),e(Kf,xVe),e(Kf,ek),e(ek,$Ve),e(Kf,kVe),e(A,SVe),e(A,Zf),e(Zf,zee),e(zee,RVe),e(Zf,BVe),e(Zf,ok),e(ok,PVe),e(Zf,IVe),e(A,qVe),e(A,em),e(em,Qee),e(Qee,NVe),e(em,jVe),e(em,rk),e(rk,DVe),e(em,GVe),e(A,OVe),e(A,om),e(om,Wee),e(Wee,VVe),e(om,XVe),e(om,tk),e(tk,zVe),e(om,QVe),e(A,WVe),e(A,rm),e(rm,Hee),e(Hee,HVe),e(rm,UVe),e(rm,ak),e(ak,JVe),e(rm,YVe),e(A,KVe),e(A,tm),e(tm,Uee),e(Uee,ZVe),e(tm,eXe),e(tm,nk),e(nk,oXe),e(tm,rXe),e(A,tXe),e(A,am),e(am,Jee),e(Jee,aXe),e(am,nXe),e(am,sk),e(sk,sXe),e(am,lXe),e(A,iXe),e(A,nm),e(nm,Yee),e(Yee,dXe),e(nm,cXe),e(nm,lk),e(lk,fXe),e(nm,mXe),e(A,gXe),e(A,sm),e(sm,Kee),e(Kee,hXe),e(sm,pXe),e(sm,ik),e(ik,uXe),e(sm,_Xe),e(A,bXe),e(A,lm),e(lm,Zee),e(Zee,vXe),e(lm,FXe),e(lm,dk),e(dk,TXe),e(lm,MXe),e(A,EXe),e(A,im),e(im,eoe),e(eoe,CXe),e(im,wXe),e(im,ck),e(ck,AXe),e(im,yXe),e(A,LXe),e(A,dm),e(dm,ooe),e(ooe,xXe),e(dm,$Xe),e(dm,fk),e(fk,kXe),e(dm,SXe),e(A,RXe),e(A,cm),e(cm,roe),e(roe,BXe),e(cm,PXe),e(cm,mk),e(mk,IXe),e(cm,qXe),e(A,NXe),e(A,fm),e(fm,toe),e(toe,jXe),e(fm,DXe),e(fm,gk),e(gk,GXe),e(fm,OXe),e(A,VXe),e(A,mm),e(mm,aoe),e(aoe,XXe),e(mm,zXe),e(mm,hk),e(hk,QXe),e(mm,WXe),e(A,HXe),e(A,gm),e(gm,noe),e(noe,UXe),e(gm,JXe),e(gm,pk),e(pk,YXe),e(gm,KXe),e(A,ZXe),e(A,hm),e(hm,soe),e(soe,eze),e(hm,oze),e(hm,uk),e(uk,rze),e(hm,tze),e(A,aze),e(A,pm),e(pm,loe),e(loe,nze),e(pm,sze),e(pm,_k),e(_k,lze),e(pm,ize),e(A,dze),e(A,um),e(um,ioe),e(ioe,cze),e(um,fze),e(um,bk),e(bk,mze),e(um,gze),e(A,hze),e(A,_m),e(_m,doe),e(doe,pze),e(_m,uze),e(_m,vk),e(vk,_ze),e(_m,bze),e(A,vze),e(A,bm),e(bm,coe),e(coe,Fze),e(bm,Tze),e(bm,Fk),e(Fk,Mze),e(bm,Eze),e(A,Cze),e(A,vm),e(vm,foe),e(foe,wze),e(vm,Aze),e(vm,Tk),e(Tk,yze),e(vm,Lze),e(A,xze),e(A,Fm),e(Fm,moe),e(moe,$ze),e(Fm,kze),e(Fm,Mk),e(Mk,Sze),e(Fm,Rze),e(A,Bze),e(A,Tm),e(Tm,goe),e(goe,Pze),e(Tm,Ize),e(Tm,Ek),e(Ek,qze),e(Tm,Nze),e(A,jze),e(A,Mm),e(Mm,hoe),e(hoe,Dze),e(Mm,Gze),e(Mm,Ck),e(Ck,Oze),e(Mm,Vze),e(A,Xze),e(A,Em),e(Em,poe),e(poe,zze),e(Em,Qze),e(Em,wk),e(wk,Wze),e(Em,Hze),e(A,Uze),e(A,Cm),e(Cm,uoe),e(uoe,Jze),e(Cm,Yze),e(Cm,Ak),e(Ak,Kze),e(Cm,Zze),e(A,eQe),e(A,wm),e(wm,_oe),e(_oe,oQe),e(wm,rQe),e(wm,yk),e(yk,tQe),e(wm,aQe),e(A,nQe),e(A,Am),e(Am,boe),e(boe,sQe),e(Am,lQe),e(Am,Lk),e(Lk,iQe),e(Am,dQe),e(A,cQe),e(A,ym),e(ym,voe),e(voe,fQe),e(ym,mQe),e(ym,xk),e(xk,gQe),e(ym,hQe),e(A,pQe),e(A,Lm),e(Lm,Foe),e(Foe,uQe),e(Lm,_Qe),e(Lm,$k),e($k,bQe),e(Lm,vQe),e(A,FQe),e(A,xm),e(xm,Toe),e(Toe,TQe),e(xm,MQe),e(xm,kk),e(kk,EQe),e(xm,CQe),e(A,wQe),e(A,$m),e($m,Moe),e(Moe,AQe),e($m,yQe),e($m,Sk),e(Sk,LQe),e($m,xQe),e(A,$Qe),e(A,km),e(km,Eoe),e(Eoe,kQe),e(km,SQe),e(km,Rk),e(Rk,RQe),e(km,BQe),e(A,PQe),e(A,Sm),e(Sm,Coe),e(Coe,IQe),e(Sm,qQe),e(Sm,Bk),e(Bk,NQe),e(Sm,jQe),e(A,DQe),e(A,Rm),e(Rm,woe),e(woe,GQe),e(Rm,OQe),e(Rm,Pk),e(Pk,VQe),e(Rm,XQe),e(A,zQe),e(A,Bm),e(Bm,Aoe),e(Aoe,QQe),e(Bm,WQe),e(Bm,Ik),e(Ik,HQe),e(Bm,UQe),e(A,JQe),e(A,Pm),e(Pm,yoe),e(yoe,YQe),e(Pm,KQe),e(Pm,qk),e(qk,ZQe),e(Pm,eWe),e(A,oWe),e(A,Im),e(Im,Loe),e(Loe,rWe),e(Im,tWe),e(Im,Nk),e(Nk,aWe),e(Im,nWe),e(A,sWe),e(A,qm),e(qm,xoe),e(xoe,lWe),e(qm,iWe),e(qm,jk),e(jk,dWe),e(qm,cWe),e(A,fWe),e(A,Nm),e(Nm,$oe),e($oe,mWe),e(Nm,gWe),e(Nm,Dk),e(Dk,hWe),e(Nm,pWe),e(A,uWe),e(A,jm),e(jm,koe),e(koe,_We),e(jm,bWe),e(jm,Gk),e(Gk,vWe),e(jm,FWe),e(A,TWe),e(A,Dm),e(Dm,Soe),e(Soe,MWe),e(Dm,EWe),e(Dm,Ok),e(Ok,CWe),e(Dm,wWe),e(A,AWe),e(A,Gm),e(Gm,Roe),e(Roe,yWe),e(Gm,LWe),e(Gm,Vk),e(Vk,xWe),e(Gm,$We),e(A,kWe),e(A,Om),e(Om,Boe),e(Boe,SWe),e(Om,RWe),e(Om,Xk),e(Xk,BWe),e(Om,PWe),e(A,IWe),e(A,Vm),e(Vm,Poe),e(Poe,qWe),e(Vm,NWe),e(Vm,zk),e(zk,jWe),e(Vm,DWe),e(A,GWe),e(A,Xm),e(Xm,Ioe),e(Ioe,OWe),e(Xm,VWe),e(Xm,Qk),e(Qk,XWe),e(Xm,zWe),e(A,QWe),e(A,zm),e(zm,qoe),e(qoe,WWe),e(zm,HWe),e(zm,Wk),e(Wk,UWe),e(zm,JWe),e(A,YWe),e(A,Qm),e(Qm,Noe),e(Noe,KWe),e(Qm,ZWe),e(Qm,Hk),e(Hk,eHe),e(Qm,oHe),e(A,rHe),e(A,Wm),e(Wm,joe),e(joe,tHe),e(Wm,aHe),e(Wm,Uk),e(Uk,nHe),e(Wm,sHe),e(A,lHe),e(A,Hm),e(Hm,Doe),e(Doe,iHe),e(Hm,dHe),e(Hm,Jk),e(Jk,cHe),e(Hm,fHe),e(A,mHe),e(A,Um),e(Um,Goe),e(Goe,gHe),e(Um,hHe),e(Um,Yk),e(Yk,pHe),e(Um,uHe),e(A,_He),e(A,Jm),e(Jm,Ooe),e(Ooe,bHe),e(Jm,vHe),e(Jm,Kk),e(Kk,FHe),e(Jm,THe),e(A,MHe),e(A,Ym),e(Ym,Voe),e(Voe,EHe),e(Ym,CHe),e(Ym,Zk),e(Zk,wHe),e(Ym,AHe),e(A,yHe),e(A,Km),e(Km,Xoe),e(Xoe,LHe),e(Km,xHe),e(Km,eS),e(eS,$He),e(Km,kHe),e(A,SHe),e(A,Zm),e(Zm,zoe),e(zoe,RHe),e(Zm,BHe),e(Zm,oS),e(oS,PHe),e(Zm,IHe),e(A,qHe),e(A,eg),e(eg,Qoe),e(Qoe,NHe),e(eg,jHe),e(eg,rS),e(rS,DHe),e(eg,GHe),e(A,OHe),e(A,og),e(og,Woe),e(Woe,VHe),e(og,XHe),e(og,tS),e(tS,zHe),e(og,QHe),e(A,WHe),e(A,rg),e(rg,Hoe),e(Hoe,HHe),e(rg,UHe),e(rg,aS),e(aS,JHe),e(rg,YHe),e(A,KHe),e(A,tg),e(tg,Uoe),e(Uoe,ZHe),e(tg,eUe),e(tg,nS),e(nS,oUe),e(tg,rUe),e(A,tUe),e(A,ag),e(ag,Joe),e(Joe,aUe),e(ag,nUe),e(ag,sS),e(sS,sUe),e(ag,lUe),e(A,iUe),e(A,ng),e(ng,Yoe),e(Yoe,dUe),e(ng,cUe),e(ng,lS),e(lS,fUe),e(ng,mUe),e(A,gUe),e(A,sg),e(sg,Koe),e(Koe,hUe),e(sg,pUe),e(sg,iS),e(iS,uUe),e(sg,_Ue),e(A,bUe),e(A,lg),e(lg,Zoe),e(Zoe,vUe),e(lg,FUe),e(lg,dS),e(dS,TUe),e(lg,MUe),e(A,EUe),e(A,ig),e(ig,ere),e(ere,CUe),e(ig,wUe),e(ig,cS),e(cS,AUe),e(ig,yUe),e(A,LUe),e(A,dg),e(dg,ore),e(ore,xUe),e(dg,$Ue),e(dg,fS),e(fS,kUe),e(dg,SUe),e(A,RUe),e(A,cg),e(cg,rre),e(rre,BUe),e(cg,PUe),e(cg,mS),e(mS,IUe),e(cg,qUe),e(A,NUe),e(A,fg),e(fg,tre),e(tre,jUe),e(fg,DUe),e(fg,gS),e(gS,GUe),e(fg,OUe),e(A,VUe),e(A,mg),e(mg,are),e(are,XUe),e(mg,zUe),e(mg,hS),e(hS,QUe),e(mg,WUe),e(A,HUe),e(A,gg),e(gg,nre),e(nre,UUe),e(gg,JUe),e(gg,pS),e(pS,YUe),e(gg,KUe),e(A,ZUe),e(A,hg),e(hg,sre),e(sre,eJe),e(hg,oJe),e(hg,uS),e(uS,rJe),e(hg,tJe),e(A,aJe),e(A,pg),e(pg,lre),e(lre,nJe),e(pg,sJe),e(pg,_S),e(_S,lJe),e(pg,iJe),e(A,dJe),e(A,ug),e(ug,ire),e(ire,cJe),e(ug,fJe),e(ug,bS),e(bS,mJe),e(ug,gJe),e(Er,hJe),M(_g,Er,null),e(Co,pJe),e(Co,bg),M(a0,bg,null),e(bg,uJe),e(bg,dre),e(dre,_Je),b(f,YPe,_),b(f,bi,_),e(bi,vg),e(vg,cre),M(n0,cre,null),e(bi,bJe),e(bi,fre),e(fre,vJe),b(f,KPe,_),b(f,wo,_),M(s0,wo,null),e(wo,FJe),e(wo,l0),e(l0,TJe),e(l0,vS),e(vS,MJe),e(l0,EJe),e(wo,CJe),e(wo,i0),e(i0,wJe),e(i0,mre),e(mre,AJe),e(i0,yJe),e(wo,LJe),e(wo,Cr),M(d0,Cr,null),e(Cr,xJe),e(Cr,gre),e(gre,$Je),e(Cr,kJe),e(Cr,Ca),e(Ca,SJe),e(Ca,hre),e(hre,RJe),e(Ca,BJe),e(Ca,pre),e(pre,PJe),e(Ca,IJe),e(Ca,ure),e(ure,qJe),e(Ca,NJe),e(Cr,jJe),e(Cr,k),e(k,kn),e(kn,_re),e(_re,DJe),e(kn,GJe),e(kn,FS),e(FS,OJe),e(kn,VJe),e(kn,TS),e(TS,XJe),e(kn,zJe),e(k,QJe),e(k,Sn),e(Sn,bre),e(bre,WJe),e(Sn,HJe),e(Sn,MS),e(MS,UJe),e(Sn,JJe),e(Sn,ES),e(ES,YJe),e(Sn,KJe),e(k,ZJe),e(k,Rn),e(Rn,vre),e(vre,eYe),e(Rn,oYe),e(Rn,CS),e(CS,rYe),e(Rn,tYe),e(Rn,wS),e(wS,aYe),e(Rn,nYe),e(k,sYe),e(k,Bn),e(Bn,Fre),e(Fre,lYe),e(Bn,iYe),e(Bn,AS),e(AS,dYe),e(Bn,cYe),e(Bn,yS),e(yS,fYe),e(Bn,mYe),e(k,gYe),e(k,Pn),e(Pn,Tre),e(Tre,hYe),e(Pn,pYe),e(Pn,LS),e(LS,uYe),e(Pn,_Ye),e(Pn,xS),e(xS,bYe),e(Pn,vYe),e(k,FYe),e(k,Fg),e(Fg,Mre),e(Mre,TYe),e(Fg,MYe),e(Fg,$S),e($S,EYe),e(Fg,CYe),e(k,wYe),e(k,Tg),e(Tg,Ere),e(Ere,AYe),e(Tg,yYe),e(Tg,kS),e(kS,LYe),e(Tg,xYe),e(k,$Ye),e(k,Mg),e(Mg,Cre),e(Cre,kYe),e(Mg,SYe),e(Mg,SS),e(SS,RYe),e(Mg,BYe),e(k,PYe),e(k,In),e(In,wre),e(wre,IYe),e(In,qYe),e(In,RS),e(RS,NYe),e(In,jYe),e(In,BS),e(BS,DYe),e(In,GYe),e(k,OYe),e(k,qn),e(qn,Are),e(Are,VYe),e(qn,XYe),e(qn,PS),e(PS,zYe),e(qn,QYe),e(qn,IS),e(IS,WYe),e(qn,HYe),e(k,UYe),e(k,Nn),e(Nn,yre),e(yre,JYe),e(Nn,YYe),e(Nn,qS),e(qS,KYe),e(Nn,ZYe),e(Nn,NS),e(NS,eKe),e(Nn,oKe),e(k,rKe),e(k,Eg),e(Eg,Lre),e(Lre,tKe),e(Eg,aKe),e(Eg,jS),e(jS,nKe),e(Eg,sKe),e(k,lKe),e(k,Cg),e(Cg,xre),e(xre,iKe),e(Cg,dKe),e(Cg,DS),e(DS,cKe),e(Cg,fKe),e(k,mKe),e(k,jn),e(jn,$re),e($re,gKe),e(jn,hKe),e(jn,GS),e(GS,pKe),e(jn,uKe),e(jn,OS),e(OS,_Ke),e(jn,bKe),e(k,vKe),e(k,wg),e(wg,kre),e(kre,FKe),e(wg,TKe),e(wg,VS),e(VS,MKe),e(wg,EKe),e(k,CKe),e(k,Dn),e(Dn,Sre),e(Sre,wKe),e(Dn,AKe),e(Dn,XS),e(XS,yKe),e(Dn,LKe),e(Dn,zS),e(zS,xKe),e(Dn,$Ke),e(k,kKe),e(k,Gn),e(Gn,Rre),e(Rre,SKe),e(Gn,RKe),e(Gn,QS),e(QS,BKe),e(Gn,PKe),e(Gn,WS),e(WS,IKe),e(Gn,qKe),e(k,NKe),e(k,On),e(On,Bre),e(Bre,jKe),e(On,DKe),e(On,HS),e(HS,GKe),e(On,OKe),e(On,US),e(US,VKe),e(On,XKe),e(k,zKe),e(k,Ag),e(Ag,Pre),e(Pre,QKe),e(Ag,WKe),e(Ag,JS),e(JS,HKe),e(Ag,UKe),e(k,JKe),e(k,Vn),e(Vn,Ire),e(Ire,YKe),e(Vn,KKe),e(Vn,YS),e(YS,ZKe),e(Vn,eZe),e(Vn,KS),e(KS,oZe),e(Vn,rZe),e(k,tZe),e(k,Xn),e(Xn,qre),e(qre,aZe),e(Xn,nZe),e(Xn,ZS),e(ZS,sZe),e(Xn,lZe),e(Xn,eR),e(eR,iZe),e(Xn,dZe),e(k,cZe),e(k,zn),e(zn,Nre),e(Nre,fZe),e(zn,mZe),e(zn,oR),e(oR,gZe),e(zn,hZe),e(zn,rR),e(rR,pZe),e(zn,uZe),e(k,_Ze),e(k,Qn),e(Qn,jre),e(jre,bZe),e(Qn,vZe),e(Qn,tR),e(tR,FZe),e(Qn,TZe),e(Qn,aR),e(aR,MZe),e(Qn,EZe),e(k,CZe),e(k,Wn),e(Wn,Dre),e(Dre,wZe),e(Wn,AZe),e(Wn,nR),e(nR,yZe),e(Wn,LZe),e(Wn,sR),e(sR,xZe),e(Wn,$Ze),e(k,kZe),e(k,Hn),e(Hn,Gre),e(Gre,SZe),e(Hn,RZe),e(Hn,lR),e(lR,BZe),e(Hn,PZe),e(Hn,iR),e(iR,IZe),e(Hn,qZe),e(k,NZe),e(k,yg),e(yg,Ore),e(Ore,jZe),e(yg,DZe),e(yg,dR),e(dR,GZe),e(yg,OZe),e(k,VZe),e(k,Un),e(Un,Vre),e(Vre,XZe),e(Un,zZe),e(Un,cR),e(cR,QZe),e(Un,WZe),e(Un,fR),e(fR,HZe),e(Un,UZe),e(k,JZe),e(k,Lg),e(Lg,Xre),e(Xre,YZe),e(Lg,KZe),e(Lg,mR),e(mR,ZZe),e(Lg,eeo),e(k,oeo),e(k,Jn),e(Jn,zre),e(zre,reo),e(Jn,teo),e(Jn,gR),e(gR,aeo),e(Jn,neo),e(Jn,hR),e(hR,seo),e(Jn,leo),e(k,ieo),e(k,Yn),e(Yn,Qre),e(Qre,deo),e(Yn,ceo),e(Yn,pR),e(pR,feo),e(Yn,meo),e(Yn,uR),e(uR,geo),e(Yn,heo),e(k,peo),e(k,Kn),e(Kn,Wre),e(Wre,ueo),e(Kn,_eo),e(Kn,_R),e(_R,beo),e(Kn,veo),e(Kn,bR),e(bR,Feo),e(Kn,Teo),e(k,Meo),e(k,Zn),e(Zn,Hre),e(Hre,Eeo),e(Zn,Ceo),e(Zn,vR),e(vR,weo),e(Zn,Aeo),e(Zn,FR),e(FR,yeo),e(Zn,Leo),e(k,xeo),e(k,es),e(es,Ure),e(Ure,$eo),e(es,keo),e(es,TR),e(TR,Seo),e(es,Reo),e(es,MR),e(MR,Beo),e(es,Peo),e(k,Ieo),e(k,xg),e(xg,Jre),e(Jre,qeo),e(xg,Neo),e(xg,ER),e(ER,jeo),e(xg,Deo),e(k,Geo),e(k,os),e(os,Yre),e(Yre,Oeo),e(os,Veo),e(os,CR),e(CR,Xeo),e(os,zeo),e(os,wR),e(wR,Qeo),e(os,Weo),e(k,Heo),e(k,rs),e(rs,Kre),e(Kre,Ueo),e(rs,Jeo),e(rs,AR),e(AR,Yeo),e(rs,Keo),e(rs,yR),e(yR,Zeo),e(rs,eoo),e(k,ooo),e(k,ts),e(ts,Zre),e(Zre,roo),e(ts,too),e(ts,LR),e(LR,aoo),e(ts,noo),e(ts,xR),e(xR,soo),e(ts,loo),e(k,ioo),e(k,as),e(as,ete),e(ete,doo),e(as,coo),e(as,$R),e($R,foo),e(as,moo),e(as,kR),e(kR,goo),e(as,hoo),e(k,poo),e(k,ns),e(ns,ote),e(ote,uoo),e(ns,_oo),e(ns,SR),e(SR,boo),e(ns,voo),e(ns,RR),e(RR,Foo),e(ns,Too),e(k,Moo),e(k,ss),e(ss,rte),e(rte,Eoo),e(ss,Coo),e(ss,BR),e(BR,woo),e(ss,Aoo),e(ss,PR),e(PR,yoo),e(ss,Loo),e(k,xoo),e(k,$g),e($g,tte),e(tte,$oo),e($g,koo),e($g,IR),e(IR,Soo),e($g,Roo),e(k,Boo),e(k,ls),e(ls,ate),e(ate,Poo),e(ls,Ioo),e(ls,qR),e(qR,qoo),e(ls,Noo),e(ls,NR),e(NR,joo),e(ls,Doo),e(k,Goo),e(k,kg),e(kg,nte),e(nte,Ooo),e(kg,Voo),e(kg,jR),e(jR,Xoo),e(kg,zoo),e(k,Qoo),e(k,Sg),e(Sg,ste),e(ste,Woo),e(Sg,Hoo),e(Sg,DR),e(DR,Uoo),e(Sg,Joo),e(k,Yoo),e(k,is),e(is,lte),e(lte,Koo),e(is,Zoo),e(is,GR),e(GR,ero),e(is,oro),e(is,OR),e(OR,rro),e(is,tro),e(k,aro),e(k,ds),e(ds,ite),e(ite,nro),e(ds,sro),e(ds,VR),e(VR,lro),e(ds,iro),e(ds,XR),e(XR,dro),e(ds,cro),e(k,fro),e(k,cs),e(cs,dte),e(dte,mro),e(cs,gro),e(cs,zR),e(zR,hro),e(cs,pro),e(cs,QR),e(QR,uro),e(cs,_ro),e(k,bro),e(k,Rg),e(Rg,cte),e(cte,vro),e(Rg,Fro),e(Rg,WR),e(WR,Tro),e(Rg,Mro),e(k,Ero),e(k,fs),e(fs,fte),e(fte,Cro),e(fs,wro),e(fs,HR),e(HR,Aro),e(fs,yro),e(fs,UR),e(UR,Lro),e(fs,xro),e(k,$ro),e(k,ms),e(ms,mte),e(mte,kro),e(ms,Sro),e(ms,JR),e(JR,Rro),e(ms,Bro),e(ms,YR),e(YR,Pro),e(ms,Iro),e(k,qro),e(k,gs),e(gs,gte),e(gte,Nro),e(gs,jro),e(gs,KR),e(KR,Dro),e(gs,Gro),e(gs,ZR),e(ZR,Oro),e(gs,Vro),e(k,Xro),e(k,hs),e(hs,hte),e(hte,zro),e(hs,Qro),e(hs,eB),e(eB,Wro),e(hs,Hro),e(hs,oB),e(oB,Uro),e(hs,Jro),e(k,Yro),e(k,ps),e(ps,pte),e(pte,Kro),e(ps,Zro),e(ps,rB),e(rB,eto),e(ps,oto),e(ps,tB),e(tB,rto),e(ps,tto),e(k,ato),e(k,Bg),e(Bg,ute),e(ute,nto),e(Bg,sto),e(Bg,aB),e(aB,lto),e(Bg,ito),e(k,dto),e(k,us),e(us,_te),e(_te,cto),e(us,fto),e(us,nB),e(nB,mto),e(us,gto),e(us,sB),e(sB,hto),e(us,pto),e(k,uto),e(k,Pg),e(Pg,bte),e(bte,_to),e(Pg,bto),e(Pg,lB),e(lB,vto),e(Pg,Fto),e(k,Tto),e(k,Ig),e(Ig,vte),e(vte,Mto),e(Ig,Eto),e(Ig,iB),e(iB,Cto),e(Ig,wto),e(k,Ato),e(k,qg),e(qg,Fte),e(Fte,yto),e(qg,Lto),e(qg,dB),e(dB,xto),e(qg,$to),e(k,kto),e(k,Ng),e(Ng,Tte),e(Tte,Sto),e(Ng,Rto),e(Ng,cB),e(cB,Bto),e(Ng,Pto),e(k,Ito),e(k,_s),e(_s,Mte),e(Mte,qto),e(_s,Nto),e(_s,fB),e(fB,jto),e(_s,Dto),e(_s,mB),e(mB,Gto),e(_s,Oto),e(k,Vto),e(k,jg),e(jg,Ete),e(Ete,Xto),e(jg,zto),e(jg,gB),e(gB,Qto),e(jg,Wto),e(k,Hto),e(k,bs),e(bs,Cte),e(Cte,Uto),e(bs,Jto),e(bs,hB),e(hB,Yto),e(bs,Kto),e(bs,pB),e(pB,Zto),e(bs,eao),e(k,oao),e(k,vs),e(vs,wte),e(wte,rao),e(vs,tao),e(vs,uB),e(uB,aao),e(vs,nao),e(vs,_B),e(_B,sao),e(vs,lao),e(k,iao),e(k,Fs),e(Fs,Ate),e(Ate,dao),e(Fs,cao),e(Fs,bB),e(bB,fao),e(Fs,mao),e(Fs,vB),e(vB,gao),e(Fs,hao),e(k,pao),e(k,Ts),e(Ts,yte),e(yte,uao),e(Ts,_ao),e(Ts,FB),e(FB,bao),e(Ts,vao),e(Ts,TB),e(TB,Fao),e(Ts,Tao),e(k,Mao),e(k,Ms),e(Ms,Lte),e(Lte,Eao),e(Ms,Cao),e(Ms,MB),e(MB,wao),e(Ms,Aao),e(Ms,EB),e(EB,yao),e(Ms,Lao),e(k,xao),e(k,Es),e(Es,xte),e(xte,$ao),e(Es,kao),e(Es,CB),e(CB,Sao),e(Es,Rao),e(Es,wB),e(wB,Bao),e(Es,Pao),e(k,Iao),e(k,Dg),e(Dg,$te),e($te,qao),e(Dg,Nao),e(Dg,AB),e(AB,jao),e(Dg,Dao),e(k,Gao),e(k,Gg),e(Gg,kte),e(kte,Oao),e(Gg,Vao),e(Gg,yB),e(yB,Xao),e(Gg,zao),e(k,Qao),e(k,Cs),e(Cs,Ste),e(Ste,Wao),e(Cs,Hao),e(Cs,LB),e(LB,Uao),e(Cs,Jao),e(Cs,xB),e(xB,Yao),e(Cs,Kao),e(k,Zao),e(k,ws),e(ws,Rte),e(Rte,eno),e(ws,ono),e(ws,$B),e($B,rno),e(ws,tno),e(ws,kB),e(kB,ano),e(ws,nno),e(k,sno),e(k,As),e(As,Bte),e(Bte,lno),e(As,ino),e(As,SB),e(SB,dno),e(As,cno),e(As,RB),e(RB,fno),e(As,mno),e(k,gno),e(k,Og),e(Og,Pte),e(Pte,hno),e(Og,pno),e(Og,BB),e(BB,uno),e(Og,_no),e(k,bno),e(k,Vg),e(Vg,Ite),e(Ite,vno),e(Vg,Fno),e(Vg,PB),e(PB,Tno),e(Vg,Mno),e(k,Eno),e(k,Xg),e(Xg,qte),e(qte,Cno),e(Xg,wno),e(Xg,IB),e(IB,Ano),e(Xg,yno),e(k,Lno),e(k,ys),e(ys,Nte),e(Nte,xno),e(ys,$no),e(ys,qB),e(qB,kno),e(ys,Sno),e(ys,NB),e(NB,Rno),e(ys,Bno),e(k,Pno),e(k,zg),e(zg,jte),e(jte,Ino),e(zg,qno),e(zg,jB),e(jB,Nno),e(zg,jno),e(k,Dno),e(k,Qg),e(Qg,Dte),e(Dte,Gno),e(Qg,Ono),e(Qg,DB),e(DB,Vno),e(Qg,Xno),e(k,zno),e(k,Ls),e(Ls,Gte),e(Gte,Qno),e(Ls,Wno),e(Ls,GB),e(GB,Hno),e(Ls,Uno),e(Ls,OB),e(OB,Jno),e(Ls,Yno),e(k,Kno),e(k,Wg),e(Wg,Ote),e(Ote,Zno),e(Wg,eso),e(Wg,VB),e(VB,oso),e(Wg,rso),e(k,tso),e(k,Hg),e(Hg,Vte),e(Vte,aso),e(Hg,nso),e(Hg,XB),e(XB,sso),e(Hg,lso),e(k,iso),e(k,xs),e(xs,Xte),e(Xte,dso),e(xs,cso),e(xs,zB),e(zB,fso),e(xs,mso),e(xs,QB),e(QB,gso),e(xs,hso),e(k,pso),e(k,$s),e($s,zte),e(zte,uso),e($s,_so),e($s,WB),e(WB,bso),e($s,vso),e($s,HB),e(HB,Fso),e($s,Tso),e(k,Mso),e(k,ks),e(ks,Qte),e(Qte,Eso),e(ks,Cso),e(ks,UB),e(UB,wso),e(ks,Aso),e(ks,JB),e(JB,yso),e(ks,Lso),e(k,xso),e(k,Ss),e(Ss,Wte),e(Wte,$so),e(Ss,kso),e(Ss,YB),e(YB,Sso),e(Ss,Rso),e(Ss,KB),e(KB,Bso),e(Ss,Pso),e(Cr,Iso),M(Ug,Cr,null),e(wo,qso),e(wo,Jg),M(c0,Jg,null),e(Jg,Nso),e(Jg,Hte),e(Hte,jso),b(f,ZPe,_),b(f,vi,_),e(vi,Yg),e(Yg,Ute),M(f0,Ute,null),e(vi,Dso),e(vi,Jte),e(Jte,Gso),b(f,eIe,_),b(f,Ao,_),M(m0,Ao,null),e(Ao,Oso),e(Ao,g0),e(g0,Vso),e(g0,ZB),e(ZB,Xso),e(g0,zso),e(Ao,Qso),e(Ao,h0),e(h0,Wso),e(h0,Yte),e(Yte,Hso),e(h0,Uso),e(Ao,Jso),e(Ao,Qe),M(p0,Qe,null),e(Qe,Yso),e(Qe,Kte),e(Kte,Kso),e(Qe,Zso),e(Qe,wa),e(wa,elo),e(wa,Zte),e(Zte,olo),e(wa,rlo),e(wa,eae),e(eae,tlo),e(wa,alo),e(wa,oae),e(oae,nlo),e(wa,slo),e(Qe,llo),e(Qe,oe),e(oe,Kg),e(Kg,rae),e(rae,ilo),e(Kg,dlo),e(Kg,eP),e(eP,clo),e(Kg,flo),e(oe,mlo),e(oe,Zg),e(Zg,tae),e(tae,glo),e(Zg,hlo),e(Zg,oP),e(oP,plo),e(Zg,ulo),e(oe,_lo),e(oe,eh),e(eh,aae),e(aae,blo),e(eh,vlo),e(eh,rP),e(rP,Flo),e(eh,Tlo),e(oe,Mlo),e(oe,oh),e(oh,nae),e(nae,Elo),e(oh,Clo),e(oh,tP),e(tP,wlo),e(oh,Alo),e(oe,ylo),e(oe,rh),e(rh,sae),e(sae,Llo),e(rh,xlo),e(rh,aP),e(aP,$lo),e(rh,klo),e(oe,Slo),e(oe,th),e(th,lae),e(lae,Rlo),e(th,Blo),e(th,nP),e(nP,Plo),e(th,Ilo),e(oe,qlo),e(oe,ah),e(ah,iae),e(iae,Nlo),e(ah,jlo),e(ah,sP),e(sP,Dlo),e(ah,Glo),e(oe,Olo),e(oe,nh),e(nh,dae),e(dae,Vlo),e(nh,Xlo),e(nh,lP),e(lP,zlo),e(nh,Qlo),e(oe,Wlo),e(oe,sh),e(sh,cae),e(cae,Hlo),e(sh,Ulo),e(sh,iP),e(iP,Jlo),e(sh,Ylo),e(oe,Klo),e(oe,lh),e(lh,fae),e(fae,Zlo),e(lh,eio),e(lh,dP),e(dP,oio),e(lh,rio),e(oe,tio),e(oe,ih),e(ih,mae),e(mae,aio),e(ih,nio),e(ih,cP),e(cP,sio),e(ih,lio),e(oe,iio),e(oe,dh),e(dh,gae),e(gae,dio),e(dh,cio),e(dh,fP),e(fP,fio),e(dh,mio),e(oe,gio),e(oe,ch),e(ch,hae),e(hae,hio),e(ch,pio),e(ch,mP),e(mP,uio),e(ch,_io),e(oe,bio),e(oe,fh),e(fh,pae),e(pae,vio),e(fh,Fio),e(fh,gP),e(gP,Tio),e(fh,Mio),e(oe,Eio),e(oe,mh),e(mh,uae),e(uae,Cio),e(mh,wio),e(mh,hP),e(hP,Aio),e(mh,yio),e(oe,Lio),e(oe,gh),e(gh,_ae),e(_ae,xio),e(gh,$io),e(gh,pP),e(pP,kio),e(gh,Sio),e(oe,Rio),e(oe,hh),e(hh,bae),e(bae,Bio),e(hh,Pio),e(hh,uP),e(uP,Iio),e(hh,qio),e(oe,Nio),e(oe,ph),e(ph,vae),e(vae,jio),e(ph,Dio),e(ph,_P),e(_P,Gio),e(ph,Oio),e(oe,Vio),e(oe,uh),e(uh,Fae),e(Fae,Xio),e(uh,zio),e(uh,bP),e(bP,Qio),e(uh,Wio),e(oe,Hio),e(oe,_h),e(_h,Tae),e(Tae,Uio),e(_h,Jio),e(_h,vP),e(vP,Yio),e(_h,Kio),e(oe,Zio),e(oe,bh),e(bh,Mae),e(Mae,edo),e(bh,odo),e(bh,FP),e(FP,rdo),e(bh,tdo),e(oe,ado),e(oe,vh),e(vh,Eae),e(Eae,ndo),e(vh,sdo),e(vh,TP),e(TP,ldo),e(vh,ido),e(oe,ddo),e(oe,Fh),e(Fh,Cae),e(Cae,cdo),e(Fh,fdo),e(Fh,MP),e(MP,mdo),e(Fh,gdo),e(oe,hdo),e(oe,Th),e(Th,wae),e(wae,pdo),e(Th,udo),e(Th,EP),e(EP,_do),e(Th,bdo),e(oe,vdo),e(oe,Mh),e(Mh,Aae),e(Aae,Fdo),e(Mh,Tdo),e(Mh,CP),e(CP,Mdo),e(Mh,Edo),e(Qe,Cdo),M(Eh,Qe,null),e(Qe,wdo),M(Ch,Qe,null),e(Ao,Ado),e(Ao,wh),M(u0,wh,null),e(wh,ydo),e(wh,yae),e(yae,Ldo),b(f,oIe,_),b(f,Fi,_),e(Fi,Ah),e(Ah,Lae),M(_0,Lae,null),e(Fi,xdo),e(Fi,xae),e(xae,$do),b(f,rIe,_),b(f,yo,_),M(b0,yo,null),e(yo,kdo),e(yo,v0),e(v0,Sdo),e(v0,wP),e(wP,Rdo),e(v0,Bdo),e(yo,Pdo),e(yo,F0),e(F0,Ido),e(F0,$ae),e($ae,qdo),e(F0,Ndo),e(yo,jdo),e(yo,We),M(T0,We,null),e(We,Ddo),e(We,kae),e(kae,Gdo),e(We,Odo),e(We,Ti),e(Ti,Vdo),e(Ti,Sae),e(Sae,Xdo),e(Ti,zdo),e(Ti,Rae),e(Rae,Qdo),e(Ti,Wdo),e(We,Hdo),e(We,be),e(be,yh),e(yh,Bae),e(Bae,Udo),e(yh,Jdo),e(yh,AP),e(AP,Ydo),e(yh,Kdo),e(be,Zdo),e(be,Lh),e(Lh,Pae),e(Pae,eco),e(Lh,oco),e(Lh,Iae),e(Iae,rco),e(Lh,tco),e(be,aco),e(be,xh),e(xh,qae),e(qae,nco),e(xh,sco),e(xh,yP),e(yP,lco),e(xh,ico),e(be,dco),e(be,$h),e($h,Nae),e(Nae,cco),e($h,fco),e($h,LP),e(LP,mco),e($h,gco),e(be,hco),e(be,kh),e(kh,jae),e(jae,pco),e(kh,uco),e(kh,xP),e(xP,_co),e(kh,bco),e(be,vco),e(be,Sh),e(Sh,Dae),e(Dae,Fco),e(Sh,Tco),e(Sh,$P),e($P,Mco),e(Sh,Eco),e(be,Cco),e(be,Rh),e(Rh,Gae),e(Gae,wco),e(Rh,Aco),e(Rh,kP),e(kP,yco),e(Rh,Lco),e(be,xco),e(be,Bh),e(Bh,Oae),e(Oae,$co),e(Bh,kco),e(Bh,SP),e(SP,Sco),e(Bh,Rco),e(be,Bco),e(be,Ph),e(Ph,Vae),e(Vae,Pco),e(Ph,Ico),e(Ph,RP),e(RP,qco),e(Ph,Nco),e(be,jco),e(be,Ih),e(Ih,Xae),e(Xae,Dco),e(Ih,Gco),e(Ih,BP),e(BP,Oco),e(Ih,Vco),e(be,Xco),e(be,qh),e(qh,zae),e(zae,zco),e(qh,Qco),e(qh,PP),e(PP,Wco),e(qh,Hco),e(be,Uco),e(be,Nh),e(Nh,Qae),e(Qae,Jco),e(Nh,Yco),e(Nh,IP),e(IP,Kco),e(Nh,Zco),e(be,efo),e(be,jh),e(jh,Wae),e(Wae,ofo),e(jh,rfo),e(jh,qP),e(qP,tfo),e(jh,afo),e(be,nfo),e(be,Dh),e(Dh,Hae),e(Hae,sfo),e(Dh,lfo),e(Dh,NP),e(NP,ifo),e(Dh,dfo),e(be,cfo),e(be,Gh),e(Gh,Uae),e(Uae,ffo),e(Gh,mfo),e(Gh,jP),e(jP,gfo),e(Gh,hfo),e(We,pfo),M(Oh,We,null),e(We,ufo),M(Vh,We,null),e(yo,_fo),e(yo,Xh),M(M0,Xh,null),e(Xh,bfo),e(Xh,Jae),e(Jae,vfo),b(f,tIe,_),b(f,Mi,_),e(Mi,zh),e(zh,Yae),M(E0,Yae,null),e(Mi,Ffo),e(Mi,Kae),e(Kae,Tfo),b(f,aIe,_),b(f,Lo,_),M(C0,Lo,null),e(Lo,Mfo),e(Lo,Ei),e(Ei,Efo),e(Ei,DP),e(DP,Cfo),e(Ei,wfo),e(Ei,GP),e(GP,Afo),e(Ei,yfo),e(Lo,Lfo),e(Lo,w0),e(w0,xfo),e(w0,Zae),e(Zae,$fo),e(w0,kfo),e(Lo,Sfo),e(Lo,ot),M(A0,ot,null),e(ot,Rfo),e(ot,ene),e(ene,Bfo),e(ot,Pfo),e(ot,Ci),e(Ci,Ifo),e(Ci,one),e(one,qfo),e(Ci,Nfo),e(Ci,OP),e(OP,jfo),e(Ci,Dfo),e(ot,Gfo),M(Qh,ot,null),e(Lo,Ofo),e(Lo,He),M(y0,He,null),e(He,Vfo),e(He,rne),e(rne,Xfo),e(He,zfo),e(He,Aa),e(Aa,Qfo),e(Aa,tne),e(tne,Wfo),e(Aa,Hfo),e(Aa,ane),e(ane,Ufo),e(Aa,Jfo),e(Aa,nne),e(nne,Yfo),e(Aa,Kfo),e(He,Zfo),e(He,x),e(x,Wh),e(Wh,sne),e(sne,emo),e(Wh,omo),e(Wh,VP),e(VP,rmo),e(Wh,tmo),e(x,amo),e(x,Hh),e(Hh,lne),e(lne,nmo),e(Hh,smo),e(Hh,XP),e(XP,lmo),e(Hh,imo),e(x,dmo),e(x,Uh),e(Uh,ine),e(ine,cmo),e(Uh,fmo),e(Uh,zP),e(zP,mmo),e(Uh,gmo),e(x,hmo),e(x,Jh),e(Jh,dne),e(dne,pmo),e(Jh,umo),e(Jh,QP),e(QP,_mo),e(Jh,bmo),e(x,vmo),e(x,Yh),e(Yh,cne),e(cne,Fmo),e(Yh,Tmo),e(Yh,WP),e(WP,Mmo),e(Yh,Emo),e(x,Cmo),e(x,Kh),e(Kh,fne),e(fne,wmo),e(Kh,Amo),e(Kh,HP),e(HP,ymo),e(Kh,Lmo),e(x,xmo),e(x,Zh),e(Zh,mne),e(mne,$mo),e(Zh,kmo),e(Zh,UP),e(UP,Smo),e(Zh,Rmo),e(x,Bmo),e(x,ep),e(ep,gne),e(gne,Pmo),e(ep,Imo),e(ep,JP),e(JP,qmo),e(ep,Nmo),e(x,jmo),e(x,op),e(op,hne),e(hne,Dmo),e(op,Gmo),e(op,YP),e(YP,Omo),e(op,Vmo),e(x,Xmo),e(x,rp),e(rp,pne),e(pne,zmo),e(rp,Qmo),e(rp,KP),e(KP,Wmo),e(rp,Hmo),e(x,Umo),e(x,tp),e(tp,une),e(une,Jmo),e(tp,Ymo),e(tp,ZP),e(ZP,Kmo),e(tp,Zmo),e(x,ego),e(x,ap),e(ap,_ne),e(_ne,ogo),e(ap,rgo),e(ap,eI),e(eI,tgo),e(ap,ago),e(x,ngo),e(x,np),e(np,bne),e(bne,sgo),e(np,lgo),e(np,oI),e(oI,igo),e(np,dgo),e(x,cgo),e(x,sp),e(sp,vne),e(vne,fgo),e(sp,mgo),e(sp,rI),e(rI,ggo),e(sp,hgo),e(x,pgo),e(x,lp),e(lp,Fne),e(Fne,ugo),e(lp,_go),e(lp,tI),e(tI,bgo),e(lp,vgo),e(x,Fgo),e(x,ip),e(ip,Tne),e(Tne,Tgo),e(ip,Mgo),e(ip,aI),e(aI,Ego),e(ip,Cgo),e(x,wgo),e(x,dp),e(dp,Mne),e(Mne,Ago),e(dp,ygo),e(dp,nI),e(nI,Lgo),e(dp,xgo),e(x,$go),e(x,cp),e(cp,Ene),e(Ene,kgo),e(cp,Sgo),e(cp,sI),e(sI,Rgo),e(cp,Bgo),e(x,Pgo),e(x,fp),e(fp,Cne),e(Cne,Igo),e(fp,qgo),e(fp,lI),e(lI,Ngo),e(fp,jgo),e(x,Dgo),e(x,mp),e(mp,wne),e(wne,Ggo),e(mp,Ogo),e(mp,iI),e(iI,Vgo),e(mp,Xgo),e(x,zgo),e(x,gp),e(gp,Ane),e(Ane,Qgo),e(gp,Wgo),e(gp,dI),e(dI,Hgo),e(gp,Ugo),e(x,Jgo),e(x,hp),e(hp,yne),e(yne,Ygo),e(hp,Kgo),e(hp,cI),e(cI,Zgo),e(hp,eho),e(x,oho),e(x,pp),e(pp,Lne),e(Lne,rho),e(pp,tho),e(pp,fI),e(fI,aho),e(pp,nho),e(x,sho),e(x,up),e(up,xne),e(xne,lho),e(up,iho),e(up,mI),e(mI,dho),e(up,cho),e(x,fho),e(x,_p),e(_p,$ne),e($ne,mho),e(_p,gho),e(_p,gI),e(gI,hho),e(_p,pho),e(x,uho),e(x,bp),e(bp,kne),e(kne,_ho),e(bp,bho),e(bp,hI),e(hI,vho),e(bp,Fho),e(x,Tho),e(x,vp),e(vp,Sne),e(Sne,Mho),e(vp,Eho),e(vp,pI),e(pI,Cho),e(vp,who),e(x,Aho),e(x,Fp),e(Fp,Rne),e(Rne,yho),e(Fp,Lho),e(Fp,uI),e(uI,xho),e(Fp,$ho),e(x,kho),e(x,Tp),e(Tp,Bne),e(Bne,Sho),e(Tp,Rho),e(Tp,_I),e(_I,Bho),e(Tp,Pho),e(x,Iho),e(x,Mp),e(Mp,Pne),e(Pne,qho),e(Mp,Nho),e(Mp,bI),e(bI,jho),e(Mp,Dho),e(x,Gho),e(x,Ep),e(Ep,Ine),e(Ine,Oho),e(Ep,Vho),e(Ep,vI),e(vI,Xho),e(Ep,zho),e(x,Qho),e(x,Rs),e(Rs,qne),e(qne,Who),e(Rs,Hho),e(Rs,FI),e(FI,Uho),e(Rs,Jho),e(Rs,TI),e(TI,Yho),e(Rs,Kho),e(x,Zho),e(x,Cp),e(Cp,Nne),e(Nne,epo),e(Cp,opo),e(Cp,MI),e(MI,rpo),e(Cp,tpo),e(x,apo),e(x,wp),e(wp,jne),e(jne,npo),e(wp,spo),e(wp,EI),e(EI,lpo),e(wp,ipo),e(x,dpo),e(x,Ap),e(Ap,Dne),e(Dne,cpo),e(Ap,fpo),e(Ap,CI),e(CI,mpo),e(Ap,gpo),e(x,hpo),e(x,yp),e(yp,Gne),e(Gne,ppo),e(yp,upo),e(yp,wI),e(wI,_po),e(yp,bpo),e(x,vpo),e(x,Lp),e(Lp,One),e(One,Fpo),e(Lp,Tpo),e(Lp,AI),e(AI,Mpo),e(Lp,Epo),e(x,Cpo),e(x,xp),e(xp,Vne),e(Vne,wpo),e(xp,Apo),e(xp,yI),e(yI,ypo),e(xp,Lpo),e(x,xpo),e(x,$p),e($p,Xne),e(Xne,$po),e($p,kpo),e($p,LI),e(LI,Spo),e($p,Rpo),e(x,Bpo),e(x,kp),e(kp,zne),e(zne,Ppo),e(kp,Ipo),e(kp,xI),e(xI,qpo),e(kp,Npo),e(x,jpo),e(x,Sp),e(Sp,Qne),e(Qne,Dpo),e(Sp,Gpo),e(Sp,$I),e($I,Opo),e(Sp,Vpo),e(x,Xpo),e(x,Rp),e(Rp,Wne),e(Wne,zpo),e(Rp,Qpo),e(Rp,kI),e(kI,Wpo),e(Rp,Hpo),e(x,Upo),e(x,Bp),e(Bp,Hne),e(Hne,Jpo),e(Bp,Ypo),e(Bp,SI),e(SI,Kpo),e(Bp,Zpo),e(x,euo),e(x,Pp),e(Pp,Une),e(Une,ouo),e(Pp,ruo),e(Pp,RI),e(RI,tuo),e(Pp,auo),e(x,nuo),e(x,Ip),e(Ip,Jne),e(Jne,suo),e(Ip,luo),e(Ip,BI),e(BI,iuo),e(Ip,duo),e(x,cuo),e(x,qp),e(qp,Yne),e(Yne,fuo),e(qp,muo),e(qp,PI),e(PI,guo),e(qp,huo),e(x,puo),e(x,Np),e(Np,Kne),e(Kne,uuo),e(Np,_uo),e(Np,II),e(II,buo),e(Np,vuo),e(x,Fuo),e(x,jp),e(jp,Zne),e(Zne,Tuo),e(jp,Muo),e(jp,qI),e(qI,Euo),e(jp,Cuo),e(x,wuo),e(x,Dp),e(Dp,ese),e(ese,Auo),e(Dp,yuo),e(Dp,NI),e(NI,Luo),e(Dp,xuo),e(x,$uo),e(x,Gp),e(Gp,ose),e(ose,kuo),e(Gp,Suo),e(Gp,jI),e(jI,Ruo),e(Gp,Buo),e(x,Puo),e(x,Op),e(Op,rse),e(rse,Iuo),e(Op,quo),e(Op,DI),e(DI,Nuo),e(Op,juo),e(x,Duo),e(x,Vp),e(Vp,tse),e(tse,Guo),e(Vp,Ouo),e(Vp,GI),e(GI,Vuo),e(Vp,Xuo),e(x,zuo),e(x,Xp),e(Xp,ase),e(ase,Quo),e(Xp,Wuo),e(Xp,OI),e(OI,Huo),e(Xp,Uuo),e(x,Juo),e(x,zp),e(zp,nse),e(nse,Yuo),e(zp,Kuo),e(zp,VI),e(VI,Zuo),e(zp,e_o),e(x,o_o),e(x,Qp),e(Qp,sse),e(sse,r_o),e(Qp,t_o),e(Qp,XI),e(XI,a_o),e(Qp,n_o),e(x,s_o),e(x,Wp),e(Wp,lse),e(lse,l_o),e(Wp,i_o),e(Wp,zI),e(zI,d_o),e(Wp,c_o),e(x,f_o),e(x,Hp),e(Hp,ise),e(ise,m_o),e(Hp,g_o),e(Hp,QI),e(QI,h_o),e(Hp,p_o),e(x,u_o),e(x,Up),e(Up,dse),e(dse,__o),e(Up,b_o),e(Up,WI),e(WI,v_o),e(Up,F_o),e(x,T_o),e(x,Jp),e(Jp,cse),e(cse,M_o),e(Jp,E_o),e(Jp,HI),e(HI,C_o),e(Jp,w_o),e(x,A_o),e(x,Yp),e(Yp,fse),e(fse,y_o),e(Yp,L_o),e(Yp,UI),e(UI,x_o),e(Yp,$_o),e(x,k_o),e(x,Kp),e(Kp,mse),e(mse,S_o),e(Kp,R_o),e(Kp,JI),e(JI,B_o),e(Kp,P_o),e(x,I_o),e(x,Zp),e(Zp,gse),e(gse,q_o),e(Zp,N_o),e(Zp,YI),e(YI,j_o),e(Zp,D_o),e(x,G_o),e(x,eu),e(eu,hse),e(hse,O_o),e(eu,V_o),e(eu,KI),e(KI,X_o),e(eu,z_o),e(x,Q_o),e(x,ou),e(ou,pse),e(pse,W_o),e(ou,H_o),e(ou,ZI),e(ZI,U_o),e(ou,J_o),e(x,Y_o),e(x,ru),e(ru,use),e(use,K_o),e(ru,Z_o),e(ru,eq),e(eq,e2o),e(ru,o2o),e(x,r2o),e(x,tu),e(tu,_se),e(_se,t2o),e(tu,a2o),e(tu,oq),e(oq,n2o),e(tu,s2o),e(x,l2o),e(x,au),e(au,bse),e(bse,i2o),e(au,d2o),e(au,rq),e(rq,c2o),e(au,f2o),e(x,m2o),e(x,nu),e(nu,vse),e(vse,g2o),e(nu,h2o),e(nu,tq),e(tq,p2o),e(nu,u2o),e(x,_2o),e(x,su),e(su,Fse),e(Fse,b2o),e(su,v2o),e(su,aq),e(aq,F2o),e(su,T2o),e(x,M2o),e(x,lu),e(lu,Tse),e(Tse,E2o),e(lu,C2o),e(lu,nq),e(nq,w2o),e(lu,A2o),e(x,y2o),e(x,iu),e(iu,Mse),e(Mse,L2o),e(iu,x2o),e(iu,sq),e(sq,$2o),e(iu,k2o),e(x,S2o),e(x,du),e(du,Ese),e(Ese,R2o),e(du,B2o),e(du,lq),e(lq,P2o),e(du,I2o),e(x,q2o),e(x,cu),e(cu,Cse),e(Cse,N2o),e(cu,j2o),e(cu,iq),e(iq,D2o),e(cu,G2o),e(x,O2o),e(x,fu),e(fu,wse),e(wse,V2o),e(fu,X2o),e(fu,dq),e(dq,z2o),e(fu,Q2o),e(x,W2o),e(x,mu),e(mu,Ase),e(Ase,H2o),e(mu,U2o),e(mu,cq),e(cq,J2o),e(mu,Y2o),e(x,K2o),e(x,gu),e(gu,yse),e(yse,Z2o),e(gu,e1o),e(gu,fq),e(fq,o1o),e(gu,r1o),e(x,t1o),e(x,hu),e(hu,Lse),e(Lse,a1o),e(hu,n1o),e(hu,mq),e(mq,s1o),e(hu,l1o),e(x,i1o),e(x,pu),e(pu,xse),e(xse,d1o),e(pu,c1o),e(pu,gq),e(gq,f1o),e(pu,m1o),e(x,g1o),e(x,uu),e(uu,$se),e($se,h1o),e(uu,p1o),e(uu,hq),e(hq,u1o),e(uu,_1o),e(x,b1o),e(x,_u),e(_u,kse),e(kse,v1o),e(_u,F1o),e(_u,pq),e(pq,T1o),e(_u,M1o),e(x,E1o),e(x,bu),e(bu,Sse),e(Sse,C1o),e(bu,w1o),e(bu,uq),e(uq,A1o),e(bu,y1o),e(x,L1o),e(x,vu),e(vu,Rse),e(Rse,x1o),e(vu,$1o),e(vu,_q),e(_q,k1o),e(vu,S1o),e(x,R1o),e(x,Fu),e(Fu,Bse),e(Bse,B1o),e(Fu,P1o),e(Fu,bq),e(bq,I1o),e(Fu,q1o),e(x,N1o),e(x,Tu),e(Tu,Pse),e(Pse,j1o),e(Tu,D1o),e(Tu,vq),e(vq,G1o),e(Tu,O1o),e(x,V1o),e(x,Mu),e(Mu,Ise),e(Ise,X1o),e(Mu,z1o),e(Mu,Fq),e(Fq,Q1o),e(Mu,W1o),e(x,H1o),e(x,Eu),e(Eu,qse),e(qse,U1o),e(Eu,J1o),e(Eu,Tq),e(Tq,Y1o),e(Eu,K1o),e(x,Z1o),e(x,Cu),e(Cu,Nse),e(Nse,ebo),e(Cu,obo),e(Cu,Mq),e(Mq,rbo),e(Cu,tbo),e(x,abo),e(x,wu),e(wu,jse),e(jse,nbo),e(wu,sbo),e(wu,Eq),e(Eq,lbo),e(wu,ibo),e(x,dbo),e(x,Au),e(Au,Dse),e(Dse,cbo),e(Au,fbo),e(Au,Cq),e(Cq,mbo),e(Au,gbo),e(x,hbo),e(x,yu),e(yu,Gse),e(Gse,pbo),e(yu,ubo),e(yu,wq),e(wq,_bo),e(yu,bbo),e(x,vbo),e(x,Lu),e(Lu,Ose),e(Ose,Fbo),e(Lu,Tbo),e(Lu,Aq),e(Aq,Mbo),e(Lu,Ebo),e(x,Cbo),e(x,xu),e(xu,Vse),e(Vse,wbo),e(xu,Abo),e(xu,yq),e(yq,ybo),e(xu,Lbo),e(x,xbo),e(x,$u),e($u,Xse),e(Xse,$bo),e($u,kbo),e($u,Lq),e(Lq,Sbo),e($u,Rbo),e(x,Bbo),e(x,ku),e(ku,zse),e(zse,Pbo),e(ku,Ibo),e(ku,xq),e(xq,qbo),e(ku,Nbo),e(x,jbo),e(x,Su),e(Su,Qse),e(Qse,Dbo),e(Su,Gbo),e(Su,$q),e($q,Obo),e(Su,Vbo),e(x,Xbo),e(x,Ru),e(Ru,Wse),e(Wse,zbo),e(Ru,Qbo),e(Ru,kq),e(kq,Wbo),e(Ru,Hbo),e(x,Ubo),e(x,Bu),e(Bu,Hse),e(Hse,Jbo),e(Bu,Ybo),e(Bu,Sq),e(Sq,Kbo),e(Bu,Zbo),e(He,e4o),e(He,Pu),e(Pu,o4o),e(Pu,Use),e(Use,r4o),e(Pu,t4o),e(Pu,Jse),e(Jse,a4o),e(He,n4o),M(Iu,He,null),b(f,nIe,_),b(f,wi,_),e(wi,qu),e(qu,Yse),M(L0,Yse,null),e(wi,s4o),e(wi,Kse),e(Kse,l4o),b(f,sIe,_),b(f,xo,_),M(x0,xo,null),e(xo,i4o),e(xo,Ai),e(Ai,d4o),e(Ai,Rq),e(Rq,c4o),e(Ai,f4o),e(Ai,Bq),e(Bq,m4o),e(Ai,g4o),e(xo,h4o),e(xo,$0),e($0,p4o),e($0,Zse),e(Zse,u4o),e($0,_4o),e(xo,b4o),e(xo,rt),M(k0,rt,null),e(rt,v4o),e(rt,ele),e(ele,F4o),e(rt,T4o),e(rt,yi),e(yi,M4o),e(yi,ole),e(ole,E4o),e(yi,C4o),e(yi,Pq),e(Pq,w4o),e(yi,A4o),e(rt,y4o),M(Nu,rt,null),e(xo,L4o),e(xo,Ue),M(S0,Ue,null),e(Ue,x4o),e(Ue,rle),e(rle,$4o),e(Ue,k4o),e(Ue,ya),e(ya,S4o),e(ya,tle),e(tle,R4o),e(ya,B4o),e(ya,ale),e(ale,P4o),e(ya,I4o),e(ya,nle),e(nle,q4o),e(ya,N4o),e(Ue,j4o),e(Ue,G),e(G,ju),e(ju,sle),e(sle,D4o),e(ju,G4o),e(ju,Iq),e(Iq,O4o),e(ju,V4o),e(G,X4o),e(G,Du),e(Du,lle),e(lle,z4o),e(Du,Q4o),e(Du,qq),e(qq,W4o),e(Du,H4o),e(G,U4o),e(G,Gu),e(Gu,ile),e(ile,J4o),e(Gu,Y4o),e(Gu,Nq),e(Nq,K4o),e(Gu,Z4o),e(G,e5o),e(G,Ou),e(Ou,dle),e(dle,o5o),e(Ou,r5o),e(Ou,jq),e(jq,t5o),e(Ou,a5o),e(G,n5o),e(G,Vu),e(Vu,cle),e(cle,s5o),e(Vu,l5o),e(Vu,Dq),e(Dq,i5o),e(Vu,d5o),e(G,c5o),e(G,Xu),e(Xu,fle),e(fle,f5o),e(Xu,m5o),e(Xu,Gq),e(Gq,g5o),e(Xu,h5o),e(G,p5o),e(G,zu),e(zu,mle),e(mle,u5o),e(zu,_5o),e(zu,Oq),e(Oq,b5o),e(zu,v5o),e(G,F5o),e(G,Qu),e(Qu,gle),e(gle,T5o),e(Qu,M5o),e(Qu,Vq),e(Vq,E5o),e(Qu,C5o),e(G,w5o),e(G,Wu),e(Wu,hle),e(hle,A5o),e(Wu,y5o),e(Wu,Xq),e(Xq,L5o),e(Wu,x5o),e(G,$5o),e(G,Hu),e(Hu,ple),e(ple,k5o),e(Hu,S5o),e(Hu,zq),e(zq,R5o),e(Hu,B5o),e(G,P5o),e(G,Uu),e(Uu,ule),e(ule,I5o),e(Uu,q5o),e(Uu,Qq),e(Qq,N5o),e(Uu,j5o),e(G,D5o),e(G,Ju),e(Ju,_le),e(_le,G5o),e(Ju,O5o),e(Ju,Wq),e(Wq,V5o),e(Ju,X5o),e(G,z5o),e(G,Yu),e(Yu,ble),e(ble,Q5o),e(Yu,W5o),e(Yu,Hq),e(Hq,H5o),e(Yu,U5o),e(G,J5o),e(G,Ku),e(Ku,vle),e(vle,Y5o),e(Ku,K5o),e(Ku,Uq),e(Uq,Z5o),e(Ku,evo),e(G,ovo),e(G,Zu),e(Zu,Fle),e(Fle,rvo),e(Zu,tvo),e(Zu,Jq),e(Jq,avo),e(Zu,nvo),e(G,svo),e(G,e_),e(e_,Tle),e(Tle,lvo),e(e_,ivo),e(e_,Yq),e(Yq,dvo),e(e_,cvo),e(G,fvo),e(G,o_),e(o_,Mle),e(Mle,mvo),e(o_,gvo),e(o_,Kq),e(Kq,hvo),e(o_,pvo),e(G,uvo),e(G,r_),e(r_,Ele),e(Ele,_vo),e(r_,bvo),e(r_,Zq),e(Zq,vvo),e(r_,Fvo),e(G,Tvo),e(G,t_),e(t_,Cle),e(Cle,Mvo),e(t_,Evo),e(t_,eN),e(eN,Cvo),e(t_,wvo),e(G,Avo),e(G,a_),e(a_,wle),e(wle,yvo),e(a_,Lvo),e(a_,oN),e(oN,xvo),e(a_,$vo),e(G,kvo),e(G,n_),e(n_,Ale),e(Ale,Svo),e(n_,Rvo),e(n_,rN),e(rN,Bvo),e(n_,Pvo),e(G,Ivo),e(G,s_),e(s_,yle),e(yle,qvo),e(s_,Nvo),e(s_,tN),e(tN,jvo),e(s_,Dvo),e(G,Gvo),e(G,l_),e(l_,Lle),e(Lle,Ovo),e(l_,Vvo),e(l_,aN),e(aN,Xvo),e(l_,zvo),e(G,Qvo),e(G,i_),e(i_,xle),e(xle,Wvo),e(i_,Hvo),e(i_,nN),e(nN,Uvo),e(i_,Jvo),e(G,Yvo),e(G,d_),e(d_,$le),e($le,Kvo),e(d_,Zvo),e(d_,sN),e(sN,eFo),e(d_,oFo),e(G,rFo),e(G,c_),e(c_,kle),e(kle,tFo),e(c_,aFo),e(c_,lN),e(lN,nFo),e(c_,sFo),e(G,lFo),e(G,f_),e(f_,Sle),e(Sle,iFo),e(f_,dFo),e(f_,iN),e(iN,cFo),e(f_,fFo),e(G,mFo),e(G,m_),e(m_,Rle),e(Rle,gFo),e(m_,hFo),e(m_,dN),e(dN,pFo),e(m_,uFo),e(G,_Fo),e(G,g_),e(g_,Ble),e(Ble,bFo),e(g_,vFo),e(g_,cN),e(cN,FFo),e(g_,TFo),e(G,MFo),e(G,h_),e(h_,Ple),e(Ple,EFo),e(h_,CFo),e(h_,fN),e(fN,wFo),e(h_,AFo),e(G,yFo),e(G,p_),e(p_,Ile),e(Ile,LFo),e(p_,xFo),e(p_,mN),e(mN,$Fo),e(p_,kFo),e(G,SFo),e(G,u_),e(u_,qle),e(qle,RFo),e(u_,BFo),e(u_,gN),e(gN,PFo),e(u_,IFo),e(G,qFo),e(G,__),e(__,Nle),e(Nle,NFo),e(__,jFo),e(__,hN),e(hN,DFo),e(__,GFo),e(G,OFo),e(G,b_),e(b_,jle),e(jle,VFo),e(b_,XFo),e(b_,pN),e(pN,zFo),e(b_,QFo),e(G,WFo),e(G,v_),e(v_,Dle),e(Dle,HFo),e(v_,UFo),e(v_,uN),e(uN,JFo),e(v_,YFo),e(G,KFo),e(G,F_),e(F_,Gle),e(Gle,ZFo),e(F_,eTo),e(F_,_N),e(_N,oTo),e(F_,rTo),e(G,tTo),e(G,T_),e(T_,Ole),e(Ole,aTo),e(T_,nTo),e(T_,bN),e(bN,sTo),e(T_,lTo),e(G,iTo),e(G,M_),e(M_,Vle),e(Vle,dTo),e(M_,cTo),e(M_,vN),e(vN,fTo),e(M_,mTo),e(G,gTo),e(G,E_),e(E_,Xle),e(Xle,hTo),e(E_,pTo),e(E_,FN),e(FN,uTo),e(E_,_To),e(G,bTo),e(G,C_),e(C_,zle),e(zle,vTo),e(C_,FTo),e(C_,TN),e(TN,TTo),e(C_,MTo),e(Ue,ETo),e(Ue,w_),e(w_,CTo),e(w_,Qle),e(Qle,wTo),e(w_,ATo),e(w_,Wle),e(Wle,yTo),e(Ue,LTo),M(A_,Ue,null),b(f,lIe,_),b(f,Li,_),e(Li,y_),e(y_,Hle),M(R0,Hle,null),e(Li,xTo),e(Li,Ule),e(Ule,$To),b(f,iIe,_),b(f,$o,_),M(B0,$o,null),e($o,kTo),e($o,xi),e(xi,STo),e(xi,MN),e(MN,RTo),e(xi,BTo),e(xi,EN),e(EN,PTo),e(xi,ITo),e($o,qTo),e($o,P0),e(P0,NTo),e(P0,Jle),e(Jle,jTo),e(P0,DTo),e($o,GTo),e($o,tt),M(I0,tt,null),e(tt,OTo),e(tt,Yle),e(Yle,VTo),e(tt,XTo),e(tt,$i),e($i,zTo),e($i,Kle),e(Kle,QTo),e($i,WTo),e($i,CN),e(CN,HTo),e($i,UTo),e(tt,JTo),M(L_,tt,null),e($o,YTo),e($o,Je),M(q0,Je,null),e(Je,KTo),e(Je,Zle),e(Zle,ZTo),e(Je,e7o),e(Je,La),e(La,o7o),e(La,eie),e(eie,r7o),e(La,t7o),e(La,oie),e(oie,a7o),e(La,n7o),e(La,rie),e(rie,s7o),e(La,l7o),e(Je,i7o),e(Je,z),e(z,x_),e(x_,tie),e(tie,d7o),e(x_,c7o),e(x_,wN),e(wN,f7o),e(x_,m7o),e(z,g7o),e(z,$_),e($_,aie),e(aie,h7o),e($_,p7o),e($_,AN),e(AN,u7o),e($_,_7o),e(z,b7o),e(z,k_),e(k_,nie),e(nie,v7o),e(k_,F7o),e(k_,yN),e(yN,T7o),e(k_,M7o),e(z,E7o),e(z,S_),e(S_,sie),e(sie,C7o),e(S_,w7o),e(S_,LN),e(LN,A7o),e(S_,y7o),e(z,L7o),e(z,R_),e(R_,lie),e(lie,x7o),e(R_,$7o),e(R_,xN),e(xN,k7o),e(R_,S7o),e(z,R7o),e(z,B_),e(B_,iie),e(iie,B7o),e(B_,P7o),e(B_,$N),e($N,I7o),e(B_,q7o),e(z,N7o),e(z,P_),e(P_,die),e(die,j7o),e(P_,D7o),e(P_,kN),e(kN,G7o),e(P_,O7o),e(z,V7o),e(z,I_),e(I_,cie),e(cie,X7o),e(I_,z7o),e(I_,SN),e(SN,Q7o),e(I_,W7o),e(z,H7o),e(z,q_),e(q_,fie),e(fie,U7o),e(q_,J7o),e(q_,RN),e(RN,Y7o),e(q_,K7o),e(z,Z7o),e(z,N_),e(N_,mie),e(mie,eMo),e(N_,oMo),e(N_,BN),e(BN,rMo),e(N_,tMo),e(z,aMo),e(z,j_),e(j_,gie),e(gie,nMo),e(j_,sMo),e(j_,PN),e(PN,lMo),e(j_,iMo),e(z,dMo),e(z,D_),e(D_,hie),e(hie,cMo),e(D_,fMo),e(D_,IN),e(IN,mMo),e(D_,gMo),e(z,hMo),e(z,G_),e(G_,pie),e(pie,pMo),e(G_,uMo),e(G_,qN),e(qN,_Mo),e(G_,bMo),e(z,vMo),e(z,O_),e(O_,uie),e(uie,FMo),e(O_,TMo),e(O_,NN),e(NN,MMo),e(O_,EMo),e(z,CMo),e(z,V_),e(V_,_ie),e(_ie,wMo),e(V_,AMo),e(V_,jN),e(jN,yMo),e(V_,LMo),e(z,xMo),e(z,X_),e(X_,bie),e(bie,$Mo),e(X_,kMo),e(X_,DN),e(DN,SMo),e(X_,RMo),e(z,BMo),e(z,z_),e(z_,vie),e(vie,PMo),e(z_,IMo),e(z_,GN),e(GN,qMo),e(z_,NMo),e(z,jMo),e(z,Q_),e(Q_,Fie),e(Fie,DMo),e(Q_,GMo),e(Q_,ON),e(ON,OMo),e(Q_,VMo),e(z,XMo),e(z,W_),e(W_,Tie),e(Tie,zMo),e(W_,QMo),e(W_,VN),e(VN,WMo),e(W_,HMo),e(z,UMo),e(z,H_),e(H_,Mie),e(Mie,JMo),e(H_,YMo),e(H_,XN),e(XN,KMo),e(H_,ZMo),e(z,eEo),e(z,U_),e(U_,Eie),e(Eie,oEo),e(U_,rEo),e(U_,zN),e(zN,tEo),e(U_,aEo),e(z,nEo),e(z,J_),e(J_,Cie),e(Cie,sEo),e(J_,lEo),e(J_,QN),e(QN,iEo),e(J_,dEo),e(z,cEo),e(z,Y_),e(Y_,wie),e(wie,fEo),e(Y_,mEo),e(Y_,WN),e(WN,gEo),e(Y_,hEo),e(z,pEo),e(z,K_),e(K_,Aie),e(Aie,uEo),e(K_,_Eo),e(K_,HN),e(HN,bEo),e(K_,vEo),e(z,FEo),e(z,Z_),e(Z_,yie),e(yie,TEo),e(Z_,MEo),e(Z_,UN),e(UN,EEo),e(Z_,CEo),e(z,wEo),e(z,e2),e(e2,Lie),e(Lie,AEo),e(e2,yEo),e(e2,JN),e(JN,LEo),e(e2,xEo),e(z,$Eo),e(z,o2),e(o2,xie),e(xie,kEo),e(o2,SEo),e(o2,YN),e(YN,REo),e(o2,BEo),e(z,PEo),e(z,r2),e(r2,$ie),e($ie,IEo),e(r2,qEo),e(r2,KN),e(KN,NEo),e(r2,jEo),e(z,DEo),e(z,t2),e(t2,kie),e(kie,GEo),e(t2,OEo),e(t2,ZN),e(ZN,VEo),e(t2,XEo),e(z,zEo),e(z,a2),e(a2,Sie),e(Sie,QEo),e(a2,WEo),e(a2,ej),e(ej,HEo),e(a2,UEo),e(z,JEo),e(z,n2),e(n2,Rie),e(Rie,YEo),e(n2,KEo),e(n2,oj),e(oj,ZEo),e(n2,eCo),e(z,oCo),e(z,s2),e(s2,Bie),e(Bie,rCo),e(s2,tCo),e(s2,rj),e(rj,aCo),e(s2,nCo),e(z,sCo),e(z,l2),e(l2,Pie),e(Pie,lCo),e(l2,iCo),e(l2,tj),e(tj,dCo),e(l2,cCo),e(z,fCo),e(z,i2),e(i2,Iie),e(Iie,mCo),e(i2,gCo),e(i2,aj),e(aj,hCo),e(i2,pCo),e(z,uCo),e(z,d2),e(d2,qie),e(qie,_Co),e(d2,bCo),e(d2,nj),e(nj,vCo),e(d2,FCo),e(z,TCo),e(z,c2),e(c2,Nie),e(Nie,MCo),e(c2,ECo),e(c2,sj),e(sj,CCo),e(c2,wCo),e(Je,ACo),e(Je,f2),e(f2,yCo),e(f2,jie),e(jie,LCo),e(f2,xCo),e(f2,Die),e(Die,$Co),e(Je,kCo),M(m2,Je,null),b(f,dIe,_),b(f,ki,_),e(ki,g2),e(g2,Gie),M(N0,Gie,null),e(ki,SCo),e(ki,Oie),e(Oie,RCo),b(f,cIe,_),b(f,ko,_),M(j0,ko,null),e(ko,BCo),e(ko,Si),e(Si,PCo),e(Si,lj),e(lj,ICo),e(Si,qCo),e(Si,ij),e(ij,NCo),e(Si,jCo),e(ko,DCo),e(ko,D0),e(D0,GCo),e(D0,Vie),e(Vie,OCo),e(D0,VCo),e(ko,XCo),e(ko,at),M(G0,at,null),e(at,zCo),e(at,Xie),e(Xie,QCo),e(at,WCo),e(at,Ri),e(Ri,HCo),e(Ri,zie),e(zie,UCo),e(Ri,JCo),e(Ri,dj),e(dj,YCo),e(Ri,KCo),e(at,ZCo),M(h2,at,null),e(ko,e3o),e(ko,Ye),M(O0,Ye,null),e(Ye,o3o),e(Ye,Qie),e(Qie,r3o),e(Ye,t3o),e(Ye,xa),e(xa,a3o),e(xa,Wie),e(Wie,n3o),e(xa,s3o),e(xa,Hie),e(Hie,l3o),e(xa,i3o),e(xa,Uie),e(Uie,d3o),e(xa,c3o),e(Ye,f3o),e(Ye,Q),e(Q,p2),e(p2,Jie),e(Jie,m3o),e(p2,g3o),e(p2,cj),e(cj,h3o),e(p2,p3o),e(Q,u3o),e(Q,u2),e(u2,Yie),e(Yie,_3o),e(u2,b3o),e(u2,fj),e(fj,v3o),e(u2,F3o),e(Q,T3o),e(Q,_2),e(_2,Kie),e(Kie,M3o),e(_2,E3o),e(_2,mj),e(mj,C3o),e(_2,w3o),e(Q,A3o),e(Q,b2),e(b2,Zie),e(Zie,y3o),e(b2,L3o),e(b2,gj),e(gj,x3o),e(b2,$3o),e(Q,k3o),e(Q,v2),e(v2,ede),e(ede,S3o),e(v2,R3o),e(v2,hj),e(hj,B3o),e(v2,P3o),e(Q,I3o),e(Q,F2),e(F2,ode),e(ode,q3o),e(F2,N3o),e(F2,pj),e(pj,j3o),e(F2,D3o),e(Q,G3o),e(Q,T2),e(T2,rde),e(rde,O3o),e(T2,V3o),e(T2,uj),e(uj,X3o),e(T2,z3o),e(Q,Q3o),e(Q,M2),e(M2,tde),e(tde,W3o),e(M2,H3o),e(M2,_j),e(_j,U3o),e(M2,J3o),e(Q,Y3o),e(Q,E2),e(E2,ade),e(ade,K3o),e(E2,Z3o),e(E2,bj),e(bj,ewo),e(E2,owo),e(Q,rwo),e(Q,C2),e(C2,nde),e(nde,two),e(C2,awo),e(C2,vj),e(vj,nwo),e(C2,swo),e(Q,lwo),e(Q,w2),e(w2,sde),e(sde,iwo),e(w2,dwo),e(w2,Fj),e(Fj,cwo),e(w2,fwo),e(Q,mwo),e(Q,A2),e(A2,lde),e(lde,gwo),e(A2,hwo),e(A2,Tj),e(Tj,pwo),e(A2,uwo),e(Q,_wo),e(Q,y2),e(y2,ide),e(ide,bwo),e(y2,vwo),e(y2,Mj),e(Mj,Fwo),e(y2,Two),e(Q,Mwo),e(Q,L2),e(L2,dde),e(dde,Ewo),e(L2,Cwo),e(L2,Ej),e(Ej,wwo),e(L2,Awo),e(Q,ywo),e(Q,x2),e(x2,cde),e(cde,Lwo),e(x2,xwo),e(x2,Cj),e(Cj,$wo),e(x2,kwo),e(Q,Swo),e(Q,$2),e($2,fde),e(fde,Rwo),e($2,Bwo),e($2,wj),e(wj,Pwo),e($2,Iwo),e(Q,qwo),e(Q,k2),e(k2,mde),e(mde,Nwo),e(k2,jwo),e(k2,Aj),e(Aj,Dwo),e(k2,Gwo),e(Q,Owo),e(Q,S2),e(S2,gde),e(gde,Vwo),e(S2,Xwo),e(S2,yj),e(yj,zwo),e(S2,Qwo),e(Q,Wwo),e(Q,R2),e(R2,hde),e(hde,Hwo),e(R2,Uwo),e(R2,Lj),e(Lj,Jwo),e(R2,Ywo),e(Q,Kwo),e(Q,B2),e(B2,pde),e(pde,Zwo),e(B2,eAo),e(B2,xj),e(xj,oAo),e(B2,rAo),e(Q,tAo),e(Q,P2),e(P2,ude),e(ude,aAo),e(P2,nAo),e(P2,$j),e($j,sAo),e(P2,lAo),e(Q,iAo),e(Q,I2),e(I2,_de),e(_de,dAo),e(I2,cAo),e(I2,kj),e(kj,fAo),e(I2,mAo),e(Q,gAo),e(Q,q2),e(q2,bde),e(bde,hAo),e(q2,pAo),e(q2,Sj),e(Sj,uAo),e(q2,_Ao),e(Q,bAo),e(Q,N2),e(N2,vde),e(vde,vAo),e(N2,FAo),e(N2,Rj),e(Rj,TAo),e(N2,MAo),e(Q,EAo),e(Q,j2),e(j2,Fde),e(Fde,CAo),e(j2,wAo),e(j2,Bj),e(Bj,AAo),e(j2,yAo),e(Q,LAo),e(Q,D2),e(D2,Tde),e(Tde,xAo),e(D2,$Ao),e(D2,Pj),e(Pj,kAo),e(D2,SAo),e(Q,RAo),e(Q,G2),e(G2,Mde),e(Mde,BAo),e(G2,PAo),e(G2,Ij),e(Ij,IAo),e(G2,qAo),e(Q,NAo),e(Q,O2),e(O2,Ede),e(Ede,jAo),e(O2,DAo),e(O2,qj),e(qj,GAo),e(O2,OAo),e(Q,VAo),e(Q,V2),e(V2,Cde),e(Cde,XAo),e(V2,zAo),e(V2,Nj),e(Nj,QAo),e(V2,WAo),e(Q,HAo),e(Q,X2),e(X2,wde),e(wde,UAo),e(X2,JAo),e(X2,jj),e(jj,YAo),e(X2,KAo),e(Q,ZAo),e(Q,z2),e(z2,Ade),e(Ade,e6o),e(z2,o6o),e(z2,yde),e(yde,r6o),e(z2,t6o),e(Q,a6o),e(Q,Q2),e(Q2,Lde),e(Lde,n6o),e(Q2,s6o),e(Q2,Dj),e(Dj,l6o),e(Q2,i6o),e(Q,d6o),e(Q,W2),e(W2,xde),e(xde,c6o),e(W2,f6o),e(W2,Gj),e(Gj,m6o),e(W2,g6o),e(Q,h6o),e(Q,H2),e(H2,$de),e($de,p6o),e(H2,u6o),e(H2,Oj),e(Oj,_6o),e(H2,b6o),e(Q,v6o),e(Q,U2),e(U2,kde),e(kde,F6o),e(U2,T6o),e(U2,Vj),e(Vj,M6o),e(U2,E6o),e(Ye,C6o),e(Ye,J2),e(J2,w6o),e(J2,Sde),e(Sde,A6o),e(J2,y6o),e(J2,Rde),e(Rde,L6o),e(Ye,x6o),M(Y2,Ye,null),b(f,fIe,_),b(f,Bi,_),e(Bi,K2),e(K2,Bde),M(V0,Bde,null),e(Bi,$6o),e(Bi,Pde),e(Pde,k6o),b(f,mIe,_),b(f,So,_),M(X0,So,null),e(So,S6o),e(So,Pi),e(Pi,R6o),e(Pi,Xj),e(Xj,B6o),e(Pi,P6o),e(Pi,zj),e(zj,I6o),e(Pi,q6o),e(So,N6o),e(So,z0),e(z0,j6o),e(z0,Ide),e(Ide,D6o),e(z0,G6o),e(So,O6o),e(So,nt),M(Q0,nt,null),e(nt,V6o),e(nt,qde),e(qde,X6o),e(nt,z6o),e(nt,Ii),e(Ii,Q6o),e(Ii,Nde),e(Nde,W6o),e(Ii,H6o),e(Ii,Qj),e(Qj,U6o),e(Ii,J6o),e(nt,Y6o),M(Z2,nt,null),e(So,K6o),e(So,Ke),M(W0,Ke,null),e(Ke,Z6o),e(Ke,jde),e(jde,e0o),e(Ke,o0o),e(Ke,$a),e($a,r0o),e($a,Dde),e(Dde,t0o),e($a,a0o),e($a,Gde),e(Gde,n0o),e($a,s0o),e($a,Ode),e(Ode,l0o),e($a,i0o),e(Ke,d0o),e(Ke,he),e(he,e1),e(e1,Vde),e(Vde,c0o),e(e1,f0o),e(e1,Wj),e(Wj,m0o),e(e1,g0o),e(he,h0o),e(he,o1),e(o1,Xde),e(Xde,p0o),e(o1,u0o),e(o1,Hj),e(Hj,_0o),e(o1,b0o),e(he,v0o),e(he,r1),e(r1,zde),e(zde,F0o),e(r1,T0o),e(r1,Uj),e(Uj,M0o),e(r1,E0o),e(he,C0o),e(he,t1),e(t1,Qde),e(Qde,w0o),e(t1,A0o),e(t1,Jj),e(Jj,y0o),e(t1,L0o),e(he,x0o),e(he,a1),e(a1,Wde),e(Wde,$0o),e(a1,k0o),e(a1,Yj),e(Yj,S0o),e(a1,R0o),e(he,B0o),e(he,n1),e(n1,Hde),e(Hde,P0o),e(n1,I0o),e(n1,Kj),e(Kj,q0o),e(n1,N0o),e(he,j0o),e(he,s1),e(s1,Ude),e(Ude,D0o),e(s1,G0o),e(s1,Zj),e(Zj,O0o),e(s1,V0o),e(he,X0o),e(he,l1),e(l1,Jde),e(Jde,z0o),e(l1,Q0o),e(l1,eD),e(eD,W0o),e(l1,H0o),e(he,U0o),e(he,i1),e(i1,Yde),e(Yde,J0o),e(i1,Y0o),e(i1,oD),e(oD,K0o),e(i1,Z0o),e(he,eyo),e(he,d1),e(d1,Kde),e(Kde,oyo),e(d1,ryo),e(d1,rD),e(rD,tyo),e(d1,ayo),e(he,nyo),e(he,c1),e(c1,Zde),e(Zde,syo),e(c1,lyo),e(c1,tD),e(tD,iyo),e(c1,dyo),e(he,cyo),e(he,f1),e(f1,ece),e(ece,fyo),e(f1,myo),e(f1,aD),e(aD,gyo),e(f1,hyo),e(he,pyo),e(he,m1),e(m1,oce),e(oce,uyo),e(m1,_yo),e(m1,nD),e(nD,byo),e(m1,vyo),e(he,Fyo),e(he,g1),e(g1,rce),e(rce,Tyo),e(g1,Myo),e(g1,sD),e(sD,Eyo),e(g1,Cyo),e(he,wyo),e(he,h1),e(h1,tce),e(tce,Ayo),e(h1,yyo),e(h1,lD),e(lD,Lyo),e(h1,xyo),e(he,$yo),e(he,p1),e(p1,ace),e(ace,kyo),e(p1,Syo),e(p1,iD),e(iD,Ryo),e(p1,Byo),e(he,Pyo),e(he,u1),e(u1,nce),e(nce,Iyo),e(u1,qyo),e(u1,dD),e(dD,Nyo),e(u1,jyo),e(Ke,Dyo),e(Ke,_1),e(_1,Gyo),e(_1,sce),e(sce,Oyo),e(_1,Vyo),e(_1,lce),e(lce,Xyo),e(Ke,zyo),M(b1,Ke,null),b(f,gIe,_),b(f,qi,_),e(qi,v1),e(v1,ice),M(H0,ice,null),e(qi,Qyo),e(qi,dce),e(dce,Wyo),b(f,hIe,_),b(f,Ro,_),M(U0,Ro,null),e(Ro,Hyo),e(Ro,Ni),e(Ni,Uyo),e(Ni,cD),e(cD,Jyo),e(Ni,Yyo),e(Ni,fD),e(fD,Kyo),e(Ni,Zyo),e(Ro,eLo),e(Ro,J0),e(J0,oLo),e(J0,cce),e(cce,rLo),e(J0,tLo),e(Ro,aLo),e(Ro,st),M(Y0,st,null),e(st,nLo),e(st,fce),e(fce,sLo),e(st,lLo),e(st,ji),e(ji,iLo),e(ji,mce),e(mce,dLo),e(ji,cLo),e(ji,mD),e(mD,fLo),e(ji,mLo),e(st,gLo),M(F1,st,null),e(Ro,hLo),e(Ro,Ze),M(K0,Ze,null),e(Ze,pLo),e(Ze,gce),e(gce,uLo),e(Ze,_Lo),e(Ze,ka),e(ka,bLo),e(ka,hce),e(hce,vLo),e(ka,FLo),e(ka,pce),e(pce,TLo),e(ka,MLo),e(ka,uce),e(uce,ELo),e(ka,CLo),e(Ze,wLo),e(Ze,q),e(q,T1),e(T1,_ce),e(_ce,ALo),e(T1,yLo),e(T1,gD),e(gD,LLo),e(T1,xLo),e(q,$Lo),e(q,M1),e(M1,bce),e(bce,kLo),e(M1,SLo),e(M1,hD),e(hD,RLo),e(M1,BLo),e(q,PLo),e(q,E1),e(E1,vce),e(vce,ILo),e(E1,qLo),e(E1,pD),e(pD,NLo),e(E1,jLo),e(q,DLo),e(q,C1),e(C1,Fce),e(Fce,GLo),e(C1,OLo),e(C1,uD),e(uD,VLo),e(C1,XLo),e(q,zLo),e(q,w1),e(w1,Tce),e(Tce,QLo),e(w1,WLo),e(w1,_D),e(_D,HLo),e(w1,ULo),e(q,JLo),e(q,A1),e(A1,Mce),e(Mce,YLo),e(A1,KLo),e(A1,bD),e(bD,ZLo),e(A1,e8o),e(q,o8o),e(q,y1),e(y1,Ece),e(Ece,r8o),e(y1,t8o),e(y1,vD),e(vD,a8o),e(y1,n8o),e(q,s8o),e(q,L1),e(L1,Cce),e(Cce,l8o),e(L1,i8o),e(L1,FD),e(FD,d8o),e(L1,c8o),e(q,f8o),e(q,x1),e(x1,wce),e(wce,m8o),e(x1,g8o),e(x1,TD),e(TD,h8o),e(x1,p8o),e(q,u8o),e(q,$1),e($1,Ace),e(Ace,_8o),e($1,b8o),e($1,MD),e(MD,v8o),e($1,F8o),e(q,T8o),e(q,k1),e(k1,yce),e(yce,M8o),e(k1,E8o),e(k1,ED),e(ED,C8o),e(k1,w8o),e(q,A8o),e(q,S1),e(S1,Lce),e(Lce,y8o),e(S1,L8o),e(S1,CD),e(CD,x8o),e(S1,$8o),e(q,k8o),e(q,R1),e(R1,xce),e(xce,S8o),e(R1,R8o),e(R1,wD),e(wD,B8o),e(R1,P8o),e(q,I8o),e(q,B1),e(B1,$ce),e($ce,q8o),e(B1,N8o),e(B1,AD),e(AD,j8o),e(B1,D8o),e(q,G8o),e(q,P1),e(P1,kce),e(kce,O8o),e(P1,V8o),e(P1,yD),e(yD,X8o),e(P1,z8o),e(q,Q8o),e(q,I1),e(I1,Sce),e(Sce,W8o),e(I1,H8o),e(I1,LD),e(LD,U8o),e(I1,J8o),e(q,Y8o),e(q,q1),e(q1,Rce),e(Rce,K8o),e(q1,Z8o),e(q1,xD),e(xD,exo),e(q1,oxo),e(q,rxo),e(q,N1),e(N1,Bce),e(Bce,txo),e(N1,axo),e(N1,$D),e($D,nxo),e(N1,sxo),e(q,lxo),e(q,j1),e(j1,Pce),e(Pce,ixo),e(j1,dxo),e(j1,kD),e(kD,cxo),e(j1,fxo),e(q,mxo),e(q,D1),e(D1,Ice),e(Ice,gxo),e(D1,hxo),e(D1,SD),e(SD,pxo),e(D1,uxo),e(q,_xo),e(q,G1),e(G1,qce),e(qce,bxo),e(G1,vxo),e(G1,RD),e(RD,Fxo),e(G1,Txo),e(q,Mxo),e(q,O1),e(O1,Nce),e(Nce,Exo),e(O1,Cxo),e(O1,BD),e(BD,wxo),e(O1,Axo),e(q,yxo),e(q,V1),e(V1,jce),e(jce,Lxo),e(V1,xxo),e(V1,PD),e(PD,$xo),e(V1,kxo),e(q,Sxo),e(q,X1),e(X1,Dce),e(Dce,Rxo),e(X1,Bxo),e(X1,ID),e(ID,Pxo),e(X1,Ixo),e(q,qxo),e(q,z1),e(z1,Gce),e(Gce,Nxo),e(z1,jxo),e(z1,qD),e(qD,Dxo),e(z1,Gxo),e(q,Oxo),e(q,Q1),e(Q1,Oce),e(Oce,Vxo),e(Q1,Xxo),e(Q1,ND),e(ND,zxo),e(Q1,Qxo),e(q,Wxo),e(q,W1),e(W1,Vce),e(Vce,Hxo),e(W1,Uxo),e(W1,jD),e(jD,Jxo),e(W1,Yxo),e(q,Kxo),e(q,H1),e(H1,Xce),e(Xce,Zxo),e(H1,e9o),e(H1,DD),e(DD,o9o),e(H1,r9o),e(q,t9o),e(q,U1),e(U1,zce),e(zce,a9o),e(U1,n9o),e(U1,GD),e(GD,s9o),e(U1,l9o),e(q,i9o),e(q,J1),e(J1,Qce),e(Qce,d9o),e(J1,c9o),e(J1,OD),e(OD,f9o),e(J1,m9o),e(q,g9o),e(q,Y1),e(Y1,Wce),e(Wce,h9o),e(Y1,p9o),e(Y1,VD),e(VD,u9o),e(Y1,_9o),e(q,b9o),e(q,K1),e(K1,Hce),e(Hce,v9o),e(K1,F9o),e(K1,XD),e(XD,T9o),e(K1,M9o),e(q,E9o),e(q,Z1),e(Z1,Uce),e(Uce,C9o),e(Z1,w9o),e(Z1,zD),e(zD,A9o),e(Z1,y9o),e(q,L9o),e(q,eb),e(eb,Jce),e(Jce,x9o),e(eb,$9o),e(eb,QD),e(QD,k9o),e(eb,S9o),e(q,R9o),e(q,ob),e(ob,Yce),e(Yce,B9o),e(ob,P9o),e(ob,WD),e(WD,I9o),e(ob,q9o),e(q,N9o),e(q,rb),e(rb,Kce),e(Kce,j9o),e(rb,D9o),e(rb,HD),e(HD,G9o),e(rb,O9o),e(q,V9o),e(q,tb),e(tb,Zce),e(Zce,X9o),e(tb,z9o),e(tb,UD),e(UD,Q9o),e(tb,W9o),e(q,H9o),e(q,ab),e(ab,efe),e(efe,U9o),e(ab,J9o),e(ab,JD),e(JD,Y9o),e(ab,K9o),e(q,Z9o),e(q,nb),e(nb,ofe),e(ofe,e$o),e(nb,o$o),e(nb,YD),e(YD,r$o),e(nb,t$o),e(q,a$o),e(q,sb),e(sb,rfe),e(rfe,n$o),e(sb,s$o),e(sb,KD),e(KD,l$o),e(sb,i$o),e(q,d$o),e(q,lb),e(lb,tfe),e(tfe,c$o),e(lb,f$o),e(lb,ZD),e(ZD,m$o),e(lb,g$o),e(q,h$o),e(q,ib),e(ib,afe),e(afe,p$o),e(ib,u$o),e(ib,eG),e(eG,_$o),e(ib,b$o),e(q,v$o),e(q,db),e(db,nfe),e(nfe,F$o),e(db,T$o),e(db,oG),e(oG,M$o),e(db,E$o),e(q,C$o),e(q,cb),e(cb,sfe),e(sfe,w$o),e(cb,A$o),e(cb,rG),e(rG,y$o),e(cb,L$o),e(q,x$o),e(q,fb),e(fb,lfe),e(lfe,$$o),e(fb,k$o),e(fb,tG),e(tG,S$o),e(fb,R$o),e(q,B$o),e(q,mb),e(mb,ife),e(ife,P$o),e(mb,I$o),e(mb,aG),e(aG,q$o),e(mb,N$o),e(q,j$o),e(q,gb),e(gb,dfe),e(dfe,D$o),e(gb,G$o),e(gb,nG),e(nG,O$o),e(gb,V$o),e(Ze,X$o),e(Ze,hb),e(hb,z$o),e(hb,cfe),e(cfe,Q$o),e(hb,W$o),e(hb,ffe),e(ffe,H$o),e(Ze,U$o),M(pb,Ze,null),b(f,pIe,_),b(f,Di,_),e(Di,ub),e(ub,mfe),M(Z0,mfe,null),e(Di,J$o),e(Di,gfe),e(gfe,Y$o),b(f,uIe,_),b(f,Bo,_),M(ey,Bo,null),e(Bo,K$o),e(Bo,Gi),e(Gi,Z$o),e(Gi,sG),e(sG,eko),e(Gi,oko),e(Gi,lG),e(lG,rko),e(Gi,tko),e(Bo,ako),e(Bo,oy),e(oy,nko),e(oy,hfe),e(hfe,sko),e(oy,lko),e(Bo,iko),e(Bo,lt),M(ry,lt,null),e(lt,dko),e(lt,pfe),e(pfe,cko),e(lt,fko),e(lt,Oi),e(Oi,mko),e(Oi,ufe),e(ufe,gko),e(Oi,hko),e(Oi,iG),e(iG,pko),e(Oi,uko),e(lt,_ko),M(_b,lt,null),e(Bo,bko),e(Bo,eo),M(ty,eo,null),e(eo,vko),e(eo,_fe),e(_fe,Fko),e(eo,Tko),e(eo,Sa),e(Sa,Mko),e(Sa,bfe),e(bfe,Eko),e(Sa,Cko),e(Sa,vfe),e(vfe,wko),e(Sa,Ako),e(Sa,Ffe),e(Ffe,yko),e(Sa,Lko),e(eo,xko),e(eo,Y),e(Y,bb),e(bb,Tfe),e(Tfe,$ko),e(bb,kko),e(bb,dG),e(dG,Sko),e(bb,Rko),e(Y,Bko),e(Y,vb),e(vb,Mfe),e(Mfe,Pko),e(vb,Iko),e(vb,cG),e(cG,qko),e(vb,Nko),e(Y,jko),e(Y,Fb),e(Fb,Efe),e(Efe,Dko),e(Fb,Gko),e(Fb,fG),e(fG,Oko),e(Fb,Vko),e(Y,Xko),e(Y,Tb),e(Tb,Cfe),e(Cfe,zko),e(Tb,Qko),e(Tb,mG),e(mG,Wko),e(Tb,Hko),e(Y,Uko),e(Y,Mb),e(Mb,wfe),e(wfe,Jko),e(Mb,Yko),e(Mb,gG),e(gG,Kko),e(Mb,Zko),e(Y,eSo),e(Y,Eb),e(Eb,Afe),e(Afe,oSo),e(Eb,rSo),e(Eb,hG),e(hG,tSo),e(Eb,aSo),e(Y,nSo),e(Y,Cb),e(Cb,yfe),e(yfe,sSo),e(Cb,lSo),e(Cb,pG),e(pG,iSo),e(Cb,dSo),e(Y,cSo),e(Y,wb),e(wb,Lfe),e(Lfe,fSo),e(wb,mSo),e(wb,uG),e(uG,gSo),e(wb,hSo),e(Y,pSo),e(Y,Ab),e(Ab,xfe),e(xfe,uSo),e(Ab,_So),e(Ab,_G),e(_G,bSo),e(Ab,vSo),e(Y,FSo),e(Y,yb),e(yb,$fe),e($fe,TSo),e(yb,MSo),e(yb,bG),e(bG,ESo),e(yb,CSo),e(Y,wSo),e(Y,Lb),e(Lb,kfe),e(kfe,ASo),e(Lb,ySo),e(Lb,vG),e(vG,LSo),e(Lb,xSo),e(Y,$So),e(Y,xb),e(xb,Sfe),e(Sfe,kSo),e(xb,SSo),e(xb,FG),e(FG,RSo),e(xb,BSo),e(Y,PSo),e(Y,$b),e($b,Rfe),e(Rfe,ISo),e($b,qSo),e($b,TG),e(TG,NSo),e($b,jSo),e(Y,DSo),e(Y,kb),e(kb,Bfe),e(Bfe,GSo),e(kb,OSo),e(kb,MG),e(MG,VSo),e(kb,XSo),e(Y,zSo),e(Y,Sb),e(Sb,Pfe),e(Pfe,QSo),e(Sb,WSo),e(Sb,EG),e(EG,HSo),e(Sb,USo),e(Y,JSo),e(Y,Rb),e(Rb,Ife),e(Ife,YSo),e(Rb,KSo),e(Rb,CG),e(CG,ZSo),e(Rb,eRo),e(Y,oRo),e(Y,Bb),e(Bb,qfe),e(qfe,rRo),e(Bb,tRo),e(Bb,wG),e(wG,aRo),e(Bb,nRo),e(Y,sRo),e(Y,Pb),e(Pb,Nfe),e(Nfe,lRo),e(Pb,iRo),e(Pb,AG),e(AG,dRo),e(Pb,cRo),e(Y,fRo),e(Y,Ib),e(Ib,jfe),e(jfe,mRo),e(Ib,gRo),e(Ib,yG),e(yG,hRo),e(Ib,pRo),e(Y,uRo),e(Y,qb),e(qb,Dfe),e(Dfe,_Ro),e(qb,bRo),e(qb,LG),e(LG,vRo),e(qb,FRo),e(Y,TRo),e(Y,Nb),e(Nb,Gfe),e(Gfe,MRo),e(Nb,ERo),e(Nb,xG),e(xG,CRo),e(Nb,wRo),e(Y,ARo),e(Y,jb),e(jb,Ofe),e(Ofe,yRo),e(jb,LRo),e(jb,$G),e($G,xRo),e(jb,$Ro),e(Y,kRo),e(Y,Db),e(Db,Vfe),e(Vfe,SRo),e(Db,RRo),e(Db,kG),e(kG,BRo),e(Db,PRo),e(Y,IRo),e(Y,Gb),e(Gb,Xfe),e(Xfe,qRo),e(Gb,NRo),e(Gb,SG),e(SG,jRo),e(Gb,DRo),e(Y,GRo),e(Y,Ob),e(Ob,zfe),e(zfe,ORo),e(Ob,VRo),e(Ob,RG),e(RG,XRo),e(Ob,zRo),e(Y,QRo),e(Y,Vb),e(Vb,Qfe),e(Qfe,WRo),e(Vb,HRo),e(Vb,BG),e(BG,URo),e(Vb,JRo),e(Y,YRo),e(Y,Xb),e(Xb,Wfe),e(Wfe,KRo),e(Xb,ZRo),e(Xb,PG),e(PG,eBo),e(Xb,oBo),e(Y,rBo),e(Y,zb),e(zb,Hfe),e(Hfe,tBo),e(zb,aBo),e(zb,IG),e(IG,nBo),e(zb,sBo),e(Y,lBo),e(Y,Qb),e(Qb,Ufe),e(Ufe,iBo),e(Qb,dBo),e(Qb,qG),e(qG,cBo),e(Qb,fBo),e(eo,mBo),e(eo,Wb),e(Wb,gBo),e(Wb,Jfe),e(Jfe,hBo),e(Wb,pBo),e(Wb,Yfe),e(Yfe,uBo),e(eo,_Bo),M(Hb,eo,null),b(f,_Ie,_),b(f,Vi,_),e(Vi,Ub),e(Ub,Kfe),M(ay,Kfe,null),e(Vi,bBo),e(Vi,Zfe),e(Zfe,vBo),b(f,bIe,_),b(f,Po,_),M(ny,Po,null),e(Po,FBo),e(Po,Xi),e(Xi,TBo),e(Xi,NG),e(NG,MBo),e(Xi,EBo),e(Xi,jG),e(jG,CBo),e(Xi,wBo),e(Po,ABo),e(Po,sy),e(sy,yBo),e(sy,eme),e(eme,LBo),e(sy,xBo),e(Po,$Bo),e(Po,it),M(ly,it,null),e(it,kBo),e(it,ome),e(ome,SBo),e(it,RBo),e(it,zi),e(zi,BBo),e(zi,rme),e(rme,PBo),e(zi,IBo),e(zi,DG),e(DG,qBo),e(zi,NBo),e(it,jBo),M(Jb,it,null),e(Po,DBo),e(Po,oo),M(iy,oo,null),e(oo,GBo),e(oo,tme),e(tme,OBo),e(oo,VBo),e(oo,Ra),e(Ra,XBo),e(Ra,ame),e(ame,zBo),e(Ra,QBo),e(Ra,nme),e(nme,WBo),e(Ra,HBo),e(Ra,sme),e(sme,UBo),e(Ra,JBo),e(oo,YBo),e(oo,Yr),e(Yr,Yb),e(Yb,lme),e(lme,KBo),e(Yb,ZBo),e(Yb,GG),e(GG,ePo),e(Yb,oPo),e(Yr,rPo),e(Yr,Kb),e(Kb,ime),e(ime,tPo),e(Kb,aPo),e(Kb,OG),e(OG,nPo),e(Kb,sPo),e(Yr,lPo),e(Yr,Zb),e(Zb,dme),e(dme,iPo),e(Zb,dPo),e(Zb,VG),e(VG,cPo),e(Zb,fPo),e(Yr,mPo),e(Yr,e4),e(e4,cme),e(cme,gPo),e(e4,hPo),e(e4,XG),e(XG,pPo),e(e4,uPo),e(Yr,_Po),e(Yr,o4),e(o4,fme),e(fme,bPo),e(o4,vPo),e(o4,zG),e(zG,FPo),e(o4,TPo),e(oo,MPo),e(oo,r4),e(r4,EPo),e(r4,mme),e(mme,CPo),e(r4,wPo),e(r4,gme),e(gme,APo),e(oo,yPo),M(t4,oo,null),b(f,vIe,_),b(f,Qi,_),e(Qi,a4),e(a4,hme),M(dy,hme,null),e(Qi,LPo),e(Qi,pme),e(pme,xPo),b(f,FIe,_),b(f,Io,_),M(cy,Io,null),e(Io,$Po),e(Io,Wi),e(Wi,kPo),e(Wi,QG),e(QG,SPo),e(Wi,RPo),e(Wi,WG),e(WG,BPo),e(Wi,PPo),e(Io,IPo),e(Io,fy),e(fy,qPo),e(fy,ume),e(ume,NPo),e(fy,jPo),e(Io,DPo),e(Io,dt),M(my,dt,null),e(dt,GPo),e(dt,_me),e(_me,OPo),e(dt,VPo),e(dt,Hi),e(Hi,XPo),e(Hi,bme),e(bme,zPo),e(Hi,QPo),e(Hi,HG),e(HG,WPo),e(Hi,HPo),e(dt,UPo),M(n4,dt,null),e(Io,JPo),e(Io,ro),M(gy,ro,null),e(ro,YPo),e(ro,vme),e(vme,KPo),e(ro,ZPo),e(ro,Ba),e(Ba,eIo),e(Ba,Fme),e(Fme,oIo),e(Ba,rIo),e(Ba,Tme),e(Tme,tIo),e(Ba,aIo),e(Ba,Mme),e(Mme,nIo),e(Ba,sIo),e(ro,lIo),e(ro,U),e(U,s4),e(s4,Eme),e(Eme,iIo),e(s4,dIo),e(s4,UG),e(UG,cIo),e(s4,fIo),e(U,mIo),e(U,l4),e(l4,Cme),e(Cme,gIo),e(l4,hIo),e(l4,JG),e(JG,pIo),e(l4,uIo),e(U,_Io),e(U,i4),e(i4,wme),e(wme,bIo),e(i4,vIo),e(i4,YG),e(YG,FIo),e(i4,TIo),e(U,MIo),e(U,d4),e(d4,Ame),e(Ame,EIo),e(d4,CIo),e(d4,KG),e(KG,wIo),e(d4,AIo),e(U,yIo),e(U,c4),e(c4,yme),e(yme,LIo),e(c4,xIo),e(c4,ZG),e(ZG,$Io),e(c4,kIo),e(U,SIo),e(U,f4),e(f4,Lme),e(Lme,RIo),e(f4,BIo),e(f4,eO),e(eO,PIo),e(f4,IIo),e(U,qIo),e(U,m4),e(m4,xme),e(xme,NIo),e(m4,jIo),e(m4,oO),e(oO,DIo),e(m4,GIo),e(U,OIo),e(U,g4),e(g4,$me),e($me,VIo),e(g4,XIo),e(g4,rO),e(rO,zIo),e(g4,QIo),e(U,WIo),e(U,h4),e(h4,kme),e(kme,HIo),e(h4,UIo),e(h4,tO),e(tO,JIo),e(h4,YIo),e(U,KIo),e(U,p4),e(p4,Sme),e(Sme,ZIo),e(p4,eqo),e(p4,aO),e(aO,oqo),e(p4,rqo),e(U,tqo),e(U,u4),e(u4,Rme),e(Rme,aqo),e(u4,nqo),e(u4,nO),e(nO,sqo),e(u4,lqo),e(U,iqo),e(U,_4),e(_4,Bme),e(Bme,dqo),e(_4,cqo),e(_4,sO),e(sO,fqo),e(_4,mqo),e(U,gqo),e(U,b4),e(b4,Pme),e(Pme,hqo),e(b4,pqo),e(b4,lO),e(lO,uqo),e(b4,_qo),e(U,bqo),e(U,v4),e(v4,Ime),e(Ime,vqo),e(v4,Fqo),e(v4,iO),e(iO,Tqo),e(v4,Mqo),e(U,Eqo),e(U,F4),e(F4,qme),e(qme,Cqo),e(F4,wqo),e(F4,dO),e(dO,Aqo),e(F4,yqo),e(U,Lqo),e(U,T4),e(T4,Nme),e(Nme,xqo),e(T4,$qo),e(T4,cO),e(cO,kqo),e(T4,Sqo),e(U,Rqo),e(U,M4),e(M4,jme),e(jme,Bqo),e(M4,Pqo),e(M4,fO),e(fO,Iqo),e(M4,qqo),e(U,Nqo),e(U,E4),e(E4,Dme),e(Dme,jqo),e(E4,Dqo),e(E4,mO),e(mO,Gqo),e(E4,Oqo),e(U,Vqo),e(U,C4),e(C4,Gme),e(Gme,Xqo),e(C4,zqo),e(C4,gO),e(gO,Qqo),e(C4,Wqo),e(U,Hqo),e(U,w4),e(w4,Ome),e(Ome,Uqo),e(w4,Jqo),e(w4,hO),e(hO,Yqo),e(w4,Kqo),e(U,Zqo),e(U,A4),e(A4,Vme),e(Vme,eNo),e(A4,oNo),e(A4,pO),e(pO,rNo),e(A4,tNo),e(U,aNo),e(U,y4),e(y4,Xme),e(Xme,nNo),e(y4,sNo),e(y4,uO),e(uO,lNo),e(y4,iNo),e(U,dNo),e(U,L4),e(L4,zme),e(zme,cNo),e(L4,fNo),e(L4,_O),e(_O,mNo),e(L4,gNo),e(U,hNo),e(U,x4),e(x4,Qme),e(Qme,pNo),e(x4,uNo),e(x4,bO),e(bO,_No),e(x4,bNo),e(U,vNo),e(U,$4),e($4,Wme),e(Wme,FNo),e($4,TNo),e($4,vO),e(vO,MNo),e($4,ENo),e(U,CNo),e(U,k4),e(k4,Hme),e(Hme,wNo),e(k4,ANo),e(k4,FO),e(FO,yNo),e(k4,LNo),e(U,xNo),e(U,S4),e(S4,Ume),e(Ume,$No),e(S4,kNo),e(S4,TO),e(TO,SNo),e(S4,RNo),e(U,BNo),e(U,R4),e(R4,Jme),e(Jme,PNo),e(R4,INo),e(R4,MO),e(MO,qNo),e(R4,NNo),e(U,jNo),e(U,B4),e(B4,Yme),e(Yme,DNo),e(B4,GNo),e(B4,EO),e(EO,ONo),e(B4,VNo),e(U,XNo),e(U,P4),e(P4,Kme),e(Kme,zNo),e(P4,QNo),e(P4,CO),e(CO,WNo),e(P4,HNo),e(U,UNo),e(U,I4),e(I4,Zme),e(Zme,JNo),e(I4,YNo),e(I4,wO),e(wO,KNo),e(I4,ZNo),e(U,ejo),e(U,q4),e(q4,ege),e(ege,ojo),e(q4,rjo),e(q4,AO),e(AO,tjo),e(q4,ajo),e(U,njo),e(U,N4),e(N4,oge),e(oge,sjo),e(N4,ljo),e(N4,yO),e(yO,ijo),e(N4,djo),e(ro,cjo),e(ro,j4),e(j4,fjo),e(j4,rge),e(rge,mjo),e(j4,gjo),e(j4,tge),e(tge,hjo),e(ro,pjo),M(D4,ro,null),b(f,TIe,_),b(f,Ui,_),e(Ui,G4),e(G4,age),M(hy,age,null),e(Ui,ujo),e(Ui,nge),e(nge,_jo),b(f,MIe,_),b(f,qo,_),M(py,qo,null),e(qo,bjo),e(qo,Ji),e(Ji,vjo),e(Ji,LO),e(LO,Fjo),e(Ji,Tjo),e(Ji,xO),e(xO,Mjo),e(Ji,Ejo),e(qo,Cjo),e(qo,uy),e(uy,wjo),e(uy,sge),e(sge,Ajo),e(uy,yjo),e(qo,Ljo),e(qo,ct),M(_y,ct,null),e(ct,xjo),e(ct,lge),e(lge,$jo),e(ct,kjo),e(ct,Yi),e(Yi,Sjo),e(Yi,ige),e(ige,Rjo),e(Yi,Bjo),e(Yi,$O),e($O,Pjo),e(Yi,Ijo),e(ct,qjo),M(O4,ct,null),e(qo,Njo),e(qo,to),M(by,to,null),e(to,jjo),e(to,dge),e(dge,Djo),e(to,Gjo),e(to,Pa),e(Pa,Ojo),e(Pa,cge),e(cge,Vjo),e(Pa,Xjo),e(Pa,fge),e(fge,zjo),e(Pa,Qjo),e(Pa,mge),e(mge,Wjo),e(Pa,Hjo),e(to,Ujo),e(to,O),e(O,V4),e(V4,gge),e(gge,Jjo),e(V4,Yjo),e(V4,kO),e(kO,Kjo),e(V4,Zjo),e(O,eDo),e(O,X4),e(X4,hge),e(hge,oDo),e(X4,rDo),e(X4,SO),e(SO,tDo),e(X4,aDo),e(O,nDo),e(O,z4),e(z4,pge),e(pge,sDo),e(z4,lDo),e(z4,RO),e(RO,iDo),e(z4,dDo),e(O,cDo),e(O,Q4),e(Q4,uge),e(uge,fDo),e(Q4,mDo),e(Q4,BO),e(BO,gDo),e(Q4,hDo),e(O,pDo),e(O,W4),e(W4,_ge),e(_ge,uDo),e(W4,_Do),e(W4,PO),e(PO,bDo),e(W4,vDo),e(O,FDo),e(O,H4),e(H4,bge),e(bge,TDo),e(H4,MDo),e(H4,IO),e(IO,EDo),e(H4,CDo),e(O,wDo),e(O,U4),e(U4,vge),e(vge,ADo),e(U4,yDo),e(U4,qO),e(qO,LDo),e(U4,xDo),e(O,$Do),e(O,J4),e(J4,Fge),e(Fge,kDo),e(J4,SDo),e(J4,NO),e(NO,RDo),e(J4,BDo),e(O,PDo),e(O,Y4),e(Y4,Tge),e(Tge,IDo),e(Y4,qDo),e(Y4,jO),e(jO,NDo),e(Y4,jDo),e(O,DDo),e(O,K4),e(K4,Mge),e(Mge,GDo),e(K4,ODo),e(K4,DO),e(DO,VDo),e(K4,XDo),e(O,zDo),e(O,Z4),e(Z4,Ege),e(Ege,QDo),e(Z4,WDo),e(Z4,GO),e(GO,HDo),e(Z4,UDo),e(O,JDo),e(O,e5),e(e5,Cge),e(Cge,YDo),e(e5,KDo),e(e5,OO),e(OO,ZDo),e(e5,eGo),e(O,oGo),e(O,o5),e(o5,wge),e(wge,rGo),e(o5,tGo),e(o5,VO),e(VO,aGo),e(o5,nGo),e(O,sGo),e(O,r5),e(r5,Age),e(Age,lGo),e(r5,iGo),e(r5,XO),e(XO,dGo),e(r5,cGo),e(O,fGo),e(O,t5),e(t5,yge),e(yge,mGo),e(t5,gGo),e(t5,zO),e(zO,hGo),e(t5,pGo),e(O,uGo),e(O,a5),e(a5,Lge),e(Lge,_Go),e(a5,bGo),e(a5,QO),e(QO,vGo),e(a5,FGo),e(O,TGo),e(O,n5),e(n5,xge),e(xge,MGo),e(n5,EGo),e(n5,WO),e(WO,CGo),e(n5,wGo),e(O,AGo),e(O,s5),e(s5,$ge),e($ge,yGo),e(s5,LGo),e(s5,HO),e(HO,xGo),e(s5,$Go),e(O,kGo),e(O,l5),e(l5,kge),e(kge,SGo),e(l5,RGo),e(l5,UO),e(UO,BGo),e(l5,PGo),e(O,IGo),e(O,i5),e(i5,Sge),e(Sge,qGo),e(i5,NGo),e(i5,JO),e(JO,jGo),e(i5,DGo),e(O,GGo),e(O,d5),e(d5,Rge),e(Rge,OGo),e(d5,VGo),e(d5,YO),e(YO,XGo),e(d5,zGo),e(O,QGo),e(O,c5),e(c5,Bge),e(Bge,WGo),e(c5,HGo),e(c5,KO),e(KO,UGo),e(c5,JGo),e(O,YGo),e(O,f5),e(f5,Pge),e(Pge,KGo),e(f5,ZGo),e(f5,ZO),e(ZO,eOo),e(f5,oOo),e(O,rOo),e(O,m5),e(m5,Ige),e(Ige,tOo),e(m5,aOo),e(m5,eV),e(eV,nOo),e(m5,sOo),e(O,lOo),e(O,g5),e(g5,qge),e(qge,iOo),e(g5,dOo),e(g5,oV),e(oV,cOo),e(g5,fOo),e(O,mOo),e(O,h5),e(h5,Nge),e(Nge,gOo),e(h5,hOo),e(h5,rV),e(rV,pOo),e(h5,uOo),e(O,_Oo),e(O,p5),e(p5,jge),e(jge,bOo),e(p5,vOo),e(p5,tV),e(tV,FOo),e(p5,TOo),e(O,MOo),e(O,u5),e(u5,Dge),e(Dge,EOo),e(u5,COo),e(u5,aV),e(aV,wOo),e(u5,AOo),e(O,yOo),e(O,_5),e(_5,Gge),e(Gge,LOo),e(_5,xOo),e(_5,nV),e(nV,$Oo),e(_5,kOo),e(O,SOo),e(O,b5),e(b5,Oge),e(Oge,ROo),e(b5,BOo),e(b5,sV),e(sV,POo),e(b5,IOo),e(O,qOo),e(O,v5),e(v5,Vge),e(Vge,NOo),e(v5,jOo),e(v5,lV),e(lV,DOo),e(v5,GOo),e(O,OOo),e(O,F5),e(F5,Xge),e(Xge,VOo),e(F5,XOo),e(F5,iV),e(iV,zOo),e(F5,QOo),e(O,WOo),e(O,T5),e(T5,zge),e(zge,HOo),e(T5,UOo),e(T5,dV),e(dV,JOo),e(T5,YOo),e(O,KOo),e(O,M5),e(M5,Qge),e(Qge,ZOo),e(M5,eVo),e(M5,cV),e(cV,oVo),e(M5,rVo),e(O,tVo),e(O,E5),e(E5,Wge),e(Wge,aVo),e(E5,nVo),e(E5,fV),e(fV,sVo),e(E5,lVo),e(O,iVo),e(O,C5),e(C5,Hge),e(Hge,dVo),e(C5,cVo),e(C5,mV),e(mV,fVo),e(C5,mVo),e(O,gVo),e(O,w5),e(w5,Uge),e(Uge,hVo),e(w5,pVo),e(w5,gV),e(gV,uVo),e(w5,_Vo),e(O,bVo),e(O,A5),e(A5,Jge),e(Jge,vVo),e(A5,FVo),e(A5,hV),e(hV,TVo),e(A5,MVo),e(O,EVo),e(O,y5),e(y5,Yge),e(Yge,CVo),e(y5,wVo),e(y5,pV),e(pV,AVo),e(y5,yVo),e(to,LVo),e(to,L5),e(L5,xVo),e(L5,Kge),e(Kge,$Vo),e(L5,kVo),e(L5,Zge),e(Zge,SVo),e(to,RVo),M(x5,to,null),b(f,EIe,_),b(f,Ki,_),e(Ki,$5),e($5,ehe),M(vy,ehe,null),e(Ki,BVo),e(Ki,ohe),e(ohe,PVo),b(f,CIe,_),b(f,No,_),M(Fy,No,null),e(No,IVo),e(No,Zi),e(Zi,qVo),e(Zi,uV),e(uV,NVo),e(Zi,jVo),e(Zi,_V),e(_V,DVo),e(Zi,GVo),e(No,OVo),e(No,Ty),e(Ty,VVo),e(Ty,rhe),e(rhe,XVo),e(Ty,zVo),e(No,QVo),e(No,ft),M(My,ft,null),e(ft,WVo),e(ft,the),e(the,HVo),e(ft,UVo),e(ft,ed),e(ed,JVo),e(ed,ahe),e(ahe,YVo),e(ed,KVo),e(ed,bV),e(bV,ZVo),e(ed,eXo),e(ft,oXo),M(k5,ft,null),e(No,rXo),e(No,ao),M(Ey,ao,null),e(ao,tXo),e(ao,nhe),e(nhe,aXo),e(ao,nXo),e(ao,Ia),e(Ia,sXo),e(Ia,she),e(she,lXo),e(Ia,iXo),e(Ia,lhe),e(lhe,dXo),e(Ia,cXo),e(Ia,ihe),e(ihe,fXo),e(Ia,mXo),e(ao,gXo),e(ao,dhe),e(dhe,S5),e(S5,che),e(che,hXo),e(S5,pXo),e(S5,vV),e(vV,uXo),e(S5,_Xo),e(ao,bXo),e(ao,R5),e(R5,vXo),e(R5,fhe),e(fhe,FXo),e(R5,TXo),e(R5,mhe),e(mhe,MXo),e(ao,EXo),M(B5,ao,null),b(f,wIe,_),b(f,od,_),e(od,P5),e(P5,ghe),M(Cy,ghe,null),e(od,CXo),e(od,hhe),e(hhe,wXo),b(f,AIe,_),b(f,jo,_),M(wy,jo,null),e(jo,AXo),e(jo,rd),e(rd,yXo),e(rd,FV),e(FV,LXo),e(rd,xXo),e(rd,TV),e(TV,$Xo),e(rd,kXo),e(jo,SXo),e(jo,Ay),e(Ay,RXo),e(Ay,phe),e(phe,BXo),e(Ay,PXo),e(jo,IXo),e(jo,mt),M(yy,mt,null),e(mt,qXo),e(mt,uhe),e(uhe,NXo),e(mt,jXo),e(mt,td),e(td,DXo),e(td,_he),e(_he,GXo),e(td,OXo),e(td,MV),e(MV,VXo),e(td,XXo),e(mt,zXo),M(I5,mt,null),e(jo,QXo),e(jo,no),M(Ly,no,null),e(no,WXo),e(no,bhe),e(bhe,HXo),e(no,UXo),e(no,qa),e(qa,JXo),e(qa,vhe),e(vhe,YXo),e(qa,KXo),e(qa,Fhe),e(Fhe,ZXo),e(qa,ezo),e(qa,The),e(The,ozo),e(qa,rzo),e(no,tzo),e(no,Fe),e(Fe,q5),e(q5,Mhe),e(Mhe,azo),e(q5,nzo),e(q5,EV),e(EV,szo),e(q5,lzo),e(Fe,izo),e(Fe,N5),e(N5,Ehe),e(Ehe,dzo),e(N5,czo),e(N5,CV),e(CV,fzo),e(N5,mzo),e(Fe,gzo),e(Fe,j5),e(j5,Che),e(Che,hzo),e(j5,pzo),e(j5,wV),e(wV,uzo),e(j5,_zo),e(Fe,bzo),e(Fe,Bs),e(Bs,whe),e(whe,vzo),e(Bs,Fzo),e(Bs,AV),e(AV,Tzo),e(Bs,Mzo),e(Bs,yV),e(yV,Ezo),e(Bs,Czo),e(Fe,wzo),e(Fe,D5),e(D5,Ahe),e(Ahe,Azo),e(D5,yzo),e(D5,LV),e(LV,Lzo),e(D5,xzo),e(Fe,$zo),e(Fe,gt),e(gt,yhe),e(yhe,kzo),e(gt,Szo),e(gt,xV),e(xV,Rzo),e(gt,Bzo),e(gt,$V),e($V,Pzo),e(gt,Izo),e(gt,kV),e(kV,qzo),e(gt,Nzo),e(Fe,jzo),e(Fe,G5),e(G5,Lhe),e(Lhe,Dzo),e(G5,Gzo),e(G5,SV),e(SV,Ozo),e(G5,Vzo),e(Fe,Xzo),e(Fe,O5),e(O5,xhe),e(xhe,zzo),e(O5,Qzo),e(O5,RV),e(RV,Wzo),e(O5,Hzo),e(Fe,Uzo),e(Fe,V5),e(V5,$he),e($he,Jzo),e(V5,Yzo),e(V5,BV),e(BV,Kzo),e(V5,Zzo),e(Fe,eQo),e(Fe,X5),e(X5,khe),e(khe,oQo),e(X5,rQo),e(X5,PV),e(PV,tQo),e(X5,aQo),e(Fe,nQo),e(Fe,z5),e(z5,She),e(She,sQo),e(z5,lQo),e(z5,IV),e(IV,iQo),e(z5,dQo),e(Fe,cQo),e(Fe,Q5),e(Q5,Rhe),e(Rhe,fQo),e(Q5,mQo),e(Q5,qV),e(qV,gQo),e(Q5,hQo),e(Fe,pQo),e(Fe,W5),e(W5,Bhe),e(Bhe,uQo),e(W5,_Qo),e(W5,NV),e(NV,bQo),e(W5,vQo),e(no,FQo),e(no,H5),e(H5,TQo),e(H5,Phe),e(Phe,MQo),e(H5,EQo),e(H5,Ihe),e(Ihe,CQo),e(no,wQo),M(U5,no,null),b(f,yIe,_),b(f,ad,_),e(ad,J5),e(J5,qhe),M(xy,qhe,null),e(ad,AQo),e(ad,Nhe),e(Nhe,yQo),b(f,LIe,_),b(f,Do,_),M($y,Do,null),e(Do,LQo),e(Do,nd),e(nd,xQo),e(nd,jV),e(jV,$Qo),e(nd,kQo),e(nd,DV),e(DV,SQo),e(nd,RQo),e(Do,BQo),e(Do,ky),e(ky,PQo),e(ky,jhe),e(jhe,IQo),e(ky,qQo),e(Do,NQo),e(Do,ht),M(Sy,ht,null),e(ht,jQo),e(ht,Dhe),e(Dhe,DQo),e(ht,GQo),e(ht,sd),e(sd,OQo),e(sd,Ghe),e(Ghe,VQo),e(sd,XQo),e(sd,GV),e(GV,zQo),e(sd,QQo),e(ht,WQo),M(Y5,ht,null),e(Do,HQo),e(Do,so),M(Ry,so,null),e(so,UQo),e(so,Ohe),e(Ohe,JQo),e(so,YQo),e(so,Na),e(Na,KQo),e(Na,Vhe),e(Vhe,ZQo),e(Na,eWo),e(Na,Xhe),e(Xhe,oWo),e(Na,rWo),e(Na,zhe),e(zhe,tWo),e(Na,aWo),e(so,nWo),e(so,Qhe),e(Qhe,K5),e(K5,Whe),e(Whe,sWo),e(K5,lWo),e(K5,OV),e(OV,iWo),e(K5,dWo),e(so,cWo),e(so,Z5),e(Z5,fWo),e(Z5,Hhe),e(Hhe,mWo),e(Z5,gWo),e(Z5,Uhe),e(Uhe,hWo),e(so,pWo),M(ev,so,null),b(f,xIe,_),b(f,ld,_),e(ld,ov),e(ov,Jhe),M(By,Jhe,null),e(ld,uWo),e(ld,Yhe),e(Yhe,_Wo),b(f,$Ie,_),b(f,Go,_),M(Py,Go,null),e(Go,bWo),e(Go,id),e(id,vWo),e(id,VV),e(VV,FWo),e(id,TWo),e(id,XV),e(XV,MWo),e(id,EWo),e(Go,CWo),e(Go,Iy),e(Iy,wWo),e(Iy,Khe),e(Khe,AWo),e(Iy,yWo),e(Go,LWo),e(Go,pt),M(qy,pt,null),e(pt,xWo),e(pt,Zhe),e(Zhe,$Wo),e(pt,kWo),e(pt,dd),e(dd,SWo),e(dd,epe),e(epe,RWo),e(dd,BWo),e(dd,zV),e(zV,PWo),e(dd,IWo),e(pt,qWo),M(rv,pt,null),e(Go,NWo),e(Go,lo),M(Ny,lo,null),e(lo,jWo),e(lo,ope),e(ope,DWo),e(lo,GWo),e(lo,ja),e(ja,OWo),e(ja,rpe),e(rpe,VWo),e(ja,XWo),e(ja,tpe),e(tpe,zWo),e(ja,QWo),e(ja,ape),e(ape,WWo),e(ja,HWo),e(lo,UWo),e(lo,Ne),e(Ne,tv),e(tv,npe),e(npe,JWo),e(tv,YWo),e(tv,QV),e(QV,KWo),e(tv,ZWo),e(Ne,eHo),e(Ne,av),e(av,spe),e(spe,oHo),e(av,rHo),e(av,WV),e(WV,tHo),e(av,aHo),e(Ne,nHo),e(Ne,nv),e(nv,lpe),e(lpe,sHo),e(nv,lHo),e(nv,HV),e(HV,iHo),e(nv,dHo),e(Ne,cHo),e(Ne,sv),e(sv,ipe),e(ipe,fHo),e(sv,mHo),e(sv,UV),e(UV,gHo),e(sv,hHo),e(Ne,pHo),e(Ne,lv),e(lv,dpe),e(dpe,uHo),e(lv,_Ho),e(lv,JV),e(JV,bHo),e(lv,vHo),e(Ne,FHo),e(Ne,iv),e(iv,cpe),e(cpe,THo),e(iv,MHo),e(iv,YV),e(YV,EHo),e(iv,CHo),e(Ne,wHo),e(Ne,dv),e(dv,fpe),e(fpe,AHo),e(dv,yHo),e(dv,KV),e(KV,LHo),e(dv,xHo),e(Ne,$Ho),e(Ne,cv),e(cv,mpe),e(mpe,kHo),e(cv,SHo),e(cv,ZV),e(ZV,RHo),e(cv,BHo),e(lo,PHo),e(lo,fv),e(fv,IHo),e(fv,gpe),e(gpe,qHo),e(fv,NHo),e(fv,hpe),e(hpe,jHo),e(lo,DHo),M(mv,lo,null),b(f,kIe,_),b(f,cd,_),e(cd,gv),e(gv,ppe),M(jy,ppe,null),e(cd,GHo),e(cd,upe),e(upe,OHo),b(f,SIe,_),b(f,Oo,_),M(Dy,Oo,null),e(Oo,VHo),e(Oo,fd),e(fd,XHo),e(fd,eX),e(eX,zHo),e(fd,QHo),e(fd,oX),e(oX,WHo),e(fd,HHo),e(Oo,UHo),e(Oo,Gy),e(Gy,JHo),e(Gy,_pe),e(_pe,YHo),e(Gy,KHo),e(Oo,ZHo),e(Oo,ut),M(Oy,ut,null),e(ut,eUo),e(ut,bpe),e(bpe,oUo),e(ut,rUo),e(ut,md),e(md,tUo),e(md,vpe),e(vpe,aUo),e(md,nUo),e(md,rX),e(rX,sUo),e(md,lUo),e(ut,iUo),M(hv,ut,null),e(Oo,dUo),e(Oo,io),M(Vy,io,null),e(io,cUo),e(io,Fpe),e(Fpe,fUo),e(io,mUo),e(io,Da),e(Da,gUo),e(Da,Tpe),e(Tpe,hUo),e(Da,pUo),e(Da,Mpe),e(Mpe,uUo),e(Da,_Uo),e(Da,Epe),e(Epe,bUo),e(Da,vUo),e(io,FUo),e(io,Ga),e(Ga,pv),e(pv,Cpe),e(Cpe,TUo),e(pv,MUo),e(pv,tX),e(tX,EUo),e(pv,CUo),e(Ga,wUo),e(Ga,uv),e(uv,wpe),e(wpe,AUo),e(uv,yUo),e(uv,aX),e(aX,LUo),e(uv,xUo),e(Ga,$Uo),e(Ga,_v),e(_v,Ape),e(Ape,kUo),e(_v,SUo),e(_v,nX),e(nX,RUo),e(_v,BUo),e(Ga,PUo),e(Ga,bv),e(bv,ype),e(ype,IUo),e(bv,qUo),e(bv,sX),e(sX,NUo),e(bv,jUo),e(io,DUo),e(io,vv),e(vv,GUo),e(vv,Lpe),e(Lpe,OUo),e(vv,VUo),e(vv,xpe),e(xpe,XUo),e(io,zUo),M(Fv,io,null),b(f,RIe,_),b(f,gd,_),e(gd,Tv),e(Tv,$pe),M(Xy,$pe,null),e(gd,QUo),e(gd,kpe),e(kpe,WUo),b(f,BIe,_),b(f,Vo,_),M(zy,Vo,null),e(Vo,HUo),e(Vo,hd),e(hd,UUo),e(hd,lX),e(lX,JUo),e(hd,YUo),e(hd,iX),e(iX,KUo),e(hd,ZUo),e(Vo,eJo),e(Vo,Qy),e(Qy,oJo),e(Qy,Spe),e(Spe,rJo),e(Qy,tJo),e(Vo,aJo),e(Vo,_t),M(Wy,_t,null),e(_t,nJo),e(_t,Rpe),e(Rpe,sJo),e(_t,lJo),e(_t,pd),e(pd,iJo),e(pd,Bpe),e(Bpe,dJo),e(pd,cJo),e(pd,dX),e(dX,fJo),e(pd,mJo),e(_t,gJo),M(Mv,_t,null),e(Vo,hJo),e(Vo,co),M(Hy,co,null),e(co,pJo),e(co,Ppe),e(Ppe,uJo),e(co,_Jo),e(co,Oa),e(Oa,bJo),e(Oa,Ipe),e(Ipe,vJo),e(Oa,FJo),e(Oa,qpe),e(qpe,TJo),e(Oa,MJo),e(Oa,Npe),e(Npe,EJo),e(Oa,CJo),e(co,wJo),e(co,je),e(je,Ev),e(Ev,jpe),e(jpe,AJo),e(Ev,yJo),e(Ev,cX),e(cX,LJo),e(Ev,xJo),e(je,$Jo),e(je,Cv),e(Cv,Dpe),e(Dpe,kJo),e(Cv,SJo),e(Cv,fX),e(fX,RJo),e(Cv,BJo),e(je,PJo),e(je,wv),e(wv,Gpe),e(Gpe,IJo),e(wv,qJo),e(wv,mX),e(mX,NJo),e(wv,jJo),e(je,DJo),e(je,Av),e(Av,Ope),e(Ope,GJo),e(Av,OJo),e(Av,gX),e(gX,VJo),e(Av,XJo),e(je,zJo),e(je,yv),e(yv,Vpe),e(Vpe,QJo),e(yv,WJo),e(yv,hX),e(hX,HJo),e(yv,UJo),e(je,JJo),e(je,Lv),e(Lv,Xpe),e(Xpe,YJo),e(Lv,KJo),e(Lv,pX),e(pX,ZJo),e(Lv,eYo),e(je,oYo),e(je,xv),e(xv,zpe),e(zpe,rYo),e(xv,tYo),e(xv,uX),e(uX,aYo),e(xv,nYo),e(je,sYo),e(je,$v),e($v,Qpe),e(Qpe,lYo),e($v,iYo),e($v,_X),e(_X,dYo),e($v,cYo),e(co,fYo),e(co,kv),e(kv,mYo),e(kv,Wpe),e(Wpe,gYo),e(kv,hYo),e(kv,Hpe),e(Hpe,pYo),e(co,uYo),M(Sv,co,null),b(f,PIe,_),b(f,ud,_),e(ud,Rv),e(Rv,Upe),M(Uy,Upe,null),e(ud,_Yo),e(ud,Jpe),e(Jpe,bYo),b(f,IIe,_),b(f,Xo,_),M(Jy,Xo,null),e(Xo,vYo),e(Xo,_d),e(_d,FYo),e(_d,bX),e(bX,TYo),e(_d,MYo),e(_d,vX),e(vX,EYo),e(_d,CYo),e(Xo,wYo),e(Xo,Yy),e(Yy,AYo),e(Yy,Ype),e(Ype,yYo),e(Yy,LYo),e(Xo,xYo),e(Xo,bt),M(Ky,bt,null),e(bt,$Yo),e(bt,Kpe),e(Kpe,kYo),e(bt,SYo),e(bt,bd),e(bd,RYo),e(bd,Zpe),e(Zpe,BYo),e(bd,PYo),e(bd,FX),e(FX,IYo),e(bd,qYo),e(bt,NYo),M(Bv,bt,null),e(Xo,jYo),e(Xo,fo),M(Zy,fo,null),e(fo,DYo),e(fo,eue),e(eue,GYo),e(fo,OYo),e(fo,Va),e(Va,VYo),e(Va,oue),e(oue,XYo),e(Va,zYo),e(Va,rue),e(rue,QYo),e(Va,WYo),e(Va,tue),e(tue,HYo),e(Va,UYo),e(fo,JYo),e(fo,eL),e(eL,Pv),e(Pv,aue),e(aue,YYo),e(Pv,KYo),e(Pv,TX),e(TX,ZYo),e(Pv,eKo),e(eL,oKo),e(eL,Iv),e(Iv,nue),e(nue,rKo),e(Iv,tKo),e(Iv,MX),e(MX,aKo),e(Iv,nKo),e(fo,sKo),e(fo,qv),e(qv,lKo),e(qv,sue),e(sue,iKo),e(qv,dKo),e(qv,lue),e(lue,cKo),e(fo,fKo),M(Nv,fo,null),b(f,qIe,_),b(f,vd,_),e(vd,jv),e(jv,iue),M(oL,iue,null),e(vd,mKo),e(vd,due),e(due,gKo),b(f,NIe,_),b(f,zo,_),M(rL,zo,null),e(zo,hKo),e(zo,Fd),e(Fd,pKo),e(Fd,EX),e(EX,uKo),e(Fd,_Ko),e(Fd,CX),e(CX,bKo),e(Fd,vKo),e(zo,FKo),e(zo,tL),e(tL,TKo),e(tL,cue),e(cue,MKo),e(tL,EKo),e(zo,CKo),e(zo,vt),M(aL,vt,null),e(vt,wKo),e(vt,fue),e(fue,AKo),e(vt,yKo),e(vt,Td),e(Td,LKo),e(Td,mue),e(mue,xKo),e(Td,$Ko),e(Td,wX),e(wX,kKo),e(Td,SKo),e(vt,RKo),M(Dv,vt,null),e(zo,BKo),e(zo,mo),M(nL,mo,null),e(mo,PKo),e(mo,gue),e(gue,IKo),e(mo,qKo),e(mo,Xa),e(Xa,NKo),e(Xa,hue),e(hue,jKo),e(Xa,DKo),e(Xa,pue),e(pue,GKo),e(Xa,OKo),e(Xa,uue),e(uue,VKo),e(Xa,XKo),e(mo,zKo),e(mo,za),e(za,Gv),e(Gv,_ue),e(_ue,QKo),e(Gv,WKo),e(Gv,AX),e(AX,HKo),e(Gv,UKo),e(za,JKo),e(za,Ov),e(Ov,bue),e(bue,YKo),e(Ov,KKo),e(Ov,yX),e(yX,ZKo),e(Ov,eZo),e(za,oZo),e(za,Vv),e(Vv,vue),e(vue,rZo),e(Vv,tZo),e(Vv,LX),e(LX,aZo),e(Vv,nZo),e(za,sZo),e(za,Xv),e(Xv,Fue),e(Fue,lZo),e(Xv,iZo),e(Xv,xX),e(xX,dZo),e(Xv,cZo),e(mo,fZo),e(mo,zv),e(zv,mZo),e(zv,Tue),e(Tue,gZo),e(zv,hZo),e(zv,Mue),e(Mue,pZo),e(mo,uZo),M(Qv,mo,null),b(f,jIe,_),b(f,Md,_),e(Md,Wv),e(Wv,Eue),M(sL,Eue,null),e(Md,_Zo),e(Md,Cue),e(Cue,bZo),b(f,DIe,_),b(f,Qo,_),M(lL,Qo,null),e(Qo,vZo),e(Qo,Ed),e(Ed,FZo),e(Ed,$X),e($X,TZo),e(Ed,MZo),e(Ed,kX),e(kX,EZo),e(Ed,CZo),e(Qo,wZo),e(Qo,iL),e(iL,AZo),e(iL,wue),e(wue,yZo),e(iL,LZo),e(Qo,xZo),e(Qo,Ft),M(dL,Ft,null),e(Ft,$Zo),e(Ft,Aue),e(Aue,kZo),e(Ft,SZo),e(Ft,Cd),e(Cd,RZo),e(Cd,yue),e(yue,BZo),e(Cd,PZo),e(Cd,SX),e(SX,IZo),e(Cd,qZo),e(Ft,NZo),M(Hv,Ft,null),e(Qo,jZo),e(Qo,go),M(cL,go,null),e(go,DZo),e(go,Lue),e(Lue,GZo),e(go,OZo),e(go,Qa),e(Qa,VZo),e(Qa,xue),e(xue,XZo),e(Qa,zZo),e(Qa,$ue),e($ue,QZo),e(Qa,WZo),e(Qa,kue),e(kue,HZo),e(Qa,UZo),e(go,JZo),e(go,wd),e(wd,Uv),e(Uv,Sue),e(Sue,YZo),e(Uv,KZo),e(Uv,RX),e(RX,ZZo),e(Uv,eer),e(wd,oer),e(wd,Jv),e(Jv,Rue),e(Rue,rer),e(Jv,ter),e(Jv,BX),e(BX,aer),e(Jv,ner),e(wd,ser),e(wd,Yv),e(Yv,Bue),e(Bue,ler),e(Yv,ier),e(Yv,PX),e(PX,der),e(Yv,cer),e(go,fer),e(go,Kv),e(Kv,mer),e(Kv,Pue),e(Pue,ger),e(Kv,her),e(Kv,Iue),e(Iue,per),e(go,uer),M(Zv,go,null),b(f,GIe,_),b(f,Ad,_),e(Ad,eF),e(eF,que),M(fL,que,null),e(Ad,_er),e(Ad,Nue),e(Nue,ber),b(f,OIe,_),b(f,Wo,_),M(mL,Wo,null),e(Wo,ver),e(Wo,yd),e(yd,Fer),e(yd,IX),e(IX,Ter),e(yd,Mer),e(yd,qX),e(qX,Eer),e(yd,Cer),e(Wo,wer),e(Wo,gL),e(gL,Aer),e(gL,jue),e(jue,yer),e(gL,Ler),e(Wo,xer),e(Wo,Tt),M(hL,Tt,null),e(Tt,$er),e(Tt,Due),e(Due,ker),e(Tt,Ser),e(Tt,Ld),e(Ld,Rer),e(Ld,Gue),e(Gue,Ber),e(Ld,Per),e(Ld,NX),e(NX,Ier),e(Ld,qer),e(Tt,Ner),M(oF,Tt,null),e(Wo,jer),e(Wo,ho),M(pL,ho,null),e(ho,Der),e(ho,Oue),e(Oue,Ger),e(ho,Oer),e(ho,Wa),e(Wa,Ver),e(Wa,Vue),e(Vue,Xer),e(Wa,zer),e(Wa,Xue),e(Xue,Qer),e(Wa,Wer),e(Wa,zue),e(zue,Her),e(Wa,Uer),e(ho,Jer),e(ho,uL),e(uL,rF),e(rF,Que),e(Que,Yer),e(rF,Ker),e(rF,jX),e(jX,Zer),e(rF,eor),e(uL,oor),e(uL,tF),e(tF,Wue),e(Wue,ror),e(tF,tor),e(tF,DX),e(DX,aor),e(tF,nor),e(ho,sor),e(ho,aF),e(aF,lor),e(aF,Hue),e(Hue,ior),e(aF,dor),e(aF,Uue),e(Uue,cor),e(ho,mor),M(nF,ho,null),b(f,VIe,_),b(f,xd,_),e(xd,sF),e(sF,Jue),M(_L,Jue,null),e(xd,gor),e(xd,Yue),e(Yue,hor),b(f,XIe,_),b(f,Ho,_),M(bL,Ho,null),e(Ho,por),e(Ho,$d),e($d,uor),e($d,GX),e(GX,_or),e($d,bor),e($d,OX),e(OX,vor),e($d,For),e(Ho,Tor),e(Ho,vL),e(vL,Mor),e(vL,Kue),e(Kue,Eor),e(vL,Cor),e(Ho,wor),e(Ho,Mt),M(FL,Mt,null),e(Mt,Aor),e(Mt,Zue),e(Zue,yor),e(Mt,Lor),e(Mt,kd),e(kd,xor),e(kd,e_e),e(e_e,$or),e(kd,kor),e(kd,VX),e(VX,Sor),e(kd,Ror),e(Mt,Bor),M(lF,Mt,null),e(Ho,Por),e(Ho,po),M(TL,po,null),e(po,Ior),e(po,o_e),e(o_e,qor),e(po,Nor),e(po,Ha),e(Ha,jor),e(Ha,r_e),e(r_e,Dor),e(Ha,Gor),e(Ha,t_e),e(t_e,Oor),e(Ha,Vor),e(Ha,a_e),e(a_e,Xor),e(Ha,zor),e(po,Qor),e(po,n_e),e(n_e,iF),e(iF,s_e),e(s_e,Wor),e(iF,Hor),e(iF,XX),e(XX,Uor),e(iF,Jor),e(po,Yor),e(po,dF),e(dF,Kor),e(dF,l_e),e(l_e,Zor),e(dF,err),e(dF,i_e),e(i_e,orr),e(po,rrr),M(cF,po,null),b(f,zIe,_),b(f,Sd,_),e(Sd,fF),e(fF,d_e),M(ML,d_e,null),e(Sd,trr),e(Sd,c_e),e(c_e,arr),b(f,QIe,_),b(f,Uo,_),M(EL,Uo,null),e(Uo,nrr),e(Uo,Rd),e(Rd,srr),e(Rd,zX),e(zX,lrr),e(Rd,irr),e(Rd,QX),e(QX,drr),e(Rd,crr),e(Uo,frr),e(Uo,CL),e(CL,mrr),e(CL,f_e),e(f_e,grr),e(CL,hrr),e(Uo,prr),e(Uo,Et),M(wL,Et,null),e(Et,urr),e(Et,m_e),e(m_e,_rr),e(Et,brr),e(Et,Bd),e(Bd,vrr),e(Bd,g_e),e(g_e,Frr),e(Bd,Trr),e(Bd,WX),e(WX,Mrr),e(Bd,Err),e(Et,Crr),M(mF,Et,null),e(Uo,wrr),e(Uo,uo),M(AL,uo,null),e(uo,Arr),e(uo,h_e),e(h_e,yrr),e(uo,Lrr),e(uo,Ua),e(Ua,xrr),e(Ua,p_e),e(p_e,$rr),e(Ua,krr),e(Ua,u_e),e(u_e,Srr),e(Ua,Rrr),e(Ua,__e),e(__e,Brr),e(Ua,Prr),e(uo,Irr),e(uo,Ja),e(Ja,gF),e(gF,b_e),e(b_e,qrr),e(gF,Nrr),e(gF,HX),e(HX,jrr),e(gF,Drr),e(Ja,Grr),e(Ja,hF),e(hF,v_e),e(v_e,Orr),e(hF,Vrr),e(hF,UX),e(UX,Xrr),e(hF,zrr),e(Ja,Qrr),e(Ja,pF),e(pF,F_e),e(F_e,Wrr),e(pF,Hrr),e(pF,JX),e(JX,Urr),e(pF,Jrr),e(Ja,Yrr),e(Ja,uF),e(uF,T_e),e(T_e,Krr),e(uF,Zrr),e(uF,YX),e(YX,etr),e(uF,otr),e(uo,rtr),e(uo,_F),e(_F,ttr),e(_F,M_e),e(M_e,atr),e(_F,ntr),e(_F,E_e),e(E_e,str),e(uo,ltr),M(bF,uo,null),b(f,WIe,_),b(f,Pd,_),e(Pd,vF),e(vF,C_e),M(yL,C_e,null),e(Pd,itr),e(Pd,w_e),e(w_e,dtr),b(f,HIe,_),b(f,Jo,_),M(LL,Jo,null),e(Jo,ctr),e(Jo,Id),e(Id,ftr),e(Id,KX),e(KX,mtr),e(Id,gtr),e(Id,ZX),e(ZX,htr),e(Id,ptr),e(Jo,utr),e(Jo,xL),e(xL,_tr),e(xL,A_e),e(A_e,btr),e(xL,vtr),e(Jo,Ftr),e(Jo,Ct),M($L,Ct,null),e(Ct,Ttr),e(Ct,y_e),e(y_e,Mtr),e(Ct,Etr),e(Ct,qd),e(qd,Ctr),e(qd,L_e),e(L_e,wtr),e(qd,Atr),e(qd,ez),e(ez,ytr),e(qd,Ltr),e(Ct,xtr),M(FF,Ct,null),e(Jo,$tr),e(Jo,_o),M(kL,_o,null),e(_o,ktr),e(_o,x_e),e(x_e,Str),e(_o,Rtr),e(_o,Ya),e(Ya,Btr),e(Ya,$_e),e($_e,Ptr),e(Ya,Itr),e(Ya,k_e),e(k_e,qtr),e(Ya,Ntr),e(Ya,S_e),e(S_e,jtr),e(Ya,Dtr),e(_o,Gtr),e(_o,R_e),e(R_e,TF),e(TF,B_e),e(B_e,Otr),e(TF,Vtr),e(TF,oz),e(oz,Xtr),e(TF,ztr),e(_o,Qtr),e(_o,MF),e(MF,Wtr),e(MF,P_e),e(P_e,Htr),e(MF,Utr),e(MF,I_e),e(I_e,Jtr),e(_o,Ytr),M(EF,_o,null),b(f,UIe,_),b(f,Nd,_),e(Nd,CF),e(CF,q_e),M(SL,q_e,null),e(Nd,Ktr),e(Nd,N_e),e(N_e,Ztr),b(f,JIe,_),b(f,Yo,_),M(RL,Yo,null),e(Yo,ear),e(Yo,jd),e(jd,oar),e(jd,rz),e(rz,rar),e(jd,tar),e(jd,tz),e(tz,aar),e(jd,nar),e(Yo,sar),e(Yo,BL),e(BL,lar),e(BL,j_e),e(j_e,iar),e(BL,dar),e(Yo,car),e(Yo,wt),M(PL,wt,null),e(wt,far),e(wt,D_e),e(D_e,mar),e(wt,gar),e(wt,Dd),e(Dd,har),e(Dd,G_e),e(G_e,par),e(Dd,uar),e(Dd,az),e(az,_ar),e(Dd,bar),e(wt,Far),M(wF,wt,null),e(Yo,Tar),e(Yo,wr),M(IL,wr,null),e(wr,Mar),e(wr,O_e),e(O_e,Ear),e(wr,Car),e(wr,Ka),e(Ka,war),e(Ka,V_e),e(V_e,Aar),e(Ka,yar),e(Ka,X_e),e(X_e,Lar),e(Ka,xar),e(Ka,z_e),e(z_e,$ar),e(Ka,kar),e(wr,Sar),e(wr,j),e(j,AF),e(AF,Q_e),e(Q_e,Rar),e(AF,Bar),e(AF,nz),e(nz,Par),e(AF,Iar),e(j,qar),e(j,yF),e(yF,W_e),e(W_e,Nar),e(yF,jar),e(yF,sz),e(sz,Dar),e(yF,Gar),e(j,Oar),e(j,LF),e(LF,H_e),e(H_e,Var),e(LF,Xar),e(LF,lz),e(lz,zar),e(LF,Qar),e(j,War),e(j,xF),e(xF,U_e),e(U_e,Har),e(xF,Uar),e(xF,iz),e(iz,Jar),e(xF,Yar),e(j,Kar),e(j,$F),e($F,J_e),e(J_e,Zar),e($F,enr),e($F,dz),e(dz,onr),e($F,rnr),e(j,tnr),e(j,kF),e(kF,Y_e),e(Y_e,anr),e(kF,nnr),e(kF,cz),e(cz,snr),e(kF,lnr),e(j,inr),e(j,SF),e(SF,K_e),e(K_e,dnr),e(SF,cnr),e(SF,fz),e(fz,fnr),e(SF,mnr),e(j,gnr),e(j,RF),e(RF,Z_e),e(Z_e,hnr),e(RF,pnr),e(RF,mz),e(mz,unr),e(RF,_nr),e(j,bnr),e(j,BF),e(BF,e2e),e(e2e,vnr),e(BF,Fnr),e(BF,gz),e(gz,Tnr),e(BF,Mnr),e(j,Enr),e(j,PF),e(PF,o2e),e(o2e,Cnr),e(PF,wnr),e(PF,hz),e(hz,Anr),e(PF,ynr),e(j,Lnr),e(j,IF),e(IF,r2e),e(r2e,xnr),e(IF,$nr),e(IF,pz),e(pz,knr),e(IF,Snr),e(j,Rnr),e(j,qF),e(qF,t2e),e(t2e,Bnr),e(qF,Pnr),e(qF,uz),e(uz,Inr),e(qF,qnr),e(j,Nnr),e(j,NF),e(NF,a2e),e(a2e,jnr),e(NF,Dnr),e(NF,_z),e(_z,Gnr),e(NF,Onr),e(j,Vnr),e(j,jF),e(jF,n2e),e(n2e,Xnr),e(jF,znr),e(jF,bz),e(bz,Qnr),e(jF,Wnr),e(j,Hnr),e(j,DF),e(DF,s2e),e(s2e,Unr),e(DF,Jnr),e(DF,vz),e(vz,Ynr),e(DF,Knr),e(j,Znr),e(j,GF),e(GF,l2e),e(l2e,esr),e(GF,osr),e(GF,Fz),e(Fz,rsr),e(GF,tsr),e(j,asr),e(j,OF),e(OF,i2e),e(i2e,nsr),e(OF,ssr),e(OF,Tz),e(Tz,lsr),e(OF,isr),e(j,dsr),e(j,Ps),e(Ps,d2e),e(d2e,csr),e(Ps,fsr),e(Ps,Mz),e(Mz,msr),e(Ps,gsr),e(Ps,Ez),e(Ez,hsr),e(Ps,psr),e(j,usr),e(j,VF),e(VF,c2e),e(c2e,_sr),e(VF,bsr),e(VF,Cz),e(Cz,vsr),e(VF,Fsr),e(j,Tsr),e(j,XF),e(XF,f2e),e(f2e,Msr),e(XF,Esr),e(XF,wz),e(wz,Csr),e(XF,wsr),e(j,Asr),e(j,zF),e(zF,m2e),e(m2e,ysr),e(zF,Lsr),e(zF,Az),e(Az,xsr),e(zF,$sr),e(j,ksr),e(j,QF),e(QF,g2e),e(g2e,Ssr),e(QF,Rsr),e(QF,yz),e(yz,Bsr),e(QF,Psr),e(j,Isr),e(j,WF),e(WF,h2e),e(h2e,qsr),e(WF,Nsr),e(WF,Lz),e(Lz,jsr),e(WF,Dsr),e(j,Gsr),e(j,HF),e(HF,p2e),e(p2e,Osr),e(HF,Vsr),e(HF,xz),e(xz,Xsr),e(HF,zsr),e(j,Qsr),e(j,UF),e(UF,u2e),e(u2e,Wsr),e(UF,Hsr),e(UF,$z),e($z,Usr),e(UF,Jsr),e(j,Ysr),e(j,JF),e(JF,_2e),e(_2e,Ksr),e(JF,Zsr),e(JF,kz),e(kz,elr),e(JF,olr),e(j,rlr),e(j,YF),e(YF,b2e),e(b2e,tlr),e(YF,alr),e(YF,Sz),e(Sz,nlr),e(YF,slr),e(j,llr),e(j,KF),e(KF,v2e),e(v2e,ilr),e(KF,dlr),e(KF,Rz),e(Rz,clr),e(KF,flr),e(j,mlr),e(j,ZF),e(ZF,F2e),e(F2e,glr),e(ZF,hlr),e(ZF,Bz),e(Bz,plr),e(ZF,ulr),e(j,_lr),e(j,eT),e(eT,T2e),e(T2e,blr),e(eT,vlr),e(eT,Pz),e(Pz,Flr),e(eT,Tlr),e(j,Mlr),e(j,oT),e(oT,M2e),e(M2e,Elr),e(oT,Clr),e(oT,Iz),e(Iz,wlr),e(oT,Alr),e(j,ylr),e(j,rT),e(rT,E2e),e(E2e,Llr),e(rT,xlr),e(rT,qz),e(qz,$lr),e(rT,klr),e(j,Slr),e(j,tT),e(tT,C2e),e(C2e,Rlr),e(tT,Blr),e(tT,Nz),e(Nz,Plr),e(tT,Ilr),e(j,qlr),e(j,aT),e(aT,w2e),e(w2e,Nlr),e(aT,jlr),e(aT,jz),e(jz,Dlr),e(aT,Glr),e(j,Olr),e(j,nT),e(nT,A2e),e(A2e,Vlr),e(nT,Xlr),e(nT,Dz),e(Dz,zlr),e(nT,Qlr),e(j,Wlr),e(j,sT),e(sT,y2e),e(y2e,Hlr),e(sT,Ulr),e(sT,Gz),e(Gz,Jlr),e(sT,Ylr),e(j,Klr),e(j,lT),e(lT,L2e),e(L2e,Zlr),e(lT,eir),e(lT,Oz),e(Oz,oir),e(lT,rir),e(j,tir),e(j,iT),e(iT,x2e),e(x2e,air),e(iT,nir),e(iT,Vz),e(Vz,sir),e(iT,lir),e(j,iir),e(j,dT),e(dT,$2e),e($2e,dir),e(dT,cir),e(dT,Xz),e(Xz,fir),e(dT,mir),e(j,gir),e(j,cT),e(cT,k2e),e(k2e,hir),e(cT,pir),e(cT,zz),e(zz,uir),e(cT,_ir),e(j,bir),e(j,fT),e(fT,S2e),e(S2e,vir),e(fT,Fir),e(fT,Qz),e(Qz,Tir),e(fT,Mir),e(j,Eir),e(j,mT),e(mT,R2e),e(R2e,Cir),e(mT,wir),e(mT,Wz),e(Wz,Air),e(mT,yir),e(j,Lir),e(j,gT),e(gT,B2e),e(B2e,xir),e(gT,$ir),e(gT,Hz),e(Hz,kir),e(gT,Sir),e(j,Rir),e(j,hT),e(hT,P2e),e(P2e,Bir),e(hT,Pir),e(hT,Uz),e(Uz,Iir),e(hT,qir),e(j,Nir),e(j,pT),e(pT,I2e),e(I2e,jir),e(pT,Dir),e(pT,Jz),e(Jz,Gir),e(pT,Oir),e(wr,Vir),M(uT,wr,null),b(f,YIe,_),b(f,Gd,_),e(Gd,_T),e(_T,q2e),M(qL,q2e,null),e(Gd,Xir),e(Gd,N2e),e(N2e,zir),b(f,KIe,_),b(f,Ko,_),M(NL,Ko,null),e(Ko,Qir),e(Ko,Od),e(Od,Wir),e(Od,Yz),e(Yz,Hir),e(Od,Uir),e(Od,Kz),e(Kz,Jir),e(Od,Yir),e(Ko,Kir),e(Ko,jL),e(jL,Zir),e(jL,j2e),e(j2e,edr),e(jL,odr),e(Ko,rdr),e(Ko,At),M(DL,At,null),e(At,tdr),e(At,D2e),e(D2e,adr),e(At,ndr),e(At,Vd),e(Vd,sdr),e(Vd,G2e),e(G2e,ldr),e(Vd,idr),e(Vd,Zz),e(Zz,ddr),e(Vd,cdr),e(At,fdr),M(bT,At,null),e(Ko,mdr),e(Ko,Ar),M(GL,Ar,null),e(Ar,gdr),e(Ar,O2e),e(O2e,hdr),e(Ar,pdr),e(Ar,Za),e(Za,udr),e(Za,V2e),e(V2e,_dr),e(Za,bdr),e(Za,X2e),e(X2e,vdr),e(Za,Fdr),e(Za,z2e),e(z2e,Tdr),e(Za,Mdr),e(Ar,Edr),e(Ar,se),e(se,vT),e(vT,Q2e),e(Q2e,Cdr),e(vT,wdr),e(vT,eQ),e(eQ,Adr),e(vT,ydr),e(se,Ldr),e(se,FT),e(FT,W2e),e(W2e,xdr),e(FT,$dr),e(FT,oQ),e(oQ,kdr),e(FT,Sdr),e(se,Rdr),e(se,TT),e(TT,H2e),e(H2e,Bdr),e(TT,Pdr),e(TT,rQ),e(rQ,Idr),e(TT,qdr),e(se,Ndr),e(se,MT),e(MT,U2e),e(U2e,jdr),e(MT,Ddr),e(MT,tQ),e(tQ,Gdr),e(MT,Odr),e(se,Vdr),e(se,ET),e(ET,J2e),e(J2e,Xdr),e(ET,zdr),e(ET,aQ),e(aQ,Qdr),e(ET,Wdr),e(se,Hdr),e(se,CT),e(CT,Y2e),e(Y2e,Udr),e(CT,Jdr),e(CT,nQ),e(nQ,Ydr),e(CT,Kdr),e(se,Zdr),e(se,wT),e(wT,K2e),e(K2e,ecr),e(wT,ocr),e(wT,sQ),e(sQ,rcr),e(wT,tcr),e(se,acr),e(se,AT),e(AT,Z2e),e(Z2e,ncr),e(AT,scr),e(AT,lQ),e(lQ,lcr),e(AT,icr),e(se,dcr),e(se,yT),e(yT,e1e),e(e1e,ccr),e(yT,fcr),e(yT,iQ),e(iQ,mcr),e(yT,gcr),e(se,hcr),e(se,LT),e(LT,o1e),e(o1e,pcr),e(LT,ucr),e(LT,dQ),e(dQ,_cr),e(LT,bcr),e(se,vcr),e(se,xT),e(xT,r1e),e(r1e,Fcr),e(xT,Tcr),e(xT,cQ),e(cQ,Mcr),e(xT,Ecr),e(se,Ccr),e(se,$T),e($T,t1e),e(t1e,wcr),e($T,Acr),e($T,fQ),e(fQ,ycr),e($T,Lcr),e(se,xcr),e(se,kT),e(kT,a1e),e(a1e,$cr),e(kT,kcr),e(kT,mQ),e(mQ,Scr),e(kT,Rcr),e(se,Bcr),e(se,ST),e(ST,n1e),e(n1e,Pcr),e(ST,Icr),e(ST,gQ),e(gQ,qcr),e(ST,Ncr),e(se,jcr),e(se,RT),e(RT,s1e),e(s1e,Dcr),e(RT,Gcr),e(RT,hQ),e(hQ,Ocr),e(RT,Vcr),e(se,Xcr),e(se,BT),e(BT,l1e),e(l1e,zcr),e(BT,Qcr),e(BT,pQ),e(pQ,Wcr),e(BT,Hcr),e(se,Ucr),e(se,PT),e(PT,i1e),e(i1e,Jcr),e(PT,Ycr),e(PT,uQ),e(uQ,Kcr),e(PT,Zcr),e(se,efr),e(se,IT),e(IT,d1e),e(d1e,ofr),e(IT,rfr),e(IT,_Q),e(_Q,tfr),e(IT,afr),e(se,nfr),e(se,qT),e(qT,c1e),e(c1e,sfr),e(qT,lfr),e(qT,bQ),e(bQ,ifr),e(qT,dfr),e(se,cfr),e(se,NT),e(NT,f1e),e(f1e,ffr),e(NT,mfr),e(NT,vQ),e(vQ,gfr),e(NT,hfr),e(se,pfr),e(se,jT),e(jT,m1e),e(m1e,ufr),e(jT,_fr),e(jT,FQ),e(FQ,bfr),e(jT,vfr),e(se,Ffr),e(se,DT),e(DT,g1e),e(g1e,Tfr),e(DT,Mfr),e(DT,TQ),e(TQ,Efr),e(DT,Cfr),e(se,wfr),e(se,GT),e(GT,h1e),e(h1e,Afr),e(GT,yfr),e(GT,MQ),e(MQ,Lfr),e(GT,xfr),e(Ar,$fr),M(OT,Ar,null),b(f,ZIe,_),b(f,Xd,_),e(Xd,VT),e(VT,p1e),M(OL,p1e,null),e(Xd,kfr),e(Xd,u1e),e(u1e,Sfr),b(f,eqe,_),b(f,Zo,_),M(VL,Zo,null),e(Zo,Rfr),e(Zo,zd),e(zd,Bfr),e(zd,EQ),e(EQ,Pfr),e(zd,Ifr),e(zd,CQ),e(CQ,qfr),e(zd,Nfr),e(Zo,jfr),e(Zo,XL),e(XL,Dfr),e(XL,_1e),e(_1e,Gfr),e(XL,Ofr),e(Zo,Vfr),e(Zo,yt),M(zL,yt,null),e(yt,Xfr),e(yt,b1e),e(b1e,zfr),e(yt,Qfr),e(yt,Qd),e(Qd,Wfr),e(Qd,v1e),e(v1e,Hfr),e(Qd,Ufr),e(Qd,wQ),e(wQ,Jfr),e(Qd,Yfr),e(yt,Kfr),M(XT,yt,null),e(Zo,Zfr),e(Zo,yr),M(QL,yr,null),e(yr,emr),e(yr,F1e),e(F1e,omr),e(yr,rmr),e(yr,en),e(en,tmr),e(en,T1e),e(T1e,amr),e(en,nmr),e(en,M1e),e(M1e,smr),e(en,lmr),e(en,E1e),e(E1e,imr),e(en,dmr),e(yr,cmr),e(yr,Te),e(Te,zT),e(zT,C1e),e(C1e,fmr),e(zT,mmr),e(zT,AQ),e(AQ,gmr),e(zT,hmr),e(Te,pmr),e(Te,QT),e(QT,w1e),e(w1e,umr),e(QT,_mr),e(QT,yQ),e(yQ,bmr),e(QT,vmr),e(Te,Fmr),e(Te,WT),e(WT,A1e),e(A1e,Tmr),e(WT,Mmr),e(WT,LQ),e(LQ,Emr),e(WT,Cmr),e(Te,wmr),e(Te,HT),e(HT,y1e),e(y1e,Amr),e(HT,ymr),e(HT,xQ),e(xQ,Lmr),e(HT,xmr),e(Te,$mr),e(Te,UT),e(UT,L1e),e(L1e,kmr),e(UT,Smr),e(UT,$Q),e($Q,Rmr),e(UT,Bmr),e(Te,Pmr),e(Te,JT),e(JT,x1e),e(x1e,Imr),e(JT,qmr),e(JT,kQ),e(kQ,Nmr),e(JT,jmr),e(Te,Dmr),e(Te,YT),e(YT,$1e),e($1e,Gmr),e(YT,Omr),e(YT,SQ),e(SQ,Vmr),e(YT,Xmr),e(Te,zmr),e(Te,KT),e(KT,k1e),e(k1e,Qmr),e(KT,Wmr),e(KT,RQ),e(RQ,Hmr),e(KT,Umr),e(Te,Jmr),e(Te,ZT),e(ZT,S1e),e(S1e,Ymr),e(ZT,Kmr),e(ZT,BQ),e(BQ,Zmr),e(ZT,egr),e(Te,ogr),e(Te,e7),e(e7,R1e),e(R1e,rgr),e(e7,tgr),e(e7,PQ),e(PQ,agr),e(e7,ngr),e(Te,sgr),e(Te,o7),e(o7,B1e),e(B1e,lgr),e(o7,igr),e(o7,IQ),e(IQ,dgr),e(o7,cgr),e(Te,fgr),e(Te,r7),e(r7,P1e),e(P1e,mgr),e(r7,ggr),e(r7,qQ),e(qQ,hgr),e(r7,pgr),e(yr,ugr),M(t7,yr,null),b(f,oqe,_),b(f,Wd,_),e(Wd,a7),e(a7,I1e),M(WL,I1e,null),e(Wd,_gr),e(Wd,q1e),e(q1e,bgr),b(f,rqe,_),b(f,er,_),M(HL,er,null),e(er,vgr),e(er,Hd),e(Hd,Fgr),e(Hd,NQ),e(NQ,Tgr),e(Hd,Mgr),e(Hd,jQ),e(jQ,Egr),e(Hd,Cgr),e(er,wgr),e(er,UL),e(UL,Agr),e(UL,N1e),e(N1e,ygr),e(UL,Lgr),e(er,xgr),e(er,Lt),M(JL,Lt,null),e(Lt,$gr),e(Lt,j1e),e(j1e,kgr),e(Lt,Sgr),e(Lt,Ud),e(Ud,Rgr),e(Ud,D1e),e(D1e,Bgr),e(Ud,Pgr),e(Ud,DQ),e(DQ,Igr),e(Ud,qgr),e(Lt,Ngr),M(n7,Lt,null),e(er,jgr),e(er,Lr),M(YL,Lr,null),e(Lr,Dgr),e(Lr,G1e),e(G1e,Ggr),e(Lr,Ogr),e(Lr,on),e(on,Vgr),e(on,O1e),e(O1e,Xgr),e(on,zgr),e(on,V1e),e(V1e,Qgr),e(on,Wgr),e(on,X1e),e(X1e,Hgr),e(on,Ugr),e(Lr,Jgr),e(Lr,Jd),e(Jd,s7),e(s7,z1e),e(z1e,Ygr),e(s7,Kgr),e(s7,GQ),e(GQ,Zgr),e(s7,ehr),e(Jd,ohr),e(Jd,l7),e(l7,Q1e),e(Q1e,rhr),e(l7,thr),e(l7,OQ),e(OQ,ahr),e(l7,nhr),e(Jd,shr),e(Jd,i7),e(i7,W1e),e(W1e,lhr),e(i7,ihr),e(i7,VQ),e(VQ,dhr),e(i7,chr),e(Lr,fhr),M(d7,Lr,null),b(f,tqe,_),b(f,Yd,_),e(Yd,c7),e(c7,H1e),M(KL,H1e,null),e(Yd,mhr),e(Yd,U1e),e(U1e,ghr),b(f,aqe,_),b(f,or,_),M(ZL,or,null),e(or,hhr),e(or,Kd),e(Kd,phr),e(Kd,XQ),e(XQ,uhr),e(Kd,_hr),e(Kd,zQ),e(zQ,bhr),e(Kd,vhr),e(or,Fhr),e(or,e8),e(e8,Thr),e(e8,J1e),e(J1e,Mhr),e(e8,Ehr),e(or,Chr),e(or,xt),M(o8,xt,null),e(xt,whr),e(xt,Y1e),e(Y1e,Ahr),e(xt,yhr),e(xt,Zd),e(Zd,Lhr),e(Zd,K1e),e(K1e,xhr),e(Zd,$hr),e(Zd,QQ),e(QQ,khr),e(Zd,Shr),e(xt,Rhr),M(f7,xt,null),e(or,Bhr),e(or,xr),M(r8,xr,null),e(xr,Phr),e(xr,Z1e),e(Z1e,Ihr),e(xr,qhr),e(xr,rn),e(rn,Nhr),e(rn,ebe),e(ebe,jhr),e(rn,Dhr),e(rn,obe),e(obe,Ghr),e(rn,Ohr),e(rn,rbe),e(rbe,Vhr),e(rn,Xhr),e(xr,zhr),e(xr,ie),e(ie,m7),e(m7,tbe),e(tbe,Qhr),e(m7,Whr),e(m7,WQ),e(WQ,Hhr),e(m7,Uhr),e(ie,Jhr),e(ie,g7),e(g7,abe),e(abe,Yhr),e(g7,Khr),e(g7,HQ),e(HQ,Zhr),e(g7,epr),e(ie,opr),e(ie,h7),e(h7,nbe),e(nbe,rpr),e(h7,tpr),e(h7,UQ),e(UQ,apr),e(h7,npr),e(ie,spr),e(ie,p7),e(p7,sbe),e(sbe,lpr),e(p7,ipr),e(p7,JQ),e(JQ,dpr),e(p7,cpr),e(ie,fpr),e(ie,u7),e(u7,lbe),e(lbe,mpr),e(u7,gpr),e(u7,YQ),e(YQ,hpr),e(u7,ppr),e(ie,upr),e(ie,_7),e(_7,ibe),e(ibe,_pr),e(_7,bpr),e(_7,KQ),e(KQ,vpr),e(_7,Fpr),e(ie,Tpr),e(ie,b7),e(b7,dbe),e(dbe,Mpr),e(b7,Epr),e(b7,ZQ),e(ZQ,Cpr),e(b7,wpr),e(ie,Apr),e(ie,v7),e(v7,cbe),e(cbe,ypr),e(v7,Lpr),e(v7,eW),e(eW,xpr),e(v7,$pr),e(ie,kpr),e(ie,F7),e(F7,fbe),e(fbe,Spr),e(F7,Rpr),e(F7,oW),e(oW,Bpr),e(F7,Ppr),e(ie,Ipr),e(ie,T7),e(T7,mbe),e(mbe,qpr),e(T7,Npr),e(T7,rW),e(rW,jpr),e(T7,Dpr),e(ie,Gpr),e(ie,M7),e(M7,gbe),e(gbe,Opr),e(M7,Vpr),e(M7,tW),e(tW,Xpr),e(M7,zpr),e(ie,Qpr),e(ie,E7),e(E7,hbe),e(hbe,Wpr),e(E7,Hpr),e(E7,aW),e(aW,Upr),e(E7,Jpr),e(ie,Ypr),e(ie,C7),e(C7,pbe),e(pbe,Kpr),e(C7,Zpr),e(C7,nW),e(nW,eur),e(C7,our),e(ie,rur),e(ie,w7),e(w7,ube),e(ube,tur),e(w7,aur),e(w7,sW),e(sW,nur),e(w7,sur),e(ie,lur),e(ie,A7),e(A7,_be),e(_be,iur),e(A7,dur),e(A7,lW),e(lW,cur),e(A7,fur),e(ie,mur),e(ie,y7),e(y7,bbe),e(bbe,gur),e(y7,hur),e(y7,iW),e(iW,pur),e(y7,uur),e(ie,_ur),e(ie,L7),e(L7,vbe),e(vbe,bur),e(L7,vur),e(L7,dW),e(dW,Fur),e(L7,Tur),e(ie,Mur),e(ie,x7),e(x7,Fbe),e(Fbe,Eur),e(x7,Cur),e(x7,cW),e(cW,wur),e(x7,Aur),e(ie,yur),e(ie,$7),e($7,Tbe),e(Tbe,Lur),e($7,xur),e($7,fW),e(fW,$ur),e($7,kur),e(ie,Sur),e(ie,k7),e(k7,Mbe),e(Mbe,Rur),e(k7,Bur),e(k7,mW),e(mW,Pur),e(k7,Iur),e(xr,qur),M(S7,xr,null),b(f,nqe,_),b(f,ec,_),e(ec,R7),e(R7,Ebe),M(t8,Ebe,null),e(ec,Nur),e(ec,Cbe),e(Cbe,jur),b(f,sqe,_),b(f,rr,_),M(a8,rr,null),e(rr,Dur),e(rr,oc),e(oc,Gur),e(oc,gW),e(gW,Our),e(oc,Vur),e(oc,hW),e(hW,Xur),e(oc,zur),e(rr,Qur),e(rr,n8),e(n8,Wur),e(n8,wbe),e(wbe,Hur),e(n8,Uur),e(rr,Jur),e(rr,$t),M(s8,$t,null),e($t,Yur),e($t,Abe),e(Abe,Kur),e($t,Zur),e($t,rc),e(rc,e_r),e(rc,ybe),e(ybe,o_r),e(rc,r_r),e(rc,pW),e(pW,t_r),e(rc,a_r),e($t,n_r),M(B7,$t,null),e(rr,s_r),e(rr,$r),M(l8,$r,null),e($r,l_r),e($r,Lbe),e(Lbe,i_r),e($r,d_r),e($r,tn),e(tn,c_r),e(tn,xbe),e(xbe,f_r),e(tn,m_r),e(tn,$be),e($be,g_r),e(tn,h_r),e(tn,kbe),e(kbe,p_r),e(tn,u_r),e($r,__r),e($r,ye),e(ye,P7),e(P7,Sbe),e(Sbe,b_r),e(P7,v_r),e(P7,uW),e(uW,F_r),e(P7,T_r),e(ye,M_r),e(ye,I7),e(I7,Rbe),e(Rbe,E_r),e(I7,C_r),e(I7,_W),e(_W,w_r),e(I7,A_r),e(ye,y_r),e(ye,q7),e(q7,Bbe),e(Bbe,L_r),e(q7,x_r),e(q7,bW),e(bW,$_r),e(q7,k_r),e(ye,S_r),e(ye,N7),e(N7,Pbe),e(Pbe,R_r),e(N7,B_r),e(N7,vW),e(vW,P_r),e(N7,I_r),e(ye,q_r),e(ye,j7),e(j7,Ibe),e(Ibe,N_r),e(j7,j_r),e(j7,FW),e(FW,D_r),e(j7,G_r),e(ye,O_r),e(ye,D7),e(D7,qbe),e(qbe,V_r),e(D7,X_r),e(D7,TW),e(TW,z_r),e(D7,Q_r),e(ye,W_r),e(ye,G7),e(G7,Nbe),e(Nbe,H_r),e(G7,U_r),e(G7,MW),e(MW,J_r),e(G7,Y_r),e(ye,K_r),e(ye,O7),e(O7,jbe),e(jbe,Z_r),e(O7,e2r),e(O7,EW),e(EW,o2r),e(O7,r2r),e(ye,t2r),e(ye,V7),e(V7,Dbe),e(Dbe,a2r),e(V7,n2r),e(V7,CW),e(CW,s2r),e(V7,l2r),e(ye,i2r),e(ye,X7),e(X7,Gbe),e(Gbe,d2r),e(X7,c2r),e(X7,wW),e(wW,f2r),e(X7,m2r),e($r,g2r),M(z7,$r,null),b(f,lqe,_),b(f,tc,_),e(tc,Q7),e(Q7,Obe),M(i8,Obe,null),e(tc,h2r),e(tc,Vbe),e(Vbe,p2r),b(f,iqe,_),b(f,tr,_),M(d8,tr,null),e(tr,u2r),e(tr,ac),e(ac,_2r),e(ac,AW),e(AW,b2r),e(ac,v2r),e(ac,yW),e(yW,F2r),e(ac,T2r),e(tr,M2r),e(tr,c8),e(c8,E2r),e(c8,Xbe),e(Xbe,C2r),e(c8,w2r),e(tr,A2r),e(tr,kt),M(f8,kt,null),e(kt,y2r),e(kt,zbe),e(zbe,L2r),e(kt,x2r),e(kt,nc),e(nc,$2r),e(nc,Qbe),e(Qbe,k2r),e(nc,S2r),e(nc,LW),e(LW,R2r),e(nc,B2r),e(kt,P2r),M(W7,kt,null),e(tr,I2r),e(tr,kr),M(m8,kr,null),e(kr,q2r),e(kr,Wbe),e(Wbe,N2r),e(kr,j2r),e(kr,an),e(an,D2r),e(an,Hbe),e(Hbe,G2r),e(an,O2r),e(an,Ube),e(Ube,V2r),e(an,X2r),e(an,Jbe),e(Jbe,z2r),e(an,Q2r),e(kr,W2r),e(kr,Z),e(Z,H7),e(H7,Ybe),e(Ybe,H2r),e(H7,U2r),e(H7,xW),e(xW,J2r),e(H7,Y2r),e(Z,K2r),e(Z,U7),e(U7,Kbe),e(Kbe,Z2r),e(U7,e1r),e(U7,$W),e($W,o1r),e(U7,r1r),e(Z,t1r),e(Z,J7),e(J7,Zbe),e(Zbe,a1r),e(J7,n1r),e(J7,kW),e(kW,s1r),e(J7,l1r),e(Z,i1r),e(Z,Y7),e(Y7,e4e),e(e4e,d1r),e(Y7,c1r),e(Y7,SW),e(SW,f1r),e(Y7,m1r),e(Z,g1r),e(Z,K7),e(K7,o4e),e(o4e,h1r),e(K7,p1r),e(K7,RW),e(RW,u1r),e(K7,_1r),e(Z,b1r),e(Z,Z7),e(Z7,r4e),e(r4e,v1r),e(Z7,F1r),e(Z7,BW),e(BW,T1r),e(Z7,M1r),e(Z,E1r),e(Z,eM),e(eM,t4e),e(t4e,C1r),e(eM,w1r),e(eM,PW),e(PW,A1r),e(eM,y1r),e(Z,L1r),e(Z,oM),e(oM,a4e),e(a4e,x1r),e(oM,$1r),e(oM,IW),e(IW,k1r),e(oM,S1r),e(Z,R1r),e(Z,rM),e(rM,n4e),e(n4e,B1r),e(rM,P1r),e(rM,qW),e(qW,I1r),e(rM,q1r),e(Z,N1r),e(Z,tM),e(tM,s4e),e(s4e,j1r),e(tM,D1r),e(tM,NW),e(NW,G1r),e(tM,O1r),e(Z,V1r),e(Z,aM),e(aM,l4e),e(l4e,X1r),e(aM,z1r),e(aM,jW),e(jW,Q1r),e(aM,W1r),e(Z,H1r),e(Z,nM),e(nM,i4e),e(i4e,U1r),e(nM,J1r),e(nM,DW),e(DW,Y1r),e(nM,K1r),e(Z,Z1r),e(Z,sM),e(sM,d4e),e(d4e,ebr),e(sM,obr),e(sM,GW),e(GW,rbr),e(sM,tbr),e(Z,abr),e(Z,lM),e(lM,c4e),e(c4e,nbr),e(lM,sbr),e(lM,OW),e(OW,lbr),e(lM,ibr),e(Z,dbr),e(Z,iM),e(iM,f4e),e(f4e,cbr),e(iM,fbr),e(iM,VW),e(VW,mbr),e(iM,gbr),e(Z,hbr),e(Z,dM),e(dM,m4e),e(m4e,pbr),e(dM,ubr),e(dM,XW),e(XW,_br),e(dM,bbr),e(Z,vbr),e(Z,cM),e(cM,g4e),e(g4e,Fbr),e(cM,Tbr),e(cM,zW),e(zW,Mbr),e(cM,Ebr),e(Z,Cbr),e(Z,fM),e(fM,h4e),e(h4e,wbr),e(fM,Abr),e(fM,QW),e(QW,ybr),e(fM,Lbr),e(Z,xbr),e(Z,mM),e(mM,p4e),e(p4e,$br),e(mM,kbr),e(mM,WW),e(WW,Sbr),e(mM,Rbr),e(Z,Bbr),e(Z,gM),e(gM,u4e),e(u4e,Pbr),e(gM,Ibr),e(gM,HW),e(HW,qbr),e(gM,Nbr),e(Z,jbr),e(Z,hM),e(hM,_4e),e(_4e,Dbr),e(hM,Gbr),e(hM,UW),e(UW,Obr),e(hM,Vbr),e(Z,Xbr),e(Z,pM),e(pM,b4e),e(b4e,zbr),e(pM,Qbr),e(pM,JW),e(JW,Wbr),e(pM,Hbr),e(Z,Ubr),e(Z,uM),e(uM,v4e),e(v4e,Jbr),e(uM,Ybr),e(uM,YW),e(YW,Kbr),e(uM,Zbr),e(Z,e4r),e(Z,_M),e(_M,F4e),e(F4e,o4r),e(_M,r4r),e(_M,KW),e(KW,t4r),e(_M,a4r),e(Z,n4r),e(Z,bM),e(bM,T4e),e(T4e,s4r),e(bM,l4r),e(bM,ZW),e(ZW,i4r),e(bM,d4r),e(Z,c4r),e(Z,vM),e(vM,M4e),e(M4e,f4r),e(vM,m4r),e(vM,eH),e(eH,g4r),e(vM,h4r),e(kr,p4r),M(FM,kr,null),b(f,dqe,_),b(f,sc,_),e(sc,TM),e(TM,E4e),M(g8,E4e,null),e(sc,u4r),e(sc,C4e),e(C4e,_4r),b(f,cqe,_),b(f,ar,_),M(h8,ar,null),e(ar,b4r),e(ar,lc),e(lc,v4r),e(lc,oH),e(oH,F4r),e(lc,T4r),e(lc,rH),e(rH,M4r),e(lc,E4r),e(ar,C4r),e(ar,p8),e(p8,w4r),e(p8,w4e),e(w4e,A4r),e(p8,y4r),e(ar,L4r),e(ar,St),M(u8,St,null),e(St,x4r),e(St,A4e),e(A4e,$4r),e(St,k4r),e(St,ic),e(ic,S4r),e(ic,y4e),e(y4e,R4r),e(ic,B4r),e(ic,tH),e(tH,P4r),e(ic,I4r),e(St,q4r),M(MM,St,null),e(ar,N4r),e(ar,Sr),M(_8,Sr,null),e(Sr,j4r),e(Sr,L4e),e(L4e,D4r),e(Sr,G4r),e(Sr,nn),e(nn,O4r),e(nn,x4e),e(x4e,V4r),e(nn,X4r),e(nn,$4e),e($4e,z4r),e(nn,Q4r),e(nn,k4e),e(k4e,W4r),e(nn,H4r),e(Sr,U4r),e(Sr,pe),e(pe,EM),e(EM,S4e),e(S4e,J4r),e(EM,Y4r),e(EM,aH),e(aH,K4r),e(EM,Z4r),e(pe,e5r),e(pe,CM),e(CM,R4e),e(R4e,o5r),e(CM,r5r),e(CM,nH),e(nH,t5r),e(CM,a5r),e(pe,n5r),e(pe,wM),e(wM,B4e),e(B4e,s5r),e(wM,l5r),e(wM,sH),e(sH,i5r),e(wM,d5r),e(pe,c5r),e(pe,AM),e(AM,P4e),e(P4e,f5r),e(AM,m5r),e(AM,lH),e(lH,g5r),e(AM,h5r),e(pe,p5r),e(pe,yM),e(yM,I4e),e(I4e,u5r),e(yM,_5r),e(yM,iH),e(iH,b5r),e(yM,v5r),e(pe,F5r),e(pe,LM),e(LM,q4e),e(q4e,T5r),e(LM,M5r),e(LM,dH),e(dH,E5r),e(LM,C5r),e(pe,w5r),e(pe,xM),e(xM,N4e),e(N4e,A5r),e(xM,y5r),e(xM,cH),e(cH,L5r),e(xM,x5r),e(pe,$5r),e(pe,$M),e($M,j4e),e(j4e,k5r),e($M,S5r),e($M,fH),e(fH,R5r),e($M,B5r),e(pe,P5r),e(pe,kM),e(kM,D4e),e(D4e,I5r),e(kM,q5r),e(kM,mH),e(mH,N5r),e(kM,j5r),e(pe,D5r),e(pe,SM),e(SM,G4e),e(G4e,G5r),e(SM,O5r),e(SM,gH),e(gH,V5r),e(SM,X5r),e(pe,z5r),e(pe,RM),e(RM,O4e),e(O4e,Q5r),e(RM,W5r),e(RM,hH),e(hH,H5r),e(RM,U5r),e(pe,J5r),e(pe,BM),e(BM,V4e),e(V4e,Y5r),e(BM,K5r),e(BM,pH),e(pH,Z5r),e(BM,evr),e(pe,ovr),e(pe,PM),e(PM,X4e),e(X4e,rvr),e(PM,tvr),e(PM,uH),e(uH,avr),e(PM,nvr),e(pe,svr),e(pe,IM),e(IM,z4e),e(z4e,lvr),e(IM,ivr),e(IM,_H),e(_H,dvr),e(IM,cvr),e(pe,fvr),e(pe,qM),e(qM,Q4e),e(Q4e,mvr),e(qM,gvr),e(qM,bH),e(bH,hvr),e(qM,pvr),e(pe,uvr),e(pe,NM),e(NM,W4e),e(W4e,_vr),e(NM,bvr),e(NM,vH),e(vH,vvr),e(NM,Fvr),e(pe,Tvr),e(pe,jM),e(jM,H4e),e(H4e,Mvr),e(jM,Evr),e(jM,FH),e(FH,Cvr),e(jM,wvr),e(Sr,Avr),M(DM,Sr,null),b(f,fqe,_),b(f,dc,_),e(dc,GM),e(GM,U4e),M(b8,U4e,null),e(dc,yvr),e(dc,J4e),e(J4e,Lvr),b(f,mqe,_),b(f,nr,_),M(v8,nr,null),e(nr,xvr),e(nr,cc),e(cc,$vr),e(cc,TH),e(TH,kvr),e(cc,Svr),e(cc,MH),e(MH,Rvr),e(cc,Bvr),e(nr,Pvr),e(nr,F8),e(F8,Ivr),e(F8,Y4e),e(Y4e,qvr),e(F8,Nvr),e(nr,jvr),e(nr,Rt),M(T8,Rt,null),e(Rt,Dvr),e(Rt,K4e),e(K4e,Gvr),e(Rt,Ovr),e(Rt,fc),e(fc,Vvr),e(fc,Z4e),e(Z4e,Xvr),e(fc,zvr),e(fc,EH),e(EH,Qvr),e(fc,Wvr),e(Rt,Hvr),M(OM,Rt,null),e(nr,Uvr),e(nr,Rr),M(M8,Rr,null),e(Rr,Jvr),e(Rr,e5e),e(e5e,Yvr),e(Rr,Kvr),e(Rr,sn),e(sn,Zvr),e(sn,o5e),e(o5e,eFr),e(sn,oFr),e(sn,r5e),e(r5e,rFr),e(sn,tFr),e(sn,t5e),e(t5e,aFr),e(sn,nFr),e(Rr,sFr),e(Rr,E8),e(E8,VM),e(VM,a5e),e(a5e,lFr),e(VM,iFr),e(VM,CH),e(CH,dFr),e(VM,cFr),e(E8,fFr),e(E8,XM),e(XM,n5e),e(n5e,mFr),e(XM,gFr),e(XM,wH),e(wH,hFr),e(XM,pFr),e(Rr,uFr),M(zM,Rr,null),b(f,gqe,_),b(f,mc,_),e(mc,QM),e(QM,s5e),M(C8,s5e,null),e(mc,_Fr),e(mc,l5e),e(l5e,bFr),b(f,hqe,_),b(f,sr,_),M(w8,sr,null),e(sr,vFr),e(sr,gc),e(gc,FFr),e(gc,AH),e(AH,TFr),e(gc,MFr),e(gc,yH),e(yH,EFr),e(gc,CFr),e(sr,wFr),e(sr,A8),e(A8,AFr),e(A8,i5e),e(i5e,yFr),e(A8,LFr),e(sr,xFr),e(sr,Bt),M(y8,Bt,null),e(Bt,$Fr),e(Bt,d5e),e(d5e,kFr),e(Bt,SFr),e(Bt,hc),e(hc,RFr),e(hc,c5e),e(c5e,BFr),e(hc,PFr),e(hc,LH),e(LH,IFr),e(hc,qFr),e(Bt,NFr),M(WM,Bt,null),e(sr,jFr),e(sr,Br),M(L8,Br,null),e(Br,DFr),e(Br,f5e),e(f5e,GFr),e(Br,OFr),e(Br,ln),e(ln,VFr),e(ln,m5e),e(m5e,XFr),e(ln,zFr),e(ln,g5e),e(g5e,QFr),e(ln,WFr),e(ln,h5e),e(h5e,HFr),e(ln,UFr),e(Br,JFr),e(Br,p5e),e(p5e,HM),e(HM,u5e),e(u5e,YFr),e(HM,KFr),e(HM,xH),e(xH,ZFr),e(HM,eTr),e(Br,oTr),M(UM,Br,null),b(f,pqe,_),b(f,pc,_),e(pc,JM),e(JM,_5e),M(x8,_5e,null),e(pc,rTr),e(pc,b5e),e(b5e,tTr),b(f,uqe,_),b(f,lr,_),M($8,lr,null),e(lr,aTr),e(lr,uc),e(uc,nTr),e(uc,$H),e($H,sTr),e(uc,lTr),e(uc,kH),e(kH,iTr),e(uc,dTr),e(lr,cTr),e(lr,k8),e(k8,fTr),e(k8,v5e),e(v5e,mTr),e(k8,gTr),e(lr,hTr),e(lr,Pt),M(S8,Pt,null),e(Pt,pTr),e(Pt,F5e),e(F5e,uTr),e(Pt,_Tr),e(Pt,_c),e(_c,bTr),e(_c,T5e),e(T5e,vTr),e(_c,FTr),e(_c,SH),e(SH,TTr),e(_c,MTr),e(Pt,ETr),M(YM,Pt,null),e(lr,CTr),e(lr,Pr),M(R8,Pr,null),e(Pr,wTr),e(Pr,M5e),e(M5e,ATr),e(Pr,yTr),e(Pr,dn),e(dn,LTr),e(dn,E5e),e(E5e,xTr),e(dn,$Tr),e(dn,C5e),e(C5e,kTr),e(dn,STr),e(dn,w5e),e(w5e,RTr),e(dn,BTr),e(Pr,PTr),e(Pr,de),e(de,KM),e(KM,A5e),e(A5e,ITr),e(KM,qTr),e(KM,RH),e(RH,NTr),e(KM,jTr),e(de,DTr),e(de,ZM),e(ZM,y5e),e(y5e,GTr),e(ZM,OTr),e(ZM,BH),e(BH,VTr),e(ZM,XTr),e(de,zTr),e(de,eE),e(eE,L5e),e(L5e,QTr),e(eE,WTr),e(eE,PH),e(PH,HTr),e(eE,UTr),e(de,JTr),e(de,oE),e(oE,x5e),e(x5e,YTr),e(oE,KTr),e(oE,IH),e(IH,ZTr),e(oE,e7r),e(de,o7r),e(de,rE),e(rE,$5e),e($5e,r7r),e(rE,t7r),e(rE,qH),e(qH,a7r),e(rE,n7r),e(de,s7r),e(de,tE),e(tE,k5e),e(k5e,l7r),e(tE,i7r),e(tE,NH),e(NH,d7r),e(tE,c7r),e(de,f7r),e(de,aE),e(aE,S5e),e(S5e,m7r),e(aE,g7r),e(aE,jH),e(jH,h7r),e(aE,p7r),e(de,u7r),e(de,nE),e(nE,R5e),e(R5e,_7r),e(nE,b7r),e(nE,DH),e(DH,v7r),e(nE,F7r),e(de,T7r),e(de,sE),e(sE,B5e),e(B5e,M7r),e(sE,E7r),e(sE,GH),e(GH,C7r),e(sE,w7r),e(de,A7r),e(de,lE),e(lE,P5e),e(P5e,y7r),e(lE,L7r),e(lE,OH),e(OH,x7r),e(lE,$7r),e(de,k7r),e(de,iE),e(iE,I5e),e(I5e,S7r),e(iE,R7r),e(iE,VH),e(VH,B7r),e(iE,P7r),e(de,I7r),e(de,dE),e(dE,q5e),e(q5e,q7r),e(dE,N7r),e(dE,XH),e(XH,j7r),e(dE,D7r),e(de,G7r),e(de,cE),e(cE,N5e),e(N5e,O7r),e(cE,V7r),e(cE,zH),e(zH,X7r),e(cE,z7r),e(de,Q7r),e(de,fE),e(fE,j5e),e(j5e,W7r),e(fE,H7r),e(fE,QH),e(QH,U7r),e(fE,J7r),e(de,Y7r),e(de,mE),e(mE,D5e),e(D5e,K7r),e(mE,Z7r),e(mE,WH),e(WH,eMr),e(mE,oMr),e(de,rMr),e(de,gE),e(gE,G5e),e(G5e,tMr),e(gE,aMr),e(gE,HH),e(HH,nMr),e(gE,sMr),e(de,lMr),e(de,hE),e(hE,O5e),e(O5e,iMr),e(hE,dMr),e(hE,UH),e(UH,cMr),e(hE,fMr),e(de,mMr),e(de,pE),e(pE,V5e),e(V5e,gMr),e(pE,hMr),e(pE,JH),e(JH,pMr),e(pE,uMr),e(de,_Mr),e(de,uE),e(uE,X5e),e(X5e,bMr),e(uE,vMr),e(uE,YH),e(YH,FMr),e(uE,TMr),e(de,MMr),e(de,_E),e(_E,z5e),e(z5e,EMr),e(_E,CMr),e(_E,KH),e(KH,wMr),e(_E,AMr),e(Pr,yMr),M(bE,Pr,null),b(f,_qe,_),b(f,bc,_),e(bc,vE),e(vE,Q5e),M(B8,Q5e,null),e(bc,LMr),e(bc,W5e),e(W5e,xMr),b(f,bqe,_),b(f,ir,_),M(P8,ir,null),e(ir,$Mr),e(ir,vc),e(vc,kMr),e(vc,ZH),e(ZH,SMr),e(vc,RMr),e(vc,eU),e(eU,BMr),e(vc,PMr),e(ir,IMr),e(ir,I8),e(I8,qMr),e(I8,H5e),e(H5e,NMr),e(I8,jMr),e(ir,DMr),e(ir,It),M(q8,It,null),e(It,GMr),e(It,U5e),e(U5e,OMr),e(It,VMr),e(It,Fc),e(Fc,XMr),e(Fc,J5e),e(J5e,zMr),e(Fc,QMr),e(Fc,oU),e(oU,WMr),e(Fc,HMr),e(It,UMr),M(FE,It,null),e(ir,JMr),e(ir,Ir),M(N8,Ir,null),e(Ir,YMr),e(Ir,Y5e),e(Y5e,KMr),e(Ir,ZMr),e(Ir,cn),e(cn,eEr),e(cn,K5e),e(K5e,oEr),e(cn,rEr),e(cn,Z5e),e(Z5e,tEr),e(cn,aEr),e(cn,eve),e(eve,nEr),e(cn,sEr),e(Ir,lEr),e(Ir,ce),e(ce,TE),e(TE,ove),e(ove,iEr),e(TE,dEr),e(TE,rU),e(rU,cEr),e(TE,fEr),e(ce,mEr),e(ce,ME),e(ME,rve),e(rve,gEr),e(ME,hEr),e(ME,tU),e(tU,pEr),e(ME,uEr),e(ce,_Er),e(ce,EE),e(EE,tve),e(tve,bEr),e(EE,vEr),e(EE,aU),e(aU,FEr),e(EE,TEr),e(ce,MEr),e(ce,CE),e(CE,ave),e(ave,EEr),e(CE,CEr),e(CE,nU),e(nU,wEr),e(CE,AEr),e(ce,yEr),e(ce,wE),e(wE,nve),e(nve,LEr),e(wE,xEr),e(wE,sU),e(sU,$Er),e(wE,kEr),e(ce,SEr),e(ce,AE),e(AE,sve),e(sve,REr),e(AE,BEr),e(AE,lU),e(lU,PEr),e(AE,IEr),e(ce,qEr),e(ce,yE),e(yE,lve),e(lve,NEr),e(yE,jEr),e(yE,iU),e(iU,DEr),e(yE,GEr),e(ce,OEr),e(ce,LE),e(LE,ive),e(ive,VEr),e(LE,XEr),e(LE,dU),e(dU,zEr),e(LE,QEr),e(ce,WEr),e(ce,xE),e(xE,dve),e(dve,HEr),e(xE,UEr),e(xE,cU),e(cU,JEr),e(xE,YEr),e(ce,KEr),e(ce,$E),e($E,cve),e(cve,ZEr),e($E,eCr),e($E,fU),e(fU,oCr),e($E,rCr),e(ce,tCr),e(ce,kE),e(kE,fve),e(fve,aCr),e(kE,nCr),e(kE,mU),e(mU,sCr),e(kE,lCr),e(ce,iCr),e(ce,SE),e(SE,mve),e(mve,dCr),e(SE,cCr),e(SE,gU),e(gU,fCr),e(SE,mCr),e(ce,gCr),e(ce,RE),e(RE,gve),e(gve,hCr),e(RE,pCr),e(RE,hU),e(hU,uCr),e(RE,_Cr),e(ce,bCr),e(ce,BE),e(BE,hve),e(hve,vCr),e(BE,FCr),e(BE,pU),e(pU,TCr),e(BE,MCr),e(ce,ECr),e(ce,PE),e(PE,pve),e(pve,CCr),e(PE,wCr),e(PE,uU),e(uU,ACr),e(PE,yCr),e(ce,LCr),e(ce,IE),e(IE,uve),e(uve,xCr),e(IE,$Cr),e(IE,_U),e(_U,kCr),e(IE,SCr),e(ce,RCr),e(ce,qE),e(qE,_ve),e(_ve,BCr),e(qE,PCr),e(qE,bU),e(bU,ICr),e(qE,qCr),e(ce,NCr),e(ce,NE),e(NE,bve),e(bve,jCr),e(NE,DCr),e(NE,vU),e(vU,GCr),e(NE,OCr),e(ce,VCr),e(ce,jE),e(jE,vve),e(vve,XCr),e(jE,zCr),e(jE,FU),e(FU,QCr),e(jE,WCr),e(ce,HCr),e(ce,DE),e(DE,Fve),e(Fve,UCr),e(DE,JCr),e(DE,TU),e(TU,YCr),e(DE,KCr),e(Ir,ZCr),M(GE,Ir,null),b(f,vqe,_),b(f,Tc,_),e(Tc,OE),e(OE,Tve),M(j8,Tve,null),e(Tc,e3r),e(Tc,Mve),e(Mve,o3r),b(f,Fqe,_),b(f,dr,_),M(D8,dr,null),e(dr,r3r),e(dr,Mc),e(Mc,t3r),e(Mc,MU),e(MU,a3r),e(Mc,n3r),e(Mc,EU),e(EU,s3r),e(Mc,l3r),e(dr,i3r),e(dr,G8),e(G8,d3r),e(G8,Eve),e(Eve,c3r),e(G8,f3r),e(dr,m3r),e(dr,qt),M(O8,qt,null),e(qt,g3r),e(qt,Cve),e(Cve,h3r),e(qt,p3r),e(qt,Ec),e(Ec,u3r),e(Ec,wve),e(wve,_3r),e(Ec,b3r),e(Ec,CU),e(CU,v3r),e(Ec,F3r),e(qt,T3r),M(VE,qt,null),e(dr,M3r),e(dr,qr),M(V8,qr,null),e(qr,E3r),e(qr,Ave),e(Ave,C3r),e(qr,w3r),e(qr,fn),e(fn,A3r),e(fn,yve),e(yve,y3r),e(fn,L3r),e(fn,Lve),e(Lve,x3r),e(fn,$3r),e(fn,xve),e(xve,k3r),e(fn,S3r),e(qr,R3r),e(qr,$ve),e($ve,XE),e(XE,kve),e(kve,B3r),e(XE,P3r),e(XE,wU),e(wU,I3r),e(XE,q3r),e(qr,N3r),M(zE,qr,null),b(f,Tqe,_),b(f,Cc,_),e(Cc,QE),e(QE,Sve),M(X8,Sve,null),e(Cc,j3r),e(Cc,Rve),e(Rve,D3r),b(f,Mqe,_),b(f,cr,_),M(z8,cr,null),e(cr,G3r),e(cr,wc),e(wc,O3r),e(wc,AU),e(AU,V3r),e(wc,X3r),e(wc,yU),e(yU,z3r),e(wc,Q3r),e(cr,W3r),e(cr,Q8),e(Q8,H3r),e(Q8,Bve),e(Bve,U3r),e(Q8,J3r),e(cr,Y3r),e(cr,Nt),M(W8,Nt,null),e(Nt,K3r),e(Nt,Pve),e(Pve,Z3r),e(Nt,ewr),e(Nt,Ac),e(Ac,owr),e(Ac,Ive),e(Ive,rwr),e(Ac,twr),e(Ac,LU),e(LU,awr),e(Ac,nwr),e(Nt,swr),M(WE,Nt,null),e(cr,lwr),e(cr,Nr),M(H8,Nr,null),e(Nr,iwr),e(Nr,qve),e(qve,dwr),e(Nr,cwr),e(Nr,mn),e(mn,fwr),e(mn,Nve),e(Nve,mwr),e(mn,gwr),e(mn,jve),e(jve,hwr),e(mn,pwr),e(mn,Dve),e(Dve,uwr),e(mn,_wr),e(Nr,bwr),e(Nr,Gve),e(Gve,HE),e(HE,Ove),e(Ove,vwr),e(HE,Fwr),e(HE,xU),e(xU,Twr),e(HE,Mwr),e(Nr,Ewr),M(UE,Nr,null),b(f,Eqe,_),b(f,yc,_),e(yc,JE),e(JE,Vve),M(U8,Vve,null),e(yc,Cwr),e(yc,Xve),e(Xve,wwr),b(f,Cqe,_),b(f,fr,_),M(J8,fr,null),e(fr,Awr),e(fr,Lc),e(Lc,ywr),e(Lc,$U),e($U,Lwr),e(Lc,xwr),e(Lc,kU),e(kU,$wr),e(Lc,kwr),e(fr,Swr),e(fr,Y8),e(Y8,Rwr),e(Y8,zve),e(zve,Bwr),e(Y8,Pwr),e(fr,Iwr),e(fr,jt),M(K8,jt,null),e(jt,qwr),e(jt,Qve),e(Qve,Nwr),e(jt,jwr),e(jt,xc),e(xc,Dwr),e(xc,Wve),e(Wve,Gwr),e(xc,Owr),e(xc,SU),e(SU,Vwr),e(xc,Xwr),e(jt,zwr),M(YE,jt,null),e(fr,Qwr),e(fr,jr),M(Z8,jr,null),e(jr,Wwr),e(jr,Hve),e(Hve,Hwr),e(jr,Uwr),e(jr,gn),e(gn,Jwr),e(gn,Uve),e(Uve,Ywr),e(gn,Kwr),e(gn,Jve),e(Jve,Zwr),e(gn,eAr),e(gn,Yve),e(Yve,oAr),e(gn,rAr),e(jr,tAr),e(jr,re),e(re,KE),e(KE,Kve),e(Kve,aAr),e(KE,nAr),e(KE,RU),e(RU,sAr),e(KE,lAr),e(re,iAr),e(re,ZE),e(ZE,Zve),e(Zve,dAr),e(ZE,cAr),e(ZE,BU),e(BU,fAr),e(ZE,mAr),e(re,gAr),e(re,eC),e(eC,eFe),e(eFe,hAr),e(eC,pAr),e(eC,PU),e(PU,uAr),e(eC,_Ar),e(re,bAr),e(re,oC),e(oC,oFe),e(oFe,vAr),e(oC,FAr),e(oC,IU),e(IU,TAr),e(oC,MAr),e(re,EAr),e(re,rC),e(rC,rFe),e(rFe,CAr),e(rC,wAr),e(rC,qU),e(qU,AAr),e(rC,yAr),e(re,LAr),e(re,tC),e(tC,tFe),e(tFe,xAr),e(tC,$Ar),e(tC,NU),e(NU,kAr),e(tC,SAr),e(re,RAr),e(re,aC),e(aC,aFe),e(aFe,BAr),e(aC,PAr),e(aC,jU),e(jU,IAr),e(aC,qAr),e(re,NAr),e(re,nC),e(nC,nFe),e(nFe,jAr),e(nC,DAr),e(nC,DU),e(DU,GAr),e(nC,OAr),e(re,VAr),e(re,sC),e(sC,sFe),e(sFe,XAr),e(sC,zAr),e(sC,GU),e(GU,QAr),e(sC,WAr),e(re,HAr),e(re,lC),e(lC,lFe),e(lFe,UAr),e(lC,JAr),e(lC,OU),e(OU,YAr),e(lC,KAr),e(re,ZAr),e(re,iC),e(iC,iFe),e(iFe,e6r),e(iC,o6r),e(iC,VU),e(VU,r6r),e(iC,t6r),e(re,a6r),e(re,dC),e(dC,dFe),e(dFe,n6r),e(dC,s6r),e(dC,XU),e(XU,l6r),e(dC,i6r),e(re,d6r),e(re,cC),e(cC,cFe),e(cFe,c6r),e(cC,f6r),e(cC,zU),e(zU,m6r),e(cC,g6r),e(re,h6r),e(re,fC),e(fC,fFe),e(fFe,p6r),e(fC,u6r),e(fC,QU),e(QU,_6r),e(fC,b6r),e(re,v6r),e(re,mC),e(mC,mFe),e(mFe,F6r),e(mC,T6r),e(mC,WU),e(WU,M6r),e(mC,E6r),e(re,C6r),e(re,gC),e(gC,gFe),e(gFe,w6r),e(gC,A6r),e(gC,HU),e(HU,y6r),e(gC,L6r),e(re,x6r),e(re,hC),e(hC,hFe),e(hFe,$6r),e(hC,k6r),e(hC,UU),e(UU,S6r),e(hC,R6r),e(re,B6r),e(re,pC),e(pC,pFe),e(pFe,P6r),e(pC,I6r),e(pC,JU),e(JU,q6r),e(pC,N6r),e(re,j6r),e(re,uC),e(uC,uFe),e(uFe,D6r),e(uC,G6r),e(uC,YU),e(YU,O6r),e(uC,V6r),e(re,X6r),e(re,_C),e(_C,_Fe),e(_Fe,z6r),e(_C,Q6r),e(_C,KU),e(KU,W6r),e(_C,H6r),e(re,U6r),e(re,bC),e(bC,bFe),e(bFe,J6r),e(bC,Y6r),e(bC,ZU),e(ZU,K6r),e(bC,Z6r),e(re,e0r),e(re,vC),e(vC,vFe),e(vFe,o0r),e(vC,r0r),e(vC,eJ),e(eJ,t0r),e(vC,a0r),e(re,n0r),e(re,FC),e(FC,FFe),e(FFe,s0r),e(FC,l0r),e(FC,oJ),e(oJ,i0r),e(FC,d0r),e(re,c0r),e(re,TC),e(TC,TFe),e(TFe,f0r),e(TC,m0r),e(TC,rJ),e(rJ,g0r),e(TC,h0r),e(re,p0r),e(re,MC),e(MC,MFe),e(MFe,u0r),e(MC,_0r),e(MC,tJ),e(tJ,b0r),e(MC,v0r),e(jr,F0r),M(EC,jr,null),b(f,wqe,_),b(f,$c,_),e($c,CC),e(CC,EFe),M(ex,EFe,null),e($c,T0r),e($c,CFe),e(CFe,M0r),b(f,Aqe,_),b(f,mr,_),M(ox,mr,null),e(mr,E0r),e(mr,kc),e(kc,C0r),e(kc,aJ),e(aJ,w0r),e(kc,A0r),e(kc,nJ),e(nJ,y0r),e(kc,L0r),e(mr,x0r),e(mr,rx),e(rx,$0r),e(rx,wFe),e(wFe,k0r),e(rx,S0r),e(mr,R0r),e(mr,Dt),M(tx,Dt,null),e(Dt,B0r),e(Dt,AFe),e(AFe,P0r),e(Dt,I0r),e(Dt,Sc),e(Sc,q0r),e(Sc,yFe),e(yFe,N0r),e(Sc,j0r),e(Sc,sJ),e(sJ,D0r),e(Sc,G0r),e(Dt,O0r),M(wC,Dt,null),e(mr,V0r),e(mr,Dr),M(ax,Dr,null),e(Dr,X0r),e(Dr,LFe),e(LFe,z0r),e(Dr,Q0r),e(Dr,hn),e(hn,W0r),e(hn,xFe),e(xFe,H0r),e(hn,U0r),e(hn,$Fe),e($Fe,J0r),e(hn,Y0r),e(hn,kFe),e(kFe,K0r),e(hn,Z0r),e(Dr,eyr),e(Dr,ke),e(ke,AC),e(AC,SFe),e(SFe,oyr),e(AC,ryr),e(AC,lJ),e(lJ,tyr),e(AC,ayr),e(ke,nyr),e(ke,yC),e(yC,RFe),e(RFe,syr),e(yC,lyr),e(yC,iJ),e(iJ,iyr),e(yC,dyr),e(ke,cyr),e(ke,LC),e(LC,BFe),e(BFe,fyr),e(LC,myr),e(LC,dJ),e(dJ,gyr),e(LC,hyr),e(ke,pyr),e(ke,xC),e(xC,PFe),e(PFe,uyr),e(xC,_yr),e(xC,cJ),e(cJ,byr),e(xC,vyr),e(ke,Fyr),e(ke,$C),e($C,IFe),e(IFe,Tyr),e($C,Myr),e($C,fJ),e(fJ,Eyr),e($C,Cyr),e(ke,wyr),e(ke,kC),e(kC,qFe),e(qFe,Ayr),e(kC,yyr),e(kC,mJ),e(mJ,Lyr),e(kC,xyr),e(ke,$yr),e(ke,SC),e(SC,NFe),e(NFe,kyr),e(SC,Syr),e(SC,gJ),e(gJ,Ryr),e(SC,Byr),e(ke,Pyr),e(ke,RC),e(RC,jFe),e(jFe,Iyr),e(RC,qyr),e(RC,hJ),e(hJ,Nyr),e(RC,jyr),e(ke,Dyr),e(ke,BC),e(BC,DFe),e(DFe,Gyr),e(BC,Oyr),e(BC,pJ),e(pJ,Vyr),e(BC,Xyr),e(Dr,zyr),M(PC,Dr,null),b(f,yqe,_),b(f,Rc,_),e(Rc,IC),e(IC,GFe),M(nx,GFe,null),e(Rc,Qyr),e(Rc,OFe),e(OFe,Wyr),b(f,Lqe,_),b(f,gr,_),M(sx,gr,null),e(gr,Hyr),e(gr,Bc),e(Bc,Uyr),e(Bc,uJ),e(uJ,Jyr),e(Bc,Yyr),e(Bc,_J),e(_J,Kyr),e(Bc,Zyr),e(gr,eLr),e(gr,lx),e(lx,oLr),e(lx,VFe),e(VFe,rLr),e(lx,tLr),e(gr,aLr),e(gr,Gt),M(ix,Gt,null),e(Gt,nLr),e(Gt,XFe),e(XFe,sLr),e(Gt,lLr),e(Gt,Pc),e(Pc,iLr),e(Pc,zFe),e(zFe,dLr),e(Pc,cLr),e(Pc,bJ),e(bJ,fLr),e(Pc,mLr),e(Gt,gLr),M(qC,Gt,null),e(gr,hLr),e(gr,Gr),M(dx,Gr,null),e(Gr,pLr),e(Gr,QFe),e(QFe,uLr),e(Gr,_Lr),e(Gr,pn),e(pn,bLr),e(pn,WFe),e(WFe,vLr),e(pn,FLr),e(pn,HFe),e(HFe,TLr),e(pn,MLr),e(pn,UFe),e(UFe,ELr),e(pn,CLr),e(Gr,wLr),e(Gr,Me),e(Me,NC),e(NC,JFe),e(JFe,ALr),e(NC,yLr),e(NC,vJ),e(vJ,LLr),e(NC,xLr),e(Me,$Lr),e(Me,jC),e(jC,YFe),e(YFe,kLr),e(jC,SLr),e(jC,FJ),e(FJ,RLr),e(jC,BLr),e(Me,PLr),e(Me,DC),e(DC,KFe),e(KFe,ILr),e(DC,qLr),e(DC,TJ),e(TJ,NLr),e(DC,jLr),e(Me,DLr),e(Me,GC),e(GC,ZFe),e(ZFe,GLr),e(GC,OLr),e(GC,MJ),e(MJ,VLr),e(GC,XLr),e(Me,zLr),e(Me,OC),e(OC,eTe),e(eTe,QLr),e(OC,WLr),e(OC,EJ),e(EJ,HLr),e(OC,ULr),e(Me,JLr),e(Me,VC),e(VC,oTe),e(oTe,YLr),e(VC,KLr),e(VC,CJ),e(CJ,ZLr),e(VC,e8r),e(Me,o8r),e(Me,XC),e(XC,rTe),e(rTe,r8r),e(XC,t8r),e(XC,wJ),e(wJ,a8r),e(XC,n8r),e(Me,s8r),e(Me,zC),e(zC,tTe),e(tTe,l8r),e(zC,i8r),e(zC,AJ),e(AJ,d8r),e(zC,c8r),e(Me,f8r),e(Me,QC),e(QC,aTe),e(aTe,m8r),e(QC,g8r),e(QC,yJ),e(yJ,h8r),e(QC,p8r),e(Me,u8r),e(Me,WC),e(WC,nTe),e(nTe,_8r),e(WC,b8r),e(WC,LJ),e(LJ,v8r),e(WC,F8r),e(Me,T8r),e(Me,HC),e(HC,sTe),e(sTe,M8r),e(HC,E8r),e(HC,xJ),e(xJ,C8r),e(HC,w8r),e(Me,A8r),e(Me,UC),e(UC,lTe),e(lTe,y8r),e(UC,L8r),e(UC,$J),e($J,x8r),e(UC,$8r),e(Gr,k8r),M(JC,Gr,null),b(f,xqe,_),b(f,Ic,_),e(Ic,YC),e(YC,iTe),M(cx,iTe,null),e(Ic,S8r),e(Ic,dTe),e(dTe,R8r),b(f,$qe,_),b(f,hr,_),M(fx,hr,null),e(hr,B8r),e(hr,qc),e(qc,P8r),e(qc,kJ),e(kJ,I8r),e(qc,q8r),e(qc,SJ),e(SJ,N8r),e(qc,j8r),e(hr,D8r),e(hr,mx),e(mx,G8r),e(mx,cTe),e(cTe,O8r),e(mx,V8r),e(hr,X8r),e(hr,Ot),M(gx,Ot,null),e(Ot,z8r),e(Ot,fTe),e(fTe,Q8r),e(Ot,W8r),e(Ot,Nc),e(Nc,H8r),e(Nc,mTe),e(mTe,U8r),e(Nc,J8r),e(Nc,RJ),e(RJ,Y8r),e(Nc,K8r),e(Ot,Z8r),M(KC,Ot,null),e(hr,exr),e(hr,Or),M(hx,Or,null),e(Or,oxr),e(Or,gTe),e(gTe,rxr),e(Or,txr),e(Or,un),e(un,axr),e(un,hTe),e(hTe,nxr),e(un,sxr),e(un,pTe),e(pTe,lxr),e(un,ixr),e(un,uTe),e(uTe,dxr),e(un,cxr),e(Or,fxr),e(Or,Le),e(Le,ZC),e(ZC,_Te),e(_Te,mxr),e(ZC,gxr),e(ZC,BJ),e(BJ,hxr),e(ZC,pxr),e(Le,uxr),e(Le,e3),e(e3,bTe),e(bTe,_xr),e(e3,bxr),e(e3,PJ),e(PJ,vxr),e(e3,Fxr),e(Le,Txr),e(Le,o3),e(o3,vTe),e(vTe,Mxr),e(o3,Exr),e(o3,IJ),e(IJ,Cxr),e(o3,wxr),e(Le,Axr),e(Le,r3),e(r3,FTe),e(FTe,yxr),e(r3,Lxr),e(r3,qJ),e(qJ,xxr),e(r3,$xr),e(Le,kxr),e(Le,t3),e(t3,TTe),e(TTe,Sxr),e(t3,Rxr),e(t3,NJ),e(NJ,Bxr),e(t3,Pxr),e(Le,Ixr),e(Le,a3),e(a3,MTe),e(MTe,qxr),e(a3,Nxr),e(a3,jJ),e(jJ,jxr),e(a3,Dxr),e(Le,Gxr),e(Le,n3),e(n3,ETe),e(ETe,Oxr),e(n3,Vxr),e(n3,DJ),e(DJ,Xxr),e(n3,zxr),e(Le,Qxr),e(Le,s3),e(s3,CTe),e(CTe,Wxr),e(s3,Hxr),e(s3,GJ),e(GJ,Uxr),e(s3,Jxr),e(Le,Yxr),e(Le,l3),e(l3,wTe),e(wTe,Kxr),e(l3,Zxr),e(l3,OJ),e(OJ,e9r),e(l3,o9r),e(Le,r9r),e(Le,i3),e(i3,ATe),e(ATe,t9r),e(i3,a9r),e(i3,VJ),e(VJ,n9r),e(i3,s9r),e(Or,l9r),M(d3,Or,null),b(f,kqe,_),b(f,jc,_),e(jc,c3),e(c3,yTe),M(px,yTe,null),e(jc,i9r),e(jc,LTe),e(LTe,d9r),b(f,Sqe,_),b(f,pr,_),M(ux,pr,null),e(pr,c9r),e(pr,Dc),e(Dc,f9r),e(Dc,XJ),e(XJ,m9r),e(Dc,g9r),e(Dc,zJ),e(zJ,h9r),e(Dc,p9r),e(pr,u9r),e(pr,_x),e(_x,_9r),e(_x,xTe),e(xTe,b9r),e(_x,v9r),e(pr,F9r),e(pr,Vt),M(bx,Vt,null),e(Vt,T9r),e(Vt,$Te),e($Te,M9r),e(Vt,E9r),e(Vt,Gc),e(Gc,C9r),e(Gc,kTe),e(kTe,w9r),e(Gc,A9r),e(Gc,QJ),e(QJ,y9r),e(Gc,L9r),e(Vt,x9r),M(f3,Vt,null),e(pr,$9r),e(pr,Vr),M(vx,Vr,null),e(Vr,k9r),e(Vr,STe),e(STe,S9r),e(Vr,R9r),e(Vr,_n),e(_n,B9r),e(_n,RTe),e(RTe,P9r),e(_n,I9r),e(_n,BTe),e(BTe,q9r),e(_n,N9r),e(_n,PTe),e(PTe,j9r),e(_n,D9r),e(Vr,G9r),e(Vr,Se),e(Se,m3),e(m3,ITe),e(ITe,O9r),e(m3,V9r),e(m3,WJ),e(WJ,X9r),e(m3,z9r),e(Se,Q9r),e(Se,g3),e(g3,qTe),e(qTe,W9r),e(g3,H9r),e(g3,HJ),e(HJ,U9r),e(g3,J9r),e(Se,Y9r),e(Se,h3),e(h3,NTe),e(NTe,K9r),e(h3,Z9r),e(h3,UJ),e(UJ,e$r),e(h3,o$r),e(Se,r$r),e(Se,p3),e(p3,jTe),e(jTe,t$r),e(p3,a$r),e(p3,JJ),e(JJ,n$r),e(p3,s$r),e(Se,l$r),e(Se,u3),e(u3,DTe),e(DTe,i$r),e(u3,d$r),e(u3,YJ),e(YJ,c$r),e(u3,f$r),e(Se,m$r),e(Se,_3),e(_3,GTe),e(GTe,g$r),e(_3,h$r),e(_3,KJ),e(KJ,p$r),e(_3,u$r),e(Se,_$r),e(Se,b3),e(b3,OTe),e(OTe,b$r),e(b3,v$r),e(b3,ZJ),e(ZJ,F$r),e(b3,T$r),e(Se,M$r),e(Se,v3),e(v3,VTe),e(VTe,E$r),e(v3,C$r),e(v3,eY),e(eY,w$r),e(v3,A$r),e(Se,y$r),e(Se,F3),e(F3,XTe),e(XTe,L$r),e(F3,x$r),e(F3,oY),e(oY,$$r),e(F3,k$r),e(Vr,S$r),M(T3,Vr,null),b(f,Rqe,_),b(f,Oc,_),e(Oc,M3),e(M3,zTe),M(Fx,zTe,null),e(Oc,R$r),e(Oc,QTe),e(QTe,B$r),b(f,Bqe,_),b(f,ur,_),M(Tx,ur,null),e(ur,P$r),e(ur,Vc),e(Vc,I$r),e(Vc,rY),e(rY,q$r),e(Vc,N$r),e(Vc,tY),e(tY,j$r),e(Vc,D$r),e(ur,G$r),e(ur,Mx),e(Mx,O$r),e(Mx,WTe),e(WTe,V$r),e(Mx,X$r),e(ur,z$r),e(ur,Xt),M(Ex,Xt,null),e(Xt,Q$r),e(Xt,HTe),e(HTe,W$r),e(Xt,H$r),e(Xt,Xc),e(Xc,U$r),e(Xc,UTe),e(UTe,J$r),e(Xc,Y$r),e(Xc,aY),e(aY,K$r),e(Xc,Z$r),e(Xt,ekr),M(E3,Xt,null),e(ur,okr),e(ur,Xr),M(Cx,Xr,null),e(Xr,rkr),e(Xr,JTe),e(JTe,tkr),e(Xr,akr),e(Xr,bn),e(bn,nkr),e(bn,YTe),e(YTe,skr),e(bn,lkr),e(bn,KTe),e(KTe,ikr),e(bn,dkr),e(bn,ZTe),e(ZTe,ckr),e(bn,fkr),e(Xr,mkr),e(Xr,xe),e(xe,C3),e(C3,e7e),e(e7e,gkr),e(C3,hkr),e(C3,nY),e(nY,pkr),e(C3,ukr),e(xe,_kr),e(xe,w3),e(w3,o7e),e(o7e,bkr),e(w3,vkr),e(w3,sY),e(sY,Fkr),e(w3,Tkr),e(xe,Mkr),e(xe,A3),e(A3,r7e),e(r7e,Ekr),e(A3,Ckr),e(A3,lY),e(lY,wkr),e(A3,Akr),e(xe,ykr),e(xe,y3),e(y3,t7e),e(t7e,Lkr),e(y3,xkr),e(y3,iY),e(iY,$kr),e(y3,kkr),e(xe,Skr),e(xe,L3),e(L3,a7e),e(a7e,Rkr),e(L3,Bkr),e(L3,dY),e(dY,Pkr),e(L3,Ikr),e(xe,qkr),e(xe,x3),e(x3,n7e),e(n7e,Nkr),e(x3,jkr),e(x3,cY),e(cY,Dkr),e(x3,Gkr),e(xe,Okr),e(xe,$3),e($3,s7e),e(s7e,Vkr),e($3,Xkr),e($3,fY),e(fY,zkr),e($3,Qkr),e(xe,Wkr),e(xe,k3),e(k3,l7e),e(l7e,Hkr),e(k3,Ukr),e(k3,mY),e(mY,Jkr),e(k3,Ykr),e(xe,Kkr),e(xe,S3),e(S3,i7e),e(i7e,Zkr),e(S3,eSr),e(S3,gY),e(gY,oSr),e(S3,rSr),e(xe,tSr),e(xe,R3),e(R3,d7e),e(d7e,aSr),e(R3,nSr),e(R3,hY),e(hY,sSr),e(R3,lSr),e(Xr,iSr),M(B3,Xr,null),b(f,Pqe,_),b(f,zc,_),e(zc,P3),e(P3,c7e),M(wx,c7e,null),e(zc,dSr),e(zc,f7e),e(f7e,cSr),b(f,Iqe,_),b(f,_r,_),M(Ax,_r,null),e(_r,fSr),e(_r,Qc),e(Qc,mSr),e(Qc,pY),e(pY,gSr),e(Qc,hSr),e(Qc,uY),e(uY,pSr),e(Qc,uSr),e(_r,_Sr),e(_r,yx),e(yx,bSr),e(yx,m7e),e(m7e,vSr),e(yx,FSr),e(_r,TSr),e(_r,zt),M(Lx,zt,null),e(zt,MSr),e(zt,g7e),e(g7e,ESr),e(zt,CSr),e(zt,Wc),e(Wc,wSr),e(Wc,h7e),e(h7e,ASr),e(Wc,ySr),e(Wc,_Y),e(_Y,LSr),e(Wc,xSr),e(zt,$Sr),M(I3,zt,null),e(_r,kSr),e(_r,zr),M(xx,zr,null),e(zr,SSr),e(zr,p7e),e(p7e,RSr),e(zr,BSr),e(zr,vn),e(vn,PSr),e(vn,u7e),e(u7e,ISr),e(vn,qSr),e(vn,_7e),e(_7e,NSr),e(vn,jSr),e(vn,b7e),e(b7e,DSr),e(vn,GSr),e(zr,OSr),e(zr,$e),e($e,q3),e(q3,v7e),e(v7e,VSr),e(q3,XSr),e(q3,bY),e(bY,zSr),e(q3,QSr),e($e,WSr),e($e,N3),e(N3,F7e),e(F7e,HSr),e(N3,USr),e(N3,vY),e(vY,JSr),e(N3,YSr),e($e,KSr),e($e,j3),e(j3,T7e),e(T7e,ZSr),e(j3,eRr),e(j3,FY),e(FY,oRr),e(j3,rRr),e($e,tRr),e($e,D3),e(D3,M7e),e(M7e,aRr),e(D3,nRr),e(D3,TY),e(TY,sRr),e(D3,lRr),e($e,iRr),e($e,G3),e(G3,E7e),e(E7e,dRr),e(G3,cRr),e(G3,MY),e(MY,fRr),e(G3,mRr),e($e,gRr),e($e,O3),e(O3,C7e),e(C7e,hRr),e(O3,pRr),e(O3,EY),e(EY,uRr),e(O3,_Rr),e($e,bRr),e($e,V3),e(V3,w7e),e(w7e,vRr),e(V3,FRr),e(V3,CY),e(CY,TRr),e(V3,MRr),e($e,ERr),e($e,X3),e(X3,A7e),e(A7e,CRr),e(X3,wRr),e(X3,wY),e(wY,ARr),e(X3,yRr),e($e,LRr),e($e,z3),e(z3,y7e),e(y7e,xRr),e(z3,$Rr),e(z3,AY),e(AY,kRr),e(z3,SRr),e($e,RRr),e($e,Q3),e(Q3,L7e),e(L7e,BRr),e(Q3,PRr),e(Q3,yY),e(yY,IRr),e(Q3,qRr),e(zr,NRr),M(W3,zr,null),b(f,qqe,_),b(f,Hc,_),e(Hc,H3),e(H3,x7e),M($x,x7e,null),e(Hc,jRr),e(Hc,$7e),e($7e,DRr),b(f,Nqe,_),b(f,br,_),M(kx,br,null),e(br,GRr),e(br,Uc),e(Uc,ORr),e(Uc,LY),e(LY,VRr),e(Uc,XRr),e(Uc,xY),e(xY,zRr),e(Uc,QRr),e(br,WRr),e(br,Sx),e(Sx,HRr),e(Sx,k7e),e(k7e,URr),e(Sx,JRr),e(br,YRr),e(br,Qt),M(Rx,Qt,null),e(Qt,KRr),e(Qt,S7e),e(S7e,ZRr),e(Qt,eBr),e(Qt,Jc),e(Jc,oBr),e(Jc,R7e),e(R7e,rBr),e(Jc,tBr),e(Jc,$Y),e($Y,aBr),e(Jc,nBr),e(Qt,sBr),M(U3,Qt,null),e(br,lBr),e(br,Qr),M(Bx,Qr,null),e(Qr,iBr),e(Qr,B7e),e(B7e,dBr),e(Qr,cBr),e(Qr,Fn),e(Fn,fBr),e(Fn,P7e),e(P7e,mBr),e(Fn,gBr),e(Fn,I7e),e(I7e,hBr),e(Fn,pBr),e(Fn,q7e),e(q7e,uBr),e(Fn,_Br),e(Qr,bBr),e(Qr,De),e(De,J3),e(J3,N7e),e(N7e,vBr),e(J3,FBr),e(J3,kY),e(kY,TBr),e(J3,MBr),e(De,EBr),e(De,Y3),e(Y3,j7e),e(j7e,CBr),e(Y3,wBr),e(Y3,SY),e(SY,ABr),e(Y3,yBr),e(De,LBr),e(De,K3),e(K3,D7e),e(D7e,xBr),e(K3,$Br),e(K3,RY),e(RY,kBr),e(K3,SBr),e(De,RBr),e(De,Z3),e(Z3,G7e),e(G7e,BBr),e(Z3,PBr),e(Z3,BY),e(BY,IBr),e(Z3,qBr),e(De,NBr),e(De,ew),e(ew,O7e),e(O7e,jBr),e(ew,DBr),e(ew,PY),e(PY,GBr),e(ew,OBr),e(De,VBr),e(De,ow),e(ow,V7e),e(V7e,XBr),e(ow,zBr),e(ow,IY),e(IY,QBr),e(ow,WBr),e(De,HBr),e(De,rw),e(rw,X7e),e(X7e,UBr),e(rw,JBr),e(rw,qY),e(qY,YBr),e(rw,KBr),e(De,ZBr),e(De,tw),e(tw,z7e),e(z7e,ePr),e(tw,oPr),e(tw,NY),e(NY,rPr),e(tw,tPr),e(Qr,aPr),M(aw,Qr,null),b(f,jqe,_),b(f,Yc,_),e(Yc,nw),e(nw,Q7e),M(Px,Q7e,null),e(Yc,nPr),e(Yc,W7e),e(W7e,sPr),b(f,Dqe,_),b(f,vr,_),M(Ix,vr,null),e(vr,lPr),e(vr,Kc),e(Kc,iPr),e(Kc,jY),e(jY,dPr),e(Kc,cPr),e(Kc,DY),e(DY,fPr),e(Kc,mPr),e(vr,gPr),e(vr,qx),e(qx,hPr),e(qx,H7e),e(H7e,pPr),e(qx,uPr),e(vr,_Pr),e(vr,Wt),M(Nx,Wt,null),e(Wt,bPr),e(Wt,U7e),e(U7e,vPr),e(Wt,FPr),e(Wt,Zc),e(Zc,TPr),e(Zc,J7e),e(J7e,MPr),e(Zc,EPr),e(Zc,GY),e(GY,CPr),e(Zc,wPr),e(Wt,APr),M(sw,Wt,null),e(vr,yPr),e(vr,Wr),M(jx,Wr,null),e(Wr,LPr),e(Wr,Y7e),e(Y7e,xPr),e(Wr,$Pr),e(Wr,Tn),e(Tn,kPr),e(Tn,K7e),e(K7e,SPr),e(Tn,RPr),e(Tn,Z7e),e(Z7e,BPr),e(Tn,PPr),e(Tn,eMe),e(eMe,IPr),e(Tn,qPr),e(Wr,NPr),e(Wr,Ge),e(Ge,lw),e(lw,oMe),e(oMe,jPr),e(lw,DPr),e(lw,OY),e(OY,GPr),e(lw,OPr),e(Ge,VPr),e(Ge,iw),e(iw,rMe),e(rMe,XPr),e(iw,zPr),e(iw,VY),e(VY,QPr),e(iw,WPr),e(Ge,HPr),e(Ge,dw),e(dw,tMe),e(tMe,UPr),e(dw,JPr),e(dw,XY),e(XY,YPr),e(dw,KPr),e(Ge,ZPr),e(Ge,cw),e(cw,aMe),e(aMe,eIr),e(cw,oIr),e(cw,zY),e(zY,rIr),e(cw,tIr),e(Ge,aIr),e(Ge,fw),e(fw,nMe),e(nMe,nIr),e(fw,sIr),e(fw,QY),e(QY,lIr),e(fw,iIr),e(Ge,dIr),e(Ge,mw),e(mw,sMe),e(sMe,cIr),e(mw,fIr),e(mw,WY),e(WY,mIr),e(mw,gIr),e(Ge,hIr),e(Ge,gw),e(gw,lMe),e(lMe,pIr),e(gw,uIr),e(gw,HY),e(HY,_Ir),e(gw,bIr),e(Ge,vIr),e(Ge,hw),e(hw,iMe),e(iMe,FIr),e(hw,TIr),e(hw,UY),e(UY,MIr),e(hw,EIr),e(Wr,CIr),M(pw,Wr,null),b(f,Gqe,_),b(f,ef,_),e(ef,uw),e(uw,dMe),M(Dx,dMe,null),e(ef,wIr),e(ef,cMe),e(cMe,AIr),b(f,Oqe,_),b(f,Fr,_),M(Gx,Fr,null),e(Fr,yIr),e(Fr,of),e(of,LIr),e(of,JY),e(JY,xIr),e(of,$Ir),e(of,YY),e(YY,kIr),e(of,SIr),e(Fr,RIr),e(Fr,Ox),e(Ox,BIr),e(Ox,fMe),e(fMe,PIr),e(Ox,IIr),e(Fr,qIr),e(Fr,Ht),M(Vx,Ht,null),e(Ht,NIr),e(Ht,mMe),e(mMe,jIr),e(Ht,DIr),e(Ht,rf),e(rf,GIr),e(rf,gMe),e(gMe,OIr),e(rf,VIr),e(rf,KY),e(KY,XIr),e(rf,zIr),e(Ht,QIr),M(_w,Ht,null),e(Fr,WIr),e(Fr,Hr),M(Xx,Hr,null),e(Hr,HIr),e(Hr,hMe),e(hMe,UIr),e(Hr,JIr),e(Hr,Mn),e(Mn,YIr),e(Mn,pMe),e(pMe,KIr),e(Mn,ZIr),e(Mn,uMe),e(uMe,eqr),e(Mn,oqr),e(Mn,_Me),e(_Me,rqr),e(Mn,tqr),e(Hr,aqr),e(Hr,bMe),e(bMe,bw),e(bw,vMe),e(vMe,nqr),e(bw,sqr),e(bw,ZY),e(ZY,lqr),e(bw,iqr),e(Hr,dqr),M(vw,Hr,null),b(f,Vqe,_),b(f,tf,_),e(tf,Fw),e(Fw,FMe),M(zx,FMe,null),e(tf,cqr),e(tf,TMe),e(TMe,fqr),b(f,Xqe,_),b(f,Tr,_),M(Qx,Tr,null),e(Tr,mqr),e(Tr,af),e(af,gqr),e(af,eK),e(eK,hqr),e(af,pqr),e(af,oK),e(oK,uqr),e(af,_qr),e(Tr,bqr),e(Tr,Wx),e(Wx,vqr),e(Wx,MMe),e(MMe,Fqr),e(Wx,Tqr),e(Tr,Mqr),e(Tr,Ut),M(Hx,Ut,null),e(Ut,Eqr),e(Ut,EMe),e(EMe,Cqr),e(Ut,wqr),e(Ut,nf),e(nf,Aqr),e(nf,CMe),e(CMe,yqr),e(nf,Lqr),e(nf,rK),e(rK,xqr),e(nf,$qr),e(Ut,kqr),M(Tw,Ut,null),e(Tr,Sqr),e(Tr,Ur),M(Ux,Ur,null),e(Ur,Rqr),e(Ur,wMe),e(wMe,Bqr),e(Ur,Pqr),e(Ur,En),e(En,Iqr),e(En,AMe),e(AMe,qqr),e(En,Nqr),e(En,yMe),e(yMe,jqr),e(En,Dqr),e(En,LMe),e(LMe,Gqr),e(En,Oqr),e(Ur,Vqr),e(Ur,Jx),e(Jx,Mw),e(Mw,xMe),e(xMe,Xqr),e(Mw,zqr),e(Mw,tK),e(tK,Qqr),e(Mw,Wqr),e(Jx,Hqr),e(Jx,Ew),e(Ew,$Me),e($Me,Uqr),e(Ew,Jqr),e(Ew,aK),e(aK,Yqr),e(Ew,Kqr),e(Ur,Zqr),M(Cw,Ur,null),b(f,zqe,_),b(f,sf,_),e(sf,ww),e(ww,kMe),M(Yx,kMe,null),e(sf,eNr),e(sf,SMe),e(SMe,oNr),b(f,Qqe,_),b(f,Mr,_),M(Kx,Mr,null),e(Mr,rNr),e(Mr,lf),e(lf,tNr),e(lf,nK),e(nK,aNr),e(lf,nNr),e(lf,sK),e(sK,sNr),e(lf,lNr),e(Mr,iNr),e(Mr,Zx),e(Zx,dNr),e(Zx,RMe),e(RMe,cNr),e(Zx,fNr),e(Mr,mNr),e(Mr,Jt),M(e9,Jt,null),e(Jt,gNr),e(Jt,BMe),e(BMe,hNr),e(Jt,pNr),e(Jt,df),e(df,uNr),e(df,PMe),e(PMe,_Nr),e(df,bNr),e(df,lK),e(lK,vNr),e(df,FNr),e(Jt,TNr),M(Aw,Jt,null),e(Mr,MNr),e(Mr,Jr),M(o9,Jr,null),e(Jr,ENr),e(Jr,IMe),e(IMe,CNr),e(Jr,wNr),e(Jr,Cn),e(Cn,ANr),e(Cn,qMe),e(qMe,yNr),e(Cn,LNr),e(Cn,NMe),e(NMe,xNr),e(Cn,$Nr),e(Cn,jMe),e(jMe,kNr),e(Cn,SNr),e(Jr,RNr),e(Jr,DMe),e(DMe,yw),e(yw,GMe),e(GMe,BNr),e(yw,PNr),e(yw,iK),e(iK,INr),e(yw,qNr),e(Jr,NNr),M(Lw,Jr,null),Wqe=!0},p(f,[_]){const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),bf.$set(r9);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),_g.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),Ug.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Eh.$set(XMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),Ch.$set(t9);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),Oh.$set(zMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Vh.$set(wn);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),Qh.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),Iu.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),Nu.$set(HMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),A_.$set(a9);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),L_.$set(UMe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),m2.$set(n9);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),h2.$set(JMe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),Y2.$set(s9);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),Z2.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),b1.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),F1.$set(ZMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),pb.$set(cf);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),_b.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),Hb.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),Jb.$set(rEe);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),t4.$set(l9);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),n4.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),D4.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),O4.$set(nEe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),x5.$set(Kr);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),k5.$set(i9);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),B5.$set(sEe);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),I5.$set(d9);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),U5.$set(lEe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Y5.$set(Zr);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),ev.$set(iEe);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),rv.$set(ff);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),mv.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),hv.$set(cEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Fv.$set(y);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),Mv.$set(xw);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),Sv.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),Bv.$set(mEe);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),Nv.$set($w);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),Dv.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),Qv.$set(hEe);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),Hv.$set(kw);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),Zv.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),oF.$set(uEe);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),nF.$set(Sw);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),lF.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),cF.$set(bEe);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),mF.$set(Rw);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),bF.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),FF.$set(FEe);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),EF.$set(Bw);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),wF.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),uT.$set(MEe);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),bT.$set(Pw);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),OT.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),XT.$set(CEe);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),t7.$set(Iw);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),n7.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),d7.$set(AEe);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),f7.$set(qw);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),S7.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),B7.$set(LEe);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),z7.$set(Nw);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),W7.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),FM.$set($Ee);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),MM.$set(jw);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),DM.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),OM.$set(SEe);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),zM.$set(Dw);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),WM.$set(REe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),UM.$set(BEe);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),YM.$set(Gw);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),bE.$set(PEe);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),FE.$set(IEe);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),GE.$set(Ow);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),VE.$set(qEe);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),zE.$set(NEe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),WE.$set(Vw);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),UE.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),YE.$set(DEe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),EC.$set(Xw);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),wC.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),PC.$set(OEe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),qC.$set(zw);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),JC.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),KC.$set(XEe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),d3.$set(Qw);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),f3.$set(zEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),T3.$set(QEe);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),E3.$set(Ww);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),B3.$set(WEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),I3.$set(HEe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),W3.$set(Hw);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),U3.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),aw.$set(JEe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),sw.$set(Uw);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),pw.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),_w.$set(KEe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),vw.$set(Jw);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),Tw.$set(ZEe);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),Cw.$set(eCe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),Aw.$set(Yw);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),Lw.$set(oCe)},i(f){Wqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(bf.$$.fragment,f),E(Z6.$$.fragment,f),E(e0.$$.fragment,f),E(t0.$$.fragment,f),E(_g.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(s0.$$.fragment,f),E(d0.$$.fragment,f),E(Ug.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(m0.$$.fragment,f),E(p0.$$.fragment,f),E(Eh.$$.fragment,f),E(Ch.$$.fragment,f),E(u0.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(T0.$$.fragment,f),E(Oh.$$.fragment,f),E(Vh.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(A0.$$.fragment,f),E(Qh.$$.fragment,f),E(y0.$$.fragment,f),E(Iu.$$.fragment,f),E(L0.$$.fragment,f),E(x0.$$.fragment,f),E(k0.$$.fragment,f),E(Nu.$$.fragment,f),E(S0.$$.fragment,f),E(A_.$$.fragment,f),E(R0.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(L_.$$.fragment,f),E(q0.$$.fragment,f),E(m2.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(G0.$$.fragment,f),E(h2.$$.fragment,f),E(O0.$$.fragment,f),E(Y2.$$.fragment,f),E(V0.$$.fragment,f),E(X0.$$.fragment,f),E(Q0.$$.fragment,f),E(Z2.$$.fragment,f),E(W0.$$.fragment,f),E(b1.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E(F1.$$.fragment,f),E(K0.$$.fragment,f),E(pb.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(_b.$$.fragment,f),E(ty.$$.fragment,f),E(Hb.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Jb.$$.fragment,f),E(iy.$$.fragment,f),E(t4.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(n4.$$.fragment,f),E(gy.$$.fragment,f),E(D4.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(O4.$$.fragment,f),E(by.$$.fragment,f),E(x5.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(k5.$$.fragment,f),E(Ey.$$.fragment,f),E(B5.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(I5.$$.fragment,f),E(Ly.$$.fragment,f),E(U5.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Y5.$$.fragment,f),E(Ry.$$.fragment,f),E(ev.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(rv.$$.fragment,f),E(Ny.$$.fragment,f),E(mv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(hv.$$.fragment,f),E(Vy.$$.fragment,f),E(Fv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Mv.$$.fragment,f),E(Hy.$$.fragment,f),E(Sv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(Bv.$$.fragment,f),E(Zy.$$.fragment,f),E(Nv.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(Dv.$$.fragment,f),E(nL.$$.fragment,f),E(Qv.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(Hv.$$.fragment,f),E(cL.$$.fragment,f),E(Zv.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(oF.$$.fragment,f),E(pL.$$.fragment,f),E(nF.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(lF.$$.fragment,f),E(TL.$$.fragment,f),E(cF.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(mF.$$.fragment,f),E(AL.$$.fragment,f),E(bF.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(FF.$$.fragment,f),E(kL.$$.fragment,f),E(EF.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(wF.$$.fragment,f),E(IL.$$.fragment,f),E(uT.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(bT.$$.fragment,f),E(GL.$$.fragment,f),E(OT.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(XT.$$.fragment,f),E(QL.$$.fragment,f),E(t7.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(n7.$$.fragment,f),E(YL.$$.fragment,f),E(d7.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(f7.$$.fragment,f),E(r8.$$.fragment,f),E(S7.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(B7.$$.fragment,f),E(l8.$$.fragment,f),E(z7.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(W7.$$.fragment,f),E(m8.$$.fragment,f),E(FM.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(MM.$$.fragment,f),E(_8.$$.fragment,f),E(DM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(OM.$$.fragment,f),E(M8.$$.fragment,f),E(zM.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(WM.$$.fragment,f),E(L8.$$.fragment,f),E(UM.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(YM.$$.fragment,f),E(R8.$$.fragment,f),E(bE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(FE.$$.fragment,f),E(N8.$$.fragment,f),E(GE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(VE.$$.fragment,f),E(V8.$$.fragment,f),E(zE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(WE.$$.fragment,f),E(H8.$$.fragment,f),E(UE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(YE.$$.fragment,f),E(Z8.$$.fragment,f),E(EC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(wC.$$.fragment,f),E(ax.$$.fragment,f),E(PC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(qC.$$.fragment,f),E(dx.$$.fragment,f),E(JC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(KC.$$.fragment,f),E(hx.$$.fragment,f),E(d3.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(f3.$$.fragment,f),E(vx.$$.fragment,f),E(T3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(E3.$$.fragment,f),E(Cx.$$.fragment,f),E(B3.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(I3.$$.fragment,f),E(xx.$$.fragment,f),E(W3.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(U3.$$.fragment,f),E(Bx.$$.fragment,f),E(aw.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(sw.$$.fragment,f),E(jx.$$.fragment,f),E(pw.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(_w.$$.fragment,f),E(Xx.$$.fragment,f),E(vw.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Tw.$$.fragment,f),E(Ux.$$.fragment,f),E(Cw.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e9.$$.fragment,f),E(Aw.$$.fragment,f),E(o9.$$.fragment,f),E(Lw.$$.fragment,f),Wqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(bf.$$.fragment,f),C(Z6.$$.fragment,f),C(e0.$$.fragment,f),C(t0.$$.fragment,f),C(_g.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(s0.$$.fragment,f),C(d0.$$.fragment,f),C(Ug.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(m0.$$.fragment,f),C(p0.$$.fragment,f),C(Eh.$$.fragment,f),C(Ch.$$.fragment,f),C(u0.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(T0.$$.fragment,f),C(Oh.$$.fragment,f),C(Vh.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(A0.$$.fragment,f),C(Qh.$$.fragment,f),C(y0.$$.fragment,f),C(Iu.$$.fragment,f),C(L0.$$.fragment,f),C(x0.$$.fragment,f),C(k0.$$.fragment,f),C(Nu.$$.fragment,f),C(S0.$$.fragment,f),C(A_.$$.fragment,f),C(R0.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(L_.$$.fragment,f),C(q0.$$.fragment,f),C(m2.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(G0.$$.fragment,f),C(h2.$$.fragment,f),C(O0.$$.fragment,f),C(Y2.$$.fragment,f),C(V0.$$.fragment,f),C(X0.$$.fragment,f),C(Q0.$$.fragment,f),C(Z2.$$.fragment,f),C(W0.$$.fragment,f),C(b1.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C(F1.$$.fragment,f),C(K0.$$.fragment,f),C(pb.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(_b.$$.fragment,f),C(ty.$$.fragment,f),C(Hb.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Jb.$$.fragment,f),C(iy.$$.fragment,f),C(t4.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(n4.$$.fragment,f),C(gy.$$.fragment,f),C(D4.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(O4.$$.fragment,f),C(by.$$.fragment,f),C(x5.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(k5.$$.fragment,f),C(Ey.$$.fragment,f),C(B5.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(I5.$$.fragment,f),C(Ly.$$.fragment,f),C(U5.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Y5.$$.fragment,f),C(Ry.$$.fragment,f),C(ev.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(rv.$$.fragment,f),C(Ny.$$.fragment,f),C(mv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(hv.$$.fragment,f),C(Vy.$$.fragment,f),C(Fv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Mv.$$.fragment,f),C(Hy.$$.fragment,f),C(Sv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(Bv.$$.fragment,f),C(Zy.$$.fragment,f),C(Nv.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(Dv.$$.fragment,f),C(nL.$$.fragment,f),C(Qv.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(Hv.$$.fragment,f),C(cL.$$.fragment,f),C(Zv.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(oF.$$.fragment,f),C(pL.$$.fragment,f),C(nF.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(lF.$$.fragment,f),C(TL.$$.fragment,f),C(cF.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(mF.$$.fragment,f),C(AL.$$.fragment,f),C(bF.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(FF.$$.fragment,f),C(kL.$$.fragment,f),C(EF.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(wF.$$.fragment,f),C(IL.$$.fragment,f),C(uT.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(bT.$$.fragment,f),C(GL.$$.fragment,f),C(OT.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(XT.$$.fragment,f),C(QL.$$.fragment,f),C(t7.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(n7.$$.fragment,f),C(YL.$$.fragment,f),C(d7.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(f7.$$.fragment,f),C(r8.$$.fragment,f),C(S7.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(B7.$$.fragment,f),C(l8.$$.fragment,f),C(z7.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(W7.$$.fragment,f),C(m8.$$.fragment,f),C(FM.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(MM.$$.fragment,f),C(_8.$$.fragment,f),C(DM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(OM.$$.fragment,f),C(M8.$$.fragment,f),C(zM.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(WM.$$.fragment,f),C(L8.$$.fragment,f),C(UM.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(YM.$$.fragment,f),C(R8.$$.fragment,f),C(bE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(FE.$$.fragment,f),C(N8.$$.fragment,f),C(GE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(VE.$$.fragment,f),C(V8.$$.fragment,f),C(zE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(WE.$$.fragment,f),C(H8.$$.fragment,f),C(UE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(YE.$$.fragment,f),C(Z8.$$.fragment,f),C(EC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(wC.$$.fragment,f),C(ax.$$.fragment,f),C(PC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(qC.$$.fragment,f),C(dx.$$.fragment,f),C(JC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(KC.$$.fragment,f),C(hx.$$.fragment,f),C(d3.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(f3.$$.fragment,f),C(vx.$$.fragment,f),C(T3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(E3.$$.fragment,f),C(Cx.$$.fragment,f),C(B3.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(I3.$$.fragment,f),C(xx.$$.fragment,f),C(W3.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(U3.$$.fragment,f),C(Bx.$$.fragment,f),C(aw.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(sw.$$.fragment,f),C(jx.$$.fragment,f),C(pw.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(_w.$$.fragment,f),C(Xx.$$.fragment,f),C(vw.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Tw.$$.fragment,f),C(Ux.$$.fragment,f),C(Cw.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e9.$$.fragment,f),C(Aw.$$.fragment,f),C(o9.$$.fragment,f),C(Lw.$$.fragment,f),Wqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(gf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(pf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(XPe),f&&t(pi),w(Y6),f&&t(zPe),f&&t($n),f&&t(QPe),w(K6,f),f&&t(WPe),f&&t(F$),f&&t(HPe),w(bf,f),f&&t(UPe),f&&t(ui),w(Z6),f&&t(JPe),f&&t(Co),w(e0),w(t0),w(_g),w(a0),f&&t(YPe),f&&t(bi),w(n0),f&&t(KPe),f&&t(wo),w(s0),w(d0),w(Ug),w(c0),f&&t(ZPe),f&&t(vi),w(f0),f&&t(eIe),f&&t(Ao),w(m0),w(p0),w(Eh),w(Ch),w(u0),f&&t(oIe),f&&t(Fi),w(_0),f&&t(rIe),f&&t(yo),w(b0),w(T0),w(Oh),w(Vh),w(M0),f&&t(tIe),f&&t(Mi),w(E0),f&&t(aIe),f&&t(Lo),w(C0),w(A0),w(Qh),w(y0),w(Iu),f&&t(nIe),f&&t(wi),w(L0),f&&t(sIe),f&&t(xo),w(x0),w(k0),w(Nu),w(S0),w(A_),f&&t(lIe),f&&t(Li),w(R0),f&&t(iIe),f&&t($o),w(B0),w(I0),w(L_),w(q0),w(m2),f&&t(dIe),f&&t(ki),w(N0),f&&t(cIe),f&&t(ko),w(j0),w(G0),w(h2),w(O0),w(Y2),f&&t(fIe),f&&t(Bi),w(V0),f&&t(mIe),f&&t(So),w(X0),w(Q0),w(Z2),w(W0),w(b1),f&&t(gIe),f&&t(qi),w(H0),f&&t(hIe),f&&t(Ro),w(U0),w(Y0),w(F1),w(K0),w(pb),f&&t(pIe),f&&t(Di),w(Z0),f&&t(uIe),f&&t(Bo),w(ey),w(ry),w(_b),w(ty),w(Hb),f&&t(_Ie),f&&t(Vi),w(ay),f&&t(bIe),f&&t(Po),w(ny),w(ly),w(Jb),w(iy),w(t4),f&&t(vIe),f&&t(Qi),w(dy),f&&t(FIe),f&&t(Io),w(cy),w(my),w(n4),w(gy),w(D4),f&&t(TIe),f&&t(Ui),w(hy),f&&t(MIe),f&&t(qo),w(py),w(_y),w(O4),w(by),w(x5),f&&t(EIe),f&&t(Ki),w(vy),f&&t(CIe),f&&t(No),w(Fy),w(My),w(k5),w(Ey),w(B5),f&&t(wIe),f&&t(od),w(Cy),f&&t(AIe),f&&t(jo),w(wy),w(yy),w(I5),w(Ly),w(U5),f&&t(yIe),f&&t(ad),w(xy),f&&t(LIe),f&&t(Do),w($y),w(Sy),w(Y5),w(Ry),w(ev),f&&t(xIe),f&&t(ld),w(By),f&&t($Ie),f&&t(Go),w(Py),w(qy),w(rv),w(Ny),w(mv),f&&t(kIe),f&&t(cd),w(jy),f&&t(SIe),f&&t(Oo),w(Dy),w(Oy),w(hv),w(Vy),w(Fv),f&&t(RIe),f&&t(gd),w(Xy),f&&t(BIe),f&&t(Vo),w(zy),w(Wy),w(Mv),w(Hy),w(Sv),f&&t(PIe),f&&t(ud),w(Uy),f&&t(IIe),f&&t(Xo),w(Jy),w(Ky),w(Bv),w(Zy),w(Nv),f&&t(qIe),f&&t(vd),w(oL),f&&t(NIe),f&&t(zo),w(rL),w(aL),w(Dv),w(nL),w(Qv),f&&t(jIe),f&&t(Md),w(sL),f&&t(DIe),f&&t(Qo),w(lL),w(dL),w(Hv),w(cL),w(Zv),f&&t(GIe),f&&t(Ad),w(fL),f&&t(OIe),f&&t(Wo),w(mL),w(hL),w(oF),w(pL),w(nF),f&&t(VIe),f&&t(xd),w(_L),f&&t(XIe),f&&t(Ho),w(bL),w(FL),w(lF),w(TL),w(cF),f&&t(zIe),f&&t(Sd),w(ML),f&&t(QIe),f&&t(Uo),w(EL),w(wL),w(mF),w(AL),w(bF),f&&t(WIe),f&&t(Pd),w(yL),f&&t(HIe),f&&t(Jo),w(LL),w($L),w(FF),w(kL),w(EF),f&&t(UIe),f&&t(Nd),w(SL),f&&t(JIe),f&&t(Yo),w(RL),w(PL),w(wF),w(IL),w(uT),f&&t(YIe),f&&t(Gd),w(qL),f&&t(KIe),f&&t(Ko),w(NL),w(DL),w(bT),w(GL),w(OT),f&&t(ZIe),f&&t(Xd),w(OL),f&&t(eqe),f&&t(Zo),w(VL),w(zL),w(XT),w(QL),w(t7),f&&t(oqe),f&&t(Wd),w(WL),f&&t(rqe),f&&t(er),w(HL),w(JL),w(n7),w(YL),w(d7),f&&t(tqe),f&&t(Yd),w(KL),f&&t(aqe),f&&t(or),w(ZL),w(o8),w(f7),w(r8),w(S7),f&&t(nqe),f&&t(ec),w(t8),f&&t(sqe),f&&t(rr),w(a8),w(s8),w(B7),w(l8),w(z7),f&&t(lqe),f&&t(tc),w(i8),f&&t(iqe),f&&t(tr),w(d8),w(f8),w(W7),w(m8),w(FM),f&&t(dqe),f&&t(sc),w(g8),f&&t(cqe),f&&t(ar),w(h8),w(u8),w(MM),w(_8),w(DM),f&&t(fqe),f&&t(dc),w(b8),f&&t(mqe),f&&t(nr),w(v8),w(T8),w(OM),w(M8),w(zM),f&&t(gqe),f&&t(mc),w(C8),f&&t(hqe),f&&t(sr),w(w8),w(y8),w(WM),w(L8),w(UM),f&&t(pqe),f&&t(pc),w(x8),f&&t(uqe),f&&t(lr),w($8),w(S8),w(YM),w(R8),w(bE),f&&t(_qe),f&&t(bc),w(B8),f&&t(bqe),f&&t(ir),w(P8),w(q8),w(FE),w(N8),w(GE),f&&t(vqe),f&&t(Tc),w(j8),f&&t(Fqe),f&&t(dr),w(D8),w(O8),w(VE),w(V8),w(zE),f&&t(Tqe),f&&t(Cc),w(X8),f&&t(Mqe),f&&t(cr),w(z8),w(W8),w(WE),w(H8),w(UE),f&&t(Eqe),f&&t(yc),w(U8),f&&t(Cqe),f&&t(fr),w(J8),w(K8),w(YE),w(Z8),w(EC),f&&t(wqe),f&&t($c),w(ex),f&&t(Aqe),f&&t(mr),w(ox),w(tx),w(wC),w(ax),w(PC),f&&t(yqe),f&&t(Rc),w(nx),f&&t(Lqe),f&&t(gr),w(sx),w(ix),w(qC),w(dx),w(JC),f&&t(xqe),f&&t(Ic),w(cx),f&&t($qe),f&&t(hr),w(fx),w(gx),w(KC),w(hx),w(d3),f&&t(kqe),f&&t(jc),w(px),f&&t(Sqe),f&&t(pr),w(ux),w(bx),w(f3),w(vx),w(T3),f&&t(Rqe),f&&t(Oc),w(Fx),f&&t(Bqe),f&&t(ur),w(Tx),w(Ex),w(E3),w(Cx),w(B3),f&&t(Pqe),f&&t(zc),w(wx),f&&t(Iqe),f&&t(_r),w(Ax),w(Lx),w(I3),w(xx),w(W3),f&&t(qqe),f&&t(Hc),w($x),f&&t(Nqe),f&&t(br),w(kx),w(Rx),w(U3),w(Bx),w(aw),f&&t(jqe),f&&t(Yc),w(Px),f&&t(Dqe),f&&t(vr),w(Ix),w(Nx),w(sw),w(jx),w(pw),f&&t(Gqe),f&&t(ef),w(Dx),f&&t(Oqe),f&&t(Fr),w(Gx),w(Vx),w(_w),w(Xx),w(vw),f&&t(Vqe),f&&t(tf),w(zx),f&&t(Xqe),f&&t(Tr),w(Qx),w(Hx),w(Tw),w(Ux),w(Cw),f&&t(zqe),f&&t(sf),w(Yx),f&&t(Qqe),f&&t(Mr),w(Kx),w(e9),w(Aw),w(o9),w(Lw)}}}const hLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function pLt(L){return p0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class MLt extends f0t{constructor(g){super();m0t(this,g,pLt,gLt,g0t,{})}}export{MLt as default,hLt as metadata};
