import{S as R8t,i as P8t,s as B8t,e as a,k as l,w as F,t as o,M as I8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as q8t,L as I}from"../../chunks/vendor-316217a5.js";import{T as yGr}from"../../chunks/Tip-27e9fea0.js";import{D as R}from"../../chunks/Docstring-1fe4a33a.js";import{C as P}from"../../chunks/CodeBlock-8418a95e.js";import{I as oe}from"../../chunks/IconCopyLink-40460835.js";import{E as B}from"../../chunks/ExampleCodeBlock-32fc0037.js";function N8t(L){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,c6,bf,je,We,_i,yn,f6,Ln,xn,m6,ui,$n,g6,bi,vf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),c6=o(")."),bf=l(),je=a("p"),We=o("Likewise, if your "),_i=a("code"),yn=o("NewModel"),f6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),m6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),g6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var P$=s(p);m=r(P$,"NewModelConfig"),P$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var B$=s(gi);uf=r(B$,"model_type"),B$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var I$=s(hi);pi=r(I$,'"new-model"'),I$.forEach(t),c6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var wa=s(_i);yn=r(wa,"NewModel"),wa.forEach(t),f6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var q$=s(Ln);xn=r(q$,"PreTrainedModel"),q$.forEach(t),m6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),g6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var N$=s(bi);vf=r(N$,"NewModelConfig"),N$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,rt),e(g,hi),e(hi,pi),e(g,c6),b(Qe,bf,Ae),b(Qe,je,Ae),e(je,We),e(je,_i),e(_i,yn),e(je,f6),e(je,Ln),e(Ln,xn),e(je,m6),e(je,ui),e(ui,$n),e(je,g6),e(je,bi),e(bi,vf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(je)}}}function j8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function O8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function X8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_,d,h,Mo,gi,uf,rt,hi,pi,c6,bf,je,We,_i,yn,f6,Ln,xn,m6,ui,$n,g6,bi,vf,Ca,Qe,Ae,P$,vi,B$,I$,Eo,wa,q$,Ff,N$,gGe,rqe,Fi,Tf,Nee,h6,hGe,jee,pGe,tqe,kn,_Ge,Dee,uGe,bGe,Gee,vGe,FGe,aqe,p6,nqe,j$,TGe,sqe,Mf,lqe,Ti,Ef,Oee,_6,MGe,Vee,EGe,iqe,Co,u6,CGe,b6,wGe,D$,AGe,yGe,LGe,v6,xGe,Xee,$Ge,kGe,SGe,Er,F6,RGe,zee,PGe,BGe,Mi,IGe,Wee,qGe,NGe,Qee,jGe,DGe,GGe,A,Cf,Hee,OGe,VGe,G$,XGe,zGe,WGe,wf,Uee,QGe,HGe,O$,UGe,JGe,YGe,Af,Jee,KGe,ZGe,V$,eOe,oOe,rOe,yf,Yee,tOe,aOe,X$,nOe,sOe,lOe,Lf,Kee,iOe,dOe,z$,cOe,fOe,mOe,xf,Zee,gOe,hOe,W$,pOe,_Oe,uOe,$f,eoe,bOe,vOe,Q$,FOe,TOe,MOe,kf,ooe,EOe,COe,H$,wOe,AOe,yOe,Sf,roe,LOe,xOe,U$,$Oe,kOe,SOe,Rf,toe,ROe,POe,J$,BOe,IOe,qOe,Pf,aoe,NOe,jOe,Y$,DOe,GOe,OOe,Bf,noe,VOe,XOe,K$,zOe,WOe,QOe,If,soe,HOe,UOe,Z$,JOe,YOe,KOe,qf,loe,ZOe,eVe,ek,oVe,rVe,tVe,Nf,ioe,aVe,nVe,ok,sVe,lVe,iVe,jf,doe,dVe,cVe,rk,fVe,mVe,gVe,Df,coe,hVe,pVe,tk,_Ve,uVe,bVe,Gf,foe,vVe,FVe,ak,TVe,MVe,EVe,Of,moe,CVe,wVe,nk,AVe,yVe,LVe,Vf,goe,xVe,$Ve,sk,kVe,SVe,RVe,Xf,hoe,PVe,BVe,lk,IVe,qVe,NVe,zf,poe,jVe,DVe,ik,GVe,OVe,VVe,Wf,_oe,XVe,zVe,dk,WVe,QVe,HVe,Qf,uoe,UVe,JVe,ck,YVe,KVe,ZVe,Hf,boe,eXe,oXe,fk,rXe,tXe,aXe,Uf,voe,nXe,sXe,mk,lXe,iXe,dXe,Jf,Foe,cXe,fXe,gk,mXe,gXe,hXe,Yf,Toe,pXe,_Xe,hk,uXe,bXe,vXe,Kf,Moe,FXe,TXe,pk,MXe,EXe,CXe,Zf,Eoe,wXe,AXe,_k,yXe,LXe,xXe,em,Coe,$Xe,kXe,uk,SXe,RXe,PXe,om,woe,BXe,IXe,bk,qXe,NXe,jXe,rm,Aoe,DXe,GXe,vk,OXe,VXe,XXe,tm,yoe,zXe,WXe,Fk,QXe,HXe,UXe,am,Loe,JXe,YXe,Tk,KXe,ZXe,eze,nm,xoe,oze,rze,Mk,tze,aze,nze,sm,$oe,sze,lze,Ek,ize,dze,cze,lm,koe,fze,mze,Ck,gze,hze,pze,im,Soe,_ze,uze,wk,bze,vze,Fze,dm,Roe,Tze,Mze,Ak,Eze,Cze,wze,cm,Poe,Aze,yze,yk,Lze,xze,$ze,fm,Boe,kze,Sze,Lk,Rze,Pze,Bze,mm,Ioe,Ize,qze,xk,Nze,jze,Dze,gm,qoe,Gze,Oze,$k,Vze,Xze,zze,hm,Noe,Wze,Qze,kk,Hze,Uze,Jze,pm,joe,Yze,Kze,Sk,Zze,eWe,oWe,_m,Doe,rWe,tWe,Rk,aWe,nWe,sWe,um,Goe,lWe,iWe,Pk,dWe,cWe,fWe,bm,Ooe,mWe,gWe,Bk,hWe,pWe,_We,vm,Voe,uWe,bWe,Ik,vWe,FWe,TWe,Fm,Xoe,MWe,EWe,qk,CWe,wWe,AWe,Tm,zoe,yWe,LWe,Nk,xWe,$We,kWe,Mm,Woe,SWe,RWe,jk,PWe,BWe,IWe,Em,Qoe,qWe,NWe,Dk,jWe,DWe,GWe,Cm,Hoe,OWe,VWe,Gk,XWe,zWe,WWe,wm,Uoe,QWe,HWe,Ok,UWe,JWe,YWe,Am,Joe,KWe,ZWe,Vk,eQe,oQe,rQe,ym,Yoe,tQe,aQe,Xk,nQe,sQe,lQe,Lm,Koe,iQe,dQe,zk,cQe,fQe,mQe,xm,Zoe,gQe,hQe,Wk,pQe,_Qe,uQe,$m,ere,bQe,vQe,Qk,FQe,TQe,MQe,km,ore,EQe,CQe,Hk,wQe,AQe,yQe,Sm,rre,LQe,xQe,Uk,$Qe,kQe,SQe,Rm,tre,RQe,PQe,Jk,BQe,IQe,qQe,Pm,are,NQe,jQe,Yk,DQe,GQe,OQe,Bm,nre,VQe,XQe,Kk,zQe,WQe,QQe,Im,sre,HQe,UQe,Zk,JQe,YQe,KQe,qm,lre,ZQe,eHe,eS,oHe,rHe,tHe,Nm,ire,aHe,nHe,oS,sHe,lHe,iHe,jm,dre,dHe,cHe,rS,fHe,mHe,gHe,Dm,cre,hHe,pHe,tS,_He,uHe,bHe,Gm,fre,vHe,FHe,aS,THe,MHe,EHe,Om,mre,CHe,wHe,nS,AHe,yHe,LHe,Vm,gre,xHe,$He,sS,kHe,SHe,RHe,Xm,hre,PHe,BHe,lS,IHe,qHe,NHe,zm,pre,jHe,DHe,iS,GHe,OHe,VHe,Wm,_re,XHe,zHe,dS,WHe,QHe,HHe,Qm,ure,UHe,JHe,cS,YHe,KHe,ZHe,Hm,bre,eUe,oUe,fS,rUe,tUe,aUe,Um,vre,nUe,sUe,mS,lUe,iUe,dUe,Jm,Fre,cUe,fUe,gS,mUe,gUe,hUe,Ym,Tre,pUe,_Ue,hS,uUe,bUe,vUe,Km,Mre,FUe,TUe,pS,MUe,EUe,CUe,Zm,Ere,wUe,AUe,_S,yUe,LUe,xUe,eg,Cre,$Ue,kUe,uS,SUe,RUe,PUe,og,wre,BUe,IUe,bS,qUe,NUe,jUe,rg,Are,DUe,GUe,vS,OUe,VUe,XUe,tg,yre,zUe,WUe,FS,QUe,HUe,UUe,ag,Lre,JUe,YUe,TS,KUe,ZUe,eJe,ng,xre,oJe,rJe,MS,tJe,aJe,nJe,sg,$re,sJe,lJe,ES,iJe,dJe,cJe,lg,kre,fJe,mJe,CS,gJe,hJe,pJe,ig,Sre,_Je,uJe,wS,bJe,vJe,FJe,dg,Rre,TJe,MJe,AS,EJe,CJe,wJe,cg,Pre,AJe,yJe,yS,LJe,xJe,$Je,fg,Bre,kJe,SJe,LS,RJe,PJe,BJe,mg,Ire,IJe,qJe,xS,NJe,jJe,DJe,gg,qre,GJe,OJe,$S,VJe,XJe,zJe,hg,Nre,WJe,QJe,kS,HJe,UJe,JJe,pg,jre,YJe,KJe,SS,ZJe,eYe,oYe,_g,Dre,rYe,tYe,RS,aYe,nYe,sYe,ug,Gre,lYe,iYe,PS,dYe,cYe,fYe,bg,Ore,mYe,gYe,BS,hYe,pYe,_Ye,vg,Vre,uYe,bYe,IS,vYe,FYe,TYe,Fg,Xre,MYe,EYe,qS,CYe,wYe,AYe,Tg,zre,yYe,LYe,NS,xYe,$Ye,kYe,Mg,Wre,SYe,RYe,jS,PYe,BYe,IYe,Eg,qYe,Cg,T6,NYe,Qre,jYe,dqe,Ei,wg,Hre,M6,DYe,Ure,GYe,cqe,wo,E6,OYe,C6,VYe,DS,XYe,zYe,WYe,w6,QYe,Jre,HYe,UYe,JYe,Cr,A6,YYe,Yre,KYe,ZYe,Aa,eKe,Kre,oKe,rKe,Zre,tKe,aKe,ete,nKe,sKe,lKe,k,Sn,ote,iKe,dKe,GS,cKe,fKe,OS,mKe,gKe,hKe,Rn,rte,pKe,_Ke,VS,uKe,bKe,XS,vKe,FKe,TKe,Pn,tte,MKe,EKe,zS,CKe,wKe,WS,AKe,yKe,LKe,Bn,ate,xKe,$Ke,QS,kKe,SKe,HS,RKe,PKe,BKe,In,nte,IKe,qKe,US,NKe,jKe,JS,DKe,GKe,OKe,Ag,ste,VKe,XKe,YS,zKe,WKe,QKe,yg,lte,HKe,UKe,KS,JKe,YKe,KKe,qn,ite,ZKe,eZe,ZS,oZe,rZe,eR,tZe,aZe,nZe,Nn,dte,sZe,lZe,oR,iZe,dZe,rR,cZe,fZe,mZe,jn,cte,gZe,hZe,tR,pZe,_Ze,aR,uZe,bZe,vZe,Dn,fte,FZe,TZe,nR,MZe,EZe,sR,CZe,wZe,AZe,Lg,mte,yZe,LZe,lR,xZe,$Ze,kZe,xg,gte,SZe,RZe,iR,PZe,BZe,IZe,Gn,hte,qZe,NZe,dR,jZe,DZe,cR,GZe,OZe,VZe,$g,pte,XZe,zZe,fR,WZe,QZe,HZe,On,_te,UZe,JZe,mR,YZe,KZe,gR,ZZe,eeo,oeo,Vn,ute,reo,teo,hR,aeo,neo,pR,seo,leo,ieo,Xn,bte,deo,ceo,_R,feo,meo,uR,geo,heo,peo,kg,vte,_eo,ueo,bR,beo,veo,Feo,zn,Fte,Teo,Meo,vR,Eeo,Ceo,FR,weo,Aeo,yeo,Wn,Tte,Leo,xeo,TR,$eo,keo,MR,Seo,Reo,Peo,Qn,Mte,Beo,Ieo,ER,qeo,Neo,CR,jeo,Deo,Geo,Hn,Ete,Oeo,Veo,wR,Xeo,zeo,AR,Weo,Qeo,Heo,Un,Cte,Ueo,Jeo,yR,Yeo,Keo,LR,Zeo,eoo,ooo,Jn,wte,roo,too,xR,aoo,noo,$R,soo,loo,ioo,Sg,Ate,doo,coo,kR,foo,moo,goo,Yn,yte,hoo,poo,SR,_oo,uoo,RR,boo,voo,Foo,Rg,Lte,Too,Moo,PR,Eoo,Coo,woo,Kn,xte,Aoo,yoo,BR,Loo,xoo,IR,$oo,koo,Soo,Zn,$te,Roo,Poo,qR,Boo,Ioo,NR,qoo,Noo,joo,es,kte,Doo,Goo,jR,Ooo,Voo,DR,Xoo,zoo,Woo,os,Ste,Qoo,Hoo,GR,Uoo,Joo,OR,Yoo,Koo,Zoo,rs,Rte,ero,oro,VR,rro,tro,XR,aro,nro,sro,Pg,Pte,lro,iro,zR,dro,cro,fro,ts,Bte,mro,gro,WR,hro,pro,QR,_ro,uro,bro,as,Ite,vro,Fro,HR,Tro,Mro,UR,Ero,Cro,wro,ns,qte,Aro,yro,JR,Lro,xro,YR,$ro,kro,Sro,ss,Nte,Rro,Pro,KR,Bro,Iro,ZR,qro,Nro,jro,ls,jte,Dro,Gro,eP,Oro,Vro,oP,Xro,zro,Wro,is,Dte,Qro,Hro,rP,Uro,Jro,tP,Yro,Kro,Zro,Bg,Gte,eto,oto,aP,rto,tto,ato,ds,Ote,nto,sto,nP,lto,ito,sP,dto,cto,fto,Ig,Vte,mto,gto,lP,hto,pto,_to,qg,Xte,uto,bto,iP,vto,Fto,Tto,cs,zte,Mto,Eto,dP,Cto,wto,cP,Ato,yto,Lto,fs,Wte,xto,$to,fP,kto,Sto,mP,Rto,Pto,Bto,ms,Qte,Ito,qto,gP,Nto,jto,hP,Dto,Gto,Oto,Ng,Hte,Vto,Xto,pP,zto,Wto,Qto,gs,Ute,Hto,Uto,_P,Jto,Yto,uP,Kto,Zto,eao,hs,Jte,oao,rao,bP,tao,aao,vP,nao,sao,lao,ps,Yte,iao,dao,FP,cao,fao,TP,mao,gao,hao,_s,Kte,pao,_ao,MP,uao,bao,EP,vao,Fao,Tao,us,Zte,Mao,Eao,CP,Cao,wao,wP,Aao,yao,Lao,jg,eae,xao,$ao,AP,kao,Sao,Rao,bs,oae,Pao,Bao,yP,Iao,qao,LP,Nao,jao,Dao,Dg,rae,Gao,Oao,xP,Vao,Xao,zao,vs,tae,Wao,Qao,$P,Hao,Uao,kP,Jao,Yao,Kao,Gg,aae,Zao,eno,SP,ono,rno,tno,Og,nae,ano,nno,RP,sno,lno,ino,Fs,sae,dno,cno,PP,fno,mno,BP,gno,hno,pno,Vg,lae,_no,uno,IP,bno,vno,Fno,Ts,iae,Tno,Mno,qP,Eno,Cno,NP,wno,Ano,yno,Ms,dae,Lno,xno,jP,$no,kno,DP,Sno,Rno,Pno,Es,cae,Bno,Ino,GP,qno,Nno,OP,jno,Dno,Gno,Cs,fae,Ono,Vno,VP,Xno,zno,XP,Wno,Qno,Hno,ws,mae,Uno,Jno,zP,Yno,Kno,WP,Zno,eso,oso,As,gae,rso,tso,QP,aso,nso,HP,sso,lso,iso,Xg,hae,dso,cso,UP,fso,mso,gso,zg,pae,hso,pso,JP,_so,uso,bso,ys,_ae,vso,Fso,YP,Tso,Mso,KP,Eso,Cso,wso,Ls,uae,Aso,yso,ZP,Lso,xso,eB,$so,kso,Sso,xs,bae,Rso,Pso,oB,Bso,Iso,rB,qso,Nso,jso,Wg,vae,Dso,Gso,tB,Oso,Vso,Xso,Qg,Fae,zso,Wso,aB,Qso,Hso,Uso,Hg,Tae,Jso,Yso,nB,Kso,Zso,elo,$s,Mae,olo,rlo,sB,tlo,alo,lB,nlo,slo,llo,Ug,Eae,ilo,dlo,iB,clo,flo,mlo,Jg,Cae,glo,hlo,dB,plo,_lo,ulo,Yg,wae,blo,vlo,cB,Flo,Tlo,Mlo,ks,Aae,Elo,Clo,fB,wlo,Alo,mB,ylo,Llo,xlo,Kg,yae,$lo,klo,gB,Slo,Rlo,Plo,Zg,Lae,Blo,Ilo,hB,qlo,Nlo,jlo,Ss,xae,Dlo,Glo,pB,Olo,Vlo,_B,Xlo,zlo,Wlo,Rs,$ae,Qlo,Hlo,uB,Ulo,Jlo,bB,Ylo,Klo,Zlo,Ps,kae,eio,oio,vB,rio,tio,FB,aio,nio,sio,Bs,Sae,lio,iio,TB,dio,cio,MB,fio,mio,gio,eh,hio,oh,y6,pio,Rae,_io,fqe,Ci,rh,Pae,L6,uio,Bae,bio,mqe,Ao,x6,vio,$6,Fio,EB,Tio,Mio,Eio,k6,Cio,Iae,wio,Aio,yio,He,S6,Lio,qae,xio,$io,ya,kio,Nae,Sio,Rio,jae,Pio,Bio,Dae,Iio,qio,Nio,Z,th,Gae,jio,Dio,CB,Gio,Oio,Vio,ah,Oae,Xio,zio,wB,Wio,Qio,Hio,nh,Vae,Uio,Jio,AB,Yio,Kio,Zio,sh,Xae,edo,odo,yB,rdo,tdo,ado,lh,zae,ndo,sdo,LB,ldo,ido,ddo,ih,Wae,cdo,fdo,xB,mdo,gdo,hdo,dh,Qae,pdo,_do,$B,udo,bdo,vdo,ch,Hae,Fdo,Tdo,kB,Mdo,Edo,Cdo,fh,Uae,wdo,Ado,SB,ydo,Ldo,xdo,mh,Jae,$do,kdo,RB,Sdo,Rdo,Pdo,gh,Yae,Bdo,Ido,PB,qdo,Ndo,jdo,hh,Kae,Ddo,Gdo,BB,Odo,Vdo,Xdo,ph,Zae,zdo,Wdo,IB,Qdo,Hdo,Udo,_h,ene,Jdo,Ydo,qB,Kdo,Zdo,eco,uh,one,oco,rco,NB,tco,aco,nco,bh,rne,sco,lco,jB,ico,dco,cco,vh,tne,fco,mco,DB,gco,hco,pco,Fh,ane,_co,uco,GB,bco,vco,Fco,Th,nne,Tco,Mco,OB,Eco,Cco,wco,Mh,sne,Aco,yco,VB,Lco,xco,$co,Eh,lne,kco,Sco,XB,Rco,Pco,Bco,Ch,ine,Ico,qco,zB,Nco,jco,Dco,wh,dne,Gco,Oco,WB,Vco,Xco,zco,Ah,cne,Wco,Qco,QB,Hco,Uco,Jco,yh,fne,Yco,Kco,HB,Zco,efo,ofo,Lh,mne,rfo,tfo,UB,afo,nfo,sfo,xh,gne,lfo,ifo,JB,dfo,cfo,ffo,$h,mfo,kh,gfo,Sh,R6,hfo,hne,pfo,gqe,wi,Rh,pne,P6,_fo,_ne,ufo,hqe,yo,B6,bfo,I6,vfo,YB,Ffo,Tfo,Mfo,q6,Efo,une,Cfo,wfo,Afo,Ue,N6,yfo,bne,Lfo,xfo,Ai,$fo,vne,kfo,Sfo,Fne,Rfo,Pfo,Bfo,pe,Ph,Tne,Ifo,qfo,KB,Nfo,jfo,Dfo,Bh,Mne,Gfo,Ofo,Ene,Vfo,Xfo,zfo,Ih,Cne,Wfo,Qfo,ZB,Hfo,Ufo,Jfo,qh,wne,Yfo,Kfo,eI,Zfo,emo,omo,Nh,Ane,rmo,tmo,oI,amo,nmo,smo,jh,yne,lmo,imo,rI,dmo,cmo,fmo,Dh,Lne,mmo,gmo,tI,hmo,pmo,_mo,Gh,xne,umo,bmo,aI,vmo,Fmo,Tmo,Oh,$ne,Mmo,Emo,nI,Cmo,wmo,Amo,Vh,kne,ymo,Lmo,sI,xmo,$mo,kmo,Xh,Sne,Smo,Rmo,lI,Pmo,Bmo,Imo,zh,Rne,qmo,Nmo,iI,jmo,Dmo,Gmo,Wh,Pne,Omo,Vmo,dI,Xmo,zmo,Wmo,Qh,Bne,Qmo,Hmo,cI,Umo,Jmo,Ymo,Hh,Ine,Kmo,Zmo,fI,ego,ogo,rgo,Uh,qne,tgo,ago,mI,ngo,sgo,lgo,Jh,igo,Yh,dgo,Kh,j6,cgo,Nne,fgo,pqe,yi,Zh,jne,D6,mgo,Dne,ggo,_qe,Lo,G6,hgo,Li,pgo,gI,_go,ugo,hI,bgo,vgo,Fgo,O6,Tgo,Gne,Mgo,Ego,Cgo,tt,V6,wgo,One,Ago,ygo,xi,Lgo,Vne,xgo,$go,pI,kgo,Sgo,Rgo,ep,Pgo,Je,X6,Bgo,Xne,Igo,qgo,La,Ngo,zne,jgo,Dgo,Wne,Ggo,Ogo,Qne,Vgo,Xgo,zgo,x,op,Hne,Wgo,Qgo,_I,Hgo,Ugo,Jgo,rp,Une,Ygo,Kgo,uI,Zgo,eho,oho,tp,Jne,rho,tho,bI,aho,nho,sho,ap,Yne,lho,iho,vI,dho,cho,fho,np,Kne,mho,gho,FI,hho,pho,_ho,sp,Zne,uho,bho,TI,vho,Fho,Tho,lp,ese,Mho,Eho,MI,Cho,who,Aho,ip,ose,yho,Lho,EI,xho,$ho,kho,dp,rse,Sho,Rho,CI,Pho,Bho,Iho,cp,tse,qho,Nho,wI,jho,Dho,Gho,fp,ase,Oho,Vho,AI,Xho,zho,Who,mp,nse,Qho,Hho,yI,Uho,Jho,Yho,gp,sse,Kho,Zho,LI,epo,opo,rpo,hp,lse,tpo,apo,xI,npo,spo,lpo,pp,ise,ipo,dpo,$I,cpo,fpo,mpo,_p,dse,gpo,hpo,kI,ppo,_po,upo,up,cse,bpo,vpo,SI,Fpo,Tpo,Mpo,bp,fse,Epo,Cpo,RI,wpo,Apo,ypo,vp,mse,Lpo,xpo,PI,$po,kpo,Spo,Fp,gse,Rpo,Ppo,BI,Bpo,Ipo,qpo,Tp,hse,Npo,jpo,II,Dpo,Gpo,Opo,Mp,pse,Vpo,Xpo,qI,zpo,Wpo,Qpo,Ep,_se,Hpo,Upo,NI,Jpo,Ypo,Kpo,Cp,use,Zpo,e_o,jI,o_o,r_o,t_o,wp,bse,a_o,n_o,DI,s_o,l_o,i_o,Ap,vse,d_o,c_o,GI,f_o,m_o,g_o,yp,Fse,h_o,p_o,OI,__o,u_o,b_o,Lp,Tse,v_o,F_o,VI,T_o,M_o,E_o,xp,Mse,C_o,w_o,XI,A_o,y_o,L_o,$p,Ese,x_o,$_o,zI,k_o,S_o,R_o,kp,Cse,P_o,B_o,WI,I_o,q_o,N_o,Sp,wse,j_o,D_o,QI,G_o,O_o,V_o,Is,Ase,X_o,z_o,HI,W_o,Q_o,UI,H_o,U_o,J_o,Rp,yse,Y_o,K_o,JI,Z_o,euo,ouo,Pp,Lse,ruo,tuo,YI,auo,nuo,suo,Bp,xse,luo,iuo,KI,duo,cuo,fuo,Ip,$se,muo,guo,ZI,huo,puo,_uo,qp,kse,uuo,buo,eq,vuo,Fuo,Tuo,Np,Sse,Muo,Euo,oq,Cuo,wuo,Auo,jp,Rse,yuo,Luo,rq,xuo,$uo,kuo,Dp,Pse,Suo,Ruo,tq,Puo,Buo,Iuo,Gp,Bse,quo,Nuo,aq,juo,Duo,Guo,Op,Ise,Ouo,Vuo,nq,Xuo,zuo,Wuo,Vp,qse,Quo,Huo,sq,Uuo,Juo,Yuo,Xp,Nse,Kuo,Zuo,lq,e2o,o2o,r2o,zp,jse,t2o,a2o,iq,n2o,s2o,l2o,Wp,Dse,i2o,d2o,dq,c2o,f2o,m2o,Qp,Gse,g2o,h2o,cq,p2o,_2o,u2o,Hp,Ose,b2o,v2o,fq,F2o,T2o,M2o,Up,Vse,E2o,C2o,mq,w2o,A2o,y2o,Jp,Xse,L2o,x2o,gq,$2o,k2o,S2o,Yp,zse,R2o,P2o,hq,B2o,I2o,q2o,Kp,Wse,N2o,j2o,pq,D2o,G2o,O2o,Zp,Qse,V2o,X2o,_q,z2o,W2o,Q2o,e_,Hse,H2o,U2o,uq,J2o,Y2o,K2o,o_,Use,Z2o,e1o,bq,o1o,r1o,t1o,r_,Jse,a1o,n1o,vq,s1o,l1o,i1o,t_,Yse,d1o,c1o,Fq,f1o,m1o,g1o,a_,Kse,h1o,p1o,Tq,_1o,u1o,b1o,n_,Zse,v1o,F1o,Mq,T1o,M1o,E1o,s_,ele,C1o,w1o,Eq,A1o,y1o,L1o,l_,ole,x1o,$1o,Cq,k1o,S1o,R1o,i_,rle,P1o,B1o,wq,I1o,q1o,N1o,d_,tle,j1o,D1o,Aq,G1o,O1o,V1o,c_,ale,X1o,z1o,yq,W1o,Q1o,H1o,f_,nle,U1o,J1o,Lq,Y1o,K1o,Z1o,m_,sle,ebo,obo,xq,rbo,tbo,abo,g_,lle,nbo,sbo,$q,lbo,ibo,dbo,h_,ile,cbo,fbo,kq,mbo,gbo,hbo,p_,dle,pbo,_bo,Sq,ubo,bbo,vbo,__,cle,Fbo,Tbo,Rq,Mbo,Ebo,Cbo,u_,fle,wbo,Abo,Pq,ybo,Lbo,xbo,b_,mle,$bo,kbo,Bq,Sbo,Rbo,Pbo,v_,gle,Bbo,Ibo,Iq,qbo,Nbo,jbo,F_,hle,Dbo,Gbo,qq,Obo,Vbo,Xbo,T_,ple,zbo,Wbo,Nq,Qbo,Hbo,Ubo,M_,_le,Jbo,Ybo,jq,Kbo,Zbo,e4o,E_,ule,o4o,r4o,Dq,t4o,a4o,n4o,C_,ble,s4o,l4o,Gq,i4o,d4o,c4o,w_,vle,f4o,m4o,Oq,g4o,h4o,p4o,A_,Fle,_4o,u4o,Vq,b4o,v4o,F4o,y_,Tle,T4o,M4o,Xq,E4o,C4o,w4o,L_,Mle,A4o,y4o,zq,L4o,x4o,$4o,x_,Ele,k4o,S4o,Wq,R4o,P4o,B4o,$_,Cle,I4o,q4o,Qq,N4o,j4o,D4o,k_,wle,G4o,O4o,Hq,V4o,X4o,z4o,S_,Ale,W4o,Q4o,Uq,H4o,U4o,J4o,R_,yle,Y4o,K4o,Jq,Z4o,e5o,o5o,P_,Lle,r5o,t5o,Yq,a5o,n5o,s5o,B_,xle,l5o,i5o,Kq,d5o,c5o,f5o,I_,$le,m5o,g5o,Zq,h5o,p5o,_5o,q_,kle,u5o,b5o,eN,v5o,F5o,T5o,N_,Sle,M5o,E5o,oN,C5o,w5o,A5o,j_,Rle,y5o,L5o,rN,x5o,$5o,k5o,D_,Ple,S5o,R5o,tN,P5o,B5o,I5o,G_,Ble,q5o,N5o,aN,j5o,D5o,G5o,O_,Ile,O5o,V5o,nN,X5o,z5o,W5o,V_,qle,Q5o,H5o,sN,U5o,J5o,Y5o,X_,Nle,K5o,Z5o,lN,evo,ovo,rvo,z_,jle,tvo,avo,iN,nvo,svo,lvo,W_,ivo,Dle,dvo,cvo,Gle,fvo,mvo,Q_,uqe,$i,H_,Ole,z6,gvo,Vle,hvo,bqe,xo,W6,pvo,ki,_vo,dN,uvo,bvo,cN,vvo,Fvo,Tvo,Q6,Mvo,Xle,Evo,Cvo,wvo,at,H6,Avo,zle,yvo,Lvo,Si,xvo,Wle,$vo,kvo,fN,Svo,Rvo,Pvo,U_,Bvo,Ye,U6,Ivo,Qle,qvo,Nvo,xa,jvo,Hle,Dvo,Gvo,Ule,Ovo,Vvo,Jle,Xvo,zvo,Wvo,G,J_,Yle,Qvo,Hvo,mN,Uvo,Jvo,Yvo,Y_,Kle,Kvo,Zvo,gN,eFo,oFo,rFo,K_,Zle,tFo,aFo,hN,nFo,sFo,lFo,Z_,eie,iFo,dFo,pN,cFo,fFo,mFo,eu,oie,gFo,hFo,_N,pFo,_Fo,uFo,ou,rie,bFo,vFo,uN,FFo,TFo,MFo,ru,tie,EFo,CFo,bN,wFo,AFo,yFo,tu,aie,LFo,xFo,vN,$Fo,kFo,SFo,au,nie,RFo,PFo,FN,BFo,IFo,qFo,nu,sie,NFo,jFo,TN,DFo,GFo,OFo,su,lie,VFo,XFo,MN,zFo,WFo,QFo,lu,iie,HFo,UFo,EN,JFo,YFo,KFo,iu,die,ZFo,eTo,CN,oTo,rTo,tTo,du,cie,aTo,nTo,wN,sTo,lTo,iTo,cu,fie,dTo,cTo,AN,fTo,mTo,gTo,fu,mie,hTo,pTo,yN,_To,uTo,bTo,mu,gie,vTo,FTo,LN,TTo,MTo,ETo,gu,hie,CTo,wTo,xN,ATo,yTo,LTo,hu,pie,xTo,$To,$N,kTo,STo,RTo,pu,_ie,PTo,BTo,kN,ITo,qTo,NTo,_u,uie,jTo,DTo,SN,GTo,OTo,VTo,uu,bie,XTo,zTo,RN,WTo,QTo,HTo,bu,vie,UTo,JTo,PN,YTo,KTo,ZTo,vu,Fie,e7o,o7o,BN,r7o,t7o,a7o,Fu,Tie,n7o,s7o,IN,l7o,i7o,d7o,Tu,Mie,c7o,f7o,qN,m7o,g7o,h7o,Mu,Eie,p7o,_7o,NN,u7o,b7o,v7o,Eu,Cie,F7o,T7o,jN,M7o,E7o,C7o,Cu,wie,w7o,A7o,DN,y7o,L7o,x7o,wu,Aie,$7o,k7o,GN,S7o,R7o,P7o,Au,yie,B7o,I7o,ON,q7o,N7o,j7o,yu,Lie,D7o,G7o,VN,O7o,V7o,X7o,Lu,xie,z7o,W7o,XN,Q7o,H7o,U7o,xu,$ie,J7o,Y7o,zN,K7o,Z7o,eMo,$u,kie,oMo,rMo,WN,tMo,aMo,nMo,ku,Sie,sMo,lMo,QN,iMo,dMo,cMo,Su,Rie,fMo,mMo,HN,gMo,hMo,pMo,Ru,Pie,_Mo,uMo,UN,bMo,vMo,FMo,Pu,Bie,TMo,MMo,JN,EMo,CMo,wMo,Bu,Iie,AMo,yMo,YN,LMo,xMo,$Mo,Iu,qie,kMo,SMo,KN,RMo,PMo,BMo,qu,Nie,IMo,qMo,ZN,NMo,jMo,DMo,Nu,GMo,jie,OMo,VMo,Die,XMo,zMo,ju,vqe,Ri,Du,Gie,J6,WMo,Oie,QMo,Fqe,$o,Y6,HMo,Pi,UMo,ej,JMo,YMo,oj,KMo,ZMo,eEo,K6,oEo,Vie,rEo,tEo,aEo,nt,Z6,nEo,Xie,sEo,lEo,Bi,iEo,zie,dEo,cEo,rj,fEo,mEo,gEo,Gu,hEo,Ke,ey,pEo,Wie,_Eo,uEo,$a,bEo,Qie,vEo,FEo,Hie,TEo,MEo,Uie,EEo,CEo,wEo,z,Ou,Jie,AEo,yEo,tj,LEo,xEo,$Eo,Vu,Yie,kEo,SEo,aj,REo,PEo,BEo,Xu,Kie,IEo,qEo,nj,NEo,jEo,DEo,zu,Zie,GEo,OEo,sj,VEo,XEo,zEo,Wu,ede,WEo,QEo,lj,HEo,UEo,JEo,Qu,ode,YEo,KEo,ij,ZEo,eCo,oCo,Hu,rde,rCo,tCo,dj,aCo,nCo,sCo,Uu,tde,lCo,iCo,cj,dCo,cCo,fCo,Ju,ade,mCo,gCo,fj,hCo,pCo,_Co,Yu,nde,uCo,bCo,mj,vCo,FCo,TCo,Ku,sde,MCo,ECo,gj,CCo,wCo,ACo,Zu,lde,yCo,LCo,hj,xCo,$Co,kCo,e2,ide,SCo,RCo,pj,PCo,BCo,ICo,o2,dde,qCo,NCo,_j,jCo,DCo,GCo,r2,cde,OCo,VCo,uj,XCo,zCo,WCo,t2,fde,QCo,HCo,bj,UCo,JCo,YCo,a2,mde,KCo,ZCo,vj,e3o,o3o,r3o,n2,gde,t3o,a3o,Fj,n3o,s3o,l3o,s2,hde,i3o,d3o,Tj,c3o,f3o,m3o,l2,pde,g3o,h3o,Mj,p3o,_3o,u3o,i2,_de,b3o,v3o,Ej,F3o,T3o,M3o,d2,ude,E3o,C3o,Cj,w3o,A3o,y3o,c2,bde,L3o,x3o,wj,$3o,k3o,S3o,f2,vde,R3o,P3o,Aj,B3o,I3o,q3o,m2,Fde,N3o,j3o,yj,D3o,G3o,O3o,g2,Tde,V3o,X3o,Lj,z3o,W3o,Q3o,h2,Mde,H3o,U3o,xj,J3o,Y3o,K3o,p2,Ede,Z3o,ewo,$j,owo,rwo,two,_2,Cde,awo,nwo,kj,swo,lwo,iwo,u2,wde,dwo,cwo,Sj,fwo,mwo,gwo,b2,Ade,hwo,pwo,Rj,_wo,uwo,bwo,v2,yde,vwo,Fwo,Pj,Two,Mwo,Ewo,F2,Lde,Cwo,wwo,Bj,Awo,ywo,Lwo,T2,xde,xwo,$wo,Ij,kwo,Swo,Rwo,M2,$de,Pwo,Bwo,qj,Iwo,qwo,Nwo,E2,kde,jwo,Dwo,Nj,Gwo,Owo,Vwo,C2,Xwo,Sde,zwo,Wwo,Rde,Qwo,Hwo,w2,Tqe,Ii,A2,Pde,oy,Uwo,Bde,Jwo,Mqe,ko,ry,Ywo,qi,Kwo,jj,Zwo,e0o,Dj,o0o,r0o,t0o,ty,a0o,Ide,n0o,s0o,l0o,st,ay,i0o,qde,d0o,c0o,Ni,f0o,Nde,m0o,g0o,Gj,h0o,p0o,_0o,y2,u0o,Ze,ny,b0o,jde,v0o,F0o,ka,T0o,Dde,M0o,E0o,Gde,C0o,w0o,Ode,A0o,y0o,L0o,W,L2,Vde,x0o,$0o,Oj,k0o,S0o,R0o,x2,Xde,P0o,B0o,Vj,I0o,q0o,N0o,$2,zde,j0o,D0o,Xj,G0o,O0o,V0o,k2,Wde,X0o,z0o,zj,W0o,Q0o,H0o,S2,Qde,U0o,J0o,Wj,Y0o,K0o,Z0o,R2,Hde,eAo,oAo,Qj,rAo,tAo,aAo,P2,Ude,nAo,sAo,Hj,lAo,iAo,dAo,B2,Jde,cAo,fAo,Uj,mAo,gAo,hAo,I2,Yde,pAo,_Ao,Jj,uAo,bAo,vAo,q2,Kde,FAo,TAo,Yj,MAo,EAo,CAo,N2,Zde,wAo,AAo,Kj,yAo,LAo,xAo,j2,ece,$Ao,kAo,Zj,SAo,RAo,PAo,D2,oce,BAo,IAo,eD,qAo,NAo,jAo,G2,rce,DAo,GAo,oD,OAo,VAo,XAo,O2,tce,zAo,WAo,rD,QAo,HAo,UAo,V2,ace,JAo,YAo,tD,KAo,ZAo,e6o,X2,nce,o6o,r6o,aD,t6o,a6o,n6o,z2,sce,s6o,l6o,nD,i6o,d6o,c6o,W2,lce,f6o,m6o,sD,g6o,h6o,p6o,Q2,ice,_6o,u6o,lD,b6o,v6o,F6o,H2,dce,T6o,M6o,iD,E6o,C6o,w6o,U2,cce,A6o,y6o,dD,L6o,x6o,$6o,J2,fce,k6o,S6o,cD,R6o,P6o,B6o,Y2,mce,I6o,q6o,fD,N6o,j6o,D6o,K2,gce,G6o,O6o,mD,V6o,X6o,z6o,Z2,hce,W6o,Q6o,gD,H6o,U6o,J6o,e1,pce,Y6o,K6o,hD,Z6o,eyo,oyo,o1,_ce,ryo,tyo,pD,ayo,nyo,syo,r1,uce,lyo,iyo,_D,dyo,cyo,fyo,t1,bce,myo,gyo,uD,hyo,pyo,_yo,a1,vce,uyo,byo,Fce,vyo,Fyo,Tyo,n1,Tce,Myo,Eyo,bD,Cyo,wyo,Ayo,s1,Mce,yyo,Lyo,vD,xyo,$yo,kyo,l1,Ece,Syo,Ryo,FD,Pyo,Byo,Iyo,i1,Cce,qyo,Nyo,TD,jyo,Dyo,Gyo,d1,Oyo,wce,Vyo,Xyo,Ace,zyo,Wyo,c1,Eqe,ji,f1,yce,sy,Qyo,Lce,Hyo,Cqe,So,ly,Uyo,Di,Jyo,MD,Yyo,Kyo,ED,Zyo,eLo,oLo,iy,rLo,xce,tLo,aLo,nLo,lt,dy,sLo,$ce,lLo,iLo,Gi,dLo,kce,cLo,fLo,CD,mLo,gLo,hLo,m1,pLo,eo,cy,_Lo,Sce,uLo,bLo,Sa,vLo,Rce,FLo,TLo,Pce,MLo,ELo,Bce,CLo,wLo,ALo,_e,g1,Ice,yLo,LLo,wD,xLo,$Lo,kLo,h1,qce,SLo,RLo,AD,PLo,BLo,ILo,p1,Nce,qLo,NLo,yD,jLo,DLo,GLo,_1,jce,OLo,VLo,LD,XLo,zLo,WLo,u1,Dce,QLo,HLo,xD,ULo,JLo,YLo,b1,Gce,KLo,ZLo,$D,e8o,o8o,r8o,v1,Oce,t8o,a8o,kD,n8o,s8o,l8o,F1,Vce,i8o,d8o,SD,c8o,f8o,m8o,T1,Xce,g8o,h8o,RD,p8o,_8o,u8o,M1,zce,b8o,v8o,PD,F8o,T8o,M8o,E1,Wce,E8o,C8o,BD,w8o,A8o,y8o,C1,Qce,L8o,x8o,ID,$8o,k8o,S8o,w1,Hce,R8o,P8o,qD,B8o,I8o,q8o,A1,Uce,N8o,j8o,ND,D8o,G8o,O8o,y1,Jce,V8o,X8o,jD,z8o,W8o,Q8o,L1,Yce,H8o,U8o,DD,J8o,Y8o,K8o,x1,Z8o,Kce,e9o,o9o,Zce,r9o,t9o,$1,wqe,Oi,k1,efe,fy,a9o,ofe,n9o,Aqe,Ro,my,s9o,Vi,l9o,GD,i9o,d9o,OD,c9o,f9o,m9o,gy,g9o,rfe,h9o,p9o,_9o,it,hy,u9o,tfe,b9o,v9o,Xi,F9o,afe,T9o,M9o,VD,E9o,C9o,w9o,S1,A9o,oo,py,y9o,nfe,L9o,x9o,Ra,$9o,sfe,k9o,S9o,lfe,R9o,P9o,ife,B9o,I9o,q9o,q,R1,dfe,N9o,j9o,XD,D9o,G9o,O9o,P1,cfe,V9o,X9o,zD,z9o,W9o,Q9o,B1,ffe,H9o,U9o,WD,J9o,Y9o,K9o,I1,mfe,Z9o,exo,QD,oxo,rxo,txo,q1,gfe,axo,nxo,HD,sxo,lxo,ixo,N1,hfe,dxo,cxo,UD,fxo,mxo,gxo,j1,pfe,hxo,pxo,JD,_xo,uxo,bxo,D1,_fe,vxo,Fxo,YD,Txo,Mxo,Exo,G1,ufe,Cxo,wxo,KD,Axo,yxo,Lxo,O1,bfe,xxo,$xo,ZD,kxo,Sxo,Rxo,V1,vfe,Pxo,Bxo,eG,Ixo,qxo,Nxo,X1,Ffe,jxo,Dxo,oG,Gxo,Oxo,Vxo,z1,Tfe,Xxo,zxo,rG,Wxo,Qxo,Hxo,W1,Mfe,Uxo,Jxo,tG,Yxo,Kxo,Zxo,Q1,Efe,e$o,o$o,aG,r$o,t$o,a$o,H1,Cfe,n$o,s$o,nG,l$o,i$o,d$o,U1,wfe,c$o,f$o,sG,m$o,g$o,h$o,J1,Afe,p$o,_$o,lG,u$o,b$o,v$o,Y1,yfe,F$o,T$o,iG,M$o,E$o,C$o,K1,Lfe,w$o,A$o,dG,y$o,L$o,x$o,Z1,xfe,$$o,k$o,cG,S$o,R$o,P$o,eb,$fe,B$o,I$o,fG,q$o,N$o,j$o,ob,kfe,D$o,G$o,mG,O$o,V$o,X$o,rb,Sfe,z$o,W$o,gG,Q$o,H$o,U$o,tb,Rfe,J$o,Y$o,hG,K$o,Z$o,eko,ab,Pfe,oko,rko,pG,tko,ako,nko,nb,Bfe,sko,lko,_G,iko,dko,cko,sb,Ife,fko,mko,uG,gko,hko,pko,lb,qfe,_ko,uko,bG,bko,vko,Fko,ib,Nfe,Tko,Mko,vG,Eko,Cko,wko,db,jfe,Ako,yko,FG,Lko,xko,$ko,cb,Dfe,kko,Sko,TG,Rko,Pko,Bko,fb,Gfe,Iko,qko,MG,Nko,jko,Dko,mb,Ofe,Gko,Oko,EG,Vko,Xko,zko,gb,Vfe,Wko,Qko,CG,Hko,Uko,Jko,hb,Xfe,Yko,Kko,wG,Zko,eSo,oSo,pb,zfe,rSo,tSo,AG,aSo,nSo,sSo,_b,Wfe,lSo,iSo,yG,dSo,cSo,fSo,ub,Qfe,mSo,gSo,LG,hSo,pSo,_So,bb,Hfe,uSo,bSo,xG,vSo,FSo,TSo,vb,Ufe,MSo,ESo,$G,CSo,wSo,ASo,Fb,Jfe,ySo,LSo,kG,xSo,$So,kSo,Tb,Yfe,SSo,RSo,SG,PSo,BSo,ISo,Mb,Kfe,qSo,NSo,RG,jSo,DSo,GSo,Eb,Zfe,OSo,VSo,PG,XSo,zSo,WSo,Cb,eme,QSo,HSo,BG,USo,JSo,YSo,wb,KSo,ome,ZSo,eRo,rme,oRo,rRo,Ab,yqe,zi,yb,tme,_y,tRo,ame,aRo,Lqe,Po,uy,nRo,Wi,sRo,IG,lRo,iRo,qG,dRo,cRo,fRo,by,mRo,nme,gRo,hRo,pRo,dt,vy,_Ro,sme,uRo,bRo,Qi,vRo,lme,FRo,TRo,NG,MRo,ERo,CRo,Lb,wRo,ro,Fy,ARo,ime,yRo,LRo,Pa,xRo,dme,$Ro,kRo,cme,SRo,RRo,fme,PRo,BRo,IRo,Y,xb,mme,qRo,NRo,jG,jRo,DRo,GRo,$b,gme,ORo,VRo,DG,XRo,zRo,WRo,kb,hme,QRo,HRo,GG,URo,JRo,YRo,Sb,pme,KRo,ZRo,OG,ePo,oPo,rPo,Rb,_me,tPo,aPo,VG,nPo,sPo,lPo,Pb,ume,iPo,dPo,XG,cPo,fPo,mPo,Bb,bme,gPo,hPo,zG,pPo,_Po,uPo,Ib,vme,bPo,vPo,WG,FPo,TPo,MPo,qb,Fme,EPo,CPo,QG,wPo,APo,yPo,Nb,Tme,LPo,xPo,HG,$Po,kPo,SPo,jb,Mme,RPo,PPo,UG,BPo,IPo,qPo,Db,Eme,NPo,jPo,JG,DPo,GPo,OPo,Gb,Cme,VPo,XPo,YG,zPo,WPo,QPo,Ob,wme,HPo,UPo,KG,JPo,YPo,KPo,Vb,Ame,ZPo,eBo,ZG,oBo,rBo,tBo,Xb,yme,aBo,nBo,eO,sBo,lBo,iBo,zb,Lme,dBo,cBo,oO,fBo,mBo,gBo,Wb,xme,hBo,pBo,rO,_Bo,uBo,bBo,Qb,$me,vBo,FBo,tO,TBo,MBo,EBo,Hb,kme,CBo,wBo,aO,ABo,yBo,LBo,Ub,Sme,xBo,$Bo,nO,kBo,SBo,RBo,Jb,Rme,PBo,BBo,sO,IBo,qBo,NBo,Yb,Pme,jBo,DBo,lO,GBo,OBo,VBo,Kb,Bme,XBo,zBo,iO,WBo,QBo,HBo,Zb,Ime,UBo,JBo,dO,YBo,KBo,ZBo,e4,qme,eIo,oIo,cO,rIo,tIo,aIo,o4,Nme,nIo,sIo,fO,lIo,iIo,dIo,r4,jme,cIo,fIo,mO,mIo,gIo,hIo,t4,Dme,pIo,_Io,gO,uIo,bIo,vIo,a4,FIo,Gme,TIo,MIo,Ome,EIo,CIo,n4,xqe,Hi,s4,Vme,Ty,wIo,Xme,AIo,$qe,Bo,My,yIo,Ui,LIo,hO,xIo,$Io,pO,kIo,SIo,RIo,Ey,PIo,zme,BIo,IIo,qIo,ct,Cy,NIo,Wme,jIo,DIo,Ji,GIo,Qme,OIo,VIo,_O,XIo,zIo,WIo,l4,QIo,to,wy,HIo,Hme,UIo,JIo,Ba,YIo,Ume,KIo,ZIo,Jme,eqo,oqo,Yme,rqo,tqo,aqo,Yr,i4,Kme,nqo,sqo,uO,lqo,iqo,dqo,d4,Zme,cqo,fqo,bO,mqo,gqo,hqo,c4,ege,pqo,_qo,vO,uqo,bqo,vqo,f4,oge,Fqo,Tqo,FO,Mqo,Eqo,Cqo,m4,rge,wqo,Aqo,TO,yqo,Lqo,xqo,g4,$qo,tge,kqo,Sqo,age,Rqo,Pqo,h4,kqe,Yi,p4,nge,Ay,Bqo,sge,Iqo,Sqe,Io,yy,qqo,Ki,Nqo,MO,jqo,Dqo,EO,Gqo,Oqo,Vqo,Ly,Xqo,lge,zqo,Wqo,Qqo,ft,xy,Hqo,ige,Uqo,Jqo,Zi,Yqo,dge,Kqo,Zqo,CO,eNo,oNo,rNo,_4,tNo,ao,$y,aNo,cge,nNo,sNo,Ia,lNo,fge,iNo,dNo,mge,cNo,fNo,gge,mNo,gNo,hNo,U,u4,hge,pNo,_No,wO,uNo,bNo,vNo,b4,pge,FNo,TNo,AO,MNo,ENo,CNo,v4,_ge,wNo,ANo,yO,yNo,LNo,xNo,F4,uge,$No,kNo,LO,SNo,RNo,PNo,T4,bge,BNo,INo,xO,qNo,NNo,jNo,M4,vge,DNo,GNo,$O,ONo,VNo,XNo,E4,Fge,zNo,WNo,kO,QNo,HNo,UNo,C4,Tge,JNo,YNo,SO,KNo,ZNo,ejo,w4,Mge,ojo,rjo,RO,tjo,ajo,njo,A4,Ege,sjo,ljo,PO,ijo,djo,cjo,y4,Cge,fjo,mjo,BO,gjo,hjo,pjo,L4,wge,_jo,ujo,IO,bjo,vjo,Fjo,x4,Age,Tjo,Mjo,qO,Ejo,Cjo,wjo,$4,yge,Ajo,yjo,NO,Ljo,xjo,$jo,k4,Lge,kjo,Sjo,jO,Rjo,Pjo,Bjo,S4,xge,Ijo,qjo,DO,Njo,jjo,Djo,R4,$ge,Gjo,Ojo,GO,Vjo,Xjo,zjo,P4,kge,Wjo,Qjo,OO,Hjo,Ujo,Jjo,B4,Sge,Yjo,Kjo,VO,Zjo,eDo,oDo,I4,Rge,rDo,tDo,XO,aDo,nDo,sDo,q4,Pge,lDo,iDo,zO,dDo,cDo,fDo,N4,Bge,mDo,gDo,WO,hDo,pDo,_Do,j4,Ige,uDo,bDo,QO,vDo,FDo,TDo,D4,qge,MDo,EDo,HO,CDo,wDo,ADo,G4,Nge,yDo,LDo,UO,xDo,$Do,kDo,O4,jge,SDo,RDo,JO,PDo,BDo,IDo,V4,Dge,qDo,NDo,YO,jDo,DDo,GDo,X4,Gge,ODo,VDo,KO,XDo,zDo,WDo,z4,Oge,QDo,HDo,ZO,UDo,JDo,YDo,W4,Vge,KDo,ZDo,eV,eGo,oGo,rGo,Q4,Xge,tGo,aGo,oV,nGo,sGo,lGo,H4,zge,iGo,dGo,rV,cGo,fGo,mGo,U4,Wge,gGo,hGo,tV,pGo,_Go,uGo,J4,bGo,Qge,vGo,FGo,Hge,TGo,MGo,Y4,Rqe,ed,K4,Uge,ky,EGo,Jge,CGo,Pqe,qo,Sy,wGo,od,AGo,aV,yGo,LGo,nV,xGo,$Go,kGo,Ry,SGo,Yge,RGo,PGo,BGo,mt,Py,IGo,Kge,qGo,NGo,rd,jGo,Zge,DGo,GGo,sV,OGo,VGo,XGo,Z4,zGo,no,By,WGo,ehe,QGo,HGo,qa,UGo,ohe,JGo,YGo,rhe,KGo,ZGo,the,eOo,oOo,rOo,V,e5,ahe,tOo,aOo,lV,nOo,sOo,lOo,o5,nhe,iOo,dOo,iV,cOo,fOo,mOo,r5,she,gOo,hOo,dV,pOo,_Oo,uOo,t5,lhe,bOo,vOo,cV,FOo,TOo,MOo,a5,ihe,EOo,COo,fV,wOo,AOo,yOo,n5,dhe,LOo,xOo,mV,$Oo,kOo,SOo,s5,che,ROo,POo,gV,BOo,IOo,qOo,l5,fhe,NOo,jOo,hV,DOo,GOo,OOo,i5,mhe,VOo,XOo,pV,zOo,WOo,QOo,d5,ghe,HOo,UOo,_V,JOo,YOo,KOo,c5,hhe,ZOo,eVo,uV,oVo,rVo,tVo,f5,phe,aVo,nVo,bV,sVo,lVo,iVo,m5,_he,dVo,cVo,vV,fVo,mVo,gVo,g5,uhe,hVo,pVo,FV,_Vo,uVo,bVo,h5,bhe,vVo,FVo,TV,TVo,MVo,EVo,p5,vhe,CVo,wVo,MV,AVo,yVo,LVo,_5,Fhe,xVo,$Vo,EV,kVo,SVo,RVo,u5,The,PVo,BVo,CV,IVo,qVo,NVo,b5,Mhe,jVo,DVo,wV,GVo,OVo,VVo,v5,Ehe,XVo,zVo,AV,WVo,QVo,HVo,F5,Che,UVo,JVo,yV,YVo,KVo,ZVo,T5,whe,eXo,oXo,LV,rXo,tXo,aXo,M5,Ahe,nXo,sXo,xV,lXo,iXo,dXo,E5,yhe,cXo,fXo,$V,mXo,gXo,hXo,C5,Lhe,pXo,_Xo,kV,uXo,bXo,vXo,w5,xhe,FXo,TXo,SV,MXo,EXo,CXo,A5,$he,wXo,AXo,RV,yXo,LXo,xXo,y5,khe,$Xo,kXo,PV,SXo,RXo,PXo,L5,She,BXo,IXo,BV,qXo,NXo,jXo,x5,Rhe,DXo,GXo,IV,OXo,VXo,XXo,$5,Phe,zXo,WXo,qV,QXo,HXo,UXo,k5,Bhe,JXo,YXo,NV,KXo,ZXo,ezo,S5,Ihe,ozo,rzo,jV,tzo,azo,nzo,R5,qhe,szo,lzo,DV,izo,dzo,czo,P5,Nhe,fzo,mzo,GV,gzo,hzo,pzo,B5,jhe,_zo,uzo,OV,bzo,vzo,Fzo,I5,Dhe,Tzo,Mzo,VV,Ezo,Czo,wzo,q5,Ghe,Azo,yzo,XV,Lzo,xzo,$zo,N5,Ohe,kzo,Szo,zV,Rzo,Pzo,Bzo,j5,Izo,Vhe,qzo,Nzo,Xhe,jzo,Dzo,D5,Bqe,td,G5,zhe,Iy,Gzo,Whe,Ozo,Iqe,No,qy,Vzo,ad,Xzo,WV,zzo,Wzo,QV,Qzo,Hzo,Uzo,Ny,Jzo,Qhe,Yzo,Kzo,Zzo,gt,jy,eWo,Hhe,oWo,rWo,nd,tWo,Uhe,aWo,nWo,HV,sWo,lWo,iWo,O5,dWo,so,Dy,cWo,Jhe,fWo,mWo,Na,gWo,Yhe,hWo,pWo,Khe,_Wo,uWo,Zhe,bWo,vWo,FWo,epe,V5,ope,TWo,MWo,UV,EWo,CWo,wWo,X5,AWo,rpe,yWo,LWo,tpe,xWo,$Wo,z5,qqe,sd,W5,ape,Gy,kWo,npe,SWo,Nqe,jo,Oy,RWo,ld,PWo,JV,BWo,IWo,YV,qWo,NWo,jWo,Vy,DWo,spe,GWo,OWo,VWo,ht,Xy,XWo,lpe,zWo,WWo,id,QWo,ipe,HWo,UWo,KV,JWo,YWo,KWo,Q5,ZWo,lo,zy,eQo,dpe,oQo,rQo,ja,tQo,cpe,aQo,nQo,fpe,sQo,lQo,mpe,iQo,dQo,cQo,Fe,H5,gpe,fQo,mQo,ZV,gQo,hQo,pQo,U5,hpe,_Qo,uQo,eX,bQo,vQo,FQo,J5,ppe,TQo,MQo,oX,EQo,CQo,wQo,Y5,_pe,AQo,yQo,rX,LQo,xQo,$Qo,qs,upe,kQo,SQo,tX,RQo,PQo,aX,BQo,IQo,qQo,K5,bpe,NQo,jQo,nX,DQo,GQo,OQo,pt,vpe,VQo,XQo,sX,zQo,WQo,lX,QQo,HQo,iX,UQo,JQo,YQo,Z5,Fpe,KQo,ZQo,dX,eHo,oHo,rHo,ev,Tpe,tHo,aHo,cX,nHo,sHo,lHo,ov,Mpe,iHo,dHo,fX,cHo,fHo,mHo,rv,Epe,gHo,hHo,mX,pHo,_Ho,uHo,tv,Cpe,bHo,vHo,gX,FHo,THo,MHo,av,wpe,EHo,CHo,hX,wHo,AHo,yHo,nv,Ape,LHo,xHo,pX,$Ho,kHo,SHo,sv,RHo,ype,PHo,BHo,Lpe,IHo,qHo,lv,jqe,dd,iv,xpe,Wy,NHo,$pe,jHo,Dqe,Do,Qy,DHo,cd,GHo,_X,OHo,VHo,uX,XHo,zHo,WHo,Hy,QHo,kpe,HHo,UHo,JHo,_t,Uy,YHo,Spe,KHo,ZHo,fd,eUo,Rpe,oUo,rUo,bX,tUo,aUo,nUo,dv,sUo,io,Jy,lUo,Ppe,iUo,dUo,Da,cUo,Bpe,fUo,mUo,Ipe,gUo,hUo,qpe,pUo,_Uo,uUo,Npe,cv,jpe,bUo,vUo,vX,FUo,TUo,MUo,fv,EUo,Dpe,CUo,wUo,Gpe,AUo,yUo,mv,Gqe,md,gv,Ope,Yy,LUo,Vpe,xUo,Oqe,Go,Ky,$Uo,gd,kUo,FX,SUo,RUo,TX,PUo,BUo,IUo,Zy,qUo,Xpe,NUo,jUo,DUo,ut,eL,GUo,zpe,OUo,VUo,hd,XUo,Wpe,zUo,WUo,MX,QUo,HUo,UUo,hv,JUo,co,oL,YUo,Qpe,KUo,ZUo,Ga,eJo,Hpe,oJo,rJo,Upe,tJo,aJo,Jpe,nJo,sJo,lJo,ke,pv,Ype,iJo,dJo,EX,cJo,fJo,mJo,_v,Kpe,gJo,hJo,CX,pJo,_Jo,uJo,uv,Zpe,bJo,vJo,wX,FJo,TJo,MJo,bv,e_e,EJo,CJo,AX,wJo,AJo,yJo,vv,o_e,LJo,xJo,yX,$Jo,kJo,SJo,Fv,r_e,RJo,PJo,LX,BJo,IJo,qJo,Tv,t_e,NJo,jJo,xX,DJo,GJo,OJo,Mv,a_e,VJo,XJo,$X,zJo,WJo,QJo,Ev,n_e,HJo,UJo,kX,JJo,YJo,KJo,Cv,ZJo,s_e,eYo,oYo,l_e,rYo,tYo,wv,Vqe,pd,Av,i_e,rL,aYo,d_e,nYo,Xqe,Oo,tL,sYo,_d,lYo,SX,iYo,dYo,RX,cYo,fYo,mYo,aL,gYo,c_e,hYo,pYo,_Yo,bt,nL,uYo,f_e,bYo,vYo,ud,FYo,m_e,TYo,MYo,PX,EYo,CYo,wYo,yv,AYo,fo,sL,yYo,g_e,LYo,xYo,Oa,$Yo,h_e,kYo,SYo,p_e,RYo,PYo,__e,BYo,IYo,qYo,Kr,Lv,u_e,NYo,jYo,BX,DYo,GYo,OYo,xv,b_e,VYo,XYo,IX,zYo,WYo,QYo,$v,v_e,HYo,UYo,qX,JYo,YYo,KYo,kv,F_e,ZYo,eKo,NX,oKo,rKo,tKo,Sv,T_e,aKo,nKo,jX,sKo,lKo,iKo,Rv,dKo,M_e,cKo,fKo,E_e,mKo,gKo,Pv,zqe,bd,Bv,C_e,lL,hKo,w_e,pKo,Wqe,Vo,iL,_Ko,vd,uKo,DX,bKo,vKo,GX,FKo,TKo,MKo,dL,EKo,A_e,CKo,wKo,AKo,vt,cL,yKo,y_e,LKo,xKo,Fd,$Ko,L_e,kKo,SKo,OX,RKo,PKo,BKo,Iv,IKo,mo,fL,qKo,x_e,NKo,jKo,Va,DKo,$_e,GKo,OKo,k_e,VKo,XKo,S_e,zKo,WKo,QKo,Se,qv,R_e,HKo,UKo,VX,JKo,YKo,KKo,Nv,P_e,ZKo,eZo,XX,oZo,rZo,tZo,jv,B_e,aZo,nZo,zX,sZo,lZo,iZo,Dv,I_e,dZo,cZo,WX,fZo,mZo,gZo,Gv,q_e,hZo,pZo,QX,_Zo,uZo,bZo,Ov,N_e,vZo,FZo,HX,TZo,MZo,EZo,Vv,j_e,CZo,wZo,UX,AZo,yZo,LZo,Xv,D_e,xZo,$Zo,JX,kZo,SZo,RZo,zv,G_e,PZo,BZo,YX,IZo,qZo,NZo,Wv,jZo,O_e,DZo,GZo,V_e,OZo,VZo,Qv,Qqe,Td,Hv,X_e,mL,XZo,z_e,zZo,Hqe,Xo,gL,WZo,Md,QZo,KX,HZo,UZo,ZX,JZo,YZo,KZo,hL,ZZo,W_e,eer,oer,rer,Ft,pL,ter,Q_e,aer,ner,Ed,ser,H_e,ler,ier,ez,der,cer,fer,Uv,mer,go,_L,ger,U_e,her,per,Xa,_er,J_e,uer,ber,Y_e,ver,Fer,K_e,Ter,Mer,Eer,uL,Jv,Z_e,Cer,wer,oz,Aer,yer,Ler,Yv,eue,xer,$er,rz,ker,Ser,Rer,Kv,Per,oue,Ber,Ier,rue,qer,Ner,Zv,Uqe,Cd,eF,tue,bL,jer,aue,Der,Jqe,zo,vL,Ger,wd,Oer,tz,Ver,Xer,az,zer,Wer,Qer,FL,Her,nue,Uer,Jer,Yer,Tt,TL,Ker,sue,Zer,eor,Ad,oor,lue,ror,tor,nz,aor,nor,sor,oF,lor,ho,ML,ior,iue,dor,cor,za,mor,due,gor,hor,cue,por,_or,fue,uor,bor,vor,Zr,rF,mue,For,Tor,sz,Mor,Eor,Cor,tF,gue,wor,Aor,lz,yor,Lor,xor,aF,hue,$or,kor,iz,Sor,Ror,Por,nF,pue,Bor,Ior,dz,qor,Nor,jor,sF,_ue,Dor,Gor,cz,Oor,Vor,Xor,lF,zor,uue,Wor,Qor,bue,Hor,Uor,iF,Yqe,yd,dF,vue,EL,Jor,Fue,Yor,Kqe,Wo,CL,Kor,Ld,Zor,fz,err,orr,mz,rrr,trr,arr,wL,nrr,Tue,srr,lrr,irr,Mt,AL,drr,Mue,crr,frr,xd,mrr,Eue,grr,hrr,gz,prr,_rr,urr,cF,brr,po,yL,vrr,Cue,Frr,Trr,Wa,Mrr,wue,Err,Crr,Aue,wrr,Arr,yue,yrr,Lrr,xrr,$d,fF,Lue,$rr,krr,hz,Srr,Rrr,Prr,mF,xue,Brr,Irr,pz,qrr,Nrr,jrr,gF,$ue,Drr,Grr,_z,Orr,Vrr,Xrr,hF,zrr,kue,Wrr,Qrr,Sue,Hrr,Urr,pF,Zqe,kd,_F,Rue,LL,Jrr,Pue,Yrr,eNe,Qo,xL,Krr,Sd,Zrr,uz,etr,otr,bz,rtr,ttr,atr,$L,ntr,Bue,str,ltr,itr,Et,kL,dtr,Iue,ctr,ftr,Rd,mtr,que,gtr,htr,vz,ptr,_tr,utr,uF,btr,_o,SL,vtr,Nue,Ftr,Ttr,Qa,Mtr,jue,Etr,Ctr,Due,wtr,Atr,Gue,ytr,Ltr,xtr,RL,bF,Oue,$tr,ktr,Fz,Str,Rtr,Ptr,vF,Vue,Btr,Itr,Tz,qtr,Ntr,jtr,FF,Dtr,Xue,Gtr,Otr,zue,Vtr,Xtr,TF,oNe,Pd,MF,Wue,PL,ztr,Que,Wtr,rNe,Ho,BL,Qtr,Bd,Htr,Mz,Utr,Jtr,Ez,Ytr,Ktr,Ztr,IL,ear,Hue,oar,rar,tar,Ct,qL,aar,Uue,nar,sar,Id,lar,Jue,iar,dar,Cz,car,far,mar,EF,gar,uo,NL,har,Yue,par,_ar,Ha,uar,Kue,bar,Far,Zue,Tar,Mar,e2e,Ear,Car,war,o2e,CF,r2e,Aar,yar,wz,Lar,xar,$ar,wF,kar,t2e,Sar,Rar,a2e,Par,Bar,AF,tNe,qd,yF,n2e,jL,Iar,s2e,qar,aNe,Uo,DL,Nar,Nd,jar,Az,Dar,Gar,yz,Oar,Var,Xar,GL,zar,l2e,War,Qar,Har,wt,OL,Uar,i2e,Jar,Yar,jd,Kar,d2e,Zar,enr,Lz,onr,rnr,tnr,LF,anr,bo,VL,nnr,c2e,snr,lnr,Ua,inr,f2e,dnr,cnr,m2e,fnr,mnr,g2e,gnr,hnr,pnr,Ja,xF,h2e,_nr,unr,xz,bnr,vnr,Fnr,$F,p2e,Tnr,Mnr,$z,Enr,Cnr,wnr,kF,_2e,Anr,ynr,kz,Lnr,xnr,$nr,SF,u2e,knr,Snr,Sz,Rnr,Pnr,Bnr,RF,Inr,b2e,qnr,Nnr,v2e,jnr,Dnr,PF,nNe,Dd,BF,F2e,XL,Gnr,T2e,Onr,sNe,Jo,zL,Vnr,Gd,Xnr,Rz,znr,Wnr,Pz,Qnr,Hnr,Unr,WL,Jnr,M2e,Ynr,Knr,Znr,At,QL,esr,E2e,osr,rsr,Od,tsr,C2e,asr,nsr,Bz,ssr,lsr,isr,IF,dsr,vo,HL,csr,w2e,fsr,msr,Ya,gsr,A2e,hsr,psr,y2e,_sr,usr,L2e,bsr,vsr,Fsr,x2e,qF,$2e,Tsr,Msr,Iz,Esr,Csr,wsr,NF,Asr,k2e,ysr,Lsr,S2e,xsr,$sr,jF,lNe,Vd,DF,R2e,UL,ksr,P2e,Ssr,iNe,Yo,JL,Rsr,Xd,Psr,qz,Bsr,Isr,Nz,qsr,Nsr,jsr,YL,Dsr,B2e,Gsr,Osr,Vsr,yt,KL,Xsr,I2e,zsr,Wsr,zd,Qsr,q2e,Hsr,Usr,jz,Jsr,Ysr,Ksr,GF,Zsr,wr,ZL,elr,N2e,olr,rlr,Ka,tlr,j2e,alr,nlr,D2e,slr,llr,G2e,ilr,dlr,clr,N,OF,O2e,flr,mlr,Dz,glr,hlr,plr,VF,V2e,_lr,ulr,Gz,blr,vlr,Flr,XF,X2e,Tlr,Mlr,Oz,Elr,Clr,wlr,zF,z2e,Alr,ylr,Vz,Llr,xlr,$lr,WF,W2e,klr,Slr,Xz,Rlr,Plr,Blr,QF,Q2e,Ilr,qlr,zz,Nlr,jlr,Dlr,HF,H2e,Glr,Olr,Wz,Vlr,Xlr,zlr,UF,U2e,Wlr,Qlr,Qz,Hlr,Ulr,Jlr,JF,J2e,Ylr,Klr,Hz,Zlr,eir,oir,YF,Y2e,rir,tir,Uz,air,nir,sir,KF,K2e,lir,iir,Jz,dir,cir,fir,ZF,Z2e,mir,gir,Yz,hir,pir,_ir,eT,e1e,uir,bir,Kz,vir,Fir,Tir,oT,o1e,Mir,Eir,Zz,Cir,wir,Air,rT,r1e,yir,Lir,eW,xir,$ir,kir,tT,t1e,Sir,Rir,oW,Pir,Bir,Iir,aT,a1e,qir,Nir,rW,jir,Dir,Gir,Ns,n1e,Oir,Vir,tW,Xir,zir,aW,Wir,Qir,Hir,nT,s1e,Uir,Jir,nW,Yir,Kir,Zir,sT,l1e,edr,odr,sW,rdr,tdr,adr,lT,i1e,ndr,sdr,lW,ldr,idr,ddr,iT,d1e,cdr,fdr,iW,mdr,gdr,hdr,dT,c1e,pdr,_dr,dW,udr,bdr,vdr,cT,f1e,Fdr,Tdr,cW,Mdr,Edr,Cdr,fT,m1e,wdr,Adr,fW,ydr,Ldr,xdr,mT,g1e,$dr,kdr,mW,Sdr,Rdr,Pdr,gT,h1e,Bdr,Idr,gW,qdr,Ndr,jdr,hT,p1e,Ddr,Gdr,hW,Odr,Vdr,Xdr,pT,_1e,zdr,Wdr,pW,Qdr,Hdr,Udr,_T,u1e,Jdr,Ydr,_W,Kdr,Zdr,ecr,uT,b1e,ocr,rcr,uW,tcr,acr,ncr,bT,v1e,scr,lcr,bW,icr,dcr,ccr,vT,F1e,fcr,mcr,vW,gcr,hcr,pcr,FT,T1e,_cr,ucr,FW,bcr,vcr,Fcr,TT,M1e,Tcr,Mcr,TW,Ecr,Ccr,wcr,MT,E1e,Acr,ycr,MW,Lcr,xcr,$cr,ET,C1e,kcr,Scr,EW,Rcr,Pcr,Bcr,CT,w1e,Icr,qcr,CW,Ncr,jcr,Dcr,wT,A1e,Gcr,Ocr,wW,Vcr,Xcr,zcr,AT,y1e,Wcr,Qcr,AW,Hcr,Ucr,Jcr,yT,L1e,Ycr,Kcr,yW,Zcr,efr,ofr,LT,x1e,rfr,tfr,LW,afr,nfr,sfr,xT,$1e,lfr,ifr,xW,dfr,cfr,ffr,$T,k1e,mfr,gfr,$W,hfr,pfr,_fr,kT,S1e,ufr,bfr,kW,vfr,Ffr,Tfr,ST,R1e,Mfr,Efr,SW,Cfr,wfr,Afr,RT,dNe,Wd,PT,P1e,e8,yfr,B1e,Lfr,cNe,Ko,o8,xfr,Qd,$fr,RW,kfr,Sfr,PW,Rfr,Pfr,Bfr,r8,Ifr,I1e,qfr,Nfr,jfr,Lt,t8,Dfr,q1e,Gfr,Ofr,Hd,Vfr,N1e,Xfr,zfr,BW,Wfr,Qfr,Hfr,BT,Ufr,Ar,a8,Jfr,j1e,Yfr,Kfr,Za,Zfr,D1e,emr,omr,G1e,rmr,tmr,O1e,amr,nmr,smr,se,IT,V1e,lmr,imr,IW,dmr,cmr,fmr,qT,X1e,mmr,gmr,qW,hmr,pmr,_mr,NT,z1e,umr,bmr,NW,vmr,Fmr,Tmr,jT,W1e,Mmr,Emr,jW,Cmr,wmr,Amr,DT,Q1e,ymr,Lmr,DW,xmr,$mr,kmr,GT,H1e,Smr,Rmr,GW,Pmr,Bmr,Imr,OT,U1e,qmr,Nmr,OW,jmr,Dmr,Gmr,VT,J1e,Omr,Vmr,VW,Xmr,zmr,Wmr,XT,Y1e,Qmr,Hmr,XW,Umr,Jmr,Ymr,zT,K1e,Kmr,Zmr,zW,egr,ogr,rgr,WT,Z1e,tgr,agr,WW,ngr,sgr,lgr,QT,ebe,igr,dgr,QW,cgr,fgr,mgr,HT,obe,ggr,hgr,HW,pgr,_gr,ugr,UT,rbe,bgr,vgr,UW,Fgr,Tgr,Mgr,JT,tbe,Egr,Cgr,JW,wgr,Agr,ygr,YT,abe,Lgr,xgr,YW,$gr,kgr,Sgr,KT,nbe,Rgr,Pgr,KW,Bgr,Igr,qgr,ZT,sbe,Ngr,jgr,ZW,Dgr,Ggr,Ogr,e7,lbe,Vgr,Xgr,eQ,zgr,Wgr,Qgr,o7,ibe,Hgr,Ugr,oQ,Jgr,Ygr,Kgr,r7,dbe,Zgr,ehr,rQ,ohr,rhr,thr,t7,cbe,ahr,nhr,tQ,shr,lhr,ihr,a7,fbe,dhr,chr,aQ,fhr,mhr,ghr,n7,fNe,Ud,s7,mbe,n8,hhr,gbe,phr,mNe,Zo,s8,_hr,Jd,uhr,nQ,bhr,vhr,sQ,Fhr,Thr,Mhr,l8,Ehr,hbe,Chr,whr,Ahr,xt,i8,yhr,pbe,Lhr,xhr,Yd,$hr,_be,khr,Shr,lQ,Rhr,Phr,Bhr,l7,Ihr,yr,d8,qhr,ube,Nhr,jhr,en,Dhr,bbe,Ghr,Ohr,vbe,Vhr,Xhr,Fbe,zhr,Whr,Qhr,Me,i7,Tbe,Hhr,Uhr,iQ,Jhr,Yhr,Khr,d7,Mbe,Zhr,epr,dQ,opr,rpr,tpr,c7,Ebe,apr,npr,cQ,spr,lpr,ipr,f7,Cbe,dpr,cpr,fQ,fpr,mpr,gpr,m7,wbe,hpr,ppr,mQ,_pr,upr,bpr,g7,Abe,vpr,Fpr,gQ,Tpr,Mpr,Epr,h7,ybe,Cpr,wpr,hQ,Apr,ypr,Lpr,p7,Lbe,xpr,$pr,pQ,kpr,Spr,Rpr,_7,xbe,Ppr,Bpr,_Q,Ipr,qpr,Npr,u7,$be,jpr,Dpr,uQ,Gpr,Opr,Vpr,b7,kbe,Xpr,zpr,bQ,Wpr,Qpr,Hpr,v7,Sbe,Upr,Jpr,vQ,Ypr,Kpr,Zpr,F7,gNe,Kd,T7,Rbe,c8,e_r,Pbe,o_r,hNe,er,f8,r_r,Zd,t_r,FQ,a_r,n_r,TQ,s_r,l_r,i_r,m8,d_r,Bbe,c_r,f_r,m_r,$t,g8,g_r,Ibe,h_r,p_r,ec,__r,qbe,u_r,b_r,MQ,v_r,F_r,T_r,M7,M_r,Lr,h8,E_r,Nbe,C_r,w_r,on,A_r,jbe,y_r,L_r,Dbe,x_r,$_r,Gbe,k_r,S_r,R_r,rn,E7,Obe,P_r,B_r,EQ,I_r,q_r,N_r,C7,Vbe,j_r,D_r,CQ,G_r,O_r,V_r,w7,Xbe,X_r,z_r,wQ,W_r,Q_r,H_r,A7,zbe,U_r,J_r,AQ,Y_r,K_r,Z_r,y7,pNe,oc,L7,Wbe,p8,eur,Qbe,our,_Ne,or,_8,rur,rc,tur,yQ,aur,nur,LQ,sur,lur,iur,u8,dur,Hbe,cur,fur,mur,kt,b8,gur,Ube,hur,pur,tc,_ur,Jbe,uur,bur,xQ,vur,Fur,Tur,x7,Mur,xr,v8,Eur,Ybe,Cur,wur,tn,Aur,Kbe,yur,Lur,Zbe,xur,$ur,e4e,kur,Sur,Rur,ie,$7,o4e,Pur,Bur,$Q,Iur,qur,Nur,k7,r4e,jur,Dur,kQ,Gur,Our,Vur,S7,t4e,Xur,zur,SQ,Wur,Qur,Hur,R7,a4e,Uur,Jur,RQ,Yur,Kur,Zur,P7,n4e,e2r,o2r,PQ,r2r,t2r,a2r,B7,s4e,n2r,s2r,BQ,l2r,i2r,d2r,I7,l4e,c2r,f2r,IQ,m2r,g2r,h2r,q7,i4e,p2r,_2r,qQ,u2r,b2r,v2r,N7,d4e,F2r,T2r,NQ,M2r,E2r,C2r,j7,c4e,w2r,A2r,jQ,y2r,L2r,x2r,D7,f4e,$2r,k2r,DQ,S2r,R2r,P2r,G7,m4e,B2r,I2r,GQ,q2r,N2r,j2r,O7,g4e,D2r,G2r,OQ,O2r,V2r,X2r,V7,h4e,z2r,W2r,VQ,Q2r,H2r,U2r,X7,p4e,J2r,Y2r,XQ,K2r,Z2r,e1r,z7,_4e,o1r,r1r,zQ,t1r,a1r,n1r,W7,u4e,s1r,l1r,WQ,i1r,d1r,c1r,Q7,b4e,f1r,m1r,QQ,g1r,h1r,p1r,H7,v4e,_1r,u1r,HQ,b1r,v1r,F1r,U7,F4e,T1r,M1r,UQ,E1r,C1r,w1r,J7,uNe,ac,Y7,T4e,F8,A1r,M4e,y1r,bNe,rr,T8,L1r,nc,x1r,JQ,$1r,k1r,YQ,S1r,R1r,P1r,M8,B1r,E4e,I1r,q1r,N1r,St,E8,j1r,C4e,D1r,G1r,sc,O1r,w4e,V1r,X1r,KQ,z1r,W1r,Q1r,K7,H1r,$r,C8,U1r,A4e,J1r,Y1r,an,K1r,y4e,Z1r,ebr,L4e,obr,rbr,x4e,tbr,abr,nbr,ye,Z7,$4e,sbr,lbr,ZQ,ibr,dbr,cbr,eM,k4e,fbr,mbr,eH,gbr,hbr,pbr,oM,S4e,_br,ubr,oH,bbr,vbr,Fbr,rM,R4e,Tbr,Mbr,rH,Ebr,Cbr,wbr,tM,P4e,Abr,ybr,tH,Lbr,xbr,$br,aM,B4e,kbr,Sbr,aH,Rbr,Pbr,Bbr,nM,I4e,Ibr,qbr,nH,Nbr,jbr,Dbr,sM,q4e,Gbr,Obr,sH,Vbr,Xbr,zbr,lM,N4e,Wbr,Qbr,lH,Hbr,Ubr,Jbr,iM,j4e,Ybr,Kbr,iH,Zbr,e4r,o4r,dM,vNe,lc,cM,D4e,w8,r4r,G4e,t4r,FNe,tr,A8,a4r,ic,n4r,dH,s4r,l4r,cH,i4r,d4r,c4r,y8,f4r,O4e,m4r,g4r,h4r,Rt,L8,p4r,V4e,_4r,u4r,dc,b4r,X4e,v4r,F4r,fH,T4r,M4r,E4r,fM,C4r,kr,x8,w4r,z4e,A4r,y4r,nn,L4r,W4e,x4r,$4r,Q4e,k4r,S4r,H4e,R4r,P4r,B4r,ee,mM,U4e,I4r,q4r,mH,N4r,j4r,D4r,gM,J4e,G4r,O4r,gH,V4r,X4r,z4r,hM,Y4e,W4r,Q4r,hH,H4r,U4r,J4r,pM,K4e,Y4r,K4r,pH,Z4r,e5r,o5r,_M,Z4e,r5r,t5r,_H,a5r,n5r,s5r,uM,e5e,l5r,i5r,uH,d5r,c5r,f5r,bM,o5e,m5r,g5r,bH,h5r,p5r,_5r,vM,r5e,u5r,b5r,vH,v5r,F5r,T5r,FM,t5e,M5r,E5r,FH,C5r,w5r,A5r,TM,a5e,y5r,L5r,TH,x5r,$5r,k5r,MM,n5e,S5r,R5r,MH,P5r,B5r,I5r,EM,s5e,q5r,N5r,EH,j5r,D5r,G5r,CM,l5e,O5r,V5r,CH,X5r,z5r,W5r,wM,i5e,Q5r,H5r,wH,U5r,J5r,Y5r,AM,d5e,K5r,Z5r,AH,evr,ovr,rvr,yM,c5e,tvr,avr,yH,nvr,svr,lvr,LM,f5e,ivr,dvr,LH,cvr,fvr,mvr,xM,m5e,gvr,hvr,xH,pvr,_vr,uvr,$M,g5e,bvr,vvr,$H,Fvr,Tvr,Mvr,kM,h5e,Evr,Cvr,kH,wvr,Avr,yvr,SM,p5e,Lvr,xvr,SH,$vr,kvr,Svr,RM,_5e,Rvr,Pvr,RH,Bvr,Ivr,qvr,PM,u5e,Nvr,jvr,PH,Dvr,Gvr,Ovr,BM,b5e,Vvr,Xvr,BH,zvr,Wvr,Qvr,IM,v5e,Hvr,Uvr,IH,Jvr,Yvr,Kvr,qM,F5e,Zvr,eFr,qH,oFr,rFr,tFr,NM,TNe,cc,jM,T5e,$8,aFr,M5e,nFr,MNe,ar,k8,sFr,fc,lFr,NH,iFr,dFr,jH,cFr,fFr,mFr,S8,gFr,E5e,hFr,pFr,_Fr,Pt,R8,uFr,C5e,bFr,vFr,mc,FFr,w5e,TFr,MFr,DH,EFr,CFr,wFr,DM,AFr,Sr,P8,yFr,A5e,LFr,xFr,sn,$Fr,y5e,kFr,SFr,L5e,RFr,PFr,x5e,BFr,IFr,qFr,he,GM,$5e,NFr,jFr,GH,DFr,GFr,OFr,OM,k5e,VFr,XFr,OH,zFr,WFr,QFr,VM,S5e,HFr,UFr,VH,JFr,YFr,KFr,XM,R5e,ZFr,eTr,XH,oTr,rTr,tTr,zM,P5e,aTr,nTr,zH,sTr,lTr,iTr,WM,B5e,dTr,cTr,WH,fTr,mTr,gTr,QM,I5e,hTr,pTr,QH,_Tr,uTr,bTr,HM,q5e,vTr,FTr,HH,TTr,MTr,ETr,UM,N5e,CTr,wTr,UH,ATr,yTr,LTr,JM,j5e,xTr,$Tr,JH,kTr,STr,RTr,YM,D5e,PTr,BTr,YH,ITr,qTr,NTr,KM,G5e,jTr,DTr,KH,GTr,OTr,VTr,ZM,O5e,XTr,zTr,ZH,WTr,QTr,HTr,eE,V5e,UTr,JTr,eU,YTr,KTr,ZTr,oE,X5e,e7r,o7r,oU,r7r,t7r,a7r,rE,z5e,n7r,s7r,rU,l7r,i7r,d7r,tE,W5e,c7r,f7r,tU,m7r,g7r,h7r,aE,ENe,gc,nE,Q5e,B8,p7r,H5e,_7r,CNe,nr,I8,u7r,hc,b7r,aU,v7r,F7r,nU,T7r,M7r,E7r,q8,C7r,U5e,w7r,A7r,y7r,Bt,N8,L7r,J5e,x7r,$7r,pc,k7r,Y5e,S7r,R7r,sU,P7r,B7r,I7r,sE,q7r,Rr,j8,N7r,K5e,j7r,D7r,ln,G7r,Z5e,O7r,V7r,eve,X7r,z7r,ove,W7r,Q7r,H7r,D8,lE,rve,U7r,J7r,lU,Y7r,K7r,Z7r,iE,tve,eMr,oMr,iU,rMr,tMr,aMr,dE,wNe,_c,cE,ave,G8,nMr,nve,sMr,ANe,sr,O8,lMr,uc,iMr,dU,dMr,cMr,cU,fMr,mMr,gMr,V8,hMr,sve,pMr,_Mr,uMr,It,X8,bMr,lve,vMr,FMr,bc,TMr,ive,MMr,EMr,fU,CMr,wMr,AMr,fE,yMr,Pr,z8,LMr,dve,xMr,$Mr,dn,kMr,cve,SMr,RMr,fve,PMr,BMr,mve,IMr,qMr,NMr,gve,mE,hve,jMr,DMr,mU,GMr,OMr,VMr,gE,yNe,vc,hE,pve,W8,XMr,_ve,zMr,LNe,lr,Q8,WMr,Fc,QMr,gU,HMr,UMr,hU,JMr,YMr,KMr,H8,ZMr,uve,eEr,oEr,rEr,qt,U8,tEr,bve,aEr,nEr,Tc,sEr,vve,lEr,iEr,pU,dEr,cEr,fEr,pE,mEr,Br,J8,gEr,Fve,hEr,pEr,cn,_Er,Tve,uEr,bEr,Mve,vEr,FEr,Eve,TEr,MEr,EEr,de,_E,Cve,CEr,wEr,_U,AEr,yEr,LEr,uE,wve,xEr,$Er,uU,kEr,SEr,REr,bE,Ave,PEr,BEr,bU,IEr,qEr,NEr,vE,yve,jEr,DEr,vU,GEr,OEr,VEr,FE,Lve,XEr,zEr,FU,WEr,QEr,HEr,TE,xve,UEr,JEr,TU,YEr,KEr,ZEr,ME,$ve,eCr,oCr,MU,rCr,tCr,aCr,EE,kve,nCr,sCr,EU,lCr,iCr,dCr,CE,Sve,cCr,fCr,CU,mCr,gCr,hCr,wE,Rve,pCr,_Cr,wU,uCr,bCr,vCr,AE,Pve,FCr,TCr,AU,MCr,ECr,CCr,yE,Bve,wCr,ACr,yU,yCr,LCr,xCr,LE,Ive,$Cr,kCr,LU,SCr,RCr,PCr,xE,qve,BCr,ICr,xU,qCr,NCr,jCr,$E,Nve,DCr,GCr,$U,OCr,VCr,XCr,kE,jve,zCr,WCr,kU,QCr,HCr,UCr,SE,Dve,JCr,YCr,SU,KCr,ZCr,e3r,RE,Gve,o3r,r3r,RU,t3r,a3r,n3r,PE,Ove,s3r,l3r,PU,i3r,d3r,c3r,BE,Vve,f3r,m3r,BU,g3r,h3r,p3r,IE,xNe,Mc,qE,Xve,Y8,_3r,zve,u3r,$Ne,ir,K8,b3r,Ec,v3r,IU,F3r,T3r,qU,M3r,E3r,C3r,Z8,w3r,Wve,A3r,y3r,L3r,Nt,e9,x3r,Qve,$3r,k3r,Cc,S3r,Hve,R3r,P3r,NU,B3r,I3r,q3r,NE,N3r,Ir,o9,j3r,Uve,D3r,G3r,fn,O3r,Jve,V3r,X3r,Yve,z3r,W3r,Kve,Q3r,H3r,U3r,ce,jE,Zve,J3r,Y3r,jU,K3r,Z3r,ewr,DE,eFe,owr,rwr,DU,twr,awr,nwr,GE,oFe,swr,lwr,GU,iwr,dwr,cwr,OE,rFe,fwr,mwr,OU,gwr,hwr,pwr,VE,tFe,_wr,uwr,VU,bwr,vwr,Fwr,XE,aFe,Twr,Mwr,XU,Ewr,Cwr,wwr,zE,nFe,Awr,ywr,zU,Lwr,xwr,$wr,WE,sFe,kwr,Swr,WU,Rwr,Pwr,Bwr,QE,lFe,Iwr,qwr,QU,Nwr,jwr,Dwr,HE,iFe,Gwr,Owr,HU,Vwr,Xwr,zwr,UE,dFe,Wwr,Qwr,UU,Hwr,Uwr,Jwr,JE,cFe,Ywr,Kwr,JU,Zwr,e0r,o0r,YE,fFe,r0r,t0r,YU,a0r,n0r,s0r,KE,mFe,l0r,i0r,KU,d0r,c0r,f0r,ZE,gFe,m0r,g0r,ZU,h0r,p0r,_0r,eC,hFe,u0r,b0r,eJ,v0r,F0r,T0r,oC,pFe,M0r,E0r,oJ,C0r,w0r,A0r,rC,_Fe,y0r,L0r,rJ,x0r,$0r,k0r,tC,uFe,S0r,R0r,tJ,P0r,B0r,I0r,aC,bFe,q0r,N0r,aJ,j0r,D0r,G0r,nC,kNe,wc,sC,vFe,r9,O0r,FFe,V0r,SNe,dr,t9,X0r,Ac,z0r,nJ,W0r,Q0r,sJ,H0r,U0r,J0r,a9,Y0r,TFe,K0r,Z0r,eAr,jt,n9,oAr,MFe,rAr,tAr,yc,aAr,EFe,nAr,sAr,lJ,lAr,iAr,dAr,lC,cAr,qr,s9,fAr,CFe,mAr,gAr,mn,hAr,wFe,pAr,_Ar,AFe,uAr,bAr,yFe,vAr,FAr,TAr,LFe,iC,xFe,MAr,EAr,iJ,CAr,wAr,AAr,dC,RNe,Lc,cC,$Fe,l9,yAr,kFe,LAr,PNe,cr,i9,xAr,xc,$Ar,dJ,kAr,SAr,cJ,RAr,PAr,BAr,d9,IAr,SFe,qAr,NAr,jAr,Dt,c9,DAr,RFe,GAr,OAr,$c,VAr,PFe,XAr,zAr,fJ,WAr,QAr,HAr,fC,UAr,Nr,f9,JAr,BFe,YAr,KAr,gn,ZAr,IFe,e6r,o6r,qFe,r6r,t6r,NFe,a6r,n6r,s6r,jFe,mC,DFe,l6r,i6r,mJ,d6r,c6r,f6r,gC,BNe,kc,hC,GFe,m9,m6r,OFe,g6r,INe,fr,g9,h6r,Sc,p6r,gJ,_6r,u6r,hJ,b6r,v6r,F6r,h9,T6r,VFe,M6r,E6r,C6r,Gt,p9,w6r,XFe,A6r,y6r,Rc,L6r,zFe,x6r,$6r,pJ,k6r,S6r,R6r,pC,P6r,jr,_9,B6r,WFe,I6r,q6r,hn,N6r,QFe,j6r,D6r,HFe,G6r,O6r,UFe,V6r,X6r,z6r,te,_C,JFe,W6r,Q6r,_J,H6r,U6r,J6r,uC,YFe,Y6r,K6r,uJ,Z6r,eyr,oyr,bC,KFe,ryr,tyr,bJ,ayr,nyr,syr,vC,ZFe,lyr,iyr,vJ,dyr,cyr,fyr,FC,eTe,myr,gyr,FJ,hyr,pyr,_yr,TC,oTe,uyr,byr,TJ,vyr,Fyr,Tyr,MC,rTe,Myr,Eyr,MJ,Cyr,wyr,Ayr,EC,tTe,yyr,Lyr,EJ,xyr,$yr,kyr,CC,aTe,Syr,Ryr,CJ,Pyr,Byr,Iyr,wC,nTe,qyr,Nyr,wJ,jyr,Dyr,Gyr,AC,sTe,Oyr,Vyr,AJ,Xyr,zyr,Wyr,yC,lTe,Qyr,Hyr,yJ,Uyr,Jyr,Yyr,LC,iTe,Kyr,Zyr,LJ,eLr,oLr,rLr,xC,dTe,tLr,aLr,xJ,nLr,sLr,lLr,$C,cTe,iLr,dLr,$J,cLr,fLr,mLr,kC,fTe,gLr,hLr,kJ,pLr,_Lr,uLr,SC,mTe,bLr,vLr,SJ,FLr,TLr,MLr,RC,gTe,ELr,CLr,RJ,wLr,ALr,yLr,PC,hTe,LLr,xLr,PJ,$Lr,kLr,SLr,BC,pTe,RLr,PLr,BJ,BLr,ILr,qLr,IC,_Te,NLr,jLr,IJ,DLr,GLr,OLr,qC,uTe,VLr,XLr,qJ,zLr,WLr,QLr,NC,bTe,HLr,ULr,NJ,JLr,YLr,KLr,jC,vTe,ZLr,e8r,jJ,o8r,r8r,t8r,DC,FTe,a8r,n8r,DJ,s8r,l8r,i8r,GC,qNe,Pc,OC,TTe,u9,d8r,MTe,c8r,NNe,mr,b9,f8r,Bc,m8r,GJ,g8r,h8r,OJ,p8r,_8r,u8r,v9,b8r,ETe,v8r,F8r,T8r,Ot,F9,M8r,CTe,E8r,C8r,Ic,w8r,wTe,A8r,y8r,VJ,L8r,x8r,$8r,VC,k8r,Dr,T9,S8r,ATe,R8r,P8r,pn,B8r,yTe,I8r,q8r,LTe,N8r,j8r,xTe,D8r,G8r,O8r,Re,XC,$Te,V8r,X8r,XJ,z8r,W8r,Q8r,zC,kTe,H8r,U8r,zJ,J8r,Y8r,K8r,WC,STe,Z8r,e9r,WJ,o9r,r9r,t9r,QC,RTe,a9r,n9r,QJ,s9r,l9r,i9r,HC,PTe,d9r,c9r,HJ,f9r,m9r,g9r,UC,BTe,h9r,p9r,UJ,_9r,u9r,b9r,JC,ITe,v9r,F9r,JJ,T9r,M9r,E9r,YC,qTe,C9r,w9r,YJ,A9r,y9r,L9r,KC,NTe,x9r,$9r,KJ,k9r,S9r,R9r,ZC,jNe,qc,e3,jTe,M9,P9r,DTe,B9r,DNe,gr,E9,I9r,Nc,q9r,ZJ,N9r,j9r,eY,D9r,G9r,O9r,C9,V9r,GTe,X9r,z9r,W9r,Vt,w9,Q9r,OTe,H9r,U9r,jc,J9r,VTe,Y9r,K9r,oY,Z9r,exr,oxr,o3,rxr,Gr,A9,txr,XTe,axr,nxr,_n,sxr,zTe,lxr,ixr,WTe,dxr,cxr,QTe,fxr,mxr,gxr,Ee,r3,HTe,hxr,pxr,rY,_xr,uxr,bxr,t3,UTe,vxr,Fxr,tY,Txr,Mxr,Exr,a3,JTe,Cxr,wxr,aY,Axr,yxr,Lxr,n3,YTe,xxr,$xr,nY,kxr,Sxr,Rxr,s3,KTe,Pxr,Bxr,sY,Ixr,qxr,Nxr,l3,ZTe,jxr,Dxr,lY,Gxr,Oxr,Vxr,i3,e7e,Xxr,zxr,iY,Wxr,Qxr,Hxr,d3,o7e,Uxr,Jxr,dY,Yxr,Kxr,Zxr,c3,r7e,e$r,o$r,cY,r$r,t$r,a$r,f3,t7e,n$r,s$r,fY,l$r,i$r,d$r,m3,a7e,c$r,f$r,mY,m$r,g$r,h$r,g3,n7e,p$r,_$r,gY,u$r,b$r,v$r,h3,GNe,Dc,p3,s7e,y9,F$r,l7e,T$r,ONe,hr,L9,M$r,Gc,E$r,hY,C$r,w$r,pY,A$r,y$r,L$r,x9,x$r,i7e,$$r,k$r,S$r,Xt,$9,R$r,d7e,P$r,B$r,Oc,I$r,c7e,q$r,N$r,_Y,j$r,D$r,G$r,_3,O$r,Or,k9,V$r,f7e,X$r,z$r,un,W$r,m7e,Q$r,H$r,g7e,U$r,J$r,h7e,Y$r,K$r,Z$r,Le,u3,p7e,ekr,okr,uY,rkr,tkr,akr,b3,_7e,nkr,skr,bY,lkr,ikr,dkr,v3,u7e,ckr,fkr,vY,mkr,gkr,hkr,F3,b7e,pkr,_kr,FY,ukr,bkr,vkr,T3,v7e,Fkr,Tkr,TY,Mkr,Ekr,Ckr,M3,F7e,wkr,Akr,MY,ykr,Lkr,xkr,E3,T7e,$kr,kkr,EY,Skr,Rkr,Pkr,C3,M7e,Bkr,Ikr,CY,qkr,Nkr,jkr,w3,E7e,Dkr,Gkr,wY,Okr,Vkr,Xkr,A3,C7e,zkr,Wkr,AY,Qkr,Hkr,Ukr,y3,VNe,Vc,L3,w7e,S9,Jkr,A7e,Ykr,XNe,pr,R9,Kkr,Xc,Zkr,yY,eSr,oSr,LY,rSr,tSr,aSr,P9,nSr,y7e,sSr,lSr,iSr,zt,B9,dSr,L7e,cSr,fSr,zc,mSr,x7e,gSr,hSr,xY,pSr,_Sr,uSr,x3,bSr,Vr,I9,vSr,$7e,FSr,TSr,bn,MSr,k7e,ESr,CSr,S7e,wSr,ASr,R7e,ySr,LSr,xSr,Pe,$3,P7e,$Sr,kSr,$Y,SSr,RSr,PSr,k3,B7e,BSr,ISr,kY,qSr,NSr,jSr,S3,I7e,DSr,GSr,SY,OSr,VSr,XSr,R3,q7e,zSr,WSr,RY,QSr,HSr,USr,P3,N7e,JSr,YSr,PY,KSr,ZSr,eRr,B3,j7e,oRr,rRr,BY,tRr,aRr,nRr,I3,D7e,sRr,lRr,IY,iRr,dRr,cRr,q3,G7e,fRr,mRr,qY,gRr,hRr,pRr,N3,O7e,_Rr,uRr,NY,bRr,vRr,FRr,j3,zNe,Wc,D3,V7e,q9,TRr,X7e,MRr,WNe,_r,N9,ERr,Qc,CRr,jY,wRr,ARr,DY,yRr,LRr,xRr,j9,$Rr,z7e,kRr,SRr,RRr,Wt,D9,PRr,W7e,BRr,IRr,Hc,qRr,Q7e,NRr,jRr,GY,DRr,GRr,ORr,G3,VRr,Xr,G9,XRr,H7e,zRr,WRr,vn,QRr,U7e,HRr,URr,J7e,JRr,YRr,Y7e,KRr,ZRr,ePr,xe,O3,K7e,oPr,rPr,OY,tPr,aPr,nPr,V3,Z7e,sPr,lPr,VY,iPr,dPr,cPr,X3,eMe,fPr,mPr,XY,gPr,hPr,pPr,z3,oMe,_Pr,uPr,zY,bPr,vPr,FPr,W3,rMe,TPr,MPr,WY,EPr,CPr,wPr,Q3,tMe,APr,yPr,QY,LPr,xPr,$Pr,H3,aMe,kPr,SPr,HY,RPr,PPr,BPr,U3,nMe,IPr,qPr,UY,NPr,jPr,DPr,J3,sMe,GPr,OPr,JY,VPr,XPr,zPr,Y3,lMe,WPr,QPr,YY,HPr,UPr,JPr,K3,QNe,Uc,Z3,iMe,O9,YPr,dMe,KPr,HNe,ur,V9,ZPr,Jc,eBr,KY,oBr,rBr,ZY,tBr,aBr,nBr,X9,sBr,cMe,lBr,iBr,dBr,Qt,z9,cBr,fMe,fBr,mBr,Yc,gBr,mMe,hBr,pBr,eK,_Br,uBr,bBr,ew,vBr,zr,W9,FBr,gMe,TBr,MBr,Fn,EBr,hMe,CBr,wBr,pMe,ABr,yBr,_Me,LBr,xBr,$Br,$e,ow,uMe,kBr,SBr,oK,RBr,PBr,BBr,rw,bMe,IBr,qBr,rK,NBr,jBr,DBr,tw,vMe,GBr,OBr,tK,VBr,XBr,zBr,aw,FMe,WBr,QBr,aK,HBr,UBr,JBr,nw,TMe,YBr,KBr,nK,ZBr,eIr,oIr,sw,MMe,rIr,tIr,sK,aIr,nIr,sIr,lw,EMe,lIr,iIr,lK,dIr,cIr,fIr,iw,CMe,mIr,gIr,iK,hIr,pIr,_Ir,dw,wMe,uIr,bIr,dK,vIr,FIr,TIr,cw,AMe,MIr,EIr,cK,CIr,wIr,AIr,fw,UNe,Kc,mw,yMe,Q9,yIr,LMe,LIr,JNe,br,H9,xIr,Zc,$Ir,fK,kIr,SIr,mK,RIr,PIr,BIr,U9,IIr,xMe,qIr,NIr,jIr,Ht,J9,DIr,$Me,GIr,OIr,ef,VIr,kMe,XIr,zIr,gK,WIr,QIr,HIr,gw,UIr,Wr,Y9,JIr,SMe,YIr,KIr,Tn,ZIr,RMe,eqr,oqr,PMe,rqr,tqr,BMe,aqr,nqr,sqr,De,hw,IMe,lqr,iqr,hK,dqr,cqr,fqr,pw,qMe,mqr,gqr,pK,hqr,pqr,_qr,_w,NMe,uqr,bqr,_K,vqr,Fqr,Tqr,uw,jMe,Mqr,Eqr,uK,Cqr,wqr,Aqr,bw,DMe,yqr,Lqr,bK,xqr,$qr,kqr,vw,GMe,Sqr,Rqr,vK,Pqr,Bqr,Iqr,Fw,OMe,qqr,Nqr,FK,jqr,Dqr,Gqr,Tw,VMe,Oqr,Vqr,TK,Xqr,zqr,Wqr,Mw,YNe,of,Ew,XMe,K9,Qqr,zMe,Hqr,KNe,vr,Z9,Uqr,rf,Jqr,MK,Yqr,Kqr,EK,Zqr,eNr,oNr,ex,rNr,WMe,tNr,aNr,nNr,Ut,ox,sNr,QMe,lNr,iNr,tf,dNr,HMe,cNr,fNr,CK,mNr,gNr,hNr,Cw,pNr,Qr,rx,_Nr,UMe,uNr,bNr,Mn,vNr,JMe,FNr,TNr,YMe,MNr,ENr,KMe,CNr,wNr,ANr,Ge,ww,ZMe,yNr,LNr,wK,xNr,$Nr,kNr,Aw,eEe,SNr,RNr,AK,PNr,BNr,INr,yw,oEe,qNr,NNr,yK,jNr,DNr,GNr,Lw,rEe,ONr,VNr,LK,XNr,zNr,WNr,xw,tEe,QNr,HNr,xK,UNr,JNr,YNr,$w,aEe,KNr,ZNr,$K,ejr,ojr,rjr,kw,nEe,tjr,ajr,kK,njr,sjr,ljr,Sw,sEe,ijr,djr,SK,cjr,fjr,mjr,Rw,ZNe,af,Pw,lEe,tx,gjr,iEe,hjr,eje,Fr,ax,pjr,nf,_jr,RK,ujr,bjr,PK,vjr,Fjr,Tjr,nx,Mjr,dEe,Ejr,Cjr,wjr,Jt,sx,Ajr,cEe,yjr,Ljr,sf,xjr,fEe,$jr,kjr,BK,Sjr,Rjr,Pjr,Bw,Bjr,Hr,lx,Ijr,mEe,qjr,Njr,En,jjr,gEe,Djr,Gjr,hEe,Ojr,Vjr,pEe,Xjr,zjr,Wjr,_Ee,Iw,uEe,Qjr,Hjr,IK,Ujr,Jjr,Yjr,qw,oje,lf,Nw,bEe,ix,Kjr,vEe,Zjr,rje,Tr,dx,eDr,df,oDr,qK,rDr,tDr,NK,aDr,nDr,sDr,cx,lDr,FEe,iDr,dDr,cDr,Yt,fx,fDr,TEe,mDr,gDr,cf,hDr,MEe,pDr,_Dr,jK,uDr,bDr,vDr,jw,FDr,Ur,mx,TDr,EEe,MDr,EDr,Cn,CDr,CEe,wDr,ADr,wEe,yDr,LDr,AEe,xDr,$Dr,kDr,gx,Dw,yEe,SDr,RDr,DK,PDr,BDr,IDr,Gw,LEe,qDr,NDr,GK,jDr,DDr,GDr,Ow,tje,ff,Vw,xEe,hx,ODr,$Ee,VDr,aje,Mr,px,XDr,mf,zDr,OK,WDr,QDr,VK,HDr,UDr,JDr,_x,YDr,kEe,KDr,ZDr,eGr,Kt,ux,oGr,SEe,rGr,tGr,gf,aGr,REe,nGr,sGr,XK,lGr,iGr,dGr,Xw,cGr,Jr,bx,fGr,PEe,mGr,gGr,wn,hGr,BEe,pGr,_Gr,IEe,uGr,bGr,qEe,vGr,FGr,TGr,NEe,zw,jEe,MGr,EGr,zK,CGr,wGr,AGr,Ww,nje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),h6=new oe({}),p6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new yGr({props:{warning:!0,$$slots:{default:[N8t]},$$scope:{ctx:L}}}),_6=new oe({}),u6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L578"}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L601"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),T6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L724"}}),M6=new oe({}),E6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L394"}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17254/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L408"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),y6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L604"}}),L6=new oe({}),x6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),$h=new yGr({props:{$$slots:{default:[G8t]},$$scope:{ctx:L}}}),kh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),R6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),P6=new oe({}),B6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L87"}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L101"}}),Jh=new yGr({props:{$$slots:{default:[V8t]},$$scope:{ctx:L}}}),Yh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),j6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L254"}}),D6=new oe({}),G6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L729"}}),V6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ep=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),z6=new oe({}),W6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L736"}}),H6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),J6=new oe({}),Y6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L751"}}),Z6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),oy=new oe({}),ry=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L758"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),sy=new oe({}),ly=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L765"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L774"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),_y=new oe({}),uy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L808"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),n4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L815"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),l4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L801"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L783"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L790"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),Gy=new oe({}),Oy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L824"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),Wy=new oe({}),Qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L863"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L870"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),rL=new oe({}),tL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L893"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),lL=new oe({}),iL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L877"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),mL=new oe({}),gL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L884"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),bL=new oe({}),vL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L902"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),EL=new oe({}),CL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L909"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),LL=new oe({}),xL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L856"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L831"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L838"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L847"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),c8=new oe({}),f8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),p8=new oe({}),_8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),x7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),F8=new oe({}),T8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),w8=new oe({}),A8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),$8=new oe({}),k8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),B8=new oe({}),I8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),G8=new oe({}),O8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),W8=new oe({}),Q8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),Y8=new oe({}),K8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),u9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),q9=new oe({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),rt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),c6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),_i=o("Instantiating one of "),yn=a("a"),f6=o("AutoConfig"),Ln=o(", "),xn=a("a"),m6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),g6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),P$=o("will create a model that is an instance of "),vi=a("a"),B$=o("BertModel"),I$=o("."),Eo=l(),wa=a("p"),q$=o("There is one class of "),Ff=a("code"),N$=o("AutoModel"),gGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rqe=l(),Fi=a("h2"),Tf=a("a"),Nee=a("span"),F(h6.$$.fragment),hGe=l(),jee=a("span"),pGe=o("Extending the Auto Classes"),tqe=l(),kn=a("p"),_Ge=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dee=a("code"),uGe=o("NewModel"),bGe=o(", make sure you have a "),Gee=a("code"),vGe=o("NewModelConfig"),FGe=o(` then you can add those to the auto
classes like this:`),aqe=l(),F(p6.$$.fragment),nqe=l(),j$=a("p"),TGe=o("You will then be able to use the auto classes like you would usually do!"),sqe=l(),F(Mf.$$.fragment),lqe=l(),Ti=a("h2"),Ef=a("a"),Oee=a("span"),F(_6.$$.fragment),MGe=l(),Vee=a("span"),EGe=o("AutoConfig"),iqe=l(),Co=a("div"),F(u6.$$.fragment),CGe=l(),b6=a("p"),wGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),D$=a("a"),AGe=o("from_pretrained()"),yGe=o(" class method."),LGe=l(),v6=a("p"),xGe=o("This class cannot be instantiated directly using "),Xee=a("code"),$Ge=o("__init__()"),kGe=o(" (throws an error)."),SGe=l(),Er=a("div"),F(F6.$$.fragment),RGe=l(),zee=a("p"),PGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BGe=l(),Mi=a("p"),IGe=o("The configuration class to instantiate is selected based on the "),Wee=a("code"),qGe=o("model_type"),NGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Qee=a("code"),jGe=o("pretrained_model_name_or_path"),DGe=o(":"),GGe=l(),A=a("ul"),Cf=a("li"),Hee=a("strong"),OGe=o("albert"),VGe=o(" \u2014 "),G$=a("a"),XGe=o("AlbertConfig"),zGe=o(" (ALBERT model)"),WGe=l(),wf=a("li"),Uee=a("strong"),QGe=o("bart"),HGe=o(" \u2014 "),O$=a("a"),UGe=o("BartConfig"),JGe=o(" (BART model)"),YGe=l(),Af=a("li"),Jee=a("strong"),KGe=o("beit"),ZGe=o(" \u2014 "),V$=a("a"),eOe=o("BeitConfig"),oOe=o(" (BEiT model)"),rOe=l(),yf=a("li"),Yee=a("strong"),tOe=o("bert"),aOe=o(" \u2014 "),X$=a("a"),nOe=o("BertConfig"),sOe=o(" (BERT model)"),lOe=l(),Lf=a("li"),Kee=a("strong"),iOe=o("bert-generation"),dOe=o(" \u2014 "),z$=a("a"),cOe=o("BertGenerationConfig"),fOe=o(" (Bert Generation model)"),mOe=l(),xf=a("li"),Zee=a("strong"),gOe=o("big_bird"),hOe=o(" \u2014 "),W$=a("a"),pOe=o("BigBirdConfig"),_Oe=o(" (BigBird model)"),uOe=l(),$f=a("li"),eoe=a("strong"),bOe=o("bigbird_pegasus"),vOe=o(" \u2014 "),Q$=a("a"),FOe=o("BigBirdPegasusConfig"),TOe=o(" (BigBirdPegasus model)"),MOe=l(),kf=a("li"),ooe=a("strong"),EOe=o("blenderbot"),COe=o(" \u2014 "),H$=a("a"),wOe=o("BlenderbotConfig"),AOe=o(" (Blenderbot model)"),yOe=l(),Sf=a("li"),roe=a("strong"),LOe=o("blenderbot-small"),xOe=o(" \u2014 "),U$=a("a"),$Oe=o("BlenderbotSmallConfig"),kOe=o(" (BlenderbotSmall model)"),SOe=l(),Rf=a("li"),toe=a("strong"),ROe=o("camembert"),POe=o(" \u2014 "),J$=a("a"),BOe=o("CamembertConfig"),IOe=o(" (CamemBERT model)"),qOe=l(),Pf=a("li"),aoe=a("strong"),NOe=o("canine"),jOe=o(" \u2014 "),Y$=a("a"),DOe=o("CanineConfig"),GOe=o(" (Canine model)"),OOe=l(),Bf=a("li"),noe=a("strong"),VOe=o("clip"),XOe=o(" \u2014 "),K$=a("a"),zOe=o("CLIPConfig"),WOe=o(" (CLIP model)"),QOe=l(),If=a("li"),soe=a("strong"),HOe=o("convbert"),UOe=o(" \u2014 "),Z$=a("a"),JOe=o("ConvBertConfig"),YOe=o(" (ConvBERT model)"),KOe=l(),qf=a("li"),loe=a("strong"),ZOe=o("convnext"),eVe=o(" \u2014 "),ek=a("a"),oVe=o("ConvNextConfig"),rVe=o(" (ConvNext model)"),tVe=l(),Nf=a("li"),ioe=a("strong"),aVe=o("ctrl"),nVe=o(" \u2014 "),ok=a("a"),sVe=o("CTRLConfig"),lVe=o(" (CTRL model)"),iVe=l(),jf=a("li"),doe=a("strong"),dVe=o("cvt"),cVe=o(" \u2014 "),rk=a("a"),fVe=o("CvtConfig"),mVe=o(" (CvT model)"),gVe=l(),Df=a("li"),coe=a("strong"),hVe=o("data2vec-audio"),pVe=o(" \u2014 "),tk=a("a"),_Ve=o("Data2VecAudioConfig"),uVe=o(" (Data2VecAudio model)"),bVe=l(),Gf=a("li"),foe=a("strong"),vVe=o("data2vec-text"),FVe=o(" \u2014 "),ak=a("a"),TVe=o("Data2VecTextConfig"),MVe=o(" (Data2VecText model)"),EVe=l(),Of=a("li"),moe=a("strong"),CVe=o("data2vec-vision"),wVe=o(" \u2014 "),nk=a("a"),AVe=o("Data2VecVisionConfig"),yVe=o(" (Data2VecVision model)"),LVe=l(),Vf=a("li"),goe=a("strong"),xVe=o("deberta"),$Ve=o(" \u2014 "),sk=a("a"),kVe=o("DebertaConfig"),SVe=o(" (DeBERTa model)"),RVe=l(),Xf=a("li"),hoe=a("strong"),PVe=o("deberta-v2"),BVe=o(" \u2014 "),lk=a("a"),IVe=o("DebertaV2Config"),qVe=o(" (DeBERTa-v2 model)"),NVe=l(),zf=a("li"),poe=a("strong"),jVe=o("decision_transformer"),DVe=o(" \u2014 "),ik=a("a"),GVe=o("DecisionTransformerConfig"),OVe=o(" (Decision Transformer model)"),VVe=l(),Wf=a("li"),_oe=a("strong"),XVe=o("deit"),zVe=o(" \u2014 "),dk=a("a"),WVe=o("DeiTConfig"),QVe=o(" (DeiT model)"),HVe=l(),Qf=a("li"),uoe=a("strong"),UVe=o("detr"),JVe=o(" \u2014 "),ck=a("a"),YVe=o("DetrConfig"),KVe=o(" (DETR model)"),ZVe=l(),Hf=a("li"),boe=a("strong"),eXe=o("distilbert"),oXe=o(" \u2014 "),fk=a("a"),rXe=o("DistilBertConfig"),tXe=o(" (DistilBERT model)"),aXe=l(),Uf=a("li"),voe=a("strong"),nXe=o("dpr"),sXe=o(" \u2014 "),mk=a("a"),lXe=o("DPRConfig"),iXe=o(" (DPR model)"),dXe=l(),Jf=a("li"),Foe=a("strong"),cXe=o("dpt"),fXe=o(" \u2014 "),gk=a("a"),mXe=o("DPTConfig"),gXe=o(" (DPT model)"),hXe=l(),Yf=a("li"),Toe=a("strong"),pXe=o("electra"),_Xe=o(" \u2014 "),hk=a("a"),uXe=o("ElectraConfig"),bXe=o(" (ELECTRA model)"),vXe=l(),Kf=a("li"),Moe=a("strong"),FXe=o("encoder-decoder"),TXe=o(" \u2014 "),pk=a("a"),MXe=o("EncoderDecoderConfig"),EXe=o(" (Encoder decoder model)"),CXe=l(),Zf=a("li"),Eoe=a("strong"),wXe=o("flaubert"),AXe=o(" \u2014 "),_k=a("a"),yXe=o("FlaubertConfig"),LXe=o(" (FlauBERT model)"),xXe=l(),em=a("li"),Coe=a("strong"),$Xe=o("flava"),kXe=o(" \u2014 "),uk=a("a"),SXe=o("FlavaConfig"),RXe=o(" (Flava model)"),PXe=l(),om=a("li"),woe=a("strong"),BXe=o("fnet"),IXe=o(" \u2014 "),bk=a("a"),qXe=o("FNetConfig"),NXe=o(" (FNet model)"),jXe=l(),rm=a("li"),Aoe=a("strong"),DXe=o("fsmt"),GXe=o(" \u2014 "),vk=a("a"),OXe=o("FSMTConfig"),VXe=o(" (FairSeq Machine-Translation model)"),XXe=l(),tm=a("li"),yoe=a("strong"),zXe=o("funnel"),WXe=o(" \u2014 "),Fk=a("a"),QXe=o("FunnelConfig"),HXe=o(" (Funnel Transformer model)"),UXe=l(),am=a("li"),Loe=a("strong"),JXe=o("glpn"),YXe=o(" \u2014 "),Tk=a("a"),KXe=o("GLPNConfig"),ZXe=o(" (GLPN model)"),eze=l(),nm=a("li"),xoe=a("strong"),oze=o("gpt2"),rze=o(" \u2014 "),Mk=a("a"),tze=o("GPT2Config"),aze=o(" (OpenAI GPT-2 model)"),nze=l(),sm=a("li"),$oe=a("strong"),sze=o("gpt_neo"),lze=o(" \u2014 "),Ek=a("a"),ize=o("GPTNeoConfig"),dze=o(" (GPT Neo model)"),cze=l(),lm=a("li"),koe=a("strong"),fze=o("gptj"),mze=o(" \u2014 "),Ck=a("a"),gze=o("GPTJConfig"),hze=o(" (GPT-J model)"),pze=l(),im=a("li"),Soe=a("strong"),_ze=o("hubert"),uze=o(" \u2014 "),wk=a("a"),bze=o("HubertConfig"),vze=o(" (Hubert model)"),Fze=l(),dm=a("li"),Roe=a("strong"),Tze=o("ibert"),Mze=o(" \u2014 "),Ak=a("a"),Eze=o("IBertConfig"),Cze=o(" (I-BERT model)"),wze=l(),cm=a("li"),Poe=a("strong"),Aze=o("imagegpt"),yze=o(" \u2014 "),yk=a("a"),Lze=o("ImageGPTConfig"),xze=o(" (ImageGPT model)"),$ze=l(),fm=a("li"),Boe=a("strong"),kze=o("layoutlm"),Sze=o(" \u2014 "),Lk=a("a"),Rze=o("LayoutLMConfig"),Pze=o(" (LayoutLM model)"),Bze=l(),mm=a("li"),Ioe=a("strong"),Ize=o("layoutlmv2"),qze=o(" \u2014 "),xk=a("a"),Nze=o("LayoutLMv2Config"),jze=o(" (LayoutLMv2 model)"),Dze=l(),gm=a("li"),qoe=a("strong"),Gze=o("led"),Oze=o(" \u2014 "),$k=a("a"),Vze=o("LEDConfig"),Xze=o(" (LED model)"),zze=l(),hm=a("li"),Noe=a("strong"),Wze=o("longformer"),Qze=o(" \u2014 "),kk=a("a"),Hze=o("LongformerConfig"),Uze=o(" (Longformer model)"),Jze=l(),pm=a("li"),joe=a("strong"),Yze=o("luke"),Kze=o(" \u2014 "),Sk=a("a"),Zze=o("LukeConfig"),eWe=o(" (LUKE model)"),oWe=l(),_m=a("li"),Doe=a("strong"),rWe=o("lxmert"),tWe=o(" \u2014 "),Rk=a("a"),aWe=o("LxmertConfig"),nWe=o(" (LXMERT model)"),sWe=l(),um=a("li"),Goe=a("strong"),lWe=o("m2m_100"),iWe=o(" \u2014 "),Pk=a("a"),dWe=o("M2M100Config"),cWe=o(" (M2M100 model)"),fWe=l(),bm=a("li"),Ooe=a("strong"),mWe=o("marian"),gWe=o(" \u2014 "),Bk=a("a"),hWe=o("MarianConfig"),pWe=o(" (Marian model)"),_We=l(),vm=a("li"),Voe=a("strong"),uWe=o("maskformer"),bWe=o(" \u2014 "),Ik=a("a"),vWe=o("MaskFormerConfig"),FWe=o(" (MaskFormer model)"),TWe=l(),Fm=a("li"),Xoe=a("strong"),MWe=o("mbart"),EWe=o(" \u2014 "),qk=a("a"),CWe=o("MBartConfig"),wWe=o(" (mBART model)"),AWe=l(),Tm=a("li"),zoe=a("strong"),yWe=o("megatron-bert"),LWe=o(" \u2014 "),Nk=a("a"),xWe=o("MegatronBertConfig"),$We=o(" (MegatronBert model)"),kWe=l(),Mm=a("li"),Woe=a("strong"),SWe=o("mobilebert"),RWe=o(" \u2014 "),jk=a("a"),PWe=o("MobileBertConfig"),BWe=o(" (MobileBERT model)"),IWe=l(),Em=a("li"),Qoe=a("strong"),qWe=o("mpnet"),NWe=o(" \u2014 "),Dk=a("a"),jWe=o("MPNetConfig"),DWe=o(" (MPNet model)"),GWe=l(),Cm=a("li"),Hoe=a("strong"),OWe=o("mt5"),VWe=o(" \u2014 "),Gk=a("a"),XWe=o("MT5Config"),zWe=o(" (mT5 model)"),WWe=l(),wm=a("li"),Uoe=a("strong"),QWe=o("nystromformer"),HWe=o(" \u2014 "),Ok=a("a"),UWe=o("NystromformerConfig"),JWe=o(" (Nystromformer model)"),YWe=l(),Am=a("li"),Joe=a("strong"),KWe=o("openai-gpt"),ZWe=o(" \u2014 "),Vk=a("a"),eQe=o("OpenAIGPTConfig"),oQe=o(" (OpenAI GPT model)"),rQe=l(),ym=a("li"),Yoe=a("strong"),tQe=o("opt"),aQe=o(" \u2014 "),Xk=a("a"),nQe=o("OPTConfig"),sQe=o(" (OPT model)"),lQe=l(),Lm=a("li"),Koe=a("strong"),iQe=o("pegasus"),dQe=o(" \u2014 "),zk=a("a"),cQe=o("PegasusConfig"),fQe=o(" (Pegasus model)"),mQe=l(),xm=a("li"),Zoe=a("strong"),gQe=o("perceiver"),hQe=o(" \u2014 "),Wk=a("a"),pQe=o("PerceiverConfig"),_Qe=o(" (Perceiver model)"),uQe=l(),$m=a("li"),ere=a("strong"),bQe=o("plbart"),vQe=o(" \u2014 "),Qk=a("a"),FQe=o("PLBartConfig"),TQe=o(" (PLBart model)"),MQe=l(),km=a("li"),ore=a("strong"),EQe=o("poolformer"),CQe=o(" \u2014 "),Hk=a("a"),wQe=o("PoolFormerConfig"),AQe=o(" (PoolFormer model)"),yQe=l(),Sm=a("li"),rre=a("strong"),LQe=o("prophetnet"),xQe=o(" \u2014 "),Uk=a("a"),$Qe=o("ProphetNetConfig"),kQe=o(" (ProphetNet model)"),SQe=l(),Rm=a("li"),tre=a("strong"),RQe=o("qdqbert"),PQe=o(" \u2014 "),Jk=a("a"),BQe=o("QDQBertConfig"),IQe=o(" (QDQBert model)"),qQe=l(),Pm=a("li"),are=a("strong"),NQe=o("rag"),jQe=o(" \u2014 "),Yk=a("a"),DQe=o("RagConfig"),GQe=o(" (RAG model)"),OQe=l(),Bm=a("li"),nre=a("strong"),VQe=o("realm"),XQe=o(" \u2014 "),Kk=a("a"),zQe=o("RealmConfig"),WQe=o(" (Realm model)"),QQe=l(),Im=a("li"),sre=a("strong"),HQe=o("reformer"),UQe=o(" \u2014 "),Zk=a("a"),JQe=o("ReformerConfig"),YQe=o(" (Reformer model)"),KQe=l(),qm=a("li"),lre=a("strong"),ZQe=o("regnet"),eHe=o(" \u2014 "),eS=a("a"),oHe=o("RegNetConfig"),rHe=o(" (RegNet model)"),tHe=l(),Nm=a("li"),ire=a("strong"),aHe=o("rembert"),nHe=o(" \u2014 "),oS=a("a"),sHe=o("RemBertConfig"),lHe=o(" (RemBERT model)"),iHe=l(),jm=a("li"),dre=a("strong"),dHe=o("resnet"),cHe=o(" \u2014 "),rS=a("a"),fHe=o("ResNetConfig"),mHe=o(" (ResNet model)"),gHe=l(),Dm=a("li"),cre=a("strong"),hHe=o("retribert"),pHe=o(" \u2014 "),tS=a("a"),_He=o("RetriBertConfig"),uHe=o(" (RetriBERT model)"),bHe=l(),Gm=a("li"),fre=a("strong"),vHe=o("roberta"),FHe=o(" \u2014 "),aS=a("a"),THe=o("RobertaConfig"),MHe=o(" (RoBERTa model)"),EHe=l(),Om=a("li"),mre=a("strong"),CHe=o("roformer"),wHe=o(" \u2014 "),nS=a("a"),AHe=o("RoFormerConfig"),yHe=o(" (RoFormer model)"),LHe=l(),Vm=a("li"),gre=a("strong"),xHe=o("segformer"),$He=o(" \u2014 "),sS=a("a"),kHe=o("SegformerConfig"),SHe=o(" (SegFormer model)"),RHe=l(),Xm=a("li"),hre=a("strong"),PHe=o("sew"),BHe=o(" \u2014 "),lS=a("a"),IHe=o("SEWConfig"),qHe=o(" (SEW model)"),NHe=l(),zm=a("li"),pre=a("strong"),jHe=o("sew-d"),DHe=o(" \u2014 "),iS=a("a"),GHe=o("SEWDConfig"),OHe=o(" (SEW-D model)"),VHe=l(),Wm=a("li"),_re=a("strong"),XHe=o("speech-encoder-decoder"),zHe=o(" \u2014 "),dS=a("a"),WHe=o("SpeechEncoderDecoderConfig"),QHe=o(" (Speech Encoder decoder model)"),HHe=l(),Qm=a("li"),ure=a("strong"),UHe=o("speech_to_text"),JHe=o(" \u2014 "),cS=a("a"),YHe=o("Speech2TextConfig"),KHe=o(" (Speech2Text model)"),ZHe=l(),Hm=a("li"),bre=a("strong"),eUe=o("speech_to_text_2"),oUe=o(" \u2014 "),fS=a("a"),rUe=o("Speech2Text2Config"),tUe=o(" (Speech2Text2 model)"),aUe=l(),Um=a("li"),vre=a("strong"),nUe=o("splinter"),sUe=o(" \u2014 "),mS=a("a"),lUe=o("SplinterConfig"),iUe=o(" (Splinter model)"),dUe=l(),Jm=a("li"),Fre=a("strong"),cUe=o("squeezebert"),fUe=o(" \u2014 "),gS=a("a"),mUe=o("SqueezeBertConfig"),gUe=o(" (SqueezeBERT model)"),hUe=l(),Ym=a("li"),Tre=a("strong"),pUe=o("swin"),_Ue=o(" \u2014 "),hS=a("a"),uUe=o("SwinConfig"),bUe=o(" (Swin model)"),vUe=l(),Km=a("li"),Mre=a("strong"),FUe=o("t5"),TUe=o(" \u2014 "),pS=a("a"),MUe=o("T5Config"),EUe=o(" (T5 model)"),CUe=l(),Zm=a("li"),Ere=a("strong"),wUe=o("tapas"),AUe=o(" \u2014 "),_S=a("a"),yUe=o("TapasConfig"),LUe=o(" (TAPAS model)"),xUe=l(),eg=a("li"),Cre=a("strong"),$Ue=o("trajectory_transformer"),kUe=o(" \u2014 "),uS=a("a"),SUe=o("TrajectoryTransformerConfig"),RUe=o(" (Trajectory Transformer model)"),PUe=l(),og=a("li"),wre=a("strong"),BUe=o("transfo-xl"),IUe=o(" \u2014 "),bS=a("a"),qUe=o("TransfoXLConfig"),NUe=o(" (Transformer-XL model)"),jUe=l(),rg=a("li"),Are=a("strong"),DUe=o("trocr"),GUe=o(" \u2014 "),vS=a("a"),OUe=o("TrOCRConfig"),VUe=o(" (TrOCR model)"),XUe=l(),tg=a("li"),yre=a("strong"),zUe=o("unispeech"),WUe=o(" \u2014 "),FS=a("a"),QUe=o("UniSpeechConfig"),HUe=o(" (UniSpeech model)"),UUe=l(),ag=a("li"),Lre=a("strong"),JUe=o("unispeech-sat"),YUe=o(" \u2014 "),TS=a("a"),KUe=o("UniSpeechSatConfig"),ZUe=o(" (UniSpeechSat model)"),eJe=l(),ng=a("li"),xre=a("strong"),oJe=o("van"),rJe=o(" \u2014 "),MS=a("a"),tJe=o("VanConfig"),aJe=o(" (VAN model)"),nJe=l(),sg=a("li"),$re=a("strong"),sJe=o("vilt"),lJe=o(" \u2014 "),ES=a("a"),iJe=o("ViltConfig"),dJe=o(" (ViLT model)"),cJe=l(),lg=a("li"),kre=a("strong"),fJe=o("vision-encoder-decoder"),mJe=o(" \u2014 "),CS=a("a"),gJe=o("VisionEncoderDecoderConfig"),hJe=o(" (Vision Encoder decoder model)"),pJe=l(),ig=a("li"),Sre=a("strong"),_Je=o("vision-text-dual-encoder"),uJe=o(" \u2014 "),wS=a("a"),bJe=o("VisionTextDualEncoderConfig"),vJe=o(" (VisionTextDualEncoder model)"),FJe=l(),dg=a("li"),Rre=a("strong"),TJe=o("visual_bert"),MJe=o(" \u2014 "),AS=a("a"),EJe=o("VisualBertConfig"),CJe=o(" (VisualBert model)"),wJe=l(),cg=a("li"),Pre=a("strong"),AJe=o("vit"),yJe=o(" \u2014 "),yS=a("a"),LJe=o("ViTConfig"),xJe=o(" (ViT model)"),$Je=l(),fg=a("li"),Bre=a("strong"),kJe=o("vit_mae"),SJe=o(" \u2014 "),LS=a("a"),RJe=o("ViTMAEConfig"),PJe=o(" (ViTMAE model)"),BJe=l(),mg=a("li"),Ire=a("strong"),IJe=o("wav2vec2"),qJe=o(" \u2014 "),xS=a("a"),NJe=o("Wav2Vec2Config"),jJe=o(" (Wav2Vec2 model)"),DJe=l(),gg=a("li"),qre=a("strong"),GJe=o("wav2vec2-conformer"),OJe=o(" \u2014 "),$S=a("a"),VJe=o("Wav2Vec2ConformerConfig"),XJe=o(" (Wav2Vec2-Conformer model)"),zJe=l(),hg=a("li"),Nre=a("strong"),WJe=o("wavlm"),QJe=o(" \u2014 "),kS=a("a"),HJe=o("WavLMConfig"),UJe=o(" (WavLM model)"),JJe=l(),pg=a("li"),jre=a("strong"),YJe=o("xglm"),KJe=o(" \u2014 "),SS=a("a"),ZJe=o("XGLMConfig"),eYe=o(" (XGLM model)"),oYe=l(),_g=a("li"),Dre=a("strong"),rYe=o("xlm"),tYe=o(" \u2014 "),RS=a("a"),aYe=o("XLMConfig"),nYe=o(" (XLM model)"),sYe=l(),ug=a("li"),Gre=a("strong"),lYe=o("xlm-prophetnet"),iYe=o(" \u2014 "),PS=a("a"),dYe=o("XLMProphetNetConfig"),cYe=o(" (XLMProphetNet model)"),fYe=l(),bg=a("li"),Ore=a("strong"),mYe=o("xlm-roberta"),gYe=o(" \u2014 "),BS=a("a"),hYe=o("XLMRobertaConfig"),pYe=o(" (XLM-RoBERTa model)"),_Ye=l(),vg=a("li"),Vre=a("strong"),uYe=o("xlm-roberta-xl"),bYe=o(" \u2014 "),IS=a("a"),vYe=o("XLMRobertaXLConfig"),FYe=o(" (XLM-RoBERTa-XL model)"),TYe=l(),Fg=a("li"),Xre=a("strong"),MYe=o("xlnet"),EYe=o(" \u2014 "),qS=a("a"),CYe=o("XLNetConfig"),wYe=o(" (XLNet model)"),AYe=l(),Tg=a("li"),zre=a("strong"),yYe=o("yolos"),LYe=o(" \u2014 "),NS=a("a"),xYe=o("YolosConfig"),$Ye=o(" (YOLOS model)"),kYe=l(),Mg=a("li"),Wre=a("strong"),SYe=o("yoso"),RYe=o(" \u2014 "),jS=a("a"),PYe=o("YosoConfig"),BYe=o(" (YOSO model)"),IYe=l(),F(Eg.$$.fragment),qYe=l(),Cg=a("div"),F(T6.$$.fragment),NYe=l(),Qre=a("p"),jYe=o("Register a new configuration for this class."),dqe=l(),Ei=a("h2"),wg=a("a"),Hre=a("span"),F(M6.$$.fragment),DYe=l(),Ure=a("span"),GYe=o("AutoTokenizer"),cqe=l(),wo=a("div"),F(E6.$$.fragment),OYe=l(),C6=a("p"),VYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DS=a("a"),XYe=o("AutoTokenizer.from_pretrained()"),zYe=o(" class method."),WYe=l(),w6=a("p"),QYe=o("This class cannot be instantiated directly using "),Jre=a("code"),HYe=o("__init__()"),UYe=o(" (throws an error)."),JYe=l(),Cr=a("div"),F(A6.$$.fragment),YYe=l(),Yre=a("p"),KYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZYe=l(),Aa=a("p"),eKe=o("The tokenizer class to instantiate is selected based on the "),Kre=a("code"),oKe=o("model_type"),rKe=o(` property of the config object (either
passed as an argument or loaded from `),Zre=a("code"),tKe=o("pretrained_model_name_or_path"),aKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ete=a("code"),nKe=o("pretrained_model_name_or_path"),sKe=o(":"),lKe=l(),k=a("ul"),Sn=a("li"),ote=a("strong"),iKe=o("albert"),dKe=o(" \u2014 "),GS=a("a"),cKe=o("AlbertTokenizer"),fKe=o(" or "),OS=a("a"),mKe=o("AlbertTokenizerFast"),gKe=o(" (ALBERT model)"),hKe=l(),Rn=a("li"),rte=a("strong"),pKe=o("bart"),_Ke=o(" \u2014 "),VS=a("a"),uKe=o("BartTokenizer"),bKe=o(" or "),XS=a("a"),vKe=o("BartTokenizerFast"),FKe=o(" (BART model)"),TKe=l(),Pn=a("li"),tte=a("strong"),MKe=o("barthez"),EKe=o(" \u2014 "),zS=a("a"),CKe=o("BarthezTokenizer"),wKe=o(" or "),WS=a("a"),AKe=o("BarthezTokenizerFast"),yKe=o(" (BARThez model)"),LKe=l(),Bn=a("li"),ate=a("strong"),xKe=o("bartpho"),$Ke=o(" \u2014 "),QS=a("a"),kKe=o("BartphoTokenizer"),SKe=o(" or "),HS=a("a"),RKe=o("BartphoTokenizerFast"),PKe=o(" (BARTpho model)"),BKe=l(),In=a("li"),nte=a("strong"),IKe=o("bert"),qKe=o(" \u2014 "),US=a("a"),NKe=o("BertTokenizer"),jKe=o(" or "),JS=a("a"),DKe=o("BertTokenizerFast"),GKe=o(" (BERT model)"),OKe=l(),Ag=a("li"),ste=a("strong"),VKe=o("bert-generation"),XKe=o(" \u2014 "),YS=a("a"),zKe=o("BertGenerationTokenizer"),WKe=o(" (Bert Generation model)"),QKe=l(),yg=a("li"),lte=a("strong"),HKe=o("bert-japanese"),UKe=o(" \u2014 "),KS=a("a"),JKe=o("BertJapaneseTokenizer"),YKe=o(" (BertJapanese model)"),KKe=l(),qn=a("li"),ite=a("strong"),ZKe=o("bertweet"),eZe=o(" \u2014 "),ZS=a("a"),oZe=o("BertweetTokenizer"),rZe=o(" or "),eR=a("a"),tZe=o("BertweetTokenizerFast"),aZe=o(" (Bertweet model)"),nZe=l(),Nn=a("li"),dte=a("strong"),sZe=o("big_bird"),lZe=o(" \u2014 "),oR=a("a"),iZe=o("BigBirdTokenizer"),dZe=o(" or "),rR=a("a"),cZe=o("BigBirdTokenizerFast"),fZe=o(" (BigBird model)"),mZe=l(),jn=a("li"),cte=a("strong"),gZe=o("bigbird_pegasus"),hZe=o(" \u2014 "),tR=a("a"),pZe=o("PegasusTokenizer"),_Ze=o(" or "),aR=a("a"),uZe=o("PegasusTokenizerFast"),bZe=o(" (BigBirdPegasus model)"),vZe=l(),Dn=a("li"),fte=a("strong"),FZe=o("blenderbot"),TZe=o(" \u2014 "),nR=a("a"),MZe=o("BlenderbotTokenizer"),EZe=o(" or "),sR=a("a"),CZe=o("BlenderbotTokenizerFast"),wZe=o(" (Blenderbot model)"),AZe=l(),Lg=a("li"),mte=a("strong"),yZe=o("blenderbot-small"),LZe=o(" \u2014 "),lR=a("a"),xZe=o("BlenderbotSmallTokenizer"),$Ze=o(" (BlenderbotSmall model)"),kZe=l(),xg=a("li"),gte=a("strong"),SZe=o("byt5"),RZe=o(" \u2014 "),iR=a("a"),PZe=o("ByT5Tokenizer"),BZe=o(" (ByT5 model)"),IZe=l(),Gn=a("li"),hte=a("strong"),qZe=o("camembert"),NZe=o(" \u2014 "),dR=a("a"),jZe=o("CamembertTokenizer"),DZe=o(" or "),cR=a("a"),GZe=o("CamembertTokenizerFast"),OZe=o(" (CamemBERT model)"),VZe=l(),$g=a("li"),pte=a("strong"),XZe=o("canine"),zZe=o(" \u2014 "),fR=a("a"),WZe=o("CanineTokenizer"),QZe=o(" (Canine model)"),HZe=l(),On=a("li"),_te=a("strong"),UZe=o("clip"),JZe=o(" \u2014 "),mR=a("a"),YZe=o("CLIPTokenizer"),KZe=o(" or "),gR=a("a"),ZZe=o("CLIPTokenizerFast"),eeo=o(" (CLIP model)"),oeo=l(),Vn=a("li"),ute=a("strong"),reo=o("convbert"),teo=o(" \u2014 "),hR=a("a"),aeo=o("ConvBertTokenizer"),neo=o(" or "),pR=a("a"),seo=o("ConvBertTokenizerFast"),leo=o(" (ConvBERT model)"),ieo=l(),Xn=a("li"),bte=a("strong"),deo=o("cpm"),ceo=o(" \u2014 "),_R=a("a"),feo=o("CpmTokenizer"),meo=o(" or "),uR=a("a"),geo=o("CpmTokenizerFast"),heo=o(" (CPM model)"),peo=l(),kg=a("li"),vte=a("strong"),_eo=o("ctrl"),ueo=o(" \u2014 "),bR=a("a"),beo=o("CTRLTokenizer"),veo=o(" (CTRL model)"),Feo=l(),zn=a("li"),Fte=a("strong"),Teo=o("data2vec-text"),Meo=o(" \u2014 "),vR=a("a"),Eeo=o("RobertaTokenizer"),Ceo=o(" or "),FR=a("a"),weo=o("RobertaTokenizerFast"),Aeo=o(" (Data2VecText model)"),yeo=l(),Wn=a("li"),Tte=a("strong"),Leo=o("deberta"),xeo=o(" \u2014 "),TR=a("a"),$eo=o("DebertaTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("DebertaTokenizerFast"),Reo=o(" (DeBERTa model)"),Peo=l(),Qn=a("li"),Mte=a("strong"),Beo=o("deberta-v2"),Ieo=o(" \u2014 "),ER=a("a"),qeo=o("DebertaV2Tokenizer"),Neo=o(" or "),CR=a("a"),jeo=o("DebertaV2TokenizerFast"),Deo=o(" (DeBERTa-v2 model)"),Geo=l(),Hn=a("li"),Ete=a("strong"),Oeo=o("distilbert"),Veo=o(" \u2014 "),wR=a("a"),Xeo=o("DistilBertTokenizer"),zeo=o(" or "),AR=a("a"),Weo=o("DistilBertTokenizerFast"),Qeo=o(" (DistilBERT model)"),Heo=l(),Un=a("li"),Cte=a("strong"),Ueo=o("dpr"),Jeo=o(" \u2014 "),yR=a("a"),Yeo=o("DPRQuestionEncoderTokenizer"),Keo=o(" or "),LR=a("a"),Zeo=o("DPRQuestionEncoderTokenizerFast"),eoo=o(" (DPR model)"),ooo=l(),Jn=a("li"),wte=a("strong"),roo=o("electra"),too=o(" \u2014 "),xR=a("a"),aoo=o("ElectraTokenizer"),noo=o(" or "),$R=a("a"),soo=o("ElectraTokenizerFast"),loo=o(" (ELECTRA model)"),ioo=l(),Sg=a("li"),Ate=a("strong"),doo=o("flaubert"),coo=o(" \u2014 "),kR=a("a"),foo=o("FlaubertTokenizer"),moo=o(" (FlauBERT model)"),goo=l(),Yn=a("li"),yte=a("strong"),hoo=o("fnet"),poo=o(" \u2014 "),SR=a("a"),_oo=o("FNetTokenizer"),uoo=o(" or "),RR=a("a"),boo=o("FNetTokenizerFast"),voo=o(" (FNet model)"),Foo=l(),Rg=a("li"),Lte=a("strong"),Too=o("fsmt"),Moo=o(" \u2014 "),PR=a("a"),Eoo=o("FSMTTokenizer"),Coo=o(" (FairSeq Machine-Translation model)"),woo=l(),Kn=a("li"),xte=a("strong"),Aoo=o("funnel"),yoo=o(" \u2014 "),BR=a("a"),Loo=o("FunnelTokenizer"),xoo=o(" or "),IR=a("a"),$oo=o("FunnelTokenizerFast"),koo=o(" (Funnel Transformer model)"),Soo=l(),Zn=a("li"),$te=a("strong"),Roo=o("gpt2"),Poo=o(" \u2014 "),qR=a("a"),Boo=o("GPT2Tokenizer"),Ioo=o(" or "),NR=a("a"),qoo=o("GPT2TokenizerFast"),Noo=o(" (OpenAI GPT-2 model)"),joo=l(),es=a("li"),kte=a("strong"),Doo=o("gpt_neo"),Goo=o(" \u2014 "),jR=a("a"),Ooo=o("GPT2Tokenizer"),Voo=o(" or "),DR=a("a"),Xoo=o("GPT2TokenizerFast"),zoo=o(" (GPT Neo model)"),Woo=l(),os=a("li"),Ste=a("strong"),Qoo=o("gptj"),Hoo=o(" \u2014 "),GR=a("a"),Uoo=o("GPT2Tokenizer"),Joo=o(" or "),OR=a("a"),Yoo=o("GPT2TokenizerFast"),Koo=o(" (GPT-J model)"),Zoo=l(),rs=a("li"),Rte=a("strong"),ero=o("herbert"),oro=o(" \u2014 "),VR=a("a"),rro=o("HerbertTokenizer"),tro=o(" or "),XR=a("a"),aro=o("HerbertTokenizerFast"),nro=o(" (HerBERT model)"),sro=l(),Pg=a("li"),Pte=a("strong"),lro=o("hubert"),iro=o(" \u2014 "),zR=a("a"),dro=o("Wav2Vec2CTCTokenizer"),cro=o(" (Hubert model)"),fro=l(),ts=a("li"),Bte=a("strong"),mro=o("ibert"),gro=o(" \u2014 "),WR=a("a"),hro=o("RobertaTokenizer"),pro=o(" or "),QR=a("a"),_ro=o("RobertaTokenizerFast"),uro=o(" (I-BERT model)"),bro=l(),as=a("li"),Ite=a("strong"),vro=o("layoutlm"),Fro=o(" \u2014 "),HR=a("a"),Tro=o("LayoutLMTokenizer"),Mro=o(" or "),UR=a("a"),Ero=o("LayoutLMTokenizerFast"),Cro=o(" (LayoutLM model)"),wro=l(),ns=a("li"),qte=a("strong"),Aro=o("layoutlmv2"),yro=o(" \u2014 "),JR=a("a"),Lro=o("LayoutLMv2Tokenizer"),xro=o(" or "),YR=a("a"),$ro=o("LayoutLMv2TokenizerFast"),kro=o(" (LayoutLMv2 model)"),Sro=l(),ss=a("li"),Nte=a("strong"),Rro=o("layoutxlm"),Pro=o(" \u2014 "),KR=a("a"),Bro=o("LayoutXLMTokenizer"),Iro=o(" or "),ZR=a("a"),qro=o("LayoutXLMTokenizerFast"),Nro=o(" (LayoutXLM model)"),jro=l(),ls=a("li"),jte=a("strong"),Dro=o("led"),Gro=o(" \u2014 "),eP=a("a"),Oro=o("LEDTokenizer"),Vro=o(" or "),oP=a("a"),Xro=o("LEDTokenizerFast"),zro=o(" (LED model)"),Wro=l(),is=a("li"),Dte=a("strong"),Qro=o("longformer"),Hro=o(" \u2014 "),rP=a("a"),Uro=o("LongformerTokenizer"),Jro=o(" or "),tP=a("a"),Yro=o("LongformerTokenizerFast"),Kro=o(" (Longformer model)"),Zro=l(),Bg=a("li"),Gte=a("strong"),eto=o("luke"),oto=o(" \u2014 "),aP=a("a"),rto=o("LukeTokenizer"),tto=o(" (LUKE model)"),ato=l(),ds=a("li"),Ote=a("strong"),nto=o("lxmert"),sto=o(" \u2014 "),nP=a("a"),lto=o("LxmertTokenizer"),ito=o(" or "),sP=a("a"),dto=o("LxmertTokenizerFast"),cto=o(" (LXMERT model)"),fto=l(),Ig=a("li"),Vte=a("strong"),mto=o("m2m_100"),gto=o(" \u2014 "),lP=a("a"),hto=o("M2M100Tokenizer"),pto=o(" (M2M100 model)"),_to=l(),qg=a("li"),Xte=a("strong"),uto=o("marian"),bto=o(" \u2014 "),iP=a("a"),vto=o("MarianTokenizer"),Fto=o(" (Marian model)"),Tto=l(),cs=a("li"),zte=a("strong"),Mto=o("mbart"),Eto=o(" \u2014 "),dP=a("a"),Cto=o("MBartTokenizer"),wto=o(" or "),cP=a("a"),Ato=o("MBartTokenizerFast"),yto=o(" (mBART model)"),Lto=l(),fs=a("li"),Wte=a("strong"),xto=o("mbart50"),$to=o(" \u2014 "),fP=a("a"),kto=o("MBart50Tokenizer"),Sto=o(" or "),mP=a("a"),Rto=o("MBart50TokenizerFast"),Pto=o(" (mBART-50 model)"),Bto=l(),ms=a("li"),Qte=a("strong"),Ito=o("megatron-bert"),qto=o(" \u2014 "),gP=a("a"),Nto=o("BertTokenizer"),jto=o(" or "),hP=a("a"),Dto=o("BertTokenizerFast"),Gto=o(" (MegatronBert model)"),Oto=l(),Ng=a("li"),Hte=a("strong"),Vto=o("mluke"),Xto=o(" \u2014 "),pP=a("a"),zto=o("MLukeTokenizer"),Wto=o(" (mLUKE model)"),Qto=l(),gs=a("li"),Ute=a("strong"),Hto=o("mobilebert"),Uto=o(" \u2014 "),_P=a("a"),Jto=o("MobileBertTokenizer"),Yto=o(" or "),uP=a("a"),Kto=o("MobileBertTokenizerFast"),Zto=o(" (MobileBERT model)"),eao=l(),hs=a("li"),Jte=a("strong"),oao=o("mpnet"),rao=o(" \u2014 "),bP=a("a"),tao=o("MPNetTokenizer"),aao=o(" or "),vP=a("a"),nao=o("MPNetTokenizerFast"),sao=o(" (MPNet model)"),lao=l(),ps=a("li"),Yte=a("strong"),iao=o("mt5"),dao=o(" \u2014 "),FP=a("a"),cao=o("MT5Tokenizer"),fao=o(" or "),TP=a("a"),mao=o("MT5TokenizerFast"),gao=o(" (mT5 model)"),hao=l(),_s=a("li"),Kte=a("strong"),pao=o("nystromformer"),_ao=o(" \u2014 "),MP=a("a"),uao=o("AlbertTokenizer"),bao=o(" or "),EP=a("a"),vao=o("AlbertTokenizerFast"),Fao=o(" (Nystromformer model)"),Tao=l(),us=a("li"),Zte=a("strong"),Mao=o("openai-gpt"),Eao=o(" \u2014 "),CP=a("a"),Cao=o("OpenAIGPTTokenizer"),wao=o(" or "),wP=a("a"),Aao=o("OpenAIGPTTokenizerFast"),yao=o(" (OpenAI GPT model)"),Lao=l(),jg=a("li"),eae=a("strong"),xao=o("opt"),$ao=o(" \u2014 "),AP=a("a"),kao=o("GPT2Tokenizer"),Sao=o(" (OPT model)"),Rao=l(),bs=a("li"),oae=a("strong"),Pao=o("pegasus"),Bao=o(" \u2014 "),yP=a("a"),Iao=o("PegasusTokenizer"),qao=o(" or "),LP=a("a"),Nao=o("PegasusTokenizerFast"),jao=o(" (Pegasus model)"),Dao=l(),Dg=a("li"),rae=a("strong"),Gao=o("perceiver"),Oao=o(" \u2014 "),xP=a("a"),Vao=o("PerceiverTokenizer"),Xao=o(" (Perceiver model)"),zao=l(),vs=a("li"),tae=a("strong"),Wao=o("phobert"),Qao=o(" \u2014 "),$P=a("a"),Hao=o("PhobertTokenizer"),Uao=o(" or "),kP=a("a"),Jao=o("PhobertTokenizerFast"),Yao=o(" (PhoBERT model)"),Kao=l(),Gg=a("li"),aae=a("strong"),Zao=o("plbart"),eno=o(" \u2014 "),SP=a("a"),ono=o("PLBartTokenizer"),rno=o(" (PLBart model)"),tno=l(),Og=a("li"),nae=a("strong"),ano=o("prophetnet"),nno=o(" \u2014 "),RP=a("a"),sno=o("ProphetNetTokenizer"),lno=o(" (ProphetNet model)"),ino=l(),Fs=a("li"),sae=a("strong"),dno=o("qdqbert"),cno=o(" \u2014 "),PP=a("a"),fno=o("BertTokenizer"),mno=o(" or "),BP=a("a"),gno=o("BertTokenizerFast"),hno=o(" (QDQBert model)"),pno=l(),Vg=a("li"),lae=a("strong"),_no=o("rag"),uno=o(" \u2014 "),IP=a("a"),bno=o("RagTokenizer"),vno=o(" (RAG model)"),Fno=l(),Ts=a("li"),iae=a("strong"),Tno=o("realm"),Mno=o(" \u2014 "),qP=a("a"),Eno=o("RealmTokenizer"),Cno=o(" or "),NP=a("a"),wno=o("RealmTokenizerFast"),Ano=o(" (Realm model)"),yno=l(),Ms=a("li"),dae=a("strong"),Lno=o("reformer"),xno=o(" \u2014 "),jP=a("a"),$no=o("ReformerTokenizer"),kno=o(" or "),DP=a("a"),Sno=o("ReformerTokenizerFast"),Rno=o(" (Reformer model)"),Pno=l(),Es=a("li"),cae=a("strong"),Bno=o("rembert"),Ino=o(" \u2014 "),GP=a("a"),qno=o("RemBertTokenizer"),Nno=o(" or "),OP=a("a"),jno=o("RemBertTokenizerFast"),Dno=o(" (RemBERT model)"),Gno=l(),Cs=a("li"),fae=a("strong"),Ono=o("retribert"),Vno=o(" \u2014 "),VP=a("a"),Xno=o("RetriBertTokenizer"),zno=o(" or "),XP=a("a"),Wno=o("RetriBertTokenizerFast"),Qno=o(" (RetriBERT model)"),Hno=l(),ws=a("li"),mae=a("strong"),Uno=o("roberta"),Jno=o(" \u2014 "),zP=a("a"),Yno=o("RobertaTokenizer"),Kno=o(" or "),WP=a("a"),Zno=o("RobertaTokenizerFast"),eso=o(" (RoBERTa model)"),oso=l(),As=a("li"),gae=a("strong"),rso=o("roformer"),tso=o(" \u2014 "),QP=a("a"),aso=o("RoFormerTokenizer"),nso=o(" or "),HP=a("a"),sso=o("RoFormerTokenizerFast"),lso=o(" (RoFormer model)"),iso=l(),Xg=a("li"),hae=a("strong"),dso=o("speech_to_text"),cso=o(" \u2014 "),UP=a("a"),fso=o("Speech2TextTokenizer"),mso=o(" (Speech2Text model)"),gso=l(),zg=a("li"),pae=a("strong"),hso=o("speech_to_text_2"),pso=o(" \u2014 "),JP=a("a"),_so=o("Speech2Text2Tokenizer"),uso=o(" (Speech2Text2 model)"),bso=l(),ys=a("li"),_ae=a("strong"),vso=o("splinter"),Fso=o(" \u2014 "),YP=a("a"),Tso=o("SplinterTokenizer"),Mso=o(" or "),KP=a("a"),Eso=o("SplinterTokenizerFast"),Cso=o(" (Splinter model)"),wso=l(),Ls=a("li"),uae=a("strong"),Aso=o("squeezebert"),yso=o(" \u2014 "),ZP=a("a"),Lso=o("SqueezeBertTokenizer"),xso=o(" or "),eB=a("a"),$so=o("SqueezeBertTokenizerFast"),kso=o(" (SqueezeBERT model)"),Sso=l(),xs=a("li"),bae=a("strong"),Rso=o("t5"),Pso=o(" \u2014 "),oB=a("a"),Bso=o("T5Tokenizer"),Iso=o(" or "),rB=a("a"),qso=o("T5TokenizerFast"),Nso=o(" (T5 model)"),jso=l(),Wg=a("li"),vae=a("strong"),Dso=o("tapas"),Gso=o(" \u2014 "),tB=a("a"),Oso=o("TapasTokenizer"),Vso=o(" (TAPAS model)"),Xso=l(),Qg=a("li"),Fae=a("strong"),zso=o("tapex"),Wso=o(" \u2014 "),aB=a("a"),Qso=o("TapexTokenizer"),Hso=o(" (TAPEX model)"),Uso=l(),Hg=a("li"),Tae=a("strong"),Jso=o("transfo-xl"),Yso=o(" \u2014 "),nB=a("a"),Kso=o("TransfoXLTokenizer"),Zso=o(" (Transformer-XL model)"),elo=l(),$s=a("li"),Mae=a("strong"),olo=o("visual_bert"),rlo=o(" \u2014 "),sB=a("a"),tlo=o("BertTokenizer"),alo=o(" or "),lB=a("a"),nlo=o("BertTokenizerFast"),slo=o(" (VisualBert model)"),llo=l(),Ug=a("li"),Eae=a("strong"),ilo=o("wav2vec2"),dlo=o(" \u2014 "),iB=a("a"),clo=o("Wav2Vec2CTCTokenizer"),flo=o(" (Wav2Vec2 model)"),mlo=l(),Jg=a("li"),Cae=a("strong"),glo=o("wav2vec2-conformer"),hlo=o(" \u2014 "),dB=a("a"),plo=o("Wav2Vec2CTCTokenizer"),_lo=o(" (Wav2Vec2-Conformer model)"),ulo=l(),Yg=a("li"),wae=a("strong"),blo=o("wav2vec2_phoneme"),vlo=o(" \u2014 "),cB=a("a"),Flo=o("Wav2Vec2PhonemeCTCTokenizer"),Tlo=o(" (Wav2Vec2Phoneme model)"),Mlo=l(),ks=a("li"),Aae=a("strong"),Elo=o("xglm"),Clo=o(" \u2014 "),fB=a("a"),wlo=o("XGLMTokenizer"),Alo=o(" or "),mB=a("a"),ylo=o("XGLMTokenizerFast"),Llo=o(" (XGLM model)"),xlo=l(),Kg=a("li"),yae=a("strong"),$lo=o("xlm"),klo=o(" \u2014 "),gB=a("a"),Slo=o("XLMTokenizer"),Rlo=o(" (XLM model)"),Plo=l(),Zg=a("li"),Lae=a("strong"),Blo=o("xlm-prophetnet"),Ilo=o(" \u2014 "),hB=a("a"),qlo=o("XLMProphetNetTokenizer"),Nlo=o(" (XLMProphetNet model)"),jlo=l(),Ss=a("li"),xae=a("strong"),Dlo=o("xlm-roberta"),Glo=o(" \u2014 "),pB=a("a"),Olo=o("XLMRobertaTokenizer"),Vlo=o(" or "),_B=a("a"),Xlo=o("XLMRobertaTokenizerFast"),zlo=o(" (XLM-RoBERTa model)"),Wlo=l(),Rs=a("li"),$ae=a("strong"),Qlo=o("xlm-roberta-xl"),Hlo=o(" \u2014 "),uB=a("a"),Ulo=o("RobertaTokenizer"),Jlo=o(" or "),bB=a("a"),Ylo=o("RobertaTokenizerFast"),Klo=o(" (XLM-RoBERTa-XL model)"),Zlo=l(),Ps=a("li"),kae=a("strong"),eio=o("xlnet"),oio=o(" \u2014 "),vB=a("a"),rio=o("XLNetTokenizer"),tio=o(" or "),FB=a("a"),aio=o("XLNetTokenizerFast"),nio=o(" (XLNet model)"),sio=l(),Bs=a("li"),Sae=a("strong"),lio=o("yoso"),iio=o(" \u2014 "),TB=a("a"),dio=o("AlbertTokenizer"),cio=o(" or "),MB=a("a"),fio=o("AlbertTokenizerFast"),mio=o(" (YOSO model)"),gio=l(),F(eh.$$.fragment),hio=l(),oh=a("div"),F(y6.$$.fragment),pio=l(),Rae=a("p"),_io=o("Register a new tokenizer in this mapping."),fqe=l(),Ci=a("h2"),rh=a("a"),Pae=a("span"),F(L6.$$.fragment),uio=l(),Bae=a("span"),bio=o("AutoFeatureExtractor"),mqe=l(),Ao=a("div"),F(x6.$$.fragment),vio=l(),$6=a("p"),Fio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=a("a"),Tio=o("AutoFeatureExtractor.from_pretrained()"),Mio=o(" class method."),Eio=l(),k6=a("p"),Cio=o("This class cannot be instantiated directly using "),Iae=a("code"),wio=o("__init__()"),Aio=o(" (throws an error)."),yio=l(),He=a("div"),F(S6.$$.fragment),Lio=l(),qae=a("p"),xio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$io=l(),ya=a("p"),kio=o("The feature extractor class to instantiate is selected based on the "),Nae=a("code"),Sio=o("model_type"),Rio=o(` property of the config object
(either passed as an argument or loaded from `),jae=a("code"),Pio=o("pretrained_model_name_or_path"),Bio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Dae=a("code"),Iio=o("pretrained_model_name_or_path"),qio=o(":"),Nio=l(),Z=a("ul"),th=a("li"),Gae=a("strong"),jio=o("beit"),Dio=o(" \u2014 "),CB=a("a"),Gio=o("BeitFeatureExtractor"),Oio=o(" (BEiT model)"),Vio=l(),ah=a("li"),Oae=a("strong"),Xio=o("clip"),zio=o(" \u2014 "),wB=a("a"),Wio=o("CLIPFeatureExtractor"),Qio=o(" (CLIP model)"),Hio=l(),nh=a("li"),Vae=a("strong"),Uio=o("convnext"),Jio=o(" \u2014 "),AB=a("a"),Yio=o("ConvNextFeatureExtractor"),Kio=o(" (ConvNext model)"),Zio=l(),sh=a("li"),Xae=a("strong"),edo=o("cvt"),odo=o(" \u2014 "),yB=a("a"),rdo=o("ConvNextFeatureExtractor"),tdo=o(" (CvT model)"),ado=l(),lh=a("li"),zae=a("strong"),ndo=o("data2vec-audio"),sdo=o(" \u2014 "),LB=a("a"),ldo=o("Wav2Vec2FeatureExtractor"),ido=o(" (Data2VecAudio model)"),ddo=l(),ih=a("li"),Wae=a("strong"),cdo=o("data2vec-vision"),fdo=o(" \u2014 "),xB=a("a"),mdo=o("BeitFeatureExtractor"),gdo=o(" (Data2VecVision model)"),hdo=l(),dh=a("li"),Qae=a("strong"),pdo=o("deit"),_do=o(" \u2014 "),$B=a("a"),udo=o("DeiTFeatureExtractor"),bdo=o(" (DeiT model)"),vdo=l(),ch=a("li"),Hae=a("strong"),Fdo=o("detr"),Tdo=o(" \u2014 "),kB=a("a"),Mdo=o("DetrFeatureExtractor"),Edo=o(" (DETR model)"),Cdo=l(),fh=a("li"),Uae=a("strong"),wdo=o("dpt"),Ado=o(" \u2014 "),SB=a("a"),ydo=o("DPTFeatureExtractor"),Ldo=o(" (DPT model)"),xdo=l(),mh=a("li"),Jae=a("strong"),$do=o("flava"),kdo=o(" \u2014 "),RB=a("a"),Sdo=o("FlavaFeatureExtractor"),Rdo=o(" (Flava model)"),Pdo=l(),gh=a("li"),Yae=a("strong"),Bdo=o("glpn"),Ido=o(" \u2014 "),PB=a("a"),qdo=o("GLPNFeatureExtractor"),Ndo=o(" (GLPN model)"),jdo=l(),hh=a("li"),Kae=a("strong"),Ddo=o("hubert"),Gdo=o(" \u2014 "),BB=a("a"),Odo=o("Wav2Vec2FeatureExtractor"),Vdo=o(" (Hubert model)"),Xdo=l(),ph=a("li"),Zae=a("strong"),zdo=o("layoutlmv2"),Wdo=o(" \u2014 "),IB=a("a"),Qdo=o("LayoutLMv2FeatureExtractor"),Hdo=o(" (LayoutLMv2 model)"),Udo=l(),_h=a("li"),ene=a("strong"),Jdo=o("maskformer"),Ydo=o(" \u2014 "),qB=a("a"),Kdo=o("MaskFormerFeatureExtractor"),Zdo=o(" (MaskFormer model)"),eco=l(),uh=a("li"),one=a("strong"),oco=o("perceiver"),rco=o(" \u2014 "),NB=a("a"),tco=o("PerceiverFeatureExtractor"),aco=o(" (Perceiver model)"),nco=l(),bh=a("li"),rne=a("strong"),sco=o("poolformer"),lco=o(" \u2014 "),jB=a("a"),ico=o("PoolFormerFeatureExtractor"),dco=o(" (PoolFormer model)"),cco=l(),vh=a("li"),tne=a("strong"),fco=o("regnet"),mco=o(" \u2014 "),DB=a("a"),gco=o("ConvNextFeatureExtractor"),hco=o(" (RegNet model)"),pco=l(),Fh=a("li"),ane=a("strong"),_co=o("resnet"),uco=o(" \u2014 "),GB=a("a"),bco=o("ConvNextFeatureExtractor"),vco=o(" (ResNet model)"),Fco=l(),Th=a("li"),nne=a("strong"),Tco=o("segformer"),Mco=o(" \u2014 "),OB=a("a"),Eco=o("SegformerFeatureExtractor"),Cco=o(" (SegFormer model)"),wco=l(),Mh=a("li"),sne=a("strong"),Aco=o("speech_to_text"),yco=o(" \u2014 "),VB=a("a"),Lco=o("Speech2TextFeatureExtractor"),xco=o(" (Speech2Text model)"),$co=l(),Eh=a("li"),lne=a("strong"),kco=o("swin"),Sco=o(" \u2014 "),XB=a("a"),Rco=o("ViTFeatureExtractor"),Pco=o(" (Swin model)"),Bco=l(),Ch=a("li"),ine=a("strong"),Ico=o("van"),qco=o(" \u2014 "),zB=a("a"),Nco=o("ConvNextFeatureExtractor"),jco=o(" (VAN model)"),Dco=l(),wh=a("li"),dne=a("strong"),Gco=o("vit"),Oco=o(" \u2014 "),WB=a("a"),Vco=o("ViTFeatureExtractor"),Xco=o(" (ViT model)"),zco=l(),Ah=a("li"),cne=a("strong"),Wco=o("vit_mae"),Qco=o(" \u2014 "),QB=a("a"),Hco=o("ViTFeatureExtractor"),Uco=o(" (ViTMAE model)"),Jco=l(),yh=a("li"),fne=a("strong"),Yco=o("wav2vec2"),Kco=o(" \u2014 "),HB=a("a"),Zco=o("Wav2Vec2FeatureExtractor"),efo=o(" (Wav2Vec2 model)"),ofo=l(),Lh=a("li"),mne=a("strong"),rfo=o("wav2vec2-conformer"),tfo=o(" \u2014 "),UB=a("a"),afo=o("Wav2Vec2FeatureExtractor"),nfo=o(" (Wav2Vec2-Conformer model)"),sfo=l(),xh=a("li"),gne=a("strong"),lfo=o("yolos"),ifo=o(" \u2014 "),JB=a("a"),dfo=o("YolosFeatureExtractor"),cfo=o(" (YOLOS model)"),ffo=l(),F($h.$$.fragment),mfo=l(),F(kh.$$.fragment),gfo=l(),Sh=a("div"),F(R6.$$.fragment),hfo=l(),hne=a("p"),pfo=o("Register a new feature extractor for this class."),gqe=l(),wi=a("h2"),Rh=a("a"),pne=a("span"),F(P6.$$.fragment),_fo=l(),_ne=a("span"),ufo=o("AutoProcessor"),hqe=l(),yo=a("div"),F(B6.$$.fragment),bfo=l(),I6=a("p"),vfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YB=a("a"),Ffo=o("AutoProcessor.from_pretrained()"),Tfo=o(" class method."),Mfo=l(),q6=a("p"),Efo=o("This class cannot be instantiated directly using "),une=a("code"),Cfo=o("__init__()"),wfo=o(" (throws an error)."),Afo=l(),Ue=a("div"),F(N6.$$.fragment),yfo=l(),bne=a("p"),Lfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xfo=l(),Ai=a("p"),$fo=o("The processor class to instantiate is selected based on the "),vne=a("code"),kfo=o("model_type"),Sfo=o(` property of the config object (either
passed as an argument or loaded from `),Fne=a("code"),Rfo=o("pretrained_model_name_or_path"),Pfo=o(" if possible):"),Bfo=l(),pe=a("ul"),Ph=a("li"),Tne=a("strong"),Ifo=o("clip"),qfo=o(" \u2014 "),KB=a("a"),Nfo=o("CLIPProcessor"),jfo=o(" (CLIP model)"),Dfo=l(),Bh=a("li"),Mne=a("strong"),Gfo=o("flava"),Ofo=o(" \u2014 "),Ene=a("code"),Vfo=o("FLAVAProcessor"),Xfo=o(" (Flava model)"),zfo=l(),Ih=a("li"),Cne=a("strong"),Wfo=o("layoutlmv2"),Qfo=o(" \u2014 "),ZB=a("a"),Hfo=o("LayoutLMv2Processor"),Ufo=o(" (LayoutLMv2 model)"),Jfo=l(),qh=a("li"),wne=a("strong"),Yfo=o("layoutxlm"),Kfo=o(" \u2014 "),eI=a("a"),Zfo=o("LayoutXLMProcessor"),emo=o(" (LayoutXLM model)"),omo=l(),Nh=a("li"),Ane=a("strong"),rmo=o("sew"),tmo=o(" \u2014 "),oI=a("a"),amo=o("Wav2Vec2Processor"),nmo=o(" (SEW model)"),smo=l(),jh=a("li"),yne=a("strong"),lmo=o("sew-d"),imo=o(" \u2014 "),rI=a("a"),dmo=o("Wav2Vec2Processor"),cmo=o(" (SEW-D model)"),fmo=l(),Dh=a("li"),Lne=a("strong"),mmo=o("speech_to_text"),gmo=o(" \u2014 "),tI=a("a"),hmo=o("Speech2TextProcessor"),pmo=o(" (Speech2Text model)"),_mo=l(),Gh=a("li"),xne=a("strong"),umo=o("speech_to_text_2"),bmo=o(" \u2014 "),aI=a("a"),vmo=o("Speech2Text2Processor"),Fmo=o(" (Speech2Text2 model)"),Tmo=l(),Oh=a("li"),$ne=a("strong"),Mmo=o("trocr"),Emo=o(" \u2014 "),nI=a("a"),Cmo=o("TrOCRProcessor"),wmo=o(" (TrOCR model)"),Amo=l(),Vh=a("li"),kne=a("strong"),ymo=o("unispeech"),Lmo=o(" \u2014 "),sI=a("a"),xmo=o("Wav2Vec2Processor"),$mo=o(" (UniSpeech model)"),kmo=l(),Xh=a("li"),Sne=a("strong"),Smo=o("unispeech-sat"),Rmo=o(" \u2014 "),lI=a("a"),Pmo=o("Wav2Vec2Processor"),Bmo=o(" (UniSpeechSat model)"),Imo=l(),zh=a("li"),Rne=a("strong"),qmo=o("vilt"),Nmo=o(" \u2014 "),iI=a("a"),jmo=o("ViltProcessor"),Dmo=o(" (ViLT model)"),Gmo=l(),Wh=a("li"),Pne=a("strong"),Omo=o("vision-text-dual-encoder"),Vmo=o(" \u2014 "),dI=a("a"),Xmo=o("VisionTextDualEncoderProcessor"),zmo=o(" (VisionTextDualEncoder model)"),Wmo=l(),Qh=a("li"),Bne=a("strong"),Qmo=o("wav2vec2"),Hmo=o(" \u2014 "),cI=a("a"),Umo=o("Wav2Vec2Processor"),Jmo=o(" (Wav2Vec2 model)"),Ymo=l(),Hh=a("li"),Ine=a("strong"),Kmo=o("wav2vec2-conformer"),Zmo=o(" \u2014 "),fI=a("a"),ego=o("Wav2Vec2Processor"),ogo=o(" (Wav2Vec2-Conformer model)"),rgo=l(),Uh=a("li"),qne=a("strong"),tgo=o("wavlm"),ago=o(" \u2014 "),mI=a("a"),ngo=o("Wav2Vec2Processor"),sgo=o(" (WavLM model)"),lgo=l(),F(Jh.$$.fragment),igo=l(),F(Yh.$$.fragment),dgo=l(),Kh=a("div"),F(j6.$$.fragment),cgo=l(),Nne=a("p"),fgo=o("Register a new processor for this class."),pqe=l(),yi=a("h2"),Zh=a("a"),jne=a("span"),F(D6.$$.fragment),mgo=l(),Dne=a("span"),ggo=o("AutoModel"),_qe=l(),Lo=a("div"),F(G6.$$.fragment),hgo=l(),Li=a("p"),pgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gI=a("a"),_go=o("from_pretrained()"),ugo=o(" class method or the "),hI=a("a"),bgo=o("from_config()"),vgo=o(` class
method.`),Fgo=l(),O6=a("p"),Tgo=o("This class cannot be instantiated directly using "),Gne=a("code"),Mgo=o("__init__()"),Ego=o(" (throws an error)."),Cgo=l(),tt=a("div"),F(V6.$$.fragment),wgo=l(),One=a("p"),Ago=o("Instantiates one of the base model classes of the library from a configuration."),ygo=l(),xi=a("p"),Lgo=o(`Note:
Loading a model from its configuration file does `),Vne=a("strong"),xgo=o("not"),$go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pI=a("a"),kgo=o("from_pretrained()"),Sgo=o(" to load the model weights."),Rgo=l(),F(ep.$$.fragment),Pgo=l(),Je=a("div"),F(X6.$$.fragment),Bgo=l(),Xne=a("p"),Igo=o("Instantiate one of the base model classes of the library from a pretrained model."),qgo=l(),La=a("p"),Ngo=o("The model class to instantiate is selected based on the "),zne=a("code"),jgo=o("model_type"),Dgo=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),Ggo=o("pretrained_model_name_or_path"),Ogo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=a("code"),Vgo=o("pretrained_model_name_or_path"),Xgo=o(":"),zgo=l(),x=a("ul"),op=a("li"),Hne=a("strong"),Wgo=o("albert"),Qgo=o(" \u2014 "),_I=a("a"),Hgo=o("AlbertModel"),Ugo=o(" (ALBERT model)"),Jgo=l(),rp=a("li"),Une=a("strong"),Ygo=o("bart"),Kgo=o(" \u2014 "),uI=a("a"),Zgo=o("BartModel"),eho=o(" (BART model)"),oho=l(),tp=a("li"),Jne=a("strong"),rho=o("beit"),tho=o(" \u2014 "),bI=a("a"),aho=o("BeitModel"),nho=o(" (BEiT model)"),sho=l(),ap=a("li"),Yne=a("strong"),lho=o("bert"),iho=o(" \u2014 "),vI=a("a"),dho=o("BertModel"),cho=o(" (BERT model)"),fho=l(),np=a("li"),Kne=a("strong"),mho=o("bert-generation"),gho=o(" \u2014 "),FI=a("a"),hho=o("BertGenerationEncoder"),pho=o(" (Bert Generation model)"),_ho=l(),sp=a("li"),Zne=a("strong"),uho=o("big_bird"),bho=o(" \u2014 "),TI=a("a"),vho=o("BigBirdModel"),Fho=o(" (BigBird model)"),Tho=l(),lp=a("li"),ese=a("strong"),Mho=o("bigbird_pegasus"),Eho=o(" \u2014 "),MI=a("a"),Cho=o("BigBirdPegasusModel"),who=o(" (BigBirdPegasus model)"),Aho=l(),ip=a("li"),ose=a("strong"),yho=o("blenderbot"),Lho=o(" \u2014 "),EI=a("a"),xho=o("BlenderbotModel"),$ho=o(" (Blenderbot model)"),kho=l(),dp=a("li"),rse=a("strong"),Sho=o("blenderbot-small"),Rho=o(" \u2014 "),CI=a("a"),Pho=o("BlenderbotSmallModel"),Bho=o(" (BlenderbotSmall model)"),Iho=l(),cp=a("li"),tse=a("strong"),qho=o("camembert"),Nho=o(" \u2014 "),wI=a("a"),jho=o("CamembertModel"),Dho=o(" (CamemBERT model)"),Gho=l(),fp=a("li"),ase=a("strong"),Oho=o("canine"),Vho=o(" \u2014 "),AI=a("a"),Xho=o("CanineModel"),zho=o(" (Canine model)"),Who=l(),mp=a("li"),nse=a("strong"),Qho=o("clip"),Hho=o(" \u2014 "),yI=a("a"),Uho=o("CLIPModel"),Jho=o(" (CLIP model)"),Yho=l(),gp=a("li"),sse=a("strong"),Kho=o("convbert"),Zho=o(" \u2014 "),LI=a("a"),epo=o("ConvBertModel"),opo=o(" (ConvBERT model)"),rpo=l(),hp=a("li"),lse=a("strong"),tpo=o("convnext"),apo=o(" \u2014 "),xI=a("a"),npo=o("ConvNextModel"),spo=o(" (ConvNext model)"),lpo=l(),pp=a("li"),ise=a("strong"),ipo=o("ctrl"),dpo=o(" \u2014 "),$I=a("a"),cpo=o("CTRLModel"),fpo=o(" (CTRL model)"),mpo=l(),_p=a("li"),dse=a("strong"),gpo=o("cvt"),hpo=o(" \u2014 "),kI=a("a"),ppo=o("CvtModel"),_po=o(" (CvT model)"),upo=l(),up=a("li"),cse=a("strong"),bpo=o("data2vec-audio"),vpo=o(" \u2014 "),SI=a("a"),Fpo=o("Data2VecAudioModel"),Tpo=o(" (Data2VecAudio model)"),Mpo=l(),bp=a("li"),fse=a("strong"),Epo=o("data2vec-text"),Cpo=o(" \u2014 "),RI=a("a"),wpo=o("Data2VecTextModel"),Apo=o(" (Data2VecText model)"),ypo=l(),vp=a("li"),mse=a("strong"),Lpo=o("data2vec-vision"),xpo=o(" \u2014 "),PI=a("a"),$po=o("Data2VecVisionModel"),kpo=o(" (Data2VecVision model)"),Spo=l(),Fp=a("li"),gse=a("strong"),Rpo=o("deberta"),Ppo=o(" \u2014 "),BI=a("a"),Bpo=o("DebertaModel"),Ipo=o(" (DeBERTa model)"),qpo=l(),Tp=a("li"),hse=a("strong"),Npo=o("deberta-v2"),jpo=o(" \u2014 "),II=a("a"),Dpo=o("DebertaV2Model"),Gpo=o(" (DeBERTa-v2 model)"),Opo=l(),Mp=a("li"),pse=a("strong"),Vpo=o("decision_transformer"),Xpo=o(" \u2014 "),qI=a("a"),zpo=o("DecisionTransformerModel"),Wpo=o(" (Decision Transformer model)"),Qpo=l(),Ep=a("li"),_se=a("strong"),Hpo=o("deit"),Upo=o(" \u2014 "),NI=a("a"),Jpo=o("DeiTModel"),Ypo=o(" (DeiT model)"),Kpo=l(),Cp=a("li"),use=a("strong"),Zpo=o("detr"),e_o=o(" \u2014 "),jI=a("a"),o_o=o("DetrModel"),r_o=o(" (DETR model)"),t_o=l(),wp=a("li"),bse=a("strong"),a_o=o("distilbert"),n_o=o(" \u2014 "),DI=a("a"),s_o=o("DistilBertModel"),l_o=o(" (DistilBERT model)"),i_o=l(),Ap=a("li"),vse=a("strong"),d_o=o("dpr"),c_o=o(" \u2014 "),GI=a("a"),f_o=o("DPRQuestionEncoder"),m_o=o(" (DPR model)"),g_o=l(),yp=a("li"),Fse=a("strong"),h_o=o("dpt"),p_o=o(" \u2014 "),OI=a("a"),__o=o("DPTModel"),u_o=o(" (DPT model)"),b_o=l(),Lp=a("li"),Tse=a("strong"),v_o=o("electra"),F_o=o(" \u2014 "),VI=a("a"),T_o=o("ElectraModel"),M_o=o(" (ELECTRA model)"),E_o=l(),xp=a("li"),Mse=a("strong"),C_o=o("flaubert"),w_o=o(" \u2014 "),XI=a("a"),A_o=o("FlaubertModel"),y_o=o(" (FlauBERT model)"),L_o=l(),$p=a("li"),Ese=a("strong"),x_o=o("flava"),$_o=o(" \u2014 "),zI=a("a"),k_o=o("FlavaModel"),S_o=o(" (Flava model)"),R_o=l(),kp=a("li"),Cse=a("strong"),P_o=o("fnet"),B_o=o(" \u2014 "),WI=a("a"),I_o=o("FNetModel"),q_o=o(" (FNet model)"),N_o=l(),Sp=a("li"),wse=a("strong"),j_o=o("fsmt"),D_o=o(" \u2014 "),QI=a("a"),G_o=o("FSMTModel"),O_o=o(" (FairSeq Machine-Translation model)"),V_o=l(),Is=a("li"),Ase=a("strong"),X_o=o("funnel"),z_o=o(" \u2014 "),HI=a("a"),W_o=o("FunnelModel"),Q_o=o(" or "),UI=a("a"),H_o=o("FunnelBaseModel"),U_o=o(" (Funnel Transformer model)"),J_o=l(),Rp=a("li"),yse=a("strong"),Y_o=o("glpn"),K_o=o(" \u2014 "),JI=a("a"),Z_o=o("GLPNModel"),euo=o(" (GLPN model)"),ouo=l(),Pp=a("li"),Lse=a("strong"),ruo=o("gpt2"),tuo=o(" \u2014 "),YI=a("a"),auo=o("GPT2Model"),nuo=o(" (OpenAI GPT-2 model)"),suo=l(),Bp=a("li"),xse=a("strong"),luo=o("gpt_neo"),iuo=o(" \u2014 "),KI=a("a"),duo=o("GPTNeoModel"),cuo=o(" (GPT Neo model)"),fuo=l(),Ip=a("li"),$se=a("strong"),muo=o("gptj"),guo=o(" \u2014 "),ZI=a("a"),huo=o("GPTJModel"),puo=o(" (GPT-J model)"),_uo=l(),qp=a("li"),kse=a("strong"),uuo=o("hubert"),buo=o(" \u2014 "),eq=a("a"),vuo=o("HubertModel"),Fuo=o(" (Hubert model)"),Tuo=l(),Np=a("li"),Sse=a("strong"),Muo=o("ibert"),Euo=o(" \u2014 "),oq=a("a"),Cuo=o("IBertModel"),wuo=o(" (I-BERT model)"),Auo=l(),jp=a("li"),Rse=a("strong"),yuo=o("imagegpt"),Luo=o(" \u2014 "),rq=a("a"),xuo=o("ImageGPTModel"),$uo=o(" (ImageGPT model)"),kuo=l(),Dp=a("li"),Pse=a("strong"),Suo=o("layoutlm"),Ruo=o(" \u2014 "),tq=a("a"),Puo=o("LayoutLMModel"),Buo=o(" (LayoutLM model)"),Iuo=l(),Gp=a("li"),Bse=a("strong"),quo=o("layoutlmv2"),Nuo=o(" \u2014 "),aq=a("a"),juo=o("LayoutLMv2Model"),Duo=o(" (LayoutLMv2 model)"),Guo=l(),Op=a("li"),Ise=a("strong"),Ouo=o("led"),Vuo=o(" \u2014 "),nq=a("a"),Xuo=o("LEDModel"),zuo=o(" (LED model)"),Wuo=l(),Vp=a("li"),qse=a("strong"),Quo=o("longformer"),Huo=o(" \u2014 "),sq=a("a"),Uuo=o("LongformerModel"),Juo=o(" (Longformer model)"),Yuo=l(),Xp=a("li"),Nse=a("strong"),Kuo=o("luke"),Zuo=o(" \u2014 "),lq=a("a"),e2o=o("LukeModel"),o2o=o(" (LUKE model)"),r2o=l(),zp=a("li"),jse=a("strong"),t2o=o("lxmert"),a2o=o(" \u2014 "),iq=a("a"),n2o=o("LxmertModel"),s2o=o(" (LXMERT model)"),l2o=l(),Wp=a("li"),Dse=a("strong"),i2o=o("m2m_100"),d2o=o(" \u2014 "),dq=a("a"),c2o=o("M2M100Model"),f2o=o(" (M2M100 model)"),m2o=l(),Qp=a("li"),Gse=a("strong"),g2o=o("marian"),h2o=o(" \u2014 "),cq=a("a"),p2o=o("MarianModel"),_2o=o(" (Marian model)"),u2o=l(),Hp=a("li"),Ose=a("strong"),b2o=o("maskformer"),v2o=o(" \u2014 "),fq=a("a"),F2o=o("MaskFormerModel"),T2o=o(" (MaskFormer model)"),M2o=l(),Up=a("li"),Vse=a("strong"),E2o=o("mbart"),C2o=o(" \u2014 "),mq=a("a"),w2o=o("MBartModel"),A2o=o(" (mBART model)"),y2o=l(),Jp=a("li"),Xse=a("strong"),L2o=o("megatron-bert"),x2o=o(" \u2014 "),gq=a("a"),$2o=o("MegatronBertModel"),k2o=o(" (MegatronBert model)"),S2o=l(),Yp=a("li"),zse=a("strong"),R2o=o("mobilebert"),P2o=o(" \u2014 "),hq=a("a"),B2o=o("MobileBertModel"),I2o=o(" (MobileBERT model)"),q2o=l(),Kp=a("li"),Wse=a("strong"),N2o=o("mpnet"),j2o=o(" \u2014 "),pq=a("a"),D2o=o("MPNetModel"),G2o=o(" (MPNet model)"),O2o=l(),Zp=a("li"),Qse=a("strong"),V2o=o("mt5"),X2o=o(" \u2014 "),_q=a("a"),z2o=o("MT5Model"),W2o=o(" (mT5 model)"),Q2o=l(),e_=a("li"),Hse=a("strong"),H2o=o("nystromformer"),U2o=o(" \u2014 "),uq=a("a"),J2o=o("NystromformerModel"),Y2o=o(" (Nystromformer model)"),K2o=l(),o_=a("li"),Use=a("strong"),Z2o=o("openai-gpt"),e1o=o(" \u2014 "),bq=a("a"),o1o=o("OpenAIGPTModel"),r1o=o(" (OpenAI GPT model)"),t1o=l(),r_=a("li"),Jse=a("strong"),a1o=o("opt"),n1o=o(" \u2014 "),vq=a("a"),s1o=o("OPTModel"),l1o=o(" (OPT model)"),i1o=l(),t_=a("li"),Yse=a("strong"),d1o=o("pegasus"),c1o=o(" \u2014 "),Fq=a("a"),f1o=o("PegasusModel"),m1o=o(" (Pegasus model)"),g1o=l(),a_=a("li"),Kse=a("strong"),h1o=o("perceiver"),p1o=o(" \u2014 "),Tq=a("a"),_1o=o("PerceiverModel"),u1o=o(" (Perceiver model)"),b1o=l(),n_=a("li"),Zse=a("strong"),v1o=o("plbart"),F1o=o(" \u2014 "),Mq=a("a"),T1o=o("PLBartModel"),M1o=o(" (PLBart model)"),E1o=l(),s_=a("li"),ele=a("strong"),C1o=o("poolformer"),w1o=o(" \u2014 "),Eq=a("a"),A1o=o("PoolFormerModel"),y1o=o(" (PoolFormer model)"),L1o=l(),l_=a("li"),ole=a("strong"),x1o=o("prophetnet"),$1o=o(" \u2014 "),Cq=a("a"),k1o=o("ProphetNetModel"),S1o=o(" (ProphetNet model)"),R1o=l(),i_=a("li"),rle=a("strong"),P1o=o("qdqbert"),B1o=o(" \u2014 "),wq=a("a"),I1o=o("QDQBertModel"),q1o=o(" (QDQBert model)"),N1o=l(),d_=a("li"),tle=a("strong"),j1o=o("reformer"),D1o=o(" \u2014 "),Aq=a("a"),G1o=o("ReformerModel"),O1o=o(" (Reformer model)"),V1o=l(),c_=a("li"),ale=a("strong"),X1o=o("regnet"),z1o=o(" \u2014 "),yq=a("a"),W1o=o("RegNetModel"),Q1o=o(" (RegNet model)"),H1o=l(),f_=a("li"),nle=a("strong"),U1o=o("rembert"),J1o=o(" \u2014 "),Lq=a("a"),Y1o=o("RemBertModel"),K1o=o(" (RemBERT model)"),Z1o=l(),m_=a("li"),sle=a("strong"),ebo=o("resnet"),obo=o(" \u2014 "),xq=a("a"),rbo=o("ResNetModel"),tbo=o(" (ResNet model)"),abo=l(),g_=a("li"),lle=a("strong"),nbo=o("retribert"),sbo=o(" \u2014 "),$q=a("a"),lbo=o("RetriBertModel"),ibo=o(" (RetriBERT model)"),dbo=l(),h_=a("li"),ile=a("strong"),cbo=o("roberta"),fbo=o(" \u2014 "),kq=a("a"),mbo=o("RobertaModel"),gbo=o(" (RoBERTa model)"),hbo=l(),p_=a("li"),dle=a("strong"),pbo=o("roformer"),_bo=o(" \u2014 "),Sq=a("a"),ubo=o("RoFormerModel"),bbo=o(" (RoFormer model)"),vbo=l(),__=a("li"),cle=a("strong"),Fbo=o("segformer"),Tbo=o(" \u2014 "),Rq=a("a"),Mbo=o("SegformerModel"),Ebo=o(" (SegFormer model)"),Cbo=l(),u_=a("li"),fle=a("strong"),wbo=o("sew"),Abo=o(" \u2014 "),Pq=a("a"),ybo=o("SEWModel"),Lbo=o(" (SEW model)"),xbo=l(),b_=a("li"),mle=a("strong"),$bo=o("sew-d"),kbo=o(" \u2014 "),Bq=a("a"),Sbo=o("SEWDModel"),Rbo=o(" (SEW-D model)"),Pbo=l(),v_=a("li"),gle=a("strong"),Bbo=o("speech_to_text"),Ibo=o(" \u2014 "),Iq=a("a"),qbo=o("Speech2TextModel"),Nbo=o(" (Speech2Text model)"),jbo=l(),F_=a("li"),hle=a("strong"),Dbo=o("splinter"),Gbo=o(" \u2014 "),qq=a("a"),Obo=o("SplinterModel"),Vbo=o(" (Splinter model)"),Xbo=l(),T_=a("li"),ple=a("strong"),zbo=o("squeezebert"),Wbo=o(" \u2014 "),Nq=a("a"),Qbo=o("SqueezeBertModel"),Hbo=o(" (SqueezeBERT model)"),Ubo=l(),M_=a("li"),_le=a("strong"),Jbo=o("swin"),Ybo=o(" \u2014 "),jq=a("a"),Kbo=o("SwinModel"),Zbo=o(" (Swin model)"),e4o=l(),E_=a("li"),ule=a("strong"),o4o=o("t5"),r4o=o(" \u2014 "),Dq=a("a"),t4o=o("T5Model"),a4o=o(" (T5 model)"),n4o=l(),C_=a("li"),ble=a("strong"),s4o=o("tapas"),l4o=o(" \u2014 "),Gq=a("a"),i4o=o("TapasModel"),d4o=o(" (TAPAS model)"),c4o=l(),w_=a("li"),vle=a("strong"),f4o=o("trajectory_transformer"),m4o=o(" \u2014 "),Oq=a("a"),g4o=o("TrajectoryTransformerModel"),h4o=o(" (Trajectory Transformer model)"),p4o=l(),A_=a("li"),Fle=a("strong"),_4o=o("transfo-xl"),u4o=o(" \u2014 "),Vq=a("a"),b4o=o("TransfoXLModel"),v4o=o(" (Transformer-XL model)"),F4o=l(),y_=a("li"),Tle=a("strong"),T4o=o("unispeech"),M4o=o(" \u2014 "),Xq=a("a"),E4o=o("UniSpeechModel"),C4o=o(" (UniSpeech model)"),w4o=l(),L_=a("li"),Mle=a("strong"),A4o=o("unispeech-sat"),y4o=o(" \u2014 "),zq=a("a"),L4o=o("UniSpeechSatModel"),x4o=o(" (UniSpeechSat model)"),$4o=l(),x_=a("li"),Ele=a("strong"),k4o=o("van"),S4o=o(" \u2014 "),Wq=a("a"),R4o=o("VanModel"),P4o=o(" (VAN model)"),B4o=l(),$_=a("li"),Cle=a("strong"),I4o=o("vilt"),q4o=o(" \u2014 "),Qq=a("a"),N4o=o("ViltModel"),j4o=o(" (ViLT model)"),D4o=l(),k_=a("li"),wle=a("strong"),G4o=o("vision-text-dual-encoder"),O4o=o(" \u2014 "),Hq=a("a"),V4o=o("VisionTextDualEncoderModel"),X4o=o(" (VisionTextDualEncoder model)"),z4o=l(),S_=a("li"),Ale=a("strong"),W4o=o("visual_bert"),Q4o=o(" \u2014 "),Uq=a("a"),H4o=o("VisualBertModel"),U4o=o(" (VisualBert model)"),J4o=l(),R_=a("li"),yle=a("strong"),Y4o=o("vit"),K4o=o(" \u2014 "),Jq=a("a"),Z4o=o("ViTModel"),e5o=o(" (ViT model)"),o5o=l(),P_=a("li"),Lle=a("strong"),r5o=o("vit_mae"),t5o=o(" \u2014 "),Yq=a("a"),a5o=o("ViTMAEModel"),n5o=o(" (ViTMAE model)"),s5o=l(),B_=a("li"),xle=a("strong"),l5o=o("wav2vec2"),i5o=o(" \u2014 "),Kq=a("a"),d5o=o("Wav2Vec2Model"),c5o=o(" (Wav2Vec2 model)"),f5o=l(),I_=a("li"),$le=a("strong"),m5o=o("wav2vec2-conformer"),g5o=o(" \u2014 "),Zq=a("a"),h5o=o("Wav2Vec2ConformerModel"),p5o=o(" (Wav2Vec2-Conformer model)"),_5o=l(),q_=a("li"),kle=a("strong"),u5o=o("wavlm"),b5o=o(" \u2014 "),eN=a("a"),v5o=o("WavLMModel"),F5o=o(" (WavLM model)"),T5o=l(),N_=a("li"),Sle=a("strong"),M5o=o("xglm"),E5o=o(" \u2014 "),oN=a("a"),C5o=o("XGLMModel"),w5o=o(" (XGLM model)"),A5o=l(),j_=a("li"),Rle=a("strong"),y5o=o("xlm"),L5o=o(" \u2014 "),rN=a("a"),x5o=o("XLMModel"),$5o=o(" (XLM model)"),k5o=l(),D_=a("li"),Ple=a("strong"),S5o=o("xlm-prophetnet"),R5o=o(" \u2014 "),tN=a("a"),P5o=o("XLMProphetNetModel"),B5o=o(" (XLMProphetNet model)"),I5o=l(),G_=a("li"),Ble=a("strong"),q5o=o("xlm-roberta"),N5o=o(" \u2014 "),aN=a("a"),j5o=o("XLMRobertaModel"),D5o=o(" (XLM-RoBERTa model)"),G5o=l(),O_=a("li"),Ile=a("strong"),O5o=o("xlm-roberta-xl"),V5o=o(" \u2014 "),nN=a("a"),X5o=o("XLMRobertaXLModel"),z5o=o(" (XLM-RoBERTa-XL model)"),W5o=l(),V_=a("li"),qle=a("strong"),Q5o=o("xlnet"),H5o=o(" \u2014 "),sN=a("a"),U5o=o("XLNetModel"),J5o=o(" (XLNet model)"),Y5o=l(),X_=a("li"),Nle=a("strong"),K5o=o("yolos"),Z5o=o(" \u2014 "),lN=a("a"),evo=o("YolosModel"),ovo=o(" (YOLOS model)"),rvo=l(),z_=a("li"),jle=a("strong"),tvo=o("yoso"),avo=o(" \u2014 "),iN=a("a"),nvo=o("YosoModel"),svo=o(" (YOSO model)"),lvo=l(),W_=a("p"),ivo=o("The model is set in evaluation mode by default using "),Dle=a("code"),dvo=o("model.eval()"),cvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),fvo=o("model.train()"),mvo=l(),F(Q_.$$.fragment),uqe=l(),$i=a("h2"),H_=a("a"),Ole=a("span"),F(z6.$$.fragment),gvo=l(),Vle=a("span"),hvo=o("AutoModelForPreTraining"),bqe=l(),xo=a("div"),F(W6.$$.fragment),pvo=l(),ki=a("p"),_vo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dN=a("a"),uvo=o("from_pretrained()"),bvo=o(" class method or the "),cN=a("a"),vvo=o("from_config()"),Fvo=o(` class
method.`),Tvo=l(),Q6=a("p"),Mvo=o("This class cannot be instantiated directly using "),Xle=a("code"),Evo=o("__init__()"),Cvo=o(" (throws an error)."),wvo=l(),at=a("div"),F(H6.$$.fragment),Avo=l(),zle=a("p"),yvo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lvo=l(),Si=a("p"),xvo=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),$vo=o("not"),kvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=a("a"),Svo=o("from_pretrained()"),Rvo=o(" to load the model weights."),Pvo=l(),F(U_.$$.fragment),Bvo=l(),Ye=a("div"),F(U6.$$.fragment),Ivo=l(),Qle=a("p"),qvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nvo=l(),xa=a("p"),jvo=o("The model class to instantiate is selected based on the "),Hle=a("code"),Dvo=o("model_type"),Gvo=o(` property of the config object (either
passed as an argument or loaded from `),Ule=a("code"),Ovo=o("pretrained_model_name_or_path"),Vvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=a("code"),Xvo=o("pretrained_model_name_or_path"),zvo=o(":"),Wvo=l(),G=a("ul"),J_=a("li"),Yle=a("strong"),Qvo=o("albert"),Hvo=o(" \u2014 "),mN=a("a"),Uvo=o("AlbertForPreTraining"),Jvo=o(" (ALBERT model)"),Yvo=l(),Y_=a("li"),Kle=a("strong"),Kvo=o("bart"),Zvo=o(" \u2014 "),gN=a("a"),eFo=o("BartForConditionalGeneration"),oFo=o(" (BART model)"),rFo=l(),K_=a("li"),Zle=a("strong"),tFo=o("bert"),aFo=o(" \u2014 "),hN=a("a"),nFo=o("BertForPreTraining"),sFo=o(" (BERT model)"),lFo=l(),Z_=a("li"),eie=a("strong"),iFo=o("big_bird"),dFo=o(" \u2014 "),pN=a("a"),cFo=o("BigBirdForPreTraining"),fFo=o(" (BigBird model)"),mFo=l(),eu=a("li"),oie=a("strong"),gFo=o("camembert"),hFo=o(" \u2014 "),_N=a("a"),pFo=o("CamembertForMaskedLM"),_Fo=o(" (CamemBERT model)"),uFo=l(),ou=a("li"),rie=a("strong"),bFo=o("ctrl"),vFo=o(" \u2014 "),uN=a("a"),FFo=o("CTRLLMHeadModel"),TFo=o(" (CTRL model)"),MFo=l(),ru=a("li"),tie=a("strong"),EFo=o("data2vec-text"),CFo=o(" \u2014 "),bN=a("a"),wFo=o("Data2VecTextForMaskedLM"),AFo=o(" (Data2VecText model)"),yFo=l(),tu=a("li"),aie=a("strong"),LFo=o("deberta"),xFo=o(" \u2014 "),vN=a("a"),$Fo=o("DebertaForMaskedLM"),kFo=o(" (DeBERTa model)"),SFo=l(),au=a("li"),nie=a("strong"),RFo=o("deberta-v2"),PFo=o(" \u2014 "),FN=a("a"),BFo=o("DebertaV2ForMaskedLM"),IFo=o(" (DeBERTa-v2 model)"),qFo=l(),nu=a("li"),sie=a("strong"),NFo=o("distilbert"),jFo=o(" \u2014 "),TN=a("a"),DFo=o("DistilBertForMaskedLM"),GFo=o(" (DistilBERT model)"),OFo=l(),su=a("li"),lie=a("strong"),VFo=o("electra"),XFo=o(" \u2014 "),MN=a("a"),zFo=o("ElectraForPreTraining"),WFo=o(" (ELECTRA model)"),QFo=l(),lu=a("li"),iie=a("strong"),HFo=o("flaubert"),UFo=o(" \u2014 "),EN=a("a"),JFo=o("FlaubertWithLMHeadModel"),YFo=o(" (FlauBERT model)"),KFo=l(),iu=a("li"),die=a("strong"),ZFo=o("flava"),eTo=o(" \u2014 "),CN=a("a"),oTo=o("FlavaForPreTraining"),rTo=o(" (Flava model)"),tTo=l(),du=a("li"),cie=a("strong"),aTo=o("fnet"),nTo=o(" \u2014 "),wN=a("a"),sTo=o("FNetForPreTraining"),lTo=o(" (FNet model)"),iTo=l(),cu=a("li"),fie=a("strong"),dTo=o("fsmt"),cTo=o(" \u2014 "),AN=a("a"),fTo=o("FSMTForConditionalGeneration"),mTo=o(" (FairSeq Machine-Translation model)"),gTo=l(),fu=a("li"),mie=a("strong"),hTo=o("funnel"),pTo=o(" \u2014 "),yN=a("a"),_To=o("FunnelForPreTraining"),uTo=o(" (Funnel Transformer model)"),bTo=l(),mu=a("li"),gie=a("strong"),vTo=o("gpt2"),FTo=o(" \u2014 "),LN=a("a"),TTo=o("GPT2LMHeadModel"),MTo=o(" (OpenAI GPT-2 model)"),ETo=l(),gu=a("li"),hie=a("strong"),CTo=o("ibert"),wTo=o(" \u2014 "),xN=a("a"),ATo=o("IBertForMaskedLM"),yTo=o(" (I-BERT model)"),LTo=l(),hu=a("li"),pie=a("strong"),xTo=o("layoutlm"),$To=o(" \u2014 "),$N=a("a"),kTo=o("LayoutLMForMaskedLM"),STo=o(" (LayoutLM model)"),RTo=l(),pu=a("li"),_ie=a("strong"),PTo=o("longformer"),BTo=o(" \u2014 "),kN=a("a"),ITo=o("LongformerForMaskedLM"),qTo=o(" (Longformer model)"),NTo=l(),_u=a("li"),uie=a("strong"),jTo=o("lxmert"),DTo=o(" \u2014 "),SN=a("a"),GTo=o("LxmertForPreTraining"),OTo=o(" (LXMERT model)"),VTo=l(),uu=a("li"),bie=a("strong"),XTo=o("megatron-bert"),zTo=o(" \u2014 "),RN=a("a"),WTo=o("MegatronBertForPreTraining"),QTo=o(" (MegatronBert model)"),HTo=l(),bu=a("li"),vie=a("strong"),UTo=o("mobilebert"),JTo=o(" \u2014 "),PN=a("a"),YTo=o("MobileBertForPreTraining"),KTo=o(" (MobileBERT model)"),ZTo=l(),vu=a("li"),Fie=a("strong"),e7o=o("mpnet"),o7o=o(" \u2014 "),BN=a("a"),r7o=o("MPNetForMaskedLM"),t7o=o(" (MPNet model)"),a7o=l(),Fu=a("li"),Tie=a("strong"),n7o=o("openai-gpt"),s7o=o(" \u2014 "),IN=a("a"),l7o=o("OpenAIGPTLMHeadModel"),i7o=o(" (OpenAI GPT model)"),d7o=l(),Tu=a("li"),Mie=a("strong"),c7o=o("retribert"),f7o=o(" \u2014 "),qN=a("a"),m7o=o("RetriBertModel"),g7o=o(" (RetriBERT model)"),h7o=l(),Mu=a("li"),Eie=a("strong"),p7o=o("roberta"),_7o=o(" \u2014 "),NN=a("a"),u7o=o("RobertaForMaskedLM"),b7o=o(" (RoBERTa model)"),v7o=l(),Eu=a("li"),Cie=a("strong"),F7o=o("splinter"),T7o=o(" \u2014 "),jN=a("a"),M7o=o("SplinterForPreTraining"),E7o=o(" (Splinter model)"),C7o=l(),Cu=a("li"),wie=a("strong"),w7o=o("squeezebert"),A7o=o(" \u2014 "),DN=a("a"),y7o=o("SqueezeBertForMaskedLM"),L7o=o(" (SqueezeBERT model)"),x7o=l(),wu=a("li"),Aie=a("strong"),$7o=o("t5"),k7o=o(" \u2014 "),GN=a("a"),S7o=o("T5ForConditionalGeneration"),R7o=o(" (T5 model)"),P7o=l(),Au=a("li"),yie=a("strong"),B7o=o("tapas"),I7o=o(" \u2014 "),ON=a("a"),q7o=o("TapasForMaskedLM"),N7o=o(" (TAPAS model)"),j7o=l(),yu=a("li"),Lie=a("strong"),D7o=o("transfo-xl"),G7o=o(" \u2014 "),VN=a("a"),O7o=o("TransfoXLLMHeadModel"),V7o=o(" (Transformer-XL model)"),X7o=l(),Lu=a("li"),xie=a("strong"),z7o=o("unispeech"),W7o=o(" \u2014 "),XN=a("a"),Q7o=o("UniSpeechForPreTraining"),H7o=o(" (UniSpeech model)"),U7o=l(),xu=a("li"),$ie=a("strong"),J7o=o("unispeech-sat"),Y7o=o(" \u2014 "),zN=a("a"),K7o=o("UniSpeechSatForPreTraining"),Z7o=o(" (UniSpeechSat model)"),eMo=l(),$u=a("li"),kie=a("strong"),oMo=o("visual_bert"),rMo=o(" \u2014 "),WN=a("a"),tMo=o("VisualBertForPreTraining"),aMo=o(" (VisualBert model)"),nMo=l(),ku=a("li"),Sie=a("strong"),sMo=o("vit_mae"),lMo=o(" \u2014 "),QN=a("a"),iMo=o("ViTMAEForPreTraining"),dMo=o(" (ViTMAE model)"),cMo=l(),Su=a("li"),Rie=a("strong"),fMo=o("wav2vec2"),mMo=o(" \u2014 "),HN=a("a"),gMo=o("Wav2Vec2ForPreTraining"),hMo=o(" (Wav2Vec2 model)"),pMo=l(),Ru=a("li"),Pie=a("strong"),_Mo=o("wav2vec2-conformer"),uMo=o(" \u2014 "),UN=a("a"),bMo=o("Wav2Vec2ConformerForPreTraining"),vMo=o(" (Wav2Vec2-Conformer model)"),FMo=l(),Pu=a("li"),Bie=a("strong"),TMo=o("xlm"),MMo=o(" \u2014 "),JN=a("a"),EMo=o("XLMWithLMHeadModel"),CMo=o(" (XLM model)"),wMo=l(),Bu=a("li"),Iie=a("strong"),AMo=o("xlm-roberta"),yMo=o(" \u2014 "),YN=a("a"),LMo=o("XLMRobertaForMaskedLM"),xMo=o(" (XLM-RoBERTa model)"),$Mo=l(),Iu=a("li"),qie=a("strong"),kMo=o("xlm-roberta-xl"),SMo=o(" \u2014 "),KN=a("a"),RMo=o("XLMRobertaXLForMaskedLM"),PMo=o(" (XLM-RoBERTa-XL model)"),BMo=l(),qu=a("li"),Nie=a("strong"),IMo=o("xlnet"),qMo=o(" \u2014 "),ZN=a("a"),NMo=o("XLNetLMHeadModel"),jMo=o(" (XLNet model)"),DMo=l(),Nu=a("p"),GMo=o("The model is set in evaluation mode by default using "),jie=a("code"),OMo=o("model.eval()"),VMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),XMo=o("model.train()"),zMo=l(),F(ju.$$.fragment),vqe=l(),Ri=a("h2"),Du=a("a"),Gie=a("span"),F(J6.$$.fragment),WMo=l(),Oie=a("span"),QMo=o("AutoModelForCausalLM"),Fqe=l(),$o=a("div"),F(Y6.$$.fragment),HMo=l(),Pi=a("p"),UMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ej=a("a"),JMo=o("from_pretrained()"),YMo=o(" class method or the "),oj=a("a"),KMo=o("from_config()"),ZMo=o(` class
method.`),eEo=l(),K6=a("p"),oEo=o("This class cannot be instantiated directly using "),Vie=a("code"),rEo=o("__init__()"),tEo=o(" (throws an error)."),aEo=l(),nt=a("div"),F(Z6.$$.fragment),nEo=l(),Xie=a("p"),sEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lEo=l(),Bi=a("p"),iEo=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),dEo=o("not"),cEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),fEo=o("from_pretrained()"),mEo=o(" to load the model weights."),gEo=l(),F(Gu.$$.fragment),hEo=l(),Ke=a("div"),F(ey.$$.fragment),pEo=l(),Wie=a("p"),_Eo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uEo=l(),$a=a("p"),bEo=o("The model class to instantiate is selected based on the "),Qie=a("code"),vEo=o("model_type"),FEo=o(` property of the config object (either
passed as an argument or loaded from `),Hie=a("code"),TEo=o("pretrained_model_name_or_path"),MEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=a("code"),EEo=o("pretrained_model_name_or_path"),CEo=o(":"),wEo=l(),z=a("ul"),Ou=a("li"),Jie=a("strong"),AEo=o("bart"),yEo=o(" \u2014 "),tj=a("a"),LEo=o("BartForCausalLM"),xEo=o(" (BART model)"),$Eo=l(),Vu=a("li"),Yie=a("strong"),kEo=o("bert"),SEo=o(" \u2014 "),aj=a("a"),REo=o("BertLMHeadModel"),PEo=o(" (BERT model)"),BEo=l(),Xu=a("li"),Kie=a("strong"),IEo=o("bert-generation"),qEo=o(" \u2014 "),nj=a("a"),NEo=o("BertGenerationDecoder"),jEo=o(" (Bert Generation model)"),DEo=l(),zu=a("li"),Zie=a("strong"),GEo=o("big_bird"),OEo=o(" \u2014 "),sj=a("a"),VEo=o("BigBirdForCausalLM"),XEo=o(" (BigBird model)"),zEo=l(),Wu=a("li"),ede=a("strong"),WEo=o("bigbird_pegasus"),QEo=o(" \u2014 "),lj=a("a"),HEo=o("BigBirdPegasusForCausalLM"),UEo=o(" (BigBirdPegasus model)"),JEo=l(),Qu=a("li"),ode=a("strong"),YEo=o("blenderbot"),KEo=o(" \u2014 "),ij=a("a"),ZEo=o("BlenderbotForCausalLM"),eCo=o(" (Blenderbot model)"),oCo=l(),Hu=a("li"),rde=a("strong"),rCo=o("blenderbot-small"),tCo=o(" \u2014 "),dj=a("a"),aCo=o("BlenderbotSmallForCausalLM"),nCo=o(" (BlenderbotSmall model)"),sCo=l(),Uu=a("li"),tde=a("strong"),lCo=o("camembert"),iCo=o(" \u2014 "),cj=a("a"),dCo=o("CamembertForCausalLM"),cCo=o(" (CamemBERT model)"),fCo=l(),Ju=a("li"),ade=a("strong"),mCo=o("ctrl"),gCo=o(" \u2014 "),fj=a("a"),hCo=o("CTRLLMHeadModel"),pCo=o(" (CTRL model)"),_Co=l(),Yu=a("li"),nde=a("strong"),uCo=o("data2vec-text"),bCo=o(" \u2014 "),mj=a("a"),vCo=o("Data2VecTextForCausalLM"),FCo=o(" (Data2VecText model)"),TCo=l(),Ku=a("li"),sde=a("strong"),MCo=o("electra"),ECo=o(" \u2014 "),gj=a("a"),CCo=o("ElectraForCausalLM"),wCo=o(" (ELECTRA model)"),ACo=l(),Zu=a("li"),lde=a("strong"),yCo=o("gpt2"),LCo=o(" \u2014 "),hj=a("a"),xCo=o("GPT2LMHeadModel"),$Co=o(" (OpenAI GPT-2 model)"),kCo=l(),e2=a("li"),ide=a("strong"),SCo=o("gpt_neo"),RCo=o(" \u2014 "),pj=a("a"),PCo=o("GPTNeoForCausalLM"),BCo=o(" (GPT Neo model)"),ICo=l(),o2=a("li"),dde=a("strong"),qCo=o("gptj"),NCo=o(" \u2014 "),_j=a("a"),jCo=o("GPTJForCausalLM"),DCo=o(" (GPT-J model)"),GCo=l(),r2=a("li"),cde=a("strong"),OCo=o("marian"),VCo=o(" \u2014 "),uj=a("a"),XCo=o("MarianForCausalLM"),zCo=o(" (Marian model)"),WCo=l(),t2=a("li"),fde=a("strong"),QCo=o("mbart"),HCo=o(" \u2014 "),bj=a("a"),UCo=o("MBartForCausalLM"),JCo=o(" (mBART model)"),YCo=l(),a2=a("li"),mde=a("strong"),KCo=o("megatron-bert"),ZCo=o(" \u2014 "),vj=a("a"),e3o=o("MegatronBertForCausalLM"),o3o=o(" (MegatronBert model)"),r3o=l(),n2=a("li"),gde=a("strong"),t3o=o("openai-gpt"),a3o=o(" \u2014 "),Fj=a("a"),n3o=o("OpenAIGPTLMHeadModel"),s3o=o(" (OpenAI GPT model)"),l3o=l(),s2=a("li"),hde=a("strong"),i3o=o("opt"),d3o=o(" \u2014 "),Tj=a("a"),c3o=o("OPTForCausalLM"),f3o=o(" (OPT model)"),m3o=l(),l2=a("li"),pde=a("strong"),g3o=o("pegasus"),h3o=o(" \u2014 "),Mj=a("a"),p3o=o("PegasusForCausalLM"),_3o=o(" (Pegasus model)"),u3o=l(),i2=a("li"),_de=a("strong"),b3o=o("plbart"),v3o=o(" \u2014 "),Ej=a("a"),F3o=o("PLBartForCausalLM"),T3o=o(" (PLBart model)"),M3o=l(),d2=a("li"),ude=a("strong"),E3o=o("prophetnet"),C3o=o(" \u2014 "),Cj=a("a"),w3o=o("ProphetNetForCausalLM"),A3o=o(" (ProphetNet model)"),y3o=l(),c2=a("li"),bde=a("strong"),L3o=o("qdqbert"),x3o=o(" \u2014 "),wj=a("a"),$3o=o("QDQBertLMHeadModel"),k3o=o(" (QDQBert model)"),S3o=l(),f2=a("li"),vde=a("strong"),R3o=o("reformer"),P3o=o(" \u2014 "),Aj=a("a"),B3o=o("ReformerModelWithLMHead"),I3o=o(" (Reformer model)"),q3o=l(),m2=a("li"),Fde=a("strong"),N3o=o("rembert"),j3o=o(" \u2014 "),yj=a("a"),D3o=o("RemBertForCausalLM"),G3o=o(" (RemBERT model)"),O3o=l(),g2=a("li"),Tde=a("strong"),V3o=o("roberta"),X3o=o(" \u2014 "),Lj=a("a"),z3o=o("RobertaForCausalLM"),W3o=o(" (RoBERTa model)"),Q3o=l(),h2=a("li"),Mde=a("strong"),H3o=o("roformer"),U3o=o(" \u2014 "),xj=a("a"),J3o=o("RoFormerForCausalLM"),Y3o=o(" (RoFormer model)"),K3o=l(),p2=a("li"),Ede=a("strong"),Z3o=o("speech_to_text_2"),ewo=o(" \u2014 "),$j=a("a"),owo=o("Speech2Text2ForCausalLM"),rwo=o(" (Speech2Text2 model)"),two=l(),_2=a("li"),Cde=a("strong"),awo=o("transfo-xl"),nwo=o(" \u2014 "),kj=a("a"),swo=o("TransfoXLLMHeadModel"),lwo=o(" (Transformer-XL model)"),iwo=l(),u2=a("li"),wde=a("strong"),dwo=o("trocr"),cwo=o(" \u2014 "),Sj=a("a"),fwo=o("TrOCRForCausalLM"),mwo=o(" (TrOCR model)"),gwo=l(),b2=a("li"),Ade=a("strong"),hwo=o("xglm"),pwo=o(" \u2014 "),Rj=a("a"),_wo=o("XGLMForCausalLM"),uwo=o(" (XGLM model)"),bwo=l(),v2=a("li"),yde=a("strong"),vwo=o("xlm"),Fwo=o(" \u2014 "),Pj=a("a"),Two=o("XLMWithLMHeadModel"),Mwo=o(" (XLM model)"),Ewo=l(),F2=a("li"),Lde=a("strong"),Cwo=o("xlm-prophetnet"),wwo=o(" \u2014 "),Bj=a("a"),Awo=o("XLMProphetNetForCausalLM"),ywo=o(" (XLMProphetNet model)"),Lwo=l(),T2=a("li"),xde=a("strong"),xwo=o("xlm-roberta"),$wo=o(" \u2014 "),Ij=a("a"),kwo=o("XLMRobertaForCausalLM"),Swo=o(" (XLM-RoBERTa model)"),Rwo=l(),M2=a("li"),$de=a("strong"),Pwo=o("xlm-roberta-xl"),Bwo=o(" \u2014 "),qj=a("a"),Iwo=o("XLMRobertaXLForCausalLM"),qwo=o(" (XLM-RoBERTa-XL model)"),Nwo=l(),E2=a("li"),kde=a("strong"),jwo=o("xlnet"),Dwo=o(" \u2014 "),Nj=a("a"),Gwo=o("XLNetLMHeadModel"),Owo=o(" (XLNet model)"),Vwo=l(),C2=a("p"),Xwo=o("The model is set in evaluation mode by default using "),Sde=a("code"),zwo=o("model.eval()"),Wwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),Qwo=o("model.train()"),Hwo=l(),F(w2.$$.fragment),Tqe=l(),Ii=a("h2"),A2=a("a"),Pde=a("span"),F(oy.$$.fragment),Uwo=l(),Bde=a("span"),Jwo=o("AutoModelForMaskedLM"),Mqe=l(),ko=a("div"),F(ry.$$.fragment),Ywo=l(),qi=a("p"),Kwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jj=a("a"),Zwo=o("from_pretrained()"),e0o=o(" class method or the "),Dj=a("a"),o0o=o("from_config()"),r0o=o(` class
method.`),t0o=l(),ty=a("p"),a0o=o("This class cannot be instantiated directly using "),Ide=a("code"),n0o=o("__init__()"),s0o=o(" (throws an error)."),l0o=l(),st=a("div"),F(ay.$$.fragment),i0o=l(),qde=a("p"),d0o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c0o=l(),Ni=a("p"),f0o=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),m0o=o("not"),g0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gj=a("a"),h0o=o("from_pretrained()"),p0o=o(" to load the model weights."),_0o=l(),F(y2.$$.fragment),u0o=l(),Ze=a("div"),F(ny.$$.fragment),b0o=l(),jde=a("p"),v0o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F0o=l(),ka=a("p"),T0o=o("The model class to instantiate is selected based on the "),Dde=a("code"),M0o=o("model_type"),E0o=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),C0o=o("pretrained_model_name_or_path"),w0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),A0o=o("pretrained_model_name_or_path"),y0o=o(":"),L0o=l(),W=a("ul"),L2=a("li"),Vde=a("strong"),x0o=o("albert"),$0o=o(" \u2014 "),Oj=a("a"),k0o=o("AlbertForMaskedLM"),S0o=o(" (ALBERT model)"),R0o=l(),x2=a("li"),Xde=a("strong"),P0o=o("bart"),B0o=o(" \u2014 "),Vj=a("a"),I0o=o("BartForConditionalGeneration"),q0o=o(" (BART model)"),N0o=l(),$2=a("li"),zde=a("strong"),j0o=o("bert"),D0o=o(" \u2014 "),Xj=a("a"),G0o=o("BertForMaskedLM"),O0o=o(" (BERT model)"),V0o=l(),k2=a("li"),Wde=a("strong"),X0o=o("big_bird"),z0o=o(" \u2014 "),zj=a("a"),W0o=o("BigBirdForMaskedLM"),Q0o=o(" (BigBird model)"),H0o=l(),S2=a("li"),Qde=a("strong"),U0o=o("camembert"),J0o=o(" \u2014 "),Wj=a("a"),Y0o=o("CamembertForMaskedLM"),K0o=o(" (CamemBERT model)"),Z0o=l(),R2=a("li"),Hde=a("strong"),eAo=o("convbert"),oAo=o(" \u2014 "),Qj=a("a"),rAo=o("ConvBertForMaskedLM"),tAo=o(" (ConvBERT model)"),aAo=l(),P2=a("li"),Ude=a("strong"),nAo=o("data2vec-text"),sAo=o(" \u2014 "),Hj=a("a"),lAo=o("Data2VecTextForMaskedLM"),iAo=o(" (Data2VecText model)"),dAo=l(),B2=a("li"),Jde=a("strong"),cAo=o("deberta"),fAo=o(" \u2014 "),Uj=a("a"),mAo=o("DebertaForMaskedLM"),gAo=o(" (DeBERTa model)"),hAo=l(),I2=a("li"),Yde=a("strong"),pAo=o("deberta-v2"),_Ao=o(" \u2014 "),Jj=a("a"),uAo=o("DebertaV2ForMaskedLM"),bAo=o(" (DeBERTa-v2 model)"),vAo=l(),q2=a("li"),Kde=a("strong"),FAo=o("distilbert"),TAo=o(" \u2014 "),Yj=a("a"),MAo=o("DistilBertForMaskedLM"),EAo=o(" (DistilBERT model)"),CAo=l(),N2=a("li"),Zde=a("strong"),wAo=o("electra"),AAo=o(" \u2014 "),Kj=a("a"),yAo=o("ElectraForMaskedLM"),LAo=o(" (ELECTRA model)"),xAo=l(),j2=a("li"),ece=a("strong"),$Ao=o("flaubert"),kAo=o(" \u2014 "),Zj=a("a"),SAo=o("FlaubertWithLMHeadModel"),RAo=o(" (FlauBERT model)"),PAo=l(),D2=a("li"),oce=a("strong"),BAo=o("fnet"),IAo=o(" \u2014 "),eD=a("a"),qAo=o("FNetForMaskedLM"),NAo=o(" (FNet model)"),jAo=l(),G2=a("li"),rce=a("strong"),DAo=o("funnel"),GAo=o(" \u2014 "),oD=a("a"),OAo=o("FunnelForMaskedLM"),VAo=o(" (Funnel Transformer model)"),XAo=l(),O2=a("li"),tce=a("strong"),zAo=o("ibert"),WAo=o(" \u2014 "),rD=a("a"),QAo=o("IBertForMaskedLM"),HAo=o(" (I-BERT model)"),UAo=l(),V2=a("li"),ace=a("strong"),JAo=o("layoutlm"),YAo=o(" \u2014 "),tD=a("a"),KAo=o("LayoutLMForMaskedLM"),ZAo=o(" (LayoutLM model)"),e6o=l(),X2=a("li"),nce=a("strong"),o6o=o("longformer"),r6o=o(" \u2014 "),aD=a("a"),t6o=o("LongformerForMaskedLM"),a6o=o(" (Longformer model)"),n6o=l(),z2=a("li"),sce=a("strong"),s6o=o("mbart"),l6o=o(" \u2014 "),nD=a("a"),i6o=o("MBartForConditionalGeneration"),d6o=o(" (mBART model)"),c6o=l(),W2=a("li"),lce=a("strong"),f6o=o("megatron-bert"),m6o=o(" \u2014 "),sD=a("a"),g6o=o("MegatronBertForMaskedLM"),h6o=o(" (MegatronBert model)"),p6o=l(),Q2=a("li"),ice=a("strong"),_6o=o("mobilebert"),u6o=o(" \u2014 "),lD=a("a"),b6o=o("MobileBertForMaskedLM"),v6o=o(" (MobileBERT model)"),F6o=l(),H2=a("li"),dce=a("strong"),T6o=o("mpnet"),M6o=o(" \u2014 "),iD=a("a"),E6o=o("MPNetForMaskedLM"),C6o=o(" (MPNet model)"),w6o=l(),U2=a("li"),cce=a("strong"),A6o=o("nystromformer"),y6o=o(" \u2014 "),dD=a("a"),L6o=o("NystromformerForMaskedLM"),x6o=o(" (Nystromformer model)"),$6o=l(),J2=a("li"),fce=a("strong"),k6o=o("perceiver"),S6o=o(" \u2014 "),cD=a("a"),R6o=o("PerceiverForMaskedLM"),P6o=o(" (Perceiver model)"),B6o=l(),Y2=a("li"),mce=a("strong"),I6o=o("qdqbert"),q6o=o(" \u2014 "),fD=a("a"),N6o=o("QDQBertForMaskedLM"),j6o=o(" (QDQBert model)"),D6o=l(),K2=a("li"),gce=a("strong"),G6o=o("reformer"),O6o=o(" \u2014 "),mD=a("a"),V6o=o("ReformerForMaskedLM"),X6o=o(" (Reformer model)"),z6o=l(),Z2=a("li"),hce=a("strong"),W6o=o("rembert"),Q6o=o(" \u2014 "),gD=a("a"),H6o=o("RemBertForMaskedLM"),U6o=o(" (RemBERT model)"),J6o=l(),e1=a("li"),pce=a("strong"),Y6o=o("roberta"),K6o=o(" \u2014 "),hD=a("a"),Z6o=o("RobertaForMaskedLM"),eyo=o(" (RoBERTa model)"),oyo=l(),o1=a("li"),_ce=a("strong"),ryo=o("roformer"),tyo=o(" \u2014 "),pD=a("a"),ayo=o("RoFormerForMaskedLM"),nyo=o(" (RoFormer model)"),syo=l(),r1=a("li"),uce=a("strong"),lyo=o("squeezebert"),iyo=o(" \u2014 "),_D=a("a"),dyo=o("SqueezeBertForMaskedLM"),cyo=o(" (SqueezeBERT model)"),fyo=l(),t1=a("li"),bce=a("strong"),myo=o("tapas"),gyo=o(" \u2014 "),uD=a("a"),hyo=o("TapasForMaskedLM"),pyo=o(" (TAPAS model)"),_yo=l(),a1=a("li"),vce=a("strong"),uyo=o("wav2vec2"),byo=o(" \u2014 "),Fce=a("code"),vyo=o("Wav2Vec2ForMaskedLM"),Fyo=o(" (Wav2Vec2 model)"),Tyo=l(),n1=a("li"),Tce=a("strong"),Myo=o("xlm"),Eyo=o(" \u2014 "),bD=a("a"),Cyo=o("XLMWithLMHeadModel"),wyo=o(" (XLM model)"),Ayo=l(),s1=a("li"),Mce=a("strong"),yyo=o("xlm-roberta"),Lyo=o(" \u2014 "),vD=a("a"),xyo=o("XLMRobertaForMaskedLM"),$yo=o(" (XLM-RoBERTa model)"),kyo=l(),l1=a("li"),Ece=a("strong"),Syo=o("xlm-roberta-xl"),Ryo=o(" \u2014 "),FD=a("a"),Pyo=o("XLMRobertaXLForMaskedLM"),Byo=o(" (XLM-RoBERTa-XL model)"),Iyo=l(),i1=a("li"),Cce=a("strong"),qyo=o("yoso"),Nyo=o(" \u2014 "),TD=a("a"),jyo=o("YosoForMaskedLM"),Dyo=o(" (YOSO model)"),Gyo=l(),d1=a("p"),Oyo=o("The model is set in evaluation mode by default using "),wce=a("code"),Vyo=o("model.eval()"),Xyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),zyo=o("model.train()"),Wyo=l(),F(c1.$$.fragment),Eqe=l(),ji=a("h2"),f1=a("a"),yce=a("span"),F(sy.$$.fragment),Qyo=l(),Lce=a("span"),Hyo=o("AutoModelForSeq2SeqLM"),Cqe=l(),So=a("div"),F(ly.$$.fragment),Uyo=l(),Di=a("p"),Jyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MD=a("a"),Yyo=o("from_pretrained()"),Kyo=o(" class method or the "),ED=a("a"),Zyo=o("from_config()"),eLo=o(` class
method.`),oLo=l(),iy=a("p"),rLo=o("This class cannot be instantiated directly using "),xce=a("code"),tLo=o("__init__()"),aLo=o(" (throws an error)."),nLo=l(),lt=a("div"),F(dy.$$.fragment),sLo=l(),$ce=a("p"),lLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iLo=l(),Gi=a("p"),dLo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),cLo=o("not"),fLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=a("a"),mLo=o("from_pretrained()"),gLo=o(" to load the model weights."),hLo=l(),F(m1.$$.fragment),pLo=l(),eo=a("div"),F(cy.$$.fragment),_Lo=l(),Sce=a("p"),uLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bLo=l(),Sa=a("p"),vLo=o("The model class to instantiate is selected based on the "),Rce=a("code"),FLo=o("model_type"),TLo=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),MLo=o("pretrained_model_name_or_path"),ELo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),CLo=o("pretrained_model_name_or_path"),wLo=o(":"),ALo=l(),_e=a("ul"),g1=a("li"),Ice=a("strong"),yLo=o("bart"),LLo=o(" \u2014 "),wD=a("a"),xLo=o("BartForConditionalGeneration"),$Lo=o(" (BART model)"),kLo=l(),h1=a("li"),qce=a("strong"),SLo=o("bigbird_pegasus"),RLo=o(" \u2014 "),AD=a("a"),PLo=o("BigBirdPegasusForConditionalGeneration"),BLo=o(" (BigBirdPegasus model)"),ILo=l(),p1=a("li"),Nce=a("strong"),qLo=o("blenderbot"),NLo=o(" \u2014 "),yD=a("a"),jLo=o("BlenderbotForConditionalGeneration"),DLo=o(" (Blenderbot model)"),GLo=l(),_1=a("li"),jce=a("strong"),OLo=o("blenderbot-small"),VLo=o(" \u2014 "),LD=a("a"),XLo=o("BlenderbotSmallForConditionalGeneration"),zLo=o(" (BlenderbotSmall model)"),WLo=l(),u1=a("li"),Dce=a("strong"),QLo=o("encoder-decoder"),HLo=o(" \u2014 "),xD=a("a"),ULo=o("EncoderDecoderModel"),JLo=o(" (Encoder decoder model)"),YLo=l(),b1=a("li"),Gce=a("strong"),KLo=o("fsmt"),ZLo=o(" \u2014 "),$D=a("a"),e8o=o("FSMTForConditionalGeneration"),o8o=o(" (FairSeq Machine-Translation model)"),r8o=l(),v1=a("li"),Oce=a("strong"),t8o=o("led"),a8o=o(" \u2014 "),kD=a("a"),n8o=o("LEDForConditionalGeneration"),s8o=o(" (LED model)"),l8o=l(),F1=a("li"),Vce=a("strong"),i8o=o("m2m_100"),d8o=o(" \u2014 "),SD=a("a"),c8o=o("M2M100ForConditionalGeneration"),f8o=o(" (M2M100 model)"),m8o=l(),T1=a("li"),Xce=a("strong"),g8o=o("marian"),h8o=o(" \u2014 "),RD=a("a"),p8o=o("MarianMTModel"),_8o=o(" (Marian model)"),u8o=l(),M1=a("li"),zce=a("strong"),b8o=o("mbart"),v8o=o(" \u2014 "),PD=a("a"),F8o=o("MBartForConditionalGeneration"),T8o=o(" (mBART model)"),M8o=l(),E1=a("li"),Wce=a("strong"),E8o=o("mt5"),C8o=o(" \u2014 "),BD=a("a"),w8o=o("MT5ForConditionalGeneration"),A8o=o(" (mT5 model)"),y8o=l(),C1=a("li"),Qce=a("strong"),L8o=o("pegasus"),x8o=o(" \u2014 "),ID=a("a"),$8o=o("PegasusForConditionalGeneration"),k8o=o(" (Pegasus model)"),S8o=l(),w1=a("li"),Hce=a("strong"),R8o=o("plbart"),P8o=o(" \u2014 "),qD=a("a"),B8o=o("PLBartForConditionalGeneration"),I8o=o(" (PLBart model)"),q8o=l(),A1=a("li"),Uce=a("strong"),N8o=o("prophetnet"),j8o=o(" \u2014 "),ND=a("a"),D8o=o("ProphetNetForConditionalGeneration"),G8o=o(" (ProphetNet model)"),O8o=l(),y1=a("li"),Jce=a("strong"),V8o=o("t5"),X8o=o(" \u2014 "),jD=a("a"),z8o=o("T5ForConditionalGeneration"),W8o=o(" (T5 model)"),Q8o=l(),L1=a("li"),Yce=a("strong"),H8o=o("xlm-prophetnet"),U8o=o(" \u2014 "),DD=a("a"),J8o=o("XLMProphetNetForConditionalGeneration"),Y8o=o(" (XLMProphetNet model)"),K8o=l(),x1=a("p"),Z8o=o("The model is set in evaluation mode by default using "),Kce=a("code"),e9o=o("model.eval()"),o9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),r9o=o("model.train()"),t9o=l(),F($1.$$.fragment),wqe=l(),Oi=a("h2"),k1=a("a"),efe=a("span"),F(fy.$$.fragment),a9o=l(),ofe=a("span"),n9o=o("AutoModelForSequenceClassification"),Aqe=l(),Ro=a("div"),F(my.$$.fragment),s9o=l(),Vi=a("p"),l9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GD=a("a"),i9o=o("from_pretrained()"),d9o=o(" class method or the "),OD=a("a"),c9o=o("from_config()"),f9o=o(` class
method.`),m9o=l(),gy=a("p"),g9o=o("This class cannot be instantiated directly using "),rfe=a("code"),h9o=o("__init__()"),p9o=o(" (throws an error)."),_9o=l(),it=a("div"),F(hy.$$.fragment),u9o=l(),tfe=a("p"),b9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v9o=l(),Xi=a("p"),F9o=o(`Note:
Loading a model from its configuration file does `),afe=a("strong"),T9o=o("not"),M9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),E9o=o("from_pretrained()"),C9o=o(" to load the model weights."),w9o=l(),F(S1.$$.fragment),A9o=l(),oo=a("div"),F(py.$$.fragment),y9o=l(),nfe=a("p"),L9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),x9o=l(),Ra=a("p"),$9o=o("The model class to instantiate is selected based on the "),sfe=a("code"),k9o=o("model_type"),S9o=o(` property of the config object (either
passed as an argument or loaded from `),lfe=a("code"),R9o=o("pretrained_model_name_or_path"),P9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=a("code"),B9o=o("pretrained_model_name_or_path"),I9o=o(":"),q9o=l(),q=a("ul"),R1=a("li"),dfe=a("strong"),N9o=o("albert"),j9o=o(" \u2014 "),XD=a("a"),D9o=o("AlbertForSequenceClassification"),G9o=o(" (ALBERT model)"),O9o=l(),P1=a("li"),cfe=a("strong"),V9o=o("bart"),X9o=o(" \u2014 "),zD=a("a"),z9o=o("BartForSequenceClassification"),W9o=o(" (BART model)"),Q9o=l(),B1=a("li"),ffe=a("strong"),H9o=o("bert"),U9o=o(" \u2014 "),WD=a("a"),J9o=o("BertForSequenceClassification"),Y9o=o(" (BERT model)"),K9o=l(),I1=a("li"),mfe=a("strong"),Z9o=o("big_bird"),exo=o(" \u2014 "),QD=a("a"),oxo=o("BigBirdForSequenceClassification"),rxo=o(" (BigBird model)"),txo=l(),q1=a("li"),gfe=a("strong"),axo=o("bigbird_pegasus"),nxo=o(" \u2014 "),HD=a("a"),sxo=o("BigBirdPegasusForSequenceClassification"),lxo=o(" (BigBirdPegasus model)"),ixo=l(),N1=a("li"),hfe=a("strong"),dxo=o("camembert"),cxo=o(" \u2014 "),UD=a("a"),fxo=o("CamembertForSequenceClassification"),mxo=o(" (CamemBERT model)"),gxo=l(),j1=a("li"),pfe=a("strong"),hxo=o("canine"),pxo=o(" \u2014 "),JD=a("a"),_xo=o("CanineForSequenceClassification"),uxo=o(" (Canine model)"),bxo=l(),D1=a("li"),_fe=a("strong"),vxo=o("convbert"),Fxo=o(" \u2014 "),YD=a("a"),Txo=o("ConvBertForSequenceClassification"),Mxo=o(" (ConvBERT model)"),Exo=l(),G1=a("li"),ufe=a("strong"),Cxo=o("ctrl"),wxo=o(" \u2014 "),KD=a("a"),Axo=o("CTRLForSequenceClassification"),yxo=o(" (CTRL model)"),Lxo=l(),O1=a("li"),bfe=a("strong"),xxo=o("data2vec-text"),$xo=o(" \u2014 "),ZD=a("a"),kxo=o("Data2VecTextForSequenceClassification"),Sxo=o(" (Data2VecText model)"),Rxo=l(),V1=a("li"),vfe=a("strong"),Pxo=o("deberta"),Bxo=o(" \u2014 "),eG=a("a"),Ixo=o("DebertaForSequenceClassification"),qxo=o(" (DeBERTa model)"),Nxo=l(),X1=a("li"),Ffe=a("strong"),jxo=o("deberta-v2"),Dxo=o(" \u2014 "),oG=a("a"),Gxo=o("DebertaV2ForSequenceClassification"),Oxo=o(" (DeBERTa-v2 model)"),Vxo=l(),z1=a("li"),Tfe=a("strong"),Xxo=o("distilbert"),zxo=o(" \u2014 "),rG=a("a"),Wxo=o("DistilBertForSequenceClassification"),Qxo=o(" (DistilBERT model)"),Hxo=l(),W1=a("li"),Mfe=a("strong"),Uxo=o("electra"),Jxo=o(" \u2014 "),tG=a("a"),Yxo=o("ElectraForSequenceClassification"),Kxo=o(" (ELECTRA model)"),Zxo=l(),Q1=a("li"),Efe=a("strong"),e$o=o("flaubert"),o$o=o(" \u2014 "),aG=a("a"),r$o=o("FlaubertForSequenceClassification"),t$o=o(" (FlauBERT model)"),a$o=l(),H1=a("li"),Cfe=a("strong"),n$o=o("fnet"),s$o=o(" \u2014 "),nG=a("a"),l$o=o("FNetForSequenceClassification"),i$o=o(" (FNet model)"),d$o=l(),U1=a("li"),wfe=a("strong"),c$o=o("funnel"),f$o=o(" \u2014 "),sG=a("a"),m$o=o("FunnelForSequenceClassification"),g$o=o(" (Funnel Transformer model)"),h$o=l(),J1=a("li"),Afe=a("strong"),p$o=o("gpt2"),_$o=o(" \u2014 "),lG=a("a"),u$o=o("GPT2ForSequenceClassification"),b$o=o(" (OpenAI GPT-2 model)"),v$o=l(),Y1=a("li"),yfe=a("strong"),F$o=o("gpt_neo"),T$o=o(" \u2014 "),iG=a("a"),M$o=o("GPTNeoForSequenceClassification"),E$o=o(" (GPT Neo model)"),C$o=l(),K1=a("li"),Lfe=a("strong"),w$o=o("gptj"),A$o=o(" \u2014 "),dG=a("a"),y$o=o("GPTJForSequenceClassification"),L$o=o(" (GPT-J model)"),x$o=l(),Z1=a("li"),xfe=a("strong"),$$o=o("ibert"),k$o=o(" \u2014 "),cG=a("a"),S$o=o("IBertForSequenceClassification"),R$o=o(" (I-BERT model)"),P$o=l(),eb=a("li"),$fe=a("strong"),B$o=o("layoutlm"),I$o=o(" \u2014 "),fG=a("a"),q$o=o("LayoutLMForSequenceClassification"),N$o=o(" (LayoutLM model)"),j$o=l(),ob=a("li"),kfe=a("strong"),D$o=o("layoutlmv2"),G$o=o(" \u2014 "),mG=a("a"),O$o=o("LayoutLMv2ForSequenceClassification"),V$o=o(" (LayoutLMv2 model)"),X$o=l(),rb=a("li"),Sfe=a("strong"),z$o=o("led"),W$o=o(" \u2014 "),gG=a("a"),Q$o=o("LEDForSequenceClassification"),H$o=o(" (LED model)"),U$o=l(),tb=a("li"),Rfe=a("strong"),J$o=o("longformer"),Y$o=o(" \u2014 "),hG=a("a"),K$o=o("LongformerForSequenceClassification"),Z$o=o(" (Longformer model)"),eko=l(),ab=a("li"),Pfe=a("strong"),oko=o("mbart"),rko=o(" \u2014 "),pG=a("a"),tko=o("MBartForSequenceClassification"),ako=o(" (mBART model)"),nko=l(),nb=a("li"),Bfe=a("strong"),sko=o("megatron-bert"),lko=o(" \u2014 "),_G=a("a"),iko=o("MegatronBertForSequenceClassification"),dko=o(" (MegatronBert model)"),cko=l(),sb=a("li"),Ife=a("strong"),fko=o("mobilebert"),mko=o(" \u2014 "),uG=a("a"),gko=o("MobileBertForSequenceClassification"),hko=o(" (MobileBERT model)"),pko=l(),lb=a("li"),qfe=a("strong"),_ko=o("mpnet"),uko=o(" \u2014 "),bG=a("a"),bko=o("MPNetForSequenceClassification"),vko=o(" (MPNet model)"),Fko=l(),ib=a("li"),Nfe=a("strong"),Tko=o("nystromformer"),Mko=o(" \u2014 "),vG=a("a"),Eko=o("NystromformerForSequenceClassification"),Cko=o(" (Nystromformer model)"),wko=l(),db=a("li"),jfe=a("strong"),Ako=o("openai-gpt"),yko=o(" \u2014 "),FG=a("a"),Lko=o("OpenAIGPTForSequenceClassification"),xko=o(" (OpenAI GPT model)"),$ko=l(),cb=a("li"),Dfe=a("strong"),kko=o("perceiver"),Sko=o(" \u2014 "),TG=a("a"),Rko=o("PerceiverForSequenceClassification"),Pko=o(" (Perceiver model)"),Bko=l(),fb=a("li"),Gfe=a("strong"),Iko=o("plbart"),qko=o(" \u2014 "),MG=a("a"),Nko=o("PLBartForSequenceClassification"),jko=o(" (PLBart model)"),Dko=l(),mb=a("li"),Ofe=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),EG=a("a"),Vko=o("QDQBertForSequenceClassification"),Xko=o(" (QDQBert model)"),zko=l(),gb=a("li"),Vfe=a("strong"),Wko=o("reformer"),Qko=o(" \u2014 "),CG=a("a"),Hko=o("ReformerForSequenceClassification"),Uko=o(" (Reformer model)"),Jko=l(),hb=a("li"),Xfe=a("strong"),Yko=o("rembert"),Kko=o(" \u2014 "),wG=a("a"),Zko=o("RemBertForSequenceClassification"),eSo=o(" (RemBERT model)"),oSo=l(),pb=a("li"),zfe=a("strong"),rSo=o("roberta"),tSo=o(" \u2014 "),AG=a("a"),aSo=o("RobertaForSequenceClassification"),nSo=o(" (RoBERTa model)"),sSo=l(),_b=a("li"),Wfe=a("strong"),lSo=o("roformer"),iSo=o(" \u2014 "),yG=a("a"),dSo=o("RoFormerForSequenceClassification"),cSo=o(" (RoFormer model)"),fSo=l(),ub=a("li"),Qfe=a("strong"),mSo=o("squeezebert"),gSo=o(" \u2014 "),LG=a("a"),hSo=o("SqueezeBertForSequenceClassification"),pSo=o(" (SqueezeBERT model)"),_So=l(),bb=a("li"),Hfe=a("strong"),uSo=o("tapas"),bSo=o(" \u2014 "),xG=a("a"),vSo=o("TapasForSequenceClassification"),FSo=o(" (TAPAS model)"),TSo=l(),vb=a("li"),Ufe=a("strong"),MSo=o("transfo-xl"),ESo=o(" \u2014 "),$G=a("a"),CSo=o("TransfoXLForSequenceClassification"),wSo=o(" (Transformer-XL model)"),ASo=l(),Fb=a("li"),Jfe=a("strong"),ySo=o("xlm"),LSo=o(" \u2014 "),kG=a("a"),xSo=o("XLMForSequenceClassification"),$So=o(" (XLM model)"),kSo=l(),Tb=a("li"),Yfe=a("strong"),SSo=o("xlm-roberta"),RSo=o(" \u2014 "),SG=a("a"),PSo=o("XLMRobertaForSequenceClassification"),BSo=o(" (XLM-RoBERTa model)"),ISo=l(),Mb=a("li"),Kfe=a("strong"),qSo=o("xlm-roberta-xl"),NSo=o(" \u2014 "),RG=a("a"),jSo=o("XLMRobertaXLForSequenceClassification"),DSo=o(" (XLM-RoBERTa-XL model)"),GSo=l(),Eb=a("li"),Zfe=a("strong"),OSo=o("xlnet"),VSo=o(" \u2014 "),PG=a("a"),XSo=o("XLNetForSequenceClassification"),zSo=o(" (XLNet model)"),WSo=l(),Cb=a("li"),eme=a("strong"),QSo=o("yoso"),HSo=o(" \u2014 "),BG=a("a"),USo=o("YosoForSequenceClassification"),JSo=o(" (YOSO model)"),YSo=l(),wb=a("p"),KSo=o("The model is set in evaluation mode by default using "),ome=a("code"),ZSo=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=a("code"),oRo=o("model.train()"),rRo=l(),F(Ab.$$.fragment),yqe=l(),zi=a("h2"),yb=a("a"),tme=a("span"),F(_y.$$.fragment),tRo=l(),ame=a("span"),aRo=o("AutoModelForMultipleChoice"),Lqe=l(),Po=a("div"),F(uy.$$.fragment),nRo=l(),Wi=a("p"),sRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IG=a("a"),lRo=o("from_pretrained()"),iRo=o(" class method or the "),qG=a("a"),dRo=o("from_config()"),cRo=o(` class
method.`),fRo=l(),by=a("p"),mRo=o("This class cannot be instantiated directly using "),nme=a("code"),gRo=o("__init__()"),hRo=o(" (throws an error)."),pRo=l(),dt=a("div"),F(vy.$$.fragment),_Ro=l(),sme=a("p"),uRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bRo=l(),Qi=a("p"),vRo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),FRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),MRo=o("from_pretrained()"),ERo=o(" to load the model weights."),CRo=l(),F(Lb.$$.fragment),wRo=l(),ro=a("div"),F(Fy.$$.fragment),ARo=l(),ime=a("p"),yRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LRo=l(),Pa=a("p"),xRo=o("The model class to instantiate is selected based on the "),dme=a("code"),$Ro=o("model_type"),kRo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),PRo=o("pretrained_model_name_or_path"),BRo=o(":"),IRo=l(),Y=a("ul"),xb=a("li"),mme=a("strong"),qRo=o("albert"),NRo=o(" \u2014 "),jG=a("a"),jRo=o("AlbertForMultipleChoice"),DRo=o(" (ALBERT model)"),GRo=l(),$b=a("li"),gme=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),DG=a("a"),XRo=o("BertForMultipleChoice"),zRo=o(" (BERT model)"),WRo=l(),kb=a("li"),hme=a("strong"),QRo=o("big_bird"),HRo=o(" \u2014 "),GG=a("a"),URo=o("BigBirdForMultipleChoice"),JRo=o(" (BigBird model)"),YRo=l(),Sb=a("li"),pme=a("strong"),KRo=o("camembert"),ZRo=o(" \u2014 "),OG=a("a"),ePo=o("CamembertForMultipleChoice"),oPo=o(" (CamemBERT model)"),rPo=l(),Rb=a("li"),_me=a("strong"),tPo=o("canine"),aPo=o(" \u2014 "),VG=a("a"),nPo=o("CanineForMultipleChoice"),sPo=o(" (Canine model)"),lPo=l(),Pb=a("li"),ume=a("strong"),iPo=o("convbert"),dPo=o(" \u2014 "),XG=a("a"),cPo=o("ConvBertForMultipleChoice"),fPo=o(" (ConvBERT model)"),mPo=l(),Bb=a("li"),bme=a("strong"),gPo=o("data2vec-text"),hPo=o(" \u2014 "),zG=a("a"),pPo=o("Data2VecTextForMultipleChoice"),_Po=o(" (Data2VecText model)"),uPo=l(),Ib=a("li"),vme=a("strong"),bPo=o("deberta-v2"),vPo=o(" \u2014 "),WG=a("a"),FPo=o("DebertaV2ForMultipleChoice"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),qb=a("li"),Fme=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),QG=a("a"),wPo=o("DistilBertForMultipleChoice"),APo=o(" (DistilBERT model)"),yPo=l(),Nb=a("li"),Tme=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),HG=a("a"),$Po=o("ElectraForMultipleChoice"),kPo=o(" (ELECTRA model)"),SPo=l(),jb=a("li"),Mme=a("strong"),RPo=o("flaubert"),PPo=o(" \u2014 "),UG=a("a"),BPo=o("FlaubertForMultipleChoice"),IPo=o(" (FlauBERT model)"),qPo=l(),Db=a("li"),Eme=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),JG=a("a"),DPo=o("FNetForMultipleChoice"),GPo=o(" (FNet model)"),OPo=l(),Gb=a("li"),Cme=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),YG=a("a"),zPo=o("FunnelForMultipleChoice"),WPo=o(" (Funnel Transformer model)"),QPo=l(),Ob=a("li"),wme=a("strong"),HPo=o("ibert"),UPo=o(" \u2014 "),KG=a("a"),JPo=o("IBertForMultipleChoice"),YPo=o(" (I-BERT model)"),KPo=l(),Vb=a("li"),Ame=a("strong"),ZPo=o("longformer"),eBo=o(" \u2014 "),ZG=a("a"),oBo=o("LongformerForMultipleChoice"),rBo=o(" (Longformer model)"),tBo=l(),Xb=a("li"),yme=a("strong"),aBo=o("megatron-bert"),nBo=o(" \u2014 "),eO=a("a"),sBo=o("MegatronBertForMultipleChoice"),lBo=o(" (MegatronBert model)"),iBo=l(),zb=a("li"),Lme=a("strong"),dBo=o("mobilebert"),cBo=o(" \u2014 "),oO=a("a"),fBo=o("MobileBertForMultipleChoice"),mBo=o(" (MobileBERT model)"),gBo=l(),Wb=a("li"),xme=a("strong"),hBo=o("mpnet"),pBo=o(" \u2014 "),rO=a("a"),_Bo=o("MPNetForMultipleChoice"),uBo=o(" (MPNet model)"),bBo=l(),Qb=a("li"),$me=a("strong"),vBo=o("nystromformer"),FBo=o(" \u2014 "),tO=a("a"),TBo=o("NystromformerForMultipleChoice"),MBo=o(" (Nystromformer model)"),EBo=l(),Hb=a("li"),kme=a("strong"),CBo=o("qdqbert"),wBo=o(" \u2014 "),aO=a("a"),ABo=o("QDQBertForMultipleChoice"),yBo=o(" (QDQBert model)"),LBo=l(),Ub=a("li"),Sme=a("strong"),xBo=o("rembert"),$Bo=o(" \u2014 "),nO=a("a"),kBo=o("RemBertForMultipleChoice"),SBo=o(" (RemBERT model)"),RBo=l(),Jb=a("li"),Rme=a("strong"),PBo=o("roberta"),BBo=o(" \u2014 "),sO=a("a"),IBo=o("RobertaForMultipleChoice"),qBo=o(" (RoBERTa model)"),NBo=l(),Yb=a("li"),Pme=a("strong"),jBo=o("roformer"),DBo=o(" \u2014 "),lO=a("a"),GBo=o("RoFormerForMultipleChoice"),OBo=o(" (RoFormer model)"),VBo=l(),Kb=a("li"),Bme=a("strong"),XBo=o("squeezebert"),zBo=o(" \u2014 "),iO=a("a"),WBo=o("SqueezeBertForMultipleChoice"),QBo=o(" (SqueezeBERT model)"),HBo=l(),Zb=a("li"),Ime=a("strong"),UBo=o("xlm"),JBo=o(" \u2014 "),dO=a("a"),YBo=o("XLMForMultipleChoice"),KBo=o(" (XLM model)"),ZBo=l(),e4=a("li"),qme=a("strong"),eIo=o("xlm-roberta"),oIo=o(" \u2014 "),cO=a("a"),rIo=o("XLMRobertaForMultipleChoice"),tIo=o(" (XLM-RoBERTa model)"),aIo=l(),o4=a("li"),Nme=a("strong"),nIo=o("xlm-roberta-xl"),sIo=o(" \u2014 "),fO=a("a"),lIo=o("XLMRobertaXLForMultipleChoice"),iIo=o(" (XLM-RoBERTa-XL model)"),dIo=l(),r4=a("li"),jme=a("strong"),cIo=o("xlnet"),fIo=o(" \u2014 "),mO=a("a"),mIo=o("XLNetForMultipleChoice"),gIo=o(" (XLNet model)"),hIo=l(),t4=a("li"),Dme=a("strong"),pIo=o("yoso"),_Io=o(" \u2014 "),gO=a("a"),uIo=o("YosoForMultipleChoice"),bIo=o(" (YOSO model)"),vIo=l(),a4=a("p"),FIo=o("The model is set in evaluation mode by default using "),Gme=a("code"),TIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),EIo=o("model.train()"),CIo=l(),F(n4.$$.fragment),xqe=l(),Hi=a("h2"),s4=a("a"),Vme=a("span"),F(Ty.$$.fragment),wIo=l(),Xme=a("span"),AIo=o("AutoModelForNextSentencePrediction"),$qe=l(),Bo=a("div"),F(My.$$.fragment),yIo=l(),Ui=a("p"),LIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hO=a("a"),xIo=o("from_pretrained()"),$Io=o(" class method or the "),pO=a("a"),kIo=o("from_config()"),SIo=o(` class
method.`),RIo=l(),Ey=a("p"),PIo=o("This class cannot be instantiated directly using "),zme=a("code"),BIo=o("__init__()"),IIo=o(" (throws an error)."),qIo=l(),ct=a("div"),F(Cy.$$.fragment),NIo=l(),Wme=a("p"),jIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DIo=l(),Ji=a("p"),GIo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),OIo=o("not"),VIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),XIo=o("from_pretrained()"),zIo=o(" to load the model weights."),WIo=l(),F(l4.$$.fragment),QIo=l(),to=a("div"),F(wy.$$.fragment),HIo=l(),Hme=a("p"),UIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JIo=l(),Ba=a("p"),YIo=o("The model class to instantiate is selected based on the "),Ume=a("code"),KIo=o("model_type"),ZIo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(":"),aqo=l(),Yr=a("ul"),i4=a("li"),Kme=a("strong"),nqo=o("bert"),sqo=o(" \u2014 "),uO=a("a"),lqo=o("BertForNextSentencePrediction"),iqo=o(" (BERT model)"),dqo=l(),d4=a("li"),Zme=a("strong"),cqo=o("fnet"),fqo=o(" \u2014 "),bO=a("a"),mqo=o("FNetForNextSentencePrediction"),gqo=o(" (FNet model)"),hqo=l(),c4=a("li"),ege=a("strong"),pqo=o("megatron-bert"),_qo=o(" \u2014 "),vO=a("a"),uqo=o("MegatronBertForNextSentencePrediction"),bqo=o(" (MegatronBert model)"),vqo=l(),f4=a("li"),oge=a("strong"),Fqo=o("mobilebert"),Tqo=o(" \u2014 "),FO=a("a"),Mqo=o("MobileBertForNextSentencePrediction"),Eqo=o(" (MobileBERT model)"),Cqo=l(),m4=a("li"),rge=a("strong"),wqo=o("qdqbert"),Aqo=o(" \u2014 "),TO=a("a"),yqo=o("QDQBertForNextSentencePrediction"),Lqo=o(" (QDQBert model)"),xqo=l(),g4=a("p"),$qo=o("The model is set in evaluation mode by default using "),tge=a("code"),kqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=a("code"),Rqo=o("model.train()"),Pqo=l(),F(h4.$$.fragment),kqe=l(),Yi=a("h2"),p4=a("a"),nge=a("span"),F(Ay.$$.fragment),Bqo=l(),sge=a("span"),Iqo=o("AutoModelForTokenClassification"),Sqe=l(),Io=a("div"),F(yy.$$.fragment),qqo=l(),Ki=a("p"),Nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MO=a("a"),jqo=o("from_pretrained()"),Dqo=o(" class method or the "),EO=a("a"),Gqo=o("from_config()"),Oqo=o(` class
method.`),Vqo=l(),Ly=a("p"),Xqo=o("This class cannot be instantiated directly using "),lge=a("code"),zqo=o("__init__()"),Wqo=o(" (throws an error)."),Qqo=l(),ft=a("div"),F(xy.$$.fragment),Hqo=l(),ige=a("p"),Uqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jqo=l(),Zi=a("p"),Yqo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),Kqo=o("not"),Zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=a("a"),eNo=o("from_pretrained()"),oNo=o(" to load the model weights."),rNo=l(),F(_4.$$.fragment),tNo=l(),ao=a("div"),F($y.$$.fragment),aNo=l(),cge=a("p"),nNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sNo=l(),Ia=a("p"),lNo=o("The model class to instantiate is selected based on the "),fge=a("code"),iNo=o("model_type"),dNo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),mNo=o("pretrained_model_name_or_path"),gNo=o(":"),hNo=l(),U=a("ul"),u4=a("li"),hge=a("strong"),pNo=o("albert"),_No=o(" \u2014 "),wO=a("a"),uNo=o("AlbertForTokenClassification"),bNo=o(" (ALBERT model)"),vNo=l(),b4=a("li"),pge=a("strong"),FNo=o("bert"),TNo=o(" \u2014 "),AO=a("a"),MNo=o("BertForTokenClassification"),ENo=o(" (BERT model)"),CNo=l(),v4=a("li"),_ge=a("strong"),wNo=o("big_bird"),ANo=o(" \u2014 "),yO=a("a"),yNo=o("BigBirdForTokenClassification"),LNo=o(" (BigBird model)"),xNo=l(),F4=a("li"),uge=a("strong"),$No=o("camembert"),kNo=o(" \u2014 "),LO=a("a"),SNo=o("CamembertForTokenClassification"),RNo=o(" (CamemBERT model)"),PNo=l(),T4=a("li"),bge=a("strong"),BNo=o("canine"),INo=o(" \u2014 "),xO=a("a"),qNo=o("CanineForTokenClassification"),NNo=o(" (Canine model)"),jNo=l(),M4=a("li"),vge=a("strong"),DNo=o("convbert"),GNo=o(" \u2014 "),$O=a("a"),ONo=o("ConvBertForTokenClassification"),VNo=o(" (ConvBERT model)"),XNo=l(),E4=a("li"),Fge=a("strong"),zNo=o("data2vec-text"),WNo=o(" \u2014 "),kO=a("a"),QNo=o("Data2VecTextForTokenClassification"),HNo=o(" (Data2VecText model)"),UNo=l(),C4=a("li"),Tge=a("strong"),JNo=o("deberta"),YNo=o(" \u2014 "),SO=a("a"),KNo=o("DebertaForTokenClassification"),ZNo=o(" (DeBERTa model)"),ejo=l(),w4=a("li"),Mge=a("strong"),ojo=o("deberta-v2"),rjo=o(" \u2014 "),RO=a("a"),tjo=o("DebertaV2ForTokenClassification"),ajo=o(" (DeBERTa-v2 model)"),njo=l(),A4=a("li"),Ege=a("strong"),sjo=o("distilbert"),ljo=o(" \u2014 "),PO=a("a"),ijo=o("DistilBertForTokenClassification"),djo=o(" (DistilBERT model)"),cjo=l(),y4=a("li"),Cge=a("strong"),fjo=o("electra"),mjo=o(" \u2014 "),BO=a("a"),gjo=o("ElectraForTokenClassification"),hjo=o(" (ELECTRA model)"),pjo=l(),L4=a("li"),wge=a("strong"),_jo=o("flaubert"),ujo=o(" \u2014 "),IO=a("a"),bjo=o("FlaubertForTokenClassification"),vjo=o(" (FlauBERT model)"),Fjo=l(),x4=a("li"),Age=a("strong"),Tjo=o("fnet"),Mjo=o(" \u2014 "),qO=a("a"),Ejo=o("FNetForTokenClassification"),Cjo=o(" (FNet model)"),wjo=l(),$4=a("li"),yge=a("strong"),Ajo=o("funnel"),yjo=o(" \u2014 "),NO=a("a"),Ljo=o("FunnelForTokenClassification"),xjo=o(" (Funnel Transformer model)"),$jo=l(),k4=a("li"),Lge=a("strong"),kjo=o("gpt2"),Sjo=o(" \u2014 "),jO=a("a"),Rjo=o("GPT2ForTokenClassification"),Pjo=o(" (OpenAI GPT-2 model)"),Bjo=l(),S4=a("li"),xge=a("strong"),Ijo=o("ibert"),qjo=o(" \u2014 "),DO=a("a"),Njo=o("IBertForTokenClassification"),jjo=o(" (I-BERT model)"),Djo=l(),R4=a("li"),$ge=a("strong"),Gjo=o("layoutlm"),Ojo=o(" \u2014 "),GO=a("a"),Vjo=o("LayoutLMForTokenClassification"),Xjo=o(" (LayoutLM model)"),zjo=l(),P4=a("li"),kge=a("strong"),Wjo=o("layoutlmv2"),Qjo=o(" \u2014 "),OO=a("a"),Hjo=o("LayoutLMv2ForTokenClassification"),Ujo=o(" (LayoutLMv2 model)"),Jjo=l(),B4=a("li"),Sge=a("strong"),Yjo=o("longformer"),Kjo=o(" \u2014 "),VO=a("a"),Zjo=o("LongformerForTokenClassification"),eDo=o(" (Longformer model)"),oDo=l(),I4=a("li"),Rge=a("strong"),rDo=o("megatron-bert"),tDo=o(" \u2014 "),XO=a("a"),aDo=o("MegatronBertForTokenClassification"),nDo=o(" (MegatronBert model)"),sDo=l(),q4=a("li"),Pge=a("strong"),lDo=o("mobilebert"),iDo=o(" \u2014 "),zO=a("a"),dDo=o("MobileBertForTokenClassification"),cDo=o(" (MobileBERT model)"),fDo=l(),N4=a("li"),Bge=a("strong"),mDo=o("mpnet"),gDo=o(" \u2014 "),WO=a("a"),hDo=o("MPNetForTokenClassification"),pDo=o(" (MPNet model)"),_Do=l(),j4=a("li"),Ige=a("strong"),uDo=o("nystromformer"),bDo=o(" \u2014 "),QO=a("a"),vDo=o("NystromformerForTokenClassification"),FDo=o(" (Nystromformer model)"),TDo=l(),D4=a("li"),qge=a("strong"),MDo=o("qdqbert"),EDo=o(" \u2014 "),HO=a("a"),CDo=o("QDQBertForTokenClassification"),wDo=o(" (QDQBert model)"),ADo=l(),G4=a("li"),Nge=a("strong"),yDo=o("rembert"),LDo=o(" \u2014 "),UO=a("a"),xDo=o("RemBertForTokenClassification"),$Do=o(" (RemBERT model)"),kDo=l(),O4=a("li"),jge=a("strong"),SDo=o("roberta"),RDo=o(" \u2014 "),JO=a("a"),PDo=o("RobertaForTokenClassification"),BDo=o(" (RoBERTa model)"),IDo=l(),V4=a("li"),Dge=a("strong"),qDo=o("roformer"),NDo=o(" \u2014 "),YO=a("a"),jDo=o("RoFormerForTokenClassification"),DDo=o(" (RoFormer model)"),GDo=l(),X4=a("li"),Gge=a("strong"),ODo=o("squeezebert"),VDo=o(" \u2014 "),KO=a("a"),XDo=o("SqueezeBertForTokenClassification"),zDo=o(" (SqueezeBERT model)"),WDo=l(),z4=a("li"),Oge=a("strong"),QDo=o("xlm"),HDo=o(" \u2014 "),ZO=a("a"),UDo=o("XLMForTokenClassification"),JDo=o(" (XLM model)"),YDo=l(),W4=a("li"),Vge=a("strong"),KDo=o("xlm-roberta"),ZDo=o(" \u2014 "),eV=a("a"),eGo=o("XLMRobertaForTokenClassification"),oGo=o(" (XLM-RoBERTa model)"),rGo=l(),Q4=a("li"),Xge=a("strong"),tGo=o("xlm-roberta-xl"),aGo=o(" \u2014 "),oV=a("a"),nGo=o("XLMRobertaXLForTokenClassification"),sGo=o(" (XLM-RoBERTa-XL model)"),lGo=l(),H4=a("li"),zge=a("strong"),iGo=o("xlnet"),dGo=o(" \u2014 "),rV=a("a"),cGo=o("XLNetForTokenClassification"),fGo=o(" (XLNet model)"),mGo=l(),U4=a("li"),Wge=a("strong"),gGo=o("yoso"),hGo=o(" \u2014 "),tV=a("a"),pGo=o("YosoForTokenClassification"),_Go=o(" (YOSO model)"),uGo=l(),J4=a("p"),bGo=o("The model is set in evaluation mode by default using "),Qge=a("code"),vGo=o("model.eval()"),FGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),TGo=o("model.train()"),MGo=l(),F(Y4.$$.fragment),Rqe=l(),ed=a("h2"),K4=a("a"),Uge=a("span"),F(ky.$$.fragment),EGo=l(),Jge=a("span"),CGo=o("AutoModelForQuestionAnswering"),Pqe=l(),qo=a("div"),F(Sy.$$.fragment),wGo=l(),od=a("p"),AGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aV=a("a"),yGo=o("from_pretrained()"),LGo=o(" class method or the "),nV=a("a"),xGo=o("from_config()"),$Go=o(` class
method.`),kGo=l(),Ry=a("p"),SGo=o("This class cannot be instantiated directly using "),Yge=a("code"),RGo=o("__init__()"),PGo=o(" (throws an error)."),BGo=l(),mt=a("div"),F(Py.$$.fragment),IGo=l(),Kge=a("p"),qGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NGo=l(),rd=a("p"),jGo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),DGo=o("not"),GGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),OGo=o("from_pretrained()"),VGo=o(" to load the model weights."),XGo=l(),F(Z4.$$.fragment),zGo=l(),no=a("div"),F(By.$$.fragment),WGo=l(),ehe=a("p"),QGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HGo=l(),qa=a("p"),UGo=o("The model class to instantiate is selected based on the "),ohe=a("code"),JGo=o("model_type"),YGo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),KGo=o("pretrained_model_name_or_path"),ZGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),eOo=o("pretrained_model_name_or_path"),oOo=o(":"),rOo=l(),V=a("ul"),e5=a("li"),ahe=a("strong"),tOo=o("albert"),aOo=o(" \u2014 "),lV=a("a"),nOo=o("AlbertForQuestionAnswering"),sOo=o(" (ALBERT model)"),lOo=l(),o5=a("li"),nhe=a("strong"),iOo=o("bart"),dOo=o(" \u2014 "),iV=a("a"),cOo=o("BartForQuestionAnswering"),fOo=o(" (BART model)"),mOo=l(),r5=a("li"),she=a("strong"),gOo=o("bert"),hOo=o(" \u2014 "),dV=a("a"),pOo=o("BertForQuestionAnswering"),_Oo=o(" (BERT model)"),uOo=l(),t5=a("li"),lhe=a("strong"),bOo=o("big_bird"),vOo=o(" \u2014 "),cV=a("a"),FOo=o("BigBirdForQuestionAnswering"),TOo=o(" (BigBird model)"),MOo=l(),a5=a("li"),ihe=a("strong"),EOo=o("bigbird_pegasus"),COo=o(" \u2014 "),fV=a("a"),wOo=o("BigBirdPegasusForQuestionAnswering"),AOo=o(" (BigBirdPegasus model)"),yOo=l(),n5=a("li"),dhe=a("strong"),LOo=o("camembert"),xOo=o(" \u2014 "),mV=a("a"),$Oo=o("CamembertForQuestionAnswering"),kOo=o(" (CamemBERT model)"),SOo=l(),s5=a("li"),che=a("strong"),ROo=o("canine"),POo=o(" \u2014 "),gV=a("a"),BOo=o("CanineForQuestionAnswering"),IOo=o(" (Canine model)"),qOo=l(),l5=a("li"),fhe=a("strong"),NOo=o("convbert"),jOo=o(" \u2014 "),hV=a("a"),DOo=o("ConvBertForQuestionAnswering"),GOo=o(" (ConvBERT model)"),OOo=l(),i5=a("li"),mhe=a("strong"),VOo=o("data2vec-text"),XOo=o(" \u2014 "),pV=a("a"),zOo=o("Data2VecTextForQuestionAnswering"),WOo=o(" (Data2VecText model)"),QOo=l(),d5=a("li"),ghe=a("strong"),HOo=o("deberta"),UOo=o(" \u2014 "),_V=a("a"),JOo=o("DebertaForQuestionAnswering"),YOo=o(" (DeBERTa model)"),KOo=l(),c5=a("li"),hhe=a("strong"),ZOo=o("deberta-v2"),eVo=o(" \u2014 "),uV=a("a"),oVo=o("DebertaV2ForQuestionAnswering"),rVo=o(" (DeBERTa-v2 model)"),tVo=l(),f5=a("li"),phe=a("strong"),aVo=o("distilbert"),nVo=o(" \u2014 "),bV=a("a"),sVo=o("DistilBertForQuestionAnswering"),lVo=o(" (DistilBERT model)"),iVo=l(),m5=a("li"),_he=a("strong"),dVo=o("electra"),cVo=o(" \u2014 "),vV=a("a"),fVo=o("ElectraForQuestionAnswering"),mVo=o(" (ELECTRA model)"),gVo=l(),g5=a("li"),uhe=a("strong"),hVo=o("flaubert"),pVo=o(" \u2014 "),FV=a("a"),_Vo=o("FlaubertForQuestionAnsweringSimple"),uVo=o(" (FlauBERT model)"),bVo=l(),h5=a("li"),bhe=a("strong"),vVo=o("fnet"),FVo=o(" \u2014 "),TV=a("a"),TVo=o("FNetForQuestionAnswering"),MVo=o(" (FNet model)"),EVo=l(),p5=a("li"),vhe=a("strong"),CVo=o("funnel"),wVo=o(" \u2014 "),MV=a("a"),AVo=o("FunnelForQuestionAnswering"),yVo=o(" (Funnel Transformer model)"),LVo=l(),_5=a("li"),Fhe=a("strong"),xVo=o("gptj"),$Vo=o(" \u2014 "),EV=a("a"),kVo=o("GPTJForQuestionAnswering"),SVo=o(" (GPT-J model)"),RVo=l(),u5=a("li"),The=a("strong"),PVo=o("ibert"),BVo=o(" \u2014 "),CV=a("a"),IVo=o("IBertForQuestionAnswering"),qVo=o(" (I-BERT model)"),NVo=l(),b5=a("li"),Mhe=a("strong"),jVo=o("layoutlmv2"),DVo=o(" \u2014 "),wV=a("a"),GVo=o("LayoutLMv2ForQuestionAnswering"),OVo=o(" (LayoutLMv2 model)"),VVo=l(),v5=a("li"),Ehe=a("strong"),XVo=o("led"),zVo=o(" \u2014 "),AV=a("a"),WVo=o("LEDForQuestionAnswering"),QVo=o(" (LED model)"),HVo=l(),F5=a("li"),Che=a("strong"),UVo=o("longformer"),JVo=o(" \u2014 "),yV=a("a"),YVo=o("LongformerForQuestionAnswering"),KVo=o(" (Longformer model)"),ZVo=l(),T5=a("li"),whe=a("strong"),eXo=o("lxmert"),oXo=o(" \u2014 "),LV=a("a"),rXo=o("LxmertForQuestionAnswering"),tXo=o(" (LXMERT model)"),aXo=l(),M5=a("li"),Ahe=a("strong"),nXo=o("mbart"),sXo=o(" \u2014 "),xV=a("a"),lXo=o("MBartForQuestionAnswering"),iXo=o(" (mBART model)"),dXo=l(),E5=a("li"),yhe=a("strong"),cXo=o("megatron-bert"),fXo=o(" \u2014 "),$V=a("a"),mXo=o("MegatronBertForQuestionAnswering"),gXo=o(" (MegatronBert model)"),hXo=l(),C5=a("li"),Lhe=a("strong"),pXo=o("mobilebert"),_Xo=o(" \u2014 "),kV=a("a"),uXo=o("MobileBertForQuestionAnswering"),bXo=o(" (MobileBERT model)"),vXo=l(),w5=a("li"),xhe=a("strong"),FXo=o("mpnet"),TXo=o(" \u2014 "),SV=a("a"),MXo=o("MPNetForQuestionAnswering"),EXo=o(" (MPNet model)"),CXo=l(),A5=a("li"),$he=a("strong"),wXo=o("nystromformer"),AXo=o(" \u2014 "),RV=a("a"),yXo=o("NystromformerForQuestionAnswering"),LXo=o(" (Nystromformer model)"),xXo=l(),y5=a("li"),khe=a("strong"),$Xo=o("qdqbert"),kXo=o(" \u2014 "),PV=a("a"),SXo=o("QDQBertForQuestionAnswering"),RXo=o(" (QDQBert model)"),PXo=l(),L5=a("li"),She=a("strong"),BXo=o("reformer"),IXo=o(" \u2014 "),BV=a("a"),qXo=o("ReformerForQuestionAnswering"),NXo=o(" (Reformer model)"),jXo=l(),x5=a("li"),Rhe=a("strong"),DXo=o("rembert"),GXo=o(" \u2014 "),IV=a("a"),OXo=o("RemBertForQuestionAnswering"),VXo=o(" (RemBERT model)"),XXo=l(),$5=a("li"),Phe=a("strong"),zXo=o("roberta"),WXo=o(" \u2014 "),qV=a("a"),QXo=o("RobertaForQuestionAnswering"),HXo=o(" (RoBERTa model)"),UXo=l(),k5=a("li"),Bhe=a("strong"),JXo=o("roformer"),YXo=o(" \u2014 "),NV=a("a"),KXo=o("RoFormerForQuestionAnswering"),ZXo=o(" (RoFormer model)"),ezo=l(),S5=a("li"),Ihe=a("strong"),ozo=o("splinter"),rzo=o(" \u2014 "),jV=a("a"),tzo=o("SplinterForQuestionAnswering"),azo=o(" (Splinter model)"),nzo=l(),R5=a("li"),qhe=a("strong"),szo=o("squeezebert"),lzo=o(" \u2014 "),DV=a("a"),izo=o("SqueezeBertForQuestionAnswering"),dzo=o(" (SqueezeBERT model)"),czo=l(),P5=a("li"),Nhe=a("strong"),fzo=o("xlm"),mzo=o(" \u2014 "),GV=a("a"),gzo=o("XLMForQuestionAnsweringSimple"),hzo=o(" (XLM model)"),pzo=l(),B5=a("li"),jhe=a("strong"),_zo=o("xlm-roberta"),uzo=o(" \u2014 "),OV=a("a"),bzo=o("XLMRobertaForQuestionAnswering"),vzo=o(" (XLM-RoBERTa model)"),Fzo=l(),I5=a("li"),Dhe=a("strong"),Tzo=o("xlm-roberta-xl"),Mzo=o(" \u2014 "),VV=a("a"),Ezo=o("XLMRobertaXLForQuestionAnswering"),Czo=o(" (XLM-RoBERTa-XL model)"),wzo=l(),q5=a("li"),Ghe=a("strong"),Azo=o("xlnet"),yzo=o(" \u2014 "),XV=a("a"),Lzo=o("XLNetForQuestionAnsweringSimple"),xzo=o(" (XLNet model)"),$zo=l(),N5=a("li"),Ohe=a("strong"),kzo=o("yoso"),Szo=o(" \u2014 "),zV=a("a"),Rzo=o("YosoForQuestionAnswering"),Pzo=o(" (YOSO model)"),Bzo=l(),j5=a("p"),Izo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),qzo=o("model.eval()"),Nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),jzo=o("model.train()"),Dzo=l(),F(D5.$$.fragment),Bqe=l(),td=a("h2"),G5=a("a"),zhe=a("span"),F(Iy.$$.fragment),Gzo=l(),Whe=a("span"),Ozo=o("AutoModelForTableQuestionAnswering"),Iqe=l(),No=a("div"),F(qy.$$.fragment),Vzo=l(),ad=a("p"),Xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WV=a("a"),zzo=o("from_pretrained()"),Wzo=o(" class method or the "),QV=a("a"),Qzo=o("from_config()"),Hzo=o(` class
method.`),Uzo=l(),Ny=a("p"),Jzo=o("This class cannot be instantiated directly using "),Qhe=a("code"),Yzo=o("__init__()"),Kzo=o(" (throws an error)."),Zzo=l(),gt=a("div"),F(jy.$$.fragment),eWo=l(),Hhe=a("p"),oWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rWo=l(),nd=a("p"),tWo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),aWo=o("not"),nWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),sWo=o("from_pretrained()"),lWo=o(" to load the model weights."),iWo=l(),F(O5.$$.fragment),dWo=l(),so=a("div"),F(Dy.$$.fragment),cWo=l(),Jhe=a("p"),fWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mWo=l(),Na=a("p"),gWo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),hWo=o("model_type"),pWo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),_Wo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(":"),FWo=l(),epe=a("ul"),V5=a("li"),ope=a("strong"),TWo=o("tapas"),MWo=o(" \u2014 "),UV=a("a"),EWo=o("TapasForQuestionAnswering"),CWo=o(" (TAPAS model)"),wWo=l(),X5=a("p"),AWo=o("The model is set in evaluation mode by default using "),rpe=a("code"),yWo=o("model.eval()"),LWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),xWo=o("model.train()"),$Wo=l(),F(z5.$$.fragment),qqe=l(),sd=a("h2"),W5=a("a"),ape=a("span"),F(Gy.$$.fragment),kWo=l(),npe=a("span"),SWo=o("AutoModelForImageClassification"),Nqe=l(),jo=a("div"),F(Oy.$$.fragment),RWo=l(),ld=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JV=a("a"),BWo=o("from_pretrained()"),IWo=o(" class method or the "),YV=a("a"),qWo=o("from_config()"),NWo=o(` class
method.`),jWo=l(),Vy=a("p"),DWo=o("This class cannot be instantiated directly using "),spe=a("code"),GWo=o("__init__()"),OWo=o(" (throws an error)."),VWo=l(),ht=a("div"),F(Xy.$$.fragment),XWo=l(),lpe=a("p"),zWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WWo=l(),id=a("p"),QWo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),JWo=o("from_pretrained()"),YWo=o(" to load the model weights."),KWo=l(),F(Q5.$$.fragment),ZWo=l(),lo=a("div"),F(zy.$$.fragment),eQo=l(),dpe=a("p"),oQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rQo=l(),ja=a("p"),tQo=o("The model class to instantiate is selected based on the "),cpe=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),Fe=a("ul"),H5=a("li"),gpe=a("strong"),fQo=o("beit"),mQo=o(" \u2014 "),ZV=a("a"),gQo=o("BeitForImageClassification"),hQo=o(" (BEiT model)"),pQo=l(),U5=a("li"),hpe=a("strong"),_Qo=o("convnext"),uQo=o(" \u2014 "),eX=a("a"),bQo=o("ConvNextForImageClassification"),vQo=o(" (ConvNext model)"),FQo=l(),J5=a("li"),ppe=a("strong"),TQo=o("cvt"),MQo=o(" \u2014 "),oX=a("a"),EQo=o("CvtForImageClassification"),CQo=o(" (CvT model)"),wQo=l(),Y5=a("li"),_pe=a("strong"),AQo=o("data2vec-vision"),yQo=o(" \u2014 "),rX=a("a"),LQo=o("Data2VecVisionForImageClassification"),xQo=o(" (Data2VecVision model)"),$Qo=l(),qs=a("li"),upe=a("strong"),kQo=o("deit"),SQo=o(" \u2014 "),tX=a("a"),RQo=o("DeiTForImageClassification"),PQo=o(" or "),aX=a("a"),BQo=o("DeiTForImageClassificationWithTeacher"),IQo=o(" (DeiT model)"),qQo=l(),K5=a("li"),bpe=a("strong"),NQo=o("imagegpt"),jQo=o(" \u2014 "),nX=a("a"),DQo=o("ImageGPTForImageClassification"),GQo=o(" (ImageGPT model)"),OQo=l(),pt=a("li"),vpe=a("strong"),VQo=o("perceiver"),XQo=o(" \u2014 "),sX=a("a"),zQo=o("PerceiverForImageClassificationLearned"),WQo=o(" or "),lX=a("a"),QQo=o("PerceiverForImageClassificationFourier"),HQo=o(" or "),iX=a("a"),UQo=o("PerceiverForImageClassificationConvProcessing"),JQo=o(" (Perceiver model)"),YQo=l(),Z5=a("li"),Fpe=a("strong"),KQo=o("poolformer"),ZQo=o(" \u2014 "),dX=a("a"),eHo=o("PoolFormerForImageClassification"),oHo=o(" (PoolFormer model)"),rHo=l(),ev=a("li"),Tpe=a("strong"),tHo=o("regnet"),aHo=o(" \u2014 "),cX=a("a"),nHo=o("RegNetForImageClassification"),sHo=o(" (RegNet model)"),lHo=l(),ov=a("li"),Mpe=a("strong"),iHo=o("resnet"),dHo=o(" \u2014 "),fX=a("a"),cHo=o("ResNetForImageClassification"),fHo=o(" (ResNet model)"),mHo=l(),rv=a("li"),Epe=a("strong"),gHo=o("segformer"),hHo=o(" \u2014 "),mX=a("a"),pHo=o("SegformerForImageClassification"),_Ho=o(" (SegFormer model)"),uHo=l(),tv=a("li"),Cpe=a("strong"),bHo=o("swin"),vHo=o(" \u2014 "),gX=a("a"),FHo=o("SwinForImageClassification"),THo=o(" (Swin model)"),MHo=l(),av=a("li"),wpe=a("strong"),EHo=o("van"),CHo=o(" \u2014 "),hX=a("a"),wHo=o("VanForImageClassification"),AHo=o(" (VAN model)"),yHo=l(),nv=a("li"),Ape=a("strong"),LHo=o("vit"),xHo=o(" \u2014 "),pX=a("a"),$Ho=o("ViTForImageClassification"),kHo=o(" (ViT model)"),SHo=l(),sv=a("p"),RHo=o("The model is set in evaluation mode by default using "),ype=a("code"),PHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),IHo=o("model.train()"),qHo=l(),F(lv.$$.fragment),jqe=l(),dd=a("h2"),iv=a("a"),xpe=a("span"),F(Wy.$$.fragment),NHo=l(),$pe=a("span"),jHo=o("AutoModelForVision2Seq"),Dqe=l(),Do=a("div"),F(Qy.$$.fragment),DHo=l(),cd=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_X=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),uX=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),WHo=l(),Hy=a("p"),QHo=o("This class cannot be instantiated directly using "),kpe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),_t=a("div"),F(Uy.$$.fragment),YHo=l(),Spe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZHo=l(),fd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(dv.$$.fragment),sUo=l(),io=a("div"),F(Jy.$$.fragment),lUo=l(),Ppe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dUo=l(),Da=a("p"),cUo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(":"),uUo=l(),Npe=a("ul"),cv=a("li"),jpe=a("strong"),bUo=o("vision-encoder-decoder"),vUo=o(" \u2014 "),vX=a("a"),FUo=o("VisionEncoderDecoderModel"),TUo=o(" (Vision Encoder decoder model)"),MUo=l(),fv=a("p"),EUo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),AUo=o("model.train()"),yUo=l(),F(mv.$$.fragment),Gqe=l(),md=a("h2"),gv=a("a"),Ope=a("span"),F(Yy.$$.fragment),LUo=l(),Vpe=a("span"),xUo=o("AutoModelForAudioClassification"),Oqe=l(),Go=a("div"),F(Ky.$$.fragment),$Uo=l(),gd=a("p"),kUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FX=a("a"),SUo=o("from_pretrained()"),RUo=o(" class method or the "),TX=a("a"),PUo=o("from_config()"),BUo=o(` class
method.`),IUo=l(),Zy=a("p"),qUo=o("This class cannot be instantiated directly using "),Xpe=a("code"),NUo=o("__init__()"),jUo=o(" (throws an error)."),DUo=l(),ut=a("div"),F(eL.$$.fragment),GUo=l(),zpe=a("p"),OUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VUo=l(),hd=a("p"),XUo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),zUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),QUo=o("from_pretrained()"),HUo=o(" to load the model weights."),UUo=l(),F(hv.$$.fragment),JUo=l(),co=a("div"),F(oL.$$.fragment),YUo=l(),Qpe=a("p"),KUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZUo=l(),Ga=a("p"),eJo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),ke=a("ul"),pv=a("li"),Ype=a("strong"),iJo=o("data2vec-audio"),dJo=o(" \u2014 "),EX=a("a"),cJo=o("Data2VecAudioForSequenceClassification"),fJo=o(" (Data2VecAudio model)"),mJo=l(),_v=a("li"),Kpe=a("strong"),gJo=o("hubert"),hJo=o(" \u2014 "),CX=a("a"),pJo=o("HubertForSequenceClassification"),_Jo=o(" (Hubert model)"),uJo=l(),uv=a("li"),Zpe=a("strong"),bJo=o("sew"),vJo=o(" \u2014 "),wX=a("a"),FJo=o("SEWForSequenceClassification"),TJo=o(" (SEW model)"),MJo=l(),bv=a("li"),e_e=a("strong"),EJo=o("sew-d"),CJo=o(" \u2014 "),AX=a("a"),wJo=o("SEWDForSequenceClassification"),AJo=o(" (SEW-D model)"),yJo=l(),vv=a("li"),o_e=a("strong"),LJo=o("unispeech"),xJo=o(" \u2014 "),yX=a("a"),$Jo=o("UniSpeechForSequenceClassification"),kJo=o(" (UniSpeech model)"),SJo=l(),Fv=a("li"),r_e=a("strong"),RJo=o("unispeech-sat"),PJo=o(" \u2014 "),LX=a("a"),BJo=o("UniSpeechSatForSequenceClassification"),IJo=o(" (UniSpeechSat model)"),qJo=l(),Tv=a("li"),t_e=a("strong"),NJo=o("wav2vec2"),jJo=o(" \u2014 "),xX=a("a"),DJo=o("Wav2Vec2ForSequenceClassification"),GJo=o(" (Wav2Vec2 model)"),OJo=l(),Mv=a("li"),a_e=a("strong"),VJo=o("wav2vec2-conformer"),XJo=o(" \u2014 "),$X=a("a"),zJo=o("Wav2Vec2ConformerForSequenceClassification"),WJo=o(" (Wav2Vec2-Conformer model)"),QJo=l(),Ev=a("li"),n_e=a("strong"),HJo=o("wavlm"),UJo=o(" \u2014 "),kX=a("a"),JJo=o("WavLMForSequenceClassification"),YJo=o(" (WavLM model)"),KJo=l(),Cv=a("p"),ZJo=o("The model is set in evaluation mode by default using "),s_e=a("code"),eYo=o("model.eval()"),oYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),rYo=o("model.train()"),tYo=l(),F(wv.$$.fragment),Vqe=l(),pd=a("h2"),Av=a("a"),i_e=a("span"),F(rL.$$.fragment),aYo=l(),d_e=a("span"),nYo=o("AutoModelForAudioFrameClassification"),Xqe=l(),Oo=a("div"),F(tL.$$.fragment),sYo=l(),_d=a("p"),lYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SX=a("a"),iYo=o("from_pretrained()"),dYo=o(" class method or the "),RX=a("a"),cYo=o("from_config()"),fYo=o(` class
method.`),mYo=l(),aL=a("p"),gYo=o("This class cannot be instantiated directly using "),c_e=a("code"),hYo=o("__init__()"),pYo=o(" (throws an error)."),_Yo=l(),bt=a("div"),F(nL.$$.fragment),uYo=l(),f_e=a("p"),bYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vYo=l(),ud=a("p"),FYo=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),TYo=o("not"),MYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),EYo=o("from_pretrained()"),CYo=o(" to load the model weights."),wYo=l(),F(yv.$$.fragment),AYo=l(),fo=a("div"),F(sL.$$.fragment),yYo=l(),g_e=a("p"),LYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xYo=l(),Oa=a("p"),$Yo=o("The model class to instantiate is selected based on the "),h_e=a("code"),kYo=o("model_type"),SYo=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),RYo=o("pretrained_model_name_or_path"),PYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),BYo=o("pretrained_model_name_or_path"),IYo=o(":"),qYo=l(),Kr=a("ul"),Lv=a("li"),u_e=a("strong"),NYo=o("data2vec-audio"),jYo=o(" \u2014 "),BX=a("a"),DYo=o("Data2VecAudioForAudioFrameClassification"),GYo=o(" (Data2VecAudio model)"),OYo=l(),xv=a("li"),b_e=a("strong"),VYo=o("unispeech-sat"),XYo=o(" \u2014 "),IX=a("a"),zYo=o("UniSpeechSatForAudioFrameClassification"),WYo=o(" (UniSpeechSat model)"),QYo=l(),$v=a("li"),v_e=a("strong"),HYo=o("wav2vec2"),UYo=o(" \u2014 "),qX=a("a"),JYo=o("Wav2Vec2ForAudioFrameClassification"),YYo=o(" (Wav2Vec2 model)"),KYo=l(),kv=a("li"),F_e=a("strong"),ZYo=o("wav2vec2-conformer"),eKo=o(" \u2014 "),NX=a("a"),oKo=o("Wav2Vec2ConformerForAudioFrameClassification"),rKo=o(" (Wav2Vec2-Conformer model)"),tKo=l(),Sv=a("li"),T_e=a("strong"),aKo=o("wavlm"),nKo=o(" \u2014 "),jX=a("a"),sKo=o("WavLMForAudioFrameClassification"),lKo=o(" (WavLM model)"),iKo=l(),Rv=a("p"),dKo=o("The model is set in evaluation mode by default using "),M_e=a("code"),cKo=o("model.eval()"),fKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),mKo=o("model.train()"),gKo=l(),F(Pv.$$.fragment),zqe=l(),bd=a("h2"),Bv=a("a"),C_e=a("span"),F(lL.$$.fragment),hKo=l(),w_e=a("span"),pKo=o("AutoModelForCTC"),Wqe=l(),Vo=a("div"),F(iL.$$.fragment),_Ko=l(),vd=a("p"),uKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DX=a("a"),bKo=o("from_pretrained()"),vKo=o(" class method or the "),GX=a("a"),FKo=o("from_config()"),TKo=o(` class
method.`),MKo=l(),dL=a("p"),EKo=o("This class cannot be instantiated directly using "),A_e=a("code"),CKo=o("__init__()"),wKo=o(" (throws an error)."),AKo=l(),vt=a("div"),F(cL.$$.fragment),yKo=l(),y_e=a("p"),LKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xKo=l(),Fd=a("p"),$Ko=o(`Note:
Loading a model from its configuration file does `),L_e=a("strong"),kKo=o("not"),SKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),RKo=o("from_pretrained()"),PKo=o(" to load the model weights."),BKo=l(),F(Iv.$$.fragment),IKo=l(),mo=a("div"),F(fL.$$.fragment),qKo=l(),x_e=a("p"),NKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jKo=l(),Va=a("p"),DKo=o("The model class to instantiate is selected based on the "),$_e=a("code"),GKo=o("model_type"),OKo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),VKo=o("pretrained_model_name_or_path"),XKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),zKo=o("pretrained_model_name_or_path"),WKo=o(":"),QKo=l(),Se=a("ul"),qv=a("li"),R_e=a("strong"),HKo=o("data2vec-audio"),UKo=o(" \u2014 "),VX=a("a"),JKo=o("Data2VecAudioForCTC"),YKo=o(" (Data2VecAudio model)"),KKo=l(),Nv=a("li"),P_e=a("strong"),ZKo=o("hubert"),eZo=o(" \u2014 "),XX=a("a"),oZo=o("HubertForCTC"),rZo=o(" (Hubert model)"),tZo=l(),jv=a("li"),B_e=a("strong"),aZo=o("sew"),nZo=o(" \u2014 "),zX=a("a"),sZo=o("SEWForCTC"),lZo=o(" (SEW model)"),iZo=l(),Dv=a("li"),I_e=a("strong"),dZo=o("sew-d"),cZo=o(" \u2014 "),WX=a("a"),fZo=o("SEWDForCTC"),mZo=o(" (SEW-D model)"),gZo=l(),Gv=a("li"),q_e=a("strong"),hZo=o("unispeech"),pZo=o(" \u2014 "),QX=a("a"),_Zo=o("UniSpeechForCTC"),uZo=o(" (UniSpeech model)"),bZo=l(),Ov=a("li"),N_e=a("strong"),vZo=o("unispeech-sat"),FZo=o(" \u2014 "),HX=a("a"),TZo=o("UniSpeechSatForCTC"),MZo=o(" (UniSpeechSat model)"),EZo=l(),Vv=a("li"),j_e=a("strong"),CZo=o("wav2vec2"),wZo=o(" \u2014 "),UX=a("a"),AZo=o("Wav2Vec2ForCTC"),yZo=o(" (Wav2Vec2 model)"),LZo=l(),Xv=a("li"),D_e=a("strong"),xZo=o("wav2vec2-conformer"),$Zo=o(" \u2014 "),JX=a("a"),kZo=o("Wav2Vec2ConformerForCTC"),SZo=o(" (Wav2Vec2-Conformer model)"),RZo=l(),zv=a("li"),G_e=a("strong"),PZo=o("wavlm"),BZo=o(" \u2014 "),YX=a("a"),IZo=o("WavLMForCTC"),qZo=o(" (WavLM model)"),NZo=l(),Wv=a("p"),jZo=o("The model is set in evaluation mode by default using "),O_e=a("code"),DZo=o("model.eval()"),GZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=a("code"),OZo=o("model.train()"),VZo=l(),F(Qv.$$.fragment),Qqe=l(),Td=a("h2"),Hv=a("a"),X_e=a("span"),F(mL.$$.fragment),XZo=l(),z_e=a("span"),zZo=o("AutoModelForSpeechSeq2Seq"),Hqe=l(),Xo=a("div"),F(gL.$$.fragment),WZo=l(),Md=a("p"),QZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KX=a("a"),HZo=o("from_pretrained()"),UZo=o(" class method or the "),ZX=a("a"),JZo=o("from_config()"),YZo=o(` class
method.`),KZo=l(),hL=a("p"),ZZo=o("This class cannot be instantiated directly using "),W_e=a("code"),eer=o("__init__()"),oer=o(" (throws an error)."),rer=l(),Ft=a("div"),F(pL.$$.fragment),ter=l(),Q_e=a("p"),aer=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ner=l(),Ed=a("p"),ser=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),ler=o("not"),ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),der=o("from_pretrained()"),cer=o(" to load the model weights."),fer=l(),F(Uv.$$.fragment),mer=l(),go=a("div"),F(_L.$$.fragment),ger=l(),U_e=a("p"),her=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),per=l(),Xa=a("p"),_er=o("The model class to instantiate is selected based on the "),J_e=a("code"),uer=o("model_type"),ber=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),ver=o("pretrained_model_name_or_path"),Fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),Ter=o("pretrained_model_name_or_path"),Mer=o(":"),Eer=l(),uL=a("ul"),Jv=a("li"),Z_e=a("strong"),Cer=o("speech-encoder-decoder"),wer=o(" \u2014 "),oz=a("a"),Aer=o("SpeechEncoderDecoderModel"),yer=o(" (Speech Encoder decoder model)"),Ler=l(),Yv=a("li"),eue=a("strong"),xer=o("speech_to_text"),$er=o(" \u2014 "),rz=a("a"),ker=o("Speech2TextForConditionalGeneration"),Ser=o(" (Speech2Text model)"),Rer=l(),Kv=a("p"),Per=o("The model is set in evaluation mode by default using "),oue=a("code"),Ber=o("model.eval()"),Ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),qer=o("model.train()"),Ner=l(),F(Zv.$$.fragment),Uqe=l(),Cd=a("h2"),eF=a("a"),tue=a("span"),F(bL.$$.fragment),jer=l(),aue=a("span"),Der=o("AutoModelForAudioXVector"),Jqe=l(),zo=a("div"),F(vL.$$.fragment),Ger=l(),wd=a("p"),Oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),tz=a("a"),Ver=o("from_pretrained()"),Xer=o(" class method or the "),az=a("a"),zer=o("from_config()"),Wer=o(` class
method.`),Qer=l(),FL=a("p"),Her=o("This class cannot be instantiated directly using "),nue=a("code"),Uer=o("__init__()"),Jer=o(" (throws an error)."),Yer=l(),Tt=a("div"),F(TL.$$.fragment),Ker=l(),sue=a("p"),Zer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eor=l(),Ad=a("p"),oor=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),ror=o("not"),tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),aor=o("from_pretrained()"),nor=o(" to load the model weights."),sor=l(),F(oF.$$.fragment),lor=l(),ho=a("div"),F(ML.$$.fragment),ior=l(),iue=a("p"),dor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cor=l(),za=a("p"),mor=o("The model class to instantiate is selected based on the "),due=a("code"),gor=o("model_type"),hor=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),por=o("pretrained_model_name_or_path"),_or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),uor=o("pretrained_model_name_or_path"),bor=o(":"),vor=l(),Zr=a("ul"),rF=a("li"),mue=a("strong"),For=o("data2vec-audio"),Tor=o(" \u2014 "),sz=a("a"),Mor=o("Data2VecAudioForXVector"),Eor=o(" (Data2VecAudio model)"),Cor=l(),tF=a("li"),gue=a("strong"),wor=o("unispeech-sat"),Aor=o(" \u2014 "),lz=a("a"),yor=o("UniSpeechSatForXVector"),Lor=o(" (UniSpeechSat model)"),xor=l(),aF=a("li"),hue=a("strong"),$or=o("wav2vec2"),kor=o(" \u2014 "),iz=a("a"),Sor=o("Wav2Vec2ForXVector"),Ror=o(" (Wav2Vec2 model)"),Por=l(),nF=a("li"),pue=a("strong"),Bor=o("wav2vec2-conformer"),Ior=o(" \u2014 "),dz=a("a"),qor=o("Wav2Vec2ConformerForXVector"),Nor=o(" (Wav2Vec2-Conformer model)"),jor=l(),sF=a("li"),_ue=a("strong"),Dor=o("wavlm"),Gor=o(" \u2014 "),cz=a("a"),Oor=o("WavLMForXVector"),Vor=o(" (WavLM model)"),Xor=l(),lF=a("p"),zor=o("The model is set in evaluation mode by default using "),uue=a("code"),Wor=o("model.eval()"),Qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),Hor=o("model.train()"),Uor=l(),F(iF.$$.fragment),Yqe=l(),yd=a("h2"),dF=a("a"),vue=a("span"),F(EL.$$.fragment),Jor=l(),Fue=a("span"),Yor=o("AutoModelForMaskedImageModeling"),Kqe=l(),Wo=a("div"),F(CL.$$.fragment),Kor=l(),Ld=a("p"),Zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fz=a("a"),err=o("from_pretrained()"),orr=o(" class method or the "),mz=a("a"),rrr=o("from_config()"),trr=o(` class
method.`),arr=l(),wL=a("p"),nrr=o("This class cannot be instantiated directly using "),Tue=a("code"),srr=o("__init__()"),lrr=o(" (throws an error)."),irr=l(),Mt=a("div"),F(AL.$$.fragment),drr=l(),Mue=a("p"),crr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),frr=l(),xd=a("p"),mrr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),grr=o("not"),hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),prr=o("from_pretrained()"),_rr=o(" to load the model weights."),urr=l(),F(cF.$$.fragment),brr=l(),po=a("div"),F(yL.$$.fragment),vrr=l(),Cue=a("p"),Frr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Trr=l(),Wa=a("p"),Mrr=o("The model class to instantiate is selected based on the "),wue=a("code"),Err=o("model_type"),Crr=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),yrr=o("pretrained_model_name_or_path"),Lrr=o(":"),xrr=l(),$d=a("ul"),fF=a("li"),Lue=a("strong"),$rr=o("deit"),krr=o(" \u2014 "),hz=a("a"),Srr=o("DeiTForMaskedImageModeling"),Rrr=o(" (DeiT model)"),Prr=l(),mF=a("li"),xue=a("strong"),Brr=o("swin"),Irr=o(" \u2014 "),pz=a("a"),qrr=o("SwinForMaskedImageModeling"),Nrr=o(" (Swin model)"),jrr=l(),gF=a("li"),$ue=a("strong"),Drr=o("vit"),Grr=o(" \u2014 "),_z=a("a"),Orr=o("ViTForMaskedImageModeling"),Vrr=o(" (ViT model)"),Xrr=l(),hF=a("p"),zrr=o("The model is set in evaluation mode by default using "),kue=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),Hrr=o("model.train()"),Urr=l(),F(pF.$$.fragment),Zqe=l(),kd=a("h2"),_F=a("a"),Rue=a("span"),F(LL.$$.fragment),Jrr=l(),Pue=a("span"),Yrr=o("AutoModelForObjectDetection"),eNe=l(),Qo=a("div"),F(xL.$$.fragment),Krr=l(),Sd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uz=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),bz=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),$L=a("p"),ntr=o("This class cannot be instantiated directly using "),Bue=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),Et=a("div"),F(kL.$$.fragment),dtr=l(),Iue=a("p"),ctr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ftr=l(),Rd=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),ptr=o("from_pretrained()"),_tr=o(" to load the model weights."),utr=l(),F(uF.$$.fragment),btr=l(),_o=a("div"),F(SL.$$.fragment),vtr=l(),Nue=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ttr=l(),Qa=a("p"),Mtr=o("The model class to instantiate is selected based on the "),jue=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),ytr=o("pretrained_model_name_or_path"),Ltr=o(":"),xtr=l(),RL=a("ul"),bF=a("li"),Oue=a("strong"),$tr=o("detr"),ktr=o(" \u2014 "),Fz=a("a"),Str=o("DetrForObjectDetection"),Rtr=o(" (DETR model)"),Ptr=l(),vF=a("li"),Vue=a("strong"),Btr=o("yolos"),Itr=o(" \u2014 "),Tz=a("a"),qtr=o("YolosForObjectDetection"),Ntr=o(" (YOLOS model)"),jtr=l(),FF=a("p"),Dtr=o("The model is set in evaluation mode by default using "),Xue=a("code"),Gtr=o("model.eval()"),Otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),Vtr=o("model.train()"),Xtr=l(),F(TF.$$.fragment),oNe=l(),Pd=a("h2"),MF=a("a"),Wue=a("span"),F(PL.$$.fragment),ztr=l(),Que=a("span"),Wtr=o("AutoModelForImageSegmentation"),rNe=l(),Ho=a("div"),F(BL.$$.fragment),Qtr=l(),Bd=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Mz=a("a"),Utr=o("from_pretrained()"),Jtr=o(" class method or the "),Ez=a("a"),Ytr=o("from_config()"),Ktr=o(` class
method.`),Ztr=l(),IL=a("p"),ear=o("This class cannot be instantiated directly using "),Hue=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),Ct=a("div"),F(qL.$$.fragment),aar=l(),Uue=a("p"),nar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sar=l(),Id=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),car=o("from_pretrained()"),far=o(" to load the model weights."),mar=l(),F(EF.$$.fragment),gar=l(),uo=a("div"),F(NL.$$.fragment),har=l(),Yue=a("p"),par=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_ar=l(),Ha=a("p"),uar=o("The model class to instantiate is selected based on the "),Kue=a("code"),bar=o("model_type"),Far=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Tar=o("pretrained_model_name_or_path"),Mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),Ear=o("pretrained_model_name_or_path"),Car=o(":"),war=l(),o2e=a("ul"),CF=a("li"),r2e=a("strong"),Aar=o("detr"),yar=o(" \u2014 "),wz=a("a"),Lar=o("DetrForSegmentation"),xar=o(" (DETR model)"),$ar=l(),wF=a("p"),kar=o("The model is set in evaluation mode by default using "),t2e=a("code"),Sar=o("model.eval()"),Rar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),Par=o("model.train()"),Bar=l(),F(AF.$$.fragment),tNe=l(),qd=a("h2"),yF=a("a"),n2e=a("span"),F(jL.$$.fragment),Iar=l(),s2e=a("span"),qar=o("AutoModelForSemanticSegmentation"),aNe=l(),Uo=a("div"),F(DL.$$.fragment),Nar=l(),Nd=a("p"),jar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Az=a("a"),Dar=o("from_pretrained()"),Gar=o(" class method or the "),yz=a("a"),Oar=o("from_config()"),Var=o(` class
method.`),Xar=l(),GL=a("p"),zar=o("This class cannot be instantiated directly using "),l2e=a("code"),War=o("__init__()"),Qar=o(" (throws an error)."),Har=l(),wt=a("div"),F(OL.$$.fragment),Uar=l(),i2e=a("p"),Jar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Yar=l(),jd=a("p"),Kar=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),Zar=o("not"),enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),onr=o("from_pretrained()"),rnr=o(" to load the model weights."),tnr=l(),F(LF.$$.fragment),anr=l(),bo=a("div"),F(VL.$$.fragment),nnr=l(),c2e=a("p"),snr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lnr=l(),Ua=a("p"),inr=o("The model class to instantiate is selected based on the "),f2e=a("code"),dnr=o("model_type"),cnr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),fnr=o("pretrained_model_name_or_path"),mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),gnr=o("pretrained_model_name_or_path"),hnr=o(":"),pnr=l(),Ja=a("ul"),xF=a("li"),h2e=a("strong"),_nr=o("beit"),unr=o(" \u2014 "),xz=a("a"),bnr=o("BeitForSemanticSegmentation"),vnr=o(" (BEiT model)"),Fnr=l(),$F=a("li"),p2e=a("strong"),Tnr=o("data2vec-vision"),Mnr=o(" \u2014 "),$z=a("a"),Enr=o("Data2VecVisionForSemanticSegmentation"),Cnr=o(" (Data2VecVision model)"),wnr=l(),kF=a("li"),_2e=a("strong"),Anr=o("dpt"),ynr=o(" \u2014 "),kz=a("a"),Lnr=o("DPTForSemanticSegmentation"),xnr=o(" (DPT model)"),$nr=l(),SF=a("li"),u2e=a("strong"),knr=o("segformer"),Snr=o(" \u2014 "),Sz=a("a"),Rnr=o("SegformerForSemanticSegmentation"),Pnr=o(" (SegFormer model)"),Bnr=l(),RF=a("p"),Inr=o("The model is set in evaluation mode by default using "),b2e=a("code"),qnr=o("model.eval()"),Nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),jnr=o("model.train()"),Dnr=l(),F(PF.$$.fragment),nNe=l(),Dd=a("h2"),BF=a("a"),F2e=a("span"),F(XL.$$.fragment),Gnr=l(),T2e=a("span"),Onr=o("AutoModelForInstanceSegmentation"),sNe=l(),Jo=a("div"),F(zL.$$.fragment),Vnr=l(),Gd=a("p"),Xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Rz=a("a"),znr=o("from_pretrained()"),Wnr=o(" class method or the "),Pz=a("a"),Qnr=o("from_config()"),Hnr=o(` class
method.`),Unr=l(),WL=a("p"),Jnr=o("This class cannot be instantiated directly using "),M2e=a("code"),Ynr=o("__init__()"),Knr=o(" (throws an error)."),Znr=l(),At=a("div"),F(QL.$$.fragment),esr=l(),E2e=a("p"),osr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rsr=l(),Od=a("p"),tsr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),asr=o("not"),nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),ssr=o("from_pretrained()"),lsr=o(" to load the model weights."),isr=l(),F(IF.$$.fragment),dsr=l(),vo=a("div"),F(HL.$$.fragment),csr=l(),w2e=a("p"),fsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),msr=l(),Ya=a("p"),gsr=o("The model class to instantiate is selected based on the "),A2e=a("code"),hsr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),_sr=o("pretrained_model_name_or_path"),usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),bsr=o("pretrained_model_name_or_path"),vsr=o(":"),Fsr=l(),x2e=a("ul"),qF=a("li"),$2e=a("strong"),Tsr=o("maskformer"),Msr=o(" \u2014 "),Iz=a("a"),Esr=o("MaskFormerForInstanceSegmentation"),Csr=o(" (MaskFormer model)"),wsr=l(),NF=a("p"),Asr=o("The model is set in evaluation mode by default using "),k2e=a("code"),ysr=o("model.eval()"),Lsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),xsr=o("model.train()"),$sr=l(),F(jF.$$.fragment),lNe=l(),Vd=a("h2"),DF=a("a"),R2e=a("span"),F(UL.$$.fragment),ksr=l(),P2e=a("span"),Ssr=o("TFAutoModel"),iNe=l(),Yo=a("div"),F(JL.$$.fragment),Rsr=l(),Xd=a("p"),Psr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qz=a("a"),Bsr=o("from_pretrained()"),Isr=o(" class method or the "),Nz=a("a"),qsr=o("from_config()"),Nsr=o(` class
method.`),jsr=l(),YL=a("p"),Dsr=o("This class cannot be instantiated directly using "),B2e=a("code"),Gsr=o("__init__()"),Osr=o(" (throws an error)."),Vsr=l(),yt=a("div"),F(KL.$$.fragment),Xsr=l(),I2e=a("p"),zsr=o("Instantiates one of the base model classes of the library from a configuration."),Wsr=l(),zd=a("p"),Qsr=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),Hsr=o("not"),Usr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Jsr=o("from_pretrained()"),Ysr=o(" to load the model weights."),Ksr=l(),F(GF.$$.fragment),Zsr=l(),wr=a("div"),F(ZL.$$.fragment),elr=l(),N2e=a("p"),olr=o("Instantiate one of the base model classes of the library from a pretrained model."),rlr=l(),Ka=a("p"),tlr=o("The model class to instantiate is selected based on the "),j2e=a("code"),alr=o("model_type"),nlr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),slr=o("pretrained_model_name_or_path"),llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(":"),clr=l(),N=a("ul"),OF=a("li"),O2e=a("strong"),flr=o("albert"),mlr=o(" \u2014 "),Dz=a("a"),glr=o("TFAlbertModel"),hlr=o(" (ALBERT model)"),plr=l(),VF=a("li"),V2e=a("strong"),_lr=o("bart"),ulr=o(" \u2014 "),Gz=a("a"),blr=o("TFBartModel"),vlr=o(" (BART model)"),Flr=l(),XF=a("li"),X2e=a("strong"),Tlr=o("bert"),Mlr=o(" \u2014 "),Oz=a("a"),Elr=o("TFBertModel"),Clr=o(" (BERT model)"),wlr=l(),zF=a("li"),z2e=a("strong"),Alr=o("blenderbot"),ylr=o(" \u2014 "),Vz=a("a"),Llr=o("TFBlenderbotModel"),xlr=o(" (Blenderbot model)"),$lr=l(),WF=a("li"),W2e=a("strong"),klr=o("blenderbot-small"),Slr=o(" \u2014 "),Xz=a("a"),Rlr=o("TFBlenderbotSmallModel"),Plr=o(" (BlenderbotSmall model)"),Blr=l(),QF=a("li"),Q2e=a("strong"),Ilr=o("camembert"),qlr=o(" \u2014 "),zz=a("a"),Nlr=o("TFCamembertModel"),jlr=o(" (CamemBERT model)"),Dlr=l(),HF=a("li"),H2e=a("strong"),Glr=o("clip"),Olr=o(" \u2014 "),Wz=a("a"),Vlr=o("TFCLIPModel"),Xlr=o(" (CLIP model)"),zlr=l(),UF=a("li"),U2e=a("strong"),Wlr=o("convbert"),Qlr=o(" \u2014 "),Qz=a("a"),Hlr=o("TFConvBertModel"),Ulr=o(" (ConvBERT model)"),Jlr=l(),JF=a("li"),J2e=a("strong"),Ylr=o("convnext"),Klr=o(" \u2014 "),Hz=a("a"),Zlr=o("TFConvNextModel"),eir=o(" (ConvNext model)"),oir=l(),YF=a("li"),Y2e=a("strong"),rir=o("ctrl"),tir=o(" \u2014 "),Uz=a("a"),air=o("TFCTRLModel"),nir=o(" (CTRL model)"),sir=l(),KF=a("li"),K2e=a("strong"),lir=o("data2vec-vision"),iir=o(" \u2014 "),Jz=a("a"),dir=o("TFData2VecVisionModel"),cir=o(" (Data2VecVision model)"),fir=l(),ZF=a("li"),Z2e=a("strong"),mir=o("deberta"),gir=o(" \u2014 "),Yz=a("a"),hir=o("TFDebertaModel"),pir=o(" (DeBERTa model)"),_ir=l(),eT=a("li"),e1e=a("strong"),uir=o("deberta-v2"),bir=o(" \u2014 "),Kz=a("a"),vir=o("TFDebertaV2Model"),Fir=o(" (DeBERTa-v2 model)"),Tir=l(),oT=a("li"),o1e=a("strong"),Mir=o("distilbert"),Eir=o(" \u2014 "),Zz=a("a"),Cir=o("TFDistilBertModel"),wir=o(" (DistilBERT model)"),Air=l(),rT=a("li"),r1e=a("strong"),yir=o("dpr"),Lir=o(" \u2014 "),eW=a("a"),xir=o("TFDPRQuestionEncoder"),$ir=o(" (DPR model)"),kir=l(),tT=a("li"),t1e=a("strong"),Sir=o("electra"),Rir=o(" \u2014 "),oW=a("a"),Pir=o("TFElectraModel"),Bir=o(" (ELECTRA model)"),Iir=l(),aT=a("li"),a1e=a("strong"),qir=o("flaubert"),Nir=o(" \u2014 "),rW=a("a"),jir=o("TFFlaubertModel"),Dir=o(" (FlauBERT model)"),Gir=l(),Ns=a("li"),n1e=a("strong"),Oir=o("funnel"),Vir=o(" \u2014 "),tW=a("a"),Xir=o("TFFunnelModel"),zir=o(" or "),aW=a("a"),Wir=o("TFFunnelBaseModel"),Qir=o(" (Funnel Transformer model)"),Hir=l(),nT=a("li"),s1e=a("strong"),Uir=o("gpt2"),Jir=o(" \u2014 "),nW=a("a"),Yir=o("TFGPT2Model"),Kir=o(" (OpenAI GPT-2 model)"),Zir=l(),sT=a("li"),l1e=a("strong"),edr=o("gptj"),odr=o(" \u2014 "),sW=a("a"),rdr=o("TFGPTJModel"),tdr=o(" (GPT-J model)"),adr=l(),lT=a("li"),i1e=a("strong"),ndr=o("hubert"),sdr=o(" \u2014 "),lW=a("a"),ldr=o("TFHubertModel"),idr=o(" (Hubert model)"),ddr=l(),iT=a("li"),d1e=a("strong"),cdr=o("layoutlm"),fdr=o(" \u2014 "),iW=a("a"),mdr=o("TFLayoutLMModel"),gdr=o(" (LayoutLM model)"),hdr=l(),dT=a("li"),c1e=a("strong"),pdr=o("led"),_dr=o(" \u2014 "),dW=a("a"),udr=o("TFLEDModel"),bdr=o(" (LED model)"),vdr=l(),cT=a("li"),f1e=a("strong"),Fdr=o("longformer"),Tdr=o(" \u2014 "),cW=a("a"),Mdr=o("TFLongformerModel"),Edr=o(" (Longformer model)"),Cdr=l(),fT=a("li"),m1e=a("strong"),wdr=o("lxmert"),Adr=o(" \u2014 "),fW=a("a"),ydr=o("TFLxmertModel"),Ldr=o(" (LXMERT model)"),xdr=l(),mT=a("li"),g1e=a("strong"),$dr=o("marian"),kdr=o(" \u2014 "),mW=a("a"),Sdr=o("TFMarianModel"),Rdr=o(" (Marian model)"),Pdr=l(),gT=a("li"),h1e=a("strong"),Bdr=o("mbart"),Idr=o(" \u2014 "),gW=a("a"),qdr=o("TFMBartModel"),Ndr=o(" (mBART model)"),jdr=l(),hT=a("li"),p1e=a("strong"),Ddr=o("mobilebert"),Gdr=o(" \u2014 "),hW=a("a"),Odr=o("TFMobileBertModel"),Vdr=o(" (MobileBERT model)"),Xdr=l(),pT=a("li"),_1e=a("strong"),zdr=o("mpnet"),Wdr=o(" \u2014 "),pW=a("a"),Qdr=o("TFMPNetModel"),Hdr=o(" (MPNet model)"),Udr=l(),_T=a("li"),u1e=a("strong"),Jdr=o("mt5"),Ydr=o(" \u2014 "),_W=a("a"),Kdr=o("TFMT5Model"),Zdr=o(" (mT5 model)"),ecr=l(),uT=a("li"),b1e=a("strong"),ocr=o("openai-gpt"),rcr=o(" \u2014 "),uW=a("a"),tcr=o("TFOpenAIGPTModel"),acr=o(" (OpenAI GPT model)"),ncr=l(),bT=a("li"),v1e=a("strong"),scr=o("pegasus"),lcr=o(" \u2014 "),bW=a("a"),icr=o("TFPegasusModel"),dcr=o(" (Pegasus model)"),ccr=l(),vT=a("li"),F1e=a("strong"),fcr=o("rembert"),mcr=o(" \u2014 "),vW=a("a"),gcr=o("TFRemBertModel"),hcr=o(" (RemBERT model)"),pcr=l(),FT=a("li"),T1e=a("strong"),_cr=o("roberta"),ucr=o(" \u2014 "),FW=a("a"),bcr=o("TFRobertaModel"),vcr=o(" (RoBERTa model)"),Fcr=l(),TT=a("li"),M1e=a("strong"),Tcr=o("roformer"),Mcr=o(" \u2014 "),TW=a("a"),Ecr=o("TFRoFormerModel"),Ccr=o(" (RoFormer model)"),wcr=l(),MT=a("li"),E1e=a("strong"),Acr=o("speech_to_text"),ycr=o(" \u2014 "),MW=a("a"),Lcr=o("TFSpeech2TextModel"),xcr=o(" (Speech2Text model)"),$cr=l(),ET=a("li"),C1e=a("strong"),kcr=o("swin"),Scr=o(" \u2014 "),EW=a("a"),Rcr=o("TFSwinModel"),Pcr=o(" (Swin model)"),Bcr=l(),CT=a("li"),w1e=a("strong"),Icr=o("t5"),qcr=o(" \u2014 "),CW=a("a"),Ncr=o("TFT5Model"),jcr=o(" (T5 model)"),Dcr=l(),wT=a("li"),A1e=a("strong"),Gcr=o("tapas"),Ocr=o(" \u2014 "),wW=a("a"),Vcr=o("TFTapasModel"),Xcr=o(" (TAPAS model)"),zcr=l(),AT=a("li"),y1e=a("strong"),Wcr=o("transfo-xl"),Qcr=o(" \u2014 "),AW=a("a"),Hcr=o("TFTransfoXLModel"),Ucr=o(" (Transformer-XL model)"),Jcr=l(),yT=a("li"),L1e=a("strong"),Ycr=o("vit"),Kcr=o(" \u2014 "),yW=a("a"),Zcr=o("TFViTModel"),efr=o(" (ViT model)"),ofr=l(),LT=a("li"),x1e=a("strong"),rfr=o("vit_mae"),tfr=o(" \u2014 "),LW=a("a"),afr=o("TFViTMAEModel"),nfr=o(" (ViTMAE model)"),sfr=l(),xT=a("li"),$1e=a("strong"),lfr=o("wav2vec2"),ifr=o(" \u2014 "),xW=a("a"),dfr=o("TFWav2Vec2Model"),cfr=o(" (Wav2Vec2 model)"),ffr=l(),$T=a("li"),k1e=a("strong"),mfr=o("xlm"),gfr=o(" \u2014 "),$W=a("a"),hfr=o("TFXLMModel"),pfr=o(" (XLM model)"),_fr=l(),kT=a("li"),S1e=a("strong"),ufr=o("xlm-roberta"),bfr=o(" \u2014 "),kW=a("a"),vfr=o("TFXLMRobertaModel"),Ffr=o(" (XLM-RoBERTa model)"),Tfr=l(),ST=a("li"),R1e=a("strong"),Mfr=o("xlnet"),Efr=o(" \u2014 "),SW=a("a"),Cfr=o("TFXLNetModel"),wfr=o(" (XLNet model)"),Afr=l(),F(RT.$$.fragment),dNe=l(),Wd=a("h2"),PT=a("a"),P1e=a("span"),F(e8.$$.fragment),yfr=l(),B1e=a("span"),Lfr=o("TFAutoModelForPreTraining"),cNe=l(),Ko=a("div"),F(o8.$$.fragment),xfr=l(),Qd=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RW=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),PW=a("a"),Rfr=o("from_config()"),Pfr=o(` class
method.`),Bfr=l(),r8=a("p"),Ifr=o("This class cannot be instantiated directly using "),I1e=a("code"),qfr=o("__init__()"),Nfr=o(" (throws an error)."),jfr=l(),Lt=a("div"),F(t8.$$.fragment),Dfr=l(),q1e=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ofr=l(),Hd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),Wfr=o("from_pretrained()"),Qfr=o(" to load the model weights."),Hfr=l(),F(BT.$$.fragment),Ufr=l(),Ar=a("div"),F(a8.$$.fragment),Jfr=l(),j1e=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kfr=l(),Za=a("p"),Zfr=o("The model class to instantiate is selected based on the "),D1e=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),se=a("ul"),IT=a("li"),V1e=a("strong"),lmr=o("albert"),imr=o(" \u2014 "),IW=a("a"),dmr=o("TFAlbertForPreTraining"),cmr=o(" (ALBERT model)"),fmr=l(),qT=a("li"),X1e=a("strong"),mmr=o("bart"),gmr=o(" \u2014 "),qW=a("a"),hmr=o("TFBartForConditionalGeneration"),pmr=o(" (BART model)"),_mr=l(),NT=a("li"),z1e=a("strong"),umr=o("bert"),bmr=o(" \u2014 "),NW=a("a"),vmr=o("TFBertForPreTraining"),Fmr=o(" (BERT model)"),Tmr=l(),jT=a("li"),W1e=a("strong"),Mmr=o("camembert"),Emr=o(" \u2014 "),jW=a("a"),Cmr=o("TFCamembertForMaskedLM"),wmr=o(" (CamemBERT model)"),Amr=l(),DT=a("li"),Q1e=a("strong"),ymr=o("ctrl"),Lmr=o(" \u2014 "),DW=a("a"),xmr=o("TFCTRLLMHeadModel"),$mr=o(" (CTRL model)"),kmr=l(),GT=a("li"),H1e=a("strong"),Smr=o("distilbert"),Rmr=o(" \u2014 "),GW=a("a"),Pmr=o("TFDistilBertForMaskedLM"),Bmr=o(" (DistilBERT model)"),Imr=l(),OT=a("li"),U1e=a("strong"),qmr=o("electra"),Nmr=o(" \u2014 "),OW=a("a"),jmr=o("TFElectraForPreTraining"),Dmr=o(" (ELECTRA model)"),Gmr=l(),VT=a("li"),J1e=a("strong"),Omr=o("flaubert"),Vmr=o(" \u2014 "),VW=a("a"),Xmr=o("TFFlaubertWithLMHeadModel"),zmr=o(" (FlauBERT model)"),Wmr=l(),XT=a("li"),Y1e=a("strong"),Qmr=o("funnel"),Hmr=o(" \u2014 "),XW=a("a"),Umr=o("TFFunnelForPreTraining"),Jmr=o(" (Funnel Transformer model)"),Ymr=l(),zT=a("li"),K1e=a("strong"),Kmr=o("gpt2"),Zmr=o(" \u2014 "),zW=a("a"),egr=o("TFGPT2LMHeadModel"),ogr=o(" (OpenAI GPT-2 model)"),rgr=l(),WT=a("li"),Z1e=a("strong"),tgr=o("layoutlm"),agr=o(" \u2014 "),WW=a("a"),ngr=o("TFLayoutLMForMaskedLM"),sgr=o(" (LayoutLM model)"),lgr=l(),QT=a("li"),ebe=a("strong"),igr=o("lxmert"),dgr=o(" \u2014 "),QW=a("a"),cgr=o("TFLxmertForPreTraining"),fgr=o(" (LXMERT model)"),mgr=l(),HT=a("li"),obe=a("strong"),ggr=o("mobilebert"),hgr=o(" \u2014 "),HW=a("a"),pgr=o("TFMobileBertForPreTraining"),_gr=o(" (MobileBERT model)"),ugr=l(),UT=a("li"),rbe=a("strong"),bgr=o("mpnet"),vgr=o(" \u2014 "),UW=a("a"),Fgr=o("TFMPNetForMaskedLM"),Tgr=o(" (MPNet model)"),Mgr=l(),JT=a("li"),tbe=a("strong"),Egr=o("openai-gpt"),Cgr=o(" \u2014 "),JW=a("a"),wgr=o("TFOpenAIGPTLMHeadModel"),Agr=o(" (OpenAI GPT model)"),ygr=l(),YT=a("li"),abe=a("strong"),Lgr=o("roberta"),xgr=o(" \u2014 "),YW=a("a"),$gr=o("TFRobertaForMaskedLM"),kgr=o(" (RoBERTa model)"),Sgr=l(),KT=a("li"),nbe=a("strong"),Rgr=o("t5"),Pgr=o(" \u2014 "),KW=a("a"),Bgr=o("TFT5ForConditionalGeneration"),Igr=o(" (T5 model)"),qgr=l(),ZT=a("li"),sbe=a("strong"),Ngr=o("tapas"),jgr=o(" \u2014 "),ZW=a("a"),Dgr=o("TFTapasForMaskedLM"),Ggr=o(" (TAPAS model)"),Ogr=l(),e7=a("li"),lbe=a("strong"),Vgr=o("transfo-xl"),Xgr=o(" \u2014 "),eQ=a("a"),zgr=o("TFTransfoXLLMHeadModel"),Wgr=o(" (Transformer-XL model)"),Qgr=l(),o7=a("li"),ibe=a("strong"),Hgr=o("vit_mae"),Ugr=o(" \u2014 "),oQ=a("a"),Jgr=o("TFViTMAEForPreTraining"),Ygr=o(" (ViTMAE model)"),Kgr=l(),r7=a("li"),dbe=a("strong"),Zgr=o("xlm"),ehr=o(" \u2014 "),rQ=a("a"),ohr=o("TFXLMWithLMHeadModel"),rhr=o(" (XLM model)"),thr=l(),t7=a("li"),cbe=a("strong"),ahr=o("xlm-roberta"),nhr=o(" \u2014 "),tQ=a("a"),shr=o("TFXLMRobertaForMaskedLM"),lhr=o(" (XLM-RoBERTa model)"),ihr=l(),a7=a("li"),fbe=a("strong"),dhr=o("xlnet"),chr=o(" \u2014 "),aQ=a("a"),fhr=o("TFXLNetLMHeadModel"),mhr=o(" (XLNet model)"),ghr=l(),F(n7.$$.fragment),fNe=l(),Ud=a("h2"),s7=a("a"),mbe=a("span"),F(n8.$$.fragment),hhr=l(),gbe=a("span"),phr=o("TFAutoModelForCausalLM"),mNe=l(),Zo=a("div"),F(s8.$$.fragment),_hr=l(),Jd=a("p"),uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nQ=a("a"),bhr=o("from_pretrained()"),vhr=o(" class method or the "),sQ=a("a"),Fhr=o("from_config()"),Thr=o(` class
method.`),Mhr=l(),l8=a("p"),Ehr=o("This class cannot be instantiated directly using "),hbe=a("code"),Chr=o("__init__()"),whr=o(" (throws an error)."),Ahr=l(),xt=a("div"),F(i8.$$.fragment),yhr=l(),pbe=a("p"),Lhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xhr=l(),Yd=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),_be=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),Rhr=o("from_pretrained()"),Phr=o(" to load the model weights."),Bhr=l(),F(l7.$$.fragment),Ihr=l(),yr=a("div"),F(d8.$$.fragment),qhr=l(),ube=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jhr=l(),en=a("p"),Dhr=o("The model class to instantiate is selected based on the "),bbe=a("code"),Ghr=o("model_type"),Ohr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),zhr=o("pretrained_model_name_or_path"),Whr=o(":"),Qhr=l(),Me=a("ul"),i7=a("li"),Tbe=a("strong"),Hhr=o("bert"),Uhr=o(" \u2014 "),iQ=a("a"),Jhr=o("TFBertLMHeadModel"),Yhr=o(" (BERT model)"),Khr=l(),d7=a("li"),Mbe=a("strong"),Zhr=o("camembert"),epr=o(" \u2014 "),dQ=a("a"),opr=o("TFCamembertForCausalLM"),rpr=o(" (CamemBERT model)"),tpr=l(),c7=a("li"),Ebe=a("strong"),apr=o("ctrl"),npr=o(" \u2014 "),cQ=a("a"),spr=o("TFCTRLLMHeadModel"),lpr=o(" (CTRL model)"),ipr=l(),f7=a("li"),Cbe=a("strong"),dpr=o("gpt2"),cpr=o(" \u2014 "),fQ=a("a"),fpr=o("TFGPT2LMHeadModel"),mpr=o(" (OpenAI GPT-2 model)"),gpr=l(),m7=a("li"),wbe=a("strong"),hpr=o("gptj"),ppr=o(" \u2014 "),mQ=a("a"),_pr=o("TFGPTJForCausalLM"),upr=o(" (GPT-J model)"),bpr=l(),g7=a("li"),Abe=a("strong"),vpr=o("openai-gpt"),Fpr=o(" \u2014 "),gQ=a("a"),Tpr=o("TFOpenAIGPTLMHeadModel"),Mpr=o(" (OpenAI GPT model)"),Epr=l(),h7=a("li"),ybe=a("strong"),Cpr=o("rembert"),wpr=o(" \u2014 "),hQ=a("a"),Apr=o("TFRemBertForCausalLM"),ypr=o(" (RemBERT model)"),Lpr=l(),p7=a("li"),Lbe=a("strong"),xpr=o("roberta"),$pr=o(" \u2014 "),pQ=a("a"),kpr=o("TFRobertaForCausalLM"),Spr=o(" (RoBERTa model)"),Rpr=l(),_7=a("li"),xbe=a("strong"),Ppr=o("roformer"),Bpr=o(" \u2014 "),_Q=a("a"),Ipr=o("TFRoFormerForCausalLM"),qpr=o(" (RoFormer model)"),Npr=l(),u7=a("li"),$be=a("strong"),jpr=o("transfo-xl"),Dpr=o(" \u2014 "),uQ=a("a"),Gpr=o("TFTransfoXLLMHeadModel"),Opr=o(" (Transformer-XL model)"),Vpr=l(),b7=a("li"),kbe=a("strong"),Xpr=o("xlm"),zpr=o(" \u2014 "),bQ=a("a"),Wpr=o("TFXLMWithLMHeadModel"),Qpr=o(" (XLM model)"),Hpr=l(),v7=a("li"),Sbe=a("strong"),Upr=o("xlnet"),Jpr=o(" \u2014 "),vQ=a("a"),Ypr=o("TFXLNetLMHeadModel"),Kpr=o(" (XLNet model)"),Zpr=l(),F(F7.$$.fragment),gNe=l(),Kd=a("h2"),T7=a("a"),Rbe=a("span"),F(c8.$$.fragment),e_r=l(),Pbe=a("span"),o_r=o("TFAutoModelForImageClassification"),hNe=l(),er=a("div"),F(f8.$$.fragment),r_r=l(),Zd=a("p"),t_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=a("a"),a_r=o("from_pretrained()"),n_r=o(" class method or the "),TQ=a("a"),s_r=o("from_config()"),l_r=o(` class
method.`),i_r=l(),m8=a("p"),d_r=o("This class cannot be instantiated directly using "),Bbe=a("code"),c_r=o("__init__()"),f_r=o(" (throws an error)."),m_r=l(),$t=a("div"),F(g8.$$.fragment),g_r=l(),Ibe=a("p"),h_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p_r=l(),ec=a("p"),__r=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),u_r=o("not"),b_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),v_r=o("from_pretrained()"),F_r=o(" to load the model weights."),T_r=l(),F(M7.$$.fragment),M_r=l(),Lr=a("div"),F(h8.$$.fragment),E_r=l(),Nbe=a("p"),C_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w_r=l(),on=a("p"),A_r=o("The model class to instantiate is selected based on the "),jbe=a("code"),y_r=o("model_type"),L_r=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),k_r=o("pretrained_model_name_or_path"),S_r=o(":"),R_r=l(),rn=a("ul"),E7=a("li"),Obe=a("strong"),P_r=o("convnext"),B_r=o(" \u2014 "),EQ=a("a"),I_r=o("TFConvNextForImageClassification"),q_r=o(" (ConvNext model)"),N_r=l(),C7=a("li"),Vbe=a("strong"),j_r=o("data2vec-vision"),D_r=o(" \u2014 "),CQ=a("a"),G_r=o("TFData2VecVisionForImageClassification"),O_r=o(" (Data2VecVision model)"),V_r=l(),w7=a("li"),Xbe=a("strong"),X_r=o("swin"),z_r=o(" \u2014 "),wQ=a("a"),W_r=o("TFSwinForImageClassification"),Q_r=o(" (Swin model)"),H_r=l(),A7=a("li"),zbe=a("strong"),U_r=o("vit"),J_r=o(" \u2014 "),AQ=a("a"),Y_r=o("TFViTForImageClassification"),K_r=o(" (ViT model)"),Z_r=l(),F(y7.$$.fragment),pNe=l(),oc=a("h2"),L7=a("a"),Wbe=a("span"),F(p8.$$.fragment),eur=l(),Qbe=a("span"),our=o("TFAutoModelForMaskedLM"),_Ne=l(),or=a("div"),F(_8.$$.fragment),rur=l(),rc=a("p"),tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yQ=a("a"),aur=o("from_pretrained()"),nur=o(" class method or the "),LQ=a("a"),sur=o("from_config()"),lur=o(` class
method.`),iur=l(),u8=a("p"),dur=o("This class cannot be instantiated directly using "),Hbe=a("code"),cur=o("__init__()"),fur=o(" (throws an error)."),mur=l(),kt=a("div"),F(b8.$$.fragment),gur=l(),Ube=a("p"),hur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pur=l(),tc=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),uur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),vur=o("from_pretrained()"),Fur=o(" to load the model weights."),Tur=l(),F(x7.$$.fragment),Mur=l(),xr=a("div"),F(v8.$$.fragment),Eur=l(),Ybe=a("p"),Cur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wur=l(),tn=a("p"),Aur=o("The model class to instantiate is selected based on the "),Kbe=a("code"),yur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(":"),Rur=l(),ie=a("ul"),$7=a("li"),o4e=a("strong"),Pur=o("albert"),Bur=o(" \u2014 "),$Q=a("a"),Iur=o("TFAlbertForMaskedLM"),qur=o(" (ALBERT model)"),Nur=l(),k7=a("li"),r4e=a("strong"),jur=o("bert"),Dur=o(" \u2014 "),kQ=a("a"),Gur=o("TFBertForMaskedLM"),Our=o(" (BERT model)"),Vur=l(),S7=a("li"),t4e=a("strong"),Xur=o("camembert"),zur=o(" \u2014 "),SQ=a("a"),Wur=o("TFCamembertForMaskedLM"),Qur=o(" (CamemBERT model)"),Hur=l(),R7=a("li"),a4e=a("strong"),Uur=o("convbert"),Jur=o(" \u2014 "),RQ=a("a"),Yur=o("TFConvBertForMaskedLM"),Kur=o(" (ConvBERT model)"),Zur=l(),P7=a("li"),n4e=a("strong"),e2r=o("deberta"),o2r=o(" \u2014 "),PQ=a("a"),r2r=o("TFDebertaForMaskedLM"),t2r=o(" (DeBERTa model)"),a2r=l(),B7=a("li"),s4e=a("strong"),n2r=o("deberta-v2"),s2r=o(" \u2014 "),BQ=a("a"),l2r=o("TFDebertaV2ForMaskedLM"),i2r=o(" (DeBERTa-v2 model)"),d2r=l(),I7=a("li"),l4e=a("strong"),c2r=o("distilbert"),f2r=o(" \u2014 "),IQ=a("a"),m2r=o("TFDistilBertForMaskedLM"),g2r=o(" (DistilBERT model)"),h2r=l(),q7=a("li"),i4e=a("strong"),p2r=o("electra"),_2r=o(" \u2014 "),qQ=a("a"),u2r=o("TFElectraForMaskedLM"),b2r=o(" (ELECTRA model)"),v2r=l(),N7=a("li"),d4e=a("strong"),F2r=o("flaubert"),T2r=o(" \u2014 "),NQ=a("a"),M2r=o("TFFlaubertWithLMHeadModel"),E2r=o(" (FlauBERT model)"),C2r=l(),j7=a("li"),c4e=a("strong"),w2r=o("funnel"),A2r=o(" \u2014 "),jQ=a("a"),y2r=o("TFFunnelForMaskedLM"),L2r=o(" (Funnel Transformer model)"),x2r=l(),D7=a("li"),f4e=a("strong"),$2r=o("layoutlm"),k2r=o(" \u2014 "),DQ=a("a"),S2r=o("TFLayoutLMForMaskedLM"),R2r=o(" (LayoutLM model)"),P2r=l(),G7=a("li"),m4e=a("strong"),B2r=o("longformer"),I2r=o(" \u2014 "),GQ=a("a"),q2r=o("TFLongformerForMaskedLM"),N2r=o(" (Longformer model)"),j2r=l(),O7=a("li"),g4e=a("strong"),D2r=o("mobilebert"),G2r=o(" \u2014 "),OQ=a("a"),O2r=o("TFMobileBertForMaskedLM"),V2r=o(" (MobileBERT model)"),X2r=l(),V7=a("li"),h4e=a("strong"),z2r=o("mpnet"),W2r=o(" \u2014 "),VQ=a("a"),Q2r=o("TFMPNetForMaskedLM"),H2r=o(" (MPNet model)"),U2r=l(),X7=a("li"),p4e=a("strong"),J2r=o("rembert"),Y2r=o(" \u2014 "),XQ=a("a"),K2r=o("TFRemBertForMaskedLM"),Z2r=o(" (RemBERT model)"),e1r=l(),z7=a("li"),_4e=a("strong"),o1r=o("roberta"),r1r=o(" \u2014 "),zQ=a("a"),t1r=o("TFRobertaForMaskedLM"),a1r=o(" (RoBERTa model)"),n1r=l(),W7=a("li"),u4e=a("strong"),s1r=o("roformer"),l1r=o(" \u2014 "),WQ=a("a"),i1r=o("TFRoFormerForMaskedLM"),d1r=o(" (RoFormer model)"),c1r=l(),Q7=a("li"),b4e=a("strong"),f1r=o("tapas"),m1r=o(" \u2014 "),QQ=a("a"),g1r=o("TFTapasForMaskedLM"),h1r=o(" (TAPAS model)"),p1r=l(),H7=a("li"),v4e=a("strong"),_1r=o("xlm"),u1r=o(" \u2014 "),HQ=a("a"),b1r=o("TFXLMWithLMHeadModel"),v1r=o(" (XLM model)"),F1r=l(),U7=a("li"),F4e=a("strong"),T1r=o("xlm-roberta"),M1r=o(" \u2014 "),UQ=a("a"),E1r=o("TFXLMRobertaForMaskedLM"),C1r=o(" (XLM-RoBERTa model)"),w1r=l(),F(J7.$$.fragment),uNe=l(),ac=a("h2"),Y7=a("a"),T4e=a("span"),F(F8.$$.fragment),A1r=l(),M4e=a("span"),y1r=o("TFAutoModelForSeq2SeqLM"),bNe=l(),rr=a("div"),F(T8.$$.fragment),L1r=l(),nc=a("p"),x1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JQ=a("a"),$1r=o("from_pretrained()"),k1r=o(" class method or the "),YQ=a("a"),S1r=o("from_config()"),R1r=o(` class
method.`),P1r=l(),M8=a("p"),B1r=o("This class cannot be instantiated directly using "),E4e=a("code"),I1r=o("__init__()"),q1r=o(" (throws an error)."),N1r=l(),St=a("div"),F(E8.$$.fragment),j1r=l(),C4e=a("p"),D1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G1r=l(),sc=a("p"),O1r=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),V1r=o("not"),X1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),z1r=o("from_pretrained()"),W1r=o(" to load the model weights."),Q1r=l(),F(K7.$$.fragment),H1r=l(),$r=a("div"),F(C8.$$.fragment),U1r=l(),A4e=a("p"),J1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y1r=l(),an=a("p"),K1r=o("The model class to instantiate is selected based on the "),y4e=a("code"),Z1r=o("model_type"),ebr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),obr=o("pretrained_model_name_or_path"),rbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(":"),nbr=l(),ye=a("ul"),Z7=a("li"),$4e=a("strong"),sbr=o("bart"),lbr=o(" \u2014 "),ZQ=a("a"),ibr=o("TFBartForConditionalGeneration"),dbr=o(" (BART model)"),cbr=l(),eM=a("li"),k4e=a("strong"),fbr=o("blenderbot"),mbr=o(" \u2014 "),eH=a("a"),gbr=o("TFBlenderbotForConditionalGeneration"),hbr=o(" (Blenderbot model)"),pbr=l(),oM=a("li"),S4e=a("strong"),_br=o("blenderbot-small"),ubr=o(" \u2014 "),oH=a("a"),bbr=o("TFBlenderbotSmallForConditionalGeneration"),vbr=o(" (BlenderbotSmall model)"),Fbr=l(),rM=a("li"),R4e=a("strong"),Tbr=o("encoder-decoder"),Mbr=o(" \u2014 "),rH=a("a"),Ebr=o("TFEncoderDecoderModel"),Cbr=o(" (Encoder decoder model)"),wbr=l(),tM=a("li"),P4e=a("strong"),Abr=o("led"),ybr=o(" \u2014 "),tH=a("a"),Lbr=o("TFLEDForConditionalGeneration"),xbr=o(" (LED model)"),$br=l(),aM=a("li"),B4e=a("strong"),kbr=o("marian"),Sbr=o(" \u2014 "),aH=a("a"),Rbr=o("TFMarianMTModel"),Pbr=o(" (Marian model)"),Bbr=l(),nM=a("li"),I4e=a("strong"),Ibr=o("mbart"),qbr=o(" \u2014 "),nH=a("a"),Nbr=o("TFMBartForConditionalGeneration"),jbr=o(" (mBART model)"),Dbr=l(),sM=a("li"),q4e=a("strong"),Gbr=o("mt5"),Obr=o(" \u2014 "),sH=a("a"),Vbr=o("TFMT5ForConditionalGeneration"),Xbr=o(" (mT5 model)"),zbr=l(),lM=a("li"),N4e=a("strong"),Wbr=o("pegasus"),Qbr=o(" \u2014 "),lH=a("a"),Hbr=o("TFPegasusForConditionalGeneration"),Ubr=o(" (Pegasus model)"),Jbr=l(),iM=a("li"),j4e=a("strong"),Ybr=o("t5"),Kbr=o(" \u2014 "),iH=a("a"),Zbr=o("TFT5ForConditionalGeneration"),e4r=o(" (T5 model)"),o4r=l(),F(dM.$$.fragment),vNe=l(),lc=a("h2"),cM=a("a"),D4e=a("span"),F(w8.$$.fragment),r4r=l(),G4e=a("span"),t4r=o("TFAutoModelForSequenceClassification"),FNe=l(),tr=a("div"),F(A8.$$.fragment),a4r=l(),ic=a("p"),n4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dH=a("a"),s4r=o("from_pretrained()"),l4r=o(" class method or the "),cH=a("a"),i4r=o("from_config()"),d4r=o(` class
method.`),c4r=l(),y8=a("p"),f4r=o("This class cannot be instantiated directly using "),O4e=a("code"),m4r=o("__init__()"),g4r=o(" (throws an error)."),h4r=l(),Rt=a("div"),F(L8.$$.fragment),p4r=l(),V4e=a("p"),_4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u4r=l(),dc=a("p"),b4r=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),v4r=o("not"),F4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),T4r=o("from_pretrained()"),M4r=o(" to load the model weights."),E4r=l(),F(fM.$$.fragment),C4r=l(),kr=a("div"),F(x8.$$.fragment),w4r=l(),z4e=a("p"),A4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y4r=l(),nn=a("p"),L4r=o("The model class to instantiate is selected based on the "),W4e=a("code"),x4r=o("model_type"),$4r=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),k4r=o("pretrained_model_name_or_path"),S4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),R4r=o("pretrained_model_name_or_path"),P4r=o(":"),B4r=l(),ee=a("ul"),mM=a("li"),U4e=a("strong"),I4r=o("albert"),q4r=o(" \u2014 "),mH=a("a"),N4r=o("TFAlbertForSequenceClassification"),j4r=o(" (ALBERT model)"),D4r=l(),gM=a("li"),J4e=a("strong"),G4r=o("bert"),O4r=o(" \u2014 "),gH=a("a"),V4r=o("TFBertForSequenceClassification"),X4r=o(" (BERT model)"),z4r=l(),hM=a("li"),Y4e=a("strong"),W4r=o("camembert"),Q4r=o(" \u2014 "),hH=a("a"),H4r=o("TFCamembertForSequenceClassification"),U4r=o(" (CamemBERT model)"),J4r=l(),pM=a("li"),K4e=a("strong"),Y4r=o("convbert"),K4r=o(" \u2014 "),pH=a("a"),Z4r=o("TFConvBertForSequenceClassification"),e5r=o(" (ConvBERT model)"),o5r=l(),_M=a("li"),Z4e=a("strong"),r5r=o("ctrl"),t5r=o(" \u2014 "),_H=a("a"),a5r=o("TFCTRLForSequenceClassification"),n5r=o(" (CTRL model)"),s5r=l(),uM=a("li"),e5e=a("strong"),l5r=o("deberta"),i5r=o(" \u2014 "),uH=a("a"),d5r=o("TFDebertaForSequenceClassification"),c5r=o(" (DeBERTa model)"),f5r=l(),bM=a("li"),o5e=a("strong"),m5r=o("deberta-v2"),g5r=o(" \u2014 "),bH=a("a"),h5r=o("TFDebertaV2ForSequenceClassification"),p5r=o(" (DeBERTa-v2 model)"),_5r=l(),vM=a("li"),r5e=a("strong"),u5r=o("distilbert"),b5r=o(" \u2014 "),vH=a("a"),v5r=o("TFDistilBertForSequenceClassification"),F5r=o(" (DistilBERT model)"),T5r=l(),FM=a("li"),t5e=a("strong"),M5r=o("electra"),E5r=o(" \u2014 "),FH=a("a"),C5r=o("TFElectraForSequenceClassification"),w5r=o(" (ELECTRA model)"),A5r=l(),TM=a("li"),a5e=a("strong"),y5r=o("flaubert"),L5r=o(" \u2014 "),TH=a("a"),x5r=o("TFFlaubertForSequenceClassification"),$5r=o(" (FlauBERT model)"),k5r=l(),MM=a("li"),n5e=a("strong"),S5r=o("funnel"),R5r=o(" \u2014 "),MH=a("a"),P5r=o("TFFunnelForSequenceClassification"),B5r=o(" (Funnel Transformer model)"),I5r=l(),EM=a("li"),s5e=a("strong"),q5r=o("gpt2"),N5r=o(" \u2014 "),EH=a("a"),j5r=o("TFGPT2ForSequenceClassification"),D5r=o(" (OpenAI GPT-2 model)"),G5r=l(),CM=a("li"),l5e=a("strong"),O5r=o("gptj"),V5r=o(" \u2014 "),CH=a("a"),X5r=o("TFGPTJForSequenceClassification"),z5r=o(" (GPT-J model)"),W5r=l(),wM=a("li"),i5e=a("strong"),Q5r=o("layoutlm"),H5r=o(" \u2014 "),wH=a("a"),U5r=o("TFLayoutLMForSequenceClassification"),J5r=o(" (LayoutLM model)"),Y5r=l(),AM=a("li"),d5e=a("strong"),K5r=o("longformer"),Z5r=o(" \u2014 "),AH=a("a"),evr=o("TFLongformerForSequenceClassification"),ovr=o(" (Longformer model)"),rvr=l(),yM=a("li"),c5e=a("strong"),tvr=o("mobilebert"),avr=o(" \u2014 "),yH=a("a"),nvr=o("TFMobileBertForSequenceClassification"),svr=o(" (MobileBERT model)"),lvr=l(),LM=a("li"),f5e=a("strong"),ivr=o("mpnet"),dvr=o(" \u2014 "),LH=a("a"),cvr=o("TFMPNetForSequenceClassification"),fvr=o(" (MPNet model)"),mvr=l(),xM=a("li"),m5e=a("strong"),gvr=o("openai-gpt"),hvr=o(" \u2014 "),xH=a("a"),pvr=o("TFOpenAIGPTForSequenceClassification"),_vr=o(" (OpenAI GPT model)"),uvr=l(),$M=a("li"),g5e=a("strong"),bvr=o("rembert"),vvr=o(" \u2014 "),$H=a("a"),Fvr=o("TFRemBertForSequenceClassification"),Tvr=o(" (RemBERT model)"),Mvr=l(),kM=a("li"),h5e=a("strong"),Evr=o("roberta"),Cvr=o(" \u2014 "),kH=a("a"),wvr=o("TFRobertaForSequenceClassification"),Avr=o(" (RoBERTa model)"),yvr=l(),SM=a("li"),p5e=a("strong"),Lvr=o("roformer"),xvr=o(" \u2014 "),SH=a("a"),$vr=o("TFRoFormerForSequenceClassification"),kvr=o(" (RoFormer model)"),Svr=l(),RM=a("li"),_5e=a("strong"),Rvr=o("tapas"),Pvr=o(" \u2014 "),RH=a("a"),Bvr=o("TFTapasForSequenceClassification"),Ivr=o(" (TAPAS model)"),qvr=l(),PM=a("li"),u5e=a("strong"),Nvr=o("transfo-xl"),jvr=o(" \u2014 "),PH=a("a"),Dvr=o("TFTransfoXLForSequenceClassification"),Gvr=o(" (Transformer-XL model)"),Ovr=l(),BM=a("li"),b5e=a("strong"),Vvr=o("xlm"),Xvr=o(" \u2014 "),BH=a("a"),zvr=o("TFXLMForSequenceClassification"),Wvr=o(" (XLM model)"),Qvr=l(),IM=a("li"),v5e=a("strong"),Hvr=o("xlm-roberta"),Uvr=o(" \u2014 "),IH=a("a"),Jvr=o("TFXLMRobertaForSequenceClassification"),Yvr=o(" (XLM-RoBERTa model)"),Kvr=l(),qM=a("li"),F5e=a("strong"),Zvr=o("xlnet"),eFr=o(" \u2014 "),qH=a("a"),oFr=o("TFXLNetForSequenceClassification"),rFr=o(" (XLNet model)"),tFr=l(),F(NM.$$.fragment),TNe=l(),cc=a("h2"),jM=a("a"),T5e=a("span"),F($8.$$.fragment),aFr=l(),M5e=a("span"),nFr=o("TFAutoModelForMultipleChoice"),MNe=l(),ar=a("div"),F(k8.$$.fragment),sFr=l(),fc=a("p"),lFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=a("a"),iFr=o("from_pretrained()"),dFr=o(" class method or the "),jH=a("a"),cFr=o("from_config()"),fFr=o(` class
method.`),mFr=l(),S8=a("p"),gFr=o("This class cannot be instantiated directly using "),E5e=a("code"),hFr=o("__init__()"),pFr=o(" (throws an error)."),_Fr=l(),Pt=a("div"),F(R8.$$.fragment),uFr=l(),C5e=a("p"),bFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vFr=l(),mc=a("p"),FFr=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),TFr=o("not"),MFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),EFr=o("from_pretrained()"),CFr=o(" to load the model weights."),wFr=l(),F(DM.$$.fragment),AFr=l(),Sr=a("div"),F(P8.$$.fragment),yFr=l(),A5e=a("p"),LFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xFr=l(),sn=a("p"),$Fr=o("The model class to instantiate is selected based on the "),y5e=a("code"),kFr=o("model_type"),SFr=o(` property of the config object (either
passed as an argument or loaded from `),L5e=a("code"),RFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),BFr=o("pretrained_model_name_or_path"),IFr=o(":"),qFr=l(),he=a("ul"),GM=a("li"),$5e=a("strong"),NFr=o("albert"),jFr=o(" \u2014 "),GH=a("a"),DFr=o("TFAlbertForMultipleChoice"),GFr=o(" (ALBERT model)"),OFr=l(),OM=a("li"),k5e=a("strong"),VFr=o("bert"),XFr=o(" \u2014 "),OH=a("a"),zFr=o("TFBertForMultipleChoice"),WFr=o(" (BERT model)"),QFr=l(),VM=a("li"),S5e=a("strong"),HFr=o("camembert"),UFr=o(" \u2014 "),VH=a("a"),JFr=o("TFCamembertForMultipleChoice"),YFr=o(" (CamemBERT model)"),KFr=l(),XM=a("li"),R5e=a("strong"),ZFr=o("convbert"),eTr=o(" \u2014 "),XH=a("a"),oTr=o("TFConvBertForMultipleChoice"),rTr=o(" (ConvBERT model)"),tTr=l(),zM=a("li"),P5e=a("strong"),aTr=o("distilbert"),nTr=o(" \u2014 "),zH=a("a"),sTr=o("TFDistilBertForMultipleChoice"),lTr=o(" (DistilBERT model)"),iTr=l(),WM=a("li"),B5e=a("strong"),dTr=o("electra"),cTr=o(" \u2014 "),WH=a("a"),fTr=o("TFElectraForMultipleChoice"),mTr=o(" (ELECTRA model)"),gTr=l(),QM=a("li"),I5e=a("strong"),hTr=o("flaubert"),pTr=o(" \u2014 "),QH=a("a"),_Tr=o("TFFlaubertForMultipleChoice"),uTr=o(" (FlauBERT model)"),bTr=l(),HM=a("li"),q5e=a("strong"),vTr=o("funnel"),FTr=o(" \u2014 "),HH=a("a"),TTr=o("TFFunnelForMultipleChoice"),MTr=o(" (Funnel Transformer model)"),ETr=l(),UM=a("li"),N5e=a("strong"),CTr=o("longformer"),wTr=o(" \u2014 "),UH=a("a"),ATr=o("TFLongformerForMultipleChoice"),yTr=o(" (Longformer model)"),LTr=l(),JM=a("li"),j5e=a("strong"),xTr=o("mobilebert"),$Tr=o(" \u2014 "),JH=a("a"),kTr=o("TFMobileBertForMultipleChoice"),STr=o(" (MobileBERT model)"),RTr=l(),YM=a("li"),D5e=a("strong"),PTr=o("mpnet"),BTr=o(" \u2014 "),YH=a("a"),ITr=o("TFMPNetForMultipleChoice"),qTr=o(" (MPNet model)"),NTr=l(),KM=a("li"),G5e=a("strong"),jTr=o("rembert"),DTr=o(" \u2014 "),KH=a("a"),GTr=o("TFRemBertForMultipleChoice"),OTr=o(" (RemBERT model)"),VTr=l(),ZM=a("li"),O5e=a("strong"),XTr=o("roberta"),zTr=o(" \u2014 "),ZH=a("a"),WTr=o("TFRobertaForMultipleChoice"),QTr=o(" (RoBERTa model)"),HTr=l(),eE=a("li"),V5e=a("strong"),UTr=o("roformer"),JTr=o(" \u2014 "),eU=a("a"),YTr=o("TFRoFormerForMultipleChoice"),KTr=o(" (RoFormer model)"),ZTr=l(),oE=a("li"),X5e=a("strong"),e7r=o("xlm"),o7r=o(" \u2014 "),oU=a("a"),r7r=o("TFXLMForMultipleChoice"),t7r=o(" (XLM model)"),a7r=l(),rE=a("li"),z5e=a("strong"),n7r=o("xlm-roberta"),s7r=o(" \u2014 "),rU=a("a"),l7r=o("TFXLMRobertaForMultipleChoice"),i7r=o(" (XLM-RoBERTa model)"),d7r=l(),tE=a("li"),W5e=a("strong"),c7r=o("xlnet"),f7r=o(" \u2014 "),tU=a("a"),m7r=o("TFXLNetForMultipleChoice"),g7r=o(" (XLNet model)"),h7r=l(),F(aE.$$.fragment),ENe=l(),gc=a("h2"),nE=a("a"),Q5e=a("span"),F(B8.$$.fragment),p7r=l(),H5e=a("span"),_7r=o("TFAutoModelForNextSentencePrediction"),CNe=l(),nr=a("div"),F(I8.$$.fragment),u7r=l(),hc=a("p"),b7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=a("a"),v7r=o("from_pretrained()"),F7r=o(" class method or the "),nU=a("a"),T7r=o("from_config()"),M7r=o(` class
method.`),E7r=l(),q8=a("p"),C7r=o("This class cannot be instantiated directly using "),U5e=a("code"),w7r=o("__init__()"),A7r=o(" (throws an error)."),y7r=l(),Bt=a("div"),F(N8.$$.fragment),L7r=l(),J5e=a("p"),x7r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$7r=l(),pc=a("p"),k7r=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),S7r=o("not"),R7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),P7r=o("from_pretrained()"),B7r=o(" to load the model weights."),I7r=l(),F(sE.$$.fragment),q7r=l(),Rr=a("div"),F(j8.$$.fragment),N7r=l(),K5e=a("p"),j7r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D7r=l(),ln=a("p"),G7r=o("The model class to instantiate is selected based on the "),Z5e=a("code"),O7r=o("model_type"),V7r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),X7r=o("pretrained_model_name_or_path"),z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),W7r=o("pretrained_model_name_or_path"),Q7r=o(":"),H7r=l(),D8=a("ul"),lE=a("li"),rve=a("strong"),U7r=o("bert"),J7r=o(" \u2014 "),lU=a("a"),Y7r=o("TFBertForNextSentencePrediction"),K7r=o(" (BERT model)"),Z7r=l(),iE=a("li"),tve=a("strong"),eMr=o("mobilebert"),oMr=o(" \u2014 "),iU=a("a"),rMr=o("TFMobileBertForNextSentencePrediction"),tMr=o(" (MobileBERT model)"),aMr=l(),F(dE.$$.fragment),wNe=l(),_c=a("h2"),cE=a("a"),ave=a("span"),F(G8.$$.fragment),nMr=l(),nve=a("span"),sMr=o("TFAutoModelForTableQuestionAnswering"),ANe=l(),sr=a("div"),F(O8.$$.fragment),lMr=l(),uc=a("p"),iMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dU=a("a"),dMr=o("from_pretrained()"),cMr=o(" class method or the "),cU=a("a"),fMr=o("from_config()"),mMr=o(` class
method.`),gMr=l(),V8=a("p"),hMr=o("This class cannot be instantiated directly using "),sve=a("code"),pMr=o("__init__()"),_Mr=o(" (throws an error)."),uMr=l(),It=a("div"),F(X8.$$.fragment),bMr=l(),lve=a("p"),vMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FMr=l(),bc=a("p"),TMr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),MMr=o("not"),EMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),CMr=o("from_pretrained()"),wMr=o(" to load the model weights."),AMr=l(),F(fE.$$.fragment),yMr=l(),Pr=a("div"),F(z8.$$.fragment),LMr=l(),dve=a("p"),xMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Mr=l(),dn=a("p"),kMr=o("The model class to instantiate is selected based on the "),cve=a("code"),SMr=o("model_type"),RMr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),PMr=o("pretrained_model_name_or_path"),BMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),IMr=o("pretrained_model_name_or_path"),qMr=o(":"),NMr=l(),gve=a("ul"),mE=a("li"),hve=a("strong"),jMr=o("tapas"),DMr=o(" \u2014 "),mU=a("a"),GMr=o("TFTapasForQuestionAnswering"),OMr=o(" (TAPAS model)"),VMr=l(),F(gE.$$.fragment),yNe=l(),vc=a("h2"),hE=a("a"),pve=a("span"),F(W8.$$.fragment),XMr=l(),_ve=a("span"),zMr=o("TFAutoModelForTokenClassification"),LNe=l(),lr=a("div"),F(Q8.$$.fragment),WMr=l(),Fc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gU=a("a"),HMr=o("from_pretrained()"),UMr=o(" class method or the "),hU=a("a"),JMr=o("from_config()"),YMr=o(` class
method.`),KMr=l(),H8=a("p"),ZMr=o("This class cannot be instantiated directly using "),uve=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),qt=a("div"),F(U8.$$.fragment),tEr=l(),bve=a("p"),aEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nEr=l(),Tc=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),dEr=o("from_pretrained()"),cEr=o(" to load the model weights."),fEr=l(),F(pE.$$.fragment),mEr=l(),Br=a("div"),F(J8.$$.fragment),gEr=l(),Fve=a("p"),hEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pEr=l(),cn=a("p"),_Er=o("The model class to instantiate is selected based on the "),Tve=a("code"),uEr=o("model_type"),bEr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(":"),EEr=l(),de=a("ul"),_E=a("li"),Cve=a("strong"),CEr=o("albert"),wEr=o(" \u2014 "),_U=a("a"),AEr=o("TFAlbertForTokenClassification"),yEr=o(" (ALBERT model)"),LEr=l(),uE=a("li"),wve=a("strong"),xEr=o("bert"),$Er=o(" \u2014 "),uU=a("a"),kEr=o("TFBertForTokenClassification"),SEr=o(" (BERT model)"),REr=l(),bE=a("li"),Ave=a("strong"),PEr=o("camembert"),BEr=o(" \u2014 "),bU=a("a"),IEr=o("TFCamembertForTokenClassification"),qEr=o(" (CamemBERT model)"),NEr=l(),vE=a("li"),yve=a("strong"),jEr=o("convbert"),DEr=o(" \u2014 "),vU=a("a"),GEr=o("TFConvBertForTokenClassification"),OEr=o(" (ConvBERT model)"),VEr=l(),FE=a("li"),Lve=a("strong"),XEr=o("deberta"),zEr=o(" \u2014 "),FU=a("a"),WEr=o("TFDebertaForTokenClassification"),QEr=o(" (DeBERTa model)"),HEr=l(),TE=a("li"),xve=a("strong"),UEr=o("deberta-v2"),JEr=o(" \u2014 "),TU=a("a"),YEr=o("TFDebertaV2ForTokenClassification"),KEr=o(" (DeBERTa-v2 model)"),ZEr=l(),ME=a("li"),$ve=a("strong"),eCr=o("distilbert"),oCr=o(" \u2014 "),MU=a("a"),rCr=o("TFDistilBertForTokenClassification"),tCr=o(" (DistilBERT model)"),aCr=l(),EE=a("li"),kve=a("strong"),nCr=o("electra"),sCr=o(" \u2014 "),EU=a("a"),lCr=o("TFElectraForTokenClassification"),iCr=o(" (ELECTRA model)"),dCr=l(),CE=a("li"),Sve=a("strong"),cCr=o("flaubert"),fCr=o(" \u2014 "),CU=a("a"),mCr=o("TFFlaubertForTokenClassification"),gCr=o(" (FlauBERT model)"),hCr=l(),wE=a("li"),Rve=a("strong"),pCr=o("funnel"),_Cr=o(" \u2014 "),wU=a("a"),uCr=o("TFFunnelForTokenClassification"),bCr=o(" (Funnel Transformer model)"),vCr=l(),AE=a("li"),Pve=a("strong"),FCr=o("layoutlm"),TCr=o(" \u2014 "),AU=a("a"),MCr=o("TFLayoutLMForTokenClassification"),ECr=o(" (LayoutLM model)"),CCr=l(),yE=a("li"),Bve=a("strong"),wCr=o("longformer"),ACr=o(" \u2014 "),yU=a("a"),yCr=o("TFLongformerForTokenClassification"),LCr=o(" (Longformer model)"),xCr=l(),LE=a("li"),Ive=a("strong"),$Cr=o("mobilebert"),kCr=o(" \u2014 "),LU=a("a"),SCr=o("TFMobileBertForTokenClassification"),RCr=o(" (MobileBERT model)"),PCr=l(),xE=a("li"),qve=a("strong"),BCr=o("mpnet"),ICr=o(" \u2014 "),xU=a("a"),qCr=o("TFMPNetForTokenClassification"),NCr=o(" (MPNet model)"),jCr=l(),$E=a("li"),Nve=a("strong"),DCr=o("rembert"),GCr=o(" \u2014 "),$U=a("a"),OCr=o("TFRemBertForTokenClassification"),VCr=o(" (RemBERT model)"),XCr=l(),kE=a("li"),jve=a("strong"),zCr=o("roberta"),WCr=o(" \u2014 "),kU=a("a"),QCr=o("TFRobertaForTokenClassification"),HCr=o(" (RoBERTa model)"),UCr=l(),SE=a("li"),Dve=a("strong"),JCr=o("roformer"),YCr=o(" \u2014 "),SU=a("a"),KCr=o("TFRoFormerForTokenClassification"),ZCr=o(" (RoFormer model)"),e3r=l(),RE=a("li"),Gve=a("strong"),o3r=o("xlm"),r3r=o(" \u2014 "),RU=a("a"),t3r=o("TFXLMForTokenClassification"),a3r=o(" (XLM model)"),n3r=l(),PE=a("li"),Ove=a("strong"),s3r=o("xlm-roberta"),l3r=o(" \u2014 "),PU=a("a"),i3r=o("TFXLMRobertaForTokenClassification"),d3r=o(" (XLM-RoBERTa model)"),c3r=l(),BE=a("li"),Vve=a("strong"),f3r=o("xlnet"),m3r=o(" \u2014 "),BU=a("a"),g3r=o("TFXLNetForTokenClassification"),h3r=o(" (XLNet model)"),p3r=l(),F(IE.$$.fragment),xNe=l(),Mc=a("h2"),qE=a("a"),Xve=a("span"),F(Y8.$$.fragment),_3r=l(),zve=a("span"),u3r=o("TFAutoModelForQuestionAnswering"),$Ne=l(),ir=a("div"),F(K8.$$.fragment),b3r=l(),Ec=a("p"),v3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IU=a("a"),F3r=o("from_pretrained()"),T3r=o(" class method or the "),qU=a("a"),M3r=o("from_config()"),E3r=o(` class
method.`),C3r=l(),Z8=a("p"),w3r=o("This class cannot be instantiated directly using "),Wve=a("code"),A3r=o("__init__()"),y3r=o(" (throws an error)."),L3r=l(),Nt=a("div"),F(e9.$$.fragment),x3r=l(),Qve=a("p"),$3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k3r=l(),Cc=a("p"),S3r=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),R3r=o("not"),P3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),B3r=o("from_pretrained()"),I3r=o(" to load the model weights."),q3r=l(),F(NE.$$.fragment),N3r=l(),Ir=a("div"),F(o9.$$.fragment),j3r=l(),Uve=a("p"),D3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G3r=l(),fn=a("p"),O3r=o("The model class to instantiate is selected based on the "),Jve=a("code"),V3r=o("model_type"),X3r=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),z3r=o("pretrained_model_name_or_path"),W3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),Q3r=o("pretrained_model_name_or_path"),H3r=o(":"),U3r=l(),ce=a("ul"),jE=a("li"),Zve=a("strong"),J3r=o("albert"),Y3r=o(" \u2014 "),jU=a("a"),K3r=o("TFAlbertForQuestionAnswering"),Z3r=o(" (ALBERT model)"),ewr=l(),DE=a("li"),eFe=a("strong"),owr=o("bert"),rwr=o(" \u2014 "),DU=a("a"),twr=o("TFBertForQuestionAnswering"),awr=o(" (BERT model)"),nwr=l(),GE=a("li"),oFe=a("strong"),swr=o("camembert"),lwr=o(" \u2014 "),GU=a("a"),iwr=o("TFCamembertForQuestionAnswering"),dwr=o(" (CamemBERT model)"),cwr=l(),OE=a("li"),rFe=a("strong"),fwr=o("convbert"),mwr=o(" \u2014 "),OU=a("a"),gwr=o("TFConvBertForQuestionAnswering"),hwr=o(" (ConvBERT model)"),pwr=l(),VE=a("li"),tFe=a("strong"),_wr=o("deberta"),uwr=o(" \u2014 "),VU=a("a"),bwr=o("TFDebertaForQuestionAnswering"),vwr=o(" (DeBERTa model)"),Fwr=l(),XE=a("li"),aFe=a("strong"),Twr=o("deberta-v2"),Mwr=o(" \u2014 "),XU=a("a"),Ewr=o("TFDebertaV2ForQuestionAnswering"),Cwr=o(" (DeBERTa-v2 model)"),wwr=l(),zE=a("li"),nFe=a("strong"),Awr=o("distilbert"),ywr=o(" \u2014 "),zU=a("a"),Lwr=o("TFDistilBertForQuestionAnswering"),xwr=o(" (DistilBERT model)"),$wr=l(),WE=a("li"),sFe=a("strong"),kwr=o("electra"),Swr=o(" \u2014 "),WU=a("a"),Rwr=o("TFElectraForQuestionAnswering"),Pwr=o(" (ELECTRA model)"),Bwr=l(),QE=a("li"),lFe=a("strong"),Iwr=o("flaubert"),qwr=o(" \u2014 "),QU=a("a"),Nwr=o("TFFlaubertForQuestionAnsweringSimple"),jwr=o(" (FlauBERT model)"),Dwr=l(),HE=a("li"),iFe=a("strong"),Gwr=o("funnel"),Owr=o(" \u2014 "),HU=a("a"),Vwr=o("TFFunnelForQuestionAnswering"),Xwr=o(" (Funnel Transformer model)"),zwr=l(),UE=a("li"),dFe=a("strong"),Wwr=o("gptj"),Qwr=o(" \u2014 "),UU=a("a"),Hwr=o("TFGPTJForQuestionAnswering"),Uwr=o(" (GPT-J model)"),Jwr=l(),JE=a("li"),cFe=a("strong"),Ywr=o("longformer"),Kwr=o(" \u2014 "),JU=a("a"),Zwr=o("TFLongformerForQuestionAnswering"),e0r=o(" (Longformer model)"),o0r=l(),YE=a("li"),fFe=a("strong"),r0r=o("mobilebert"),t0r=o(" \u2014 "),YU=a("a"),a0r=o("TFMobileBertForQuestionAnswering"),n0r=o(" (MobileBERT model)"),s0r=l(),KE=a("li"),mFe=a("strong"),l0r=o("mpnet"),i0r=o(" \u2014 "),KU=a("a"),d0r=o("TFMPNetForQuestionAnswering"),c0r=o(" (MPNet model)"),f0r=l(),ZE=a("li"),gFe=a("strong"),m0r=o("rembert"),g0r=o(" \u2014 "),ZU=a("a"),h0r=o("TFRemBertForQuestionAnswering"),p0r=o(" (RemBERT model)"),_0r=l(),eC=a("li"),hFe=a("strong"),u0r=o("roberta"),b0r=o(" \u2014 "),eJ=a("a"),v0r=o("TFRobertaForQuestionAnswering"),F0r=o(" (RoBERTa model)"),T0r=l(),oC=a("li"),pFe=a("strong"),M0r=o("roformer"),E0r=o(" \u2014 "),oJ=a("a"),C0r=o("TFRoFormerForQuestionAnswering"),w0r=o(" (RoFormer model)"),A0r=l(),rC=a("li"),_Fe=a("strong"),y0r=o("xlm"),L0r=o(" \u2014 "),rJ=a("a"),x0r=o("TFXLMForQuestionAnsweringSimple"),$0r=o(" (XLM model)"),k0r=l(),tC=a("li"),uFe=a("strong"),S0r=o("xlm-roberta"),R0r=o(" \u2014 "),tJ=a("a"),P0r=o("TFXLMRobertaForQuestionAnswering"),B0r=o(" (XLM-RoBERTa model)"),I0r=l(),aC=a("li"),bFe=a("strong"),q0r=o("xlnet"),N0r=o(" \u2014 "),aJ=a("a"),j0r=o("TFXLNetForQuestionAnsweringSimple"),D0r=o(" (XLNet model)"),G0r=l(),F(nC.$$.fragment),kNe=l(),wc=a("h2"),sC=a("a"),vFe=a("span"),F(r9.$$.fragment),O0r=l(),FFe=a("span"),V0r=o("TFAutoModelForVision2Seq"),SNe=l(),dr=a("div"),F(t9.$$.fragment),X0r=l(),Ac=a("p"),z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nJ=a("a"),W0r=o("from_pretrained()"),Q0r=o(" class method or the "),sJ=a("a"),H0r=o("from_config()"),U0r=o(` class
method.`),J0r=l(),a9=a("p"),Y0r=o("This class cannot be instantiated directly using "),TFe=a("code"),K0r=o("__init__()"),Z0r=o(" (throws an error)."),eAr=l(),jt=a("div"),F(n9.$$.fragment),oAr=l(),MFe=a("p"),rAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tAr=l(),yc=a("p"),aAr=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),nAr=o("not"),sAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),lAr=o("from_pretrained()"),iAr=o(" to load the model weights."),dAr=l(),F(lC.$$.fragment),cAr=l(),qr=a("div"),F(s9.$$.fragment),fAr=l(),CFe=a("p"),mAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gAr=l(),mn=a("p"),hAr=o("The model class to instantiate is selected based on the "),wFe=a("code"),pAr=o("model_type"),_Ar=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),uAr=o("pretrained_model_name_or_path"),bAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),vAr=o("pretrained_model_name_or_path"),FAr=o(":"),TAr=l(),LFe=a("ul"),iC=a("li"),xFe=a("strong"),MAr=o("vision-encoder-decoder"),EAr=o(" \u2014 "),iJ=a("a"),CAr=o("TFVisionEncoderDecoderModel"),wAr=o(" (Vision Encoder decoder model)"),AAr=l(),F(dC.$$.fragment),RNe=l(),Lc=a("h2"),cC=a("a"),$Fe=a("span"),F(l9.$$.fragment),yAr=l(),kFe=a("span"),LAr=o("TFAutoModelForSpeechSeq2Seq"),PNe=l(),cr=a("div"),F(i9.$$.fragment),xAr=l(),xc=a("p"),$Ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dJ=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),cJ=a("a"),RAr=o("from_config()"),PAr=o(` class
method.`),BAr=l(),d9=a("p"),IAr=o("This class cannot be instantiated directly using "),SFe=a("code"),qAr=o("__init__()"),NAr=o(" (throws an error)."),jAr=l(),Dt=a("div"),F(c9.$$.fragment),DAr=l(),RFe=a("p"),GAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OAr=l(),$c=a("p"),VAr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),XAr=o("not"),zAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),WAr=o("from_pretrained()"),QAr=o(" to load the model weights."),HAr=l(),F(fC.$$.fragment),UAr=l(),Nr=a("div"),F(f9.$$.fragment),JAr=l(),BFe=a("p"),YAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KAr=l(),gn=a("p"),ZAr=o("The model class to instantiate is selected based on the "),IFe=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),jFe=a("ul"),mC=a("li"),DFe=a("strong"),l6r=o("speech_to_text"),i6r=o(" \u2014 "),mJ=a("a"),d6r=o("TFSpeech2TextForConditionalGeneration"),c6r=o(" (Speech2Text model)"),f6r=l(),F(gC.$$.fragment),BNe=l(),kc=a("h2"),hC=a("a"),GFe=a("span"),F(m9.$$.fragment),m6r=l(),OFe=a("span"),g6r=o("FlaxAutoModel"),INe=l(),fr=a("div"),F(g9.$$.fragment),h6r=l(),Sc=a("p"),p6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gJ=a("a"),_6r=o("from_pretrained()"),u6r=o(" class method or the "),hJ=a("a"),b6r=o("from_config()"),v6r=o(` class
method.`),F6r=l(),h9=a("p"),T6r=o("This class cannot be instantiated directly using "),VFe=a("code"),M6r=o("__init__()"),E6r=o(" (throws an error)."),C6r=l(),Gt=a("div"),F(p9.$$.fragment),w6r=l(),XFe=a("p"),A6r=o("Instantiates one of the base model classes of the library from a configuration."),y6r=l(),Rc=a("p"),L6r=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),x6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),k6r=o("from_pretrained()"),S6r=o(" to load the model weights."),R6r=l(),F(pC.$$.fragment),P6r=l(),jr=a("div"),F(_9.$$.fragment),B6r=l(),WFe=a("p"),I6r=o("Instantiate one of the base model classes of the library from a pretrained model."),q6r=l(),hn=a("p"),N6r=o("The model class to instantiate is selected based on the "),QFe=a("code"),j6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),V6r=o("pretrained_model_name_or_path"),X6r=o(":"),z6r=l(),te=a("ul"),_C=a("li"),JFe=a("strong"),W6r=o("albert"),Q6r=o(" \u2014 "),_J=a("a"),H6r=o("FlaxAlbertModel"),U6r=o(" (ALBERT model)"),J6r=l(),uC=a("li"),YFe=a("strong"),Y6r=o("bart"),K6r=o(" \u2014 "),uJ=a("a"),Z6r=o("FlaxBartModel"),eyr=o(" (BART model)"),oyr=l(),bC=a("li"),KFe=a("strong"),ryr=o("beit"),tyr=o(" \u2014 "),bJ=a("a"),ayr=o("FlaxBeitModel"),nyr=o(" (BEiT model)"),syr=l(),vC=a("li"),ZFe=a("strong"),lyr=o("bert"),iyr=o(" \u2014 "),vJ=a("a"),dyr=o("FlaxBertModel"),cyr=o(" (BERT model)"),fyr=l(),FC=a("li"),eTe=a("strong"),myr=o("big_bird"),gyr=o(" \u2014 "),FJ=a("a"),hyr=o("FlaxBigBirdModel"),pyr=o(" (BigBird model)"),_yr=l(),TC=a("li"),oTe=a("strong"),uyr=o("blenderbot"),byr=o(" \u2014 "),TJ=a("a"),vyr=o("FlaxBlenderbotModel"),Fyr=o(" (Blenderbot model)"),Tyr=l(),MC=a("li"),rTe=a("strong"),Myr=o("blenderbot-small"),Eyr=o(" \u2014 "),MJ=a("a"),Cyr=o("FlaxBlenderbotSmallModel"),wyr=o(" (BlenderbotSmall model)"),Ayr=l(),EC=a("li"),tTe=a("strong"),yyr=o("clip"),Lyr=o(" \u2014 "),EJ=a("a"),xyr=o("FlaxCLIPModel"),$yr=o(" (CLIP model)"),kyr=l(),CC=a("li"),aTe=a("strong"),Syr=o("distilbert"),Ryr=o(" \u2014 "),CJ=a("a"),Pyr=o("FlaxDistilBertModel"),Byr=o(" (DistilBERT model)"),Iyr=l(),wC=a("li"),nTe=a("strong"),qyr=o("electra"),Nyr=o(" \u2014 "),wJ=a("a"),jyr=o("FlaxElectraModel"),Dyr=o(" (ELECTRA model)"),Gyr=l(),AC=a("li"),sTe=a("strong"),Oyr=o("gpt2"),Vyr=o(" \u2014 "),AJ=a("a"),Xyr=o("FlaxGPT2Model"),zyr=o(" (OpenAI GPT-2 model)"),Wyr=l(),yC=a("li"),lTe=a("strong"),Qyr=o("gpt_neo"),Hyr=o(" \u2014 "),yJ=a("a"),Uyr=o("FlaxGPTNeoModel"),Jyr=o(" (GPT Neo model)"),Yyr=l(),LC=a("li"),iTe=a("strong"),Kyr=o("gptj"),Zyr=o(" \u2014 "),LJ=a("a"),eLr=o("FlaxGPTJModel"),oLr=o(" (GPT-J model)"),rLr=l(),xC=a("li"),dTe=a("strong"),tLr=o("marian"),aLr=o(" \u2014 "),xJ=a("a"),nLr=o("FlaxMarianModel"),sLr=o(" (Marian model)"),lLr=l(),$C=a("li"),cTe=a("strong"),iLr=o("mbart"),dLr=o(" \u2014 "),$J=a("a"),cLr=o("FlaxMBartModel"),fLr=o(" (mBART model)"),mLr=l(),kC=a("li"),fTe=a("strong"),gLr=o("mt5"),hLr=o(" \u2014 "),kJ=a("a"),pLr=o("FlaxMT5Model"),_Lr=o(" (mT5 model)"),uLr=l(),SC=a("li"),mTe=a("strong"),bLr=o("pegasus"),vLr=o(" \u2014 "),SJ=a("a"),FLr=o("FlaxPegasusModel"),TLr=o(" (Pegasus model)"),MLr=l(),RC=a("li"),gTe=a("strong"),ELr=o("roberta"),CLr=o(" \u2014 "),RJ=a("a"),wLr=o("FlaxRobertaModel"),ALr=o(" (RoBERTa model)"),yLr=l(),PC=a("li"),hTe=a("strong"),LLr=o("roformer"),xLr=o(" \u2014 "),PJ=a("a"),$Lr=o("FlaxRoFormerModel"),kLr=o(" (RoFormer model)"),SLr=l(),BC=a("li"),pTe=a("strong"),RLr=o("t5"),PLr=o(" \u2014 "),BJ=a("a"),BLr=o("FlaxT5Model"),ILr=o(" (T5 model)"),qLr=l(),IC=a("li"),_Te=a("strong"),NLr=o("vision-text-dual-encoder"),jLr=o(" \u2014 "),IJ=a("a"),DLr=o("FlaxVisionTextDualEncoderModel"),GLr=o(" (VisionTextDualEncoder model)"),OLr=l(),qC=a("li"),uTe=a("strong"),VLr=o("vit"),XLr=o(" \u2014 "),qJ=a("a"),zLr=o("FlaxViTModel"),WLr=o(" (ViT model)"),QLr=l(),NC=a("li"),bTe=a("strong"),HLr=o("wav2vec2"),ULr=o(" \u2014 "),NJ=a("a"),JLr=o("FlaxWav2Vec2Model"),YLr=o(" (Wav2Vec2 model)"),KLr=l(),jC=a("li"),vTe=a("strong"),ZLr=o("xglm"),e8r=o(" \u2014 "),jJ=a("a"),o8r=o("FlaxXGLMModel"),r8r=o(" (XGLM model)"),t8r=l(),DC=a("li"),FTe=a("strong"),a8r=o("xlm-roberta"),n8r=o(" \u2014 "),DJ=a("a"),s8r=o("FlaxXLMRobertaModel"),l8r=o(" (XLM-RoBERTa model)"),i8r=l(),F(GC.$$.fragment),qNe=l(),Pc=a("h2"),OC=a("a"),TTe=a("span"),F(u9.$$.fragment),d8r=l(),MTe=a("span"),c8r=o("FlaxAutoModelForCausalLM"),NNe=l(),mr=a("div"),F(b9.$$.fragment),f8r=l(),Bc=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=a("a"),g8r=o("from_pretrained()"),h8r=o(" class method or the "),OJ=a("a"),p8r=o("from_config()"),_8r=o(` class
method.`),u8r=l(),v9=a("p"),b8r=o("This class cannot be instantiated directly using "),ETe=a("code"),v8r=o("__init__()"),F8r=o(" (throws an error)."),T8r=l(),Ot=a("div"),F(F9.$$.fragment),M8r=l(),CTe=a("p"),E8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C8r=l(),Ic=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),A8r=o("not"),y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),L8r=o("from_pretrained()"),x8r=o(" to load the model weights."),$8r=l(),F(VC.$$.fragment),k8r=l(),Dr=a("div"),F(T9.$$.fragment),S8r=l(),ATe=a("p"),R8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P8r=l(),pn=a("p"),B8r=o("The model class to instantiate is selected based on the "),yTe=a("code"),I8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),N8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),Re=a("ul"),XC=a("li"),$Te=a("strong"),V8r=o("bart"),X8r=o(" \u2014 "),XJ=a("a"),z8r=o("FlaxBartForCausalLM"),W8r=o(" (BART model)"),Q8r=l(),zC=a("li"),kTe=a("strong"),H8r=o("bert"),U8r=o(" \u2014 "),zJ=a("a"),J8r=o("FlaxBertForCausalLM"),Y8r=o(" (BERT model)"),K8r=l(),WC=a("li"),STe=a("strong"),Z8r=o("big_bird"),e9r=o(" \u2014 "),WJ=a("a"),o9r=o("FlaxBigBirdForCausalLM"),r9r=o(" (BigBird model)"),t9r=l(),QC=a("li"),RTe=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),QJ=a("a"),s9r=o("FlaxElectraForCausalLM"),l9r=o(" (ELECTRA model)"),i9r=l(),HC=a("li"),PTe=a("strong"),d9r=o("gpt2"),c9r=o(" \u2014 "),HJ=a("a"),f9r=o("FlaxGPT2LMHeadModel"),m9r=o(" (OpenAI GPT-2 model)"),g9r=l(),UC=a("li"),BTe=a("strong"),h9r=o("gpt_neo"),p9r=o(" \u2014 "),UJ=a("a"),_9r=o("FlaxGPTNeoForCausalLM"),u9r=o(" (GPT Neo model)"),b9r=l(),JC=a("li"),ITe=a("strong"),v9r=o("gptj"),F9r=o(" \u2014 "),JJ=a("a"),T9r=o("FlaxGPTJForCausalLM"),M9r=o(" (GPT-J model)"),E9r=l(),YC=a("li"),qTe=a("strong"),C9r=o("roberta"),w9r=o(" \u2014 "),YJ=a("a"),A9r=o("FlaxRobertaForCausalLM"),y9r=o(" (RoBERTa model)"),L9r=l(),KC=a("li"),NTe=a("strong"),x9r=o("xglm"),$9r=o(" \u2014 "),KJ=a("a"),k9r=o("FlaxXGLMForCausalLM"),S9r=o(" (XGLM model)"),R9r=l(),F(ZC.$$.fragment),jNe=l(),qc=a("h2"),e3=a("a"),jTe=a("span"),F(M9.$$.fragment),P9r=l(),DTe=a("span"),B9r=o("FlaxAutoModelForPreTraining"),DNe=l(),gr=a("div"),F(E9.$$.fragment),I9r=l(),Nc=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZJ=a("a"),N9r=o("from_pretrained()"),j9r=o(" class method or the "),eY=a("a"),D9r=o("from_config()"),G9r=o(` class
method.`),O9r=l(),C9=a("p"),V9r=o("This class cannot be instantiated directly using "),GTe=a("code"),X9r=o("__init__()"),z9r=o(" (throws an error)."),W9r=l(),Vt=a("div"),F(w9.$$.fragment),Q9r=l(),OTe=a("p"),H9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U9r=l(),jc=a("p"),J9r=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),Y9r=o("not"),K9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),Z9r=o("from_pretrained()"),exr=o(" to load the model weights."),oxr=l(),F(o3.$$.fragment),rxr=l(),Gr=a("div"),F(A9.$$.fragment),txr=l(),XTe=a("p"),axr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nxr=l(),_n=a("p"),sxr=o("The model class to instantiate is selected based on the "),zTe=a("code"),lxr=o("model_type"),ixr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),fxr=o("pretrained_model_name_or_path"),mxr=o(":"),gxr=l(),Ee=a("ul"),r3=a("li"),HTe=a("strong"),hxr=o("albert"),pxr=o(" \u2014 "),rY=a("a"),_xr=o("FlaxAlbertForPreTraining"),uxr=o(" (ALBERT model)"),bxr=l(),t3=a("li"),UTe=a("strong"),vxr=o("bart"),Fxr=o(" \u2014 "),tY=a("a"),Txr=o("FlaxBartForConditionalGeneration"),Mxr=o(" (BART model)"),Exr=l(),a3=a("li"),JTe=a("strong"),Cxr=o("bert"),wxr=o(" \u2014 "),aY=a("a"),Axr=o("FlaxBertForPreTraining"),yxr=o(" (BERT model)"),Lxr=l(),n3=a("li"),YTe=a("strong"),xxr=o("big_bird"),$xr=o(" \u2014 "),nY=a("a"),kxr=o("FlaxBigBirdForPreTraining"),Sxr=o(" (BigBird model)"),Rxr=l(),s3=a("li"),KTe=a("strong"),Pxr=o("electra"),Bxr=o(" \u2014 "),sY=a("a"),Ixr=o("FlaxElectraForPreTraining"),qxr=o(" (ELECTRA model)"),Nxr=l(),l3=a("li"),ZTe=a("strong"),jxr=o("mbart"),Dxr=o(" \u2014 "),lY=a("a"),Gxr=o("FlaxMBartForConditionalGeneration"),Oxr=o(" (mBART model)"),Vxr=l(),i3=a("li"),e7e=a("strong"),Xxr=o("mt5"),zxr=o(" \u2014 "),iY=a("a"),Wxr=o("FlaxMT5ForConditionalGeneration"),Qxr=o(" (mT5 model)"),Hxr=l(),d3=a("li"),o7e=a("strong"),Uxr=o("roberta"),Jxr=o(" \u2014 "),dY=a("a"),Yxr=o("FlaxRobertaForMaskedLM"),Kxr=o(" (RoBERTa model)"),Zxr=l(),c3=a("li"),r7e=a("strong"),e$r=o("roformer"),o$r=o(" \u2014 "),cY=a("a"),r$r=o("FlaxRoFormerForMaskedLM"),t$r=o(" (RoFormer model)"),a$r=l(),f3=a("li"),t7e=a("strong"),n$r=o("t5"),s$r=o(" \u2014 "),fY=a("a"),l$r=o("FlaxT5ForConditionalGeneration"),i$r=o(" (T5 model)"),d$r=l(),m3=a("li"),a7e=a("strong"),c$r=o("wav2vec2"),f$r=o(" \u2014 "),mY=a("a"),m$r=o("FlaxWav2Vec2ForPreTraining"),g$r=o(" (Wav2Vec2 model)"),h$r=l(),g3=a("li"),n7e=a("strong"),p$r=o("xlm-roberta"),_$r=o(" \u2014 "),gY=a("a"),u$r=o("FlaxXLMRobertaForMaskedLM"),b$r=o(" (XLM-RoBERTa model)"),v$r=l(),F(h3.$$.fragment),GNe=l(),Dc=a("h2"),p3=a("a"),s7e=a("span"),F(y9.$$.fragment),F$r=l(),l7e=a("span"),T$r=o("FlaxAutoModelForMaskedLM"),ONe=l(),hr=a("div"),F(L9.$$.fragment),M$r=l(),Gc=a("p"),E$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hY=a("a"),C$r=o("from_pretrained()"),w$r=o(" class method or the "),pY=a("a"),A$r=o("from_config()"),y$r=o(` class
method.`),L$r=l(),x9=a("p"),x$r=o("This class cannot be instantiated directly using "),i7e=a("code"),$$r=o("__init__()"),k$r=o(" (throws an error)."),S$r=l(),Xt=a("div"),F($9.$$.fragment),R$r=l(),d7e=a("p"),P$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B$r=l(),Oc=a("p"),I$r=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),q$r=o("not"),N$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),j$r=o("from_pretrained()"),D$r=o(" to load the model weights."),G$r=l(),F(_3.$$.fragment),O$r=l(),Or=a("div"),F(k9.$$.fragment),V$r=l(),f7e=a("p"),X$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z$r=l(),un=a("p"),W$r=o("The model class to instantiate is selected based on the "),m7e=a("code"),Q$r=o("model_type"),H$r=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),U$r=o("pretrained_model_name_or_path"),J$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),Y$r=o("pretrained_model_name_or_path"),K$r=o(":"),Z$r=l(),Le=a("ul"),u3=a("li"),p7e=a("strong"),ekr=o("albert"),okr=o(" \u2014 "),uY=a("a"),rkr=o("FlaxAlbertForMaskedLM"),tkr=o(" (ALBERT model)"),akr=l(),b3=a("li"),_7e=a("strong"),nkr=o("bart"),skr=o(" \u2014 "),bY=a("a"),lkr=o("FlaxBartForConditionalGeneration"),ikr=o(" (BART model)"),dkr=l(),v3=a("li"),u7e=a("strong"),ckr=o("bert"),fkr=o(" \u2014 "),vY=a("a"),mkr=o("FlaxBertForMaskedLM"),gkr=o(" (BERT model)"),hkr=l(),F3=a("li"),b7e=a("strong"),pkr=o("big_bird"),_kr=o(" \u2014 "),FY=a("a"),ukr=o("FlaxBigBirdForMaskedLM"),bkr=o(" (BigBird model)"),vkr=l(),T3=a("li"),v7e=a("strong"),Fkr=o("distilbert"),Tkr=o(" \u2014 "),TY=a("a"),Mkr=o("FlaxDistilBertForMaskedLM"),Ekr=o(" (DistilBERT model)"),Ckr=l(),M3=a("li"),F7e=a("strong"),wkr=o("electra"),Akr=o(" \u2014 "),MY=a("a"),ykr=o("FlaxElectraForMaskedLM"),Lkr=o(" (ELECTRA model)"),xkr=l(),E3=a("li"),T7e=a("strong"),$kr=o("mbart"),kkr=o(" \u2014 "),EY=a("a"),Skr=o("FlaxMBartForConditionalGeneration"),Rkr=o(" (mBART model)"),Pkr=l(),C3=a("li"),M7e=a("strong"),Bkr=o("roberta"),Ikr=o(" \u2014 "),CY=a("a"),qkr=o("FlaxRobertaForMaskedLM"),Nkr=o(" (RoBERTa model)"),jkr=l(),w3=a("li"),E7e=a("strong"),Dkr=o("roformer"),Gkr=o(" \u2014 "),wY=a("a"),Okr=o("FlaxRoFormerForMaskedLM"),Vkr=o(" (RoFormer model)"),Xkr=l(),A3=a("li"),C7e=a("strong"),zkr=o("xlm-roberta"),Wkr=o(" \u2014 "),AY=a("a"),Qkr=o("FlaxXLMRobertaForMaskedLM"),Hkr=o(" (XLM-RoBERTa model)"),Ukr=l(),F(y3.$$.fragment),VNe=l(),Vc=a("h2"),L3=a("a"),w7e=a("span"),F(S9.$$.fragment),Jkr=l(),A7e=a("span"),Ykr=o("FlaxAutoModelForSeq2SeqLM"),XNe=l(),pr=a("div"),F(R9.$$.fragment),Kkr=l(),Xc=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yY=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),LY=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),P9=a("p"),nSr=o("This class cannot be instantiated directly using "),y7e=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),zt=a("div"),F(B9.$$.fragment),dSr=l(),L7e=a("p"),cSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fSr=l(),zc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),uSr=l(),F(x3.$$.fragment),bSr=l(),Vr=a("div"),F(I9.$$.fragment),vSr=l(),$7e=a("p"),FSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TSr=l(),bn=a("p"),MSr=o("The model class to instantiate is selected based on the "),k7e=a("code"),ESr=o("model_type"),CSr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),ySr=o("pretrained_model_name_or_path"),LSr=o(":"),xSr=l(),Pe=a("ul"),$3=a("li"),P7e=a("strong"),$Sr=o("bart"),kSr=o(" \u2014 "),$Y=a("a"),SSr=o("FlaxBartForConditionalGeneration"),RSr=o(" (BART model)"),PSr=l(),k3=a("li"),B7e=a("strong"),BSr=o("blenderbot"),ISr=o(" \u2014 "),kY=a("a"),qSr=o("FlaxBlenderbotForConditionalGeneration"),NSr=o(" (Blenderbot model)"),jSr=l(),S3=a("li"),I7e=a("strong"),DSr=o("blenderbot-small"),GSr=o(" \u2014 "),SY=a("a"),OSr=o("FlaxBlenderbotSmallForConditionalGeneration"),VSr=o(" (BlenderbotSmall model)"),XSr=l(),R3=a("li"),q7e=a("strong"),zSr=o("encoder-decoder"),WSr=o(" \u2014 "),RY=a("a"),QSr=o("FlaxEncoderDecoderModel"),HSr=o(" (Encoder decoder model)"),USr=l(),P3=a("li"),N7e=a("strong"),JSr=o("marian"),YSr=o(" \u2014 "),PY=a("a"),KSr=o("FlaxMarianMTModel"),ZSr=o(" (Marian model)"),eRr=l(),B3=a("li"),j7e=a("strong"),oRr=o("mbart"),rRr=o(" \u2014 "),BY=a("a"),tRr=o("FlaxMBartForConditionalGeneration"),aRr=o(" (mBART model)"),nRr=l(),I3=a("li"),D7e=a("strong"),sRr=o("mt5"),lRr=o(" \u2014 "),IY=a("a"),iRr=o("FlaxMT5ForConditionalGeneration"),dRr=o(" (mT5 model)"),cRr=l(),q3=a("li"),G7e=a("strong"),fRr=o("pegasus"),mRr=o(" \u2014 "),qY=a("a"),gRr=o("FlaxPegasusForConditionalGeneration"),hRr=o(" (Pegasus model)"),pRr=l(),N3=a("li"),O7e=a("strong"),_Rr=o("t5"),uRr=o(" \u2014 "),NY=a("a"),bRr=o("FlaxT5ForConditionalGeneration"),vRr=o(" (T5 model)"),FRr=l(),F(j3.$$.fragment),zNe=l(),Wc=a("h2"),D3=a("a"),V7e=a("span"),F(q9.$$.fragment),TRr=l(),X7e=a("span"),MRr=o("FlaxAutoModelForSequenceClassification"),WNe=l(),_r=a("div"),F(N9.$$.fragment),ERr=l(),Qc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jY=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),DY=a("a"),yRr=o("from_config()"),LRr=o(` class
method.`),xRr=l(),j9=a("p"),$Rr=o("This class cannot be instantiated directly using "),z7e=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Wt=a("div"),F(D9.$$.fragment),PRr=l(),W7e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IRr=l(),Hc=a("p"),qRr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),NRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(G3.$$.fragment),VRr=l(),Xr=a("div"),F(G9.$$.fragment),XRr=l(),H7e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WRr=l(),vn=a("p"),QRr=o("The model class to instantiate is selected based on the "),U7e=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),ePr=l(),xe=a("ul"),O3=a("li"),K7e=a("strong"),oPr=o("albert"),rPr=o(" \u2014 "),OY=a("a"),tPr=o("FlaxAlbertForSequenceClassification"),aPr=o(" (ALBERT model)"),nPr=l(),V3=a("li"),Z7e=a("strong"),sPr=o("bart"),lPr=o(" \u2014 "),VY=a("a"),iPr=o("FlaxBartForSequenceClassification"),dPr=o(" (BART model)"),cPr=l(),X3=a("li"),eMe=a("strong"),fPr=o("bert"),mPr=o(" \u2014 "),XY=a("a"),gPr=o("FlaxBertForSequenceClassification"),hPr=o(" (BERT model)"),pPr=l(),z3=a("li"),oMe=a("strong"),_Pr=o("big_bird"),uPr=o(" \u2014 "),zY=a("a"),bPr=o("FlaxBigBirdForSequenceClassification"),vPr=o(" (BigBird model)"),FPr=l(),W3=a("li"),rMe=a("strong"),TPr=o("distilbert"),MPr=o(" \u2014 "),WY=a("a"),EPr=o("FlaxDistilBertForSequenceClassification"),CPr=o(" (DistilBERT model)"),wPr=l(),Q3=a("li"),tMe=a("strong"),APr=o("electra"),yPr=o(" \u2014 "),QY=a("a"),LPr=o("FlaxElectraForSequenceClassification"),xPr=o(" (ELECTRA model)"),$Pr=l(),H3=a("li"),aMe=a("strong"),kPr=o("mbart"),SPr=o(" \u2014 "),HY=a("a"),RPr=o("FlaxMBartForSequenceClassification"),PPr=o(" (mBART model)"),BPr=l(),U3=a("li"),nMe=a("strong"),IPr=o("roberta"),qPr=o(" \u2014 "),UY=a("a"),NPr=o("FlaxRobertaForSequenceClassification"),jPr=o(" (RoBERTa model)"),DPr=l(),J3=a("li"),sMe=a("strong"),GPr=o("roformer"),OPr=o(" \u2014 "),JY=a("a"),VPr=o("FlaxRoFormerForSequenceClassification"),XPr=o(" (RoFormer model)"),zPr=l(),Y3=a("li"),lMe=a("strong"),WPr=o("xlm-roberta"),QPr=o(" \u2014 "),YY=a("a"),HPr=o("FlaxXLMRobertaForSequenceClassification"),UPr=o(" (XLM-RoBERTa model)"),JPr=l(),F(K3.$$.fragment),QNe=l(),Uc=a("h2"),Z3=a("a"),iMe=a("span"),F(O9.$$.fragment),YPr=l(),dMe=a("span"),KPr=o("FlaxAutoModelForQuestionAnswering"),HNe=l(),ur=a("div"),F(V9.$$.fragment),ZPr=l(),Jc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KY=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),ZY=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),X9=a("p"),sBr=o("This class cannot be instantiated directly using "),cMe=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),Qt=a("div"),F(z9.$$.fragment),cBr=l(),fMe=a("p"),fBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mBr=l(),Yc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),hBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),_Br=o("from_pretrained()"),uBr=o(" to load the model weights."),bBr=l(),F(ew.$$.fragment),vBr=l(),zr=a("div"),F(W9.$$.fragment),FBr=l(),gMe=a("p"),TBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MBr=l(),Fn=a("p"),EBr=o("The model class to instantiate is selected based on the "),hMe=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),ABr=o("pretrained_model_name_or_path"),yBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),LBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),$e=a("ul"),ow=a("li"),uMe=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),oK=a("a"),RBr=o("FlaxAlbertForQuestionAnswering"),PBr=o(" (ALBERT model)"),BBr=l(),rw=a("li"),bMe=a("strong"),IBr=o("bart"),qBr=o(" \u2014 "),rK=a("a"),NBr=o("FlaxBartForQuestionAnswering"),jBr=o(" (BART model)"),DBr=l(),tw=a("li"),vMe=a("strong"),GBr=o("bert"),OBr=o(" \u2014 "),tK=a("a"),VBr=o("FlaxBertForQuestionAnswering"),XBr=o(" (BERT model)"),zBr=l(),aw=a("li"),FMe=a("strong"),WBr=o("big_bird"),QBr=o(" \u2014 "),aK=a("a"),HBr=o("FlaxBigBirdForQuestionAnswering"),UBr=o(" (BigBird model)"),JBr=l(),nw=a("li"),TMe=a("strong"),YBr=o("distilbert"),KBr=o(" \u2014 "),nK=a("a"),ZBr=o("FlaxDistilBertForQuestionAnswering"),eIr=o(" (DistilBERT model)"),oIr=l(),sw=a("li"),MMe=a("strong"),rIr=o("electra"),tIr=o(" \u2014 "),sK=a("a"),aIr=o("FlaxElectraForQuestionAnswering"),nIr=o(" (ELECTRA model)"),sIr=l(),lw=a("li"),EMe=a("strong"),lIr=o("mbart"),iIr=o(" \u2014 "),lK=a("a"),dIr=o("FlaxMBartForQuestionAnswering"),cIr=o(" (mBART model)"),fIr=l(),iw=a("li"),CMe=a("strong"),mIr=o("roberta"),gIr=o(" \u2014 "),iK=a("a"),hIr=o("FlaxRobertaForQuestionAnswering"),pIr=o(" (RoBERTa model)"),_Ir=l(),dw=a("li"),wMe=a("strong"),uIr=o("roformer"),bIr=o(" \u2014 "),dK=a("a"),vIr=o("FlaxRoFormerForQuestionAnswering"),FIr=o(" (RoFormer model)"),TIr=l(),cw=a("li"),AMe=a("strong"),MIr=o("xlm-roberta"),EIr=o(" \u2014 "),cK=a("a"),CIr=o("FlaxXLMRobertaForQuestionAnswering"),wIr=o(" (XLM-RoBERTa model)"),AIr=l(),F(fw.$$.fragment),UNe=l(),Kc=a("h2"),mw=a("a"),yMe=a("span"),F(Q9.$$.fragment),yIr=l(),LMe=a("span"),LIr=o("FlaxAutoModelForTokenClassification"),JNe=l(),br=a("div"),F(H9.$$.fragment),xIr=l(),Zc=a("p"),$Ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fK=a("a"),kIr=o("from_pretrained()"),SIr=o(" class method or the "),mK=a("a"),RIr=o("from_config()"),PIr=o(` class
method.`),BIr=l(),U9=a("p"),IIr=o("This class cannot be instantiated directly using "),xMe=a("code"),qIr=o("__init__()"),NIr=o(" (throws an error)."),jIr=l(),Ht=a("div"),F(J9.$$.fragment),DIr=l(),$Me=a("p"),GIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OIr=l(),ef=a("p"),VIr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),XIr=o("not"),zIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),WIr=o("from_pretrained()"),QIr=o(" to load the model weights."),HIr=l(),F(gw.$$.fragment),UIr=l(),Wr=a("div"),F(Y9.$$.fragment),JIr=l(),SMe=a("p"),YIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KIr=l(),Tn=a("p"),ZIr=o("The model class to instantiate is selected based on the "),RMe=a("code"),eqr=o("model_type"),oqr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),rqr=o("pretrained_model_name_or_path"),tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),aqr=o("pretrained_model_name_or_path"),nqr=o(":"),sqr=l(),De=a("ul"),hw=a("li"),IMe=a("strong"),lqr=o("albert"),iqr=o(" \u2014 "),hK=a("a"),dqr=o("FlaxAlbertForTokenClassification"),cqr=o(" (ALBERT model)"),fqr=l(),pw=a("li"),qMe=a("strong"),mqr=o("bert"),gqr=o(" \u2014 "),pK=a("a"),hqr=o("FlaxBertForTokenClassification"),pqr=o(" (BERT model)"),_qr=l(),_w=a("li"),NMe=a("strong"),uqr=o("big_bird"),bqr=o(" \u2014 "),_K=a("a"),vqr=o("FlaxBigBirdForTokenClassification"),Fqr=o(" (BigBird model)"),Tqr=l(),uw=a("li"),jMe=a("strong"),Mqr=o("distilbert"),Eqr=o(" \u2014 "),uK=a("a"),Cqr=o("FlaxDistilBertForTokenClassification"),wqr=o(" (DistilBERT model)"),Aqr=l(),bw=a("li"),DMe=a("strong"),yqr=o("electra"),Lqr=o(" \u2014 "),bK=a("a"),xqr=o("FlaxElectraForTokenClassification"),$qr=o(" (ELECTRA model)"),kqr=l(),vw=a("li"),GMe=a("strong"),Sqr=o("roberta"),Rqr=o(" \u2014 "),vK=a("a"),Pqr=o("FlaxRobertaForTokenClassification"),Bqr=o(" (RoBERTa model)"),Iqr=l(),Fw=a("li"),OMe=a("strong"),qqr=o("roformer"),Nqr=o(" \u2014 "),FK=a("a"),jqr=o("FlaxRoFormerForTokenClassification"),Dqr=o(" (RoFormer model)"),Gqr=l(),Tw=a("li"),VMe=a("strong"),Oqr=o("xlm-roberta"),Vqr=o(" \u2014 "),TK=a("a"),Xqr=o("FlaxXLMRobertaForTokenClassification"),zqr=o(" (XLM-RoBERTa model)"),Wqr=l(),F(Mw.$$.fragment),YNe=l(),of=a("h2"),Ew=a("a"),XMe=a("span"),F(K9.$$.fragment),Qqr=l(),zMe=a("span"),Hqr=o("FlaxAutoModelForMultipleChoice"),KNe=l(),vr=a("div"),F(Z9.$$.fragment),Uqr=l(),rf=a("p"),Jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MK=a("a"),Yqr=o("from_pretrained()"),Kqr=o(" class method or the "),EK=a("a"),Zqr=o("from_config()"),eNr=o(` class
method.`),oNr=l(),ex=a("p"),rNr=o("This class cannot be instantiated directly using "),WMe=a("code"),tNr=o("__init__()"),aNr=o(" (throws an error)."),nNr=l(),Ut=a("div"),F(ox.$$.fragment),sNr=l(),QMe=a("p"),lNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iNr=l(),tf=a("p"),dNr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),cNr=o("not"),fNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),mNr=o("from_pretrained()"),gNr=o(" to load the model weights."),hNr=l(),F(Cw.$$.fragment),pNr=l(),Qr=a("div"),F(rx.$$.fragment),_Nr=l(),UMe=a("p"),uNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bNr=l(),Mn=a("p"),vNr=o("The model class to instantiate is selected based on the "),JMe=a("code"),FNr=o("model_type"),TNr=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),MNr=o("pretrained_model_name_or_path"),ENr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(":"),ANr=l(),Ge=a("ul"),ww=a("li"),ZMe=a("strong"),yNr=o("albert"),LNr=o(" \u2014 "),wK=a("a"),xNr=o("FlaxAlbertForMultipleChoice"),$Nr=o(" (ALBERT model)"),kNr=l(),Aw=a("li"),eEe=a("strong"),SNr=o("bert"),RNr=o(" \u2014 "),AK=a("a"),PNr=o("FlaxBertForMultipleChoice"),BNr=o(" (BERT model)"),INr=l(),yw=a("li"),oEe=a("strong"),qNr=o("big_bird"),NNr=o(" \u2014 "),yK=a("a"),jNr=o("FlaxBigBirdForMultipleChoice"),DNr=o(" (BigBird model)"),GNr=l(),Lw=a("li"),rEe=a("strong"),ONr=o("distilbert"),VNr=o(" \u2014 "),LK=a("a"),XNr=o("FlaxDistilBertForMultipleChoice"),zNr=o(" (DistilBERT model)"),WNr=l(),xw=a("li"),tEe=a("strong"),QNr=o("electra"),HNr=o(" \u2014 "),xK=a("a"),UNr=o("FlaxElectraForMultipleChoice"),JNr=o(" (ELECTRA model)"),YNr=l(),$w=a("li"),aEe=a("strong"),KNr=o("roberta"),ZNr=o(" \u2014 "),$K=a("a"),ejr=o("FlaxRobertaForMultipleChoice"),ojr=o(" (RoBERTa model)"),rjr=l(),kw=a("li"),nEe=a("strong"),tjr=o("roformer"),ajr=o(" \u2014 "),kK=a("a"),njr=o("FlaxRoFormerForMultipleChoice"),sjr=o(" (RoFormer model)"),ljr=l(),Sw=a("li"),sEe=a("strong"),ijr=o("xlm-roberta"),djr=o(" \u2014 "),SK=a("a"),cjr=o("FlaxXLMRobertaForMultipleChoice"),fjr=o(" (XLM-RoBERTa model)"),mjr=l(),F(Rw.$$.fragment),ZNe=l(),af=a("h2"),Pw=a("a"),lEe=a("span"),F(tx.$$.fragment),gjr=l(),iEe=a("span"),hjr=o("FlaxAutoModelForNextSentencePrediction"),eje=l(),Fr=a("div"),F(ax.$$.fragment),pjr=l(),nf=a("p"),_jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RK=a("a"),ujr=o("from_pretrained()"),bjr=o(" class method or the "),PK=a("a"),vjr=o("from_config()"),Fjr=o(` class
method.`),Tjr=l(),nx=a("p"),Mjr=o("This class cannot be instantiated directly using "),dEe=a("code"),Ejr=o("__init__()"),Cjr=o(" (throws an error)."),wjr=l(),Jt=a("div"),F(sx.$$.fragment),Ajr=l(),cEe=a("p"),yjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ljr=l(),sf=a("p"),xjr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),$jr=o("not"),kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" to load the model weights."),Pjr=l(),F(Bw.$$.fragment),Bjr=l(),Hr=a("div"),F(lx.$$.fragment),Ijr=l(),mEe=a("p"),qjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Njr=l(),En=a("p"),jjr=o("The model class to instantiate is selected based on the "),gEe=a("code"),Djr=o("model_type"),Gjr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),Ojr=o("pretrained_model_name_or_path"),Vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),Xjr=o("pretrained_model_name_or_path"),zjr=o(":"),Wjr=l(),_Ee=a("ul"),Iw=a("li"),uEe=a("strong"),Qjr=o("bert"),Hjr=o(" \u2014 "),IK=a("a"),Ujr=o("FlaxBertForNextSentencePrediction"),Jjr=o(" (BERT model)"),Yjr=l(),F(qw.$$.fragment),oje=l(),lf=a("h2"),Nw=a("a"),bEe=a("span"),F(ix.$$.fragment),Kjr=l(),vEe=a("span"),Zjr=o("FlaxAutoModelForImageClassification"),rje=l(),Tr=a("div"),F(dx.$$.fragment),eDr=l(),df=a("p"),oDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qK=a("a"),rDr=o("from_pretrained()"),tDr=o(" class method or the "),NK=a("a"),aDr=o("from_config()"),nDr=o(` class
method.`),sDr=l(),cx=a("p"),lDr=o("This class cannot be instantiated directly using "),FEe=a("code"),iDr=o("__init__()"),dDr=o(" (throws an error)."),cDr=l(),Yt=a("div"),F(fx.$$.fragment),fDr=l(),TEe=a("p"),mDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gDr=l(),cf=a("p"),hDr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),pDr=o("not"),_Dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),uDr=o("from_pretrained()"),bDr=o(" to load the model weights."),vDr=l(),F(jw.$$.fragment),FDr=l(),Ur=a("div"),F(mx.$$.fragment),TDr=l(),EEe=a("p"),MDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EDr=l(),Cn=a("p"),CDr=o("The model class to instantiate is selected based on the "),CEe=a("code"),wDr=o("model_type"),ADr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),xDr=o("pretrained_model_name_or_path"),$Dr=o(":"),kDr=l(),gx=a("ul"),Dw=a("li"),yEe=a("strong"),SDr=o("beit"),RDr=o(" \u2014 "),DK=a("a"),PDr=o("FlaxBeitForImageClassification"),BDr=o(" (BEiT model)"),IDr=l(),Gw=a("li"),LEe=a("strong"),qDr=o("vit"),NDr=o(" \u2014 "),GK=a("a"),jDr=o("FlaxViTForImageClassification"),DDr=o(" (ViT model)"),GDr=l(),F(Ow.$$.fragment),tje=l(),ff=a("h2"),Vw=a("a"),xEe=a("span"),F(hx.$$.fragment),ODr=l(),$Ee=a("span"),VDr=o("FlaxAutoModelForVision2Seq"),aje=l(),Mr=a("div"),F(px.$$.fragment),XDr=l(),mf=a("p"),zDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OK=a("a"),WDr=o("from_pretrained()"),QDr=o(" class method or the "),VK=a("a"),HDr=o("from_config()"),UDr=o(` class
method.`),JDr=l(),_x=a("p"),YDr=o("This class cannot be instantiated directly using "),kEe=a("code"),KDr=o("__init__()"),ZDr=o(" (throws an error)."),eGr=l(),Kt=a("div"),F(ux.$$.fragment),oGr=l(),SEe=a("p"),rGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGr=l(),gf=a("p"),aGr=o(`Note:
Loading a model from its configuration file does `),REe=a("strong"),nGr=o("not"),sGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),lGr=o("from_pretrained()"),iGr=o(" to load the model weights."),dGr=l(),F(Xw.$$.fragment),cGr=l(),Jr=a("div"),F(bx.$$.fragment),fGr=l(),PEe=a("p"),mGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gGr=l(),wn=a("p"),hGr=o("The model class to instantiate is selected based on the "),BEe=a("code"),pGr=o("model_type"),_Gr=o(` property of the config object (either
passed as an argument or loaded from `),IEe=a("code"),uGr=o("pretrained_model_name_or_path"),bGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),vGr=o("pretrained_model_name_or_path"),FGr=o(":"),TGr=l(),NEe=a("ul"),zw=a("li"),jEe=a("strong"),MGr=o("vision-encoder-decoder"),EGr=o(" \u2014 "),zK=a("a"),CGr=o("FlaxVisionEncoderDecoderModel"),wGr=o(" (Vision Encoder decoder model)"),AGr=l(),F(Ww.$$.fragment),this.h()},l(f){const u=I8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var vx=s(p);m=n(vx,"A",{id:!0,class:!0,href:!0});var DEe=s(m);_=n(DEe,"SPAN",{});var GEe=s(_);T(d.$$.fragment,GEe),GEe.forEach(t),DEe.forEach(t),h=i(vx),Mo=n(vx,"SPAN",{});var OEe=s(Mo);gi=r(OEe,"Auto Classes"),OEe.forEach(t),vx.forEach(t),uf=i(f),rt=n(f,"P",{});var Fx=s(rt);hi=r(Fx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Fx,"CODE",{});var VEe=s(pi);c6=r(VEe,"from_pretrained()"),VEe.forEach(t),bf=r(Fx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var XEe=s(yn);f6=r(XEe,"AutoConfig"),XEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var zEe=s(xn);m6=r(zEe,"AutoModel"),zEe.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var WEe=s($n);g6=r(WEe,"AutoTokenizer"),WEe.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Tx=s(Ae);P$=r(Tx,"will create a model that is an instance of "),vi=n(Tx,"A",{href:!0});var QEe=s(vi);B$=r(QEe,"BertModel"),QEe.forEach(t),I$=r(Tx,"."),Tx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Mx=s(wa);q$=r(Mx,"There is one class of "),Ff=n(Mx,"CODE",{});var HEe=s(Ff);N$=r(HEe,"AutoModel"),HEe.forEach(t),gGe=r(Mx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mx.forEach(t),rqe=i(f),Fi=n(f,"H2",{class:!0});var Ex=s(Fi);Tf=n(Ex,"A",{id:!0,class:!0,href:!0});var UEe=s(Tf);Nee=n(UEe,"SPAN",{});var JEe=s(Nee);T(h6.$$.fragment,JEe),JEe.forEach(t),UEe.forEach(t),hGe=i(Ex),jee=n(Ex,"SPAN",{});var YEe=s(jee);pGe=r(YEe,"Extending the Auto Classes"),YEe.forEach(t),Ex.forEach(t),tqe=i(f),kn=n(f,"P",{});var hf=s(kn);_Ge=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dee=n(hf,"CODE",{});var KEe=s(Dee);uGe=r(KEe,"NewModel"),KEe.forEach(t),bGe=r(hf,", make sure you have a "),Gee=n(hf,"CODE",{});var ZEe=s(Gee);vGe=r(ZEe,"NewModelConfig"),ZEe.forEach(t),FGe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),aqe=i(f),T(p6.$$.fragment,f),nqe=i(f),j$=n(f,"P",{});var eCe=s(j$);TGe=r(eCe,"You will then be able to use the auto classes like you would usually do!"),eCe.forEach(t),sqe=i(f),T(Mf.$$.fragment,f),lqe=i(f),Ti=n(f,"H2",{class:!0});var Cx=s(Ti);Ef=n(Cx,"A",{id:!0,class:!0,href:!0});var oCe=s(Ef);Oee=n(oCe,"SPAN",{});var rCe=s(Oee);T(_6.$$.fragment,rCe),rCe.forEach(t),oCe.forEach(t),MGe=i(Cx),Vee=n(Cx,"SPAN",{});var tCe=s(Vee);EGe=r(tCe,"AutoConfig"),tCe.forEach(t),Cx.forEach(t),iqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(u6.$$.fragment,et),CGe=i(et),b6=n(et,"P",{});var wx=s(b6);wGe=r(wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),D$=n(wx,"A",{href:!0});var aCe=s(D$);AGe=r(aCe,"from_pretrained()"),aCe.forEach(t),yGe=r(wx," class method."),wx.forEach(t),LGe=i(et),v6=n(et,"P",{});var Ax=s(v6);xGe=r(Ax,"This class cannot be instantiated directly using "),Xee=n(Ax,"CODE",{});var nCe=s(Xee);$Ge=r(nCe,"__init__()"),nCe.forEach(t),kGe=r(Ax," (throws an error)."),Ax.forEach(t),SGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(F6.$$.fragment,ot),RGe=i(ot),zee=n(ot,"P",{});var sCe=s(zee);PGe=r(sCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),sCe.forEach(t),BGe=i(ot),Mi=n(ot,"P",{});var pf=s(Mi);IGe=r(pf,"The configuration class to instantiate is selected based on the "),Wee=n(pf,"CODE",{});var lCe=s(Wee);qGe=r(lCe,"model_type"),lCe.forEach(t),NGe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Qee=n(pf,"CODE",{});var iCe=s(Qee);jGe=r(iCe,"pretrained_model_name_or_path"),iCe.forEach(t),DGe=r(pf,":"),pf.forEach(t),GGe=i(ot),A=n(ot,"UL",{});var y=s(A);Cf=n(y,"LI",{});var Qw=s(Cf);Hee=n(Qw,"STRONG",{});var dCe=s(Hee);OGe=r(dCe,"albert"),dCe.forEach(t),VGe=r(Qw," \u2014 "),G$=n(Qw,"A",{href:!0});var cCe=s(G$);XGe=r(cCe,"AlbertConfig"),cCe.forEach(t),zGe=r(Qw," (ALBERT model)"),Qw.forEach(t),WGe=i(y),wf=n(y,"LI",{});var Hw=s(wf);Uee=n(Hw,"STRONG",{});var fCe=s(Uee);QGe=r(fCe,"bart"),fCe.forEach(t),HGe=r(Hw," \u2014 "),O$=n(Hw,"A",{href:!0});var mCe=s(O$);UGe=r(mCe,"BartConfig"),mCe.forEach(t),JGe=r(Hw," (BART model)"),Hw.forEach(t),YGe=i(y),Af=n(y,"LI",{});var Uw=s(Af);Jee=n(Uw,"STRONG",{});var gCe=s(Jee);KGe=r(gCe,"beit"),gCe.forEach(t),ZGe=r(Uw," \u2014 "),V$=n(Uw,"A",{href:!0});var hCe=s(V$);eOe=r(hCe,"BeitConfig"),hCe.forEach(t),oOe=r(Uw," (BEiT model)"),Uw.forEach(t),rOe=i(y),yf=n(y,"LI",{});var Jw=s(yf);Yee=n(Jw,"STRONG",{});var pCe=s(Yee);tOe=r(pCe,"bert"),pCe.forEach(t),aOe=r(Jw," \u2014 "),X$=n(Jw,"A",{href:!0});var _Ce=s(X$);nOe=r(_Ce,"BertConfig"),_Ce.forEach(t),sOe=r(Jw," (BERT model)"),Jw.forEach(t),lOe=i(y),Lf=n(y,"LI",{});var Yw=s(Lf);Kee=n(Yw,"STRONG",{});var uCe=s(Kee);iOe=r(uCe,"bert-generation"),uCe.forEach(t),dOe=r(Yw," \u2014 "),z$=n(Yw,"A",{href:!0});var bCe=s(z$);cOe=r(bCe,"BertGenerationConfig"),bCe.forEach(t),fOe=r(Yw," (Bert Generation model)"),Yw.forEach(t),mOe=i(y),xf=n(y,"LI",{});var Kw=s(xf);Zee=n(Kw,"STRONG",{});var vCe=s(Zee);gOe=r(vCe,"big_bird"),vCe.forEach(t),hOe=r(Kw," \u2014 "),W$=n(Kw,"A",{href:!0});var FCe=s(W$);pOe=r(FCe,"BigBirdConfig"),FCe.forEach(t),_Oe=r(Kw," (BigBird model)"),Kw.forEach(t),uOe=i(y),$f=n(y,"LI",{});var Zw=s($f);eoe=n(Zw,"STRONG",{});var TCe=s(eoe);bOe=r(TCe,"bigbird_pegasus"),TCe.forEach(t),vOe=r(Zw," \u2014 "),Q$=n(Zw,"A",{href:!0});var MCe=s(Q$);FOe=r(MCe,"BigBirdPegasusConfig"),MCe.forEach(t),TOe=r(Zw," (BigBirdPegasus model)"),Zw.forEach(t),MOe=i(y),kf=n(y,"LI",{});var e0=s(kf);ooe=n(e0,"STRONG",{});var ECe=s(ooe);EOe=r(ECe,"blenderbot"),ECe.forEach(t),COe=r(e0," \u2014 "),H$=n(e0,"A",{href:!0});var CCe=s(H$);wOe=r(CCe,"BlenderbotConfig"),CCe.forEach(t),AOe=r(e0," (Blenderbot model)"),e0.forEach(t),yOe=i(y),Sf=n(y,"LI",{});var o0=s(Sf);roe=n(o0,"STRONG",{});var wCe=s(roe);LOe=r(wCe,"blenderbot-small"),wCe.forEach(t),xOe=r(o0," \u2014 "),U$=n(o0,"A",{href:!0});var ACe=s(U$);$Oe=r(ACe,"BlenderbotSmallConfig"),ACe.forEach(t),kOe=r(o0," (BlenderbotSmall model)"),o0.forEach(t),SOe=i(y),Rf=n(y,"LI",{});var r0=s(Rf);toe=n(r0,"STRONG",{});var yCe=s(toe);ROe=r(yCe,"camembert"),yCe.forEach(t),POe=r(r0," \u2014 "),J$=n(r0,"A",{href:!0});var LCe=s(J$);BOe=r(LCe,"CamembertConfig"),LCe.forEach(t),IOe=r(r0," (CamemBERT model)"),r0.forEach(t),qOe=i(y),Pf=n(y,"LI",{});var t0=s(Pf);aoe=n(t0,"STRONG",{});var xCe=s(aoe);NOe=r(xCe,"canine"),xCe.forEach(t),jOe=r(t0," \u2014 "),Y$=n(t0,"A",{href:!0});var $Ce=s(Y$);DOe=r($Ce,"CanineConfig"),$Ce.forEach(t),GOe=r(t0," (Canine model)"),t0.forEach(t),OOe=i(y),Bf=n(y,"LI",{});var a0=s(Bf);noe=n(a0,"STRONG",{});var kCe=s(noe);VOe=r(kCe,"clip"),kCe.forEach(t),XOe=r(a0," \u2014 "),K$=n(a0,"A",{href:!0});var SCe=s(K$);zOe=r(SCe,"CLIPConfig"),SCe.forEach(t),WOe=r(a0," (CLIP model)"),a0.forEach(t),QOe=i(y),If=n(y,"LI",{});var n0=s(If);soe=n(n0,"STRONG",{});var RCe=s(soe);HOe=r(RCe,"convbert"),RCe.forEach(t),UOe=r(n0," \u2014 "),Z$=n(n0,"A",{href:!0});var PCe=s(Z$);JOe=r(PCe,"ConvBertConfig"),PCe.forEach(t),YOe=r(n0," (ConvBERT model)"),n0.forEach(t),KOe=i(y),qf=n(y,"LI",{});var s0=s(qf);loe=n(s0,"STRONG",{});var BCe=s(loe);ZOe=r(BCe,"convnext"),BCe.forEach(t),eVe=r(s0," \u2014 "),ek=n(s0,"A",{href:!0});var ICe=s(ek);oVe=r(ICe,"ConvNextConfig"),ICe.forEach(t),rVe=r(s0," (ConvNext model)"),s0.forEach(t),tVe=i(y),Nf=n(y,"LI",{});var l0=s(Nf);ioe=n(l0,"STRONG",{});var qCe=s(ioe);aVe=r(qCe,"ctrl"),qCe.forEach(t),nVe=r(l0," \u2014 "),ok=n(l0,"A",{href:!0});var NCe=s(ok);sVe=r(NCe,"CTRLConfig"),NCe.forEach(t),lVe=r(l0," (CTRL model)"),l0.forEach(t),iVe=i(y),jf=n(y,"LI",{});var i0=s(jf);doe=n(i0,"STRONG",{});var jCe=s(doe);dVe=r(jCe,"cvt"),jCe.forEach(t),cVe=r(i0," \u2014 "),rk=n(i0,"A",{href:!0});var DCe=s(rk);fVe=r(DCe,"CvtConfig"),DCe.forEach(t),mVe=r(i0," (CvT model)"),i0.forEach(t),gVe=i(y),Df=n(y,"LI",{});var d0=s(Df);coe=n(d0,"STRONG",{});var GCe=s(coe);hVe=r(GCe,"data2vec-audio"),GCe.forEach(t),pVe=r(d0," \u2014 "),tk=n(d0,"A",{href:!0});var OCe=s(tk);_Ve=r(OCe,"Data2VecAudioConfig"),OCe.forEach(t),uVe=r(d0," (Data2VecAudio model)"),d0.forEach(t),bVe=i(y),Gf=n(y,"LI",{});var c0=s(Gf);foe=n(c0,"STRONG",{});var VCe=s(foe);vVe=r(VCe,"data2vec-text"),VCe.forEach(t),FVe=r(c0," \u2014 "),ak=n(c0,"A",{href:!0});var XCe=s(ak);TVe=r(XCe,"Data2VecTextConfig"),XCe.forEach(t),MVe=r(c0," (Data2VecText model)"),c0.forEach(t),EVe=i(y),Of=n(y,"LI",{});var f0=s(Of);moe=n(f0,"STRONG",{});var zCe=s(moe);CVe=r(zCe,"data2vec-vision"),zCe.forEach(t),wVe=r(f0," \u2014 "),nk=n(f0,"A",{href:!0});var WCe=s(nk);AVe=r(WCe,"Data2VecVisionConfig"),WCe.forEach(t),yVe=r(f0," (Data2VecVision model)"),f0.forEach(t),LVe=i(y),Vf=n(y,"LI",{});var m0=s(Vf);goe=n(m0,"STRONG",{});var QCe=s(goe);xVe=r(QCe,"deberta"),QCe.forEach(t),$Ve=r(m0," \u2014 "),sk=n(m0,"A",{href:!0});var HCe=s(sk);kVe=r(HCe,"DebertaConfig"),HCe.forEach(t),SVe=r(m0," (DeBERTa model)"),m0.forEach(t),RVe=i(y),Xf=n(y,"LI",{});var g0=s(Xf);hoe=n(g0,"STRONG",{});var UCe=s(hoe);PVe=r(UCe,"deberta-v2"),UCe.forEach(t),BVe=r(g0," \u2014 "),lk=n(g0,"A",{href:!0});var JCe=s(lk);IVe=r(JCe,"DebertaV2Config"),JCe.forEach(t),qVe=r(g0," (DeBERTa-v2 model)"),g0.forEach(t),NVe=i(y),zf=n(y,"LI",{});var h0=s(zf);poe=n(h0,"STRONG",{});var YCe=s(poe);jVe=r(YCe,"decision_transformer"),YCe.forEach(t),DVe=r(h0," \u2014 "),ik=n(h0,"A",{href:!0});var KCe=s(ik);GVe=r(KCe,"DecisionTransformerConfig"),KCe.forEach(t),OVe=r(h0," (Decision Transformer model)"),h0.forEach(t),VVe=i(y),Wf=n(y,"LI",{});var p0=s(Wf);_oe=n(p0,"STRONG",{});var ZCe=s(_oe);XVe=r(ZCe,"deit"),ZCe.forEach(t),zVe=r(p0," \u2014 "),dk=n(p0,"A",{href:!0});var LGr=s(dk);WVe=r(LGr,"DeiTConfig"),LGr.forEach(t),QVe=r(p0," (DeiT model)"),p0.forEach(t),HVe=i(y),Qf=n(y,"LI",{});var e3e=s(Qf);uoe=n(e3e,"STRONG",{});var xGr=s(uoe);UVe=r(xGr,"detr"),xGr.forEach(t),JVe=r(e3e," \u2014 "),ck=n(e3e,"A",{href:!0});var $Gr=s(ck);YVe=r($Gr,"DetrConfig"),$Gr.forEach(t),KVe=r(e3e," (DETR model)"),e3e.forEach(t),ZVe=i(y),Hf=n(y,"LI",{});var o3e=s(Hf);boe=n(o3e,"STRONG",{});var kGr=s(boe);eXe=r(kGr,"distilbert"),kGr.forEach(t),oXe=r(o3e," \u2014 "),fk=n(o3e,"A",{href:!0});var SGr=s(fk);rXe=r(SGr,"DistilBertConfig"),SGr.forEach(t),tXe=r(o3e," (DistilBERT model)"),o3e.forEach(t),aXe=i(y),Uf=n(y,"LI",{});var r3e=s(Uf);voe=n(r3e,"STRONG",{});var RGr=s(voe);nXe=r(RGr,"dpr"),RGr.forEach(t),sXe=r(r3e," \u2014 "),mk=n(r3e,"A",{href:!0});var PGr=s(mk);lXe=r(PGr,"DPRConfig"),PGr.forEach(t),iXe=r(r3e," (DPR model)"),r3e.forEach(t),dXe=i(y),Jf=n(y,"LI",{});var t3e=s(Jf);Foe=n(t3e,"STRONG",{});var BGr=s(Foe);cXe=r(BGr,"dpt"),BGr.forEach(t),fXe=r(t3e," \u2014 "),gk=n(t3e,"A",{href:!0});var IGr=s(gk);mXe=r(IGr,"DPTConfig"),IGr.forEach(t),gXe=r(t3e," (DPT model)"),t3e.forEach(t),hXe=i(y),Yf=n(y,"LI",{});var a3e=s(Yf);Toe=n(a3e,"STRONG",{});var qGr=s(Toe);pXe=r(qGr,"electra"),qGr.forEach(t),_Xe=r(a3e," \u2014 "),hk=n(a3e,"A",{href:!0});var NGr=s(hk);uXe=r(NGr,"ElectraConfig"),NGr.forEach(t),bXe=r(a3e," (ELECTRA model)"),a3e.forEach(t),vXe=i(y),Kf=n(y,"LI",{});var n3e=s(Kf);Moe=n(n3e,"STRONG",{});var jGr=s(Moe);FXe=r(jGr,"encoder-decoder"),jGr.forEach(t),TXe=r(n3e," \u2014 "),pk=n(n3e,"A",{href:!0});var DGr=s(pk);MXe=r(DGr,"EncoderDecoderConfig"),DGr.forEach(t),EXe=r(n3e," (Encoder decoder model)"),n3e.forEach(t),CXe=i(y),Zf=n(y,"LI",{});var s3e=s(Zf);Eoe=n(s3e,"STRONG",{});var GGr=s(Eoe);wXe=r(GGr,"flaubert"),GGr.forEach(t),AXe=r(s3e," \u2014 "),_k=n(s3e,"A",{href:!0});var OGr=s(_k);yXe=r(OGr,"FlaubertConfig"),OGr.forEach(t),LXe=r(s3e," (FlauBERT model)"),s3e.forEach(t),xXe=i(y),em=n(y,"LI",{});var l3e=s(em);Coe=n(l3e,"STRONG",{});var VGr=s(Coe);$Xe=r(VGr,"flava"),VGr.forEach(t),kXe=r(l3e," \u2014 "),uk=n(l3e,"A",{href:!0});var XGr=s(uk);SXe=r(XGr,"FlavaConfig"),XGr.forEach(t),RXe=r(l3e," (Flava model)"),l3e.forEach(t),PXe=i(y),om=n(y,"LI",{});var i3e=s(om);woe=n(i3e,"STRONG",{});var zGr=s(woe);BXe=r(zGr,"fnet"),zGr.forEach(t),IXe=r(i3e," \u2014 "),bk=n(i3e,"A",{href:!0});var WGr=s(bk);qXe=r(WGr,"FNetConfig"),WGr.forEach(t),NXe=r(i3e," (FNet model)"),i3e.forEach(t),jXe=i(y),rm=n(y,"LI",{});var d3e=s(rm);Aoe=n(d3e,"STRONG",{});var QGr=s(Aoe);DXe=r(QGr,"fsmt"),QGr.forEach(t),GXe=r(d3e," \u2014 "),vk=n(d3e,"A",{href:!0});var HGr=s(vk);OXe=r(HGr,"FSMTConfig"),HGr.forEach(t),VXe=r(d3e," (FairSeq Machine-Translation model)"),d3e.forEach(t),XXe=i(y),tm=n(y,"LI",{});var c3e=s(tm);yoe=n(c3e,"STRONG",{});var UGr=s(yoe);zXe=r(UGr,"funnel"),UGr.forEach(t),WXe=r(c3e," \u2014 "),Fk=n(c3e,"A",{href:!0});var JGr=s(Fk);QXe=r(JGr,"FunnelConfig"),JGr.forEach(t),HXe=r(c3e," (Funnel Transformer model)"),c3e.forEach(t),UXe=i(y),am=n(y,"LI",{});var f3e=s(am);Loe=n(f3e,"STRONG",{});var YGr=s(Loe);JXe=r(YGr,"glpn"),YGr.forEach(t),YXe=r(f3e," \u2014 "),Tk=n(f3e,"A",{href:!0});var KGr=s(Tk);KXe=r(KGr,"GLPNConfig"),KGr.forEach(t),ZXe=r(f3e," (GLPN model)"),f3e.forEach(t),eze=i(y),nm=n(y,"LI",{});var m3e=s(nm);xoe=n(m3e,"STRONG",{});var ZGr=s(xoe);oze=r(ZGr,"gpt2"),ZGr.forEach(t),rze=r(m3e," \u2014 "),Mk=n(m3e,"A",{href:!0});var eOr=s(Mk);tze=r(eOr,"GPT2Config"),eOr.forEach(t),aze=r(m3e," (OpenAI GPT-2 model)"),m3e.forEach(t),nze=i(y),sm=n(y,"LI",{});var g3e=s(sm);$oe=n(g3e,"STRONG",{});var oOr=s($oe);sze=r(oOr,"gpt_neo"),oOr.forEach(t),lze=r(g3e," \u2014 "),Ek=n(g3e,"A",{href:!0});var rOr=s(Ek);ize=r(rOr,"GPTNeoConfig"),rOr.forEach(t),dze=r(g3e," (GPT Neo model)"),g3e.forEach(t),cze=i(y),lm=n(y,"LI",{});var h3e=s(lm);koe=n(h3e,"STRONG",{});var tOr=s(koe);fze=r(tOr,"gptj"),tOr.forEach(t),mze=r(h3e," \u2014 "),Ck=n(h3e,"A",{href:!0});var aOr=s(Ck);gze=r(aOr,"GPTJConfig"),aOr.forEach(t),hze=r(h3e," (GPT-J model)"),h3e.forEach(t),pze=i(y),im=n(y,"LI",{});var p3e=s(im);Soe=n(p3e,"STRONG",{});var nOr=s(Soe);_ze=r(nOr,"hubert"),nOr.forEach(t),uze=r(p3e," \u2014 "),wk=n(p3e,"A",{href:!0});var sOr=s(wk);bze=r(sOr,"HubertConfig"),sOr.forEach(t),vze=r(p3e," (Hubert model)"),p3e.forEach(t),Fze=i(y),dm=n(y,"LI",{});var _3e=s(dm);Roe=n(_3e,"STRONG",{});var lOr=s(Roe);Tze=r(lOr,"ibert"),lOr.forEach(t),Mze=r(_3e," \u2014 "),Ak=n(_3e,"A",{href:!0});var iOr=s(Ak);Eze=r(iOr,"IBertConfig"),iOr.forEach(t),Cze=r(_3e," (I-BERT model)"),_3e.forEach(t),wze=i(y),cm=n(y,"LI",{});var u3e=s(cm);Poe=n(u3e,"STRONG",{});var dOr=s(Poe);Aze=r(dOr,"imagegpt"),dOr.forEach(t),yze=r(u3e," \u2014 "),yk=n(u3e,"A",{href:!0});var cOr=s(yk);Lze=r(cOr,"ImageGPTConfig"),cOr.forEach(t),xze=r(u3e," (ImageGPT model)"),u3e.forEach(t),$ze=i(y),fm=n(y,"LI",{});var b3e=s(fm);Boe=n(b3e,"STRONG",{});var fOr=s(Boe);kze=r(fOr,"layoutlm"),fOr.forEach(t),Sze=r(b3e," \u2014 "),Lk=n(b3e,"A",{href:!0});var mOr=s(Lk);Rze=r(mOr,"LayoutLMConfig"),mOr.forEach(t),Pze=r(b3e," (LayoutLM model)"),b3e.forEach(t),Bze=i(y),mm=n(y,"LI",{});var v3e=s(mm);Ioe=n(v3e,"STRONG",{});var gOr=s(Ioe);Ize=r(gOr,"layoutlmv2"),gOr.forEach(t),qze=r(v3e," \u2014 "),xk=n(v3e,"A",{href:!0});var hOr=s(xk);Nze=r(hOr,"LayoutLMv2Config"),hOr.forEach(t),jze=r(v3e," (LayoutLMv2 model)"),v3e.forEach(t),Dze=i(y),gm=n(y,"LI",{});var F3e=s(gm);qoe=n(F3e,"STRONG",{});var pOr=s(qoe);Gze=r(pOr,"led"),pOr.forEach(t),Oze=r(F3e," \u2014 "),$k=n(F3e,"A",{href:!0});var _Or=s($k);Vze=r(_Or,"LEDConfig"),_Or.forEach(t),Xze=r(F3e," (LED model)"),F3e.forEach(t),zze=i(y),hm=n(y,"LI",{});var T3e=s(hm);Noe=n(T3e,"STRONG",{});var uOr=s(Noe);Wze=r(uOr,"longformer"),uOr.forEach(t),Qze=r(T3e," \u2014 "),kk=n(T3e,"A",{href:!0});var bOr=s(kk);Hze=r(bOr,"LongformerConfig"),bOr.forEach(t),Uze=r(T3e," (Longformer model)"),T3e.forEach(t),Jze=i(y),pm=n(y,"LI",{});var M3e=s(pm);joe=n(M3e,"STRONG",{});var vOr=s(joe);Yze=r(vOr,"luke"),vOr.forEach(t),Kze=r(M3e," \u2014 "),Sk=n(M3e,"A",{href:!0});var FOr=s(Sk);Zze=r(FOr,"LukeConfig"),FOr.forEach(t),eWe=r(M3e," (LUKE model)"),M3e.forEach(t),oWe=i(y),_m=n(y,"LI",{});var E3e=s(_m);Doe=n(E3e,"STRONG",{});var TOr=s(Doe);rWe=r(TOr,"lxmert"),TOr.forEach(t),tWe=r(E3e," \u2014 "),Rk=n(E3e,"A",{href:!0});var MOr=s(Rk);aWe=r(MOr,"LxmertConfig"),MOr.forEach(t),nWe=r(E3e," (LXMERT model)"),E3e.forEach(t),sWe=i(y),um=n(y,"LI",{});var C3e=s(um);Goe=n(C3e,"STRONG",{});var EOr=s(Goe);lWe=r(EOr,"m2m_100"),EOr.forEach(t),iWe=r(C3e," \u2014 "),Pk=n(C3e,"A",{href:!0});var COr=s(Pk);dWe=r(COr,"M2M100Config"),COr.forEach(t),cWe=r(C3e," (M2M100 model)"),C3e.forEach(t),fWe=i(y),bm=n(y,"LI",{});var w3e=s(bm);Ooe=n(w3e,"STRONG",{});var wOr=s(Ooe);mWe=r(wOr,"marian"),wOr.forEach(t),gWe=r(w3e," \u2014 "),Bk=n(w3e,"A",{href:!0});var AOr=s(Bk);hWe=r(AOr,"MarianConfig"),AOr.forEach(t),pWe=r(w3e," (Marian model)"),w3e.forEach(t),_We=i(y),vm=n(y,"LI",{});var A3e=s(vm);Voe=n(A3e,"STRONG",{});var yOr=s(Voe);uWe=r(yOr,"maskformer"),yOr.forEach(t),bWe=r(A3e," \u2014 "),Ik=n(A3e,"A",{href:!0});var LOr=s(Ik);vWe=r(LOr,"MaskFormerConfig"),LOr.forEach(t),FWe=r(A3e," (MaskFormer model)"),A3e.forEach(t),TWe=i(y),Fm=n(y,"LI",{});var y3e=s(Fm);Xoe=n(y3e,"STRONG",{});var xOr=s(Xoe);MWe=r(xOr,"mbart"),xOr.forEach(t),EWe=r(y3e," \u2014 "),qk=n(y3e,"A",{href:!0});var $Or=s(qk);CWe=r($Or,"MBartConfig"),$Or.forEach(t),wWe=r(y3e," (mBART model)"),y3e.forEach(t),AWe=i(y),Tm=n(y,"LI",{});var L3e=s(Tm);zoe=n(L3e,"STRONG",{});var kOr=s(zoe);yWe=r(kOr,"megatron-bert"),kOr.forEach(t),LWe=r(L3e," \u2014 "),Nk=n(L3e,"A",{href:!0});var SOr=s(Nk);xWe=r(SOr,"MegatronBertConfig"),SOr.forEach(t),$We=r(L3e," (MegatronBert model)"),L3e.forEach(t),kWe=i(y),Mm=n(y,"LI",{});var x3e=s(Mm);Woe=n(x3e,"STRONG",{});var ROr=s(Woe);SWe=r(ROr,"mobilebert"),ROr.forEach(t),RWe=r(x3e," \u2014 "),jk=n(x3e,"A",{href:!0});var POr=s(jk);PWe=r(POr,"MobileBertConfig"),POr.forEach(t),BWe=r(x3e," (MobileBERT model)"),x3e.forEach(t),IWe=i(y),Em=n(y,"LI",{});var $3e=s(Em);Qoe=n($3e,"STRONG",{});var BOr=s(Qoe);qWe=r(BOr,"mpnet"),BOr.forEach(t),NWe=r($3e," \u2014 "),Dk=n($3e,"A",{href:!0});var IOr=s(Dk);jWe=r(IOr,"MPNetConfig"),IOr.forEach(t),DWe=r($3e," (MPNet model)"),$3e.forEach(t),GWe=i(y),Cm=n(y,"LI",{});var k3e=s(Cm);Hoe=n(k3e,"STRONG",{});var qOr=s(Hoe);OWe=r(qOr,"mt5"),qOr.forEach(t),VWe=r(k3e," \u2014 "),Gk=n(k3e,"A",{href:!0});var NOr=s(Gk);XWe=r(NOr,"MT5Config"),NOr.forEach(t),zWe=r(k3e," (mT5 model)"),k3e.forEach(t),WWe=i(y),wm=n(y,"LI",{});var S3e=s(wm);Uoe=n(S3e,"STRONG",{});var jOr=s(Uoe);QWe=r(jOr,"nystromformer"),jOr.forEach(t),HWe=r(S3e," \u2014 "),Ok=n(S3e,"A",{href:!0});var DOr=s(Ok);UWe=r(DOr,"NystromformerConfig"),DOr.forEach(t),JWe=r(S3e," (Nystromformer model)"),S3e.forEach(t),YWe=i(y),Am=n(y,"LI",{});var R3e=s(Am);Joe=n(R3e,"STRONG",{});var GOr=s(Joe);KWe=r(GOr,"openai-gpt"),GOr.forEach(t),ZWe=r(R3e," \u2014 "),Vk=n(R3e,"A",{href:!0});var OOr=s(Vk);eQe=r(OOr,"OpenAIGPTConfig"),OOr.forEach(t),oQe=r(R3e," (OpenAI GPT model)"),R3e.forEach(t),rQe=i(y),ym=n(y,"LI",{});var P3e=s(ym);Yoe=n(P3e,"STRONG",{});var VOr=s(Yoe);tQe=r(VOr,"opt"),VOr.forEach(t),aQe=r(P3e," \u2014 "),Xk=n(P3e,"A",{href:!0});var XOr=s(Xk);nQe=r(XOr,"OPTConfig"),XOr.forEach(t),sQe=r(P3e," (OPT model)"),P3e.forEach(t),lQe=i(y),Lm=n(y,"LI",{});var B3e=s(Lm);Koe=n(B3e,"STRONG",{});var zOr=s(Koe);iQe=r(zOr,"pegasus"),zOr.forEach(t),dQe=r(B3e," \u2014 "),zk=n(B3e,"A",{href:!0});var WOr=s(zk);cQe=r(WOr,"PegasusConfig"),WOr.forEach(t),fQe=r(B3e," (Pegasus model)"),B3e.forEach(t),mQe=i(y),xm=n(y,"LI",{});var I3e=s(xm);Zoe=n(I3e,"STRONG",{});var QOr=s(Zoe);gQe=r(QOr,"perceiver"),QOr.forEach(t),hQe=r(I3e," \u2014 "),Wk=n(I3e,"A",{href:!0});var HOr=s(Wk);pQe=r(HOr,"PerceiverConfig"),HOr.forEach(t),_Qe=r(I3e," (Perceiver model)"),I3e.forEach(t),uQe=i(y),$m=n(y,"LI",{});var q3e=s($m);ere=n(q3e,"STRONG",{});var UOr=s(ere);bQe=r(UOr,"plbart"),UOr.forEach(t),vQe=r(q3e," \u2014 "),Qk=n(q3e,"A",{href:!0});var JOr=s(Qk);FQe=r(JOr,"PLBartConfig"),JOr.forEach(t),TQe=r(q3e," (PLBart model)"),q3e.forEach(t),MQe=i(y),km=n(y,"LI",{});var N3e=s(km);ore=n(N3e,"STRONG",{});var YOr=s(ore);EQe=r(YOr,"poolformer"),YOr.forEach(t),CQe=r(N3e," \u2014 "),Hk=n(N3e,"A",{href:!0});var KOr=s(Hk);wQe=r(KOr,"PoolFormerConfig"),KOr.forEach(t),AQe=r(N3e," (PoolFormer model)"),N3e.forEach(t),yQe=i(y),Sm=n(y,"LI",{});var j3e=s(Sm);rre=n(j3e,"STRONG",{});var ZOr=s(rre);LQe=r(ZOr,"prophetnet"),ZOr.forEach(t),xQe=r(j3e," \u2014 "),Uk=n(j3e,"A",{href:!0});var eVr=s(Uk);$Qe=r(eVr,"ProphetNetConfig"),eVr.forEach(t),kQe=r(j3e," (ProphetNet model)"),j3e.forEach(t),SQe=i(y),Rm=n(y,"LI",{});var D3e=s(Rm);tre=n(D3e,"STRONG",{});var oVr=s(tre);RQe=r(oVr,"qdqbert"),oVr.forEach(t),PQe=r(D3e," \u2014 "),Jk=n(D3e,"A",{href:!0});var rVr=s(Jk);BQe=r(rVr,"QDQBertConfig"),rVr.forEach(t),IQe=r(D3e," (QDQBert model)"),D3e.forEach(t),qQe=i(y),Pm=n(y,"LI",{});var G3e=s(Pm);are=n(G3e,"STRONG",{});var tVr=s(are);NQe=r(tVr,"rag"),tVr.forEach(t),jQe=r(G3e," \u2014 "),Yk=n(G3e,"A",{href:!0});var aVr=s(Yk);DQe=r(aVr,"RagConfig"),aVr.forEach(t),GQe=r(G3e," (RAG model)"),G3e.forEach(t),OQe=i(y),Bm=n(y,"LI",{});var O3e=s(Bm);nre=n(O3e,"STRONG",{});var nVr=s(nre);VQe=r(nVr,"realm"),nVr.forEach(t),XQe=r(O3e," \u2014 "),Kk=n(O3e,"A",{href:!0});var sVr=s(Kk);zQe=r(sVr,"RealmConfig"),sVr.forEach(t),WQe=r(O3e," (Realm model)"),O3e.forEach(t),QQe=i(y),Im=n(y,"LI",{});var V3e=s(Im);sre=n(V3e,"STRONG",{});var lVr=s(sre);HQe=r(lVr,"reformer"),lVr.forEach(t),UQe=r(V3e," \u2014 "),Zk=n(V3e,"A",{href:!0});var iVr=s(Zk);JQe=r(iVr,"ReformerConfig"),iVr.forEach(t),YQe=r(V3e," (Reformer model)"),V3e.forEach(t),KQe=i(y),qm=n(y,"LI",{});var X3e=s(qm);lre=n(X3e,"STRONG",{});var dVr=s(lre);ZQe=r(dVr,"regnet"),dVr.forEach(t),eHe=r(X3e," \u2014 "),eS=n(X3e,"A",{href:!0});var cVr=s(eS);oHe=r(cVr,"RegNetConfig"),cVr.forEach(t),rHe=r(X3e," (RegNet model)"),X3e.forEach(t),tHe=i(y),Nm=n(y,"LI",{});var z3e=s(Nm);ire=n(z3e,"STRONG",{});var fVr=s(ire);aHe=r(fVr,"rembert"),fVr.forEach(t),nHe=r(z3e," \u2014 "),oS=n(z3e,"A",{href:!0});var mVr=s(oS);sHe=r(mVr,"RemBertConfig"),mVr.forEach(t),lHe=r(z3e," (RemBERT model)"),z3e.forEach(t),iHe=i(y),jm=n(y,"LI",{});var W3e=s(jm);dre=n(W3e,"STRONG",{});var gVr=s(dre);dHe=r(gVr,"resnet"),gVr.forEach(t),cHe=r(W3e," \u2014 "),rS=n(W3e,"A",{href:!0});var hVr=s(rS);fHe=r(hVr,"ResNetConfig"),hVr.forEach(t),mHe=r(W3e," (ResNet model)"),W3e.forEach(t),gHe=i(y),Dm=n(y,"LI",{});var Q3e=s(Dm);cre=n(Q3e,"STRONG",{});var pVr=s(cre);hHe=r(pVr,"retribert"),pVr.forEach(t),pHe=r(Q3e," \u2014 "),tS=n(Q3e,"A",{href:!0});var _Vr=s(tS);_He=r(_Vr,"RetriBertConfig"),_Vr.forEach(t),uHe=r(Q3e," (RetriBERT model)"),Q3e.forEach(t),bHe=i(y),Gm=n(y,"LI",{});var H3e=s(Gm);fre=n(H3e,"STRONG",{});var uVr=s(fre);vHe=r(uVr,"roberta"),uVr.forEach(t),FHe=r(H3e," \u2014 "),aS=n(H3e,"A",{href:!0});var bVr=s(aS);THe=r(bVr,"RobertaConfig"),bVr.forEach(t),MHe=r(H3e," (RoBERTa model)"),H3e.forEach(t),EHe=i(y),Om=n(y,"LI",{});var U3e=s(Om);mre=n(U3e,"STRONG",{});var vVr=s(mre);CHe=r(vVr,"roformer"),vVr.forEach(t),wHe=r(U3e," \u2014 "),nS=n(U3e,"A",{href:!0});var FVr=s(nS);AHe=r(FVr,"RoFormerConfig"),FVr.forEach(t),yHe=r(U3e," (RoFormer model)"),U3e.forEach(t),LHe=i(y),Vm=n(y,"LI",{});var J3e=s(Vm);gre=n(J3e,"STRONG",{});var TVr=s(gre);xHe=r(TVr,"segformer"),TVr.forEach(t),$He=r(J3e," \u2014 "),sS=n(J3e,"A",{href:!0});var MVr=s(sS);kHe=r(MVr,"SegformerConfig"),MVr.forEach(t),SHe=r(J3e," (SegFormer model)"),J3e.forEach(t),RHe=i(y),Xm=n(y,"LI",{});var Y3e=s(Xm);hre=n(Y3e,"STRONG",{});var EVr=s(hre);PHe=r(EVr,"sew"),EVr.forEach(t),BHe=r(Y3e," \u2014 "),lS=n(Y3e,"A",{href:!0});var CVr=s(lS);IHe=r(CVr,"SEWConfig"),CVr.forEach(t),qHe=r(Y3e," (SEW model)"),Y3e.forEach(t),NHe=i(y),zm=n(y,"LI",{});var K3e=s(zm);pre=n(K3e,"STRONG",{});var wVr=s(pre);jHe=r(wVr,"sew-d"),wVr.forEach(t),DHe=r(K3e," \u2014 "),iS=n(K3e,"A",{href:!0});var AVr=s(iS);GHe=r(AVr,"SEWDConfig"),AVr.forEach(t),OHe=r(K3e," (SEW-D model)"),K3e.forEach(t),VHe=i(y),Wm=n(y,"LI",{});var Z3e=s(Wm);_re=n(Z3e,"STRONG",{});var yVr=s(_re);XHe=r(yVr,"speech-encoder-decoder"),yVr.forEach(t),zHe=r(Z3e," \u2014 "),dS=n(Z3e,"A",{href:!0});var LVr=s(dS);WHe=r(LVr,"SpeechEncoderDecoderConfig"),LVr.forEach(t),QHe=r(Z3e," (Speech Encoder decoder model)"),Z3e.forEach(t),HHe=i(y),Qm=n(y,"LI",{});var ewe=s(Qm);ure=n(ewe,"STRONG",{});var xVr=s(ure);UHe=r(xVr,"speech_to_text"),xVr.forEach(t),JHe=r(ewe," \u2014 "),cS=n(ewe,"A",{href:!0});var $Vr=s(cS);YHe=r($Vr,"Speech2TextConfig"),$Vr.forEach(t),KHe=r(ewe," (Speech2Text model)"),ewe.forEach(t),ZHe=i(y),Hm=n(y,"LI",{});var owe=s(Hm);bre=n(owe,"STRONG",{});var kVr=s(bre);eUe=r(kVr,"speech_to_text_2"),kVr.forEach(t),oUe=r(owe," \u2014 "),fS=n(owe,"A",{href:!0});var SVr=s(fS);rUe=r(SVr,"Speech2Text2Config"),SVr.forEach(t),tUe=r(owe," (Speech2Text2 model)"),owe.forEach(t),aUe=i(y),Um=n(y,"LI",{});var rwe=s(Um);vre=n(rwe,"STRONG",{});var RVr=s(vre);nUe=r(RVr,"splinter"),RVr.forEach(t),sUe=r(rwe," \u2014 "),mS=n(rwe,"A",{href:!0});var PVr=s(mS);lUe=r(PVr,"SplinterConfig"),PVr.forEach(t),iUe=r(rwe," (Splinter model)"),rwe.forEach(t),dUe=i(y),Jm=n(y,"LI",{});var twe=s(Jm);Fre=n(twe,"STRONG",{});var BVr=s(Fre);cUe=r(BVr,"squeezebert"),BVr.forEach(t),fUe=r(twe," \u2014 "),gS=n(twe,"A",{href:!0});var IVr=s(gS);mUe=r(IVr,"SqueezeBertConfig"),IVr.forEach(t),gUe=r(twe," (SqueezeBERT model)"),twe.forEach(t),hUe=i(y),Ym=n(y,"LI",{});var awe=s(Ym);Tre=n(awe,"STRONG",{});var qVr=s(Tre);pUe=r(qVr,"swin"),qVr.forEach(t),_Ue=r(awe," \u2014 "),hS=n(awe,"A",{href:!0});var NVr=s(hS);uUe=r(NVr,"SwinConfig"),NVr.forEach(t),bUe=r(awe," (Swin model)"),awe.forEach(t),vUe=i(y),Km=n(y,"LI",{});var nwe=s(Km);Mre=n(nwe,"STRONG",{});var jVr=s(Mre);FUe=r(jVr,"t5"),jVr.forEach(t),TUe=r(nwe," \u2014 "),pS=n(nwe,"A",{href:!0});var DVr=s(pS);MUe=r(DVr,"T5Config"),DVr.forEach(t),EUe=r(nwe," (T5 model)"),nwe.forEach(t),CUe=i(y),Zm=n(y,"LI",{});var swe=s(Zm);Ere=n(swe,"STRONG",{});var GVr=s(Ere);wUe=r(GVr,"tapas"),GVr.forEach(t),AUe=r(swe," \u2014 "),_S=n(swe,"A",{href:!0});var OVr=s(_S);yUe=r(OVr,"TapasConfig"),OVr.forEach(t),LUe=r(swe," (TAPAS model)"),swe.forEach(t),xUe=i(y),eg=n(y,"LI",{});var lwe=s(eg);Cre=n(lwe,"STRONG",{});var VVr=s(Cre);$Ue=r(VVr,"trajectory_transformer"),VVr.forEach(t),kUe=r(lwe," \u2014 "),uS=n(lwe,"A",{href:!0});var XVr=s(uS);SUe=r(XVr,"TrajectoryTransformerConfig"),XVr.forEach(t),RUe=r(lwe," (Trajectory Transformer model)"),lwe.forEach(t),PUe=i(y),og=n(y,"LI",{});var iwe=s(og);wre=n(iwe,"STRONG",{});var zVr=s(wre);BUe=r(zVr,"transfo-xl"),zVr.forEach(t),IUe=r(iwe," \u2014 "),bS=n(iwe,"A",{href:!0});var WVr=s(bS);qUe=r(WVr,"TransfoXLConfig"),WVr.forEach(t),NUe=r(iwe," (Transformer-XL model)"),iwe.forEach(t),jUe=i(y),rg=n(y,"LI",{});var dwe=s(rg);Are=n(dwe,"STRONG",{});var QVr=s(Are);DUe=r(QVr,"trocr"),QVr.forEach(t),GUe=r(dwe," \u2014 "),vS=n(dwe,"A",{href:!0});var HVr=s(vS);OUe=r(HVr,"TrOCRConfig"),HVr.forEach(t),VUe=r(dwe," (TrOCR model)"),dwe.forEach(t),XUe=i(y),tg=n(y,"LI",{});var cwe=s(tg);yre=n(cwe,"STRONG",{});var UVr=s(yre);zUe=r(UVr,"unispeech"),UVr.forEach(t),WUe=r(cwe," \u2014 "),FS=n(cwe,"A",{href:!0});var JVr=s(FS);QUe=r(JVr,"UniSpeechConfig"),JVr.forEach(t),HUe=r(cwe," (UniSpeech model)"),cwe.forEach(t),UUe=i(y),ag=n(y,"LI",{});var fwe=s(ag);Lre=n(fwe,"STRONG",{});var YVr=s(Lre);JUe=r(YVr,"unispeech-sat"),YVr.forEach(t),YUe=r(fwe," \u2014 "),TS=n(fwe,"A",{href:!0});var KVr=s(TS);KUe=r(KVr,"UniSpeechSatConfig"),KVr.forEach(t),ZUe=r(fwe," (UniSpeechSat model)"),fwe.forEach(t),eJe=i(y),ng=n(y,"LI",{});var mwe=s(ng);xre=n(mwe,"STRONG",{});var ZVr=s(xre);oJe=r(ZVr,"van"),ZVr.forEach(t),rJe=r(mwe," \u2014 "),MS=n(mwe,"A",{href:!0});var eXr=s(MS);tJe=r(eXr,"VanConfig"),eXr.forEach(t),aJe=r(mwe," (VAN model)"),mwe.forEach(t),nJe=i(y),sg=n(y,"LI",{});var gwe=s(sg);$re=n(gwe,"STRONG",{});var oXr=s($re);sJe=r(oXr,"vilt"),oXr.forEach(t),lJe=r(gwe," \u2014 "),ES=n(gwe,"A",{href:!0});var rXr=s(ES);iJe=r(rXr,"ViltConfig"),rXr.forEach(t),dJe=r(gwe," (ViLT model)"),gwe.forEach(t),cJe=i(y),lg=n(y,"LI",{});var hwe=s(lg);kre=n(hwe,"STRONG",{});var tXr=s(kre);fJe=r(tXr,"vision-encoder-decoder"),tXr.forEach(t),mJe=r(hwe," \u2014 "),CS=n(hwe,"A",{href:!0});var aXr=s(CS);gJe=r(aXr,"VisionEncoderDecoderConfig"),aXr.forEach(t),hJe=r(hwe," (Vision Encoder decoder model)"),hwe.forEach(t),pJe=i(y),ig=n(y,"LI",{});var pwe=s(ig);Sre=n(pwe,"STRONG",{});var nXr=s(Sre);_Je=r(nXr,"vision-text-dual-encoder"),nXr.forEach(t),uJe=r(pwe," \u2014 "),wS=n(pwe,"A",{href:!0});var sXr=s(wS);bJe=r(sXr,"VisionTextDualEncoderConfig"),sXr.forEach(t),vJe=r(pwe," (VisionTextDualEncoder model)"),pwe.forEach(t),FJe=i(y),dg=n(y,"LI",{});var _we=s(dg);Rre=n(_we,"STRONG",{});var lXr=s(Rre);TJe=r(lXr,"visual_bert"),lXr.forEach(t),MJe=r(_we," \u2014 "),AS=n(_we,"A",{href:!0});var iXr=s(AS);EJe=r(iXr,"VisualBertConfig"),iXr.forEach(t),CJe=r(_we," (VisualBert model)"),_we.forEach(t),wJe=i(y),cg=n(y,"LI",{});var uwe=s(cg);Pre=n(uwe,"STRONG",{});var dXr=s(Pre);AJe=r(dXr,"vit"),dXr.forEach(t),yJe=r(uwe," \u2014 "),yS=n(uwe,"A",{href:!0});var cXr=s(yS);LJe=r(cXr,"ViTConfig"),cXr.forEach(t),xJe=r(uwe," (ViT model)"),uwe.forEach(t),$Je=i(y),fg=n(y,"LI",{});var bwe=s(fg);Bre=n(bwe,"STRONG",{});var fXr=s(Bre);kJe=r(fXr,"vit_mae"),fXr.forEach(t),SJe=r(bwe," \u2014 "),LS=n(bwe,"A",{href:!0});var mXr=s(LS);RJe=r(mXr,"ViTMAEConfig"),mXr.forEach(t),PJe=r(bwe," (ViTMAE model)"),bwe.forEach(t),BJe=i(y),mg=n(y,"LI",{});var vwe=s(mg);Ire=n(vwe,"STRONG",{});var gXr=s(Ire);IJe=r(gXr,"wav2vec2"),gXr.forEach(t),qJe=r(vwe," \u2014 "),xS=n(vwe,"A",{href:!0});var hXr=s(xS);NJe=r(hXr,"Wav2Vec2Config"),hXr.forEach(t),jJe=r(vwe," (Wav2Vec2 model)"),vwe.forEach(t),DJe=i(y),gg=n(y,"LI",{});var Fwe=s(gg);qre=n(Fwe,"STRONG",{});var pXr=s(qre);GJe=r(pXr,"wav2vec2-conformer"),pXr.forEach(t),OJe=r(Fwe," \u2014 "),$S=n(Fwe,"A",{href:!0});var _Xr=s($S);VJe=r(_Xr,"Wav2Vec2ConformerConfig"),_Xr.forEach(t),XJe=r(Fwe," (Wav2Vec2-Conformer model)"),Fwe.forEach(t),zJe=i(y),hg=n(y,"LI",{});var Twe=s(hg);Nre=n(Twe,"STRONG",{});var uXr=s(Nre);WJe=r(uXr,"wavlm"),uXr.forEach(t),QJe=r(Twe," \u2014 "),kS=n(Twe,"A",{href:!0});var bXr=s(kS);HJe=r(bXr,"WavLMConfig"),bXr.forEach(t),UJe=r(Twe," (WavLM model)"),Twe.forEach(t),JJe=i(y),pg=n(y,"LI",{});var Mwe=s(pg);jre=n(Mwe,"STRONG",{});var vXr=s(jre);YJe=r(vXr,"xglm"),vXr.forEach(t),KJe=r(Mwe," \u2014 "),SS=n(Mwe,"A",{href:!0});var FXr=s(SS);ZJe=r(FXr,"XGLMConfig"),FXr.forEach(t),eYe=r(Mwe," (XGLM model)"),Mwe.forEach(t),oYe=i(y),_g=n(y,"LI",{});var Ewe=s(_g);Dre=n(Ewe,"STRONG",{});var TXr=s(Dre);rYe=r(TXr,"xlm"),TXr.forEach(t),tYe=r(Ewe," \u2014 "),RS=n(Ewe,"A",{href:!0});var MXr=s(RS);aYe=r(MXr,"XLMConfig"),MXr.forEach(t),nYe=r(Ewe," (XLM model)"),Ewe.forEach(t),sYe=i(y),ug=n(y,"LI",{});var Cwe=s(ug);Gre=n(Cwe,"STRONG",{});var EXr=s(Gre);lYe=r(EXr,"xlm-prophetnet"),EXr.forEach(t),iYe=r(Cwe," \u2014 "),PS=n(Cwe,"A",{href:!0});var CXr=s(PS);dYe=r(CXr,"XLMProphetNetConfig"),CXr.forEach(t),cYe=r(Cwe," (XLMProphetNet model)"),Cwe.forEach(t),fYe=i(y),bg=n(y,"LI",{});var wwe=s(bg);Ore=n(wwe,"STRONG",{});var wXr=s(Ore);mYe=r(wXr,"xlm-roberta"),wXr.forEach(t),gYe=r(wwe," \u2014 "),BS=n(wwe,"A",{href:!0});var AXr=s(BS);hYe=r(AXr,"XLMRobertaConfig"),AXr.forEach(t),pYe=r(wwe," (XLM-RoBERTa model)"),wwe.forEach(t),_Ye=i(y),vg=n(y,"LI",{});var Awe=s(vg);Vre=n(Awe,"STRONG",{});var yXr=s(Vre);uYe=r(yXr,"xlm-roberta-xl"),yXr.forEach(t),bYe=r(Awe," \u2014 "),IS=n(Awe,"A",{href:!0});var LXr=s(IS);vYe=r(LXr,"XLMRobertaXLConfig"),LXr.forEach(t),FYe=r(Awe," (XLM-RoBERTa-XL model)"),Awe.forEach(t),TYe=i(y),Fg=n(y,"LI",{});var ywe=s(Fg);Xre=n(ywe,"STRONG",{});var xXr=s(Xre);MYe=r(xXr,"xlnet"),xXr.forEach(t),EYe=r(ywe," \u2014 "),qS=n(ywe,"A",{href:!0});var $Xr=s(qS);CYe=r($Xr,"XLNetConfig"),$Xr.forEach(t),wYe=r(ywe," (XLNet model)"),ywe.forEach(t),AYe=i(y),Tg=n(y,"LI",{});var Lwe=s(Tg);zre=n(Lwe,"STRONG",{});var kXr=s(zre);yYe=r(kXr,"yolos"),kXr.forEach(t),LYe=r(Lwe," \u2014 "),NS=n(Lwe,"A",{href:!0});var SXr=s(NS);xYe=r(SXr,"YolosConfig"),SXr.forEach(t),$Ye=r(Lwe," (YOLOS model)"),Lwe.forEach(t),kYe=i(y),Mg=n(y,"LI",{});var xwe=s(Mg);Wre=n(xwe,"STRONG",{});var RXr=s(Wre);SYe=r(RXr,"yoso"),RXr.forEach(t),RYe=r(xwe," \u2014 "),jS=n(xwe,"A",{href:!0});var PXr=s(jS);PYe=r(PXr,"YosoConfig"),PXr.forEach(t),BYe=r(xwe," (YOSO model)"),xwe.forEach(t),y.forEach(t),IYe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),qYe=i(et),Cg=n(et,"DIV",{class:!0});var sje=s(Cg);T(T6.$$.fragment,sje),NYe=i(sje),Qre=n(sje,"P",{});var BXr=s(Qre);jYe=r(BXr,"Register a new configuration for this class."),BXr.forEach(t),sje.forEach(t),et.forEach(t),dqe=i(f),Ei=n(f,"H2",{class:!0});var lje=s(Ei);wg=n(lje,"A",{id:!0,class:!0,href:!0});var IXr=s(wg);Hre=n(IXr,"SPAN",{});var qXr=s(Hre);T(M6.$$.fragment,qXr),qXr.forEach(t),IXr.forEach(t),DYe=i(lje),Ure=n(lje,"SPAN",{});var NXr=s(Ure);GYe=r(NXr,"AutoTokenizer"),NXr.forEach(t),lje.forEach(t),cqe=i(f),wo=n(f,"DIV",{class:!0});var js=s(wo);T(E6.$$.fragment,js),OYe=i(js),C6=n(js,"P",{});var ije=s(C6);VYe=r(ije,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),DS=n(ije,"A",{href:!0});var jXr=s(DS);XYe=r(jXr,"AutoTokenizer.from_pretrained()"),jXr.forEach(t),zYe=r(ije," class method."),ije.forEach(t),WYe=i(js),w6=n(js,"P",{});var dje=s(w6);QYe=r(dje,"This class cannot be instantiated directly using "),Jre=n(dje,"CODE",{});var DXr=s(Jre);HYe=r(DXr,"__init__()"),DXr.forEach(t),UYe=r(dje," (throws an error)."),dje.forEach(t),JYe=i(js),Cr=n(js,"DIV",{class:!0});var Ds=s(Cr);T(A6.$$.fragment,Ds),YYe=i(Ds),Yre=n(Ds,"P",{});var GXr=s(Yre);KYe=r(GXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GXr.forEach(t),ZYe=i(Ds),Aa=n(Ds,"P",{});var _0=s(Aa);eKe=r(_0,"The tokenizer class to instantiate is selected based on the "),Kre=n(_0,"CODE",{});var OXr=s(Kre);oKe=r(OXr,"model_type"),OXr.forEach(t),rKe=r(_0,` property of the config object (either
passed as an argument or loaded from `),Zre=n(_0,"CODE",{});var VXr=s(Zre);tKe=r(VXr,"pretrained_model_name_or_path"),VXr.forEach(t),aKe=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ete=n(_0,"CODE",{});var XXr=s(ete);nKe=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),sKe=r(_0,":"),_0.forEach(t),lKe=i(Ds),k=n(Ds,"UL",{});var S=s(k);Sn=n(S,"LI",{});var yx=s(Sn);ote=n(yx,"STRONG",{});var zXr=s(ote);iKe=r(zXr,"albert"),zXr.forEach(t),dKe=r(yx," \u2014 "),GS=n(yx,"A",{href:!0});var WXr=s(GS);cKe=r(WXr,"AlbertTokenizer"),WXr.forEach(t),fKe=r(yx," or "),OS=n(yx,"A",{href:!0});var QXr=s(OS);mKe=r(QXr,"AlbertTokenizerFast"),QXr.forEach(t),gKe=r(yx," (ALBERT model)"),yx.forEach(t),hKe=i(S),Rn=n(S,"LI",{});var Lx=s(Rn);rte=n(Lx,"STRONG",{});var HXr=s(rte);pKe=r(HXr,"bart"),HXr.forEach(t),_Ke=r(Lx," \u2014 "),VS=n(Lx,"A",{href:!0});var UXr=s(VS);uKe=r(UXr,"BartTokenizer"),UXr.forEach(t),bKe=r(Lx," or "),XS=n(Lx,"A",{href:!0});var JXr=s(XS);vKe=r(JXr,"BartTokenizerFast"),JXr.forEach(t),FKe=r(Lx," (BART model)"),Lx.forEach(t),TKe=i(S),Pn=n(S,"LI",{});var xx=s(Pn);tte=n(xx,"STRONG",{});var YXr=s(tte);MKe=r(YXr,"barthez"),YXr.forEach(t),EKe=r(xx," \u2014 "),zS=n(xx,"A",{href:!0});var KXr=s(zS);CKe=r(KXr,"BarthezTokenizer"),KXr.forEach(t),wKe=r(xx," or "),WS=n(xx,"A",{href:!0});var ZXr=s(WS);AKe=r(ZXr,"BarthezTokenizerFast"),ZXr.forEach(t),yKe=r(xx," (BARThez model)"),xx.forEach(t),LKe=i(S),Bn=n(S,"LI",{});var $x=s(Bn);ate=n($x,"STRONG",{});var ezr=s(ate);xKe=r(ezr,"bartpho"),ezr.forEach(t),$Ke=r($x," \u2014 "),QS=n($x,"A",{href:!0});var ozr=s(QS);kKe=r(ozr,"BartphoTokenizer"),ozr.forEach(t),SKe=r($x," or "),HS=n($x,"A",{href:!0});var rzr=s(HS);RKe=r(rzr,"BartphoTokenizerFast"),rzr.forEach(t),PKe=r($x," (BARTpho model)"),$x.forEach(t),BKe=i(S),In=n(S,"LI",{});var kx=s(In);nte=n(kx,"STRONG",{});var tzr=s(nte);IKe=r(tzr,"bert"),tzr.forEach(t),qKe=r(kx," \u2014 "),US=n(kx,"A",{href:!0});var azr=s(US);NKe=r(azr,"BertTokenizer"),azr.forEach(t),jKe=r(kx," or "),JS=n(kx,"A",{href:!0});var nzr=s(JS);DKe=r(nzr,"BertTokenizerFast"),nzr.forEach(t),GKe=r(kx," (BERT model)"),kx.forEach(t),OKe=i(S),Ag=n(S,"LI",{});var $we=s(Ag);ste=n($we,"STRONG",{});var szr=s(ste);VKe=r(szr,"bert-generation"),szr.forEach(t),XKe=r($we," \u2014 "),YS=n($we,"A",{href:!0});var lzr=s(YS);zKe=r(lzr,"BertGenerationTokenizer"),lzr.forEach(t),WKe=r($we," (Bert Generation model)"),$we.forEach(t),QKe=i(S),yg=n(S,"LI",{});var kwe=s(yg);lte=n(kwe,"STRONG",{});var izr=s(lte);HKe=r(izr,"bert-japanese"),izr.forEach(t),UKe=r(kwe," \u2014 "),KS=n(kwe,"A",{href:!0});var dzr=s(KS);JKe=r(dzr,"BertJapaneseTokenizer"),dzr.forEach(t),YKe=r(kwe," (BertJapanese model)"),kwe.forEach(t),KKe=i(S),qn=n(S,"LI",{});var Sx=s(qn);ite=n(Sx,"STRONG",{});var czr=s(ite);ZKe=r(czr,"bertweet"),czr.forEach(t),eZe=r(Sx," \u2014 "),ZS=n(Sx,"A",{href:!0});var fzr=s(ZS);oZe=r(fzr,"BertweetTokenizer"),fzr.forEach(t),rZe=r(Sx," or "),eR=n(Sx,"A",{href:!0});var mzr=s(eR);tZe=r(mzr,"BertweetTokenizerFast"),mzr.forEach(t),aZe=r(Sx," (Bertweet model)"),Sx.forEach(t),nZe=i(S),Nn=n(S,"LI",{});var Rx=s(Nn);dte=n(Rx,"STRONG",{});var gzr=s(dte);sZe=r(gzr,"big_bird"),gzr.forEach(t),lZe=r(Rx," \u2014 "),oR=n(Rx,"A",{href:!0});var hzr=s(oR);iZe=r(hzr,"BigBirdTokenizer"),hzr.forEach(t),dZe=r(Rx," or "),rR=n(Rx,"A",{href:!0});var pzr=s(rR);cZe=r(pzr,"BigBirdTokenizerFast"),pzr.forEach(t),fZe=r(Rx," (BigBird model)"),Rx.forEach(t),mZe=i(S),jn=n(S,"LI",{});var Px=s(jn);cte=n(Px,"STRONG",{});var _zr=s(cte);gZe=r(_zr,"bigbird_pegasus"),_zr.forEach(t),hZe=r(Px," \u2014 "),tR=n(Px,"A",{href:!0});var uzr=s(tR);pZe=r(uzr,"PegasusTokenizer"),uzr.forEach(t),_Ze=r(Px," or "),aR=n(Px,"A",{href:!0});var bzr=s(aR);uZe=r(bzr,"PegasusTokenizerFast"),bzr.forEach(t),bZe=r(Px," (BigBirdPegasus model)"),Px.forEach(t),vZe=i(S),Dn=n(S,"LI",{});var Bx=s(Dn);fte=n(Bx,"STRONG",{});var vzr=s(fte);FZe=r(vzr,"blenderbot"),vzr.forEach(t),TZe=r(Bx," \u2014 "),nR=n(Bx,"A",{href:!0});var Fzr=s(nR);MZe=r(Fzr,"BlenderbotTokenizer"),Fzr.forEach(t),EZe=r(Bx," or "),sR=n(Bx,"A",{href:!0});var Tzr=s(sR);CZe=r(Tzr,"BlenderbotTokenizerFast"),Tzr.forEach(t),wZe=r(Bx," (Blenderbot model)"),Bx.forEach(t),AZe=i(S),Lg=n(S,"LI",{});var Swe=s(Lg);mte=n(Swe,"STRONG",{});var Mzr=s(mte);yZe=r(Mzr,"blenderbot-small"),Mzr.forEach(t),LZe=r(Swe," \u2014 "),lR=n(Swe,"A",{href:!0});var Ezr=s(lR);xZe=r(Ezr,"BlenderbotSmallTokenizer"),Ezr.forEach(t),$Ze=r(Swe," (BlenderbotSmall model)"),Swe.forEach(t),kZe=i(S),xg=n(S,"LI",{});var Rwe=s(xg);gte=n(Rwe,"STRONG",{});var Czr=s(gte);SZe=r(Czr,"byt5"),Czr.forEach(t),RZe=r(Rwe," \u2014 "),iR=n(Rwe,"A",{href:!0});var wzr=s(iR);PZe=r(wzr,"ByT5Tokenizer"),wzr.forEach(t),BZe=r(Rwe," (ByT5 model)"),Rwe.forEach(t),IZe=i(S),Gn=n(S,"LI",{});var Ix=s(Gn);hte=n(Ix,"STRONG",{});var Azr=s(hte);qZe=r(Azr,"camembert"),Azr.forEach(t),NZe=r(Ix," \u2014 "),dR=n(Ix,"A",{href:!0});var yzr=s(dR);jZe=r(yzr,"CamembertTokenizer"),yzr.forEach(t),DZe=r(Ix," or "),cR=n(Ix,"A",{href:!0});var Lzr=s(cR);GZe=r(Lzr,"CamembertTokenizerFast"),Lzr.forEach(t),OZe=r(Ix," (CamemBERT model)"),Ix.forEach(t),VZe=i(S),$g=n(S,"LI",{});var Pwe=s($g);pte=n(Pwe,"STRONG",{});var xzr=s(pte);XZe=r(xzr,"canine"),xzr.forEach(t),zZe=r(Pwe," \u2014 "),fR=n(Pwe,"A",{href:!0});var $zr=s(fR);WZe=r($zr,"CanineTokenizer"),$zr.forEach(t),QZe=r(Pwe," (Canine model)"),Pwe.forEach(t),HZe=i(S),On=n(S,"LI",{});var qx=s(On);_te=n(qx,"STRONG",{});var kzr=s(_te);UZe=r(kzr,"clip"),kzr.forEach(t),JZe=r(qx," \u2014 "),mR=n(qx,"A",{href:!0});var Szr=s(mR);YZe=r(Szr,"CLIPTokenizer"),Szr.forEach(t),KZe=r(qx," or "),gR=n(qx,"A",{href:!0});var Rzr=s(gR);ZZe=r(Rzr,"CLIPTokenizerFast"),Rzr.forEach(t),eeo=r(qx," (CLIP model)"),qx.forEach(t),oeo=i(S),Vn=n(S,"LI",{});var Nx=s(Vn);ute=n(Nx,"STRONG",{});var Pzr=s(ute);reo=r(Pzr,"convbert"),Pzr.forEach(t),teo=r(Nx," \u2014 "),hR=n(Nx,"A",{href:!0});var Bzr=s(hR);aeo=r(Bzr,"ConvBertTokenizer"),Bzr.forEach(t),neo=r(Nx," or "),pR=n(Nx,"A",{href:!0});var Izr=s(pR);seo=r(Izr,"ConvBertTokenizerFast"),Izr.forEach(t),leo=r(Nx," (ConvBERT model)"),Nx.forEach(t),ieo=i(S),Xn=n(S,"LI",{});var jx=s(Xn);bte=n(jx,"STRONG",{});var qzr=s(bte);deo=r(qzr,"cpm"),qzr.forEach(t),ceo=r(jx," \u2014 "),_R=n(jx,"A",{href:!0});var Nzr=s(_R);feo=r(Nzr,"CpmTokenizer"),Nzr.forEach(t),meo=r(jx," or "),uR=n(jx,"A",{href:!0});var jzr=s(uR);geo=r(jzr,"CpmTokenizerFast"),jzr.forEach(t),heo=r(jx," (CPM model)"),jx.forEach(t),peo=i(S),kg=n(S,"LI",{});var Bwe=s(kg);vte=n(Bwe,"STRONG",{});var Dzr=s(vte);_eo=r(Dzr,"ctrl"),Dzr.forEach(t),ueo=r(Bwe," \u2014 "),bR=n(Bwe,"A",{href:!0});var Gzr=s(bR);beo=r(Gzr,"CTRLTokenizer"),Gzr.forEach(t),veo=r(Bwe," (CTRL model)"),Bwe.forEach(t),Feo=i(S),zn=n(S,"LI",{});var Dx=s(zn);Fte=n(Dx,"STRONG",{});var Ozr=s(Fte);Teo=r(Ozr,"data2vec-text"),Ozr.forEach(t),Meo=r(Dx," \u2014 "),vR=n(Dx,"A",{href:!0});var Vzr=s(vR);Eeo=r(Vzr,"RobertaTokenizer"),Vzr.forEach(t),Ceo=r(Dx," or "),FR=n(Dx,"A",{href:!0});var Xzr=s(FR);weo=r(Xzr,"RobertaTokenizerFast"),Xzr.forEach(t),Aeo=r(Dx," (Data2VecText model)"),Dx.forEach(t),yeo=i(S),Wn=n(S,"LI",{});var Gx=s(Wn);Tte=n(Gx,"STRONG",{});var zzr=s(Tte);Leo=r(zzr,"deberta"),zzr.forEach(t),xeo=r(Gx," \u2014 "),TR=n(Gx,"A",{href:!0});var Wzr=s(TR);$eo=r(Wzr,"DebertaTokenizer"),Wzr.forEach(t),keo=r(Gx," or "),MR=n(Gx,"A",{href:!0});var Qzr=s(MR);Seo=r(Qzr,"DebertaTokenizerFast"),Qzr.forEach(t),Reo=r(Gx," (DeBERTa model)"),Gx.forEach(t),Peo=i(S),Qn=n(S,"LI",{});var Ox=s(Qn);Mte=n(Ox,"STRONG",{});var Hzr=s(Mte);Beo=r(Hzr,"deberta-v2"),Hzr.forEach(t),Ieo=r(Ox," \u2014 "),ER=n(Ox,"A",{href:!0});var Uzr=s(ER);qeo=r(Uzr,"DebertaV2Tokenizer"),Uzr.forEach(t),Neo=r(Ox," or "),CR=n(Ox,"A",{href:!0});var Jzr=s(CR);jeo=r(Jzr,"DebertaV2TokenizerFast"),Jzr.forEach(t),Deo=r(Ox," (DeBERTa-v2 model)"),Ox.forEach(t),Geo=i(S),Hn=n(S,"LI",{});var Vx=s(Hn);Ete=n(Vx,"STRONG",{});var Yzr=s(Ete);Oeo=r(Yzr,"distilbert"),Yzr.forEach(t),Veo=r(Vx," \u2014 "),wR=n(Vx,"A",{href:!0});var Kzr=s(wR);Xeo=r(Kzr,"DistilBertTokenizer"),Kzr.forEach(t),zeo=r(Vx," or "),AR=n(Vx,"A",{href:!0});var Zzr=s(AR);Weo=r(Zzr,"DistilBertTokenizerFast"),Zzr.forEach(t),Qeo=r(Vx," (DistilBERT model)"),Vx.forEach(t),Heo=i(S),Un=n(S,"LI",{});var Xx=s(Un);Cte=n(Xx,"STRONG",{});var eWr=s(Cte);Ueo=r(eWr,"dpr"),eWr.forEach(t),Jeo=r(Xx," \u2014 "),yR=n(Xx,"A",{href:!0});var oWr=s(yR);Yeo=r(oWr,"DPRQuestionEncoderTokenizer"),oWr.forEach(t),Keo=r(Xx," or "),LR=n(Xx,"A",{href:!0});var rWr=s(LR);Zeo=r(rWr,"DPRQuestionEncoderTokenizerFast"),rWr.forEach(t),eoo=r(Xx," (DPR model)"),Xx.forEach(t),ooo=i(S),Jn=n(S,"LI",{});var zx=s(Jn);wte=n(zx,"STRONG",{});var tWr=s(wte);roo=r(tWr,"electra"),tWr.forEach(t),too=r(zx," \u2014 "),xR=n(zx,"A",{href:!0});var aWr=s(xR);aoo=r(aWr,"ElectraTokenizer"),aWr.forEach(t),noo=r(zx," or "),$R=n(zx,"A",{href:!0});var nWr=s($R);soo=r(nWr,"ElectraTokenizerFast"),nWr.forEach(t),loo=r(zx," (ELECTRA model)"),zx.forEach(t),ioo=i(S),Sg=n(S,"LI",{});var Iwe=s(Sg);Ate=n(Iwe,"STRONG",{});var sWr=s(Ate);doo=r(sWr,"flaubert"),sWr.forEach(t),coo=r(Iwe," \u2014 "),kR=n(Iwe,"A",{href:!0});var lWr=s(kR);foo=r(lWr,"FlaubertTokenizer"),lWr.forEach(t),moo=r(Iwe," (FlauBERT model)"),Iwe.forEach(t),goo=i(S),Yn=n(S,"LI",{});var Wx=s(Yn);yte=n(Wx,"STRONG",{});var iWr=s(yte);hoo=r(iWr,"fnet"),iWr.forEach(t),poo=r(Wx," \u2014 "),SR=n(Wx,"A",{href:!0});var dWr=s(SR);_oo=r(dWr,"FNetTokenizer"),dWr.forEach(t),uoo=r(Wx," or "),RR=n(Wx,"A",{href:!0});var cWr=s(RR);boo=r(cWr,"FNetTokenizerFast"),cWr.forEach(t),voo=r(Wx," (FNet model)"),Wx.forEach(t),Foo=i(S),Rg=n(S,"LI",{});var qwe=s(Rg);Lte=n(qwe,"STRONG",{});var fWr=s(Lte);Too=r(fWr,"fsmt"),fWr.forEach(t),Moo=r(qwe," \u2014 "),PR=n(qwe,"A",{href:!0});var mWr=s(PR);Eoo=r(mWr,"FSMTTokenizer"),mWr.forEach(t),Coo=r(qwe," (FairSeq Machine-Translation model)"),qwe.forEach(t),woo=i(S),Kn=n(S,"LI",{});var Qx=s(Kn);xte=n(Qx,"STRONG",{});var gWr=s(xte);Aoo=r(gWr,"funnel"),gWr.forEach(t),yoo=r(Qx," \u2014 "),BR=n(Qx,"A",{href:!0});var hWr=s(BR);Loo=r(hWr,"FunnelTokenizer"),hWr.forEach(t),xoo=r(Qx," or "),IR=n(Qx,"A",{href:!0});var pWr=s(IR);$oo=r(pWr,"FunnelTokenizerFast"),pWr.forEach(t),koo=r(Qx," (Funnel Transformer model)"),Qx.forEach(t),Soo=i(S),Zn=n(S,"LI",{});var Hx=s(Zn);$te=n(Hx,"STRONG",{});var _Wr=s($te);Roo=r(_Wr,"gpt2"),_Wr.forEach(t),Poo=r(Hx," \u2014 "),qR=n(Hx,"A",{href:!0});var uWr=s(qR);Boo=r(uWr,"GPT2Tokenizer"),uWr.forEach(t),Ioo=r(Hx," or "),NR=n(Hx,"A",{href:!0});var bWr=s(NR);qoo=r(bWr,"GPT2TokenizerFast"),bWr.forEach(t),Noo=r(Hx," (OpenAI GPT-2 model)"),Hx.forEach(t),joo=i(S),es=n(S,"LI",{});var Ux=s(es);kte=n(Ux,"STRONG",{});var vWr=s(kte);Doo=r(vWr,"gpt_neo"),vWr.forEach(t),Goo=r(Ux," \u2014 "),jR=n(Ux,"A",{href:!0});var FWr=s(jR);Ooo=r(FWr,"GPT2Tokenizer"),FWr.forEach(t),Voo=r(Ux," or "),DR=n(Ux,"A",{href:!0});var TWr=s(DR);Xoo=r(TWr,"GPT2TokenizerFast"),TWr.forEach(t),zoo=r(Ux," (GPT Neo model)"),Ux.forEach(t),Woo=i(S),os=n(S,"LI",{});var Jx=s(os);Ste=n(Jx,"STRONG",{});var MWr=s(Ste);Qoo=r(MWr,"gptj"),MWr.forEach(t),Hoo=r(Jx," \u2014 "),GR=n(Jx,"A",{href:!0});var EWr=s(GR);Uoo=r(EWr,"GPT2Tokenizer"),EWr.forEach(t),Joo=r(Jx," or "),OR=n(Jx,"A",{href:!0});var CWr=s(OR);Yoo=r(CWr,"GPT2TokenizerFast"),CWr.forEach(t),Koo=r(Jx," (GPT-J model)"),Jx.forEach(t),Zoo=i(S),rs=n(S,"LI",{});var Yx=s(rs);Rte=n(Yx,"STRONG",{});var wWr=s(Rte);ero=r(wWr,"herbert"),wWr.forEach(t),oro=r(Yx," \u2014 "),VR=n(Yx,"A",{href:!0});var AWr=s(VR);rro=r(AWr,"HerbertTokenizer"),AWr.forEach(t),tro=r(Yx," or "),XR=n(Yx,"A",{href:!0});var yWr=s(XR);aro=r(yWr,"HerbertTokenizerFast"),yWr.forEach(t),nro=r(Yx," (HerBERT model)"),Yx.forEach(t),sro=i(S),Pg=n(S,"LI",{});var Nwe=s(Pg);Pte=n(Nwe,"STRONG",{});var LWr=s(Pte);lro=r(LWr,"hubert"),LWr.forEach(t),iro=r(Nwe," \u2014 "),zR=n(Nwe,"A",{href:!0});var xWr=s(zR);dro=r(xWr,"Wav2Vec2CTCTokenizer"),xWr.forEach(t),cro=r(Nwe," (Hubert model)"),Nwe.forEach(t),fro=i(S),ts=n(S,"LI",{});var Kx=s(ts);Bte=n(Kx,"STRONG",{});var $Wr=s(Bte);mro=r($Wr,"ibert"),$Wr.forEach(t),gro=r(Kx," \u2014 "),WR=n(Kx,"A",{href:!0});var kWr=s(WR);hro=r(kWr,"RobertaTokenizer"),kWr.forEach(t),pro=r(Kx," or "),QR=n(Kx,"A",{href:!0});var SWr=s(QR);_ro=r(SWr,"RobertaTokenizerFast"),SWr.forEach(t),uro=r(Kx," (I-BERT model)"),Kx.forEach(t),bro=i(S),as=n(S,"LI",{});var Zx=s(as);Ite=n(Zx,"STRONG",{});var RWr=s(Ite);vro=r(RWr,"layoutlm"),RWr.forEach(t),Fro=r(Zx," \u2014 "),HR=n(Zx,"A",{href:!0});var PWr=s(HR);Tro=r(PWr,"LayoutLMTokenizer"),PWr.forEach(t),Mro=r(Zx," or "),UR=n(Zx,"A",{href:!0});var BWr=s(UR);Ero=r(BWr,"LayoutLMTokenizerFast"),BWr.forEach(t),Cro=r(Zx," (LayoutLM model)"),Zx.forEach(t),wro=i(S),ns=n(S,"LI",{});var e$=s(ns);qte=n(e$,"STRONG",{});var IWr=s(qte);Aro=r(IWr,"layoutlmv2"),IWr.forEach(t),yro=r(e$," \u2014 "),JR=n(e$,"A",{href:!0});var qWr=s(JR);Lro=r(qWr,"LayoutLMv2Tokenizer"),qWr.forEach(t),xro=r(e$," or "),YR=n(e$,"A",{href:!0});var NWr=s(YR);$ro=r(NWr,"LayoutLMv2TokenizerFast"),NWr.forEach(t),kro=r(e$," (LayoutLMv2 model)"),e$.forEach(t),Sro=i(S),ss=n(S,"LI",{});var o$=s(ss);Nte=n(o$,"STRONG",{});var jWr=s(Nte);Rro=r(jWr,"layoutxlm"),jWr.forEach(t),Pro=r(o$," \u2014 "),KR=n(o$,"A",{href:!0});var DWr=s(KR);Bro=r(DWr,"LayoutXLMTokenizer"),DWr.forEach(t),Iro=r(o$," or "),ZR=n(o$,"A",{href:!0});var GWr=s(ZR);qro=r(GWr,"LayoutXLMTokenizerFast"),GWr.forEach(t),Nro=r(o$," (LayoutXLM model)"),o$.forEach(t),jro=i(S),ls=n(S,"LI",{});var r$=s(ls);jte=n(r$,"STRONG",{});var OWr=s(jte);Dro=r(OWr,"led"),OWr.forEach(t),Gro=r(r$," \u2014 "),eP=n(r$,"A",{href:!0});var VWr=s(eP);Oro=r(VWr,"LEDTokenizer"),VWr.forEach(t),Vro=r(r$," or "),oP=n(r$,"A",{href:!0});var XWr=s(oP);Xro=r(XWr,"LEDTokenizerFast"),XWr.forEach(t),zro=r(r$," (LED model)"),r$.forEach(t),Wro=i(S),is=n(S,"LI",{});var t$=s(is);Dte=n(t$,"STRONG",{});var zWr=s(Dte);Qro=r(zWr,"longformer"),zWr.forEach(t),Hro=r(t$," \u2014 "),rP=n(t$,"A",{href:!0});var WWr=s(rP);Uro=r(WWr,"LongformerTokenizer"),WWr.forEach(t),Jro=r(t$," or "),tP=n(t$,"A",{href:!0});var QWr=s(tP);Yro=r(QWr,"LongformerTokenizerFast"),QWr.forEach(t),Kro=r(t$," (Longformer model)"),t$.forEach(t),Zro=i(S),Bg=n(S,"LI",{});var jwe=s(Bg);Gte=n(jwe,"STRONG",{});var HWr=s(Gte);eto=r(HWr,"luke"),HWr.forEach(t),oto=r(jwe," \u2014 "),aP=n(jwe,"A",{href:!0});var UWr=s(aP);rto=r(UWr,"LukeTokenizer"),UWr.forEach(t),tto=r(jwe," (LUKE model)"),jwe.forEach(t),ato=i(S),ds=n(S,"LI",{});var a$=s(ds);Ote=n(a$,"STRONG",{});var JWr=s(Ote);nto=r(JWr,"lxmert"),JWr.forEach(t),sto=r(a$," \u2014 "),nP=n(a$,"A",{href:!0});var YWr=s(nP);lto=r(YWr,"LxmertTokenizer"),YWr.forEach(t),ito=r(a$," or "),sP=n(a$,"A",{href:!0});var KWr=s(sP);dto=r(KWr,"LxmertTokenizerFast"),KWr.forEach(t),cto=r(a$," (LXMERT model)"),a$.forEach(t),fto=i(S),Ig=n(S,"LI",{});var Dwe=s(Ig);Vte=n(Dwe,"STRONG",{});var ZWr=s(Vte);mto=r(ZWr,"m2m_100"),ZWr.forEach(t),gto=r(Dwe," \u2014 "),lP=n(Dwe,"A",{href:!0});var eQr=s(lP);hto=r(eQr,"M2M100Tokenizer"),eQr.forEach(t),pto=r(Dwe," (M2M100 model)"),Dwe.forEach(t),_to=i(S),qg=n(S,"LI",{});var Gwe=s(qg);Xte=n(Gwe,"STRONG",{});var oQr=s(Xte);uto=r(oQr,"marian"),oQr.forEach(t),bto=r(Gwe," \u2014 "),iP=n(Gwe,"A",{href:!0});var rQr=s(iP);vto=r(rQr,"MarianTokenizer"),rQr.forEach(t),Fto=r(Gwe," (Marian model)"),Gwe.forEach(t),Tto=i(S),cs=n(S,"LI",{});var n$=s(cs);zte=n(n$,"STRONG",{});var tQr=s(zte);Mto=r(tQr,"mbart"),tQr.forEach(t),Eto=r(n$," \u2014 "),dP=n(n$,"A",{href:!0});var aQr=s(dP);Cto=r(aQr,"MBartTokenizer"),aQr.forEach(t),wto=r(n$," or "),cP=n(n$,"A",{href:!0});var nQr=s(cP);Ato=r(nQr,"MBartTokenizerFast"),nQr.forEach(t),yto=r(n$," (mBART model)"),n$.forEach(t),Lto=i(S),fs=n(S,"LI",{});var s$=s(fs);Wte=n(s$,"STRONG",{});var sQr=s(Wte);xto=r(sQr,"mbart50"),sQr.forEach(t),$to=r(s$," \u2014 "),fP=n(s$,"A",{href:!0});var lQr=s(fP);kto=r(lQr,"MBart50Tokenizer"),lQr.forEach(t),Sto=r(s$," or "),mP=n(s$,"A",{href:!0});var iQr=s(mP);Rto=r(iQr,"MBart50TokenizerFast"),iQr.forEach(t),Pto=r(s$," (mBART-50 model)"),s$.forEach(t),Bto=i(S),ms=n(S,"LI",{});var l$=s(ms);Qte=n(l$,"STRONG",{});var dQr=s(Qte);Ito=r(dQr,"megatron-bert"),dQr.forEach(t),qto=r(l$," \u2014 "),gP=n(l$,"A",{href:!0});var cQr=s(gP);Nto=r(cQr,"BertTokenizer"),cQr.forEach(t),jto=r(l$," or "),hP=n(l$,"A",{href:!0});var fQr=s(hP);Dto=r(fQr,"BertTokenizerFast"),fQr.forEach(t),Gto=r(l$," (MegatronBert model)"),l$.forEach(t),Oto=i(S),Ng=n(S,"LI",{});var Owe=s(Ng);Hte=n(Owe,"STRONG",{});var mQr=s(Hte);Vto=r(mQr,"mluke"),mQr.forEach(t),Xto=r(Owe," \u2014 "),pP=n(Owe,"A",{href:!0});var gQr=s(pP);zto=r(gQr,"MLukeTokenizer"),gQr.forEach(t),Wto=r(Owe," (mLUKE model)"),Owe.forEach(t),Qto=i(S),gs=n(S,"LI",{});var i$=s(gs);Ute=n(i$,"STRONG",{});var hQr=s(Ute);Hto=r(hQr,"mobilebert"),hQr.forEach(t),Uto=r(i$," \u2014 "),_P=n(i$,"A",{href:!0});var pQr=s(_P);Jto=r(pQr,"MobileBertTokenizer"),pQr.forEach(t),Yto=r(i$," or "),uP=n(i$,"A",{href:!0});var _Qr=s(uP);Kto=r(_Qr,"MobileBertTokenizerFast"),_Qr.forEach(t),Zto=r(i$," (MobileBERT model)"),i$.forEach(t),eao=i(S),hs=n(S,"LI",{});var d$=s(hs);Jte=n(d$,"STRONG",{});var uQr=s(Jte);oao=r(uQr,"mpnet"),uQr.forEach(t),rao=r(d$," \u2014 "),bP=n(d$,"A",{href:!0});var bQr=s(bP);tao=r(bQr,"MPNetTokenizer"),bQr.forEach(t),aao=r(d$," or "),vP=n(d$,"A",{href:!0});var vQr=s(vP);nao=r(vQr,"MPNetTokenizerFast"),vQr.forEach(t),sao=r(d$," (MPNet model)"),d$.forEach(t),lao=i(S),ps=n(S,"LI",{});var c$=s(ps);Yte=n(c$,"STRONG",{});var FQr=s(Yte);iao=r(FQr,"mt5"),FQr.forEach(t),dao=r(c$," \u2014 "),FP=n(c$,"A",{href:!0});var TQr=s(FP);cao=r(TQr,"MT5Tokenizer"),TQr.forEach(t),fao=r(c$," or "),TP=n(c$,"A",{href:!0});var MQr=s(TP);mao=r(MQr,"MT5TokenizerFast"),MQr.forEach(t),gao=r(c$," (mT5 model)"),c$.forEach(t),hao=i(S),_s=n(S,"LI",{});var f$=s(_s);Kte=n(f$,"STRONG",{});var EQr=s(Kte);pao=r(EQr,"nystromformer"),EQr.forEach(t),_ao=r(f$," \u2014 "),MP=n(f$,"A",{href:!0});var CQr=s(MP);uao=r(CQr,"AlbertTokenizer"),CQr.forEach(t),bao=r(f$," or "),EP=n(f$,"A",{href:!0});var wQr=s(EP);vao=r(wQr,"AlbertTokenizerFast"),wQr.forEach(t),Fao=r(f$," (Nystromformer model)"),f$.forEach(t),Tao=i(S),us=n(S,"LI",{});var m$=s(us);Zte=n(m$,"STRONG",{});var AQr=s(Zte);Mao=r(AQr,"openai-gpt"),AQr.forEach(t),Eao=r(m$," \u2014 "),CP=n(m$,"A",{href:!0});var yQr=s(CP);Cao=r(yQr,"OpenAIGPTTokenizer"),yQr.forEach(t),wao=r(m$," or "),wP=n(m$,"A",{href:!0});var LQr=s(wP);Aao=r(LQr,"OpenAIGPTTokenizerFast"),LQr.forEach(t),yao=r(m$," (OpenAI GPT model)"),m$.forEach(t),Lao=i(S),jg=n(S,"LI",{});var Vwe=s(jg);eae=n(Vwe,"STRONG",{});var xQr=s(eae);xao=r(xQr,"opt"),xQr.forEach(t),$ao=r(Vwe," \u2014 "),AP=n(Vwe,"A",{href:!0});var $Qr=s(AP);kao=r($Qr,"GPT2Tokenizer"),$Qr.forEach(t),Sao=r(Vwe," (OPT model)"),Vwe.forEach(t),Rao=i(S),bs=n(S,"LI",{});var g$=s(bs);oae=n(g$,"STRONG",{});var kQr=s(oae);Pao=r(kQr,"pegasus"),kQr.forEach(t),Bao=r(g$," \u2014 "),yP=n(g$,"A",{href:!0});var SQr=s(yP);Iao=r(SQr,"PegasusTokenizer"),SQr.forEach(t),qao=r(g$," or "),LP=n(g$,"A",{href:!0});var RQr=s(LP);Nao=r(RQr,"PegasusTokenizerFast"),RQr.forEach(t),jao=r(g$," (Pegasus model)"),g$.forEach(t),Dao=i(S),Dg=n(S,"LI",{});var Xwe=s(Dg);rae=n(Xwe,"STRONG",{});var PQr=s(rae);Gao=r(PQr,"perceiver"),PQr.forEach(t),Oao=r(Xwe," \u2014 "),xP=n(Xwe,"A",{href:!0});var BQr=s(xP);Vao=r(BQr,"PerceiverTokenizer"),BQr.forEach(t),Xao=r(Xwe," (Perceiver model)"),Xwe.forEach(t),zao=i(S),vs=n(S,"LI",{});var h$=s(vs);tae=n(h$,"STRONG",{});var IQr=s(tae);Wao=r(IQr,"phobert"),IQr.forEach(t),Qao=r(h$," \u2014 "),$P=n(h$,"A",{href:!0});var qQr=s($P);Hao=r(qQr,"PhobertTokenizer"),qQr.forEach(t),Uao=r(h$," or "),kP=n(h$,"A",{href:!0});var NQr=s(kP);Jao=r(NQr,"PhobertTokenizerFast"),NQr.forEach(t),Yao=r(h$," (PhoBERT model)"),h$.forEach(t),Kao=i(S),Gg=n(S,"LI",{});var zwe=s(Gg);aae=n(zwe,"STRONG",{});var jQr=s(aae);Zao=r(jQr,"plbart"),jQr.forEach(t),eno=r(zwe," \u2014 "),SP=n(zwe,"A",{href:!0});var DQr=s(SP);ono=r(DQr,"PLBartTokenizer"),DQr.forEach(t),rno=r(zwe," (PLBart model)"),zwe.forEach(t),tno=i(S),Og=n(S,"LI",{});var Wwe=s(Og);nae=n(Wwe,"STRONG",{});var GQr=s(nae);ano=r(GQr,"prophetnet"),GQr.forEach(t),nno=r(Wwe," \u2014 "),RP=n(Wwe,"A",{href:!0});var OQr=s(RP);sno=r(OQr,"ProphetNetTokenizer"),OQr.forEach(t),lno=r(Wwe," (ProphetNet model)"),Wwe.forEach(t),ino=i(S),Fs=n(S,"LI",{});var p$=s(Fs);sae=n(p$,"STRONG",{});var VQr=s(sae);dno=r(VQr,"qdqbert"),VQr.forEach(t),cno=r(p$," \u2014 "),PP=n(p$,"A",{href:!0});var XQr=s(PP);fno=r(XQr,"BertTokenizer"),XQr.forEach(t),mno=r(p$," or "),BP=n(p$,"A",{href:!0});var zQr=s(BP);gno=r(zQr,"BertTokenizerFast"),zQr.forEach(t),hno=r(p$," (QDQBert model)"),p$.forEach(t),pno=i(S),Vg=n(S,"LI",{});var Qwe=s(Vg);lae=n(Qwe,"STRONG",{});var WQr=s(lae);_no=r(WQr,"rag"),WQr.forEach(t),uno=r(Qwe," \u2014 "),IP=n(Qwe,"A",{href:!0});var QQr=s(IP);bno=r(QQr,"RagTokenizer"),QQr.forEach(t),vno=r(Qwe," (RAG model)"),Qwe.forEach(t),Fno=i(S),Ts=n(S,"LI",{});var _$=s(Ts);iae=n(_$,"STRONG",{});var HQr=s(iae);Tno=r(HQr,"realm"),HQr.forEach(t),Mno=r(_$," \u2014 "),qP=n(_$,"A",{href:!0});var UQr=s(qP);Eno=r(UQr,"RealmTokenizer"),UQr.forEach(t),Cno=r(_$," or "),NP=n(_$,"A",{href:!0});var JQr=s(NP);wno=r(JQr,"RealmTokenizerFast"),JQr.forEach(t),Ano=r(_$," (Realm model)"),_$.forEach(t),yno=i(S),Ms=n(S,"LI",{});var u$=s(Ms);dae=n(u$,"STRONG",{});var YQr=s(dae);Lno=r(YQr,"reformer"),YQr.forEach(t),xno=r(u$," \u2014 "),jP=n(u$,"A",{href:!0});var KQr=s(jP);$no=r(KQr,"ReformerTokenizer"),KQr.forEach(t),kno=r(u$," or "),DP=n(u$,"A",{href:!0});var ZQr=s(DP);Sno=r(ZQr,"ReformerTokenizerFast"),ZQr.forEach(t),Rno=r(u$," (Reformer model)"),u$.forEach(t),Pno=i(S),Es=n(S,"LI",{});var b$=s(Es);cae=n(b$,"STRONG",{});var eHr=s(cae);Bno=r(eHr,"rembert"),eHr.forEach(t),Ino=r(b$," \u2014 "),GP=n(b$,"A",{href:!0});var oHr=s(GP);qno=r(oHr,"RemBertTokenizer"),oHr.forEach(t),Nno=r(b$," or "),OP=n(b$,"A",{href:!0});var rHr=s(OP);jno=r(rHr,"RemBertTokenizerFast"),rHr.forEach(t),Dno=r(b$," (RemBERT model)"),b$.forEach(t),Gno=i(S),Cs=n(S,"LI",{});var v$=s(Cs);fae=n(v$,"STRONG",{});var tHr=s(fae);Ono=r(tHr,"retribert"),tHr.forEach(t),Vno=r(v$," \u2014 "),VP=n(v$,"A",{href:!0});var aHr=s(VP);Xno=r(aHr,"RetriBertTokenizer"),aHr.forEach(t),zno=r(v$," or "),XP=n(v$,"A",{href:!0});var nHr=s(XP);Wno=r(nHr,"RetriBertTokenizerFast"),nHr.forEach(t),Qno=r(v$," (RetriBERT model)"),v$.forEach(t),Hno=i(S),ws=n(S,"LI",{});var F$=s(ws);mae=n(F$,"STRONG",{});var sHr=s(mae);Uno=r(sHr,"roberta"),sHr.forEach(t),Jno=r(F$," \u2014 "),zP=n(F$,"A",{href:!0});var lHr=s(zP);Yno=r(lHr,"RobertaTokenizer"),lHr.forEach(t),Kno=r(F$," or "),WP=n(F$,"A",{href:!0});var iHr=s(WP);Zno=r(iHr,"RobertaTokenizerFast"),iHr.forEach(t),eso=r(F$," (RoBERTa model)"),F$.forEach(t),oso=i(S),As=n(S,"LI",{});var T$=s(As);gae=n(T$,"STRONG",{});var dHr=s(gae);rso=r(dHr,"roformer"),dHr.forEach(t),tso=r(T$," \u2014 "),QP=n(T$,"A",{href:!0});var cHr=s(QP);aso=r(cHr,"RoFormerTokenizer"),cHr.forEach(t),nso=r(T$," or "),HP=n(T$,"A",{href:!0});var fHr=s(HP);sso=r(fHr,"RoFormerTokenizerFast"),fHr.forEach(t),lso=r(T$," (RoFormer model)"),T$.forEach(t),iso=i(S),Xg=n(S,"LI",{});var Hwe=s(Xg);hae=n(Hwe,"STRONG",{});var mHr=s(hae);dso=r(mHr,"speech_to_text"),mHr.forEach(t),cso=r(Hwe," \u2014 "),UP=n(Hwe,"A",{href:!0});var gHr=s(UP);fso=r(gHr,"Speech2TextTokenizer"),gHr.forEach(t),mso=r(Hwe," (Speech2Text model)"),Hwe.forEach(t),gso=i(S),zg=n(S,"LI",{});var Uwe=s(zg);pae=n(Uwe,"STRONG",{});var hHr=s(pae);hso=r(hHr,"speech_to_text_2"),hHr.forEach(t),pso=r(Uwe," \u2014 "),JP=n(Uwe,"A",{href:!0});var pHr=s(JP);_so=r(pHr,"Speech2Text2Tokenizer"),pHr.forEach(t),uso=r(Uwe," (Speech2Text2 model)"),Uwe.forEach(t),bso=i(S),ys=n(S,"LI",{});var M$=s(ys);_ae=n(M$,"STRONG",{});var _Hr=s(_ae);vso=r(_Hr,"splinter"),_Hr.forEach(t),Fso=r(M$," \u2014 "),YP=n(M$,"A",{href:!0});var uHr=s(YP);Tso=r(uHr,"SplinterTokenizer"),uHr.forEach(t),Mso=r(M$," or "),KP=n(M$,"A",{href:!0});var bHr=s(KP);Eso=r(bHr,"SplinterTokenizerFast"),bHr.forEach(t),Cso=r(M$," (Splinter model)"),M$.forEach(t),wso=i(S),Ls=n(S,"LI",{});var E$=s(Ls);uae=n(E$,"STRONG",{});var vHr=s(uae);Aso=r(vHr,"squeezebert"),vHr.forEach(t),yso=r(E$," \u2014 "),ZP=n(E$,"A",{href:!0});var FHr=s(ZP);Lso=r(FHr,"SqueezeBertTokenizer"),FHr.forEach(t),xso=r(E$," or "),eB=n(E$,"A",{href:!0});var THr=s(eB);$so=r(THr,"SqueezeBertTokenizerFast"),THr.forEach(t),kso=r(E$," (SqueezeBERT model)"),E$.forEach(t),Sso=i(S),xs=n(S,"LI",{});var C$=s(xs);bae=n(C$,"STRONG",{});var MHr=s(bae);Rso=r(MHr,"t5"),MHr.forEach(t),Pso=r(C$," \u2014 "),oB=n(C$,"A",{href:!0});var EHr=s(oB);Bso=r(EHr,"T5Tokenizer"),EHr.forEach(t),Iso=r(C$," or "),rB=n(C$,"A",{href:!0});var CHr=s(rB);qso=r(CHr,"T5TokenizerFast"),CHr.forEach(t),Nso=r(C$," (T5 model)"),C$.forEach(t),jso=i(S),Wg=n(S,"LI",{});var Jwe=s(Wg);vae=n(Jwe,"STRONG",{});var wHr=s(vae);Dso=r(wHr,"tapas"),wHr.forEach(t),Gso=r(Jwe," \u2014 "),tB=n(Jwe,"A",{href:!0});var AHr=s(tB);Oso=r(AHr,"TapasTokenizer"),AHr.forEach(t),Vso=r(Jwe," (TAPAS model)"),Jwe.forEach(t),Xso=i(S),Qg=n(S,"LI",{});var Ywe=s(Qg);Fae=n(Ywe,"STRONG",{});var yHr=s(Fae);zso=r(yHr,"tapex"),yHr.forEach(t),Wso=r(Ywe," \u2014 "),aB=n(Ywe,"A",{href:!0});var LHr=s(aB);Qso=r(LHr,"TapexTokenizer"),LHr.forEach(t),Hso=r(Ywe," (TAPEX model)"),Ywe.forEach(t),Uso=i(S),Hg=n(S,"LI",{});var Kwe=s(Hg);Tae=n(Kwe,"STRONG",{});var xHr=s(Tae);Jso=r(xHr,"transfo-xl"),xHr.forEach(t),Yso=r(Kwe," \u2014 "),nB=n(Kwe,"A",{href:!0});var $Hr=s(nB);Kso=r($Hr,"TransfoXLTokenizer"),$Hr.forEach(t),Zso=r(Kwe," (Transformer-XL model)"),Kwe.forEach(t),elo=i(S),$s=n(S,"LI",{});var w$=s($s);Mae=n(w$,"STRONG",{});var kHr=s(Mae);olo=r(kHr,"visual_bert"),kHr.forEach(t),rlo=r(w$," \u2014 "),sB=n(w$,"A",{href:!0});var SHr=s(sB);tlo=r(SHr,"BertTokenizer"),SHr.forEach(t),alo=r(w$," or "),lB=n(w$,"A",{href:!0});var RHr=s(lB);nlo=r(RHr,"BertTokenizerFast"),RHr.forEach(t),slo=r(w$," (VisualBert model)"),w$.forEach(t),llo=i(S),Ug=n(S,"LI",{});var Zwe=s(Ug);Eae=n(Zwe,"STRONG",{});var PHr=s(Eae);ilo=r(PHr,"wav2vec2"),PHr.forEach(t),dlo=r(Zwe," \u2014 "),iB=n(Zwe,"A",{href:!0});var BHr=s(iB);clo=r(BHr,"Wav2Vec2CTCTokenizer"),BHr.forEach(t),flo=r(Zwe," (Wav2Vec2 model)"),Zwe.forEach(t),mlo=i(S),Jg=n(S,"LI",{});var e0e=s(Jg);Cae=n(e0e,"STRONG",{});var IHr=s(Cae);glo=r(IHr,"wav2vec2-conformer"),IHr.forEach(t),hlo=r(e0e," \u2014 "),dB=n(e0e,"A",{href:!0});var qHr=s(dB);plo=r(qHr,"Wav2Vec2CTCTokenizer"),qHr.forEach(t),_lo=r(e0e," (Wav2Vec2-Conformer model)"),e0e.forEach(t),ulo=i(S),Yg=n(S,"LI",{});var o0e=s(Yg);wae=n(o0e,"STRONG",{});var NHr=s(wae);blo=r(NHr,"wav2vec2_phoneme"),NHr.forEach(t),vlo=r(o0e," \u2014 "),cB=n(o0e,"A",{href:!0});var jHr=s(cB);Flo=r(jHr,"Wav2Vec2PhonemeCTCTokenizer"),jHr.forEach(t),Tlo=r(o0e," (Wav2Vec2Phoneme model)"),o0e.forEach(t),Mlo=i(S),ks=n(S,"LI",{});var A$=s(ks);Aae=n(A$,"STRONG",{});var DHr=s(Aae);Elo=r(DHr,"xglm"),DHr.forEach(t),Clo=r(A$," \u2014 "),fB=n(A$,"A",{href:!0});var GHr=s(fB);wlo=r(GHr,"XGLMTokenizer"),GHr.forEach(t),Alo=r(A$," or "),mB=n(A$,"A",{href:!0});var OHr=s(mB);ylo=r(OHr,"XGLMTokenizerFast"),OHr.forEach(t),Llo=r(A$," (XGLM model)"),A$.forEach(t),xlo=i(S),Kg=n(S,"LI",{});var r0e=s(Kg);yae=n(r0e,"STRONG",{});var VHr=s(yae);$lo=r(VHr,"xlm"),VHr.forEach(t),klo=r(r0e," \u2014 "),gB=n(r0e,"A",{href:!0});var XHr=s(gB);Slo=r(XHr,"XLMTokenizer"),XHr.forEach(t),Rlo=r(r0e," (XLM model)"),r0e.forEach(t),Plo=i(S),Zg=n(S,"LI",{});var t0e=s(Zg);Lae=n(t0e,"STRONG",{});var zHr=s(Lae);Blo=r(zHr,"xlm-prophetnet"),zHr.forEach(t),Ilo=r(t0e," \u2014 "),hB=n(t0e,"A",{href:!0});var WHr=s(hB);qlo=r(WHr,"XLMProphetNetTokenizer"),WHr.forEach(t),Nlo=r(t0e," (XLMProphetNet model)"),t0e.forEach(t),jlo=i(S),Ss=n(S,"LI",{});var y$=s(Ss);xae=n(y$,"STRONG",{});var QHr=s(xae);Dlo=r(QHr,"xlm-roberta"),QHr.forEach(t),Glo=r(y$," \u2014 "),pB=n(y$,"A",{href:!0});var HHr=s(pB);Olo=r(HHr,"XLMRobertaTokenizer"),HHr.forEach(t),Vlo=r(y$," or "),_B=n(y$,"A",{href:!0});var UHr=s(_B);Xlo=r(UHr,"XLMRobertaTokenizerFast"),UHr.forEach(t),zlo=r(y$," (XLM-RoBERTa model)"),y$.forEach(t),Wlo=i(S),Rs=n(S,"LI",{});var L$=s(Rs);$ae=n(L$,"STRONG",{});var JHr=s($ae);Qlo=r(JHr,"xlm-roberta-xl"),JHr.forEach(t),Hlo=r(L$," \u2014 "),uB=n(L$,"A",{href:!0});var YHr=s(uB);Ulo=r(YHr,"RobertaTokenizer"),YHr.forEach(t),Jlo=r(L$," or "),bB=n(L$,"A",{href:!0});var KHr=s(bB);Ylo=r(KHr,"RobertaTokenizerFast"),KHr.forEach(t),Klo=r(L$," (XLM-RoBERTa-XL model)"),L$.forEach(t),Zlo=i(S),Ps=n(S,"LI",{});var x$=s(Ps);kae=n(x$,"STRONG",{});var ZHr=s(kae);eio=r(ZHr,"xlnet"),ZHr.forEach(t),oio=r(x$," \u2014 "),vB=n(x$,"A",{href:!0});var eUr=s(vB);rio=r(eUr,"XLNetTokenizer"),eUr.forEach(t),tio=r(x$," or "),FB=n(x$,"A",{href:!0});var oUr=s(FB);aio=r(oUr,"XLNetTokenizerFast"),oUr.forEach(t),nio=r(x$," (XLNet model)"),x$.forEach(t),sio=i(S),Bs=n(S,"LI",{});var $$=s(Bs);Sae=n($$,"STRONG",{});var rUr=s(Sae);lio=r(rUr,"yoso"),rUr.forEach(t),iio=r($$," \u2014 "),TB=n($$,"A",{href:!0});var tUr=s(TB);dio=r(tUr,"AlbertTokenizer"),tUr.forEach(t),cio=r($$," or "),MB=n($$,"A",{href:!0});var aUr=s(MB);fio=r(aUr,"AlbertTokenizerFast"),aUr.forEach(t),mio=r($$," (YOSO model)"),$$.forEach(t),S.forEach(t),gio=i(Ds),T(eh.$$.fragment,Ds),Ds.forEach(t),hio=i(js),oh=n(js,"DIV",{class:!0});var cje=s(oh);T(y6.$$.fragment,cje),pio=i(cje),Rae=n(cje,"P",{});var nUr=s(Rae);_io=r(nUr,"Register a new tokenizer in this mapping."),nUr.forEach(t),cje.forEach(t),js.forEach(t),fqe=i(f),Ci=n(f,"H2",{class:!0});var fje=s(Ci);rh=n(fje,"A",{id:!0,class:!0,href:!0});var sUr=s(rh);Pae=n(sUr,"SPAN",{});var lUr=s(Pae);T(L6.$$.fragment,lUr),lUr.forEach(t),sUr.forEach(t),uio=i(fje),Bae=n(fje,"SPAN",{});var iUr=s(Bae);bio=r(iUr,"AutoFeatureExtractor"),iUr.forEach(t),fje.forEach(t),mqe=i(f),Ao=n(f,"DIV",{class:!0});var Gs=s(Ao);T(x6.$$.fragment,Gs),vio=i(Gs),$6=n(Gs,"P",{});var mje=s($6);Fio=r(mje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),EB=n(mje,"A",{href:!0});var dUr=s(EB);Tio=r(dUr,"AutoFeatureExtractor.from_pretrained()"),dUr.forEach(t),Mio=r(mje," class method."),mje.forEach(t),Eio=i(Gs),k6=n(Gs,"P",{});var gje=s(k6);Cio=r(gje,"This class cannot be instantiated directly using "),Iae=n(gje,"CODE",{});var cUr=s(Iae);wio=r(cUr,"__init__()"),cUr.forEach(t),Aio=r(gje," (throws an error)."),gje.forEach(t),yio=i(Gs),He=n(Gs,"DIV",{class:!0});var Zt=s(He);T(S6.$$.fragment,Zt),Lio=i(Zt),qae=n(Zt,"P",{});var fUr=s(qae);xio=r(fUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fUr.forEach(t),$io=i(Zt),ya=n(Zt,"P",{});var u0=s(ya);kio=r(u0,"The feature extractor class to instantiate is selected based on the "),Nae=n(u0,"CODE",{});var mUr=s(Nae);Sio=r(mUr,"model_type"),mUr.forEach(t),Rio=r(u0,` property of the config object
(either passed as an argument or loaded from `),jae=n(u0,"CODE",{});var gUr=s(jae);Pio=r(gUr,"pretrained_model_name_or_path"),gUr.forEach(t),Bio=r(u0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Dae=n(u0,"CODE",{});var hUr=s(Dae);Iio=r(hUr,"pretrained_model_name_or_path"),hUr.forEach(t),qio=r(u0,":"),u0.forEach(t),Nio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);th=n(re,"LI",{});var a0e=s(th);Gae=n(a0e,"STRONG",{});var pUr=s(Gae);jio=r(pUr,"beit"),pUr.forEach(t),Dio=r(a0e," \u2014 "),CB=n(a0e,"A",{href:!0});var _Ur=s(CB);Gio=r(_Ur,"BeitFeatureExtractor"),_Ur.forEach(t),Oio=r(a0e," (BEiT model)"),a0e.forEach(t),Vio=i(re),ah=n(re,"LI",{});var n0e=s(ah);Oae=n(n0e,"STRONG",{});var uUr=s(Oae);Xio=r(uUr,"clip"),uUr.forEach(t),zio=r(n0e," \u2014 "),wB=n(n0e,"A",{href:!0});var bUr=s(wB);Wio=r(bUr,"CLIPFeatureExtractor"),bUr.forEach(t),Qio=r(n0e," (CLIP model)"),n0e.forEach(t),Hio=i(re),nh=n(re,"LI",{});var s0e=s(nh);Vae=n(s0e,"STRONG",{});var vUr=s(Vae);Uio=r(vUr,"convnext"),vUr.forEach(t),Jio=r(s0e," \u2014 "),AB=n(s0e,"A",{href:!0});var FUr=s(AB);Yio=r(FUr,"ConvNextFeatureExtractor"),FUr.forEach(t),Kio=r(s0e," (ConvNext model)"),s0e.forEach(t),Zio=i(re),sh=n(re,"LI",{});var l0e=s(sh);Xae=n(l0e,"STRONG",{});var TUr=s(Xae);edo=r(TUr,"cvt"),TUr.forEach(t),odo=r(l0e," \u2014 "),yB=n(l0e,"A",{href:!0});var MUr=s(yB);rdo=r(MUr,"ConvNextFeatureExtractor"),MUr.forEach(t),tdo=r(l0e," (CvT model)"),l0e.forEach(t),ado=i(re),lh=n(re,"LI",{});var i0e=s(lh);zae=n(i0e,"STRONG",{});var EUr=s(zae);ndo=r(EUr,"data2vec-audio"),EUr.forEach(t),sdo=r(i0e," \u2014 "),LB=n(i0e,"A",{href:!0});var CUr=s(LB);ldo=r(CUr,"Wav2Vec2FeatureExtractor"),CUr.forEach(t),ido=r(i0e," (Data2VecAudio model)"),i0e.forEach(t),ddo=i(re),ih=n(re,"LI",{});var d0e=s(ih);Wae=n(d0e,"STRONG",{});var wUr=s(Wae);cdo=r(wUr,"data2vec-vision"),wUr.forEach(t),fdo=r(d0e," \u2014 "),xB=n(d0e,"A",{href:!0});var AUr=s(xB);mdo=r(AUr,"BeitFeatureExtractor"),AUr.forEach(t),gdo=r(d0e," (Data2VecVision model)"),d0e.forEach(t),hdo=i(re),dh=n(re,"LI",{});var c0e=s(dh);Qae=n(c0e,"STRONG",{});var yUr=s(Qae);pdo=r(yUr,"deit"),yUr.forEach(t),_do=r(c0e," \u2014 "),$B=n(c0e,"A",{href:!0});var LUr=s($B);udo=r(LUr,"DeiTFeatureExtractor"),LUr.forEach(t),bdo=r(c0e," (DeiT model)"),c0e.forEach(t),vdo=i(re),ch=n(re,"LI",{});var f0e=s(ch);Hae=n(f0e,"STRONG",{});var xUr=s(Hae);Fdo=r(xUr,"detr"),xUr.forEach(t),Tdo=r(f0e," \u2014 "),kB=n(f0e,"A",{href:!0});var $Ur=s(kB);Mdo=r($Ur,"DetrFeatureExtractor"),$Ur.forEach(t),Edo=r(f0e," (DETR model)"),f0e.forEach(t),Cdo=i(re),fh=n(re,"LI",{});var m0e=s(fh);Uae=n(m0e,"STRONG",{});var kUr=s(Uae);wdo=r(kUr,"dpt"),kUr.forEach(t),Ado=r(m0e," \u2014 "),SB=n(m0e,"A",{href:!0});var SUr=s(SB);ydo=r(SUr,"DPTFeatureExtractor"),SUr.forEach(t),Ldo=r(m0e," (DPT model)"),m0e.forEach(t),xdo=i(re),mh=n(re,"LI",{});var g0e=s(mh);Jae=n(g0e,"STRONG",{});var RUr=s(Jae);$do=r(RUr,"flava"),RUr.forEach(t),kdo=r(g0e," \u2014 "),RB=n(g0e,"A",{href:!0});var PUr=s(RB);Sdo=r(PUr,"FlavaFeatureExtractor"),PUr.forEach(t),Rdo=r(g0e," (Flava model)"),g0e.forEach(t),Pdo=i(re),gh=n(re,"LI",{});var h0e=s(gh);Yae=n(h0e,"STRONG",{});var BUr=s(Yae);Bdo=r(BUr,"glpn"),BUr.forEach(t),Ido=r(h0e," \u2014 "),PB=n(h0e,"A",{href:!0});var IUr=s(PB);qdo=r(IUr,"GLPNFeatureExtractor"),IUr.forEach(t),Ndo=r(h0e," (GLPN model)"),h0e.forEach(t),jdo=i(re),hh=n(re,"LI",{});var p0e=s(hh);Kae=n(p0e,"STRONG",{});var qUr=s(Kae);Ddo=r(qUr,"hubert"),qUr.forEach(t),Gdo=r(p0e," \u2014 "),BB=n(p0e,"A",{href:!0});var NUr=s(BB);Odo=r(NUr,"Wav2Vec2FeatureExtractor"),NUr.forEach(t),Vdo=r(p0e," (Hubert model)"),p0e.forEach(t),Xdo=i(re),ph=n(re,"LI",{});var _0e=s(ph);Zae=n(_0e,"STRONG",{});var jUr=s(Zae);zdo=r(jUr,"layoutlmv2"),jUr.forEach(t),Wdo=r(_0e," \u2014 "),IB=n(_0e,"A",{href:!0});var DUr=s(IB);Qdo=r(DUr,"LayoutLMv2FeatureExtractor"),DUr.forEach(t),Hdo=r(_0e," (LayoutLMv2 model)"),_0e.forEach(t),Udo=i(re),_h=n(re,"LI",{});var u0e=s(_h);ene=n(u0e,"STRONG",{});var GUr=s(ene);Jdo=r(GUr,"maskformer"),GUr.forEach(t),Ydo=r(u0e," \u2014 "),qB=n(u0e,"A",{href:!0});var OUr=s(qB);Kdo=r(OUr,"MaskFormerFeatureExtractor"),OUr.forEach(t),Zdo=r(u0e," (MaskFormer model)"),u0e.forEach(t),eco=i(re),uh=n(re,"LI",{});var b0e=s(uh);one=n(b0e,"STRONG",{});var VUr=s(one);oco=r(VUr,"perceiver"),VUr.forEach(t),rco=r(b0e," \u2014 "),NB=n(b0e,"A",{href:!0});var XUr=s(NB);tco=r(XUr,"PerceiverFeatureExtractor"),XUr.forEach(t),aco=r(b0e," (Perceiver model)"),b0e.forEach(t),nco=i(re),bh=n(re,"LI",{});var v0e=s(bh);rne=n(v0e,"STRONG",{});var zUr=s(rne);sco=r(zUr,"poolformer"),zUr.forEach(t),lco=r(v0e," \u2014 "),jB=n(v0e,"A",{href:!0});var WUr=s(jB);ico=r(WUr,"PoolFormerFeatureExtractor"),WUr.forEach(t),dco=r(v0e," (PoolFormer model)"),v0e.forEach(t),cco=i(re),vh=n(re,"LI",{});var F0e=s(vh);tne=n(F0e,"STRONG",{});var QUr=s(tne);fco=r(QUr,"regnet"),QUr.forEach(t),mco=r(F0e," \u2014 "),DB=n(F0e,"A",{href:!0});var HUr=s(DB);gco=r(HUr,"ConvNextFeatureExtractor"),HUr.forEach(t),hco=r(F0e," (RegNet model)"),F0e.forEach(t),pco=i(re),Fh=n(re,"LI",{});var T0e=s(Fh);ane=n(T0e,"STRONG",{});var UUr=s(ane);_co=r(UUr,"resnet"),UUr.forEach(t),uco=r(T0e," \u2014 "),GB=n(T0e,"A",{href:!0});var JUr=s(GB);bco=r(JUr,"ConvNextFeatureExtractor"),JUr.forEach(t),vco=r(T0e," (ResNet model)"),T0e.forEach(t),Fco=i(re),Th=n(re,"LI",{});var M0e=s(Th);nne=n(M0e,"STRONG",{});var YUr=s(nne);Tco=r(YUr,"segformer"),YUr.forEach(t),Mco=r(M0e," \u2014 "),OB=n(M0e,"A",{href:!0});var KUr=s(OB);Eco=r(KUr,"SegformerFeatureExtractor"),KUr.forEach(t),Cco=r(M0e," (SegFormer model)"),M0e.forEach(t),wco=i(re),Mh=n(re,"LI",{});var E0e=s(Mh);sne=n(E0e,"STRONG",{});var ZUr=s(sne);Aco=r(ZUr,"speech_to_text"),ZUr.forEach(t),yco=r(E0e," \u2014 "),VB=n(E0e,"A",{href:!0});var eJr=s(VB);Lco=r(eJr,"Speech2TextFeatureExtractor"),eJr.forEach(t),xco=r(E0e," (Speech2Text model)"),E0e.forEach(t),$co=i(re),Eh=n(re,"LI",{});var C0e=s(Eh);lne=n(C0e,"STRONG",{});var oJr=s(lne);kco=r(oJr,"swin"),oJr.forEach(t),Sco=r(C0e," \u2014 "),XB=n(C0e,"A",{href:!0});var rJr=s(XB);Rco=r(rJr,"ViTFeatureExtractor"),rJr.forEach(t),Pco=r(C0e," (Swin model)"),C0e.forEach(t),Bco=i(re),Ch=n(re,"LI",{});var w0e=s(Ch);ine=n(w0e,"STRONG",{});var tJr=s(ine);Ico=r(tJr,"van"),tJr.forEach(t),qco=r(w0e," \u2014 "),zB=n(w0e,"A",{href:!0});var aJr=s(zB);Nco=r(aJr,"ConvNextFeatureExtractor"),aJr.forEach(t),jco=r(w0e," (VAN model)"),w0e.forEach(t),Dco=i(re),wh=n(re,"LI",{});var A0e=s(wh);dne=n(A0e,"STRONG",{});var nJr=s(dne);Gco=r(nJr,"vit"),nJr.forEach(t),Oco=r(A0e," \u2014 "),WB=n(A0e,"A",{href:!0});var sJr=s(WB);Vco=r(sJr,"ViTFeatureExtractor"),sJr.forEach(t),Xco=r(A0e," (ViT model)"),A0e.forEach(t),zco=i(re),Ah=n(re,"LI",{});var y0e=s(Ah);cne=n(y0e,"STRONG",{});var lJr=s(cne);Wco=r(lJr,"vit_mae"),lJr.forEach(t),Qco=r(y0e," \u2014 "),QB=n(y0e,"A",{href:!0});var iJr=s(QB);Hco=r(iJr,"ViTFeatureExtractor"),iJr.forEach(t),Uco=r(y0e," (ViTMAE model)"),y0e.forEach(t),Jco=i(re),yh=n(re,"LI",{});var L0e=s(yh);fne=n(L0e,"STRONG",{});var dJr=s(fne);Yco=r(dJr,"wav2vec2"),dJr.forEach(t),Kco=r(L0e," \u2014 "),HB=n(L0e,"A",{href:!0});var cJr=s(HB);Zco=r(cJr,"Wav2Vec2FeatureExtractor"),cJr.forEach(t),efo=r(L0e," (Wav2Vec2 model)"),L0e.forEach(t),ofo=i(re),Lh=n(re,"LI",{});var x0e=s(Lh);mne=n(x0e,"STRONG",{});var fJr=s(mne);rfo=r(fJr,"wav2vec2-conformer"),fJr.forEach(t),tfo=r(x0e," \u2014 "),UB=n(x0e,"A",{href:!0});var mJr=s(UB);afo=r(mJr,"Wav2Vec2FeatureExtractor"),mJr.forEach(t),nfo=r(x0e," (Wav2Vec2-Conformer model)"),x0e.forEach(t),sfo=i(re),xh=n(re,"LI",{});var $0e=s(xh);gne=n($0e,"STRONG",{});var gJr=s(gne);lfo=r(gJr,"yolos"),gJr.forEach(t),ifo=r($0e," \u2014 "),JB=n($0e,"A",{href:!0});var hJr=s(JB);dfo=r(hJr,"YolosFeatureExtractor"),hJr.forEach(t),cfo=r($0e," (YOLOS model)"),$0e.forEach(t),re.forEach(t),ffo=i(Zt),T($h.$$.fragment,Zt),mfo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),gfo=i(Gs),Sh=n(Gs,"DIV",{class:!0});var hje=s(Sh);T(R6.$$.fragment,hje),hfo=i(hje),hne=n(hje,"P",{});var pJr=s(hne);pfo=r(pJr,"Register a new feature extractor for this class."),pJr.forEach(t),hje.forEach(t),Gs.forEach(t),gqe=i(f),wi=n(f,"H2",{class:!0});var pje=s(wi);Rh=n(pje,"A",{id:!0,class:!0,href:!0});var _Jr=s(Rh);pne=n(_Jr,"SPAN",{});var uJr=s(pne);T(P6.$$.fragment,uJr),uJr.forEach(t),_Jr.forEach(t),_fo=i(pje),_ne=n(pje,"SPAN",{});var bJr=s(_ne);ufo=r(bJr,"AutoProcessor"),bJr.forEach(t),pje.forEach(t),hqe=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(B6.$$.fragment,Os),bfo=i(Os),I6=n(Os,"P",{});var _je=s(I6);vfo=r(_je,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),YB=n(_je,"A",{href:!0});var vJr=s(YB);Ffo=r(vJr,"AutoProcessor.from_pretrained()"),vJr.forEach(t),Tfo=r(_je," class method."),_je.forEach(t),Mfo=i(Os),q6=n(Os,"P",{});var uje=s(q6);Efo=r(uje,"This class cannot be instantiated directly using "),une=n(uje,"CODE",{});var FJr=s(une);Cfo=r(FJr,"__init__()"),FJr.forEach(t),wfo=r(uje," (throws an error)."),uje.forEach(t),Afo=i(Os),Ue=n(Os,"DIV",{class:!0});var ea=s(Ue);T(N6.$$.fragment,ea),yfo=i(ea),bne=n(ea,"P",{});var TJr=s(bne);Lfo=r(TJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),TJr.forEach(t),xfo=i(ea),Ai=n(ea,"P",{});var WK=s(Ai);$fo=r(WK,"The processor class to instantiate is selected based on the "),vne=n(WK,"CODE",{});var MJr=s(vne);kfo=r(MJr,"model_type"),MJr.forEach(t),Sfo=r(WK,` property of the config object (either
passed as an argument or loaded from `),Fne=n(WK,"CODE",{});var EJr=s(Fne);Rfo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),Pfo=r(WK," if possible):"),WK.forEach(t),Bfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Ph=n(be,"LI",{});var k0e=s(Ph);Tne=n(k0e,"STRONG",{});var CJr=s(Tne);Ifo=r(CJr,"clip"),CJr.forEach(t),qfo=r(k0e," \u2014 "),KB=n(k0e,"A",{href:!0});var wJr=s(KB);Nfo=r(wJr,"CLIPProcessor"),wJr.forEach(t),jfo=r(k0e," (CLIP model)"),k0e.forEach(t),Dfo=i(be),Bh=n(be,"LI",{});var S0e=s(Bh);Mne=n(S0e,"STRONG",{});var AJr=s(Mne);Gfo=r(AJr,"flava"),AJr.forEach(t),Ofo=r(S0e," \u2014 "),Ene=n(S0e,"CODE",{});var yJr=s(Ene);Vfo=r(yJr,"FLAVAProcessor"),yJr.forEach(t),Xfo=r(S0e," (Flava model)"),S0e.forEach(t),zfo=i(be),Ih=n(be,"LI",{});var R0e=s(Ih);Cne=n(R0e,"STRONG",{});var LJr=s(Cne);Wfo=r(LJr,"layoutlmv2"),LJr.forEach(t),Qfo=r(R0e," \u2014 "),ZB=n(R0e,"A",{href:!0});var xJr=s(ZB);Hfo=r(xJr,"LayoutLMv2Processor"),xJr.forEach(t),Ufo=r(R0e," (LayoutLMv2 model)"),R0e.forEach(t),Jfo=i(be),qh=n(be,"LI",{});var P0e=s(qh);wne=n(P0e,"STRONG",{});var $Jr=s(wne);Yfo=r($Jr,"layoutxlm"),$Jr.forEach(t),Kfo=r(P0e," \u2014 "),eI=n(P0e,"A",{href:!0});var kJr=s(eI);Zfo=r(kJr,"LayoutXLMProcessor"),kJr.forEach(t),emo=r(P0e," (LayoutXLM model)"),P0e.forEach(t),omo=i(be),Nh=n(be,"LI",{});var B0e=s(Nh);Ane=n(B0e,"STRONG",{});var SJr=s(Ane);rmo=r(SJr,"sew"),SJr.forEach(t),tmo=r(B0e," \u2014 "),oI=n(B0e,"A",{href:!0});var RJr=s(oI);amo=r(RJr,"Wav2Vec2Processor"),RJr.forEach(t),nmo=r(B0e," (SEW model)"),B0e.forEach(t),smo=i(be),jh=n(be,"LI",{});var I0e=s(jh);yne=n(I0e,"STRONG",{});var PJr=s(yne);lmo=r(PJr,"sew-d"),PJr.forEach(t),imo=r(I0e," \u2014 "),rI=n(I0e,"A",{href:!0});var BJr=s(rI);dmo=r(BJr,"Wav2Vec2Processor"),BJr.forEach(t),cmo=r(I0e," (SEW-D model)"),I0e.forEach(t),fmo=i(be),Dh=n(be,"LI",{});var q0e=s(Dh);Lne=n(q0e,"STRONG",{});var IJr=s(Lne);mmo=r(IJr,"speech_to_text"),IJr.forEach(t),gmo=r(q0e," \u2014 "),tI=n(q0e,"A",{href:!0});var qJr=s(tI);hmo=r(qJr,"Speech2TextProcessor"),qJr.forEach(t),pmo=r(q0e," (Speech2Text model)"),q0e.forEach(t),_mo=i(be),Gh=n(be,"LI",{});var N0e=s(Gh);xne=n(N0e,"STRONG",{});var NJr=s(xne);umo=r(NJr,"speech_to_text_2"),NJr.forEach(t),bmo=r(N0e," \u2014 "),aI=n(N0e,"A",{href:!0});var jJr=s(aI);vmo=r(jJr,"Speech2Text2Processor"),jJr.forEach(t),Fmo=r(N0e," (Speech2Text2 model)"),N0e.forEach(t),Tmo=i(be),Oh=n(be,"LI",{});var j0e=s(Oh);$ne=n(j0e,"STRONG",{});var DJr=s($ne);Mmo=r(DJr,"trocr"),DJr.forEach(t),Emo=r(j0e," \u2014 "),nI=n(j0e,"A",{href:!0});var GJr=s(nI);Cmo=r(GJr,"TrOCRProcessor"),GJr.forEach(t),wmo=r(j0e," (TrOCR model)"),j0e.forEach(t),Amo=i(be),Vh=n(be,"LI",{});var D0e=s(Vh);kne=n(D0e,"STRONG",{});var OJr=s(kne);ymo=r(OJr,"unispeech"),OJr.forEach(t),Lmo=r(D0e," \u2014 "),sI=n(D0e,"A",{href:!0});var VJr=s(sI);xmo=r(VJr,"Wav2Vec2Processor"),VJr.forEach(t),$mo=r(D0e," (UniSpeech model)"),D0e.forEach(t),kmo=i(be),Xh=n(be,"LI",{});var G0e=s(Xh);Sne=n(G0e,"STRONG",{});var XJr=s(Sne);Smo=r(XJr,"unispeech-sat"),XJr.forEach(t),Rmo=r(G0e," \u2014 "),lI=n(G0e,"A",{href:!0});var zJr=s(lI);Pmo=r(zJr,"Wav2Vec2Processor"),zJr.forEach(t),Bmo=r(G0e," (UniSpeechSat model)"),G0e.forEach(t),Imo=i(be),zh=n(be,"LI",{});var O0e=s(zh);Rne=n(O0e,"STRONG",{});var WJr=s(Rne);qmo=r(WJr,"vilt"),WJr.forEach(t),Nmo=r(O0e," \u2014 "),iI=n(O0e,"A",{href:!0});var QJr=s(iI);jmo=r(QJr,"ViltProcessor"),QJr.forEach(t),Dmo=r(O0e," (ViLT model)"),O0e.forEach(t),Gmo=i(be),Wh=n(be,"LI",{});var V0e=s(Wh);Pne=n(V0e,"STRONG",{});var HJr=s(Pne);Omo=r(HJr,"vision-text-dual-encoder"),HJr.forEach(t),Vmo=r(V0e," \u2014 "),dI=n(V0e,"A",{href:!0});var UJr=s(dI);Xmo=r(UJr,"VisionTextDualEncoderProcessor"),UJr.forEach(t),zmo=r(V0e," (VisionTextDualEncoder model)"),V0e.forEach(t),Wmo=i(be),Qh=n(be,"LI",{});var X0e=s(Qh);Bne=n(X0e,"STRONG",{});var JJr=s(Bne);Qmo=r(JJr,"wav2vec2"),JJr.forEach(t),Hmo=r(X0e," \u2014 "),cI=n(X0e,"A",{href:!0});var YJr=s(cI);Umo=r(YJr,"Wav2Vec2Processor"),YJr.forEach(t),Jmo=r(X0e," (Wav2Vec2 model)"),X0e.forEach(t),Ymo=i(be),Hh=n(be,"LI",{});var z0e=s(Hh);Ine=n(z0e,"STRONG",{});var KJr=s(Ine);Kmo=r(KJr,"wav2vec2-conformer"),KJr.forEach(t),Zmo=r(z0e," \u2014 "),fI=n(z0e,"A",{href:!0});var ZJr=s(fI);ego=r(ZJr,"Wav2Vec2Processor"),ZJr.forEach(t),ogo=r(z0e," (Wav2Vec2-Conformer model)"),z0e.forEach(t),rgo=i(be),Uh=n(be,"LI",{});var W0e=s(Uh);qne=n(W0e,"STRONG",{});var eYr=s(qne);tgo=r(eYr,"wavlm"),eYr.forEach(t),ago=r(W0e," \u2014 "),mI=n(W0e,"A",{href:!0});var oYr=s(mI);ngo=r(oYr,"Wav2Vec2Processor"),oYr.forEach(t),sgo=r(W0e," (WavLM model)"),W0e.forEach(t),be.forEach(t),lgo=i(ea),T(Jh.$$.fragment,ea),igo=i(ea),T(Yh.$$.fragment,ea),ea.forEach(t),dgo=i(Os),Kh=n(Os,"DIV",{class:!0});var bje=s(Kh);T(j6.$$.fragment,bje),cgo=i(bje),Nne=n(bje,"P",{});var rYr=s(Nne);fgo=r(rYr,"Register a new processor for this class."),rYr.forEach(t),bje.forEach(t),Os.forEach(t),pqe=i(f),yi=n(f,"H2",{class:!0});var vje=s(yi);Zh=n(vje,"A",{id:!0,class:!0,href:!0});var tYr=s(Zh);jne=n(tYr,"SPAN",{});var aYr=s(jne);T(D6.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),mgo=i(vje),Dne=n(vje,"SPAN",{});var nYr=s(Dne);ggo=r(nYr,"AutoModel"),nYr.forEach(t),vje.forEach(t),_qe=i(f),Lo=n(f,"DIV",{class:!0});var Vs=s(Lo);T(G6.$$.fragment,Vs),hgo=i(Vs),Li=n(Vs,"P",{});var QK=s(Li);pgo=r(QK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gI=n(QK,"A",{href:!0});var sYr=s(gI);_go=r(sYr,"from_pretrained()"),sYr.forEach(t),ugo=r(QK," class method or the "),hI=n(QK,"A",{href:!0});var lYr=s(hI);bgo=r(lYr,"from_config()"),lYr.forEach(t),vgo=r(QK,` class
method.`),QK.forEach(t),Fgo=i(Vs),O6=n(Vs,"P",{});var Fje=s(O6);Tgo=r(Fje,"This class cannot be instantiated directly using "),Gne=n(Fje,"CODE",{});var iYr=s(Gne);Mgo=r(iYr,"__init__()"),iYr.forEach(t),Ego=r(Fje," (throws an error)."),Fje.forEach(t),Cgo=i(Vs),tt=n(Vs,"DIV",{class:!0});var b0=s(tt);T(V6.$$.fragment,b0),wgo=i(b0),One=n(b0,"P",{});var dYr=s(One);Ago=r(dYr,"Instantiates one of the base model classes of the library from a configuration."),dYr.forEach(t),ygo=i(b0),xi=n(b0,"P",{});var HK=s(xi);Lgo=r(HK,`Note:
Loading a model from its configuration file does `),Vne=n(HK,"STRONG",{});var cYr=s(Vne);xgo=r(cYr,"not"),cYr.forEach(t),$go=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pI=n(HK,"A",{href:!0});var fYr=s(pI);kgo=r(fYr,"from_pretrained()"),fYr.forEach(t),Sgo=r(HK," to load the model weights."),HK.forEach(t),Rgo=i(b0),T(ep.$$.fragment,b0),b0.forEach(t),Pgo=i(Vs),Je=n(Vs,"DIV",{class:!0});var oa=s(Je);T(X6.$$.fragment,oa),Bgo=i(oa),Xne=n(oa,"P",{});var mYr=s(Xne);Igo=r(mYr,"Instantiate one of the base model classes of the library from a pretrained model."),mYr.forEach(t),qgo=i(oa),La=n(oa,"P",{});var v0=s(La);Ngo=r(v0,"The model class to instantiate is selected based on the "),zne=n(v0,"CODE",{});var gYr=s(zne);jgo=r(gYr,"model_type"),gYr.forEach(t),Dgo=r(v0,` property of the config object (either
passed as an argument or loaded from `),Wne=n(v0,"CODE",{});var hYr=s(Wne);Ggo=r(hYr,"pretrained_model_name_or_path"),hYr.forEach(t),Ogo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=n(v0,"CODE",{});var pYr=s(Qne);Vgo=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),Xgo=r(v0,":"),v0.forEach(t),zgo=i(oa),x=n(oa,"UL",{});var $=s(x);op=n($,"LI",{});var Q0e=s(op);Hne=n(Q0e,"STRONG",{});var _Yr=s(Hne);Wgo=r(_Yr,"albert"),_Yr.forEach(t),Qgo=r(Q0e," \u2014 "),_I=n(Q0e,"A",{href:!0});var uYr=s(_I);Hgo=r(uYr,"AlbertModel"),uYr.forEach(t),Ugo=r(Q0e," (ALBERT model)"),Q0e.forEach(t),Jgo=i($),rp=n($,"LI",{});var H0e=s(rp);Une=n(H0e,"STRONG",{});var bYr=s(Une);Ygo=r(bYr,"bart"),bYr.forEach(t),Kgo=r(H0e," \u2014 "),uI=n(H0e,"A",{href:!0});var vYr=s(uI);Zgo=r(vYr,"BartModel"),vYr.forEach(t),eho=r(H0e," (BART model)"),H0e.forEach(t),oho=i($),tp=n($,"LI",{});var U0e=s(tp);Jne=n(U0e,"STRONG",{});var FYr=s(Jne);rho=r(FYr,"beit"),FYr.forEach(t),tho=r(U0e," \u2014 "),bI=n(U0e,"A",{href:!0});var TYr=s(bI);aho=r(TYr,"BeitModel"),TYr.forEach(t),nho=r(U0e," (BEiT model)"),U0e.forEach(t),sho=i($),ap=n($,"LI",{});var J0e=s(ap);Yne=n(J0e,"STRONG",{});var MYr=s(Yne);lho=r(MYr,"bert"),MYr.forEach(t),iho=r(J0e," \u2014 "),vI=n(J0e,"A",{href:!0});var EYr=s(vI);dho=r(EYr,"BertModel"),EYr.forEach(t),cho=r(J0e," (BERT model)"),J0e.forEach(t),fho=i($),np=n($,"LI",{});var Y0e=s(np);Kne=n(Y0e,"STRONG",{});var CYr=s(Kne);mho=r(CYr,"bert-generation"),CYr.forEach(t),gho=r(Y0e," \u2014 "),FI=n(Y0e,"A",{href:!0});var wYr=s(FI);hho=r(wYr,"BertGenerationEncoder"),wYr.forEach(t),pho=r(Y0e," (Bert Generation model)"),Y0e.forEach(t),_ho=i($),sp=n($,"LI",{});var K0e=s(sp);Zne=n(K0e,"STRONG",{});var AYr=s(Zne);uho=r(AYr,"big_bird"),AYr.forEach(t),bho=r(K0e," \u2014 "),TI=n(K0e,"A",{href:!0});var yYr=s(TI);vho=r(yYr,"BigBirdModel"),yYr.forEach(t),Fho=r(K0e," (BigBird model)"),K0e.forEach(t),Tho=i($),lp=n($,"LI",{});var Z0e=s(lp);ese=n(Z0e,"STRONG",{});var LYr=s(ese);Mho=r(LYr,"bigbird_pegasus"),LYr.forEach(t),Eho=r(Z0e," \u2014 "),MI=n(Z0e,"A",{href:!0});var xYr=s(MI);Cho=r(xYr,"BigBirdPegasusModel"),xYr.forEach(t),who=r(Z0e," (BigBirdPegasus model)"),Z0e.forEach(t),Aho=i($),ip=n($,"LI",{});var eAe=s(ip);ose=n(eAe,"STRONG",{});var $Yr=s(ose);yho=r($Yr,"blenderbot"),$Yr.forEach(t),Lho=r(eAe," \u2014 "),EI=n(eAe,"A",{href:!0});var kYr=s(EI);xho=r(kYr,"BlenderbotModel"),kYr.forEach(t),$ho=r(eAe," (Blenderbot model)"),eAe.forEach(t),kho=i($),dp=n($,"LI",{});var oAe=s(dp);rse=n(oAe,"STRONG",{});var SYr=s(rse);Sho=r(SYr,"blenderbot-small"),SYr.forEach(t),Rho=r(oAe," \u2014 "),CI=n(oAe,"A",{href:!0});var RYr=s(CI);Pho=r(RYr,"BlenderbotSmallModel"),RYr.forEach(t),Bho=r(oAe," (BlenderbotSmall model)"),oAe.forEach(t),Iho=i($),cp=n($,"LI",{});var rAe=s(cp);tse=n(rAe,"STRONG",{});var PYr=s(tse);qho=r(PYr,"camembert"),PYr.forEach(t),Nho=r(rAe," \u2014 "),wI=n(rAe,"A",{href:!0});var BYr=s(wI);jho=r(BYr,"CamembertModel"),BYr.forEach(t),Dho=r(rAe," (CamemBERT model)"),rAe.forEach(t),Gho=i($),fp=n($,"LI",{});var tAe=s(fp);ase=n(tAe,"STRONG",{});var IYr=s(ase);Oho=r(IYr,"canine"),IYr.forEach(t),Vho=r(tAe," \u2014 "),AI=n(tAe,"A",{href:!0});var qYr=s(AI);Xho=r(qYr,"CanineModel"),qYr.forEach(t),zho=r(tAe," (Canine model)"),tAe.forEach(t),Who=i($),mp=n($,"LI",{});var aAe=s(mp);nse=n(aAe,"STRONG",{});var NYr=s(nse);Qho=r(NYr,"clip"),NYr.forEach(t),Hho=r(aAe," \u2014 "),yI=n(aAe,"A",{href:!0});var jYr=s(yI);Uho=r(jYr,"CLIPModel"),jYr.forEach(t),Jho=r(aAe," (CLIP model)"),aAe.forEach(t),Yho=i($),gp=n($,"LI",{});var nAe=s(gp);sse=n(nAe,"STRONG",{});var DYr=s(sse);Kho=r(DYr,"convbert"),DYr.forEach(t),Zho=r(nAe," \u2014 "),LI=n(nAe,"A",{href:!0});var GYr=s(LI);epo=r(GYr,"ConvBertModel"),GYr.forEach(t),opo=r(nAe," (ConvBERT model)"),nAe.forEach(t),rpo=i($),hp=n($,"LI",{});var sAe=s(hp);lse=n(sAe,"STRONG",{});var OYr=s(lse);tpo=r(OYr,"convnext"),OYr.forEach(t),apo=r(sAe," \u2014 "),xI=n(sAe,"A",{href:!0});var VYr=s(xI);npo=r(VYr,"ConvNextModel"),VYr.forEach(t),spo=r(sAe," (ConvNext model)"),sAe.forEach(t),lpo=i($),pp=n($,"LI",{});var lAe=s(pp);ise=n(lAe,"STRONG",{});var XYr=s(ise);ipo=r(XYr,"ctrl"),XYr.forEach(t),dpo=r(lAe," \u2014 "),$I=n(lAe,"A",{href:!0});var zYr=s($I);cpo=r(zYr,"CTRLModel"),zYr.forEach(t),fpo=r(lAe," (CTRL model)"),lAe.forEach(t),mpo=i($),_p=n($,"LI",{});var iAe=s(_p);dse=n(iAe,"STRONG",{});var WYr=s(dse);gpo=r(WYr,"cvt"),WYr.forEach(t),hpo=r(iAe," \u2014 "),kI=n(iAe,"A",{href:!0});var QYr=s(kI);ppo=r(QYr,"CvtModel"),QYr.forEach(t),_po=r(iAe," (CvT model)"),iAe.forEach(t),upo=i($),up=n($,"LI",{});var dAe=s(up);cse=n(dAe,"STRONG",{});var HYr=s(cse);bpo=r(HYr,"data2vec-audio"),HYr.forEach(t),vpo=r(dAe," \u2014 "),SI=n(dAe,"A",{href:!0});var UYr=s(SI);Fpo=r(UYr,"Data2VecAudioModel"),UYr.forEach(t),Tpo=r(dAe," (Data2VecAudio model)"),dAe.forEach(t),Mpo=i($),bp=n($,"LI",{});var cAe=s(bp);fse=n(cAe,"STRONG",{});var JYr=s(fse);Epo=r(JYr,"data2vec-text"),JYr.forEach(t),Cpo=r(cAe," \u2014 "),RI=n(cAe,"A",{href:!0});var YYr=s(RI);wpo=r(YYr,"Data2VecTextModel"),YYr.forEach(t),Apo=r(cAe," (Data2VecText model)"),cAe.forEach(t),ypo=i($),vp=n($,"LI",{});var fAe=s(vp);mse=n(fAe,"STRONG",{});var KYr=s(mse);Lpo=r(KYr,"data2vec-vision"),KYr.forEach(t),xpo=r(fAe," \u2014 "),PI=n(fAe,"A",{href:!0});var ZYr=s(PI);$po=r(ZYr,"Data2VecVisionModel"),ZYr.forEach(t),kpo=r(fAe," (Data2VecVision model)"),fAe.forEach(t),Spo=i($),Fp=n($,"LI",{});var mAe=s(Fp);gse=n(mAe,"STRONG",{});var eKr=s(gse);Rpo=r(eKr,"deberta"),eKr.forEach(t),Ppo=r(mAe," \u2014 "),BI=n(mAe,"A",{href:!0});var oKr=s(BI);Bpo=r(oKr,"DebertaModel"),oKr.forEach(t),Ipo=r(mAe," (DeBERTa model)"),mAe.forEach(t),qpo=i($),Tp=n($,"LI",{});var gAe=s(Tp);hse=n(gAe,"STRONG",{});var rKr=s(hse);Npo=r(rKr,"deberta-v2"),rKr.forEach(t),jpo=r(gAe," \u2014 "),II=n(gAe,"A",{href:!0});var tKr=s(II);Dpo=r(tKr,"DebertaV2Model"),tKr.forEach(t),Gpo=r(gAe," (DeBERTa-v2 model)"),gAe.forEach(t),Opo=i($),Mp=n($,"LI",{});var hAe=s(Mp);pse=n(hAe,"STRONG",{});var aKr=s(pse);Vpo=r(aKr,"decision_transformer"),aKr.forEach(t),Xpo=r(hAe," \u2014 "),qI=n(hAe,"A",{href:!0});var nKr=s(qI);zpo=r(nKr,"DecisionTransformerModel"),nKr.forEach(t),Wpo=r(hAe," (Decision Transformer model)"),hAe.forEach(t),Qpo=i($),Ep=n($,"LI",{});var pAe=s(Ep);_se=n(pAe,"STRONG",{});var sKr=s(_se);Hpo=r(sKr,"deit"),sKr.forEach(t),Upo=r(pAe," \u2014 "),NI=n(pAe,"A",{href:!0});var lKr=s(NI);Jpo=r(lKr,"DeiTModel"),lKr.forEach(t),Ypo=r(pAe," (DeiT model)"),pAe.forEach(t),Kpo=i($),Cp=n($,"LI",{});var _Ae=s(Cp);use=n(_Ae,"STRONG",{});var iKr=s(use);Zpo=r(iKr,"detr"),iKr.forEach(t),e_o=r(_Ae," \u2014 "),jI=n(_Ae,"A",{href:!0});var dKr=s(jI);o_o=r(dKr,"DetrModel"),dKr.forEach(t),r_o=r(_Ae," (DETR model)"),_Ae.forEach(t),t_o=i($),wp=n($,"LI",{});var uAe=s(wp);bse=n(uAe,"STRONG",{});var cKr=s(bse);a_o=r(cKr,"distilbert"),cKr.forEach(t),n_o=r(uAe," \u2014 "),DI=n(uAe,"A",{href:!0});var fKr=s(DI);s_o=r(fKr,"DistilBertModel"),fKr.forEach(t),l_o=r(uAe," (DistilBERT model)"),uAe.forEach(t),i_o=i($),Ap=n($,"LI",{});var bAe=s(Ap);vse=n(bAe,"STRONG",{});var mKr=s(vse);d_o=r(mKr,"dpr"),mKr.forEach(t),c_o=r(bAe," \u2014 "),GI=n(bAe,"A",{href:!0});var gKr=s(GI);f_o=r(gKr,"DPRQuestionEncoder"),gKr.forEach(t),m_o=r(bAe," (DPR model)"),bAe.forEach(t),g_o=i($),yp=n($,"LI",{});var vAe=s(yp);Fse=n(vAe,"STRONG",{});var hKr=s(Fse);h_o=r(hKr,"dpt"),hKr.forEach(t),p_o=r(vAe," \u2014 "),OI=n(vAe,"A",{href:!0});var pKr=s(OI);__o=r(pKr,"DPTModel"),pKr.forEach(t),u_o=r(vAe," (DPT model)"),vAe.forEach(t),b_o=i($),Lp=n($,"LI",{});var FAe=s(Lp);Tse=n(FAe,"STRONG",{});var _Kr=s(Tse);v_o=r(_Kr,"electra"),_Kr.forEach(t),F_o=r(FAe," \u2014 "),VI=n(FAe,"A",{href:!0});var uKr=s(VI);T_o=r(uKr,"ElectraModel"),uKr.forEach(t),M_o=r(FAe," (ELECTRA model)"),FAe.forEach(t),E_o=i($),xp=n($,"LI",{});var TAe=s(xp);Mse=n(TAe,"STRONG",{});var bKr=s(Mse);C_o=r(bKr,"flaubert"),bKr.forEach(t),w_o=r(TAe," \u2014 "),XI=n(TAe,"A",{href:!0});var vKr=s(XI);A_o=r(vKr,"FlaubertModel"),vKr.forEach(t),y_o=r(TAe," (FlauBERT model)"),TAe.forEach(t),L_o=i($),$p=n($,"LI",{});var MAe=s($p);Ese=n(MAe,"STRONG",{});var FKr=s(Ese);x_o=r(FKr,"flava"),FKr.forEach(t),$_o=r(MAe," \u2014 "),zI=n(MAe,"A",{href:!0});var TKr=s(zI);k_o=r(TKr,"FlavaModel"),TKr.forEach(t),S_o=r(MAe," (Flava model)"),MAe.forEach(t),R_o=i($),kp=n($,"LI",{});var EAe=s(kp);Cse=n(EAe,"STRONG",{});var MKr=s(Cse);P_o=r(MKr,"fnet"),MKr.forEach(t),B_o=r(EAe," \u2014 "),WI=n(EAe,"A",{href:!0});var EKr=s(WI);I_o=r(EKr,"FNetModel"),EKr.forEach(t),q_o=r(EAe," (FNet model)"),EAe.forEach(t),N_o=i($),Sp=n($,"LI",{});var CAe=s(Sp);wse=n(CAe,"STRONG",{});var CKr=s(wse);j_o=r(CKr,"fsmt"),CKr.forEach(t),D_o=r(CAe," \u2014 "),QI=n(CAe,"A",{href:!0});var wKr=s(QI);G_o=r(wKr,"FSMTModel"),wKr.forEach(t),O_o=r(CAe," (FairSeq Machine-Translation model)"),CAe.forEach(t),V_o=i($),Is=n($,"LI",{});var k$=s(Is);Ase=n(k$,"STRONG",{});var AKr=s(Ase);X_o=r(AKr,"funnel"),AKr.forEach(t),z_o=r(k$," \u2014 "),HI=n(k$,"A",{href:!0});var yKr=s(HI);W_o=r(yKr,"FunnelModel"),yKr.forEach(t),Q_o=r(k$," or "),UI=n(k$,"A",{href:!0});var LKr=s(UI);H_o=r(LKr,"FunnelBaseModel"),LKr.forEach(t),U_o=r(k$," (Funnel Transformer model)"),k$.forEach(t),J_o=i($),Rp=n($,"LI",{});var wAe=s(Rp);yse=n(wAe,"STRONG",{});var xKr=s(yse);Y_o=r(xKr,"glpn"),xKr.forEach(t),K_o=r(wAe," \u2014 "),JI=n(wAe,"A",{href:!0});var $Kr=s(JI);Z_o=r($Kr,"GLPNModel"),$Kr.forEach(t),euo=r(wAe," (GLPN model)"),wAe.forEach(t),ouo=i($),Pp=n($,"LI",{});var AAe=s(Pp);Lse=n(AAe,"STRONG",{});var kKr=s(Lse);ruo=r(kKr,"gpt2"),kKr.forEach(t),tuo=r(AAe," \u2014 "),YI=n(AAe,"A",{href:!0});var SKr=s(YI);auo=r(SKr,"GPT2Model"),SKr.forEach(t),nuo=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),suo=i($),Bp=n($,"LI",{});var yAe=s(Bp);xse=n(yAe,"STRONG",{});var RKr=s(xse);luo=r(RKr,"gpt_neo"),RKr.forEach(t),iuo=r(yAe," \u2014 "),KI=n(yAe,"A",{href:!0});var PKr=s(KI);duo=r(PKr,"GPTNeoModel"),PKr.forEach(t),cuo=r(yAe," (GPT Neo model)"),yAe.forEach(t),fuo=i($),Ip=n($,"LI",{});var LAe=s(Ip);$se=n(LAe,"STRONG",{});var BKr=s($se);muo=r(BKr,"gptj"),BKr.forEach(t),guo=r(LAe," \u2014 "),ZI=n(LAe,"A",{href:!0});var IKr=s(ZI);huo=r(IKr,"GPTJModel"),IKr.forEach(t),puo=r(LAe," (GPT-J model)"),LAe.forEach(t),_uo=i($),qp=n($,"LI",{});var xAe=s(qp);kse=n(xAe,"STRONG",{});var qKr=s(kse);uuo=r(qKr,"hubert"),qKr.forEach(t),buo=r(xAe," \u2014 "),eq=n(xAe,"A",{href:!0});var NKr=s(eq);vuo=r(NKr,"HubertModel"),NKr.forEach(t),Fuo=r(xAe," (Hubert model)"),xAe.forEach(t),Tuo=i($),Np=n($,"LI",{});var $Ae=s(Np);Sse=n($Ae,"STRONG",{});var jKr=s(Sse);Muo=r(jKr,"ibert"),jKr.forEach(t),Euo=r($Ae," \u2014 "),oq=n($Ae,"A",{href:!0});var DKr=s(oq);Cuo=r(DKr,"IBertModel"),DKr.forEach(t),wuo=r($Ae," (I-BERT model)"),$Ae.forEach(t),Auo=i($),jp=n($,"LI",{});var kAe=s(jp);Rse=n(kAe,"STRONG",{});var GKr=s(Rse);yuo=r(GKr,"imagegpt"),GKr.forEach(t),Luo=r(kAe," \u2014 "),rq=n(kAe,"A",{href:!0});var OKr=s(rq);xuo=r(OKr,"ImageGPTModel"),OKr.forEach(t),$uo=r(kAe," (ImageGPT model)"),kAe.forEach(t),kuo=i($),Dp=n($,"LI",{});var SAe=s(Dp);Pse=n(SAe,"STRONG",{});var VKr=s(Pse);Suo=r(VKr,"layoutlm"),VKr.forEach(t),Ruo=r(SAe," \u2014 "),tq=n(SAe,"A",{href:!0});var XKr=s(tq);Puo=r(XKr,"LayoutLMModel"),XKr.forEach(t),Buo=r(SAe," (LayoutLM model)"),SAe.forEach(t),Iuo=i($),Gp=n($,"LI",{});var RAe=s(Gp);Bse=n(RAe,"STRONG",{});var zKr=s(Bse);quo=r(zKr,"layoutlmv2"),zKr.forEach(t),Nuo=r(RAe," \u2014 "),aq=n(RAe,"A",{href:!0});var WKr=s(aq);juo=r(WKr,"LayoutLMv2Model"),WKr.forEach(t),Duo=r(RAe," (LayoutLMv2 model)"),RAe.forEach(t),Guo=i($),Op=n($,"LI",{});var PAe=s(Op);Ise=n(PAe,"STRONG",{});var QKr=s(Ise);Ouo=r(QKr,"led"),QKr.forEach(t),Vuo=r(PAe," \u2014 "),nq=n(PAe,"A",{href:!0});var HKr=s(nq);Xuo=r(HKr,"LEDModel"),HKr.forEach(t),zuo=r(PAe," (LED model)"),PAe.forEach(t),Wuo=i($),Vp=n($,"LI",{});var BAe=s(Vp);qse=n(BAe,"STRONG",{});var UKr=s(qse);Quo=r(UKr,"longformer"),UKr.forEach(t),Huo=r(BAe," \u2014 "),sq=n(BAe,"A",{href:!0});var JKr=s(sq);Uuo=r(JKr,"LongformerModel"),JKr.forEach(t),Juo=r(BAe," (Longformer model)"),BAe.forEach(t),Yuo=i($),Xp=n($,"LI",{});var IAe=s(Xp);Nse=n(IAe,"STRONG",{});var YKr=s(Nse);Kuo=r(YKr,"luke"),YKr.forEach(t),Zuo=r(IAe," \u2014 "),lq=n(IAe,"A",{href:!0});var KKr=s(lq);e2o=r(KKr,"LukeModel"),KKr.forEach(t),o2o=r(IAe," (LUKE model)"),IAe.forEach(t),r2o=i($),zp=n($,"LI",{});var qAe=s(zp);jse=n(qAe,"STRONG",{});var ZKr=s(jse);t2o=r(ZKr,"lxmert"),ZKr.forEach(t),a2o=r(qAe," \u2014 "),iq=n(qAe,"A",{href:!0});var eZr=s(iq);n2o=r(eZr,"LxmertModel"),eZr.forEach(t),s2o=r(qAe," (LXMERT model)"),qAe.forEach(t),l2o=i($),Wp=n($,"LI",{});var NAe=s(Wp);Dse=n(NAe,"STRONG",{});var oZr=s(Dse);i2o=r(oZr,"m2m_100"),oZr.forEach(t),d2o=r(NAe," \u2014 "),dq=n(NAe,"A",{href:!0});var rZr=s(dq);c2o=r(rZr,"M2M100Model"),rZr.forEach(t),f2o=r(NAe," (M2M100 model)"),NAe.forEach(t),m2o=i($),Qp=n($,"LI",{});var jAe=s(Qp);Gse=n(jAe,"STRONG",{});var tZr=s(Gse);g2o=r(tZr,"marian"),tZr.forEach(t),h2o=r(jAe," \u2014 "),cq=n(jAe,"A",{href:!0});var aZr=s(cq);p2o=r(aZr,"MarianModel"),aZr.forEach(t),_2o=r(jAe," (Marian model)"),jAe.forEach(t),u2o=i($),Hp=n($,"LI",{});var DAe=s(Hp);Ose=n(DAe,"STRONG",{});var nZr=s(Ose);b2o=r(nZr,"maskformer"),nZr.forEach(t),v2o=r(DAe," \u2014 "),fq=n(DAe,"A",{href:!0});var sZr=s(fq);F2o=r(sZr,"MaskFormerModel"),sZr.forEach(t),T2o=r(DAe," (MaskFormer model)"),DAe.forEach(t),M2o=i($),Up=n($,"LI",{});var GAe=s(Up);Vse=n(GAe,"STRONG",{});var lZr=s(Vse);E2o=r(lZr,"mbart"),lZr.forEach(t),C2o=r(GAe," \u2014 "),mq=n(GAe,"A",{href:!0});var iZr=s(mq);w2o=r(iZr,"MBartModel"),iZr.forEach(t),A2o=r(GAe," (mBART model)"),GAe.forEach(t),y2o=i($),Jp=n($,"LI",{});var OAe=s(Jp);Xse=n(OAe,"STRONG",{});var dZr=s(Xse);L2o=r(dZr,"megatron-bert"),dZr.forEach(t),x2o=r(OAe," \u2014 "),gq=n(OAe,"A",{href:!0});var cZr=s(gq);$2o=r(cZr,"MegatronBertModel"),cZr.forEach(t),k2o=r(OAe," (MegatronBert model)"),OAe.forEach(t),S2o=i($),Yp=n($,"LI",{});var VAe=s(Yp);zse=n(VAe,"STRONG",{});var fZr=s(zse);R2o=r(fZr,"mobilebert"),fZr.forEach(t),P2o=r(VAe," \u2014 "),hq=n(VAe,"A",{href:!0});var mZr=s(hq);B2o=r(mZr,"MobileBertModel"),mZr.forEach(t),I2o=r(VAe," (MobileBERT model)"),VAe.forEach(t),q2o=i($),Kp=n($,"LI",{});var XAe=s(Kp);Wse=n(XAe,"STRONG",{});var gZr=s(Wse);N2o=r(gZr,"mpnet"),gZr.forEach(t),j2o=r(XAe," \u2014 "),pq=n(XAe,"A",{href:!0});var hZr=s(pq);D2o=r(hZr,"MPNetModel"),hZr.forEach(t),G2o=r(XAe," (MPNet model)"),XAe.forEach(t),O2o=i($),Zp=n($,"LI",{});var zAe=s(Zp);Qse=n(zAe,"STRONG",{});var pZr=s(Qse);V2o=r(pZr,"mt5"),pZr.forEach(t),X2o=r(zAe," \u2014 "),_q=n(zAe,"A",{href:!0});var _Zr=s(_q);z2o=r(_Zr,"MT5Model"),_Zr.forEach(t),W2o=r(zAe," (mT5 model)"),zAe.forEach(t),Q2o=i($),e_=n($,"LI",{});var WAe=s(e_);Hse=n(WAe,"STRONG",{});var uZr=s(Hse);H2o=r(uZr,"nystromformer"),uZr.forEach(t),U2o=r(WAe," \u2014 "),uq=n(WAe,"A",{href:!0});var bZr=s(uq);J2o=r(bZr,"NystromformerModel"),bZr.forEach(t),Y2o=r(WAe," (Nystromformer model)"),WAe.forEach(t),K2o=i($),o_=n($,"LI",{});var QAe=s(o_);Use=n(QAe,"STRONG",{});var vZr=s(Use);Z2o=r(vZr,"openai-gpt"),vZr.forEach(t),e1o=r(QAe," \u2014 "),bq=n(QAe,"A",{href:!0});var FZr=s(bq);o1o=r(FZr,"OpenAIGPTModel"),FZr.forEach(t),r1o=r(QAe," (OpenAI GPT model)"),QAe.forEach(t),t1o=i($),r_=n($,"LI",{});var HAe=s(r_);Jse=n(HAe,"STRONG",{});var TZr=s(Jse);a1o=r(TZr,"opt"),TZr.forEach(t),n1o=r(HAe," \u2014 "),vq=n(HAe,"A",{href:!0});var MZr=s(vq);s1o=r(MZr,"OPTModel"),MZr.forEach(t),l1o=r(HAe," (OPT model)"),HAe.forEach(t),i1o=i($),t_=n($,"LI",{});var UAe=s(t_);Yse=n(UAe,"STRONG",{});var EZr=s(Yse);d1o=r(EZr,"pegasus"),EZr.forEach(t),c1o=r(UAe," \u2014 "),Fq=n(UAe,"A",{href:!0});var CZr=s(Fq);f1o=r(CZr,"PegasusModel"),CZr.forEach(t),m1o=r(UAe," (Pegasus model)"),UAe.forEach(t),g1o=i($),a_=n($,"LI",{});var JAe=s(a_);Kse=n(JAe,"STRONG",{});var wZr=s(Kse);h1o=r(wZr,"perceiver"),wZr.forEach(t),p1o=r(JAe," \u2014 "),Tq=n(JAe,"A",{href:!0});var AZr=s(Tq);_1o=r(AZr,"PerceiverModel"),AZr.forEach(t),u1o=r(JAe," (Perceiver model)"),JAe.forEach(t),b1o=i($),n_=n($,"LI",{});var YAe=s(n_);Zse=n(YAe,"STRONG",{});var yZr=s(Zse);v1o=r(yZr,"plbart"),yZr.forEach(t),F1o=r(YAe," \u2014 "),Mq=n(YAe,"A",{href:!0});var LZr=s(Mq);T1o=r(LZr,"PLBartModel"),LZr.forEach(t),M1o=r(YAe," (PLBart model)"),YAe.forEach(t),E1o=i($),s_=n($,"LI",{});var KAe=s(s_);ele=n(KAe,"STRONG",{});var xZr=s(ele);C1o=r(xZr,"poolformer"),xZr.forEach(t),w1o=r(KAe," \u2014 "),Eq=n(KAe,"A",{href:!0});var $Zr=s(Eq);A1o=r($Zr,"PoolFormerModel"),$Zr.forEach(t),y1o=r(KAe," (PoolFormer model)"),KAe.forEach(t),L1o=i($),l_=n($,"LI",{});var ZAe=s(l_);ole=n(ZAe,"STRONG",{});var kZr=s(ole);x1o=r(kZr,"prophetnet"),kZr.forEach(t),$1o=r(ZAe," \u2014 "),Cq=n(ZAe,"A",{href:!0});var SZr=s(Cq);k1o=r(SZr,"ProphetNetModel"),SZr.forEach(t),S1o=r(ZAe," (ProphetNet model)"),ZAe.forEach(t),R1o=i($),i_=n($,"LI",{});var e6e=s(i_);rle=n(e6e,"STRONG",{});var RZr=s(rle);P1o=r(RZr,"qdqbert"),RZr.forEach(t),B1o=r(e6e," \u2014 "),wq=n(e6e,"A",{href:!0});var PZr=s(wq);I1o=r(PZr,"QDQBertModel"),PZr.forEach(t),q1o=r(e6e," (QDQBert model)"),e6e.forEach(t),N1o=i($),d_=n($,"LI",{});var o6e=s(d_);tle=n(o6e,"STRONG",{});var BZr=s(tle);j1o=r(BZr,"reformer"),BZr.forEach(t),D1o=r(o6e," \u2014 "),Aq=n(o6e,"A",{href:!0});var IZr=s(Aq);G1o=r(IZr,"ReformerModel"),IZr.forEach(t),O1o=r(o6e," (Reformer model)"),o6e.forEach(t),V1o=i($),c_=n($,"LI",{});var r6e=s(c_);ale=n(r6e,"STRONG",{});var qZr=s(ale);X1o=r(qZr,"regnet"),qZr.forEach(t),z1o=r(r6e," \u2014 "),yq=n(r6e,"A",{href:!0});var NZr=s(yq);W1o=r(NZr,"RegNetModel"),NZr.forEach(t),Q1o=r(r6e," (RegNet model)"),r6e.forEach(t),H1o=i($),f_=n($,"LI",{});var t6e=s(f_);nle=n(t6e,"STRONG",{});var jZr=s(nle);U1o=r(jZr,"rembert"),jZr.forEach(t),J1o=r(t6e," \u2014 "),Lq=n(t6e,"A",{href:!0});var DZr=s(Lq);Y1o=r(DZr,"RemBertModel"),DZr.forEach(t),K1o=r(t6e," (RemBERT model)"),t6e.forEach(t),Z1o=i($),m_=n($,"LI",{});var a6e=s(m_);sle=n(a6e,"STRONG",{});var GZr=s(sle);ebo=r(GZr,"resnet"),GZr.forEach(t),obo=r(a6e," \u2014 "),xq=n(a6e,"A",{href:!0});var OZr=s(xq);rbo=r(OZr,"ResNetModel"),OZr.forEach(t),tbo=r(a6e," (ResNet model)"),a6e.forEach(t),abo=i($),g_=n($,"LI",{});var n6e=s(g_);lle=n(n6e,"STRONG",{});var VZr=s(lle);nbo=r(VZr,"retribert"),VZr.forEach(t),sbo=r(n6e," \u2014 "),$q=n(n6e,"A",{href:!0});var XZr=s($q);lbo=r(XZr,"RetriBertModel"),XZr.forEach(t),ibo=r(n6e," (RetriBERT model)"),n6e.forEach(t),dbo=i($),h_=n($,"LI",{});var s6e=s(h_);ile=n(s6e,"STRONG",{});var zZr=s(ile);cbo=r(zZr,"roberta"),zZr.forEach(t),fbo=r(s6e," \u2014 "),kq=n(s6e,"A",{href:!0});var WZr=s(kq);mbo=r(WZr,"RobertaModel"),WZr.forEach(t),gbo=r(s6e," (RoBERTa model)"),s6e.forEach(t),hbo=i($),p_=n($,"LI",{});var l6e=s(p_);dle=n(l6e,"STRONG",{});var QZr=s(dle);pbo=r(QZr,"roformer"),QZr.forEach(t),_bo=r(l6e," \u2014 "),Sq=n(l6e,"A",{href:!0});var HZr=s(Sq);ubo=r(HZr,"RoFormerModel"),HZr.forEach(t),bbo=r(l6e," (RoFormer model)"),l6e.forEach(t),vbo=i($),__=n($,"LI",{});var i6e=s(__);cle=n(i6e,"STRONG",{});var UZr=s(cle);Fbo=r(UZr,"segformer"),UZr.forEach(t),Tbo=r(i6e," \u2014 "),Rq=n(i6e,"A",{href:!0});var JZr=s(Rq);Mbo=r(JZr,"SegformerModel"),JZr.forEach(t),Ebo=r(i6e," (SegFormer model)"),i6e.forEach(t),Cbo=i($),u_=n($,"LI",{});var d6e=s(u_);fle=n(d6e,"STRONG",{});var YZr=s(fle);wbo=r(YZr,"sew"),YZr.forEach(t),Abo=r(d6e," \u2014 "),Pq=n(d6e,"A",{href:!0});var KZr=s(Pq);ybo=r(KZr,"SEWModel"),KZr.forEach(t),Lbo=r(d6e," (SEW model)"),d6e.forEach(t),xbo=i($),b_=n($,"LI",{});var c6e=s(b_);mle=n(c6e,"STRONG",{});var ZZr=s(mle);$bo=r(ZZr,"sew-d"),ZZr.forEach(t),kbo=r(c6e," \u2014 "),Bq=n(c6e,"A",{href:!0});var eet=s(Bq);Sbo=r(eet,"SEWDModel"),eet.forEach(t),Rbo=r(c6e," (SEW-D model)"),c6e.forEach(t),Pbo=i($),v_=n($,"LI",{});var f6e=s(v_);gle=n(f6e,"STRONG",{});var oet=s(gle);Bbo=r(oet,"speech_to_text"),oet.forEach(t),Ibo=r(f6e," \u2014 "),Iq=n(f6e,"A",{href:!0});var ret=s(Iq);qbo=r(ret,"Speech2TextModel"),ret.forEach(t),Nbo=r(f6e," (Speech2Text model)"),f6e.forEach(t),jbo=i($),F_=n($,"LI",{});var m6e=s(F_);hle=n(m6e,"STRONG",{});var tet=s(hle);Dbo=r(tet,"splinter"),tet.forEach(t),Gbo=r(m6e," \u2014 "),qq=n(m6e,"A",{href:!0});var aet=s(qq);Obo=r(aet,"SplinterModel"),aet.forEach(t),Vbo=r(m6e," (Splinter model)"),m6e.forEach(t),Xbo=i($),T_=n($,"LI",{});var g6e=s(T_);ple=n(g6e,"STRONG",{});var net=s(ple);zbo=r(net,"squeezebert"),net.forEach(t),Wbo=r(g6e," \u2014 "),Nq=n(g6e,"A",{href:!0});var set=s(Nq);Qbo=r(set,"SqueezeBertModel"),set.forEach(t),Hbo=r(g6e," (SqueezeBERT model)"),g6e.forEach(t),Ubo=i($),M_=n($,"LI",{});var h6e=s(M_);_le=n(h6e,"STRONG",{});var iet=s(_le);Jbo=r(iet,"swin"),iet.forEach(t),Ybo=r(h6e," \u2014 "),jq=n(h6e,"A",{href:!0});var det=s(jq);Kbo=r(det,"SwinModel"),det.forEach(t),Zbo=r(h6e," (Swin model)"),h6e.forEach(t),e4o=i($),E_=n($,"LI",{});var p6e=s(E_);ule=n(p6e,"STRONG",{});var cet=s(ule);o4o=r(cet,"t5"),cet.forEach(t),r4o=r(p6e," \u2014 "),Dq=n(p6e,"A",{href:!0});var fet=s(Dq);t4o=r(fet,"T5Model"),fet.forEach(t),a4o=r(p6e," (T5 model)"),p6e.forEach(t),n4o=i($),C_=n($,"LI",{});var _6e=s(C_);ble=n(_6e,"STRONG",{});var met=s(ble);s4o=r(met,"tapas"),met.forEach(t),l4o=r(_6e," \u2014 "),Gq=n(_6e,"A",{href:!0});var get=s(Gq);i4o=r(get,"TapasModel"),get.forEach(t),d4o=r(_6e," (TAPAS model)"),_6e.forEach(t),c4o=i($),w_=n($,"LI",{});var u6e=s(w_);vle=n(u6e,"STRONG",{});var het=s(vle);f4o=r(het,"trajectory_transformer"),het.forEach(t),m4o=r(u6e," \u2014 "),Oq=n(u6e,"A",{href:!0});var pet=s(Oq);g4o=r(pet,"TrajectoryTransformerModel"),pet.forEach(t),h4o=r(u6e," (Trajectory Transformer model)"),u6e.forEach(t),p4o=i($),A_=n($,"LI",{});var b6e=s(A_);Fle=n(b6e,"STRONG",{});var _et=s(Fle);_4o=r(_et,"transfo-xl"),_et.forEach(t),u4o=r(b6e," \u2014 "),Vq=n(b6e,"A",{href:!0});var uet=s(Vq);b4o=r(uet,"TransfoXLModel"),uet.forEach(t),v4o=r(b6e," (Transformer-XL model)"),b6e.forEach(t),F4o=i($),y_=n($,"LI",{});var v6e=s(y_);Tle=n(v6e,"STRONG",{});var bet=s(Tle);T4o=r(bet,"unispeech"),bet.forEach(t),M4o=r(v6e," \u2014 "),Xq=n(v6e,"A",{href:!0});var vet=s(Xq);E4o=r(vet,"UniSpeechModel"),vet.forEach(t),C4o=r(v6e," (UniSpeech model)"),v6e.forEach(t),w4o=i($),L_=n($,"LI",{});var F6e=s(L_);Mle=n(F6e,"STRONG",{});var Fet=s(Mle);A4o=r(Fet,"unispeech-sat"),Fet.forEach(t),y4o=r(F6e," \u2014 "),zq=n(F6e,"A",{href:!0});var Tet=s(zq);L4o=r(Tet,"UniSpeechSatModel"),Tet.forEach(t),x4o=r(F6e," (UniSpeechSat model)"),F6e.forEach(t),$4o=i($),x_=n($,"LI",{});var T6e=s(x_);Ele=n(T6e,"STRONG",{});var Met=s(Ele);k4o=r(Met,"van"),Met.forEach(t),S4o=r(T6e," \u2014 "),Wq=n(T6e,"A",{href:!0});var Eet=s(Wq);R4o=r(Eet,"VanModel"),Eet.forEach(t),P4o=r(T6e," (VAN model)"),T6e.forEach(t),B4o=i($),$_=n($,"LI",{});var M6e=s($_);Cle=n(M6e,"STRONG",{});var Cet=s(Cle);I4o=r(Cet,"vilt"),Cet.forEach(t),q4o=r(M6e," \u2014 "),Qq=n(M6e,"A",{href:!0});var wet=s(Qq);N4o=r(wet,"ViltModel"),wet.forEach(t),j4o=r(M6e," (ViLT model)"),M6e.forEach(t),D4o=i($),k_=n($,"LI",{});var E6e=s(k_);wle=n(E6e,"STRONG",{});var Aet=s(wle);G4o=r(Aet,"vision-text-dual-encoder"),Aet.forEach(t),O4o=r(E6e," \u2014 "),Hq=n(E6e,"A",{href:!0});var yet=s(Hq);V4o=r(yet,"VisionTextDualEncoderModel"),yet.forEach(t),X4o=r(E6e," (VisionTextDualEncoder model)"),E6e.forEach(t),z4o=i($),S_=n($,"LI",{});var C6e=s(S_);Ale=n(C6e,"STRONG",{});var Let=s(Ale);W4o=r(Let,"visual_bert"),Let.forEach(t),Q4o=r(C6e," \u2014 "),Uq=n(C6e,"A",{href:!0});var xet=s(Uq);H4o=r(xet,"VisualBertModel"),xet.forEach(t),U4o=r(C6e," (VisualBert model)"),C6e.forEach(t),J4o=i($),R_=n($,"LI",{});var w6e=s(R_);yle=n(w6e,"STRONG",{});var $et=s(yle);Y4o=r($et,"vit"),$et.forEach(t),K4o=r(w6e," \u2014 "),Jq=n(w6e,"A",{href:!0});var ket=s(Jq);Z4o=r(ket,"ViTModel"),ket.forEach(t),e5o=r(w6e," (ViT model)"),w6e.forEach(t),o5o=i($),P_=n($,"LI",{});var A6e=s(P_);Lle=n(A6e,"STRONG",{});var Set=s(Lle);r5o=r(Set,"vit_mae"),Set.forEach(t),t5o=r(A6e," \u2014 "),Yq=n(A6e,"A",{href:!0});var Ret=s(Yq);a5o=r(Ret,"ViTMAEModel"),Ret.forEach(t),n5o=r(A6e," (ViTMAE model)"),A6e.forEach(t),s5o=i($),B_=n($,"LI",{});var y6e=s(B_);xle=n(y6e,"STRONG",{});var Pet=s(xle);l5o=r(Pet,"wav2vec2"),Pet.forEach(t),i5o=r(y6e," \u2014 "),Kq=n(y6e,"A",{href:!0});var Bet=s(Kq);d5o=r(Bet,"Wav2Vec2Model"),Bet.forEach(t),c5o=r(y6e," (Wav2Vec2 model)"),y6e.forEach(t),f5o=i($),I_=n($,"LI",{});var L6e=s(I_);$le=n(L6e,"STRONG",{});var Iet=s($le);m5o=r(Iet,"wav2vec2-conformer"),Iet.forEach(t),g5o=r(L6e," \u2014 "),Zq=n(L6e,"A",{href:!0});var qet=s(Zq);h5o=r(qet,"Wav2Vec2ConformerModel"),qet.forEach(t),p5o=r(L6e," (Wav2Vec2-Conformer model)"),L6e.forEach(t),_5o=i($),q_=n($,"LI",{});var x6e=s(q_);kle=n(x6e,"STRONG",{});var Net=s(kle);u5o=r(Net,"wavlm"),Net.forEach(t),b5o=r(x6e," \u2014 "),eN=n(x6e,"A",{href:!0});var jet=s(eN);v5o=r(jet,"WavLMModel"),jet.forEach(t),F5o=r(x6e," (WavLM model)"),x6e.forEach(t),T5o=i($),N_=n($,"LI",{});var $6e=s(N_);Sle=n($6e,"STRONG",{});var Det=s(Sle);M5o=r(Det,"xglm"),Det.forEach(t),E5o=r($6e," \u2014 "),oN=n($6e,"A",{href:!0});var Get=s(oN);C5o=r(Get,"XGLMModel"),Get.forEach(t),w5o=r($6e," (XGLM model)"),$6e.forEach(t),A5o=i($),j_=n($,"LI",{});var k6e=s(j_);Rle=n(k6e,"STRONG",{});var Oet=s(Rle);y5o=r(Oet,"xlm"),Oet.forEach(t),L5o=r(k6e," \u2014 "),rN=n(k6e,"A",{href:!0});var Vet=s(rN);x5o=r(Vet,"XLMModel"),Vet.forEach(t),$5o=r(k6e," (XLM model)"),k6e.forEach(t),k5o=i($),D_=n($,"LI",{});var S6e=s(D_);Ple=n(S6e,"STRONG",{});var Xet=s(Ple);S5o=r(Xet,"xlm-prophetnet"),Xet.forEach(t),R5o=r(S6e," \u2014 "),tN=n(S6e,"A",{href:!0});var zet=s(tN);P5o=r(zet,"XLMProphetNetModel"),zet.forEach(t),B5o=r(S6e," (XLMProphetNet model)"),S6e.forEach(t),I5o=i($),G_=n($,"LI",{});var R6e=s(G_);Ble=n(R6e,"STRONG",{});var Wet=s(Ble);q5o=r(Wet,"xlm-roberta"),Wet.forEach(t),N5o=r(R6e," \u2014 "),aN=n(R6e,"A",{href:!0});var Qet=s(aN);j5o=r(Qet,"XLMRobertaModel"),Qet.forEach(t),D5o=r(R6e," (XLM-RoBERTa model)"),R6e.forEach(t),G5o=i($),O_=n($,"LI",{});var P6e=s(O_);Ile=n(P6e,"STRONG",{});var Het=s(Ile);O5o=r(Het,"xlm-roberta-xl"),Het.forEach(t),V5o=r(P6e," \u2014 "),nN=n(P6e,"A",{href:!0});var Uet=s(nN);X5o=r(Uet,"XLMRobertaXLModel"),Uet.forEach(t),z5o=r(P6e," (XLM-RoBERTa-XL model)"),P6e.forEach(t),W5o=i($),V_=n($,"LI",{});var B6e=s(V_);qle=n(B6e,"STRONG",{});var Jet=s(qle);Q5o=r(Jet,"xlnet"),Jet.forEach(t),H5o=r(B6e," \u2014 "),sN=n(B6e,"A",{href:!0});var Yet=s(sN);U5o=r(Yet,"XLNetModel"),Yet.forEach(t),J5o=r(B6e," (XLNet model)"),B6e.forEach(t),Y5o=i($),X_=n($,"LI",{});var I6e=s(X_);Nle=n(I6e,"STRONG",{});var Ket=s(Nle);K5o=r(Ket,"yolos"),Ket.forEach(t),Z5o=r(I6e," \u2014 "),lN=n(I6e,"A",{href:!0});var Zet=s(lN);evo=r(Zet,"YolosModel"),Zet.forEach(t),ovo=r(I6e," (YOLOS model)"),I6e.forEach(t),rvo=i($),z_=n($,"LI",{});var q6e=s(z_);jle=n(q6e,"STRONG",{});var eot=s(jle);tvo=r(eot,"yoso"),eot.forEach(t),avo=r(q6e," \u2014 "),iN=n(q6e,"A",{href:!0});var oot=s(iN);nvo=r(oot,"YosoModel"),oot.forEach(t),svo=r(q6e," (YOSO model)"),q6e.forEach(t),$.forEach(t),lvo=i(oa),W_=n(oa,"P",{});var N6e=s(W_);ivo=r(N6e,"The model is set in evaluation mode by default using "),Dle=n(N6e,"CODE",{});var rot=s(Dle);dvo=r(rot,"model.eval()"),rot.forEach(t),cvo=r(N6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=n(N6e,"CODE",{});var tot=s(Gle);fvo=r(tot,"model.train()"),tot.forEach(t),N6e.forEach(t),mvo=i(oa),T(Q_.$$.fragment,oa),oa.forEach(t),Vs.forEach(t),uqe=i(f),$i=n(f,"H2",{class:!0});var Tje=s($i);H_=n(Tje,"A",{id:!0,class:!0,href:!0});var aot=s(H_);Ole=n(aot,"SPAN",{});var not=s(Ole);T(z6.$$.fragment,not),not.forEach(t),aot.forEach(t),gvo=i(Tje),Vle=n(Tje,"SPAN",{});var sot=s(Vle);hvo=r(sot,"AutoModelForPreTraining"),sot.forEach(t),Tje.forEach(t),bqe=i(f),xo=n(f,"DIV",{class:!0});var Xs=s(xo);T(W6.$$.fragment,Xs),pvo=i(Xs),ki=n(Xs,"P",{});var UK=s(ki);_vo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dN=n(UK,"A",{href:!0});var lot=s(dN);uvo=r(lot,"from_pretrained()"),lot.forEach(t),bvo=r(UK," class method or the "),cN=n(UK,"A",{href:!0});var iot=s(cN);vvo=r(iot,"from_config()"),iot.forEach(t),Fvo=r(UK,` class
method.`),UK.forEach(t),Tvo=i(Xs),Q6=n(Xs,"P",{});var Mje=s(Q6);Mvo=r(Mje,"This class cannot be instantiated directly using "),Xle=n(Mje,"CODE",{});var dot=s(Xle);Evo=r(dot,"__init__()"),dot.forEach(t),Cvo=r(Mje," (throws an error)."),Mje.forEach(t),wvo=i(Xs),at=n(Xs,"DIV",{class:!0});var F0=s(at);T(H6.$$.fragment,F0),Avo=i(F0),zle=n(F0,"P",{});var cot=s(zle);yvo=r(cot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cot.forEach(t),Lvo=i(F0),Si=n(F0,"P",{});var JK=s(Si);xvo=r(JK,`Note:
Loading a model from its configuration file does `),Wle=n(JK,"STRONG",{});var fot=s(Wle);$vo=r(fot,"not"),fot.forEach(t),kvo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=n(JK,"A",{href:!0});var mot=s(fN);Svo=r(mot,"from_pretrained()"),mot.forEach(t),Rvo=r(JK," to load the model weights."),JK.forEach(t),Pvo=i(F0),T(U_.$$.fragment,F0),F0.forEach(t),Bvo=i(Xs),Ye=n(Xs,"DIV",{class:!0});var ra=s(Ye);T(U6.$$.fragment,ra),Ivo=i(ra),Qle=n(ra,"P",{});var got=s(Qle);qvo=r(got,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),got.forEach(t),Nvo=i(ra),xa=n(ra,"P",{});var T0=s(xa);jvo=r(T0,"The model class to instantiate is selected based on the "),Hle=n(T0,"CODE",{});var hot=s(Hle);Dvo=r(hot,"model_type"),hot.forEach(t),Gvo=r(T0,` property of the config object (either
passed as an argument or loaded from `),Ule=n(T0,"CODE",{});var pot=s(Ule);Ovo=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),Vvo=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=n(T0,"CODE",{});var _ot=s(Jle);Xvo=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),zvo=r(T0,":"),T0.forEach(t),Wvo=i(ra),G=n(ra,"UL",{});var O=s(G);J_=n(O,"LI",{});var j6e=s(J_);Yle=n(j6e,"STRONG",{});var uot=s(Yle);Qvo=r(uot,"albert"),uot.forEach(t),Hvo=r(j6e," \u2014 "),mN=n(j6e,"A",{href:!0});var bot=s(mN);Uvo=r(bot,"AlbertForPreTraining"),bot.forEach(t),Jvo=r(j6e," (ALBERT model)"),j6e.forEach(t),Yvo=i(O),Y_=n(O,"LI",{});var D6e=s(Y_);Kle=n(D6e,"STRONG",{});var vot=s(Kle);Kvo=r(vot,"bart"),vot.forEach(t),Zvo=r(D6e," \u2014 "),gN=n(D6e,"A",{href:!0});var Fot=s(gN);eFo=r(Fot,"BartForConditionalGeneration"),Fot.forEach(t),oFo=r(D6e," (BART model)"),D6e.forEach(t),rFo=i(O),K_=n(O,"LI",{});var G6e=s(K_);Zle=n(G6e,"STRONG",{});var Tot=s(Zle);tFo=r(Tot,"bert"),Tot.forEach(t),aFo=r(G6e," \u2014 "),hN=n(G6e,"A",{href:!0});var Mot=s(hN);nFo=r(Mot,"BertForPreTraining"),Mot.forEach(t),sFo=r(G6e," (BERT model)"),G6e.forEach(t),lFo=i(O),Z_=n(O,"LI",{});var O6e=s(Z_);eie=n(O6e,"STRONG",{});var Eot=s(eie);iFo=r(Eot,"big_bird"),Eot.forEach(t),dFo=r(O6e," \u2014 "),pN=n(O6e,"A",{href:!0});var Cot=s(pN);cFo=r(Cot,"BigBirdForPreTraining"),Cot.forEach(t),fFo=r(O6e," (BigBird model)"),O6e.forEach(t),mFo=i(O),eu=n(O,"LI",{});var V6e=s(eu);oie=n(V6e,"STRONG",{});var wot=s(oie);gFo=r(wot,"camembert"),wot.forEach(t),hFo=r(V6e," \u2014 "),_N=n(V6e,"A",{href:!0});var Aot=s(_N);pFo=r(Aot,"CamembertForMaskedLM"),Aot.forEach(t),_Fo=r(V6e," (CamemBERT model)"),V6e.forEach(t),uFo=i(O),ou=n(O,"LI",{});var X6e=s(ou);rie=n(X6e,"STRONG",{});var yot=s(rie);bFo=r(yot,"ctrl"),yot.forEach(t),vFo=r(X6e," \u2014 "),uN=n(X6e,"A",{href:!0});var Lot=s(uN);FFo=r(Lot,"CTRLLMHeadModel"),Lot.forEach(t),TFo=r(X6e," (CTRL model)"),X6e.forEach(t),MFo=i(O),ru=n(O,"LI",{});var z6e=s(ru);tie=n(z6e,"STRONG",{});var xot=s(tie);EFo=r(xot,"data2vec-text"),xot.forEach(t),CFo=r(z6e," \u2014 "),bN=n(z6e,"A",{href:!0});var $ot=s(bN);wFo=r($ot,"Data2VecTextForMaskedLM"),$ot.forEach(t),AFo=r(z6e," (Data2VecText model)"),z6e.forEach(t),yFo=i(O),tu=n(O,"LI",{});var W6e=s(tu);aie=n(W6e,"STRONG",{});var kot=s(aie);LFo=r(kot,"deberta"),kot.forEach(t),xFo=r(W6e," \u2014 "),vN=n(W6e,"A",{href:!0});var Sot=s(vN);$Fo=r(Sot,"DebertaForMaskedLM"),Sot.forEach(t),kFo=r(W6e," (DeBERTa model)"),W6e.forEach(t),SFo=i(O),au=n(O,"LI",{});var Q6e=s(au);nie=n(Q6e,"STRONG",{});var Rot=s(nie);RFo=r(Rot,"deberta-v2"),Rot.forEach(t),PFo=r(Q6e," \u2014 "),FN=n(Q6e,"A",{href:!0});var Pot=s(FN);BFo=r(Pot,"DebertaV2ForMaskedLM"),Pot.forEach(t),IFo=r(Q6e," (DeBERTa-v2 model)"),Q6e.forEach(t),qFo=i(O),nu=n(O,"LI",{});var H6e=s(nu);sie=n(H6e,"STRONG",{});var Bot=s(sie);NFo=r(Bot,"distilbert"),Bot.forEach(t),jFo=r(H6e," \u2014 "),TN=n(H6e,"A",{href:!0});var Iot=s(TN);DFo=r(Iot,"DistilBertForMaskedLM"),Iot.forEach(t),GFo=r(H6e," (DistilBERT model)"),H6e.forEach(t),OFo=i(O),su=n(O,"LI",{});var U6e=s(su);lie=n(U6e,"STRONG",{});var qot=s(lie);VFo=r(qot,"electra"),qot.forEach(t),XFo=r(U6e," \u2014 "),MN=n(U6e,"A",{href:!0});var Not=s(MN);zFo=r(Not,"ElectraForPreTraining"),Not.forEach(t),WFo=r(U6e," (ELECTRA model)"),U6e.forEach(t),QFo=i(O),lu=n(O,"LI",{});var J6e=s(lu);iie=n(J6e,"STRONG",{});var jot=s(iie);HFo=r(jot,"flaubert"),jot.forEach(t),UFo=r(J6e," \u2014 "),EN=n(J6e,"A",{href:!0});var Dot=s(EN);JFo=r(Dot,"FlaubertWithLMHeadModel"),Dot.forEach(t),YFo=r(J6e," (FlauBERT model)"),J6e.forEach(t),KFo=i(O),iu=n(O,"LI",{});var Y6e=s(iu);die=n(Y6e,"STRONG",{});var Got=s(die);ZFo=r(Got,"flava"),Got.forEach(t),eTo=r(Y6e," \u2014 "),CN=n(Y6e,"A",{href:!0});var Oot=s(CN);oTo=r(Oot,"FlavaForPreTraining"),Oot.forEach(t),rTo=r(Y6e," (Flava model)"),Y6e.forEach(t),tTo=i(O),du=n(O,"LI",{});var K6e=s(du);cie=n(K6e,"STRONG",{});var Vot=s(cie);aTo=r(Vot,"fnet"),Vot.forEach(t),nTo=r(K6e," \u2014 "),wN=n(K6e,"A",{href:!0});var Xot=s(wN);sTo=r(Xot,"FNetForPreTraining"),Xot.forEach(t),lTo=r(K6e," (FNet model)"),K6e.forEach(t),iTo=i(O),cu=n(O,"LI",{});var Z6e=s(cu);fie=n(Z6e,"STRONG",{});var zot=s(fie);dTo=r(zot,"fsmt"),zot.forEach(t),cTo=r(Z6e," \u2014 "),AN=n(Z6e,"A",{href:!0});var Wot=s(AN);fTo=r(Wot,"FSMTForConditionalGeneration"),Wot.forEach(t),mTo=r(Z6e," (FairSeq Machine-Translation model)"),Z6e.forEach(t),gTo=i(O),fu=n(O,"LI",{});var eye=s(fu);mie=n(eye,"STRONG",{});var Qot=s(mie);hTo=r(Qot,"funnel"),Qot.forEach(t),pTo=r(eye," \u2014 "),yN=n(eye,"A",{href:!0});var Hot=s(yN);_To=r(Hot,"FunnelForPreTraining"),Hot.forEach(t),uTo=r(eye," (Funnel Transformer model)"),eye.forEach(t),bTo=i(O),mu=n(O,"LI",{});var oye=s(mu);gie=n(oye,"STRONG",{});var Uot=s(gie);vTo=r(Uot,"gpt2"),Uot.forEach(t),FTo=r(oye," \u2014 "),LN=n(oye,"A",{href:!0});var Jot=s(LN);TTo=r(Jot,"GPT2LMHeadModel"),Jot.forEach(t),MTo=r(oye," (OpenAI GPT-2 model)"),oye.forEach(t),ETo=i(O),gu=n(O,"LI",{});var rye=s(gu);hie=n(rye,"STRONG",{});var Yot=s(hie);CTo=r(Yot,"ibert"),Yot.forEach(t),wTo=r(rye," \u2014 "),xN=n(rye,"A",{href:!0});var Kot=s(xN);ATo=r(Kot,"IBertForMaskedLM"),Kot.forEach(t),yTo=r(rye," (I-BERT model)"),rye.forEach(t),LTo=i(O),hu=n(O,"LI",{});var tye=s(hu);pie=n(tye,"STRONG",{});var Zot=s(pie);xTo=r(Zot,"layoutlm"),Zot.forEach(t),$To=r(tye," \u2014 "),$N=n(tye,"A",{href:!0});var ert=s($N);kTo=r(ert,"LayoutLMForMaskedLM"),ert.forEach(t),STo=r(tye," (LayoutLM model)"),tye.forEach(t),RTo=i(O),pu=n(O,"LI",{});var aye=s(pu);_ie=n(aye,"STRONG",{});var ort=s(_ie);PTo=r(ort,"longformer"),ort.forEach(t),BTo=r(aye," \u2014 "),kN=n(aye,"A",{href:!0});var rrt=s(kN);ITo=r(rrt,"LongformerForMaskedLM"),rrt.forEach(t),qTo=r(aye," (Longformer model)"),aye.forEach(t),NTo=i(O),_u=n(O,"LI",{});var nye=s(_u);uie=n(nye,"STRONG",{});var trt=s(uie);jTo=r(trt,"lxmert"),trt.forEach(t),DTo=r(nye," \u2014 "),SN=n(nye,"A",{href:!0});var art=s(SN);GTo=r(art,"LxmertForPreTraining"),art.forEach(t),OTo=r(nye," (LXMERT model)"),nye.forEach(t),VTo=i(O),uu=n(O,"LI",{});var sye=s(uu);bie=n(sye,"STRONG",{});var nrt=s(bie);XTo=r(nrt,"megatron-bert"),nrt.forEach(t),zTo=r(sye," \u2014 "),RN=n(sye,"A",{href:!0});var srt=s(RN);WTo=r(srt,"MegatronBertForPreTraining"),srt.forEach(t),QTo=r(sye," (MegatronBert model)"),sye.forEach(t),HTo=i(O),bu=n(O,"LI",{});var lye=s(bu);vie=n(lye,"STRONG",{});var lrt=s(vie);UTo=r(lrt,"mobilebert"),lrt.forEach(t),JTo=r(lye," \u2014 "),PN=n(lye,"A",{href:!0});var irt=s(PN);YTo=r(irt,"MobileBertForPreTraining"),irt.forEach(t),KTo=r(lye," (MobileBERT model)"),lye.forEach(t),ZTo=i(O),vu=n(O,"LI",{});var iye=s(vu);Fie=n(iye,"STRONG",{});var drt=s(Fie);e7o=r(drt,"mpnet"),drt.forEach(t),o7o=r(iye," \u2014 "),BN=n(iye,"A",{href:!0});var crt=s(BN);r7o=r(crt,"MPNetForMaskedLM"),crt.forEach(t),t7o=r(iye," (MPNet model)"),iye.forEach(t),a7o=i(O),Fu=n(O,"LI",{});var dye=s(Fu);Tie=n(dye,"STRONG",{});var frt=s(Tie);n7o=r(frt,"openai-gpt"),frt.forEach(t),s7o=r(dye," \u2014 "),IN=n(dye,"A",{href:!0});var mrt=s(IN);l7o=r(mrt,"OpenAIGPTLMHeadModel"),mrt.forEach(t),i7o=r(dye," (OpenAI GPT model)"),dye.forEach(t),d7o=i(O),Tu=n(O,"LI",{});var cye=s(Tu);Mie=n(cye,"STRONG",{});var grt=s(Mie);c7o=r(grt,"retribert"),grt.forEach(t),f7o=r(cye," \u2014 "),qN=n(cye,"A",{href:!0});var hrt=s(qN);m7o=r(hrt,"RetriBertModel"),hrt.forEach(t),g7o=r(cye," (RetriBERT model)"),cye.forEach(t),h7o=i(O),Mu=n(O,"LI",{});var fye=s(Mu);Eie=n(fye,"STRONG",{});var prt=s(Eie);p7o=r(prt,"roberta"),prt.forEach(t),_7o=r(fye," \u2014 "),NN=n(fye,"A",{href:!0});var _rt=s(NN);u7o=r(_rt,"RobertaForMaskedLM"),_rt.forEach(t),b7o=r(fye," (RoBERTa model)"),fye.forEach(t),v7o=i(O),Eu=n(O,"LI",{});var mye=s(Eu);Cie=n(mye,"STRONG",{});var urt=s(Cie);F7o=r(urt,"splinter"),urt.forEach(t),T7o=r(mye," \u2014 "),jN=n(mye,"A",{href:!0});var brt=s(jN);M7o=r(brt,"SplinterForPreTraining"),brt.forEach(t),E7o=r(mye," (Splinter model)"),mye.forEach(t),C7o=i(O),Cu=n(O,"LI",{});var gye=s(Cu);wie=n(gye,"STRONG",{});var vrt=s(wie);w7o=r(vrt,"squeezebert"),vrt.forEach(t),A7o=r(gye," \u2014 "),DN=n(gye,"A",{href:!0});var Frt=s(DN);y7o=r(Frt,"SqueezeBertForMaskedLM"),Frt.forEach(t),L7o=r(gye," (SqueezeBERT model)"),gye.forEach(t),x7o=i(O),wu=n(O,"LI",{});var hye=s(wu);Aie=n(hye,"STRONG",{});var Trt=s(Aie);$7o=r(Trt,"t5"),Trt.forEach(t),k7o=r(hye," \u2014 "),GN=n(hye,"A",{href:!0});var Mrt=s(GN);S7o=r(Mrt,"T5ForConditionalGeneration"),Mrt.forEach(t),R7o=r(hye," (T5 model)"),hye.forEach(t),P7o=i(O),Au=n(O,"LI",{});var pye=s(Au);yie=n(pye,"STRONG",{});var Ert=s(yie);B7o=r(Ert,"tapas"),Ert.forEach(t),I7o=r(pye," \u2014 "),ON=n(pye,"A",{href:!0});var Crt=s(ON);q7o=r(Crt,"TapasForMaskedLM"),Crt.forEach(t),N7o=r(pye," (TAPAS model)"),pye.forEach(t),j7o=i(O),yu=n(O,"LI",{});var _ye=s(yu);Lie=n(_ye,"STRONG",{});var wrt=s(Lie);D7o=r(wrt,"transfo-xl"),wrt.forEach(t),G7o=r(_ye," \u2014 "),VN=n(_ye,"A",{href:!0});var Art=s(VN);O7o=r(Art,"TransfoXLLMHeadModel"),Art.forEach(t),V7o=r(_ye," (Transformer-XL model)"),_ye.forEach(t),X7o=i(O),Lu=n(O,"LI",{});var uye=s(Lu);xie=n(uye,"STRONG",{});var yrt=s(xie);z7o=r(yrt,"unispeech"),yrt.forEach(t),W7o=r(uye," \u2014 "),XN=n(uye,"A",{href:!0});var Lrt=s(XN);Q7o=r(Lrt,"UniSpeechForPreTraining"),Lrt.forEach(t),H7o=r(uye," (UniSpeech model)"),uye.forEach(t),U7o=i(O),xu=n(O,"LI",{});var bye=s(xu);$ie=n(bye,"STRONG",{});var xrt=s($ie);J7o=r(xrt,"unispeech-sat"),xrt.forEach(t),Y7o=r(bye," \u2014 "),zN=n(bye,"A",{href:!0});var $rt=s(zN);K7o=r($rt,"UniSpeechSatForPreTraining"),$rt.forEach(t),Z7o=r(bye," (UniSpeechSat model)"),bye.forEach(t),eMo=i(O),$u=n(O,"LI",{});var vye=s($u);kie=n(vye,"STRONG",{});var krt=s(kie);oMo=r(krt,"visual_bert"),krt.forEach(t),rMo=r(vye," \u2014 "),WN=n(vye,"A",{href:!0});var Srt=s(WN);tMo=r(Srt,"VisualBertForPreTraining"),Srt.forEach(t),aMo=r(vye," (VisualBert model)"),vye.forEach(t),nMo=i(O),ku=n(O,"LI",{});var Fye=s(ku);Sie=n(Fye,"STRONG",{});var Rrt=s(Sie);sMo=r(Rrt,"vit_mae"),Rrt.forEach(t),lMo=r(Fye," \u2014 "),QN=n(Fye,"A",{href:!0});var Prt=s(QN);iMo=r(Prt,"ViTMAEForPreTraining"),Prt.forEach(t),dMo=r(Fye," (ViTMAE model)"),Fye.forEach(t),cMo=i(O),Su=n(O,"LI",{});var Tye=s(Su);Rie=n(Tye,"STRONG",{});var Brt=s(Rie);fMo=r(Brt,"wav2vec2"),Brt.forEach(t),mMo=r(Tye," \u2014 "),HN=n(Tye,"A",{href:!0});var Irt=s(HN);gMo=r(Irt,"Wav2Vec2ForPreTraining"),Irt.forEach(t),hMo=r(Tye," (Wav2Vec2 model)"),Tye.forEach(t),pMo=i(O),Ru=n(O,"LI",{});var Mye=s(Ru);Pie=n(Mye,"STRONG",{});var qrt=s(Pie);_Mo=r(qrt,"wav2vec2-conformer"),qrt.forEach(t),uMo=r(Mye," \u2014 "),UN=n(Mye,"A",{href:!0});var Nrt=s(UN);bMo=r(Nrt,"Wav2Vec2ConformerForPreTraining"),Nrt.forEach(t),vMo=r(Mye," (Wav2Vec2-Conformer model)"),Mye.forEach(t),FMo=i(O),Pu=n(O,"LI",{});var Eye=s(Pu);Bie=n(Eye,"STRONG",{});var jrt=s(Bie);TMo=r(jrt,"xlm"),jrt.forEach(t),MMo=r(Eye," \u2014 "),JN=n(Eye,"A",{href:!0});var Drt=s(JN);EMo=r(Drt,"XLMWithLMHeadModel"),Drt.forEach(t),CMo=r(Eye," (XLM model)"),Eye.forEach(t),wMo=i(O),Bu=n(O,"LI",{});var Cye=s(Bu);Iie=n(Cye,"STRONG",{});var Grt=s(Iie);AMo=r(Grt,"xlm-roberta"),Grt.forEach(t),yMo=r(Cye," \u2014 "),YN=n(Cye,"A",{href:!0});var Ort=s(YN);LMo=r(Ort,"XLMRobertaForMaskedLM"),Ort.forEach(t),xMo=r(Cye," (XLM-RoBERTa model)"),Cye.forEach(t),$Mo=i(O),Iu=n(O,"LI",{});var wye=s(Iu);qie=n(wye,"STRONG",{});var Vrt=s(qie);kMo=r(Vrt,"xlm-roberta-xl"),Vrt.forEach(t),SMo=r(wye," \u2014 "),KN=n(wye,"A",{href:!0});var Xrt=s(KN);RMo=r(Xrt,"XLMRobertaXLForMaskedLM"),Xrt.forEach(t),PMo=r(wye," (XLM-RoBERTa-XL model)"),wye.forEach(t),BMo=i(O),qu=n(O,"LI",{});var Aye=s(qu);Nie=n(Aye,"STRONG",{});var zrt=s(Nie);IMo=r(zrt,"xlnet"),zrt.forEach(t),qMo=r(Aye," \u2014 "),ZN=n(Aye,"A",{href:!0});var Wrt=s(ZN);NMo=r(Wrt,"XLNetLMHeadModel"),Wrt.forEach(t),jMo=r(Aye," (XLNet model)"),Aye.forEach(t),O.forEach(t),DMo=i(ra),Nu=n(ra,"P",{});var yye=s(Nu);GMo=r(yye,"The model is set in evaluation mode by default using "),jie=n(yye,"CODE",{});var Qrt=s(jie);OMo=r(Qrt,"model.eval()"),Qrt.forEach(t),VMo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(yye,"CODE",{});var Hrt=s(Die);XMo=r(Hrt,"model.train()"),Hrt.forEach(t),yye.forEach(t),zMo=i(ra),T(ju.$$.fragment,ra),ra.forEach(t),Xs.forEach(t),vqe=i(f),Ri=n(f,"H2",{class:!0});var Eje=s(Ri);Du=n(Eje,"A",{id:!0,class:!0,href:!0});var Urt=s(Du);Gie=n(Urt,"SPAN",{});var Jrt=s(Gie);T(J6.$$.fragment,Jrt),Jrt.forEach(t),Urt.forEach(t),WMo=i(Eje),Oie=n(Eje,"SPAN",{});var Yrt=s(Oie);QMo=r(Yrt,"AutoModelForCausalLM"),Yrt.forEach(t),Eje.forEach(t),Fqe=i(f),$o=n(f,"DIV",{class:!0});var zs=s($o);T(Y6.$$.fragment,zs),HMo=i(zs),Pi=n(zs,"P",{});var YK=s(Pi);UMo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ej=n(YK,"A",{href:!0});var Krt=s(ej);JMo=r(Krt,"from_pretrained()"),Krt.forEach(t),YMo=r(YK," class method or the "),oj=n(YK,"A",{href:!0});var Zrt=s(oj);KMo=r(Zrt,"from_config()"),Zrt.forEach(t),ZMo=r(YK,` class
method.`),YK.forEach(t),eEo=i(zs),K6=n(zs,"P",{});var Cje=s(K6);oEo=r(Cje,"This class cannot be instantiated directly using "),Vie=n(Cje,"CODE",{});var ett=s(Vie);rEo=r(ett,"__init__()"),ett.forEach(t),tEo=r(Cje," (throws an error)."),Cje.forEach(t),aEo=i(zs),nt=n(zs,"DIV",{class:!0});var M0=s(nt);T(Z6.$$.fragment,M0),nEo=i(M0),Xie=n(M0,"P",{});var ott=s(Xie);sEo=r(ott,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ott.forEach(t),lEo=i(M0),Bi=n(M0,"P",{});var KK=s(Bi);iEo=r(KK,`Note:
Loading a model from its configuration file does `),zie=n(KK,"STRONG",{});var rtt=s(zie);dEo=r(rtt,"not"),rtt.forEach(t),cEo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(KK,"A",{href:!0});var ttt=s(rj);fEo=r(ttt,"from_pretrained()"),ttt.forEach(t),mEo=r(KK," to load the model weights."),KK.forEach(t),gEo=i(M0),T(Gu.$$.fragment,M0),M0.forEach(t),hEo=i(zs),Ke=n(zs,"DIV",{class:!0});var ta=s(Ke);T(ey.$$.fragment,ta),pEo=i(ta),Wie=n(ta,"P",{});var att=s(Wie);_Eo=r(att,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),att.forEach(t),uEo=i(ta),$a=n(ta,"P",{});var E0=s($a);bEo=r(E0,"The model class to instantiate is selected based on the "),Qie=n(E0,"CODE",{});var ntt=s(Qie);vEo=r(ntt,"model_type"),ntt.forEach(t),FEo=r(E0,` property of the config object (either
passed as an argument or loaded from `),Hie=n(E0,"CODE",{});var stt=s(Hie);TEo=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),MEo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=n(E0,"CODE",{});var ltt=s(Uie);EEo=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),CEo=r(E0,":"),E0.forEach(t),wEo=i(ta),z=n(ta,"UL",{});var Q=s(z);Ou=n(Q,"LI",{});var Lye=s(Ou);Jie=n(Lye,"STRONG",{});var itt=s(Jie);AEo=r(itt,"bart"),itt.forEach(t),yEo=r(Lye," \u2014 "),tj=n(Lye,"A",{href:!0});var dtt=s(tj);LEo=r(dtt,"BartForCausalLM"),dtt.forEach(t),xEo=r(Lye," (BART model)"),Lye.forEach(t),$Eo=i(Q),Vu=n(Q,"LI",{});var xye=s(Vu);Yie=n(xye,"STRONG",{});var ctt=s(Yie);kEo=r(ctt,"bert"),ctt.forEach(t),SEo=r(xye," \u2014 "),aj=n(xye,"A",{href:!0});var ftt=s(aj);REo=r(ftt,"BertLMHeadModel"),ftt.forEach(t),PEo=r(xye," (BERT model)"),xye.forEach(t),BEo=i(Q),Xu=n(Q,"LI",{});var $ye=s(Xu);Kie=n($ye,"STRONG",{});var mtt=s(Kie);IEo=r(mtt,"bert-generation"),mtt.forEach(t),qEo=r($ye," \u2014 "),nj=n($ye,"A",{href:!0});var gtt=s(nj);NEo=r(gtt,"BertGenerationDecoder"),gtt.forEach(t),jEo=r($ye," (Bert Generation model)"),$ye.forEach(t),DEo=i(Q),zu=n(Q,"LI",{});var kye=s(zu);Zie=n(kye,"STRONG",{});var htt=s(Zie);GEo=r(htt,"big_bird"),htt.forEach(t),OEo=r(kye," \u2014 "),sj=n(kye,"A",{href:!0});var ptt=s(sj);VEo=r(ptt,"BigBirdForCausalLM"),ptt.forEach(t),XEo=r(kye," (BigBird model)"),kye.forEach(t),zEo=i(Q),Wu=n(Q,"LI",{});var Sye=s(Wu);ede=n(Sye,"STRONG",{});var _tt=s(ede);WEo=r(_tt,"bigbird_pegasus"),_tt.forEach(t),QEo=r(Sye," \u2014 "),lj=n(Sye,"A",{href:!0});var utt=s(lj);HEo=r(utt,"BigBirdPegasusForCausalLM"),utt.forEach(t),UEo=r(Sye," (BigBirdPegasus model)"),Sye.forEach(t),JEo=i(Q),Qu=n(Q,"LI",{});var Rye=s(Qu);ode=n(Rye,"STRONG",{});var btt=s(ode);YEo=r(btt,"blenderbot"),btt.forEach(t),KEo=r(Rye," \u2014 "),ij=n(Rye,"A",{href:!0});var vtt=s(ij);ZEo=r(vtt,"BlenderbotForCausalLM"),vtt.forEach(t),eCo=r(Rye," (Blenderbot model)"),Rye.forEach(t),oCo=i(Q),Hu=n(Q,"LI",{});var Pye=s(Hu);rde=n(Pye,"STRONG",{});var Ftt=s(rde);rCo=r(Ftt,"blenderbot-small"),Ftt.forEach(t),tCo=r(Pye," \u2014 "),dj=n(Pye,"A",{href:!0});var Ttt=s(dj);aCo=r(Ttt,"BlenderbotSmallForCausalLM"),Ttt.forEach(t),nCo=r(Pye," (BlenderbotSmall model)"),Pye.forEach(t),sCo=i(Q),Uu=n(Q,"LI",{});var Bye=s(Uu);tde=n(Bye,"STRONG",{});var Mtt=s(tde);lCo=r(Mtt,"camembert"),Mtt.forEach(t),iCo=r(Bye," \u2014 "),cj=n(Bye,"A",{href:!0});var Ett=s(cj);dCo=r(Ett,"CamembertForCausalLM"),Ett.forEach(t),cCo=r(Bye," (CamemBERT model)"),Bye.forEach(t),fCo=i(Q),Ju=n(Q,"LI",{});var Iye=s(Ju);ade=n(Iye,"STRONG",{});var Ctt=s(ade);mCo=r(Ctt,"ctrl"),Ctt.forEach(t),gCo=r(Iye," \u2014 "),fj=n(Iye,"A",{href:!0});var wtt=s(fj);hCo=r(wtt,"CTRLLMHeadModel"),wtt.forEach(t),pCo=r(Iye," (CTRL model)"),Iye.forEach(t),_Co=i(Q),Yu=n(Q,"LI",{});var qye=s(Yu);nde=n(qye,"STRONG",{});var Att=s(nde);uCo=r(Att,"data2vec-text"),Att.forEach(t),bCo=r(qye," \u2014 "),mj=n(qye,"A",{href:!0});var ytt=s(mj);vCo=r(ytt,"Data2VecTextForCausalLM"),ytt.forEach(t),FCo=r(qye," (Data2VecText model)"),qye.forEach(t),TCo=i(Q),Ku=n(Q,"LI",{});var Nye=s(Ku);sde=n(Nye,"STRONG",{});var Ltt=s(sde);MCo=r(Ltt,"electra"),Ltt.forEach(t),ECo=r(Nye," \u2014 "),gj=n(Nye,"A",{href:!0});var xtt=s(gj);CCo=r(xtt,"ElectraForCausalLM"),xtt.forEach(t),wCo=r(Nye," (ELECTRA model)"),Nye.forEach(t),ACo=i(Q),Zu=n(Q,"LI",{});var jye=s(Zu);lde=n(jye,"STRONG",{});var $tt=s(lde);yCo=r($tt,"gpt2"),$tt.forEach(t),LCo=r(jye," \u2014 "),hj=n(jye,"A",{href:!0});var ktt=s(hj);xCo=r(ktt,"GPT2LMHeadModel"),ktt.forEach(t),$Co=r(jye," (OpenAI GPT-2 model)"),jye.forEach(t),kCo=i(Q),e2=n(Q,"LI",{});var Dye=s(e2);ide=n(Dye,"STRONG",{});var Stt=s(ide);SCo=r(Stt,"gpt_neo"),Stt.forEach(t),RCo=r(Dye," \u2014 "),pj=n(Dye,"A",{href:!0});var Rtt=s(pj);PCo=r(Rtt,"GPTNeoForCausalLM"),Rtt.forEach(t),BCo=r(Dye," (GPT Neo model)"),Dye.forEach(t),ICo=i(Q),o2=n(Q,"LI",{});var Gye=s(o2);dde=n(Gye,"STRONG",{});var Ptt=s(dde);qCo=r(Ptt,"gptj"),Ptt.forEach(t),NCo=r(Gye," \u2014 "),_j=n(Gye,"A",{href:!0});var Btt=s(_j);jCo=r(Btt,"GPTJForCausalLM"),Btt.forEach(t),DCo=r(Gye," (GPT-J model)"),Gye.forEach(t),GCo=i(Q),r2=n(Q,"LI",{});var Oye=s(r2);cde=n(Oye,"STRONG",{});var Itt=s(cde);OCo=r(Itt,"marian"),Itt.forEach(t),VCo=r(Oye," \u2014 "),uj=n(Oye,"A",{href:!0});var qtt=s(uj);XCo=r(qtt,"MarianForCausalLM"),qtt.forEach(t),zCo=r(Oye," (Marian model)"),Oye.forEach(t),WCo=i(Q),t2=n(Q,"LI",{});var Vye=s(t2);fde=n(Vye,"STRONG",{});var Ntt=s(fde);QCo=r(Ntt,"mbart"),Ntt.forEach(t),HCo=r(Vye," \u2014 "),bj=n(Vye,"A",{href:!0});var jtt=s(bj);UCo=r(jtt,"MBartForCausalLM"),jtt.forEach(t),JCo=r(Vye," (mBART model)"),Vye.forEach(t),YCo=i(Q),a2=n(Q,"LI",{});var Xye=s(a2);mde=n(Xye,"STRONG",{});var Dtt=s(mde);KCo=r(Dtt,"megatron-bert"),Dtt.forEach(t),ZCo=r(Xye," \u2014 "),vj=n(Xye,"A",{href:!0});var Gtt=s(vj);e3o=r(Gtt,"MegatronBertForCausalLM"),Gtt.forEach(t),o3o=r(Xye," (MegatronBert model)"),Xye.forEach(t),r3o=i(Q),n2=n(Q,"LI",{});var zye=s(n2);gde=n(zye,"STRONG",{});var Ott=s(gde);t3o=r(Ott,"openai-gpt"),Ott.forEach(t),a3o=r(zye," \u2014 "),Fj=n(zye,"A",{href:!0});var Vtt=s(Fj);n3o=r(Vtt,"OpenAIGPTLMHeadModel"),Vtt.forEach(t),s3o=r(zye," (OpenAI GPT model)"),zye.forEach(t),l3o=i(Q),s2=n(Q,"LI",{});var Wye=s(s2);hde=n(Wye,"STRONG",{});var Xtt=s(hde);i3o=r(Xtt,"opt"),Xtt.forEach(t),d3o=r(Wye," \u2014 "),Tj=n(Wye,"A",{href:!0});var ztt=s(Tj);c3o=r(ztt,"OPTForCausalLM"),ztt.forEach(t),f3o=r(Wye," (OPT model)"),Wye.forEach(t),m3o=i(Q),l2=n(Q,"LI",{});var Qye=s(l2);pde=n(Qye,"STRONG",{});var Wtt=s(pde);g3o=r(Wtt,"pegasus"),Wtt.forEach(t),h3o=r(Qye," \u2014 "),Mj=n(Qye,"A",{href:!0});var Qtt=s(Mj);p3o=r(Qtt,"PegasusForCausalLM"),Qtt.forEach(t),_3o=r(Qye," (Pegasus model)"),Qye.forEach(t),u3o=i(Q),i2=n(Q,"LI",{});var Hye=s(i2);_de=n(Hye,"STRONG",{});var Htt=s(_de);b3o=r(Htt,"plbart"),Htt.forEach(t),v3o=r(Hye," \u2014 "),Ej=n(Hye,"A",{href:!0});var Utt=s(Ej);F3o=r(Utt,"PLBartForCausalLM"),Utt.forEach(t),T3o=r(Hye," (PLBart model)"),Hye.forEach(t),M3o=i(Q),d2=n(Q,"LI",{});var Uye=s(d2);ude=n(Uye,"STRONG",{});var Jtt=s(ude);E3o=r(Jtt,"prophetnet"),Jtt.forEach(t),C3o=r(Uye," \u2014 "),Cj=n(Uye,"A",{href:!0});var Ytt=s(Cj);w3o=r(Ytt,"ProphetNetForCausalLM"),Ytt.forEach(t),A3o=r(Uye," (ProphetNet model)"),Uye.forEach(t),y3o=i(Q),c2=n(Q,"LI",{});var Jye=s(c2);bde=n(Jye,"STRONG",{});var Ktt=s(bde);L3o=r(Ktt,"qdqbert"),Ktt.forEach(t),x3o=r(Jye," \u2014 "),wj=n(Jye,"A",{href:!0});var Ztt=s(wj);$3o=r(Ztt,"QDQBertLMHeadModel"),Ztt.forEach(t),k3o=r(Jye," (QDQBert model)"),Jye.forEach(t),S3o=i(Q),f2=n(Q,"LI",{});var Yye=s(f2);vde=n(Yye,"STRONG",{});var eat=s(vde);R3o=r(eat,"reformer"),eat.forEach(t),P3o=r(Yye," \u2014 "),Aj=n(Yye,"A",{href:!0});var oat=s(Aj);B3o=r(oat,"ReformerModelWithLMHead"),oat.forEach(t),I3o=r(Yye," (Reformer model)"),Yye.forEach(t),q3o=i(Q),m2=n(Q,"LI",{});var Kye=s(m2);Fde=n(Kye,"STRONG",{});var rat=s(Fde);N3o=r(rat,"rembert"),rat.forEach(t),j3o=r(Kye," \u2014 "),yj=n(Kye,"A",{href:!0});var tat=s(yj);D3o=r(tat,"RemBertForCausalLM"),tat.forEach(t),G3o=r(Kye," (RemBERT model)"),Kye.forEach(t),O3o=i(Q),g2=n(Q,"LI",{});var Zye=s(g2);Tde=n(Zye,"STRONG",{});var aat=s(Tde);V3o=r(aat,"roberta"),aat.forEach(t),X3o=r(Zye," \u2014 "),Lj=n(Zye,"A",{href:!0});var nat=s(Lj);z3o=r(nat,"RobertaForCausalLM"),nat.forEach(t),W3o=r(Zye," (RoBERTa model)"),Zye.forEach(t),Q3o=i(Q),h2=n(Q,"LI",{});var eLe=s(h2);Mde=n(eLe,"STRONG",{});var sat=s(Mde);H3o=r(sat,"roformer"),sat.forEach(t),U3o=r(eLe," \u2014 "),xj=n(eLe,"A",{href:!0});var lat=s(xj);J3o=r(lat,"RoFormerForCausalLM"),lat.forEach(t),Y3o=r(eLe," (RoFormer model)"),eLe.forEach(t),K3o=i(Q),p2=n(Q,"LI",{});var oLe=s(p2);Ede=n(oLe,"STRONG",{});var iat=s(Ede);Z3o=r(iat,"speech_to_text_2"),iat.forEach(t),ewo=r(oLe," \u2014 "),$j=n(oLe,"A",{href:!0});var dat=s($j);owo=r(dat,"Speech2Text2ForCausalLM"),dat.forEach(t),rwo=r(oLe," (Speech2Text2 model)"),oLe.forEach(t),two=i(Q),_2=n(Q,"LI",{});var rLe=s(_2);Cde=n(rLe,"STRONG",{});var cat=s(Cde);awo=r(cat,"transfo-xl"),cat.forEach(t),nwo=r(rLe," \u2014 "),kj=n(rLe,"A",{href:!0});var fat=s(kj);swo=r(fat,"TransfoXLLMHeadModel"),fat.forEach(t),lwo=r(rLe," (Transformer-XL model)"),rLe.forEach(t),iwo=i(Q),u2=n(Q,"LI",{});var tLe=s(u2);wde=n(tLe,"STRONG",{});var mat=s(wde);dwo=r(mat,"trocr"),mat.forEach(t),cwo=r(tLe," \u2014 "),Sj=n(tLe,"A",{href:!0});var gat=s(Sj);fwo=r(gat,"TrOCRForCausalLM"),gat.forEach(t),mwo=r(tLe," (TrOCR model)"),tLe.forEach(t),gwo=i(Q),b2=n(Q,"LI",{});var aLe=s(b2);Ade=n(aLe,"STRONG",{});var hat=s(Ade);hwo=r(hat,"xglm"),hat.forEach(t),pwo=r(aLe," \u2014 "),Rj=n(aLe,"A",{href:!0});var pat=s(Rj);_wo=r(pat,"XGLMForCausalLM"),pat.forEach(t),uwo=r(aLe," (XGLM model)"),aLe.forEach(t),bwo=i(Q),v2=n(Q,"LI",{});var nLe=s(v2);yde=n(nLe,"STRONG",{});var _at=s(yde);vwo=r(_at,"xlm"),_at.forEach(t),Fwo=r(nLe," \u2014 "),Pj=n(nLe,"A",{href:!0});var uat=s(Pj);Two=r(uat,"XLMWithLMHeadModel"),uat.forEach(t),Mwo=r(nLe," (XLM model)"),nLe.forEach(t),Ewo=i(Q),F2=n(Q,"LI",{});var sLe=s(F2);Lde=n(sLe,"STRONG",{});var bat=s(Lde);Cwo=r(bat,"xlm-prophetnet"),bat.forEach(t),wwo=r(sLe," \u2014 "),Bj=n(sLe,"A",{href:!0});var vat=s(Bj);Awo=r(vat,"XLMProphetNetForCausalLM"),vat.forEach(t),ywo=r(sLe," (XLMProphetNet model)"),sLe.forEach(t),Lwo=i(Q),T2=n(Q,"LI",{});var lLe=s(T2);xde=n(lLe,"STRONG",{});var Fat=s(xde);xwo=r(Fat,"xlm-roberta"),Fat.forEach(t),$wo=r(lLe," \u2014 "),Ij=n(lLe,"A",{href:!0});var Tat=s(Ij);kwo=r(Tat,"XLMRobertaForCausalLM"),Tat.forEach(t),Swo=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),Rwo=i(Q),M2=n(Q,"LI",{});var iLe=s(M2);$de=n(iLe,"STRONG",{});var Mat=s($de);Pwo=r(Mat,"xlm-roberta-xl"),Mat.forEach(t),Bwo=r(iLe," \u2014 "),qj=n(iLe,"A",{href:!0});var Eat=s(qj);Iwo=r(Eat,"XLMRobertaXLForCausalLM"),Eat.forEach(t),qwo=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),Nwo=i(Q),E2=n(Q,"LI",{});var dLe=s(E2);kde=n(dLe,"STRONG",{});var Cat=s(kde);jwo=r(Cat,"xlnet"),Cat.forEach(t),Dwo=r(dLe," \u2014 "),Nj=n(dLe,"A",{href:!0});var wat=s(Nj);Gwo=r(wat,"XLNetLMHeadModel"),wat.forEach(t),Owo=r(dLe," (XLNet model)"),dLe.forEach(t),Q.forEach(t),Vwo=i(ta),C2=n(ta,"P",{});var cLe=s(C2);Xwo=r(cLe,"The model is set in evaluation mode by default using "),Sde=n(cLe,"CODE",{});var Aat=s(Sde);zwo=r(Aat,"model.eval()"),Aat.forEach(t),Wwo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=n(cLe,"CODE",{});var yat=s(Rde);Qwo=r(yat,"model.train()"),yat.forEach(t),cLe.forEach(t),Hwo=i(ta),T(w2.$$.fragment,ta),ta.forEach(t),zs.forEach(t),Tqe=i(f),Ii=n(f,"H2",{class:!0});var wje=s(Ii);A2=n(wje,"A",{id:!0,class:!0,href:!0});var Lat=s(A2);Pde=n(Lat,"SPAN",{});var xat=s(Pde);T(oy.$$.fragment,xat),xat.forEach(t),Lat.forEach(t),Uwo=i(wje),Bde=n(wje,"SPAN",{});var $at=s(Bde);Jwo=r($at,"AutoModelForMaskedLM"),$at.forEach(t),wje.forEach(t),Mqe=i(f),ko=n(f,"DIV",{class:!0});var Ws=s(ko);T(ry.$$.fragment,Ws),Ywo=i(Ws),qi=n(Ws,"P",{});var ZK=s(qi);Kwo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jj=n(ZK,"A",{href:!0});var kat=s(jj);Zwo=r(kat,"from_pretrained()"),kat.forEach(t),e0o=r(ZK," class method or the "),Dj=n(ZK,"A",{href:!0});var Sat=s(Dj);o0o=r(Sat,"from_config()"),Sat.forEach(t),r0o=r(ZK,` class
method.`),ZK.forEach(t),t0o=i(Ws),ty=n(Ws,"P",{});var Aje=s(ty);a0o=r(Aje,"This class cannot be instantiated directly using "),Ide=n(Aje,"CODE",{});var Rat=s(Ide);n0o=r(Rat,"__init__()"),Rat.forEach(t),s0o=r(Aje," (throws an error)."),Aje.forEach(t),l0o=i(Ws),st=n(Ws,"DIV",{class:!0});var C0=s(st);T(ay.$$.fragment,C0),i0o=i(C0),qde=n(C0,"P",{});var Pat=s(qde);d0o=r(Pat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pat.forEach(t),c0o=i(C0),Ni=n(C0,"P",{});var eZ=s(Ni);f0o=r(eZ,`Note:
Loading a model from its configuration file does `),Nde=n(eZ,"STRONG",{});var Bat=s(Nde);m0o=r(Bat,"not"),Bat.forEach(t),g0o=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gj=n(eZ,"A",{href:!0});var Iat=s(Gj);h0o=r(Iat,"from_pretrained()"),Iat.forEach(t),p0o=r(eZ," to load the model weights."),eZ.forEach(t),_0o=i(C0),T(y2.$$.fragment,C0),C0.forEach(t),u0o=i(Ws),Ze=n(Ws,"DIV",{class:!0});var aa=s(Ze);T(ny.$$.fragment,aa),b0o=i(aa),jde=n(aa,"P",{});var qat=s(jde);v0o=r(qat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qat.forEach(t),F0o=i(aa),ka=n(aa,"P",{});var w0=s(ka);T0o=r(w0,"The model class to instantiate is selected based on the "),Dde=n(w0,"CODE",{});var Nat=s(Dde);M0o=r(Nat,"model_type"),Nat.forEach(t),E0o=r(w0,` property of the config object (either
passed as an argument or loaded from `),Gde=n(w0,"CODE",{});var jat=s(Gde);C0o=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),w0o=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(w0,"CODE",{});var Dat=s(Ode);A0o=r(Dat,"pretrained_model_name_or_path"),Dat.forEach(t),y0o=r(w0,":"),w0.forEach(t),L0o=i(aa),W=n(aa,"UL",{});var H=s(W);L2=n(H,"LI",{});var fLe=s(L2);Vde=n(fLe,"STRONG",{});var Gat=s(Vde);x0o=r(Gat,"albert"),Gat.forEach(t),$0o=r(fLe," \u2014 "),Oj=n(fLe,"A",{href:!0});var Oat=s(Oj);k0o=r(Oat,"AlbertForMaskedLM"),Oat.forEach(t),S0o=r(fLe," (ALBERT model)"),fLe.forEach(t),R0o=i(H),x2=n(H,"LI",{});var mLe=s(x2);Xde=n(mLe,"STRONG",{});var Vat=s(Xde);P0o=r(Vat,"bart"),Vat.forEach(t),B0o=r(mLe," \u2014 "),Vj=n(mLe,"A",{href:!0});var Xat=s(Vj);I0o=r(Xat,"BartForConditionalGeneration"),Xat.forEach(t),q0o=r(mLe," (BART model)"),mLe.forEach(t),N0o=i(H),$2=n(H,"LI",{});var gLe=s($2);zde=n(gLe,"STRONG",{});var zat=s(zde);j0o=r(zat,"bert"),zat.forEach(t),D0o=r(gLe," \u2014 "),Xj=n(gLe,"A",{href:!0});var Wat=s(Xj);G0o=r(Wat,"BertForMaskedLM"),Wat.forEach(t),O0o=r(gLe," (BERT model)"),gLe.forEach(t),V0o=i(H),k2=n(H,"LI",{});var hLe=s(k2);Wde=n(hLe,"STRONG",{});var Qat=s(Wde);X0o=r(Qat,"big_bird"),Qat.forEach(t),z0o=r(hLe," \u2014 "),zj=n(hLe,"A",{href:!0});var Hat=s(zj);W0o=r(Hat,"BigBirdForMaskedLM"),Hat.forEach(t),Q0o=r(hLe," (BigBird model)"),hLe.forEach(t),H0o=i(H),S2=n(H,"LI",{});var pLe=s(S2);Qde=n(pLe,"STRONG",{});var Uat=s(Qde);U0o=r(Uat,"camembert"),Uat.forEach(t),J0o=r(pLe," \u2014 "),Wj=n(pLe,"A",{href:!0});var Jat=s(Wj);Y0o=r(Jat,"CamembertForMaskedLM"),Jat.forEach(t),K0o=r(pLe," (CamemBERT model)"),pLe.forEach(t),Z0o=i(H),R2=n(H,"LI",{});var _Le=s(R2);Hde=n(_Le,"STRONG",{});var Yat=s(Hde);eAo=r(Yat,"convbert"),Yat.forEach(t),oAo=r(_Le," \u2014 "),Qj=n(_Le,"A",{href:!0});var Kat=s(Qj);rAo=r(Kat,"ConvBertForMaskedLM"),Kat.forEach(t),tAo=r(_Le," (ConvBERT model)"),_Le.forEach(t),aAo=i(H),P2=n(H,"LI",{});var uLe=s(P2);Ude=n(uLe,"STRONG",{});var Zat=s(Ude);nAo=r(Zat,"data2vec-text"),Zat.forEach(t),sAo=r(uLe," \u2014 "),Hj=n(uLe,"A",{href:!0});var ent=s(Hj);lAo=r(ent,"Data2VecTextForMaskedLM"),ent.forEach(t),iAo=r(uLe," (Data2VecText model)"),uLe.forEach(t),dAo=i(H),B2=n(H,"LI",{});var bLe=s(B2);Jde=n(bLe,"STRONG",{});var ont=s(Jde);cAo=r(ont,"deberta"),ont.forEach(t),fAo=r(bLe," \u2014 "),Uj=n(bLe,"A",{href:!0});var rnt=s(Uj);mAo=r(rnt,"DebertaForMaskedLM"),rnt.forEach(t),gAo=r(bLe," (DeBERTa model)"),bLe.forEach(t),hAo=i(H),I2=n(H,"LI",{});var vLe=s(I2);Yde=n(vLe,"STRONG",{});var tnt=s(Yde);pAo=r(tnt,"deberta-v2"),tnt.forEach(t),_Ao=r(vLe," \u2014 "),Jj=n(vLe,"A",{href:!0});var ant=s(Jj);uAo=r(ant,"DebertaV2ForMaskedLM"),ant.forEach(t),bAo=r(vLe," (DeBERTa-v2 model)"),vLe.forEach(t),vAo=i(H),q2=n(H,"LI",{});var FLe=s(q2);Kde=n(FLe,"STRONG",{});var nnt=s(Kde);FAo=r(nnt,"distilbert"),nnt.forEach(t),TAo=r(FLe," \u2014 "),Yj=n(FLe,"A",{href:!0});var snt=s(Yj);MAo=r(snt,"DistilBertForMaskedLM"),snt.forEach(t),EAo=r(FLe," (DistilBERT model)"),FLe.forEach(t),CAo=i(H),N2=n(H,"LI",{});var TLe=s(N2);Zde=n(TLe,"STRONG",{});var lnt=s(Zde);wAo=r(lnt,"electra"),lnt.forEach(t),AAo=r(TLe," \u2014 "),Kj=n(TLe,"A",{href:!0});var int=s(Kj);yAo=r(int,"ElectraForMaskedLM"),int.forEach(t),LAo=r(TLe," (ELECTRA model)"),TLe.forEach(t),xAo=i(H),j2=n(H,"LI",{});var MLe=s(j2);ece=n(MLe,"STRONG",{});var dnt=s(ece);$Ao=r(dnt,"flaubert"),dnt.forEach(t),kAo=r(MLe," \u2014 "),Zj=n(MLe,"A",{href:!0});var cnt=s(Zj);SAo=r(cnt,"FlaubertWithLMHeadModel"),cnt.forEach(t),RAo=r(MLe," (FlauBERT model)"),MLe.forEach(t),PAo=i(H),D2=n(H,"LI",{});var ELe=s(D2);oce=n(ELe,"STRONG",{});var fnt=s(oce);BAo=r(fnt,"fnet"),fnt.forEach(t),IAo=r(ELe," \u2014 "),eD=n(ELe,"A",{href:!0});var mnt=s(eD);qAo=r(mnt,"FNetForMaskedLM"),mnt.forEach(t),NAo=r(ELe," (FNet model)"),ELe.forEach(t),jAo=i(H),G2=n(H,"LI",{});var CLe=s(G2);rce=n(CLe,"STRONG",{});var gnt=s(rce);DAo=r(gnt,"funnel"),gnt.forEach(t),GAo=r(CLe," \u2014 "),oD=n(CLe,"A",{href:!0});var hnt=s(oD);OAo=r(hnt,"FunnelForMaskedLM"),hnt.forEach(t),VAo=r(CLe," (Funnel Transformer model)"),CLe.forEach(t),XAo=i(H),O2=n(H,"LI",{});var wLe=s(O2);tce=n(wLe,"STRONG",{});var pnt=s(tce);zAo=r(pnt,"ibert"),pnt.forEach(t),WAo=r(wLe," \u2014 "),rD=n(wLe,"A",{href:!0});var _nt=s(rD);QAo=r(_nt,"IBertForMaskedLM"),_nt.forEach(t),HAo=r(wLe," (I-BERT model)"),wLe.forEach(t),UAo=i(H),V2=n(H,"LI",{});var ALe=s(V2);ace=n(ALe,"STRONG",{});var unt=s(ace);JAo=r(unt,"layoutlm"),unt.forEach(t),YAo=r(ALe," \u2014 "),tD=n(ALe,"A",{href:!0});var bnt=s(tD);KAo=r(bnt,"LayoutLMForMaskedLM"),bnt.forEach(t),ZAo=r(ALe," (LayoutLM model)"),ALe.forEach(t),e6o=i(H),X2=n(H,"LI",{});var yLe=s(X2);nce=n(yLe,"STRONG",{});var vnt=s(nce);o6o=r(vnt,"longformer"),vnt.forEach(t),r6o=r(yLe," \u2014 "),aD=n(yLe,"A",{href:!0});var Fnt=s(aD);t6o=r(Fnt,"LongformerForMaskedLM"),Fnt.forEach(t),a6o=r(yLe," (Longformer model)"),yLe.forEach(t),n6o=i(H),z2=n(H,"LI",{});var LLe=s(z2);sce=n(LLe,"STRONG",{});var Tnt=s(sce);s6o=r(Tnt,"mbart"),Tnt.forEach(t),l6o=r(LLe," \u2014 "),nD=n(LLe,"A",{href:!0});var Mnt=s(nD);i6o=r(Mnt,"MBartForConditionalGeneration"),Mnt.forEach(t),d6o=r(LLe," (mBART model)"),LLe.forEach(t),c6o=i(H),W2=n(H,"LI",{});var xLe=s(W2);lce=n(xLe,"STRONG",{});var Ent=s(lce);f6o=r(Ent,"megatron-bert"),Ent.forEach(t),m6o=r(xLe," \u2014 "),sD=n(xLe,"A",{href:!0});var Cnt=s(sD);g6o=r(Cnt,"MegatronBertForMaskedLM"),Cnt.forEach(t),h6o=r(xLe," (MegatronBert model)"),xLe.forEach(t),p6o=i(H),Q2=n(H,"LI",{});var $Le=s(Q2);ice=n($Le,"STRONG",{});var wnt=s(ice);_6o=r(wnt,"mobilebert"),wnt.forEach(t),u6o=r($Le," \u2014 "),lD=n($Le,"A",{href:!0});var Ant=s(lD);b6o=r(Ant,"MobileBertForMaskedLM"),Ant.forEach(t),v6o=r($Le," (MobileBERT model)"),$Le.forEach(t),F6o=i(H),H2=n(H,"LI",{});var kLe=s(H2);dce=n(kLe,"STRONG",{});var ynt=s(dce);T6o=r(ynt,"mpnet"),ynt.forEach(t),M6o=r(kLe," \u2014 "),iD=n(kLe,"A",{href:!0});var Lnt=s(iD);E6o=r(Lnt,"MPNetForMaskedLM"),Lnt.forEach(t),C6o=r(kLe," (MPNet model)"),kLe.forEach(t),w6o=i(H),U2=n(H,"LI",{});var SLe=s(U2);cce=n(SLe,"STRONG",{});var xnt=s(cce);A6o=r(xnt,"nystromformer"),xnt.forEach(t),y6o=r(SLe," \u2014 "),dD=n(SLe,"A",{href:!0});var $nt=s(dD);L6o=r($nt,"NystromformerForMaskedLM"),$nt.forEach(t),x6o=r(SLe," (Nystromformer model)"),SLe.forEach(t),$6o=i(H),J2=n(H,"LI",{});var RLe=s(J2);fce=n(RLe,"STRONG",{});var knt=s(fce);k6o=r(knt,"perceiver"),knt.forEach(t),S6o=r(RLe," \u2014 "),cD=n(RLe,"A",{href:!0});var Snt=s(cD);R6o=r(Snt,"PerceiverForMaskedLM"),Snt.forEach(t),P6o=r(RLe," (Perceiver model)"),RLe.forEach(t),B6o=i(H),Y2=n(H,"LI",{});var PLe=s(Y2);mce=n(PLe,"STRONG",{});var Rnt=s(mce);I6o=r(Rnt,"qdqbert"),Rnt.forEach(t),q6o=r(PLe," \u2014 "),fD=n(PLe,"A",{href:!0});var Pnt=s(fD);N6o=r(Pnt,"QDQBertForMaskedLM"),Pnt.forEach(t),j6o=r(PLe," (QDQBert model)"),PLe.forEach(t),D6o=i(H),K2=n(H,"LI",{});var BLe=s(K2);gce=n(BLe,"STRONG",{});var Bnt=s(gce);G6o=r(Bnt,"reformer"),Bnt.forEach(t),O6o=r(BLe," \u2014 "),mD=n(BLe,"A",{href:!0});var Int=s(mD);V6o=r(Int,"ReformerForMaskedLM"),Int.forEach(t),X6o=r(BLe," (Reformer model)"),BLe.forEach(t),z6o=i(H),Z2=n(H,"LI",{});var ILe=s(Z2);hce=n(ILe,"STRONG",{});var qnt=s(hce);W6o=r(qnt,"rembert"),qnt.forEach(t),Q6o=r(ILe," \u2014 "),gD=n(ILe,"A",{href:!0});var Nnt=s(gD);H6o=r(Nnt,"RemBertForMaskedLM"),Nnt.forEach(t),U6o=r(ILe," (RemBERT model)"),ILe.forEach(t),J6o=i(H),e1=n(H,"LI",{});var qLe=s(e1);pce=n(qLe,"STRONG",{});var jnt=s(pce);Y6o=r(jnt,"roberta"),jnt.forEach(t),K6o=r(qLe," \u2014 "),hD=n(qLe,"A",{href:!0});var Dnt=s(hD);Z6o=r(Dnt,"RobertaForMaskedLM"),Dnt.forEach(t),eyo=r(qLe," (RoBERTa model)"),qLe.forEach(t),oyo=i(H),o1=n(H,"LI",{});var NLe=s(o1);_ce=n(NLe,"STRONG",{});var Gnt=s(_ce);ryo=r(Gnt,"roformer"),Gnt.forEach(t),tyo=r(NLe," \u2014 "),pD=n(NLe,"A",{href:!0});var Ont=s(pD);ayo=r(Ont,"RoFormerForMaskedLM"),Ont.forEach(t),nyo=r(NLe," (RoFormer model)"),NLe.forEach(t),syo=i(H),r1=n(H,"LI",{});var jLe=s(r1);uce=n(jLe,"STRONG",{});var Vnt=s(uce);lyo=r(Vnt,"squeezebert"),Vnt.forEach(t),iyo=r(jLe," \u2014 "),_D=n(jLe,"A",{href:!0});var Xnt=s(_D);dyo=r(Xnt,"SqueezeBertForMaskedLM"),Xnt.forEach(t),cyo=r(jLe," (SqueezeBERT model)"),jLe.forEach(t),fyo=i(H),t1=n(H,"LI",{});var DLe=s(t1);bce=n(DLe,"STRONG",{});var znt=s(bce);myo=r(znt,"tapas"),znt.forEach(t),gyo=r(DLe," \u2014 "),uD=n(DLe,"A",{href:!0});var Wnt=s(uD);hyo=r(Wnt,"TapasForMaskedLM"),Wnt.forEach(t),pyo=r(DLe," (TAPAS model)"),DLe.forEach(t),_yo=i(H),a1=n(H,"LI",{});var GLe=s(a1);vce=n(GLe,"STRONG",{});var Qnt=s(vce);uyo=r(Qnt,"wav2vec2"),Qnt.forEach(t),byo=r(GLe," \u2014 "),Fce=n(GLe,"CODE",{});var Hnt=s(Fce);vyo=r(Hnt,"Wav2Vec2ForMaskedLM"),Hnt.forEach(t),Fyo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),Tyo=i(H),n1=n(H,"LI",{});var OLe=s(n1);Tce=n(OLe,"STRONG",{});var Unt=s(Tce);Myo=r(Unt,"xlm"),Unt.forEach(t),Eyo=r(OLe," \u2014 "),bD=n(OLe,"A",{href:!0});var Jnt=s(bD);Cyo=r(Jnt,"XLMWithLMHeadModel"),Jnt.forEach(t),wyo=r(OLe," (XLM model)"),OLe.forEach(t),Ayo=i(H),s1=n(H,"LI",{});var VLe=s(s1);Mce=n(VLe,"STRONG",{});var Ynt=s(Mce);yyo=r(Ynt,"xlm-roberta"),Ynt.forEach(t),Lyo=r(VLe," \u2014 "),vD=n(VLe,"A",{href:!0});var Knt=s(vD);xyo=r(Knt,"XLMRobertaForMaskedLM"),Knt.forEach(t),$yo=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),kyo=i(H),l1=n(H,"LI",{});var XLe=s(l1);Ece=n(XLe,"STRONG",{});var Znt=s(Ece);Syo=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),Ryo=r(XLe," \u2014 "),FD=n(XLe,"A",{href:!0});var est=s(FD);Pyo=r(est,"XLMRobertaXLForMaskedLM"),est.forEach(t),Byo=r(XLe," (XLM-RoBERTa-XL model)"),XLe.forEach(t),Iyo=i(H),i1=n(H,"LI",{});var zLe=s(i1);Cce=n(zLe,"STRONG",{});var ost=s(Cce);qyo=r(ost,"yoso"),ost.forEach(t),Nyo=r(zLe," \u2014 "),TD=n(zLe,"A",{href:!0});var rst=s(TD);jyo=r(rst,"YosoForMaskedLM"),rst.forEach(t),Dyo=r(zLe," (YOSO model)"),zLe.forEach(t),H.forEach(t),Gyo=i(aa),d1=n(aa,"P",{});var WLe=s(d1);Oyo=r(WLe,"The model is set in evaluation mode by default using "),wce=n(WLe,"CODE",{});var tst=s(wce);Vyo=r(tst,"model.eval()"),tst.forEach(t),Xyo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(WLe,"CODE",{});var ast=s(Ace);zyo=r(ast,"model.train()"),ast.forEach(t),WLe.forEach(t),Wyo=i(aa),T(c1.$$.fragment,aa),aa.forEach(t),Ws.forEach(t),Eqe=i(f),ji=n(f,"H2",{class:!0});var yje=s(ji);f1=n(yje,"A",{id:!0,class:!0,href:!0});var nst=s(f1);yce=n(nst,"SPAN",{});var sst=s(yce);T(sy.$$.fragment,sst),sst.forEach(t),nst.forEach(t),Qyo=i(yje),Lce=n(yje,"SPAN",{});var lst=s(Lce);Hyo=r(lst,"AutoModelForSeq2SeqLM"),lst.forEach(t),yje.forEach(t),Cqe=i(f),So=n(f,"DIV",{class:!0});var Qs=s(So);T(ly.$$.fragment,Qs),Uyo=i(Qs),Di=n(Qs,"P",{});var oZ=s(Di);Jyo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MD=n(oZ,"A",{href:!0});var ist=s(MD);Yyo=r(ist,"from_pretrained()"),ist.forEach(t),Kyo=r(oZ," class method or the "),ED=n(oZ,"A",{href:!0});var dst=s(ED);Zyo=r(dst,"from_config()"),dst.forEach(t),eLo=r(oZ,` class
method.`),oZ.forEach(t),oLo=i(Qs),iy=n(Qs,"P",{});var Lje=s(iy);rLo=r(Lje,"This class cannot be instantiated directly using "),xce=n(Lje,"CODE",{});var cst=s(xce);tLo=r(cst,"__init__()"),cst.forEach(t),aLo=r(Lje," (throws an error)."),Lje.forEach(t),nLo=i(Qs),lt=n(Qs,"DIV",{class:!0});var A0=s(lt);T(dy.$$.fragment,A0),sLo=i(A0),$ce=n(A0,"P",{});var fst=s($ce);lLo=r(fst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fst.forEach(t),iLo=i(A0),Gi=n(A0,"P",{});var rZ=s(Gi);dLo=r(rZ,`Note:
Loading a model from its configuration file does `),kce=n(rZ,"STRONG",{});var mst=s(kce);cLo=r(mst,"not"),mst.forEach(t),fLo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CD=n(rZ,"A",{href:!0});var gst=s(CD);mLo=r(gst,"from_pretrained()"),gst.forEach(t),gLo=r(rZ," to load the model weights."),rZ.forEach(t),hLo=i(A0),T(m1.$$.fragment,A0),A0.forEach(t),pLo=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(cy.$$.fragment,na),_Lo=i(na),Sce=n(na,"P",{});var hst=s(Sce);uLo=r(hst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hst.forEach(t),bLo=i(na),Sa=n(na,"P",{});var y0=s(Sa);vLo=r(y0,"The model class to instantiate is selected based on the "),Rce=n(y0,"CODE",{});var pst=s(Rce);FLo=r(pst,"model_type"),pst.forEach(t),TLo=r(y0,` property of the config object (either
passed as an argument or loaded from `),Pce=n(y0,"CODE",{});var _st=s(Pce);MLo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),ELo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(y0,"CODE",{});var ust=s(Bce);CLo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),wLo=r(y0,":"),y0.forEach(t),ALo=i(na),_e=n(na,"UL",{});var ve=s(_e);g1=n(ve,"LI",{});var QLe=s(g1);Ice=n(QLe,"STRONG",{});var bst=s(Ice);yLo=r(bst,"bart"),bst.forEach(t),LLo=r(QLe," \u2014 "),wD=n(QLe,"A",{href:!0});var vst=s(wD);xLo=r(vst,"BartForConditionalGeneration"),vst.forEach(t),$Lo=r(QLe," (BART model)"),QLe.forEach(t),kLo=i(ve),h1=n(ve,"LI",{});var HLe=s(h1);qce=n(HLe,"STRONG",{});var Fst=s(qce);SLo=r(Fst,"bigbird_pegasus"),Fst.forEach(t),RLo=r(HLe," \u2014 "),AD=n(HLe,"A",{href:!0});var Tst=s(AD);PLo=r(Tst,"BigBirdPegasusForConditionalGeneration"),Tst.forEach(t),BLo=r(HLe," (BigBirdPegasus model)"),HLe.forEach(t),ILo=i(ve),p1=n(ve,"LI",{});var ULe=s(p1);Nce=n(ULe,"STRONG",{});var Mst=s(Nce);qLo=r(Mst,"blenderbot"),Mst.forEach(t),NLo=r(ULe," \u2014 "),yD=n(ULe,"A",{href:!0});var Est=s(yD);jLo=r(Est,"BlenderbotForConditionalGeneration"),Est.forEach(t),DLo=r(ULe," (Blenderbot model)"),ULe.forEach(t),GLo=i(ve),_1=n(ve,"LI",{});var JLe=s(_1);jce=n(JLe,"STRONG",{});var Cst=s(jce);OLo=r(Cst,"blenderbot-small"),Cst.forEach(t),VLo=r(JLe," \u2014 "),LD=n(JLe,"A",{href:!0});var wst=s(LD);XLo=r(wst,"BlenderbotSmallForConditionalGeneration"),wst.forEach(t),zLo=r(JLe," (BlenderbotSmall model)"),JLe.forEach(t),WLo=i(ve),u1=n(ve,"LI",{});var YLe=s(u1);Dce=n(YLe,"STRONG",{});var Ast=s(Dce);QLo=r(Ast,"encoder-decoder"),Ast.forEach(t),HLo=r(YLe," \u2014 "),xD=n(YLe,"A",{href:!0});var yst=s(xD);ULo=r(yst,"EncoderDecoderModel"),yst.forEach(t),JLo=r(YLe," (Encoder decoder model)"),YLe.forEach(t),YLo=i(ve),b1=n(ve,"LI",{});var KLe=s(b1);Gce=n(KLe,"STRONG",{});var Lst=s(Gce);KLo=r(Lst,"fsmt"),Lst.forEach(t),ZLo=r(KLe," \u2014 "),$D=n(KLe,"A",{href:!0});var xst=s($D);e8o=r(xst,"FSMTForConditionalGeneration"),xst.forEach(t),o8o=r(KLe," (FairSeq Machine-Translation model)"),KLe.forEach(t),r8o=i(ve),v1=n(ve,"LI",{});var ZLe=s(v1);Oce=n(ZLe,"STRONG",{});var $st=s(Oce);t8o=r($st,"led"),$st.forEach(t),a8o=r(ZLe," \u2014 "),kD=n(ZLe,"A",{href:!0});var kst=s(kD);n8o=r(kst,"LEDForConditionalGeneration"),kst.forEach(t),s8o=r(ZLe," (LED model)"),ZLe.forEach(t),l8o=i(ve),F1=n(ve,"LI",{});var e8e=s(F1);Vce=n(e8e,"STRONG",{});var Sst=s(Vce);i8o=r(Sst,"m2m_100"),Sst.forEach(t),d8o=r(e8e," \u2014 "),SD=n(e8e,"A",{href:!0});var Rst=s(SD);c8o=r(Rst,"M2M100ForConditionalGeneration"),Rst.forEach(t),f8o=r(e8e," (M2M100 model)"),e8e.forEach(t),m8o=i(ve),T1=n(ve,"LI",{});var o8e=s(T1);Xce=n(o8e,"STRONG",{});var Pst=s(Xce);g8o=r(Pst,"marian"),Pst.forEach(t),h8o=r(o8e," \u2014 "),RD=n(o8e,"A",{href:!0});var Bst=s(RD);p8o=r(Bst,"MarianMTModel"),Bst.forEach(t),_8o=r(o8e," (Marian model)"),o8e.forEach(t),u8o=i(ve),M1=n(ve,"LI",{});var r8e=s(M1);zce=n(r8e,"STRONG",{});var Ist=s(zce);b8o=r(Ist,"mbart"),Ist.forEach(t),v8o=r(r8e," \u2014 "),PD=n(r8e,"A",{href:!0});var qst=s(PD);F8o=r(qst,"MBartForConditionalGeneration"),qst.forEach(t),T8o=r(r8e," (mBART model)"),r8e.forEach(t),M8o=i(ve),E1=n(ve,"LI",{});var t8e=s(E1);Wce=n(t8e,"STRONG",{});var Nst=s(Wce);E8o=r(Nst,"mt5"),Nst.forEach(t),C8o=r(t8e," \u2014 "),BD=n(t8e,"A",{href:!0});var jst=s(BD);w8o=r(jst,"MT5ForConditionalGeneration"),jst.forEach(t),A8o=r(t8e," (mT5 model)"),t8e.forEach(t),y8o=i(ve),C1=n(ve,"LI",{});var a8e=s(C1);Qce=n(a8e,"STRONG",{});var Dst=s(Qce);L8o=r(Dst,"pegasus"),Dst.forEach(t),x8o=r(a8e," \u2014 "),ID=n(a8e,"A",{href:!0});var Gst=s(ID);$8o=r(Gst,"PegasusForConditionalGeneration"),Gst.forEach(t),k8o=r(a8e," (Pegasus model)"),a8e.forEach(t),S8o=i(ve),w1=n(ve,"LI",{});var n8e=s(w1);Hce=n(n8e,"STRONG",{});var Ost=s(Hce);R8o=r(Ost,"plbart"),Ost.forEach(t),P8o=r(n8e," \u2014 "),qD=n(n8e,"A",{href:!0});var Vst=s(qD);B8o=r(Vst,"PLBartForConditionalGeneration"),Vst.forEach(t),I8o=r(n8e," (PLBart model)"),n8e.forEach(t),q8o=i(ve),A1=n(ve,"LI",{});var s8e=s(A1);Uce=n(s8e,"STRONG",{});var Xst=s(Uce);N8o=r(Xst,"prophetnet"),Xst.forEach(t),j8o=r(s8e," \u2014 "),ND=n(s8e,"A",{href:!0});var zst=s(ND);D8o=r(zst,"ProphetNetForConditionalGeneration"),zst.forEach(t),G8o=r(s8e," (ProphetNet model)"),s8e.forEach(t),O8o=i(ve),y1=n(ve,"LI",{});var l8e=s(y1);Jce=n(l8e,"STRONG",{});var Wst=s(Jce);V8o=r(Wst,"t5"),Wst.forEach(t),X8o=r(l8e," \u2014 "),jD=n(l8e,"A",{href:!0});var Qst=s(jD);z8o=r(Qst,"T5ForConditionalGeneration"),Qst.forEach(t),W8o=r(l8e," (T5 model)"),l8e.forEach(t),Q8o=i(ve),L1=n(ve,"LI",{});var i8e=s(L1);Yce=n(i8e,"STRONG",{});var Hst=s(Yce);H8o=r(Hst,"xlm-prophetnet"),Hst.forEach(t),U8o=r(i8e," \u2014 "),DD=n(i8e,"A",{href:!0});var Ust=s(DD);J8o=r(Ust,"XLMProphetNetForConditionalGeneration"),Ust.forEach(t),Y8o=r(i8e," (XLMProphetNet model)"),i8e.forEach(t),ve.forEach(t),K8o=i(na),x1=n(na,"P",{});var d8e=s(x1);Z8o=r(d8e,"The model is set in evaluation mode by default using "),Kce=n(d8e,"CODE",{});var Jst=s(Kce);e9o=r(Jst,"model.eval()"),Jst.forEach(t),o9o=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(d8e,"CODE",{});var Yst=s(Zce);r9o=r(Yst,"model.train()"),Yst.forEach(t),d8e.forEach(t),t9o=i(na),T($1.$$.fragment,na),na.forEach(t),Qs.forEach(t),wqe=i(f),Oi=n(f,"H2",{class:!0});var xje=s(Oi);k1=n(xje,"A",{id:!0,class:!0,href:!0});var Kst=s(k1);efe=n(Kst,"SPAN",{});var Zst=s(efe);T(fy.$$.fragment,Zst),Zst.forEach(t),Kst.forEach(t),a9o=i(xje),ofe=n(xje,"SPAN",{});var elt=s(ofe);n9o=r(elt,"AutoModelForSequenceClassification"),elt.forEach(t),xje.forEach(t),Aqe=i(f),Ro=n(f,"DIV",{class:!0});var Hs=s(Ro);T(my.$$.fragment,Hs),s9o=i(Hs),Vi=n(Hs,"P",{});var tZ=s(Vi);l9o=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GD=n(tZ,"A",{href:!0});var olt=s(GD);i9o=r(olt,"from_pretrained()"),olt.forEach(t),d9o=r(tZ," class method or the "),OD=n(tZ,"A",{href:!0});var rlt=s(OD);c9o=r(rlt,"from_config()"),rlt.forEach(t),f9o=r(tZ,` class
method.`),tZ.forEach(t),m9o=i(Hs),gy=n(Hs,"P",{});var $je=s(gy);g9o=r($je,"This class cannot be instantiated directly using "),rfe=n($je,"CODE",{});var tlt=s(rfe);h9o=r(tlt,"__init__()"),tlt.forEach(t),p9o=r($je," (throws an error)."),$je.forEach(t),_9o=i(Hs),it=n(Hs,"DIV",{class:!0});var L0=s(it);T(hy.$$.fragment,L0),u9o=i(L0),tfe=n(L0,"P",{});var alt=s(tfe);b9o=r(alt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),alt.forEach(t),v9o=i(L0),Xi=n(L0,"P",{});var aZ=s(Xi);F9o=r(aZ,`Note:
Loading a model from its configuration file does `),afe=n(aZ,"STRONG",{});var nlt=s(afe);T9o=r(nlt,"not"),nlt.forEach(t),M9o=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(aZ,"A",{href:!0});var slt=s(VD);E9o=r(slt,"from_pretrained()"),slt.forEach(t),C9o=r(aZ," to load the model weights."),aZ.forEach(t),w9o=i(L0),T(S1.$$.fragment,L0),L0.forEach(t),A9o=i(Hs),oo=n(Hs,"DIV",{class:!0});var sa=s(oo);T(py.$$.fragment,sa),y9o=i(sa),nfe=n(sa,"P",{});var llt=s(nfe);L9o=r(llt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),llt.forEach(t),x9o=i(sa),Ra=n(sa,"P",{});var x0=s(Ra);$9o=r(x0,"The model class to instantiate is selected based on the "),sfe=n(x0,"CODE",{});var ilt=s(sfe);k9o=r(ilt,"model_type"),ilt.forEach(t),S9o=r(x0,` property of the config object (either
passed as an argument or loaded from `),lfe=n(x0,"CODE",{});var dlt=s(lfe);R9o=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),P9o=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=n(x0,"CODE",{});var clt=s(ife);B9o=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),I9o=r(x0,":"),x0.forEach(t),q9o=i(sa),q=n(sa,"UL",{});var j=s(q);R1=n(j,"LI",{});var c8e=s(R1);dfe=n(c8e,"STRONG",{});var flt=s(dfe);N9o=r(flt,"albert"),flt.forEach(t),j9o=r(c8e," \u2014 "),XD=n(c8e,"A",{href:!0});var mlt=s(XD);D9o=r(mlt,"AlbertForSequenceClassification"),mlt.forEach(t),G9o=r(c8e," (ALBERT model)"),c8e.forEach(t),O9o=i(j),P1=n(j,"LI",{});var f8e=s(P1);cfe=n(f8e,"STRONG",{});var glt=s(cfe);V9o=r(glt,"bart"),glt.forEach(t),X9o=r(f8e," \u2014 "),zD=n(f8e,"A",{href:!0});var hlt=s(zD);z9o=r(hlt,"BartForSequenceClassification"),hlt.forEach(t),W9o=r(f8e," (BART model)"),f8e.forEach(t),Q9o=i(j),B1=n(j,"LI",{});var m8e=s(B1);ffe=n(m8e,"STRONG",{});var plt=s(ffe);H9o=r(plt,"bert"),plt.forEach(t),U9o=r(m8e," \u2014 "),WD=n(m8e,"A",{href:!0});var _lt=s(WD);J9o=r(_lt,"BertForSequenceClassification"),_lt.forEach(t),Y9o=r(m8e," (BERT model)"),m8e.forEach(t),K9o=i(j),I1=n(j,"LI",{});var g8e=s(I1);mfe=n(g8e,"STRONG",{});var ult=s(mfe);Z9o=r(ult,"big_bird"),ult.forEach(t),exo=r(g8e," \u2014 "),QD=n(g8e,"A",{href:!0});var blt=s(QD);oxo=r(blt,"BigBirdForSequenceClassification"),blt.forEach(t),rxo=r(g8e," (BigBird model)"),g8e.forEach(t),txo=i(j),q1=n(j,"LI",{});var h8e=s(q1);gfe=n(h8e,"STRONG",{});var vlt=s(gfe);axo=r(vlt,"bigbird_pegasus"),vlt.forEach(t),nxo=r(h8e," \u2014 "),HD=n(h8e,"A",{href:!0});var Flt=s(HD);sxo=r(Flt,"BigBirdPegasusForSequenceClassification"),Flt.forEach(t),lxo=r(h8e," (BigBirdPegasus model)"),h8e.forEach(t),ixo=i(j),N1=n(j,"LI",{});var p8e=s(N1);hfe=n(p8e,"STRONG",{});var Tlt=s(hfe);dxo=r(Tlt,"camembert"),Tlt.forEach(t),cxo=r(p8e," \u2014 "),UD=n(p8e,"A",{href:!0});var Mlt=s(UD);fxo=r(Mlt,"CamembertForSequenceClassification"),Mlt.forEach(t),mxo=r(p8e," (CamemBERT model)"),p8e.forEach(t),gxo=i(j),j1=n(j,"LI",{});var _8e=s(j1);pfe=n(_8e,"STRONG",{});var Elt=s(pfe);hxo=r(Elt,"canine"),Elt.forEach(t),pxo=r(_8e," \u2014 "),JD=n(_8e,"A",{href:!0});var Clt=s(JD);_xo=r(Clt,"CanineForSequenceClassification"),Clt.forEach(t),uxo=r(_8e," (Canine model)"),_8e.forEach(t),bxo=i(j),D1=n(j,"LI",{});var u8e=s(D1);_fe=n(u8e,"STRONG",{});var wlt=s(_fe);vxo=r(wlt,"convbert"),wlt.forEach(t),Fxo=r(u8e," \u2014 "),YD=n(u8e,"A",{href:!0});var Alt=s(YD);Txo=r(Alt,"ConvBertForSequenceClassification"),Alt.forEach(t),Mxo=r(u8e," (ConvBERT model)"),u8e.forEach(t),Exo=i(j),G1=n(j,"LI",{});var b8e=s(G1);ufe=n(b8e,"STRONG",{});var ylt=s(ufe);Cxo=r(ylt,"ctrl"),ylt.forEach(t),wxo=r(b8e," \u2014 "),KD=n(b8e,"A",{href:!0});var Llt=s(KD);Axo=r(Llt,"CTRLForSequenceClassification"),Llt.forEach(t),yxo=r(b8e," (CTRL model)"),b8e.forEach(t),Lxo=i(j),O1=n(j,"LI",{});var v8e=s(O1);bfe=n(v8e,"STRONG",{});var xlt=s(bfe);xxo=r(xlt,"data2vec-text"),xlt.forEach(t),$xo=r(v8e," \u2014 "),ZD=n(v8e,"A",{href:!0});var $lt=s(ZD);kxo=r($lt,"Data2VecTextForSequenceClassification"),$lt.forEach(t),Sxo=r(v8e," (Data2VecText model)"),v8e.forEach(t),Rxo=i(j),V1=n(j,"LI",{});var F8e=s(V1);vfe=n(F8e,"STRONG",{});var klt=s(vfe);Pxo=r(klt,"deberta"),klt.forEach(t),Bxo=r(F8e," \u2014 "),eG=n(F8e,"A",{href:!0});var Slt=s(eG);Ixo=r(Slt,"DebertaForSequenceClassification"),Slt.forEach(t),qxo=r(F8e," (DeBERTa model)"),F8e.forEach(t),Nxo=i(j),X1=n(j,"LI",{});var T8e=s(X1);Ffe=n(T8e,"STRONG",{});var Rlt=s(Ffe);jxo=r(Rlt,"deberta-v2"),Rlt.forEach(t),Dxo=r(T8e," \u2014 "),oG=n(T8e,"A",{href:!0});var Plt=s(oG);Gxo=r(Plt,"DebertaV2ForSequenceClassification"),Plt.forEach(t),Oxo=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),Vxo=i(j),z1=n(j,"LI",{});var M8e=s(z1);Tfe=n(M8e,"STRONG",{});var Blt=s(Tfe);Xxo=r(Blt,"distilbert"),Blt.forEach(t),zxo=r(M8e," \u2014 "),rG=n(M8e,"A",{href:!0});var Ilt=s(rG);Wxo=r(Ilt,"DistilBertForSequenceClassification"),Ilt.forEach(t),Qxo=r(M8e," (DistilBERT model)"),M8e.forEach(t),Hxo=i(j),W1=n(j,"LI",{});var E8e=s(W1);Mfe=n(E8e,"STRONG",{});var qlt=s(Mfe);Uxo=r(qlt,"electra"),qlt.forEach(t),Jxo=r(E8e," \u2014 "),tG=n(E8e,"A",{href:!0});var Nlt=s(tG);Yxo=r(Nlt,"ElectraForSequenceClassification"),Nlt.forEach(t),Kxo=r(E8e," (ELECTRA model)"),E8e.forEach(t),Zxo=i(j),Q1=n(j,"LI",{});var C8e=s(Q1);Efe=n(C8e,"STRONG",{});var jlt=s(Efe);e$o=r(jlt,"flaubert"),jlt.forEach(t),o$o=r(C8e," \u2014 "),aG=n(C8e,"A",{href:!0});var Dlt=s(aG);r$o=r(Dlt,"FlaubertForSequenceClassification"),Dlt.forEach(t),t$o=r(C8e," (FlauBERT model)"),C8e.forEach(t),a$o=i(j),H1=n(j,"LI",{});var w8e=s(H1);Cfe=n(w8e,"STRONG",{});var Glt=s(Cfe);n$o=r(Glt,"fnet"),Glt.forEach(t),s$o=r(w8e," \u2014 "),nG=n(w8e,"A",{href:!0});var Olt=s(nG);l$o=r(Olt,"FNetForSequenceClassification"),Olt.forEach(t),i$o=r(w8e," (FNet model)"),w8e.forEach(t),d$o=i(j),U1=n(j,"LI",{});var A8e=s(U1);wfe=n(A8e,"STRONG",{});var Vlt=s(wfe);c$o=r(Vlt,"funnel"),Vlt.forEach(t),f$o=r(A8e," \u2014 "),sG=n(A8e,"A",{href:!0});var Xlt=s(sG);m$o=r(Xlt,"FunnelForSequenceClassification"),Xlt.forEach(t),g$o=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),h$o=i(j),J1=n(j,"LI",{});var y8e=s(J1);Afe=n(y8e,"STRONG",{});var zlt=s(Afe);p$o=r(zlt,"gpt2"),zlt.forEach(t),_$o=r(y8e," \u2014 "),lG=n(y8e,"A",{href:!0});var Wlt=s(lG);u$o=r(Wlt,"GPT2ForSequenceClassification"),Wlt.forEach(t),b$o=r(y8e," (OpenAI GPT-2 model)"),y8e.forEach(t),v$o=i(j),Y1=n(j,"LI",{});var L8e=s(Y1);yfe=n(L8e,"STRONG",{});var Qlt=s(yfe);F$o=r(Qlt,"gpt_neo"),Qlt.forEach(t),T$o=r(L8e," \u2014 "),iG=n(L8e,"A",{href:!0});var Hlt=s(iG);M$o=r(Hlt,"GPTNeoForSequenceClassification"),Hlt.forEach(t),E$o=r(L8e," (GPT Neo model)"),L8e.forEach(t),C$o=i(j),K1=n(j,"LI",{});var x8e=s(K1);Lfe=n(x8e,"STRONG",{});var Ult=s(Lfe);w$o=r(Ult,"gptj"),Ult.forEach(t),A$o=r(x8e," \u2014 "),dG=n(x8e,"A",{href:!0});var Jlt=s(dG);y$o=r(Jlt,"GPTJForSequenceClassification"),Jlt.forEach(t),L$o=r(x8e," (GPT-J model)"),x8e.forEach(t),x$o=i(j),Z1=n(j,"LI",{});var $8e=s(Z1);xfe=n($8e,"STRONG",{});var Ylt=s(xfe);$$o=r(Ylt,"ibert"),Ylt.forEach(t),k$o=r($8e," \u2014 "),cG=n($8e,"A",{href:!0});var Klt=s(cG);S$o=r(Klt,"IBertForSequenceClassification"),Klt.forEach(t),R$o=r($8e," (I-BERT model)"),$8e.forEach(t),P$o=i(j),eb=n(j,"LI",{});var k8e=s(eb);$fe=n(k8e,"STRONG",{});var Zlt=s($fe);B$o=r(Zlt,"layoutlm"),Zlt.forEach(t),I$o=r(k8e," \u2014 "),fG=n(k8e,"A",{href:!0});var eit=s(fG);q$o=r(eit,"LayoutLMForSequenceClassification"),eit.forEach(t),N$o=r(k8e," (LayoutLM model)"),k8e.forEach(t),j$o=i(j),ob=n(j,"LI",{});var S8e=s(ob);kfe=n(S8e,"STRONG",{});var oit=s(kfe);D$o=r(oit,"layoutlmv2"),oit.forEach(t),G$o=r(S8e," \u2014 "),mG=n(S8e,"A",{href:!0});var rit=s(mG);O$o=r(rit,"LayoutLMv2ForSequenceClassification"),rit.forEach(t),V$o=r(S8e," (LayoutLMv2 model)"),S8e.forEach(t),X$o=i(j),rb=n(j,"LI",{});var R8e=s(rb);Sfe=n(R8e,"STRONG",{});var tit=s(Sfe);z$o=r(tit,"led"),tit.forEach(t),W$o=r(R8e," \u2014 "),gG=n(R8e,"A",{href:!0});var ait=s(gG);Q$o=r(ait,"LEDForSequenceClassification"),ait.forEach(t),H$o=r(R8e," (LED model)"),R8e.forEach(t),U$o=i(j),tb=n(j,"LI",{});var P8e=s(tb);Rfe=n(P8e,"STRONG",{});var nit=s(Rfe);J$o=r(nit,"longformer"),nit.forEach(t),Y$o=r(P8e," \u2014 "),hG=n(P8e,"A",{href:!0});var sit=s(hG);K$o=r(sit,"LongformerForSequenceClassification"),sit.forEach(t),Z$o=r(P8e," (Longformer model)"),P8e.forEach(t),eko=i(j),ab=n(j,"LI",{});var B8e=s(ab);Pfe=n(B8e,"STRONG",{});var lit=s(Pfe);oko=r(lit,"mbart"),lit.forEach(t),rko=r(B8e," \u2014 "),pG=n(B8e,"A",{href:!0});var iit=s(pG);tko=r(iit,"MBartForSequenceClassification"),iit.forEach(t),ako=r(B8e," (mBART model)"),B8e.forEach(t),nko=i(j),nb=n(j,"LI",{});var I8e=s(nb);Bfe=n(I8e,"STRONG",{});var dit=s(Bfe);sko=r(dit,"megatron-bert"),dit.forEach(t),lko=r(I8e," \u2014 "),_G=n(I8e,"A",{href:!0});var cit=s(_G);iko=r(cit,"MegatronBertForSequenceClassification"),cit.forEach(t),dko=r(I8e," (MegatronBert model)"),I8e.forEach(t),cko=i(j),sb=n(j,"LI",{});var q8e=s(sb);Ife=n(q8e,"STRONG",{});var fit=s(Ife);fko=r(fit,"mobilebert"),fit.forEach(t),mko=r(q8e," \u2014 "),uG=n(q8e,"A",{href:!0});var mit=s(uG);gko=r(mit,"MobileBertForSequenceClassification"),mit.forEach(t),hko=r(q8e," (MobileBERT model)"),q8e.forEach(t),pko=i(j),lb=n(j,"LI",{});var N8e=s(lb);qfe=n(N8e,"STRONG",{});var git=s(qfe);_ko=r(git,"mpnet"),git.forEach(t),uko=r(N8e," \u2014 "),bG=n(N8e,"A",{href:!0});var hit=s(bG);bko=r(hit,"MPNetForSequenceClassification"),hit.forEach(t),vko=r(N8e," (MPNet model)"),N8e.forEach(t),Fko=i(j),ib=n(j,"LI",{});var j8e=s(ib);Nfe=n(j8e,"STRONG",{});var pit=s(Nfe);Tko=r(pit,"nystromformer"),pit.forEach(t),Mko=r(j8e," \u2014 "),vG=n(j8e,"A",{href:!0});var _it=s(vG);Eko=r(_it,"NystromformerForSequenceClassification"),_it.forEach(t),Cko=r(j8e," (Nystromformer model)"),j8e.forEach(t),wko=i(j),db=n(j,"LI",{});var D8e=s(db);jfe=n(D8e,"STRONG",{});var uit=s(jfe);Ako=r(uit,"openai-gpt"),uit.forEach(t),yko=r(D8e," \u2014 "),FG=n(D8e,"A",{href:!0});var bit=s(FG);Lko=r(bit,"OpenAIGPTForSequenceClassification"),bit.forEach(t),xko=r(D8e," (OpenAI GPT model)"),D8e.forEach(t),$ko=i(j),cb=n(j,"LI",{});var G8e=s(cb);Dfe=n(G8e,"STRONG",{});var vit=s(Dfe);kko=r(vit,"perceiver"),vit.forEach(t),Sko=r(G8e," \u2014 "),TG=n(G8e,"A",{href:!0});var Fit=s(TG);Rko=r(Fit,"PerceiverForSequenceClassification"),Fit.forEach(t),Pko=r(G8e," (Perceiver model)"),G8e.forEach(t),Bko=i(j),fb=n(j,"LI",{});var O8e=s(fb);Gfe=n(O8e,"STRONG",{});var Tit=s(Gfe);Iko=r(Tit,"plbart"),Tit.forEach(t),qko=r(O8e," \u2014 "),MG=n(O8e,"A",{href:!0});var Mit=s(MG);Nko=r(Mit,"PLBartForSequenceClassification"),Mit.forEach(t),jko=r(O8e," (PLBart model)"),O8e.forEach(t),Dko=i(j),mb=n(j,"LI",{});var V8e=s(mb);Ofe=n(V8e,"STRONG",{});var Eit=s(Ofe);Gko=r(Eit,"qdqbert"),Eit.forEach(t),Oko=r(V8e," \u2014 "),EG=n(V8e,"A",{href:!0});var Cit=s(EG);Vko=r(Cit,"QDQBertForSequenceClassification"),Cit.forEach(t),Xko=r(V8e," (QDQBert model)"),V8e.forEach(t),zko=i(j),gb=n(j,"LI",{});var X8e=s(gb);Vfe=n(X8e,"STRONG",{});var wit=s(Vfe);Wko=r(wit,"reformer"),wit.forEach(t),Qko=r(X8e," \u2014 "),CG=n(X8e,"A",{href:!0});var Ait=s(CG);Hko=r(Ait,"ReformerForSequenceClassification"),Ait.forEach(t),Uko=r(X8e," (Reformer model)"),X8e.forEach(t),Jko=i(j),hb=n(j,"LI",{});var z8e=s(hb);Xfe=n(z8e,"STRONG",{});var yit=s(Xfe);Yko=r(yit,"rembert"),yit.forEach(t),Kko=r(z8e," \u2014 "),wG=n(z8e,"A",{href:!0});var Lit=s(wG);Zko=r(Lit,"RemBertForSequenceClassification"),Lit.forEach(t),eSo=r(z8e," (RemBERT model)"),z8e.forEach(t),oSo=i(j),pb=n(j,"LI",{});var W8e=s(pb);zfe=n(W8e,"STRONG",{});var xit=s(zfe);rSo=r(xit,"roberta"),xit.forEach(t),tSo=r(W8e," \u2014 "),AG=n(W8e,"A",{href:!0});var $it=s(AG);aSo=r($it,"RobertaForSequenceClassification"),$it.forEach(t),nSo=r(W8e," (RoBERTa model)"),W8e.forEach(t),sSo=i(j),_b=n(j,"LI",{});var Q8e=s(_b);Wfe=n(Q8e,"STRONG",{});var kit=s(Wfe);lSo=r(kit,"roformer"),kit.forEach(t),iSo=r(Q8e," \u2014 "),yG=n(Q8e,"A",{href:!0});var Sit=s(yG);dSo=r(Sit,"RoFormerForSequenceClassification"),Sit.forEach(t),cSo=r(Q8e," (RoFormer model)"),Q8e.forEach(t),fSo=i(j),ub=n(j,"LI",{});var H8e=s(ub);Qfe=n(H8e,"STRONG",{});var Rit=s(Qfe);mSo=r(Rit,"squeezebert"),Rit.forEach(t),gSo=r(H8e," \u2014 "),LG=n(H8e,"A",{href:!0});var Pit=s(LG);hSo=r(Pit,"SqueezeBertForSequenceClassification"),Pit.forEach(t),pSo=r(H8e," (SqueezeBERT model)"),H8e.forEach(t),_So=i(j),bb=n(j,"LI",{});var U8e=s(bb);Hfe=n(U8e,"STRONG",{});var Bit=s(Hfe);uSo=r(Bit,"tapas"),Bit.forEach(t),bSo=r(U8e," \u2014 "),xG=n(U8e,"A",{href:!0});var Iit=s(xG);vSo=r(Iit,"TapasForSequenceClassification"),Iit.forEach(t),FSo=r(U8e," (TAPAS model)"),U8e.forEach(t),TSo=i(j),vb=n(j,"LI",{});var J8e=s(vb);Ufe=n(J8e,"STRONG",{});var qit=s(Ufe);MSo=r(qit,"transfo-xl"),qit.forEach(t),ESo=r(J8e," \u2014 "),$G=n(J8e,"A",{href:!0});var Nit=s($G);CSo=r(Nit,"TransfoXLForSequenceClassification"),Nit.forEach(t),wSo=r(J8e," (Transformer-XL model)"),J8e.forEach(t),ASo=i(j),Fb=n(j,"LI",{});var Y8e=s(Fb);Jfe=n(Y8e,"STRONG",{});var jit=s(Jfe);ySo=r(jit,"xlm"),jit.forEach(t),LSo=r(Y8e," \u2014 "),kG=n(Y8e,"A",{href:!0});var Dit=s(kG);xSo=r(Dit,"XLMForSequenceClassification"),Dit.forEach(t),$So=r(Y8e," (XLM model)"),Y8e.forEach(t),kSo=i(j),Tb=n(j,"LI",{});var K8e=s(Tb);Yfe=n(K8e,"STRONG",{});var Git=s(Yfe);SSo=r(Git,"xlm-roberta"),Git.forEach(t),RSo=r(K8e," \u2014 "),SG=n(K8e,"A",{href:!0});var Oit=s(SG);PSo=r(Oit,"XLMRobertaForSequenceClassification"),Oit.forEach(t),BSo=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),ISo=i(j),Mb=n(j,"LI",{});var Z8e=s(Mb);Kfe=n(Z8e,"STRONG",{});var Vit=s(Kfe);qSo=r(Vit,"xlm-roberta-xl"),Vit.forEach(t),NSo=r(Z8e," \u2014 "),RG=n(Z8e,"A",{href:!0});var Xit=s(RG);jSo=r(Xit,"XLMRobertaXLForSequenceClassification"),Xit.forEach(t),DSo=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),GSo=i(j),Eb=n(j,"LI",{});var e9e=s(Eb);Zfe=n(e9e,"STRONG",{});var zit=s(Zfe);OSo=r(zit,"xlnet"),zit.forEach(t),VSo=r(e9e," \u2014 "),PG=n(e9e,"A",{href:!0});var Wit=s(PG);XSo=r(Wit,"XLNetForSequenceClassification"),Wit.forEach(t),zSo=r(e9e," (XLNet model)"),e9e.forEach(t),WSo=i(j),Cb=n(j,"LI",{});var o9e=s(Cb);eme=n(o9e,"STRONG",{});var Qit=s(eme);QSo=r(Qit,"yoso"),Qit.forEach(t),HSo=r(o9e," \u2014 "),BG=n(o9e,"A",{href:!0});var Hit=s(BG);USo=r(Hit,"YosoForSequenceClassification"),Hit.forEach(t),JSo=r(o9e," (YOSO model)"),o9e.forEach(t),j.forEach(t),YSo=i(sa),wb=n(sa,"P",{});var r9e=s(wb);KSo=r(r9e,"The model is set in evaluation mode by default using "),ome=n(r9e,"CODE",{});var Uit=s(ome);ZSo=r(Uit,"model.eval()"),Uit.forEach(t),eRo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=n(r9e,"CODE",{});var Jit=s(rme);oRo=r(Jit,"model.train()"),Jit.forEach(t),r9e.forEach(t),rRo=i(sa),T(Ab.$$.fragment,sa),sa.forEach(t),Hs.forEach(t),yqe=i(f),zi=n(f,"H2",{class:!0});var kje=s(zi);yb=n(kje,"A",{id:!0,class:!0,href:!0});var Yit=s(yb);tme=n(Yit,"SPAN",{});var Kit=s(tme);T(_y.$$.fragment,Kit),Kit.forEach(t),Yit.forEach(t),tRo=i(kje),ame=n(kje,"SPAN",{});var Zit=s(ame);aRo=r(Zit,"AutoModelForMultipleChoice"),Zit.forEach(t),kje.forEach(t),Lqe=i(f),Po=n(f,"DIV",{class:!0});var Us=s(Po);T(uy.$$.fragment,Us),nRo=i(Us),Wi=n(Us,"P",{});var nZ=s(Wi);sRo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IG=n(nZ,"A",{href:!0});var edt=s(IG);lRo=r(edt,"from_pretrained()"),edt.forEach(t),iRo=r(nZ," class method or the "),qG=n(nZ,"A",{href:!0});var odt=s(qG);dRo=r(odt,"from_config()"),odt.forEach(t),cRo=r(nZ,` class
method.`),nZ.forEach(t),fRo=i(Us),by=n(Us,"P",{});var Sje=s(by);mRo=r(Sje,"This class cannot be instantiated directly using "),nme=n(Sje,"CODE",{});var rdt=s(nme);gRo=r(rdt,"__init__()"),rdt.forEach(t),hRo=r(Sje," (throws an error)."),Sje.forEach(t),pRo=i(Us),dt=n(Us,"DIV",{class:!0});var $0=s(dt);T(vy.$$.fragment,$0),_Ro=i($0),sme=n($0,"P",{});var tdt=s(sme);uRo=r(tdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tdt.forEach(t),bRo=i($0),Qi=n($0,"P",{});var sZ=s(Qi);vRo=r(sZ,`Note:
Loading a model from its configuration file does `),lme=n(sZ,"STRONG",{});var adt=s(lme);FRo=r(adt,"not"),adt.forEach(t),TRo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(sZ,"A",{href:!0});var ndt=s(NG);MRo=r(ndt,"from_pretrained()"),ndt.forEach(t),ERo=r(sZ," to load the model weights."),sZ.forEach(t),CRo=i($0),T(Lb.$$.fragment,$0),$0.forEach(t),wRo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(Fy.$$.fragment,la),ARo=i(la),ime=n(la,"P",{});var sdt=s(ime);yRo=r(sdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sdt.forEach(t),LRo=i(la),Pa=n(la,"P",{});var k0=s(Pa);xRo=r(k0,"The model class to instantiate is selected based on the "),dme=n(k0,"CODE",{});var ldt=s(dme);$Ro=r(ldt,"model_type"),ldt.forEach(t),kRo=r(k0,` property of the config object (either
passed as an argument or loaded from `),cme=n(k0,"CODE",{});var idt=s(cme);SRo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),RRo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(k0,"CODE",{});var ddt=s(fme);PRo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),BRo=r(k0,":"),k0.forEach(t),IRo=i(la),Y=n(la,"UL",{});var K=s(Y);xb=n(K,"LI",{});var t9e=s(xb);mme=n(t9e,"STRONG",{});var cdt=s(mme);qRo=r(cdt,"albert"),cdt.forEach(t),NRo=r(t9e," \u2014 "),jG=n(t9e,"A",{href:!0});var fdt=s(jG);jRo=r(fdt,"AlbertForMultipleChoice"),fdt.forEach(t),DRo=r(t9e," (ALBERT model)"),t9e.forEach(t),GRo=i(K),$b=n(K,"LI",{});var a9e=s($b);gme=n(a9e,"STRONG",{});var mdt=s(gme);ORo=r(mdt,"bert"),mdt.forEach(t),VRo=r(a9e," \u2014 "),DG=n(a9e,"A",{href:!0});var gdt=s(DG);XRo=r(gdt,"BertForMultipleChoice"),gdt.forEach(t),zRo=r(a9e," (BERT model)"),a9e.forEach(t),WRo=i(K),kb=n(K,"LI",{});var n9e=s(kb);hme=n(n9e,"STRONG",{});var hdt=s(hme);QRo=r(hdt,"big_bird"),hdt.forEach(t),HRo=r(n9e," \u2014 "),GG=n(n9e,"A",{href:!0});var pdt=s(GG);URo=r(pdt,"BigBirdForMultipleChoice"),pdt.forEach(t),JRo=r(n9e," (BigBird model)"),n9e.forEach(t),YRo=i(K),Sb=n(K,"LI",{});var s9e=s(Sb);pme=n(s9e,"STRONG",{});var _dt=s(pme);KRo=r(_dt,"camembert"),_dt.forEach(t),ZRo=r(s9e," \u2014 "),OG=n(s9e,"A",{href:!0});var udt=s(OG);ePo=r(udt,"CamembertForMultipleChoice"),udt.forEach(t),oPo=r(s9e," (CamemBERT model)"),s9e.forEach(t),rPo=i(K),Rb=n(K,"LI",{});var l9e=s(Rb);_me=n(l9e,"STRONG",{});var bdt=s(_me);tPo=r(bdt,"canine"),bdt.forEach(t),aPo=r(l9e," \u2014 "),VG=n(l9e,"A",{href:!0});var vdt=s(VG);nPo=r(vdt,"CanineForMultipleChoice"),vdt.forEach(t),sPo=r(l9e," (Canine model)"),l9e.forEach(t),lPo=i(K),Pb=n(K,"LI",{});var i9e=s(Pb);ume=n(i9e,"STRONG",{});var Fdt=s(ume);iPo=r(Fdt,"convbert"),Fdt.forEach(t),dPo=r(i9e," \u2014 "),XG=n(i9e,"A",{href:!0});var Tdt=s(XG);cPo=r(Tdt,"ConvBertForMultipleChoice"),Tdt.forEach(t),fPo=r(i9e," (ConvBERT model)"),i9e.forEach(t),mPo=i(K),Bb=n(K,"LI",{});var d9e=s(Bb);bme=n(d9e,"STRONG",{});var Mdt=s(bme);gPo=r(Mdt,"data2vec-text"),Mdt.forEach(t),hPo=r(d9e," \u2014 "),zG=n(d9e,"A",{href:!0});var Edt=s(zG);pPo=r(Edt,"Data2VecTextForMultipleChoice"),Edt.forEach(t),_Po=r(d9e," (Data2VecText model)"),d9e.forEach(t),uPo=i(K),Ib=n(K,"LI",{});var c9e=s(Ib);vme=n(c9e,"STRONG",{});var Cdt=s(vme);bPo=r(Cdt,"deberta-v2"),Cdt.forEach(t),vPo=r(c9e," \u2014 "),WG=n(c9e,"A",{href:!0});var wdt=s(WG);FPo=r(wdt,"DebertaV2ForMultipleChoice"),wdt.forEach(t),TPo=r(c9e," (DeBERTa-v2 model)"),c9e.forEach(t),MPo=i(K),qb=n(K,"LI",{});var f9e=s(qb);Fme=n(f9e,"STRONG",{});var Adt=s(Fme);EPo=r(Adt,"distilbert"),Adt.forEach(t),CPo=r(f9e," \u2014 "),QG=n(f9e,"A",{href:!0});var ydt=s(QG);wPo=r(ydt,"DistilBertForMultipleChoice"),ydt.forEach(t),APo=r(f9e," (DistilBERT model)"),f9e.forEach(t),yPo=i(K),Nb=n(K,"LI",{});var m9e=s(Nb);Tme=n(m9e,"STRONG",{});var Ldt=s(Tme);LPo=r(Ldt,"electra"),Ldt.forEach(t),xPo=r(m9e," \u2014 "),HG=n(m9e,"A",{href:!0});var xdt=s(HG);$Po=r(xdt,"ElectraForMultipleChoice"),xdt.forEach(t),kPo=r(m9e," (ELECTRA model)"),m9e.forEach(t),SPo=i(K),jb=n(K,"LI",{});var g9e=s(jb);Mme=n(g9e,"STRONG",{});var $dt=s(Mme);RPo=r($dt,"flaubert"),$dt.forEach(t),PPo=r(g9e," \u2014 "),UG=n(g9e,"A",{href:!0});var kdt=s(UG);BPo=r(kdt,"FlaubertForMultipleChoice"),kdt.forEach(t),IPo=r(g9e," (FlauBERT model)"),g9e.forEach(t),qPo=i(K),Db=n(K,"LI",{});var h9e=s(Db);Eme=n(h9e,"STRONG",{});var Sdt=s(Eme);NPo=r(Sdt,"fnet"),Sdt.forEach(t),jPo=r(h9e," \u2014 "),JG=n(h9e,"A",{href:!0});var Rdt=s(JG);DPo=r(Rdt,"FNetForMultipleChoice"),Rdt.forEach(t),GPo=r(h9e," (FNet model)"),h9e.forEach(t),OPo=i(K),Gb=n(K,"LI",{});var p9e=s(Gb);Cme=n(p9e,"STRONG",{});var Pdt=s(Cme);VPo=r(Pdt,"funnel"),Pdt.forEach(t),XPo=r(p9e," \u2014 "),YG=n(p9e,"A",{href:!0});var Bdt=s(YG);zPo=r(Bdt,"FunnelForMultipleChoice"),Bdt.forEach(t),WPo=r(p9e," (Funnel Transformer model)"),p9e.forEach(t),QPo=i(K),Ob=n(K,"LI",{});var _9e=s(Ob);wme=n(_9e,"STRONG",{});var Idt=s(wme);HPo=r(Idt,"ibert"),Idt.forEach(t),UPo=r(_9e," \u2014 "),KG=n(_9e,"A",{href:!0});var qdt=s(KG);JPo=r(qdt,"IBertForMultipleChoice"),qdt.forEach(t),YPo=r(_9e," (I-BERT model)"),_9e.forEach(t),KPo=i(K),Vb=n(K,"LI",{});var u9e=s(Vb);Ame=n(u9e,"STRONG",{});var Ndt=s(Ame);ZPo=r(Ndt,"longformer"),Ndt.forEach(t),eBo=r(u9e," \u2014 "),ZG=n(u9e,"A",{href:!0});var jdt=s(ZG);oBo=r(jdt,"LongformerForMultipleChoice"),jdt.forEach(t),rBo=r(u9e," (Longformer model)"),u9e.forEach(t),tBo=i(K),Xb=n(K,"LI",{});var b9e=s(Xb);yme=n(b9e,"STRONG",{});var Ddt=s(yme);aBo=r(Ddt,"megatron-bert"),Ddt.forEach(t),nBo=r(b9e," \u2014 "),eO=n(b9e,"A",{href:!0});var Gdt=s(eO);sBo=r(Gdt,"MegatronBertForMultipleChoice"),Gdt.forEach(t),lBo=r(b9e," (MegatronBert model)"),b9e.forEach(t),iBo=i(K),zb=n(K,"LI",{});var v9e=s(zb);Lme=n(v9e,"STRONG",{});var Odt=s(Lme);dBo=r(Odt,"mobilebert"),Odt.forEach(t),cBo=r(v9e," \u2014 "),oO=n(v9e,"A",{href:!0});var Vdt=s(oO);fBo=r(Vdt,"MobileBertForMultipleChoice"),Vdt.forEach(t),mBo=r(v9e," (MobileBERT model)"),v9e.forEach(t),gBo=i(K),Wb=n(K,"LI",{});var F9e=s(Wb);xme=n(F9e,"STRONG",{});var Xdt=s(xme);hBo=r(Xdt,"mpnet"),Xdt.forEach(t),pBo=r(F9e," \u2014 "),rO=n(F9e,"A",{href:!0});var zdt=s(rO);_Bo=r(zdt,"MPNetForMultipleChoice"),zdt.forEach(t),uBo=r(F9e," (MPNet model)"),F9e.forEach(t),bBo=i(K),Qb=n(K,"LI",{});var T9e=s(Qb);$me=n(T9e,"STRONG",{});var Wdt=s($me);vBo=r(Wdt,"nystromformer"),Wdt.forEach(t),FBo=r(T9e," \u2014 "),tO=n(T9e,"A",{href:!0});var Qdt=s(tO);TBo=r(Qdt,"NystromformerForMultipleChoice"),Qdt.forEach(t),MBo=r(T9e," (Nystromformer model)"),T9e.forEach(t),EBo=i(K),Hb=n(K,"LI",{});var M9e=s(Hb);kme=n(M9e,"STRONG",{});var Hdt=s(kme);CBo=r(Hdt,"qdqbert"),Hdt.forEach(t),wBo=r(M9e," \u2014 "),aO=n(M9e,"A",{href:!0});var Udt=s(aO);ABo=r(Udt,"QDQBertForMultipleChoice"),Udt.forEach(t),yBo=r(M9e," (QDQBert model)"),M9e.forEach(t),LBo=i(K),Ub=n(K,"LI",{});var E9e=s(Ub);Sme=n(E9e,"STRONG",{});var Jdt=s(Sme);xBo=r(Jdt,"rembert"),Jdt.forEach(t),$Bo=r(E9e," \u2014 "),nO=n(E9e,"A",{href:!0});var Ydt=s(nO);kBo=r(Ydt,"RemBertForMultipleChoice"),Ydt.forEach(t),SBo=r(E9e," (RemBERT model)"),E9e.forEach(t),RBo=i(K),Jb=n(K,"LI",{});var C9e=s(Jb);Rme=n(C9e,"STRONG",{});var Kdt=s(Rme);PBo=r(Kdt,"roberta"),Kdt.forEach(t),BBo=r(C9e," \u2014 "),sO=n(C9e,"A",{href:!0});var Zdt=s(sO);IBo=r(Zdt,"RobertaForMultipleChoice"),Zdt.forEach(t),qBo=r(C9e," (RoBERTa model)"),C9e.forEach(t),NBo=i(K),Yb=n(K,"LI",{});var w9e=s(Yb);Pme=n(w9e,"STRONG",{});var ect=s(Pme);jBo=r(ect,"roformer"),ect.forEach(t),DBo=r(w9e," \u2014 "),lO=n(w9e,"A",{href:!0});var oct=s(lO);GBo=r(oct,"RoFormerForMultipleChoice"),oct.forEach(t),OBo=r(w9e," (RoFormer model)"),w9e.forEach(t),VBo=i(K),Kb=n(K,"LI",{});var A9e=s(Kb);Bme=n(A9e,"STRONG",{});var rct=s(Bme);XBo=r(rct,"squeezebert"),rct.forEach(t),zBo=r(A9e," \u2014 "),iO=n(A9e,"A",{href:!0});var tct=s(iO);WBo=r(tct,"SqueezeBertForMultipleChoice"),tct.forEach(t),QBo=r(A9e," (SqueezeBERT model)"),A9e.forEach(t),HBo=i(K),Zb=n(K,"LI",{});var y9e=s(Zb);Ime=n(y9e,"STRONG",{});var act=s(Ime);UBo=r(act,"xlm"),act.forEach(t),JBo=r(y9e," \u2014 "),dO=n(y9e,"A",{href:!0});var nct=s(dO);YBo=r(nct,"XLMForMultipleChoice"),nct.forEach(t),KBo=r(y9e," (XLM model)"),y9e.forEach(t),ZBo=i(K),e4=n(K,"LI",{});var L9e=s(e4);qme=n(L9e,"STRONG",{});var sct=s(qme);eIo=r(sct,"xlm-roberta"),sct.forEach(t),oIo=r(L9e," \u2014 "),cO=n(L9e,"A",{href:!0});var lct=s(cO);rIo=r(lct,"XLMRobertaForMultipleChoice"),lct.forEach(t),tIo=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),aIo=i(K),o4=n(K,"LI",{});var x9e=s(o4);Nme=n(x9e,"STRONG",{});var ict=s(Nme);nIo=r(ict,"xlm-roberta-xl"),ict.forEach(t),sIo=r(x9e," \u2014 "),fO=n(x9e,"A",{href:!0});var dct=s(fO);lIo=r(dct,"XLMRobertaXLForMultipleChoice"),dct.forEach(t),iIo=r(x9e," (XLM-RoBERTa-XL model)"),x9e.forEach(t),dIo=i(K),r4=n(K,"LI",{});var $9e=s(r4);jme=n($9e,"STRONG",{});var cct=s(jme);cIo=r(cct,"xlnet"),cct.forEach(t),fIo=r($9e," \u2014 "),mO=n($9e,"A",{href:!0});var fct=s(mO);mIo=r(fct,"XLNetForMultipleChoice"),fct.forEach(t),gIo=r($9e," (XLNet model)"),$9e.forEach(t),hIo=i(K),t4=n(K,"LI",{});var k9e=s(t4);Dme=n(k9e,"STRONG",{});var mct=s(Dme);pIo=r(mct,"yoso"),mct.forEach(t),_Io=r(k9e," \u2014 "),gO=n(k9e,"A",{href:!0});var gct=s(gO);uIo=r(gct,"YosoForMultipleChoice"),gct.forEach(t),bIo=r(k9e," (YOSO model)"),k9e.forEach(t),K.forEach(t),vIo=i(la),a4=n(la,"P",{});var S9e=s(a4);FIo=r(S9e,"The model is set in evaluation mode by default using "),Gme=n(S9e,"CODE",{});var hct=s(Gme);TIo=r(hct,"model.eval()"),hct.forEach(t),MIo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(S9e,"CODE",{});var pct=s(Ome);EIo=r(pct,"model.train()"),pct.forEach(t),S9e.forEach(t),CIo=i(la),T(n4.$$.fragment,la),la.forEach(t),Us.forEach(t),xqe=i(f),Hi=n(f,"H2",{class:!0});var Rje=s(Hi);s4=n(Rje,"A",{id:!0,class:!0,href:!0});var _ct=s(s4);Vme=n(_ct,"SPAN",{});var uct=s(Vme);T(Ty.$$.fragment,uct),uct.forEach(t),_ct.forEach(t),wIo=i(Rje),Xme=n(Rje,"SPAN",{});var bct=s(Xme);AIo=r(bct,"AutoModelForNextSentencePrediction"),bct.forEach(t),Rje.forEach(t),$qe=i(f),Bo=n(f,"DIV",{class:!0});var Js=s(Bo);T(My.$$.fragment,Js),yIo=i(Js),Ui=n(Js,"P",{});var lZ=s(Ui);LIo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hO=n(lZ,"A",{href:!0});var vct=s(hO);xIo=r(vct,"from_pretrained()"),vct.forEach(t),$Io=r(lZ," class method or the "),pO=n(lZ,"A",{href:!0});var Fct=s(pO);kIo=r(Fct,"from_config()"),Fct.forEach(t),SIo=r(lZ,` class
method.`),lZ.forEach(t),RIo=i(Js),Ey=n(Js,"P",{});var Pje=s(Ey);PIo=r(Pje,"This class cannot be instantiated directly using "),zme=n(Pje,"CODE",{});var Tct=s(zme);BIo=r(Tct,"__init__()"),Tct.forEach(t),IIo=r(Pje," (throws an error)."),Pje.forEach(t),qIo=i(Js),ct=n(Js,"DIV",{class:!0});var S0=s(ct);T(Cy.$$.fragment,S0),NIo=i(S0),Wme=n(S0,"P",{});var Mct=s(Wme);jIo=r(Mct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mct.forEach(t),DIo=i(S0),Ji=n(S0,"P",{});var iZ=s(Ji);GIo=r(iZ,`Note:
Loading a model from its configuration file does `),Qme=n(iZ,"STRONG",{});var Ect=s(Qme);OIo=r(Ect,"not"),Ect.forEach(t),VIo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(iZ,"A",{href:!0});var Cct=s(_O);XIo=r(Cct,"from_pretrained()"),Cct.forEach(t),zIo=r(iZ," to load the model weights."),iZ.forEach(t),WIo=i(S0),T(l4.$$.fragment,S0),S0.forEach(t),QIo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(wy.$$.fragment,ia),HIo=i(ia),Hme=n(ia,"P",{});var wct=s(Hme);UIo=r(wct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wct.forEach(t),JIo=i(ia),Ba=n(ia,"P",{});var R0=s(Ba);YIo=r(R0,"The model class to instantiate is selected based on the "),Ume=n(R0,"CODE",{});var Act=s(Ume);KIo=r(Act,"model_type"),Act.forEach(t),ZIo=r(R0,` property of the config object (either
passed as an argument or loaded from `),Jme=n(R0,"CODE",{});var yct=s(Jme);eqo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),oqo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(R0,"CODE",{});var Lct=s(Yme);rqo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),tqo=r(R0,":"),R0.forEach(t),aqo=i(ia),Yr=n(ia,"UL",{});var Ys=s(Yr);i4=n(Ys,"LI",{});var R9e=s(i4);Kme=n(R9e,"STRONG",{});var xct=s(Kme);nqo=r(xct,"bert"),xct.forEach(t),sqo=r(R9e," \u2014 "),uO=n(R9e,"A",{href:!0});var $ct=s(uO);lqo=r($ct,"BertForNextSentencePrediction"),$ct.forEach(t),iqo=r(R9e," (BERT model)"),R9e.forEach(t),dqo=i(Ys),d4=n(Ys,"LI",{});var P9e=s(d4);Zme=n(P9e,"STRONG",{});var kct=s(Zme);cqo=r(kct,"fnet"),kct.forEach(t),fqo=r(P9e," \u2014 "),bO=n(P9e,"A",{href:!0});var Sct=s(bO);mqo=r(Sct,"FNetForNextSentencePrediction"),Sct.forEach(t),gqo=r(P9e," (FNet model)"),P9e.forEach(t),hqo=i(Ys),c4=n(Ys,"LI",{});var B9e=s(c4);ege=n(B9e,"STRONG",{});var Rct=s(ege);pqo=r(Rct,"megatron-bert"),Rct.forEach(t),_qo=r(B9e," \u2014 "),vO=n(B9e,"A",{href:!0});var Pct=s(vO);uqo=r(Pct,"MegatronBertForNextSentencePrediction"),Pct.forEach(t),bqo=r(B9e," (MegatronBert model)"),B9e.forEach(t),vqo=i(Ys),f4=n(Ys,"LI",{});var I9e=s(f4);oge=n(I9e,"STRONG",{});var Bct=s(oge);Fqo=r(Bct,"mobilebert"),Bct.forEach(t),Tqo=r(I9e," \u2014 "),FO=n(I9e,"A",{href:!0});var Ict=s(FO);Mqo=r(Ict,"MobileBertForNextSentencePrediction"),Ict.forEach(t),Eqo=r(I9e," (MobileBERT model)"),I9e.forEach(t),Cqo=i(Ys),m4=n(Ys,"LI",{});var q9e=s(m4);rge=n(q9e,"STRONG",{});var qct=s(rge);wqo=r(qct,"qdqbert"),qct.forEach(t),Aqo=r(q9e," \u2014 "),TO=n(q9e,"A",{href:!0});var Nct=s(TO);yqo=r(Nct,"QDQBertForNextSentencePrediction"),Nct.forEach(t),Lqo=r(q9e," (QDQBert model)"),q9e.forEach(t),Ys.forEach(t),xqo=i(ia),g4=n(ia,"P",{});var N9e=s(g4);$qo=r(N9e,"The model is set in evaluation mode by default using "),tge=n(N9e,"CODE",{});var jct=s(tge);kqo=r(jct,"model.eval()"),jct.forEach(t),Sqo=r(N9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),age=n(N9e,"CODE",{});var Dct=s(age);Rqo=r(Dct,"model.train()"),Dct.forEach(t),N9e.forEach(t),Pqo=i(ia),T(h4.$$.fragment,ia),ia.forEach(t),Js.forEach(t),kqe=i(f),Yi=n(f,"H2",{class:!0});var Bje=s(Yi);p4=n(Bje,"A",{id:!0,class:!0,href:!0});var Gct=s(p4);nge=n(Gct,"SPAN",{});var Oct=s(nge);T(Ay.$$.fragment,Oct),Oct.forEach(t),Gct.forEach(t),Bqo=i(Bje),sge=n(Bje,"SPAN",{});var Vct=s(sge);Iqo=r(Vct,"AutoModelForTokenClassification"),Vct.forEach(t),Bje.forEach(t),Sqe=i(f),Io=n(f,"DIV",{class:!0});var Ks=s(Io);T(yy.$$.fragment,Ks),qqo=i(Ks),Ki=n(Ks,"P",{});var dZ=s(Ki);Nqo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),MO=n(dZ,"A",{href:!0});var Xct=s(MO);jqo=r(Xct,"from_pretrained()"),Xct.forEach(t),Dqo=r(dZ," class method or the "),EO=n(dZ,"A",{href:!0});var zct=s(EO);Gqo=r(zct,"from_config()"),zct.forEach(t),Oqo=r(dZ,` class
method.`),dZ.forEach(t),Vqo=i(Ks),Ly=n(Ks,"P",{});var Ije=s(Ly);Xqo=r(Ije,"This class cannot be instantiated directly using "),lge=n(Ije,"CODE",{});var Wct=s(lge);zqo=r(Wct,"__init__()"),Wct.forEach(t),Wqo=r(Ije," (throws an error)."),Ije.forEach(t),Qqo=i(Ks),ft=n(Ks,"DIV",{class:!0});var P0=s(ft);T(xy.$$.fragment,P0),Hqo=i(P0),ige=n(P0,"P",{});var Qct=s(ige);Uqo=r(Qct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qct.forEach(t),Jqo=i(P0),Zi=n(P0,"P",{});var cZ=s(Zi);Yqo=r(cZ,`Note:
Loading a model from its configuration file does `),dge=n(cZ,"STRONG",{});var Hct=s(dge);Kqo=r(Hct,"not"),Hct.forEach(t),Zqo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=n(cZ,"A",{href:!0});var Uct=s(CO);eNo=r(Uct,"from_pretrained()"),Uct.forEach(t),oNo=r(cZ," to load the model weights."),cZ.forEach(t),rNo=i(P0),T(_4.$$.fragment,P0),P0.forEach(t),tNo=i(Ks),ao=n(Ks,"DIV",{class:!0});var da=s(ao);T($y.$$.fragment,da),aNo=i(da),cge=n(da,"P",{});var Jct=s(cge);nNo=r(Jct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jct.forEach(t),sNo=i(da),Ia=n(da,"P",{});var B0=s(Ia);lNo=r(B0,"The model class to instantiate is selected based on the "),fge=n(B0,"CODE",{});var Yct=s(fge);iNo=r(Yct,"model_type"),Yct.forEach(t),dNo=r(B0,` property of the config object (either
passed as an argument or loaded from `),mge=n(B0,"CODE",{});var Kct=s(mge);cNo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),fNo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(B0,"CODE",{});var Zct=s(gge);mNo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),gNo=r(B0,":"),B0.forEach(t),hNo=i(da),U=n(da,"UL",{});var J=s(U);u4=n(J,"LI",{});var j9e=s(u4);hge=n(j9e,"STRONG",{});var eft=s(hge);pNo=r(eft,"albert"),eft.forEach(t),_No=r(j9e," \u2014 "),wO=n(j9e,"A",{href:!0});var oft=s(wO);uNo=r(oft,"AlbertForTokenClassification"),oft.forEach(t),bNo=r(j9e," (ALBERT model)"),j9e.forEach(t),vNo=i(J),b4=n(J,"LI",{});var D9e=s(b4);pge=n(D9e,"STRONG",{});var rft=s(pge);FNo=r(rft,"bert"),rft.forEach(t),TNo=r(D9e," \u2014 "),AO=n(D9e,"A",{href:!0});var tft=s(AO);MNo=r(tft,"BertForTokenClassification"),tft.forEach(t),ENo=r(D9e," (BERT model)"),D9e.forEach(t),CNo=i(J),v4=n(J,"LI",{});var G9e=s(v4);_ge=n(G9e,"STRONG",{});var aft=s(_ge);wNo=r(aft,"big_bird"),aft.forEach(t),ANo=r(G9e," \u2014 "),yO=n(G9e,"A",{href:!0});var nft=s(yO);yNo=r(nft,"BigBirdForTokenClassification"),nft.forEach(t),LNo=r(G9e," (BigBird model)"),G9e.forEach(t),xNo=i(J),F4=n(J,"LI",{});var O9e=s(F4);uge=n(O9e,"STRONG",{});var sft=s(uge);$No=r(sft,"camembert"),sft.forEach(t),kNo=r(O9e," \u2014 "),LO=n(O9e,"A",{href:!0});var lft=s(LO);SNo=r(lft,"CamembertForTokenClassification"),lft.forEach(t),RNo=r(O9e," (CamemBERT model)"),O9e.forEach(t),PNo=i(J),T4=n(J,"LI",{});var V9e=s(T4);bge=n(V9e,"STRONG",{});var ift=s(bge);BNo=r(ift,"canine"),ift.forEach(t),INo=r(V9e," \u2014 "),xO=n(V9e,"A",{href:!0});var dft=s(xO);qNo=r(dft,"CanineForTokenClassification"),dft.forEach(t),NNo=r(V9e," (Canine model)"),V9e.forEach(t),jNo=i(J),M4=n(J,"LI",{});var X9e=s(M4);vge=n(X9e,"STRONG",{});var cft=s(vge);DNo=r(cft,"convbert"),cft.forEach(t),GNo=r(X9e," \u2014 "),$O=n(X9e,"A",{href:!0});var fft=s($O);ONo=r(fft,"ConvBertForTokenClassification"),fft.forEach(t),VNo=r(X9e," (ConvBERT model)"),X9e.forEach(t),XNo=i(J),E4=n(J,"LI",{});var z9e=s(E4);Fge=n(z9e,"STRONG",{});var mft=s(Fge);zNo=r(mft,"data2vec-text"),mft.forEach(t),WNo=r(z9e," \u2014 "),kO=n(z9e,"A",{href:!0});var gft=s(kO);QNo=r(gft,"Data2VecTextForTokenClassification"),gft.forEach(t),HNo=r(z9e," (Data2VecText model)"),z9e.forEach(t),UNo=i(J),C4=n(J,"LI",{});var W9e=s(C4);Tge=n(W9e,"STRONG",{});var hft=s(Tge);JNo=r(hft,"deberta"),hft.forEach(t),YNo=r(W9e," \u2014 "),SO=n(W9e,"A",{href:!0});var pft=s(SO);KNo=r(pft,"DebertaForTokenClassification"),pft.forEach(t),ZNo=r(W9e," (DeBERTa model)"),W9e.forEach(t),ejo=i(J),w4=n(J,"LI",{});var Q9e=s(w4);Mge=n(Q9e,"STRONG",{});var _ft=s(Mge);ojo=r(_ft,"deberta-v2"),_ft.forEach(t),rjo=r(Q9e," \u2014 "),RO=n(Q9e,"A",{href:!0});var uft=s(RO);tjo=r(uft,"DebertaV2ForTokenClassification"),uft.forEach(t),ajo=r(Q9e," (DeBERTa-v2 model)"),Q9e.forEach(t),njo=i(J),A4=n(J,"LI",{});var H9e=s(A4);Ege=n(H9e,"STRONG",{});var bft=s(Ege);sjo=r(bft,"distilbert"),bft.forEach(t),ljo=r(H9e," \u2014 "),PO=n(H9e,"A",{href:!0});var vft=s(PO);ijo=r(vft,"DistilBertForTokenClassification"),vft.forEach(t),djo=r(H9e," (DistilBERT model)"),H9e.forEach(t),cjo=i(J),y4=n(J,"LI",{});var U9e=s(y4);Cge=n(U9e,"STRONG",{});var Fft=s(Cge);fjo=r(Fft,"electra"),Fft.forEach(t),mjo=r(U9e," \u2014 "),BO=n(U9e,"A",{href:!0});var Tft=s(BO);gjo=r(Tft,"ElectraForTokenClassification"),Tft.forEach(t),hjo=r(U9e," (ELECTRA model)"),U9e.forEach(t),pjo=i(J),L4=n(J,"LI",{});var J9e=s(L4);wge=n(J9e,"STRONG",{});var Mft=s(wge);_jo=r(Mft,"flaubert"),Mft.forEach(t),ujo=r(J9e," \u2014 "),IO=n(J9e,"A",{href:!0});var Eft=s(IO);bjo=r(Eft,"FlaubertForTokenClassification"),Eft.forEach(t),vjo=r(J9e," (FlauBERT model)"),J9e.forEach(t),Fjo=i(J),x4=n(J,"LI",{});var Y9e=s(x4);Age=n(Y9e,"STRONG",{});var Cft=s(Age);Tjo=r(Cft,"fnet"),Cft.forEach(t),Mjo=r(Y9e," \u2014 "),qO=n(Y9e,"A",{href:!0});var wft=s(qO);Ejo=r(wft,"FNetForTokenClassification"),wft.forEach(t),Cjo=r(Y9e," (FNet model)"),Y9e.forEach(t),wjo=i(J),$4=n(J,"LI",{});var K9e=s($4);yge=n(K9e,"STRONG",{});var Aft=s(yge);Ajo=r(Aft,"funnel"),Aft.forEach(t),yjo=r(K9e," \u2014 "),NO=n(K9e,"A",{href:!0});var yft=s(NO);Ljo=r(yft,"FunnelForTokenClassification"),yft.forEach(t),xjo=r(K9e," (Funnel Transformer model)"),K9e.forEach(t),$jo=i(J),k4=n(J,"LI",{});var Z9e=s(k4);Lge=n(Z9e,"STRONG",{});var Lft=s(Lge);kjo=r(Lft,"gpt2"),Lft.forEach(t),Sjo=r(Z9e," \u2014 "),jO=n(Z9e,"A",{href:!0});var xft=s(jO);Rjo=r(xft,"GPT2ForTokenClassification"),xft.forEach(t),Pjo=r(Z9e," (OpenAI GPT-2 model)"),Z9e.forEach(t),Bjo=i(J),S4=n(J,"LI",{});var exe=s(S4);xge=n(exe,"STRONG",{});var $ft=s(xge);Ijo=r($ft,"ibert"),$ft.forEach(t),qjo=r(exe," \u2014 "),DO=n(exe,"A",{href:!0});var kft=s(DO);Njo=r(kft,"IBertForTokenClassification"),kft.forEach(t),jjo=r(exe," (I-BERT model)"),exe.forEach(t),Djo=i(J),R4=n(J,"LI",{});var oxe=s(R4);$ge=n(oxe,"STRONG",{});var Sft=s($ge);Gjo=r(Sft,"layoutlm"),Sft.forEach(t),Ojo=r(oxe," \u2014 "),GO=n(oxe,"A",{href:!0});var Rft=s(GO);Vjo=r(Rft,"LayoutLMForTokenClassification"),Rft.forEach(t),Xjo=r(oxe," (LayoutLM model)"),oxe.forEach(t),zjo=i(J),P4=n(J,"LI",{});var rxe=s(P4);kge=n(rxe,"STRONG",{});var Pft=s(kge);Wjo=r(Pft,"layoutlmv2"),Pft.forEach(t),Qjo=r(rxe," \u2014 "),OO=n(rxe,"A",{href:!0});var Bft=s(OO);Hjo=r(Bft,"LayoutLMv2ForTokenClassification"),Bft.forEach(t),Ujo=r(rxe," (LayoutLMv2 model)"),rxe.forEach(t),Jjo=i(J),B4=n(J,"LI",{});var txe=s(B4);Sge=n(txe,"STRONG",{});var Ift=s(Sge);Yjo=r(Ift,"longformer"),Ift.forEach(t),Kjo=r(txe," \u2014 "),VO=n(txe,"A",{href:!0});var qft=s(VO);Zjo=r(qft,"LongformerForTokenClassification"),qft.forEach(t),eDo=r(txe," (Longformer model)"),txe.forEach(t),oDo=i(J),I4=n(J,"LI",{});var axe=s(I4);Rge=n(axe,"STRONG",{});var Nft=s(Rge);rDo=r(Nft,"megatron-bert"),Nft.forEach(t),tDo=r(axe," \u2014 "),XO=n(axe,"A",{href:!0});var jft=s(XO);aDo=r(jft,"MegatronBertForTokenClassification"),jft.forEach(t),nDo=r(axe," (MegatronBert model)"),axe.forEach(t),sDo=i(J),q4=n(J,"LI",{});var nxe=s(q4);Pge=n(nxe,"STRONG",{});var Dft=s(Pge);lDo=r(Dft,"mobilebert"),Dft.forEach(t),iDo=r(nxe," \u2014 "),zO=n(nxe,"A",{href:!0});var Gft=s(zO);dDo=r(Gft,"MobileBertForTokenClassification"),Gft.forEach(t),cDo=r(nxe," (MobileBERT model)"),nxe.forEach(t),fDo=i(J),N4=n(J,"LI",{});var sxe=s(N4);Bge=n(sxe,"STRONG",{});var Oft=s(Bge);mDo=r(Oft,"mpnet"),Oft.forEach(t),gDo=r(sxe," \u2014 "),WO=n(sxe,"A",{href:!0});var Vft=s(WO);hDo=r(Vft,"MPNetForTokenClassification"),Vft.forEach(t),pDo=r(sxe," (MPNet model)"),sxe.forEach(t),_Do=i(J),j4=n(J,"LI",{});var lxe=s(j4);Ige=n(lxe,"STRONG",{});var Xft=s(Ige);uDo=r(Xft,"nystromformer"),Xft.forEach(t),bDo=r(lxe," \u2014 "),QO=n(lxe,"A",{href:!0});var zft=s(QO);vDo=r(zft,"NystromformerForTokenClassification"),zft.forEach(t),FDo=r(lxe," (Nystromformer model)"),lxe.forEach(t),TDo=i(J),D4=n(J,"LI",{});var ixe=s(D4);qge=n(ixe,"STRONG",{});var Wft=s(qge);MDo=r(Wft,"qdqbert"),Wft.forEach(t),EDo=r(ixe," \u2014 "),HO=n(ixe,"A",{href:!0});var Qft=s(HO);CDo=r(Qft,"QDQBertForTokenClassification"),Qft.forEach(t),wDo=r(ixe," (QDQBert model)"),ixe.forEach(t),ADo=i(J),G4=n(J,"LI",{});var dxe=s(G4);Nge=n(dxe,"STRONG",{});var Hft=s(Nge);yDo=r(Hft,"rembert"),Hft.forEach(t),LDo=r(dxe," \u2014 "),UO=n(dxe,"A",{href:!0});var Uft=s(UO);xDo=r(Uft,"RemBertForTokenClassification"),Uft.forEach(t),$Do=r(dxe," (RemBERT model)"),dxe.forEach(t),kDo=i(J),O4=n(J,"LI",{});var cxe=s(O4);jge=n(cxe,"STRONG",{});var Jft=s(jge);SDo=r(Jft,"roberta"),Jft.forEach(t),RDo=r(cxe," \u2014 "),JO=n(cxe,"A",{href:!0});var Yft=s(JO);PDo=r(Yft,"RobertaForTokenClassification"),Yft.forEach(t),BDo=r(cxe," (RoBERTa model)"),cxe.forEach(t),IDo=i(J),V4=n(J,"LI",{});var fxe=s(V4);Dge=n(fxe,"STRONG",{});var Kft=s(Dge);qDo=r(Kft,"roformer"),Kft.forEach(t),NDo=r(fxe," \u2014 "),YO=n(fxe,"A",{href:!0});var Zft=s(YO);jDo=r(Zft,"RoFormerForTokenClassification"),Zft.forEach(t),DDo=r(fxe," (RoFormer model)"),fxe.forEach(t),GDo=i(J),X4=n(J,"LI",{});var mxe=s(X4);Gge=n(mxe,"STRONG",{});var emt=s(Gge);ODo=r(emt,"squeezebert"),emt.forEach(t),VDo=r(mxe," \u2014 "),KO=n(mxe,"A",{href:!0});var omt=s(KO);XDo=r(omt,"SqueezeBertForTokenClassification"),omt.forEach(t),zDo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),WDo=i(J),z4=n(J,"LI",{});var gxe=s(z4);Oge=n(gxe,"STRONG",{});var rmt=s(Oge);QDo=r(rmt,"xlm"),rmt.forEach(t),HDo=r(gxe," \u2014 "),ZO=n(gxe,"A",{href:!0});var tmt=s(ZO);UDo=r(tmt,"XLMForTokenClassification"),tmt.forEach(t),JDo=r(gxe," (XLM model)"),gxe.forEach(t),YDo=i(J),W4=n(J,"LI",{});var hxe=s(W4);Vge=n(hxe,"STRONG",{});var amt=s(Vge);KDo=r(amt,"xlm-roberta"),amt.forEach(t),ZDo=r(hxe," \u2014 "),eV=n(hxe,"A",{href:!0});var nmt=s(eV);eGo=r(nmt,"XLMRobertaForTokenClassification"),nmt.forEach(t),oGo=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),rGo=i(J),Q4=n(J,"LI",{});var pxe=s(Q4);Xge=n(pxe,"STRONG",{});var smt=s(Xge);tGo=r(smt,"xlm-roberta-xl"),smt.forEach(t),aGo=r(pxe," \u2014 "),oV=n(pxe,"A",{href:!0});var lmt=s(oV);nGo=r(lmt,"XLMRobertaXLForTokenClassification"),lmt.forEach(t),sGo=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),lGo=i(J),H4=n(J,"LI",{});var _xe=s(H4);zge=n(_xe,"STRONG",{});var imt=s(zge);iGo=r(imt,"xlnet"),imt.forEach(t),dGo=r(_xe," \u2014 "),rV=n(_xe,"A",{href:!0});var dmt=s(rV);cGo=r(dmt,"XLNetForTokenClassification"),dmt.forEach(t),fGo=r(_xe," (XLNet model)"),_xe.forEach(t),mGo=i(J),U4=n(J,"LI",{});var uxe=s(U4);Wge=n(uxe,"STRONG",{});var cmt=s(Wge);gGo=r(cmt,"yoso"),cmt.forEach(t),hGo=r(uxe," \u2014 "),tV=n(uxe,"A",{href:!0});var fmt=s(tV);pGo=r(fmt,"YosoForTokenClassification"),fmt.forEach(t),_Go=r(uxe," (YOSO model)"),uxe.forEach(t),J.forEach(t),uGo=i(da),J4=n(da,"P",{});var bxe=s(J4);bGo=r(bxe,"The model is set in evaluation mode by default using "),Qge=n(bxe,"CODE",{});var mmt=s(Qge);vGo=r(mmt,"model.eval()"),mmt.forEach(t),FGo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(bxe,"CODE",{});var gmt=s(Hge);TGo=r(gmt,"model.train()"),gmt.forEach(t),bxe.forEach(t),MGo=i(da),T(Y4.$$.fragment,da),da.forEach(t),Ks.forEach(t),Rqe=i(f),ed=n(f,"H2",{class:!0});var qje=s(ed);K4=n(qje,"A",{id:!0,class:!0,href:!0});var hmt=s(K4);Uge=n(hmt,"SPAN",{});var pmt=s(Uge);T(ky.$$.fragment,pmt),pmt.forEach(t),hmt.forEach(t),EGo=i(qje),Jge=n(qje,"SPAN",{});var _mt=s(Jge);CGo=r(_mt,"AutoModelForQuestionAnswering"),_mt.forEach(t),qje.forEach(t),Pqe=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(Sy.$$.fragment,Zs),wGo=i(Zs),od=n(Zs,"P",{});var fZ=s(od);AGo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aV=n(fZ,"A",{href:!0});var umt=s(aV);yGo=r(umt,"from_pretrained()"),umt.forEach(t),LGo=r(fZ," class method or the "),nV=n(fZ,"A",{href:!0});var bmt=s(nV);xGo=r(bmt,"from_config()"),bmt.forEach(t),$Go=r(fZ,` class
method.`),fZ.forEach(t),kGo=i(Zs),Ry=n(Zs,"P",{});var Nje=s(Ry);SGo=r(Nje,"This class cannot be instantiated directly using "),Yge=n(Nje,"CODE",{});var vmt=s(Yge);RGo=r(vmt,"__init__()"),vmt.forEach(t),PGo=r(Nje," (throws an error)."),Nje.forEach(t),BGo=i(Zs),mt=n(Zs,"DIV",{class:!0});var I0=s(mt);T(Py.$$.fragment,I0),IGo=i(I0),Kge=n(I0,"P",{});var Fmt=s(Kge);qGo=r(Fmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fmt.forEach(t),NGo=i(I0),rd=n(I0,"P",{});var mZ=s(rd);jGo=r(mZ,`Note:
Loading a model from its configuration file does `),Zge=n(mZ,"STRONG",{});var Tmt=s(Zge);DGo=r(Tmt,"not"),Tmt.forEach(t),GGo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(mZ,"A",{href:!0});var Mmt=s(sV);OGo=r(Mmt,"from_pretrained()"),Mmt.forEach(t),VGo=r(mZ," to load the model weights."),mZ.forEach(t),XGo=i(I0),T(Z4.$$.fragment,I0),I0.forEach(t),zGo=i(Zs),no=n(Zs,"DIV",{class:!0});var ca=s(no);T(By.$$.fragment,ca),WGo=i(ca),ehe=n(ca,"P",{});var Emt=s(ehe);QGo=r(Emt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Emt.forEach(t),HGo=i(ca),qa=n(ca,"P",{});var q0=s(qa);UGo=r(q0,"The model class to instantiate is selected based on the "),ohe=n(q0,"CODE",{});var Cmt=s(ohe);JGo=r(Cmt,"model_type"),Cmt.forEach(t),YGo=r(q0,` property of the config object (either
passed as an argument or loaded from `),rhe=n(q0,"CODE",{});var wmt=s(rhe);KGo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),ZGo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(q0,"CODE",{});var Amt=s(the);eOo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),oOo=r(q0,":"),q0.forEach(t),rOo=i(ca),V=n(ca,"UL",{});var X=s(V);e5=n(X,"LI",{});var vxe=s(e5);ahe=n(vxe,"STRONG",{});var ymt=s(ahe);tOo=r(ymt,"albert"),ymt.forEach(t),aOo=r(vxe," \u2014 "),lV=n(vxe,"A",{href:!0});var Lmt=s(lV);nOo=r(Lmt,"AlbertForQuestionAnswering"),Lmt.forEach(t),sOo=r(vxe," (ALBERT model)"),vxe.forEach(t),lOo=i(X),o5=n(X,"LI",{});var Fxe=s(o5);nhe=n(Fxe,"STRONG",{});var xmt=s(nhe);iOo=r(xmt,"bart"),xmt.forEach(t),dOo=r(Fxe," \u2014 "),iV=n(Fxe,"A",{href:!0});var $mt=s(iV);cOo=r($mt,"BartForQuestionAnswering"),$mt.forEach(t),fOo=r(Fxe," (BART model)"),Fxe.forEach(t),mOo=i(X),r5=n(X,"LI",{});var Txe=s(r5);she=n(Txe,"STRONG",{});var kmt=s(she);gOo=r(kmt,"bert"),kmt.forEach(t),hOo=r(Txe," \u2014 "),dV=n(Txe,"A",{href:!0});var Smt=s(dV);pOo=r(Smt,"BertForQuestionAnswering"),Smt.forEach(t),_Oo=r(Txe," (BERT model)"),Txe.forEach(t),uOo=i(X),t5=n(X,"LI",{});var Mxe=s(t5);lhe=n(Mxe,"STRONG",{});var Rmt=s(lhe);bOo=r(Rmt,"big_bird"),Rmt.forEach(t),vOo=r(Mxe," \u2014 "),cV=n(Mxe,"A",{href:!0});var Pmt=s(cV);FOo=r(Pmt,"BigBirdForQuestionAnswering"),Pmt.forEach(t),TOo=r(Mxe," (BigBird model)"),Mxe.forEach(t),MOo=i(X),a5=n(X,"LI",{});var Exe=s(a5);ihe=n(Exe,"STRONG",{});var Bmt=s(ihe);EOo=r(Bmt,"bigbird_pegasus"),Bmt.forEach(t),COo=r(Exe," \u2014 "),fV=n(Exe,"A",{href:!0});var Imt=s(fV);wOo=r(Imt,"BigBirdPegasusForQuestionAnswering"),Imt.forEach(t),AOo=r(Exe," (BigBirdPegasus model)"),Exe.forEach(t),yOo=i(X),n5=n(X,"LI",{});var Cxe=s(n5);dhe=n(Cxe,"STRONG",{});var qmt=s(dhe);LOo=r(qmt,"camembert"),qmt.forEach(t),xOo=r(Cxe," \u2014 "),mV=n(Cxe,"A",{href:!0});var Nmt=s(mV);$Oo=r(Nmt,"CamembertForQuestionAnswering"),Nmt.forEach(t),kOo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),SOo=i(X),s5=n(X,"LI",{});var wxe=s(s5);che=n(wxe,"STRONG",{});var jmt=s(che);ROo=r(jmt,"canine"),jmt.forEach(t),POo=r(wxe," \u2014 "),gV=n(wxe,"A",{href:!0});var Dmt=s(gV);BOo=r(Dmt,"CanineForQuestionAnswering"),Dmt.forEach(t),IOo=r(wxe," (Canine model)"),wxe.forEach(t),qOo=i(X),l5=n(X,"LI",{});var Axe=s(l5);fhe=n(Axe,"STRONG",{});var Gmt=s(fhe);NOo=r(Gmt,"convbert"),Gmt.forEach(t),jOo=r(Axe," \u2014 "),hV=n(Axe,"A",{href:!0});var Omt=s(hV);DOo=r(Omt,"ConvBertForQuestionAnswering"),Omt.forEach(t),GOo=r(Axe," (ConvBERT model)"),Axe.forEach(t),OOo=i(X),i5=n(X,"LI",{});var yxe=s(i5);mhe=n(yxe,"STRONG",{});var Vmt=s(mhe);VOo=r(Vmt,"data2vec-text"),Vmt.forEach(t),XOo=r(yxe," \u2014 "),pV=n(yxe,"A",{href:!0});var Xmt=s(pV);zOo=r(Xmt,"Data2VecTextForQuestionAnswering"),Xmt.forEach(t),WOo=r(yxe," (Data2VecText model)"),yxe.forEach(t),QOo=i(X),d5=n(X,"LI",{});var Lxe=s(d5);ghe=n(Lxe,"STRONG",{});var zmt=s(ghe);HOo=r(zmt,"deberta"),zmt.forEach(t),UOo=r(Lxe," \u2014 "),_V=n(Lxe,"A",{href:!0});var Wmt=s(_V);JOo=r(Wmt,"DebertaForQuestionAnswering"),Wmt.forEach(t),YOo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),KOo=i(X),c5=n(X,"LI",{});var xxe=s(c5);hhe=n(xxe,"STRONG",{});var Qmt=s(hhe);ZOo=r(Qmt,"deberta-v2"),Qmt.forEach(t),eVo=r(xxe," \u2014 "),uV=n(xxe,"A",{href:!0});var Hmt=s(uV);oVo=r(Hmt,"DebertaV2ForQuestionAnswering"),Hmt.forEach(t),rVo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),tVo=i(X),f5=n(X,"LI",{});var $xe=s(f5);phe=n($xe,"STRONG",{});var Umt=s(phe);aVo=r(Umt,"distilbert"),Umt.forEach(t),nVo=r($xe," \u2014 "),bV=n($xe,"A",{href:!0});var Jmt=s(bV);sVo=r(Jmt,"DistilBertForQuestionAnswering"),Jmt.forEach(t),lVo=r($xe," (DistilBERT model)"),$xe.forEach(t),iVo=i(X),m5=n(X,"LI",{});var kxe=s(m5);_he=n(kxe,"STRONG",{});var Ymt=s(_he);dVo=r(Ymt,"electra"),Ymt.forEach(t),cVo=r(kxe," \u2014 "),vV=n(kxe,"A",{href:!0});var Kmt=s(vV);fVo=r(Kmt,"ElectraForQuestionAnswering"),Kmt.forEach(t),mVo=r(kxe," (ELECTRA model)"),kxe.forEach(t),gVo=i(X),g5=n(X,"LI",{});var Sxe=s(g5);uhe=n(Sxe,"STRONG",{});var Zmt=s(uhe);hVo=r(Zmt,"flaubert"),Zmt.forEach(t),pVo=r(Sxe," \u2014 "),FV=n(Sxe,"A",{href:!0});var egt=s(FV);_Vo=r(egt,"FlaubertForQuestionAnsweringSimple"),egt.forEach(t),uVo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),bVo=i(X),h5=n(X,"LI",{});var Rxe=s(h5);bhe=n(Rxe,"STRONG",{});var ogt=s(bhe);vVo=r(ogt,"fnet"),ogt.forEach(t),FVo=r(Rxe," \u2014 "),TV=n(Rxe,"A",{href:!0});var rgt=s(TV);TVo=r(rgt,"FNetForQuestionAnswering"),rgt.forEach(t),MVo=r(Rxe," (FNet model)"),Rxe.forEach(t),EVo=i(X),p5=n(X,"LI",{});var Pxe=s(p5);vhe=n(Pxe,"STRONG",{});var tgt=s(vhe);CVo=r(tgt,"funnel"),tgt.forEach(t),wVo=r(Pxe," \u2014 "),MV=n(Pxe,"A",{href:!0});var agt=s(MV);AVo=r(agt,"FunnelForQuestionAnswering"),agt.forEach(t),yVo=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),LVo=i(X),_5=n(X,"LI",{});var Bxe=s(_5);Fhe=n(Bxe,"STRONG",{});var ngt=s(Fhe);xVo=r(ngt,"gptj"),ngt.forEach(t),$Vo=r(Bxe," \u2014 "),EV=n(Bxe,"A",{href:!0});var sgt=s(EV);kVo=r(sgt,"GPTJForQuestionAnswering"),sgt.forEach(t),SVo=r(Bxe," (GPT-J model)"),Bxe.forEach(t),RVo=i(X),u5=n(X,"LI",{});var Ixe=s(u5);The=n(Ixe,"STRONG",{});var lgt=s(The);PVo=r(lgt,"ibert"),lgt.forEach(t),BVo=r(Ixe," \u2014 "),CV=n(Ixe,"A",{href:!0});var igt=s(CV);IVo=r(igt,"IBertForQuestionAnswering"),igt.forEach(t),qVo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),NVo=i(X),b5=n(X,"LI",{});var qxe=s(b5);Mhe=n(qxe,"STRONG",{});var dgt=s(Mhe);jVo=r(dgt,"layoutlmv2"),dgt.forEach(t),DVo=r(qxe," \u2014 "),wV=n(qxe,"A",{href:!0});var cgt=s(wV);GVo=r(cgt,"LayoutLMv2ForQuestionAnswering"),cgt.forEach(t),OVo=r(qxe," (LayoutLMv2 model)"),qxe.forEach(t),VVo=i(X),v5=n(X,"LI",{});var Nxe=s(v5);Ehe=n(Nxe,"STRONG",{});var fgt=s(Ehe);XVo=r(fgt,"led"),fgt.forEach(t),zVo=r(Nxe," \u2014 "),AV=n(Nxe,"A",{href:!0});var mgt=s(AV);WVo=r(mgt,"LEDForQuestionAnswering"),mgt.forEach(t),QVo=r(Nxe," (LED model)"),Nxe.forEach(t),HVo=i(X),F5=n(X,"LI",{});var jxe=s(F5);Che=n(jxe,"STRONG",{});var ggt=s(Che);UVo=r(ggt,"longformer"),ggt.forEach(t),JVo=r(jxe," \u2014 "),yV=n(jxe,"A",{href:!0});var hgt=s(yV);YVo=r(hgt,"LongformerForQuestionAnswering"),hgt.forEach(t),KVo=r(jxe," (Longformer model)"),jxe.forEach(t),ZVo=i(X),T5=n(X,"LI",{});var Dxe=s(T5);whe=n(Dxe,"STRONG",{});var pgt=s(whe);eXo=r(pgt,"lxmert"),pgt.forEach(t),oXo=r(Dxe," \u2014 "),LV=n(Dxe,"A",{href:!0});var _gt=s(LV);rXo=r(_gt,"LxmertForQuestionAnswering"),_gt.forEach(t),tXo=r(Dxe," (LXMERT model)"),Dxe.forEach(t),aXo=i(X),M5=n(X,"LI",{});var Gxe=s(M5);Ahe=n(Gxe,"STRONG",{});var ugt=s(Ahe);nXo=r(ugt,"mbart"),ugt.forEach(t),sXo=r(Gxe," \u2014 "),xV=n(Gxe,"A",{href:!0});var bgt=s(xV);lXo=r(bgt,"MBartForQuestionAnswering"),bgt.forEach(t),iXo=r(Gxe," (mBART model)"),Gxe.forEach(t),dXo=i(X),E5=n(X,"LI",{});var Oxe=s(E5);yhe=n(Oxe,"STRONG",{});var vgt=s(yhe);cXo=r(vgt,"megatron-bert"),vgt.forEach(t),fXo=r(Oxe," \u2014 "),$V=n(Oxe,"A",{href:!0});var Fgt=s($V);mXo=r(Fgt,"MegatronBertForQuestionAnswering"),Fgt.forEach(t),gXo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),hXo=i(X),C5=n(X,"LI",{});var Vxe=s(C5);Lhe=n(Vxe,"STRONG",{});var Tgt=s(Lhe);pXo=r(Tgt,"mobilebert"),Tgt.forEach(t),_Xo=r(Vxe," \u2014 "),kV=n(Vxe,"A",{href:!0});var Mgt=s(kV);uXo=r(Mgt,"MobileBertForQuestionAnswering"),Mgt.forEach(t),bXo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),vXo=i(X),w5=n(X,"LI",{});var Xxe=s(w5);xhe=n(Xxe,"STRONG",{});var Egt=s(xhe);FXo=r(Egt,"mpnet"),Egt.forEach(t),TXo=r(Xxe," \u2014 "),SV=n(Xxe,"A",{href:!0});var Cgt=s(SV);MXo=r(Cgt,"MPNetForQuestionAnswering"),Cgt.forEach(t),EXo=r(Xxe," (MPNet model)"),Xxe.forEach(t),CXo=i(X),A5=n(X,"LI",{});var zxe=s(A5);$he=n(zxe,"STRONG",{});var wgt=s($he);wXo=r(wgt,"nystromformer"),wgt.forEach(t),AXo=r(zxe," \u2014 "),RV=n(zxe,"A",{href:!0});var Agt=s(RV);yXo=r(Agt,"NystromformerForQuestionAnswering"),Agt.forEach(t),LXo=r(zxe," (Nystromformer model)"),zxe.forEach(t),xXo=i(X),y5=n(X,"LI",{});var Wxe=s(y5);khe=n(Wxe,"STRONG",{});var ygt=s(khe);$Xo=r(ygt,"qdqbert"),ygt.forEach(t),kXo=r(Wxe," \u2014 "),PV=n(Wxe,"A",{href:!0});var Lgt=s(PV);SXo=r(Lgt,"QDQBertForQuestionAnswering"),Lgt.forEach(t),RXo=r(Wxe," (QDQBert model)"),Wxe.forEach(t),PXo=i(X),L5=n(X,"LI",{});var Qxe=s(L5);She=n(Qxe,"STRONG",{});var xgt=s(She);BXo=r(xgt,"reformer"),xgt.forEach(t),IXo=r(Qxe," \u2014 "),BV=n(Qxe,"A",{href:!0});var $gt=s(BV);qXo=r($gt,"ReformerForQuestionAnswering"),$gt.forEach(t),NXo=r(Qxe," (Reformer model)"),Qxe.forEach(t),jXo=i(X),x5=n(X,"LI",{});var Hxe=s(x5);Rhe=n(Hxe,"STRONG",{});var kgt=s(Rhe);DXo=r(kgt,"rembert"),kgt.forEach(t),GXo=r(Hxe," \u2014 "),IV=n(Hxe,"A",{href:!0});var Sgt=s(IV);OXo=r(Sgt,"RemBertForQuestionAnswering"),Sgt.forEach(t),VXo=r(Hxe," (RemBERT model)"),Hxe.forEach(t),XXo=i(X),$5=n(X,"LI",{});var Uxe=s($5);Phe=n(Uxe,"STRONG",{});var Rgt=s(Phe);zXo=r(Rgt,"roberta"),Rgt.forEach(t),WXo=r(Uxe," \u2014 "),qV=n(Uxe,"A",{href:!0});var Pgt=s(qV);QXo=r(Pgt,"RobertaForQuestionAnswering"),Pgt.forEach(t),HXo=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),UXo=i(X),k5=n(X,"LI",{});var Jxe=s(k5);Bhe=n(Jxe,"STRONG",{});var Bgt=s(Bhe);JXo=r(Bgt,"roformer"),Bgt.forEach(t),YXo=r(Jxe," \u2014 "),NV=n(Jxe,"A",{href:!0});var Igt=s(NV);KXo=r(Igt,"RoFormerForQuestionAnswering"),Igt.forEach(t),ZXo=r(Jxe," (RoFormer model)"),Jxe.forEach(t),ezo=i(X),S5=n(X,"LI",{});var Yxe=s(S5);Ihe=n(Yxe,"STRONG",{});var qgt=s(Ihe);ozo=r(qgt,"splinter"),qgt.forEach(t),rzo=r(Yxe," \u2014 "),jV=n(Yxe,"A",{href:!0});var Ngt=s(jV);tzo=r(Ngt,"SplinterForQuestionAnswering"),Ngt.forEach(t),azo=r(Yxe," (Splinter model)"),Yxe.forEach(t),nzo=i(X),R5=n(X,"LI",{});var Kxe=s(R5);qhe=n(Kxe,"STRONG",{});var jgt=s(qhe);szo=r(jgt,"squeezebert"),jgt.forEach(t),lzo=r(Kxe," \u2014 "),DV=n(Kxe,"A",{href:!0});var Dgt=s(DV);izo=r(Dgt,"SqueezeBertForQuestionAnswering"),Dgt.forEach(t),dzo=r(Kxe," (SqueezeBERT model)"),Kxe.forEach(t),czo=i(X),P5=n(X,"LI",{});var Zxe=s(P5);Nhe=n(Zxe,"STRONG",{});var Ggt=s(Nhe);fzo=r(Ggt,"xlm"),Ggt.forEach(t),mzo=r(Zxe," \u2014 "),GV=n(Zxe,"A",{href:!0});var Ogt=s(GV);gzo=r(Ogt,"XLMForQuestionAnsweringSimple"),Ogt.forEach(t),hzo=r(Zxe," (XLM model)"),Zxe.forEach(t),pzo=i(X),B5=n(X,"LI",{});var e$e=s(B5);jhe=n(e$e,"STRONG",{});var Vgt=s(jhe);_zo=r(Vgt,"xlm-roberta"),Vgt.forEach(t),uzo=r(e$e," \u2014 "),OV=n(e$e,"A",{href:!0});var Xgt=s(OV);bzo=r(Xgt,"XLMRobertaForQuestionAnswering"),Xgt.forEach(t),vzo=r(e$e," (XLM-RoBERTa model)"),e$e.forEach(t),Fzo=i(X),I5=n(X,"LI",{});var o$e=s(I5);Dhe=n(o$e,"STRONG",{});var zgt=s(Dhe);Tzo=r(zgt,"xlm-roberta-xl"),zgt.forEach(t),Mzo=r(o$e," \u2014 "),VV=n(o$e,"A",{href:!0});var Wgt=s(VV);Ezo=r(Wgt,"XLMRobertaXLForQuestionAnswering"),Wgt.forEach(t),Czo=r(o$e," (XLM-RoBERTa-XL model)"),o$e.forEach(t),wzo=i(X),q5=n(X,"LI",{});var r$e=s(q5);Ghe=n(r$e,"STRONG",{});var Qgt=s(Ghe);Azo=r(Qgt,"xlnet"),Qgt.forEach(t),yzo=r(r$e," \u2014 "),XV=n(r$e,"A",{href:!0});var Hgt=s(XV);Lzo=r(Hgt,"XLNetForQuestionAnsweringSimple"),Hgt.forEach(t),xzo=r(r$e," (XLNet model)"),r$e.forEach(t),$zo=i(X),N5=n(X,"LI",{});var t$e=s(N5);Ohe=n(t$e,"STRONG",{});var Ugt=s(Ohe);kzo=r(Ugt,"yoso"),Ugt.forEach(t),Szo=r(t$e," \u2014 "),zV=n(t$e,"A",{href:!0});var Jgt=s(zV);Rzo=r(Jgt,"YosoForQuestionAnswering"),Jgt.forEach(t),Pzo=r(t$e," (YOSO model)"),t$e.forEach(t),X.forEach(t),Bzo=i(ca),j5=n(ca,"P",{});var a$e=s(j5);Izo=r(a$e,"The model is set in evaluation mode by default using "),Vhe=n(a$e,"CODE",{});var Ygt=s(Vhe);qzo=r(Ygt,"model.eval()"),Ygt.forEach(t),Nzo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(a$e,"CODE",{});var Kgt=s(Xhe);jzo=r(Kgt,"model.train()"),Kgt.forEach(t),a$e.forEach(t),Dzo=i(ca),T(D5.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),Bqe=i(f),td=n(f,"H2",{class:!0});var jje=s(td);G5=n(jje,"A",{id:!0,class:!0,href:!0});var Zgt=s(G5);zhe=n(Zgt,"SPAN",{});var eht=s(zhe);T(Iy.$$.fragment,eht),eht.forEach(t),Zgt.forEach(t),Gzo=i(jje),Whe=n(jje,"SPAN",{});var oht=s(Whe);Ozo=r(oht,"AutoModelForTableQuestionAnswering"),oht.forEach(t),jje.forEach(t),Iqe=i(f),No=n(f,"DIV",{class:!0});var el=s(No);T(qy.$$.fragment,el),Vzo=i(el),ad=n(el,"P",{});var gZ=s(ad);Xzo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WV=n(gZ,"A",{href:!0});var rht=s(WV);zzo=r(rht,"from_pretrained()"),rht.forEach(t),Wzo=r(gZ," class method or the "),QV=n(gZ,"A",{href:!0});var tht=s(QV);Qzo=r(tht,"from_config()"),tht.forEach(t),Hzo=r(gZ,` class
method.`),gZ.forEach(t),Uzo=i(el),Ny=n(el,"P",{});var Dje=s(Ny);Jzo=r(Dje,"This class cannot be instantiated directly using "),Qhe=n(Dje,"CODE",{});var aht=s(Qhe);Yzo=r(aht,"__init__()"),aht.forEach(t),Kzo=r(Dje," (throws an error)."),Dje.forEach(t),Zzo=i(el),gt=n(el,"DIV",{class:!0});var N0=s(gt);T(jy.$$.fragment,N0),eWo=i(N0),Hhe=n(N0,"P",{});var nht=s(Hhe);oWo=r(nht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nht.forEach(t),rWo=i(N0),nd=n(N0,"P",{});var hZ=s(nd);tWo=r(hZ,`Note:
Loading a model from its configuration file does `),Uhe=n(hZ,"STRONG",{});var sht=s(Uhe);aWo=r(sht,"not"),sht.forEach(t),nWo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(hZ,"A",{href:!0});var lht=s(HV);sWo=r(lht,"from_pretrained()"),lht.forEach(t),lWo=r(hZ," to load the model weights."),hZ.forEach(t),iWo=i(N0),T(O5.$$.fragment,N0),N0.forEach(t),dWo=i(el),so=n(el,"DIV",{class:!0});var fa=s(so);T(Dy.$$.fragment,fa),cWo=i(fa),Jhe=n(fa,"P",{});var iht=s(Jhe);fWo=r(iht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),iht.forEach(t),mWo=i(fa),Na=n(fa,"P",{});var j0=s(Na);gWo=r(j0,"The model class to instantiate is selected based on the "),Yhe=n(j0,"CODE",{});var dht=s(Yhe);hWo=r(dht,"model_type"),dht.forEach(t),pWo=r(j0,` property of the config object (either
passed as an argument or loaded from `),Khe=n(j0,"CODE",{});var cht=s(Khe);_Wo=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),uWo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(j0,"CODE",{});var fht=s(Zhe);bWo=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),vWo=r(j0,":"),j0.forEach(t),FWo=i(fa),epe=n(fa,"UL",{});var mht=s(epe);V5=n(mht,"LI",{});var n$e=s(V5);ope=n(n$e,"STRONG",{});var ght=s(ope);TWo=r(ght,"tapas"),ght.forEach(t),MWo=r(n$e," \u2014 "),UV=n(n$e,"A",{href:!0});var hht=s(UV);EWo=r(hht,"TapasForQuestionAnswering"),hht.forEach(t),CWo=r(n$e," (TAPAS model)"),n$e.forEach(t),mht.forEach(t),wWo=i(fa),X5=n(fa,"P",{});var s$e=s(X5);AWo=r(s$e,"The model is set in evaluation mode by default using "),rpe=n(s$e,"CODE",{});var pht=s(rpe);yWo=r(pht,"model.eval()"),pht.forEach(t),LWo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(s$e,"CODE",{});var _ht=s(tpe);xWo=r(_ht,"model.train()"),_ht.forEach(t),s$e.forEach(t),$Wo=i(fa),T(z5.$$.fragment,fa),fa.forEach(t),el.forEach(t),qqe=i(f),sd=n(f,"H2",{class:!0});var Gje=s(sd);W5=n(Gje,"A",{id:!0,class:!0,href:!0});var uht=s(W5);ape=n(uht,"SPAN",{});var bht=s(ape);T(Gy.$$.fragment,bht),bht.forEach(t),uht.forEach(t),kWo=i(Gje),npe=n(Gje,"SPAN",{});var vht=s(npe);SWo=r(vht,"AutoModelForImageClassification"),vht.forEach(t),Gje.forEach(t),Nqe=i(f),jo=n(f,"DIV",{class:!0});var ol=s(jo);T(Oy.$$.fragment,ol),RWo=i(ol),ld=n(ol,"P",{});var pZ=s(ld);PWo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JV=n(pZ,"A",{href:!0});var Fht=s(JV);BWo=r(Fht,"from_pretrained()"),Fht.forEach(t),IWo=r(pZ," class method or the "),YV=n(pZ,"A",{href:!0});var Tht=s(YV);qWo=r(Tht,"from_config()"),Tht.forEach(t),NWo=r(pZ,` class
method.`),pZ.forEach(t),jWo=i(ol),Vy=n(ol,"P",{});var Oje=s(Vy);DWo=r(Oje,"This class cannot be instantiated directly using "),spe=n(Oje,"CODE",{});var Mht=s(spe);GWo=r(Mht,"__init__()"),Mht.forEach(t),OWo=r(Oje," (throws an error)."),Oje.forEach(t),VWo=i(ol),ht=n(ol,"DIV",{class:!0});var D0=s(ht);T(Xy.$$.fragment,D0),XWo=i(D0),lpe=n(D0,"P",{});var Eht=s(lpe);zWo=r(Eht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Eht.forEach(t),WWo=i(D0),id=n(D0,"P",{});var _Z=s(id);QWo=r(_Z,`Note:
Loading a model from its configuration file does `),ipe=n(_Z,"STRONG",{});var Cht=s(ipe);HWo=r(Cht,"not"),Cht.forEach(t),UWo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(_Z,"A",{href:!0});var wht=s(KV);JWo=r(wht,"from_pretrained()"),wht.forEach(t),YWo=r(_Z," to load the model weights."),_Z.forEach(t),KWo=i(D0),T(Q5.$$.fragment,D0),D0.forEach(t),ZWo=i(ol),lo=n(ol,"DIV",{class:!0});var ma=s(lo);T(zy.$$.fragment,ma),eQo=i(ma),dpe=n(ma,"P",{});var Aht=s(dpe);oQo=r(Aht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Aht.forEach(t),rQo=i(ma),ja=n(ma,"P",{});var G0=s(ja);tQo=r(G0,"The model class to instantiate is selected based on the "),cpe=n(G0,"CODE",{});var yht=s(cpe);aQo=r(yht,"model_type"),yht.forEach(t),nQo=r(G0,` property of the config object (either
passed as an argument or loaded from `),fpe=n(G0,"CODE",{});var Lht=s(fpe);sQo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),lQo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(G0,"CODE",{});var xht=s(mpe);iQo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),dQo=r(G0,":"),G0.forEach(t),cQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);H5=n(Te,"LI",{});var l$e=s(H5);gpe=n(l$e,"STRONG",{});var $ht=s(gpe);fQo=r($ht,"beit"),$ht.forEach(t),mQo=r(l$e," \u2014 "),ZV=n(l$e,"A",{href:!0});var kht=s(ZV);gQo=r(kht,"BeitForImageClassification"),kht.forEach(t),hQo=r(l$e," (BEiT model)"),l$e.forEach(t),pQo=i(Te),U5=n(Te,"LI",{});var i$e=s(U5);hpe=n(i$e,"STRONG",{});var Sht=s(hpe);_Qo=r(Sht,"convnext"),Sht.forEach(t),uQo=r(i$e," \u2014 "),eX=n(i$e,"A",{href:!0});var Rht=s(eX);bQo=r(Rht,"ConvNextForImageClassification"),Rht.forEach(t),vQo=r(i$e," (ConvNext model)"),i$e.forEach(t),FQo=i(Te),J5=n(Te,"LI",{});var d$e=s(J5);ppe=n(d$e,"STRONG",{});var Pht=s(ppe);TQo=r(Pht,"cvt"),Pht.forEach(t),MQo=r(d$e," \u2014 "),oX=n(d$e,"A",{href:!0});var Bht=s(oX);EQo=r(Bht,"CvtForImageClassification"),Bht.forEach(t),CQo=r(d$e," (CvT model)"),d$e.forEach(t),wQo=i(Te),Y5=n(Te,"LI",{});var c$e=s(Y5);_pe=n(c$e,"STRONG",{});var Iht=s(_pe);AQo=r(Iht,"data2vec-vision"),Iht.forEach(t),yQo=r(c$e," \u2014 "),rX=n(c$e,"A",{href:!0});var qht=s(rX);LQo=r(qht,"Data2VecVisionForImageClassification"),qht.forEach(t),xQo=r(c$e," (Data2VecVision model)"),c$e.forEach(t),$Qo=i(Te),qs=n(Te,"LI",{});var S$=s(qs);upe=n(S$,"STRONG",{});var Nht=s(upe);kQo=r(Nht,"deit"),Nht.forEach(t),SQo=r(S$," \u2014 "),tX=n(S$,"A",{href:!0});var jht=s(tX);RQo=r(jht,"DeiTForImageClassification"),jht.forEach(t),PQo=r(S$," or "),aX=n(S$,"A",{href:!0});var Dht=s(aX);BQo=r(Dht,"DeiTForImageClassificationWithTeacher"),Dht.forEach(t),IQo=r(S$," (DeiT model)"),S$.forEach(t),qQo=i(Te),K5=n(Te,"LI",{});var f$e=s(K5);bpe=n(f$e,"STRONG",{});var Ght=s(bpe);NQo=r(Ght,"imagegpt"),Ght.forEach(t),jQo=r(f$e," \u2014 "),nX=n(f$e,"A",{href:!0});var Oht=s(nX);DQo=r(Oht,"ImageGPTForImageClassification"),Oht.forEach(t),GQo=r(f$e," (ImageGPT model)"),f$e.forEach(t),OQo=i(Te),pt=n(Te,"LI",{});var _f=s(pt);vpe=n(_f,"STRONG",{});var Vht=s(vpe);VQo=r(Vht,"perceiver"),Vht.forEach(t),XQo=r(_f," \u2014 "),sX=n(_f,"A",{href:!0});var Xht=s(sX);zQo=r(Xht,"PerceiverForImageClassificationLearned"),Xht.forEach(t),WQo=r(_f," or "),lX=n(_f,"A",{href:!0});var zht=s(lX);QQo=r(zht,"PerceiverForImageClassificationFourier"),zht.forEach(t),HQo=r(_f," or "),iX=n(_f,"A",{href:!0});var Wht=s(iX);UQo=r(Wht,"PerceiverForImageClassificationConvProcessing"),Wht.forEach(t),JQo=r(_f," (Perceiver model)"),_f.forEach(t),YQo=i(Te),Z5=n(Te,"LI",{});var m$e=s(Z5);Fpe=n(m$e,"STRONG",{});var Qht=s(Fpe);KQo=r(Qht,"poolformer"),Qht.forEach(t),ZQo=r(m$e," \u2014 "),dX=n(m$e,"A",{href:!0});var Hht=s(dX);eHo=r(Hht,"PoolFormerForImageClassification"),Hht.forEach(t),oHo=r(m$e," (PoolFormer model)"),m$e.forEach(t),rHo=i(Te),ev=n(Te,"LI",{});var g$e=s(ev);Tpe=n(g$e,"STRONG",{});var Uht=s(Tpe);tHo=r(Uht,"regnet"),Uht.forEach(t),aHo=r(g$e," \u2014 "),cX=n(g$e,"A",{href:!0});var Jht=s(cX);nHo=r(Jht,"RegNetForImageClassification"),Jht.forEach(t),sHo=r(g$e," (RegNet model)"),g$e.forEach(t),lHo=i(Te),ov=n(Te,"LI",{});var h$e=s(ov);Mpe=n(h$e,"STRONG",{});var Yht=s(Mpe);iHo=r(Yht,"resnet"),Yht.forEach(t),dHo=r(h$e," \u2014 "),fX=n(h$e,"A",{href:!0});var Kht=s(fX);cHo=r(Kht,"ResNetForImageClassification"),Kht.forEach(t),fHo=r(h$e," (ResNet model)"),h$e.forEach(t),mHo=i(Te),rv=n(Te,"LI",{});var p$e=s(rv);Epe=n(p$e,"STRONG",{});var Zht=s(Epe);gHo=r(Zht,"segformer"),Zht.forEach(t),hHo=r(p$e," \u2014 "),mX=n(p$e,"A",{href:!0});var ept=s(mX);pHo=r(ept,"SegformerForImageClassification"),ept.forEach(t),_Ho=r(p$e," (SegFormer model)"),p$e.forEach(t),uHo=i(Te),tv=n(Te,"LI",{});var _$e=s(tv);Cpe=n(_$e,"STRONG",{});var opt=s(Cpe);bHo=r(opt,"swin"),opt.forEach(t),vHo=r(_$e," \u2014 "),gX=n(_$e,"A",{href:!0});var rpt=s(gX);FHo=r(rpt,"SwinForImageClassification"),rpt.forEach(t),THo=r(_$e," (Swin model)"),_$e.forEach(t),MHo=i(Te),av=n(Te,"LI",{});var u$e=s(av);wpe=n(u$e,"STRONG",{});var tpt=s(wpe);EHo=r(tpt,"van"),tpt.forEach(t),CHo=r(u$e," \u2014 "),hX=n(u$e,"A",{href:!0});var apt=s(hX);wHo=r(apt,"VanForImageClassification"),apt.forEach(t),AHo=r(u$e," (VAN model)"),u$e.forEach(t),yHo=i(Te),nv=n(Te,"LI",{});var b$e=s(nv);Ape=n(b$e,"STRONG",{});var npt=s(Ape);LHo=r(npt,"vit"),npt.forEach(t),xHo=r(b$e," \u2014 "),pX=n(b$e,"A",{href:!0});var spt=s(pX);$Ho=r(spt,"ViTForImageClassification"),spt.forEach(t),kHo=r(b$e," (ViT model)"),b$e.forEach(t),Te.forEach(t),SHo=i(ma),sv=n(ma,"P",{});var v$e=s(sv);RHo=r(v$e,"The model is set in evaluation mode by default using "),ype=n(v$e,"CODE",{});var lpt=s(ype);PHo=r(lpt,"model.eval()"),lpt.forEach(t),BHo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(v$e,"CODE",{});var ipt=s(Lpe);IHo=r(ipt,"model.train()"),ipt.forEach(t),v$e.forEach(t),qHo=i(ma),T(lv.$$.fragment,ma),ma.forEach(t),ol.forEach(t),jqe=i(f),dd=n(f,"H2",{class:!0});var Vje=s(dd);iv=n(Vje,"A",{id:!0,class:!0,href:!0});var dpt=s(iv);xpe=n(dpt,"SPAN",{});var cpt=s(xpe);T(Wy.$$.fragment,cpt),cpt.forEach(t),dpt.forEach(t),NHo=i(Vje),$pe=n(Vje,"SPAN",{});var fpt=s($pe);jHo=r(fpt,"AutoModelForVision2Seq"),fpt.forEach(t),Vje.forEach(t),Dqe=i(f),Do=n(f,"DIV",{class:!0});var rl=s(Do);T(Qy.$$.fragment,rl),DHo=i(rl),cd=n(rl,"P",{});var uZ=s(cd);GHo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_X=n(uZ,"A",{href:!0});var mpt=s(_X);OHo=r(mpt,"from_pretrained()"),mpt.forEach(t),VHo=r(uZ," class method or the "),uX=n(uZ,"A",{href:!0});var gpt=s(uX);XHo=r(gpt,"from_config()"),gpt.forEach(t),zHo=r(uZ,` class
method.`),uZ.forEach(t),WHo=i(rl),Hy=n(rl,"P",{});var Xje=s(Hy);QHo=r(Xje,"This class cannot be instantiated directly using "),kpe=n(Xje,"CODE",{});var hpt=s(kpe);HHo=r(hpt,"__init__()"),hpt.forEach(t),UHo=r(Xje," (throws an error)."),Xje.forEach(t),JHo=i(rl),_t=n(rl,"DIV",{class:!0});var O0=s(_t);T(Uy.$$.fragment,O0),YHo=i(O0),Spe=n(O0,"P",{});var ppt=s(Spe);KHo=r(ppt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ppt.forEach(t),ZHo=i(O0),fd=n(O0,"P",{});var bZ=s(fd);eUo=r(bZ,`Note:
Loading a model from its configuration file does `),Rpe=n(bZ,"STRONG",{});var _pt=s(Rpe);oUo=r(_pt,"not"),_pt.forEach(t),rUo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(bZ,"A",{href:!0});var upt=s(bX);tUo=r(upt,"from_pretrained()"),upt.forEach(t),aUo=r(bZ," to load the model weights."),bZ.forEach(t),nUo=i(O0),T(dv.$$.fragment,O0),O0.forEach(t),sUo=i(rl),io=n(rl,"DIV",{class:!0});var ga=s(io);T(Jy.$$.fragment,ga),lUo=i(ga),Ppe=n(ga,"P",{});var bpt=s(Ppe);iUo=r(bpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bpt.forEach(t),dUo=i(ga),Da=n(ga,"P",{});var V0=s(Da);cUo=r(V0,"The model class to instantiate is selected based on the "),Bpe=n(V0,"CODE",{});var vpt=s(Bpe);fUo=r(vpt,"model_type"),vpt.forEach(t),mUo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(V0,"CODE",{});var Fpt=s(Ipe);gUo=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),hUo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(V0,"CODE",{});var Tpt=s(qpe);pUo=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),_Uo=r(V0,":"),V0.forEach(t),uUo=i(ga),Npe=n(ga,"UL",{});var Mpt=s(Npe);cv=n(Mpt,"LI",{});var F$e=s(cv);jpe=n(F$e,"STRONG",{});var Ept=s(jpe);bUo=r(Ept,"vision-encoder-decoder"),Ept.forEach(t),vUo=r(F$e," \u2014 "),vX=n(F$e,"A",{href:!0});var Cpt=s(vX);FUo=r(Cpt,"VisionEncoderDecoderModel"),Cpt.forEach(t),TUo=r(F$e," (Vision Encoder decoder model)"),F$e.forEach(t),Mpt.forEach(t),MUo=i(ga),fv=n(ga,"P",{});var T$e=s(fv);EUo=r(T$e,"The model is set in evaluation mode by default using "),Dpe=n(T$e,"CODE",{});var wpt=s(Dpe);CUo=r(wpt,"model.eval()"),wpt.forEach(t),wUo=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(T$e,"CODE",{});var Apt=s(Gpe);AUo=r(Apt,"model.train()"),Apt.forEach(t),T$e.forEach(t),yUo=i(ga),T(mv.$$.fragment,ga),ga.forEach(t),rl.forEach(t),Gqe=i(f),md=n(f,"H2",{class:!0});var zje=s(md);gv=n(zje,"A",{id:!0,class:!0,href:!0});var ypt=s(gv);Ope=n(ypt,"SPAN",{});var Lpt=s(Ope);T(Yy.$$.fragment,Lpt),Lpt.forEach(t),ypt.forEach(t),LUo=i(zje),Vpe=n(zje,"SPAN",{});var xpt=s(Vpe);xUo=r(xpt,"AutoModelForAudioClassification"),xpt.forEach(t),zje.forEach(t),Oqe=i(f),Go=n(f,"DIV",{class:!0});var tl=s(Go);T(Ky.$$.fragment,tl),$Uo=i(tl),gd=n(tl,"P",{});var vZ=s(gd);kUo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FX=n(vZ,"A",{href:!0});var $pt=s(FX);SUo=r($pt,"from_pretrained()"),$pt.forEach(t),RUo=r(vZ," class method or the "),TX=n(vZ,"A",{href:!0});var kpt=s(TX);PUo=r(kpt,"from_config()"),kpt.forEach(t),BUo=r(vZ,` class
method.`),vZ.forEach(t),IUo=i(tl),Zy=n(tl,"P",{});var Wje=s(Zy);qUo=r(Wje,"This class cannot be instantiated directly using "),Xpe=n(Wje,"CODE",{});var Spt=s(Xpe);NUo=r(Spt,"__init__()"),Spt.forEach(t),jUo=r(Wje," (throws an error)."),Wje.forEach(t),DUo=i(tl),ut=n(tl,"DIV",{class:!0});var X0=s(ut);T(eL.$$.fragment,X0),GUo=i(X0),zpe=n(X0,"P",{});var Rpt=s(zpe);OUo=r(Rpt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Rpt.forEach(t),VUo=i(X0),hd=n(X0,"P",{});var FZ=s(hd);XUo=r(FZ,`Note:
Loading a model from its configuration file does `),Wpe=n(FZ,"STRONG",{});var Ppt=s(Wpe);zUo=r(Ppt,"not"),Ppt.forEach(t),WUo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(FZ,"A",{href:!0});var Bpt=s(MX);QUo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),HUo=r(FZ," to load the model weights."),FZ.forEach(t),UUo=i(X0),T(hv.$$.fragment,X0),X0.forEach(t),JUo=i(tl),co=n(tl,"DIV",{class:!0});var ha=s(co);T(oL.$$.fragment,ha),YUo=i(ha),Qpe=n(ha,"P",{});var Ipt=s(Qpe);KUo=r(Ipt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ipt.forEach(t),ZUo=i(ha),Ga=n(ha,"P",{});var z0=s(Ga);eJo=r(z0,"The model class to instantiate is selected based on the "),Hpe=n(z0,"CODE",{});var qpt=s(Hpe);oJo=r(qpt,"model_type"),qpt.forEach(t),rJo=r(z0,` property of the config object (either
passed as an argument or loaded from `),Upe=n(z0,"CODE",{});var Npt=s(Upe);tJo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),aJo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(z0,"CODE",{});var jpt=s(Jpe);nJo=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),sJo=r(z0,":"),z0.forEach(t),lJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);pv=n(Oe,"LI",{});var M$e=s(pv);Ype=n(M$e,"STRONG",{});var Dpt=s(Ype);iJo=r(Dpt,"data2vec-audio"),Dpt.forEach(t),dJo=r(M$e," \u2014 "),EX=n(M$e,"A",{href:!0});var Gpt=s(EX);cJo=r(Gpt,"Data2VecAudioForSequenceClassification"),Gpt.forEach(t),fJo=r(M$e," (Data2VecAudio model)"),M$e.forEach(t),mJo=i(Oe),_v=n(Oe,"LI",{});var E$e=s(_v);Kpe=n(E$e,"STRONG",{});var Opt=s(Kpe);gJo=r(Opt,"hubert"),Opt.forEach(t),hJo=r(E$e," \u2014 "),CX=n(E$e,"A",{href:!0});var Vpt=s(CX);pJo=r(Vpt,"HubertForSequenceClassification"),Vpt.forEach(t),_Jo=r(E$e," (Hubert model)"),E$e.forEach(t),uJo=i(Oe),uv=n(Oe,"LI",{});var C$e=s(uv);Zpe=n(C$e,"STRONG",{});var Xpt=s(Zpe);bJo=r(Xpt,"sew"),Xpt.forEach(t),vJo=r(C$e," \u2014 "),wX=n(C$e,"A",{href:!0});var zpt=s(wX);FJo=r(zpt,"SEWForSequenceClassification"),zpt.forEach(t),TJo=r(C$e," (SEW model)"),C$e.forEach(t),MJo=i(Oe),bv=n(Oe,"LI",{});var w$e=s(bv);e_e=n(w$e,"STRONG",{});var Wpt=s(e_e);EJo=r(Wpt,"sew-d"),Wpt.forEach(t),CJo=r(w$e," \u2014 "),AX=n(w$e,"A",{href:!0});var Qpt=s(AX);wJo=r(Qpt,"SEWDForSequenceClassification"),Qpt.forEach(t),AJo=r(w$e," (SEW-D model)"),w$e.forEach(t),yJo=i(Oe),vv=n(Oe,"LI",{});var A$e=s(vv);o_e=n(A$e,"STRONG",{});var Hpt=s(o_e);LJo=r(Hpt,"unispeech"),Hpt.forEach(t),xJo=r(A$e," \u2014 "),yX=n(A$e,"A",{href:!0});var Upt=s(yX);$Jo=r(Upt,"UniSpeechForSequenceClassification"),Upt.forEach(t),kJo=r(A$e," (UniSpeech model)"),A$e.forEach(t),SJo=i(Oe),Fv=n(Oe,"LI",{});var y$e=s(Fv);r_e=n(y$e,"STRONG",{});var Jpt=s(r_e);RJo=r(Jpt,"unispeech-sat"),Jpt.forEach(t),PJo=r(y$e," \u2014 "),LX=n(y$e,"A",{href:!0});var Ypt=s(LX);BJo=r(Ypt,"UniSpeechSatForSequenceClassification"),Ypt.forEach(t),IJo=r(y$e," (UniSpeechSat model)"),y$e.forEach(t),qJo=i(Oe),Tv=n(Oe,"LI",{});var L$e=s(Tv);t_e=n(L$e,"STRONG",{});var Kpt=s(t_e);NJo=r(Kpt,"wav2vec2"),Kpt.forEach(t),jJo=r(L$e," \u2014 "),xX=n(L$e,"A",{href:!0});var Zpt=s(xX);DJo=r(Zpt,"Wav2Vec2ForSequenceClassification"),Zpt.forEach(t),GJo=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),OJo=i(Oe),Mv=n(Oe,"LI",{});var x$e=s(Mv);a_e=n(x$e,"STRONG",{});var e_t=s(a_e);VJo=r(e_t,"wav2vec2-conformer"),e_t.forEach(t),XJo=r(x$e," \u2014 "),$X=n(x$e,"A",{href:!0});var o_t=s($X);zJo=r(o_t,"Wav2Vec2ConformerForSequenceClassification"),o_t.forEach(t),WJo=r(x$e," (Wav2Vec2-Conformer model)"),x$e.forEach(t),QJo=i(Oe),Ev=n(Oe,"LI",{});var $$e=s(Ev);n_e=n($$e,"STRONG",{});var r_t=s(n_e);HJo=r(r_t,"wavlm"),r_t.forEach(t),UJo=r($$e," \u2014 "),kX=n($$e,"A",{href:!0});var t_t=s(kX);JJo=r(t_t,"WavLMForSequenceClassification"),t_t.forEach(t),YJo=r($$e," (WavLM model)"),$$e.forEach(t),Oe.forEach(t),KJo=i(ha),Cv=n(ha,"P",{});var k$e=s(Cv);ZJo=r(k$e,"The model is set in evaluation mode by default using "),s_e=n(k$e,"CODE",{});var a_t=s(s_e);eYo=r(a_t,"model.eval()"),a_t.forEach(t),oYo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(k$e,"CODE",{});var n_t=s(l_e);rYo=r(n_t,"model.train()"),n_t.forEach(t),k$e.forEach(t),tYo=i(ha),T(wv.$$.fragment,ha),ha.forEach(t),tl.forEach(t),Vqe=i(f),pd=n(f,"H2",{class:!0});var Qje=s(pd);Av=n(Qje,"A",{id:!0,class:!0,href:!0});var s_t=s(Av);i_e=n(s_t,"SPAN",{});var l_t=s(i_e);T(rL.$$.fragment,l_t),l_t.forEach(t),s_t.forEach(t),aYo=i(Qje),d_e=n(Qje,"SPAN",{});var i_t=s(d_e);nYo=r(i_t,"AutoModelForAudioFrameClassification"),i_t.forEach(t),Qje.forEach(t),Xqe=i(f),Oo=n(f,"DIV",{class:!0});var al=s(Oo);T(tL.$$.fragment,al),sYo=i(al),_d=n(al,"P",{});var TZ=s(_d);lYo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SX=n(TZ,"A",{href:!0});var d_t=s(SX);iYo=r(d_t,"from_pretrained()"),d_t.forEach(t),dYo=r(TZ," class method or the "),RX=n(TZ,"A",{href:!0});var c_t=s(RX);cYo=r(c_t,"from_config()"),c_t.forEach(t),fYo=r(TZ,` class
method.`),TZ.forEach(t),mYo=i(al),aL=n(al,"P",{});var Hje=s(aL);gYo=r(Hje,"This class cannot be instantiated directly using "),c_e=n(Hje,"CODE",{});var f_t=s(c_e);hYo=r(f_t,"__init__()"),f_t.forEach(t),pYo=r(Hje," (throws an error)."),Hje.forEach(t),_Yo=i(al),bt=n(al,"DIV",{class:!0});var W0=s(bt);T(nL.$$.fragment,W0),uYo=i(W0),f_e=n(W0,"P",{});var m_t=s(f_e);bYo=r(m_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),m_t.forEach(t),vYo=i(W0),ud=n(W0,"P",{});var MZ=s(ud);FYo=r(MZ,`Note:
Loading a model from its configuration file does `),m_e=n(MZ,"STRONG",{});var g_t=s(m_e);TYo=r(g_t,"not"),g_t.forEach(t),MYo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(MZ,"A",{href:!0});var h_t=s(PX);EYo=r(h_t,"from_pretrained()"),h_t.forEach(t),CYo=r(MZ," to load the model weights."),MZ.forEach(t),wYo=i(W0),T(yv.$$.fragment,W0),W0.forEach(t),AYo=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(sL.$$.fragment,pa),yYo=i(pa),g_e=n(pa,"P",{});var p_t=s(g_e);LYo=r(p_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),p_t.forEach(t),xYo=i(pa),Oa=n(pa,"P",{});var Q0=s(Oa);$Yo=r(Q0,"The model class to instantiate is selected based on the "),h_e=n(Q0,"CODE",{});var __t=s(h_e);kYo=r(__t,"model_type"),__t.forEach(t),SYo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),p_e=n(Q0,"CODE",{});var u_t=s(p_e);RYo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),PYo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(Q0,"CODE",{});var b_t=s(__e);BYo=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),IYo=r(Q0,":"),Q0.forEach(t),qYo=i(pa),Kr=n(pa,"UL",{});var nl=s(Kr);Lv=n(nl,"LI",{});var S$e=s(Lv);u_e=n(S$e,"STRONG",{});var v_t=s(u_e);NYo=r(v_t,"data2vec-audio"),v_t.forEach(t),jYo=r(S$e," \u2014 "),BX=n(S$e,"A",{href:!0});var F_t=s(BX);DYo=r(F_t,"Data2VecAudioForAudioFrameClassification"),F_t.forEach(t),GYo=r(S$e," (Data2VecAudio model)"),S$e.forEach(t),OYo=i(nl),xv=n(nl,"LI",{});var R$e=s(xv);b_e=n(R$e,"STRONG",{});var T_t=s(b_e);VYo=r(T_t,"unispeech-sat"),T_t.forEach(t),XYo=r(R$e," \u2014 "),IX=n(R$e,"A",{href:!0});var M_t=s(IX);zYo=r(M_t,"UniSpeechSatForAudioFrameClassification"),M_t.forEach(t),WYo=r(R$e," (UniSpeechSat model)"),R$e.forEach(t),QYo=i(nl),$v=n(nl,"LI",{});var P$e=s($v);v_e=n(P$e,"STRONG",{});var E_t=s(v_e);HYo=r(E_t,"wav2vec2"),E_t.forEach(t),UYo=r(P$e," \u2014 "),qX=n(P$e,"A",{href:!0});var C_t=s(qX);JYo=r(C_t,"Wav2Vec2ForAudioFrameClassification"),C_t.forEach(t),YYo=r(P$e," (Wav2Vec2 model)"),P$e.forEach(t),KYo=i(nl),kv=n(nl,"LI",{});var B$e=s(kv);F_e=n(B$e,"STRONG",{});var w_t=s(F_e);ZYo=r(w_t,"wav2vec2-conformer"),w_t.forEach(t),eKo=r(B$e," \u2014 "),NX=n(B$e,"A",{href:!0});var A_t=s(NX);oKo=r(A_t,"Wav2Vec2ConformerForAudioFrameClassification"),A_t.forEach(t),rKo=r(B$e," (Wav2Vec2-Conformer model)"),B$e.forEach(t),tKo=i(nl),Sv=n(nl,"LI",{});var I$e=s(Sv);T_e=n(I$e,"STRONG",{});var y_t=s(T_e);aKo=r(y_t,"wavlm"),y_t.forEach(t),nKo=r(I$e," \u2014 "),jX=n(I$e,"A",{href:!0});var L_t=s(jX);sKo=r(L_t,"WavLMForAudioFrameClassification"),L_t.forEach(t),lKo=r(I$e," (WavLM model)"),I$e.forEach(t),nl.forEach(t),iKo=i(pa),Rv=n(pa,"P",{});var q$e=s(Rv);dKo=r(q$e,"The model is set in evaluation mode by default using "),M_e=n(q$e,"CODE",{});var x_t=s(M_e);cKo=r(x_t,"model.eval()"),x_t.forEach(t),fKo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(q$e,"CODE",{});var $_t=s(E_e);mKo=r($_t,"model.train()"),$_t.forEach(t),q$e.forEach(t),gKo=i(pa),T(Pv.$$.fragment,pa),pa.forEach(t),al.forEach(t),zqe=i(f),bd=n(f,"H2",{class:!0});var Uje=s(bd);Bv=n(Uje,"A",{id:!0,class:!0,href:!0});var k_t=s(Bv);C_e=n(k_t,"SPAN",{});var S_t=s(C_e);T(lL.$$.fragment,S_t),S_t.forEach(t),k_t.forEach(t),hKo=i(Uje),w_e=n(Uje,"SPAN",{});var R_t=s(w_e);pKo=r(R_t,"AutoModelForCTC"),R_t.forEach(t),Uje.forEach(t),Wqe=i(f),Vo=n(f,"DIV",{class:!0});var sl=s(Vo);T(iL.$$.fragment,sl),_Ko=i(sl),vd=n(sl,"P",{});var EZ=s(vd);uKo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DX=n(EZ,"A",{href:!0});var P_t=s(DX);bKo=r(P_t,"from_pretrained()"),P_t.forEach(t),vKo=r(EZ," class method or the "),GX=n(EZ,"A",{href:!0});var B_t=s(GX);FKo=r(B_t,"from_config()"),B_t.forEach(t),TKo=r(EZ,` class
method.`),EZ.forEach(t),MKo=i(sl),dL=n(sl,"P",{});var Jje=s(dL);EKo=r(Jje,"This class cannot be instantiated directly using "),A_e=n(Jje,"CODE",{});var I_t=s(A_e);CKo=r(I_t,"__init__()"),I_t.forEach(t),wKo=r(Jje," (throws an error)."),Jje.forEach(t),AKo=i(sl),vt=n(sl,"DIV",{class:!0});var H0=s(vt);T(cL.$$.fragment,H0),yKo=i(H0),y_e=n(H0,"P",{});var q_t=s(y_e);LKo=r(q_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),q_t.forEach(t),xKo=i(H0),Fd=n(H0,"P",{});var CZ=s(Fd);$Ko=r(CZ,`Note:
Loading a model from its configuration file does `),L_e=n(CZ,"STRONG",{});var N_t=s(L_e);kKo=r(N_t,"not"),N_t.forEach(t),SKo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(CZ,"A",{href:!0});var j_t=s(OX);RKo=r(j_t,"from_pretrained()"),j_t.forEach(t),PKo=r(CZ," to load the model weights."),CZ.forEach(t),BKo=i(H0),T(Iv.$$.fragment,H0),H0.forEach(t),IKo=i(sl),mo=n(sl,"DIV",{class:!0});var _a=s(mo);T(fL.$$.fragment,_a),qKo=i(_a),x_e=n(_a,"P",{});var D_t=s(x_e);NKo=r(D_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),D_t.forEach(t),jKo=i(_a),Va=n(_a,"P",{});var U0=s(Va);DKo=r(U0,"The model class to instantiate is selected based on the "),$_e=n(U0,"CODE",{});var G_t=s($_e);GKo=r(G_t,"model_type"),G_t.forEach(t),OKo=r(U0,` property of the config object (either
passed as an argument or loaded from `),k_e=n(U0,"CODE",{});var O_t=s(k_e);VKo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),XKo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(U0,"CODE",{});var V_t=s(S_e);zKo=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),WKo=r(U0,":"),U0.forEach(t),QKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);qv=n(Ve,"LI",{});var N$e=s(qv);R_e=n(N$e,"STRONG",{});var X_t=s(R_e);HKo=r(X_t,"data2vec-audio"),X_t.forEach(t),UKo=r(N$e," \u2014 "),VX=n(N$e,"A",{href:!0});var z_t=s(VX);JKo=r(z_t,"Data2VecAudioForCTC"),z_t.forEach(t),YKo=r(N$e," (Data2VecAudio model)"),N$e.forEach(t),KKo=i(Ve),Nv=n(Ve,"LI",{});var j$e=s(Nv);P_e=n(j$e,"STRONG",{});var W_t=s(P_e);ZKo=r(W_t,"hubert"),W_t.forEach(t),eZo=r(j$e," \u2014 "),XX=n(j$e,"A",{href:!0});var Q_t=s(XX);oZo=r(Q_t,"HubertForCTC"),Q_t.forEach(t),rZo=r(j$e," (Hubert model)"),j$e.forEach(t),tZo=i(Ve),jv=n(Ve,"LI",{});var D$e=s(jv);B_e=n(D$e,"STRONG",{});var H_t=s(B_e);aZo=r(H_t,"sew"),H_t.forEach(t),nZo=r(D$e," \u2014 "),zX=n(D$e,"A",{href:!0});var U_t=s(zX);sZo=r(U_t,"SEWForCTC"),U_t.forEach(t),lZo=r(D$e," (SEW model)"),D$e.forEach(t),iZo=i(Ve),Dv=n(Ve,"LI",{});var G$e=s(Dv);I_e=n(G$e,"STRONG",{});var J_t=s(I_e);dZo=r(J_t,"sew-d"),J_t.forEach(t),cZo=r(G$e," \u2014 "),WX=n(G$e,"A",{href:!0});var Y_t=s(WX);fZo=r(Y_t,"SEWDForCTC"),Y_t.forEach(t),mZo=r(G$e," (SEW-D model)"),G$e.forEach(t),gZo=i(Ve),Gv=n(Ve,"LI",{});var O$e=s(Gv);q_e=n(O$e,"STRONG",{});var K_t=s(q_e);hZo=r(K_t,"unispeech"),K_t.forEach(t),pZo=r(O$e," \u2014 "),QX=n(O$e,"A",{href:!0});var Z_t=s(QX);_Zo=r(Z_t,"UniSpeechForCTC"),Z_t.forEach(t),uZo=r(O$e," (UniSpeech model)"),O$e.forEach(t),bZo=i(Ve),Ov=n(Ve,"LI",{});var V$e=s(Ov);N_e=n(V$e,"STRONG",{});var eut=s(N_e);vZo=r(eut,"unispeech-sat"),eut.forEach(t),FZo=r(V$e," \u2014 "),HX=n(V$e,"A",{href:!0});var out=s(HX);TZo=r(out,"UniSpeechSatForCTC"),out.forEach(t),MZo=r(V$e," (UniSpeechSat model)"),V$e.forEach(t),EZo=i(Ve),Vv=n(Ve,"LI",{});var X$e=s(Vv);j_e=n(X$e,"STRONG",{});var rut=s(j_e);CZo=r(rut,"wav2vec2"),rut.forEach(t),wZo=r(X$e," \u2014 "),UX=n(X$e,"A",{href:!0});var tut=s(UX);AZo=r(tut,"Wav2Vec2ForCTC"),tut.forEach(t),yZo=r(X$e," (Wav2Vec2 model)"),X$e.forEach(t),LZo=i(Ve),Xv=n(Ve,"LI",{});var z$e=s(Xv);D_e=n(z$e,"STRONG",{});var aut=s(D_e);xZo=r(aut,"wav2vec2-conformer"),aut.forEach(t),$Zo=r(z$e," \u2014 "),JX=n(z$e,"A",{href:!0});var nut=s(JX);kZo=r(nut,"Wav2Vec2ConformerForCTC"),nut.forEach(t),SZo=r(z$e," (Wav2Vec2-Conformer model)"),z$e.forEach(t),RZo=i(Ve),zv=n(Ve,"LI",{});var W$e=s(zv);G_e=n(W$e,"STRONG",{});var sut=s(G_e);PZo=r(sut,"wavlm"),sut.forEach(t),BZo=r(W$e," \u2014 "),YX=n(W$e,"A",{href:!0});var lut=s(YX);IZo=r(lut,"WavLMForCTC"),lut.forEach(t),qZo=r(W$e," (WavLM model)"),W$e.forEach(t),Ve.forEach(t),NZo=i(_a),Wv=n(_a,"P",{});var Q$e=s(Wv);jZo=r(Q$e,"The model is set in evaluation mode by default using "),O_e=n(Q$e,"CODE",{});var iut=s(O_e);DZo=r(iut,"model.eval()"),iut.forEach(t),GZo=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=n(Q$e,"CODE",{});var dut=s(V_e);OZo=r(dut,"model.train()"),dut.forEach(t),Q$e.forEach(t),VZo=i(_a),T(Qv.$$.fragment,_a),_a.forEach(t),sl.forEach(t),Qqe=i(f),Td=n(f,"H2",{class:!0});var Yje=s(Td);Hv=n(Yje,"A",{id:!0,class:!0,href:!0});var cut=s(Hv);X_e=n(cut,"SPAN",{});var fut=s(X_e);T(mL.$$.fragment,fut),fut.forEach(t),cut.forEach(t),XZo=i(Yje),z_e=n(Yje,"SPAN",{});var mut=s(z_e);zZo=r(mut,"AutoModelForSpeechSeq2Seq"),mut.forEach(t),Yje.forEach(t),Hqe=i(f),Xo=n(f,"DIV",{class:!0});var ll=s(Xo);T(gL.$$.fragment,ll),WZo=i(ll),Md=n(ll,"P",{});var wZ=s(Md);QZo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KX=n(wZ,"A",{href:!0});var gut=s(KX);HZo=r(gut,"from_pretrained()"),gut.forEach(t),UZo=r(wZ," class method or the "),ZX=n(wZ,"A",{href:!0});var hut=s(ZX);JZo=r(hut,"from_config()"),hut.forEach(t),YZo=r(wZ,` class
method.`),wZ.forEach(t),KZo=i(ll),hL=n(ll,"P",{});var Kje=s(hL);ZZo=r(Kje,"This class cannot be instantiated directly using "),W_e=n(Kje,"CODE",{});var put=s(W_e);eer=r(put,"__init__()"),put.forEach(t),oer=r(Kje," (throws an error)."),Kje.forEach(t),rer=i(ll),Ft=n(ll,"DIV",{class:!0});var J0=s(Ft);T(pL.$$.fragment,J0),ter=i(J0),Q_e=n(J0,"P",{});var _ut=s(Q_e);aer=r(_ut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_ut.forEach(t),ner=i(J0),Ed=n(J0,"P",{});var AZ=s(Ed);ser=r(AZ,`Note:
Loading a model from its configuration file does `),H_e=n(AZ,"STRONG",{});var uut=s(H_e);ler=r(uut,"not"),uut.forEach(t),ier=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(AZ,"A",{href:!0});var but=s(ez);der=r(but,"from_pretrained()"),but.forEach(t),cer=r(AZ," to load the model weights."),AZ.forEach(t),fer=i(J0),T(Uv.$$.fragment,J0),J0.forEach(t),mer=i(ll),go=n(ll,"DIV",{class:!0});var ua=s(go);T(_L.$$.fragment,ua),ger=i(ua),U_e=n(ua,"P",{});var vut=s(U_e);her=r(vut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vut.forEach(t),per=i(ua),Xa=n(ua,"P",{});var Y0=s(Xa);_er=r(Y0,"The model class to instantiate is selected based on the "),J_e=n(Y0,"CODE",{});var Fut=s(J_e);uer=r(Fut,"model_type"),Fut.forEach(t),ber=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(Y0,"CODE",{});var Tut=s(Y_e);ver=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Fer=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(Y0,"CODE",{});var Mut=s(K_e);Ter=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),Mer=r(Y0,":"),Y0.forEach(t),Eer=i(ua),uL=n(ua,"UL",{});var Zje=s(uL);Jv=n(Zje,"LI",{});var H$e=s(Jv);Z_e=n(H$e,"STRONG",{});var Eut=s(Z_e);Cer=r(Eut,"speech-encoder-decoder"),Eut.forEach(t),wer=r(H$e," \u2014 "),oz=n(H$e,"A",{href:!0});var Cut=s(oz);Aer=r(Cut,"SpeechEncoderDecoderModel"),Cut.forEach(t),yer=r(H$e," (Speech Encoder decoder model)"),H$e.forEach(t),Ler=i(Zje),Yv=n(Zje,"LI",{});var U$e=s(Yv);eue=n(U$e,"STRONG",{});var wut=s(eue);xer=r(wut,"speech_to_text"),wut.forEach(t),$er=r(U$e," \u2014 "),rz=n(U$e,"A",{href:!0});var Aut=s(rz);ker=r(Aut,"Speech2TextForConditionalGeneration"),Aut.forEach(t),Ser=r(U$e," (Speech2Text model)"),U$e.forEach(t),Zje.forEach(t),Rer=i(ua),Kv=n(ua,"P",{});var J$e=s(Kv);Per=r(J$e,"The model is set in evaluation mode by default using "),oue=n(J$e,"CODE",{});var yut=s(oue);Ber=r(yut,"model.eval()"),yut.forEach(t),Ier=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(J$e,"CODE",{});var Lut=s(rue);qer=r(Lut,"model.train()"),Lut.forEach(t),J$e.forEach(t),Ner=i(ua),T(Zv.$$.fragment,ua),ua.forEach(t),ll.forEach(t),Uqe=i(f),Cd=n(f,"H2",{class:!0});var eDe=s(Cd);eF=n(eDe,"A",{id:!0,class:!0,href:!0});var xut=s(eF);tue=n(xut,"SPAN",{});var $ut=s(tue);T(bL.$$.fragment,$ut),$ut.forEach(t),xut.forEach(t),jer=i(eDe),aue=n(eDe,"SPAN",{});var kut=s(aue);Der=r(kut,"AutoModelForAudioXVector"),kut.forEach(t),eDe.forEach(t),Jqe=i(f),zo=n(f,"DIV",{class:!0});var il=s(zo);T(vL.$$.fragment,il),Ger=i(il),wd=n(il,"P",{});var yZ=s(wd);Oer=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),tz=n(yZ,"A",{href:!0});var Sut=s(tz);Ver=r(Sut,"from_pretrained()"),Sut.forEach(t),Xer=r(yZ," class method or the "),az=n(yZ,"A",{href:!0});var Rut=s(az);zer=r(Rut,"from_config()"),Rut.forEach(t),Wer=r(yZ,` class
method.`),yZ.forEach(t),Qer=i(il),FL=n(il,"P",{});var oDe=s(FL);Her=r(oDe,"This class cannot be instantiated directly using "),nue=n(oDe,"CODE",{});var Put=s(nue);Uer=r(Put,"__init__()"),Put.forEach(t),Jer=r(oDe," (throws an error)."),oDe.forEach(t),Yer=i(il),Tt=n(il,"DIV",{class:!0});var K0=s(Tt);T(TL.$$.fragment,K0),Ker=i(K0),sue=n(K0,"P",{});var But=s(sue);Zer=r(But,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),But.forEach(t),eor=i(K0),Ad=n(K0,"P",{});var LZ=s(Ad);oor=r(LZ,`Note:
Loading a model from its configuration file does `),lue=n(LZ,"STRONG",{});var Iut=s(lue);ror=r(Iut,"not"),Iut.forEach(t),tor=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(LZ,"A",{href:!0});var qut=s(nz);aor=r(qut,"from_pretrained()"),qut.forEach(t),nor=r(LZ," to load the model weights."),LZ.forEach(t),sor=i(K0),T(oF.$$.fragment,K0),K0.forEach(t),lor=i(il),ho=n(il,"DIV",{class:!0});var ba=s(ho);T(ML.$$.fragment,ba),ior=i(ba),iue=n(ba,"P",{});var Nut=s(iue);dor=r(Nut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Nut.forEach(t),cor=i(ba),za=n(ba,"P",{});var Z0=s(za);mor=r(Z0,"The model class to instantiate is selected based on the "),due=n(Z0,"CODE",{});var jut=s(due);gor=r(jut,"model_type"),jut.forEach(t),hor=r(Z0,` property of the config object (either
passed as an argument or loaded from `),cue=n(Z0,"CODE",{});var Dut=s(cue);por=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),_or=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(Z0,"CODE",{});var Gut=s(fue);uor=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),bor=r(Z0,":"),Z0.forEach(t),vor=i(ba),Zr=n(ba,"UL",{});var dl=s(Zr);rF=n(dl,"LI",{});var Y$e=s(rF);mue=n(Y$e,"STRONG",{});var Out=s(mue);For=r(Out,"data2vec-audio"),Out.forEach(t),Tor=r(Y$e," \u2014 "),sz=n(Y$e,"A",{href:!0});var Vut=s(sz);Mor=r(Vut,"Data2VecAudioForXVector"),Vut.forEach(t),Eor=r(Y$e," (Data2VecAudio model)"),Y$e.forEach(t),Cor=i(dl),tF=n(dl,"LI",{});var K$e=s(tF);gue=n(K$e,"STRONG",{});var Xut=s(gue);wor=r(Xut,"unispeech-sat"),Xut.forEach(t),Aor=r(K$e," \u2014 "),lz=n(K$e,"A",{href:!0});var zut=s(lz);yor=r(zut,"UniSpeechSatForXVector"),zut.forEach(t),Lor=r(K$e," (UniSpeechSat model)"),K$e.forEach(t),xor=i(dl),aF=n(dl,"LI",{});var Z$e=s(aF);hue=n(Z$e,"STRONG",{});var Wut=s(hue);$or=r(Wut,"wav2vec2"),Wut.forEach(t),kor=r(Z$e," \u2014 "),iz=n(Z$e,"A",{href:!0});var Qut=s(iz);Sor=r(Qut,"Wav2Vec2ForXVector"),Qut.forEach(t),Ror=r(Z$e," (Wav2Vec2 model)"),Z$e.forEach(t),Por=i(dl),nF=n(dl,"LI",{});var eke=s(nF);pue=n(eke,"STRONG",{});var Hut=s(pue);Bor=r(Hut,"wav2vec2-conformer"),Hut.forEach(t),Ior=r(eke," \u2014 "),dz=n(eke,"A",{href:!0});var Uut=s(dz);qor=r(Uut,"Wav2Vec2ConformerForXVector"),Uut.forEach(t),Nor=r(eke," (Wav2Vec2-Conformer model)"),eke.forEach(t),jor=i(dl),sF=n(dl,"LI",{});var oke=s(sF);_ue=n(oke,"STRONG",{});var Jut=s(_ue);Dor=r(Jut,"wavlm"),Jut.forEach(t),Gor=r(oke," \u2014 "),cz=n(oke,"A",{href:!0});var Yut=s(cz);Oor=r(Yut,"WavLMForXVector"),Yut.forEach(t),Vor=r(oke," (WavLM model)"),oke.forEach(t),dl.forEach(t),Xor=i(ba),lF=n(ba,"P",{});var rke=s(lF);zor=r(rke,"The model is set in evaluation mode by default using "),uue=n(rke,"CODE",{});var Kut=s(uue);Wor=r(Kut,"model.eval()"),Kut.forEach(t),Qor=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(rke,"CODE",{});var Zut=s(bue);Hor=r(Zut,"model.train()"),Zut.forEach(t),rke.forEach(t),Uor=i(ba),T(iF.$$.fragment,ba),ba.forEach(t),il.forEach(t),Yqe=i(f),yd=n(f,"H2",{class:!0});var rDe=s(yd);dF=n(rDe,"A",{id:!0,class:!0,href:!0});var e2t=s(dF);vue=n(e2t,"SPAN",{});var o2t=s(vue);T(EL.$$.fragment,o2t),o2t.forEach(t),e2t.forEach(t),Jor=i(rDe),Fue=n(rDe,"SPAN",{});var r2t=s(Fue);Yor=r(r2t,"AutoModelForMaskedImageModeling"),r2t.forEach(t),rDe.forEach(t),Kqe=i(f),Wo=n(f,"DIV",{class:!0});var cl=s(Wo);T(CL.$$.fragment,cl),Kor=i(cl),Ld=n(cl,"P",{});var xZ=s(Ld);Zor=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fz=n(xZ,"A",{href:!0});var t2t=s(fz);err=r(t2t,"from_pretrained()"),t2t.forEach(t),orr=r(xZ," class method or the "),mz=n(xZ,"A",{href:!0});var a2t=s(mz);rrr=r(a2t,"from_config()"),a2t.forEach(t),trr=r(xZ,` class
method.`),xZ.forEach(t),arr=i(cl),wL=n(cl,"P",{});var tDe=s(wL);nrr=r(tDe,"This class cannot be instantiated directly using "),Tue=n(tDe,"CODE",{});var n2t=s(Tue);srr=r(n2t,"__init__()"),n2t.forEach(t),lrr=r(tDe," (throws an error)."),tDe.forEach(t),irr=i(cl),Mt=n(cl,"DIV",{class:!0});var eA=s(Mt);T(AL.$$.fragment,eA),drr=i(eA),Mue=n(eA,"P",{});var s2t=s(Mue);crr=r(s2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),s2t.forEach(t),frr=i(eA),xd=n(eA,"P",{});var $Z=s(xd);mrr=r($Z,`Note:
Loading a model from its configuration file does `),Eue=n($Z,"STRONG",{});var l2t=s(Eue);grr=r(l2t,"not"),l2t.forEach(t),hrr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n($Z,"A",{href:!0});var i2t=s(gz);prr=r(i2t,"from_pretrained()"),i2t.forEach(t),_rr=r($Z," to load the model weights."),$Z.forEach(t),urr=i(eA),T(cF.$$.fragment,eA),eA.forEach(t),brr=i(cl),po=n(cl,"DIV",{class:!0});var va=s(po);T(yL.$$.fragment,va),vrr=i(va),Cue=n(va,"P",{});var d2t=s(Cue);Frr=r(d2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),d2t.forEach(t),Trr=i(va),Wa=n(va,"P",{});var oA=s(Wa);Mrr=r(oA,"The model class to instantiate is selected based on the "),wue=n(oA,"CODE",{});var c2t=s(wue);Err=r(c2t,"model_type"),c2t.forEach(t),Crr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Aue=n(oA,"CODE",{});var f2t=s(Aue);wrr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),Arr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(oA,"CODE",{});var m2t=s(yue);yrr=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Lrr=r(oA,":"),oA.forEach(t),xrr=i(va),$d=n(va,"UL",{});var kZ=s($d);fF=n(kZ,"LI",{});var tke=s(fF);Lue=n(tke,"STRONG",{});var g2t=s(Lue);$rr=r(g2t,"deit"),g2t.forEach(t),krr=r(tke," \u2014 "),hz=n(tke,"A",{href:!0});var h2t=s(hz);Srr=r(h2t,"DeiTForMaskedImageModeling"),h2t.forEach(t),Rrr=r(tke," (DeiT model)"),tke.forEach(t),Prr=i(kZ),mF=n(kZ,"LI",{});var ake=s(mF);xue=n(ake,"STRONG",{});var p2t=s(xue);Brr=r(p2t,"swin"),p2t.forEach(t),Irr=r(ake," \u2014 "),pz=n(ake,"A",{href:!0});var _2t=s(pz);qrr=r(_2t,"SwinForMaskedImageModeling"),_2t.forEach(t),Nrr=r(ake," (Swin model)"),ake.forEach(t),jrr=i(kZ),gF=n(kZ,"LI",{});var nke=s(gF);$ue=n(nke,"STRONG",{});var u2t=s($ue);Drr=r(u2t,"vit"),u2t.forEach(t),Grr=r(nke," \u2014 "),_z=n(nke,"A",{href:!0});var b2t=s(_z);Orr=r(b2t,"ViTForMaskedImageModeling"),b2t.forEach(t),Vrr=r(nke," (ViT model)"),nke.forEach(t),kZ.forEach(t),Xrr=i(va),hF=n(va,"P",{});var ske=s(hF);zrr=r(ske,"The model is set in evaluation mode by default using "),kue=n(ske,"CODE",{});var v2t=s(kue);Wrr=r(v2t,"model.eval()"),v2t.forEach(t),Qrr=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(ske,"CODE",{});var F2t=s(Sue);Hrr=r(F2t,"model.train()"),F2t.forEach(t),ske.forEach(t),Urr=i(va),T(pF.$$.fragment,va),va.forEach(t),cl.forEach(t),Zqe=i(f),kd=n(f,"H2",{class:!0});var aDe=s(kd);_F=n(aDe,"A",{id:!0,class:!0,href:!0});var T2t=s(_F);Rue=n(T2t,"SPAN",{});var M2t=s(Rue);T(LL.$$.fragment,M2t),M2t.forEach(t),T2t.forEach(t),Jrr=i(aDe),Pue=n(aDe,"SPAN",{});var E2t=s(Pue);Yrr=r(E2t,"AutoModelForObjectDetection"),E2t.forEach(t),aDe.forEach(t),eNe=i(f),Qo=n(f,"DIV",{class:!0});var fl=s(Qo);T(xL.$$.fragment,fl),Krr=i(fl),Sd=n(fl,"P",{});var SZ=s(Sd);Zrr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),uz=n(SZ,"A",{href:!0});var C2t=s(uz);etr=r(C2t,"from_pretrained()"),C2t.forEach(t),otr=r(SZ," class method or the "),bz=n(SZ,"A",{href:!0});var w2t=s(bz);rtr=r(w2t,"from_config()"),w2t.forEach(t),ttr=r(SZ,` class
method.`),SZ.forEach(t),atr=i(fl),$L=n(fl,"P",{});var nDe=s($L);ntr=r(nDe,"This class cannot be instantiated directly using "),Bue=n(nDe,"CODE",{});var A2t=s(Bue);str=r(A2t,"__init__()"),A2t.forEach(t),ltr=r(nDe," (throws an error)."),nDe.forEach(t),itr=i(fl),Et=n(fl,"DIV",{class:!0});var rA=s(Et);T(kL.$$.fragment,rA),dtr=i(rA),Iue=n(rA,"P",{});var y2t=s(Iue);ctr=r(y2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),y2t.forEach(t),ftr=i(rA),Rd=n(rA,"P",{});var RZ=s(Rd);mtr=r(RZ,`Note:
Loading a model from its configuration file does `),que=n(RZ,"STRONG",{});var L2t=s(que);gtr=r(L2t,"not"),L2t.forEach(t),htr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(RZ,"A",{href:!0});var x2t=s(vz);ptr=r(x2t,"from_pretrained()"),x2t.forEach(t),_tr=r(RZ," to load the model weights."),RZ.forEach(t),utr=i(rA),T(uF.$$.fragment,rA),rA.forEach(t),btr=i(fl),_o=n(fl,"DIV",{class:!0});var Fa=s(_o);T(SL.$$.fragment,Fa),vtr=i(Fa),Nue=n(Fa,"P",{});var $2t=s(Nue);Ftr=r($2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$2t.forEach(t),Ttr=i(Fa),Qa=n(Fa,"P",{});var tA=s(Qa);Mtr=r(tA,"The model class to instantiate is selected based on the "),jue=n(tA,"CODE",{});var k2t=s(jue);Etr=r(k2t,"model_type"),k2t.forEach(t),Ctr=r(tA,` property of the config object (either
passed as an argument or loaded from `),Due=n(tA,"CODE",{});var S2t=s(Due);wtr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Atr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(tA,"CODE",{});var R2t=s(Gue);ytr=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),Ltr=r(tA,":"),tA.forEach(t),xtr=i(Fa),RL=n(Fa,"UL",{});var sDe=s(RL);bF=n(sDe,"LI",{});var lke=s(bF);Oue=n(lke,"STRONG",{});var P2t=s(Oue);$tr=r(P2t,"detr"),P2t.forEach(t),ktr=r(lke," \u2014 "),Fz=n(lke,"A",{href:!0});var B2t=s(Fz);Str=r(B2t,"DetrForObjectDetection"),B2t.forEach(t),Rtr=r(lke," (DETR model)"),lke.forEach(t),Ptr=i(sDe),vF=n(sDe,"LI",{});var ike=s(vF);Vue=n(ike,"STRONG",{});var I2t=s(Vue);Btr=r(I2t,"yolos"),I2t.forEach(t),Itr=r(ike," \u2014 "),Tz=n(ike,"A",{href:!0});var q2t=s(Tz);qtr=r(q2t,"YolosForObjectDetection"),q2t.forEach(t),Ntr=r(ike," (YOLOS model)"),ike.forEach(t),sDe.forEach(t),jtr=i(Fa),FF=n(Fa,"P",{});var dke=s(FF);Dtr=r(dke,"The model is set in evaluation mode by default using "),Xue=n(dke,"CODE",{});var N2t=s(Xue);Gtr=r(N2t,"model.eval()"),N2t.forEach(t),Otr=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(dke,"CODE",{});var j2t=s(zue);Vtr=r(j2t,"model.train()"),j2t.forEach(t),dke.forEach(t),Xtr=i(Fa),T(TF.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),oNe=i(f),Pd=n(f,"H2",{class:!0});var lDe=s(Pd);MF=n(lDe,"A",{id:!0,class:!0,href:!0});var D2t=s(MF);Wue=n(D2t,"SPAN",{});var G2t=s(Wue);T(PL.$$.fragment,G2t),G2t.forEach(t),D2t.forEach(t),ztr=i(lDe),Que=n(lDe,"SPAN",{});var O2t=s(Que);Wtr=r(O2t,"AutoModelForImageSegmentation"),O2t.forEach(t),lDe.forEach(t),rNe=i(f),Ho=n(f,"DIV",{class:!0});var ml=s(Ho);T(BL.$$.fragment,ml),Qtr=i(ml),Bd=n(ml,"P",{});var PZ=s(Bd);Htr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Mz=n(PZ,"A",{href:!0});var V2t=s(Mz);Utr=r(V2t,"from_pretrained()"),V2t.forEach(t),Jtr=r(PZ," class method or the "),Ez=n(PZ,"A",{href:!0});var X2t=s(Ez);Ytr=r(X2t,"from_config()"),X2t.forEach(t),Ktr=r(PZ,` class
method.`),PZ.forEach(t),Ztr=i(ml),IL=n(ml,"P",{});var iDe=s(IL);ear=r(iDe,"This class cannot be instantiated directly using "),Hue=n(iDe,"CODE",{});var z2t=s(Hue);oar=r(z2t,"__init__()"),z2t.forEach(t),rar=r(iDe," (throws an error)."),iDe.forEach(t),tar=i(ml),Ct=n(ml,"DIV",{class:!0});var aA=s(Ct);T(qL.$$.fragment,aA),aar=i(aA),Uue=n(aA,"P",{});var W2t=s(Uue);nar=r(W2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),W2t.forEach(t),sar=i(aA),Id=n(aA,"P",{});var BZ=s(Id);lar=r(BZ,`Note:
Loading a model from its configuration file does `),Jue=n(BZ,"STRONG",{});var Q2t=s(Jue);iar=r(Q2t,"not"),Q2t.forEach(t),dar=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(BZ,"A",{href:!0});var H2t=s(Cz);car=r(H2t,"from_pretrained()"),H2t.forEach(t),far=r(BZ," to load the model weights."),BZ.forEach(t),mar=i(aA),T(EF.$$.fragment,aA),aA.forEach(t),gar=i(ml),uo=n(ml,"DIV",{class:!0});var Ta=s(uo);T(NL.$$.fragment,Ta),har=i(Ta),Yue=n(Ta,"P",{});var U2t=s(Yue);par=r(U2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),U2t.forEach(t),_ar=i(Ta),Ha=n(Ta,"P",{});var nA=s(Ha);uar=r(nA,"The model class to instantiate is selected based on the "),Kue=n(nA,"CODE",{});var J2t=s(Kue);bar=r(J2t,"model_type"),J2t.forEach(t),Far=r(nA,` property of the config object (either
passed as an argument or loaded from `),Zue=n(nA,"CODE",{});var Y2t=s(Zue);Tar=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),Mar=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(nA,"CODE",{});var K2t=s(e2e);Ear=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),Car=r(nA,":"),nA.forEach(t),war=i(Ta),o2e=n(Ta,"UL",{});var Z2t=s(o2e);CF=n(Z2t,"LI",{});var cke=s(CF);r2e=n(cke,"STRONG",{});var e1t=s(r2e);Aar=r(e1t,"detr"),e1t.forEach(t),yar=r(cke," \u2014 "),wz=n(cke,"A",{href:!0});var o1t=s(wz);Lar=r(o1t,"DetrForSegmentation"),o1t.forEach(t),xar=r(cke," (DETR model)"),cke.forEach(t),Z2t.forEach(t),$ar=i(Ta),wF=n(Ta,"P",{});var fke=s(wF);kar=r(fke,"The model is set in evaluation mode by default using "),t2e=n(fke,"CODE",{});var r1t=s(t2e);Sar=r(r1t,"model.eval()"),r1t.forEach(t),Rar=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(fke,"CODE",{});var t1t=s(a2e);Par=r(t1t,"model.train()"),t1t.forEach(t),fke.forEach(t),Bar=i(Ta),T(AF.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),tNe=i(f),qd=n(f,"H2",{class:!0});var dDe=s(qd);yF=n(dDe,"A",{id:!0,class:!0,href:!0});var a1t=s(yF);n2e=n(a1t,"SPAN",{});var n1t=s(n2e);T(jL.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),Iar=i(dDe),s2e=n(dDe,"SPAN",{});var s1t=s(s2e);qar=r(s1t,"AutoModelForSemanticSegmentation"),s1t.forEach(t),dDe.forEach(t),aNe=i(f),Uo=n(f,"DIV",{class:!0});var gl=s(Uo);T(DL.$$.fragment,gl),Nar=i(gl),Nd=n(gl,"P",{});var IZ=s(Nd);jar=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Az=n(IZ,"A",{href:!0});var l1t=s(Az);Dar=r(l1t,"from_pretrained()"),l1t.forEach(t),Gar=r(IZ," class method or the "),yz=n(IZ,"A",{href:!0});var i1t=s(yz);Oar=r(i1t,"from_config()"),i1t.forEach(t),Var=r(IZ,` class
method.`),IZ.forEach(t),Xar=i(gl),GL=n(gl,"P",{});var cDe=s(GL);zar=r(cDe,"This class cannot be instantiated directly using "),l2e=n(cDe,"CODE",{});var d1t=s(l2e);War=r(d1t,"__init__()"),d1t.forEach(t),Qar=r(cDe," (throws an error)."),cDe.forEach(t),Har=i(gl),wt=n(gl,"DIV",{class:!0});var sA=s(wt);T(OL.$$.fragment,sA),Uar=i(sA),i2e=n(sA,"P",{});var c1t=s(i2e);Jar=r(c1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),c1t.forEach(t),Yar=i(sA),jd=n(sA,"P",{});var qZ=s(jd);Kar=r(qZ,`Note:
Loading a model from its configuration file does `),d2e=n(qZ,"STRONG",{});var f1t=s(d2e);Zar=r(f1t,"not"),f1t.forEach(t),enr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(qZ,"A",{href:!0});var m1t=s(Lz);onr=r(m1t,"from_pretrained()"),m1t.forEach(t),rnr=r(qZ," to load the model weights."),qZ.forEach(t),tnr=i(sA),T(LF.$$.fragment,sA),sA.forEach(t),anr=i(gl),bo=n(gl,"DIV",{class:!0});var Ma=s(bo);T(VL.$$.fragment,Ma),nnr=i(Ma),c2e=n(Ma,"P",{});var g1t=s(c2e);snr=r(g1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),g1t.forEach(t),lnr=i(Ma),Ua=n(Ma,"P",{});var lA=s(Ua);inr=r(lA,"The model class to instantiate is selected based on the "),f2e=n(lA,"CODE",{});var h1t=s(f2e);dnr=r(h1t,"model_type"),h1t.forEach(t),cnr=r(lA,` property of the config object (either
passed as an argument or loaded from `),m2e=n(lA,"CODE",{});var p1t=s(m2e);fnr=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),mnr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(lA,"CODE",{});var _1t=s(g2e);gnr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),hnr=r(lA,":"),lA.forEach(t),pnr=i(Ma),Ja=n(Ma,"UL",{});var iA=s(Ja);xF=n(iA,"LI",{});var mke=s(xF);h2e=n(mke,"STRONG",{});var u1t=s(h2e);_nr=r(u1t,"beit"),u1t.forEach(t),unr=r(mke," \u2014 "),xz=n(mke,"A",{href:!0});var b1t=s(xz);bnr=r(b1t,"BeitForSemanticSegmentation"),b1t.forEach(t),vnr=r(mke," (BEiT model)"),mke.forEach(t),Fnr=i(iA),$F=n(iA,"LI",{});var gke=s($F);p2e=n(gke,"STRONG",{});var v1t=s(p2e);Tnr=r(v1t,"data2vec-vision"),v1t.forEach(t),Mnr=r(gke," \u2014 "),$z=n(gke,"A",{href:!0});var F1t=s($z);Enr=r(F1t,"Data2VecVisionForSemanticSegmentation"),F1t.forEach(t),Cnr=r(gke," (Data2VecVision model)"),gke.forEach(t),wnr=i(iA),kF=n(iA,"LI",{});var hke=s(kF);_2e=n(hke,"STRONG",{});var T1t=s(_2e);Anr=r(T1t,"dpt"),T1t.forEach(t),ynr=r(hke," \u2014 "),kz=n(hke,"A",{href:!0});var M1t=s(kz);Lnr=r(M1t,"DPTForSemanticSegmentation"),M1t.forEach(t),xnr=r(hke," (DPT model)"),hke.forEach(t),$nr=i(iA),SF=n(iA,"LI",{});var pke=s(SF);u2e=n(pke,"STRONG",{});var E1t=s(u2e);knr=r(E1t,"segformer"),E1t.forEach(t),Snr=r(pke," \u2014 "),Sz=n(pke,"A",{href:!0});var C1t=s(Sz);Rnr=r(C1t,"SegformerForSemanticSegmentation"),C1t.forEach(t),Pnr=r(pke," (SegFormer model)"),pke.forEach(t),iA.forEach(t),Bnr=i(Ma),RF=n(Ma,"P",{});var _ke=s(RF);Inr=r(_ke,"The model is set in evaluation mode by default using "),b2e=n(_ke,"CODE",{});var w1t=s(b2e);qnr=r(w1t,"model.eval()"),w1t.forEach(t),Nnr=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(_ke,"CODE",{});var A1t=s(v2e);jnr=r(A1t,"model.train()"),A1t.forEach(t),_ke.forEach(t),Dnr=i(Ma),T(PF.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),nNe=i(f),Dd=n(f,"H2",{class:!0});var fDe=s(Dd);BF=n(fDe,"A",{id:!0,class:!0,href:!0});var y1t=s(BF);F2e=n(y1t,"SPAN",{});var L1t=s(F2e);T(XL.$$.fragment,L1t),L1t.forEach(t),y1t.forEach(t),Gnr=i(fDe),T2e=n(fDe,"SPAN",{});var x1t=s(T2e);Onr=r(x1t,"AutoModelForInstanceSegmentation"),x1t.forEach(t),fDe.forEach(t),sNe=i(f),Jo=n(f,"DIV",{class:!0});var hl=s(Jo);T(zL.$$.fragment,hl),Vnr=i(hl),Gd=n(hl,"P",{});var NZ=s(Gd);Xnr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Rz=n(NZ,"A",{href:!0});var $1t=s(Rz);znr=r($1t,"from_pretrained()"),$1t.forEach(t),Wnr=r(NZ," class method or the "),Pz=n(NZ,"A",{href:!0});var k1t=s(Pz);Qnr=r(k1t,"from_config()"),k1t.forEach(t),Hnr=r(NZ,` class
method.`),NZ.forEach(t),Unr=i(hl),WL=n(hl,"P",{});var mDe=s(WL);Jnr=r(mDe,"This class cannot be instantiated directly using "),M2e=n(mDe,"CODE",{});var S1t=s(M2e);Ynr=r(S1t,"__init__()"),S1t.forEach(t),Knr=r(mDe," (throws an error)."),mDe.forEach(t),Znr=i(hl),At=n(hl,"DIV",{class:!0});var dA=s(At);T(QL.$$.fragment,dA),esr=i(dA),E2e=n(dA,"P",{});var R1t=s(E2e);osr=r(R1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),R1t.forEach(t),rsr=i(dA),Od=n(dA,"P",{});var jZ=s(Od);tsr=r(jZ,`Note:
Loading a model from its configuration file does `),C2e=n(jZ,"STRONG",{});var P1t=s(C2e);asr=r(P1t,"not"),P1t.forEach(t),nsr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(jZ,"A",{href:!0});var B1t=s(Bz);ssr=r(B1t,"from_pretrained()"),B1t.forEach(t),lsr=r(jZ," to load the model weights."),jZ.forEach(t),isr=i(dA),T(IF.$$.fragment,dA),dA.forEach(t),dsr=i(hl),vo=n(hl,"DIV",{class:!0});var Ea=s(vo);T(HL.$$.fragment,Ea),csr=i(Ea),w2e=n(Ea,"P",{});var I1t=s(w2e);fsr=r(I1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),I1t.forEach(t),msr=i(Ea),Ya=n(Ea,"P",{});var cA=s(Ya);gsr=r(cA,"The model class to instantiate is selected based on the "),A2e=n(cA,"CODE",{});var q1t=s(A2e);hsr=r(q1t,"model_type"),q1t.forEach(t),psr=r(cA,` property of the config object (either
passed as an argument or loaded from `),y2e=n(cA,"CODE",{});var N1t=s(y2e);_sr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),usr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(cA,"CODE",{});var j1t=s(L2e);bsr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),vsr=r(cA,":"),cA.forEach(t),Fsr=i(Ea),x2e=n(Ea,"UL",{});var D1t=s(x2e);qF=n(D1t,"LI",{});var uke=s(qF);$2e=n(uke,"STRONG",{});var G1t=s($2e);Tsr=r(G1t,"maskformer"),G1t.forEach(t),Msr=r(uke," \u2014 "),Iz=n(uke,"A",{href:!0});var O1t=s(Iz);Esr=r(O1t,"MaskFormerForInstanceSegmentation"),O1t.forEach(t),Csr=r(uke," (MaskFormer model)"),uke.forEach(t),D1t.forEach(t),wsr=i(Ea),NF=n(Ea,"P",{});var bke=s(NF);Asr=r(bke,"The model is set in evaluation mode by default using "),k2e=n(bke,"CODE",{});var V1t=s(k2e);ysr=r(V1t,"model.eval()"),V1t.forEach(t),Lsr=r(bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(bke,"CODE",{});var X1t=s(S2e);xsr=r(X1t,"model.train()"),X1t.forEach(t),bke.forEach(t),$sr=i(Ea),T(jF.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),lNe=i(f),Vd=n(f,"H2",{class:!0});var gDe=s(Vd);DF=n(gDe,"A",{id:!0,class:!0,href:!0});var z1t=s(DF);R2e=n(z1t,"SPAN",{});var W1t=s(R2e);T(UL.$$.fragment,W1t),W1t.forEach(t),z1t.forEach(t),ksr=i(gDe),P2e=n(gDe,"SPAN",{});var Q1t=s(P2e);Ssr=r(Q1t,"TFAutoModel"),Q1t.forEach(t),gDe.forEach(t),iNe=i(f),Yo=n(f,"DIV",{class:!0});var pl=s(Yo);T(JL.$$.fragment,pl),Rsr=i(pl),Xd=n(pl,"P",{});var DZ=s(Xd);Psr=r(DZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qz=n(DZ,"A",{href:!0});var H1t=s(qz);Bsr=r(H1t,"from_pretrained()"),H1t.forEach(t),Isr=r(DZ," class method or the "),Nz=n(DZ,"A",{href:!0});var U1t=s(Nz);qsr=r(U1t,"from_config()"),U1t.forEach(t),Nsr=r(DZ,` class
method.`),DZ.forEach(t),jsr=i(pl),YL=n(pl,"P",{});var hDe=s(YL);Dsr=r(hDe,"This class cannot be instantiated directly using "),B2e=n(hDe,"CODE",{});var J1t=s(B2e);Gsr=r(J1t,"__init__()"),J1t.forEach(t),Osr=r(hDe," (throws an error)."),hDe.forEach(t),Vsr=i(pl),yt=n(pl,"DIV",{class:!0});var fA=s(yt);T(KL.$$.fragment,fA),Xsr=i(fA),I2e=n(fA,"P",{});var Y1t=s(I2e);zsr=r(Y1t,"Instantiates one of the base model classes of the library from a configuration."),Y1t.forEach(t),Wsr=i(fA),zd=n(fA,"P",{});var GZ=s(zd);Qsr=r(GZ,`Note:
Loading a model from its configuration file does `),q2e=n(GZ,"STRONG",{});var K1t=s(q2e);Hsr=r(K1t,"not"),K1t.forEach(t),Usr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(GZ,"A",{href:!0});var Z1t=s(jz);Jsr=r(Z1t,"from_pretrained()"),Z1t.forEach(t),Ysr=r(GZ," to load the model weights."),GZ.forEach(t),Ksr=i(fA),T(GF.$$.fragment,fA),fA.forEach(t),Zsr=i(pl),wr=n(pl,"DIV",{class:!0});var _l=s(wr);T(ZL.$$.fragment,_l),elr=i(_l),N2e=n(_l,"P",{});var ebt=s(N2e);olr=r(ebt,"Instantiate one of the base model classes of the library from a pretrained model."),ebt.forEach(t),rlr=i(_l),Ka=n(_l,"P",{});var mA=s(Ka);tlr=r(mA,"The model class to instantiate is selected based on the "),j2e=n(mA,"CODE",{});var obt=s(j2e);alr=r(obt,"model_type"),obt.forEach(t),nlr=r(mA,` property of the config object (either
passed as an argument or loaded from `),D2e=n(mA,"CODE",{});var rbt=s(D2e);slr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),llr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(mA,"CODE",{});var tbt=s(G2e);ilr=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),dlr=r(mA,":"),mA.forEach(t),clr=i(_l),N=n(_l,"UL",{});var D=s(N);OF=n(D,"LI",{});var vke=s(OF);O2e=n(vke,"STRONG",{});var abt=s(O2e);flr=r(abt,"albert"),abt.forEach(t),mlr=r(vke," \u2014 "),Dz=n(vke,"A",{href:!0});var nbt=s(Dz);glr=r(nbt,"TFAlbertModel"),nbt.forEach(t),hlr=r(vke," (ALBERT model)"),vke.forEach(t),plr=i(D),VF=n(D,"LI",{});var Fke=s(VF);V2e=n(Fke,"STRONG",{});var sbt=s(V2e);_lr=r(sbt,"bart"),sbt.forEach(t),ulr=r(Fke," \u2014 "),Gz=n(Fke,"A",{href:!0});var lbt=s(Gz);blr=r(lbt,"TFBartModel"),lbt.forEach(t),vlr=r(Fke," (BART model)"),Fke.forEach(t),Flr=i(D),XF=n(D,"LI",{});var Tke=s(XF);X2e=n(Tke,"STRONG",{});var ibt=s(X2e);Tlr=r(ibt,"bert"),ibt.forEach(t),Mlr=r(Tke," \u2014 "),Oz=n(Tke,"A",{href:!0});var dbt=s(Oz);Elr=r(dbt,"TFBertModel"),dbt.forEach(t),Clr=r(Tke," (BERT model)"),Tke.forEach(t),wlr=i(D),zF=n(D,"LI",{});var Mke=s(zF);z2e=n(Mke,"STRONG",{});var cbt=s(z2e);Alr=r(cbt,"blenderbot"),cbt.forEach(t),ylr=r(Mke," \u2014 "),Vz=n(Mke,"A",{href:!0});var fbt=s(Vz);Llr=r(fbt,"TFBlenderbotModel"),fbt.forEach(t),xlr=r(Mke," (Blenderbot model)"),Mke.forEach(t),$lr=i(D),WF=n(D,"LI",{});var Eke=s(WF);W2e=n(Eke,"STRONG",{});var mbt=s(W2e);klr=r(mbt,"blenderbot-small"),mbt.forEach(t),Slr=r(Eke," \u2014 "),Xz=n(Eke,"A",{href:!0});var gbt=s(Xz);Rlr=r(gbt,"TFBlenderbotSmallModel"),gbt.forEach(t),Plr=r(Eke," (BlenderbotSmall model)"),Eke.forEach(t),Blr=i(D),QF=n(D,"LI",{});var Cke=s(QF);Q2e=n(Cke,"STRONG",{});var hbt=s(Q2e);Ilr=r(hbt,"camembert"),hbt.forEach(t),qlr=r(Cke," \u2014 "),zz=n(Cke,"A",{href:!0});var pbt=s(zz);Nlr=r(pbt,"TFCamembertModel"),pbt.forEach(t),jlr=r(Cke," (CamemBERT model)"),Cke.forEach(t),Dlr=i(D),HF=n(D,"LI",{});var wke=s(HF);H2e=n(wke,"STRONG",{});var _bt=s(H2e);Glr=r(_bt,"clip"),_bt.forEach(t),Olr=r(wke," \u2014 "),Wz=n(wke,"A",{href:!0});var ubt=s(Wz);Vlr=r(ubt,"TFCLIPModel"),ubt.forEach(t),Xlr=r(wke," (CLIP model)"),wke.forEach(t),zlr=i(D),UF=n(D,"LI",{});var Ake=s(UF);U2e=n(Ake,"STRONG",{});var bbt=s(U2e);Wlr=r(bbt,"convbert"),bbt.forEach(t),Qlr=r(Ake," \u2014 "),Qz=n(Ake,"A",{href:!0});var vbt=s(Qz);Hlr=r(vbt,"TFConvBertModel"),vbt.forEach(t),Ulr=r(Ake," (ConvBERT model)"),Ake.forEach(t),Jlr=i(D),JF=n(D,"LI",{});var yke=s(JF);J2e=n(yke,"STRONG",{});var Fbt=s(J2e);Ylr=r(Fbt,"convnext"),Fbt.forEach(t),Klr=r(yke," \u2014 "),Hz=n(yke,"A",{href:!0});var Tbt=s(Hz);Zlr=r(Tbt,"TFConvNextModel"),Tbt.forEach(t),eir=r(yke," (ConvNext model)"),yke.forEach(t),oir=i(D),YF=n(D,"LI",{});var Lke=s(YF);Y2e=n(Lke,"STRONG",{});var Mbt=s(Y2e);rir=r(Mbt,"ctrl"),Mbt.forEach(t),tir=r(Lke," \u2014 "),Uz=n(Lke,"A",{href:!0});var Ebt=s(Uz);air=r(Ebt,"TFCTRLModel"),Ebt.forEach(t),nir=r(Lke," (CTRL model)"),Lke.forEach(t),sir=i(D),KF=n(D,"LI",{});var xke=s(KF);K2e=n(xke,"STRONG",{});var Cbt=s(K2e);lir=r(Cbt,"data2vec-vision"),Cbt.forEach(t),iir=r(xke," \u2014 "),Jz=n(xke,"A",{href:!0});var wbt=s(Jz);dir=r(wbt,"TFData2VecVisionModel"),wbt.forEach(t),cir=r(xke," (Data2VecVision model)"),xke.forEach(t),fir=i(D),ZF=n(D,"LI",{});var $ke=s(ZF);Z2e=n($ke,"STRONG",{});var Abt=s(Z2e);mir=r(Abt,"deberta"),Abt.forEach(t),gir=r($ke," \u2014 "),Yz=n($ke,"A",{href:!0});var ybt=s(Yz);hir=r(ybt,"TFDebertaModel"),ybt.forEach(t),pir=r($ke," (DeBERTa model)"),$ke.forEach(t),_ir=i(D),eT=n(D,"LI",{});var kke=s(eT);e1e=n(kke,"STRONG",{});var Lbt=s(e1e);uir=r(Lbt,"deberta-v2"),Lbt.forEach(t),bir=r(kke," \u2014 "),Kz=n(kke,"A",{href:!0});var xbt=s(Kz);vir=r(xbt,"TFDebertaV2Model"),xbt.forEach(t),Fir=r(kke," (DeBERTa-v2 model)"),kke.forEach(t),Tir=i(D),oT=n(D,"LI",{});var Ske=s(oT);o1e=n(Ske,"STRONG",{});var $bt=s(o1e);Mir=r($bt,"distilbert"),$bt.forEach(t),Eir=r(Ske," \u2014 "),Zz=n(Ske,"A",{href:!0});var kbt=s(Zz);Cir=r(kbt,"TFDistilBertModel"),kbt.forEach(t),wir=r(Ske," (DistilBERT model)"),Ske.forEach(t),Air=i(D),rT=n(D,"LI",{});var Rke=s(rT);r1e=n(Rke,"STRONG",{});var Sbt=s(r1e);yir=r(Sbt,"dpr"),Sbt.forEach(t),Lir=r(Rke," \u2014 "),eW=n(Rke,"A",{href:!0});var Rbt=s(eW);xir=r(Rbt,"TFDPRQuestionEncoder"),Rbt.forEach(t),$ir=r(Rke," (DPR model)"),Rke.forEach(t),kir=i(D),tT=n(D,"LI",{});var Pke=s(tT);t1e=n(Pke,"STRONG",{});var Pbt=s(t1e);Sir=r(Pbt,"electra"),Pbt.forEach(t),Rir=r(Pke," \u2014 "),oW=n(Pke,"A",{href:!0});var Bbt=s(oW);Pir=r(Bbt,"TFElectraModel"),Bbt.forEach(t),Bir=r(Pke," (ELECTRA model)"),Pke.forEach(t),Iir=i(D),aT=n(D,"LI",{});var Bke=s(aT);a1e=n(Bke,"STRONG",{});var Ibt=s(a1e);qir=r(Ibt,"flaubert"),Ibt.forEach(t),Nir=r(Bke," \u2014 "),rW=n(Bke,"A",{href:!0});var qbt=s(rW);jir=r(qbt,"TFFlaubertModel"),qbt.forEach(t),Dir=r(Bke," (FlauBERT model)"),Bke.forEach(t),Gir=i(D),Ns=n(D,"LI",{});var R$=s(Ns);n1e=n(R$,"STRONG",{});var Nbt=s(n1e);Oir=r(Nbt,"funnel"),Nbt.forEach(t),Vir=r(R$," \u2014 "),tW=n(R$,"A",{href:!0});var jbt=s(tW);Xir=r(jbt,"TFFunnelModel"),jbt.forEach(t),zir=r(R$," or "),aW=n(R$,"A",{href:!0});var Dbt=s(aW);Wir=r(Dbt,"TFFunnelBaseModel"),Dbt.forEach(t),Qir=r(R$," (Funnel Transformer model)"),R$.forEach(t),Hir=i(D),nT=n(D,"LI",{});var Ike=s(nT);s1e=n(Ike,"STRONG",{});var Gbt=s(s1e);Uir=r(Gbt,"gpt2"),Gbt.forEach(t),Jir=r(Ike," \u2014 "),nW=n(Ike,"A",{href:!0});var Obt=s(nW);Yir=r(Obt,"TFGPT2Model"),Obt.forEach(t),Kir=r(Ike," (OpenAI GPT-2 model)"),Ike.forEach(t),Zir=i(D),sT=n(D,"LI",{});var qke=s(sT);l1e=n(qke,"STRONG",{});var Vbt=s(l1e);edr=r(Vbt,"gptj"),Vbt.forEach(t),odr=r(qke," \u2014 "),sW=n(qke,"A",{href:!0});var Xbt=s(sW);rdr=r(Xbt,"TFGPTJModel"),Xbt.forEach(t),tdr=r(qke," (GPT-J model)"),qke.forEach(t),adr=i(D),lT=n(D,"LI",{});var Nke=s(lT);i1e=n(Nke,"STRONG",{});var zbt=s(i1e);ndr=r(zbt,"hubert"),zbt.forEach(t),sdr=r(Nke," \u2014 "),lW=n(Nke,"A",{href:!0});var Wbt=s(lW);ldr=r(Wbt,"TFHubertModel"),Wbt.forEach(t),idr=r(Nke," (Hubert model)"),Nke.forEach(t),ddr=i(D),iT=n(D,"LI",{});var jke=s(iT);d1e=n(jke,"STRONG",{});var Qbt=s(d1e);cdr=r(Qbt,"layoutlm"),Qbt.forEach(t),fdr=r(jke," \u2014 "),iW=n(jke,"A",{href:!0});var Hbt=s(iW);mdr=r(Hbt,"TFLayoutLMModel"),Hbt.forEach(t),gdr=r(jke," (LayoutLM model)"),jke.forEach(t),hdr=i(D),dT=n(D,"LI",{});var Dke=s(dT);c1e=n(Dke,"STRONG",{});var Ubt=s(c1e);pdr=r(Ubt,"led"),Ubt.forEach(t),_dr=r(Dke," \u2014 "),dW=n(Dke,"A",{href:!0});var Jbt=s(dW);udr=r(Jbt,"TFLEDModel"),Jbt.forEach(t),bdr=r(Dke," (LED model)"),Dke.forEach(t),vdr=i(D),cT=n(D,"LI",{});var Gke=s(cT);f1e=n(Gke,"STRONG",{});var Ybt=s(f1e);Fdr=r(Ybt,"longformer"),Ybt.forEach(t),Tdr=r(Gke," \u2014 "),cW=n(Gke,"A",{href:!0});var Kbt=s(cW);Mdr=r(Kbt,"TFLongformerModel"),Kbt.forEach(t),Edr=r(Gke," (Longformer model)"),Gke.forEach(t),Cdr=i(D),fT=n(D,"LI",{});var Oke=s(fT);m1e=n(Oke,"STRONG",{});var Zbt=s(m1e);wdr=r(Zbt,"lxmert"),Zbt.forEach(t),Adr=r(Oke," \u2014 "),fW=n(Oke,"A",{href:!0});var e4t=s(fW);ydr=r(e4t,"TFLxmertModel"),e4t.forEach(t),Ldr=r(Oke," (LXMERT model)"),Oke.forEach(t),xdr=i(D),mT=n(D,"LI",{});var Vke=s(mT);g1e=n(Vke,"STRONG",{});var o4t=s(g1e);$dr=r(o4t,"marian"),o4t.forEach(t),kdr=r(Vke," \u2014 "),mW=n(Vke,"A",{href:!0});var r4t=s(mW);Sdr=r(r4t,"TFMarianModel"),r4t.forEach(t),Rdr=r(Vke," (Marian model)"),Vke.forEach(t),Pdr=i(D),gT=n(D,"LI",{});var Xke=s(gT);h1e=n(Xke,"STRONG",{});var t4t=s(h1e);Bdr=r(t4t,"mbart"),t4t.forEach(t),Idr=r(Xke," \u2014 "),gW=n(Xke,"A",{href:!0});var a4t=s(gW);qdr=r(a4t,"TFMBartModel"),a4t.forEach(t),Ndr=r(Xke," (mBART model)"),Xke.forEach(t),jdr=i(D),hT=n(D,"LI",{});var zke=s(hT);p1e=n(zke,"STRONG",{});var n4t=s(p1e);Ddr=r(n4t,"mobilebert"),n4t.forEach(t),Gdr=r(zke," \u2014 "),hW=n(zke,"A",{href:!0});var s4t=s(hW);Odr=r(s4t,"TFMobileBertModel"),s4t.forEach(t),Vdr=r(zke," (MobileBERT model)"),zke.forEach(t),Xdr=i(D),pT=n(D,"LI",{});var Wke=s(pT);_1e=n(Wke,"STRONG",{});var l4t=s(_1e);zdr=r(l4t,"mpnet"),l4t.forEach(t),Wdr=r(Wke," \u2014 "),pW=n(Wke,"A",{href:!0});var i4t=s(pW);Qdr=r(i4t,"TFMPNetModel"),i4t.forEach(t),Hdr=r(Wke," (MPNet model)"),Wke.forEach(t),Udr=i(D),_T=n(D,"LI",{});var Qke=s(_T);u1e=n(Qke,"STRONG",{});var d4t=s(u1e);Jdr=r(d4t,"mt5"),d4t.forEach(t),Ydr=r(Qke," \u2014 "),_W=n(Qke,"A",{href:!0});var c4t=s(_W);Kdr=r(c4t,"TFMT5Model"),c4t.forEach(t),Zdr=r(Qke," (mT5 model)"),Qke.forEach(t),ecr=i(D),uT=n(D,"LI",{});var Hke=s(uT);b1e=n(Hke,"STRONG",{});var f4t=s(b1e);ocr=r(f4t,"openai-gpt"),f4t.forEach(t),rcr=r(Hke," \u2014 "),uW=n(Hke,"A",{href:!0});var m4t=s(uW);tcr=r(m4t,"TFOpenAIGPTModel"),m4t.forEach(t),acr=r(Hke," (OpenAI GPT model)"),Hke.forEach(t),ncr=i(D),bT=n(D,"LI",{});var Uke=s(bT);v1e=n(Uke,"STRONG",{});var g4t=s(v1e);scr=r(g4t,"pegasus"),g4t.forEach(t),lcr=r(Uke," \u2014 "),bW=n(Uke,"A",{href:!0});var h4t=s(bW);icr=r(h4t,"TFPegasusModel"),h4t.forEach(t),dcr=r(Uke," (Pegasus model)"),Uke.forEach(t),ccr=i(D),vT=n(D,"LI",{});var Jke=s(vT);F1e=n(Jke,"STRONG",{});var p4t=s(F1e);fcr=r(p4t,"rembert"),p4t.forEach(t),mcr=r(Jke," \u2014 "),vW=n(Jke,"A",{href:!0});var _4t=s(vW);gcr=r(_4t,"TFRemBertModel"),_4t.forEach(t),hcr=r(Jke," (RemBERT model)"),Jke.forEach(t),pcr=i(D),FT=n(D,"LI",{});var Yke=s(FT);T1e=n(Yke,"STRONG",{});var u4t=s(T1e);_cr=r(u4t,"roberta"),u4t.forEach(t),ucr=r(Yke," \u2014 "),FW=n(Yke,"A",{href:!0});var b4t=s(FW);bcr=r(b4t,"TFRobertaModel"),b4t.forEach(t),vcr=r(Yke," (RoBERTa model)"),Yke.forEach(t),Fcr=i(D),TT=n(D,"LI",{});var Kke=s(TT);M1e=n(Kke,"STRONG",{});var v4t=s(M1e);Tcr=r(v4t,"roformer"),v4t.forEach(t),Mcr=r(Kke," \u2014 "),TW=n(Kke,"A",{href:!0});var F4t=s(TW);Ecr=r(F4t,"TFRoFormerModel"),F4t.forEach(t),Ccr=r(Kke," (RoFormer model)"),Kke.forEach(t),wcr=i(D),MT=n(D,"LI",{});var Zke=s(MT);E1e=n(Zke,"STRONG",{});var T4t=s(E1e);Acr=r(T4t,"speech_to_text"),T4t.forEach(t),ycr=r(Zke," \u2014 "),MW=n(Zke,"A",{href:!0});var M4t=s(MW);Lcr=r(M4t,"TFSpeech2TextModel"),M4t.forEach(t),xcr=r(Zke," (Speech2Text model)"),Zke.forEach(t),$cr=i(D),ET=n(D,"LI",{});var eSe=s(ET);C1e=n(eSe,"STRONG",{});var E4t=s(C1e);kcr=r(E4t,"swin"),E4t.forEach(t),Scr=r(eSe," \u2014 "),EW=n(eSe,"A",{href:!0});var C4t=s(EW);Rcr=r(C4t,"TFSwinModel"),C4t.forEach(t),Pcr=r(eSe," (Swin model)"),eSe.forEach(t),Bcr=i(D),CT=n(D,"LI",{});var oSe=s(CT);w1e=n(oSe,"STRONG",{});var w4t=s(w1e);Icr=r(w4t,"t5"),w4t.forEach(t),qcr=r(oSe," \u2014 "),CW=n(oSe,"A",{href:!0});var A4t=s(CW);Ncr=r(A4t,"TFT5Model"),A4t.forEach(t),jcr=r(oSe," (T5 model)"),oSe.forEach(t),Dcr=i(D),wT=n(D,"LI",{});var rSe=s(wT);A1e=n(rSe,"STRONG",{});var y4t=s(A1e);Gcr=r(y4t,"tapas"),y4t.forEach(t),Ocr=r(rSe," \u2014 "),wW=n(rSe,"A",{href:!0});var L4t=s(wW);Vcr=r(L4t,"TFTapasModel"),L4t.forEach(t),Xcr=r(rSe," (TAPAS model)"),rSe.forEach(t),zcr=i(D),AT=n(D,"LI",{});var tSe=s(AT);y1e=n(tSe,"STRONG",{});var x4t=s(y1e);Wcr=r(x4t,"transfo-xl"),x4t.forEach(t),Qcr=r(tSe," \u2014 "),AW=n(tSe,"A",{href:!0});var $4t=s(AW);Hcr=r($4t,"TFTransfoXLModel"),$4t.forEach(t),Ucr=r(tSe," (Transformer-XL model)"),tSe.forEach(t),Jcr=i(D),yT=n(D,"LI",{});var aSe=s(yT);L1e=n(aSe,"STRONG",{});var k4t=s(L1e);Ycr=r(k4t,"vit"),k4t.forEach(t),Kcr=r(aSe," \u2014 "),yW=n(aSe,"A",{href:!0});var S4t=s(yW);Zcr=r(S4t,"TFViTModel"),S4t.forEach(t),efr=r(aSe," (ViT model)"),aSe.forEach(t),ofr=i(D),LT=n(D,"LI",{});var nSe=s(LT);x1e=n(nSe,"STRONG",{});var R4t=s(x1e);rfr=r(R4t,"vit_mae"),R4t.forEach(t),tfr=r(nSe," \u2014 "),LW=n(nSe,"A",{href:!0});var P4t=s(LW);afr=r(P4t,"TFViTMAEModel"),P4t.forEach(t),nfr=r(nSe," (ViTMAE model)"),nSe.forEach(t),sfr=i(D),xT=n(D,"LI",{});var sSe=s(xT);$1e=n(sSe,"STRONG",{});var B4t=s($1e);lfr=r(B4t,"wav2vec2"),B4t.forEach(t),ifr=r(sSe," \u2014 "),xW=n(sSe,"A",{href:!0});var I4t=s(xW);dfr=r(I4t,"TFWav2Vec2Model"),I4t.forEach(t),cfr=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),ffr=i(D),$T=n(D,"LI",{});var lSe=s($T);k1e=n(lSe,"STRONG",{});var q4t=s(k1e);mfr=r(q4t,"xlm"),q4t.forEach(t),gfr=r(lSe," \u2014 "),$W=n(lSe,"A",{href:!0});var N4t=s($W);hfr=r(N4t,"TFXLMModel"),N4t.forEach(t),pfr=r(lSe," (XLM model)"),lSe.forEach(t),_fr=i(D),kT=n(D,"LI",{});var iSe=s(kT);S1e=n(iSe,"STRONG",{});var j4t=s(S1e);ufr=r(j4t,"xlm-roberta"),j4t.forEach(t),bfr=r(iSe," \u2014 "),kW=n(iSe,"A",{href:!0});var D4t=s(kW);vfr=r(D4t,"TFXLMRobertaModel"),D4t.forEach(t),Ffr=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),Tfr=i(D),ST=n(D,"LI",{});var dSe=s(ST);R1e=n(dSe,"STRONG",{});var G4t=s(R1e);Mfr=r(G4t,"xlnet"),G4t.forEach(t),Efr=r(dSe," \u2014 "),SW=n(dSe,"A",{href:!0});var O4t=s(SW);Cfr=r(O4t,"TFXLNetModel"),O4t.forEach(t),wfr=r(dSe," (XLNet model)"),dSe.forEach(t),D.forEach(t),Afr=i(_l),T(RT.$$.fragment,_l),_l.forEach(t),pl.forEach(t),dNe=i(f),Wd=n(f,"H2",{class:!0});var pDe=s(Wd);PT=n(pDe,"A",{id:!0,class:!0,href:!0});var V4t=s(PT);P1e=n(V4t,"SPAN",{});var X4t=s(P1e);T(e8.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),yfr=i(pDe),B1e=n(pDe,"SPAN",{});var z4t=s(B1e);Lfr=r(z4t,"TFAutoModelForPreTraining"),z4t.forEach(t),pDe.forEach(t),cNe=i(f),Ko=n(f,"DIV",{class:!0});var ul=s(Ko);T(o8.$$.fragment,ul),xfr=i(ul),Qd=n(ul,"P",{});var OZ=s(Qd);$fr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RW=n(OZ,"A",{href:!0});var W4t=s(RW);kfr=r(W4t,"from_pretrained()"),W4t.forEach(t),Sfr=r(OZ," class method or the "),PW=n(OZ,"A",{href:!0});var Q4t=s(PW);Rfr=r(Q4t,"from_config()"),Q4t.forEach(t),Pfr=r(OZ,` class
method.`),OZ.forEach(t),Bfr=i(ul),r8=n(ul,"P",{});var _De=s(r8);Ifr=r(_De,"This class cannot be instantiated directly using "),I1e=n(_De,"CODE",{});var H4t=s(I1e);qfr=r(H4t,"__init__()"),H4t.forEach(t),Nfr=r(_De," (throws an error)."),_De.forEach(t),jfr=i(ul),Lt=n(ul,"DIV",{class:!0});var gA=s(Lt);T(t8.$$.fragment,gA),Dfr=i(gA),q1e=n(gA,"P",{});var U4t=s(q1e);Gfr=r(U4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U4t.forEach(t),Ofr=i(gA),Hd=n(gA,"P",{});var VZ=s(Hd);Vfr=r(VZ,`Note:
Loading a model from its configuration file does `),N1e=n(VZ,"STRONG",{});var J4t=s(N1e);Xfr=r(J4t,"not"),J4t.forEach(t),zfr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(VZ,"A",{href:!0});var Y4t=s(BW);Wfr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),Qfr=r(VZ," to load the model weights."),VZ.forEach(t),Hfr=i(gA),T(BT.$$.fragment,gA),gA.forEach(t),Ufr=i(ul),Ar=n(ul,"DIV",{class:!0});var bl=s(Ar);T(a8.$$.fragment,bl),Jfr=i(bl),j1e=n(bl,"P",{});var K4t=s(j1e);Yfr=r(K4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),K4t.forEach(t),Kfr=i(bl),Za=n(bl,"P",{});var hA=s(Za);Zfr=r(hA,"The model class to instantiate is selected based on the "),D1e=n(hA,"CODE",{});var Z4t=s(D1e);emr=r(Z4t,"model_type"),Z4t.forEach(t),omr=r(hA,` property of the config object (either
passed as an argument or loaded from `),G1e=n(hA,"CODE",{});var e5t=s(G1e);rmr=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),tmr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(hA,"CODE",{});var o5t=s(O1e);amr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),nmr=r(hA,":"),hA.forEach(t),smr=i(bl),se=n(bl,"UL",{});var le=s(se);IT=n(le,"LI",{});var cSe=s(IT);V1e=n(cSe,"STRONG",{});var r5t=s(V1e);lmr=r(r5t,"albert"),r5t.forEach(t),imr=r(cSe," \u2014 "),IW=n(cSe,"A",{href:!0});var t5t=s(IW);dmr=r(t5t,"TFAlbertForPreTraining"),t5t.forEach(t),cmr=r(cSe," (ALBERT model)"),cSe.forEach(t),fmr=i(le),qT=n(le,"LI",{});var fSe=s(qT);X1e=n(fSe,"STRONG",{});var a5t=s(X1e);mmr=r(a5t,"bart"),a5t.forEach(t),gmr=r(fSe," \u2014 "),qW=n(fSe,"A",{href:!0});var n5t=s(qW);hmr=r(n5t,"TFBartForConditionalGeneration"),n5t.forEach(t),pmr=r(fSe," (BART model)"),fSe.forEach(t),_mr=i(le),NT=n(le,"LI",{});var mSe=s(NT);z1e=n(mSe,"STRONG",{});var s5t=s(z1e);umr=r(s5t,"bert"),s5t.forEach(t),bmr=r(mSe," \u2014 "),NW=n(mSe,"A",{href:!0});var l5t=s(NW);vmr=r(l5t,"TFBertForPreTraining"),l5t.forEach(t),Fmr=r(mSe," (BERT model)"),mSe.forEach(t),Tmr=i(le),jT=n(le,"LI",{});var gSe=s(jT);W1e=n(gSe,"STRONG",{});var i5t=s(W1e);Mmr=r(i5t,"camembert"),i5t.forEach(t),Emr=r(gSe," \u2014 "),jW=n(gSe,"A",{href:!0});var d5t=s(jW);Cmr=r(d5t,"TFCamembertForMaskedLM"),d5t.forEach(t),wmr=r(gSe," (CamemBERT model)"),gSe.forEach(t),Amr=i(le),DT=n(le,"LI",{});var hSe=s(DT);Q1e=n(hSe,"STRONG",{});var c5t=s(Q1e);ymr=r(c5t,"ctrl"),c5t.forEach(t),Lmr=r(hSe," \u2014 "),DW=n(hSe,"A",{href:!0});var f5t=s(DW);xmr=r(f5t,"TFCTRLLMHeadModel"),f5t.forEach(t),$mr=r(hSe," (CTRL model)"),hSe.forEach(t),kmr=i(le),GT=n(le,"LI",{});var pSe=s(GT);H1e=n(pSe,"STRONG",{});var m5t=s(H1e);Smr=r(m5t,"distilbert"),m5t.forEach(t),Rmr=r(pSe," \u2014 "),GW=n(pSe,"A",{href:!0});var g5t=s(GW);Pmr=r(g5t,"TFDistilBertForMaskedLM"),g5t.forEach(t),Bmr=r(pSe," (DistilBERT model)"),pSe.forEach(t),Imr=i(le),OT=n(le,"LI",{});var _Se=s(OT);U1e=n(_Se,"STRONG",{});var h5t=s(U1e);qmr=r(h5t,"electra"),h5t.forEach(t),Nmr=r(_Se," \u2014 "),OW=n(_Se,"A",{href:!0});var p5t=s(OW);jmr=r(p5t,"TFElectraForPreTraining"),p5t.forEach(t),Dmr=r(_Se," (ELECTRA model)"),_Se.forEach(t),Gmr=i(le),VT=n(le,"LI",{});var uSe=s(VT);J1e=n(uSe,"STRONG",{});var _5t=s(J1e);Omr=r(_5t,"flaubert"),_5t.forEach(t),Vmr=r(uSe," \u2014 "),VW=n(uSe,"A",{href:!0});var u5t=s(VW);Xmr=r(u5t,"TFFlaubertWithLMHeadModel"),u5t.forEach(t),zmr=r(uSe," (FlauBERT model)"),uSe.forEach(t),Wmr=i(le),XT=n(le,"LI",{});var bSe=s(XT);Y1e=n(bSe,"STRONG",{});var b5t=s(Y1e);Qmr=r(b5t,"funnel"),b5t.forEach(t),Hmr=r(bSe," \u2014 "),XW=n(bSe,"A",{href:!0});var v5t=s(XW);Umr=r(v5t,"TFFunnelForPreTraining"),v5t.forEach(t),Jmr=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),Ymr=i(le),zT=n(le,"LI",{});var vSe=s(zT);K1e=n(vSe,"STRONG",{});var F5t=s(K1e);Kmr=r(F5t,"gpt2"),F5t.forEach(t),Zmr=r(vSe," \u2014 "),zW=n(vSe,"A",{href:!0});var T5t=s(zW);egr=r(T5t,"TFGPT2LMHeadModel"),T5t.forEach(t),ogr=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),rgr=i(le),WT=n(le,"LI",{});var FSe=s(WT);Z1e=n(FSe,"STRONG",{});var M5t=s(Z1e);tgr=r(M5t,"layoutlm"),M5t.forEach(t),agr=r(FSe," \u2014 "),WW=n(FSe,"A",{href:!0});var E5t=s(WW);ngr=r(E5t,"TFLayoutLMForMaskedLM"),E5t.forEach(t),sgr=r(FSe," (LayoutLM model)"),FSe.forEach(t),lgr=i(le),QT=n(le,"LI",{});var TSe=s(QT);ebe=n(TSe,"STRONG",{});var C5t=s(ebe);igr=r(C5t,"lxmert"),C5t.forEach(t),dgr=r(TSe," \u2014 "),QW=n(TSe,"A",{href:!0});var w5t=s(QW);cgr=r(w5t,"TFLxmertForPreTraining"),w5t.forEach(t),fgr=r(TSe," (LXMERT model)"),TSe.forEach(t),mgr=i(le),HT=n(le,"LI",{});var MSe=s(HT);obe=n(MSe,"STRONG",{});var A5t=s(obe);ggr=r(A5t,"mobilebert"),A5t.forEach(t),hgr=r(MSe," \u2014 "),HW=n(MSe,"A",{href:!0});var y5t=s(HW);pgr=r(y5t,"TFMobileBertForPreTraining"),y5t.forEach(t),_gr=r(MSe," (MobileBERT model)"),MSe.forEach(t),ugr=i(le),UT=n(le,"LI",{});var ESe=s(UT);rbe=n(ESe,"STRONG",{});var L5t=s(rbe);bgr=r(L5t,"mpnet"),L5t.forEach(t),vgr=r(ESe," \u2014 "),UW=n(ESe,"A",{href:!0});var x5t=s(UW);Fgr=r(x5t,"TFMPNetForMaskedLM"),x5t.forEach(t),Tgr=r(ESe," (MPNet model)"),ESe.forEach(t),Mgr=i(le),JT=n(le,"LI",{});var CSe=s(JT);tbe=n(CSe,"STRONG",{});var $5t=s(tbe);Egr=r($5t,"openai-gpt"),$5t.forEach(t),Cgr=r(CSe," \u2014 "),JW=n(CSe,"A",{href:!0});var k5t=s(JW);wgr=r(k5t,"TFOpenAIGPTLMHeadModel"),k5t.forEach(t),Agr=r(CSe," (OpenAI GPT model)"),CSe.forEach(t),ygr=i(le),YT=n(le,"LI",{});var wSe=s(YT);abe=n(wSe,"STRONG",{});var S5t=s(abe);Lgr=r(S5t,"roberta"),S5t.forEach(t),xgr=r(wSe," \u2014 "),YW=n(wSe,"A",{href:!0});var R5t=s(YW);$gr=r(R5t,"TFRobertaForMaskedLM"),R5t.forEach(t),kgr=r(wSe," (RoBERTa model)"),wSe.forEach(t),Sgr=i(le),KT=n(le,"LI",{});var ASe=s(KT);nbe=n(ASe,"STRONG",{});var P5t=s(nbe);Rgr=r(P5t,"t5"),P5t.forEach(t),Pgr=r(ASe," \u2014 "),KW=n(ASe,"A",{href:!0});var B5t=s(KW);Bgr=r(B5t,"TFT5ForConditionalGeneration"),B5t.forEach(t),Igr=r(ASe," (T5 model)"),ASe.forEach(t),qgr=i(le),ZT=n(le,"LI",{});var ySe=s(ZT);sbe=n(ySe,"STRONG",{});var I5t=s(sbe);Ngr=r(I5t,"tapas"),I5t.forEach(t),jgr=r(ySe," \u2014 "),ZW=n(ySe,"A",{href:!0});var q5t=s(ZW);Dgr=r(q5t,"TFTapasForMaskedLM"),q5t.forEach(t),Ggr=r(ySe," (TAPAS model)"),ySe.forEach(t),Ogr=i(le),e7=n(le,"LI",{});var LSe=s(e7);lbe=n(LSe,"STRONG",{});var N5t=s(lbe);Vgr=r(N5t,"transfo-xl"),N5t.forEach(t),Xgr=r(LSe," \u2014 "),eQ=n(LSe,"A",{href:!0});var j5t=s(eQ);zgr=r(j5t,"TFTransfoXLLMHeadModel"),j5t.forEach(t),Wgr=r(LSe," (Transformer-XL model)"),LSe.forEach(t),Qgr=i(le),o7=n(le,"LI",{});var xSe=s(o7);ibe=n(xSe,"STRONG",{});var D5t=s(ibe);Hgr=r(D5t,"vit_mae"),D5t.forEach(t),Ugr=r(xSe," \u2014 "),oQ=n(xSe,"A",{href:!0});var G5t=s(oQ);Jgr=r(G5t,"TFViTMAEForPreTraining"),G5t.forEach(t),Ygr=r(xSe," (ViTMAE model)"),xSe.forEach(t),Kgr=i(le),r7=n(le,"LI",{});var $Se=s(r7);dbe=n($Se,"STRONG",{});var O5t=s(dbe);Zgr=r(O5t,"xlm"),O5t.forEach(t),ehr=r($Se," \u2014 "),rQ=n($Se,"A",{href:!0});var V5t=s(rQ);ohr=r(V5t,"TFXLMWithLMHeadModel"),V5t.forEach(t),rhr=r($Se," (XLM model)"),$Se.forEach(t),thr=i(le),t7=n(le,"LI",{});var kSe=s(t7);cbe=n(kSe,"STRONG",{});var X5t=s(cbe);ahr=r(X5t,"xlm-roberta"),X5t.forEach(t),nhr=r(kSe," \u2014 "),tQ=n(kSe,"A",{href:!0});var z5t=s(tQ);shr=r(z5t,"TFXLMRobertaForMaskedLM"),z5t.forEach(t),lhr=r(kSe," (XLM-RoBERTa model)"),kSe.forEach(t),ihr=i(le),a7=n(le,"LI",{});var SSe=s(a7);fbe=n(SSe,"STRONG",{});var W5t=s(fbe);dhr=r(W5t,"xlnet"),W5t.forEach(t),chr=r(SSe," \u2014 "),aQ=n(SSe,"A",{href:!0});var Q5t=s(aQ);fhr=r(Q5t,"TFXLNetLMHeadModel"),Q5t.forEach(t),mhr=r(SSe," (XLNet model)"),SSe.forEach(t),le.forEach(t),ghr=i(bl),T(n7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),fNe=i(f),Ud=n(f,"H2",{class:!0});var uDe=s(Ud);s7=n(uDe,"A",{id:!0,class:!0,href:!0});var H5t=s(s7);mbe=n(H5t,"SPAN",{});var U5t=s(mbe);T(n8.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),hhr=i(uDe),gbe=n(uDe,"SPAN",{});var J5t=s(gbe);phr=r(J5t,"TFAutoModelForCausalLM"),J5t.forEach(t),uDe.forEach(t),mNe=i(f),Zo=n(f,"DIV",{class:!0});var vl=s(Zo);T(s8.$$.fragment,vl),_hr=i(vl),Jd=n(vl,"P",{});var XZ=s(Jd);uhr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nQ=n(XZ,"A",{href:!0});var Y5t=s(nQ);bhr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),vhr=r(XZ," class method or the "),sQ=n(XZ,"A",{href:!0});var K5t=s(sQ);Fhr=r(K5t,"from_config()"),K5t.forEach(t),Thr=r(XZ,` class
method.`),XZ.forEach(t),Mhr=i(vl),l8=n(vl,"P",{});var bDe=s(l8);Ehr=r(bDe,"This class cannot be instantiated directly using "),hbe=n(bDe,"CODE",{});var Z5t=s(hbe);Chr=r(Z5t,"__init__()"),Z5t.forEach(t),whr=r(bDe," (throws an error)."),bDe.forEach(t),Ahr=i(vl),xt=n(vl,"DIV",{class:!0});var pA=s(xt);T(i8.$$.fragment,pA),yhr=i(pA),pbe=n(pA,"P",{});var evt=s(pbe);Lhr=r(evt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),evt.forEach(t),xhr=i(pA),Yd=n(pA,"P",{});var zZ=s(Yd);$hr=r(zZ,`Note:
Loading a model from its configuration file does `),_be=n(zZ,"STRONG",{});var ovt=s(_be);khr=r(ovt,"not"),ovt.forEach(t),Shr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(zZ,"A",{href:!0});var rvt=s(lQ);Rhr=r(rvt,"from_pretrained()"),rvt.forEach(t),Phr=r(zZ," to load the model weights."),zZ.forEach(t),Bhr=i(pA),T(l7.$$.fragment,pA),pA.forEach(t),Ihr=i(vl),yr=n(vl,"DIV",{class:!0});var Fl=s(yr);T(d8.$$.fragment,Fl),qhr=i(Fl),ube=n(Fl,"P",{});var tvt=s(ube);Nhr=r(tvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tvt.forEach(t),jhr=i(Fl),en=n(Fl,"P",{});var _A=s(en);Dhr=r(_A,"The model class to instantiate is selected based on the "),bbe=n(_A,"CODE",{});var avt=s(bbe);Ghr=r(avt,"model_type"),avt.forEach(t),Ohr=r(_A,` property of the config object (either
passed as an argument or loaded from `),vbe=n(_A,"CODE",{});var nvt=s(vbe);Vhr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),Xhr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(_A,"CODE",{});var svt=s(Fbe);zhr=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),Whr=r(_A,":"),_A.forEach(t),Qhr=i(Fl),Me=n(Fl,"UL",{});var Ce=s(Me);i7=n(Ce,"LI",{});var RSe=s(i7);Tbe=n(RSe,"STRONG",{});var lvt=s(Tbe);Hhr=r(lvt,"bert"),lvt.forEach(t),Uhr=r(RSe," \u2014 "),iQ=n(RSe,"A",{href:!0});var ivt=s(iQ);Jhr=r(ivt,"TFBertLMHeadModel"),ivt.forEach(t),Yhr=r(RSe," (BERT model)"),RSe.forEach(t),Khr=i(Ce),d7=n(Ce,"LI",{});var PSe=s(d7);Mbe=n(PSe,"STRONG",{});var dvt=s(Mbe);Zhr=r(dvt,"camembert"),dvt.forEach(t),epr=r(PSe," \u2014 "),dQ=n(PSe,"A",{href:!0});var cvt=s(dQ);opr=r(cvt,"TFCamembertForCausalLM"),cvt.forEach(t),rpr=r(PSe," (CamemBERT model)"),PSe.forEach(t),tpr=i(Ce),c7=n(Ce,"LI",{});var BSe=s(c7);Ebe=n(BSe,"STRONG",{});var fvt=s(Ebe);apr=r(fvt,"ctrl"),fvt.forEach(t),npr=r(BSe," \u2014 "),cQ=n(BSe,"A",{href:!0});var mvt=s(cQ);spr=r(mvt,"TFCTRLLMHeadModel"),mvt.forEach(t),lpr=r(BSe," (CTRL model)"),BSe.forEach(t),ipr=i(Ce),f7=n(Ce,"LI",{});var ISe=s(f7);Cbe=n(ISe,"STRONG",{});var gvt=s(Cbe);dpr=r(gvt,"gpt2"),gvt.forEach(t),cpr=r(ISe," \u2014 "),fQ=n(ISe,"A",{href:!0});var hvt=s(fQ);fpr=r(hvt,"TFGPT2LMHeadModel"),hvt.forEach(t),mpr=r(ISe," (OpenAI GPT-2 model)"),ISe.forEach(t),gpr=i(Ce),m7=n(Ce,"LI",{});var qSe=s(m7);wbe=n(qSe,"STRONG",{});var pvt=s(wbe);hpr=r(pvt,"gptj"),pvt.forEach(t),ppr=r(qSe," \u2014 "),mQ=n(qSe,"A",{href:!0});var _vt=s(mQ);_pr=r(_vt,"TFGPTJForCausalLM"),_vt.forEach(t),upr=r(qSe," (GPT-J model)"),qSe.forEach(t),bpr=i(Ce),g7=n(Ce,"LI",{});var NSe=s(g7);Abe=n(NSe,"STRONG",{});var uvt=s(Abe);vpr=r(uvt,"openai-gpt"),uvt.forEach(t),Fpr=r(NSe," \u2014 "),gQ=n(NSe,"A",{href:!0});var bvt=s(gQ);Tpr=r(bvt,"TFOpenAIGPTLMHeadModel"),bvt.forEach(t),Mpr=r(NSe," (OpenAI GPT model)"),NSe.forEach(t),Epr=i(Ce),h7=n(Ce,"LI",{});var jSe=s(h7);ybe=n(jSe,"STRONG",{});var vvt=s(ybe);Cpr=r(vvt,"rembert"),vvt.forEach(t),wpr=r(jSe," \u2014 "),hQ=n(jSe,"A",{href:!0});var Fvt=s(hQ);Apr=r(Fvt,"TFRemBertForCausalLM"),Fvt.forEach(t),ypr=r(jSe," (RemBERT model)"),jSe.forEach(t),Lpr=i(Ce),p7=n(Ce,"LI",{});var DSe=s(p7);Lbe=n(DSe,"STRONG",{});var Tvt=s(Lbe);xpr=r(Tvt,"roberta"),Tvt.forEach(t),$pr=r(DSe," \u2014 "),pQ=n(DSe,"A",{href:!0});var Mvt=s(pQ);kpr=r(Mvt,"TFRobertaForCausalLM"),Mvt.forEach(t),Spr=r(DSe," (RoBERTa model)"),DSe.forEach(t),Rpr=i(Ce),_7=n(Ce,"LI",{});var GSe=s(_7);xbe=n(GSe,"STRONG",{});var Evt=s(xbe);Ppr=r(Evt,"roformer"),Evt.forEach(t),Bpr=r(GSe," \u2014 "),_Q=n(GSe,"A",{href:!0});var Cvt=s(_Q);Ipr=r(Cvt,"TFRoFormerForCausalLM"),Cvt.forEach(t),qpr=r(GSe," (RoFormer model)"),GSe.forEach(t),Npr=i(Ce),u7=n(Ce,"LI",{});var OSe=s(u7);$be=n(OSe,"STRONG",{});var wvt=s($be);jpr=r(wvt,"transfo-xl"),wvt.forEach(t),Dpr=r(OSe," \u2014 "),uQ=n(OSe,"A",{href:!0});var Avt=s(uQ);Gpr=r(Avt,"TFTransfoXLLMHeadModel"),Avt.forEach(t),Opr=r(OSe," (Transformer-XL model)"),OSe.forEach(t),Vpr=i(Ce),b7=n(Ce,"LI",{});var VSe=s(b7);kbe=n(VSe,"STRONG",{});var yvt=s(kbe);Xpr=r(yvt,"xlm"),yvt.forEach(t),zpr=r(VSe," \u2014 "),bQ=n(VSe,"A",{href:!0});var Lvt=s(bQ);Wpr=r(Lvt,"TFXLMWithLMHeadModel"),Lvt.forEach(t),Qpr=r(VSe," (XLM model)"),VSe.forEach(t),Hpr=i(Ce),v7=n(Ce,"LI",{});var XSe=s(v7);Sbe=n(XSe,"STRONG",{});var xvt=s(Sbe);Upr=r(xvt,"xlnet"),xvt.forEach(t),Jpr=r(XSe," \u2014 "),vQ=n(XSe,"A",{href:!0});var $vt=s(vQ);Ypr=r($vt,"TFXLNetLMHeadModel"),$vt.forEach(t),Kpr=r(XSe," (XLNet model)"),XSe.forEach(t),Ce.forEach(t),Zpr=i(Fl),T(F7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),gNe=i(f),Kd=n(f,"H2",{class:!0});var vDe=s(Kd);T7=n(vDe,"A",{id:!0,class:!0,href:!0});var kvt=s(T7);Rbe=n(kvt,"SPAN",{});var Svt=s(Rbe);T(c8.$$.fragment,Svt),Svt.forEach(t),kvt.forEach(t),e_r=i(vDe),Pbe=n(vDe,"SPAN",{});var Rvt=s(Pbe);o_r=r(Rvt,"TFAutoModelForImageClassification"),Rvt.forEach(t),vDe.forEach(t),hNe=i(f),er=n(f,"DIV",{class:!0});var Tl=s(er);T(f8.$$.fragment,Tl),r_r=i(Tl),Zd=n(Tl,"P",{});var WZ=s(Zd);t_r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=n(WZ,"A",{href:!0});var Pvt=s(FQ);a_r=r(Pvt,"from_pretrained()"),Pvt.forEach(t),n_r=r(WZ," class method or the "),TQ=n(WZ,"A",{href:!0});var Bvt=s(TQ);s_r=r(Bvt,"from_config()"),Bvt.forEach(t),l_r=r(WZ,` class
method.`),WZ.forEach(t),i_r=i(Tl),m8=n(Tl,"P",{});var FDe=s(m8);d_r=r(FDe,"This class cannot be instantiated directly using "),Bbe=n(FDe,"CODE",{});var Ivt=s(Bbe);c_r=r(Ivt,"__init__()"),Ivt.forEach(t),f_r=r(FDe," (throws an error)."),FDe.forEach(t),m_r=i(Tl),$t=n(Tl,"DIV",{class:!0});var uA=s($t);T(g8.$$.fragment,uA),g_r=i(uA),Ibe=n(uA,"P",{});var qvt=s(Ibe);h_r=r(qvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qvt.forEach(t),p_r=i(uA),ec=n(uA,"P",{});var QZ=s(ec);__r=r(QZ,`Note:
Loading a model from its configuration file does `),qbe=n(QZ,"STRONG",{});var Nvt=s(qbe);u_r=r(Nvt,"not"),Nvt.forEach(t),b_r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(QZ,"A",{href:!0});var jvt=s(MQ);v_r=r(jvt,"from_pretrained()"),jvt.forEach(t),F_r=r(QZ," to load the model weights."),QZ.forEach(t),T_r=i(uA),T(M7.$$.fragment,uA),uA.forEach(t),M_r=i(Tl),Lr=n(Tl,"DIV",{class:!0});var Ml=s(Lr);T(h8.$$.fragment,Ml),E_r=i(Ml),Nbe=n(Ml,"P",{});var Dvt=s(Nbe);C_r=r(Dvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dvt.forEach(t),w_r=i(Ml),on=n(Ml,"P",{});var bA=s(on);A_r=r(bA,"The model class to instantiate is selected based on the "),jbe=n(bA,"CODE",{});var Gvt=s(jbe);y_r=r(Gvt,"model_type"),Gvt.forEach(t),L_r=r(bA,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(bA,"CODE",{});var Ovt=s(Dbe);x_r=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),$_r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(bA,"CODE",{});var Vvt=s(Gbe);k_r=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),S_r=r(bA,":"),bA.forEach(t),R_r=i(Ml),rn=n(Ml,"UL",{});var vA=s(rn);E7=n(vA,"LI",{});var zSe=s(E7);Obe=n(zSe,"STRONG",{});var Xvt=s(Obe);P_r=r(Xvt,"convnext"),Xvt.forEach(t),B_r=r(zSe," \u2014 "),EQ=n(zSe,"A",{href:!0});var zvt=s(EQ);I_r=r(zvt,"TFConvNextForImageClassification"),zvt.forEach(t),q_r=r(zSe," (ConvNext model)"),zSe.forEach(t),N_r=i(vA),C7=n(vA,"LI",{});var WSe=s(C7);Vbe=n(WSe,"STRONG",{});var Wvt=s(Vbe);j_r=r(Wvt,"data2vec-vision"),Wvt.forEach(t),D_r=r(WSe," \u2014 "),CQ=n(WSe,"A",{href:!0});var Qvt=s(CQ);G_r=r(Qvt,"TFData2VecVisionForImageClassification"),Qvt.forEach(t),O_r=r(WSe," (Data2VecVision model)"),WSe.forEach(t),V_r=i(vA),w7=n(vA,"LI",{});var QSe=s(w7);Xbe=n(QSe,"STRONG",{});var Hvt=s(Xbe);X_r=r(Hvt,"swin"),Hvt.forEach(t),z_r=r(QSe," \u2014 "),wQ=n(QSe,"A",{href:!0});var Uvt=s(wQ);W_r=r(Uvt,"TFSwinForImageClassification"),Uvt.forEach(t),Q_r=r(QSe," (Swin model)"),QSe.forEach(t),H_r=i(vA),A7=n(vA,"LI",{});var HSe=s(A7);zbe=n(HSe,"STRONG",{});var Jvt=s(zbe);U_r=r(Jvt,"vit"),Jvt.forEach(t),J_r=r(HSe," \u2014 "),AQ=n(HSe,"A",{href:!0});var Yvt=s(AQ);Y_r=r(Yvt,"TFViTForImageClassification"),Yvt.forEach(t),K_r=r(HSe," (ViT model)"),HSe.forEach(t),vA.forEach(t),Z_r=i(Ml),T(y7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),pNe=i(f),oc=n(f,"H2",{class:!0});var TDe=s(oc);L7=n(TDe,"A",{id:!0,class:!0,href:!0});var Kvt=s(L7);Wbe=n(Kvt,"SPAN",{});var Zvt=s(Wbe);T(p8.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),eur=i(TDe),Qbe=n(TDe,"SPAN",{});var eFt=s(Qbe);our=r(eFt,"TFAutoModelForMaskedLM"),eFt.forEach(t),TDe.forEach(t),_Ne=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(_8.$$.fragment,El),rur=i(El),rc=n(El,"P",{});var HZ=s(rc);tur=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yQ=n(HZ,"A",{href:!0});var oFt=s(yQ);aur=r(oFt,"from_pretrained()"),oFt.forEach(t),nur=r(HZ," class method or the "),LQ=n(HZ,"A",{href:!0});var rFt=s(LQ);sur=r(rFt,"from_config()"),rFt.forEach(t),lur=r(HZ,` class
method.`),HZ.forEach(t),iur=i(El),u8=n(El,"P",{});var MDe=s(u8);dur=r(MDe,"This class cannot be instantiated directly using "),Hbe=n(MDe,"CODE",{});var tFt=s(Hbe);cur=r(tFt,"__init__()"),tFt.forEach(t),fur=r(MDe," (throws an error)."),MDe.forEach(t),mur=i(El),kt=n(El,"DIV",{class:!0});var FA=s(kt);T(b8.$$.fragment,FA),gur=i(FA),Ube=n(FA,"P",{});var aFt=s(Ube);hur=r(aFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aFt.forEach(t),pur=i(FA),tc=n(FA,"P",{});var UZ=s(tc);_ur=r(UZ,`Note:
Loading a model from its configuration file does `),Jbe=n(UZ,"STRONG",{});var nFt=s(Jbe);uur=r(nFt,"not"),nFt.forEach(t),bur=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(UZ,"A",{href:!0});var sFt=s(xQ);vur=r(sFt,"from_pretrained()"),sFt.forEach(t),Fur=r(UZ," to load the model weights."),UZ.forEach(t),Tur=i(FA),T(x7.$$.fragment,FA),FA.forEach(t),Mur=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(v8.$$.fragment,Cl),Eur=i(Cl),Ybe=n(Cl,"P",{});var lFt=s(Ybe);Cur=r(lFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lFt.forEach(t),wur=i(Cl),tn=n(Cl,"P",{});var TA=s(tn);Aur=r(TA,"The model class to instantiate is selected based on the "),Kbe=n(TA,"CODE",{});var iFt=s(Kbe);yur=r(iFt,"model_type"),iFt.forEach(t),Lur=r(TA,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(TA,"CODE",{});var dFt=s(Zbe);xur=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),$ur=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(TA,"CODE",{});var cFt=s(e4e);kur=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),Sur=r(TA,":"),TA.forEach(t),Rur=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);$7=n(fe,"LI",{});var USe=s($7);o4e=n(USe,"STRONG",{});var fFt=s(o4e);Pur=r(fFt,"albert"),fFt.forEach(t),Bur=r(USe," \u2014 "),$Q=n(USe,"A",{href:!0});var mFt=s($Q);Iur=r(mFt,"TFAlbertForMaskedLM"),mFt.forEach(t),qur=r(USe," (ALBERT model)"),USe.forEach(t),Nur=i(fe),k7=n(fe,"LI",{});var JSe=s(k7);r4e=n(JSe,"STRONG",{});var gFt=s(r4e);jur=r(gFt,"bert"),gFt.forEach(t),Dur=r(JSe," \u2014 "),kQ=n(JSe,"A",{href:!0});var hFt=s(kQ);Gur=r(hFt,"TFBertForMaskedLM"),hFt.forEach(t),Our=r(JSe," (BERT model)"),JSe.forEach(t),Vur=i(fe),S7=n(fe,"LI",{});var YSe=s(S7);t4e=n(YSe,"STRONG",{});var pFt=s(t4e);Xur=r(pFt,"camembert"),pFt.forEach(t),zur=r(YSe," \u2014 "),SQ=n(YSe,"A",{href:!0});var _Ft=s(SQ);Wur=r(_Ft,"TFCamembertForMaskedLM"),_Ft.forEach(t),Qur=r(YSe," (CamemBERT model)"),YSe.forEach(t),Hur=i(fe),R7=n(fe,"LI",{});var KSe=s(R7);a4e=n(KSe,"STRONG",{});var uFt=s(a4e);Uur=r(uFt,"convbert"),uFt.forEach(t),Jur=r(KSe," \u2014 "),RQ=n(KSe,"A",{href:!0});var bFt=s(RQ);Yur=r(bFt,"TFConvBertForMaskedLM"),bFt.forEach(t),Kur=r(KSe," (ConvBERT model)"),KSe.forEach(t),Zur=i(fe),P7=n(fe,"LI",{});var ZSe=s(P7);n4e=n(ZSe,"STRONG",{});var vFt=s(n4e);e2r=r(vFt,"deberta"),vFt.forEach(t),o2r=r(ZSe," \u2014 "),PQ=n(ZSe,"A",{href:!0});var FFt=s(PQ);r2r=r(FFt,"TFDebertaForMaskedLM"),FFt.forEach(t),t2r=r(ZSe," (DeBERTa model)"),ZSe.forEach(t),a2r=i(fe),B7=n(fe,"LI",{});var eRe=s(B7);s4e=n(eRe,"STRONG",{});var TFt=s(s4e);n2r=r(TFt,"deberta-v2"),TFt.forEach(t),s2r=r(eRe," \u2014 "),BQ=n(eRe,"A",{href:!0});var MFt=s(BQ);l2r=r(MFt,"TFDebertaV2ForMaskedLM"),MFt.forEach(t),i2r=r(eRe," (DeBERTa-v2 model)"),eRe.forEach(t),d2r=i(fe),I7=n(fe,"LI",{});var oRe=s(I7);l4e=n(oRe,"STRONG",{});var EFt=s(l4e);c2r=r(EFt,"distilbert"),EFt.forEach(t),f2r=r(oRe," \u2014 "),IQ=n(oRe,"A",{href:!0});var CFt=s(IQ);m2r=r(CFt,"TFDistilBertForMaskedLM"),CFt.forEach(t),g2r=r(oRe," (DistilBERT model)"),oRe.forEach(t),h2r=i(fe),q7=n(fe,"LI",{});var rRe=s(q7);i4e=n(rRe,"STRONG",{});var wFt=s(i4e);p2r=r(wFt,"electra"),wFt.forEach(t),_2r=r(rRe," \u2014 "),qQ=n(rRe,"A",{href:!0});var AFt=s(qQ);u2r=r(AFt,"TFElectraForMaskedLM"),AFt.forEach(t),b2r=r(rRe," (ELECTRA model)"),rRe.forEach(t),v2r=i(fe),N7=n(fe,"LI",{});var tRe=s(N7);d4e=n(tRe,"STRONG",{});var yFt=s(d4e);F2r=r(yFt,"flaubert"),yFt.forEach(t),T2r=r(tRe," \u2014 "),NQ=n(tRe,"A",{href:!0});var LFt=s(NQ);M2r=r(LFt,"TFFlaubertWithLMHeadModel"),LFt.forEach(t),E2r=r(tRe," (FlauBERT model)"),tRe.forEach(t),C2r=i(fe),j7=n(fe,"LI",{});var aRe=s(j7);c4e=n(aRe,"STRONG",{});var xFt=s(c4e);w2r=r(xFt,"funnel"),xFt.forEach(t),A2r=r(aRe," \u2014 "),jQ=n(aRe,"A",{href:!0});var $Ft=s(jQ);y2r=r($Ft,"TFFunnelForMaskedLM"),$Ft.forEach(t),L2r=r(aRe," (Funnel Transformer model)"),aRe.forEach(t),x2r=i(fe),D7=n(fe,"LI",{});var nRe=s(D7);f4e=n(nRe,"STRONG",{});var kFt=s(f4e);$2r=r(kFt,"layoutlm"),kFt.forEach(t),k2r=r(nRe," \u2014 "),DQ=n(nRe,"A",{href:!0});var SFt=s(DQ);S2r=r(SFt,"TFLayoutLMForMaskedLM"),SFt.forEach(t),R2r=r(nRe," (LayoutLM model)"),nRe.forEach(t),P2r=i(fe),G7=n(fe,"LI",{});var sRe=s(G7);m4e=n(sRe,"STRONG",{});var RFt=s(m4e);B2r=r(RFt,"longformer"),RFt.forEach(t),I2r=r(sRe," \u2014 "),GQ=n(sRe,"A",{href:!0});var PFt=s(GQ);q2r=r(PFt,"TFLongformerForMaskedLM"),PFt.forEach(t),N2r=r(sRe," (Longformer model)"),sRe.forEach(t),j2r=i(fe),O7=n(fe,"LI",{});var lRe=s(O7);g4e=n(lRe,"STRONG",{});var BFt=s(g4e);D2r=r(BFt,"mobilebert"),BFt.forEach(t),G2r=r(lRe," \u2014 "),OQ=n(lRe,"A",{href:!0});var IFt=s(OQ);O2r=r(IFt,"TFMobileBertForMaskedLM"),IFt.forEach(t),V2r=r(lRe," (MobileBERT model)"),lRe.forEach(t),X2r=i(fe),V7=n(fe,"LI",{});var iRe=s(V7);h4e=n(iRe,"STRONG",{});var qFt=s(h4e);z2r=r(qFt,"mpnet"),qFt.forEach(t),W2r=r(iRe," \u2014 "),VQ=n(iRe,"A",{href:!0});var NFt=s(VQ);Q2r=r(NFt,"TFMPNetForMaskedLM"),NFt.forEach(t),H2r=r(iRe," (MPNet model)"),iRe.forEach(t),U2r=i(fe),X7=n(fe,"LI",{});var dRe=s(X7);p4e=n(dRe,"STRONG",{});var jFt=s(p4e);J2r=r(jFt,"rembert"),jFt.forEach(t),Y2r=r(dRe," \u2014 "),XQ=n(dRe,"A",{href:!0});var DFt=s(XQ);K2r=r(DFt,"TFRemBertForMaskedLM"),DFt.forEach(t),Z2r=r(dRe," (RemBERT model)"),dRe.forEach(t),e1r=i(fe),z7=n(fe,"LI",{});var cRe=s(z7);_4e=n(cRe,"STRONG",{});var GFt=s(_4e);o1r=r(GFt,"roberta"),GFt.forEach(t),r1r=r(cRe," \u2014 "),zQ=n(cRe,"A",{href:!0});var OFt=s(zQ);t1r=r(OFt,"TFRobertaForMaskedLM"),OFt.forEach(t),a1r=r(cRe," (RoBERTa model)"),cRe.forEach(t),n1r=i(fe),W7=n(fe,"LI",{});var fRe=s(W7);u4e=n(fRe,"STRONG",{});var VFt=s(u4e);s1r=r(VFt,"roformer"),VFt.forEach(t),l1r=r(fRe," \u2014 "),WQ=n(fRe,"A",{href:!0});var XFt=s(WQ);i1r=r(XFt,"TFRoFormerForMaskedLM"),XFt.forEach(t),d1r=r(fRe," (RoFormer model)"),fRe.forEach(t),c1r=i(fe),Q7=n(fe,"LI",{});var mRe=s(Q7);b4e=n(mRe,"STRONG",{});var zFt=s(b4e);f1r=r(zFt,"tapas"),zFt.forEach(t),m1r=r(mRe," \u2014 "),QQ=n(mRe,"A",{href:!0});var WFt=s(QQ);g1r=r(WFt,"TFTapasForMaskedLM"),WFt.forEach(t),h1r=r(mRe," (TAPAS model)"),mRe.forEach(t),p1r=i(fe),H7=n(fe,"LI",{});var gRe=s(H7);v4e=n(gRe,"STRONG",{});var QFt=s(v4e);_1r=r(QFt,"xlm"),QFt.forEach(t),u1r=r(gRe," \u2014 "),HQ=n(gRe,"A",{href:!0});var HFt=s(HQ);b1r=r(HFt,"TFXLMWithLMHeadModel"),HFt.forEach(t),v1r=r(gRe," (XLM model)"),gRe.forEach(t),F1r=i(fe),U7=n(fe,"LI",{});var hRe=s(U7);F4e=n(hRe,"STRONG",{});var UFt=s(F4e);T1r=r(UFt,"xlm-roberta"),UFt.forEach(t),M1r=r(hRe," \u2014 "),UQ=n(hRe,"A",{href:!0});var JFt=s(UQ);E1r=r(JFt,"TFXLMRobertaForMaskedLM"),JFt.forEach(t),C1r=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),fe.forEach(t),w1r=i(Cl),T(J7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),uNe=i(f),ac=n(f,"H2",{class:!0});var EDe=s(ac);Y7=n(EDe,"A",{id:!0,class:!0,href:!0});var YFt=s(Y7);T4e=n(YFt,"SPAN",{});var KFt=s(T4e);T(F8.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),A1r=i(EDe),M4e=n(EDe,"SPAN",{});var ZFt=s(M4e);y1r=r(ZFt,"TFAutoModelForSeq2SeqLM"),ZFt.forEach(t),EDe.forEach(t),bNe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(T8.$$.fragment,wl),L1r=i(wl),nc=n(wl,"P",{});var JZ=s(nc);x1r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JQ=n(JZ,"A",{href:!0});var eTt=s(JQ);$1r=r(eTt,"from_pretrained()"),eTt.forEach(t),k1r=r(JZ," class method or the "),YQ=n(JZ,"A",{href:!0});var oTt=s(YQ);S1r=r(oTt,"from_config()"),oTt.forEach(t),R1r=r(JZ,` class
method.`),JZ.forEach(t),P1r=i(wl),M8=n(wl,"P",{});var CDe=s(M8);B1r=r(CDe,"This class cannot be instantiated directly using "),E4e=n(CDe,"CODE",{});var rTt=s(E4e);I1r=r(rTt,"__init__()"),rTt.forEach(t),q1r=r(CDe," (throws an error)."),CDe.forEach(t),N1r=i(wl),St=n(wl,"DIV",{class:!0});var MA=s(St);T(E8.$$.fragment,MA),j1r=i(MA),C4e=n(MA,"P",{});var tTt=s(C4e);D1r=r(tTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tTt.forEach(t),G1r=i(MA),sc=n(MA,"P",{});var YZ=s(sc);O1r=r(YZ,`Note:
Loading a model from its configuration file does `),w4e=n(YZ,"STRONG",{});var aTt=s(w4e);V1r=r(aTt,"not"),aTt.forEach(t),X1r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(YZ,"A",{href:!0});var nTt=s(KQ);z1r=r(nTt,"from_pretrained()"),nTt.forEach(t),W1r=r(YZ," to load the model weights."),YZ.forEach(t),Q1r=i(MA),T(K7.$$.fragment,MA),MA.forEach(t),H1r=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(C8.$$.fragment,Al),U1r=i(Al),A4e=n(Al,"P",{});var sTt=s(A4e);J1r=r(sTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sTt.forEach(t),Y1r=i(Al),an=n(Al,"P",{});var EA=s(an);K1r=r(EA,"The model class to instantiate is selected based on the "),y4e=n(EA,"CODE",{});var lTt=s(y4e);Z1r=r(lTt,"model_type"),lTt.forEach(t),ebr=r(EA,` property of the config object (either
passed as an argument or loaded from `),L4e=n(EA,"CODE",{});var iTt=s(L4e);obr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),rbr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(EA,"CODE",{});var dTt=s(x4e);tbr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),abr=r(EA,":"),EA.forEach(t),nbr=i(Al),ye=n(Al,"UL",{});var Be=s(ye);Z7=n(Be,"LI",{});var pRe=s(Z7);$4e=n(pRe,"STRONG",{});var cTt=s($4e);sbr=r(cTt,"bart"),cTt.forEach(t),lbr=r(pRe," \u2014 "),ZQ=n(pRe,"A",{href:!0});var fTt=s(ZQ);ibr=r(fTt,"TFBartForConditionalGeneration"),fTt.forEach(t),dbr=r(pRe," (BART model)"),pRe.forEach(t),cbr=i(Be),eM=n(Be,"LI",{});var _Re=s(eM);k4e=n(_Re,"STRONG",{});var mTt=s(k4e);fbr=r(mTt,"blenderbot"),mTt.forEach(t),mbr=r(_Re," \u2014 "),eH=n(_Re,"A",{href:!0});var gTt=s(eH);gbr=r(gTt,"TFBlenderbotForConditionalGeneration"),gTt.forEach(t),hbr=r(_Re," (Blenderbot model)"),_Re.forEach(t),pbr=i(Be),oM=n(Be,"LI",{});var uRe=s(oM);S4e=n(uRe,"STRONG",{});var hTt=s(S4e);_br=r(hTt,"blenderbot-small"),hTt.forEach(t),ubr=r(uRe," \u2014 "),oH=n(uRe,"A",{href:!0});var pTt=s(oH);bbr=r(pTt,"TFBlenderbotSmallForConditionalGeneration"),pTt.forEach(t),vbr=r(uRe," (BlenderbotSmall model)"),uRe.forEach(t),Fbr=i(Be),rM=n(Be,"LI",{});var bRe=s(rM);R4e=n(bRe,"STRONG",{});var _Tt=s(R4e);Tbr=r(_Tt,"encoder-decoder"),_Tt.forEach(t),Mbr=r(bRe," \u2014 "),rH=n(bRe,"A",{href:!0});var uTt=s(rH);Ebr=r(uTt,"TFEncoderDecoderModel"),uTt.forEach(t),Cbr=r(bRe," (Encoder decoder model)"),bRe.forEach(t),wbr=i(Be),tM=n(Be,"LI",{});var vRe=s(tM);P4e=n(vRe,"STRONG",{});var bTt=s(P4e);Abr=r(bTt,"led"),bTt.forEach(t),ybr=r(vRe," \u2014 "),tH=n(vRe,"A",{href:!0});var vTt=s(tH);Lbr=r(vTt,"TFLEDForConditionalGeneration"),vTt.forEach(t),xbr=r(vRe," (LED model)"),vRe.forEach(t),$br=i(Be),aM=n(Be,"LI",{});var FRe=s(aM);B4e=n(FRe,"STRONG",{});var FTt=s(B4e);kbr=r(FTt,"marian"),FTt.forEach(t),Sbr=r(FRe," \u2014 "),aH=n(FRe,"A",{href:!0});var TTt=s(aH);Rbr=r(TTt,"TFMarianMTModel"),TTt.forEach(t),Pbr=r(FRe," (Marian model)"),FRe.forEach(t),Bbr=i(Be),nM=n(Be,"LI",{});var TRe=s(nM);I4e=n(TRe,"STRONG",{});var MTt=s(I4e);Ibr=r(MTt,"mbart"),MTt.forEach(t),qbr=r(TRe," \u2014 "),nH=n(TRe,"A",{href:!0});var ETt=s(nH);Nbr=r(ETt,"TFMBartForConditionalGeneration"),ETt.forEach(t),jbr=r(TRe," (mBART model)"),TRe.forEach(t),Dbr=i(Be),sM=n(Be,"LI",{});var MRe=s(sM);q4e=n(MRe,"STRONG",{});var CTt=s(q4e);Gbr=r(CTt,"mt5"),CTt.forEach(t),Obr=r(MRe," \u2014 "),sH=n(MRe,"A",{href:!0});var wTt=s(sH);Vbr=r(wTt,"TFMT5ForConditionalGeneration"),wTt.forEach(t),Xbr=r(MRe," (mT5 model)"),MRe.forEach(t),zbr=i(Be),lM=n(Be,"LI",{});var ERe=s(lM);N4e=n(ERe,"STRONG",{});var ATt=s(N4e);Wbr=r(ATt,"pegasus"),ATt.forEach(t),Qbr=r(ERe," \u2014 "),lH=n(ERe,"A",{href:!0});var yTt=s(lH);Hbr=r(yTt,"TFPegasusForConditionalGeneration"),yTt.forEach(t),Ubr=r(ERe," (Pegasus model)"),ERe.forEach(t),Jbr=i(Be),iM=n(Be,"LI",{});var CRe=s(iM);j4e=n(CRe,"STRONG",{});var LTt=s(j4e);Ybr=r(LTt,"t5"),LTt.forEach(t),Kbr=r(CRe," \u2014 "),iH=n(CRe,"A",{href:!0});var xTt=s(iH);Zbr=r(xTt,"TFT5ForConditionalGeneration"),xTt.forEach(t),e4r=r(CRe," (T5 model)"),CRe.forEach(t),Be.forEach(t),o4r=i(Al),T(dM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),vNe=i(f),lc=n(f,"H2",{class:!0});var wDe=s(lc);cM=n(wDe,"A",{id:!0,class:!0,href:!0});var $Tt=s(cM);D4e=n($Tt,"SPAN",{});var kTt=s(D4e);T(w8.$$.fragment,kTt),kTt.forEach(t),$Tt.forEach(t),r4r=i(wDe),G4e=n(wDe,"SPAN",{});var STt=s(G4e);t4r=r(STt,"TFAutoModelForSequenceClassification"),STt.forEach(t),wDe.forEach(t),FNe=i(f),tr=n(f,"DIV",{class:!0});var yl=s(tr);T(A8.$$.fragment,yl),a4r=i(yl),ic=n(yl,"P",{});var KZ=s(ic);n4r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dH=n(KZ,"A",{href:!0});var RTt=s(dH);s4r=r(RTt,"from_pretrained()"),RTt.forEach(t),l4r=r(KZ," class method or the "),cH=n(KZ,"A",{href:!0});var PTt=s(cH);i4r=r(PTt,"from_config()"),PTt.forEach(t),d4r=r(KZ,` class
method.`),KZ.forEach(t),c4r=i(yl),y8=n(yl,"P",{});var ADe=s(y8);f4r=r(ADe,"This class cannot be instantiated directly using "),O4e=n(ADe,"CODE",{});var BTt=s(O4e);m4r=r(BTt,"__init__()"),BTt.forEach(t),g4r=r(ADe," (throws an error)."),ADe.forEach(t),h4r=i(yl),Rt=n(yl,"DIV",{class:!0});var CA=s(Rt);T(L8.$$.fragment,CA),p4r=i(CA),V4e=n(CA,"P",{});var ITt=s(V4e);_4r=r(ITt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ITt.forEach(t),u4r=i(CA),dc=n(CA,"P",{});var ZZ=s(dc);b4r=r(ZZ,`Note:
Loading a model from its configuration file does `),X4e=n(ZZ,"STRONG",{});var qTt=s(X4e);v4r=r(qTt,"not"),qTt.forEach(t),F4r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(ZZ,"A",{href:!0});var NTt=s(fH);T4r=r(NTt,"from_pretrained()"),NTt.forEach(t),M4r=r(ZZ," to load the model weights."),ZZ.forEach(t),E4r=i(CA),T(fM.$$.fragment,CA),CA.forEach(t),C4r=i(yl),kr=n(yl,"DIV",{class:!0});var Ll=s(kr);T(x8.$$.fragment,Ll),w4r=i(Ll),z4e=n(Ll,"P",{});var jTt=s(z4e);A4r=r(jTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jTt.forEach(t),y4r=i(Ll),nn=n(Ll,"P",{});var wA=s(nn);L4r=r(wA,"The model class to instantiate is selected based on the "),W4e=n(wA,"CODE",{});var DTt=s(W4e);x4r=r(DTt,"model_type"),DTt.forEach(t),$4r=r(wA,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(wA,"CODE",{});var GTt=s(Q4e);k4r=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),S4r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(wA,"CODE",{});var OTt=s(H4e);R4r=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),P4r=r(wA,":"),wA.forEach(t),B4r=i(Ll),ee=n(Ll,"UL",{});var ae=s(ee);mM=n(ae,"LI",{});var wRe=s(mM);U4e=n(wRe,"STRONG",{});var VTt=s(U4e);I4r=r(VTt,"albert"),VTt.forEach(t),q4r=r(wRe," \u2014 "),mH=n(wRe,"A",{href:!0});var XTt=s(mH);N4r=r(XTt,"TFAlbertForSequenceClassification"),XTt.forEach(t),j4r=r(wRe," (ALBERT model)"),wRe.forEach(t),D4r=i(ae),gM=n(ae,"LI",{});var ARe=s(gM);J4e=n(ARe,"STRONG",{});var zTt=s(J4e);G4r=r(zTt,"bert"),zTt.forEach(t),O4r=r(ARe," \u2014 "),gH=n(ARe,"A",{href:!0});var WTt=s(gH);V4r=r(WTt,"TFBertForSequenceClassification"),WTt.forEach(t),X4r=r(ARe," (BERT model)"),ARe.forEach(t),z4r=i(ae),hM=n(ae,"LI",{});var yRe=s(hM);Y4e=n(yRe,"STRONG",{});var QTt=s(Y4e);W4r=r(QTt,"camembert"),QTt.forEach(t),Q4r=r(yRe," \u2014 "),hH=n(yRe,"A",{href:!0});var HTt=s(hH);H4r=r(HTt,"TFCamembertForSequenceClassification"),HTt.forEach(t),U4r=r(yRe," (CamemBERT model)"),yRe.forEach(t),J4r=i(ae),pM=n(ae,"LI",{});var LRe=s(pM);K4e=n(LRe,"STRONG",{});var UTt=s(K4e);Y4r=r(UTt,"convbert"),UTt.forEach(t),K4r=r(LRe," \u2014 "),pH=n(LRe,"A",{href:!0});var JTt=s(pH);Z4r=r(JTt,"TFConvBertForSequenceClassification"),JTt.forEach(t),e5r=r(LRe," (ConvBERT model)"),LRe.forEach(t),o5r=i(ae),_M=n(ae,"LI",{});var xRe=s(_M);Z4e=n(xRe,"STRONG",{});var YTt=s(Z4e);r5r=r(YTt,"ctrl"),YTt.forEach(t),t5r=r(xRe," \u2014 "),_H=n(xRe,"A",{href:!0});var KTt=s(_H);a5r=r(KTt,"TFCTRLForSequenceClassification"),KTt.forEach(t),n5r=r(xRe," (CTRL model)"),xRe.forEach(t),s5r=i(ae),uM=n(ae,"LI",{});var $Re=s(uM);e5e=n($Re,"STRONG",{});var ZTt=s(e5e);l5r=r(ZTt,"deberta"),ZTt.forEach(t),i5r=r($Re," \u2014 "),uH=n($Re,"A",{href:!0});var e7t=s(uH);d5r=r(e7t,"TFDebertaForSequenceClassification"),e7t.forEach(t),c5r=r($Re," (DeBERTa model)"),$Re.forEach(t),f5r=i(ae),bM=n(ae,"LI",{});var kRe=s(bM);o5e=n(kRe,"STRONG",{});var o7t=s(o5e);m5r=r(o7t,"deberta-v2"),o7t.forEach(t),g5r=r(kRe," \u2014 "),bH=n(kRe,"A",{href:!0});var r7t=s(bH);h5r=r(r7t,"TFDebertaV2ForSequenceClassification"),r7t.forEach(t),p5r=r(kRe," (DeBERTa-v2 model)"),kRe.forEach(t),_5r=i(ae),vM=n(ae,"LI",{});var SRe=s(vM);r5e=n(SRe,"STRONG",{});var t7t=s(r5e);u5r=r(t7t,"distilbert"),t7t.forEach(t),b5r=r(SRe," \u2014 "),vH=n(SRe,"A",{href:!0});var a7t=s(vH);v5r=r(a7t,"TFDistilBertForSequenceClassification"),a7t.forEach(t),F5r=r(SRe," (DistilBERT model)"),SRe.forEach(t),T5r=i(ae),FM=n(ae,"LI",{});var RRe=s(FM);t5e=n(RRe,"STRONG",{});var n7t=s(t5e);M5r=r(n7t,"electra"),n7t.forEach(t),E5r=r(RRe," \u2014 "),FH=n(RRe,"A",{href:!0});var s7t=s(FH);C5r=r(s7t,"TFElectraForSequenceClassification"),s7t.forEach(t),w5r=r(RRe," (ELECTRA model)"),RRe.forEach(t),A5r=i(ae),TM=n(ae,"LI",{});var PRe=s(TM);a5e=n(PRe,"STRONG",{});var l7t=s(a5e);y5r=r(l7t,"flaubert"),l7t.forEach(t),L5r=r(PRe," \u2014 "),TH=n(PRe,"A",{href:!0});var i7t=s(TH);x5r=r(i7t,"TFFlaubertForSequenceClassification"),i7t.forEach(t),$5r=r(PRe," (FlauBERT model)"),PRe.forEach(t),k5r=i(ae),MM=n(ae,"LI",{});var BRe=s(MM);n5e=n(BRe,"STRONG",{});var d7t=s(n5e);S5r=r(d7t,"funnel"),d7t.forEach(t),R5r=r(BRe," \u2014 "),MH=n(BRe,"A",{href:!0});var c7t=s(MH);P5r=r(c7t,"TFFunnelForSequenceClassification"),c7t.forEach(t),B5r=r(BRe," (Funnel Transformer model)"),BRe.forEach(t),I5r=i(ae),EM=n(ae,"LI",{});var IRe=s(EM);s5e=n(IRe,"STRONG",{});var f7t=s(s5e);q5r=r(f7t,"gpt2"),f7t.forEach(t),N5r=r(IRe," \u2014 "),EH=n(IRe,"A",{href:!0});var m7t=s(EH);j5r=r(m7t,"TFGPT2ForSequenceClassification"),m7t.forEach(t),D5r=r(IRe," (OpenAI GPT-2 model)"),IRe.forEach(t),G5r=i(ae),CM=n(ae,"LI",{});var qRe=s(CM);l5e=n(qRe,"STRONG",{});var g7t=s(l5e);O5r=r(g7t,"gptj"),g7t.forEach(t),V5r=r(qRe," \u2014 "),CH=n(qRe,"A",{href:!0});var h7t=s(CH);X5r=r(h7t,"TFGPTJForSequenceClassification"),h7t.forEach(t),z5r=r(qRe," (GPT-J model)"),qRe.forEach(t),W5r=i(ae),wM=n(ae,"LI",{});var NRe=s(wM);i5e=n(NRe,"STRONG",{});var p7t=s(i5e);Q5r=r(p7t,"layoutlm"),p7t.forEach(t),H5r=r(NRe," \u2014 "),wH=n(NRe,"A",{href:!0});var _7t=s(wH);U5r=r(_7t,"TFLayoutLMForSequenceClassification"),_7t.forEach(t),J5r=r(NRe," (LayoutLM model)"),NRe.forEach(t),Y5r=i(ae),AM=n(ae,"LI",{});var jRe=s(AM);d5e=n(jRe,"STRONG",{});var u7t=s(d5e);K5r=r(u7t,"longformer"),u7t.forEach(t),Z5r=r(jRe," \u2014 "),AH=n(jRe,"A",{href:!0});var b7t=s(AH);evr=r(b7t,"TFLongformerForSequenceClassification"),b7t.forEach(t),ovr=r(jRe," (Longformer model)"),jRe.forEach(t),rvr=i(ae),yM=n(ae,"LI",{});var DRe=s(yM);c5e=n(DRe,"STRONG",{});var v7t=s(c5e);tvr=r(v7t,"mobilebert"),v7t.forEach(t),avr=r(DRe," \u2014 "),yH=n(DRe,"A",{href:!0});var F7t=s(yH);nvr=r(F7t,"TFMobileBertForSequenceClassification"),F7t.forEach(t),svr=r(DRe," (MobileBERT model)"),DRe.forEach(t),lvr=i(ae),LM=n(ae,"LI",{});var GRe=s(LM);f5e=n(GRe,"STRONG",{});var T7t=s(f5e);ivr=r(T7t,"mpnet"),T7t.forEach(t),dvr=r(GRe," \u2014 "),LH=n(GRe,"A",{href:!0});var M7t=s(LH);cvr=r(M7t,"TFMPNetForSequenceClassification"),M7t.forEach(t),fvr=r(GRe," (MPNet model)"),GRe.forEach(t),mvr=i(ae),xM=n(ae,"LI",{});var ORe=s(xM);m5e=n(ORe,"STRONG",{});var E7t=s(m5e);gvr=r(E7t,"openai-gpt"),E7t.forEach(t),hvr=r(ORe," \u2014 "),xH=n(ORe,"A",{href:!0});var C7t=s(xH);pvr=r(C7t,"TFOpenAIGPTForSequenceClassification"),C7t.forEach(t),_vr=r(ORe," (OpenAI GPT model)"),ORe.forEach(t),uvr=i(ae),$M=n(ae,"LI",{});var VRe=s($M);g5e=n(VRe,"STRONG",{});var w7t=s(g5e);bvr=r(w7t,"rembert"),w7t.forEach(t),vvr=r(VRe," \u2014 "),$H=n(VRe,"A",{href:!0});var A7t=s($H);Fvr=r(A7t,"TFRemBertForSequenceClassification"),A7t.forEach(t),Tvr=r(VRe," (RemBERT model)"),VRe.forEach(t),Mvr=i(ae),kM=n(ae,"LI",{});var XRe=s(kM);h5e=n(XRe,"STRONG",{});var y7t=s(h5e);Evr=r(y7t,"roberta"),y7t.forEach(t),Cvr=r(XRe," \u2014 "),kH=n(XRe,"A",{href:!0});var L7t=s(kH);wvr=r(L7t,"TFRobertaForSequenceClassification"),L7t.forEach(t),Avr=r(XRe," (RoBERTa model)"),XRe.forEach(t),yvr=i(ae),SM=n(ae,"LI",{});var zRe=s(SM);p5e=n(zRe,"STRONG",{});var x7t=s(p5e);Lvr=r(x7t,"roformer"),x7t.forEach(t),xvr=r(zRe," \u2014 "),SH=n(zRe,"A",{href:!0});var $7t=s(SH);$vr=r($7t,"TFRoFormerForSequenceClassification"),$7t.forEach(t),kvr=r(zRe," (RoFormer model)"),zRe.forEach(t),Svr=i(ae),RM=n(ae,"LI",{});var WRe=s(RM);_5e=n(WRe,"STRONG",{});var k7t=s(_5e);Rvr=r(k7t,"tapas"),k7t.forEach(t),Pvr=r(WRe," \u2014 "),RH=n(WRe,"A",{href:!0});var S7t=s(RH);Bvr=r(S7t,"TFTapasForSequenceClassification"),S7t.forEach(t),Ivr=r(WRe," (TAPAS model)"),WRe.forEach(t),qvr=i(ae),PM=n(ae,"LI",{});var QRe=s(PM);u5e=n(QRe,"STRONG",{});var R7t=s(u5e);Nvr=r(R7t,"transfo-xl"),R7t.forEach(t),jvr=r(QRe," \u2014 "),PH=n(QRe,"A",{href:!0});var P7t=s(PH);Dvr=r(P7t,"TFTransfoXLForSequenceClassification"),P7t.forEach(t),Gvr=r(QRe," (Transformer-XL model)"),QRe.forEach(t),Ovr=i(ae),BM=n(ae,"LI",{});var HRe=s(BM);b5e=n(HRe,"STRONG",{});var B7t=s(b5e);Vvr=r(B7t,"xlm"),B7t.forEach(t),Xvr=r(HRe," \u2014 "),BH=n(HRe,"A",{href:!0});var I7t=s(BH);zvr=r(I7t,"TFXLMForSequenceClassification"),I7t.forEach(t),Wvr=r(HRe," (XLM model)"),HRe.forEach(t),Qvr=i(ae),IM=n(ae,"LI",{});var URe=s(IM);v5e=n(URe,"STRONG",{});var q7t=s(v5e);Hvr=r(q7t,"xlm-roberta"),q7t.forEach(t),Uvr=r(URe," \u2014 "),IH=n(URe,"A",{href:!0});var N7t=s(IH);Jvr=r(N7t,"TFXLMRobertaForSequenceClassification"),N7t.forEach(t),Yvr=r(URe," (XLM-RoBERTa model)"),URe.forEach(t),Kvr=i(ae),qM=n(ae,"LI",{});var JRe=s(qM);F5e=n(JRe,"STRONG",{});var j7t=s(F5e);Zvr=r(j7t,"xlnet"),j7t.forEach(t),eFr=r(JRe," \u2014 "),qH=n(JRe,"A",{href:!0});var D7t=s(qH);oFr=r(D7t,"TFXLNetForSequenceClassification"),D7t.forEach(t),rFr=r(JRe," (XLNet model)"),JRe.forEach(t),ae.forEach(t),tFr=i(Ll),T(NM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),TNe=i(f),cc=n(f,"H2",{class:!0});var yDe=s(cc);jM=n(yDe,"A",{id:!0,class:!0,href:!0});var G7t=s(jM);T5e=n(G7t,"SPAN",{});var O7t=s(T5e);T($8.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),aFr=i(yDe),M5e=n(yDe,"SPAN",{});var V7t=s(M5e);nFr=r(V7t,"TFAutoModelForMultipleChoice"),V7t.forEach(t),yDe.forEach(t),MNe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(k8.$$.fragment,xl),sFr=i(xl),fc=n(xl,"P",{});var eee=s(fc);lFr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NH=n(eee,"A",{href:!0});var X7t=s(NH);iFr=r(X7t,"from_pretrained()"),X7t.forEach(t),dFr=r(eee," class method or the "),jH=n(eee,"A",{href:!0});var z7t=s(jH);cFr=r(z7t,"from_config()"),z7t.forEach(t),fFr=r(eee,` class
method.`),eee.forEach(t),mFr=i(xl),S8=n(xl,"P",{});var LDe=s(S8);gFr=r(LDe,"This class cannot be instantiated directly using "),E5e=n(LDe,"CODE",{});var W7t=s(E5e);hFr=r(W7t,"__init__()"),W7t.forEach(t),pFr=r(LDe," (throws an error)."),LDe.forEach(t),_Fr=i(xl),Pt=n(xl,"DIV",{class:!0});var AA=s(Pt);T(R8.$$.fragment,AA),uFr=i(AA),C5e=n(AA,"P",{});var Q7t=s(C5e);bFr=r(Q7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q7t.forEach(t),vFr=i(AA),mc=n(AA,"P",{});var oee=s(mc);FFr=r(oee,`Note:
Loading a model from its configuration file does `),w5e=n(oee,"STRONG",{});var H7t=s(w5e);TFr=r(H7t,"not"),H7t.forEach(t),MFr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(oee,"A",{href:!0});var U7t=s(DH);EFr=r(U7t,"from_pretrained()"),U7t.forEach(t),CFr=r(oee," to load the model weights."),oee.forEach(t),wFr=i(AA),T(DM.$$.fragment,AA),AA.forEach(t),AFr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(P8.$$.fragment,$l),yFr=i($l),A5e=n($l,"P",{});var J7t=s(A5e);LFr=r(J7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J7t.forEach(t),xFr=i($l),sn=n($l,"P",{});var yA=s(sn);$Fr=r(yA,"The model class to instantiate is selected based on the "),y5e=n(yA,"CODE",{});var Y7t=s(y5e);kFr=r(Y7t,"model_type"),Y7t.forEach(t),SFr=r(yA,` property of the config object (either
passed as an argument or loaded from `),L5e=n(yA,"CODE",{});var K7t=s(L5e);RFr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),PFr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(yA,"CODE",{});var Z7t=s(x5e);BFr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),IFr=r(yA,":"),yA.forEach(t),qFr=i($l),he=n($l,"UL",{});var ue=s(he);GM=n(ue,"LI",{});var YRe=s(GM);$5e=n(YRe,"STRONG",{});var eMt=s($5e);NFr=r(eMt,"albert"),eMt.forEach(t),jFr=r(YRe," \u2014 "),GH=n(YRe,"A",{href:!0});var oMt=s(GH);DFr=r(oMt,"TFAlbertForMultipleChoice"),oMt.forEach(t),GFr=r(YRe," (ALBERT model)"),YRe.forEach(t),OFr=i(ue),OM=n(ue,"LI",{});var KRe=s(OM);k5e=n(KRe,"STRONG",{});var rMt=s(k5e);VFr=r(rMt,"bert"),rMt.forEach(t),XFr=r(KRe," \u2014 "),OH=n(KRe,"A",{href:!0});var tMt=s(OH);zFr=r(tMt,"TFBertForMultipleChoice"),tMt.forEach(t),WFr=r(KRe," (BERT model)"),KRe.forEach(t),QFr=i(ue),VM=n(ue,"LI",{});var ZRe=s(VM);S5e=n(ZRe,"STRONG",{});var aMt=s(S5e);HFr=r(aMt,"camembert"),aMt.forEach(t),UFr=r(ZRe," \u2014 "),VH=n(ZRe,"A",{href:!0});var nMt=s(VH);JFr=r(nMt,"TFCamembertForMultipleChoice"),nMt.forEach(t),YFr=r(ZRe," (CamemBERT model)"),ZRe.forEach(t),KFr=i(ue),XM=n(ue,"LI",{});var ePe=s(XM);R5e=n(ePe,"STRONG",{});var sMt=s(R5e);ZFr=r(sMt,"convbert"),sMt.forEach(t),eTr=r(ePe," \u2014 "),XH=n(ePe,"A",{href:!0});var lMt=s(XH);oTr=r(lMt,"TFConvBertForMultipleChoice"),lMt.forEach(t),rTr=r(ePe," (ConvBERT model)"),ePe.forEach(t),tTr=i(ue),zM=n(ue,"LI",{});var oPe=s(zM);P5e=n(oPe,"STRONG",{});var iMt=s(P5e);aTr=r(iMt,"distilbert"),iMt.forEach(t),nTr=r(oPe," \u2014 "),zH=n(oPe,"A",{href:!0});var dMt=s(zH);sTr=r(dMt,"TFDistilBertForMultipleChoice"),dMt.forEach(t),lTr=r(oPe," (DistilBERT model)"),oPe.forEach(t),iTr=i(ue),WM=n(ue,"LI",{});var rPe=s(WM);B5e=n(rPe,"STRONG",{});var cMt=s(B5e);dTr=r(cMt,"electra"),cMt.forEach(t),cTr=r(rPe," \u2014 "),WH=n(rPe,"A",{href:!0});var fMt=s(WH);fTr=r(fMt,"TFElectraForMultipleChoice"),fMt.forEach(t),mTr=r(rPe," (ELECTRA model)"),rPe.forEach(t),gTr=i(ue),QM=n(ue,"LI",{});var tPe=s(QM);I5e=n(tPe,"STRONG",{});var mMt=s(I5e);hTr=r(mMt,"flaubert"),mMt.forEach(t),pTr=r(tPe," \u2014 "),QH=n(tPe,"A",{href:!0});var gMt=s(QH);_Tr=r(gMt,"TFFlaubertForMultipleChoice"),gMt.forEach(t),uTr=r(tPe," (FlauBERT model)"),tPe.forEach(t),bTr=i(ue),HM=n(ue,"LI",{});var aPe=s(HM);q5e=n(aPe,"STRONG",{});var hMt=s(q5e);vTr=r(hMt,"funnel"),hMt.forEach(t),FTr=r(aPe," \u2014 "),HH=n(aPe,"A",{href:!0});var pMt=s(HH);TTr=r(pMt,"TFFunnelForMultipleChoice"),pMt.forEach(t),MTr=r(aPe," (Funnel Transformer model)"),aPe.forEach(t),ETr=i(ue),UM=n(ue,"LI",{});var nPe=s(UM);N5e=n(nPe,"STRONG",{});var _Mt=s(N5e);CTr=r(_Mt,"longformer"),_Mt.forEach(t),wTr=r(nPe," \u2014 "),UH=n(nPe,"A",{href:!0});var uMt=s(UH);ATr=r(uMt,"TFLongformerForMultipleChoice"),uMt.forEach(t),yTr=r(nPe," (Longformer model)"),nPe.forEach(t),LTr=i(ue),JM=n(ue,"LI",{});var sPe=s(JM);j5e=n(sPe,"STRONG",{});var bMt=s(j5e);xTr=r(bMt,"mobilebert"),bMt.forEach(t),$Tr=r(sPe," \u2014 "),JH=n(sPe,"A",{href:!0});var vMt=s(JH);kTr=r(vMt,"TFMobileBertForMultipleChoice"),vMt.forEach(t),STr=r(sPe," (MobileBERT model)"),sPe.forEach(t),RTr=i(ue),YM=n(ue,"LI",{});var lPe=s(YM);D5e=n(lPe,"STRONG",{});var FMt=s(D5e);PTr=r(FMt,"mpnet"),FMt.forEach(t),BTr=r(lPe," \u2014 "),YH=n(lPe,"A",{href:!0});var TMt=s(YH);ITr=r(TMt,"TFMPNetForMultipleChoice"),TMt.forEach(t),qTr=r(lPe," (MPNet model)"),lPe.forEach(t),NTr=i(ue),KM=n(ue,"LI",{});var iPe=s(KM);G5e=n(iPe,"STRONG",{});var MMt=s(G5e);jTr=r(MMt,"rembert"),MMt.forEach(t),DTr=r(iPe," \u2014 "),KH=n(iPe,"A",{href:!0});var EMt=s(KH);GTr=r(EMt,"TFRemBertForMultipleChoice"),EMt.forEach(t),OTr=r(iPe," (RemBERT model)"),iPe.forEach(t),VTr=i(ue),ZM=n(ue,"LI",{});var dPe=s(ZM);O5e=n(dPe,"STRONG",{});var CMt=s(O5e);XTr=r(CMt,"roberta"),CMt.forEach(t),zTr=r(dPe," \u2014 "),ZH=n(dPe,"A",{href:!0});var wMt=s(ZH);WTr=r(wMt,"TFRobertaForMultipleChoice"),wMt.forEach(t),QTr=r(dPe," (RoBERTa model)"),dPe.forEach(t),HTr=i(ue),eE=n(ue,"LI",{});var cPe=s(eE);V5e=n(cPe,"STRONG",{});var AMt=s(V5e);UTr=r(AMt,"roformer"),AMt.forEach(t),JTr=r(cPe," \u2014 "),eU=n(cPe,"A",{href:!0});var yMt=s(eU);YTr=r(yMt,"TFRoFormerForMultipleChoice"),yMt.forEach(t),KTr=r(cPe," (RoFormer model)"),cPe.forEach(t),ZTr=i(ue),oE=n(ue,"LI",{});var fPe=s(oE);X5e=n(fPe,"STRONG",{});var LMt=s(X5e);e7r=r(LMt,"xlm"),LMt.forEach(t),o7r=r(fPe," \u2014 "),oU=n(fPe,"A",{href:!0});var xMt=s(oU);r7r=r(xMt,"TFXLMForMultipleChoice"),xMt.forEach(t),t7r=r(fPe," (XLM model)"),fPe.forEach(t),a7r=i(ue),rE=n(ue,"LI",{});var mPe=s(rE);z5e=n(mPe,"STRONG",{});var $Mt=s(z5e);n7r=r($Mt,"xlm-roberta"),$Mt.forEach(t),s7r=r(mPe," \u2014 "),rU=n(mPe,"A",{href:!0});var kMt=s(rU);l7r=r(kMt,"TFXLMRobertaForMultipleChoice"),kMt.forEach(t),i7r=r(mPe," (XLM-RoBERTa model)"),mPe.forEach(t),d7r=i(ue),tE=n(ue,"LI",{});var gPe=s(tE);W5e=n(gPe,"STRONG",{});var SMt=s(W5e);c7r=r(SMt,"xlnet"),SMt.forEach(t),f7r=r(gPe," \u2014 "),tU=n(gPe,"A",{href:!0});var RMt=s(tU);m7r=r(RMt,"TFXLNetForMultipleChoice"),RMt.forEach(t),g7r=r(gPe," (XLNet model)"),gPe.forEach(t),ue.forEach(t),h7r=i($l),T(aE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),ENe=i(f),gc=n(f,"H2",{class:!0});var xDe=s(gc);nE=n(xDe,"A",{id:!0,class:!0,href:!0});var PMt=s(nE);Q5e=n(PMt,"SPAN",{});var BMt=s(Q5e);T(B8.$$.fragment,BMt),BMt.forEach(t),PMt.forEach(t),p7r=i(xDe),H5e=n(xDe,"SPAN",{});var IMt=s(H5e);_7r=r(IMt,"TFAutoModelForNextSentencePrediction"),IMt.forEach(t),xDe.forEach(t),CNe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(I8.$$.fragment,kl),u7r=i(kl),hc=n(kl,"P",{});var ree=s(hc);b7r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=n(ree,"A",{href:!0});var qMt=s(aU);v7r=r(qMt,"from_pretrained()"),qMt.forEach(t),F7r=r(ree," class method or the "),nU=n(ree,"A",{href:!0});var NMt=s(nU);T7r=r(NMt,"from_config()"),NMt.forEach(t),M7r=r(ree,` class
method.`),ree.forEach(t),E7r=i(kl),q8=n(kl,"P",{});var $De=s(q8);C7r=r($De,"This class cannot be instantiated directly using "),U5e=n($De,"CODE",{});var jMt=s(U5e);w7r=r(jMt,"__init__()"),jMt.forEach(t),A7r=r($De," (throws an error)."),$De.forEach(t),y7r=i(kl),Bt=n(kl,"DIV",{class:!0});var LA=s(Bt);T(N8.$$.fragment,LA),L7r=i(LA),J5e=n(LA,"P",{});var DMt=s(J5e);x7r=r(DMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DMt.forEach(t),$7r=i(LA),pc=n(LA,"P",{});var tee=s(pc);k7r=r(tee,`Note:
Loading a model from its configuration file does `),Y5e=n(tee,"STRONG",{});var GMt=s(Y5e);S7r=r(GMt,"not"),GMt.forEach(t),R7r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(tee,"A",{href:!0});var OMt=s(sU);P7r=r(OMt,"from_pretrained()"),OMt.forEach(t),B7r=r(tee," to load the model weights."),tee.forEach(t),I7r=i(LA),T(sE.$$.fragment,LA),LA.forEach(t),q7r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(j8.$$.fragment,Sl),N7r=i(Sl),K5e=n(Sl,"P",{});var VMt=s(K5e);j7r=r(VMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VMt.forEach(t),D7r=i(Sl),ln=n(Sl,"P",{});var xA=s(ln);G7r=r(xA,"The model class to instantiate is selected based on the "),Z5e=n(xA,"CODE",{});var XMt=s(Z5e);O7r=r(XMt,"model_type"),XMt.forEach(t),V7r=r(xA,` property of the config object (either
passed as an argument or loaded from `),eve=n(xA,"CODE",{});var zMt=s(eve);X7r=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),z7r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(xA,"CODE",{});var WMt=s(ove);W7r=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),Q7r=r(xA,":"),xA.forEach(t),H7r=i(Sl),D8=n(Sl,"UL",{});var kDe=s(D8);lE=n(kDe,"LI",{});var hPe=s(lE);rve=n(hPe,"STRONG",{});var QMt=s(rve);U7r=r(QMt,"bert"),QMt.forEach(t),J7r=r(hPe," \u2014 "),lU=n(hPe,"A",{href:!0});var HMt=s(lU);Y7r=r(HMt,"TFBertForNextSentencePrediction"),HMt.forEach(t),K7r=r(hPe," (BERT model)"),hPe.forEach(t),Z7r=i(kDe),iE=n(kDe,"LI",{});var pPe=s(iE);tve=n(pPe,"STRONG",{});var UMt=s(tve);eMr=r(UMt,"mobilebert"),UMt.forEach(t),oMr=r(pPe," \u2014 "),iU=n(pPe,"A",{href:!0});var JMt=s(iU);rMr=r(JMt,"TFMobileBertForNextSentencePrediction"),JMt.forEach(t),tMr=r(pPe," (MobileBERT model)"),pPe.forEach(t),kDe.forEach(t),aMr=i(Sl),T(dE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),wNe=i(f),_c=n(f,"H2",{class:!0});var SDe=s(_c);cE=n(SDe,"A",{id:!0,class:!0,href:!0});var YMt=s(cE);ave=n(YMt,"SPAN",{});var KMt=s(ave);T(G8.$$.fragment,KMt),KMt.forEach(t),YMt.forEach(t),nMr=i(SDe),nve=n(SDe,"SPAN",{});var ZMt=s(nve);sMr=r(ZMt,"TFAutoModelForTableQuestionAnswering"),ZMt.forEach(t),SDe.forEach(t),ANe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(O8.$$.fragment,Rl),lMr=i(Rl),uc=n(Rl,"P",{});var aee=s(uc);iMr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dU=n(aee,"A",{href:!0});var eEt=s(dU);dMr=r(eEt,"from_pretrained()"),eEt.forEach(t),cMr=r(aee," class method or the "),cU=n(aee,"A",{href:!0});var oEt=s(cU);fMr=r(oEt,"from_config()"),oEt.forEach(t),mMr=r(aee,` class
method.`),aee.forEach(t),gMr=i(Rl),V8=n(Rl,"P",{});var RDe=s(V8);hMr=r(RDe,"This class cannot be instantiated directly using "),sve=n(RDe,"CODE",{});var rEt=s(sve);pMr=r(rEt,"__init__()"),rEt.forEach(t),_Mr=r(RDe," (throws an error)."),RDe.forEach(t),uMr=i(Rl),It=n(Rl,"DIV",{class:!0});var $A=s(It);T(X8.$$.fragment,$A),bMr=i($A),lve=n($A,"P",{});var tEt=s(lve);vMr=r(tEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tEt.forEach(t),FMr=i($A),bc=n($A,"P",{});var nee=s(bc);TMr=r(nee,`Note:
Loading a model from its configuration file does `),ive=n(nee,"STRONG",{});var aEt=s(ive);MMr=r(aEt,"not"),aEt.forEach(t),EMr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(nee,"A",{href:!0});var nEt=s(fU);CMr=r(nEt,"from_pretrained()"),nEt.forEach(t),wMr=r(nee," to load the model weights."),nee.forEach(t),AMr=i($A),T(fE.$$.fragment,$A),$A.forEach(t),yMr=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(z8.$$.fragment,Pl),LMr=i(Pl),dve=n(Pl,"P",{});var sEt=s(dve);xMr=r(sEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sEt.forEach(t),$Mr=i(Pl),dn=n(Pl,"P",{});var kA=s(dn);kMr=r(kA,"The model class to instantiate is selected based on the "),cve=n(kA,"CODE",{});var lEt=s(cve);SMr=r(lEt,"model_type"),lEt.forEach(t),RMr=r(kA,` property of the config object (either
passed as an argument or loaded from `),fve=n(kA,"CODE",{});var iEt=s(fve);PMr=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),BMr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(kA,"CODE",{});var dEt=s(mve);IMr=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),qMr=r(kA,":"),kA.forEach(t),NMr=i(Pl),gve=n(Pl,"UL",{});var cEt=s(gve);mE=n(cEt,"LI",{});var _Pe=s(mE);hve=n(_Pe,"STRONG",{});var fEt=s(hve);jMr=r(fEt,"tapas"),fEt.forEach(t),DMr=r(_Pe," \u2014 "),mU=n(_Pe,"A",{href:!0});var mEt=s(mU);GMr=r(mEt,"TFTapasForQuestionAnswering"),mEt.forEach(t),OMr=r(_Pe," (TAPAS model)"),_Pe.forEach(t),cEt.forEach(t),VMr=i(Pl),T(gE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),yNe=i(f),vc=n(f,"H2",{class:!0});var PDe=s(vc);hE=n(PDe,"A",{id:!0,class:!0,href:!0});var gEt=s(hE);pve=n(gEt,"SPAN",{});var hEt=s(pve);T(W8.$$.fragment,hEt),hEt.forEach(t),gEt.forEach(t),XMr=i(PDe),_ve=n(PDe,"SPAN",{});var pEt=s(_ve);zMr=r(pEt,"TFAutoModelForTokenClassification"),pEt.forEach(t),PDe.forEach(t),LNe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(Q8.$$.fragment,Bl),WMr=i(Bl),Fc=n(Bl,"P",{});var see=s(Fc);QMr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gU=n(see,"A",{href:!0});var _Et=s(gU);HMr=r(_Et,"from_pretrained()"),_Et.forEach(t),UMr=r(see," class method or the "),hU=n(see,"A",{href:!0});var uEt=s(hU);JMr=r(uEt,"from_config()"),uEt.forEach(t),YMr=r(see,` class
method.`),see.forEach(t),KMr=i(Bl),H8=n(Bl,"P",{});var BDe=s(H8);ZMr=r(BDe,"This class cannot be instantiated directly using "),uve=n(BDe,"CODE",{});var bEt=s(uve);eEr=r(bEt,"__init__()"),bEt.forEach(t),oEr=r(BDe," (throws an error)."),BDe.forEach(t),rEr=i(Bl),qt=n(Bl,"DIV",{class:!0});var SA=s(qt);T(U8.$$.fragment,SA),tEr=i(SA),bve=n(SA,"P",{});var vEt=s(bve);aEr=r(vEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vEt.forEach(t),nEr=i(SA),Tc=n(SA,"P",{});var lee=s(Tc);sEr=r(lee,`Note:
Loading a model from its configuration file does `),vve=n(lee,"STRONG",{});var FEt=s(vve);lEr=r(FEt,"not"),FEt.forEach(t),iEr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(lee,"A",{href:!0});var TEt=s(pU);dEr=r(TEt,"from_pretrained()"),TEt.forEach(t),cEr=r(lee," to load the model weights."),lee.forEach(t),fEr=i(SA),T(pE.$$.fragment,SA),SA.forEach(t),mEr=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(J8.$$.fragment,Il),gEr=i(Il),Fve=n(Il,"P",{});var MEt=s(Fve);hEr=r(MEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MEt.forEach(t),pEr=i(Il),cn=n(Il,"P",{});var RA=s(cn);_Er=r(RA,"The model class to instantiate is selected based on the "),Tve=n(RA,"CODE",{});var EEt=s(Tve);uEr=r(EEt,"model_type"),EEt.forEach(t),bEr=r(RA,` property of the config object (either
passed as an argument or loaded from `),Mve=n(RA,"CODE",{});var CEt=s(Mve);vEr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),FEr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(RA,"CODE",{});var wEt=s(Eve);TEr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),MEr=r(RA,":"),RA.forEach(t),EEr=i(Il),de=n(Il,"UL",{});var me=s(de);_E=n(me,"LI",{});var uPe=s(_E);Cve=n(uPe,"STRONG",{});var AEt=s(Cve);CEr=r(AEt,"albert"),AEt.forEach(t),wEr=r(uPe," \u2014 "),_U=n(uPe,"A",{href:!0});var yEt=s(_U);AEr=r(yEt,"TFAlbertForTokenClassification"),yEt.forEach(t),yEr=r(uPe," (ALBERT model)"),uPe.forEach(t),LEr=i(me),uE=n(me,"LI",{});var bPe=s(uE);wve=n(bPe,"STRONG",{});var LEt=s(wve);xEr=r(LEt,"bert"),LEt.forEach(t),$Er=r(bPe," \u2014 "),uU=n(bPe,"A",{href:!0});var xEt=s(uU);kEr=r(xEt,"TFBertForTokenClassification"),xEt.forEach(t),SEr=r(bPe," (BERT model)"),bPe.forEach(t),REr=i(me),bE=n(me,"LI",{});var vPe=s(bE);Ave=n(vPe,"STRONG",{});var $Et=s(Ave);PEr=r($Et,"camembert"),$Et.forEach(t),BEr=r(vPe," \u2014 "),bU=n(vPe,"A",{href:!0});var kEt=s(bU);IEr=r(kEt,"TFCamembertForTokenClassification"),kEt.forEach(t),qEr=r(vPe," (CamemBERT model)"),vPe.forEach(t),NEr=i(me),vE=n(me,"LI",{});var FPe=s(vE);yve=n(FPe,"STRONG",{});var SEt=s(yve);jEr=r(SEt,"convbert"),SEt.forEach(t),DEr=r(FPe," \u2014 "),vU=n(FPe,"A",{href:!0});var REt=s(vU);GEr=r(REt,"TFConvBertForTokenClassification"),REt.forEach(t),OEr=r(FPe," (ConvBERT model)"),FPe.forEach(t),VEr=i(me),FE=n(me,"LI",{});var TPe=s(FE);Lve=n(TPe,"STRONG",{});var PEt=s(Lve);XEr=r(PEt,"deberta"),PEt.forEach(t),zEr=r(TPe," \u2014 "),FU=n(TPe,"A",{href:!0});var BEt=s(FU);WEr=r(BEt,"TFDebertaForTokenClassification"),BEt.forEach(t),QEr=r(TPe," (DeBERTa model)"),TPe.forEach(t),HEr=i(me),TE=n(me,"LI",{});var MPe=s(TE);xve=n(MPe,"STRONG",{});var IEt=s(xve);UEr=r(IEt,"deberta-v2"),IEt.forEach(t),JEr=r(MPe," \u2014 "),TU=n(MPe,"A",{href:!0});var qEt=s(TU);YEr=r(qEt,"TFDebertaV2ForTokenClassification"),qEt.forEach(t),KEr=r(MPe," (DeBERTa-v2 model)"),MPe.forEach(t),ZEr=i(me),ME=n(me,"LI",{});var EPe=s(ME);$ve=n(EPe,"STRONG",{});var NEt=s($ve);eCr=r(NEt,"distilbert"),NEt.forEach(t),oCr=r(EPe," \u2014 "),MU=n(EPe,"A",{href:!0});var jEt=s(MU);rCr=r(jEt,"TFDistilBertForTokenClassification"),jEt.forEach(t),tCr=r(EPe," (DistilBERT model)"),EPe.forEach(t),aCr=i(me),EE=n(me,"LI",{});var CPe=s(EE);kve=n(CPe,"STRONG",{});var DEt=s(kve);nCr=r(DEt,"electra"),DEt.forEach(t),sCr=r(CPe," \u2014 "),EU=n(CPe,"A",{href:!0});var GEt=s(EU);lCr=r(GEt,"TFElectraForTokenClassification"),GEt.forEach(t),iCr=r(CPe," (ELECTRA model)"),CPe.forEach(t),dCr=i(me),CE=n(me,"LI",{});var wPe=s(CE);Sve=n(wPe,"STRONG",{});var OEt=s(Sve);cCr=r(OEt,"flaubert"),OEt.forEach(t),fCr=r(wPe," \u2014 "),CU=n(wPe,"A",{href:!0});var VEt=s(CU);mCr=r(VEt,"TFFlaubertForTokenClassification"),VEt.forEach(t),gCr=r(wPe," (FlauBERT model)"),wPe.forEach(t),hCr=i(me),wE=n(me,"LI",{});var APe=s(wE);Rve=n(APe,"STRONG",{});var XEt=s(Rve);pCr=r(XEt,"funnel"),XEt.forEach(t),_Cr=r(APe," \u2014 "),wU=n(APe,"A",{href:!0});var zEt=s(wU);uCr=r(zEt,"TFFunnelForTokenClassification"),zEt.forEach(t),bCr=r(APe," (Funnel Transformer model)"),APe.forEach(t),vCr=i(me),AE=n(me,"LI",{});var yPe=s(AE);Pve=n(yPe,"STRONG",{});var WEt=s(Pve);FCr=r(WEt,"layoutlm"),WEt.forEach(t),TCr=r(yPe," \u2014 "),AU=n(yPe,"A",{href:!0});var QEt=s(AU);MCr=r(QEt,"TFLayoutLMForTokenClassification"),QEt.forEach(t),ECr=r(yPe," (LayoutLM model)"),yPe.forEach(t),CCr=i(me),yE=n(me,"LI",{});var LPe=s(yE);Bve=n(LPe,"STRONG",{});var HEt=s(Bve);wCr=r(HEt,"longformer"),HEt.forEach(t),ACr=r(LPe," \u2014 "),yU=n(LPe,"A",{href:!0});var UEt=s(yU);yCr=r(UEt,"TFLongformerForTokenClassification"),UEt.forEach(t),LCr=r(LPe," (Longformer model)"),LPe.forEach(t),xCr=i(me),LE=n(me,"LI",{});var xPe=s(LE);Ive=n(xPe,"STRONG",{});var JEt=s(Ive);$Cr=r(JEt,"mobilebert"),JEt.forEach(t),kCr=r(xPe," \u2014 "),LU=n(xPe,"A",{href:!0});var YEt=s(LU);SCr=r(YEt,"TFMobileBertForTokenClassification"),YEt.forEach(t),RCr=r(xPe," (MobileBERT model)"),xPe.forEach(t),PCr=i(me),xE=n(me,"LI",{});var $Pe=s(xE);qve=n($Pe,"STRONG",{});var KEt=s(qve);BCr=r(KEt,"mpnet"),KEt.forEach(t),ICr=r($Pe," \u2014 "),xU=n($Pe,"A",{href:!0});var ZEt=s(xU);qCr=r(ZEt,"TFMPNetForTokenClassification"),ZEt.forEach(t),NCr=r($Pe," (MPNet model)"),$Pe.forEach(t),jCr=i(me),$E=n(me,"LI",{});var kPe=s($E);Nve=n(kPe,"STRONG",{});var eCt=s(Nve);DCr=r(eCt,"rembert"),eCt.forEach(t),GCr=r(kPe," \u2014 "),$U=n(kPe,"A",{href:!0});var oCt=s($U);OCr=r(oCt,"TFRemBertForTokenClassification"),oCt.forEach(t),VCr=r(kPe," (RemBERT model)"),kPe.forEach(t),XCr=i(me),kE=n(me,"LI",{});var SPe=s(kE);jve=n(SPe,"STRONG",{});var rCt=s(jve);zCr=r(rCt,"roberta"),rCt.forEach(t),WCr=r(SPe," \u2014 "),kU=n(SPe,"A",{href:!0});var tCt=s(kU);QCr=r(tCt,"TFRobertaForTokenClassification"),tCt.forEach(t),HCr=r(SPe," (RoBERTa model)"),SPe.forEach(t),UCr=i(me),SE=n(me,"LI",{});var RPe=s(SE);Dve=n(RPe,"STRONG",{});var aCt=s(Dve);JCr=r(aCt,"roformer"),aCt.forEach(t),YCr=r(RPe," \u2014 "),SU=n(RPe,"A",{href:!0});var nCt=s(SU);KCr=r(nCt,"TFRoFormerForTokenClassification"),nCt.forEach(t),ZCr=r(RPe," (RoFormer model)"),RPe.forEach(t),e3r=i(me),RE=n(me,"LI",{});var PPe=s(RE);Gve=n(PPe,"STRONG",{});var sCt=s(Gve);o3r=r(sCt,"xlm"),sCt.forEach(t),r3r=r(PPe," \u2014 "),RU=n(PPe,"A",{href:!0});var lCt=s(RU);t3r=r(lCt,"TFXLMForTokenClassification"),lCt.forEach(t),a3r=r(PPe," (XLM model)"),PPe.forEach(t),n3r=i(me),PE=n(me,"LI",{});var BPe=s(PE);Ove=n(BPe,"STRONG",{});var iCt=s(Ove);s3r=r(iCt,"xlm-roberta"),iCt.forEach(t),l3r=r(BPe," \u2014 "),PU=n(BPe,"A",{href:!0});var dCt=s(PU);i3r=r(dCt,"TFXLMRobertaForTokenClassification"),dCt.forEach(t),d3r=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),c3r=i(me),BE=n(me,"LI",{});var IPe=s(BE);Vve=n(IPe,"STRONG",{});var cCt=s(Vve);f3r=r(cCt,"xlnet"),cCt.forEach(t),m3r=r(IPe," \u2014 "),BU=n(IPe,"A",{href:!0});var fCt=s(BU);g3r=r(fCt,"TFXLNetForTokenClassification"),fCt.forEach(t),h3r=r(IPe," (XLNet model)"),IPe.forEach(t),me.forEach(t),p3r=i(Il),T(IE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),xNe=i(f),Mc=n(f,"H2",{class:!0});var IDe=s(Mc);qE=n(IDe,"A",{id:!0,class:!0,href:!0});var mCt=s(qE);Xve=n(mCt,"SPAN",{});var gCt=s(Xve);T(Y8.$$.fragment,gCt),gCt.forEach(t),mCt.forEach(t),_3r=i(IDe),zve=n(IDe,"SPAN",{});var hCt=s(zve);u3r=r(hCt,"TFAutoModelForQuestionAnswering"),hCt.forEach(t),IDe.forEach(t),$Ne=i(f),ir=n(f,"DIV",{class:!0});var ql=s(ir);T(K8.$$.fragment,ql),b3r=i(ql),Ec=n(ql,"P",{});var iee=s(Ec);v3r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IU=n(iee,"A",{href:!0});var pCt=s(IU);F3r=r(pCt,"from_pretrained()"),pCt.forEach(t),T3r=r(iee," class method or the "),qU=n(iee,"A",{href:!0});var _Ct=s(qU);M3r=r(_Ct,"from_config()"),_Ct.forEach(t),E3r=r(iee,` class
method.`),iee.forEach(t),C3r=i(ql),Z8=n(ql,"P",{});var qDe=s(Z8);w3r=r(qDe,"This class cannot be instantiated directly using "),Wve=n(qDe,"CODE",{});var uCt=s(Wve);A3r=r(uCt,"__init__()"),uCt.forEach(t),y3r=r(qDe," (throws an error)."),qDe.forEach(t),L3r=i(ql),Nt=n(ql,"DIV",{class:!0});var PA=s(Nt);T(e9.$$.fragment,PA),x3r=i(PA),Qve=n(PA,"P",{});var bCt=s(Qve);$3r=r(bCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bCt.forEach(t),k3r=i(PA),Cc=n(PA,"P",{});var dee=s(Cc);S3r=r(dee,`Note:
Loading a model from its configuration file does `),Hve=n(dee,"STRONG",{});var vCt=s(Hve);R3r=r(vCt,"not"),vCt.forEach(t),P3r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(dee,"A",{href:!0});var FCt=s(NU);B3r=r(FCt,"from_pretrained()"),FCt.forEach(t),I3r=r(dee," to load the model weights."),dee.forEach(t),q3r=i(PA),T(NE.$$.fragment,PA),PA.forEach(t),N3r=i(ql),Ir=n(ql,"DIV",{class:!0});var Nl=s(Ir);T(o9.$$.fragment,Nl),j3r=i(Nl),Uve=n(Nl,"P",{});var TCt=s(Uve);D3r=r(TCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TCt.forEach(t),G3r=i(Nl),fn=n(Nl,"P",{});var BA=s(fn);O3r=r(BA,"The model class to instantiate is selected based on the "),Jve=n(BA,"CODE",{});var MCt=s(Jve);V3r=r(MCt,"model_type"),MCt.forEach(t),X3r=r(BA,` property of the config object (either
passed as an argument or loaded from `),Yve=n(BA,"CODE",{});var ECt=s(Yve);z3r=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),W3r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(BA,"CODE",{});var CCt=s(Kve);Q3r=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),H3r=r(BA,":"),BA.forEach(t),U3r=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);jE=n(ge,"LI",{});var qPe=s(jE);Zve=n(qPe,"STRONG",{});var wCt=s(Zve);J3r=r(wCt,"albert"),wCt.forEach(t),Y3r=r(qPe," \u2014 "),jU=n(qPe,"A",{href:!0});var ACt=s(jU);K3r=r(ACt,"TFAlbertForQuestionAnswering"),ACt.forEach(t),Z3r=r(qPe," (ALBERT model)"),qPe.forEach(t),ewr=i(ge),DE=n(ge,"LI",{});var NPe=s(DE);eFe=n(NPe,"STRONG",{});var yCt=s(eFe);owr=r(yCt,"bert"),yCt.forEach(t),rwr=r(NPe," \u2014 "),DU=n(NPe,"A",{href:!0});var LCt=s(DU);twr=r(LCt,"TFBertForQuestionAnswering"),LCt.forEach(t),awr=r(NPe," (BERT model)"),NPe.forEach(t),nwr=i(ge),GE=n(ge,"LI",{});var jPe=s(GE);oFe=n(jPe,"STRONG",{});var xCt=s(oFe);swr=r(xCt,"camembert"),xCt.forEach(t),lwr=r(jPe," \u2014 "),GU=n(jPe,"A",{href:!0});var $Ct=s(GU);iwr=r($Ct,"TFCamembertForQuestionAnswering"),$Ct.forEach(t),dwr=r(jPe," (CamemBERT model)"),jPe.forEach(t),cwr=i(ge),OE=n(ge,"LI",{});var DPe=s(OE);rFe=n(DPe,"STRONG",{});var kCt=s(rFe);fwr=r(kCt,"convbert"),kCt.forEach(t),mwr=r(DPe," \u2014 "),OU=n(DPe,"A",{href:!0});var SCt=s(OU);gwr=r(SCt,"TFConvBertForQuestionAnswering"),SCt.forEach(t),hwr=r(DPe," (ConvBERT model)"),DPe.forEach(t),pwr=i(ge),VE=n(ge,"LI",{});var GPe=s(VE);tFe=n(GPe,"STRONG",{});var RCt=s(tFe);_wr=r(RCt,"deberta"),RCt.forEach(t),uwr=r(GPe," \u2014 "),VU=n(GPe,"A",{href:!0});var PCt=s(VU);bwr=r(PCt,"TFDebertaForQuestionAnswering"),PCt.forEach(t),vwr=r(GPe," (DeBERTa model)"),GPe.forEach(t),Fwr=i(ge),XE=n(ge,"LI",{});var OPe=s(XE);aFe=n(OPe,"STRONG",{});var BCt=s(aFe);Twr=r(BCt,"deberta-v2"),BCt.forEach(t),Mwr=r(OPe," \u2014 "),XU=n(OPe,"A",{href:!0});var ICt=s(XU);Ewr=r(ICt,"TFDebertaV2ForQuestionAnswering"),ICt.forEach(t),Cwr=r(OPe," (DeBERTa-v2 model)"),OPe.forEach(t),wwr=i(ge),zE=n(ge,"LI",{});var VPe=s(zE);nFe=n(VPe,"STRONG",{});var qCt=s(nFe);Awr=r(qCt,"distilbert"),qCt.forEach(t),ywr=r(VPe," \u2014 "),zU=n(VPe,"A",{href:!0});var NCt=s(zU);Lwr=r(NCt,"TFDistilBertForQuestionAnswering"),NCt.forEach(t),xwr=r(VPe," (DistilBERT model)"),VPe.forEach(t),$wr=i(ge),WE=n(ge,"LI",{});var XPe=s(WE);sFe=n(XPe,"STRONG",{});var jCt=s(sFe);kwr=r(jCt,"electra"),jCt.forEach(t),Swr=r(XPe," \u2014 "),WU=n(XPe,"A",{href:!0});var DCt=s(WU);Rwr=r(DCt,"TFElectraForQuestionAnswering"),DCt.forEach(t),Pwr=r(XPe," (ELECTRA model)"),XPe.forEach(t),Bwr=i(ge),QE=n(ge,"LI",{});var zPe=s(QE);lFe=n(zPe,"STRONG",{});var GCt=s(lFe);Iwr=r(GCt,"flaubert"),GCt.forEach(t),qwr=r(zPe," \u2014 "),QU=n(zPe,"A",{href:!0});var OCt=s(QU);Nwr=r(OCt,"TFFlaubertForQuestionAnsweringSimple"),OCt.forEach(t),jwr=r(zPe," (FlauBERT model)"),zPe.forEach(t),Dwr=i(ge),HE=n(ge,"LI",{});var WPe=s(HE);iFe=n(WPe,"STRONG",{});var VCt=s(iFe);Gwr=r(VCt,"funnel"),VCt.forEach(t),Owr=r(WPe," \u2014 "),HU=n(WPe,"A",{href:!0});var XCt=s(HU);Vwr=r(XCt,"TFFunnelForQuestionAnswering"),XCt.forEach(t),Xwr=r(WPe," (Funnel Transformer model)"),WPe.forEach(t),zwr=i(ge),UE=n(ge,"LI",{});var QPe=s(UE);dFe=n(QPe,"STRONG",{});var zCt=s(dFe);Wwr=r(zCt,"gptj"),zCt.forEach(t),Qwr=r(QPe," \u2014 "),UU=n(QPe,"A",{href:!0});var WCt=s(UU);Hwr=r(WCt,"TFGPTJForQuestionAnswering"),WCt.forEach(t),Uwr=r(QPe," (GPT-J model)"),QPe.forEach(t),Jwr=i(ge),JE=n(ge,"LI",{});var HPe=s(JE);cFe=n(HPe,"STRONG",{});var QCt=s(cFe);Ywr=r(QCt,"longformer"),QCt.forEach(t),Kwr=r(HPe," \u2014 "),JU=n(HPe,"A",{href:!0});var HCt=s(JU);Zwr=r(HCt,"TFLongformerForQuestionAnswering"),HCt.forEach(t),e0r=r(HPe," (Longformer model)"),HPe.forEach(t),o0r=i(ge),YE=n(ge,"LI",{});var UPe=s(YE);fFe=n(UPe,"STRONG",{});var UCt=s(fFe);r0r=r(UCt,"mobilebert"),UCt.forEach(t),t0r=r(UPe," \u2014 "),YU=n(UPe,"A",{href:!0});var JCt=s(YU);a0r=r(JCt,"TFMobileBertForQuestionAnswering"),JCt.forEach(t),n0r=r(UPe," (MobileBERT model)"),UPe.forEach(t),s0r=i(ge),KE=n(ge,"LI",{});var JPe=s(KE);mFe=n(JPe,"STRONG",{});var YCt=s(mFe);l0r=r(YCt,"mpnet"),YCt.forEach(t),i0r=r(JPe," \u2014 "),KU=n(JPe,"A",{href:!0});var KCt=s(KU);d0r=r(KCt,"TFMPNetForQuestionAnswering"),KCt.forEach(t),c0r=r(JPe," (MPNet model)"),JPe.forEach(t),f0r=i(ge),ZE=n(ge,"LI",{});var YPe=s(ZE);gFe=n(YPe,"STRONG",{});var ZCt=s(gFe);m0r=r(ZCt,"rembert"),ZCt.forEach(t),g0r=r(YPe," \u2014 "),ZU=n(YPe,"A",{href:!0});var e3t=s(ZU);h0r=r(e3t,"TFRemBertForQuestionAnswering"),e3t.forEach(t),p0r=r(YPe," (RemBERT model)"),YPe.forEach(t),_0r=i(ge),eC=n(ge,"LI",{});var KPe=s(eC);hFe=n(KPe,"STRONG",{});var o3t=s(hFe);u0r=r(o3t,"roberta"),o3t.forEach(t),b0r=r(KPe," \u2014 "),eJ=n(KPe,"A",{href:!0});var r3t=s(eJ);v0r=r(r3t,"TFRobertaForQuestionAnswering"),r3t.forEach(t),F0r=r(KPe," (RoBERTa model)"),KPe.forEach(t),T0r=i(ge),oC=n(ge,"LI",{});var ZPe=s(oC);pFe=n(ZPe,"STRONG",{});var t3t=s(pFe);M0r=r(t3t,"roformer"),t3t.forEach(t),E0r=r(ZPe," \u2014 "),oJ=n(ZPe,"A",{href:!0});var a3t=s(oJ);C0r=r(a3t,"TFRoFormerForQuestionAnswering"),a3t.forEach(t),w0r=r(ZPe," (RoFormer model)"),ZPe.forEach(t),A0r=i(ge),rC=n(ge,"LI",{});var eBe=s(rC);_Fe=n(eBe,"STRONG",{});var n3t=s(_Fe);y0r=r(n3t,"xlm"),n3t.forEach(t),L0r=r(eBe," \u2014 "),rJ=n(eBe,"A",{href:!0});var s3t=s(rJ);x0r=r(s3t,"TFXLMForQuestionAnsweringSimple"),s3t.forEach(t),$0r=r(eBe," (XLM model)"),eBe.forEach(t),k0r=i(ge),tC=n(ge,"LI",{});var oBe=s(tC);uFe=n(oBe,"STRONG",{});var l3t=s(uFe);S0r=r(l3t,"xlm-roberta"),l3t.forEach(t),R0r=r(oBe," \u2014 "),tJ=n(oBe,"A",{href:!0});var i3t=s(tJ);P0r=r(i3t,"TFXLMRobertaForQuestionAnswering"),i3t.forEach(t),B0r=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),I0r=i(ge),aC=n(ge,"LI",{});var rBe=s(aC);bFe=n(rBe,"STRONG",{});var d3t=s(bFe);q0r=r(d3t,"xlnet"),d3t.forEach(t),N0r=r(rBe," \u2014 "),aJ=n(rBe,"A",{href:!0});var c3t=s(aJ);j0r=r(c3t,"TFXLNetForQuestionAnsweringSimple"),c3t.forEach(t),D0r=r(rBe," (XLNet model)"),rBe.forEach(t),ge.forEach(t),G0r=i(Nl),T(nC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),kNe=i(f),wc=n(f,"H2",{class:!0});var NDe=s(wc);sC=n(NDe,"A",{id:!0,class:!0,href:!0});var f3t=s(sC);vFe=n(f3t,"SPAN",{});var m3t=s(vFe);T(r9.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),O0r=i(NDe),FFe=n(NDe,"SPAN",{});var g3t=s(FFe);V0r=r(g3t,"TFAutoModelForVision2Seq"),g3t.forEach(t),NDe.forEach(t),SNe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(t9.$$.fragment,jl),X0r=i(jl),Ac=n(jl,"P",{});var cee=s(Ac);z0r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nJ=n(cee,"A",{href:!0});var h3t=s(nJ);W0r=r(h3t,"from_pretrained()"),h3t.forEach(t),Q0r=r(cee," class method or the "),sJ=n(cee,"A",{href:!0});var p3t=s(sJ);H0r=r(p3t,"from_config()"),p3t.forEach(t),U0r=r(cee,` class
method.`),cee.forEach(t),J0r=i(jl),a9=n(jl,"P",{});var jDe=s(a9);Y0r=r(jDe,"This class cannot be instantiated directly using "),TFe=n(jDe,"CODE",{});var _3t=s(TFe);K0r=r(_3t,"__init__()"),_3t.forEach(t),Z0r=r(jDe," (throws an error)."),jDe.forEach(t),eAr=i(jl),jt=n(jl,"DIV",{class:!0});var IA=s(jt);T(n9.$$.fragment,IA),oAr=i(IA),MFe=n(IA,"P",{});var u3t=s(MFe);rAr=r(u3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u3t.forEach(t),tAr=i(IA),yc=n(IA,"P",{});var fee=s(yc);aAr=r(fee,`Note:
Loading a model from its configuration file does `),EFe=n(fee,"STRONG",{});var b3t=s(EFe);nAr=r(b3t,"not"),b3t.forEach(t),sAr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(fee,"A",{href:!0});var v3t=s(lJ);lAr=r(v3t,"from_pretrained()"),v3t.forEach(t),iAr=r(fee," to load the model weights."),fee.forEach(t),dAr=i(IA),T(lC.$$.fragment,IA),IA.forEach(t),cAr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(s9.$$.fragment,Dl),fAr=i(Dl),CFe=n(Dl,"P",{});var F3t=s(CFe);mAr=r(F3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F3t.forEach(t),gAr=i(Dl),mn=n(Dl,"P",{});var qA=s(mn);hAr=r(qA,"The model class to instantiate is selected based on the "),wFe=n(qA,"CODE",{});var T3t=s(wFe);pAr=r(T3t,"model_type"),T3t.forEach(t),_Ar=r(qA,` property of the config object (either
passed as an argument or loaded from `),AFe=n(qA,"CODE",{});var M3t=s(AFe);uAr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),bAr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(qA,"CODE",{});var E3t=s(yFe);vAr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),FAr=r(qA,":"),qA.forEach(t),TAr=i(Dl),LFe=n(Dl,"UL",{});var C3t=s(LFe);iC=n(C3t,"LI",{});var tBe=s(iC);xFe=n(tBe,"STRONG",{});var w3t=s(xFe);MAr=r(w3t,"vision-encoder-decoder"),w3t.forEach(t),EAr=r(tBe," \u2014 "),iJ=n(tBe,"A",{href:!0});var A3t=s(iJ);CAr=r(A3t,"TFVisionEncoderDecoderModel"),A3t.forEach(t),wAr=r(tBe," (Vision Encoder decoder model)"),tBe.forEach(t),C3t.forEach(t),AAr=i(Dl),T(dC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),RNe=i(f),Lc=n(f,"H2",{class:!0});var DDe=s(Lc);cC=n(DDe,"A",{id:!0,class:!0,href:!0});var y3t=s(cC);$Fe=n(y3t,"SPAN",{});var L3t=s($Fe);T(l9.$$.fragment,L3t),L3t.forEach(t),y3t.forEach(t),yAr=i(DDe),kFe=n(DDe,"SPAN",{});var x3t=s(kFe);LAr=r(x3t,"TFAutoModelForSpeechSeq2Seq"),x3t.forEach(t),DDe.forEach(t),PNe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(i9.$$.fragment,Gl),xAr=i(Gl),xc=n(Gl,"P",{});var mee=s(xc);$Ar=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dJ=n(mee,"A",{href:!0});var $3t=s(dJ);kAr=r($3t,"from_pretrained()"),$3t.forEach(t),SAr=r(mee," class method or the "),cJ=n(mee,"A",{href:!0});var k3t=s(cJ);RAr=r(k3t,"from_config()"),k3t.forEach(t),PAr=r(mee,` class
method.`),mee.forEach(t),BAr=i(Gl),d9=n(Gl,"P",{});var GDe=s(d9);IAr=r(GDe,"This class cannot be instantiated directly using "),SFe=n(GDe,"CODE",{});var S3t=s(SFe);qAr=r(S3t,"__init__()"),S3t.forEach(t),NAr=r(GDe," (throws an error)."),GDe.forEach(t),jAr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var NA=s(Dt);T(c9.$$.fragment,NA),DAr=i(NA),RFe=n(NA,"P",{});var R3t=s(RFe);GAr=r(R3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R3t.forEach(t),OAr=i(NA),$c=n(NA,"P",{});var gee=s($c);VAr=r(gee,`Note:
Loading a model from its configuration file does `),PFe=n(gee,"STRONG",{});var P3t=s(PFe);XAr=r(P3t,"not"),P3t.forEach(t),zAr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(gee,"A",{href:!0});var B3t=s(fJ);WAr=r(B3t,"from_pretrained()"),B3t.forEach(t),QAr=r(gee," to load the model weights."),gee.forEach(t),HAr=i(NA),T(fC.$$.fragment,NA),NA.forEach(t),UAr=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(f9.$$.fragment,Ol),JAr=i(Ol),BFe=n(Ol,"P",{});var I3t=s(BFe);YAr=r(I3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I3t.forEach(t),KAr=i(Ol),gn=n(Ol,"P",{});var jA=s(gn);ZAr=r(jA,"The model class to instantiate is selected based on the "),IFe=n(jA,"CODE",{});var q3t=s(IFe);e6r=r(q3t,"model_type"),q3t.forEach(t),o6r=r(jA,` property of the config object (either
passed as an argument or loaded from `),qFe=n(jA,"CODE",{});var N3t=s(qFe);r6r=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),t6r=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(jA,"CODE",{});var j3t=s(NFe);a6r=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),n6r=r(jA,":"),jA.forEach(t),s6r=i(Ol),jFe=n(Ol,"UL",{});var D3t=s(jFe);mC=n(D3t,"LI",{});var aBe=s(mC);DFe=n(aBe,"STRONG",{});var G3t=s(DFe);l6r=r(G3t,"speech_to_text"),G3t.forEach(t),i6r=r(aBe," \u2014 "),mJ=n(aBe,"A",{href:!0});var O3t=s(mJ);d6r=r(O3t,"TFSpeech2TextForConditionalGeneration"),O3t.forEach(t),c6r=r(aBe," (Speech2Text model)"),aBe.forEach(t),D3t.forEach(t),f6r=i(Ol),T(gC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),BNe=i(f),kc=n(f,"H2",{class:!0});var ODe=s(kc);hC=n(ODe,"A",{id:!0,class:!0,href:!0});var V3t=s(hC);GFe=n(V3t,"SPAN",{});var X3t=s(GFe);T(m9.$$.fragment,X3t),X3t.forEach(t),V3t.forEach(t),m6r=i(ODe),OFe=n(ODe,"SPAN",{});var z3t=s(OFe);g6r=r(z3t,"FlaxAutoModel"),z3t.forEach(t),ODe.forEach(t),INe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(g9.$$.fragment,Vl),h6r=i(Vl),Sc=n(Vl,"P",{});var hee=s(Sc);p6r=r(hee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gJ=n(hee,"A",{href:!0});var W3t=s(gJ);_6r=r(W3t,"from_pretrained()"),W3t.forEach(t),u6r=r(hee," class method or the "),hJ=n(hee,"A",{href:!0});var Q3t=s(hJ);b6r=r(Q3t,"from_config()"),Q3t.forEach(t),v6r=r(hee,` class
method.`),hee.forEach(t),F6r=i(Vl),h9=n(Vl,"P",{});var VDe=s(h9);T6r=r(VDe,"This class cannot be instantiated directly using "),VFe=n(VDe,"CODE",{});var H3t=s(VFe);M6r=r(H3t,"__init__()"),H3t.forEach(t),E6r=r(VDe," (throws an error)."),VDe.forEach(t),C6r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var DA=s(Gt);T(p9.$$.fragment,DA),w6r=i(DA),XFe=n(DA,"P",{});var U3t=s(XFe);A6r=r(U3t,"Instantiates one of the base model classes of the library from a configuration."),U3t.forEach(t),y6r=i(DA),Rc=n(DA,"P",{});var pee=s(Rc);L6r=r(pee,`Note:
Loading a model from its configuration file does `),zFe=n(pee,"STRONG",{});var J3t=s(zFe);x6r=r(J3t,"not"),J3t.forEach(t),$6r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(pee,"A",{href:!0});var Y3t=s(pJ);k6r=r(Y3t,"from_pretrained()"),Y3t.forEach(t),S6r=r(pee," to load the model weights."),pee.forEach(t),R6r=i(DA),T(pC.$$.fragment,DA),DA.forEach(t),P6r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(_9.$$.fragment,Xl),B6r=i(Xl),WFe=n(Xl,"P",{});var K3t=s(WFe);I6r=r(K3t,"Instantiate one of the base model classes of the library from a pretrained model."),K3t.forEach(t),q6r=i(Xl),hn=n(Xl,"P",{});var GA=s(hn);N6r=r(GA,"The model class to instantiate is selected based on the "),QFe=n(GA,"CODE",{});var Z3t=s(QFe);j6r=r(Z3t,"model_type"),Z3t.forEach(t),D6r=r(GA,` property of the config object (either
passed as an argument or loaded from `),HFe=n(GA,"CODE",{});var ewt=s(HFe);G6r=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),O6r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(GA,"CODE",{});var owt=s(UFe);V6r=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),X6r=r(GA,":"),GA.forEach(t),z6r=i(Xl),te=n(Xl,"UL",{});var ne=s(te);_C=n(ne,"LI",{});var nBe=s(_C);JFe=n(nBe,"STRONG",{});var rwt=s(JFe);W6r=r(rwt,"albert"),rwt.forEach(t),Q6r=r(nBe," \u2014 "),_J=n(nBe,"A",{href:!0});var twt=s(_J);H6r=r(twt,"FlaxAlbertModel"),twt.forEach(t),U6r=r(nBe," (ALBERT model)"),nBe.forEach(t),J6r=i(ne),uC=n(ne,"LI",{});var sBe=s(uC);YFe=n(sBe,"STRONG",{});var awt=s(YFe);Y6r=r(awt,"bart"),awt.forEach(t),K6r=r(sBe," \u2014 "),uJ=n(sBe,"A",{href:!0});var nwt=s(uJ);Z6r=r(nwt,"FlaxBartModel"),nwt.forEach(t),eyr=r(sBe," (BART model)"),sBe.forEach(t),oyr=i(ne),bC=n(ne,"LI",{});var lBe=s(bC);KFe=n(lBe,"STRONG",{});var swt=s(KFe);ryr=r(swt,"beit"),swt.forEach(t),tyr=r(lBe," \u2014 "),bJ=n(lBe,"A",{href:!0});var lwt=s(bJ);ayr=r(lwt,"FlaxBeitModel"),lwt.forEach(t),nyr=r(lBe," (BEiT model)"),lBe.forEach(t),syr=i(ne),vC=n(ne,"LI",{});var iBe=s(vC);ZFe=n(iBe,"STRONG",{});var iwt=s(ZFe);lyr=r(iwt,"bert"),iwt.forEach(t),iyr=r(iBe," \u2014 "),vJ=n(iBe,"A",{href:!0});var dwt=s(vJ);dyr=r(dwt,"FlaxBertModel"),dwt.forEach(t),cyr=r(iBe," (BERT model)"),iBe.forEach(t),fyr=i(ne),FC=n(ne,"LI",{});var dBe=s(FC);eTe=n(dBe,"STRONG",{});var cwt=s(eTe);myr=r(cwt,"big_bird"),cwt.forEach(t),gyr=r(dBe," \u2014 "),FJ=n(dBe,"A",{href:!0});var fwt=s(FJ);hyr=r(fwt,"FlaxBigBirdModel"),fwt.forEach(t),pyr=r(dBe," (BigBird model)"),dBe.forEach(t),_yr=i(ne),TC=n(ne,"LI",{});var cBe=s(TC);oTe=n(cBe,"STRONG",{});var mwt=s(oTe);uyr=r(mwt,"blenderbot"),mwt.forEach(t),byr=r(cBe," \u2014 "),TJ=n(cBe,"A",{href:!0});var gwt=s(TJ);vyr=r(gwt,"FlaxBlenderbotModel"),gwt.forEach(t),Fyr=r(cBe," (Blenderbot model)"),cBe.forEach(t),Tyr=i(ne),MC=n(ne,"LI",{});var fBe=s(MC);rTe=n(fBe,"STRONG",{});var hwt=s(rTe);Myr=r(hwt,"blenderbot-small"),hwt.forEach(t),Eyr=r(fBe," \u2014 "),MJ=n(fBe,"A",{href:!0});var pwt=s(MJ);Cyr=r(pwt,"FlaxBlenderbotSmallModel"),pwt.forEach(t),wyr=r(fBe," (BlenderbotSmall model)"),fBe.forEach(t),Ayr=i(ne),EC=n(ne,"LI",{});var mBe=s(EC);tTe=n(mBe,"STRONG",{});var _wt=s(tTe);yyr=r(_wt,"clip"),_wt.forEach(t),Lyr=r(mBe," \u2014 "),EJ=n(mBe,"A",{href:!0});var uwt=s(EJ);xyr=r(uwt,"FlaxCLIPModel"),uwt.forEach(t),$yr=r(mBe," (CLIP model)"),mBe.forEach(t),kyr=i(ne),CC=n(ne,"LI",{});var gBe=s(CC);aTe=n(gBe,"STRONG",{});var bwt=s(aTe);Syr=r(bwt,"distilbert"),bwt.forEach(t),Ryr=r(gBe," \u2014 "),CJ=n(gBe,"A",{href:!0});var vwt=s(CJ);Pyr=r(vwt,"FlaxDistilBertModel"),vwt.forEach(t),Byr=r(gBe," (DistilBERT model)"),gBe.forEach(t),Iyr=i(ne),wC=n(ne,"LI",{});var hBe=s(wC);nTe=n(hBe,"STRONG",{});var Fwt=s(nTe);qyr=r(Fwt,"electra"),Fwt.forEach(t),Nyr=r(hBe," \u2014 "),wJ=n(hBe,"A",{href:!0});var Twt=s(wJ);jyr=r(Twt,"FlaxElectraModel"),Twt.forEach(t),Dyr=r(hBe," (ELECTRA model)"),hBe.forEach(t),Gyr=i(ne),AC=n(ne,"LI",{});var pBe=s(AC);sTe=n(pBe,"STRONG",{});var Mwt=s(sTe);Oyr=r(Mwt,"gpt2"),Mwt.forEach(t),Vyr=r(pBe," \u2014 "),AJ=n(pBe,"A",{href:!0});var Ewt=s(AJ);Xyr=r(Ewt,"FlaxGPT2Model"),Ewt.forEach(t),zyr=r(pBe," (OpenAI GPT-2 model)"),pBe.forEach(t),Wyr=i(ne),yC=n(ne,"LI",{});var _Be=s(yC);lTe=n(_Be,"STRONG",{});var Cwt=s(lTe);Qyr=r(Cwt,"gpt_neo"),Cwt.forEach(t),Hyr=r(_Be," \u2014 "),yJ=n(_Be,"A",{href:!0});var wwt=s(yJ);Uyr=r(wwt,"FlaxGPTNeoModel"),wwt.forEach(t),Jyr=r(_Be," (GPT Neo model)"),_Be.forEach(t),Yyr=i(ne),LC=n(ne,"LI",{});var uBe=s(LC);iTe=n(uBe,"STRONG",{});var Awt=s(iTe);Kyr=r(Awt,"gptj"),Awt.forEach(t),Zyr=r(uBe," \u2014 "),LJ=n(uBe,"A",{href:!0});var ywt=s(LJ);eLr=r(ywt,"FlaxGPTJModel"),ywt.forEach(t),oLr=r(uBe," (GPT-J model)"),uBe.forEach(t),rLr=i(ne),xC=n(ne,"LI",{});var bBe=s(xC);dTe=n(bBe,"STRONG",{});var Lwt=s(dTe);tLr=r(Lwt,"marian"),Lwt.forEach(t),aLr=r(bBe," \u2014 "),xJ=n(bBe,"A",{href:!0});var xwt=s(xJ);nLr=r(xwt,"FlaxMarianModel"),xwt.forEach(t),sLr=r(bBe," (Marian model)"),bBe.forEach(t),lLr=i(ne),$C=n(ne,"LI",{});var vBe=s($C);cTe=n(vBe,"STRONG",{});var $wt=s(cTe);iLr=r($wt,"mbart"),$wt.forEach(t),dLr=r(vBe," \u2014 "),$J=n(vBe,"A",{href:!0});var kwt=s($J);cLr=r(kwt,"FlaxMBartModel"),kwt.forEach(t),fLr=r(vBe," (mBART model)"),vBe.forEach(t),mLr=i(ne),kC=n(ne,"LI",{});var FBe=s(kC);fTe=n(FBe,"STRONG",{});var Swt=s(fTe);gLr=r(Swt,"mt5"),Swt.forEach(t),hLr=r(FBe," \u2014 "),kJ=n(FBe,"A",{href:!0});var Rwt=s(kJ);pLr=r(Rwt,"FlaxMT5Model"),Rwt.forEach(t),_Lr=r(FBe," (mT5 model)"),FBe.forEach(t),uLr=i(ne),SC=n(ne,"LI",{});var TBe=s(SC);mTe=n(TBe,"STRONG",{});var Pwt=s(mTe);bLr=r(Pwt,"pegasus"),Pwt.forEach(t),vLr=r(TBe," \u2014 "),SJ=n(TBe,"A",{href:!0});var Bwt=s(SJ);FLr=r(Bwt,"FlaxPegasusModel"),Bwt.forEach(t),TLr=r(TBe," (Pegasus model)"),TBe.forEach(t),MLr=i(ne),RC=n(ne,"LI",{});var MBe=s(RC);gTe=n(MBe,"STRONG",{});var Iwt=s(gTe);ELr=r(Iwt,"roberta"),Iwt.forEach(t),CLr=r(MBe," \u2014 "),RJ=n(MBe,"A",{href:!0});var qwt=s(RJ);wLr=r(qwt,"FlaxRobertaModel"),qwt.forEach(t),ALr=r(MBe," (RoBERTa model)"),MBe.forEach(t),yLr=i(ne),PC=n(ne,"LI",{});var EBe=s(PC);hTe=n(EBe,"STRONG",{});var Nwt=s(hTe);LLr=r(Nwt,"roformer"),Nwt.forEach(t),xLr=r(EBe," \u2014 "),PJ=n(EBe,"A",{href:!0});var jwt=s(PJ);$Lr=r(jwt,"FlaxRoFormerModel"),jwt.forEach(t),kLr=r(EBe," (RoFormer model)"),EBe.forEach(t),SLr=i(ne),BC=n(ne,"LI",{});var CBe=s(BC);pTe=n(CBe,"STRONG",{});var Dwt=s(pTe);RLr=r(Dwt,"t5"),Dwt.forEach(t),PLr=r(CBe," \u2014 "),BJ=n(CBe,"A",{href:!0});var Gwt=s(BJ);BLr=r(Gwt,"FlaxT5Model"),Gwt.forEach(t),ILr=r(CBe," (T5 model)"),CBe.forEach(t),qLr=i(ne),IC=n(ne,"LI",{});var wBe=s(IC);_Te=n(wBe,"STRONG",{});var Owt=s(_Te);NLr=r(Owt,"vision-text-dual-encoder"),Owt.forEach(t),jLr=r(wBe," \u2014 "),IJ=n(wBe,"A",{href:!0});var Vwt=s(IJ);DLr=r(Vwt,"FlaxVisionTextDualEncoderModel"),Vwt.forEach(t),GLr=r(wBe," (VisionTextDualEncoder model)"),wBe.forEach(t),OLr=i(ne),qC=n(ne,"LI",{});var ABe=s(qC);uTe=n(ABe,"STRONG",{});var Xwt=s(uTe);VLr=r(Xwt,"vit"),Xwt.forEach(t),XLr=r(ABe," \u2014 "),qJ=n(ABe,"A",{href:!0});var zwt=s(qJ);zLr=r(zwt,"FlaxViTModel"),zwt.forEach(t),WLr=r(ABe," (ViT model)"),ABe.forEach(t),QLr=i(ne),NC=n(ne,"LI",{});var yBe=s(NC);bTe=n(yBe,"STRONG",{});var Wwt=s(bTe);HLr=r(Wwt,"wav2vec2"),Wwt.forEach(t),ULr=r(yBe," \u2014 "),NJ=n(yBe,"A",{href:!0});var Qwt=s(NJ);JLr=r(Qwt,"FlaxWav2Vec2Model"),Qwt.forEach(t),YLr=r(yBe," (Wav2Vec2 model)"),yBe.forEach(t),KLr=i(ne),jC=n(ne,"LI",{});var LBe=s(jC);vTe=n(LBe,"STRONG",{});var Hwt=s(vTe);ZLr=r(Hwt,"xglm"),Hwt.forEach(t),e8r=r(LBe," \u2014 "),jJ=n(LBe,"A",{href:!0});var Uwt=s(jJ);o8r=r(Uwt,"FlaxXGLMModel"),Uwt.forEach(t),r8r=r(LBe," (XGLM model)"),LBe.forEach(t),t8r=i(ne),DC=n(ne,"LI",{});var xBe=s(DC);FTe=n(xBe,"STRONG",{});var Jwt=s(FTe);a8r=r(Jwt,"xlm-roberta"),Jwt.forEach(t),n8r=r(xBe," \u2014 "),DJ=n(xBe,"A",{href:!0});var Ywt=s(DJ);s8r=r(Ywt,"FlaxXLMRobertaModel"),Ywt.forEach(t),l8r=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),ne.forEach(t),i8r=i(Xl),T(GC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),qNe=i(f),Pc=n(f,"H2",{class:!0});var XDe=s(Pc);OC=n(XDe,"A",{id:!0,class:!0,href:!0});var Kwt=s(OC);TTe=n(Kwt,"SPAN",{});var Zwt=s(TTe);T(u9.$$.fragment,Zwt),Zwt.forEach(t),Kwt.forEach(t),d8r=i(XDe),MTe=n(XDe,"SPAN",{});var e0t=s(MTe);c8r=r(e0t,"FlaxAutoModelForCausalLM"),e0t.forEach(t),XDe.forEach(t),NNe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(b9.$$.fragment,zl),f8r=i(zl),Bc=n(zl,"P",{});var _ee=s(Bc);m8r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GJ=n(_ee,"A",{href:!0});var o0t=s(GJ);g8r=r(o0t,"from_pretrained()"),o0t.forEach(t),h8r=r(_ee," class method or the "),OJ=n(_ee,"A",{href:!0});var r0t=s(OJ);p8r=r(r0t,"from_config()"),r0t.forEach(t),_8r=r(_ee,` class
method.`),_ee.forEach(t),u8r=i(zl),v9=n(zl,"P",{});var zDe=s(v9);b8r=r(zDe,"This class cannot be instantiated directly using "),ETe=n(zDe,"CODE",{});var t0t=s(ETe);v8r=r(t0t,"__init__()"),t0t.forEach(t),F8r=r(zDe," (throws an error)."),zDe.forEach(t),T8r=i(zl),Ot=n(zl,"DIV",{class:!0});var OA=s(Ot);T(F9.$$.fragment,OA),M8r=i(OA),CTe=n(OA,"P",{});var a0t=s(CTe);E8r=r(a0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a0t.forEach(t),C8r=i(OA),Ic=n(OA,"P",{});var uee=s(Ic);w8r=r(uee,`Note:
Loading a model from its configuration file does `),wTe=n(uee,"STRONG",{});var n0t=s(wTe);A8r=r(n0t,"not"),n0t.forEach(t),y8r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(uee,"A",{href:!0});var s0t=s(VJ);L8r=r(s0t,"from_pretrained()"),s0t.forEach(t),x8r=r(uee," to load the model weights."),uee.forEach(t),$8r=i(OA),T(VC.$$.fragment,OA),OA.forEach(t),k8r=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(T9.$$.fragment,Wl),S8r=i(Wl),ATe=n(Wl,"P",{});var l0t=s(ATe);R8r=r(l0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l0t.forEach(t),P8r=i(Wl),pn=n(Wl,"P",{});var VA=s(pn);B8r=r(VA,"The model class to instantiate is selected based on the "),yTe=n(VA,"CODE",{});var i0t=s(yTe);I8r=r(i0t,"model_type"),i0t.forEach(t),q8r=r(VA,` property of the config object (either
passed as an argument or loaded from `),LTe=n(VA,"CODE",{});var d0t=s(LTe);N8r=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),j8r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(VA,"CODE",{});var c0t=s(xTe);D8r=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),G8r=r(VA,":"),VA.forEach(t),O8r=i(Wl),Re=n(Wl,"UL",{});var Xe=s(Re);XC=n(Xe,"LI",{});var $Be=s(XC);$Te=n($Be,"STRONG",{});var f0t=s($Te);V8r=r(f0t,"bart"),f0t.forEach(t),X8r=r($Be," \u2014 "),XJ=n($Be,"A",{href:!0});var m0t=s(XJ);z8r=r(m0t,"FlaxBartForCausalLM"),m0t.forEach(t),W8r=r($Be," (BART model)"),$Be.forEach(t),Q8r=i(Xe),zC=n(Xe,"LI",{});var kBe=s(zC);kTe=n(kBe,"STRONG",{});var g0t=s(kTe);H8r=r(g0t,"bert"),g0t.forEach(t),U8r=r(kBe," \u2014 "),zJ=n(kBe,"A",{href:!0});var h0t=s(zJ);J8r=r(h0t,"FlaxBertForCausalLM"),h0t.forEach(t),Y8r=r(kBe," (BERT model)"),kBe.forEach(t),K8r=i(Xe),WC=n(Xe,"LI",{});var SBe=s(WC);STe=n(SBe,"STRONG",{});var p0t=s(STe);Z8r=r(p0t,"big_bird"),p0t.forEach(t),e9r=r(SBe," \u2014 "),WJ=n(SBe,"A",{href:!0});var _0t=s(WJ);o9r=r(_0t,"FlaxBigBirdForCausalLM"),_0t.forEach(t),r9r=r(SBe," (BigBird model)"),SBe.forEach(t),t9r=i(Xe),QC=n(Xe,"LI",{});var RBe=s(QC);RTe=n(RBe,"STRONG",{});var u0t=s(RTe);a9r=r(u0t,"electra"),u0t.forEach(t),n9r=r(RBe," \u2014 "),QJ=n(RBe,"A",{href:!0});var b0t=s(QJ);s9r=r(b0t,"FlaxElectraForCausalLM"),b0t.forEach(t),l9r=r(RBe," (ELECTRA model)"),RBe.forEach(t),i9r=i(Xe),HC=n(Xe,"LI",{});var PBe=s(HC);PTe=n(PBe,"STRONG",{});var v0t=s(PTe);d9r=r(v0t,"gpt2"),v0t.forEach(t),c9r=r(PBe," \u2014 "),HJ=n(PBe,"A",{href:!0});var F0t=s(HJ);f9r=r(F0t,"FlaxGPT2LMHeadModel"),F0t.forEach(t),m9r=r(PBe," (OpenAI GPT-2 model)"),PBe.forEach(t),g9r=i(Xe),UC=n(Xe,"LI",{});var BBe=s(UC);BTe=n(BBe,"STRONG",{});var T0t=s(BTe);h9r=r(T0t,"gpt_neo"),T0t.forEach(t),p9r=r(BBe," \u2014 "),UJ=n(BBe,"A",{href:!0});var M0t=s(UJ);_9r=r(M0t,"FlaxGPTNeoForCausalLM"),M0t.forEach(t),u9r=r(BBe," (GPT Neo model)"),BBe.forEach(t),b9r=i(Xe),JC=n(Xe,"LI",{});var IBe=s(JC);ITe=n(IBe,"STRONG",{});var E0t=s(ITe);v9r=r(E0t,"gptj"),E0t.forEach(t),F9r=r(IBe," \u2014 "),JJ=n(IBe,"A",{href:!0});var C0t=s(JJ);T9r=r(C0t,"FlaxGPTJForCausalLM"),C0t.forEach(t),M9r=r(IBe," (GPT-J model)"),IBe.forEach(t),E9r=i(Xe),YC=n(Xe,"LI",{});var qBe=s(YC);qTe=n(qBe,"STRONG",{});var w0t=s(qTe);C9r=r(w0t,"roberta"),w0t.forEach(t),w9r=r(qBe," \u2014 "),YJ=n(qBe,"A",{href:!0});var A0t=s(YJ);A9r=r(A0t,"FlaxRobertaForCausalLM"),A0t.forEach(t),y9r=r(qBe," (RoBERTa model)"),qBe.forEach(t),L9r=i(Xe),KC=n(Xe,"LI",{});var NBe=s(KC);NTe=n(NBe,"STRONG",{});var y0t=s(NTe);x9r=r(y0t,"xglm"),y0t.forEach(t),$9r=r(NBe," \u2014 "),KJ=n(NBe,"A",{href:!0});var L0t=s(KJ);k9r=r(L0t,"FlaxXGLMForCausalLM"),L0t.forEach(t),S9r=r(NBe," (XGLM model)"),NBe.forEach(t),Xe.forEach(t),R9r=i(Wl),T(ZC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),jNe=i(f),qc=n(f,"H2",{class:!0});var WDe=s(qc);e3=n(WDe,"A",{id:!0,class:!0,href:!0});var x0t=s(e3);jTe=n(x0t,"SPAN",{});var $0t=s(jTe);T(M9.$$.fragment,$0t),$0t.forEach(t),x0t.forEach(t),P9r=i(WDe),DTe=n(WDe,"SPAN",{});var k0t=s(DTe);B9r=r(k0t,"FlaxAutoModelForPreTraining"),k0t.forEach(t),WDe.forEach(t),DNe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(E9.$$.fragment,Ql),I9r=i(Ql),Nc=n(Ql,"P",{});var bee=s(Nc);q9r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZJ=n(bee,"A",{href:!0});var S0t=s(ZJ);N9r=r(S0t,"from_pretrained()"),S0t.forEach(t),j9r=r(bee," class method or the "),eY=n(bee,"A",{href:!0});var R0t=s(eY);D9r=r(R0t,"from_config()"),R0t.forEach(t),G9r=r(bee,` class
method.`),bee.forEach(t),O9r=i(Ql),C9=n(Ql,"P",{});var QDe=s(C9);V9r=r(QDe,"This class cannot be instantiated directly using "),GTe=n(QDe,"CODE",{});var P0t=s(GTe);X9r=r(P0t,"__init__()"),P0t.forEach(t),z9r=r(QDe," (throws an error)."),QDe.forEach(t),W9r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var XA=s(Vt);T(w9.$$.fragment,XA),Q9r=i(XA),OTe=n(XA,"P",{});var B0t=s(OTe);H9r=r(B0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B0t.forEach(t),U9r=i(XA),jc=n(XA,"P",{});var vee=s(jc);J9r=r(vee,`Note:
Loading a model from its configuration file does `),VTe=n(vee,"STRONG",{});var I0t=s(VTe);Y9r=r(I0t,"not"),I0t.forEach(t),K9r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(vee,"A",{href:!0});var q0t=s(oY);Z9r=r(q0t,"from_pretrained()"),q0t.forEach(t),exr=r(vee," to load the model weights."),vee.forEach(t),oxr=i(XA),T(o3.$$.fragment,XA),XA.forEach(t),rxr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(A9.$$.fragment,Hl),txr=i(Hl),XTe=n(Hl,"P",{});var N0t=s(XTe);axr=r(N0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N0t.forEach(t),nxr=i(Hl),_n=n(Hl,"P",{});var zA=s(_n);sxr=r(zA,"The model class to instantiate is selected based on the "),zTe=n(zA,"CODE",{});var j0t=s(zTe);lxr=r(j0t,"model_type"),j0t.forEach(t),ixr=r(zA,` property of the config object (either
passed as an argument or loaded from `),WTe=n(zA,"CODE",{});var D0t=s(WTe);dxr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),cxr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(zA,"CODE",{});var G0t=s(QTe);fxr=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),mxr=r(zA,":"),zA.forEach(t),gxr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);r3=n(we,"LI",{});var jBe=s(r3);HTe=n(jBe,"STRONG",{});var O0t=s(HTe);hxr=r(O0t,"albert"),O0t.forEach(t),pxr=r(jBe," \u2014 "),rY=n(jBe,"A",{href:!0});var V0t=s(rY);_xr=r(V0t,"FlaxAlbertForPreTraining"),V0t.forEach(t),uxr=r(jBe," (ALBERT model)"),jBe.forEach(t),bxr=i(we),t3=n(we,"LI",{});var DBe=s(t3);UTe=n(DBe,"STRONG",{});var X0t=s(UTe);vxr=r(X0t,"bart"),X0t.forEach(t),Fxr=r(DBe," \u2014 "),tY=n(DBe,"A",{href:!0});var z0t=s(tY);Txr=r(z0t,"FlaxBartForConditionalGeneration"),z0t.forEach(t),Mxr=r(DBe," (BART model)"),DBe.forEach(t),Exr=i(we),a3=n(we,"LI",{});var GBe=s(a3);JTe=n(GBe,"STRONG",{});var W0t=s(JTe);Cxr=r(W0t,"bert"),W0t.forEach(t),wxr=r(GBe," \u2014 "),aY=n(GBe,"A",{href:!0});var Q0t=s(aY);Axr=r(Q0t,"FlaxBertForPreTraining"),Q0t.forEach(t),yxr=r(GBe," (BERT model)"),GBe.forEach(t),Lxr=i(we),n3=n(we,"LI",{});var OBe=s(n3);YTe=n(OBe,"STRONG",{});var H0t=s(YTe);xxr=r(H0t,"big_bird"),H0t.forEach(t),$xr=r(OBe," \u2014 "),nY=n(OBe,"A",{href:!0});var U0t=s(nY);kxr=r(U0t,"FlaxBigBirdForPreTraining"),U0t.forEach(t),Sxr=r(OBe," (BigBird model)"),OBe.forEach(t),Rxr=i(we),s3=n(we,"LI",{});var VBe=s(s3);KTe=n(VBe,"STRONG",{});var J0t=s(KTe);Pxr=r(J0t,"electra"),J0t.forEach(t),Bxr=r(VBe," \u2014 "),sY=n(VBe,"A",{href:!0});var Y0t=s(sY);Ixr=r(Y0t,"FlaxElectraForPreTraining"),Y0t.forEach(t),qxr=r(VBe," (ELECTRA model)"),VBe.forEach(t),Nxr=i(we),l3=n(we,"LI",{});var XBe=s(l3);ZTe=n(XBe,"STRONG",{});var K0t=s(ZTe);jxr=r(K0t,"mbart"),K0t.forEach(t),Dxr=r(XBe," \u2014 "),lY=n(XBe,"A",{href:!0});var Z0t=s(lY);Gxr=r(Z0t,"FlaxMBartForConditionalGeneration"),Z0t.forEach(t),Oxr=r(XBe," (mBART model)"),XBe.forEach(t),Vxr=i(we),i3=n(we,"LI",{});var zBe=s(i3);e7e=n(zBe,"STRONG",{});var eAt=s(e7e);Xxr=r(eAt,"mt5"),eAt.forEach(t),zxr=r(zBe," \u2014 "),iY=n(zBe,"A",{href:!0});var oAt=s(iY);Wxr=r(oAt,"FlaxMT5ForConditionalGeneration"),oAt.forEach(t),Qxr=r(zBe," (mT5 model)"),zBe.forEach(t),Hxr=i(we),d3=n(we,"LI",{});var WBe=s(d3);o7e=n(WBe,"STRONG",{});var rAt=s(o7e);Uxr=r(rAt,"roberta"),rAt.forEach(t),Jxr=r(WBe," \u2014 "),dY=n(WBe,"A",{href:!0});var tAt=s(dY);Yxr=r(tAt,"FlaxRobertaForMaskedLM"),tAt.forEach(t),Kxr=r(WBe," (RoBERTa model)"),WBe.forEach(t),Zxr=i(we),c3=n(we,"LI",{});var QBe=s(c3);r7e=n(QBe,"STRONG",{});var aAt=s(r7e);e$r=r(aAt,"roformer"),aAt.forEach(t),o$r=r(QBe," \u2014 "),cY=n(QBe,"A",{href:!0});var nAt=s(cY);r$r=r(nAt,"FlaxRoFormerForMaskedLM"),nAt.forEach(t),t$r=r(QBe," (RoFormer model)"),QBe.forEach(t),a$r=i(we),f3=n(we,"LI",{});var HBe=s(f3);t7e=n(HBe,"STRONG",{});var sAt=s(t7e);n$r=r(sAt,"t5"),sAt.forEach(t),s$r=r(HBe," \u2014 "),fY=n(HBe,"A",{href:!0});var lAt=s(fY);l$r=r(lAt,"FlaxT5ForConditionalGeneration"),lAt.forEach(t),i$r=r(HBe," (T5 model)"),HBe.forEach(t),d$r=i(we),m3=n(we,"LI",{});var UBe=s(m3);a7e=n(UBe,"STRONG",{});var iAt=s(a7e);c$r=r(iAt,"wav2vec2"),iAt.forEach(t),f$r=r(UBe," \u2014 "),mY=n(UBe,"A",{href:!0});var dAt=s(mY);m$r=r(dAt,"FlaxWav2Vec2ForPreTraining"),dAt.forEach(t),g$r=r(UBe," (Wav2Vec2 model)"),UBe.forEach(t),h$r=i(we),g3=n(we,"LI",{});var JBe=s(g3);n7e=n(JBe,"STRONG",{});var cAt=s(n7e);p$r=r(cAt,"xlm-roberta"),cAt.forEach(t),_$r=r(JBe," \u2014 "),gY=n(JBe,"A",{href:!0});var fAt=s(gY);u$r=r(fAt,"FlaxXLMRobertaForMaskedLM"),fAt.forEach(t),b$r=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),we.forEach(t),v$r=i(Hl),T(h3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),GNe=i(f),Dc=n(f,"H2",{class:!0});var HDe=s(Dc);p3=n(HDe,"A",{id:!0,class:!0,href:!0});var mAt=s(p3);s7e=n(mAt,"SPAN",{});var gAt=s(s7e);T(y9.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),F$r=i(HDe),l7e=n(HDe,"SPAN",{});var hAt=s(l7e);T$r=r(hAt,"FlaxAutoModelForMaskedLM"),hAt.forEach(t),HDe.forEach(t),ONe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(L9.$$.fragment,Ul),M$r=i(Ul),Gc=n(Ul,"P",{});var Fee=s(Gc);E$r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hY=n(Fee,"A",{href:!0});var pAt=s(hY);C$r=r(pAt,"from_pretrained()"),pAt.forEach(t),w$r=r(Fee," class method or the "),pY=n(Fee,"A",{href:!0});var _At=s(pY);A$r=r(_At,"from_config()"),_At.forEach(t),y$r=r(Fee,` class
method.`),Fee.forEach(t),L$r=i(Ul),x9=n(Ul,"P",{});var UDe=s(x9);x$r=r(UDe,"This class cannot be instantiated directly using "),i7e=n(UDe,"CODE",{});var uAt=s(i7e);$$r=r(uAt,"__init__()"),uAt.forEach(t),k$r=r(UDe," (throws an error)."),UDe.forEach(t),S$r=i(Ul),Xt=n(Ul,"DIV",{class:!0});var WA=s(Xt);T($9.$$.fragment,WA),R$r=i(WA),d7e=n(WA,"P",{});var bAt=s(d7e);P$r=r(bAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bAt.forEach(t),B$r=i(WA),Oc=n(WA,"P",{});var Tee=s(Oc);I$r=r(Tee,`Note:
Loading a model from its configuration file does `),c7e=n(Tee,"STRONG",{});var vAt=s(c7e);q$r=r(vAt,"not"),vAt.forEach(t),N$r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(Tee,"A",{href:!0});var FAt=s(_Y);j$r=r(FAt,"from_pretrained()"),FAt.forEach(t),D$r=r(Tee," to load the model weights."),Tee.forEach(t),G$r=i(WA),T(_3.$$.fragment,WA),WA.forEach(t),O$r=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(k9.$$.fragment,Jl),V$r=i(Jl),f7e=n(Jl,"P",{});var TAt=s(f7e);X$r=r(TAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TAt.forEach(t),z$r=i(Jl),un=n(Jl,"P",{});var QA=s(un);W$r=r(QA,"The model class to instantiate is selected based on the "),m7e=n(QA,"CODE",{});var MAt=s(m7e);Q$r=r(MAt,"model_type"),MAt.forEach(t),H$r=r(QA,` property of the config object (either
passed as an argument or loaded from `),g7e=n(QA,"CODE",{});var EAt=s(g7e);U$r=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),J$r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(QA,"CODE",{});var CAt=s(h7e);Y$r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),K$r=r(QA,":"),QA.forEach(t),Z$r=i(Jl),Le=n(Jl,"UL",{});var Ie=s(Le);u3=n(Ie,"LI",{});var YBe=s(u3);p7e=n(YBe,"STRONG",{});var wAt=s(p7e);ekr=r(wAt,"albert"),wAt.forEach(t),okr=r(YBe," \u2014 "),uY=n(YBe,"A",{href:!0});var AAt=s(uY);rkr=r(AAt,"FlaxAlbertForMaskedLM"),AAt.forEach(t),tkr=r(YBe," (ALBERT model)"),YBe.forEach(t),akr=i(Ie),b3=n(Ie,"LI",{});var KBe=s(b3);_7e=n(KBe,"STRONG",{});var yAt=s(_7e);nkr=r(yAt,"bart"),yAt.forEach(t),skr=r(KBe," \u2014 "),bY=n(KBe,"A",{href:!0});var LAt=s(bY);lkr=r(LAt,"FlaxBartForConditionalGeneration"),LAt.forEach(t),ikr=r(KBe," (BART model)"),KBe.forEach(t),dkr=i(Ie),v3=n(Ie,"LI",{});var ZBe=s(v3);u7e=n(ZBe,"STRONG",{});var xAt=s(u7e);ckr=r(xAt,"bert"),xAt.forEach(t),fkr=r(ZBe," \u2014 "),vY=n(ZBe,"A",{href:!0});var $At=s(vY);mkr=r($At,"FlaxBertForMaskedLM"),$At.forEach(t),gkr=r(ZBe," (BERT model)"),ZBe.forEach(t),hkr=i(Ie),F3=n(Ie,"LI",{});var eIe=s(F3);b7e=n(eIe,"STRONG",{});var kAt=s(b7e);pkr=r(kAt,"big_bird"),kAt.forEach(t),_kr=r(eIe," \u2014 "),FY=n(eIe,"A",{href:!0});var SAt=s(FY);ukr=r(SAt,"FlaxBigBirdForMaskedLM"),SAt.forEach(t),bkr=r(eIe," (BigBird model)"),eIe.forEach(t),vkr=i(Ie),T3=n(Ie,"LI",{});var oIe=s(T3);v7e=n(oIe,"STRONG",{});var RAt=s(v7e);Fkr=r(RAt,"distilbert"),RAt.forEach(t),Tkr=r(oIe," \u2014 "),TY=n(oIe,"A",{href:!0});var PAt=s(TY);Mkr=r(PAt,"FlaxDistilBertForMaskedLM"),PAt.forEach(t),Ekr=r(oIe," (DistilBERT model)"),oIe.forEach(t),Ckr=i(Ie),M3=n(Ie,"LI",{});var rIe=s(M3);F7e=n(rIe,"STRONG",{});var BAt=s(F7e);wkr=r(BAt,"electra"),BAt.forEach(t),Akr=r(rIe," \u2014 "),MY=n(rIe,"A",{href:!0});var IAt=s(MY);ykr=r(IAt,"FlaxElectraForMaskedLM"),IAt.forEach(t),Lkr=r(rIe," (ELECTRA model)"),rIe.forEach(t),xkr=i(Ie),E3=n(Ie,"LI",{});var tIe=s(E3);T7e=n(tIe,"STRONG",{});var qAt=s(T7e);$kr=r(qAt,"mbart"),qAt.forEach(t),kkr=r(tIe," \u2014 "),EY=n(tIe,"A",{href:!0});var NAt=s(EY);Skr=r(NAt,"FlaxMBartForConditionalGeneration"),NAt.forEach(t),Rkr=r(tIe," (mBART model)"),tIe.forEach(t),Pkr=i(Ie),C3=n(Ie,"LI",{});var aIe=s(C3);M7e=n(aIe,"STRONG",{});var jAt=s(M7e);Bkr=r(jAt,"roberta"),jAt.forEach(t),Ikr=r(aIe," \u2014 "),CY=n(aIe,"A",{href:!0});var DAt=s(CY);qkr=r(DAt,"FlaxRobertaForMaskedLM"),DAt.forEach(t),Nkr=r(aIe," (RoBERTa model)"),aIe.forEach(t),jkr=i(Ie),w3=n(Ie,"LI",{});var nIe=s(w3);E7e=n(nIe,"STRONG",{});var GAt=s(E7e);Dkr=r(GAt,"roformer"),GAt.forEach(t),Gkr=r(nIe," \u2014 "),wY=n(nIe,"A",{href:!0});var OAt=s(wY);Okr=r(OAt,"FlaxRoFormerForMaskedLM"),OAt.forEach(t),Vkr=r(nIe," (RoFormer model)"),nIe.forEach(t),Xkr=i(Ie),A3=n(Ie,"LI",{});var sIe=s(A3);C7e=n(sIe,"STRONG",{});var VAt=s(C7e);zkr=r(VAt,"xlm-roberta"),VAt.forEach(t),Wkr=r(sIe," \u2014 "),AY=n(sIe,"A",{href:!0});var XAt=s(AY);Qkr=r(XAt,"FlaxXLMRobertaForMaskedLM"),XAt.forEach(t),Hkr=r(sIe," (XLM-RoBERTa model)"),sIe.forEach(t),Ie.forEach(t),Ukr=i(Jl),T(y3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),VNe=i(f),Vc=n(f,"H2",{class:!0});var JDe=s(Vc);L3=n(JDe,"A",{id:!0,class:!0,href:!0});var zAt=s(L3);w7e=n(zAt,"SPAN",{});var WAt=s(w7e);T(S9.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),Jkr=i(JDe),A7e=n(JDe,"SPAN",{});var QAt=s(A7e);Ykr=r(QAt,"FlaxAutoModelForSeq2SeqLM"),QAt.forEach(t),JDe.forEach(t),XNe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(R9.$$.fragment,Yl),Kkr=i(Yl),Xc=n(Yl,"P",{});var Mee=s(Xc);Zkr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yY=n(Mee,"A",{href:!0});var HAt=s(yY);eSr=r(HAt,"from_pretrained()"),HAt.forEach(t),oSr=r(Mee," class method or the "),LY=n(Mee,"A",{href:!0});var UAt=s(LY);rSr=r(UAt,"from_config()"),UAt.forEach(t),tSr=r(Mee,` class
method.`),Mee.forEach(t),aSr=i(Yl),P9=n(Yl,"P",{});var YDe=s(P9);nSr=r(YDe,"This class cannot be instantiated directly using "),y7e=n(YDe,"CODE",{});var JAt=s(y7e);sSr=r(JAt,"__init__()"),JAt.forEach(t),lSr=r(YDe," (throws an error)."),YDe.forEach(t),iSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var HA=s(zt);T(B9.$$.fragment,HA),dSr=i(HA),L7e=n(HA,"P",{});var YAt=s(L7e);cSr=r(YAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YAt.forEach(t),fSr=i(HA),zc=n(HA,"P",{});var Eee=s(zc);mSr=r(Eee,`Note:
Loading a model from its configuration file does `),x7e=n(Eee,"STRONG",{});var KAt=s(x7e);gSr=r(KAt,"not"),KAt.forEach(t),hSr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Eee,"A",{href:!0});var ZAt=s(xY);pSr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),_Sr=r(Eee," to load the model weights."),Eee.forEach(t),uSr=i(HA),T(x3.$$.fragment,HA),HA.forEach(t),bSr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(I9.$$.fragment,Kl),vSr=i(Kl),$7e=n(Kl,"P",{});var e6t=s($7e);FSr=r(e6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e6t.forEach(t),TSr=i(Kl),bn=n(Kl,"P",{});var UA=s(bn);MSr=r(UA,"The model class to instantiate is selected based on the "),k7e=n(UA,"CODE",{});var o6t=s(k7e);ESr=r(o6t,"model_type"),o6t.forEach(t),CSr=r(UA,` property of the config object (either
passed as an argument or loaded from `),S7e=n(UA,"CODE",{});var r6t=s(S7e);wSr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),ASr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(UA,"CODE",{});var t6t=s(R7e);ySr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),LSr=r(UA,":"),UA.forEach(t),xSr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);$3=n(ze,"LI",{});var lIe=s($3);P7e=n(lIe,"STRONG",{});var a6t=s(P7e);$Sr=r(a6t,"bart"),a6t.forEach(t),kSr=r(lIe," \u2014 "),$Y=n(lIe,"A",{href:!0});var n6t=s($Y);SSr=r(n6t,"FlaxBartForConditionalGeneration"),n6t.forEach(t),RSr=r(lIe," (BART model)"),lIe.forEach(t),PSr=i(ze),k3=n(ze,"LI",{});var iIe=s(k3);B7e=n(iIe,"STRONG",{});var s6t=s(B7e);BSr=r(s6t,"blenderbot"),s6t.forEach(t),ISr=r(iIe," \u2014 "),kY=n(iIe,"A",{href:!0});var l6t=s(kY);qSr=r(l6t,"FlaxBlenderbotForConditionalGeneration"),l6t.forEach(t),NSr=r(iIe," (Blenderbot model)"),iIe.forEach(t),jSr=i(ze),S3=n(ze,"LI",{});var dIe=s(S3);I7e=n(dIe,"STRONG",{});var i6t=s(I7e);DSr=r(i6t,"blenderbot-small"),i6t.forEach(t),GSr=r(dIe," \u2014 "),SY=n(dIe,"A",{href:!0});var d6t=s(SY);OSr=r(d6t,"FlaxBlenderbotSmallForConditionalGeneration"),d6t.forEach(t),VSr=r(dIe," (BlenderbotSmall model)"),dIe.forEach(t),XSr=i(ze),R3=n(ze,"LI",{});var cIe=s(R3);q7e=n(cIe,"STRONG",{});var c6t=s(q7e);zSr=r(c6t,"encoder-decoder"),c6t.forEach(t),WSr=r(cIe," \u2014 "),RY=n(cIe,"A",{href:!0});var f6t=s(RY);QSr=r(f6t,"FlaxEncoderDecoderModel"),f6t.forEach(t),HSr=r(cIe," (Encoder decoder model)"),cIe.forEach(t),USr=i(ze),P3=n(ze,"LI",{});var fIe=s(P3);N7e=n(fIe,"STRONG",{});var m6t=s(N7e);JSr=r(m6t,"marian"),m6t.forEach(t),YSr=r(fIe," \u2014 "),PY=n(fIe,"A",{href:!0});var g6t=s(PY);KSr=r(g6t,"FlaxMarianMTModel"),g6t.forEach(t),ZSr=r(fIe," (Marian model)"),fIe.forEach(t),eRr=i(ze),B3=n(ze,"LI",{});var mIe=s(B3);j7e=n(mIe,"STRONG",{});var h6t=s(j7e);oRr=r(h6t,"mbart"),h6t.forEach(t),rRr=r(mIe," \u2014 "),BY=n(mIe,"A",{href:!0});var p6t=s(BY);tRr=r(p6t,"FlaxMBartForConditionalGeneration"),p6t.forEach(t),aRr=r(mIe," (mBART model)"),mIe.forEach(t),nRr=i(ze),I3=n(ze,"LI",{});var gIe=s(I3);D7e=n(gIe,"STRONG",{});var _6t=s(D7e);sRr=r(_6t,"mt5"),_6t.forEach(t),lRr=r(gIe," \u2014 "),IY=n(gIe,"A",{href:!0});var u6t=s(IY);iRr=r(u6t,"FlaxMT5ForConditionalGeneration"),u6t.forEach(t),dRr=r(gIe," (mT5 model)"),gIe.forEach(t),cRr=i(ze),q3=n(ze,"LI",{});var hIe=s(q3);G7e=n(hIe,"STRONG",{});var b6t=s(G7e);fRr=r(b6t,"pegasus"),b6t.forEach(t),mRr=r(hIe," \u2014 "),qY=n(hIe,"A",{href:!0});var v6t=s(qY);gRr=r(v6t,"FlaxPegasusForConditionalGeneration"),v6t.forEach(t),hRr=r(hIe," (Pegasus model)"),hIe.forEach(t),pRr=i(ze),N3=n(ze,"LI",{});var pIe=s(N3);O7e=n(pIe,"STRONG",{});var F6t=s(O7e);_Rr=r(F6t,"t5"),F6t.forEach(t),uRr=r(pIe," \u2014 "),NY=n(pIe,"A",{href:!0});var T6t=s(NY);bRr=r(T6t,"FlaxT5ForConditionalGeneration"),T6t.forEach(t),vRr=r(pIe," (T5 model)"),pIe.forEach(t),ze.forEach(t),FRr=i(Kl),T(j3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),zNe=i(f),Wc=n(f,"H2",{class:!0});var KDe=s(Wc);D3=n(KDe,"A",{id:!0,class:!0,href:!0});var M6t=s(D3);V7e=n(M6t,"SPAN",{});var E6t=s(V7e);T(q9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),TRr=i(KDe),X7e=n(KDe,"SPAN",{});var C6t=s(X7e);MRr=r(C6t,"FlaxAutoModelForSequenceClassification"),C6t.forEach(t),KDe.forEach(t),WNe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(N9.$$.fragment,Zl),ERr=i(Zl),Qc=n(Zl,"P",{});var Cee=s(Qc);CRr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jY=n(Cee,"A",{href:!0});var w6t=s(jY);wRr=r(w6t,"from_pretrained()"),w6t.forEach(t),ARr=r(Cee," class method or the "),DY=n(Cee,"A",{href:!0});var A6t=s(DY);yRr=r(A6t,"from_config()"),A6t.forEach(t),LRr=r(Cee,` class
method.`),Cee.forEach(t),xRr=i(Zl),j9=n(Zl,"P",{});var ZDe=s(j9);$Rr=r(ZDe,"This class cannot be instantiated directly using "),z7e=n(ZDe,"CODE",{});var y6t=s(z7e);kRr=r(y6t,"__init__()"),y6t.forEach(t),SRr=r(ZDe," (throws an error)."),ZDe.forEach(t),RRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var JA=s(Wt);T(D9.$$.fragment,JA),PRr=i(JA),W7e=n(JA,"P",{});var L6t=s(W7e);BRr=r(L6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),L6t.forEach(t),IRr=i(JA),Hc=n(JA,"P",{});var wee=s(Hc);qRr=r(wee,`Note:
Loading a model from its configuration file does `),Q7e=n(wee,"STRONG",{});var x6t=s(Q7e);NRr=r(x6t,"not"),x6t.forEach(t),jRr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(wee,"A",{href:!0});var $6t=s(GY);DRr=r($6t,"from_pretrained()"),$6t.forEach(t),GRr=r(wee," to load the model weights."),wee.forEach(t),ORr=i(JA),T(G3.$$.fragment,JA),JA.forEach(t),VRr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(G9.$$.fragment,ei),XRr=i(ei),H7e=n(ei,"P",{});var k6t=s(H7e);zRr=r(k6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k6t.forEach(t),WRr=i(ei),vn=n(ei,"P",{});var YA=s(vn);QRr=r(YA,"The model class to instantiate is selected based on the "),U7e=n(YA,"CODE",{});var S6t=s(U7e);HRr=r(S6t,"model_type"),S6t.forEach(t),URr=r(YA,` property of the config object (either
passed as an argument or loaded from `),J7e=n(YA,"CODE",{});var R6t=s(J7e);JRr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),YRr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(YA,"CODE",{});var P6t=s(Y7e);KRr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),ZRr=r(YA,":"),YA.forEach(t),ePr=i(ei),xe=n(ei,"UL",{});var qe=s(xe);O3=n(qe,"LI",{});var _Ie=s(O3);K7e=n(_Ie,"STRONG",{});var B6t=s(K7e);oPr=r(B6t,"albert"),B6t.forEach(t),rPr=r(_Ie," \u2014 "),OY=n(_Ie,"A",{href:!0});var I6t=s(OY);tPr=r(I6t,"FlaxAlbertForSequenceClassification"),I6t.forEach(t),aPr=r(_Ie," (ALBERT model)"),_Ie.forEach(t),nPr=i(qe),V3=n(qe,"LI",{});var uIe=s(V3);Z7e=n(uIe,"STRONG",{});var q6t=s(Z7e);sPr=r(q6t,"bart"),q6t.forEach(t),lPr=r(uIe," \u2014 "),VY=n(uIe,"A",{href:!0});var N6t=s(VY);iPr=r(N6t,"FlaxBartForSequenceClassification"),N6t.forEach(t),dPr=r(uIe," (BART model)"),uIe.forEach(t),cPr=i(qe),X3=n(qe,"LI",{});var bIe=s(X3);eMe=n(bIe,"STRONG",{});var j6t=s(eMe);fPr=r(j6t,"bert"),j6t.forEach(t),mPr=r(bIe," \u2014 "),XY=n(bIe,"A",{href:!0});var D6t=s(XY);gPr=r(D6t,"FlaxBertForSequenceClassification"),D6t.forEach(t),hPr=r(bIe," (BERT model)"),bIe.forEach(t),pPr=i(qe),z3=n(qe,"LI",{});var vIe=s(z3);oMe=n(vIe,"STRONG",{});var G6t=s(oMe);_Pr=r(G6t,"big_bird"),G6t.forEach(t),uPr=r(vIe," \u2014 "),zY=n(vIe,"A",{href:!0});var O6t=s(zY);bPr=r(O6t,"FlaxBigBirdForSequenceClassification"),O6t.forEach(t),vPr=r(vIe," (BigBird model)"),vIe.forEach(t),FPr=i(qe),W3=n(qe,"LI",{});var FIe=s(W3);rMe=n(FIe,"STRONG",{});var V6t=s(rMe);TPr=r(V6t,"distilbert"),V6t.forEach(t),MPr=r(FIe," \u2014 "),WY=n(FIe,"A",{href:!0});var X6t=s(WY);EPr=r(X6t,"FlaxDistilBertForSequenceClassification"),X6t.forEach(t),CPr=r(FIe," (DistilBERT model)"),FIe.forEach(t),wPr=i(qe),Q3=n(qe,"LI",{});var TIe=s(Q3);tMe=n(TIe,"STRONG",{});var z6t=s(tMe);APr=r(z6t,"electra"),z6t.forEach(t),yPr=r(TIe," \u2014 "),QY=n(TIe,"A",{href:!0});var W6t=s(QY);LPr=r(W6t,"FlaxElectraForSequenceClassification"),W6t.forEach(t),xPr=r(TIe," (ELECTRA model)"),TIe.forEach(t),$Pr=i(qe),H3=n(qe,"LI",{});var MIe=s(H3);aMe=n(MIe,"STRONG",{});var Q6t=s(aMe);kPr=r(Q6t,"mbart"),Q6t.forEach(t),SPr=r(MIe," \u2014 "),HY=n(MIe,"A",{href:!0});var H6t=s(HY);RPr=r(H6t,"FlaxMBartForSequenceClassification"),H6t.forEach(t),PPr=r(MIe," (mBART model)"),MIe.forEach(t),BPr=i(qe),U3=n(qe,"LI",{});var EIe=s(U3);nMe=n(EIe,"STRONG",{});var U6t=s(nMe);IPr=r(U6t,"roberta"),U6t.forEach(t),qPr=r(EIe," \u2014 "),UY=n(EIe,"A",{href:!0});var J6t=s(UY);NPr=r(J6t,"FlaxRobertaForSequenceClassification"),J6t.forEach(t),jPr=r(EIe," (RoBERTa model)"),EIe.forEach(t),DPr=i(qe),J3=n(qe,"LI",{});var CIe=s(J3);sMe=n(CIe,"STRONG",{});var Y6t=s(sMe);GPr=r(Y6t,"roformer"),Y6t.forEach(t),OPr=r(CIe," \u2014 "),JY=n(CIe,"A",{href:!0});var K6t=s(JY);VPr=r(K6t,"FlaxRoFormerForSequenceClassification"),K6t.forEach(t),XPr=r(CIe," (RoFormer model)"),CIe.forEach(t),zPr=i(qe),Y3=n(qe,"LI",{});var wIe=s(Y3);lMe=n(wIe,"STRONG",{});var Z6t=s(lMe);WPr=r(Z6t,"xlm-roberta"),Z6t.forEach(t),QPr=r(wIe," \u2014 "),YY=n(wIe,"A",{href:!0});var eyt=s(YY);HPr=r(eyt,"FlaxXLMRobertaForSequenceClassification"),eyt.forEach(t),UPr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),qe.forEach(t),JPr=i(ei),T(K3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),QNe=i(f),Uc=n(f,"H2",{class:!0});var eGe=s(Uc);Z3=n(eGe,"A",{id:!0,class:!0,href:!0});var oyt=s(Z3);iMe=n(oyt,"SPAN",{});var ryt=s(iMe);T(O9.$$.fragment,ryt),ryt.forEach(t),oyt.forEach(t),YPr=i(eGe),dMe=n(eGe,"SPAN",{});var tyt=s(dMe);KPr=r(tyt,"FlaxAutoModelForQuestionAnswering"),tyt.forEach(t),eGe.forEach(t),HNe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(V9.$$.fragment,oi),ZPr=i(oi),Jc=n(oi,"P",{});var Aee=s(Jc);eBr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KY=n(Aee,"A",{href:!0});var ayt=s(KY);oBr=r(ayt,"from_pretrained()"),ayt.forEach(t),rBr=r(Aee," class method or the "),ZY=n(Aee,"A",{href:!0});var nyt=s(ZY);tBr=r(nyt,"from_config()"),nyt.forEach(t),aBr=r(Aee,` class
method.`),Aee.forEach(t),nBr=i(oi),X9=n(oi,"P",{});var oGe=s(X9);sBr=r(oGe,"This class cannot be instantiated directly using "),cMe=n(oGe,"CODE",{});var syt=s(cMe);lBr=r(syt,"__init__()"),syt.forEach(t),iBr=r(oGe," (throws an error)."),oGe.forEach(t),dBr=i(oi),Qt=n(oi,"DIV",{class:!0});var KA=s(Qt);T(z9.$$.fragment,KA),cBr=i(KA),fMe=n(KA,"P",{});var lyt=s(fMe);fBr=r(lyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lyt.forEach(t),mBr=i(KA),Yc=n(KA,"P",{});var yee=s(Yc);gBr=r(yee,`Note:
Loading a model from its configuration file does `),mMe=n(yee,"STRONG",{});var iyt=s(mMe);hBr=r(iyt,"not"),iyt.forEach(t),pBr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(yee,"A",{href:!0});var dyt=s(eK);_Br=r(dyt,"from_pretrained()"),dyt.forEach(t),uBr=r(yee," to load the model weights."),yee.forEach(t),bBr=i(KA),T(ew.$$.fragment,KA),KA.forEach(t),vBr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(W9.$$.fragment,ri),FBr=i(ri),gMe=n(ri,"P",{});var cyt=s(gMe);TBr=r(cyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cyt.forEach(t),MBr=i(ri),Fn=n(ri,"P",{});var ZA=s(Fn);EBr=r(ZA,"The model class to instantiate is selected based on the "),hMe=n(ZA,"CODE",{});var fyt=s(hMe);CBr=r(fyt,"model_type"),fyt.forEach(t),wBr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),pMe=n(ZA,"CODE",{});var myt=s(pMe);ABr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),yBr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(ZA,"CODE",{});var gyt=s(_Me);LBr=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),xBr=r(ZA,":"),ZA.forEach(t),$Br=i(ri),$e=n(ri,"UL",{});var Ne=s($e);ow=n(Ne,"LI",{});var AIe=s(ow);uMe=n(AIe,"STRONG",{});var hyt=s(uMe);kBr=r(hyt,"albert"),hyt.forEach(t),SBr=r(AIe," \u2014 "),oK=n(AIe,"A",{href:!0});var pyt=s(oK);RBr=r(pyt,"FlaxAlbertForQuestionAnswering"),pyt.forEach(t),PBr=r(AIe," (ALBERT model)"),AIe.forEach(t),BBr=i(Ne),rw=n(Ne,"LI",{});var yIe=s(rw);bMe=n(yIe,"STRONG",{});var _yt=s(bMe);IBr=r(_yt,"bart"),_yt.forEach(t),qBr=r(yIe," \u2014 "),rK=n(yIe,"A",{href:!0});var uyt=s(rK);NBr=r(uyt,"FlaxBartForQuestionAnswering"),uyt.forEach(t),jBr=r(yIe," (BART model)"),yIe.forEach(t),DBr=i(Ne),tw=n(Ne,"LI",{});var LIe=s(tw);vMe=n(LIe,"STRONG",{});var byt=s(vMe);GBr=r(byt,"bert"),byt.forEach(t),OBr=r(LIe," \u2014 "),tK=n(LIe,"A",{href:!0});var vyt=s(tK);VBr=r(vyt,"FlaxBertForQuestionAnswering"),vyt.forEach(t),XBr=r(LIe," (BERT model)"),LIe.forEach(t),zBr=i(Ne),aw=n(Ne,"LI",{});var xIe=s(aw);FMe=n(xIe,"STRONG",{});var Fyt=s(FMe);WBr=r(Fyt,"big_bird"),Fyt.forEach(t),QBr=r(xIe," \u2014 "),aK=n(xIe,"A",{href:!0});var Tyt=s(aK);HBr=r(Tyt,"FlaxBigBirdForQuestionAnswering"),Tyt.forEach(t),UBr=r(xIe," (BigBird model)"),xIe.forEach(t),JBr=i(Ne),nw=n(Ne,"LI",{});var $Ie=s(nw);TMe=n($Ie,"STRONG",{});var Myt=s(TMe);YBr=r(Myt,"distilbert"),Myt.forEach(t),KBr=r($Ie," \u2014 "),nK=n($Ie,"A",{href:!0});var Eyt=s(nK);ZBr=r(Eyt,"FlaxDistilBertForQuestionAnswering"),Eyt.forEach(t),eIr=r($Ie," (DistilBERT model)"),$Ie.forEach(t),oIr=i(Ne),sw=n(Ne,"LI",{});var kIe=s(sw);MMe=n(kIe,"STRONG",{});var Cyt=s(MMe);rIr=r(Cyt,"electra"),Cyt.forEach(t),tIr=r(kIe," \u2014 "),sK=n(kIe,"A",{href:!0});var wyt=s(sK);aIr=r(wyt,"FlaxElectraForQuestionAnswering"),wyt.forEach(t),nIr=r(kIe," (ELECTRA model)"),kIe.forEach(t),sIr=i(Ne),lw=n(Ne,"LI",{});var SIe=s(lw);EMe=n(SIe,"STRONG",{});var Ayt=s(EMe);lIr=r(Ayt,"mbart"),Ayt.forEach(t),iIr=r(SIe," \u2014 "),lK=n(SIe,"A",{href:!0});var yyt=s(lK);dIr=r(yyt,"FlaxMBartForQuestionAnswering"),yyt.forEach(t),cIr=r(SIe," (mBART model)"),SIe.forEach(t),fIr=i(Ne),iw=n(Ne,"LI",{});var RIe=s(iw);CMe=n(RIe,"STRONG",{});var Lyt=s(CMe);mIr=r(Lyt,"roberta"),Lyt.forEach(t),gIr=r(RIe," \u2014 "),iK=n(RIe,"A",{href:!0});var xyt=s(iK);hIr=r(xyt,"FlaxRobertaForQuestionAnswering"),xyt.forEach(t),pIr=r(RIe," (RoBERTa model)"),RIe.forEach(t),_Ir=i(Ne),dw=n(Ne,"LI",{});var PIe=s(dw);wMe=n(PIe,"STRONG",{});var $yt=s(wMe);uIr=r($yt,"roformer"),$yt.forEach(t),bIr=r(PIe," \u2014 "),dK=n(PIe,"A",{href:!0});var kyt=s(dK);vIr=r(kyt,"FlaxRoFormerForQuestionAnswering"),kyt.forEach(t),FIr=r(PIe," (RoFormer model)"),PIe.forEach(t),TIr=i(Ne),cw=n(Ne,"LI",{});var BIe=s(cw);AMe=n(BIe,"STRONG",{});var Syt=s(AMe);MIr=r(Syt,"xlm-roberta"),Syt.forEach(t),EIr=r(BIe," \u2014 "),cK=n(BIe,"A",{href:!0});var Ryt=s(cK);CIr=r(Ryt,"FlaxXLMRobertaForQuestionAnswering"),Ryt.forEach(t),wIr=r(BIe," (XLM-RoBERTa model)"),BIe.forEach(t),Ne.forEach(t),AIr=i(ri),T(fw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),UNe=i(f),Kc=n(f,"H2",{class:!0});var rGe=s(Kc);mw=n(rGe,"A",{id:!0,class:!0,href:!0});var Pyt=s(mw);yMe=n(Pyt,"SPAN",{});var Byt=s(yMe);T(Q9.$$.fragment,Byt),Byt.forEach(t),Pyt.forEach(t),yIr=i(rGe),LMe=n(rGe,"SPAN",{});var Iyt=s(LMe);LIr=r(Iyt,"FlaxAutoModelForTokenClassification"),Iyt.forEach(t),rGe.forEach(t),JNe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(H9.$$.fragment,ti),xIr=i(ti),Zc=n(ti,"P",{});var Lee=s(Zc);$Ir=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fK=n(Lee,"A",{href:!0});var qyt=s(fK);kIr=r(qyt,"from_pretrained()"),qyt.forEach(t),SIr=r(Lee," class method or the "),mK=n(Lee,"A",{href:!0});var Nyt=s(mK);RIr=r(Nyt,"from_config()"),Nyt.forEach(t),PIr=r(Lee,` class
method.`),Lee.forEach(t),BIr=i(ti),U9=n(ti,"P",{});var tGe=s(U9);IIr=r(tGe,"This class cannot be instantiated directly using "),xMe=n(tGe,"CODE",{});var jyt=s(xMe);qIr=r(jyt,"__init__()"),jyt.forEach(t),NIr=r(tGe," (throws an error)."),tGe.forEach(t),jIr=i(ti),Ht=n(ti,"DIV",{class:!0});var e6=s(Ht);T(J9.$$.fragment,e6),DIr=i(e6),$Me=n(e6,"P",{});var Dyt=s($Me);GIr=r(Dyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dyt.forEach(t),OIr=i(e6),ef=n(e6,"P",{});var xee=s(ef);VIr=r(xee,`Note:
Loading a model from its configuration file does `),kMe=n(xee,"STRONG",{});var Gyt=s(kMe);XIr=r(Gyt,"not"),Gyt.forEach(t),zIr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(xee,"A",{href:!0});var Oyt=s(gK);WIr=r(Oyt,"from_pretrained()"),Oyt.forEach(t),QIr=r(xee," to load the model weights."),xee.forEach(t),HIr=i(e6),T(gw.$$.fragment,e6),e6.forEach(t),UIr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Y9.$$.fragment,ai),JIr=i(ai),SMe=n(ai,"P",{});var Vyt=s(SMe);YIr=r(Vyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Vyt.forEach(t),KIr=i(ai),Tn=n(ai,"P",{});var o6=s(Tn);ZIr=r(o6,"The model class to instantiate is selected based on the "),RMe=n(o6,"CODE",{});var Xyt=s(RMe);eqr=r(Xyt,"model_type"),Xyt.forEach(t),oqr=r(o6,` property of the config object (either
passed as an argument or loaded from `),PMe=n(o6,"CODE",{});var zyt=s(PMe);rqr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),tqr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(o6,"CODE",{});var Wyt=s(BMe);aqr=r(Wyt,"pretrained_model_name_or_path"),Wyt.forEach(t),nqr=r(o6,":"),o6.forEach(t),sqr=i(ai),De=n(ai,"UL",{});var Fo=s(De);hw=n(Fo,"LI",{});var IIe=s(hw);IMe=n(IIe,"STRONG",{});var Qyt=s(IMe);lqr=r(Qyt,"albert"),Qyt.forEach(t),iqr=r(IIe," \u2014 "),hK=n(IIe,"A",{href:!0});var Hyt=s(hK);dqr=r(Hyt,"FlaxAlbertForTokenClassification"),Hyt.forEach(t),cqr=r(IIe," (ALBERT model)"),IIe.forEach(t),fqr=i(Fo),pw=n(Fo,"LI",{});var qIe=s(pw);qMe=n(qIe,"STRONG",{});var Uyt=s(qMe);mqr=r(Uyt,"bert"),Uyt.forEach(t),gqr=r(qIe," \u2014 "),pK=n(qIe,"A",{href:!0});var Jyt=s(pK);hqr=r(Jyt,"FlaxBertForTokenClassification"),Jyt.forEach(t),pqr=r(qIe," (BERT model)"),qIe.forEach(t),_qr=i(Fo),_w=n(Fo,"LI",{});var NIe=s(_w);NMe=n(NIe,"STRONG",{});var Yyt=s(NMe);uqr=r(Yyt,"big_bird"),Yyt.forEach(t),bqr=r(NIe," \u2014 "),_K=n(NIe,"A",{href:!0});var Kyt=s(_K);vqr=r(Kyt,"FlaxBigBirdForTokenClassification"),Kyt.forEach(t),Fqr=r(NIe," (BigBird model)"),NIe.forEach(t),Tqr=i(Fo),uw=n(Fo,"LI",{});var jIe=s(uw);jMe=n(jIe,"STRONG",{});var Zyt=s(jMe);Mqr=r(Zyt,"distilbert"),Zyt.forEach(t),Eqr=r(jIe," \u2014 "),uK=n(jIe,"A",{href:!0});var eLt=s(uK);Cqr=r(eLt,"FlaxDistilBertForTokenClassification"),eLt.forEach(t),wqr=r(jIe," (DistilBERT model)"),jIe.forEach(t),Aqr=i(Fo),bw=n(Fo,"LI",{});var DIe=s(bw);DMe=n(DIe,"STRONG",{});var oLt=s(DMe);yqr=r(oLt,"electra"),oLt.forEach(t),Lqr=r(DIe," \u2014 "),bK=n(DIe,"A",{href:!0});var rLt=s(bK);xqr=r(rLt,"FlaxElectraForTokenClassification"),rLt.forEach(t),$qr=r(DIe," (ELECTRA model)"),DIe.forEach(t),kqr=i(Fo),vw=n(Fo,"LI",{});var GIe=s(vw);GMe=n(GIe,"STRONG",{});var tLt=s(GMe);Sqr=r(tLt,"roberta"),tLt.forEach(t),Rqr=r(GIe," \u2014 "),vK=n(GIe,"A",{href:!0});var aLt=s(vK);Pqr=r(aLt,"FlaxRobertaForTokenClassification"),aLt.forEach(t),Bqr=r(GIe," (RoBERTa model)"),GIe.forEach(t),Iqr=i(Fo),Fw=n(Fo,"LI",{});var OIe=s(Fw);OMe=n(OIe,"STRONG",{});var nLt=s(OMe);qqr=r(nLt,"roformer"),nLt.forEach(t),Nqr=r(OIe," \u2014 "),FK=n(OIe,"A",{href:!0});var sLt=s(FK);jqr=r(sLt,"FlaxRoFormerForTokenClassification"),sLt.forEach(t),Dqr=r(OIe," (RoFormer model)"),OIe.forEach(t),Gqr=i(Fo),Tw=n(Fo,"LI",{});var VIe=s(Tw);VMe=n(VIe,"STRONG",{});var lLt=s(VMe);Oqr=r(lLt,"xlm-roberta"),lLt.forEach(t),Vqr=r(VIe," \u2014 "),TK=n(VIe,"A",{href:!0});var iLt=s(TK);Xqr=r(iLt,"FlaxXLMRobertaForTokenClassification"),iLt.forEach(t),zqr=r(VIe," (XLM-RoBERTa model)"),VIe.forEach(t),Fo.forEach(t),Wqr=i(ai),T(Mw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),YNe=i(f),of=n(f,"H2",{class:!0});var aGe=s(of);Ew=n(aGe,"A",{id:!0,class:!0,href:!0});var dLt=s(Ew);XMe=n(dLt,"SPAN",{});var cLt=s(XMe);T(K9.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),Qqr=i(aGe),zMe=n(aGe,"SPAN",{});var fLt=s(zMe);Hqr=r(fLt,"FlaxAutoModelForMultipleChoice"),fLt.forEach(t),aGe.forEach(t),KNe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Z9.$$.fragment,ni),Uqr=i(ni),rf=n(ni,"P",{});var $ee=s(rf);Jqr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MK=n($ee,"A",{href:!0});var mLt=s(MK);Yqr=r(mLt,"from_pretrained()"),mLt.forEach(t),Kqr=r($ee," class method or the "),EK=n($ee,"A",{href:!0});var gLt=s(EK);Zqr=r(gLt,"from_config()"),gLt.forEach(t),eNr=r($ee,` class
method.`),$ee.forEach(t),oNr=i(ni),ex=n(ni,"P",{});var nGe=s(ex);rNr=r(nGe,"This class cannot be instantiated directly using "),WMe=n(nGe,"CODE",{});var hLt=s(WMe);tNr=r(hLt,"__init__()"),hLt.forEach(t),aNr=r(nGe," (throws an error)."),nGe.forEach(t),nNr=i(ni),Ut=n(ni,"DIV",{class:!0});var r6=s(Ut);T(ox.$$.fragment,r6),sNr=i(r6),QMe=n(r6,"P",{});var pLt=s(QMe);lNr=r(pLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pLt.forEach(t),iNr=i(r6),tf=n(r6,"P",{});var kee=s(tf);dNr=r(kee,`Note:
Loading a model from its configuration file does `),HMe=n(kee,"STRONG",{});var _Lt=s(HMe);cNr=r(_Lt,"not"),_Lt.forEach(t),fNr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(kee,"A",{href:!0});var uLt=s(CK);mNr=r(uLt,"from_pretrained()"),uLt.forEach(t),gNr=r(kee," to load the model weights."),kee.forEach(t),hNr=i(r6),T(Cw.$$.fragment,r6),r6.forEach(t),pNr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(rx.$$.fragment,si),_Nr=i(si),UMe=n(si,"P",{});var bLt=s(UMe);uNr=r(bLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bLt.forEach(t),bNr=i(si),Mn=n(si,"P",{});var t6=s(Mn);vNr=r(t6,"The model class to instantiate is selected based on the "),JMe=n(t6,"CODE",{});var vLt=s(JMe);FNr=r(vLt,"model_type"),vLt.forEach(t),TNr=r(t6,` property of the config object (either
passed as an argument or loaded from `),YMe=n(t6,"CODE",{});var FLt=s(YMe);MNr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),ENr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(t6,"CODE",{});var TLt=s(KMe);CNr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),wNr=r(t6,":"),t6.forEach(t),ANr=i(si),Ge=n(si,"UL",{});var To=s(Ge);ww=n(To,"LI",{});var XIe=s(ww);ZMe=n(XIe,"STRONG",{});var MLt=s(ZMe);yNr=r(MLt,"albert"),MLt.forEach(t),LNr=r(XIe," \u2014 "),wK=n(XIe,"A",{href:!0});var ELt=s(wK);xNr=r(ELt,"FlaxAlbertForMultipleChoice"),ELt.forEach(t),$Nr=r(XIe," (ALBERT model)"),XIe.forEach(t),kNr=i(To),Aw=n(To,"LI",{});var zIe=s(Aw);eEe=n(zIe,"STRONG",{});var CLt=s(eEe);SNr=r(CLt,"bert"),CLt.forEach(t),RNr=r(zIe," \u2014 "),AK=n(zIe,"A",{href:!0});var wLt=s(AK);PNr=r(wLt,"FlaxBertForMultipleChoice"),wLt.forEach(t),BNr=r(zIe," (BERT model)"),zIe.forEach(t),INr=i(To),yw=n(To,"LI",{});var WIe=s(yw);oEe=n(WIe,"STRONG",{});var ALt=s(oEe);qNr=r(ALt,"big_bird"),ALt.forEach(t),NNr=r(WIe," \u2014 "),yK=n(WIe,"A",{href:!0});var yLt=s(yK);jNr=r(yLt,"FlaxBigBirdForMultipleChoice"),yLt.forEach(t),DNr=r(WIe," (BigBird model)"),WIe.forEach(t),GNr=i(To),Lw=n(To,"LI",{});var QIe=s(Lw);rEe=n(QIe,"STRONG",{});var LLt=s(rEe);ONr=r(LLt,"distilbert"),LLt.forEach(t),VNr=r(QIe," \u2014 "),LK=n(QIe,"A",{href:!0});var xLt=s(LK);XNr=r(xLt,"FlaxDistilBertForMultipleChoice"),xLt.forEach(t),zNr=r(QIe," (DistilBERT model)"),QIe.forEach(t),WNr=i(To),xw=n(To,"LI",{});var HIe=s(xw);tEe=n(HIe,"STRONG",{});var $Lt=s(tEe);QNr=r($Lt,"electra"),$Lt.forEach(t),HNr=r(HIe," \u2014 "),xK=n(HIe,"A",{href:!0});var kLt=s(xK);UNr=r(kLt,"FlaxElectraForMultipleChoice"),kLt.forEach(t),JNr=r(HIe," (ELECTRA model)"),HIe.forEach(t),YNr=i(To),$w=n(To,"LI",{});var UIe=s($w);aEe=n(UIe,"STRONG",{});var SLt=s(aEe);KNr=r(SLt,"roberta"),SLt.forEach(t),ZNr=r(UIe," \u2014 "),$K=n(UIe,"A",{href:!0});var RLt=s($K);ejr=r(RLt,"FlaxRobertaForMultipleChoice"),RLt.forEach(t),ojr=r(UIe," (RoBERTa model)"),UIe.forEach(t),rjr=i(To),kw=n(To,"LI",{});var JIe=s(kw);nEe=n(JIe,"STRONG",{});var PLt=s(nEe);tjr=r(PLt,"roformer"),PLt.forEach(t),ajr=r(JIe," \u2014 "),kK=n(JIe,"A",{href:!0});var BLt=s(kK);njr=r(BLt,"FlaxRoFormerForMultipleChoice"),BLt.forEach(t),sjr=r(JIe," (RoFormer model)"),JIe.forEach(t),ljr=i(To),Sw=n(To,"LI",{});var YIe=s(Sw);sEe=n(YIe,"STRONG",{});var ILt=s(sEe);ijr=r(ILt,"xlm-roberta"),ILt.forEach(t),djr=r(YIe," \u2014 "),SK=n(YIe,"A",{href:!0});var qLt=s(SK);cjr=r(qLt,"FlaxXLMRobertaForMultipleChoice"),qLt.forEach(t),fjr=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),To.forEach(t),mjr=i(si),T(Rw.$$.fragment,si),si.forEach(t),ni.forEach(t),ZNe=i(f),af=n(f,"H2",{class:!0});var sGe=s(af);Pw=n(sGe,"A",{id:!0,class:!0,href:!0});var NLt=s(Pw);lEe=n(NLt,"SPAN",{});var jLt=s(lEe);T(tx.$$.fragment,jLt),jLt.forEach(t),NLt.forEach(t),gjr=i(sGe),iEe=n(sGe,"SPAN",{});var DLt=s(iEe);hjr=r(DLt,"FlaxAutoModelForNextSentencePrediction"),DLt.forEach(t),sGe.forEach(t),eje=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(ax.$$.fragment,li),pjr=i(li),nf=n(li,"P",{});var See=s(nf);_jr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RK=n(See,"A",{href:!0});var GLt=s(RK);ujr=r(GLt,"from_pretrained()"),GLt.forEach(t),bjr=r(See," class method or the "),PK=n(See,"A",{href:!0});var OLt=s(PK);vjr=r(OLt,"from_config()"),OLt.forEach(t),Fjr=r(See,` class
method.`),See.forEach(t),Tjr=i(li),nx=n(li,"P",{});var lGe=s(nx);Mjr=r(lGe,"This class cannot be instantiated directly using "),dEe=n(lGe,"CODE",{});var VLt=s(dEe);Ejr=r(VLt,"__init__()"),VLt.forEach(t),Cjr=r(lGe," (throws an error)."),lGe.forEach(t),wjr=i(li),Jt=n(li,"DIV",{class:!0});var a6=s(Jt);T(sx.$$.fragment,a6),Ajr=i(a6),cEe=n(a6,"P",{});var XLt=s(cEe);yjr=r(XLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XLt.forEach(t),Ljr=i(a6),sf=n(a6,"P",{});var Ree=s(sf);xjr=r(Ree,`Note:
Loading a model from its configuration file does `),fEe=n(Ree,"STRONG",{});var zLt=s(fEe);$jr=r(zLt,"not"),zLt.forEach(t),kjr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Ree,"A",{href:!0});var WLt=s(BK);Sjr=r(WLt,"from_pretrained()"),WLt.forEach(t),Rjr=r(Ree," to load the model weights."),Ree.forEach(t),Pjr=i(a6),T(Bw.$$.fragment,a6),a6.forEach(t),Bjr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(lx.$$.fragment,ii),Ijr=i(ii),mEe=n(ii,"P",{});var QLt=s(mEe);qjr=r(QLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),QLt.forEach(t),Njr=i(ii),En=n(ii,"P",{});var n6=s(En);jjr=r(n6,"The model class to instantiate is selected based on the "),gEe=n(n6,"CODE",{});var HLt=s(gEe);Djr=r(HLt,"model_type"),HLt.forEach(t),Gjr=r(n6,` property of the config object (either
passed as an argument or loaded from `),hEe=n(n6,"CODE",{});var ULt=s(hEe);Ojr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),Vjr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(n6,"CODE",{});var JLt=s(pEe);Xjr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),zjr=r(n6,":"),n6.forEach(t),Wjr=i(ii),_Ee=n(ii,"UL",{});var YLt=s(_Ee);Iw=n(YLt,"LI",{});var KIe=s(Iw);uEe=n(KIe,"STRONG",{});var KLt=s(uEe);Qjr=r(KLt,"bert"),KLt.forEach(t),Hjr=r(KIe," \u2014 "),IK=n(KIe,"A",{href:!0});var ZLt=s(IK);Ujr=r(ZLt,"FlaxBertForNextSentencePrediction"),ZLt.forEach(t),Jjr=r(KIe," (BERT model)"),KIe.forEach(t),YLt.forEach(t),Yjr=i(ii),T(qw.$$.fragment,ii),ii.forEach(t),li.forEach(t),oje=i(f),lf=n(f,"H2",{class:!0});var iGe=s(lf);Nw=n(iGe,"A",{id:!0,class:!0,href:!0});var e8t=s(Nw);bEe=n(e8t,"SPAN",{});var o8t=s(bEe);T(ix.$$.fragment,o8t),o8t.forEach(t),e8t.forEach(t),Kjr=i(iGe),vEe=n(iGe,"SPAN",{});var r8t=s(vEe);Zjr=r(r8t,"FlaxAutoModelForImageClassification"),r8t.forEach(t),iGe.forEach(t),rje=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(dx.$$.fragment,di),eDr=i(di),df=n(di,"P",{});var Pee=s(df);oDr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qK=n(Pee,"A",{href:!0});var t8t=s(qK);rDr=r(t8t,"from_pretrained()"),t8t.forEach(t),tDr=r(Pee," class method or the "),NK=n(Pee,"A",{href:!0});var a8t=s(NK);aDr=r(a8t,"from_config()"),a8t.forEach(t),nDr=r(Pee,` class
method.`),Pee.forEach(t),sDr=i(di),cx=n(di,"P",{});var dGe=s(cx);lDr=r(dGe,"This class cannot be instantiated directly using "),FEe=n(dGe,"CODE",{});var n8t=s(FEe);iDr=r(n8t,"__init__()"),n8t.forEach(t),dDr=r(dGe," (throws an error)."),dGe.forEach(t),cDr=i(di),Yt=n(di,"DIV",{class:!0});var s6=s(Yt);T(fx.$$.fragment,s6),fDr=i(s6),TEe=n(s6,"P",{});var s8t=s(TEe);mDr=r(s8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),s8t.forEach(t),gDr=i(s6),cf=n(s6,"P",{});var Bee=s(cf);hDr=r(Bee,`Note:
Loading a model from its configuration file does `),MEe=n(Bee,"STRONG",{});var l8t=s(MEe);pDr=r(l8t,"not"),l8t.forEach(t),_Dr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Bee,"A",{href:!0});var i8t=s(jK);uDr=r(i8t,"from_pretrained()"),i8t.forEach(t),bDr=r(Bee," to load the model weights."),Bee.forEach(t),vDr=i(s6),T(jw.$$.fragment,s6),s6.forEach(t),FDr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(mx.$$.fragment,ci),TDr=i(ci),EEe=n(ci,"P",{});var d8t=s(EEe);MDr=r(d8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),d8t.forEach(t),EDr=i(ci),Cn=n(ci,"P",{});var l6=s(Cn);CDr=r(l6,"The model class to instantiate is selected based on the "),CEe=n(l6,"CODE",{});var c8t=s(CEe);wDr=r(c8t,"model_type"),c8t.forEach(t),ADr=r(l6,` property of the config object (either
passed as an argument or loaded from `),wEe=n(l6,"CODE",{});var f8t=s(wEe);yDr=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),LDr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(l6,"CODE",{});var m8t=s(AEe);xDr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),$Dr=r(l6,":"),l6.forEach(t),kDr=i(ci),gx=n(ci,"UL",{});var cGe=s(gx);Dw=n(cGe,"LI",{});var ZIe=s(Dw);yEe=n(ZIe,"STRONG",{});var g8t=s(yEe);SDr=r(g8t,"beit"),g8t.forEach(t),RDr=r(ZIe," \u2014 "),DK=n(ZIe,"A",{href:!0});var h8t=s(DK);PDr=r(h8t,"FlaxBeitForImageClassification"),h8t.forEach(t),BDr=r(ZIe," (BEiT model)"),ZIe.forEach(t),IDr=i(cGe),Gw=n(cGe,"LI",{});var eqe=s(Gw);LEe=n(eqe,"STRONG",{});var p8t=s(LEe);qDr=r(p8t,"vit"),p8t.forEach(t),NDr=r(eqe," \u2014 "),GK=n(eqe,"A",{href:!0});var _8t=s(GK);jDr=r(_8t,"FlaxViTForImageClassification"),_8t.forEach(t),DDr=r(eqe," (ViT model)"),eqe.forEach(t),cGe.forEach(t),GDr=i(ci),T(Ow.$$.fragment,ci),ci.forEach(t),di.forEach(t),tje=i(f),ff=n(f,"H2",{class:!0});var fGe=s(ff);Vw=n(fGe,"A",{id:!0,class:!0,href:!0});var u8t=s(Vw);xEe=n(u8t,"SPAN",{});var b8t=s(xEe);T(hx.$$.fragment,b8t),b8t.forEach(t),u8t.forEach(t),ODr=i(fGe),$Ee=n(fGe,"SPAN",{});var v8t=s($Ee);VDr=r(v8t,"FlaxAutoModelForVision2Seq"),v8t.forEach(t),fGe.forEach(t),aje=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(px.$$.fragment,fi),XDr=i(fi),mf=n(fi,"P",{});var Iee=s(mf);zDr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OK=n(Iee,"A",{href:!0});var F8t=s(OK);WDr=r(F8t,"from_pretrained()"),F8t.forEach(t),QDr=r(Iee," class method or the "),VK=n(Iee,"A",{href:!0});var T8t=s(VK);HDr=r(T8t,"from_config()"),T8t.forEach(t),UDr=r(Iee,` class
method.`),Iee.forEach(t),JDr=i(fi),_x=n(fi,"P",{});var mGe=s(_x);YDr=r(mGe,"This class cannot be instantiated directly using "),kEe=n(mGe,"CODE",{});var M8t=s(kEe);KDr=r(M8t,"__init__()"),M8t.forEach(t),ZDr=r(mGe," (throws an error)."),mGe.forEach(t),eGr=i(fi),Kt=n(fi,"DIV",{class:!0});var i6=s(Kt);T(ux.$$.fragment,i6),oGr=i(i6),SEe=n(i6,"P",{});var E8t=s(SEe);rGr=r(E8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),E8t.forEach(t),tGr=i(i6),gf=n(i6,"P",{});var qee=s(gf);aGr=r(qee,`Note:
Loading a model from its configuration file does `),REe=n(qee,"STRONG",{});var C8t=s(REe);nGr=r(C8t,"not"),C8t.forEach(t),sGr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(qee,"A",{href:!0});var w8t=s(XK);lGr=r(w8t,"from_pretrained()"),w8t.forEach(t),iGr=r(qee," to load the model weights."),qee.forEach(t),dGr=i(i6),T(Xw.$$.fragment,i6),i6.forEach(t),cGr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(bx.$$.fragment,mi),fGr=i(mi),PEe=n(mi,"P",{});var A8t=s(PEe);mGr=r(A8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A8t.forEach(t),gGr=i(mi),wn=n(mi,"P",{});var d6=s(wn);hGr=r(d6,"The model class to instantiate is selected based on the "),BEe=n(d6,"CODE",{});var y8t=s(BEe);pGr=r(y8t,"model_type"),y8t.forEach(t),_Gr=r(d6,` property of the config object (either
passed as an argument or loaded from `),IEe=n(d6,"CODE",{});var L8t=s(IEe);uGr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),bGr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(d6,"CODE",{});var x8t=s(qEe);vGr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),FGr=r(d6,":"),d6.forEach(t),TGr=i(mi),NEe=n(mi,"UL",{});var $8t=s(NEe);zw=n($8t,"LI",{});var oqe=s(zw);jEe=n(oqe,"STRONG",{});var k8t=s(jEe);MGr=r(k8t,"vision-encoder-decoder"),k8t.forEach(t),EGr=r(oqe," \u2014 "),zK=n(oqe,"A",{href:!0});var S8t=s(zK);CGr=r(S8t,"FlaxVisionEncoderDecoderModel"),S8t.forEach(t),wGr=r(oqe," (Vision Encoder decoder model)"),oqe.forEach(t),$8t.forEach(t),AGr=i(mi),T(Ww.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Ixt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(D$,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(G$,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig"),c(O$,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(V$,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig"),c(X$,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig"),c(z$,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(W$,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Q$,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(H$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(U$,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(J$,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig"),c(Y$,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig"),c(K$,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig"),c(Z$,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig"),c(ek,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig"),c(ok,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig"),c(rk,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig"),c(tk,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ak,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(nk,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(sk,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig"),c(lk,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(ik,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(dk,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig"),c(ck,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig"),c(fk,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig"),c(mk,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig"),c(gk,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig"),c(hk,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig"),c(pk,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_k,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig"),c(uk,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig"),c(bk,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig"),c(vk,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig"),c(Fk,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig"),c(Tk,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig"),c(Mk,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config"),c(Ek,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Ck,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig"),c(wk,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig"),c(Ak,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig"),c(yk,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Lk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(xk,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c($k,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig"),c(kk,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig"),c(Sk,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig"),c(Rk,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig"),c(Pk,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config"),c(Bk,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig"),c(Ik,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(qk,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig"),c(Nk,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(jk,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Dk,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig"),c(Gk,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config"),c(Ok,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Vk,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Xk,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig"),c(zk,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig"),c(Wk,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Qk,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig"),c(Hk,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Uk,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Jk,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Yk,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagConfig"),c(Kk,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmConfig"),c(Zk,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig"),c(eS,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig"),c(oS,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig"),c(rS,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig"),c(tS,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig"),c(aS,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig"),c(nS,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig"),c(sS,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig"),c(lS,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig"),c(iS,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig"),c(dS,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(cS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(fS,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(mS,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig"),c(gS,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(hS,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig"),c(pS,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config"),c(_S,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig"),c(uS,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(bS,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(vS,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig"),c(FS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(TS,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(MS,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig"),c(ES,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig"),c(CS,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(wS,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(AS,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(yS,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig"),c(LS,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(xS,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c($S,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(kS,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig"),c(SS,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig"),c(RS,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig"),c(PS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(BS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(IS,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(qS,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig"),c(NS,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig"),c(jS,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(DS,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(GS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(OS,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizer"),c(XS,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizerFast"),c(zS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizer"),c(WS,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(QS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(HS,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizerFast"),c(US,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(JS,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(YS,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(KS,"href","/docs/transformers/pr_17254/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(ZS,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(eR,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizerFast"),c(oR,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(rR,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(tR,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aR,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(sR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(lR,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(iR,"href","/docs/transformers/pr_17254/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(dR,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizer"),c(cR,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineTokenizer"),c(mR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(gR,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(pR,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(_R,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizer"),c(uR,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(bR,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(vR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizer"),c(MR,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(CR,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(wR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(AR,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(LR,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(xR,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizer"),c($R,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(kR,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(SR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizer"),c(RR,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(PR,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(BR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizer"),c(IR,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(qR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OR,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizer"),c(XR,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QR,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(UR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(JR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(YR,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ZR,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(eP,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizer"),c(oP,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizerFast"),c(rP,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizer"),c(tP,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(aP,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeTokenizer"),c(nP,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(sP,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(lP,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(iP,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianTokenizer"),c(dP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizer"),c(cP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(fP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(mP,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(gP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(hP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17254/en/model_doc/mluke#transformers.MLukeTokenizer"),c(_P,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(uP,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(vP,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(FP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(TP,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(MP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(EP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wP,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(LP,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xP,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($P,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kP,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartTokenizer"),c(RP,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(PP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(BP,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagTokenizer"),c(qP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizer"),c(NP,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizerFast"),c(jP,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizer"),c(DP,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(GP,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizer"),c(OP,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(XP,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WP,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QP,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(HP,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(UP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(JP,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(YP,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizer"),c(KP,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(eB,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(rB,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(tB,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasTokenizer"),c(aB,"href","/docs/transformers/pr_17254/en/model_doc/tapex#transformers.TapexTokenizer"),c(nB,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(sB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(fB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizer"),c(mB,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(gB,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMTokenizer"),c(hB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(pB,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(FB,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(TB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(MB,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(EB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(CB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xB,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c($B,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(qB,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(YB,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(KB,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(ZB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(eI,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(oI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(aI,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(nI,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRProcessor"),c(sI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltProcessor"),c(dI,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(cI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(yi,"class","relative group"),c(gI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_I,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel"),c(uI,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel"),c(bI,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel"),c(vI,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(FI,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(TI,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel"),c(MI,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(EI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(CI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(wI,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel"),c(AI,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel"),c(yI,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel"),c(LI,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel"),c(xI,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel"),c($I,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel"),c(kI,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel"),c(SI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(RI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(PI,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(BI,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel"),c(II,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(qI,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(NI,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel"),c(jI,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel"),c(DI,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel"),c(GI,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(OI,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel"),c(VI,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel"),c(XI,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel"),c(zI,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel"),c(WI,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel"),c(QI,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel"),c(HI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel"),c(UI,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel"),c(JI,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel"),c(YI,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model"),c(KI,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(ZI,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel"),c(eq,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel"),c(oq,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel"),c(rq,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(tq,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(aq,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(nq,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel"),c(sq,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel"),c(lq,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel"),c(iq,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel"),c(dq,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c(cq,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel"),c(fq,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel"),c(mq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel"),c(gq,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(hq,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel"),c(pq,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel"),c(_q,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model"),c(uq,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel"),c(bq,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(vq,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel"),c(Fq,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel"),c(Tq,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel"),c(Mq,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel"),c(Eq,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Cq,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wq,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Aq,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel"),c(yq,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel"),c(Lq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel"),c(xq,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel"),c($q,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(kq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel"),c(Sq,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel"),c(Rq,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel"),c(Pq,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel"),c(Bq,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel"),c(Iq,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(qq,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel"),c(Nq,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jq,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel"),c(Dq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model"),c(Gq,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel"),c(Oq,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Vq,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Xq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zq,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Wq,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel"),c(Qq,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel"),c(Hq,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Uq,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Jq,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel"),c(Yq,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Kq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Zq,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(eN,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel"),c(oN,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel"),c(rN,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel"),c(tN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(aN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(nN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(sN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel"),c(lN,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel"),c(iN,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForPreTraining"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(dN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fN,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mN,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining"),c(gN,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hN,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining"),c(pN,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(_N,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bN,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vN,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FN,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TN,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining"),c(EN,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CN,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining"),c(wN,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining"),c(AN,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yN,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(LN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(xN,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($N,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SN,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(RN,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(PN,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(BN,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(IN,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qN,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(NN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jN,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(DN,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ON,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VN,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(zN,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(WN,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(QN,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(HN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(UN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(JN,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(KN,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForCausalLM"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(ej,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tj,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM"),c(aj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel"),c(nj,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(sj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(lj,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ij,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(dj,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(cj,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(fj,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mj,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(gj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM"),c(hj,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pj,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(_j,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(uj,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM"),c(bj,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM"),c(vj,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Fj,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Tj,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM"),c(Mj,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Ej,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Cj,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(wj,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Aj,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(yj,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Lj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(xj,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c($j,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(kj,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Rj,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Pj,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Bj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Ij,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(qj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Nj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForMaskedLM"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(jj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gj,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oj,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(eD,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(oD,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(rD,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aD,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nD,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dD,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(cD,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(fD,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(gD,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pD,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(_D,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bD,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(FD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(TD,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForSeq2SeqLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(MD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ED,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c($D,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel"),c(PD,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForSequenceClassification"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(GD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c($G,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForMultipleChoice"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(IG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s4,"id","transformers.AutoModelForNextSentencePrediction"),c(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(hO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_O,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(bO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(vO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(FO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(TO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.AutoModelForTokenClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(MO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(LO,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification"),c($O,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(SO,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(RO,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(PO,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(BO,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(IO,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(NO,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(jO,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(DO,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(OO,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(VO,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(XO,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WO,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(QO,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(HO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(YO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(KO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(eV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(rV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(tV,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.AutoModelForQuestionAnswering"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(aV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(TV,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(OV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(zV,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.AutoModelForTableQuestionAnswering"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c(WV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.AutoModelForImageClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(JV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification"),c(eX,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(oX,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification"),c(rX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(tX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification"),c(aX,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(nX,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(sX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(lX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(iX,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(dX,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(cX,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(fX,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(mX,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(gX,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification"),c(hX,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification"),c(pX,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForVision2Seq"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForAudioClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(FX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c($X,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioFrameClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(SX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(IX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(qX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(NX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(jX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForCTC"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XX,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC"),c(zX,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC"),c(WX,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC"),c(QX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(HX,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(UX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(JX,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(YX,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(KX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(rz,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioXVector"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(tz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(lz,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(iz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(dz,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(cz,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForMaskedImageModeling"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForMaskedImageModeling"),c(yd,"class","relative group"),c(fz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hz,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(pz,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(_z,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForObjectDetection"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(uz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Tz,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForImageSegmentation"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForSemanticSegmentation"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForSemanticSegmentation"),c(qd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($z,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(kz,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Sz,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForInstanceSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.TFAutoModel"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel"),c(Gz,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel"),c(Oz,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel"),c(Vz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Xz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(zz,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel"),c(Wz,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel"),c(Qz,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel"),c(Hz,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel"),c(Uz,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Jz,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Yz,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel"),c(Kz,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Zz,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(eW,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(oW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel"),c(rW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(tW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel"),c(aW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(nW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model"),c(sW,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel"),c(lW,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel"),c(iW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(dW,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel"),c(cW,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel"),c(fW,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel"),c(mW,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel"),c(gW,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel"),c(hW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(pW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel"),c(_W,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model"),c(uW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(bW,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel"),c(vW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel"),c(FW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel"),c(TW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel"),c(MW,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(EW,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel"),c(CW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model"),c(wW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel"),c(AW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(yW,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel"),c(LW,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(xW,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c($W,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel"),c(kW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(SW,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForPreTraining"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(RW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(qW,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(NW,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining"),c(jW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(DW,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(OW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(VW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(XW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(zW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QW,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(HW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(UW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KW,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(ZW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(rQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.TFAutoModelForCausalLM"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(nQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(cQ,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mQ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(gQ,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(pQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(_Q,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uQ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModelForImageClassification"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(CQ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(wQ,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(AQ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L7,"id","transformers.TFAutoModelForMaskedLM"),c(L7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L7,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(JQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(oH,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(tH,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel"),c(nH,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(lH,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSequenceClassification"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(dH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c($H,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForMultipleChoice"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(aU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(iU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(dU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForTokenClassification"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(bU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(FU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(TU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(MU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(CU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(wU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(AU,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(yU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c($U,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(kU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(SU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(RU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(PU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(BU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForQuestionAnswering"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(HU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(tJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForVision2Seq"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.FlaxAutoModel"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel"),c(uJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel"),c(bJ,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel"),c(vJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel"),c(FJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(TJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(MJ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(EJ,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel"),c(CJ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(wJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel"),c(AJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(yJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(LJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(xJ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel"),c($J,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kJ,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model"),c(SJ,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(RJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(PJ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(BJ,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model"),c(IJ,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qJ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel"),c(NJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(jJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(DJ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForCausalLM"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(zJ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(WJ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(QJ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(HJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(UJ,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(JJ,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(YJ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(KJ,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForPreTraining"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForPreTraining"),c(qc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(tY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(nY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(sY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(lY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(gY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForMaskedLM"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(hY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(TY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(EY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(AY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(yY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(PY,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(BY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(jY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(KY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForTokenClassification"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(fK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(pK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(_K,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(uK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(bK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(vK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(FK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(TK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(MK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c($K,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(RK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForImageClassification"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(qK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(GK,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(OK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,rt,u),e(rt,hi),e(rt,pi),e(pi,c6),e(rt,bf),b(f,je,u),b(f,We,u),e(We,_i),e(We,yn),e(yn,f6),e(We,Ln),e(We,xn),e(xn,m6),e(We,ui),e(We,$n),e($n,g6),e(We,bi),b(f,vf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,P$),e(Ae,vi),e(vi,B$),e(Ae,I$),b(f,Eo,u),b(f,wa,u),e(wa,q$),e(wa,Ff),e(Ff,N$),e(wa,gGe),b(f,rqe,u),b(f,Fi,u),e(Fi,Tf),e(Tf,Nee),M(h6,Nee,null),e(Fi,hGe),e(Fi,jee),e(jee,pGe),b(f,tqe,u),b(f,kn,u),e(kn,_Ge),e(kn,Dee),e(Dee,uGe),e(kn,bGe),e(kn,Gee),e(Gee,vGe),e(kn,FGe),b(f,aqe,u),M(p6,f,u),b(f,nqe,u),b(f,j$,u),e(j$,TGe),b(f,sqe,u),M(Mf,f,u),b(f,lqe,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Oee),M(_6,Oee,null),e(Ti,MGe),e(Ti,Vee),e(Vee,EGe),b(f,iqe,u),b(f,Co,u),M(u6,Co,null),e(Co,CGe),e(Co,b6),e(b6,wGe),e(b6,D$),e(D$,AGe),e(b6,yGe),e(Co,LGe),e(Co,v6),e(v6,xGe),e(v6,Xee),e(Xee,$Ge),e(v6,kGe),e(Co,SGe),e(Co,Er),M(F6,Er,null),e(Er,RGe),e(Er,zee),e(zee,PGe),e(Er,BGe),e(Er,Mi),e(Mi,IGe),e(Mi,Wee),e(Wee,qGe),e(Mi,NGe),e(Mi,Qee),e(Qee,jGe),e(Mi,DGe),e(Er,GGe),e(Er,A),e(A,Cf),e(Cf,Hee),e(Hee,OGe),e(Cf,VGe),e(Cf,G$),e(G$,XGe),e(Cf,zGe),e(A,WGe),e(A,wf),e(wf,Uee),e(Uee,QGe),e(wf,HGe),e(wf,O$),e(O$,UGe),e(wf,JGe),e(A,YGe),e(A,Af),e(Af,Jee),e(Jee,KGe),e(Af,ZGe),e(Af,V$),e(V$,eOe),e(Af,oOe),e(A,rOe),e(A,yf),e(yf,Yee),e(Yee,tOe),e(yf,aOe),e(yf,X$),e(X$,nOe),e(yf,sOe),e(A,lOe),e(A,Lf),e(Lf,Kee),e(Kee,iOe),e(Lf,dOe),e(Lf,z$),e(z$,cOe),e(Lf,fOe),e(A,mOe),e(A,xf),e(xf,Zee),e(Zee,gOe),e(xf,hOe),e(xf,W$),e(W$,pOe),e(xf,_Oe),e(A,uOe),e(A,$f),e($f,eoe),e(eoe,bOe),e($f,vOe),e($f,Q$),e(Q$,FOe),e($f,TOe),e(A,MOe),e(A,kf),e(kf,ooe),e(ooe,EOe),e(kf,COe),e(kf,H$),e(H$,wOe),e(kf,AOe),e(A,yOe),e(A,Sf),e(Sf,roe),e(roe,LOe),e(Sf,xOe),e(Sf,U$),e(U$,$Oe),e(Sf,kOe),e(A,SOe),e(A,Rf),e(Rf,toe),e(toe,ROe),e(Rf,POe),e(Rf,J$),e(J$,BOe),e(Rf,IOe),e(A,qOe),e(A,Pf),e(Pf,aoe),e(aoe,NOe),e(Pf,jOe),e(Pf,Y$),e(Y$,DOe),e(Pf,GOe),e(A,OOe),e(A,Bf),e(Bf,noe),e(noe,VOe),e(Bf,XOe),e(Bf,K$),e(K$,zOe),e(Bf,WOe),e(A,QOe),e(A,If),e(If,soe),e(soe,HOe),e(If,UOe),e(If,Z$),e(Z$,JOe),e(If,YOe),e(A,KOe),e(A,qf),e(qf,loe),e(loe,ZOe),e(qf,eVe),e(qf,ek),e(ek,oVe),e(qf,rVe),e(A,tVe),e(A,Nf),e(Nf,ioe),e(ioe,aVe),e(Nf,nVe),e(Nf,ok),e(ok,sVe),e(Nf,lVe),e(A,iVe),e(A,jf),e(jf,doe),e(doe,dVe),e(jf,cVe),e(jf,rk),e(rk,fVe),e(jf,mVe),e(A,gVe),e(A,Df),e(Df,coe),e(coe,hVe),e(Df,pVe),e(Df,tk),e(tk,_Ve),e(Df,uVe),e(A,bVe),e(A,Gf),e(Gf,foe),e(foe,vVe),e(Gf,FVe),e(Gf,ak),e(ak,TVe),e(Gf,MVe),e(A,EVe),e(A,Of),e(Of,moe),e(moe,CVe),e(Of,wVe),e(Of,nk),e(nk,AVe),e(Of,yVe),e(A,LVe),e(A,Vf),e(Vf,goe),e(goe,xVe),e(Vf,$Ve),e(Vf,sk),e(sk,kVe),e(Vf,SVe),e(A,RVe),e(A,Xf),e(Xf,hoe),e(hoe,PVe),e(Xf,BVe),e(Xf,lk),e(lk,IVe),e(Xf,qVe),e(A,NVe),e(A,zf),e(zf,poe),e(poe,jVe),e(zf,DVe),e(zf,ik),e(ik,GVe),e(zf,OVe),e(A,VVe),e(A,Wf),e(Wf,_oe),e(_oe,XVe),e(Wf,zVe),e(Wf,dk),e(dk,WVe),e(Wf,QVe),e(A,HVe),e(A,Qf),e(Qf,uoe),e(uoe,UVe),e(Qf,JVe),e(Qf,ck),e(ck,YVe),e(Qf,KVe),e(A,ZVe),e(A,Hf),e(Hf,boe),e(boe,eXe),e(Hf,oXe),e(Hf,fk),e(fk,rXe),e(Hf,tXe),e(A,aXe),e(A,Uf),e(Uf,voe),e(voe,nXe),e(Uf,sXe),e(Uf,mk),e(mk,lXe),e(Uf,iXe),e(A,dXe),e(A,Jf),e(Jf,Foe),e(Foe,cXe),e(Jf,fXe),e(Jf,gk),e(gk,mXe),e(Jf,gXe),e(A,hXe),e(A,Yf),e(Yf,Toe),e(Toe,pXe),e(Yf,_Xe),e(Yf,hk),e(hk,uXe),e(Yf,bXe),e(A,vXe),e(A,Kf),e(Kf,Moe),e(Moe,FXe),e(Kf,TXe),e(Kf,pk),e(pk,MXe),e(Kf,EXe),e(A,CXe),e(A,Zf),e(Zf,Eoe),e(Eoe,wXe),e(Zf,AXe),e(Zf,_k),e(_k,yXe),e(Zf,LXe),e(A,xXe),e(A,em),e(em,Coe),e(Coe,$Xe),e(em,kXe),e(em,uk),e(uk,SXe),e(em,RXe),e(A,PXe),e(A,om),e(om,woe),e(woe,BXe),e(om,IXe),e(om,bk),e(bk,qXe),e(om,NXe),e(A,jXe),e(A,rm),e(rm,Aoe),e(Aoe,DXe),e(rm,GXe),e(rm,vk),e(vk,OXe),e(rm,VXe),e(A,XXe),e(A,tm),e(tm,yoe),e(yoe,zXe),e(tm,WXe),e(tm,Fk),e(Fk,QXe),e(tm,HXe),e(A,UXe),e(A,am),e(am,Loe),e(Loe,JXe),e(am,YXe),e(am,Tk),e(Tk,KXe),e(am,ZXe),e(A,eze),e(A,nm),e(nm,xoe),e(xoe,oze),e(nm,rze),e(nm,Mk),e(Mk,tze),e(nm,aze),e(A,nze),e(A,sm),e(sm,$oe),e($oe,sze),e(sm,lze),e(sm,Ek),e(Ek,ize),e(sm,dze),e(A,cze),e(A,lm),e(lm,koe),e(koe,fze),e(lm,mze),e(lm,Ck),e(Ck,gze),e(lm,hze),e(A,pze),e(A,im),e(im,Soe),e(Soe,_ze),e(im,uze),e(im,wk),e(wk,bze),e(im,vze),e(A,Fze),e(A,dm),e(dm,Roe),e(Roe,Tze),e(dm,Mze),e(dm,Ak),e(Ak,Eze),e(dm,Cze),e(A,wze),e(A,cm),e(cm,Poe),e(Poe,Aze),e(cm,yze),e(cm,yk),e(yk,Lze),e(cm,xze),e(A,$ze),e(A,fm),e(fm,Boe),e(Boe,kze),e(fm,Sze),e(fm,Lk),e(Lk,Rze),e(fm,Pze),e(A,Bze),e(A,mm),e(mm,Ioe),e(Ioe,Ize),e(mm,qze),e(mm,xk),e(xk,Nze),e(mm,jze),e(A,Dze),e(A,gm),e(gm,qoe),e(qoe,Gze),e(gm,Oze),e(gm,$k),e($k,Vze),e(gm,Xze),e(A,zze),e(A,hm),e(hm,Noe),e(Noe,Wze),e(hm,Qze),e(hm,kk),e(kk,Hze),e(hm,Uze),e(A,Jze),e(A,pm),e(pm,joe),e(joe,Yze),e(pm,Kze),e(pm,Sk),e(Sk,Zze),e(pm,eWe),e(A,oWe),e(A,_m),e(_m,Doe),e(Doe,rWe),e(_m,tWe),e(_m,Rk),e(Rk,aWe),e(_m,nWe),e(A,sWe),e(A,um),e(um,Goe),e(Goe,lWe),e(um,iWe),e(um,Pk),e(Pk,dWe),e(um,cWe),e(A,fWe),e(A,bm),e(bm,Ooe),e(Ooe,mWe),e(bm,gWe),e(bm,Bk),e(Bk,hWe),e(bm,pWe),e(A,_We),e(A,vm),e(vm,Voe),e(Voe,uWe),e(vm,bWe),e(vm,Ik),e(Ik,vWe),e(vm,FWe),e(A,TWe),e(A,Fm),e(Fm,Xoe),e(Xoe,MWe),e(Fm,EWe),e(Fm,qk),e(qk,CWe),e(Fm,wWe),e(A,AWe),e(A,Tm),e(Tm,zoe),e(zoe,yWe),e(Tm,LWe),e(Tm,Nk),e(Nk,xWe),e(Tm,$We),e(A,kWe),e(A,Mm),e(Mm,Woe),e(Woe,SWe),e(Mm,RWe),e(Mm,jk),e(jk,PWe),e(Mm,BWe),e(A,IWe),e(A,Em),e(Em,Qoe),e(Qoe,qWe),e(Em,NWe),e(Em,Dk),e(Dk,jWe),e(Em,DWe),e(A,GWe),e(A,Cm),e(Cm,Hoe),e(Hoe,OWe),e(Cm,VWe),e(Cm,Gk),e(Gk,XWe),e(Cm,zWe),e(A,WWe),e(A,wm),e(wm,Uoe),e(Uoe,QWe),e(wm,HWe),e(wm,Ok),e(Ok,UWe),e(wm,JWe),e(A,YWe),e(A,Am),e(Am,Joe),e(Joe,KWe),e(Am,ZWe),e(Am,Vk),e(Vk,eQe),e(Am,oQe),e(A,rQe),e(A,ym),e(ym,Yoe),e(Yoe,tQe),e(ym,aQe),e(ym,Xk),e(Xk,nQe),e(ym,sQe),e(A,lQe),e(A,Lm),e(Lm,Koe),e(Koe,iQe),e(Lm,dQe),e(Lm,zk),e(zk,cQe),e(Lm,fQe),e(A,mQe),e(A,xm),e(xm,Zoe),e(Zoe,gQe),e(xm,hQe),e(xm,Wk),e(Wk,pQe),e(xm,_Qe),e(A,uQe),e(A,$m),e($m,ere),e(ere,bQe),e($m,vQe),e($m,Qk),e(Qk,FQe),e($m,TQe),e(A,MQe),e(A,km),e(km,ore),e(ore,EQe),e(km,CQe),e(km,Hk),e(Hk,wQe),e(km,AQe),e(A,yQe),e(A,Sm),e(Sm,rre),e(rre,LQe),e(Sm,xQe),e(Sm,Uk),e(Uk,$Qe),e(Sm,kQe),e(A,SQe),e(A,Rm),e(Rm,tre),e(tre,RQe),e(Rm,PQe),e(Rm,Jk),e(Jk,BQe),e(Rm,IQe),e(A,qQe),e(A,Pm),e(Pm,are),e(are,NQe),e(Pm,jQe),e(Pm,Yk),e(Yk,DQe),e(Pm,GQe),e(A,OQe),e(A,Bm),e(Bm,nre),e(nre,VQe),e(Bm,XQe),e(Bm,Kk),e(Kk,zQe),e(Bm,WQe),e(A,QQe),e(A,Im),e(Im,sre),e(sre,HQe),e(Im,UQe),e(Im,Zk),e(Zk,JQe),e(Im,YQe),e(A,KQe),e(A,qm),e(qm,lre),e(lre,ZQe),e(qm,eHe),e(qm,eS),e(eS,oHe),e(qm,rHe),e(A,tHe),e(A,Nm),e(Nm,ire),e(ire,aHe),e(Nm,nHe),e(Nm,oS),e(oS,sHe),e(Nm,lHe),e(A,iHe),e(A,jm),e(jm,dre),e(dre,dHe),e(jm,cHe),e(jm,rS),e(rS,fHe),e(jm,mHe),e(A,gHe),e(A,Dm),e(Dm,cre),e(cre,hHe),e(Dm,pHe),e(Dm,tS),e(tS,_He),e(Dm,uHe),e(A,bHe),e(A,Gm),e(Gm,fre),e(fre,vHe),e(Gm,FHe),e(Gm,aS),e(aS,THe),e(Gm,MHe),e(A,EHe),e(A,Om),e(Om,mre),e(mre,CHe),e(Om,wHe),e(Om,nS),e(nS,AHe),e(Om,yHe),e(A,LHe),e(A,Vm),e(Vm,gre),e(gre,xHe),e(Vm,$He),e(Vm,sS),e(sS,kHe),e(Vm,SHe),e(A,RHe),e(A,Xm),e(Xm,hre),e(hre,PHe),e(Xm,BHe),e(Xm,lS),e(lS,IHe),e(Xm,qHe),e(A,NHe),e(A,zm),e(zm,pre),e(pre,jHe),e(zm,DHe),e(zm,iS),e(iS,GHe),e(zm,OHe),e(A,VHe),e(A,Wm),e(Wm,_re),e(_re,XHe),e(Wm,zHe),e(Wm,dS),e(dS,WHe),e(Wm,QHe),e(A,HHe),e(A,Qm),e(Qm,ure),e(ure,UHe),e(Qm,JHe),e(Qm,cS),e(cS,YHe),e(Qm,KHe),e(A,ZHe),e(A,Hm),e(Hm,bre),e(bre,eUe),e(Hm,oUe),e(Hm,fS),e(fS,rUe),e(Hm,tUe),e(A,aUe),e(A,Um),e(Um,vre),e(vre,nUe),e(Um,sUe),e(Um,mS),e(mS,lUe),e(Um,iUe),e(A,dUe),e(A,Jm),e(Jm,Fre),e(Fre,cUe),e(Jm,fUe),e(Jm,gS),e(gS,mUe),e(Jm,gUe),e(A,hUe),e(A,Ym),e(Ym,Tre),e(Tre,pUe),e(Ym,_Ue),e(Ym,hS),e(hS,uUe),e(Ym,bUe),e(A,vUe),e(A,Km),e(Km,Mre),e(Mre,FUe),e(Km,TUe),e(Km,pS),e(pS,MUe),e(Km,EUe),e(A,CUe),e(A,Zm),e(Zm,Ere),e(Ere,wUe),e(Zm,AUe),e(Zm,_S),e(_S,yUe),e(Zm,LUe),e(A,xUe),e(A,eg),e(eg,Cre),e(Cre,$Ue),e(eg,kUe),e(eg,uS),e(uS,SUe),e(eg,RUe),e(A,PUe),e(A,og),e(og,wre),e(wre,BUe),e(og,IUe),e(og,bS),e(bS,qUe),e(og,NUe),e(A,jUe),e(A,rg),e(rg,Are),e(Are,DUe),e(rg,GUe),e(rg,vS),e(vS,OUe),e(rg,VUe),e(A,XUe),e(A,tg),e(tg,yre),e(yre,zUe),e(tg,WUe),e(tg,FS),e(FS,QUe),e(tg,HUe),e(A,UUe),e(A,ag),e(ag,Lre),e(Lre,JUe),e(ag,YUe),e(ag,TS),e(TS,KUe),e(ag,ZUe),e(A,eJe),e(A,ng),e(ng,xre),e(xre,oJe),e(ng,rJe),e(ng,MS),e(MS,tJe),e(ng,aJe),e(A,nJe),e(A,sg),e(sg,$re),e($re,sJe),e(sg,lJe),e(sg,ES),e(ES,iJe),e(sg,dJe),e(A,cJe),e(A,lg),e(lg,kre),e(kre,fJe),e(lg,mJe),e(lg,CS),e(CS,gJe),e(lg,hJe),e(A,pJe),e(A,ig),e(ig,Sre),e(Sre,_Je),e(ig,uJe),e(ig,wS),e(wS,bJe),e(ig,vJe),e(A,FJe),e(A,dg),e(dg,Rre),e(Rre,TJe),e(dg,MJe),e(dg,AS),e(AS,EJe),e(dg,CJe),e(A,wJe),e(A,cg),e(cg,Pre),e(Pre,AJe),e(cg,yJe),e(cg,yS),e(yS,LJe),e(cg,xJe),e(A,$Je),e(A,fg),e(fg,Bre),e(Bre,kJe),e(fg,SJe),e(fg,LS),e(LS,RJe),e(fg,PJe),e(A,BJe),e(A,mg),e(mg,Ire),e(Ire,IJe),e(mg,qJe),e(mg,xS),e(xS,NJe),e(mg,jJe),e(A,DJe),e(A,gg),e(gg,qre),e(qre,GJe),e(gg,OJe),e(gg,$S),e($S,VJe),e(gg,XJe),e(A,zJe),e(A,hg),e(hg,Nre),e(Nre,WJe),e(hg,QJe),e(hg,kS),e(kS,HJe),e(hg,UJe),e(A,JJe),e(A,pg),e(pg,jre),e(jre,YJe),e(pg,KJe),e(pg,SS),e(SS,ZJe),e(pg,eYe),e(A,oYe),e(A,_g),e(_g,Dre),e(Dre,rYe),e(_g,tYe),e(_g,RS),e(RS,aYe),e(_g,nYe),e(A,sYe),e(A,ug),e(ug,Gre),e(Gre,lYe),e(ug,iYe),e(ug,PS),e(PS,dYe),e(ug,cYe),e(A,fYe),e(A,bg),e(bg,Ore),e(Ore,mYe),e(bg,gYe),e(bg,BS),e(BS,hYe),e(bg,pYe),e(A,_Ye),e(A,vg),e(vg,Vre),e(Vre,uYe),e(vg,bYe),e(vg,IS),e(IS,vYe),e(vg,FYe),e(A,TYe),e(A,Fg),e(Fg,Xre),e(Xre,MYe),e(Fg,EYe),e(Fg,qS),e(qS,CYe),e(Fg,wYe),e(A,AYe),e(A,Tg),e(Tg,zre),e(zre,yYe),e(Tg,LYe),e(Tg,NS),e(NS,xYe),e(Tg,$Ye),e(A,kYe),e(A,Mg),e(Mg,Wre),e(Wre,SYe),e(Mg,RYe),e(Mg,jS),e(jS,PYe),e(Mg,BYe),e(Er,IYe),M(Eg,Er,null),e(Co,qYe),e(Co,Cg),M(T6,Cg,null),e(Cg,NYe),e(Cg,Qre),e(Qre,jYe),b(f,dqe,u),b(f,Ei,u),e(Ei,wg),e(wg,Hre),M(M6,Hre,null),e(Ei,DYe),e(Ei,Ure),e(Ure,GYe),b(f,cqe,u),b(f,wo,u),M(E6,wo,null),e(wo,OYe),e(wo,C6),e(C6,VYe),e(C6,DS),e(DS,XYe),e(C6,zYe),e(wo,WYe),e(wo,w6),e(w6,QYe),e(w6,Jre),e(Jre,HYe),e(w6,UYe),e(wo,JYe),e(wo,Cr),M(A6,Cr,null),e(Cr,YYe),e(Cr,Yre),e(Yre,KYe),e(Cr,ZYe),e(Cr,Aa),e(Aa,eKe),e(Aa,Kre),e(Kre,oKe),e(Aa,rKe),e(Aa,Zre),e(Zre,tKe),e(Aa,aKe),e(Aa,ete),e(ete,nKe),e(Aa,sKe),e(Cr,lKe),e(Cr,k),e(k,Sn),e(Sn,ote),e(ote,iKe),e(Sn,dKe),e(Sn,GS),e(GS,cKe),e(Sn,fKe),e(Sn,OS),e(OS,mKe),e(Sn,gKe),e(k,hKe),e(k,Rn),e(Rn,rte),e(rte,pKe),e(Rn,_Ke),e(Rn,VS),e(VS,uKe),e(Rn,bKe),e(Rn,XS),e(XS,vKe),e(Rn,FKe),e(k,TKe),e(k,Pn),e(Pn,tte),e(tte,MKe),e(Pn,EKe),e(Pn,zS),e(zS,CKe),e(Pn,wKe),e(Pn,WS),e(WS,AKe),e(Pn,yKe),e(k,LKe),e(k,Bn),e(Bn,ate),e(ate,xKe),e(Bn,$Ke),e(Bn,QS),e(QS,kKe),e(Bn,SKe),e(Bn,HS),e(HS,RKe),e(Bn,PKe),e(k,BKe),e(k,In),e(In,nte),e(nte,IKe),e(In,qKe),e(In,US),e(US,NKe),e(In,jKe),e(In,JS),e(JS,DKe),e(In,GKe),e(k,OKe),e(k,Ag),e(Ag,ste),e(ste,VKe),e(Ag,XKe),e(Ag,YS),e(YS,zKe),e(Ag,WKe),e(k,QKe),e(k,yg),e(yg,lte),e(lte,HKe),e(yg,UKe),e(yg,KS),e(KS,JKe),e(yg,YKe),e(k,KKe),e(k,qn),e(qn,ite),e(ite,ZKe),e(qn,eZe),e(qn,ZS),e(ZS,oZe),e(qn,rZe),e(qn,eR),e(eR,tZe),e(qn,aZe),e(k,nZe),e(k,Nn),e(Nn,dte),e(dte,sZe),e(Nn,lZe),e(Nn,oR),e(oR,iZe),e(Nn,dZe),e(Nn,rR),e(rR,cZe),e(Nn,fZe),e(k,mZe),e(k,jn),e(jn,cte),e(cte,gZe),e(jn,hZe),e(jn,tR),e(tR,pZe),e(jn,_Ze),e(jn,aR),e(aR,uZe),e(jn,bZe),e(k,vZe),e(k,Dn),e(Dn,fte),e(fte,FZe),e(Dn,TZe),e(Dn,nR),e(nR,MZe),e(Dn,EZe),e(Dn,sR),e(sR,CZe),e(Dn,wZe),e(k,AZe),e(k,Lg),e(Lg,mte),e(mte,yZe),e(Lg,LZe),e(Lg,lR),e(lR,xZe),e(Lg,$Ze),e(k,kZe),e(k,xg),e(xg,gte),e(gte,SZe),e(xg,RZe),e(xg,iR),e(iR,PZe),e(xg,BZe),e(k,IZe),e(k,Gn),e(Gn,hte),e(hte,qZe),e(Gn,NZe),e(Gn,dR),e(dR,jZe),e(Gn,DZe),e(Gn,cR),e(cR,GZe),e(Gn,OZe),e(k,VZe),e(k,$g),e($g,pte),e(pte,XZe),e($g,zZe),e($g,fR),e(fR,WZe),e($g,QZe),e(k,HZe),e(k,On),e(On,_te),e(_te,UZe),e(On,JZe),e(On,mR),e(mR,YZe),e(On,KZe),e(On,gR),e(gR,ZZe),e(On,eeo),e(k,oeo),e(k,Vn),e(Vn,ute),e(ute,reo),e(Vn,teo),e(Vn,hR),e(hR,aeo),e(Vn,neo),e(Vn,pR),e(pR,seo),e(Vn,leo),e(k,ieo),e(k,Xn),e(Xn,bte),e(bte,deo),e(Xn,ceo),e(Xn,_R),e(_R,feo),e(Xn,meo),e(Xn,uR),e(uR,geo),e(Xn,heo),e(k,peo),e(k,kg),e(kg,vte),e(vte,_eo),e(kg,ueo),e(kg,bR),e(bR,beo),e(kg,veo),e(k,Feo),e(k,zn),e(zn,Fte),e(Fte,Teo),e(zn,Meo),e(zn,vR),e(vR,Eeo),e(zn,Ceo),e(zn,FR),e(FR,weo),e(zn,Aeo),e(k,yeo),e(k,Wn),e(Wn,Tte),e(Tte,Leo),e(Wn,xeo),e(Wn,TR),e(TR,$eo),e(Wn,keo),e(Wn,MR),e(MR,Seo),e(Wn,Reo),e(k,Peo),e(k,Qn),e(Qn,Mte),e(Mte,Beo),e(Qn,Ieo),e(Qn,ER),e(ER,qeo),e(Qn,Neo),e(Qn,CR),e(CR,jeo),e(Qn,Deo),e(k,Geo),e(k,Hn),e(Hn,Ete),e(Ete,Oeo),e(Hn,Veo),e(Hn,wR),e(wR,Xeo),e(Hn,zeo),e(Hn,AR),e(AR,Weo),e(Hn,Qeo),e(k,Heo),e(k,Un),e(Un,Cte),e(Cte,Ueo),e(Un,Jeo),e(Un,yR),e(yR,Yeo),e(Un,Keo),e(Un,LR),e(LR,Zeo),e(Un,eoo),e(k,ooo),e(k,Jn),e(Jn,wte),e(wte,roo),e(Jn,too),e(Jn,xR),e(xR,aoo),e(Jn,noo),e(Jn,$R),e($R,soo),e(Jn,loo),e(k,ioo),e(k,Sg),e(Sg,Ate),e(Ate,doo),e(Sg,coo),e(Sg,kR),e(kR,foo),e(Sg,moo),e(k,goo),e(k,Yn),e(Yn,yte),e(yte,hoo),e(Yn,poo),e(Yn,SR),e(SR,_oo),e(Yn,uoo),e(Yn,RR),e(RR,boo),e(Yn,voo),e(k,Foo),e(k,Rg),e(Rg,Lte),e(Lte,Too),e(Rg,Moo),e(Rg,PR),e(PR,Eoo),e(Rg,Coo),e(k,woo),e(k,Kn),e(Kn,xte),e(xte,Aoo),e(Kn,yoo),e(Kn,BR),e(BR,Loo),e(Kn,xoo),e(Kn,IR),e(IR,$oo),e(Kn,koo),e(k,Soo),e(k,Zn),e(Zn,$te),e($te,Roo),e(Zn,Poo),e(Zn,qR),e(qR,Boo),e(Zn,Ioo),e(Zn,NR),e(NR,qoo),e(Zn,Noo),e(k,joo),e(k,es),e(es,kte),e(kte,Doo),e(es,Goo),e(es,jR),e(jR,Ooo),e(es,Voo),e(es,DR),e(DR,Xoo),e(es,zoo),e(k,Woo),e(k,os),e(os,Ste),e(Ste,Qoo),e(os,Hoo),e(os,GR),e(GR,Uoo),e(os,Joo),e(os,OR),e(OR,Yoo),e(os,Koo),e(k,Zoo),e(k,rs),e(rs,Rte),e(Rte,ero),e(rs,oro),e(rs,VR),e(VR,rro),e(rs,tro),e(rs,XR),e(XR,aro),e(rs,nro),e(k,sro),e(k,Pg),e(Pg,Pte),e(Pte,lro),e(Pg,iro),e(Pg,zR),e(zR,dro),e(Pg,cro),e(k,fro),e(k,ts),e(ts,Bte),e(Bte,mro),e(ts,gro),e(ts,WR),e(WR,hro),e(ts,pro),e(ts,QR),e(QR,_ro),e(ts,uro),e(k,bro),e(k,as),e(as,Ite),e(Ite,vro),e(as,Fro),e(as,HR),e(HR,Tro),e(as,Mro),e(as,UR),e(UR,Ero),e(as,Cro),e(k,wro),e(k,ns),e(ns,qte),e(qte,Aro),e(ns,yro),e(ns,JR),e(JR,Lro),e(ns,xro),e(ns,YR),e(YR,$ro),e(ns,kro),e(k,Sro),e(k,ss),e(ss,Nte),e(Nte,Rro),e(ss,Pro),e(ss,KR),e(KR,Bro),e(ss,Iro),e(ss,ZR),e(ZR,qro),e(ss,Nro),e(k,jro),e(k,ls),e(ls,jte),e(jte,Dro),e(ls,Gro),e(ls,eP),e(eP,Oro),e(ls,Vro),e(ls,oP),e(oP,Xro),e(ls,zro),e(k,Wro),e(k,is),e(is,Dte),e(Dte,Qro),e(is,Hro),e(is,rP),e(rP,Uro),e(is,Jro),e(is,tP),e(tP,Yro),e(is,Kro),e(k,Zro),e(k,Bg),e(Bg,Gte),e(Gte,eto),e(Bg,oto),e(Bg,aP),e(aP,rto),e(Bg,tto),e(k,ato),e(k,ds),e(ds,Ote),e(Ote,nto),e(ds,sto),e(ds,nP),e(nP,lto),e(ds,ito),e(ds,sP),e(sP,dto),e(ds,cto),e(k,fto),e(k,Ig),e(Ig,Vte),e(Vte,mto),e(Ig,gto),e(Ig,lP),e(lP,hto),e(Ig,pto),e(k,_to),e(k,qg),e(qg,Xte),e(Xte,uto),e(qg,bto),e(qg,iP),e(iP,vto),e(qg,Fto),e(k,Tto),e(k,cs),e(cs,zte),e(zte,Mto),e(cs,Eto),e(cs,dP),e(dP,Cto),e(cs,wto),e(cs,cP),e(cP,Ato),e(cs,yto),e(k,Lto),e(k,fs),e(fs,Wte),e(Wte,xto),e(fs,$to),e(fs,fP),e(fP,kto),e(fs,Sto),e(fs,mP),e(mP,Rto),e(fs,Pto),e(k,Bto),e(k,ms),e(ms,Qte),e(Qte,Ito),e(ms,qto),e(ms,gP),e(gP,Nto),e(ms,jto),e(ms,hP),e(hP,Dto),e(ms,Gto),e(k,Oto),e(k,Ng),e(Ng,Hte),e(Hte,Vto),e(Ng,Xto),e(Ng,pP),e(pP,zto),e(Ng,Wto),e(k,Qto),e(k,gs),e(gs,Ute),e(Ute,Hto),e(gs,Uto),e(gs,_P),e(_P,Jto),e(gs,Yto),e(gs,uP),e(uP,Kto),e(gs,Zto),e(k,eao),e(k,hs),e(hs,Jte),e(Jte,oao),e(hs,rao),e(hs,bP),e(bP,tao),e(hs,aao),e(hs,vP),e(vP,nao),e(hs,sao),e(k,lao),e(k,ps),e(ps,Yte),e(Yte,iao),e(ps,dao),e(ps,FP),e(FP,cao),e(ps,fao),e(ps,TP),e(TP,mao),e(ps,gao),e(k,hao),e(k,_s),e(_s,Kte),e(Kte,pao),e(_s,_ao),e(_s,MP),e(MP,uao),e(_s,bao),e(_s,EP),e(EP,vao),e(_s,Fao),e(k,Tao),e(k,us),e(us,Zte),e(Zte,Mao),e(us,Eao),e(us,CP),e(CP,Cao),e(us,wao),e(us,wP),e(wP,Aao),e(us,yao),e(k,Lao),e(k,jg),e(jg,eae),e(eae,xao),e(jg,$ao),e(jg,AP),e(AP,kao),e(jg,Sao),e(k,Rao),e(k,bs),e(bs,oae),e(oae,Pao),e(bs,Bao),e(bs,yP),e(yP,Iao),e(bs,qao),e(bs,LP),e(LP,Nao),e(bs,jao),e(k,Dao),e(k,Dg),e(Dg,rae),e(rae,Gao),e(Dg,Oao),e(Dg,xP),e(xP,Vao),e(Dg,Xao),e(k,zao),e(k,vs),e(vs,tae),e(tae,Wao),e(vs,Qao),e(vs,$P),e($P,Hao),e(vs,Uao),e(vs,kP),e(kP,Jao),e(vs,Yao),e(k,Kao),e(k,Gg),e(Gg,aae),e(aae,Zao),e(Gg,eno),e(Gg,SP),e(SP,ono),e(Gg,rno),e(k,tno),e(k,Og),e(Og,nae),e(nae,ano),e(Og,nno),e(Og,RP),e(RP,sno),e(Og,lno),e(k,ino),e(k,Fs),e(Fs,sae),e(sae,dno),e(Fs,cno),e(Fs,PP),e(PP,fno),e(Fs,mno),e(Fs,BP),e(BP,gno),e(Fs,hno),e(k,pno),e(k,Vg),e(Vg,lae),e(lae,_no),e(Vg,uno),e(Vg,IP),e(IP,bno),e(Vg,vno),e(k,Fno),e(k,Ts),e(Ts,iae),e(iae,Tno),e(Ts,Mno),e(Ts,qP),e(qP,Eno),e(Ts,Cno),e(Ts,NP),e(NP,wno),e(Ts,Ano),e(k,yno),e(k,Ms),e(Ms,dae),e(dae,Lno),e(Ms,xno),e(Ms,jP),e(jP,$no),e(Ms,kno),e(Ms,DP),e(DP,Sno),e(Ms,Rno),e(k,Pno),e(k,Es),e(Es,cae),e(cae,Bno),e(Es,Ino),e(Es,GP),e(GP,qno),e(Es,Nno),e(Es,OP),e(OP,jno),e(Es,Dno),e(k,Gno),e(k,Cs),e(Cs,fae),e(fae,Ono),e(Cs,Vno),e(Cs,VP),e(VP,Xno),e(Cs,zno),e(Cs,XP),e(XP,Wno),e(Cs,Qno),e(k,Hno),e(k,ws),e(ws,mae),e(mae,Uno),e(ws,Jno),e(ws,zP),e(zP,Yno),e(ws,Kno),e(ws,WP),e(WP,Zno),e(ws,eso),e(k,oso),e(k,As),e(As,gae),e(gae,rso),e(As,tso),e(As,QP),e(QP,aso),e(As,nso),e(As,HP),e(HP,sso),e(As,lso),e(k,iso),e(k,Xg),e(Xg,hae),e(hae,dso),e(Xg,cso),e(Xg,UP),e(UP,fso),e(Xg,mso),e(k,gso),e(k,zg),e(zg,pae),e(pae,hso),e(zg,pso),e(zg,JP),e(JP,_so),e(zg,uso),e(k,bso),e(k,ys),e(ys,_ae),e(_ae,vso),e(ys,Fso),e(ys,YP),e(YP,Tso),e(ys,Mso),e(ys,KP),e(KP,Eso),e(ys,Cso),e(k,wso),e(k,Ls),e(Ls,uae),e(uae,Aso),e(Ls,yso),e(Ls,ZP),e(ZP,Lso),e(Ls,xso),e(Ls,eB),e(eB,$so),e(Ls,kso),e(k,Sso),e(k,xs),e(xs,bae),e(bae,Rso),e(xs,Pso),e(xs,oB),e(oB,Bso),e(xs,Iso),e(xs,rB),e(rB,qso),e(xs,Nso),e(k,jso),e(k,Wg),e(Wg,vae),e(vae,Dso),e(Wg,Gso),e(Wg,tB),e(tB,Oso),e(Wg,Vso),e(k,Xso),e(k,Qg),e(Qg,Fae),e(Fae,zso),e(Qg,Wso),e(Qg,aB),e(aB,Qso),e(Qg,Hso),e(k,Uso),e(k,Hg),e(Hg,Tae),e(Tae,Jso),e(Hg,Yso),e(Hg,nB),e(nB,Kso),e(Hg,Zso),e(k,elo),e(k,$s),e($s,Mae),e(Mae,olo),e($s,rlo),e($s,sB),e(sB,tlo),e($s,alo),e($s,lB),e(lB,nlo),e($s,slo),e(k,llo),e(k,Ug),e(Ug,Eae),e(Eae,ilo),e(Ug,dlo),e(Ug,iB),e(iB,clo),e(Ug,flo),e(k,mlo),e(k,Jg),e(Jg,Cae),e(Cae,glo),e(Jg,hlo),e(Jg,dB),e(dB,plo),e(Jg,_lo),e(k,ulo),e(k,Yg),e(Yg,wae),e(wae,blo),e(Yg,vlo),e(Yg,cB),e(cB,Flo),e(Yg,Tlo),e(k,Mlo),e(k,ks),e(ks,Aae),e(Aae,Elo),e(ks,Clo),e(ks,fB),e(fB,wlo),e(ks,Alo),e(ks,mB),e(mB,ylo),e(ks,Llo),e(k,xlo),e(k,Kg),e(Kg,yae),e(yae,$lo),e(Kg,klo),e(Kg,gB),e(gB,Slo),e(Kg,Rlo),e(k,Plo),e(k,Zg),e(Zg,Lae),e(Lae,Blo),e(Zg,Ilo),e(Zg,hB),e(hB,qlo),e(Zg,Nlo),e(k,jlo),e(k,Ss),e(Ss,xae),e(xae,Dlo),e(Ss,Glo),e(Ss,pB),e(pB,Olo),e(Ss,Vlo),e(Ss,_B),e(_B,Xlo),e(Ss,zlo),e(k,Wlo),e(k,Rs),e(Rs,$ae),e($ae,Qlo),e(Rs,Hlo),e(Rs,uB),e(uB,Ulo),e(Rs,Jlo),e(Rs,bB),e(bB,Ylo),e(Rs,Klo),e(k,Zlo),e(k,Ps),e(Ps,kae),e(kae,eio),e(Ps,oio),e(Ps,vB),e(vB,rio),e(Ps,tio),e(Ps,FB),e(FB,aio),e(Ps,nio),e(k,sio),e(k,Bs),e(Bs,Sae),e(Sae,lio),e(Bs,iio),e(Bs,TB),e(TB,dio),e(Bs,cio),e(Bs,MB),e(MB,fio),e(Bs,mio),e(Cr,gio),M(eh,Cr,null),e(wo,hio),e(wo,oh),M(y6,oh,null),e(oh,pio),e(oh,Rae),e(Rae,_io),b(f,fqe,u),b(f,Ci,u),e(Ci,rh),e(rh,Pae),M(L6,Pae,null),e(Ci,uio),e(Ci,Bae),e(Bae,bio),b(f,mqe,u),b(f,Ao,u),M(x6,Ao,null),e(Ao,vio),e(Ao,$6),e($6,Fio),e($6,EB),e(EB,Tio),e($6,Mio),e(Ao,Eio),e(Ao,k6),e(k6,Cio),e(k6,Iae),e(Iae,wio),e(k6,Aio),e(Ao,yio),e(Ao,He),M(S6,He,null),e(He,Lio),e(He,qae),e(qae,xio),e(He,$io),e(He,ya),e(ya,kio),e(ya,Nae),e(Nae,Sio),e(ya,Rio),e(ya,jae),e(jae,Pio),e(ya,Bio),e(ya,Dae),e(Dae,Iio),e(ya,qio),e(He,Nio),e(He,Z),e(Z,th),e(th,Gae),e(Gae,jio),e(th,Dio),e(th,CB),e(CB,Gio),e(th,Oio),e(Z,Vio),e(Z,ah),e(ah,Oae),e(Oae,Xio),e(ah,zio),e(ah,wB),e(wB,Wio),e(ah,Qio),e(Z,Hio),e(Z,nh),e(nh,Vae),e(Vae,Uio),e(nh,Jio),e(nh,AB),e(AB,Yio),e(nh,Kio),e(Z,Zio),e(Z,sh),e(sh,Xae),e(Xae,edo),e(sh,odo),e(sh,yB),e(yB,rdo),e(sh,tdo),e(Z,ado),e(Z,lh),e(lh,zae),e(zae,ndo),e(lh,sdo),e(lh,LB),e(LB,ldo),e(lh,ido),e(Z,ddo),e(Z,ih),e(ih,Wae),e(Wae,cdo),e(ih,fdo),e(ih,xB),e(xB,mdo),e(ih,gdo),e(Z,hdo),e(Z,dh),e(dh,Qae),e(Qae,pdo),e(dh,_do),e(dh,$B),e($B,udo),e(dh,bdo),e(Z,vdo),e(Z,ch),e(ch,Hae),e(Hae,Fdo),e(ch,Tdo),e(ch,kB),e(kB,Mdo),e(ch,Edo),e(Z,Cdo),e(Z,fh),e(fh,Uae),e(Uae,wdo),e(fh,Ado),e(fh,SB),e(SB,ydo),e(fh,Ldo),e(Z,xdo),e(Z,mh),e(mh,Jae),e(Jae,$do),e(mh,kdo),e(mh,RB),e(RB,Sdo),e(mh,Rdo),e(Z,Pdo),e(Z,gh),e(gh,Yae),e(Yae,Bdo),e(gh,Ido),e(gh,PB),e(PB,qdo),e(gh,Ndo),e(Z,jdo),e(Z,hh),e(hh,Kae),e(Kae,Ddo),e(hh,Gdo),e(hh,BB),e(BB,Odo),e(hh,Vdo),e(Z,Xdo),e(Z,ph),e(ph,Zae),e(Zae,zdo),e(ph,Wdo),e(ph,IB),e(IB,Qdo),e(ph,Hdo),e(Z,Udo),e(Z,_h),e(_h,ene),e(ene,Jdo),e(_h,Ydo),e(_h,qB),e(qB,Kdo),e(_h,Zdo),e(Z,eco),e(Z,uh),e(uh,one),e(one,oco),e(uh,rco),e(uh,NB),e(NB,tco),e(uh,aco),e(Z,nco),e(Z,bh),e(bh,rne),e(rne,sco),e(bh,lco),e(bh,jB),e(jB,ico),e(bh,dco),e(Z,cco),e(Z,vh),e(vh,tne),e(tne,fco),e(vh,mco),e(vh,DB),e(DB,gco),e(vh,hco),e(Z,pco),e(Z,Fh),e(Fh,ane),e(ane,_co),e(Fh,uco),e(Fh,GB),e(GB,bco),e(Fh,vco),e(Z,Fco),e(Z,Th),e(Th,nne),e(nne,Tco),e(Th,Mco),e(Th,OB),e(OB,Eco),e(Th,Cco),e(Z,wco),e(Z,Mh),e(Mh,sne),e(sne,Aco),e(Mh,yco),e(Mh,VB),e(VB,Lco),e(Mh,xco),e(Z,$co),e(Z,Eh),e(Eh,lne),e(lne,kco),e(Eh,Sco),e(Eh,XB),e(XB,Rco),e(Eh,Pco),e(Z,Bco),e(Z,Ch),e(Ch,ine),e(ine,Ico),e(Ch,qco),e(Ch,zB),e(zB,Nco),e(Ch,jco),e(Z,Dco),e(Z,wh),e(wh,dne),e(dne,Gco),e(wh,Oco),e(wh,WB),e(WB,Vco),e(wh,Xco),e(Z,zco),e(Z,Ah),e(Ah,cne),e(cne,Wco),e(Ah,Qco),e(Ah,QB),e(QB,Hco),e(Ah,Uco),e(Z,Jco),e(Z,yh),e(yh,fne),e(fne,Yco),e(yh,Kco),e(yh,HB),e(HB,Zco),e(yh,efo),e(Z,ofo),e(Z,Lh),e(Lh,mne),e(mne,rfo),e(Lh,tfo),e(Lh,UB),e(UB,afo),e(Lh,nfo),e(Z,sfo),e(Z,xh),e(xh,gne),e(gne,lfo),e(xh,ifo),e(xh,JB),e(JB,dfo),e(xh,cfo),e(He,ffo),M($h,He,null),e(He,mfo),M(kh,He,null),e(Ao,gfo),e(Ao,Sh),M(R6,Sh,null),e(Sh,hfo),e(Sh,hne),e(hne,pfo),b(f,gqe,u),b(f,wi,u),e(wi,Rh),e(Rh,pne),M(P6,pne,null),e(wi,_fo),e(wi,_ne),e(_ne,ufo),b(f,hqe,u),b(f,yo,u),M(B6,yo,null),e(yo,bfo),e(yo,I6),e(I6,vfo),e(I6,YB),e(YB,Ffo),e(I6,Tfo),e(yo,Mfo),e(yo,q6),e(q6,Efo),e(q6,une),e(une,Cfo),e(q6,wfo),e(yo,Afo),e(yo,Ue),M(N6,Ue,null),e(Ue,yfo),e(Ue,bne),e(bne,Lfo),e(Ue,xfo),e(Ue,Ai),e(Ai,$fo),e(Ai,vne),e(vne,kfo),e(Ai,Sfo),e(Ai,Fne),e(Fne,Rfo),e(Ai,Pfo),e(Ue,Bfo),e(Ue,pe),e(pe,Ph),e(Ph,Tne),e(Tne,Ifo),e(Ph,qfo),e(Ph,KB),e(KB,Nfo),e(Ph,jfo),e(pe,Dfo),e(pe,Bh),e(Bh,Mne),e(Mne,Gfo),e(Bh,Ofo),e(Bh,Ene),e(Ene,Vfo),e(Bh,Xfo),e(pe,zfo),e(pe,Ih),e(Ih,Cne),e(Cne,Wfo),e(Ih,Qfo),e(Ih,ZB),e(ZB,Hfo),e(Ih,Ufo),e(pe,Jfo),e(pe,qh),e(qh,wne),e(wne,Yfo),e(qh,Kfo),e(qh,eI),e(eI,Zfo),e(qh,emo),e(pe,omo),e(pe,Nh),e(Nh,Ane),e(Ane,rmo),e(Nh,tmo),e(Nh,oI),e(oI,amo),e(Nh,nmo),e(pe,smo),e(pe,jh),e(jh,yne),e(yne,lmo),e(jh,imo),e(jh,rI),e(rI,dmo),e(jh,cmo),e(pe,fmo),e(pe,Dh),e(Dh,Lne),e(Lne,mmo),e(Dh,gmo),e(Dh,tI),e(tI,hmo),e(Dh,pmo),e(pe,_mo),e(pe,Gh),e(Gh,xne),e(xne,umo),e(Gh,bmo),e(Gh,aI),e(aI,vmo),e(Gh,Fmo),e(pe,Tmo),e(pe,Oh),e(Oh,$ne),e($ne,Mmo),e(Oh,Emo),e(Oh,nI),e(nI,Cmo),e(Oh,wmo),e(pe,Amo),e(pe,Vh),e(Vh,kne),e(kne,ymo),e(Vh,Lmo),e(Vh,sI),e(sI,xmo),e(Vh,$mo),e(pe,kmo),e(pe,Xh),e(Xh,Sne),e(Sne,Smo),e(Xh,Rmo),e(Xh,lI),e(lI,Pmo),e(Xh,Bmo),e(pe,Imo),e(pe,zh),e(zh,Rne),e(Rne,qmo),e(zh,Nmo),e(zh,iI),e(iI,jmo),e(zh,Dmo),e(pe,Gmo),e(pe,Wh),e(Wh,Pne),e(Pne,Omo),e(Wh,Vmo),e(Wh,dI),e(dI,Xmo),e(Wh,zmo),e(pe,Wmo),e(pe,Qh),e(Qh,Bne),e(Bne,Qmo),e(Qh,Hmo),e(Qh,cI),e(cI,Umo),e(Qh,Jmo),e(pe,Ymo),e(pe,Hh),e(Hh,Ine),e(Ine,Kmo),e(Hh,Zmo),e(Hh,fI),e(fI,ego),e(Hh,ogo),e(pe,rgo),e(pe,Uh),e(Uh,qne),e(qne,tgo),e(Uh,ago),e(Uh,mI),e(mI,ngo),e(Uh,sgo),e(Ue,lgo),M(Jh,Ue,null),e(Ue,igo),M(Yh,Ue,null),e(yo,dgo),e(yo,Kh),M(j6,Kh,null),e(Kh,cgo),e(Kh,Nne),e(Nne,fgo),b(f,pqe,u),b(f,yi,u),e(yi,Zh),e(Zh,jne),M(D6,jne,null),e(yi,mgo),e(yi,Dne),e(Dne,ggo),b(f,_qe,u),b(f,Lo,u),M(G6,Lo,null),e(Lo,hgo),e(Lo,Li),e(Li,pgo),e(Li,gI),e(gI,_go),e(Li,ugo),e(Li,hI),e(hI,bgo),e(Li,vgo),e(Lo,Fgo),e(Lo,O6),e(O6,Tgo),e(O6,Gne),e(Gne,Mgo),e(O6,Ego),e(Lo,Cgo),e(Lo,tt),M(V6,tt,null),e(tt,wgo),e(tt,One),e(One,Ago),e(tt,ygo),e(tt,xi),e(xi,Lgo),e(xi,Vne),e(Vne,xgo),e(xi,$go),e(xi,pI),e(pI,kgo),e(xi,Sgo),e(tt,Rgo),M(ep,tt,null),e(Lo,Pgo),e(Lo,Je),M(X6,Je,null),e(Je,Bgo),e(Je,Xne),e(Xne,Igo),e(Je,qgo),e(Je,La),e(La,Ngo),e(La,zne),e(zne,jgo),e(La,Dgo),e(La,Wne),e(Wne,Ggo),e(La,Ogo),e(La,Qne),e(Qne,Vgo),e(La,Xgo),e(Je,zgo),e(Je,x),e(x,op),e(op,Hne),e(Hne,Wgo),e(op,Qgo),e(op,_I),e(_I,Hgo),e(op,Ugo),e(x,Jgo),e(x,rp),e(rp,Une),e(Une,Ygo),e(rp,Kgo),e(rp,uI),e(uI,Zgo),e(rp,eho),e(x,oho),e(x,tp),e(tp,Jne),e(Jne,rho),e(tp,tho),e(tp,bI),e(bI,aho),e(tp,nho),e(x,sho),e(x,ap),e(ap,Yne),e(Yne,lho),e(ap,iho),e(ap,vI),e(vI,dho),e(ap,cho),e(x,fho),e(x,np),e(np,Kne),e(Kne,mho),e(np,gho),e(np,FI),e(FI,hho),e(np,pho),e(x,_ho),e(x,sp),e(sp,Zne),e(Zne,uho),e(sp,bho),e(sp,TI),e(TI,vho),e(sp,Fho),e(x,Tho),e(x,lp),e(lp,ese),e(ese,Mho),e(lp,Eho),e(lp,MI),e(MI,Cho),e(lp,who),e(x,Aho),e(x,ip),e(ip,ose),e(ose,yho),e(ip,Lho),e(ip,EI),e(EI,xho),e(ip,$ho),e(x,kho),e(x,dp),e(dp,rse),e(rse,Sho),e(dp,Rho),e(dp,CI),e(CI,Pho),e(dp,Bho),e(x,Iho),e(x,cp),e(cp,tse),e(tse,qho),e(cp,Nho),e(cp,wI),e(wI,jho),e(cp,Dho),e(x,Gho),e(x,fp),e(fp,ase),e(ase,Oho),e(fp,Vho),e(fp,AI),e(AI,Xho),e(fp,zho),e(x,Who),e(x,mp),e(mp,nse),e(nse,Qho),e(mp,Hho),e(mp,yI),e(yI,Uho),e(mp,Jho),e(x,Yho),e(x,gp),e(gp,sse),e(sse,Kho),e(gp,Zho),e(gp,LI),e(LI,epo),e(gp,opo),e(x,rpo),e(x,hp),e(hp,lse),e(lse,tpo),e(hp,apo),e(hp,xI),e(xI,npo),e(hp,spo),e(x,lpo),e(x,pp),e(pp,ise),e(ise,ipo),e(pp,dpo),e(pp,$I),e($I,cpo),e(pp,fpo),e(x,mpo),e(x,_p),e(_p,dse),e(dse,gpo),e(_p,hpo),e(_p,kI),e(kI,ppo),e(_p,_po),e(x,upo),e(x,up),e(up,cse),e(cse,bpo),e(up,vpo),e(up,SI),e(SI,Fpo),e(up,Tpo),e(x,Mpo),e(x,bp),e(bp,fse),e(fse,Epo),e(bp,Cpo),e(bp,RI),e(RI,wpo),e(bp,Apo),e(x,ypo),e(x,vp),e(vp,mse),e(mse,Lpo),e(vp,xpo),e(vp,PI),e(PI,$po),e(vp,kpo),e(x,Spo),e(x,Fp),e(Fp,gse),e(gse,Rpo),e(Fp,Ppo),e(Fp,BI),e(BI,Bpo),e(Fp,Ipo),e(x,qpo),e(x,Tp),e(Tp,hse),e(hse,Npo),e(Tp,jpo),e(Tp,II),e(II,Dpo),e(Tp,Gpo),e(x,Opo),e(x,Mp),e(Mp,pse),e(pse,Vpo),e(Mp,Xpo),e(Mp,qI),e(qI,zpo),e(Mp,Wpo),e(x,Qpo),e(x,Ep),e(Ep,_se),e(_se,Hpo),e(Ep,Upo),e(Ep,NI),e(NI,Jpo),e(Ep,Ypo),e(x,Kpo),e(x,Cp),e(Cp,use),e(use,Zpo),e(Cp,e_o),e(Cp,jI),e(jI,o_o),e(Cp,r_o),e(x,t_o),e(x,wp),e(wp,bse),e(bse,a_o),e(wp,n_o),e(wp,DI),e(DI,s_o),e(wp,l_o),e(x,i_o),e(x,Ap),e(Ap,vse),e(vse,d_o),e(Ap,c_o),e(Ap,GI),e(GI,f_o),e(Ap,m_o),e(x,g_o),e(x,yp),e(yp,Fse),e(Fse,h_o),e(yp,p_o),e(yp,OI),e(OI,__o),e(yp,u_o),e(x,b_o),e(x,Lp),e(Lp,Tse),e(Tse,v_o),e(Lp,F_o),e(Lp,VI),e(VI,T_o),e(Lp,M_o),e(x,E_o),e(x,xp),e(xp,Mse),e(Mse,C_o),e(xp,w_o),e(xp,XI),e(XI,A_o),e(xp,y_o),e(x,L_o),e(x,$p),e($p,Ese),e(Ese,x_o),e($p,$_o),e($p,zI),e(zI,k_o),e($p,S_o),e(x,R_o),e(x,kp),e(kp,Cse),e(Cse,P_o),e(kp,B_o),e(kp,WI),e(WI,I_o),e(kp,q_o),e(x,N_o),e(x,Sp),e(Sp,wse),e(wse,j_o),e(Sp,D_o),e(Sp,QI),e(QI,G_o),e(Sp,O_o),e(x,V_o),e(x,Is),e(Is,Ase),e(Ase,X_o),e(Is,z_o),e(Is,HI),e(HI,W_o),e(Is,Q_o),e(Is,UI),e(UI,H_o),e(Is,U_o),e(x,J_o),e(x,Rp),e(Rp,yse),e(yse,Y_o),e(Rp,K_o),e(Rp,JI),e(JI,Z_o),e(Rp,euo),e(x,ouo),e(x,Pp),e(Pp,Lse),e(Lse,ruo),e(Pp,tuo),e(Pp,YI),e(YI,auo),e(Pp,nuo),e(x,suo),e(x,Bp),e(Bp,xse),e(xse,luo),e(Bp,iuo),e(Bp,KI),e(KI,duo),e(Bp,cuo),e(x,fuo),e(x,Ip),e(Ip,$se),e($se,muo),e(Ip,guo),e(Ip,ZI),e(ZI,huo),e(Ip,puo),e(x,_uo),e(x,qp),e(qp,kse),e(kse,uuo),e(qp,buo),e(qp,eq),e(eq,vuo),e(qp,Fuo),e(x,Tuo),e(x,Np),e(Np,Sse),e(Sse,Muo),e(Np,Euo),e(Np,oq),e(oq,Cuo),e(Np,wuo),e(x,Auo),e(x,jp),e(jp,Rse),e(Rse,yuo),e(jp,Luo),e(jp,rq),e(rq,xuo),e(jp,$uo),e(x,kuo),e(x,Dp),e(Dp,Pse),e(Pse,Suo),e(Dp,Ruo),e(Dp,tq),e(tq,Puo),e(Dp,Buo),e(x,Iuo),e(x,Gp),e(Gp,Bse),e(Bse,quo),e(Gp,Nuo),e(Gp,aq),e(aq,juo),e(Gp,Duo),e(x,Guo),e(x,Op),e(Op,Ise),e(Ise,Ouo),e(Op,Vuo),e(Op,nq),e(nq,Xuo),e(Op,zuo),e(x,Wuo),e(x,Vp),e(Vp,qse),e(qse,Quo),e(Vp,Huo),e(Vp,sq),e(sq,Uuo),e(Vp,Juo),e(x,Yuo),e(x,Xp),e(Xp,Nse),e(Nse,Kuo),e(Xp,Zuo),e(Xp,lq),e(lq,e2o),e(Xp,o2o),e(x,r2o),e(x,zp),e(zp,jse),e(jse,t2o),e(zp,a2o),e(zp,iq),e(iq,n2o),e(zp,s2o),e(x,l2o),e(x,Wp),e(Wp,Dse),e(Dse,i2o),e(Wp,d2o),e(Wp,dq),e(dq,c2o),e(Wp,f2o),e(x,m2o),e(x,Qp),e(Qp,Gse),e(Gse,g2o),e(Qp,h2o),e(Qp,cq),e(cq,p2o),e(Qp,_2o),e(x,u2o),e(x,Hp),e(Hp,Ose),e(Ose,b2o),e(Hp,v2o),e(Hp,fq),e(fq,F2o),e(Hp,T2o),e(x,M2o),e(x,Up),e(Up,Vse),e(Vse,E2o),e(Up,C2o),e(Up,mq),e(mq,w2o),e(Up,A2o),e(x,y2o),e(x,Jp),e(Jp,Xse),e(Xse,L2o),e(Jp,x2o),e(Jp,gq),e(gq,$2o),e(Jp,k2o),e(x,S2o),e(x,Yp),e(Yp,zse),e(zse,R2o),e(Yp,P2o),e(Yp,hq),e(hq,B2o),e(Yp,I2o),e(x,q2o),e(x,Kp),e(Kp,Wse),e(Wse,N2o),e(Kp,j2o),e(Kp,pq),e(pq,D2o),e(Kp,G2o),e(x,O2o),e(x,Zp),e(Zp,Qse),e(Qse,V2o),e(Zp,X2o),e(Zp,_q),e(_q,z2o),e(Zp,W2o),e(x,Q2o),e(x,e_),e(e_,Hse),e(Hse,H2o),e(e_,U2o),e(e_,uq),e(uq,J2o),e(e_,Y2o),e(x,K2o),e(x,o_),e(o_,Use),e(Use,Z2o),e(o_,e1o),e(o_,bq),e(bq,o1o),e(o_,r1o),e(x,t1o),e(x,r_),e(r_,Jse),e(Jse,a1o),e(r_,n1o),e(r_,vq),e(vq,s1o),e(r_,l1o),e(x,i1o),e(x,t_),e(t_,Yse),e(Yse,d1o),e(t_,c1o),e(t_,Fq),e(Fq,f1o),e(t_,m1o),e(x,g1o),e(x,a_),e(a_,Kse),e(Kse,h1o),e(a_,p1o),e(a_,Tq),e(Tq,_1o),e(a_,u1o),e(x,b1o),e(x,n_),e(n_,Zse),e(Zse,v1o),e(n_,F1o),e(n_,Mq),e(Mq,T1o),e(n_,M1o),e(x,E1o),e(x,s_),e(s_,ele),e(ele,C1o),e(s_,w1o),e(s_,Eq),e(Eq,A1o),e(s_,y1o),e(x,L1o),e(x,l_),e(l_,ole),e(ole,x1o),e(l_,$1o),e(l_,Cq),e(Cq,k1o),e(l_,S1o),e(x,R1o),e(x,i_),e(i_,rle),e(rle,P1o),e(i_,B1o),e(i_,wq),e(wq,I1o),e(i_,q1o),e(x,N1o),e(x,d_),e(d_,tle),e(tle,j1o),e(d_,D1o),e(d_,Aq),e(Aq,G1o),e(d_,O1o),e(x,V1o),e(x,c_),e(c_,ale),e(ale,X1o),e(c_,z1o),e(c_,yq),e(yq,W1o),e(c_,Q1o),e(x,H1o),e(x,f_),e(f_,nle),e(nle,U1o),e(f_,J1o),e(f_,Lq),e(Lq,Y1o),e(f_,K1o),e(x,Z1o),e(x,m_),e(m_,sle),e(sle,ebo),e(m_,obo),e(m_,xq),e(xq,rbo),e(m_,tbo),e(x,abo),e(x,g_),e(g_,lle),e(lle,nbo),e(g_,sbo),e(g_,$q),e($q,lbo),e(g_,ibo),e(x,dbo),e(x,h_),e(h_,ile),e(ile,cbo),e(h_,fbo),e(h_,kq),e(kq,mbo),e(h_,gbo),e(x,hbo),e(x,p_),e(p_,dle),e(dle,pbo),e(p_,_bo),e(p_,Sq),e(Sq,ubo),e(p_,bbo),e(x,vbo),e(x,__),e(__,cle),e(cle,Fbo),e(__,Tbo),e(__,Rq),e(Rq,Mbo),e(__,Ebo),e(x,Cbo),e(x,u_),e(u_,fle),e(fle,wbo),e(u_,Abo),e(u_,Pq),e(Pq,ybo),e(u_,Lbo),e(x,xbo),e(x,b_),e(b_,mle),e(mle,$bo),e(b_,kbo),e(b_,Bq),e(Bq,Sbo),e(b_,Rbo),e(x,Pbo),e(x,v_),e(v_,gle),e(gle,Bbo),e(v_,Ibo),e(v_,Iq),e(Iq,qbo),e(v_,Nbo),e(x,jbo),e(x,F_),e(F_,hle),e(hle,Dbo),e(F_,Gbo),e(F_,qq),e(qq,Obo),e(F_,Vbo),e(x,Xbo),e(x,T_),e(T_,ple),e(ple,zbo),e(T_,Wbo),e(T_,Nq),e(Nq,Qbo),e(T_,Hbo),e(x,Ubo),e(x,M_),e(M_,_le),e(_le,Jbo),e(M_,Ybo),e(M_,jq),e(jq,Kbo),e(M_,Zbo),e(x,e4o),e(x,E_),e(E_,ule),e(ule,o4o),e(E_,r4o),e(E_,Dq),e(Dq,t4o),e(E_,a4o),e(x,n4o),e(x,C_),e(C_,ble),e(ble,s4o),e(C_,l4o),e(C_,Gq),e(Gq,i4o),e(C_,d4o),e(x,c4o),e(x,w_),e(w_,vle),e(vle,f4o),e(w_,m4o),e(w_,Oq),e(Oq,g4o),e(w_,h4o),e(x,p4o),e(x,A_),e(A_,Fle),e(Fle,_4o),e(A_,u4o),e(A_,Vq),e(Vq,b4o),e(A_,v4o),e(x,F4o),e(x,y_),e(y_,Tle),e(Tle,T4o),e(y_,M4o),e(y_,Xq),e(Xq,E4o),e(y_,C4o),e(x,w4o),e(x,L_),e(L_,Mle),e(Mle,A4o),e(L_,y4o),e(L_,zq),e(zq,L4o),e(L_,x4o),e(x,$4o),e(x,x_),e(x_,Ele),e(Ele,k4o),e(x_,S4o),e(x_,Wq),e(Wq,R4o),e(x_,P4o),e(x,B4o),e(x,$_),e($_,Cle),e(Cle,I4o),e($_,q4o),e($_,Qq),e(Qq,N4o),e($_,j4o),e(x,D4o),e(x,k_),e(k_,wle),e(wle,G4o),e(k_,O4o),e(k_,Hq),e(Hq,V4o),e(k_,X4o),e(x,z4o),e(x,S_),e(S_,Ale),e(Ale,W4o),e(S_,Q4o),e(S_,Uq),e(Uq,H4o),e(S_,U4o),e(x,J4o),e(x,R_),e(R_,yle),e(yle,Y4o),e(R_,K4o),e(R_,Jq),e(Jq,Z4o),e(R_,e5o),e(x,o5o),e(x,P_),e(P_,Lle),e(Lle,r5o),e(P_,t5o),e(P_,Yq),e(Yq,a5o),e(P_,n5o),e(x,s5o),e(x,B_),e(B_,xle),e(xle,l5o),e(B_,i5o),e(B_,Kq),e(Kq,d5o),e(B_,c5o),e(x,f5o),e(x,I_),e(I_,$le),e($le,m5o),e(I_,g5o),e(I_,Zq),e(Zq,h5o),e(I_,p5o),e(x,_5o),e(x,q_),e(q_,kle),e(kle,u5o),e(q_,b5o),e(q_,eN),e(eN,v5o),e(q_,F5o),e(x,T5o),e(x,N_),e(N_,Sle),e(Sle,M5o),e(N_,E5o),e(N_,oN),e(oN,C5o),e(N_,w5o),e(x,A5o),e(x,j_),e(j_,Rle),e(Rle,y5o),e(j_,L5o),e(j_,rN),e(rN,x5o),e(j_,$5o),e(x,k5o),e(x,D_),e(D_,Ple),e(Ple,S5o),e(D_,R5o),e(D_,tN),e(tN,P5o),e(D_,B5o),e(x,I5o),e(x,G_),e(G_,Ble),e(Ble,q5o),e(G_,N5o),e(G_,aN),e(aN,j5o),e(G_,D5o),e(x,G5o),e(x,O_),e(O_,Ile),e(Ile,O5o),e(O_,V5o),e(O_,nN),e(nN,X5o),e(O_,z5o),e(x,W5o),e(x,V_),e(V_,qle),e(qle,Q5o),e(V_,H5o),e(V_,sN),e(sN,U5o),e(V_,J5o),e(x,Y5o),e(x,X_),e(X_,Nle),e(Nle,K5o),e(X_,Z5o),e(X_,lN),e(lN,evo),e(X_,ovo),e(x,rvo),e(x,z_),e(z_,jle),e(jle,tvo),e(z_,avo),e(z_,iN),e(iN,nvo),e(z_,svo),e(Je,lvo),e(Je,W_),e(W_,ivo),e(W_,Dle),e(Dle,dvo),e(W_,cvo),e(W_,Gle),e(Gle,fvo),e(Je,mvo),M(Q_,Je,null),b(f,uqe,u),b(f,$i,u),e($i,H_),e(H_,Ole),M(z6,Ole,null),e($i,gvo),e($i,Vle),e(Vle,hvo),b(f,bqe,u),b(f,xo,u),M(W6,xo,null),e(xo,pvo),e(xo,ki),e(ki,_vo),e(ki,dN),e(dN,uvo),e(ki,bvo),e(ki,cN),e(cN,vvo),e(ki,Fvo),e(xo,Tvo),e(xo,Q6),e(Q6,Mvo),e(Q6,Xle),e(Xle,Evo),e(Q6,Cvo),e(xo,wvo),e(xo,at),M(H6,at,null),e(at,Avo),e(at,zle),e(zle,yvo),e(at,Lvo),e(at,Si),e(Si,xvo),e(Si,Wle),e(Wle,$vo),e(Si,kvo),e(Si,fN),e(fN,Svo),e(Si,Rvo),e(at,Pvo),M(U_,at,null),e(xo,Bvo),e(xo,Ye),M(U6,Ye,null),e(Ye,Ivo),e(Ye,Qle),e(Qle,qvo),e(Ye,Nvo),e(Ye,xa),e(xa,jvo),e(xa,Hle),e(Hle,Dvo),e(xa,Gvo),e(xa,Ule),e(Ule,Ovo),e(xa,Vvo),e(xa,Jle),e(Jle,Xvo),e(xa,zvo),e(Ye,Wvo),e(Ye,G),e(G,J_),e(J_,Yle),e(Yle,Qvo),e(J_,Hvo),e(J_,mN),e(mN,Uvo),e(J_,Jvo),e(G,Yvo),e(G,Y_),e(Y_,Kle),e(Kle,Kvo),e(Y_,Zvo),e(Y_,gN),e(gN,eFo),e(Y_,oFo),e(G,rFo),e(G,K_),e(K_,Zle),e(Zle,tFo),e(K_,aFo),e(K_,hN),e(hN,nFo),e(K_,sFo),e(G,lFo),e(G,Z_),e(Z_,eie),e(eie,iFo),e(Z_,dFo),e(Z_,pN),e(pN,cFo),e(Z_,fFo),e(G,mFo),e(G,eu),e(eu,oie),e(oie,gFo),e(eu,hFo),e(eu,_N),e(_N,pFo),e(eu,_Fo),e(G,uFo),e(G,ou),e(ou,rie),e(rie,bFo),e(ou,vFo),e(ou,uN),e(uN,FFo),e(ou,TFo),e(G,MFo),e(G,ru),e(ru,tie),e(tie,EFo),e(ru,CFo),e(ru,bN),e(bN,wFo),e(ru,AFo),e(G,yFo),e(G,tu),e(tu,aie),e(aie,LFo),e(tu,xFo),e(tu,vN),e(vN,$Fo),e(tu,kFo),e(G,SFo),e(G,au),e(au,nie),e(nie,RFo),e(au,PFo),e(au,FN),e(FN,BFo),e(au,IFo),e(G,qFo),e(G,nu),e(nu,sie),e(sie,NFo),e(nu,jFo),e(nu,TN),e(TN,DFo),e(nu,GFo),e(G,OFo),e(G,su),e(su,lie),e(lie,VFo),e(su,XFo),e(su,MN),e(MN,zFo),e(su,WFo),e(G,QFo),e(G,lu),e(lu,iie),e(iie,HFo),e(lu,UFo),e(lu,EN),e(EN,JFo),e(lu,YFo),e(G,KFo),e(G,iu),e(iu,die),e(die,ZFo),e(iu,eTo),e(iu,CN),e(CN,oTo),e(iu,rTo),e(G,tTo),e(G,du),e(du,cie),e(cie,aTo),e(du,nTo),e(du,wN),e(wN,sTo),e(du,lTo),e(G,iTo),e(G,cu),e(cu,fie),e(fie,dTo),e(cu,cTo),e(cu,AN),e(AN,fTo),e(cu,mTo),e(G,gTo),e(G,fu),e(fu,mie),e(mie,hTo),e(fu,pTo),e(fu,yN),e(yN,_To),e(fu,uTo),e(G,bTo),e(G,mu),e(mu,gie),e(gie,vTo),e(mu,FTo),e(mu,LN),e(LN,TTo),e(mu,MTo),e(G,ETo),e(G,gu),e(gu,hie),e(hie,CTo),e(gu,wTo),e(gu,xN),e(xN,ATo),e(gu,yTo),e(G,LTo),e(G,hu),e(hu,pie),e(pie,xTo),e(hu,$To),e(hu,$N),e($N,kTo),e(hu,STo),e(G,RTo),e(G,pu),e(pu,_ie),e(_ie,PTo),e(pu,BTo),e(pu,kN),e(kN,ITo),e(pu,qTo),e(G,NTo),e(G,_u),e(_u,uie),e(uie,jTo),e(_u,DTo),e(_u,SN),e(SN,GTo),e(_u,OTo),e(G,VTo),e(G,uu),e(uu,bie),e(bie,XTo),e(uu,zTo),e(uu,RN),e(RN,WTo),e(uu,QTo),e(G,HTo),e(G,bu),e(bu,vie),e(vie,UTo),e(bu,JTo),e(bu,PN),e(PN,YTo),e(bu,KTo),e(G,ZTo),e(G,vu),e(vu,Fie),e(Fie,e7o),e(vu,o7o),e(vu,BN),e(BN,r7o),e(vu,t7o),e(G,a7o),e(G,Fu),e(Fu,Tie),e(Tie,n7o),e(Fu,s7o),e(Fu,IN),e(IN,l7o),e(Fu,i7o),e(G,d7o),e(G,Tu),e(Tu,Mie),e(Mie,c7o),e(Tu,f7o),e(Tu,qN),e(qN,m7o),e(Tu,g7o),e(G,h7o),e(G,Mu),e(Mu,Eie),e(Eie,p7o),e(Mu,_7o),e(Mu,NN),e(NN,u7o),e(Mu,b7o),e(G,v7o),e(G,Eu),e(Eu,Cie),e(Cie,F7o),e(Eu,T7o),e(Eu,jN),e(jN,M7o),e(Eu,E7o),e(G,C7o),e(G,Cu),e(Cu,wie),e(wie,w7o),e(Cu,A7o),e(Cu,DN),e(DN,y7o),e(Cu,L7o),e(G,x7o),e(G,wu),e(wu,Aie),e(Aie,$7o),e(wu,k7o),e(wu,GN),e(GN,S7o),e(wu,R7o),e(G,P7o),e(G,Au),e(Au,yie),e(yie,B7o),e(Au,I7o),e(Au,ON),e(ON,q7o),e(Au,N7o),e(G,j7o),e(G,yu),e(yu,Lie),e(Lie,D7o),e(yu,G7o),e(yu,VN),e(VN,O7o),e(yu,V7o),e(G,X7o),e(G,Lu),e(Lu,xie),e(xie,z7o),e(Lu,W7o),e(Lu,XN),e(XN,Q7o),e(Lu,H7o),e(G,U7o),e(G,xu),e(xu,$ie),e($ie,J7o),e(xu,Y7o),e(xu,zN),e(zN,K7o),e(xu,Z7o),e(G,eMo),e(G,$u),e($u,kie),e(kie,oMo),e($u,rMo),e($u,WN),e(WN,tMo),e($u,aMo),e(G,nMo),e(G,ku),e(ku,Sie),e(Sie,sMo),e(ku,lMo),e(ku,QN),e(QN,iMo),e(ku,dMo),e(G,cMo),e(G,Su),e(Su,Rie),e(Rie,fMo),e(Su,mMo),e(Su,HN),e(HN,gMo),e(Su,hMo),e(G,pMo),e(G,Ru),e(Ru,Pie),e(Pie,_Mo),e(Ru,uMo),e(Ru,UN),e(UN,bMo),e(Ru,vMo),e(G,FMo),e(G,Pu),e(Pu,Bie),e(Bie,TMo),e(Pu,MMo),e(Pu,JN),e(JN,EMo),e(Pu,CMo),e(G,wMo),e(G,Bu),e(Bu,Iie),e(Iie,AMo),e(Bu,yMo),e(Bu,YN),e(YN,LMo),e(Bu,xMo),e(G,$Mo),e(G,Iu),e(Iu,qie),e(qie,kMo),e(Iu,SMo),e(Iu,KN),e(KN,RMo),e(Iu,PMo),e(G,BMo),e(G,qu),e(qu,Nie),e(Nie,IMo),e(qu,qMo),e(qu,ZN),e(ZN,NMo),e(qu,jMo),e(Ye,DMo),e(Ye,Nu),e(Nu,GMo),e(Nu,jie),e(jie,OMo),e(Nu,VMo),e(Nu,Die),e(Die,XMo),e(Ye,zMo),M(ju,Ye,null),b(f,vqe,u),b(f,Ri,u),e(Ri,Du),e(Du,Gie),M(J6,Gie,null),e(Ri,WMo),e(Ri,Oie),e(Oie,QMo),b(f,Fqe,u),b(f,$o,u),M(Y6,$o,null),e($o,HMo),e($o,Pi),e(Pi,UMo),e(Pi,ej),e(ej,JMo),e(Pi,YMo),e(Pi,oj),e(oj,KMo),e(Pi,ZMo),e($o,eEo),e($o,K6),e(K6,oEo),e(K6,Vie),e(Vie,rEo),e(K6,tEo),e($o,aEo),e($o,nt),M(Z6,nt,null),e(nt,nEo),e(nt,Xie),e(Xie,sEo),e(nt,lEo),e(nt,Bi),e(Bi,iEo),e(Bi,zie),e(zie,dEo),e(Bi,cEo),e(Bi,rj),e(rj,fEo),e(Bi,mEo),e(nt,gEo),M(Gu,nt,null),e($o,hEo),e($o,Ke),M(ey,Ke,null),e(Ke,pEo),e(Ke,Wie),e(Wie,_Eo),e(Ke,uEo),e(Ke,$a),e($a,bEo),e($a,Qie),e(Qie,vEo),e($a,FEo),e($a,Hie),e(Hie,TEo),e($a,MEo),e($a,Uie),e(Uie,EEo),e($a,CEo),e(Ke,wEo),e(Ke,z),e(z,Ou),e(Ou,Jie),e(Jie,AEo),e(Ou,yEo),e(Ou,tj),e(tj,LEo),e(Ou,xEo),e(z,$Eo),e(z,Vu),e(Vu,Yie),e(Yie,kEo),e(Vu,SEo),e(Vu,aj),e(aj,REo),e(Vu,PEo),e(z,BEo),e(z,Xu),e(Xu,Kie),e(Kie,IEo),e(Xu,qEo),e(Xu,nj),e(nj,NEo),e(Xu,jEo),e(z,DEo),e(z,zu),e(zu,Zie),e(Zie,GEo),e(zu,OEo),e(zu,sj),e(sj,VEo),e(zu,XEo),e(z,zEo),e(z,Wu),e(Wu,ede),e(ede,WEo),e(Wu,QEo),e(Wu,lj),e(lj,HEo),e(Wu,UEo),e(z,JEo),e(z,Qu),e(Qu,ode),e(ode,YEo),e(Qu,KEo),e(Qu,ij),e(ij,ZEo),e(Qu,eCo),e(z,oCo),e(z,Hu),e(Hu,rde),e(rde,rCo),e(Hu,tCo),e(Hu,dj),e(dj,aCo),e(Hu,nCo),e(z,sCo),e(z,Uu),e(Uu,tde),e(tde,lCo),e(Uu,iCo),e(Uu,cj),e(cj,dCo),e(Uu,cCo),e(z,fCo),e(z,Ju),e(Ju,ade),e(ade,mCo),e(Ju,gCo),e(Ju,fj),e(fj,hCo),e(Ju,pCo),e(z,_Co),e(z,Yu),e(Yu,nde),e(nde,uCo),e(Yu,bCo),e(Yu,mj),e(mj,vCo),e(Yu,FCo),e(z,TCo),e(z,Ku),e(Ku,sde),e(sde,MCo),e(Ku,ECo),e(Ku,gj),e(gj,CCo),e(Ku,wCo),e(z,ACo),e(z,Zu),e(Zu,lde),e(lde,yCo),e(Zu,LCo),e(Zu,hj),e(hj,xCo),e(Zu,$Co),e(z,kCo),e(z,e2),e(e2,ide),e(ide,SCo),e(e2,RCo),e(e2,pj),e(pj,PCo),e(e2,BCo),e(z,ICo),e(z,o2),e(o2,dde),e(dde,qCo),e(o2,NCo),e(o2,_j),e(_j,jCo),e(o2,DCo),e(z,GCo),e(z,r2),e(r2,cde),e(cde,OCo),e(r2,VCo),e(r2,uj),e(uj,XCo),e(r2,zCo),e(z,WCo),e(z,t2),e(t2,fde),e(fde,QCo),e(t2,HCo),e(t2,bj),e(bj,UCo),e(t2,JCo),e(z,YCo),e(z,a2),e(a2,mde),e(mde,KCo),e(a2,ZCo),e(a2,vj),e(vj,e3o),e(a2,o3o),e(z,r3o),e(z,n2),e(n2,gde),e(gde,t3o),e(n2,a3o),e(n2,Fj),e(Fj,n3o),e(n2,s3o),e(z,l3o),e(z,s2),e(s2,hde),e(hde,i3o),e(s2,d3o),e(s2,Tj),e(Tj,c3o),e(s2,f3o),e(z,m3o),e(z,l2),e(l2,pde),e(pde,g3o),e(l2,h3o),e(l2,Mj),e(Mj,p3o),e(l2,_3o),e(z,u3o),e(z,i2),e(i2,_de),e(_de,b3o),e(i2,v3o),e(i2,Ej),e(Ej,F3o),e(i2,T3o),e(z,M3o),e(z,d2),e(d2,ude),e(ude,E3o),e(d2,C3o),e(d2,Cj),e(Cj,w3o),e(d2,A3o),e(z,y3o),e(z,c2),e(c2,bde),e(bde,L3o),e(c2,x3o),e(c2,wj),e(wj,$3o),e(c2,k3o),e(z,S3o),e(z,f2),e(f2,vde),e(vde,R3o),e(f2,P3o),e(f2,Aj),e(Aj,B3o),e(f2,I3o),e(z,q3o),e(z,m2),e(m2,Fde),e(Fde,N3o),e(m2,j3o),e(m2,yj),e(yj,D3o),e(m2,G3o),e(z,O3o),e(z,g2),e(g2,Tde),e(Tde,V3o),e(g2,X3o),e(g2,Lj),e(Lj,z3o),e(g2,W3o),e(z,Q3o),e(z,h2),e(h2,Mde),e(Mde,H3o),e(h2,U3o),e(h2,xj),e(xj,J3o),e(h2,Y3o),e(z,K3o),e(z,p2),e(p2,Ede),e(Ede,Z3o),e(p2,ewo),e(p2,$j),e($j,owo),e(p2,rwo),e(z,two),e(z,_2),e(_2,Cde),e(Cde,awo),e(_2,nwo),e(_2,kj),e(kj,swo),e(_2,lwo),e(z,iwo),e(z,u2),e(u2,wde),e(wde,dwo),e(u2,cwo),e(u2,Sj),e(Sj,fwo),e(u2,mwo),e(z,gwo),e(z,b2),e(b2,Ade),e(Ade,hwo),e(b2,pwo),e(b2,Rj),e(Rj,_wo),e(b2,uwo),e(z,bwo),e(z,v2),e(v2,yde),e(yde,vwo),e(v2,Fwo),e(v2,Pj),e(Pj,Two),e(v2,Mwo),e(z,Ewo),e(z,F2),e(F2,Lde),e(Lde,Cwo),e(F2,wwo),e(F2,Bj),e(Bj,Awo),e(F2,ywo),e(z,Lwo),e(z,T2),e(T2,xde),e(xde,xwo),e(T2,$wo),e(T2,Ij),e(Ij,kwo),e(T2,Swo),e(z,Rwo),e(z,M2),e(M2,$de),e($de,Pwo),e(M2,Bwo),e(M2,qj),e(qj,Iwo),e(M2,qwo),e(z,Nwo),e(z,E2),e(E2,kde),e(kde,jwo),e(E2,Dwo),e(E2,Nj),e(Nj,Gwo),e(E2,Owo),e(Ke,Vwo),e(Ke,C2),e(C2,Xwo),e(C2,Sde),e(Sde,zwo),e(C2,Wwo),e(C2,Rde),e(Rde,Qwo),e(Ke,Hwo),M(w2,Ke,null),b(f,Tqe,u),b(f,Ii,u),e(Ii,A2),e(A2,Pde),M(oy,Pde,null),e(Ii,Uwo),e(Ii,Bde),e(Bde,Jwo),b(f,Mqe,u),b(f,ko,u),M(ry,ko,null),e(ko,Ywo),e(ko,qi),e(qi,Kwo),e(qi,jj),e(jj,Zwo),e(qi,e0o),e(qi,Dj),e(Dj,o0o),e(qi,r0o),e(ko,t0o),e(ko,ty),e(ty,a0o),e(ty,Ide),e(Ide,n0o),e(ty,s0o),e(ko,l0o),e(ko,st),M(ay,st,null),e(st,i0o),e(st,qde),e(qde,d0o),e(st,c0o),e(st,Ni),e(Ni,f0o),e(Ni,Nde),e(Nde,m0o),e(Ni,g0o),e(Ni,Gj),e(Gj,h0o),e(Ni,p0o),e(st,_0o),M(y2,st,null),e(ko,u0o),e(ko,Ze),M(ny,Ze,null),e(Ze,b0o),e(Ze,jde),e(jde,v0o),e(Ze,F0o),e(Ze,ka),e(ka,T0o),e(ka,Dde),e(Dde,M0o),e(ka,E0o),e(ka,Gde),e(Gde,C0o),e(ka,w0o),e(ka,Ode),e(Ode,A0o),e(ka,y0o),e(Ze,L0o),e(Ze,W),e(W,L2),e(L2,Vde),e(Vde,x0o),e(L2,$0o),e(L2,Oj),e(Oj,k0o),e(L2,S0o),e(W,R0o),e(W,x2),e(x2,Xde),e(Xde,P0o),e(x2,B0o),e(x2,Vj),e(Vj,I0o),e(x2,q0o),e(W,N0o),e(W,$2),e($2,zde),e(zde,j0o),e($2,D0o),e($2,Xj),e(Xj,G0o),e($2,O0o),e(W,V0o),e(W,k2),e(k2,Wde),e(Wde,X0o),e(k2,z0o),e(k2,zj),e(zj,W0o),e(k2,Q0o),e(W,H0o),e(W,S2),e(S2,Qde),e(Qde,U0o),e(S2,J0o),e(S2,Wj),e(Wj,Y0o),e(S2,K0o),e(W,Z0o),e(W,R2),e(R2,Hde),e(Hde,eAo),e(R2,oAo),e(R2,Qj),e(Qj,rAo),e(R2,tAo),e(W,aAo),e(W,P2),e(P2,Ude),e(Ude,nAo),e(P2,sAo),e(P2,Hj),e(Hj,lAo),e(P2,iAo),e(W,dAo),e(W,B2),e(B2,Jde),e(Jde,cAo),e(B2,fAo),e(B2,Uj),e(Uj,mAo),e(B2,gAo),e(W,hAo),e(W,I2),e(I2,Yde),e(Yde,pAo),e(I2,_Ao),e(I2,Jj),e(Jj,uAo),e(I2,bAo),e(W,vAo),e(W,q2),e(q2,Kde),e(Kde,FAo),e(q2,TAo),e(q2,Yj),e(Yj,MAo),e(q2,EAo),e(W,CAo),e(W,N2),e(N2,Zde),e(Zde,wAo),e(N2,AAo),e(N2,Kj),e(Kj,yAo),e(N2,LAo),e(W,xAo),e(W,j2),e(j2,ece),e(ece,$Ao),e(j2,kAo),e(j2,Zj),e(Zj,SAo),e(j2,RAo),e(W,PAo),e(W,D2),e(D2,oce),e(oce,BAo),e(D2,IAo),e(D2,eD),e(eD,qAo),e(D2,NAo),e(W,jAo),e(W,G2),e(G2,rce),e(rce,DAo),e(G2,GAo),e(G2,oD),e(oD,OAo),e(G2,VAo),e(W,XAo),e(W,O2),e(O2,tce),e(tce,zAo),e(O2,WAo),e(O2,rD),e(rD,QAo),e(O2,HAo),e(W,UAo),e(W,V2),e(V2,ace),e(ace,JAo),e(V2,YAo),e(V2,tD),e(tD,KAo),e(V2,ZAo),e(W,e6o),e(W,X2),e(X2,nce),e(nce,o6o),e(X2,r6o),e(X2,aD),e(aD,t6o),e(X2,a6o),e(W,n6o),e(W,z2),e(z2,sce),e(sce,s6o),e(z2,l6o),e(z2,nD),e(nD,i6o),e(z2,d6o),e(W,c6o),e(W,W2),e(W2,lce),e(lce,f6o),e(W2,m6o),e(W2,sD),e(sD,g6o),e(W2,h6o),e(W,p6o),e(W,Q2),e(Q2,ice),e(ice,_6o),e(Q2,u6o),e(Q2,lD),e(lD,b6o),e(Q2,v6o),e(W,F6o),e(W,H2),e(H2,dce),e(dce,T6o),e(H2,M6o),e(H2,iD),e(iD,E6o),e(H2,C6o),e(W,w6o),e(W,U2),e(U2,cce),e(cce,A6o),e(U2,y6o),e(U2,dD),e(dD,L6o),e(U2,x6o),e(W,$6o),e(W,J2),e(J2,fce),e(fce,k6o),e(J2,S6o),e(J2,cD),e(cD,R6o),e(J2,P6o),e(W,B6o),e(W,Y2),e(Y2,mce),e(mce,I6o),e(Y2,q6o),e(Y2,fD),e(fD,N6o),e(Y2,j6o),e(W,D6o),e(W,K2),e(K2,gce),e(gce,G6o),e(K2,O6o),e(K2,mD),e(mD,V6o),e(K2,X6o),e(W,z6o),e(W,Z2),e(Z2,hce),e(hce,W6o),e(Z2,Q6o),e(Z2,gD),e(gD,H6o),e(Z2,U6o),e(W,J6o),e(W,e1),e(e1,pce),e(pce,Y6o),e(e1,K6o),e(e1,hD),e(hD,Z6o),e(e1,eyo),e(W,oyo),e(W,o1),e(o1,_ce),e(_ce,ryo),e(o1,tyo),e(o1,pD),e(pD,ayo),e(o1,nyo),e(W,syo),e(W,r1),e(r1,uce),e(uce,lyo),e(r1,iyo),e(r1,_D),e(_D,dyo),e(r1,cyo),e(W,fyo),e(W,t1),e(t1,bce),e(bce,myo),e(t1,gyo),e(t1,uD),e(uD,hyo),e(t1,pyo),e(W,_yo),e(W,a1),e(a1,vce),e(vce,uyo),e(a1,byo),e(a1,Fce),e(Fce,vyo),e(a1,Fyo),e(W,Tyo),e(W,n1),e(n1,Tce),e(Tce,Myo),e(n1,Eyo),e(n1,bD),e(bD,Cyo),e(n1,wyo),e(W,Ayo),e(W,s1),e(s1,Mce),e(Mce,yyo),e(s1,Lyo),e(s1,vD),e(vD,xyo),e(s1,$yo),e(W,kyo),e(W,l1),e(l1,Ece),e(Ece,Syo),e(l1,Ryo),e(l1,FD),e(FD,Pyo),e(l1,Byo),e(W,Iyo),e(W,i1),e(i1,Cce),e(Cce,qyo),e(i1,Nyo),e(i1,TD),e(TD,jyo),e(i1,Dyo),e(Ze,Gyo),e(Ze,d1),e(d1,Oyo),e(d1,wce),e(wce,Vyo),e(d1,Xyo),e(d1,Ace),e(Ace,zyo),e(Ze,Wyo),M(c1,Ze,null),b(f,Eqe,u),b(f,ji,u),e(ji,f1),e(f1,yce),M(sy,yce,null),e(ji,Qyo),e(ji,Lce),e(Lce,Hyo),b(f,Cqe,u),b(f,So,u),M(ly,So,null),e(So,Uyo),e(So,Di),e(Di,Jyo),e(Di,MD),e(MD,Yyo),e(Di,Kyo),e(Di,ED),e(ED,Zyo),e(Di,eLo),e(So,oLo),e(So,iy),e(iy,rLo),e(iy,xce),e(xce,tLo),e(iy,aLo),e(So,nLo),e(So,lt),M(dy,lt,null),e(lt,sLo),e(lt,$ce),e($ce,lLo),e(lt,iLo),e(lt,Gi),e(Gi,dLo),e(Gi,kce),e(kce,cLo),e(Gi,fLo),e(Gi,CD),e(CD,mLo),e(Gi,gLo),e(lt,hLo),M(m1,lt,null),e(So,pLo),e(So,eo),M(cy,eo,null),e(eo,_Lo),e(eo,Sce),e(Sce,uLo),e(eo,bLo),e(eo,Sa),e(Sa,vLo),e(Sa,Rce),e(Rce,FLo),e(Sa,TLo),e(Sa,Pce),e(Pce,MLo),e(Sa,ELo),e(Sa,Bce),e(Bce,CLo),e(Sa,wLo),e(eo,ALo),e(eo,_e),e(_e,g1),e(g1,Ice),e(Ice,yLo),e(g1,LLo),e(g1,wD),e(wD,xLo),e(g1,$Lo),e(_e,kLo),e(_e,h1),e(h1,qce),e(qce,SLo),e(h1,RLo),e(h1,AD),e(AD,PLo),e(h1,BLo),e(_e,ILo),e(_e,p1),e(p1,Nce),e(Nce,qLo),e(p1,NLo),e(p1,yD),e(yD,jLo),e(p1,DLo),e(_e,GLo),e(_e,_1),e(_1,jce),e(jce,OLo),e(_1,VLo),e(_1,LD),e(LD,XLo),e(_1,zLo),e(_e,WLo),e(_e,u1),e(u1,Dce),e(Dce,QLo),e(u1,HLo),e(u1,xD),e(xD,ULo),e(u1,JLo),e(_e,YLo),e(_e,b1),e(b1,Gce),e(Gce,KLo),e(b1,ZLo),e(b1,$D),e($D,e8o),e(b1,o8o),e(_e,r8o),e(_e,v1),e(v1,Oce),e(Oce,t8o),e(v1,a8o),e(v1,kD),e(kD,n8o),e(v1,s8o),e(_e,l8o),e(_e,F1),e(F1,Vce),e(Vce,i8o),e(F1,d8o),e(F1,SD),e(SD,c8o),e(F1,f8o),e(_e,m8o),e(_e,T1),e(T1,Xce),e(Xce,g8o),e(T1,h8o),e(T1,RD),e(RD,p8o),e(T1,_8o),e(_e,u8o),e(_e,M1),e(M1,zce),e(zce,b8o),e(M1,v8o),e(M1,PD),e(PD,F8o),e(M1,T8o),e(_e,M8o),e(_e,E1),e(E1,Wce),e(Wce,E8o),e(E1,C8o),e(E1,BD),e(BD,w8o),e(E1,A8o),e(_e,y8o),e(_e,C1),e(C1,Qce),e(Qce,L8o),e(C1,x8o),e(C1,ID),e(ID,$8o),e(C1,k8o),e(_e,S8o),e(_e,w1),e(w1,Hce),e(Hce,R8o),e(w1,P8o),e(w1,qD),e(qD,B8o),e(w1,I8o),e(_e,q8o),e(_e,A1),e(A1,Uce),e(Uce,N8o),e(A1,j8o),e(A1,ND),e(ND,D8o),e(A1,G8o),e(_e,O8o),e(_e,y1),e(y1,Jce),e(Jce,V8o),e(y1,X8o),e(y1,jD),e(jD,z8o),e(y1,W8o),e(_e,Q8o),e(_e,L1),e(L1,Yce),e(Yce,H8o),e(L1,U8o),e(L1,DD),e(DD,J8o),e(L1,Y8o),e(eo,K8o),e(eo,x1),e(x1,Z8o),e(x1,Kce),e(Kce,e9o),e(x1,o9o),e(x1,Zce),e(Zce,r9o),e(eo,t9o),M($1,eo,null),b(f,wqe,u),b(f,Oi,u),e(Oi,k1),e(k1,efe),M(fy,efe,null),e(Oi,a9o),e(Oi,ofe),e(ofe,n9o),b(f,Aqe,u),b(f,Ro,u),M(my,Ro,null),e(Ro,s9o),e(Ro,Vi),e(Vi,l9o),e(Vi,GD),e(GD,i9o),e(Vi,d9o),e(Vi,OD),e(OD,c9o),e(Vi,f9o),e(Ro,m9o),e(Ro,gy),e(gy,g9o),e(gy,rfe),e(rfe,h9o),e(gy,p9o),e(Ro,_9o),e(Ro,it),M(hy,it,null),e(it,u9o),e(it,tfe),e(tfe,b9o),e(it,v9o),e(it,Xi),e(Xi,F9o),e(Xi,afe),e(afe,T9o),e(Xi,M9o),e(Xi,VD),e(VD,E9o),e(Xi,C9o),e(it,w9o),M(S1,it,null),e(Ro,A9o),e(Ro,oo),M(py,oo,null),e(oo,y9o),e(oo,nfe),e(nfe,L9o),e(oo,x9o),e(oo,Ra),e(Ra,$9o),e(Ra,sfe),e(sfe,k9o),e(Ra,S9o),e(Ra,lfe),e(lfe,R9o),e(Ra,P9o),e(Ra,ife),e(ife,B9o),e(Ra,I9o),e(oo,q9o),e(oo,q),e(q,R1),e(R1,dfe),e(dfe,N9o),e(R1,j9o),e(R1,XD),e(XD,D9o),e(R1,G9o),e(q,O9o),e(q,P1),e(P1,cfe),e(cfe,V9o),e(P1,X9o),e(P1,zD),e(zD,z9o),e(P1,W9o),e(q,Q9o),e(q,B1),e(B1,ffe),e(ffe,H9o),e(B1,U9o),e(B1,WD),e(WD,J9o),e(B1,Y9o),e(q,K9o),e(q,I1),e(I1,mfe),e(mfe,Z9o),e(I1,exo),e(I1,QD),e(QD,oxo),e(I1,rxo),e(q,txo),e(q,q1),e(q1,gfe),e(gfe,axo),e(q1,nxo),e(q1,HD),e(HD,sxo),e(q1,lxo),e(q,ixo),e(q,N1),e(N1,hfe),e(hfe,dxo),e(N1,cxo),e(N1,UD),e(UD,fxo),e(N1,mxo),e(q,gxo),e(q,j1),e(j1,pfe),e(pfe,hxo),e(j1,pxo),e(j1,JD),e(JD,_xo),e(j1,uxo),e(q,bxo),e(q,D1),e(D1,_fe),e(_fe,vxo),e(D1,Fxo),e(D1,YD),e(YD,Txo),e(D1,Mxo),e(q,Exo),e(q,G1),e(G1,ufe),e(ufe,Cxo),e(G1,wxo),e(G1,KD),e(KD,Axo),e(G1,yxo),e(q,Lxo),e(q,O1),e(O1,bfe),e(bfe,xxo),e(O1,$xo),e(O1,ZD),e(ZD,kxo),e(O1,Sxo),e(q,Rxo),e(q,V1),e(V1,vfe),e(vfe,Pxo),e(V1,Bxo),e(V1,eG),e(eG,Ixo),e(V1,qxo),e(q,Nxo),e(q,X1),e(X1,Ffe),e(Ffe,jxo),e(X1,Dxo),e(X1,oG),e(oG,Gxo),e(X1,Oxo),e(q,Vxo),e(q,z1),e(z1,Tfe),e(Tfe,Xxo),e(z1,zxo),e(z1,rG),e(rG,Wxo),e(z1,Qxo),e(q,Hxo),e(q,W1),e(W1,Mfe),e(Mfe,Uxo),e(W1,Jxo),e(W1,tG),e(tG,Yxo),e(W1,Kxo),e(q,Zxo),e(q,Q1),e(Q1,Efe),e(Efe,e$o),e(Q1,o$o),e(Q1,aG),e(aG,r$o),e(Q1,t$o),e(q,a$o),e(q,H1),e(H1,Cfe),e(Cfe,n$o),e(H1,s$o),e(H1,nG),e(nG,l$o),e(H1,i$o),e(q,d$o),e(q,U1),e(U1,wfe),e(wfe,c$o),e(U1,f$o),e(U1,sG),e(sG,m$o),e(U1,g$o),e(q,h$o),e(q,J1),e(J1,Afe),e(Afe,p$o),e(J1,_$o),e(J1,lG),e(lG,u$o),e(J1,b$o),e(q,v$o),e(q,Y1),e(Y1,yfe),e(yfe,F$o),e(Y1,T$o),e(Y1,iG),e(iG,M$o),e(Y1,E$o),e(q,C$o),e(q,K1),e(K1,Lfe),e(Lfe,w$o),e(K1,A$o),e(K1,dG),e(dG,y$o),e(K1,L$o),e(q,x$o),e(q,Z1),e(Z1,xfe),e(xfe,$$o),e(Z1,k$o),e(Z1,cG),e(cG,S$o),e(Z1,R$o),e(q,P$o),e(q,eb),e(eb,$fe),e($fe,B$o),e(eb,I$o),e(eb,fG),e(fG,q$o),e(eb,N$o),e(q,j$o),e(q,ob),e(ob,kfe),e(kfe,D$o),e(ob,G$o),e(ob,mG),e(mG,O$o),e(ob,V$o),e(q,X$o),e(q,rb),e(rb,Sfe),e(Sfe,z$o),e(rb,W$o),e(rb,gG),e(gG,Q$o),e(rb,H$o),e(q,U$o),e(q,tb),e(tb,Rfe),e(Rfe,J$o),e(tb,Y$o),e(tb,hG),e(hG,K$o),e(tb,Z$o),e(q,eko),e(q,ab),e(ab,Pfe),e(Pfe,oko),e(ab,rko),e(ab,pG),e(pG,tko),e(ab,ako),e(q,nko),e(q,nb),e(nb,Bfe),e(Bfe,sko),e(nb,lko),e(nb,_G),e(_G,iko),e(nb,dko),e(q,cko),e(q,sb),e(sb,Ife),e(Ife,fko),e(sb,mko),e(sb,uG),e(uG,gko),e(sb,hko),e(q,pko),e(q,lb),e(lb,qfe),e(qfe,_ko),e(lb,uko),e(lb,bG),e(bG,bko),e(lb,vko),e(q,Fko),e(q,ib),e(ib,Nfe),e(Nfe,Tko),e(ib,Mko),e(ib,vG),e(vG,Eko),e(ib,Cko),e(q,wko),e(q,db),e(db,jfe),e(jfe,Ako),e(db,yko),e(db,FG),e(FG,Lko),e(db,xko),e(q,$ko),e(q,cb),e(cb,Dfe),e(Dfe,kko),e(cb,Sko),e(cb,TG),e(TG,Rko),e(cb,Pko),e(q,Bko),e(q,fb),e(fb,Gfe),e(Gfe,Iko),e(fb,qko),e(fb,MG),e(MG,Nko),e(fb,jko),e(q,Dko),e(q,mb),e(mb,Ofe),e(Ofe,Gko),e(mb,Oko),e(mb,EG),e(EG,Vko),e(mb,Xko),e(q,zko),e(q,gb),e(gb,Vfe),e(Vfe,Wko),e(gb,Qko),e(gb,CG),e(CG,Hko),e(gb,Uko),e(q,Jko),e(q,hb),e(hb,Xfe),e(Xfe,Yko),e(hb,Kko),e(hb,wG),e(wG,Zko),e(hb,eSo),e(q,oSo),e(q,pb),e(pb,zfe),e(zfe,rSo),e(pb,tSo),e(pb,AG),e(AG,aSo),e(pb,nSo),e(q,sSo),e(q,_b),e(_b,Wfe),e(Wfe,lSo),e(_b,iSo),e(_b,yG),e(yG,dSo),e(_b,cSo),e(q,fSo),e(q,ub),e(ub,Qfe),e(Qfe,mSo),e(ub,gSo),e(ub,LG),e(LG,hSo),e(ub,pSo),e(q,_So),e(q,bb),e(bb,Hfe),e(Hfe,uSo),e(bb,bSo),e(bb,xG),e(xG,vSo),e(bb,FSo),e(q,TSo),e(q,vb),e(vb,Ufe),e(Ufe,MSo),e(vb,ESo),e(vb,$G),e($G,CSo),e(vb,wSo),e(q,ASo),e(q,Fb),e(Fb,Jfe),e(Jfe,ySo),e(Fb,LSo),e(Fb,kG),e(kG,xSo),e(Fb,$So),e(q,kSo),e(q,Tb),e(Tb,Yfe),e(Yfe,SSo),e(Tb,RSo),e(Tb,SG),e(SG,PSo),e(Tb,BSo),e(q,ISo),e(q,Mb),e(Mb,Kfe),e(Kfe,qSo),e(Mb,NSo),e(Mb,RG),e(RG,jSo),e(Mb,DSo),e(q,GSo),e(q,Eb),e(Eb,Zfe),e(Zfe,OSo),e(Eb,VSo),e(Eb,PG),e(PG,XSo),e(Eb,zSo),e(q,WSo),e(q,Cb),e(Cb,eme),e(eme,QSo),e(Cb,HSo),e(Cb,BG),e(BG,USo),e(Cb,JSo),e(oo,YSo),e(oo,wb),e(wb,KSo),e(wb,ome),e(ome,ZSo),e(wb,eRo),e(wb,rme),e(rme,oRo),e(oo,rRo),M(Ab,oo,null),b(f,yqe,u),b(f,zi,u),e(zi,yb),e(yb,tme),M(_y,tme,null),e(zi,tRo),e(zi,ame),e(ame,aRo),b(f,Lqe,u),b(f,Po,u),M(uy,Po,null),e(Po,nRo),e(Po,Wi),e(Wi,sRo),e(Wi,IG),e(IG,lRo),e(Wi,iRo),e(Wi,qG),e(qG,dRo),e(Wi,cRo),e(Po,fRo),e(Po,by),e(by,mRo),e(by,nme),e(nme,gRo),e(by,hRo),e(Po,pRo),e(Po,dt),M(vy,dt,null),e(dt,_Ro),e(dt,sme),e(sme,uRo),e(dt,bRo),e(dt,Qi),e(Qi,vRo),e(Qi,lme),e(lme,FRo),e(Qi,TRo),e(Qi,NG),e(NG,MRo),e(Qi,ERo),e(dt,CRo),M(Lb,dt,null),e(Po,wRo),e(Po,ro),M(Fy,ro,null),e(ro,ARo),e(ro,ime),e(ime,yRo),e(ro,LRo),e(ro,Pa),e(Pa,xRo),e(Pa,dme),e(dme,$Ro),e(Pa,kRo),e(Pa,cme),e(cme,SRo),e(Pa,RRo),e(Pa,fme),e(fme,PRo),e(Pa,BRo),e(ro,IRo),e(ro,Y),e(Y,xb),e(xb,mme),e(mme,qRo),e(xb,NRo),e(xb,jG),e(jG,jRo),e(xb,DRo),e(Y,GRo),e(Y,$b),e($b,gme),e(gme,ORo),e($b,VRo),e($b,DG),e(DG,XRo),e($b,zRo),e(Y,WRo),e(Y,kb),e(kb,hme),e(hme,QRo),e(kb,HRo),e(kb,GG),e(GG,URo),e(kb,JRo),e(Y,YRo),e(Y,Sb),e(Sb,pme),e(pme,KRo),e(Sb,ZRo),e(Sb,OG),e(OG,ePo),e(Sb,oPo),e(Y,rPo),e(Y,Rb),e(Rb,_me),e(_me,tPo),e(Rb,aPo),e(Rb,VG),e(VG,nPo),e(Rb,sPo),e(Y,lPo),e(Y,Pb),e(Pb,ume),e(ume,iPo),e(Pb,dPo),e(Pb,XG),e(XG,cPo),e(Pb,fPo),e(Y,mPo),e(Y,Bb),e(Bb,bme),e(bme,gPo),e(Bb,hPo),e(Bb,zG),e(zG,pPo),e(Bb,_Po),e(Y,uPo),e(Y,Ib),e(Ib,vme),e(vme,bPo),e(Ib,vPo),e(Ib,WG),e(WG,FPo),e(Ib,TPo),e(Y,MPo),e(Y,qb),e(qb,Fme),e(Fme,EPo),e(qb,CPo),e(qb,QG),e(QG,wPo),e(qb,APo),e(Y,yPo),e(Y,Nb),e(Nb,Tme),e(Tme,LPo),e(Nb,xPo),e(Nb,HG),e(HG,$Po),e(Nb,kPo),e(Y,SPo),e(Y,jb),e(jb,Mme),e(Mme,RPo),e(jb,PPo),e(jb,UG),e(UG,BPo),e(jb,IPo),e(Y,qPo),e(Y,Db),e(Db,Eme),e(Eme,NPo),e(Db,jPo),e(Db,JG),e(JG,DPo),e(Db,GPo),e(Y,OPo),e(Y,Gb),e(Gb,Cme),e(Cme,VPo),e(Gb,XPo),e(Gb,YG),e(YG,zPo),e(Gb,WPo),e(Y,QPo),e(Y,Ob),e(Ob,wme),e(wme,HPo),e(Ob,UPo),e(Ob,KG),e(KG,JPo),e(Ob,YPo),e(Y,KPo),e(Y,Vb),e(Vb,Ame),e(Ame,ZPo),e(Vb,eBo),e(Vb,ZG),e(ZG,oBo),e(Vb,rBo),e(Y,tBo),e(Y,Xb),e(Xb,yme),e(yme,aBo),e(Xb,nBo),e(Xb,eO),e(eO,sBo),e(Xb,lBo),e(Y,iBo),e(Y,zb),e(zb,Lme),e(Lme,dBo),e(zb,cBo),e(zb,oO),e(oO,fBo),e(zb,mBo),e(Y,gBo),e(Y,Wb),e(Wb,xme),e(xme,hBo),e(Wb,pBo),e(Wb,rO),e(rO,_Bo),e(Wb,uBo),e(Y,bBo),e(Y,Qb),e(Qb,$me),e($me,vBo),e(Qb,FBo),e(Qb,tO),e(tO,TBo),e(Qb,MBo),e(Y,EBo),e(Y,Hb),e(Hb,kme),e(kme,CBo),e(Hb,wBo),e(Hb,aO),e(aO,ABo),e(Hb,yBo),e(Y,LBo),e(Y,Ub),e(Ub,Sme),e(Sme,xBo),e(Ub,$Bo),e(Ub,nO),e(nO,kBo),e(Ub,SBo),e(Y,RBo),e(Y,Jb),e(Jb,Rme),e(Rme,PBo),e(Jb,BBo),e(Jb,sO),e(sO,IBo),e(Jb,qBo),e(Y,NBo),e(Y,Yb),e(Yb,Pme),e(Pme,jBo),e(Yb,DBo),e(Yb,lO),e(lO,GBo),e(Yb,OBo),e(Y,VBo),e(Y,Kb),e(Kb,Bme),e(Bme,XBo),e(Kb,zBo),e(Kb,iO),e(iO,WBo),e(Kb,QBo),e(Y,HBo),e(Y,Zb),e(Zb,Ime),e(Ime,UBo),e(Zb,JBo),e(Zb,dO),e(dO,YBo),e(Zb,KBo),e(Y,ZBo),e(Y,e4),e(e4,qme),e(qme,eIo),e(e4,oIo),e(e4,cO),e(cO,rIo),e(e4,tIo),e(Y,aIo),e(Y,o4),e(o4,Nme),e(Nme,nIo),e(o4,sIo),e(o4,fO),e(fO,lIo),e(o4,iIo),e(Y,dIo),e(Y,r4),e(r4,jme),e(jme,cIo),e(r4,fIo),e(r4,mO),e(mO,mIo),e(r4,gIo),e(Y,hIo),e(Y,t4),e(t4,Dme),e(Dme,pIo),e(t4,_Io),e(t4,gO),e(gO,uIo),e(t4,bIo),e(ro,vIo),e(ro,a4),e(a4,FIo),e(a4,Gme),e(Gme,TIo),e(a4,MIo),e(a4,Ome),e(Ome,EIo),e(ro,CIo),M(n4,ro,null),b(f,xqe,u),b(f,Hi,u),e(Hi,s4),e(s4,Vme),M(Ty,Vme,null),e(Hi,wIo),e(Hi,Xme),e(Xme,AIo),b(f,$qe,u),b(f,Bo,u),M(My,Bo,null),e(Bo,yIo),e(Bo,Ui),e(Ui,LIo),e(Ui,hO),e(hO,xIo),e(Ui,$Io),e(Ui,pO),e(pO,kIo),e(Ui,SIo),e(Bo,RIo),e(Bo,Ey),e(Ey,PIo),e(Ey,zme),e(zme,BIo),e(Ey,IIo),e(Bo,qIo),e(Bo,ct),M(Cy,ct,null),e(ct,NIo),e(ct,Wme),e(Wme,jIo),e(ct,DIo),e(ct,Ji),e(Ji,GIo),e(Ji,Qme),e(Qme,OIo),e(Ji,VIo),e(Ji,_O),e(_O,XIo),e(Ji,zIo),e(ct,WIo),M(l4,ct,null),e(Bo,QIo),e(Bo,to),M(wy,to,null),e(to,HIo),e(to,Hme),e(Hme,UIo),e(to,JIo),e(to,Ba),e(Ba,YIo),e(Ba,Ume),e(Ume,KIo),e(Ba,ZIo),e(Ba,Jme),e(Jme,eqo),e(Ba,oqo),e(Ba,Yme),e(Yme,rqo),e(Ba,tqo),e(to,aqo),e(to,Yr),e(Yr,i4),e(i4,Kme),e(Kme,nqo),e(i4,sqo),e(i4,uO),e(uO,lqo),e(i4,iqo),e(Yr,dqo),e(Yr,d4),e(d4,Zme),e(Zme,cqo),e(d4,fqo),e(d4,bO),e(bO,mqo),e(d4,gqo),e(Yr,hqo),e(Yr,c4),e(c4,ege),e(ege,pqo),e(c4,_qo),e(c4,vO),e(vO,uqo),e(c4,bqo),e(Yr,vqo),e(Yr,f4),e(f4,oge),e(oge,Fqo),e(f4,Tqo),e(f4,FO),e(FO,Mqo),e(f4,Eqo),e(Yr,Cqo),e(Yr,m4),e(m4,rge),e(rge,wqo),e(m4,Aqo),e(m4,TO),e(TO,yqo),e(m4,Lqo),e(to,xqo),e(to,g4),e(g4,$qo),e(g4,tge),e(tge,kqo),e(g4,Sqo),e(g4,age),e(age,Rqo),e(to,Pqo),M(h4,to,null),b(f,kqe,u),b(f,Yi,u),e(Yi,p4),e(p4,nge),M(Ay,nge,null),e(Yi,Bqo),e(Yi,sge),e(sge,Iqo),b(f,Sqe,u),b(f,Io,u),M(yy,Io,null),e(Io,qqo),e(Io,Ki),e(Ki,Nqo),e(Ki,MO),e(MO,jqo),e(Ki,Dqo),e(Ki,EO),e(EO,Gqo),e(Ki,Oqo),e(Io,Vqo),e(Io,Ly),e(Ly,Xqo),e(Ly,lge),e(lge,zqo),e(Ly,Wqo),e(Io,Qqo),e(Io,ft),M(xy,ft,null),e(ft,Hqo),e(ft,ige),e(ige,Uqo),e(ft,Jqo),e(ft,Zi),e(Zi,Yqo),e(Zi,dge),e(dge,Kqo),e(Zi,Zqo),e(Zi,CO),e(CO,eNo),e(Zi,oNo),e(ft,rNo),M(_4,ft,null),e(Io,tNo),e(Io,ao),M($y,ao,null),e(ao,aNo),e(ao,cge),e(cge,nNo),e(ao,sNo),e(ao,Ia),e(Ia,lNo),e(Ia,fge),e(fge,iNo),e(Ia,dNo),e(Ia,mge),e(mge,cNo),e(Ia,fNo),e(Ia,gge),e(gge,mNo),e(Ia,gNo),e(ao,hNo),e(ao,U),e(U,u4),e(u4,hge),e(hge,pNo),e(u4,_No),e(u4,wO),e(wO,uNo),e(u4,bNo),e(U,vNo),e(U,b4),e(b4,pge),e(pge,FNo),e(b4,TNo),e(b4,AO),e(AO,MNo),e(b4,ENo),e(U,CNo),e(U,v4),e(v4,_ge),e(_ge,wNo),e(v4,ANo),e(v4,yO),e(yO,yNo),e(v4,LNo),e(U,xNo),e(U,F4),e(F4,uge),e(uge,$No),e(F4,kNo),e(F4,LO),e(LO,SNo),e(F4,RNo),e(U,PNo),e(U,T4),e(T4,bge),e(bge,BNo),e(T4,INo),e(T4,xO),e(xO,qNo),e(T4,NNo),e(U,jNo),e(U,M4),e(M4,vge),e(vge,DNo),e(M4,GNo),e(M4,$O),e($O,ONo),e(M4,VNo),e(U,XNo),e(U,E4),e(E4,Fge),e(Fge,zNo),e(E4,WNo),e(E4,kO),e(kO,QNo),e(E4,HNo),e(U,UNo),e(U,C4),e(C4,Tge),e(Tge,JNo),e(C4,YNo),e(C4,SO),e(SO,KNo),e(C4,ZNo),e(U,ejo),e(U,w4),e(w4,Mge),e(Mge,ojo),e(w4,rjo),e(w4,RO),e(RO,tjo),e(w4,ajo),e(U,njo),e(U,A4),e(A4,Ege),e(Ege,sjo),e(A4,ljo),e(A4,PO),e(PO,ijo),e(A4,djo),e(U,cjo),e(U,y4),e(y4,Cge),e(Cge,fjo),e(y4,mjo),e(y4,BO),e(BO,gjo),e(y4,hjo),e(U,pjo),e(U,L4),e(L4,wge),e(wge,_jo),e(L4,ujo),e(L4,IO),e(IO,bjo),e(L4,vjo),e(U,Fjo),e(U,x4),e(x4,Age),e(Age,Tjo),e(x4,Mjo),e(x4,qO),e(qO,Ejo),e(x4,Cjo),e(U,wjo),e(U,$4),e($4,yge),e(yge,Ajo),e($4,yjo),e($4,NO),e(NO,Ljo),e($4,xjo),e(U,$jo),e(U,k4),e(k4,Lge),e(Lge,kjo),e(k4,Sjo),e(k4,jO),e(jO,Rjo),e(k4,Pjo),e(U,Bjo),e(U,S4),e(S4,xge),e(xge,Ijo),e(S4,qjo),e(S4,DO),e(DO,Njo),e(S4,jjo),e(U,Djo),e(U,R4),e(R4,$ge),e($ge,Gjo),e(R4,Ojo),e(R4,GO),e(GO,Vjo),e(R4,Xjo),e(U,zjo),e(U,P4),e(P4,kge),e(kge,Wjo),e(P4,Qjo),e(P4,OO),e(OO,Hjo),e(P4,Ujo),e(U,Jjo),e(U,B4),e(B4,Sge),e(Sge,Yjo),e(B4,Kjo),e(B4,VO),e(VO,Zjo),e(B4,eDo),e(U,oDo),e(U,I4),e(I4,Rge),e(Rge,rDo),e(I4,tDo),e(I4,XO),e(XO,aDo),e(I4,nDo),e(U,sDo),e(U,q4),e(q4,Pge),e(Pge,lDo),e(q4,iDo),e(q4,zO),e(zO,dDo),e(q4,cDo),e(U,fDo),e(U,N4),e(N4,Bge),e(Bge,mDo),e(N4,gDo),e(N4,WO),e(WO,hDo),e(N4,pDo),e(U,_Do),e(U,j4),e(j4,Ige),e(Ige,uDo),e(j4,bDo),e(j4,QO),e(QO,vDo),e(j4,FDo),e(U,TDo),e(U,D4),e(D4,qge),e(qge,MDo),e(D4,EDo),e(D4,HO),e(HO,CDo),e(D4,wDo),e(U,ADo),e(U,G4),e(G4,Nge),e(Nge,yDo),e(G4,LDo),e(G4,UO),e(UO,xDo),e(G4,$Do),e(U,kDo),e(U,O4),e(O4,jge),e(jge,SDo),e(O4,RDo),e(O4,JO),e(JO,PDo),e(O4,BDo),e(U,IDo),e(U,V4),e(V4,Dge),e(Dge,qDo),e(V4,NDo),e(V4,YO),e(YO,jDo),e(V4,DDo),e(U,GDo),e(U,X4),e(X4,Gge),e(Gge,ODo),e(X4,VDo),e(X4,KO),e(KO,XDo),e(X4,zDo),e(U,WDo),e(U,z4),e(z4,Oge),e(Oge,QDo),e(z4,HDo),e(z4,ZO),e(ZO,UDo),e(z4,JDo),e(U,YDo),e(U,W4),e(W4,Vge),e(Vge,KDo),e(W4,ZDo),e(W4,eV),e(eV,eGo),e(W4,oGo),e(U,rGo),e(U,Q4),e(Q4,Xge),e(Xge,tGo),e(Q4,aGo),e(Q4,oV),e(oV,nGo),e(Q4,sGo),e(U,lGo),e(U,H4),e(H4,zge),e(zge,iGo),e(H4,dGo),e(H4,rV),e(rV,cGo),e(H4,fGo),e(U,mGo),e(U,U4),e(U4,Wge),e(Wge,gGo),e(U4,hGo),e(U4,tV),e(tV,pGo),e(U4,_Go),e(ao,uGo),e(ao,J4),e(J4,bGo),e(J4,Qge),e(Qge,vGo),e(J4,FGo),e(J4,Hge),e(Hge,TGo),e(ao,MGo),M(Y4,ao,null),b(f,Rqe,u),b(f,ed,u),e(ed,K4),e(K4,Uge),M(ky,Uge,null),e(ed,EGo),e(ed,Jge),e(Jge,CGo),b(f,Pqe,u),b(f,qo,u),M(Sy,qo,null),e(qo,wGo),e(qo,od),e(od,AGo),e(od,aV),e(aV,yGo),e(od,LGo),e(od,nV),e(nV,xGo),e(od,$Go),e(qo,kGo),e(qo,Ry),e(Ry,SGo),e(Ry,Yge),e(Yge,RGo),e(Ry,PGo),e(qo,BGo),e(qo,mt),M(Py,mt,null),e(mt,IGo),e(mt,Kge),e(Kge,qGo),e(mt,NGo),e(mt,rd),e(rd,jGo),e(rd,Zge),e(Zge,DGo),e(rd,GGo),e(rd,sV),e(sV,OGo),e(rd,VGo),e(mt,XGo),M(Z4,mt,null),e(qo,zGo),e(qo,no),M(By,no,null),e(no,WGo),e(no,ehe),e(ehe,QGo),e(no,HGo),e(no,qa),e(qa,UGo),e(qa,ohe),e(ohe,JGo),e(qa,YGo),e(qa,rhe),e(rhe,KGo),e(qa,ZGo),e(qa,the),e(the,eOo),e(qa,oOo),e(no,rOo),e(no,V),e(V,e5),e(e5,ahe),e(ahe,tOo),e(e5,aOo),e(e5,lV),e(lV,nOo),e(e5,sOo),e(V,lOo),e(V,o5),e(o5,nhe),e(nhe,iOo),e(o5,dOo),e(o5,iV),e(iV,cOo),e(o5,fOo),e(V,mOo),e(V,r5),e(r5,she),e(she,gOo),e(r5,hOo),e(r5,dV),e(dV,pOo),e(r5,_Oo),e(V,uOo),e(V,t5),e(t5,lhe),e(lhe,bOo),e(t5,vOo),e(t5,cV),e(cV,FOo),e(t5,TOo),e(V,MOo),e(V,a5),e(a5,ihe),e(ihe,EOo),e(a5,COo),e(a5,fV),e(fV,wOo),e(a5,AOo),e(V,yOo),e(V,n5),e(n5,dhe),e(dhe,LOo),e(n5,xOo),e(n5,mV),e(mV,$Oo),e(n5,kOo),e(V,SOo),e(V,s5),e(s5,che),e(che,ROo),e(s5,POo),e(s5,gV),e(gV,BOo),e(s5,IOo),e(V,qOo),e(V,l5),e(l5,fhe),e(fhe,NOo),e(l5,jOo),e(l5,hV),e(hV,DOo),e(l5,GOo),e(V,OOo),e(V,i5),e(i5,mhe),e(mhe,VOo),e(i5,XOo),e(i5,pV),e(pV,zOo),e(i5,WOo),e(V,QOo),e(V,d5),e(d5,ghe),e(ghe,HOo),e(d5,UOo),e(d5,_V),e(_V,JOo),e(d5,YOo),e(V,KOo),e(V,c5),e(c5,hhe),e(hhe,ZOo),e(c5,eVo),e(c5,uV),e(uV,oVo),e(c5,rVo),e(V,tVo),e(V,f5),e(f5,phe),e(phe,aVo),e(f5,nVo),e(f5,bV),e(bV,sVo),e(f5,lVo),e(V,iVo),e(V,m5),e(m5,_he),e(_he,dVo),e(m5,cVo),e(m5,vV),e(vV,fVo),e(m5,mVo),e(V,gVo),e(V,g5),e(g5,uhe),e(uhe,hVo),e(g5,pVo),e(g5,FV),e(FV,_Vo),e(g5,uVo),e(V,bVo),e(V,h5),e(h5,bhe),e(bhe,vVo),e(h5,FVo),e(h5,TV),e(TV,TVo),e(h5,MVo),e(V,EVo),e(V,p5),e(p5,vhe),e(vhe,CVo),e(p5,wVo),e(p5,MV),e(MV,AVo),e(p5,yVo),e(V,LVo),e(V,_5),e(_5,Fhe),e(Fhe,xVo),e(_5,$Vo),e(_5,EV),e(EV,kVo),e(_5,SVo),e(V,RVo),e(V,u5),e(u5,The),e(The,PVo),e(u5,BVo),e(u5,CV),e(CV,IVo),e(u5,qVo),e(V,NVo),e(V,b5),e(b5,Mhe),e(Mhe,jVo),e(b5,DVo),e(b5,wV),e(wV,GVo),e(b5,OVo),e(V,VVo),e(V,v5),e(v5,Ehe),e(Ehe,XVo),e(v5,zVo),e(v5,AV),e(AV,WVo),e(v5,QVo),e(V,HVo),e(V,F5),e(F5,Che),e(Che,UVo),e(F5,JVo),e(F5,yV),e(yV,YVo),e(F5,KVo),e(V,ZVo),e(V,T5),e(T5,whe),e(whe,eXo),e(T5,oXo),e(T5,LV),e(LV,rXo),e(T5,tXo),e(V,aXo),e(V,M5),e(M5,Ahe),e(Ahe,nXo),e(M5,sXo),e(M5,xV),e(xV,lXo),e(M5,iXo),e(V,dXo),e(V,E5),e(E5,yhe),e(yhe,cXo),e(E5,fXo),e(E5,$V),e($V,mXo),e(E5,gXo),e(V,hXo),e(V,C5),e(C5,Lhe),e(Lhe,pXo),e(C5,_Xo),e(C5,kV),e(kV,uXo),e(C5,bXo),e(V,vXo),e(V,w5),e(w5,xhe),e(xhe,FXo),e(w5,TXo),e(w5,SV),e(SV,MXo),e(w5,EXo),e(V,CXo),e(V,A5),e(A5,$he),e($he,wXo),e(A5,AXo),e(A5,RV),e(RV,yXo),e(A5,LXo),e(V,xXo),e(V,y5),e(y5,khe),e(khe,$Xo),e(y5,kXo),e(y5,PV),e(PV,SXo),e(y5,RXo),e(V,PXo),e(V,L5),e(L5,She),e(She,BXo),e(L5,IXo),e(L5,BV),e(BV,qXo),e(L5,NXo),e(V,jXo),e(V,x5),e(x5,Rhe),e(Rhe,DXo),e(x5,GXo),e(x5,IV),e(IV,OXo),e(x5,VXo),e(V,XXo),e(V,$5),e($5,Phe),e(Phe,zXo),e($5,WXo),e($5,qV),e(qV,QXo),e($5,HXo),e(V,UXo),e(V,k5),e(k5,Bhe),e(Bhe,JXo),e(k5,YXo),e(k5,NV),e(NV,KXo),e(k5,ZXo),e(V,ezo),e(V,S5),e(S5,Ihe),e(Ihe,ozo),e(S5,rzo),e(S5,jV),e(jV,tzo),e(S5,azo),e(V,nzo),e(V,R5),e(R5,qhe),e(qhe,szo),e(R5,lzo),e(R5,DV),e(DV,izo),e(R5,dzo),e(V,czo),e(V,P5),e(P5,Nhe),e(Nhe,fzo),e(P5,mzo),e(P5,GV),e(GV,gzo),e(P5,hzo),e(V,pzo),e(V,B5),e(B5,jhe),e(jhe,_zo),e(B5,uzo),e(B5,OV),e(OV,bzo),e(B5,vzo),e(V,Fzo),e(V,I5),e(I5,Dhe),e(Dhe,Tzo),e(I5,Mzo),e(I5,VV),e(VV,Ezo),e(I5,Czo),e(V,wzo),e(V,q5),e(q5,Ghe),e(Ghe,Azo),e(q5,yzo),e(q5,XV),e(XV,Lzo),e(q5,xzo),e(V,$zo),e(V,N5),e(N5,Ohe),e(Ohe,kzo),e(N5,Szo),e(N5,zV),e(zV,Rzo),e(N5,Pzo),e(no,Bzo),e(no,j5),e(j5,Izo),e(j5,Vhe),e(Vhe,qzo),e(j5,Nzo),e(j5,Xhe),e(Xhe,jzo),e(no,Dzo),M(D5,no,null),b(f,Bqe,u),b(f,td,u),e(td,G5),e(G5,zhe),M(Iy,zhe,null),e(td,Gzo),e(td,Whe),e(Whe,Ozo),b(f,Iqe,u),b(f,No,u),M(qy,No,null),e(No,Vzo),e(No,ad),e(ad,Xzo),e(ad,WV),e(WV,zzo),e(ad,Wzo),e(ad,QV),e(QV,Qzo),e(ad,Hzo),e(No,Uzo),e(No,Ny),e(Ny,Jzo),e(Ny,Qhe),e(Qhe,Yzo),e(Ny,Kzo),e(No,Zzo),e(No,gt),M(jy,gt,null),e(gt,eWo),e(gt,Hhe),e(Hhe,oWo),e(gt,rWo),e(gt,nd),e(nd,tWo),e(nd,Uhe),e(Uhe,aWo),e(nd,nWo),e(nd,HV),e(HV,sWo),e(nd,lWo),e(gt,iWo),M(O5,gt,null),e(No,dWo),e(No,so),M(Dy,so,null),e(so,cWo),e(so,Jhe),e(Jhe,fWo),e(so,mWo),e(so,Na),e(Na,gWo),e(Na,Yhe),e(Yhe,hWo),e(Na,pWo),e(Na,Khe),e(Khe,_Wo),e(Na,uWo),e(Na,Zhe),e(Zhe,bWo),e(Na,vWo),e(so,FWo),e(so,epe),e(epe,V5),e(V5,ope),e(ope,TWo),e(V5,MWo),e(V5,UV),e(UV,EWo),e(V5,CWo),e(so,wWo),e(so,X5),e(X5,AWo),e(X5,rpe),e(rpe,yWo),e(X5,LWo),e(X5,tpe),e(tpe,xWo),e(so,$Wo),M(z5,so,null),b(f,qqe,u),b(f,sd,u),e(sd,W5),e(W5,ape),M(Gy,ape,null),e(sd,kWo),e(sd,npe),e(npe,SWo),b(f,Nqe,u),b(f,jo,u),M(Oy,jo,null),e(jo,RWo),e(jo,ld),e(ld,PWo),e(ld,JV),e(JV,BWo),e(ld,IWo),e(ld,YV),e(YV,qWo),e(ld,NWo),e(jo,jWo),e(jo,Vy),e(Vy,DWo),e(Vy,spe),e(spe,GWo),e(Vy,OWo),e(jo,VWo),e(jo,ht),M(Xy,ht,null),e(ht,XWo),e(ht,lpe),e(lpe,zWo),e(ht,WWo),e(ht,id),e(id,QWo),e(id,ipe),e(ipe,HWo),e(id,UWo),e(id,KV),e(KV,JWo),e(id,YWo),e(ht,KWo),M(Q5,ht,null),e(jo,ZWo),e(jo,lo),M(zy,lo,null),e(lo,eQo),e(lo,dpe),e(dpe,oQo),e(lo,rQo),e(lo,ja),e(ja,tQo),e(ja,cpe),e(cpe,aQo),e(ja,nQo),e(ja,fpe),e(fpe,sQo),e(ja,lQo),e(ja,mpe),e(mpe,iQo),e(ja,dQo),e(lo,cQo),e(lo,Fe),e(Fe,H5),e(H5,gpe),e(gpe,fQo),e(H5,mQo),e(H5,ZV),e(ZV,gQo),e(H5,hQo),e(Fe,pQo),e(Fe,U5),e(U5,hpe),e(hpe,_Qo),e(U5,uQo),e(U5,eX),e(eX,bQo),e(U5,vQo),e(Fe,FQo),e(Fe,J5),e(J5,ppe),e(ppe,TQo),e(J5,MQo),e(J5,oX),e(oX,EQo),e(J5,CQo),e(Fe,wQo),e(Fe,Y5),e(Y5,_pe),e(_pe,AQo),e(Y5,yQo),e(Y5,rX),e(rX,LQo),e(Y5,xQo),e(Fe,$Qo),e(Fe,qs),e(qs,upe),e(upe,kQo),e(qs,SQo),e(qs,tX),e(tX,RQo),e(qs,PQo),e(qs,aX),e(aX,BQo),e(qs,IQo),e(Fe,qQo),e(Fe,K5),e(K5,bpe),e(bpe,NQo),e(K5,jQo),e(K5,nX),e(nX,DQo),e(K5,GQo),e(Fe,OQo),e(Fe,pt),e(pt,vpe),e(vpe,VQo),e(pt,XQo),e(pt,sX),e(sX,zQo),e(pt,WQo),e(pt,lX),e(lX,QQo),e(pt,HQo),e(pt,iX),e(iX,UQo),e(pt,JQo),e(Fe,YQo),e(Fe,Z5),e(Z5,Fpe),e(Fpe,KQo),e(Z5,ZQo),e(Z5,dX),e(dX,eHo),e(Z5,oHo),e(Fe,rHo),e(Fe,ev),e(ev,Tpe),e(Tpe,tHo),e(ev,aHo),e(ev,cX),e(cX,nHo),e(ev,sHo),e(Fe,lHo),e(Fe,ov),e(ov,Mpe),e(Mpe,iHo),e(ov,dHo),e(ov,fX),e(fX,cHo),e(ov,fHo),e(Fe,mHo),e(Fe,rv),e(rv,Epe),e(Epe,gHo),e(rv,hHo),e(rv,mX),e(mX,pHo),e(rv,_Ho),e(Fe,uHo),e(Fe,tv),e(tv,Cpe),e(Cpe,bHo),e(tv,vHo),e(tv,gX),e(gX,FHo),e(tv,THo),e(Fe,MHo),e(Fe,av),e(av,wpe),e(wpe,EHo),e(av,CHo),e(av,hX),e(hX,wHo),e(av,AHo),e(Fe,yHo),e(Fe,nv),e(nv,Ape),e(Ape,LHo),e(nv,xHo),e(nv,pX),e(pX,$Ho),e(nv,kHo),e(lo,SHo),e(lo,sv),e(sv,RHo),e(sv,ype),e(ype,PHo),e(sv,BHo),e(sv,Lpe),e(Lpe,IHo),e(lo,qHo),M(lv,lo,null),b(f,jqe,u),b(f,dd,u),e(dd,iv),e(iv,xpe),M(Wy,xpe,null),e(dd,NHo),e(dd,$pe),e($pe,jHo),b(f,Dqe,u),b(f,Do,u),M(Qy,Do,null),e(Do,DHo),e(Do,cd),e(cd,GHo),e(cd,_X),e(_X,OHo),e(cd,VHo),e(cd,uX),e(uX,XHo),e(cd,zHo),e(Do,WHo),e(Do,Hy),e(Hy,QHo),e(Hy,kpe),e(kpe,HHo),e(Hy,UHo),e(Do,JHo),e(Do,_t),M(Uy,_t,null),e(_t,YHo),e(_t,Spe),e(Spe,KHo),e(_t,ZHo),e(_t,fd),e(fd,eUo),e(fd,Rpe),e(Rpe,oUo),e(fd,rUo),e(fd,bX),e(bX,tUo),e(fd,aUo),e(_t,nUo),M(dv,_t,null),e(Do,sUo),e(Do,io),M(Jy,io,null),e(io,lUo),e(io,Ppe),e(Ppe,iUo),e(io,dUo),e(io,Da),e(Da,cUo),e(Da,Bpe),e(Bpe,fUo),e(Da,mUo),e(Da,Ipe),e(Ipe,gUo),e(Da,hUo),e(Da,qpe),e(qpe,pUo),e(Da,_Uo),e(io,uUo),e(io,Npe),e(Npe,cv),e(cv,jpe),e(jpe,bUo),e(cv,vUo),e(cv,vX),e(vX,FUo),e(cv,TUo),e(io,MUo),e(io,fv),e(fv,EUo),e(fv,Dpe),e(Dpe,CUo),e(fv,wUo),e(fv,Gpe),e(Gpe,AUo),e(io,yUo),M(mv,io,null),b(f,Gqe,u),b(f,md,u),e(md,gv),e(gv,Ope),M(Yy,Ope,null),e(md,LUo),e(md,Vpe),e(Vpe,xUo),b(f,Oqe,u),b(f,Go,u),M(Ky,Go,null),e(Go,$Uo),e(Go,gd),e(gd,kUo),e(gd,FX),e(FX,SUo),e(gd,RUo),e(gd,TX),e(TX,PUo),e(gd,BUo),e(Go,IUo),e(Go,Zy),e(Zy,qUo),e(Zy,Xpe),e(Xpe,NUo),e(Zy,jUo),e(Go,DUo),e(Go,ut),M(eL,ut,null),e(ut,GUo),e(ut,zpe),e(zpe,OUo),e(ut,VUo),e(ut,hd),e(hd,XUo),e(hd,Wpe),e(Wpe,zUo),e(hd,WUo),e(hd,MX),e(MX,QUo),e(hd,HUo),e(ut,UUo),M(hv,ut,null),e(Go,JUo),e(Go,co),M(oL,co,null),e(co,YUo),e(co,Qpe),e(Qpe,KUo),e(co,ZUo),e(co,Ga),e(Ga,eJo),e(Ga,Hpe),e(Hpe,oJo),e(Ga,rJo),e(Ga,Upe),e(Upe,tJo),e(Ga,aJo),e(Ga,Jpe),e(Jpe,nJo),e(Ga,sJo),e(co,lJo),e(co,ke),e(ke,pv),e(pv,Ype),e(Ype,iJo),e(pv,dJo),e(pv,EX),e(EX,cJo),e(pv,fJo),e(ke,mJo),e(ke,_v),e(_v,Kpe),e(Kpe,gJo),e(_v,hJo),e(_v,CX),e(CX,pJo),e(_v,_Jo),e(ke,uJo),e(ke,uv),e(uv,Zpe),e(Zpe,bJo),e(uv,vJo),e(uv,wX),e(wX,FJo),e(uv,TJo),e(ke,MJo),e(ke,bv),e(bv,e_e),e(e_e,EJo),e(bv,CJo),e(bv,AX),e(AX,wJo),e(bv,AJo),e(ke,yJo),e(ke,vv),e(vv,o_e),e(o_e,LJo),e(vv,xJo),e(vv,yX),e(yX,$Jo),e(vv,kJo),e(ke,SJo),e(ke,Fv),e(Fv,r_e),e(r_e,RJo),e(Fv,PJo),e(Fv,LX),e(LX,BJo),e(Fv,IJo),e(ke,qJo),e(ke,Tv),e(Tv,t_e),e(t_e,NJo),e(Tv,jJo),e(Tv,xX),e(xX,DJo),e(Tv,GJo),e(ke,OJo),e(ke,Mv),e(Mv,a_e),e(a_e,VJo),e(Mv,XJo),e(Mv,$X),e($X,zJo),e(Mv,WJo),e(ke,QJo),e(ke,Ev),e(Ev,n_e),e(n_e,HJo),e(Ev,UJo),e(Ev,kX),e(kX,JJo),e(Ev,YJo),e(co,KJo),e(co,Cv),e(Cv,ZJo),e(Cv,s_e),e(s_e,eYo),e(Cv,oYo),e(Cv,l_e),e(l_e,rYo),e(co,tYo),M(wv,co,null),b(f,Vqe,u),b(f,pd,u),e(pd,Av),e(Av,i_e),M(rL,i_e,null),e(pd,aYo),e(pd,d_e),e(d_e,nYo),b(f,Xqe,u),b(f,Oo,u),M(tL,Oo,null),e(Oo,sYo),e(Oo,_d),e(_d,lYo),e(_d,SX),e(SX,iYo),e(_d,dYo),e(_d,RX),e(RX,cYo),e(_d,fYo),e(Oo,mYo),e(Oo,aL),e(aL,gYo),e(aL,c_e),e(c_e,hYo),e(aL,pYo),e(Oo,_Yo),e(Oo,bt),M(nL,bt,null),e(bt,uYo),e(bt,f_e),e(f_e,bYo),e(bt,vYo),e(bt,ud),e(ud,FYo),e(ud,m_e),e(m_e,TYo),e(ud,MYo),e(ud,PX),e(PX,EYo),e(ud,CYo),e(bt,wYo),M(yv,bt,null),e(Oo,AYo),e(Oo,fo),M(sL,fo,null),e(fo,yYo),e(fo,g_e),e(g_e,LYo),e(fo,xYo),e(fo,Oa),e(Oa,$Yo),e(Oa,h_e),e(h_e,kYo),e(Oa,SYo),e(Oa,p_e),e(p_e,RYo),e(Oa,PYo),e(Oa,__e),e(__e,BYo),e(Oa,IYo),e(fo,qYo),e(fo,Kr),e(Kr,Lv),e(Lv,u_e),e(u_e,NYo),e(Lv,jYo),e(Lv,BX),e(BX,DYo),e(Lv,GYo),e(Kr,OYo),e(Kr,xv),e(xv,b_e),e(b_e,VYo),e(xv,XYo),e(xv,IX),e(IX,zYo),e(xv,WYo),e(Kr,QYo),e(Kr,$v),e($v,v_e),e(v_e,HYo),e($v,UYo),e($v,qX),e(qX,JYo),e($v,YYo),e(Kr,KYo),e(Kr,kv),e(kv,F_e),e(F_e,ZYo),e(kv,eKo),e(kv,NX),e(NX,oKo),e(kv,rKo),e(Kr,tKo),e(Kr,Sv),e(Sv,T_e),e(T_e,aKo),e(Sv,nKo),e(Sv,jX),e(jX,sKo),e(Sv,lKo),e(fo,iKo),e(fo,Rv),e(Rv,dKo),e(Rv,M_e),e(M_e,cKo),e(Rv,fKo),e(Rv,E_e),e(E_e,mKo),e(fo,gKo),M(Pv,fo,null),b(f,zqe,u),b(f,bd,u),e(bd,Bv),e(Bv,C_e),M(lL,C_e,null),e(bd,hKo),e(bd,w_e),e(w_e,pKo),b(f,Wqe,u),b(f,Vo,u),M(iL,Vo,null),e(Vo,_Ko),e(Vo,vd),e(vd,uKo),e(vd,DX),e(DX,bKo),e(vd,vKo),e(vd,GX),e(GX,FKo),e(vd,TKo),e(Vo,MKo),e(Vo,dL),e(dL,EKo),e(dL,A_e),e(A_e,CKo),e(dL,wKo),e(Vo,AKo),e(Vo,vt),M(cL,vt,null),e(vt,yKo),e(vt,y_e),e(y_e,LKo),e(vt,xKo),e(vt,Fd),e(Fd,$Ko),e(Fd,L_e),e(L_e,kKo),e(Fd,SKo),e(Fd,OX),e(OX,RKo),e(Fd,PKo),e(vt,BKo),M(Iv,vt,null),e(Vo,IKo),e(Vo,mo),M(fL,mo,null),e(mo,qKo),e(mo,x_e),e(x_e,NKo),e(mo,jKo),e(mo,Va),e(Va,DKo),e(Va,$_e),e($_e,GKo),e(Va,OKo),e(Va,k_e),e(k_e,VKo),e(Va,XKo),e(Va,S_e),e(S_e,zKo),e(Va,WKo),e(mo,QKo),e(mo,Se),e(Se,qv),e(qv,R_e),e(R_e,HKo),e(qv,UKo),e(qv,VX),e(VX,JKo),e(qv,YKo),e(Se,KKo),e(Se,Nv),e(Nv,P_e),e(P_e,ZKo),e(Nv,eZo),e(Nv,XX),e(XX,oZo),e(Nv,rZo),e(Se,tZo),e(Se,jv),e(jv,B_e),e(B_e,aZo),e(jv,nZo),e(jv,zX),e(zX,sZo),e(jv,lZo),e(Se,iZo),e(Se,Dv),e(Dv,I_e),e(I_e,dZo),e(Dv,cZo),e(Dv,WX),e(WX,fZo),e(Dv,mZo),e(Se,gZo),e(Se,Gv),e(Gv,q_e),e(q_e,hZo),e(Gv,pZo),e(Gv,QX),e(QX,_Zo),e(Gv,uZo),e(Se,bZo),e(Se,Ov),e(Ov,N_e),e(N_e,vZo),e(Ov,FZo),e(Ov,HX),e(HX,TZo),e(Ov,MZo),e(Se,EZo),e(Se,Vv),e(Vv,j_e),e(j_e,CZo),e(Vv,wZo),e(Vv,UX),e(UX,AZo),e(Vv,yZo),e(Se,LZo),e(Se,Xv),e(Xv,D_e),e(D_e,xZo),e(Xv,$Zo),e(Xv,JX),e(JX,kZo),e(Xv,SZo),e(Se,RZo),e(Se,zv),e(zv,G_e),e(G_e,PZo),e(zv,BZo),e(zv,YX),e(YX,IZo),e(zv,qZo),e(mo,NZo),e(mo,Wv),e(Wv,jZo),e(Wv,O_e),e(O_e,DZo),e(Wv,GZo),e(Wv,V_e),e(V_e,OZo),e(mo,VZo),M(Qv,mo,null),b(f,Qqe,u),b(f,Td,u),e(Td,Hv),e(Hv,X_e),M(mL,X_e,null),e(Td,XZo),e(Td,z_e),e(z_e,zZo),b(f,Hqe,u),b(f,Xo,u),M(gL,Xo,null),e(Xo,WZo),e(Xo,Md),e(Md,QZo),e(Md,KX),e(KX,HZo),e(Md,UZo),e(Md,ZX),e(ZX,JZo),e(Md,YZo),e(Xo,KZo),e(Xo,hL),e(hL,ZZo),e(hL,W_e),e(W_e,eer),e(hL,oer),e(Xo,rer),e(Xo,Ft),M(pL,Ft,null),e(Ft,ter),e(Ft,Q_e),e(Q_e,aer),e(Ft,ner),e(Ft,Ed),e(Ed,ser),e(Ed,H_e),e(H_e,ler),e(Ed,ier),e(Ed,ez),e(ez,der),e(Ed,cer),e(Ft,fer),M(Uv,Ft,null),e(Xo,mer),e(Xo,go),M(_L,go,null),e(go,ger),e(go,U_e),e(U_e,her),e(go,per),e(go,Xa),e(Xa,_er),e(Xa,J_e),e(J_e,uer),e(Xa,ber),e(Xa,Y_e),e(Y_e,ver),e(Xa,Fer),e(Xa,K_e),e(K_e,Ter),e(Xa,Mer),e(go,Eer),e(go,uL),e(uL,Jv),e(Jv,Z_e),e(Z_e,Cer),e(Jv,wer),e(Jv,oz),e(oz,Aer),e(Jv,yer),e(uL,Ler),e(uL,Yv),e(Yv,eue),e(eue,xer),e(Yv,$er),e(Yv,rz),e(rz,ker),e(Yv,Ser),e(go,Rer),e(go,Kv),e(Kv,Per),e(Kv,oue),e(oue,Ber),e(Kv,Ier),e(Kv,rue),e(rue,qer),e(go,Ner),M(Zv,go,null),b(f,Uqe,u),b(f,Cd,u),e(Cd,eF),e(eF,tue),M(bL,tue,null),e(Cd,jer),e(Cd,aue),e(aue,Der),b(f,Jqe,u),b(f,zo,u),M(vL,zo,null),e(zo,Ger),e(zo,wd),e(wd,Oer),e(wd,tz),e(tz,Ver),e(wd,Xer),e(wd,az),e(az,zer),e(wd,Wer),e(zo,Qer),e(zo,FL),e(FL,Her),e(FL,nue),e(nue,Uer),e(FL,Jer),e(zo,Yer),e(zo,Tt),M(TL,Tt,null),e(Tt,Ker),e(Tt,sue),e(sue,Zer),e(Tt,eor),e(Tt,Ad),e(Ad,oor),e(Ad,lue),e(lue,ror),e(Ad,tor),e(Ad,nz),e(nz,aor),e(Ad,nor),e(Tt,sor),M(oF,Tt,null),e(zo,lor),e(zo,ho),M(ML,ho,null),e(ho,ior),e(ho,iue),e(iue,dor),e(ho,cor),e(ho,za),e(za,mor),e(za,due),e(due,gor),e(za,hor),e(za,cue),e(cue,por),e(za,_or),e(za,fue),e(fue,uor),e(za,bor),e(ho,vor),e(ho,Zr),e(Zr,rF),e(rF,mue),e(mue,For),e(rF,Tor),e(rF,sz),e(sz,Mor),e(rF,Eor),e(Zr,Cor),e(Zr,tF),e(tF,gue),e(gue,wor),e(tF,Aor),e(tF,lz),e(lz,yor),e(tF,Lor),e(Zr,xor),e(Zr,aF),e(aF,hue),e(hue,$or),e(aF,kor),e(aF,iz),e(iz,Sor),e(aF,Ror),e(Zr,Por),e(Zr,nF),e(nF,pue),e(pue,Bor),e(nF,Ior),e(nF,dz),e(dz,qor),e(nF,Nor),e(Zr,jor),e(Zr,sF),e(sF,_ue),e(_ue,Dor),e(sF,Gor),e(sF,cz),e(cz,Oor),e(sF,Vor),e(ho,Xor),e(ho,lF),e(lF,zor),e(lF,uue),e(uue,Wor),e(lF,Qor),e(lF,bue),e(bue,Hor),e(ho,Uor),M(iF,ho,null),b(f,Yqe,u),b(f,yd,u),e(yd,dF),e(dF,vue),M(EL,vue,null),e(yd,Jor),e(yd,Fue),e(Fue,Yor),b(f,Kqe,u),b(f,Wo,u),M(CL,Wo,null),e(Wo,Kor),e(Wo,Ld),e(Ld,Zor),e(Ld,fz),e(fz,err),e(Ld,orr),e(Ld,mz),e(mz,rrr),e(Ld,trr),e(Wo,arr),e(Wo,wL),e(wL,nrr),e(wL,Tue),e(Tue,srr),e(wL,lrr),e(Wo,irr),e(Wo,Mt),M(AL,Mt,null),e(Mt,drr),e(Mt,Mue),e(Mue,crr),e(Mt,frr),e(Mt,xd),e(xd,mrr),e(xd,Eue),e(Eue,grr),e(xd,hrr),e(xd,gz),e(gz,prr),e(xd,_rr),e(Mt,urr),M(cF,Mt,null),e(Wo,brr),e(Wo,po),M(yL,po,null),e(po,vrr),e(po,Cue),e(Cue,Frr),e(po,Trr),e(po,Wa),e(Wa,Mrr),e(Wa,wue),e(wue,Err),e(Wa,Crr),e(Wa,Aue),e(Aue,wrr),e(Wa,Arr),e(Wa,yue),e(yue,yrr),e(Wa,Lrr),e(po,xrr),e(po,$d),e($d,fF),e(fF,Lue),e(Lue,$rr),e(fF,krr),e(fF,hz),e(hz,Srr),e(fF,Rrr),e($d,Prr),e($d,mF),e(mF,xue),e(xue,Brr),e(mF,Irr),e(mF,pz),e(pz,qrr),e(mF,Nrr),e($d,jrr),e($d,gF),e(gF,$ue),e($ue,Drr),e(gF,Grr),e(gF,_z),e(_z,Orr),e(gF,Vrr),e(po,Xrr),e(po,hF),e(hF,zrr),e(hF,kue),e(kue,Wrr),e(hF,Qrr),e(hF,Sue),e(Sue,Hrr),e(po,Urr),M(pF,po,null),b(f,Zqe,u),b(f,kd,u),e(kd,_F),e(_F,Rue),M(LL,Rue,null),e(kd,Jrr),e(kd,Pue),e(Pue,Yrr),b(f,eNe,u),b(f,Qo,u),M(xL,Qo,null),e(Qo,Krr),e(Qo,Sd),e(Sd,Zrr),e(Sd,uz),e(uz,etr),e(Sd,otr),e(Sd,bz),e(bz,rtr),e(Sd,ttr),e(Qo,atr),e(Qo,$L),e($L,ntr),e($L,Bue),e(Bue,str),e($L,ltr),e(Qo,itr),e(Qo,Et),M(kL,Et,null),e(Et,dtr),e(Et,Iue),e(Iue,ctr),e(Et,ftr),e(Et,Rd),e(Rd,mtr),e(Rd,que),e(que,gtr),e(Rd,htr),e(Rd,vz),e(vz,ptr),e(Rd,_tr),e(Et,utr),M(uF,Et,null),e(Qo,btr),e(Qo,_o),M(SL,_o,null),e(_o,vtr),e(_o,Nue),e(Nue,Ftr),e(_o,Ttr),e(_o,Qa),e(Qa,Mtr),e(Qa,jue),e(jue,Etr),e(Qa,Ctr),e(Qa,Due),e(Due,wtr),e(Qa,Atr),e(Qa,Gue),e(Gue,ytr),e(Qa,Ltr),e(_o,xtr),e(_o,RL),e(RL,bF),e(bF,Oue),e(Oue,$tr),e(bF,ktr),e(bF,Fz),e(Fz,Str),e(bF,Rtr),e(RL,Ptr),e(RL,vF),e(vF,Vue),e(Vue,Btr),e(vF,Itr),e(vF,Tz),e(Tz,qtr),e(vF,Ntr),e(_o,jtr),e(_o,FF),e(FF,Dtr),e(FF,Xue),e(Xue,Gtr),e(FF,Otr),e(FF,zue),e(zue,Vtr),e(_o,Xtr),M(TF,_o,null),b(f,oNe,u),b(f,Pd,u),e(Pd,MF),e(MF,Wue),M(PL,Wue,null),e(Pd,ztr),e(Pd,Que),e(Que,Wtr),b(f,rNe,u),b(f,Ho,u),M(BL,Ho,null),e(Ho,Qtr),e(Ho,Bd),e(Bd,Htr),e(Bd,Mz),e(Mz,Utr),e(Bd,Jtr),e(Bd,Ez),e(Ez,Ytr),e(Bd,Ktr),e(Ho,Ztr),e(Ho,IL),e(IL,ear),e(IL,Hue),e(Hue,oar),e(IL,rar),e(Ho,tar),e(Ho,Ct),M(qL,Ct,null),e(Ct,aar),e(Ct,Uue),e(Uue,nar),e(Ct,sar),e(Ct,Id),e(Id,lar),e(Id,Jue),e(Jue,iar),e(Id,dar),e(Id,Cz),e(Cz,car),e(Id,far),e(Ct,mar),M(EF,Ct,null),e(Ho,gar),e(Ho,uo),M(NL,uo,null),e(uo,har),e(uo,Yue),e(Yue,par),e(uo,_ar),e(uo,Ha),e(Ha,uar),e(Ha,Kue),e(Kue,bar),e(Ha,Far),e(Ha,Zue),e(Zue,Tar),e(Ha,Mar),e(Ha,e2e),e(e2e,Ear),e(Ha,Car),e(uo,war),e(uo,o2e),e(o2e,CF),e(CF,r2e),e(r2e,Aar),e(CF,yar),e(CF,wz),e(wz,Lar),e(CF,xar),e(uo,$ar),e(uo,wF),e(wF,kar),e(wF,t2e),e(t2e,Sar),e(wF,Rar),e(wF,a2e),e(a2e,Par),e(uo,Bar),M(AF,uo,null),b(f,tNe,u),b(f,qd,u),e(qd,yF),e(yF,n2e),M(jL,n2e,null),e(qd,Iar),e(qd,s2e),e(s2e,qar),b(f,aNe,u),b(f,Uo,u),M(DL,Uo,null),e(Uo,Nar),e(Uo,Nd),e(Nd,jar),e(Nd,Az),e(Az,Dar),e(Nd,Gar),e(Nd,yz),e(yz,Oar),e(Nd,Var),e(Uo,Xar),e(Uo,GL),e(GL,zar),e(GL,l2e),e(l2e,War),e(GL,Qar),e(Uo,Har),e(Uo,wt),M(OL,wt,null),e(wt,Uar),e(wt,i2e),e(i2e,Jar),e(wt,Yar),e(wt,jd),e(jd,Kar),e(jd,d2e),e(d2e,Zar),e(jd,enr),e(jd,Lz),e(Lz,onr),e(jd,rnr),e(wt,tnr),M(LF,wt,null),e(Uo,anr),e(Uo,bo),M(VL,bo,null),e(bo,nnr),e(bo,c2e),e(c2e,snr),e(bo,lnr),e(bo,Ua),e(Ua,inr),e(Ua,f2e),e(f2e,dnr),e(Ua,cnr),e(Ua,m2e),e(m2e,fnr),e(Ua,mnr),e(Ua,g2e),e(g2e,gnr),e(Ua,hnr),e(bo,pnr),e(bo,Ja),e(Ja,xF),e(xF,h2e),e(h2e,_nr),e(xF,unr),e(xF,xz),e(xz,bnr),e(xF,vnr),e(Ja,Fnr),e(Ja,$F),e($F,p2e),e(p2e,Tnr),e($F,Mnr),e($F,$z),e($z,Enr),e($F,Cnr),e(Ja,wnr),e(Ja,kF),e(kF,_2e),e(_2e,Anr),e(kF,ynr),e(kF,kz),e(kz,Lnr),e(kF,xnr),e(Ja,$nr),e(Ja,SF),e(SF,u2e),e(u2e,knr),e(SF,Snr),e(SF,Sz),e(Sz,Rnr),e(SF,Pnr),e(bo,Bnr),e(bo,RF),e(RF,Inr),e(RF,b2e),e(b2e,qnr),e(RF,Nnr),e(RF,v2e),e(v2e,jnr),e(bo,Dnr),M(PF,bo,null),b(f,nNe,u),b(f,Dd,u),e(Dd,BF),e(BF,F2e),M(XL,F2e,null),e(Dd,Gnr),e(Dd,T2e),e(T2e,Onr),b(f,sNe,u),b(f,Jo,u),M(zL,Jo,null),e(Jo,Vnr),e(Jo,Gd),e(Gd,Xnr),e(Gd,Rz),e(Rz,znr),e(Gd,Wnr),e(Gd,Pz),e(Pz,Qnr),e(Gd,Hnr),e(Jo,Unr),e(Jo,WL),e(WL,Jnr),e(WL,M2e),e(M2e,Ynr),e(WL,Knr),e(Jo,Znr),e(Jo,At),M(QL,At,null),e(At,esr),e(At,E2e),e(E2e,osr),e(At,rsr),e(At,Od),e(Od,tsr),e(Od,C2e),e(C2e,asr),e(Od,nsr),e(Od,Bz),e(Bz,ssr),e(Od,lsr),e(At,isr),M(IF,At,null),e(Jo,dsr),e(Jo,vo),M(HL,vo,null),e(vo,csr),e(vo,w2e),e(w2e,fsr),e(vo,msr),e(vo,Ya),e(Ya,gsr),e(Ya,A2e),e(A2e,hsr),e(Ya,psr),e(Ya,y2e),e(y2e,_sr),e(Ya,usr),e(Ya,L2e),e(L2e,bsr),e(Ya,vsr),e(vo,Fsr),e(vo,x2e),e(x2e,qF),e(qF,$2e),e($2e,Tsr),e(qF,Msr),e(qF,Iz),e(Iz,Esr),e(qF,Csr),e(vo,wsr),e(vo,NF),e(NF,Asr),e(NF,k2e),e(k2e,ysr),e(NF,Lsr),e(NF,S2e),e(S2e,xsr),e(vo,$sr),M(jF,vo,null),b(f,lNe,u),b(f,Vd,u),e(Vd,DF),e(DF,R2e),M(UL,R2e,null),e(Vd,ksr),e(Vd,P2e),e(P2e,Ssr),b(f,iNe,u),b(f,Yo,u),M(JL,Yo,null),e(Yo,Rsr),e(Yo,Xd),e(Xd,Psr),e(Xd,qz),e(qz,Bsr),e(Xd,Isr),e(Xd,Nz),e(Nz,qsr),e(Xd,Nsr),e(Yo,jsr),e(Yo,YL),e(YL,Dsr),e(YL,B2e),e(B2e,Gsr),e(YL,Osr),e(Yo,Vsr),e(Yo,yt),M(KL,yt,null),e(yt,Xsr),e(yt,I2e),e(I2e,zsr),e(yt,Wsr),e(yt,zd),e(zd,Qsr),e(zd,q2e),e(q2e,Hsr),e(zd,Usr),e(zd,jz),e(jz,Jsr),e(zd,Ysr),e(yt,Ksr),M(GF,yt,null),e(Yo,Zsr),e(Yo,wr),M(ZL,wr,null),e(wr,elr),e(wr,N2e),e(N2e,olr),e(wr,rlr),e(wr,Ka),e(Ka,tlr),e(Ka,j2e),e(j2e,alr),e(Ka,nlr),e(Ka,D2e),e(D2e,slr),e(Ka,llr),e(Ka,G2e),e(G2e,ilr),e(Ka,dlr),e(wr,clr),e(wr,N),e(N,OF),e(OF,O2e),e(O2e,flr),e(OF,mlr),e(OF,Dz),e(Dz,glr),e(OF,hlr),e(N,plr),e(N,VF),e(VF,V2e),e(V2e,_lr),e(VF,ulr),e(VF,Gz),e(Gz,blr),e(VF,vlr),e(N,Flr),e(N,XF),e(XF,X2e),e(X2e,Tlr),e(XF,Mlr),e(XF,Oz),e(Oz,Elr),e(XF,Clr),e(N,wlr),e(N,zF),e(zF,z2e),e(z2e,Alr),e(zF,ylr),e(zF,Vz),e(Vz,Llr),e(zF,xlr),e(N,$lr),e(N,WF),e(WF,W2e),e(W2e,klr),e(WF,Slr),e(WF,Xz),e(Xz,Rlr),e(WF,Plr),e(N,Blr),e(N,QF),e(QF,Q2e),e(Q2e,Ilr),e(QF,qlr),e(QF,zz),e(zz,Nlr),e(QF,jlr),e(N,Dlr),e(N,HF),e(HF,H2e),e(H2e,Glr),e(HF,Olr),e(HF,Wz),e(Wz,Vlr),e(HF,Xlr),e(N,zlr),e(N,UF),e(UF,U2e),e(U2e,Wlr),e(UF,Qlr),e(UF,Qz),e(Qz,Hlr),e(UF,Ulr),e(N,Jlr),e(N,JF),e(JF,J2e),e(J2e,Ylr),e(JF,Klr),e(JF,Hz),e(Hz,Zlr),e(JF,eir),e(N,oir),e(N,YF),e(YF,Y2e),e(Y2e,rir),e(YF,tir),e(YF,Uz),e(Uz,air),e(YF,nir),e(N,sir),e(N,KF),e(KF,K2e),e(K2e,lir),e(KF,iir),e(KF,Jz),e(Jz,dir),e(KF,cir),e(N,fir),e(N,ZF),e(ZF,Z2e),e(Z2e,mir),e(ZF,gir),e(ZF,Yz),e(Yz,hir),e(ZF,pir),e(N,_ir),e(N,eT),e(eT,e1e),e(e1e,uir),e(eT,bir),e(eT,Kz),e(Kz,vir),e(eT,Fir),e(N,Tir),e(N,oT),e(oT,o1e),e(o1e,Mir),e(oT,Eir),e(oT,Zz),e(Zz,Cir),e(oT,wir),e(N,Air),e(N,rT),e(rT,r1e),e(r1e,yir),e(rT,Lir),e(rT,eW),e(eW,xir),e(rT,$ir),e(N,kir),e(N,tT),e(tT,t1e),e(t1e,Sir),e(tT,Rir),e(tT,oW),e(oW,Pir),e(tT,Bir),e(N,Iir),e(N,aT),e(aT,a1e),e(a1e,qir),e(aT,Nir),e(aT,rW),e(rW,jir),e(aT,Dir),e(N,Gir),e(N,Ns),e(Ns,n1e),e(n1e,Oir),e(Ns,Vir),e(Ns,tW),e(tW,Xir),e(Ns,zir),e(Ns,aW),e(aW,Wir),e(Ns,Qir),e(N,Hir),e(N,nT),e(nT,s1e),e(s1e,Uir),e(nT,Jir),e(nT,nW),e(nW,Yir),e(nT,Kir),e(N,Zir),e(N,sT),e(sT,l1e),e(l1e,edr),e(sT,odr),e(sT,sW),e(sW,rdr),e(sT,tdr),e(N,adr),e(N,lT),e(lT,i1e),e(i1e,ndr),e(lT,sdr),e(lT,lW),e(lW,ldr),e(lT,idr),e(N,ddr),e(N,iT),e(iT,d1e),e(d1e,cdr),e(iT,fdr),e(iT,iW),e(iW,mdr),e(iT,gdr),e(N,hdr),e(N,dT),e(dT,c1e),e(c1e,pdr),e(dT,_dr),e(dT,dW),e(dW,udr),e(dT,bdr),e(N,vdr),e(N,cT),e(cT,f1e),e(f1e,Fdr),e(cT,Tdr),e(cT,cW),e(cW,Mdr),e(cT,Edr),e(N,Cdr),e(N,fT),e(fT,m1e),e(m1e,wdr),e(fT,Adr),e(fT,fW),e(fW,ydr),e(fT,Ldr),e(N,xdr),e(N,mT),e(mT,g1e),e(g1e,$dr),e(mT,kdr),e(mT,mW),e(mW,Sdr),e(mT,Rdr),e(N,Pdr),e(N,gT),e(gT,h1e),e(h1e,Bdr),e(gT,Idr),e(gT,gW),e(gW,qdr),e(gT,Ndr),e(N,jdr),e(N,hT),e(hT,p1e),e(p1e,Ddr),e(hT,Gdr),e(hT,hW),e(hW,Odr),e(hT,Vdr),e(N,Xdr),e(N,pT),e(pT,_1e),e(_1e,zdr),e(pT,Wdr),e(pT,pW),e(pW,Qdr),e(pT,Hdr),e(N,Udr),e(N,_T),e(_T,u1e),e(u1e,Jdr),e(_T,Ydr),e(_T,_W),e(_W,Kdr),e(_T,Zdr),e(N,ecr),e(N,uT),e(uT,b1e),e(b1e,ocr),e(uT,rcr),e(uT,uW),e(uW,tcr),e(uT,acr),e(N,ncr),e(N,bT),e(bT,v1e),e(v1e,scr),e(bT,lcr),e(bT,bW),e(bW,icr),e(bT,dcr),e(N,ccr),e(N,vT),e(vT,F1e),e(F1e,fcr),e(vT,mcr),e(vT,vW),e(vW,gcr),e(vT,hcr),e(N,pcr),e(N,FT),e(FT,T1e),e(T1e,_cr),e(FT,ucr),e(FT,FW),e(FW,bcr),e(FT,vcr),e(N,Fcr),e(N,TT),e(TT,M1e),e(M1e,Tcr),e(TT,Mcr),e(TT,TW),e(TW,Ecr),e(TT,Ccr),e(N,wcr),e(N,MT),e(MT,E1e),e(E1e,Acr),e(MT,ycr),e(MT,MW),e(MW,Lcr),e(MT,xcr),e(N,$cr),e(N,ET),e(ET,C1e),e(C1e,kcr),e(ET,Scr),e(ET,EW),e(EW,Rcr),e(ET,Pcr),e(N,Bcr),e(N,CT),e(CT,w1e),e(w1e,Icr),e(CT,qcr),e(CT,CW),e(CW,Ncr),e(CT,jcr),e(N,Dcr),e(N,wT),e(wT,A1e),e(A1e,Gcr),e(wT,Ocr),e(wT,wW),e(wW,Vcr),e(wT,Xcr),e(N,zcr),e(N,AT),e(AT,y1e),e(y1e,Wcr),e(AT,Qcr),e(AT,AW),e(AW,Hcr),e(AT,Ucr),e(N,Jcr),e(N,yT),e(yT,L1e),e(L1e,Ycr),e(yT,Kcr),e(yT,yW),e(yW,Zcr),e(yT,efr),e(N,ofr),e(N,LT),e(LT,x1e),e(x1e,rfr),e(LT,tfr),e(LT,LW),e(LW,afr),e(LT,nfr),e(N,sfr),e(N,xT),e(xT,$1e),e($1e,lfr),e(xT,ifr),e(xT,xW),e(xW,dfr),e(xT,cfr),e(N,ffr),e(N,$T),e($T,k1e),e(k1e,mfr),e($T,gfr),e($T,$W),e($W,hfr),e($T,pfr),e(N,_fr),e(N,kT),e(kT,S1e),e(S1e,ufr),e(kT,bfr),e(kT,kW),e(kW,vfr),e(kT,Ffr),e(N,Tfr),e(N,ST),e(ST,R1e),e(R1e,Mfr),e(ST,Efr),e(ST,SW),e(SW,Cfr),e(ST,wfr),e(wr,Afr),M(RT,wr,null),b(f,dNe,u),b(f,Wd,u),e(Wd,PT),e(PT,P1e),M(e8,P1e,null),e(Wd,yfr),e(Wd,B1e),e(B1e,Lfr),b(f,cNe,u),b(f,Ko,u),M(o8,Ko,null),e(Ko,xfr),e(Ko,Qd),e(Qd,$fr),e(Qd,RW),e(RW,kfr),e(Qd,Sfr),e(Qd,PW),e(PW,Rfr),e(Qd,Pfr),e(Ko,Bfr),e(Ko,r8),e(r8,Ifr),e(r8,I1e),e(I1e,qfr),e(r8,Nfr),e(Ko,jfr),e(Ko,Lt),M(t8,Lt,null),e(Lt,Dfr),e(Lt,q1e),e(q1e,Gfr),e(Lt,Ofr),e(Lt,Hd),e(Hd,Vfr),e(Hd,N1e),e(N1e,Xfr),e(Hd,zfr),e(Hd,BW),e(BW,Wfr),e(Hd,Qfr),e(Lt,Hfr),M(BT,Lt,null),e(Ko,Ufr),e(Ko,Ar),M(a8,Ar,null),e(Ar,Jfr),e(Ar,j1e),e(j1e,Yfr),e(Ar,Kfr),e(Ar,Za),e(Za,Zfr),e(Za,D1e),e(D1e,emr),e(Za,omr),e(Za,G1e),e(G1e,rmr),e(Za,tmr),e(Za,O1e),e(O1e,amr),e(Za,nmr),e(Ar,smr),e(Ar,se),e(se,IT),e(IT,V1e),e(V1e,lmr),e(IT,imr),e(IT,IW),e(IW,dmr),e(IT,cmr),e(se,fmr),e(se,qT),e(qT,X1e),e(X1e,mmr),e(qT,gmr),e(qT,qW),e(qW,hmr),e(qT,pmr),e(se,_mr),e(se,NT),e(NT,z1e),e(z1e,umr),e(NT,bmr),e(NT,NW),e(NW,vmr),e(NT,Fmr),e(se,Tmr),e(se,jT),e(jT,W1e),e(W1e,Mmr),e(jT,Emr),e(jT,jW),e(jW,Cmr),e(jT,wmr),e(se,Amr),e(se,DT),e(DT,Q1e),e(Q1e,ymr),e(DT,Lmr),e(DT,DW),e(DW,xmr),e(DT,$mr),e(se,kmr),e(se,GT),e(GT,H1e),e(H1e,Smr),e(GT,Rmr),e(GT,GW),e(GW,Pmr),e(GT,Bmr),e(se,Imr),e(se,OT),e(OT,U1e),e(U1e,qmr),e(OT,Nmr),e(OT,OW),e(OW,jmr),e(OT,Dmr),e(se,Gmr),e(se,VT),e(VT,J1e),e(J1e,Omr),e(VT,Vmr),e(VT,VW),e(VW,Xmr),e(VT,zmr),e(se,Wmr),e(se,XT),e(XT,Y1e),e(Y1e,Qmr),e(XT,Hmr),e(XT,XW),e(XW,Umr),e(XT,Jmr),e(se,Ymr),e(se,zT),e(zT,K1e),e(K1e,Kmr),e(zT,Zmr),e(zT,zW),e(zW,egr),e(zT,ogr),e(se,rgr),e(se,WT),e(WT,Z1e),e(Z1e,tgr),e(WT,agr),e(WT,WW),e(WW,ngr),e(WT,sgr),e(se,lgr),e(se,QT),e(QT,ebe),e(ebe,igr),e(QT,dgr),e(QT,QW),e(QW,cgr),e(QT,fgr),e(se,mgr),e(se,HT),e(HT,obe),e(obe,ggr),e(HT,hgr),e(HT,HW),e(HW,pgr),e(HT,_gr),e(se,ugr),e(se,UT),e(UT,rbe),e(rbe,bgr),e(UT,vgr),e(UT,UW),e(UW,Fgr),e(UT,Tgr),e(se,Mgr),e(se,JT),e(JT,tbe),e(tbe,Egr),e(JT,Cgr),e(JT,JW),e(JW,wgr),e(JT,Agr),e(se,ygr),e(se,YT),e(YT,abe),e(abe,Lgr),e(YT,xgr),e(YT,YW),e(YW,$gr),e(YT,kgr),e(se,Sgr),e(se,KT),e(KT,nbe),e(nbe,Rgr),e(KT,Pgr),e(KT,KW),e(KW,Bgr),e(KT,Igr),e(se,qgr),e(se,ZT),e(ZT,sbe),e(sbe,Ngr),e(ZT,jgr),e(ZT,ZW),e(ZW,Dgr),e(ZT,Ggr),e(se,Ogr),e(se,e7),e(e7,lbe),e(lbe,Vgr),e(e7,Xgr),e(e7,eQ),e(eQ,zgr),e(e7,Wgr),e(se,Qgr),e(se,o7),e(o7,ibe),e(ibe,Hgr),e(o7,Ugr),e(o7,oQ),e(oQ,Jgr),e(o7,Ygr),e(se,Kgr),e(se,r7),e(r7,dbe),e(dbe,Zgr),e(r7,ehr),e(r7,rQ),e(rQ,ohr),e(r7,rhr),e(se,thr),e(se,t7),e(t7,cbe),e(cbe,ahr),e(t7,nhr),e(t7,tQ),e(tQ,shr),e(t7,lhr),e(se,ihr),e(se,a7),e(a7,fbe),e(fbe,dhr),e(a7,chr),e(a7,aQ),e(aQ,fhr),e(a7,mhr),e(Ar,ghr),M(n7,Ar,null),b(f,fNe,u),b(f,Ud,u),e(Ud,s7),e(s7,mbe),M(n8,mbe,null),e(Ud,hhr),e(Ud,gbe),e(gbe,phr),b(f,mNe,u),b(f,Zo,u),M(s8,Zo,null),e(Zo,_hr),e(Zo,Jd),e(Jd,uhr),e(Jd,nQ),e(nQ,bhr),e(Jd,vhr),e(Jd,sQ),e(sQ,Fhr),e(Jd,Thr),e(Zo,Mhr),e(Zo,l8),e(l8,Ehr),e(l8,hbe),e(hbe,Chr),e(l8,whr),e(Zo,Ahr),e(Zo,xt),M(i8,xt,null),e(xt,yhr),e(xt,pbe),e(pbe,Lhr),e(xt,xhr),e(xt,Yd),e(Yd,$hr),e(Yd,_be),e(_be,khr),e(Yd,Shr),e(Yd,lQ),e(lQ,Rhr),e(Yd,Phr),e(xt,Bhr),M(l7,xt,null),e(Zo,Ihr),e(Zo,yr),M(d8,yr,null),e(yr,qhr),e(yr,ube),e(ube,Nhr),e(yr,jhr),e(yr,en),e(en,Dhr),e(en,bbe),e(bbe,Ghr),e(en,Ohr),e(en,vbe),e(vbe,Vhr),e(en,Xhr),e(en,Fbe),e(Fbe,zhr),e(en,Whr),e(yr,Qhr),e(yr,Me),e(Me,i7),e(i7,Tbe),e(Tbe,Hhr),e(i7,Uhr),e(i7,iQ),e(iQ,Jhr),e(i7,Yhr),e(Me,Khr),e(Me,d7),e(d7,Mbe),e(Mbe,Zhr),e(d7,epr),e(d7,dQ),e(dQ,opr),e(d7,rpr),e(Me,tpr),e(Me,c7),e(c7,Ebe),e(Ebe,apr),e(c7,npr),e(c7,cQ),e(cQ,spr),e(c7,lpr),e(Me,ipr),e(Me,f7),e(f7,Cbe),e(Cbe,dpr),e(f7,cpr),e(f7,fQ),e(fQ,fpr),e(f7,mpr),e(Me,gpr),e(Me,m7),e(m7,wbe),e(wbe,hpr),e(m7,ppr),e(m7,mQ),e(mQ,_pr),e(m7,upr),e(Me,bpr),e(Me,g7),e(g7,Abe),e(Abe,vpr),e(g7,Fpr),e(g7,gQ),e(gQ,Tpr),e(g7,Mpr),e(Me,Epr),e(Me,h7),e(h7,ybe),e(ybe,Cpr),e(h7,wpr),e(h7,hQ),e(hQ,Apr),e(h7,ypr),e(Me,Lpr),e(Me,p7),e(p7,Lbe),e(Lbe,xpr),e(p7,$pr),e(p7,pQ),e(pQ,kpr),e(p7,Spr),e(Me,Rpr),e(Me,_7),e(_7,xbe),e(xbe,Ppr),e(_7,Bpr),e(_7,_Q),e(_Q,Ipr),e(_7,qpr),e(Me,Npr),e(Me,u7),e(u7,$be),e($be,jpr),e(u7,Dpr),e(u7,uQ),e(uQ,Gpr),e(u7,Opr),e(Me,Vpr),e(Me,b7),e(b7,kbe),e(kbe,Xpr),e(b7,zpr),e(b7,bQ),e(bQ,Wpr),e(b7,Qpr),e(Me,Hpr),e(Me,v7),e(v7,Sbe),e(Sbe,Upr),e(v7,Jpr),e(v7,vQ),e(vQ,Ypr),e(v7,Kpr),e(yr,Zpr),M(F7,yr,null),b(f,gNe,u),b(f,Kd,u),e(Kd,T7),e(T7,Rbe),M(c8,Rbe,null),e(Kd,e_r),e(Kd,Pbe),e(Pbe,o_r),b(f,hNe,u),b(f,er,u),M(f8,er,null),e(er,r_r),e(er,Zd),e(Zd,t_r),e(Zd,FQ),e(FQ,a_r),e(Zd,n_r),e(Zd,TQ),e(TQ,s_r),e(Zd,l_r),e(er,i_r),e(er,m8),e(m8,d_r),e(m8,Bbe),e(Bbe,c_r),e(m8,f_r),e(er,m_r),e(er,$t),M(g8,$t,null),e($t,g_r),e($t,Ibe),e(Ibe,h_r),e($t,p_r),e($t,ec),e(ec,__r),e(ec,qbe),e(qbe,u_r),e(ec,b_r),e(ec,MQ),e(MQ,v_r),e(ec,F_r),e($t,T_r),M(M7,$t,null),e(er,M_r),e(er,Lr),M(h8,Lr,null),e(Lr,E_r),e(Lr,Nbe),e(Nbe,C_r),e(Lr,w_r),e(Lr,on),e(on,A_r),e(on,jbe),e(jbe,y_r),e(on,L_r),e(on,Dbe),e(Dbe,x_r),e(on,$_r),e(on,Gbe),e(Gbe,k_r),e(on,S_r),e(Lr,R_r),e(Lr,rn),e(rn,E7),e(E7,Obe),e(Obe,P_r),e(E7,B_r),e(E7,EQ),e(EQ,I_r),e(E7,q_r),e(rn,N_r),e(rn,C7),e(C7,Vbe),e(Vbe,j_r),e(C7,D_r),e(C7,CQ),e(CQ,G_r),e(C7,O_r),e(rn,V_r),e(rn,w7),e(w7,Xbe),e(Xbe,X_r),e(w7,z_r),e(w7,wQ),e(wQ,W_r),e(w7,Q_r),e(rn,H_r),e(rn,A7),e(A7,zbe),e(zbe,U_r),e(A7,J_r),e(A7,AQ),e(AQ,Y_r),e(A7,K_r),e(Lr,Z_r),M(y7,Lr,null),b(f,pNe,u),b(f,oc,u),e(oc,L7),e(L7,Wbe),M(p8,Wbe,null),e(oc,eur),e(oc,Qbe),e(Qbe,our),b(f,_Ne,u),b(f,or,u),M(_8,or,null),e(or,rur),e(or,rc),e(rc,tur),e(rc,yQ),e(yQ,aur),e(rc,nur),e(rc,LQ),e(LQ,sur),e(rc,lur),e(or,iur),e(or,u8),e(u8,dur),e(u8,Hbe),e(Hbe,cur),e(u8,fur),e(or,mur),e(or,kt),M(b8,kt,null),e(kt,gur),e(kt,Ube),e(Ube,hur),e(kt,pur),e(kt,tc),e(tc,_ur),e(tc,Jbe),e(Jbe,uur),e(tc,bur),e(tc,xQ),e(xQ,vur),e(tc,Fur),e(kt,Tur),M(x7,kt,null),e(or,Mur),e(or,xr),M(v8,xr,null),e(xr,Eur),e(xr,Ybe),e(Ybe,Cur),e(xr,wur),e(xr,tn),e(tn,Aur),e(tn,Kbe),e(Kbe,yur),e(tn,Lur),e(tn,Zbe),e(Zbe,xur),e(tn,$ur),e(tn,e4e),e(e4e,kur),e(tn,Sur),e(xr,Rur),e(xr,ie),e(ie,$7),e($7,o4e),e(o4e,Pur),e($7,Bur),e($7,$Q),e($Q,Iur),e($7,qur),e(ie,Nur),e(ie,k7),e(k7,r4e),e(r4e,jur),e(k7,Dur),e(k7,kQ),e(kQ,Gur),e(k7,Our),e(ie,Vur),e(ie,S7),e(S7,t4e),e(t4e,Xur),e(S7,zur),e(S7,SQ),e(SQ,Wur),e(S7,Qur),e(ie,Hur),e(ie,R7),e(R7,a4e),e(a4e,Uur),e(R7,Jur),e(R7,RQ),e(RQ,Yur),e(R7,Kur),e(ie,Zur),e(ie,P7),e(P7,n4e),e(n4e,e2r),e(P7,o2r),e(P7,PQ),e(PQ,r2r),e(P7,t2r),e(ie,a2r),e(ie,B7),e(B7,s4e),e(s4e,n2r),e(B7,s2r),e(B7,BQ),e(BQ,l2r),e(B7,i2r),e(ie,d2r),e(ie,I7),e(I7,l4e),e(l4e,c2r),e(I7,f2r),e(I7,IQ),e(IQ,m2r),e(I7,g2r),e(ie,h2r),e(ie,q7),e(q7,i4e),e(i4e,p2r),e(q7,_2r),e(q7,qQ),e(qQ,u2r),e(q7,b2r),e(ie,v2r),e(ie,N7),e(N7,d4e),e(d4e,F2r),e(N7,T2r),e(N7,NQ),e(NQ,M2r),e(N7,E2r),e(ie,C2r),e(ie,j7),e(j7,c4e),e(c4e,w2r),e(j7,A2r),e(j7,jQ),e(jQ,y2r),e(j7,L2r),e(ie,x2r),e(ie,D7),e(D7,f4e),e(f4e,$2r),e(D7,k2r),e(D7,DQ),e(DQ,S2r),e(D7,R2r),e(ie,P2r),e(ie,G7),e(G7,m4e),e(m4e,B2r),e(G7,I2r),e(G7,GQ),e(GQ,q2r),e(G7,N2r),e(ie,j2r),e(ie,O7),e(O7,g4e),e(g4e,D2r),e(O7,G2r),e(O7,OQ),e(OQ,O2r),e(O7,V2r),e(ie,X2r),e(ie,V7),e(V7,h4e),e(h4e,z2r),e(V7,W2r),e(V7,VQ),e(VQ,Q2r),e(V7,H2r),e(ie,U2r),e(ie,X7),e(X7,p4e),e(p4e,J2r),e(X7,Y2r),e(X7,XQ),e(XQ,K2r),e(X7,Z2r),e(ie,e1r),e(ie,z7),e(z7,_4e),e(_4e,o1r),e(z7,r1r),e(z7,zQ),e(zQ,t1r),e(z7,a1r),e(ie,n1r),e(ie,W7),e(W7,u4e),e(u4e,s1r),e(W7,l1r),e(W7,WQ),e(WQ,i1r),e(W7,d1r),e(ie,c1r),e(ie,Q7),e(Q7,b4e),e(b4e,f1r),e(Q7,m1r),e(Q7,QQ),e(QQ,g1r),e(Q7,h1r),e(ie,p1r),e(ie,H7),e(H7,v4e),e(v4e,_1r),e(H7,u1r),e(H7,HQ),e(HQ,b1r),e(H7,v1r),e(ie,F1r),e(ie,U7),e(U7,F4e),e(F4e,T1r),e(U7,M1r),e(U7,UQ),e(UQ,E1r),e(U7,C1r),e(xr,w1r),M(J7,xr,null),b(f,uNe,u),b(f,ac,u),e(ac,Y7),e(Y7,T4e),M(F8,T4e,null),e(ac,A1r),e(ac,M4e),e(M4e,y1r),b(f,bNe,u),b(f,rr,u),M(T8,rr,null),e(rr,L1r),e(rr,nc),e(nc,x1r),e(nc,JQ),e(JQ,$1r),e(nc,k1r),e(nc,YQ),e(YQ,S1r),e(nc,R1r),e(rr,P1r),e(rr,M8),e(M8,B1r),e(M8,E4e),e(E4e,I1r),e(M8,q1r),e(rr,N1r),e(rr,St),M(E8,St,null),e(St,j1r),e(St,C4e),e(C4e,D1r),e(St,G1r),e(St,sc),e(sc,O1r),e(sc,w4e),e(w4e,V1r),e(sc,X1r),e(sc,KQ),e(KQ,z1r),e(sc,W1r),e(St,Q1r),M(K7,St,null),e(rr,H1r),e(rr,$r),M(C8,$r,null),e($r,U1r),e($r,A4e),e(A4e,J1r),e($r,Y1r),e($r,an),e(an,K1r),e(an,y4e),e(y4e,Z1r),e(an,ebr),e(an,L4e),e(L4e,obr),e(an,rbr),e(an,x4e),e(x4e,tbr),e(an,abr),e($r,nbr),e($r,ye),e(ye,Z7),e(Z7,$4e),e($4e,sbr),e(Z7,lbr),e(Z7,ZQ),e(ZQ,ibr),e(Z7,dbr),e(ye,cbr),e(ye,eM),e(eM,k4e),e(k4e,fbr),e(eM,mbr),e(eM,eH),e(eH,gbr),e(eM,hbr),e(ye,pbr),e(ye,oM),e(oM,S4e),e(S4e,_br),e(oM,ubr),e(oM,oH),e(oH,bbr),e(oM,vbr),e(ye,Fbr),e(ye,rM),e(rM,R4e),e(R4e,Tbr),e(rM,Mbr),e(rM,rH),e(rH,Ebr),e(rM,Cbr),e(ye,wbr),e(ye,tM),e(tM,P4e),e(P4e,Abr),e(tM,ybr),e(tM,tH),e(tH,Lbr),e(tM,xbr),e(ye,$br),e(ye,aM),e(aM,B4e),e(B4e,kbr),e(aM,Sbr),e(aM,aH),e(aH,Rbr),e(aM,Pbr),e(ye,Bbr),e(ye,nM),e(nM,I4e),e(I4e,Ibr),e(nM,qbr),e(nM,nH),e(nH,Nbr),e(nM,jbr),e(ye,Dbr),e(ye,sM),e(sM,q4e),e(q4e,Gbr),e(sM,Obr),e(sM,sH),e(sH,Vbr),e(sM,Xbr),e(ye,zbr),e(ye,lM),e(lM,N4e),e(N4e,Wbr),e(lM,Qbr),e(lM,lH),e(lH,Hbr),e(lM,Ubr),e(ye,Jbr),e(ye,iM),e(iM,j4e),e(j4e,Ybr),e(iM,Kbr),e(iM,iH),e(iH,Zbr),e(iM,e4r),e($r,o4r),M(dM,$r,null),b(f,vNe,u),b(f,lc,u),e(lc,cM),e(cM,D4e),M(w8,D4e,null),e(lc,r4r),e(lc,G4e),e(G4e,t4r),b(f,FNe,u),b(f,tr,u),M(A8,tr,null),e(tr,a4r),e(tr,ic),e(ic,n4r),e(ic,dH),e(dH,s4r),e(ic,l4r),e(ic,cH),e(cH,i4r),e(ic,d4r),e(tr,c4r),e(tr,y8),e(y8,f4r),e(y8,O4e),e(O4e,m4r),e(y8,g4r),e(tr,h4r),e(tr,Rt),M(L8,Rt,null),e(Rt,p4r),e(Rt,V4e),e(V4e,_4r),e(Rt,u4r),e(Rt,dc),e(dc,b4r),e(dc,X4e),e(X4e,v4r),e(dc,F4r),e(dc,fH),e(fH,T4r),e(dc,M4r),e(Rt,E4r),M(fM,Rt,null),e(tr,C4r),e(tr,kr),M(x8,kr,null),e(kr,w4r),e(kr,z4e),e(z4e,A4r),e(kr,y4r),e(kr,nn),e(nn,L4r),e(nn,W4e),e(W4e,x4r),e(nn,$4r),e(nn,Q4e),e(Q4e,k4r),e(nn,S4r),e(nn,H4e),e(H4e,R4r),e(nn,P4r),e(kr,B4r),e(kr,ee),e(ee,mM),e(mM,U4e),e(U4e,I4r),e(mM,q4r),e(mM,mH),e(mH,N4r),e(mM,j4r),e(ee,D4r),e(ee,gM),e(gM,J4e),e(J4e,G4r),e(gM,O4r),e(gM,gH),e(gH,V4r),e(gM,X4r),e(ee,z4r),e(ee,hM),e(hM,Y4e),e(Y4e,W4r),e(hM,Q4r),e(hM,hH),e(hH,H4r),e(hM,U4r),e(ee,J4r),e(ee,pM),e(pM,K4e),e(K4e,Y4r),e(pM,K4r),e(pM,pH),e(pH,Z4r),e(pM,e5r),e(ee,o5r),e(ee,_M),e(_M,Z4e),e(Z4e,r5r),e(_M,t5r),e(_M,_H),e(_H,a5r),e(_M,n5r),e(ee,s5r),e(ee,uM),e(uM,e5e),e(e5e,l5r),e(uM,i5r),e(uM,uH),e(uH,d5r),e(uM,c5r),e(ee,f5r),e(ee,bM),e(bM,o5e),e(o5e,m5r),e(bM,g5r),e(bM,bH),e(bH,h5r),e(bM,p5r),e(ee,_5r),e(ee,vM),e(vM,r5e),e(r5e,u5r),e(vM,b5r),e(vM,vH),e(vH,v5r),e(vM,F5r),e(ee,T5r),e(ee,FM),e(FM,t5e),e(t5e,M5r),e(FM,E5r),e(FM,FH),e(FH,C5r),e(FM,w5r),e(ee,A5r),e(ee,TM),e(TM,a5e),e(a5e,y5r),e(TM,L5r),e(TM,TH),e(TH,x5r),e(TM,$5r),e(ee,k5r),e(ee,MM),e(MM,n5e),e(n5e,S5r),e(MM,R5r),e(MM,MH),e(MH,P5r),e(MM,B5r),e(ee,I5r),e(ee,EM),e(EM,s5e),e(s5e,q5r),e(EM,N5r),e(EM,EH),e(EH,j5r),e(EM,D5r),e(ee,G5r),e(ee,CM),e(CM,l5e),e(l5e,O5r),e(CM,V5r),e(CM,CH),e(CH,X5r),e(CM,z5r),e(ee,W5r),e(ee,wM),e(wM,i5e),e(i5e,Q5r),e(wM,H5r),e(wM,wH),e(wH,U5r),e(wM,J5r),e(ee,Y5r),e(ee,AM),e(AM,d5e),e(d5e,K5r),e(AM,Z5r),e(AM,AH),e(AH,evr),e(AM,ovr),e(ee,rvr),e(ee,yM),e(yM,c5e),e(c5e,tvr),e(yM,avr),e(yM,yH),e(yH,nvr),e(yM,svr),e(ee,lvr),e(ee,LM),e(LM,f5e),e(f5e,ivr),e(LM,dvr),e(LM,LH),e(LH,cvr),e(LM,fvr),e(ee,mvr),e(ee,xM),e(xM,m5e),e(m5e,gvr),e(xM,hvr),e(xM,xH),e(xH,pvr),e(xM,_vr),e(ee,uvr),e(ee,$M),e($M,g5e),e(g5e,bvr),e($M,vvr),e($M,$H),e($H,Fvr),e($M,Tvr),e(ee,Mvr),e(ee,kM),e(kM,h5e),e(h5e,Evr),e(kM,Cvr),e(kM,kH),e(kH,wvr),e(kM,Avr),e(ee,yvr),e(ee,SM),e(SM,p5e),e(p5e,Lvr),e(SM,xvr),e(SM,SH),e(SH,$vr),e(SM,kvr),e(ee,Svr),e(ee,RM),e(RM,_5e),e(_5e,Rvr),e(RM,Pvr),e(RM,RH),e(RH,Bvr),e(RM,Ivr),e(ee,qvr),e(ee,PM),e(PM,u5e),e(u5e,Nvr),e(PM,jvr),e(PM,PH),e(PH,Dvr),e(PM,Gvr),e(ee,Ovr),e(ee,BM),e(BM,b5e),e(b5e,Vvr),e(BM,Xvr),e(BM,BH),e(BH,zvr),e(BM,Wvr),e(ee,Qvr),e(ee,IM),e(IM,v5e),e(v5e,Hvr),e(IM,Uvr),e(IM,IH),e(IH,Jvr),e(IM,Yvr),e(ee,Kvr),e(ee,qM),e(qM,F5e),e(F5e,Zvr),e(qM,eFr),e(qM,qH),e(qH,oFr),e(qM,rFr),e(kr,tFr),M(NM,kr,null),b(f,TNe,u),b(f,cc,u),e(cc,jM),e(jM,T5e),M($8,T5e,null),e(cc,aFr),e(cc,M5e),e(M5e,nFr),b(f,MNe,u),b(f,ar,u),M(k8,ar,null),e(ar,sFr),e(ar,fc),e(fc,lFr),e(fc,NH),e(NH,iFr),e(fc,dFr),e(fc,jH),e(jH,cFr),e(fc,fFr),e(ar,mFr),e(ar,S8),e(S8,gFr),e(S8,E5e),e(E5e,hFr),e(S8,pFr),e(ar,_Fr),e(ar,Pt),M(R8,Pt,null),e(Pt,uFr),e(Pt,C5e),e(C5e,bFr),e(Pt,vFr),e(Pt,mc),e(mc,FFr),e(mc,w5e),e(w5e,TFr),e(mc,MFr),e(mc,DH),e(DH,EFr),e(mc,CFr),e(Pt,wFr),M(DM,Pt,null),e(ar,AFr),e(ar,Sr),M(P8,Sr,null),e(Sr,yFr),e(Sr,A5e),e(A5e,LFr),e(Sr,xFr),e(Sr,sn),e(sn,$Fr),e(sn,y5e),e(y5e,kFr),e(sn,SFr),e(sn,L5e),e(L5e,RFr),e(sn,PFr),e(sn,x5e),e(x5e,BFr),e(sn,IFr),e(Sr,qFr),e(Sr,he),e(he,GM),e(GM,$5e),e($5e,NFr),e(GM,jFr),e(GM,GH),e(GH,DFr),e(GM,GFr),e(he,OFr),e(he,OM),e(OM,k5e),e(k5e,VFr),e(OM,XFr),e(OM,OH),e(OH,zFr),e(OM,WFr),e(he,QFr),e(he,VM),e(VM,S5e),e(S5e,HFr),e(VM,UFr),e(VM,VH),e(VH,JFr),e(VM,YFr),e(he,KFr),e(he,XM),e(XM,R5e),e(R5e,ZFr),e(XM,eTr),e(XM,XH),e(XH,oTr),e(XM,rTr),e(he,tTr),e(he,zM),e(zM,P5e),e(P5e,aTr),e(zM,nTr),e(zM,zH),e(zH,sTr),e(zM,lTr),e(he,iTr),e(he,WM),e(WM,B5e),e(B5e,dTr),e(WM,cTr),e(WM,WH),e(WH,fTr),e(WM,mTr),e(he,gTr),e(he,QM),e(QM,I5e),e(I5e,hTr),e(QM,pTr),e(QM,QH),e(QH,_Tr),e(QM,uTr),e(he,bTr),e(he,HM),e(HM,q5e),e(q5e,vTr),e(HM,FTr),e(HM,HH),e(HH,TTr),e(HM,MTr),e(he,ETr),e(he,UM),e(UM,N5e),e(N5e,CTr),e(UM,wTr),e(UM,UH),e(UH,ATr),e(UM,yTr),e(he,LTr),e(he,JM),e(JM,j5e),e(j5e,xTr),e(JM,$Tr),e(JM,JH),e(JH,kTr),e(JM,STr),e(he,RTr),e(he,YM),e(YM,D5e),e(D5e,PTr),e(YM,BTr),e(YM,YH),e(YH,ITr),e(YM,qTr),e(he,NTr),e(he,KM),e(KM,G5e),e(G5e,jTr),e(KM,DTr),e(KM,KH),e(KH,GTr),e(KM,OTr),e(he,VTr),e(he,ZM),e(ZM,O5e),e(O5e,XTr),e(ZM,zTr),e(ZM,ZH),e(ZH,WTr),e(ZM,QTr),e(he,HTr),e(he,eE),e(eE,V5e),e(V5e,UTr),e(eE,JTr),e(eE,eU),e(eU,YTr),e(eE,KTr),e(he,ZTr),e(he,oE),e(oE,X5e),e(X5e,e7r),e(oE,o7r),e(oE,oU),e(oU,r7r),e(oE,t7r),e(he,a7r),e(he,rE),e(rE,z5e),e(z5e,n7r),e(rE,s7r),e(rE,rU),e(rU,l7r),e(rE,i7r),e(he,d7r),e(he,tE),e(tE,W5e),e(W5e,c7r),e(tE,f7r),e(tE,tU),e(tU,m7r),e(tE,g7r),e(Sr,h7r),M(aE,Sr,null),b(f,ENe,u),b(f,gc,u),e(gc,nE),e(nE,Q5e),M(B8,Q5e,null),e(gc,p7r),e(gc,H5e),e(H5e,_7r),b(f,CNe,u),b(f,nr,u),M(I8,nr,null),e(nr,u7r),e(nr,hc),e(hc,b7r),e(hc,aU),e(aU,v7r),e(hc,F7r),e(hc,nU),e(nU,T7r),e(hc,M7r),e(nr,E7r),e(nr,q8),e(q8,C7r),e(q8,U5e),e(U5e,w7r),e(q8,A7r),e(nr,y7r),e(nr,Bt),M(N8,Bt,null),e(Bt,L7r),e(Bt,J5e),e(J5e,x7r),e(Bt,$7r),e(Bt,pc),e(pc,k7r),e(pc,Y5e),e(Y5e,S7r),e(pc,R7r),e(pc,sU),e(sU,P7r),e(pc,B7r),e(Bt,I7r),M(sE,Bt,null),e(nr,q7r),e(nr,Rr),M(j8,Rr,null),e(Rr,N7r),e(Rr,K5e),e(K5e,j7r),e(Rr,D7r),e(Rr,ln),e(ln,G7r),e(ln,Z5e),e(Z5e,O7r),e(ln,V7r),e(ln,eve),e(eve,X7r),e(ln,z7r),e(ln,ove),e(ove,W7r),e(ln,Q7r),e(Rr,H7r),e(Rr,D8),e(D8,lE),e(lE,rve),e(rve,U7r),e(lE,J7r),e(lE,lU),e(lU,Y7r),e(lE,K7r),e(D8,Z7r),e(D8,iE),e(iE,tve),e(tve,eMr),e(iE,oMr),e(iE,iU),e(iU,rMr),e(iE,tMr),e(Rr,aMr),M(dE,Rr,null),b(f,wNe,u),b(f,_c,u),e(_c,cE),e(cE,ave),M(G8,ave,null),e(_c,nMr),e(_c,nve),e(nve,sMr),b(f,ANe,u),b(f,sr,u),M(O8,sr,null),e(sr,lMr),e(sr,uc),e(uc,iMr),e(uc,dU),e(dU,dMr),e(uc,cMr),e(uc,cU),e(cU,fMr),e(uc,mMr),e(sr,gMr),e(sr,V8),e(V8,hMr),e(V8,sve),e(sve,pMr),e(V8,_Mr),e(sr,uMr),e(sr,It),M(X8,It,null),e(It,bMr),e(It,lve),e(lve,vMr),e(It,FMr),e(It,bc),e(bc,TMr),e(bc,ive),e(ive,MMr),e(bc,EMr),e(bc,fU),e(fU,CMr),e(bc,wMr),e(It,AMr),M(fE,It,null),e(sr,yMr),e(sr,Pr),M(z8,Pr,null),e(Pr,LMr),e(Pr,dve),e(dve,xMr),e(Pr,$Mr),e(Pr,dn),e(dn,kMr),e(dn,cve),e(cve,SMr),e(dn,RMr),e(dn,fve),e(fve,PMr),e(dn,BMr),e(dn,mve),e(mve,IMr),e(dn,qMr),e(Pr,NMr),e(Pr,gve),e(gve,mE),e(mE,hve),e(hve,jMr),e(mE,DMr),e(mE,mU),e(mU,GMr),e(mE,OMr),e(Pr,VMr),M(gE,Pr,null),b(f,yNe,u),b(f,vc,u),e(vc,hE),e(hE,pve),M(W8,pve,null),e(vc,XMr),e(vc,_ve),e(_ve,zMr),b(f,LNe,u),b(f,lr,u),M(Q8,lr,null),e(lr,WMr),e(lr,Fc),e(Fc,QMr),e(Fc,gU),e(gU,HMr),e(Fc,UMr),e(Fc,hU),e(hU,JMr),e(Fc,YMr),e(lr,KMr),e(lr,H8),e(H8,ZMr),e(H8,uve),e(uve,eEr),e(H8,oEr),e(lr,rEr),e(lr,qt),M(U8,qt,null),e(qt,tEr),e(qt,bve),e(bve,aEr),e(qt,nEr),e(qt,Tc),e(Tc,sEr),e(Tc,vve),e(vve,lEr),e(Tc,iEr),e(Tc,pU),e(pU,dEr),e(Tc,cEr),e(qt,fEr),M(pE,qt,null),e(lr,mEr),e(lr,Br),M(J8,Br,null),e(Br,gEr),e(Br,Fve),e(Fve,hEr),e(Br,pEr),e(Br,cn),e(cn,_Er),e(cn,Tve),e(Tve,uEr),e(cn,bEr),e(cn,Mve),e(Mve,vEr),e(cn,FEr),e(cn,Eve),e(Eve,TEr),e(cn,MEr),e(Br,EEr),e(Br,de),e(de,_E),e(_E,Cve),e(Cve,CEr),e(_E,wEr),e(_E,_U),e(_U,AEr),e(_E,yEr),e(de,LEr),e(de,uE),e(uE,wve),e(wve,xEr),e(uE,$Er),e(uE,uU),e(uU,kEr),e(uE,SEr),e(de,REr),e(de,bE),e(bE,Ave),e(Ave,PEr),e(bE,BEr),e(bE,bU),e(bU,IEr),e(bE,qEr),e(de,NEr),e(de,vE),e(vE,yve),e(yve,jEr),e(vE,DEr),e(vE,vU),e(vU,GEr),e(vE,OEr),e(de,VEr),e(de,FE),e(FE,Lve),e(Lve,XEr),e(FE,zEr),e(FE,FU),e(FU,WEr),e(FE,QEr),e(de,HEr),e(de,TE),e(TE,xve),e(xve,UEr),e(TE,JEr),e(TE,TU),e(TU,YEr),e(TE,KEr),e(de,ZEr),e(de,ME),e(ME,$ve),e($ve,eCr),e(ME,oCr),e(ME,MU),e(MU,rCr),e(ME,tCr),e(de,aCr),e(de,EE),e(EE,kve),e(kve,nCr),e(EE,sCr),e(EE,EU),e(EU,lCr),e(EE,iCr),e(de,dCr),e(de,CE),e(CE,Sve),e(Sve,cCr),e(CE,fCr),e(CE,CU),e(CU,mCr),e(CE,gCr),e(de,hCr),e(de,wE),e(wE,Rve),e(Rve,pCr),e(wE,_Cr),e(wE,wU),e(wU,uCr),e(wE,bCr),e(de,vCr),e(de,AE),e(AE,Pve),e(Pve,FCr),e(AE,TCr),e(AE,AU),e(AU,MCr),e(AE,ECr),e(de,CCr),e(de,yE),e(yE,Bve),e(Bve,wCr),e(yE,ACr),e(yE,yU),e(yU,yCr),e(yE,LCr),e(de,xCr),e(de,LE),e(LE,Ive),e(Ive,$Cr),e(LE,kCr),e(LE,LU),e(LU,SCr),e(LE,RCr),e(de,PCr),e(de,xE),e(xE,qve),e(qve,BCr),e(xE,ICr),e(xE,xU),e(xU,qCr),e(xE,NCr),e(de,jCr),e(de,$E),e($E,Nve),e(Nve,DCr),e($E,GCr),e($E,$U),e($U,OCr),e($E,VCr),e(de,XCr),e(de,kE),e(kE,jve),e(jve,zCr),e(kE,WCr),e(kE,kU),e(kU,QCr),e(kE,HCr),e(de,UCr),e(de,SE),e(SE,Dve),e(Dve,JCr),e(SE,YCr),e(SE,SU),e(SU,KCr),e(SE,ZCr),e(de,e3r),e(de,RE),e(RE,Gve),e(Gve,o3r),e(RE,r3r),e(RE,RU),e(RU,t3r),e(RE,a3r),e(de,n3r),e(de,PE),e(PE,Ove),e(Ove,s3r),e(PE,l3r),e(PE,PU),e(PU,i3r),e(PE,d3r),e(de,c3r),e(de,BE),e(BE,Vve),e(Vve,f3r),e(BE,m3r),e(BE,BU),e(BU,g3r),e(BE,h3r),e(Br,p3r),M(IE,Br,null),b(f,xNe,u),b(f,Mc,u),e(Mc,qE),e(qE,Xve),M(Y8,Xve,null),e(Mc,_3r),e(Mc,zve),e(zve,u3r),b(f,$Ne,u),b(f,ir,u),M(K8,ir,null),e(ir,b3r),e(ir,Ec),e(Ec,v3r),e(Ec,IU),e(IU,F3r),e(Ec,T3r),e(Ec,qU),e(qU,M3r),e(Ec,E3r),e(ir,C3r),e(ir,Z8),e(Z8,w3r),e(Z8,Wve),e(Wve,A3r),e(Z8,y3r),e(ir,L3r),e(ir,Nt),M(e9,Nt,null),e(Nt,x3r),e(Nt,Qve),e(Qve,$3r),e(Nt,k3r),e(Nt,Cc),e(Cc,S3r),e(Cc,Hve),e(Hve,R3r),e(Cc,P3r),e(Cc,NU),e(NU,B3r),e(Cc,I3r),e(Nt,q3r),M(NE,Nt,null),e(ir,N3r),e(ir,Ir),M(o9,Ir,null),e(Ir,j3r),e(Ir,Uve),e(Uve,D3r),e(Ir,G3r),e(Ir,fn),e(fn,O3r),e(fn,Jve),e(Jve,V3r),e(fn,X3r),e(fn,Yve),e(Yve,z3r),e(fn,W3r),e(fn,Kve),e(Kve,Q3r),e(fn,H3r),e(Ir,U3r),e(Ir,ce),e(ce,jE),e(jE,Zve),e(Zve,J3r),e(jE,Y3r),e(jE,jU),e(jU,K3r),e(jE,Z3r),e(ce,ewr),e(ce,DE),e(DE,eFe),e(eFe,owr),e(DE,rwr),e(DE,DU),e(DU,twr),e(DE,awr),e(ce,nwr),e(ce,GE),e(GE,oFe),e(oFe,swr),e(GE,lwr),e(GE,GU),e(GU,iwr),e(GE,dwr),e(ce,cwr),e(ce,OE),e(OE,rFe),e(rFe,fwr),e(OE,mwr),e(OE,OU),e(OU,gwr),e(OE,hwr),e(ce,pwr),e(ce,VE),e(VE,tFe),e(tFe,_wr),e(VE,uwr),e(VE,VU),e(VU,bwr),e(VE,vwr),e(ce,Fwr),e(ce,XE),e(XE,aFe),e(aFe,Twr),e(XE,Mwr),e(XE,XU),e(XU,Ewr),e(XE,Cwr),e(ce,wwr),e(ce,zE),e(zE,nFe),e(nFe,Awr),e(zE,ywr),e(zE,zU),e(zU,Lwr),e(zE,xwr),e(ce,$wr),e(ce,WE),e(WE,sFe),e(sFe,kwr),e(WE,Swr),e(WE,WU),e(WU,Rwr),e(WE,Pwr),e(ce,Bwr),e(ce,QE),e(QE,lFe),e(lFe,Iwr),e(QE,qwr),e(QE,QU),e(QU,Nwr),e(QE,jwr),e(ce,Dwr),e(ce,HE),e(HE,iFe),e(iFe,Gwr),e(HE,Owr),e(HE,HU),e(HU,Vwr),e(HE,Xwr),e(ce,zwr),e(ce,UE),e(UE,dFe),e(dFe,Wwr),e(UE,Qwr),e(UE,UU),e(UU,Hwr),e(UE,Uwr),e(ce,Jwr),e(ce,JE),e(JE,cFe),e(cFe,Ywr),e(JE,Kwr),e(JE,JU),e(JU,Zwr),e(JE,e0r),e(ce,o0r),e(ce,YE),e(YE,fFe),e(fFe,r0r),e(YE,t0r),e(YE,YU),e(YU,a0r),e(YE,n0r),e(ce,s0r),e(ce,KE),e(KE,mFe),e(mFe,l0r),e(KE,i0r),e(KE,KU),e(KU,d0r),e(KE,c0r),e(ce,f0r),e(ce,ZE),e(ZE,gFe),e(gFe,m0r),e(ZE,g0r),e(ZE,ZU),e(ZU,h0r),e(ZE,p0r),e(ce,_0r),e(ce,eC),e(eC,hFe),e(hFe,u0r),e(eC,b0r),e(eC,eJ),e(eJ,v0r),e(eC,F0r),e(ce,T0r),e(ce,oC),e(oC,pFe),e(pFe,M0r),e(oC,E0r),e(oC,oJ),e(oJ,C0r),e(oC,w0r),e(ce,A0r),e(ce,rC),e(rC,_Fe),e(_Fe,y0r),e(rC,L0r),e(rC,rJ),e(rJ,x0r),e(rC,$0r),e(ce,k0r),e(ce,tC),e(tC,uFe),e(uFe,S0r),e(tC,R0r),e(tC,tJ),e(tJ,P0r),e(tC,B0r),e(ce,I0r),e(ce,aC),e(aC,bFe),e(bFe,q0r),e(aC,N0r),e(aC,aJ),e(aJ,j0r),e(aC,D0r),e(Ir,G0r),M(nC,Ir,null),b(f,kNe,u),b(f,wc,u),e(wc,sC),e(sC,vFe),M(r9,vFe,null),e(wc,O0r),e(wc,FFe),e(FFe,V0r),b(f,SNe,u),b(f,dr,u),M(t9,dr,null),e(dr,X0r),e(dr,Ac),e(Ac,z0r),e(Ac,nJ),e(nJ,W0r),e(Ac,Q0r),e(Ac,sJ),e(sJ,H0r),e(Ac,U0r),e(dr,J0r),e(dr,a9),e(a9,Y0r),e(a9,TFe),e(TFe,K0r),e(a9,Z0r),e(dr,eAr),e(dr,jt),M(n9,jt,null),e(jt,oAr),e(jt,MFe),e(MFe,rAr),e(jt,tAr),e(jt,yc),e(yc,aAr),e(yc,EFe),e(EFe,nAr),e(yc,sAr),e(yc,lJ),e(lJ,lAr),e(yc,iAr),e(jt,dAr),M(lC,jt,null),e(dr,cAr),e(dr,qr),M(s9,qr,null),e(qr,fAr),e(qr,CFe),e(CFe,mAr),e(qr,gAr),e(qr,mn),e(mn,hAr),e(mn,wFe),e(wFe,pAr),e(mn,_Ar),e(mn,AFe),e(AFe,uAr),e(mn,bAr),e(mn,yFe),e(yFe,vAr),e(mn,FAr),e(qr,TAr),e(qr,LFe),e(LFe,iC),e(iC,xFe),e(xFe,MAr),e(iC,EAr),e(iC,iJ),e(iJ,CAr),e(iC,wAr),e(qr,AAr),M(dC,qr,null),b(f,RNe,u),b(f,Lc,u),e(Lc,cC),e(cC,$Fe),M(l9,$Fe,null),e(Lc,yAr),e(Lc,kFe),e(kFe,LAr),b(f,PNe,u),b(f,cr,u),M(i9,cr,null),e(cr,xAr),e(cr,xc),e(xc,$Ar),e(xc,dJ),e(dJ,kAr),e(xc,SAr),e(xc,cJ),e(cJ,RAr),e(xc,PAr),e(cr,BAr),e(cr,d9),e(d9,IAr),e(d9,SFe),e(SFe,qAr),e(d9,NAr),e(cr,jAr),e(cr,Dt),M(c9,Dt,null),e(Dt,DAr),e(Dt,RFe),e(RFe,GAr),e(Dt,OAr),e(Dt,$c),e($c,VAr),e($c,PFe),e(PFe,XAr),e($c,zAr),e($c,fJ),e(fJ,WAr),e($c,QAr),e(Dt,HAr),M(fC,Dt,null),e(cr,UAr),e(cr,Nr),M(f9,Nr,null),e(Nr,JAr),e(Nr,BFe),e(BFe,YAr),e(Nr,KAr),e(Nr,gn),e(gn,ZAr),e(gn,IFe),e(IFe,e6r),e(gn,o6r),e(gn,qFe),e(qFe,r6r),e(gn,t6r),e(gn,NFe),e(NFe,a6r),e(gn,n6r),e(Nr,s6r),e(Nr,jFe),e(jFe,mC),e(mC,DFe),e(DFe,l6r),e(mC,i6r),e(mC,mJ),e(mJ,d6r),e(mC,c6r),e(Nr,f6r),M(gC,Nr,null),b(f,BNe,u),b(f,kc,u),e(kc,hC),e(hC,GFe),M(m9,GFe,null),e(kc,m6r),e(kc,OFe),e(OFe,g6r),b(f,INe,u),b(f,fr,u),M(g9,fr,null),e(fr,h6r),e(fr,Sc),e(Sc,p6r),e(Sc,gJ),e(gJ,_6r),e(Sc,u6r),e(Sc,hJ),e(hJ,b6r),e(Sc,v6r),e(fr,F6r),e(fr,h9),e(h9,T6r),e(h9,VFe),e(VFe,M6r),e(h9,E6r),e(fr,C6r),e(fr,Gt),M(p9,Gt,null),e(Gt,w6r),e(Gt,XFe),e(XFe,A6r),e(Gt,y6r),e(Gt,Rc),e(Rc,L6r),e(Rc,zFe),e(zFe,x6r),e(Rc,$6r),e(Rc,pJ),e(pJ,k6r),e(Rc,S6r),e(Gt,R6r),M(pC,Gt,null),e(fr,P6r),e(fr,jr),M(_9,jr,null),e(jr,B6r),e(jr,WFe),e(WFe,I6r),e(jr,q6r),e(jr,hn),e(hn,N6r),e(hn,QFe),e(QFe,j6r),e(hn,D6r),e(hn,HFe),e(HFe,G6r),e(hn,O6r),e(hn,UFe),e(UFe,V6r),e(hn,X6r),e(jr,z6r),e(jr,te),e(te,_C),e(_C,JFe),e(JFe,W6r),e(_C,Q6r),e(_C,_J),e(_J,H6r),e(_C,U6r),e(te,J6r),e(te,uC),e(uC,YFe),e(YFe,Y6r),e(uC,K6r),e(uC,uJ),e(uJ,Z6r),e(uC,eyr),e(te,oyr),e(te,bC),e(bC,KFe),e(KFe,ryr),e(bC,tyr),e(bC,bJ),e(bJ,ayr),e(bC,nyr),e(te,syr),e(te,vC),e(vC,ZFe),e(ZFe,lyr),e(vC,iyr),e(vC,vJ),e(vJ,dyr),e(vC,cyr),e(te,fyr),e(te,FC),e(FC,eTe),e(eTe,myr),e(FC,gyr),e(FC,FJ),e(FJ,hyr),e(FC,pyr),e(te,_yr),e(te,TC),e(TC,oTe),e(oTe,uyr),e(TC,byr),e(TC,TJ),e(TJ,vyr),e(TC,Fyr),e(te,Tyr),e(te,MC),e(MC,rTe),e(rTe,Myr),e(MC,Eyr),e(MC,MJ),e(MJ,Cyr),e(MC,wyr),e(te,Ayr),e(te,EC),e(EC,tTe),e(tTe,yyr),e(EC,Lyr),e(EC,EJ),e(EJ,xyr),e(EC,$yr),e(te,kyr),e(te,CC),e(CC,aTe),e(aTe,Syr),e(CC,Ryr),e(CC,CJ),e(CJ,Pyr),e(CC,Byr),e(te,Iyr),e(te,wC),e(wC,nTe),e(nTe,qyr),e(wC,Nyr),e(wC,wJ),e(wJ,jyr),e(wC,Dyr),e(te,Gyr),e(te,AC),e(AC,sTe),e(sTe,Oyr),e(AC,Vyr),e(AC,AJ),e(AJ,Xyr),e(AC,zyr),e(te,Wyr),e(te,yC),e(yC,lTe),e(lTe,Qyr),e(yC,Hyr),e(yC,yJ),e(yJ,Uyr),e(yC,Jyr),e(te,Yyr),e(te,LC),e(LC,iTe),e(iTe,Kyr),e(LC,Zyr),e(LC,LJ),e(LJ,eLr),e(LC,oLr),e(te,rLr),e(te,xC),e(xC,dTe),e(dTe,tLr),e(xC,aLr),e(xC,xJ),e(xJ,nLr),e(xC,sLr),e(te,lLr),e(te,$C),e($C,cTe),e(cTe,iLr),e($C,dLr),e($C,$J),e($J,cLr),e($C,fLr),e(te,mLr),e(te,kC),e(kC,fTe),e(fTe,gLr),e(kC,hLr),e(kC,kJ),e(kJ,pLr),e(kC,_Lr),e(te,uLr),e(te,SC),e(SC,mTe),e(mTe,bLr),e(SC,vLr),e(SC,SJ),e(SJ,FLr),e(SC,TLr),e(te,MLr),e(te,RC),e(RC,gTe),e(gTe,ELr),e(RC,CLr),e(RC,RJ),e(RJ,wLr),e(RC,ALr),e(te,yLr),e(te,PC),e(PC,hTe),e(hTe,LLr),e(PC,xLr),e(PC,PJ),e(PJ,$Lr),e(PC,kLr),e(te,SLr),e(te,BC),e(BC,pTe),e(pTe,RLr),e(BC,PLr),e(BC,BJ),e(BJ,BLr),e(BC,ILr),e(te,qLr),e(te,IC),e(IC,_Te),e(_Te,NLr),e(IC,jLr),e(IC,IJ),e(IJ,DLr),e(IC,GLr),e(te,OLr),e(te,qC),e(qC,uTe),e(uTe,VLr),e(qC,XLr),e(qC,qJ),e(qJ,zLr),e(qC,WLr),e(te,QLr),e(te,NC),e(NC,bTe),e(bTe,HLr),e(NC,ULr),e(NC,NJ),e(NJ,JLr),e(NC,YLr),e(te,KLr),e(te,jC),e(jC,vTe),e(vTe,ZLr),e(jC,e8r),e(jC,jJ),e(jJ,o8r),e(jC,r8r),e(te,t8r),e(te,DC),e(DC,FTe),e(FTe,a8r),e(DC,n8r),e(DC,DJ),e(DJ,s8r),e(DC,l8r),e(jr,i8r),M(GC,jr,null),b(f,qNe,u),b(f,Pc,u),e(Pc,OC),e(OC,TTe),M(u9,TTe,null),e(Pc,d8r),e(Pc,MTe),e(MTe,c8r),b(f,NNe,u),b(f,mr,u),M(b9,mr,null),e(mr,f8r),e(mr,Bc),e(Bc,m8r),e(Bc,GJ),e(GJ,g8r),e(Bc,h8r),e(Bc,OJ),e(OJ,p8r),e(Bc,_8r),e(mr,u8r),e(mr,v9),e(v9,b8r),e(v9,ETe),e(ETe,v8r),e(v9,F8r),e(mr,T8r),e(mr,Ot),M(F9,Ot,null),e(Ot,M8r),e(Ot,CTe),e(CTe,E8r),e(Ot,C8r),e(Ot,Ic),e(Ic,w8r),e(Ic,wTe),e(wTe,A8r),e(Ic,y8r),e(Ic,VJ),e(VJ,L8r),e(Ic,x8r),e(Ot,$8r),M(VC,Ot,null),e(mr,k8r),e(mr,Dr),M(T9,Dr,null),e(Dr,S8r),e(Dr,ATe),e(ATe,R8r),e(Dr,P8r),e(Dr,pn),e(pn,B8r),e(pn,yTe),e(yTe,I8r),e(pn,q8r),e(pn,LTe),e(LTe,N8r),e(pn,j8r),e(pn,xTe),e(xTe,D8r),e(pn,G8r),e(Dr,O8r),e(Dr,Re),e(Re,XC),e(XC,$Te),e($Te,V8r),e(XC,X8r),e(XC,XJ),e(XJ,z8r),e(XC,W8r),e(Re,Q8r),e(Re,zC),e(zC,kTe),e(kTe,H8r),e(zC,U8r),e(zC,zJ),e(zJ,J8r),e(zC,Y8r),e(Re,K8r),e(Re,WC),e(WC,STe),e(STe,Z8r),e(WC,e9r),e(WC,WJ),e(WJ,o9r),e(WC,r9r),e(Re,t9r),e(Re,QC),e(QC,RTe),e(RTe,a9r),e(QC,n9r),e(QC,QJ),e(QJ,s9r),e(QC,l9r),e(Re,i9r),e(Re,HC),e(HC,PTe),e(PTe,d9r),e(HC,c9r),e(HC,HJ),e(HJ,f9r),e(HC,m9r),e(Re,g9r),e(Re,UC),e(UC,BTe),e(BTe,h9r),e(UC,p9r),e(UC,UJ),e(UJ,_9r),e(UC,u9r),e(Re,b9r),e(Re,JC),e(JC,ITe),e(ITe,v9r),e(JC,F9r),e(JC,JJ),e(JJ,T9r),e(JC,M9r),e(Re,E9r),e(Re,YC),e(YC,qTe),e(qTe,C9r),e(YC,w9r),e(YC,YJ),e(YJ,A9r),e(YC,y9r),e(Re,L9r),e(Re,KC),e(KC,NTe),e(NTe,x9r),e(KC,$9r),e(KC,KJ),e(KJ,k9r),e(KC,S9r),e(Dr,R9r),M(ZC,Dr,null),b(f,jNe,u),b(f,qc,u),e(qc,e3),e(e3,jTe),M(M9,jTe,null),e(qc,P9r),e(qc,DTe),e(DTe,B9r),b(f,DNe,u),b(f,gr,u),M(E9,gr,null),e(gr,I9r),e(gr,Nc),e(Nc,q9r),e(Nc,ZJ),e(ZJ,N9r),e(Nc,j9r),e(Nc,eY),e(eY,D9r),e(Nc,G9r),e(gr,O9r),e(gr,C9),e(C9,V9r),e(C9,GTe),e(GTe,X9r),e(C9,z9r),e(gr,W9r),e(gr,Vt),M(w9,Vt,null),e(Vt,Q9r),e(Vt,OTe),e(OTe,H9r),e(Vt,U9r),e(Vt,jc),e(jc,J9r),e(jc,VTe),e(VTe,Y9r),e(jc,K9r),e(jc,oY),e(oY,Z9r),e(jc,exr),e(Vt,oxr),M(o3,Vt,null),e(gr,rxr),e(gr,Gr),M(A9,Gr,null),e(Gr,txr),e(Gr,XTe),e(XTe,axr),e(Gr,nxr),e(Gr,_n),e(_n,sxr),e(_n,zTe),e(zTe,lxr),e(_n,ixr),e(_n,WTe),e(WTe,dxr),e(_n,cxr),e(_n,QTe),e(QTe,fxr),e(_n,mxr),e(Gr,gxr),e(Gr,Ee),e(Ee,r3),e(r3,HTe),e(HTe,hxr),e(r3,pxr),e(r3,rY),e(rY,_xr),e(r3,uxr),e(Ee,bxr),e(Ee,t3),e(t3,UTe),e(UTe,vxr),e(t3,Fxr),e(t3,tY),e(tY,Txr),e(t3,Mxr),e(Ee,Exr),e(Ee,a3),e(a3,JTe),e(JTe,Cxr),e(a3,wxr),e(a3,aY),e(aY,Axr),e(a3,yxr),e(Ee,Lxr),e(Ee,n3),e(n3,YTe),e(YTe,xxr),e(n3,$xr),e(n3,nY),e(nY,kxr),e(n3,Sxr),e(Ee,Rxr),e(Ee,s3),e(s3,KTe),e(KTe,Pxr),e(s3,Bxr),e(s3,sY),e(sY,Ixr),e(s3,qxr),e(Ee,Nxr),e(Ee,l3),e(l3,ZTe),e(ZTe,jxr),e(l3,Dxr),e(l3,lY),e(lY,Gxr),e(l3,Oxr),e(Ee,Vxr),e(Ee,i3),e(i3,e7e),e(e7e,Xxr),e(i3,zxr),e(i3,iY),e(iY,Wxr),e(i3,Qxr),e(Ee,Hxr),e(Ee,d3),e(d3,o7e),e(o7e,Uxr),e(d3,Jxr),e(d3,dY),e(dY,Yxr),e(d3,Kxr),e(Ee,Zxr),e(Ee,c3),e(c3,r7e),e(r7e,e$r),e(c3,o$r),e(c3,cY),e(cY,r$r),e(c3,t$r),e(Ee,a$r),e(Ee,f3),e(f3,t7e),e(t7e,n$r),e(f3,s$r),e(f3,fY),e(fY,l$r),e(f3,i$r),e(Ee,d$r),e(Ee,m3),e(m3,a7e),e(a7e,c$r),e(m3,f$r),e(m3,mY),e(mY,m$r),e(m3,g$r),e(Ee,h$r),e(Ee,g3),e(g3,n7e),e(n7e,p$r),e(g3,_$r),e(g3,gY),e(gY,u$r),e(g3,b$r),e(Gr,v$r),M(h3,Gr,null),b(f,GNe,u),b(f,Dc,u),e(Dc,p3),e(p3,s7e),M(y9,s7e,null),e(Dc,F$r),e(Dc,l7e),e(l7e,T$r),b(f,ONe,u),b(f,hr,u),M(L9,hr,null),e(hr,M$r),e(hr,Gc),e(Gc,E$r),e(Gc,hY),e(hY,C$r),e(Gc,w$r),e(Gc,pY),e(pY,A$r),e(Gc,y$r),e(hr,L$r),e(hr,x9),e(x9,x$r),e(x9,i7e),e(i7e,$$r),e(x9,k$r),e(hr,S$r),e(hr,Xt),M($9,Xt,null),e(Xt,R$r),e(Xt,d7e),e(d7e,P$r),e(Xt,B$r),e(Xt,Oc),e(Oc,I$r),e(Oc,c7e),e(c7e,q$r),e(Oc,N$r),e(Oc,_Y),e(_Y,j$r),e(Oc,D$r),e(Xt,G$r),M(_3,Xt,null),e(hr,O$r),e(hr,Or),M(k9,Or,null),e(Or,V$r),e(Or,f7e),e(f7e,X$r),e(Or,z$r),e(Or,un),e(un,W$r),e(un,m7e),e(m7e,Q$r),e(un,H$r),e(un,g7e),e(g7e,U$r),e(un,J$r),e(un,h7e),e(h7e,Y$r),e(un,K$r),e(Or,Z$r),e(Or,Le),e(Le,u3),e(u3,p7e),e(p7e,ekr),e(u3,okr),e(u3,uY),e(uY,rkr),e(u3,tkr),e(Le,akr),e(Le,b3),e(b3,_7e),e(_7e,nkr),e(b3,skr),e(b3,bY),e(bY,lkr),e(b3,ikr),e(Le,dkr),e(Le,v3),e(v3,u7e),e(u7e,ckr),e(v3,fkr),e(v3,vY),e(vY,mkr),e(v3,gkr),e(Le,hkr),e(Le,F3),e(F3,b7e),e(b7e,pkr),e(F3,_kr),e(F3,FY),e(FY,ukr),e(F3,bkr),e(Le,vkr),e(Le,T3),e(T3,v7e),e(v7e,Fkr),e(T3,Tkr),e(T3,TY),e(TY,Mkr),e(T3,Ekr),e(Le,Ckr),e(Le,M3),e(M3,F7e),e(F7e,wkr),e(M3,Akr),e(M3,MY),e(MY,ykr),e(M3,Lkr),e(Le,xkr),e(Le,E3),e(E3,T7e),e(T7e,$kr),e(E3,kkr),e(E3,EY),e(EY,Skr),e(E3,Rkr),e(Le,Pkr),e(Le,C3),e(C3,M7e),e(M7e,Bkr),e(C3,Ikr),e(C3,CY),e(CY,qkr),e(C3,Nkr),e(Le,jkr),e(Le,w3),e(w3,E7e),e(E7e,Dkr),e(w3,Gkr),e(w3,wY),e(wY,Okr),e(w3,Vkr),e(Le,Xkr),e(Le,A3),e(A3,C7e),e(C7e,zkr),e(A3,Wkr),e(A3,AY),e(AY,Qkr),e(A3,Hkr),e(Or,Ukr),M(y3,Or,null),b(f,VNe,u),b(f,Vc,u),e(Vc,L3),e(L3,w7e),M(S9,w7e,null),e(Vc,Jkr),e(Vc,A7e),e(A7e,Ykr),b(f,XNe,u),b(f,pr,u),M(R9,pr,null),e(pr,Kkr),e(pr,Xc),e(Xc,Zkr),e(Xc,yY),e(yY,eSr),e(Xc,oSr),e(Xc,LY),e(LY,rSr),e(Xc,tSr),e(pr,aSr),e(pr,P9),e(P9,nSr),e(P9,y7e),e(y7e,sSr),e(P9,lSr),e(pr,iSr),e(pr,zt),M(B9,zt,null),e(zt,dSr),e(zt,L7e),e(L7e,cSr),e(zt,fSr),e(zt,zc),e(zc,mSr),e(zc,x7e),e(x7e,gSr),e(zc,hSr),e(zc,xY),e(xY,pSr),e(zc,_Sr),e(zt,uSr),M(x3,zt,null),e(pr,bSr),e(pr,Vr),M(I9,Vr,null),e(Vr,vSr),e(Vr,$7e),e($7e,FSr),e(Vr,TSr),e(Vr,bn),e(bn,MSr),e(bn,k7e),e(k7e,ESr),e(bn,CSr),e(bn,S7e),e(S7e,wSr),e(bn,ASr),e(bn,R7e),e(R7e,ySr),e(bn,LSr),e(Vr,xSr),e(Vr,Pe),e(Pe,$3),e($3,P7e),e(P7e,$Sr),e($3,kSr),e($3,$Y),e($Y,SSr),e($3,RSr),e(Pe,PSr),e(Pe,k3),e(k3,B7e),e(B7e,BSr),e(k3,ISr),e(k3,kY),e(kY,qSr),e(k3,NSr),e(Pe,jSr),e(Pe,S3),e(S3,I7e),e(I7e,DSr),e(S3,GSr),e(S3,SY),e(SY,OSr),e(S3,VSr),e(Pe,XSr),e(Pe,R3),e(R3,q7e),e(q7e,zSr),e(R3,WSr),e(R3,RY),e(RY,QSr),e(R3,HSr),e(Pe,USr),e(Pe,P3),e(P3,N7e),e(N7e,JSr),e(P3,YSr),e(P3,PY),e(PY,KSr),e(P3,ZSr),e(Pe,eRr),e(Pe,B3),e(B3,j7e),e(j7e,oRr),e(B3,rRr),e(B3,BY),e(BY,tRr),e(B3,aRr),e(Pe,nRr),e(Pe,I3),e(I3,D7e),e(D7e,sRr),e(I3,lRr),e(I3,IY),e(IY,iRr),e(I3,dRr),e(Pe,cRr),e(Pe,q3),e(q3,G7e),e(G7e,fRr),e(q3,mRr),e(q3,qY),e(qY,gRr),e(q3,hRr),e(Pe,pRr),e(Pe,N3),e(N3,O7e),e(O7e,_Rr),e(N3,uRr),e(N3,NY),e(NY,bRr),e(N3,vRr),e(Vr,FRr),M(j3,Vr,null),b(f,zNe,u),b(f,Wc,u),e(Wc,D3),e(D3,V7e),M(q9,V7e,null),e(Wc,TRr),e(Wc,X7e),e(X7e,MRr),b(f,WNe,u),b(f,_r,u),M(N9,_r,null),e(_r,ERr),e(_r,Qc),e(Qc,CRr),e(Qc,jY),e(jY,wRr),e(Qc,ARr),e(Qc,DY),e(DY,yRr),e(Qc,LRr),e(_r,xRr),e(_r,j9),e(j9,$Rr),e(j9,z7e),e(z7e,kRr),e(j9,SRr),e(_r,RRr),e(_r,Wt),M(D9,Wt,null),e(Wt,PRr),e(Wt,W7e),e(W7e,BRr),e(Wt,IRr),e(Wt,Hc),e(Hc,qRr),e(Hc,Q7e),e(Q7e,NRr),e(Hc,jRr),e(Hc,GY),e(GY,DRr),e(Hc,GRr),e(Wt,ORr),M(G3,Wt,null),e(_r,VRr),e(_r,Xr),M(G9,Xr,null),e(Xr,XRr),e(Xr,H7e),e(H7e,zRr),e(Xr,WRr),e(Xr,vn),e(vn,QRr),e(vn,U7e),e(U7e,HRr),e(vn,URr),e(vn,J7e),e(J7e,JRr),e(vn,YRr),e(vn,Y7e),e(Y7e,KRr),e(vn,ZRr),e(Xr,ePr),e(Xr,xe),e(xe,O3),e(O3,K7e),e(K7e,oPr),e(O3,rPr),e(O3,OY),e(OY,tPr),e(O3,aPr),e(xe,nPr),e(xe,V3),e(V3,Z7e),e(Z7e,sPr),e(V3,lPr),e(V3,VY),e(VY,iPr),e(V3,dPr),e(xe,cPr),e(xe,X3),e(X3,eMe),e(eMe,fPr),e(X3,mPr),e(X3,XY),e(XY,gPr),e(X3,hPr),e(xe,pPr),e(xe,z3),e(z3,oMe),e(oMe,_Pr),e(z3,uPr),e(z3,zY),e(zY,bPr),e(z3,vPr),e(xe,FPr),e(xe,W3),e(W3,rMe),e(rMe,TPr),e(W3,MPr),e(W3,WY),e(WY,EPr),e(W3,CPr),e(xe,wPr),e(xe,Q3),e(Q3,tMe),e(tMe,APr),e(Q3,yPr),e(Q3,QY),e(QY,LPr),e(Q3,xPr),e(xe,$Pr),e(xe,H3),e(H3,aMe),e(aMe,kPr),e(H3,SPr),e(H3,HY),e(HY,RPr),e(H3,PPr),e(xe,BPr),e(xe,U3),e(U3,nMe),e(nMe,IPr),e(U3,qPr),e(U3,UY),e(UY,NPr),e(U3,jPr),e(xe,DPr),e(xe,J3),e(J3,sMe),e(sMe,GPr),e(J3,OPr),e(J3,JY),e(JY,VPr),e(J3,XPr),e(xe,zPr),e(xe,Y3),e(Y3,lMe),e(lMe,WPr),e(Y3,QPr),e(Y3,YY),e(YY,HPr),e(Y3,UPr),e(Xr,JPr),M(K3,Xr,null),b(f,QNe,u),b(f,Uc,u),e(Uc,Z3),e(Z3,iMe),M(O9,iMe,null),e(Uc,YPr),e(Uc,dMe),e(dMe,KPr),b(f,HNe,u),b(f,ur,u),M(V9,ur,null),e(ur,ZPr),e(ur,Jc),e(Jc,eBr),e(Jc,KY),e(KY,oBr),e(Jc,rBr),e(Jc,ZY),e(ZY,tBr),e(Jc,aBr),e(ur,nBr),e(ur,X9),e(X9,sBr),e(X9,cMe),e(cMe,lBr),e(X9,iBr),e(ur,dBr),e(ur,Qt),M(z9,Qt,null),e(Qt,cBr),e(Qt,fMe),e(fMe,fBr),e(Qt,mBr),e(Qt,Yc),e(Yc,gBr),e(Yc,mMe),e(mMe,hBr),e(Yc,pBr),e(Yc,eK),e(eK,_Br),e(Yc,uBr),e(Qt,bBr),M(ew,Qt,null),e(ur,vBr),e(ur,zr),M(W9,zr,null),e(zr,FBr),e(zr,gMe),e(gMe,TBr),e(zr,MBr),e(zr,Fn),e(Fn,EBr),e(Fn,hMe),e(hMe,CBr),e(Fn,wBr),e(Fn,pMe),e(pMe,ABr),e(Fn,yBr),e(Fn,_Me),e(_Me,LBr),e(Fn,xBr),e(zr,$Br),e(zr,$e),e($e,ow),e(ow,uMe),e(uMe,kBr),e(ow,SBr),e(ow,oK),e(oK,RBr),e(ow,PBr),e($e,BBr),e($e,rw),e(rw,bMe),e(bMe,IBr),e(rw,qBr),e(rw,rK),e(rK,NBr),e(rw,jBr),e($e,DBr),e($e,tw),e(tw,vMe),e(vMe,GBr),e(tw,OBr),e(tw,tK),e(tK,VBr),e(tw,XBr),e($e,zBr),e($e,aw),e(aw,FMe),e(FMe,WBr),e(aw,QBr),e(aw,aK),e(aK,HBr),e(aw,UBr),e($e,JBr),e($e,nw),e(nw,TMe),e(TMe,YBr),e(nw,KBr),e(nw,nK),e(nK,ZBr),e(nw,eIr),e($e,oIr),e($e,sw),e(sw,MMe),e(MMe,rIr),e(sw,tIr),e(sw,sK),e(sK,aIr),e(sw,nIr),e($e,sIr),e($e,lw),e(lw,EMe),e(EMe,lIr),e(lw,iIr),e(lw,lK),e(lK,dIr),e(lw,cIr),e($e,fIr),e($e,iw),e(iw,CMe),e(CMe,mIr),e(iw,gIr),e(iw,iK),e(iK,hIr),e(iw,pIr),e($e,_Ir),e($e,dw),e(dw,wMe),e(wMe,uIr),e(dw,bIr),e(dw,dK),e(dK,vIr),e(dw,FIr),e($e,TIr),e($e,cw),e(cw,AMe),e(AMe,MIr),e(cw,EIr),e(cw,cK),e(cK,CIr),e(cw,wIr),e(zr,AIr),M(fw,zr,null),b(f,UNe,u),b(f,Kc,u),e(Kc,mw),e(mw,yMe),M(Q9,yMe,null),e(Kc,yIr),e(Kc,LMe),e(LMe,LIr),b(f,JNe,u),b(f,br,u),M(H9,br,null),e(br,xIr),e(br,Zc),e(Zc,$Ir),e(Zc,fK),e(fK,kIr),e(Zc,SIr),e(Zc,mK),e(mK,RIr),e(Zc,PIr),e(br,BIr),e(br,U9),e(U9,IIr),e(U9,xMe),e(xMe,qIr),e(U9,NIr),e(br,jIr),e(br,Ht),M(J9,Ht,null),e(Ht,DIr),e(Ht,$Me),e($Me,GIr),e(Ht,OIr),e(Ht,ef),e(ef,VIr),e(ef,kMe),e(kMe,XIr),e(ef,zIr),e(ef,gK),e(gK,WIr),e(ef,QIr),e(Ht,HIr),M(gw,Ht,null),e(br,UIr),e(br,Wr),M(Y9,Wr,null),e(Wr,JIr),e(Wr,SMe),e(SMe,YIr),e(Wr,KIr),e(Wr,Tn),e(Tn,ZIr),e(Tn,RMe),e(RMe,eqr),e(Tn,oqr),e(Tn,PMe),e(PMe,rqr),e(Tn,tqr),e(Tn,BMe),e(BMe,aqr),e(Tn,nqr),e(Wr,sqr),e(Wr,De),e(De,hw),e(hw,IMe),e(IMe,lqr),e(hw,iqr),e(hw,hK),e(hK,dqr),e(hw,cqr),e(De,fqr),e(De,pw),e(pw,qMe),e(qMe,mqr),e(pw,gqr),e(pw,pK),e(pK,hqr),e(pw,pqr),e(De,_qr),e(De,_w),e(_w,NMe),e(NMe,uqr),e(_w,bqr),e(_w,_K),e(_K,vqr),e(_w,Fqr),e(De,Tqr),e(De,uw),e(uw,jMe),e(jMe,Mqr),e(uw,Eqr),e(uw,uK),e(uK,Cqr),e(uw,wqr),e(De,Aqr),e(De,bw),e(bw,DMe),e(DMe,yqr),e(bw,Lqr),e(bw,bK),e(bK,xqr),e(bw,$qr),e(De,kqr),e(De,vw),e(vw,GMe),e(GMe,Sqr),e(vw,Rqr),e(vw,vK),e(vK,Pqr),e(vw,Bqr),e(De,Iqr),e(De,Fw),e(Fw,OMe),e(OMe,qqr),e(Fw,Nqr),e(Fw,FK),e(FK,jqr),e(Fw,Dqr),e(De,Gqr),e(De,Tw),e(Tw,VMe),e(VMe,Oqr),e(Tw,Vqr),e(Tw,TK),e(TK,Xqr),e(Tw,zqr),e(Wr,Wqr),M(Mw,Wr,null),b(f,YNe,u),b(f,of,u),e(of,Ew),e(Ew,XMe),M(K9,XMe,null),e(of,Qqr),e(of,zMe),e(zMe,Hqr),b(f,KNe,u),b(f,vr,u),M(Z9,vr,null),e(vr,Uqr),e(vr,rf),e(rf,Jqr),e(rf,MK),e(MK,Yqr),e(rf,Kqr),e(rf,EK),e(EK,Zqr),e(rf,eNr),e(vr,oNr),e(vr,ex),e(ex,rNr),e(ex,WMe),e(WMe,tNr),e(ex,aNr),e(vr,nNr),e(vr,Ut),M(ox,Ut,null),e(Ut,sNr),e(Ut,QMe),e(QMe,lNr),e(Ut,iNr),e(Ut,tf),e(tf,dNr),e(tf,HMe),e(HMe,cNr),e(tf,fNr),e(tf,CK),e(CK,mNr),e(tf,gNr),e(Ut,hNr),M(Cw,Ut,null),e(vr,pNr),e(vr,Qr),M(rx,Qr,null),e(Qr,_Nr),e(Qr,UMe),e(UMe,uNr),e(Qr,bNr),e(Qr,Mn),e(Mn,vNr),e(Mn,JMe),e(JMe,FNr),e(Mn,TNr),e(Mn,YMe),e(YMe,MNr),e(Mn,ENr),e(Mn,KMe),e(KMe,CNr),e(Mn,wNr),e(Qr,ANr),e(Qr,Ge),e(Ge,ww),e(ww,ZMe),e(ZMe,yNr),e(ww,LNr),e(ww,wK),e(wK,xNr),e(ww,$Nr),e(Ge,kNr),e(Ge,Aw),e(Aw,eEe),e(eEe,SNr),e(Aw,RNr),e(Aw,AK),e(AK,PNr),e(Aw,BNr),e(Ge,INr),e(Ge,yw),e(yw,oEe),e(oEe,qNr),e(yw,NNr),e(yw,yK),e(yK,jNr),e(yw,DNr),e(Ge,GNr),e(Ge,Lw),e(Lw,rEe),e(rEe,ONr),e(Lw,VNr),e(Lw,LK),e(LK,XNr),e(Lw,zNr),e(Ge,WNr),e(Ge,xw),e(xw,tEe),e(tEe,QNr),e(xw,HNr),e(xw,xK),e(xK,UNr),e(xw,JNr),e(Ge,YNr),e(Ge,$w),e($w,aEe),e(aEe,KNr),e($w,ZNr),e($w,$K),e($K,ejr),e($w,ojr),e(Ge,rjr),e(Ge,kw),e(kw,nEe),e(nEe,tjr),e(kw,ajr),e(kw,kK),e(kK,njr),e(kw,sjr),e(Ge,ljr),e(Ge,Sw),e(Sw,sEe),e(sEe,ijr),e(Sw,djr),e(Sw,SK),e(SK,cjr),e(Sw,fjr),e(Qr,mjr),M(Rw,Qr,null),b(f,ZNe,u),b(f,af,u),e(af,Pw),e(Pw,lEe),M(tx,lEe,null),e(af,gjr),e(af,iEe),e(iEe,hjr),b(f,eje,u),b(f,Fr,u),M(ax,Fr,null),e(Fr,pjr),e(Fr,nf),e(nf,_jr),e(nf,RK),e(RK,ujr),e(nf,bjr),e(nf,PK),e(PK,vjr),e(nf,Fjr),e(Fr,Tjr),e(Fr,nx),e(nx,Mjr),e(nx,dEe),e(dEe,Ejr),e(nx,Cjr),e(Fr,wjr),e(Fr,Jt),M(sx,Jt,null),e(Jt,Ajr),e(Jt,cEe),e(cEe,yjr),e(Jt,Ljr),e(Jt,sf),e(sf,xjr),e(sf,fEe),e(fEe,$jr),e(sf,kjr),e(sf,BK),e(BK,Sjr),e(sf,Rjr),e(Jt,Pjr),M(Bw,Jt,null),e(Fr,Bjr),e(Fr,Hr),M(lx,Hr,null),e(Hr,Ijr),e(Hr,mEe),e(mEe,qjr),e(Hr,Njr),e(Hr,En),e(En,jjr),e(En,gEe),e(gEe,Djr),e(En,Gjr),e(En,hEe),e(hEe,Ojr),e(En,Vjr),e(En,pEe),e(pEe,Xjr),e(En,zjr),e(Hr,Wjr),e(Hr,_Ee),e(_Ee,Iw),e(Iw,uEe),e(uEe,Qjr),e(Iw,Hjr),e(Iw,IK),e(IK,Ujr),e(Iw,Jjr),e(Hr,Yjr),M(qw,Hr,null),b(f,oje,u),b(f,lf,u),e(lf,Nw),e(Nw,bEe),M(ix,bEe,null),e(lf,Kjr),e(lf,vEe),e(vEe,Zjr),b(f,rje,u),b(f,Tr,u),M(dx,Tr,null),e(Tr,eDr),e(Tr,df),e(df,oDr),e(df,qK),e(qK,rDr),e(df,tDr),e(df,NK),e(NK,aDr),e(df,nDr),e(Tr,sDr),e(Tr,cx),e(cx,lDr),e(cx,FEe),e(FEe,iDr),e(cx,dDr),e(Tr,cDr),e(Tr,Yt),M(fx,Yt,null),e(Yt,fDr),e(Yt,TEe),e(TEe,mDr),e(Yt,gDr),e(Yt,cf),e(cf,hDr),e(cf,MEe),e(MEe,pDr),e(cf,_Dr),e(cf,jK),e(jK,uDr),e(cf,bDr),e(Yt,vDr),M(jw,Yt,null),e(Tr,FDr),e(Tr,Ur),M(mx,Ur,null),e(Ur,TDr),e(Ur,EEe),e(EEe,MDr),e(Ur,EDr),e(Ur,Cn),e(Cn,CDr),e(Cn,CEe),e(CEe,wDr),e(Cn,ADr),e(Cn,wEe),e(wEe,yDr),e(Cn,LDr),e(Cn,AEe),e(AEe,xDr),e(Cn,$Dr),e(Ur,kDr),e(Ur,gx),e(gx,Dw),e(Dw,yEe),e(yEe,SDr),e(Dw,RDr),e(Dw,DK),e(DK,PDr),e(Dw,BDr),e(gx,IDr),e(gx,Gw),e(Gw,LEe),e(LEe,qDr),e(Gw,NDr),e(Gw,GK),e(GK,jDr),e(Gw,DDr),e(Ur,GDr),M(Ow,Ur,null),b(f,tje,u),b(f,ff,u),e(ff,Vw),e(Vw,xEe),M(hx,xEe,null),e(ff,ODr),e(ff,$Ee),e($Ee,VDr),b(f,aje,u),b(f,Mr,u),M(px,Mr,null),e(Mr,XDr),e(Mr,mf),e(mf,zDr),e(mf,OK),e(OK,WDr),e(mf,QDr),e(mf,VK),e(VK,HDr),e(mf,UDr),e(Mr,JDr),e(Mr,_x),e(_x,YDr),e(_x,kEe),e(kEe,KDr),e(_x,ZDr),e(Mr,eGr),e(Mr,Kt),M(ux,Kt,null),e(Kt,oGr),e(Kt,SEe),e(SEe,rGr),e(Kt,tGr),e(Kt,gf),e(gf,aGr),e(gf,REe),e(REe,nGr),e(gf,sGr),e(gf,XK),e(XK,lGr),e(gf,iGr),e(Kt,dGr),M(Xw,Kt,null),e(Mr,cGr),e(Mr,Jr),M(bx,Jr,null),e(Jr,fGr),e(Jr,PEe),e(PEe,mGr),e(Jr,gGr),e(Jr,wn),e(wn,hGr),e(wn,BEe),e(BEe,pGr),e(wn,_Gr),e(wn,IEe),e(IEe,uGr),e(wn,bGr),e(wn,qEe),e(qEe,vGr),e(wn,FGr),e(Jr,TGr),e(Jr,NEe),e(NEe,zw),e(zw,jEe),e(jEe,MGr),e(zw,EGr),e(zw,zK),e(zK,CGr),e(zw,wGr),e(Jr,AGr),M(Ww,Jr,null),nje=!0},p(f,[u]){const vx={};u&2&&(vx.$$scope={dirty:u,ctx:f}),Mf.$set(vx);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),Eg.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),eh.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),$h.$set(OEe);const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),kh.$set(Fx);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),Jh.$set(VEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Yh.$set(An);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),ep.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),Q_.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),U_.$set(WEe);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),ju.$set(Tx);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),Gu.$set(QEe);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),w2.$set(Mx);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),y2.$set(HEe);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),c1.$set(Ex);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),m1.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),$1.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),S1.$set(YEe);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Ab.$set(hf);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),Lb.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),n4.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),l4.$set(eCe);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),h4.$set(Cx);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),_4.$set(oCe);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),Y4.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),Z4.$set(tCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),D5.$set(et);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),O5.$set(wx);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),z5.$set(aCe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Q5.$set(Ax);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),lv.$set(nCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),dv.$set(ot);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),mv.$set(sCe);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),hv.$set(pf);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),wv.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),yv.$set(iCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Pv.$set(y);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),Iv.$set(Qw);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),Qv.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),Uv.$set(cCe);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),Zv.$set(Hw);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),oF.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),iF.$set(mCe);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),cF.$set(Uw);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),pF.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),uF.$set(hCe);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),TF.$set(Jw);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),EF.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),AF.$set(_Ce);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),LF.$set(Yw);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),PF.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),IF.$set(bCe);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),jF.$set(Kw);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),GF.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),RT.$set(FCe);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),BT.$set(Zw);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),n7.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),l7.$set(MCe);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),F7.$set(e0);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),M7.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),y7.$set(CCe);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),x7.$set(o0);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),J7.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),K7.$set(ACe);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),dM.$set(r0);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),fM.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),NM.$set(LCe);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),DM.$set(t0);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),aE.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),sE.$set($Ce);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),dE.$set(a0);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),fE.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),gE.$set(SCe);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),pE.$set(n0);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),IE.$set(RCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),NE.$set(PCe);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),nC.$set(s0);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),lC.$set(BCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),dC.$set(ICe);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),fC.$set(l0);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),gC.$set(qCe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),pC.$set(NCe);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),GC.$set(i0);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),VC.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),ZC.$set(DCe);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),o3.$set(d0);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),h3.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),_3.$set(OCe);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),y3.$set(c0);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),x3.$set(VCe);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),j3.$set(XCe);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),G3.$set(f0);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),K3.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),ew.$set(WCe);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),fw.$set(m0);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),gw.$set(QCe);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),Mw.$set(HCe);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),Cw.$set(g0);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),Rw.$set(UCe);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),Bw.$set(JCe);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),qw.$set(h0);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),jw.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),Ow.$set(KCe);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),Xw.$set(p0);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),Ww.$set(ZCe)},i(f){nje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(Mf.$$.fragment,f),E(_6.$$.fragment,f),E(u6.$$.fragment,f),E(F6.$$.fragment,f),E(Eg.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(A6.$$.fragment,f),E(eh.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(S6.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(B6.$$.fragment,f),E(N6.$$.fragment,f),E(Jh.$$.fragment,f),E(Yh.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(V6.$$.fragment,f),E(ep.$$.fragment,f),E(X6.$$.fragment,f),E(Q_.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(U_.$$.fragment,f),E(U6.$$.fragment,f),E(ju.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(Z6.$$.fragment,f),E(Gu.$$.fragment,f),E(ey.$$.fragment,f),E(w2.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(y2.$$.fragment,f),E(ny.$$.fragment,f),E(c1.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(m1.$$.fragment,f),E(cy.$$.fragment,f),E($1.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(S1.$$.fragment,f),E(py.$$.fragment,f),E(Ab.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(Lb.$$.fragment,f),E(Fy.$$.fragment,f),E(n4.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(l4.$$.fragment,f),E(wy.$$.fragment,f),E(h4.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(_4.$$.fragment,f),E($y.$$.fragment,f),E(Y4.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(Z4.$$.fragment,f),E(By.$$.fragment,f),E(D5.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(O5.$$.fragment,f),E(Dy.$$.fragment,f),E(z5.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Q5.$$.fragment,f),E(zy.$$.fragment,f),E(lv.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(dv.$$.fragment,f),E(Jy.$$.fragment,f),E(mv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(hv.$$.fragment,f),E(oL.$$.fragment,f),E(wv.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(yv.$$.fragment,f),E(sL.$$.fragment,f),E(Pv.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(Iv.$$.fragment,f),E(fL.$$.fragment,f),E(Qv.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(Uv.$$.fragment,f),E(_L.$$.fragment,f),E(Zv.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(oF.$$.fragment,f),E(ML.$$.fragment,f),E(iF.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(cF.$$.fragment,f),E(yL.$$.fragment,f),E(pF.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(uF.$$.fragment,f),E(SL.$$.fragment,f),E(TF.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(EF.$$.fragment,f),E(NL.$$.fragment,f),E(AF.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(LF.$$.fragment,f),E(VL.$$.fragment,f),E(PF.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(IF.$$.fragment,f),E(HL.$$.fragment,f),E(jF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(GF.$$.fragment,f),E(ZL.$$.fragment,f),E(RT.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(BT.$$.fragment,f),E(a8.$$.fragment,f),E(n7.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(l7.$$.fragment,f),E(d8.$$.fragment,f),E(F7.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(M7.$$.fragment,f),E(h8.$$.fragment,f),E(y7.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(x7.$$.fragment,f),E(v8.$$.fragment,f),E(J7.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(K7.$$.fragment,f),E(C8.$$.fragment,f),E(dM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(fM.$$.fragment,f),E(x8.$$.fragment,f),E(NM.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(DM.$$.fragment,f),E(P8.$$.fragment,f),E(aE.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(sE.$$.fragment,f),E(j8.$$.fragment,f),E(dE.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(fE.$$.fragment,f),E(z8.$$.fragment,f),E(gE.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(pE.$$.fragment,f),E(J8.$$.fragment,f),E(IE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(NE.$$.fragment,f),E(o9.$$.fragment,f),E(nC.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(lC.$$.fragment,f),E(s9.$$.fragment,f),E(dC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(fC.$$.fragment,f),E(f9.$$.fragment,f),E(gC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(pC.$$.fragment,f),E(_9.$$.fragment,f),E(GC.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(VC.$$.fragment,f),E(T9.$$.fragment,f),E(ZC.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(o3.$$.fragment,f),E(A9.$$.fragment,f),E(h3.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(_3.$$.fragment,f),E(k9.$$.fragment,f),E(y3.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(x3.$$.fragment,f),E(I9.$$.fragment,f),E(j3.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(G3.$$.fragment,f),E(G9.$$.fragment,f),E(K3.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(ew.$$.fragment,f),E(W9.$$.fragment,f),E(fw.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(gw.$$.fragment,f),E(Y9.$$.fragment,f),E(Mw.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(Cw.$$.fragment,f),E(rx.$$.fragment,f),E(Rw.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(Bw.$$.fragment,f),E(lx.$$.fragment,f),E(qw.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(jw.$$.fragment,f),E(mx.$$.fragment,f),E(Ow.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(Xw.$$.fragment,f),E(bx.$$.fragment,f),E(Ww.$$.fragment,f),nje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(Mf.$$.fragment,f),C(_6.$$.fragment,f),C(u6.$$.fragment,f),C(F6.$$.fragment,f),C(Eg.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(A6.$$.fragment,f),C(eh.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(S6.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(B6.$$.fragment,f),C(N6.$$.fragment,f),C(Jh.$$.fragment,f),C(Yh.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(V6.$$.fragment,f),C(ep.$$.fragment,f),C(X6.$$.fragment,f),C(Q_.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(U_.$$.fragment,f),C(U6.$$.fragment,f),C(ju.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(Z6.$$.fragment,f),C(Gu.$$.fragment,f),C(ey.$$.fragment,f),C(w2.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(y2.$$.fragment,f),C(ny.$$.fragment,f),C(c1.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(m1.$$.fragment,f),C(cy.$$.fragment,f),C($1.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(S1.$$.fragment,f),C(py.$$.fragment,f),C(Ab.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(Lb.$$.fragment,f),C(Fy.$$.fragment,f),C(n4.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(l4.$$.fragment,f),C(wy.$$.fragment,f),C(h4.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(_4.$$.fragment,f),C($y.$$.fragment,f),C(Y4.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(Z4.$$.fragment,f),C(By.$$.fragment,f),C(D5.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(O5.$$.fragment,f),C(Dy.$$.fragment,f),C(z5.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Q5.$$.fragment,f),C(zy.$$.fragment,f),C(lv.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(dv.$$.fragment,f),C(Jy.$$.fragment,f),C(mv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(hv.$$.fragment,f),C(oL.$$.fragment,f),C(wv.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(yv.$$.fragment,f),C(sL.$$.fragment,f),C(Pv.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(Iv.$$.fragment,f),C(fL.$$.fragment,f),C(Qv.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(Uv.$$.fragment,f),C(_L.$$.fragment,f),C(Zv.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(oF.$$.fragment,f),C(ML.$$.fragment,f),C(iF.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(cF.$$.fragment,f),C(yL.$$.fragment,f),C(pF.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(uF.$$.fragment,f),C(SL.$$.fragment,f),C(TF.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(EF.$$.fragment,f),C(NL.$$.fragment,f),C(AF.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(LF.$$.fragment,f),C(VL.$$.fragment,f),C(PF.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(IF.$$.fragment,f),C(HL.$$.fragment,f),C(jF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(GF.$$.fragment,f),C(ZL.$$.fragment,f),C(RT.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(BT.$$.fragment,f),C(a8.$$.fragment,f),C(n7.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(l7.$$.fragment,f),C(d8.$$.fragment,f),C(F7.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(M7.$$.fragment,f),C(h8.$$.fragment,f),C(y7.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(x7.$$.fragment,f),C(v8.$$.fragment,f),C(J7.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(K7.$$.fragment,f),C(C8.$$.fragment,f),C(dM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(fM.$$.fragment,f),C(x8.$$.fragment,f),C(NM.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(DM.$$.fragment,f),C(P8.$$.fragment,f),C(aE.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(sE.$$.fragment,f),C(j8.$$.fragment,f),C(dE.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(fE.$$.fragment,f),C(z8.$$.fragment,f),C(gE.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(pE.$$.fragment,f),C(J8.$$.fragment,f),C(IE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(NE.$$.fragment,f),C(o9.$$.fragment,f),C(nC.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(lC.$$.fragment,f),C(s9.$$.fragment,f),C(dC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(fC.$$.fragment,f),C(f9.$$.fragment,f),C(gC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(pC.$$.fragment,f),C(_9.$$.fragment,f),C(GC.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(VC.$$.fragment,f),C(T9.$$.fragment,f),C(ZC.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(o3.$$.fragment,f),C(A9.$$.fragment,f),C(h3.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(_3.$$.fragment,f),C(k9.$$.fragment,f),C(y3.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(x3.$$.fragment,f),C(I9.$$.fragment,f),C(j3.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(G3.$$.fragment,f),C(G9.$$.fragment,f),C(K3.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(ew.$$.fragment,f),C(W9.$$.fragment,f),C(fw.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(gw.$$.fragment,f),C(Y9.$$.fragment,f),C(Mw.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(Cw.$$.fragment,f),C(rx.$$.fragment,f),C(Rw.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(Bw.$$.fragment,f),C(lx.$$.fragment,f),C(qw.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(jw.$$.fragment,f),C(mx.$$.fragment,f),C(Ow.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(Xw.$$.fragment,f),C(bx.$$.fragment,f),C(Ww.$$.fragment,f),nje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(rt),f&&t(je),f&&t(We),f&&t(vf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(rqe),f&&t(Fi),w(h6),f&&t(tqe),f&&t(kn),f&&t(aqe),w(p6,f),f&&t(nqe),f&&t(j$),f&&t(sqe),w(Mf,f),f&&t(lqe),f&&t(Ti),w(_6),f&&t(iqe),f&&t(Co),w(u6),w(F6),w(Eg),w(T6),f&&t(dqe),f&&t(Ei),w(M6),f&&t(cqe),f&&t(wo),w(E6),w(A6),w(eh),w(y6),f&&t(fqe),f&&t(Ci),w(L6),f&&t(mqe),f&&t(Ao),w(x6),w(S6),w($h),w(kh),w(R6),f&&t(gqe),f&&t(wi),w(P6),f&&t(hqe),f&&t(yo),w(B6),w(N6),w(Jh),w(Yh),w(j6),f&&t(pqe),f&&t(yi),w(D6),f&&t(_qe),f&&t(Lo),w(G6),w(V6),w(ep),w(X6),w(Q_),f&&t(uqe),f&&t($i),w(z6),f&&t(bqe),f&&t(xo),w(W6),w(H6),w(U_),w(U6),w(ju),f&&t(vqe),f&&t(Ri),w(J6),f&&t(Fqe),f&&t($o),w(Y6),w(Z6),w(Gu),w(ey),w(w2),f&&t(Tqe),f&&t(Ii),w(oy),f&&t(Mqe),f&&t(ko),w(ry),w(ay),w(y2),w(ny),w(c1),f&&t(Eqe),f&&t(ji),w(sy),f&&t(Cqe),f&&t(So),w(ly),w(dy),w(m1),w(cy),w($1),f&&t(wqe),f&&t(Oi),w(fy),f&&t(Aqe),f&&t(Ro),w(my),w(hy),w(S1),w(py),w(Ab),f&&t(yqe),f&&t(zi),w(_y),f&&t(Lqe),f&&t(Po),w(uy),w(vy),w(Lb),w(Fy),w(n4),f&&t(xqe),f&&t(Hi),w(Ty),f&&t($qe),f&&t(Bo),w(My),w(Cy),w(l4),w(wy),w(h4),f&&t(kqe),f&&t(Yi),w(Ay),f&&t(Sqe),f&&t(Io),w(yy),w(xy),w(_4),w($y),w(Y4),f&&t(Rqe),f&&t(ed),w(ky),f&&t(Pqe),f&&t(qo),w(Sy),w(Py),w(Z4),w(By),w(D5),f&&t(Bqe),f&&t(td),w(Iy),f&&t(Iqe),f&&t(No),w(qy),w(jy),w(O5),w(Dy),w(z5),f&&t(qqe),f&&t(sd),w(Gy),f&&t(Nqe),f&&t(jo),w(Oy),w(Xy),w(Q5),w(zy),w(lv),f&&t(jqe),f&&t(dd),w(Wy),f&&t(Dqe),f&&t(Do),w(Qy),w(Uy),w(dv),w(Jy),w(mv),f&&t(Gqe),f&&t(md),w(Yy),f&&t(Oqe),f&&t(Go),w(Ky),w(eL),w(hv),w(oL),w(wv),f&&t(Vqe),f&&t(pd),w(rL),f&&t(Xqe),f&&t(Oo),w(tL),w(nL),w(yv),w(sL),w(Pv),f&&t(zqe),f&&t(bd),w(lL),f&&t(Wqe),f&&t(Vo),w(iL),w(cL),w(Iv),w(fL),w(Qv),f&&t(Qqe),f&&t(Td),w(mL),f&&t(Hqe),f&&t(Xo),w(gL),w(pL),w(Uv),w(_L),w(Zv),f&&t(Uqe),f&&t(Cd),w(bL),f&&t(Jqe),f&&t(zo),w(vL),w(TL),w(oF),w(ML),w(iF),f&&t(Yqe),f&&t(yd),w(EL),f&&t(Kqe),f&&t(Wo),w(CL),w(AL),w(cF),w(yL),w(pF),f&&t(Zqe),f&&t(kd),w(LL),f&&t(eNe),f&&t(Qo),w(xL),w(kL),w(uF),w(SL),w(TF),f&&t(oNe),f&&t(Pd),w(PL),f&&t(rNe),f&&t(Ho),w(BL),w(qL),w(EF),w(NL),w(AF),f&&t(tNe),f&&t(qd),w(jL),f&&t(aNe),f&&t(Uo),w(DL),w(OL),w(LF),w(VL),w(PF),f&&t(nNe),f&&t(Dd),w(XL),f&&t(sNe),f&&t(Jo),w(zL),w(QL),w(IF),w(HL),w(jF),f&&t(lNe),f&&t(Vd),w(UL),f&&t(iNe),f&&t(Yo),w(JL),w(KL),w(GF),w(ZL),w(RT),f&&t(dNe),f&&t(Wd),w(e8),f&&t(cNe),f&&t(Ko),w(o8),w(t8),w(BT),w(a8),w(n7),f&&t(fNe),f&&t(Ud),w(n8),f&&t(mNe),f&&t(Zo),w(s8),w(i8),w(l7),w(d8),w(F7),f&&t(gNe),f&&t(Kd),w(c8),f&&t(hNe),f&&t(er),w(f8),w(g8),w(M7),w(h8),w(y7),f&&t(pNe),f&&t(oc),w(p8),f&&t(_Ne),f&&t(or),w(_8),w(b8),w(x7),w(v8),w(J7),f&&t(uNe),f&&t(ac),w(F8),f&&t(bNe),f&&t(rr),w(T8),w(E8),w(K7),w(C8),w(dM),f&&t(vNe),f&&t(lc),w(w8),f&&t(FNe),f&&t(tr),w(A8),w(L8),w(fM),w(x8),w(NM),f&&t(TNe),f&&t(cc),w($8),f&&t(MNe),f&&t(ar),w(k8),w(R8),w(DM),w(P8),w(aE),f&&t(ENe),f&&t(gc),w(B8),f&&t(CNe),f&&t(nr),w(I8),w(N8),w(sE),w(j8),w(dE),f&&t(wNe),f&&t(_c),w(G8),f&&t(ANe),f&&t(sr),w(O8),w(X8),w(fE),w(z8),w(gE),f&&t(yNe),f&&t(vc),w(W8),f&&t(LNe),f&&t(lr),w(Q8),w(U8),w(pE),w(J8),w(IE),f&&t(xNe),f&&t(Mc),w(Y8),f&&t($Ne),f&&t(ir),w(K8),w(e9),w(NE),w(o9),w(nC),f&&t(kNe),f&&t(wc),w(r9),f&&t(SNe),f&&t(dr),w(t9),w(n9),w(lC),w(s9),w(dC),f&&t(RNe),f&&t(Lc),w(l9),f&&t(PNe),f&&t(cr),w(i9),w(c9),w(fC),w(f9),w(gC),f&&t(BNe),f&&t(kc),w(m9),f&&t(INe),f&&t(fr),w(g9),w(p9),w(pC),w(_9),w(GC),f&&t(qNe),f&&t(Pc),w(u9),f&&t(NNe),f&&t(mr),w(b9),w(F9),w(VC),w(T9),w(ZC),f&&t(jNe),f&&t(qc),w(M9),f&&t(DNe),f&&t(gr),w(E9),w(w9),w(o3),w(A9),w(h3),f&&t(GNe),f&&t(Dc),w(y9),f&&t(ONe),f&&t(hr),w(L9),w($9),w(_3),w(k9),w(y3),f&&t(VNe),f&&t(Vc),w(S9),f&&t(XNe),f&&t(pr),w(R9),w(B9),w(x3),w(I9),w(j3),f&&t(zNe),f&&t(Wc),w(q9),f&&t(WNe),f&&t(_r),w(N9),w(D9),w(G3),w(G9),w(K3),f&&t(QNe),f&&t(Uc),w(O9),f&&t(HNe),f&&t(ur),w(V9),w(z9),w(ew),w(W9),w(fw),f&&t(UNe),f&&t(Kc),w(Q9),f&&t(JNe),f&&t(br),w(H9),w(J9),w(gw),w(Y9),w(Mw),f&&t(YNe),f&&t(of),w(K9),f&&t(KNe),f&&t(vr),w(Z9),w(ox),w(Cw),w(rx),w(Rw),f&&t(ZNe),f&&t(af),w(tx),f&&t(eje),f&&t(Fr),w(ax),w(sx),w(Bw),w(lx),w(qw),f&&t(oje),f&&t(lf),w(ix),f&&t(rje),f&&t(Tr),w(dx),w(fx),w(jw),w(mx),w(Ow),f&&t(tje),f&&t(ff),w(hx),f&&t(aje),f&&t(Mr),w(px),w(ux),w(Xw),w(bx),w(Ww)}}}const Ixt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function qxt(L){return q8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Xxt extends R8t{constructor(g){super();P8t(this,g,qxt,Bxt,B8t,{})}}export{Xxt as default,Ixt as metadata};
